<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (95,501 samples, 0.15%)</title><rect x="7.2250%" y="117" width="0.1509%" height="15" fill="rgb(227,0,7)"/><text x="7.4750%" y="127.50"></text></g><g><title>item_attrs (99,560 samples, 0.16%)</title><rect x="7.6397%" y="85" width="0.1573%" height="15" fill="rgb(217,0,24)"/><text x="7.8897%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,210 samples, 0.15%)</title><rect x="7.6450%" y="69" width="0.1520%" height="15" fill="rgb(221,193,54)"/><text x="7.8950%" y="79.50"></text></g><g><title>codegen_fn_attrs (141,960 samples, 0.22%)</title><rect x="7.5811%" y="101" width="0.2243%" height="15" fill="rgb(248,212,6)"/><text x="7.8311%" y="111.50"></text></g><g><title>adt_drop_tys (101,362 samples, 0.16%)</title><rect x="9.1904%" y="69" width="0.1602%" height="15" fill="rgb(208,68,35)"/><text x="9.4404%" y="79.50"></text></g><g><title>is_copy_raw (159,761 samples, 0.25%)</title><rect x="9.3506%" y="69" width="0.2525%" height="15" fill="rgb(232,128,0)"/><text x="9.6006%" y="79.50"></text></g><g><title>evaluate_obligation (132,501 samples, 0.21%)</title><rect x="9.3936%" y="53" width="0.2094%" height="15" fill="rgb(207,160,47)"/><text x="9.6436%" y="63.50"></text></g><g><title>needs_drop_raw (292,933 samples, 0.46%)</title><rect x="9.1469%" y="85" width="0.4629%" height="15" fill="rgb(228,23,34)"/><text x="9.3969%" y="95.50"></text></g><g><title>impl_parent (163,881 samples, 0.26%)</title><rect x="10.0568%" y="53" width="0.2590%" height="15" fill="rgb(218,30,26)"/><text x="10.3068%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (114,421 samples, 0.18%)</title><rect x="10.1350%" y="37" width="0.1808%" height="15" fill="rgb(220,122,19)"/><text x="10.3850%" y="47.50"></text></g><g><title>specialization_graph_of (745,858 samples, 1.18%)</title><rect x="9.7235%" y="69" width="1.1787%" height="15" fill="rgb(250,228,42)"/><text x="9.9735%" y="79.50"></text></g><g><title>impl_trait_ref (371,075 samples, 0.59%)</title><rect x="10.3158%" y="53" width="0.5864%" height="15" fill="rgb(240,193,28)"/><text x="10.5658%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (321,015 samples, 0.51%)</title><rect x="10.3949%" y="37" width="0.5073%" height="15" fill="rgb(216,20,37)"/><text x="10.6449%" y="47.50"></text></g><g><title>resolve_instance (835,489 samples, 1.32%)</title><rect x="9.6098%" y="85" width="1.3204%" height="15" fill="rgb(206,188,39)"/><text x="9.8598%" y="95.50"></text></g><g><title>thir_body (289,643 samples, 0.46%)</title><rect x="10.9393%" y="85" width="0.4577%" height="15" fill="rgb(217,207,13)"/><text x="11.1893%" y="95.50"></text></g><g><title>mir_const (2,927,983 samples, 4.63%)</title><rect x="6.7814%" y="133" width="4.6273%" height="15" fill="rgb(231,73,38)"/><text x="7.0314%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (2,551,819 samples, 4.03%)</title><rect x="7.3759%" y="117" width="4.0328%" height="15" fill="rgb(225,20,46)"/><text x="7.6259%" y="127.50">unsa..</text></g><g><title>mir_built (2,280,026 samples, 3.60%)</title><rect x="7.8055%" y="101" width="3.6033%" height="15" fill="rgb(210,31,41)"/><text x="8.0555%" y="111.50">mir_..</text></g><g><title>mir_promoted (3,206,696 samples, 5.07%)</title><rect x="6.3580%" y="149" width="5.0677%" height="15" fill="rgb(221,200,47)"/><text x="6.6080%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (102,691 samples, 0.16%)</title><rect x="11.4257%" y="149" width="0.1623%" height="15" fill="rgb(226,26,5)"/><text x="11.6757%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (77,510 samples, 0.12%)</title><rect x="11.5880%" y="149" width="0.1225%" height="15" fill="rgb(249,33,26)"/><text x="11.8380%" y="159.50"></text></g><g><title>type_op_prove_predicate (514,059 samples, 0.81%)</title><rect x="11.7577%" y="149" width="0.8124%" height="15" fill="rgb(235,183,28)"/><text x="12.0077%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,112,570 samples, 11.24%)</title><rect x="1.3351%" y="181" width="11.2404%" height="15" fill="rgb(221,5,38)"/><text x="1.5851%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (7,093,670 samples, 11.21%)</title><rect x="1.3649%" y="165" width="11.2105%" height="15" fill="rgb(247,18,42)"/><text x="1.6149%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (125,941 samples, 0.20%)</title><rect x="12.5844%" y="181" width="0.1990%" height="15" fill="rgb(241,131,45)"/><text x="12.8344%" y="191.50"></text></g><g><title>get_lang_items (87,361 samples, 0.14%)</title><rect x="13.1669%" y="133" width="0.1381%" height="15" fill="rgb(249,31,29)"/><text x="13.4169%" y="143.50"></text></g><g><title>codegen_fn_attrs (90,651 samples, 0.14%)</title><rect x="13.4302%" y="117" width="0.1433%" height="15" fill="rgb(225,111,53)"/><text x="13.6802%" y="127.50"></text></g><g><title>should_inherit_track_caller (172,842 samples, 0.27%)</title><rect x="13.3050%" y="133" width="0.2732%" height="15" fill="rgb(238,160,17)"/><text x="13.5550%" y="143.50"></text></g><g><title>codegen_fn_attrs (355,134 samples, 0.56%)</title><rect x="13.0537%" y="149" width="0.5612%" height="15" fill="rgb(214,148,48)"/><text x="13.3037%" y="159.50"></text></g><g><title>check_mod_attrs (503,145 samples, 0.80%)</title><rect x="12.8201%" y="165" width="0.7951%" height="15" fill="rgb(232,36,49)"/><text x="13.0701%" y="175.50"></text></g><g><title>lookup_deprecation_entry (114,340 samples, 0.18%)</title><rect x="13.9834%" y="149" width="0.1807%" height="15" fill="rgb(209,103,24)"/><text x="14.2334%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (341,354 samples, 0.54%)</title><rect x="13.7728%" y="165" width="0.5395%" height="15" fill="rgb(229,88,8)"/><text x="14.0228%" y="175.50"></text></g><g><title>misc_checking_1 (1,002,961 samples, 1.59%)</title><rect x="12.7841%" y="181" width="1.5850%" height="15" fill="rgb(213,181,19)"/><text x="13.0341%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (181,412 samples, 0.29%)</title><rect x="14.3717%" y="165" width="0.2867%" height="15" fill="rgb(254,191,54)"/><text x="14.6217%" y="175.50"></text></g><g><title>check_mod_liveness (146,402 samples, 0.23%)</title><rect x="14.4270%" y="149" width="0.2314%" height="15" fill="rgb(241,83,37)"/><text x="14.6770%" y="159.50"></text></g><g><title>misc_checking_2 (559,576 samples, 0.88%)</title><rect x="14.3691%" y="181" width="0.8843%" height="15" fill="rgb(233,36,39)"/><text x="14.6191%" y="191.50"></text></g><g><title>match_checking (376,504 samples, 0.60%)</title><rect x="14.6584%" y="165" width="0.5950%" height="15" fill="rgb(226,3,54)"/><text x="14.9084%" y="175.50"></text></g><g><title>check_match (368,704 samples, 0.58%)</title><rect x="14.6707%" y="149" width="0.5827%" height="15" fill="rgb(245,192,40)"/><text x="14.9207%" y="159.50"></text></g><g><title>death_checking (229,433 samples, 0.36%)</title><rect x="15.3441%" y="165" width="0.3626%" height="15" fill="rgb(238,167,29)"/><text x="15.5941%" y="175.50"></text></g><g><title>item_attrs (119,251 samples, 0.19%)</title><rect x="15.5182%" y="149" width="0.1885%" height="15" fill="rgb(232,182,51)"/><text x="15.7682%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (117,931 samples, 0.19%)</title><rect x="15.5203%" y="133" width="0.1864%" height="15" fill="rgb(231,60,39)"/><text x="15.7703%" y="143.50"></text></g><g><title>crate_lints (1,499,407 samples, 2.37%)</title><rect x="15.7087%" y="149" width="2.3696%" height="15" fill="rgb(208,69,12)"/><text x="15.9587%" y="159.50">cr..</text></g><g><title>type_of (998,853 samples, 1.58%)</title><rect x="16.4997%" y="133" width="1.5785%" height="15" fill="rgb(235,93,37)"/><text x="16.7497%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (765,160 samples, 1.21%)</title><rect x="16.8690%" y="117" width="1.2092%" height="15" fill="rgb(213,116,39)"/><text x="17.1190%" y="127.50"></text></g><g><title>lint_checking (1,645,648 samples, 2.60%)</title><rect x="15.7066%" y="165" width="2.6007%" height="15" fill="rgb(222,207,29)"/><text x="15.9566%" y="175.50">li..</text></g><g><title>module_lints (144,961 samples, 0.23%)</title><rect x="18.0783%" y="149" width="0.2291%" height="15" fill="rgb(206,96,30)"/><text x="18.3283%" y="159.50"></text></g><g><title>lint_mod (143,241 samples, 0.23%)</title><rect x="18.0810%" y="133" width="0.2264%" height="15" fill="rgb(218,138,4)"/><text x="18.3310%" y="143.50"></text></g><g><title>privacy_access_levels (84,191 samples, 0.13%)</title><rect x="18.3074%" y="165" width="0.1331%" height="15" fill="rgb(250,191,14)"/><text x="18.5574%" y="175.50"></text></g><g><title>privacy_checking_modules (226,303 samples, 0.36%)</title><rect x="18.4404%" y="165" width="0.3576%" height="15" fill="rgb(239,60,40)"/><text x="18.6904%" y="175.50"></text></g><g><title>check_mod_privacy (224,983 samples, 0.36%)</title><rect x="18.4425%" y="149" width="0.3556%" height="15" fill="rgb(206,27,48)"/><text x="18.6925%" y="159.50"></text></g><g><title>misc_checking_3 (2,257,945 samples, 3.57%)</title><rect x="15.2534%" y="181" width="3.5684%" height="15" fill="rgb(225,35,8)"/><text x="15.5034%" y="191.50">misc..</text></g><g><title>impl_trait_ref (145,852 samples, 0.23%)</title><rect x="19.4611%" y="85" width="0.2305%" height="15" fill="rgb(250,213,24)"/><text x="19.7111%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (127,042 samples, 0.20%)</title><rect x="19.4908%" y="69" width="0.2008%" height="15" fill="rgb(247,123,22)"/><text x="19.7408%" y="79.50"></text></g><g><title>adt_destructor (493,426 samples, 0.78%)</title><rect x="18.9489%" y="133" width="0.7798%" height="15" fill="rgb(231,138,38)"/><text x="19.1989%" y="143.50"></text></g><g><title>coherent_trait (486,556 samples, 0.77%)</title><rect x="18.9598%" y="117" width="0.7689%" height="15" fill="rgb(231,145,46)"/><text x="19.2098%" y="127.50"></text></g><g><title>specialization_graph_of (484,776 samples, 0.77%)</title><rect x="18.9626%" y="101" width="0.7661%" height="15" fill="rgb(251,118,11)"/><text x="19.2126%" y="111.50"></text></g><g><title>param_env (106,981 samples, 0.17%)</title><rect x="19.7287%" y="133" width="0.1691%" height="15" fill="rgb(217,147,25)"/><text x="19.9787%" y="143.50"></text></g><g><title>impl_parent (2,298,495 samples, 3.63%)</title><rect x="25.4107%" y="117" width="3.6324%" height="15" fill="rgb(247,81,37)"/><text x="25.6607%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (1,297,867 samples, 2.05%)</title><rect x="26.9921%" y="101" width="2.0511%" height="15" fill="rgb(209,12,38)"/><text x="27.2421%" y="111.50">m..</text></g><g><title>impl_trait_ref (5,129,610 samples, 8.11%)</title><rect x="29.0432%" y="117" width="8.1066%" height="15" fill="rgb(227,1,9)"/><text x="29.2932%" y="127.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,973,325 samples, 6.28%)</title><rect x="30.8705%" y="101" width="6.2793%" height="15" fill="rgb(248,47,43)"/><text x="31.1205%" y="111.50">metadata..</text></g><g><title>coherent_trait (12,351,757 samples, 19.52%)</title><rect x="18.8980%" y="149" width="19.5202%" height="15" fill="rgb(221,10,30)"/><text x="19.1480%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (11,719,130 samples, 18.52%)</title><rect x="19.8978%" y="133" width="18.5204%" height="15" fill="rgb(210,229,1)"/><text x="20.1478%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (800,378 samples, 1.26%)</title><rect x="37.1533%" y="117" width="1.2649%" height="15" fill="rgb(222,148,37)"/><text x="37.4033%" y="127.50"></text></g><g><title>implementations_of_trait (194,711 samples, 0.31%)</title><rect x="38.1105%" y="101" width="0.3077%" height="15" fill="rgb(234,67,33)"/><text x="38.3605%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (159,311 samples, 0.25%)</title><rect x="38.1664%" y="85" width="0.2518%" height="15" fill="rgb(247,98,35)"/><text x="38.4164%" y="95.50"></text></g><g><title>coherence_checking (12,401,408 samples, 19.60%)</title><rect x="18.8711%" y="165" width="19.5987%" height="15" fill="rgb(247,138,52)"/><text x="19.1211%" y="175.50">coherence_checking</text></g><g><title>adt_def (65,040 samples, 0.10%)</title><rect x="45.7229%" y="101" width="0.1028%" height="15" fill="rgb(213,79,30)"/><text x="45.9729%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (63,580 samples, 0.10%)</title><rect x="45.7252%" y="85" width="0.1005%" height="15" fill="rgb(246,177,23)"/><text x="45.9752%" y="95.50"></text></g><g><title>adt_sized_constraint (131,202 samples, 0.21%)</title><rect x="45.7127%" y="117" width="0.2073%" height="15" fill="rgb(230,62,27)"/><text x="45.9627%" y="127.50"></text></g><g><title>associated_item (325,341 samples, 0.51%)</title><rect x="46.1078%" y="101" width="0.5142%" height="15" fill="rgb(216,154,8)"/><text x="46.3578%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (250,941 samples, 0.40%)</title><rect x="46.2254%" y="85" width="0.3966%" height="15" fill="rgb(244,35,45)"/><text x="46.4754%" y="95.50"></text></g><g><title>associated_items (462,093 samples, 0.73%)</title><rect x="45.9221%" y="117" width="0.7303%" height="15" fill="rgb(251,115,12)"/><text x="46.1721%" y="127.50"></text></g><g><title>adt_dtorck_constraint (103,631 samples, 0.16%)</title><rect x="46.8628%" y="85" width="0.1638%" height="15" fill="rgb(240,54,50)"/><text x="47.1128%" y="95.50"></text></g><g><title>adt_dtorck_constraint (161,841 samples, 0.26%)</title><rect x="46.8012%" y="101" width="0.2558%" height="15" fill="rgb(233,84,52)"/><text x="47.0512%" y="111.50"></text></g><g><title>dropck_outlives (246,441 samples, 0.39%)</title><rect x="46.6842%" y="117" width="0.3895%" height="15" fill="rgb(207,117,47)"/><text x="46.9342%" y="127.50"></text></g><g><title>evaluate_obligation (276,482 samples, 0.44%)</title><rect x="47.0737%" y="117" width="0.4369%" height="15" fill="rgb(249,43,39)"/><text x="47.3237%" y="127.50"></text></g><g><title>associated_item (68,661 samples, 0.11%)</title><rect x="47.7386%" y="85" width="0.1085%" height="15" fill="rgb(209,38,44)"/><text x="47.9886%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (65,971 samples, 0.10%)</title><rect x="47.7428%" y="69" width="0.1043%" height="15" fill="rgb(236,212,23)"/><text x="47.9928%" y="79.50"></text></g><g><title>impl_item_implementor_ids (83,441 samples, 0.13%)</title><rect x="47.7201%" y="117" width="0.1319%" height="15" fill="rgb(242,79,21)"/><text x="47.9701%" y="127.50"></text></g><g><title>associated_items (78,661 samples, 0.12%)</title><rect x="47.7276%" y="101" width="0.1243%" height="15" fill="rgb(211,96,35)"/><text x="47.9776%" y="111.50"></text></g><g><title>item_attrs (98,671 samples, 0.16%)</title><rect x="47.9620%" y="117" width="0.1559%" height="15" fill="rgb(253,215,40)"/><text x="48.2120%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (94,290 samples, 0.15%)</title><rect x="47.9689%" y="101" width="0.1490%" height="15" fill="rgb(211,81,21)"/><text x="48.2189%" y="111.50"></text></g><g><title>evaluate_obligation (121,100 samples, 0.19%)</title><rect x="48.3150%" y="101" width="0.1914%" height="15" fill="rgb(208,190,38)"/><text x="48.5650%" y="111.50"></text></g><g><title>method_autoderef_steps (222,771 samples, 0.35%)</title><rect x="48.1802%" y="117" width="0.3521%" height="15" fill="rgb(235,213,38)"/><text x="48.4302%" y="127.50"></text></g><g><title>explicit_predicates_of (83,001 samples, 0.13%)</title><rect x="48.6815%" y="85" width="0.1312%" height="15" fill="rgb(237,122,38)"/><text x="48.9315%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (71,380 samples, 0.11%)</title><rect x="48.6999%" y="69" width="0.1128%" height="15" fill="rgb(244,218,35)"/><text x="48.9499%" y="79.50"></text></g><g><title>predicates_of (187,121 samples, 0.30%)</title><rect x="48.5565%" y="117" width="0.2957%" height="15" fill="rgb(240,68,47)"/><text x="48.8065%" y="127.50"></text></g><g><title>predicates_defined_on (140,751 samples, 0.22%)</title><rect x="48.6298%" y="101" width="0.2224%" height="15" fill="rgb(210,16,53)"/><text x="48.8798%" y="111.50"></text></g><g><title>trait_impls_of (87,392 samples, 0.14%)</title><rect x="48.8738%" y="117" width="0.1381%" height="15" fill="rgb(235,124,12)"/><text x="49.1238%" y="127.50"></text></g><g><title>evaluate_obligation (158,684 samples, 0.25%)</title><rect x="50.2615%" y="101" width="0.2508%" height="15" fill="rgb(224,169,11)"/><text x="50.5115%" y="111.50"></text></g><g><title>evaluate_obligation (116,351 samples, 0.18%)</title><rect x="50.6767%" y="85" width="0.1839%" height="15" fill="rgb(250,166,2)"/><text x="50.9267%" y="95.50"></text></g><g><title>method_autoderef_steps (175,972 samples, 0.28%)</title><rect x="50.5943%" y="101" width="0.2781%" height="15" fill="rgb(242,216,29)"/><text x="50.8443%" y="111.50"></text></g><g><title>typeck (1,192,803 samples, 1.89%)</title><rect x="49.0850%" y="117" width="1.8851%" height="15" fill="rgb(230,116,27)"/><text x="49.3350%" y="127.50">t..</text></g><g><title>item_bodies_checking (7,931,948 samples, 12.54%)</title><rect x="38.4908%" y="165" width="12.5353%" height="15" fill="rgb(228,99,48)"/><text x="38.7408%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (7,929,218 samples, 12.53%)</title><rect x="38.4952%" y="149" width="12.5310%" height="15" fill="rgb(253,11,6)"/><text x="38.7452%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (7,916,188 samples, 12.51%)</title><rect x="38.5158%" y="133" width="12.5104%" height="15" fill="rgb(247,143,39)"/><text x="38.7658%" y="143.50">typeck</text></g><g><title>item_types_checking (233,072 samples, 0.37%)</title><rect x="51.0262%" y="165" width="0.3683%" height="15" fill="rgb(236,97,10)"/><text x="51.2762%" y="175.50"></text></g><g><title>check_mod_item_types (230,982 samples, 0.37%)</title><rect x="51.0295%" y="149" width="0.3650%" height="15" fill="rgb(233,208,19)"/><text x="51.2795%" y="159.50"></text></g><g><title>fn_sig (100,101 samples, 0.16%)</title><rect x="51.5942%" y="133" width="0.1582%" height="15" fill="rgb(216,164,2)"/><text x="51.8442%" y="143.50"></text></g><g><title>named_region_map (161,473 samples, 0.26%)</title><rect x="51.8245%" y="117" width="0.2552%" height="15" fill="rgb(220,129,5)"/><text x="52.0745%" y="127.50"></text></g><g><title>resolve_lifetimes (154,073 samples, 0.24%)</title><rect x="51.8362%" y="101" width="0.2435%" height="15" fill="rgb(242,17,10)"/><text x="52.0862%" y="111.50"></text></g><g><title>generics_of (221,884 samples, 0.35%)</title><rect x="51.7524%" y="133" width="0.3507%" height="15" fill="rgb(242,107,0)"/><text x="52.0024%" y="143.50"></text></g><g><title>explicit_predicates_of (131,682 samples, 0.21%)</title><rect x="52.2630%" y="101" width="0.2081%" height="15" fill="rgb(251,28,31)"/><text x="52.5130%" y="111.50"></text></g><g><title>predicates_of (230,342 samples, 0.36%)</title><rect x="52.1838%" y="133" width="0.3640%" height="15" fill="rgb(233,223,10)"/><text x="52.4338%" y="143.50"></text></g><g><title>predicates_defined_on (214,082 samples, 0.34%)</title><rect x="52.2095%" y="117" width="0.3383%" height="15" fill="rgb(215,21,27)"/><text x="52.4595%" y="127.50"></text></g><g><title>type_collecting (820,939 samples, 1.30%)</title><rect x="51.3968%" y="165" width="1.2974%" height="15" fill="rgb(232,23,21)"/><text x="51.6468%" y="175.50"></text></g><g><title>collect_mod_item_types (811,719 samples, 1.28%)</title><rect x="51.4114%" y="149" width="1.2828%" height="15" fill="rgb(244,5,23)"/><text x="51.6614%" y="159.50"></text></g><g><title>type_of (92,631 samples, 0.15%)</title><rect x="52.5478%" y="133" width="0.1464%" height="15" fill="rgb(226,81,46)"/><text x="52.7978%" y="143.50"></text></g><g><title>evaluate_obligation (314,803 samples, 0.50%)</title><rect x="53.0928%" y="133" width="0.4975%" height="15" fill="rgb(247,70,30)"/><text x="53.3428%" y="143.50"></text></g><g><title>trait_impls_of (196,593 samples, 0.31%)</title><rect x="53.2796%" y="117" width="0.3107%" height="15" fill="rgb(212,68,19)"/><text x="53.5296%" y="127.50"></text></g><g><title>check_impl_item_well_formed (627,316 samples, 0.99%)</title><rect x="52.7649%" y="149" width="0.9914%" height="15" fill="rgb(240,187,13)"/><text x="53.0149%" y="159.50"></text></g><g><title>adt_def (147,032 samples, 0.23%)</title><rect x="54.7633%" y="101" width="0.2324%" height="15" fill="rgb(223,113,26)"/><text x="55.0133%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (146,132 samples, 0.23%)</title><rect x="54.7648%" y="85" width="0.2309%" height="15" fill="rgb(206,192,2)"/><text x="55.0148%" y="95.50"></text></g><g><title>item_attrs (135,182 samples, 0.21%)</title><rect x="54.7821%" y="69" width="0.2136%" height="15" fill="rgb(241,108,4)"/><text x="55.0321%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (133,982 samples, 0.21%)</title><rect x="54.7840%" y="53" width="0.2117%" height="15" fill="rgb(247,173,49)"/><text x="55.0340%" y="63.50"></text></g><g><title>adt_sized_constraint (155,592 samples, 0.25%)</title><rect x="54.7556%" y="117" width="0.2459%" height="15" fill="rgb(224,114,35)"/><text x="55.0056%" y="127.50"></text></g><g><title>evaluate_obligation (376,624 samples, 0.60%)</title><rect x="54.4840%" y="133" width="0.5952%" height="15" fill="rgb(245,159,27)"/><text x="54.7340%" y="143.50"></text></g><g><title>param_env (68,440 samples, 0.11%)</title><rect x="55.1899%" y="133" width="0.1082%" height="15" fill="rgb(245,172,44)"/><text x="55.4399%" y="143.50"></text></g><g><title>predicates_of (113,961 samples, 0.18%)</title><rect x="55.2981%" y="133" width="0.1801%" height="15" fill="rgb(236,23,11)"/><text x="55.5481%" y="143.50"></text></g><g><title>predicates_defined_on (85,941 samples, 0.14%)</title><rect x="55.3423%" y="117" width="0.1358%" height="15" fill="rgb(205,117,38)"/><text x="55.5923%" y="127.50"></text></g><g><title>region_scope_tree (94,791 samples, 0.15%)</title><rect x="55.4782%" y="133" width="0.1498%" height="15" fill="rgb(237,72,25)"/><text x="55.7282%" y="143.50"></text></g><g><title>trait_impls_of (89,781 samples, 0.14%)</title><rect x="55.6532%" y="133" width="0.1419%" height="15" fill="rgb(244,70,9)"/><text x="55.9032%" y="143.50"></text></g><g><title>analysis (34,694,977 samples, 54.83%)</title><rect x="0.9996%" y="197" width="54.8304%" height="15" fill="rgb(217,125,39)"/><text x="1.2496%" y="207.50">analysis</text></g><g><title>type_check_crate (23,417,651 samples, 37.01%)</title><rect x="18.8218%" y="181" width="37.0082%" height="15" fill="rgb(235,36,10)"/><text x="19.0718%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,983,333 samples, 3.13%)</title><rect x="52.6957%" y="165" width="3.1344%" height="15" fill="rgb(251,123,47)"/><text x="52.9457%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (1,312,235 samples, 2.07%)</title><rect x="53.7562%" y="149" width="2.0738%" height="15" fill="rgb(221,13,13)"/><text x="54.0062%" y="159.50">c..</text></g><g><title>codegen_crate (382,924 samples, 0.61%)</title><rect x="55.8483%" y="197" width="0.6052%" height="15" fill="rgb(238,131,9)"/><text x="56.0983%" y="207.50"></text></g><g><title>AST_validation (109,261 samples, 0.17%)</title><rect x="56.8274%" y="181" width="0.1727%" height="15" fill="rgb(211,50,8)"/><text x="57.0774%" y="191.50"></text></g><g><title>crate_injection (95,761 samples, 0.15%)</title><rect x="57.1000%" y="181" width="0.1513%" height="15" fill="rgb(245,182,24)"/><text x="57.3500%" y="191.50"></text></g><g><title>metadata_load_macro (254,854 samples, 0.40%)</title><rect x="75.3457%" y="149" width="0.4028%" height="15" fill="rgb(242,14,37)"/><text x="75.5957%" y="159.50"></text></g><g><title>macro_expand_crate (14,319,839 samples, 22.63%)</title><rect x="57.2513%" y="181" width="22.6305%" height="15" fill="rgb(246,228,12)"/><text x="57.5013%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (14,294,839 samples, 22.59%)</title><rect x="57.2908%" y="165" width="22.5909%" height="15" fill="rgb(213,55,15)"/><text x="57.5408%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,615,429 samples, 4.13%)</title><rect x="75.7485%" y="149" width="4.1333%" height="15" fill="rgb(209,9,3)"/><text x="75.9985%" y="159.50">metad..</text></g><g><title>metadata_register_crate (966,711 samples, 1.53%)</title><rect x="78.3540%" y="133" width="1.5277%" height="15" fill="rgb(230,59,30)"/><text x="78.6040%" y="143.50"></text></g><g><title>metadata_register_crate (80,581 samples, 0.13%)</title><rect x="79.7544%" y="117" width="0.1273%" height="15" fill="rgb(209,121,21)"/><text x="80.0044%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (270,783 samples, 0.43%)</title><rect x="79.8895%" y="181" width="0.4279%" height="15" fill="rgb(220,109,13)"/><text x="80.1395%" y="191.50"></text></g><g><title>finalize_macro_resolutions (263,623 samples, 0.42%)</title><rect x="80.3904%" y="165" width="0.4166%" height="15" fill="rgb(232,18,1)"/><text x="80.6404%" y="175.50"></text></g><g><title>late_resolve_crate (1,726,249 samples, 2.73%)</title><rect x="80.8070%" y="165" width="2.7281%" height="15" fill="rgb(215,41,42)"/><text x="81.0570%" y="175.50">la..</text></g><g><title>configure_and_expand (17,224,252 samples, 27.22%)</title><rect x="56.4535%" y="197" width="27.2205%" height="15" fill="rgb(224,123,36)"/><text x="56.7035%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,123,873 samples, 3.36%)</title><rect x="80.3175%" y="181" width="3.3565%" height="15" fill="rgb(240,125,3)"/><text x="80.5675%" y="191.50">res..</text></g><g><title>drop_ast (122,131 samples, 0.19%)</title><rect x="83.6739%" y="197" width="0.1930%" height="15" fill="rgb(205,98,50)"/><text x="83.9239%" y="207.50"></text></g><g><title>early_lint_checks (270,033 samples, 0.43%)</title><rect x="83.8881%" y="197" width="0.4267%" height="15" fill="rgb(205,185,37)"/><text x="84.1381%" y="207.50"></text></g><g><title>free_global_ctxt (2,910,452 samples, 4.60%)</title><rect x="84.3149%" y="197" width="4.5996%" height="15" fill="rgb(238,207,15)"/><text x="84.5649%" y="207.50">free_..</text></g><g><title>crate_hash (67,711 samples, 0.11%)</title><rect x="89.4812%" y="181" width="0.1070%" height="15" fill="rgb(213,199,42)"/><text x="89.7312%" y="191.50"></text></g><g><title>generate_crate_metadata (511,386 samples, 0.81%)</title><rect x="88.9144%" y="197" width="0.8082%" height="15" fill="rgb(235,201,11)"/><text x="89.1644%" y="207.50"></text></g><g><title>hir_lowering (1,428,286 samples, 2.26%)</title><rect x="89.7226%" y="197" width="2.2572%" height="15" fill="rgb(207,46,11)"/><text x="89.9726%" y="207.50">h..</text></g><g><title>parse_crate (3,753,452 samples, 5.93%)</title><rect x="92.0527%" y="197" width="5.9318%" height="15" fill="rgb(241,35,35)"/><text x="92.3027%" y="207.50">parse_cr..</text></g><g><title>prepare_outputs (282,473 samples, 0.45%)</title><rect x="98.0003%" y="197" width="0.4464%" height="15" fill="rgb(243,32,47)"/><text x="98.2503%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (545,676 samples, 0.86%)</title><rect x="98.4467%" y="197" width="0.8624%" height="15" fill="rgb(247,202,23)"/><text x="98.6967%" y="207.50"></text></g><g><title>setup_global_ctxt (104,512 samples, 0.17%)</title><rect x="99.3268%" y="197" width="0.1652%" height="15" fill="rgb(219,102,11)"/><text x="99.5768%" y="207.50"></text></g><g><title>all (63,276,846 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (63,276,846 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (321,473 samples, 0.51%)</title><rect x="99.4920%" y="197" width="0.5080%" height="15" fill="rgb(216,99,12)"/><text x="99.7420%" y="207.50"></text></g></svg></svg>