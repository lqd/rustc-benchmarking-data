<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (260,473 samples, 0.25%)</title><rect x="9.2450%" y="213" width="0.2548%" height="15" fill="rgb(227,0,7)"/><text x="9.4950%" y="223.50"></text></g><g><title>item_attrs (236,300 samples, 0.23%)</title><rect x="9.8760%" y="181" width="0.2311%" height="15" fill="rgb(217,0,24)"/><text x="10.1260%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (228,440 samples, 0.22%)</title><rect x="9.8837%" y="165" width="0.2235%" height="15" fill="rgb(221,193,54)"/><text x="10.1337%" y="175.50"></text></g><g><title>codegen_fn_attrs (328,451 samples, 0.32%)</title><rect x="9.8017%" y="197" width="0.3213%" height="15" fill="rgb(248,212,6)"/><text x="10.0517%" y="207.50"></text></g><g><title>is_copy_raw (138,612 samples, 0.14%)</title><rect x="11.9485%" y="149" width="0.1356%" height="15" fill="rgb(208,68,35)"/><text x="12.1985%" y="159.50"></text></g><g><title>evaluate_obligation (114,281 samples, 0.11%)</title><rect x="11.9723%" y="133" width="0.1118%" height="15" fill="rgb(232,128,0)"/><text x="12.2223%" y="143.50"></text></g><g><title>adt_drop_tys (273,444 samples, 0.27%)</title><rect x="11.9217%" y="165" width="0.2675%" height="15" fill="rgb(207,160,47)"/><text x="12.1717%" y="175.50"></text></g><g><title>is_copy_raw (575,987 samples, 0.56%)</title><rect x="12.1894%" y="165" width="0.5634%" height="15" fill="rgb(228,23,34)"/><text x="12.4394%" y="175.50"></text></g><g><title>evaluate_obligation (489,226 samples, 0.48%)</title><rect x="12.2743%" y="149" width="0.4785%" height="15" fill="rgb(218,30,26)"/><text x="12.5243%" y="159.50"></text></g><g><title>needs_drop_raw (940,772 samples, 0.92%)</title><rect x="11.8361%" y="181" width="0.9202%" height="15" fill="rgb(220,122,19)"/><text x="12.0861%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (544,066 samples, 0.53%)</title><rect x="12.9442%" y="165" width="0.5322%" height="15" fill="rgb(250,228,42)"/><text x="13.1942%" y="175.50"></text></g><g><title>impl_parent (194,514 samples, 0.19%)</title><rect x="13.8222%" y="149" width="0.1903%" height="15" fill="rgb(240,193,28)"/><text x="14.0722%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (132,952 samples, 0.13%)</title><rect x="13.8824%" y="133" width="0.1300%" height="15" fill="rgb(216,20,37)"/><text x="14.1324%" y="143.50"></text></g><g><title>specialization_graph_of (935,441 samples, 0.92%)</title><rect x="13.5246%" y="165" width="0.9150%" height="15" fill="rgb(206,188,39)"/><text x="13.7746%" y="175.50"></text></g><g><title>impl_trait_ref (436,705 samples, 0.43%)</title><rect x="14.0125%" y="149" width="0.4272%" height="15" fill="rgb(217,207,13)"/><text x="14.2625%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (373,705 samples, 0.37%)</title><rect x="14.0741%" y="133" width="0.3655%" height="15" fill="rgb(231,73,38)"/><text x="14.3241%" y="143.50"></text></g><g><title>resolve_instance (1,803,893 samples, 1.76%)</title><rect x="12.7563%" y="181" width="1.7645%" height="15" fill="rgb(225,20,46)"/><text x="13.0063%" y="191.50"></text></g><g><title>thir_body (603,829 samples, 0.59%)</title><rect x="14.5410%" y="181" width="0.5906%" height="15" fill="rgb(210,31,41)"/><text x="14.7910%" y="191.50"></text></g><g><title>mir_const (6,570,585 samples, 6.43%)</title><rect x="8.7187%" y="229" width="6.4271%" height="15" fill="rgb(221,200,47)"/><text x="8.9687%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (5,772,083 samples, 5.65%)</title><rect x="9.4998%" y="213" width="5.6461%" height="15" fill="rgb(226,26,5)"/><text x="9.7498%" y="223.50">unsafet..</text></g><g><title>mir_built (5,135,021 samples, 5.02%)</title><rect x="10.1229%" y="197" width="5.0229%" height="15" fill="rgb(249,33,26)"/><text x="10.3729%" y="207.50">mir_bu..</text></g><g><title>mir_promoted (7,411,122 samples, 7.25%)</title><rect x="8.1897%" y="245" width="7.2493%" height="15" fill="rgb(235,183,28)"/><text x="8.4397%" y="255.50">mir_promot..</text></g><g><title>mir_const_qualif (299,763 samples, 0.29%)</title><rect x="15.1459%" y="229" width="0.2932%" height="15" fill="rgb(221,5,38)"/><text x="15.3959%" y="239.50"></text></g><g><title>type_op_ascribe_user_type (245,861 samples, 0.24%)</title><rect x="15.4391%" y="245" width="0.2405%" height="15" fill="rgb(247,18,42)"/><text x="15.6891%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (350,553 samples, 0.34%)</title><rect x="15.6796%" y="245" width="0.3429%" height="15" fill="rgb(241,131,45)"/><text x="15.9296%" y="255.50"></text></g><g><title>normalize_projection_ty (231,082 samples, 0.23%)</title><rect x="15.7964%" y="229" width="0.2260%" height="15" fill="rgb(249,31,29)"/><text x="16.0464%" y="239.50"></text></g><g><title>type_op_normalize_predicate (360,275 samples, 0.35%)</title><rect x="16.0225%" y="245" width="0.3524%" height="15" fill="rgb(225,111,53)"/><text x="16.2725%" y="255.50"></text></g><g><title>normalize_projection_ty (213,081 samples, 0.21%)</title><rect x="16.1665%" y="229" width="0.2084%" height="15" fill="rgb(238,160,17)"/><text x="16.4165%" y="239.50"></text></g><g><title>type_op_prove_predicate (1,516,952 samples, 1.48%)</title><rect x="16.3906%" y="245" width="1.4838%" height="15" fill="rgb(214,148,48)"/><text x="16.6406%" y="255.50"></text></g><g><title>MIR_borrow_checking (17,312,633 samples, 16.93%)</title><rect x="0.9465%" y="277" width="16.9347%" height="15" fill="rgb(232,36,49)"/><text x="1.1965%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (17,247,083 samples, 16.87%)</title><rect x="1.0107%" y="261" width="16.8706%" height="15" fill="rgb(209,103,24)"/><text x="1.2607%" y="271.50">mir_borrowck</text></g><g><title>MIR_effect_checking (108,352 samples, 0.11%)</title><rect x="17.8812%" y="277" width="0.1060%" height="15" fill="rgb(229,88,8)"/><text x="18.1312%" y="287.50"></text></g><g><title>hir_module_items (191,892 samples, 0.19%)</title><rect x="17.9872%" y="277" width="0.1877%" height="15" fill="rgb(213,181,19)"/><text x="18.2372%" y="287.50"></text></g><g><title>codegen_fn_attrs (169,691 samples, 0.17%)</title><rect x="18.7588%" y="213" width="0.1660%" height="15" fill="rgb(254,191,54)"/><text x="19.0088%" y="223.50"></text></g><g><title>should_inherit_track_caller (296,221 samples, 0.29%)</title><rect x="18.6429%" y="229" width="0.2898%" height="15" fill="rgb(241,83,37)"/><text x="18.8929%" y="239.50"></text></g><g><title>codegen_fn_attrs (522,284 samples, 0.51%)</title><rect x="18.4472%" y="245" width="0.5109%" height="15" fill="rgb(233,36,39)"/><text x="18.6972%" y="255.50"></text></g><g><title>check_mod_attrs (775,358 samples, 0.76%)</title><rect x="18.1999%" y="261" width="0.7584%" height="15" fill="rgb(226,3,54)"/><text x="18.4499%" y="271.50"></text></g><g><title>check_mod_const_bodies (125,652 samples, 0.12%)</title><rect x="18.9583%" y="261" width="0.1229%" height="15" fill="rgb(245,192,40)"/><text x="19.2083%" y="271.50"></text></g><g><title>lookup_deprecation_entry (146,722 samples, 0.14%)</title><rect x="19.3426%" y="245" width="0.1435%" height="15" fill="rgb(238,167,29)"/><text x="19.5926%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (426,404 samples, 0.42%)</title><rect x="19.1699%" y="261" width="0.4171%" height="15" fill="rgb(232,182,51)"/><text x="19.4199%" y="271.50"></text></g><g><title>misc_checking_1 (1,505,447 samples, 1.47%)</title><rect x="18.1754%" y="277" width="1.4726%" height="15" fill="rgb(231,60,39)"/><text x="18.4254%" y="287.50"></text></g><g><title>item_attrs (389,265 samples, 0.38%)</title><rect x="20.1340%" y="53" width="0.3808%" height="15" fill="rgb(208,69,12)"/><text x="20.3840%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (388,675 samples, 0.38%)</title><rect x="20.1346%" y="37" width="0.3802%" height="15" fill="rgb(235,93,37)"/><text x="20.3846%" y="47.50"></text></g><g><title>codegen_fn_attrs (402,575 samples, 0.39%)</title><rect x="20.1216%" y="69" width="0.3938%" height="15" fill="rgb(213,116,39)"/><text x="20.3716%" y="79.50"></text></g><g><title>fn_abi_of_instance (431,305 samples, 0.42%)</title><rect x="20.1081%" y="85" width="0.4219%" height="15" fill="rgb(222,207,29)"/><text x="20.3581%" y="95.50"></text></g><g><title>eval_to_const_value_raw (571,976 samples, 0.56%)</title><rect x="20.0126%" y="133" width="0.5595%" height="15" fill="rgb(206,96,30)"/><text x="20.2626%" y="143.50"></text></g><g><title>eval_to_const_value_raw (570,086 samples, 0.56%)</title><rect x="20.0145%" y="117" width="0.5576%" height="15" fill="rgb(218,138,4)"/><text x="20.2645%" y="127.50"></text></g><g><title>eval_to_allocation_raw (565,066 samples, 0.55%)</title><rect x="20.0194%" y="101" width="0.5527%" height="15" fill="rgb(250,191,14)"/><text x="20.2694%" y="111.50"></text></g><g><title>eval_to_const_value_raw (669,417 samples, 0.65%)</title><rect x="19.9222%" y="197" width="0.6548%" height="15" fill="rgb(239,60,40)"/><text x="20.1722%" y="207.50"></text></g><g><title>eval_to_const_value_raw (659,637 samples, 0.65%)</title><rect x="19.9318%" y="181" width="0.6452%" height="15" fill="rgb(206,27,48)"/><text x="20.1818%" y="191.50"></text></g><g><title>eval_to_allocation_raw (656,897 samples, 0.64%)</title><rect x="19.9345%" y="165" width="0.6426%" height="15" fill="rgb(225,35,8)"/><text x="20.1845%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (586,546 samples, 0.57%)</title><rect x="20.0033%" y="149" width="0.5737%" height="15" fill="rgb(250,213,24)"/><text x="20.2533%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (971,521 samples, 0.95%)</title><rect x="19.6494%" y="261" width="0.9503%" height="15" fill="rgb(247,123,22)"/><text x="19.8994%" y="271.50"></text></g><g><title>check_mod_liveness (918,331 samples, 0.90%)</title><rect x="19.7014%" y="245" width="0.8983%" height="15" fill="rgb(231,138,38)"/><text x="19.9514%" y="255.50"></text></g><g><title>type_uninhabited_from (752,698 samples, 0.74%)</title><rect x="19.8634%" y="229" width="0.7363%" height="15" fill="rgb(231,145,46)"/><text x="20.1134%" y="239.50"></text></g><g><title>type_uninhabited_from (727,838 samples, 0.71%)</title><rect x="19.8877%" y="213" width="0.7119%" height="15" fill="rgb(251,118,11)"/><text x="20.1377%" y="223.50"></text></g><g><title>misc_checking_2 (1,314,934 samples, 1.29%)</title><rect x="19.6480%" y="277" width="1.2862%" height="15" fill="rgb(217,147,25)"/><text x="19.8980%" y="287.50"></text></g><g><title>match_checking (342,023 samples, 0.33%)</title><rect x="20.5997%" y="261" width="0.3346%" height="15" fill="rgb(247,81,37)"/><text x="20.8497%" y="271.50"></text></g><g><title>check_match (324,202 samples, 0.32%)</title><rect x="20.6171%" y="245" width="0.3171%" height="15" fill="rgb(209,12,38)"/><text x="20.8671%" y="255.50"></text></g><g><title>check_private_in_public (103,681 samples, 0.10%)</title><rect x="20.9434%" y="261" width="0.1014%" height="15" fill="rgb(227,1,9)"/><text x="21.1934%" y="271.50"></text></g><g><title>death_checking (271,133 samples, 0.27%)</title><rect x="21.0448%" y="261" width="0.2652%" height="15" fill="rgb(248,47,43)"/><text x="21.2948%" y="271.50"></text></g><g><title>item_attrs (117,290 samples, 0.11%)</title><rect x="21.1953%" y="245" width="0.1147%" height="15" fill="rgb(221,10,30)"/><text x="21.4453%" y="255.50"></text></g><g><title>metadata_decode_entry_item_attrs (116,130 samples, 0.11%)</title><rect x="21.1964%" y="229" width="0.1136%" height="15" fill="rgb(210,229,1)"/><text x="21.4464%" y="239.50"></text></g><g><title>eval_to_const_value_raw (387,495 samples, 0.38%)</title><rect x="21.9544%" y="165" width="0.3790%" height="15" fill="rgb(222,148,37)"/><text x="22.2044%" y="175.50"></text></g><g><title>eval_to_const_value_raw (386,385 samples, 0.38%)</title><rect x="21.9555%" y="149" width="0.3780%" height="15" fill="rgb(234,67,33)"/><text x="22.2055%" y="159.50"></text></g><g><title>eval_to_allocation_raw (383,835 samples, 0.38%)</title><rect x="21.9580%" y="133" width="0.3755%" height="15" fill="rgb(247,98,35)"/><text x="22.2080%" y="143.50"></text></g><g><title>eval_to_const_value_raw (482,076 samples, 0.47%)</title><rect x="21.8639%" y="229" width="0.4716%" height="15" fill="rgb(247,138,52)"/><text x="22.1139%" y="239.50"></text></g><g><title>eval_to_const_value_raw (480,416 samples, 0.47%)</title><rect x="21.8655%" y="213" width="0.4699%" height="15" fill="rgb(213,79,30)"/><text x="22.1155%" y="223.50"></text></g><g><title>eval_to_allocation_raw (478,556 samples, 0.47%)</title><rect x="21.8673%" y="197" width="0.4681%" height="15" fill="rgb(246,177,23)"/><text x="22.1173%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (398,655 samples, 0.39%)</title><rect x="21.9455%" y="181" width="0.3900%" height="15" fill="rgb(230,62,27)"/><text x="22.1955%" y="191.50"></text></g><g><title>crate_lints (2,181,165 samples, 2.13%)</title><rect x="21.3118%" y="245" width="2.1335%" height="15" fill="rgb(216,154,8)"/><text x="21.5618%" y="255.50">c..</text></g><g><title>type_of (1,080,022 samples, 1.06%)</title><rect x="22.3889%" y="229" width="1.0564%" height="15" fill="rgb(244,35,45)"/><text x="22.6389%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (846,337 samples, 0.83%)</title><rect x="22.6175%" y="213" width="0.8279%" height="15" fill="rgb(251,115,12)"/><text x="22.8675%" y="223.50"></text></g><g><title>layout_of (104,762 samples, 0.10%)</title><rect x="23.6744%" y="213" width="0.1025%" height="15" fill="rgb(240,54,50)"/><text x="23.9244%" y="223.50"></text></g><g><title>lint_checking (2,522,639 samples, 2.47%)</title><rect x="21.3100%" y="261" width="2.4676%" height="15" fill="rgb(233,84,52)"/><text x="21.5600%" y="271.50">li..</text></g><g><title>module_lints (339,604 samples, 0.33%)</title><rect x="23.4454%" y="245" width="0.3322%" height="15" fill="rgb(207,117,47)"/><text x="23.6954%" y="255.50"></text></g><g><title>lint_mod (336,514 samples, 0.33%)</title><rect x="23.4484%" y="229" width="0.3292%" height="15" fill="rgb(249,43,39)"/><text x="23.6984%" y="239.50"></text></g><g><title>privacy_access_levels (122,871 samples, 0.12%)</title><rect x="23.7776%" y="261" width="0.1202%" height="15" fill="rgb(209,38,44)"/><text x="24.0276%" y="271.50"></text></g><g><title>privacy_checking_modules (446,525 samples, 0.44%)</title><rect x="23.8978%" y="261" width="0.4368%" height="15" fill="rgb(236,212,23)"/><text x="24.1478%" y="271.50"></text></g><g><title>check_mod_privacy (444,375 samples, 0.43%)</title><rect x="23.8999%" y="245" width="0.4347%" height="15" fill="rgb(242,79,21)"/><text x="24.1499%" y="255.50"></text></g><g><title>misc_checking_3 (3,486,439 samples, 3.41%)</title><rect x="20.9342%" y="277" width="3.4103%" height="15" fill="rgb(211,96,35)"/><text x="21.1842%" y="287.50">mis..</text></g><g><title>adt_def (166,302 samples, 0.16%)</title><rect x="31.4263%" y="197" width="0.1627%" height="15" fill="rgb(253,215,40)"/><text x="31.6763%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (165,552 samples, 0.16%)</title><rect x="31.4270%" y="181" width="0.1619%" height="15" fill="rgb(211,81,21)"/><text x="31.6770%" y="191.50"></text></g><g><title>item_attrs (157,322 samples, 0.15%)</title><rect x="31.4350%" y="165" width="0.1539%" height="15" fill="rgb(208,190,38)"/><text x="31.6850%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (156,392 samples, 0.15%)</title><rect x="31.4360%" y="149" width="0.1530%" height="15" fill="rgb(235,213,38)"/><text x="31.6860%" y="159.50"></text></g><g><title>adt_def (124,591 samples, 0.12%)</title><rect x="31.5915%" y="181" width="0.1219%" height="15" fill="rgb(237,122,38)"/><text x="31.8415%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (122,851 samples, 0.12%)</title><rect x="31.5932%" y="165" width="0.1202%" height="15" fill="rgb(244,218,35)"/><text x="31.8432%" y="175.50"></text></g><g><title>item_attrs (114,731 samples, 0.11%)</title><rect x="31.6012%" y="149" width="0.1122%" height="15" fill="rgb(240,68,47)"/><text x="31.8512%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (114,091 samples, 0.11%)</title><rect x="31.6018%" y="133" width="0.1116%" height="15" fill="rgb(210,16,53)"/><text x="31.8518%" y="143.50"></text></g><g><title>adt_sized_constraint (128,841 samples, 0.13%)</title><rect x="31.5889%" y="197" width="0.1260%" height="15" fill="rgb(235,124,12)"/><text x="31.8389%" y="207.50"></text></g><g><title>adt_sized_constraint (306,333 samples, 0.30%)</title><rect x="31.4168%" y="213" width="0.2996%" height="15" fill="rgb(224,169,11)"/><text x="31.6668%" y="223.50"></text></g><g><title>impl_parent (3,493,196 samples, 3.42%)</title><rect x="31.7245%" y="213" width="3.4169%" height="15" fill="rgb(250,166,2)"/><text x="31.9745%" y="223.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,888,160 samples, 1.85%)</title><rect x="33.2945%" y="197" width="1.8469%" height="15" fill="rgb(242,216,29)"/><text x="33.5445%" y="207.50">m..</text></g><g><title>impl_trait_ref (9,161,630 samples, 8.96%)</title><rect x="35.1415%" y="213" width="8.9616%" height="15" fill="rgb(230,116,27)"/><text x="35.3915%" y="223.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,518,820 samples, 7.35%)</title><rect x="36.7484%" y="197" width="7.3547%" height="15" fill="rgb(228,99,48)"/><text x="36.9984%" y="207.50">metadata_d..</text></g><g><title>item_attrs (130,731 samples, 0.13%)</title><rect x="44.1031%" y="213" width="0.1279%" height="15" fill="rgb(253,11,6)"/><text x="44.3531%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (126,101 samples, 0.12%)</title><rect x="44.1076%" y="197" width="0.1233%" height="15" fill="rgb(247,143,39)"/><text x="44.3576%" y="207.50"></text></g><g><title>trait_impls_of (1,545,945 samples, 1.51%)</title><rect x="44.2877%" y="213" width="1.5122%" height="15" fill="rgb(236,97,10)"/><text x="44.5377%" y="223.50"></text></g><g><title>implementations_of_trait (409,694 samples, 0.40%)</title><rect x="45.3991%" y="197" width="0.4008%" height="15" fill="rgb(233,208,19)"/><text x="45.6491%" y="207.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (325,204 samples, 0.32%)</title><rect x="45.4818%" y="181" width="0.3181%" height="15" fill="rgb(216,164,2)"/><text x="45.7318%" y="191.50"></text></g><g><title>coherent_trait (21,865,644 samples, 21.39%)</title><rect x="24.4153%" y="245" width="21.3883%" height="15" fill="rgb(220,129,5)"/><text x="24.6653%" y="255.50">coherent_trait</text></g><g><title>specialization_graph_of (21,833,714 samples, 21.36%)</title><rect x="24.4465%" y="229" width="21.3571%" height="15" fill="rgb(242,17,10)"/><text x="24.6965%" y="239.50">specialization_graph_of</text></g><g><title>coherence_checking (21,961,685 samples, 21.48%)</title><rect x="24.3879%" y="261" width="21.4822%" height="15" fill="rgb(242,107,0)"/><text x="24.6379%" y="271.50">coherence_checking</text></g><g><title>adt_def (129,021 samples, 0.13%)</title><rect x="54.7424%" y="197" width="0.1262%" height="15" fill="rgb(251,28,31)"/><text x="54.9924%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (125,841 samples, 0.12%)</title><rect x="54.7455%" y="181" width="0.1231%" height="15" fill="rgb(233,223,10)"/><text x="54.9955%" y="191.50"></text></g><g><title>adt_sized_constraint (146,121 samples, 0.14%)</title><rect x="54.7290%" y="213" width="0.1429%" height="15" fill="rgb(215,21,27)"/><text x="54.9790%" y="223.50"></text></g><g><title>adt_dtorck_constraint (106,021 samples, 0.10%)</title><rect x="55.1874%" y="149" width="0.1037%" height="15" fill="rgb(232,23,21)"/><text x="55.4374%" y="159.50"></text></g><g><title>adt_dtorck_constraint (114,341 samples, 0.11%)</title><rect x="55.1825%" y="165" width="0.1118%" height="15" fill="rgb(244,5,23)"/><text x="55.4325%" y="175.50"></text></g><g><title>adt_dtorck_constraint (118,301 samples, 0.12%)</title><rect x="55.1801%" y="181" width="0.1157%" height="15" fill="rgb(226,81,46)"/><text x="55.4301%" y="191.50"></text></g><g><title>dropck_outlives (311,975 samples, 0.31%)</title><rect x="55.0094%" y="213" width="0.3052%" height="15" fill="rgb(247,70,30)"/><text x="55.2594%" y="223.50"></text></g><g><title>adt_dtorck_constraint (219,422 samples, 0.21%)</title><rect x="55.0999%" y="197" width="0.2146%" height="15" fill="rgb(212,68,19)"/><text x="55.3499%" y="207.50"></text></g><g><title>explicit_predicates_of (109,811 samples, 0.11%)</title><rect x="56.3208%" y="165" width="0.1074%" height="15" fill="rgb(240,187,13)"/><text x="56.5708%" y="175.50"></text></g><g><title>predicates_of (198,783 samples, 0.19%)</title><rect x="56.2488%" y="197" width="0.1944%" height="15" fill="rgb(223,113,26)"/><text x="56.4988%" y="207.50"></text></g><g><title>predicates_defined_on (150,682 samples, 0.15%)</title><rect x="56.2959%" y="181" width="0.1474%" height="15" fill="rgb(206,192,2)"/><text x="56.5459%" y="191.50"></text></g><g><title>trait_impls_of (208,942 samples, 0.20%)</title><rect x="56.5423%" y="197" width="0.2044%" height="15" fill="rgb(241,108,4)"/><text x="56.7923%" y="207.50"></text></g><g><title>evaluate_obligation (1,466,538 samples, 1.43%)</title><rect x="55.3145%" y="213" width="1.4345%" height="15" fill="rgb(247,173,49)"/><text x="55.5645%" y="223.50"></text></g><g><title>item_attrs (148,891 samples, 0.15%)</title><rect x="57.1258%" y="213" width="0.1456%" height="15" fill="rgb(224,114,35)"/><text x="57.3758%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (142,661 samples, 0.14%)</title><rect x="57.1319%" y="197" width="0.1395%" height="15" fill="rgb(245,159,27)"/><text x="57.3819%" y="207.50"></text></g><g><title>method_autoderef_steps (214,503 samples, 0.21%)</title><rect x="57.3265%" y="213" width="0.2098%" height="15" fill="rgb(245,172,44)"/><text x="57.5765%" y="223.50"></text></g><g><title>evaluate_obligation (112,443 samples, 0.11%)</title><rect x="57.4263%" y="197" width="0.1100%" height="15" fill="rgb(236,23,11)"/><text x="57.6763%" y="207.50"></text></g><g><title>object_safety_violations (127,442 samples, 0.12%)</title><rect x="57.5382%" y="213" width="0.1247%" height="15" fill="rgb(205,117,38)"/><text x="57.7882%" y="223.50"></text></g><g><title>predicates_of (251,781 samples, 0.25%)</title><rect x="57.6937%" y="213" width="0.2463%" height="15" fill="rgb(237,72,25)"/><text x="57.9437%" y="223.50"></text></g><g><title>predicates_defined_on (164,471 samples, 0.16%)</title><rect x="57.7791%" y="197" width="0.1609%" height="15" fill="rgb(244,70,9)"/><text x="58.0291%" y="207.50"></text></g><g><title>adt_sized_constraint (109,102 samples, 0.11%)</title><rect x="61.9175%" y="197" width="0.1067%" height="15" fill="rgb(217,125,39)"/><text x="62.1675%" y="207.50"></text></g><g><title>associated_item (405,174 samples, 0.40%)</title><rect x="62.1795%" y="181" width="0.3963%" height="15" fill="rgb(235,36,10)"/><text x="62.4295%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (318,353 samples, 0.31%)</title><rect x="62.2645%" y="165" width="0.3114%" height="15" fill="rgb(251,123,47)"/><text x="62.5145%" y="175.50"></text></g><g><title>associated_items (585,737 samples, 0.57%)</title><rect x="62.0269%" y="197" width="0.5730%" height="15" fill="rgb(221,13,13)"/><text x="62.2769%" y="207.50"></text></g><g><title>dropck_outlives (183,841 samples, 0.18%)</title><rect x="62.6216%" y="197" width="0.1798%" height="15" fill="rgb(238,131,9)"/><text x="62.8716%" y="207.50"></text></g><g><title>evaluate_obligation (939,760 samples, 0.92%)</title><rect x="62.8014%" y="197" width="0.9192%" height="15" fill="rgb(211,50,8)"/><text x="63.0514%" y="207.50"></text></g><g><title>is_copy_raw (229,713 samples, 0.22%)</title><rect x="63.9351%" y="197" width="0.2247%" height="15" fill="rgb(245,182,24)"/><text x="64.1851%" y="207.50"></text></g><g><title>evaluate_obligation (204,813 samples, 0.20%)</title><rect x="63.9594%" y="181" width="0.2003%" height="15" fill="rgb(242,14,37)"/><text x="64.2094%" y="191.50"></text></g><g><title>trait_impls_of (132,902 samples, 0.13%)</title><rect x="64.0298%" y="165" width="0.1300%" height="15" fill="rgb(246,228,12)"/><text x="64.2798%" y="175.50"></text></g><g><title>evaluate_obligation (240,223 samples, 0.23%)</title><rect x="64.3800%" y="181" width="0.2350%" height="15" fill="rgb(213,55,15)"/><text x="64.6300%" y="191.50"></text></g><g><title>method_autoderef_steps (445,374 samples, 0.44%)</title><rect x="64.1958%" y="197" width="0.4357%" height="15" fill="rgb(209,9,3)"/><text x="64.4458%" y="207.50"></text></g><g><title>predicates_of (131,841 samples, 0.13%)</title><rect x="64.6424%" y="197" width="0.1290%" height="15" fill="rgb(230,59,30)"/><text x="64.8924%" y="207.50"></text></g><g><title>typeck (7,004,099 samples, 6.85%)</title><rect x="58.0313%" y="213" width="6.8512%" height="15" fill="rgb(209,121,21)"/><text x="58.2813%" y="223.50">typeck</text></g><g><title>item_bodies_checking (19,435,068 samples, 19.01%)</title><rect x="45.9087%" y="261" width="19.0108%" height="15" fill="rgb(220,109,13)"/><text x="46.1587%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,432,048 samples, 19.01%)</title><rect x="45.9116%" y="245" width="19.0078%" height="15" fill="rgb(232,18,1)"/><text x="46.1616%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (19,392,618 samples, 18.97%)</title><rect x="45.9502%" y="229" width="18.9693%" height="15" fill="rgb(215,41,42)"/><text x="46.2002%" y="239.50">typeck</text></g><g><title>impl_trait_ref (142,473 samples, 0.14%)</title><rect x="65.4611%" y="181" width="0.1394%" height="15" fill="rgb(224,123,36)"/><text x="65.7111%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (123,313 samples, 0.12%)</title><rect x="65.4798%" y="165" width="0.1206%" height="15" fill="rgb(240,125,3)"/><text x="65.7298%" y="175.50"></text></g><g><title>adt_destructor (313,633 samples, 0.31%)</title><rect x="65.3216%" y="229" width="0.3068%" height="15" fill="rgb(205,98,50)"/><text x="65.5716%" y="239.50"></text></g><g><title>coherent_trait (305,453 samples, 0.30%)</title><rect x="65.3296%" y="213" width="0.2988%" height="15" fill="rgb(205,185,37)"/><text x="65.5796%" y="223.50"></text></g><g><title>specialization_graph_of (303,983 samples, 0.30%)</title><rect x="65.3310%" y="197" width="0.2973%" height="15" fill="rgb(238,207,15)"/><text x="65.5810%" y="207.50"></text></g><g><title>item_types_checking (1,390,675 samples, 1.36%)</title><rect x="64.9195%" y="261" width="1.3603%" height="15" fill="rgb(213,199,42)"/><text x="65.1695%" y="271.50"></text></g><g><title>check_mod_item_types (1,388,505 samples, 1.36%)</title><rect x="64.9216%" y="245" width="1.3582%" height="15" fill="rgb(235,201,11)"/><text x="65.1716%" y="255.50"></text></g><g><title>typeck (475,425 samples, 0.47%)</title><rect x="65.8147%" y="229" width="0.4650%" height="15" fill="rgb(207,46,11)"/><text x="66.0647%" y="239.50"></text></g><g><title>fn_sig (455,876 samples, 0.45%)</title><rect x="66.5656%" y="229" width="0.4459%" height="15" fill="rgb(241,35,35)"/><text x="66.8156%" y="239.50"></text></g><g><title>is_late_bound_map (240,313 samples, 0.24%)</title><rect x="67.1233%" y="213" width="0.2351%" height="15" fill="rgb(243,32,47)"/><text x="67.3733%" y="223.50"></text></g><g><title>resolve_lifetimes (227,703 samples, 0.22%)</title><rect x="67.1356%" y="197" width="0.2227%" height="15" fill="rgb(247,202,23)"/><text x="67.3856%" y="207.50"></text></g><g><title>lint_levels (156,982 samples, 0.15%)</title><rect x="67.2048%" y="181" width="0.1536%" height="15" fill="rgb(219,102,11)"/><text x="67.4548%" y="191.50"></text></g><g><title>named_region_map (216,214 samples, 0.21%)</title><rect x="67.3584%" y="213" width="0.2115%" height="15" fill="rgb(243,110,44)"/><text x="67.6084%" y="223.50"></text></g><g><title>resolve_lifetimes (200,314 samples, 0.20%)</title><rect x="67.3739%" y="197" width="0.1959%" height="15" fill="rgb(222,74,54)"/><text x="67.6239%" y="207.50"></text></g><g><title>generics_of (586,179 samples, 0.57%)</title><rect x="67.0115%" y="229" width="0.5734%" height="15" fill="rgb(216,99,12)"/><text x="67.2615%" y="239.50"></text></g><g><title>explicit_predicates_of (221,011 samples, 0.22%)</title><rect x="67.7914%" y="197" width="0.2162%" height="15" fill="rgb(226,22,26)"/><text x="68.0414%" y="207.50"></text></g><g><title>predicates_of (521,223 samples, 0.51%)</title><rect x="67.6779%" y="229" width="0.5098%" height="15" fill="rgb(217,163,10)"/><text x="67.9279%" y="239.50"></text></g><g><title>predicates_defined_on (475,733 samples, 0.47%)</title><rect x="67.7224%" y="213" width="0.4653%" height="15" fill="rgb(213,25,53)"/><text x="67.9724%" y="223.50"></text></g><g><title>inferred_outlives_of (184,212 samples, 0.18%)</title><rect x="68.0076%" y="197" width="0.1802%" height="15" fill="rgb(252,105,26)"/><text x="68.2576%" y="207.50"></text></g><g><title>inferred_outlives_crate (161,521 samples, 0.16%)</title><rect x="68.0297%" y="181" width="0.1580%" height="15" fill="rgb(220,39,43)"/><text x="68.2797%" y="191.50"></text></g><g><title>type_collecting (2,096,093 samples, 2.05%)</title><rect x="66.2809%" y="261" width="2.0503%" height="15" fill="rgb(229,68,48)"/><text x="66.5309%" y="271.50">t..</text></g><g><title>collect_mod_item_types (2,081,023 samples, 2.04%)</title><rect x="66.2956%" y="245" width="2.0356%" height="15" fill="rgb(252,8,32)"/><text x="66.5456%" y="255.50">c..</text></g><g><title>type_of (146,682 samples, 0.14%)</title><rect x="68.1877%" y="229" width="0.1435%" height="15" fill="rgb(223,20,43)"/><text x="68.4377%" y="239.50"></text></g><g><title>evaluate_obligation (221,983 samples, 0.22%)</title><rect x="69.2351%" y="229" width="0.2171%" height="15" fill="rgb(229,81,49)"/><text x="69.4851%" y="239.50"></text></g><g><title>param_env (116,100 samples, 0.11%)</title><rect x="69.5540%" y="229" width="0.1136%" height="15" fill="rgb(236,28,36)"/><text x="69.8040%" y="239.50"></text></g><g><title>check_impl_item_well_formed (1,487,817 samples, 1.46%)</title><rect x="68.4171%" y="245" width="1.4553%" height="15" fill="rgb(249,185,26)"/><text x="68.6671%" y="255.50"></text></g><g><title>region_scope_tree (167,272 samples, 0.16%)</title><rect x="69.7088%" y="229" width="0.1636%" height="15" fill="rgb(249,174,33)"/><text x="69.9588%" y="239.50"></text></g><g><title>evaluate_obligation (224,872 samples, 0.22%)</title><rect x="70.3348%" y="229" width="0.2200%" height="15" fill="rgb(233,201,37)"/><text x="70.5848%" y="239.50"></text></g><g><title>analysis (71,790,073 samples, 70.22%)</title><rect x="0.6177%" y="293" width="70.2229%" height="15" fill="rgb(221,78,26)"/><text x="0.8677%" y="303.50">analysis</text></g><g><title>type_check_crate (47,533,692 samples, 46.50%)</title><rect x="24.3446%" y="277" width="46.4960%" height="15" fill="rgb(250,127,30)"/><text x="24.5946%" y="287.50">type_check_crate</text></g><g><title>wf_checking (2,562,639 samples, 2.51%)</title><rect x="68.3339%" y="261" width="2.5067%" height="15" fill="rgb(230,49,44)"/><text x="68.5839%" y="271.50">wf..</text></g><g><title>check_item_well_formed (989,732 samples, 0.97%)</title><rect x="69.8724%" y="245" width="0.9681%" height="15" fill="rgb(229,67,23)"/><text x="70.1224%" y="255.50"></text></g><g><title>codegen_crate (345,274 samples, 0.34%)</title><rect x="70.8508%" y="293" width="0.3377%" height="15" fill="rgb(249,83,47)"/><text x="71.1008%" y="303.50"></text></g><g><title>AST_validation (125,671 samples, 0.12%)</title><rect x="71.3651%" y="277" width="0.1229%" height="15" fill="rgb(215,43,3)"/><text x="71.6151%" y="287.50"></text></g><g><title>metadata_load_macro (465,286 samples, 0.46%)</title><rect x="82.4618%" y="245" width="0.4551%" height="15" fill="rgb(238,154,13)"/><text x="82.7118%" y="255.50"></text></g><g><title>macro_expand_crate (13,908,186 samples, 13.60%)</title><rect x="71.6423%" y="277" width="13.6046%" height="15" fill="rgb(219,56,2)"/><text x="71.8923%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (13,894,166 samples, 13.59%)</title><rect x="71.6560%" y="261" width="13.5908%" height="15" fill="rgb(233,0,4)"/><text x="71.9060%" y="271.50">expand_crate</text></g><g><title>metadata_register_crate (2,381,926 samples, 2.33%)</title><rect x="82.9170%" y="245" width="2.3299%" height="15" fill="rgb(235,30,7)"/><text x="83.1670%" y="255.50">m..</text></g><g><title>metadata_register_crate (833,362 samples, 0.82%)</title><rect x="84.4317%" y="229" width="0.8152%" height="15" fill="rgb(250,79,13)"/><text x="84.6817%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (242,462 samples, 0.24%)</title><rect x="85.2508%" y="277" width="0.2372%" height="15" fill="rgb(211,146,34)"/><text x="85.5008%" y="287.50"></text></g><g><title>finalize_macro_resolutions (199,162 samples, 0.19%)</title><rect x="85.5448%" y="261" width="0.1948%" height="15" fill="rgb(228,22,38)"/><text x="85.7948%" y="271.50"></text></g><g><title>late_resolve_crate (2,429,337 samples, 2.38%)</title><rect x="85.7396%" y="261" width="2.3763%" height="15" fill="rgb(235,168,5)"/><text x="85.9896%" y="271.50">la..</text></g><g><title>configure_and_expand (17,421,355 samples, 17.04%)</title><rect x="71.1886%" y="293" width="17.0410%" height="15" fill="rgb(221,155,16)"/><text x="71.4386%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (2,802,872 samples, 2.74%)</title><rect x="85.4879%" y="277" width="2.7417%" height="15" fill="rgb(215,215,53)"/><text x="85.7379%" y="287.50">re..</text></g><g><title>drop_ast (195,872 samples, 0.19%)</title><rect x="88.2296%" y="293" width="0.1916%" height="15" fill="rgb(223,4,10)"/><text x="88.4796%" y="303.50"></text></g><g><title>early_lint_checks (389,025 samples, 0.38%)</title><rect x="88.4408%" y="293" width="0.3805%" height="15" fill="rgb(234,103,6)"/><text x="88.6908%" y="303.50"></text></g><g><title>free_global_ctxt (3,396,199 samples, 3.32%)</title><rect x="88.8214%" y="293" width="3.3221%" height="15" fill="rgb(227,97,0)"/><text x="89.0714%" y="303.50">fre..</text></g><g><title>generate_crate_metadata (902,190 samples, 0.88%)</title><rect x="92.1434%" y="293" width="0.8825%" height="15" fill="rgb(234,150,53)"/><text x="92.3934%" y="303.50"></text></g><g><title>hir_lowering (2,634,089 samples, 2.58%)</title><rect x="93.0259%" y="293" width="2.5766%" height="15" fill="rgb(228,201,54)"/><text x="93.2759%" y="303.50">hi..</text></g><g><title>parse_crate (2,954,283 samples, 2.89%)</title><rect x="95.6535%" y="293" width="2.8898%" height="15" fill="rgb(222,22,37)"/><text x="95.9035%" y="303.50">pa..</text></g><g><title>prepare_outputs (299,374 samples, 0.29%)</title><rect x="98.5512%" y="293" width="0.2928%" height="15" fill="rgb(237,53,32)"/><text x="98.8012%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (725,788 samples, 0.71%)</title><rect x="98.8440%" y="293" width="0.7099%" height="15" fill="rgb(233,25,53)"/><text x="99.0940%" y="303.50"></text></g><g><title>setup_global_ctxt (148,132 samples, 0.14%)</title><rect x="99.5642%" y="293" width="0.1449%" height="15" fill="rgb(210,40,34)"/><text x="99.8142%" y="303.50"></text></g><g><title>all (102,231,773 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(241,220,44)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (102,231,773 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(235,28,35)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (297,393 samples, 0.29%)</title><rect x="99.7091%" y="293" width="0.2909%" height="15" fill="rgb(210,56,17)"/><text x="99.9591%" y="303.50"></text></g></svg></svg>