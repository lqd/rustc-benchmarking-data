<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (59,500 samples, 0.10%)</title><rect x="7.3835%" y="213" width="0.1029%" height="15" fill="rgb(227,0,7)"/><text x="7.6335%" y="223.50"></text></g><g><title>param_env (132,092 samples, 0.23%)</title><rect x="8.4297%" y="181" width="0.2284%" height="15" fill="rgb(217,0,24)"/><text x="8.6797%" y="191.50"></text></g><g><title>item_attrs (89,052 samples, 0.15%)</title><rect x="8.9851%" y="149" width="0.1540%" height="15" fill="rgb(221,193,54)"/><text x="9.2351%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (85,191 samples, 0.15%)</title><rect x="8.9918%" y="133" width="0.1473%" height="15" fill="rgb(248,212,6)"/><text x="9.2418%" y="143.50"></text></g><g><title>codegen_fn_attrs (143,813 samples, 0.25%)</title><rect x="8.8995%" y="165" width="0.2487%" height="15" fill="rgb(208,68,35)"/><text x="9.1495%" y="175.50"></text></g><g><title>is_copy_raw (81,921 samples, 0.14%)</title><rect x="10.5060%" y="117" width="0.1417%" height="15" fill="rgb(232,128,0)"/><text x="10.7560%" y="127.50"></text></g><g><title>evaluate_obligation (77,011 samples, 0.13%)</title><rect x="10.5145%" y="101" width="0.1332%" height="15" fill="rgb(207,160,47)"/><text x="10.7645%" y="111.50"></text></g><g><title>adt_drop_tys (105,221 samples, 0.18%)</title><rect x="10.4910%" y="133" width="0.1820%" height="15" fill="rgb(228,23,34)"/><text x="10.7410%" y="143.50"></text></g><g><title>needs_drop_raw (703,058 samples, 1.22%)</title><rect x="10.3991%" y="149" width="1.2159%" height="15" fill="rgb(218,30,26)"/><text x="10.6491%" y="159.50"></text></g><g><title>is_copy_raw (542,736 samples, 0.94%)</title><rect x="10.6764%" y="133" width="0.9386%" height="15" fill="rgb(220,122,19)"/><text x="10.9264%" y="143.50"></text></g><g><title>evaluate_obligation (250,252 samples, 0.43%)</title><rect x="11.1822%" y="117" width="0.4328%" height="15" fill="rgb(250,228,42)"/><text x="11.4322%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (70,651 samples, 0.12%)</title><rect x="11.7388%" y="133" width="0.1222%" height="15" fill="rgb(240,193,28)"/><text x="11.9888%" y="143.50"></text></g><g><title>specialization_graph_of (154,071 samples, 0.27%)</title><rect x="11.8841%" y="133" width="0.2665%" height="15" fill="rgb(216,20,37)"/><text x="12.1341%" y="143.50"></text></g><g><title>resolve_instance (333,715 samples, 0.58%)</title><rect x="11.6150%" y="149" width="0.5771%" height="15" fill="rgb(206,188,39)"/><text x="11.8650%" y="159.50"></text></g><g><title>thir_body (291,313 samples, 0.50%)</title><rect x="12.2160%" y="149" width="0.5038%" height="15" fill="rgb(217,207,13)"/><text x="12.4660%" y="159.50"></text></g><g><title>mir_const (2,750,959 samples, 4.76%)</title><rect x="7.9741%" y="197" width="4.7576%" height="15" fill="rgb(231,73,38)"/><text x="8.2241%" y="207.50">mir_co..</text></g><g><title>unsafety_check_result (2,355,466 samples, 4.07%)</title><rect x="8.6581%" y="181" width="4.0736%" height="15" fill="rgb(225,20,46)"/><text x="8.9081%" y="191.50">unsa..</text></g><g><title>mir_built (2,072,052 samples, 3.58%)</title><rect x="9.1482%" y="165" width="3.5835%" height="15" fill="rgb(210,31,41)"/><text x="9.3982%" y="175.50">mir_..</text></g><g><title>has_structural_eq_impls (183,352 samples, 0.32%)</title><rect x="12.9508%" y="181" width="0.3171%" height="15" fill="rgb(221,200,47)"/><text x="13.2008%" y="191.50"></text></g><g><title>evaluate_obligation (164,112 samples, 0.28%)</title><rect x="12.9840%" y="165" width="0.2838%" height="15" fill="rgb(226,26,5)"/><text x="13.2340%" y="175.50"></text></g><g><title>trait_impls_of (137,842 samples, 0.24%)</title><rect x="13.0295%" y="149" width="0.2384%" height="15" fill="rgb(249,33,26)"/><text x="13.2795%" y="159.50"></text></g><g><title>is_freeze_raw (61,291 samples, 0.11%)</title><rect x="13.2702%" y="181" width="0.1060%" height="15" fill="rgb(235,183,28)"/><text x="13.5202%" y="191.50"></text></g><g><title>evaluate_obligation (58,381 samples, 0.10%)</title><rect x="13.2752%" y="165" width="0.1010%" height="15" fill="rgb(221,5,38)"/><text x="13.5252%" y="175.50"></text></g><g><title>needs_drop_raw (65,771 samples, 0.11%)</title><rect x="13.4788%" y="181" width="0.1137%" height="15" fill="rgb(247,18,42)"/><text x="13.7288%" y="191.50"></text></g><g><title>mir_const_qualif (500,306 samples, 0.87%)</title><rect x="12.7317%" y="197" width="0.8652%" height="15" fill="rgb(241,131,45)"/><text x="12.9817%" y="207.50"></text></g><g><title>mir_promoted (3,487,168 samples, 6.03%)</title><rect x="7.5665%" y="213" width="6.0308%" height="15" fill="rgb(249,31,29)"/><text x="7.8165%" y="223.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (354,395 samples, 0.61%)</title><rect x="13.5973%" y="213" width="0.6129%" height="15" fill="rgb(225,111,53)"/><text x="13.8473%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (149,732 samples, 0.26%)</title><rect x="14.2102%" y="213" width="0.2590%" height="15" fill="rgb(238,160,17)"/><text x="14.4602%" y="223.50"></text></g><g><title>normalize_projection_ty (80,381 samples, 0.14%)</title><rect x="14.3302%" y="197" width="0.1390%" height="15" fill="rgb(214,148,48)"/><text x="14.5802%" y="207.50"></text></g><g><title>type_op_normalize_ty (93,981 samples, 0.16%)</title><rect x="14.4692%" y="213" width="0.1625%" height="15" fill="rgb(232,36,49)"/><text x="14.7192%" y="223.50"></text></g><g><title>normalize_projection_ty (70,251 samples, 0.12%)</title><rect x="14.5102%" y="197" width="0.1215%" height="15" fill="rgb(209,103,24)"/><text x="14.7602%" y="207.50"></text></g><g><title>type_op_prove_predicate (978,610 samples, 1.69%)</title><rect x="14.6317%" y="213" width="1.6924%" height="15" fill="rgb(229,88,8)"/><text x="14.8817%" y="223.50"></text></g><g><title>MIR_borrow_checking (8,863,408 samples, 15.33%)</title><rect x="1.0052%" y="245" width="15.3286%" height="15" fill="rgb(213,181,19)"/><text x="1.2552%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,826,426 samples, 15.26%)</title><rect x="1.0691%" y="229" width="15.2646%" height="15" fill="rgb(254,191,54)"/><text x="1.3191%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (272,233 samples, 0.47%)</title><rect x="16.3338%" y="245" width="0.4708%" height="15" fill="rgb(241,83,37)"/><text x="16.5838%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (114,262 samples, 0.20%)</title><rect x="16.6070%" y="229" width="0.1976%" height="15" fill="rgb(233,36,39)"/><text x="16.8570%" y="239.50"></text></g><g><title>hir_module_items (102,392 samples, 0.18%)</title><rect x="16.8046%" y="245" width="0.1771%" height="15" fill="rgb(226,3,54)"/><text x="17.0546%" y="255.50"></text></g><g><title>codegen_fn_attrs (155,212 samples, 0.27%)</title><rect x="17.3337%" y="181" width="0.2684%" height="15" fill="rgb(245,192,40)"/><text x="17.5837%" y="191.50"></text></g><g><title>codegen_fn_attrs (223,142 samples, 0.39%)</title><rect x="17.2208%" y="213" width="0.3859%" height="15" fill="rgb(238,167,29)"/><text x="17.4708%" y="223.50"></text></g><g><title>should_inherit_track_caller (198,452 samples, 0.34%)</title><rect x="17.2635%" y="197" width="0.3432%" height="15" fill="rgb(232,182,51)"/><text x="17.5135%" y="207.50"></text></g><g><title>check_mod_attrs (337,074 samples, 0.58%)</title><rect x="17.0239%" y="229" width="0.5829%" height="15" fill="rgb(231,60,39)"/><text x="17.2739%" y="239.50"></text></g><g><title>lookup_deprecation_entry (91,781 samples, 0.16%)</title><rect x="17.9524%" y="213" width="0.1587%" height="15" fill="rgb(208,69,12)"/><text x="18.2024%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (255,213 samples, 0.44%)</title><rect x="17.7708%" y="229" width="0.4414%" height="15" fill="rgb(235,93,37)"/><text x="18.0208%" y="239.50"></text></g><g><title>misc_checking_1 (753,728 samples, 1.30%)</title><rect x="16.9823%" y="245" width="1.3035%" height="15" fill="rgb(213,116,39)"/><text x="17.2323%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (154,432 samples, 0.27%)</title><rect x="18.2882%" y="229" width="0.2671%" height="15" fill="rgb(222,207,29)"/><text x="18.5382%" y="239.50"></text></g><g><title>check_mod_liveness (113,440 samples, 0.20%)</title><rect x="18.3591%" y="213" width="0.1962%" height="15" fill="rgb(206,96,30)"/><text x="18.6091%" y="223.50"></text></g><g><title>misc_checking_2 (307,484 samples, 0.53%)</title><rect x="18.2858%" y="245" width="0.5318%" height="15" fill="rgb(218,138,4)"/><text x="18.5358%" y="255.50"></text></g><g><title>match_checking (151,652 samples, 0.26%)</title><rect x="18.5553%" y="229" width="0.2623%" height="15" fill="rgb(250,191,14)"/><text x="18.8053%" y="239.50"></text></g><g><title>check_match (139,182 samples, 0.24%)</title><rect x="18.5768%" y="213" width="0.2407%" height="15" fill="rgb(239,60,40)"/><text x="18.8268%" y="223.50"></text></g><g><title>check_private_in_public (103,661 samples, 0.18%)</title><rect x="18.8332%" y="229" width="0.1793%" height="15" fill="rgb(206,27,48)"/><text x="19.0832%" y="239.50"></text></g><g><title>death_checking (220,523 samples, 0.38%)</title><rect x="19.0125%" y="229" width="0.3814%" height="15" fill="rgb(225,35,8)"/><text x="19.2625%" y="239.50"></text></g><g><title>fn_abi_of_instance (101,042 samples, 0.17%)</title><rect x="20.7780%" y="165" width="0.1747%" height="15" fill="rgb(250,213,24)"/><text x="21.0280%" y="175.50"></text></g><g><title>eval_to_allocation_raw (240,713 samples, 0.42%)</title><rect x="20.6474%" y="197" width="0.4163%" height="15" fill="rgb(247,123,22)"/><text x="20.8974%" y="207.50"></text></g><g><title>eval_to_allocation_raw (239,863 samples, 0.41%)</title><rect x="20.6489%" y="181" width="0.4148%" height="15" fill="rgb(231,138,38)"/><text x="20.8989%" y="191.50"></text></g><g><title>erase_regions_ty (173,802 samples, 0.30%)</title><rect x="21.2515%" y="133" width="0.3006%" height="15" fill="rgb(231,145,46)"/><text x="21.5015%" y="143.50"></text></g><g><title>erase_regions_ty (172,562 samples, 0.30%)</title><rect x="21.2537%" y="117" width="0.2984%" height="15" fill="rgb(251,118,11)"/><text x="21.5037%" y="127.50"></text></g><g><title>fn_abi_of_instance (199,392 samples, 0.34%)</title><rect x="21.2209%" y="149" width="0.3448%" height="15" fill="rgb(217,147,25)"/><text x="21.4709%" y="159.50"></text></g><g><title>eval_to_const_value_raw (397,365 samples, 0.69%)</title><rect x="21.0637%" y="197" width="0.6872%" height="15" fill="rgb(247,81,37)"/><text x="21.3137%" y="207.50"></text></g><g><title>eval_to_const_value_raw (395,165 samples, 0.68%)</title><rect x="21.0675%" y="181" width="0.6834%" height="15" fill="rgb(209,12,38)"/><text x="21.3175%" y="191.50"></text></g><g><title>eval_to_allocation_raw (390,445 samples, 0.68%)</title><rect x="21.0757%" y="165" width="0.6752%" height="15" fill="rgb(227,1,9)"/><text x="21.3257%" y="175.50"></text></g><g><title>param_env (192,302 samples, 0.33%)</title><rect x="21.7509%" y="197" width="0.3326%" height="15" fill="rgb(248,47,43)"/><text x="22.0009%" y="207.50"></text></g><g><title>predicates_of (78,980 samples, 0.14%)</title><rect x="21.9469%" y="181" width="0.1366%" height="15" fill="rgb(221,10,30)"/><text x="22.1969%" y="191.50"></text></g><g><title>predicates_defined_on (64,560 samples, 0.11%)</title><rect x="21.9719%" y="165" width="0.1117%" height="15" fill="rgb(210,229,1)"/><text x="22.2219%" y="175.50"></text></g><g><title>crate_lints (2,589,708 samples, 4.48%)</title><rect x="19.3968%" y="213" width="4.4787%" height="15" fill="rgb(222,148,37)"/><text x="19.6468%" y="223.50">crate..</text></g><g><title>type_of (1,029,851 samples, 1.78%)</title><rect x="22.0944%" y="197" width="1.7810%" height="15" fill="rgb(234,67,33)"/><text x="22.3444%" y="207.50">t..</text></g><g><title>metadata_decode_entry_type_of (795,039 samples, 1.37%)</title><rect x="22.5005%" y="181" width="1.3750%" height="15" fill="rgb(247,98,35)"/><text x="22.7505%" y="191.50"></text></g><g><title>lint_checking (2,725,760 samples, 4.71%)</title><rect x="19.3939%" y="229" width="4.7140%" height="15" fill="rgb(247,138,52)"/><text x="19.6439%" y="239.50">lint_..</text></g><g><title>module_lints (134,372 samples, 0.23%)</title><rect x="23.8755%" y="213" width="0.2324%" height="15" fill="rgb(213,79,30)"/><text x="24.1255%" y="223.50"></text></g><g><title>lint_mod (129,441 samples, 0.22%)</title><rect x="23.8840%" y="197" width="0.2239%" height="15" fill="rgb(246,177,23)"/><text x="24.1340%" y="207.50"></text></g><g><title>privacy_access_levels (123,401 samples, 0.21%)</title><rect x="24.1079%" y="229" width="0.2134%" height="15" fill="rgb(230,62,27)"/><text x="24.3579%" y="239.50"></text></g><g><title>privacy_checking_modules (334,354 samples, 0.58%)</title><rect x="24.3213%" y="229" width="0.5782%" height="15" fill="rgb(216,154,8)"/><text x="24.5713%" y="239.50"></text></g><g><title>check_mod_privacy (330,704 samples, 0.57%)</title><rect x="24.3276%" y="213" width="0.5719%" height="15" fill="rgb(244,35,45)"/><text x="24.5776%" y="223.50"></text></g><g><title>misc_checking_3 (3,528,129 samples, 6.10%)</title><rect x="18.8175%" y="245" width="6.1016%" height="15" fill="rgb(251,115,12)"/><text x="19.0675%" y="255.50">misc_che..</text></g><g><title>impl_parent (844,977 samples, 1.46%)</title><rect x="27.0126%" y="181" width="1.4613%" height="15" fill="rgb(240,54,50)"/><text x="27.2626%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (559,506 samples, 0.97%)</title><rect x="27.5063%" y="165" width="0.9676%" height="15" fill="rgb(233,84,52)"/><text x="27.7563%" y="175.50"></text></g><g><title>impl_trait_ref (2,928,986 samples, 5.07%)</title><rect x="28.4740%" y="181" width="5.0655%" height="15" fill="rgb(207,117,47)"/><text x="28.7240%" y="191.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,644,063 samples, 4.57%)</title><rect x="28.9667%" y="165" width="4.5727%" height="15" fill="rgb(249,43,39)"/><text x="29.2167%" y="175.50">metad..</text></g><g><title>coherent_trait (5,205,258 samples, 9.00%)</title><rect x="25.0173%" y="213" width="9.0021%" height="15" fill="rgb(209,38,44)"/><text x="25.2673%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (5,194,838 samples, 8.98%)</title><rect x="25.0353%" y="197" width="8.9841%" height="15" fill="rgb(236,212,23)"/><text x="25.2853%" y="207.50">specializatio..</text></g><g><title>trait_impls_of (276,043 samples, 0.48%)</title><rect x="33.5420%" y="181" width="0.4774%" height="15" fill="rgb(242,79,21)"/><text x="33.7920%" y="191.50"></text></g><g><title>implementations_of_trait (93,571 samples, 0.16%)</title><rect x="33.8576%" y="165" width="0.1618%" height="15" fill="rgb(211,96,35)"/><text x="34.1076%" y="175.50"></text></g><g><title>coherence_checking (5,258,729 samples, 9.09%)</title><rect x="24.9918%" y="229" width="9.0946%" height="15" fill="rgb(253,215,40)"/><text x="25.2418%" y="239.50">coherence_che..</text></g><g><title>associated_item (144,511 samples, 0.25%)</title><rect x="42.5154%" y="165" width="0.2499%" height="15" fill="rgb(211,81,21)"/><text x="42.7654%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (110,141 samples, 0.19%)</title><rect x="42.5749%" y="149" width="0.1905%" height="15" fill="rgb(208,190,38)"/><text x="42.8249%" y="159.50"></text></g><g><title>associated_items (229,211 samples, 0.40%)</title><rect x="42.3931%" y="181" width="0.3964%" height="15" fill="rgb(235,213,38)"/><text x="42.6431%" y="191.50"></text></g><g><title>dropck_outlives (128,191 samples, 0.22%)</title><rect x="42.8348%" y="181" width="0.2217%" height="15" fill="rgb(237,122,38)"/><text x="43.0848%" y="191.50"></text></g><g><title>evaluate_obligation (367,543 samples, 0.64%)</title><rect x="43.0565%" y="181" width="0.6356%" height="15" fill="rgb(244,218,35)"/><text x="43.3065%" y="191.50"></text></g><g><title>trait_impls_of (91,062 samples, 0.16%)</title><rect x="43.5347%" y="165" width="0.1575%" height="15" fill="rgb(240,68,47)"/><text x="43.7847%" y="175.50"></text></g><g><title>item_attrs (98,982 samples, 0.17%)</title><rect x="43.9303%" y="181" width="0.1712%" height="15" fill="rgb(210,16,53)"/><text x="44.1803%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,352 samples, 0.16%)</title><rect x="43.9366%" y="165" width="0.1649%" height="15" fill="rgb(235,124,12)"/><text x="44.1866%" y="175.50"></text></g><g><title>method_autoderef_steps (141,223 samples, 0.24%)</title><rect x="44.1378%" y="181" width="0.2442%" height="15" fill="rgb(224,169,11)"/><text x="44.3878%" y="191.50"></text></g><g><title>evaluate_obligation (65,170 samples, 0.11%)</title><rect x="44.2694%" y="165" width="0.1127%" height="15" fill="rgb(250,166,2)"/><text x="44.5194%" y="175.50"></text></g><g><title>object_safety_violations (122,602 samples, 0.21%)</title><rect x="44.3821%" y="181" width="0.2120%" height="15" fill="rgb(242,216,29)"/><text x="44.6321%" y="191.50"></text></g><g><title>predicates_of (156,681 samples, 0.27%)</title><rect x="44.6162%" y="181" width="0.2710%" height="15" fill="rgb(230,116,27)"/><text x="44.8662%" y="191.50"></text></g><g><title>predicates_defined_on (113,011 samples, 0.20%)</title><rect x="44.6918%" y="165" width="0.1954%" height="15" fill="rgb(228,99,48)"/><text x="44.9418%" y="175.50"></text></g><g><title>associated_items (79,422 samples, 0.14%)</title><rect x="48.2356%" y="165" width="0.1374%" height="15" fill="rgb(253,11,6)"/><text x="48.4856%" y="175.50"></text></g><g><title>evaluate_obligation (165,861 samples, 0.29%)</title><rect x="48.4224%" y="165" width="0.2868%" height="15" fill="rgb(247,143,39)"/><text x="48.6724%" y="175.50"></text></g><g><title>is_copy_raw (192,802 samples, 0.33%)</title><rect x="48.8423%" y="165" width="0.3334%" height="15" fill="rgb(236,97,10)"/><text x="49.0923%" y="175.50"></text></g><g><title>evaluate_obligation (167,442 samples, 0.29%)</title><rect x="48.8861%" y="149" width="0.2896%" height="15" fill="rgb(233,208,19)"/><text x="49.1361%" y="159.50"></text></g><g><title>predicates_of (68,352 samples, 0.12%)</title><rect x="49.0575%" y="133" width="0.1182%" height="15" fill="rgb(216,164,2)"/><text x="49.3075%" y="143.50"></text></g><g><title>predicates_defined_on (62,422 samples, 0.11%)</title><rect x="49.0677%" y="117" width="0.1080%" height="15" fill="rgb(220,129,5)"/><text x="49.3177%" y="127.50"></text></g><g><title>method_autoderef_steps (75,730 samples, 0.13%)</title><rect x="49.1950%" y="165" width="0.1310%" height="15" fill="rgb(242,17,10)"/><text x="49.4450%" y="175.50"></text></g><g><title>typeck (2,600,278 samples, 4.50%)</title><rect x="44.9654%" y="181" width="4.4970%" height="15" fill="rgb(242,107,0)"/><text x="45.2154%" y="191.50">typeck</text></g><g><title>item_bodies_checking (8,879,299 samples, 15.36%)</title><rect x="34.1267%" y="229" width="15.3561%" height="15" fill="rgb(251,28,31)"/><text x="34.3767%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (8,876,319 samples, 15.35%)</title><rect x="34.1319%" y="213" width="15.3509%" height="15" fill="rgb(233,223,10)"/><text x="34.3819%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (8,852,109 samples, 15.31%)</title><rect x="34.1738%" y="197" width="15.3090%" height="15" fill="rgb(215,21,27)"/><text x="34.4238%" y="207.50">typeck</text></g><g><title>explicit_item_bounds (73,030 samples, 0.13%)</title><rect x="50.6066%" y="197" width="0.1263%" height="15" fill="rgb(232,23,21)"/><text x="50.8566%" y="207.50"></text></g><g><title>layout_of (76,831 samples, 0.13%)</title><rect x="50.8924%" y="165" width="0.1329%" height="15" fill="rgb(244,5,23)"/><text x="51.1424%" y="175.50"></text></g><g><title>layout_of (70,781 samples, 0.12%)</title><rect x="50.9029%" y="149" width="0.1224%" height="15" fill="rgb(226,81,46)"/><text x="51.1529%" y="159.50"></text></g><g><title>layout_of (110,202 samples, 0.19%)</title><rect x="50.8555%" y="181" width="0.1906%" height="15" fill="rgb(247,70,30)"/><text x="51.1055%" y="191.50"></text></g><g><title>layout_of (130,222 samples, 0.23%)</title><rect x="50.8292%" y="197" width="0.2252%" height="15" fill="rgb(212,68,19)"/><text x="51.0792%" y="207.50"></text></g><g><title>predicates_of (60,581 samples, 0.10%)</title><rect x="52.6907%" y="53" width="0.1048%" height="15" fill="rgb(240,187,13)"/><text x="52.9407%" y="63.50"></text></g><g><title>predicates_defined_on (58,781 samples, 0.10%)</title><rect x="52.6938%" y="37" width="0.1017%" height="15" fill="rgb(223,113,26)"/><text x="52.9438%" y="47.50"></text></g><g><title>needs_drop_raw (255,303 samples, 0.44%)</title><rect x="52.5985%" y="101" width="0.4415%" height="15" fill="rgb(206,192,2)"/><text x="52.8485%" y="111.50"></text></g><g><title>is_copy_raw (249,873 samples, 0.43%)</title><rect x="52.6079%" y="85" width="0.4321%" height="15" fill="rgb(241,108,4)"/><text x="52.8579%" y="95.50"></text></g><g><title>evaluate_obligation (244,633 samples, 0.42%)</title><rect x="52.6170%" y="69" width="0.4231%" height="15" fill="rgb(247,173,49)"/><text x="52.8670%" y="79.50"></text></g><g><title>trait_impls_of (140,082 samples, 0.24%)</title><rect x="52.7978%" y="53" width="0.2423%" height="15" fill="rgb(224,114,35)"/><text x="53.0478%" y="63.50"></text></g><g><title>impl_trait_ref (61,210 samples, 0.11%)</title><rect x="53.9994%" y="85" width="0.1059%" height="15" fill="rgb(245,159,27)"/><text x="54.2494%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (60,150 samples, 0.10%)</title><rect x="54.0012%" y="69" width="0.1040%" height="15" fill="rgb(245,172,44)"/><text x="54.2512%" y="79.50"></text></g><g><title>mir_const (1,151,302 samples, 1.99%)</title><rect x="52.2307%" y="149" width="1.9911%" height="15" fill="rgb(236,23,11)"/><text x="52.4807%" y="159.50">m..</text></g><g><title>unsafety_check_result (1,093,962 samples, 1.89%)</title><rect x="52.3298%" y="133" width="1.8919%" height="15" fill="rgb(205,117,38)"/><text x="52.5798%" y="143.50">u..</text></g><g><title>mir_built (1,054,442 samples, 1.82%)</title><rect x="52.3982%" y="117" width="1.8236%" height="15" fill="rgb(237,72,25)"/><text x="52.6482%" y="127.50">m..</text></g><g><title>typeck (645,317 samples, 1.12%)</title><rect x="53.1057%" y="101" width="1.1160%" height="15" fill="rgb(244,70,9)"/><text x="53.3557%" y="111.50"></text></g><g><title>mir_promoted (1,225,354 samples, 2.12%)</title><rect x="52.1139%" y="165" width="2.1192%" height="15" fill="rgb(217,125,39)"/><text x="52.3639%" y="175.50">m..</text></g><g><title>type_of (1,858,301 samples, 3.21%)</title><rect x="51.0794%" y="197" width="3.2138%" height="15" fill="rgb(235,36,10)"/><text x="51.3294%" y="207.50">typ..</text></g><g><title>mir_borrowck (1,853,641 samples, 3.21%)</title><rect x="51.0875%" y="181" width="3.2057%" height="15" fill="rgb(251,123,47)"/><text x="51.3375%" y="191.50">mir..</text></g><g><title>item_types_checking (3,244,685 samples, 5.61%)</title><rect x="49.4828%" y="229" width="5.6114%" height="15" fill="rgb(221,13,13)"/><text x="49.7328%" y="239.50">item_ty..</text></g><g><title>check_mod_item_types (3,238,825 samples, 5.60%)</title><rect x="49.4929%" y="213" width="5.6013%" height="15" fill="rgb(238,131,9)"/><text x="49.7429%" y="223.50">check_m..</text></g><g><title>typeck (463,165 samples, 0.80%)</title><rect x="54.2932%" y="197" width="0.8010%" height="15" fill="rgb(211,50,8)"/><text x="54.5432%" y="207.50"></text></g><g><title>fn_sig (214,444 samples, 0.37%)</title><rect x="55.3557%" y="197" width="0.3709%" height="15" fill="rgb(245,182,24)"/><text x="55.6057%" y="207.50"></text></g><g><title>is_late_bound_map (61,430 samples, 0.11%)</title><rect x="55.8535%" y="181" width="0.1062%" height="15" fill="rgb(242,14,37)"/><text x="56.1035%" y="191.50"></text></g><g><title>generics_of (190,472 samples, 0.33%)</title><rect x="55.7266%" y="197" width="0.3294%" height="15" fill="rgb(246,228,12)"/><text x="55.9766%" y="207.50"></text></g><g><title>late_bound_vars_map (175,291 samples, 0.30%)</title><rect x="56.4388%" y="149" width="0.3032%" height="15" fill="rgb(213,55,15)"/><text x="56.6888%" y="159.50"></text></g><g><title>resolve_lifetimes (170,731 samples, 0.30%)</title><rect x="56.4467%" y="133" width="0.2953%" height="15" fill="rgb(209,9,3)"/><text x="56.6967%" y="143.50"></text></g><g><title>lint_levels (58,070 samples, 0.10%)</title><rect x="56.6415%" y="117" width="0.1004%" height="15" fill="rgb(230,59,30)"/><text x="56.8915%" y="127.50"></text></g><g><title>explicit_predicates_of (315,774 samples, 0.55%)</title><rect x="56.2073%" y="165" width="0.5461%" height="15" fill="rgb(209,121,21)"/><text x="56.4573%" y="175.50"></text></g><g><title>predicates_of (600,067 samples, 1.04%)</title><rect x="56.1111%" y="197" width="1.0378%" height="15" fill="rgb(220,109,13)"/><text x="56.3611%" y="207.50"></text></g><g><title>predicates_defined_on (580,176 samples, 1.00%)</title><rect x="56.1455%" y="181" width="1.0034%" height="15" fill="rgb(232,18,1)"/><text x="56.3955%" y="191.50"></text></g><g><title>inferred_outlives_of (228,672 samples, 0.40%)</title><rect x="56.7534%" y="165" width="0.3955%" height="15" fill="rgb(215,41,42)"/><text x="57.0034%" y="175.50"></text></g><g><title>inferred_outlives_crate (217,612 samples, 0.38%)</title><rect x="56.7725%" y="149" width="0.3763%" height="15" fill="rgb(224,123,36)"/><text x="57.0225%" y="159.50"></text></g><g><title>type_of (115,771 samples, 0.20%)</title><rect x="56.9487%" y="133" width="0.2002%" height="15" fill="rgb(240,125,3)"/><text x="57.1987%" y="143.50"></text></g><g><title>type_collecting (1,349,825 samples, 2.33%)</title><rect x="55.0979%" y="229" width="2.3344%" height="15" fill="rgb(205,98,50)"/><text x="55.3479%" y="239.50">t..</text></g><g><title>collect_mod_item_types (1,336,995 samples, 2.31%)</title><rect x="55.1200%" y="213" width="2.3122%" height="15" fill="rgb(205,185,37)"/><text x="55.3700%" y="223.50">c..</text></g><g><title>type_of (163,860 samples, 0.28%)</title><rect x="57.1489%" y="197" width="0.2834%" height="15" fill="rgb(238,207,15)"/><text x="57.3989%" y="207.50"></text></g><g><title>evaluate_obligation (504,488 samples, 0.87%)</title><rect x="59.1950%" y="197" width="0.8725%" height="15" fill="rgb(213,199,42)"/><text x="59.4450%" y="207.50"></text></g><g><title>implied_outlives_bounds (166,942 samples, 0.29%)</title><rect x="60.1017%" y="197" width="0.2887%" height="15" fill="rgb(235,201,11)"/><text x="60.3517%" y="207.50"></text></g><g><title>param_env (99,071 samples, 0.17%)</title><rect x="60.4009%" y="197" width="0.1713%" height="15" fill="rgb(207,46,11)"/><text x="60.6509%" y="207.50"></text></g><g><title>region_scope_tree (104,141 samples, 0.18%)</title><rect x="60.6184%" y="197" width="0.1801%" height="15" fill="rgb(241,35,35)"/><text x="60.8684%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,857,261 samples, 3.21%)</title><rect x="57.5923%" y="213" width="3.2120%" height="15" fill="rgb(243,32,47)"/><text x="57.8423%" y="223.50">che..</text></g><g><title>evaluate_obligation (134,222 samples, 0.23%)</title><rect x="62.5750%" y="197" width="0.2321%" height="15" fill="rgb(247,202,23)"/><text x="62.8250%" y="207.50"></text></g><g><title>adt_sized_constraint (107,612 samples, 0.19%)</title><rect x="62.6210%" y="181" width="0.1861%" height="15" fill="rgb(219,102,11)"/><text x="62.8710%" y="191.50"></text></g><g><title>implied_outlives_bounds (124,511 samples, 0.22%)</title><rect x="62.8175%" y="197" width="0.2153%" height="15" fill="rgb(243,110,44)"/><text x="63.0675%" y="207.50"></text></g><g><title>param_env (235,453 samples, 0.41%)</title><rect x="63.0348%" y="197" width="0.4072%" height="15" fill="rgb(222,74,54)"/><text x="63.2848%" y="207.50"></text></g><g><title>predicates_of (62,162 samples, 0.11%)</title><rect x="63.4420%" y="197" width="0.1075%" height="15" fill="rgb(216,99,12)"/><text x="63.6920%" y="207.50"></text></g><g><title>analysis (36,411,323 samples, 62.97%)</title><rect x="0.7434%" y="261" width="62.9706%" height="15" fill="rgb(226,22,26)"/><text x="0.9934%" y="271.50">analysis</text></g><g><title>type_check_crate (22,432,248 samples, 38.79%)</title><rect x="24.9192%" y="245" width="38.7949%" height="15" fill="rgb(217,163,10)"/><text x="25.1692%" y="255.50">type_check_crate</text></g><g><title>wf_checking (3,629,790 samples, 6.28%)</title><rect x="57.4366%" y="229" width="6.2774%" height="15" fill="rgb(213,25,53)"/><text x="57.6866%" y="239.50">wf_check..</text></g><g><title>check_item_well_formed (1,682,489 samples, 2.91%)</title><rect x="60.8043%" y="213" width="2.9097%" height="15" fill="rgb(252,105,26)"/><text x="61.0543%" y="223.50">ch..</text></g><g><title>variances_of (64,861 samples, 0.11%)</title><rect x="63.6019%" y="197" width="0.1122%" height="15" fill="rgb(220,39,43)"/><text x="63.8519%" y="207.50"></text></g><g><title>crate_variances (60,601 samples, 0.10%)</title><rect x="63.6092%" y="181" width="0.1048%" height="15" fill="rgb(229,68,48)"/><text x="63.8592%" y="191.50"></text></g><g><title>codegen_crate (342,934 samples, 0.59%)</title><rect x="63.7236%" y="261" width="0.5931%" height="15" fill="rgb(252,8,32)"/><text x="63.9736%" y="271.50"></text></g><g><title>AST_validation (101,312 samples, 0.18%)</title><rect x="64.5389%" y="245" width="0.1752%" height="15" fill="rgb(223,20,43)"/><text x="64.7889%" y="255.50"></text></g><g><title>crate_injection (57,891 samples, 0.10%)</title><rect x="64.7836%" y="245" width="0.1001%" height="15" fill="rgb(229,81,49)"/><text x="65.0336%" y="255.50"></text></g><g><title>metadata_load_macro (148,382 samples, 0.26%)</title><rect x="76.9990%" y="213" width="0.2566%" height="15" fill="rgb(236,28,36)"/><text x="77.2490%" y="223.50"></text></g><g><title>metadata_register_crate (5,323,229 samples, 9.21%)</title><rect x="77.2556%" y="213" width="9.2061%" height="15" fill="rgb(249,185,26)"/><text x="77.5056%" y="223.50">metadata_regi..</text></g><g><title>metadata_register_crate (458,555 samples, 0.79%)</title><rect x="85.6687%" y="197" width="0.7930%" height="15" fill="rgb(249,174,33)"/><text x="85.9187%" y="207.50"></text></g><g><title>macro_expand_crate (12,530,678 samples, 21.67%)</title><rect x="64.8837%" y="245" width="21.6709%" height="15" fill="rgb(233,201,37)"/><text x="65.1337%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (12,514,448 samples, 21.64%)</title><rect x="64.9118%" y="229" width="21.6428%" height="15" fill="rgb(221,78,26)"/><text x="65.1618%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (62,501 samples, 0.11%)</title><rect x="86.5691%" y="245" width="0.1081%" height="15" fill="rgb(250,127,30)"/><text x="86.8191%" y="255.50"></text></g><g><title>late_resolve_crate (1,151,512 samples, 1.99%)</title><rect x="86.8339%" y="229" width="1.9915%" height="15" fill="rgb(230,49,44)"/><text x="87.0839%" y="239.50">l..</text></g><g><title>configure_and_expand (14,226,407 samples, 24.60%)</title><rect x="64.3167%" y="261" width="24.6035%" height="15" fill="rgb(229,67,23)"/><text x="64.5667%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,296,954 samples, 2.24%)</title><rect x="86.6772%" y="245" width="2.2430%" height="15" fill="rgb(249,83,47)"/><text x="86.9272%" y="255.50">r..</text></g><g><title>drop_ast (88,201 samples, 0.15%)</title><rect x="88.9202%" y="261" width="0.1525%" height="15" fill="rgb(215,43,3)"/><text x="89.1702%" y="271.50"></text></g><g><title>early_lint_checks (160,582 samples, 0.28%)</title><rect x="89.1005%" y="261" width="0.2777%" height="15" fill="rgb(238,154,13)"/><text x="89.3505%" y="271.50"></text></g><g><title>free_global_ctxt (2,614,759 samples, 4.52%)</title><rect x="89.3782%" y="261" width="4.5220%" height="15" fill="rgb(219,56,2)"/><text x="89.6282%" y="271.50">free_..</text></g><g><title>crate_hash (69,231 samples, 0.12%)</title><rect x="95.0015%" y="245" width="0.1197%" height="15" fill="rgb(233,0,4)"/><text x="95.2515%" y="255.50"></text></g><g><title>generate_crate_metadata (810,549 samples, 1.40%)</title><rect x="93.9003%" y="261" width="1.4018%" height="15" fill="rgb(235,30,7)"/><text x="94.1503%" y="271.50"></text></g><g><title>hir_lowering (1,221,653 samples, 2.11%)</title><rect x="95.3021%" y="261" width="2.1128%" height="15" fill="rgb(250,79,13)"/><text x="95.5521%" y="271.50">h..</text></g><g><title>parse_crate (346,003 samples, 0.60%)</title><rect x="97.4987%" y="261" width="0.5984%" height="15" fill="rgb(211,146,34)"/><text x="97.7487%" y="271.50"></text></g><g><title>prepare_outputs (197,973 samples, 0.34%)</title><rect x="98.1080%" y="261" width="0.3424%" height="15" fill="rgb(228,22,38)"/><text x="98.3580%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (483,026 samples, 0.84%)</title><rect x="98.4504%" y="261" width="0.8354%" height="15" fill="rgb(235,168,5)"/><text x="98.7004%" y="271.50"></text></g><g><title>setup_global_ctxt (88,411 samples, 0.15%)</title><rect x="99.3046%" y="261" width="0.1529%" height="15" fill="rgb(221,155,16)"/><text x="99.5546%" y="271.50"></text></g><g><title>all (57,822,728 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (57,822,728 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (313,713 samples, 0.54%)</title><rect x="99.4575%" y="261" width="0.5425%" height="15" fill="rgb(234,103,6)"/><text x="99.7075%" y="271.50"></text></g></svg></svg>