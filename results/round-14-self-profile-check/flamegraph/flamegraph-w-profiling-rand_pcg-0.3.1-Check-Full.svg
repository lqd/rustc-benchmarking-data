<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (76,390 samples, 0.11%)</title><rect x="9.4947%" y="149" width="0.1051%" height="15" fill="rgb(227,0,7)"/><text x="9.7447%" y="159.50"></text></g><g><title>param_env (130,610 samples, 0.18%)</title><rect x="10.9278%" y="117" width="0.1797%" height="15" fill="rgb(217,0,24)"/><text x="11.1778%" y="127.50"></text></g><g><title>item_attrs (190,842 samples, 0.26%)</title><rect x="11.4904%" y="85" width="0.2626%" height="15" fill="rgb(221,193,54)"/><text x="11.7404%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (186,972 samples, 0.26%)</title><rect x="11.4958%" y="69" width="0.2573%" height="15" fill="rgb(248,212,6)"/><text x="11.7458%" y="79.50"></text></g><g><title>codegen_fn_attrs (241,642 samples, 0.33%)</title><rect x="11.4275%" y="101" width="0.3325%" height="15" fill="rgb(208,68,35)"/><text x="11.6775%" y="111.50"></text></g><g><title>is_copy_raw (95,362 samples, 0.13%)</title><rect x="13.7110%" y="85" width="0.1312%" height="15" fill="rgb(232,128,0)"/><text x="13.9610%" y="95.50"></text></g><g><title>evaluate_obligation (78,282 samples, 0.11%)</title><rect x="13.7345%" y="69" width="0.1077%" height="15" fill="rgb(207,160,47)"/><text x="13.9845%" y="79.50"></text></g><g><title>needs_drop_raw (103,790 samples, 0.14%)</title><rect x="13.8441%" y="85" width="0.1428%" height="15" fill="rgb(228,23,34)"/><text x="14.0941%" y="95.50"></text></g><g><title>is_copy_raw (93,760 samples, 0.13%)</title><rect x="13.8579%" y="69" width="0.1290%" height="15" fill="rgb(218,30,26)"/><text x="14.1079%" y="79.50"></text></g><g><title>evaluate_obligation (82,260 samples, 0.11%)</title><rect x="13.8737%" y="53" width="0.1132%" height="15" fill="rgb(220,122,19)"/><text x="14.1237%" y="63.50"></text></g><g><title>impl_parent (89,281 samples, 0.12%)</title><rect x="14.5370%" y="53" width="0.1229%" height="15" fill="rgb(250,228,42)"/><text x="14.7870%" y="63.50"></text></g><g><title>specialization_graph_of (473,925 samples, 0.65%)</title><rect x="14.2338%" y="69" width="0.6522%" height="15" fill="rgb(240,193,28)"/><text x="14.4838%" y="79.50"></text></g><g><title>impl_trait_ref (164,301 samples, 0.23%)</title><rect x="14.6599%" y="53" width="0.2261%" height="15" fill="rgb(216,20,37)"/><text x="14.9099%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (120,911 samples, 0.17%)</title><rect x="14.7196%" y="37" width="0.1664%" height="15" fill="rgb(206,188,39)"/><text x="14.9696%" y="47.50"></text></g><g><title>resolve_instance (703,608 samples, 0.97%)</title><rect x="13.9869%" y="85" width="0.9682%" height="15" fill="rgb(217,207,13)"/><text x="14.2369%" y="95.50"></text></g><g><title>thir_body (584,710 samples, 0.80%)</title><rect x="14.9765%" y="85" width="0.8046%" height="15" fill="rgb(231,73,38)"/><text x="15.2265%" y="95.50"></text></g><g><title>mir_const (4,013,288 samples, 5.52%)</title><rect x="10.2707%" y="133" width="5.5227%" height="15" fill="rgb(225,20,46)"/><text x="10.5207%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (3,405,161 samples, 4.69%)</title><rect x="11.1075%" y="117" width="4.6859%" height="15" fill="rgb(210,31,41)"/><text x="11.3575%" y="127.50">unsaf..</text></g><g><title>mir_built (2,930,976 samples, 4.03%)</title><rect x="11.7601%" y="101" width="4.0333%" height="15" fill="rgb(221,200,47)"/><text x="12.0101%" y="111.50">mir_..</text></g><g><title>mir_promoted (4,948,416 samples, 6.81%)</title><rect x="9.5998%" y="149" width="6.8096%" height="15" fill="rgb(226,26,5)"/><text x="9.8498%" y="159.50">mir_promo..</text></g><g><title>mir_const_qualif (447,606 samples, 0.62%)</title><rect x="15.7934%" y="133" width="0.6160%" height="15" fill="rgb(249,33,26)"/><text x="16.0434%" y="143.50"></text></g><g><title>mir_const (356,814 samples, 0.49%)</title><rect x="15.9183%" y="117" width="0.4910%" height="15" fill="rgb(235,183,28)"/><text x="16.1683%" y="127.50"></text></g><g><title>unsafety_check_result (242,593 samples, 0.33%)</title><rect x="16.0755%" y="101" width="0.3338%" height="15" fill="rgb(221,5,38)"/><text x="16.3255%" y="111.50"></text></g><g><title>mir_built (183,592 samples, 0.25%)</title><rect x="16.1567%" y="85" width="0.2526%" height="15" fill="rgb(247,18,42)"/><text x="16.4067%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (75,081 samples, 0.10%)</title><rect x="16.4116%" y="149" width="0.1033%" height="15" fill="rgb(241,131,45)"/><text x="16.6616%" y="159.50"></text></g><g><title>type_op_prove_predicate (481,715 samples, 0.66%)</title><rect x="16.6759%" y="149" width="0.6629%" height="15" fill="rgb(249,31,29)"/><text x="16.9259%" y="159.50"></text></g><g><title>MIR_borrow_checking (11,448,687 samples, 15.75%)</title><rect x="1.5944%" y="181" width="15.7546%" height="15" fill="rgb(225,111,53)"/><text x="1.8444%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (11,354,217 samples, 15.62%)</title><rect x="1.7244%" y="165" width="15.6246%" height="15" fill="rgb(238,160,17)"/><text x="1.9744%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (238,543 samples, 0.33%)</title><rect x="17.3490%" y="181" width="0.3283%" height="15" fill="rgb(214,148,48)"/><text x="17.5990%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (193,862 samples, 0.27%)</title><rect x="17.4105%" y="165" width="0.2668%" height="15" fill="rgb(232,36,49)"/><text x="17.6605%" y="175.50"></text></g><g><title>hir_module_items (264,413 samples, 0.36%)</title><rect x="17.6773%" y="181" width="0.3639%" height="15" fill="rgb(209,103,24)"/><text x="17.9273%" y="191.50"></text></g><g><title>get_lang_items (73,801 samples, 0.10%)</title><rect x="18.7182%" y="133" width="0.1016%" height="15" fill="rgb(229,88,8)"/><text x="18.9682%" y="143.50"></text></g><g><title>associated_item (86,251 samples, 0.12%)</title><rect x="18.9158%" y="117" width="0.1187%" height="15" fill="rgb(213,181,19)"/><text x="19.1658%" y="127.50"></text></g><g><title>item_attrs (107,570 samples, 0.15%)</title><rect x="19.0907%" y="101" width="0.1480%" height="15" fill="rgb(254,191,54)"/><text x="19.3407%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (94,350 samples, 0.13%)</title><rect x="19.1089%" y="85" width="0.1298%" height="15" fill="rgb(241,83,37)"/><text x="19.3589%" y="95.50"></text></g><g><title>codegen_fn_attrs (196,913 samples, 0.27%)</title><rect x="19.0345%" y="117" width="0.2710%" height="15" fill="rgb(233,36,39)"/><text x="19.2845%" y="127.50"></text></g><g><title>should_inherit_track_caller (362,806 samples, 0.50%)</title><rect x="18.8197%" y="133" width="0.4993%" height="15" fill="rgb(226,3,54)"/><text x="19.0697%" y="143.50"></text></g><g><title>codegen_fn_attrs (595,737 samples, 0.82%)</title><rect x="18.5602%" y="149" width="0.8198%" height="15" fill="rgb(245,192,40)"/><text x="18.8102%" y="159.50"></text></g><g><title>check_mod_attrs (932,631 samples, 1.28%)</title><rect x="18.0968%" y="165" width="1.2834%" height="15" fill="rgb(238,167,29)"/><text x="18.3468%" y="175.50"></text></g><g><title>check_mod_const_bodies (177,232 samples, 0.24%)</title><rect x="19.3802%" y="165" width="0.2439%" height="15" fill="rgb(232,182,51)"/><text x="19.6302%" y="175.50"></text></g><g><title>check_mod_loops (78,981 samples, 0.11%)</title><rect x="19.6241%" y="165" width="0.1087%" height="15" fill="rgb(231,60,39)"/><text x="19.8741%" y="175.50"></text></g><g><title>lookup_deprecation_entry (190,632 samples, 0.26%)</title><rect x="20.0307%" y="149" width="0.2623%" height="15" fill="rgb(208,69,12)"/><text x="20.2807%" y="159.50"></text></g><g><title>stability_index (133,682 samples, 0.18%)</title><rect x="20.1091%" y="133" width="0.1840%" height="15" fill="rgb(235,93,37)"/><text x="20.3591%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (448,585 samples, 0.62%)</title><rect x="19.7635%" y="165" width="0.6173%" height="15" fill="rgb(213,116,39)"/><text x="20.0135%" y="175.50"></text></g><g><title>looking_for_derive_registrar (97,611 samples, 0.13%)</title><rect x="20.3842%" y="165" width="0.1343%" height="15" fill="rgb(222,207,29)"/><text x="20.6342%" y="175.50"></text></g><g><title>misc_checking_1 (1,804,400 samples, 2.48%)</title><rect x="18.0417%" y="181" width="2.4830%" height="15" fill="rgb(206,96,30)"/><text x="18.2917%" y="191.50">mi..</text></g><g><title>liveness_and_intrinsic_checking (233,363 samples, 0.32%)</title><rect x="20.5268%" y="165" width="0.3211%" height="15" fill="rgb(218,138,4)"/><text x="20.7768%" y="175.50"></text></g><g><title>check_mod_liveness (178,293 samples, 0.25%)</title><rect x="20.6026%" y="149" width="0.2454%" height="15" fill="rgb(250,191,14)"/><text x="20.8526%" y="159.50"></text></g><g><title>misc_checking_2 (519,226 samples, 0.71%)</title><rect x="20.5247%" y="181" width="0.7145%" height="15" fill="rgb(239,60,40)"/><text x="20.7747%" y="191.50"></text></g><g><title>match_checking (284,353 samples, 0.39%)</title><rect x="20.8479%" y="165" width="0.3913%" height="15" fill="rgb(206,27,48)"/><text x="21.0979%" y="175.50"></text></g><g><title>check_match (261,053 samples, 0.36%)</title><rect x="20.8800%" y="149" width="0.3592%" height="15" fill="rgb(225,35,8)"/><text x="21.1300%" y="159.50"></text></g><g><title>check_private_in_public (125,942 samples, 0.17%)</title><rect x="21.2516%" y="165" width="0.1733%" height="15" fill="rgb(250,213,24)"/><text x="21.5016%" y="175.50"></text></g><g><title>death_checking (291,473 samples, 0.40%)</title><rect x="21.4249%" y="165" width="0.4011%" height="15" fill="rgb(247,123,22)"/><text x="21.6749%" y="175.50"></text></g><g><title>item_attrs (77,131 samples, 0.11%)</title><rect x="21.7199%" y="149" width="0.1061%" height="15" fill="rgb(231,138,38)"/><text x="21.9699%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (76,211 samples, 0.10%)</title><rect x="21.7212%" y="133" width="0.1049%" height="15" fill="rgb(231,145,46)"/><text x="21.9712%" y="143.50"></text></g><g><title>eval_to_const_value_raw (169,592 samples, 0.23%)</title><rect x="22.3386%" y="133" width="0.2334%" height="15" fill="rgb(251,118,11)"/><text x="22.5886%" y="143.50"></text></g><g><title>eval_to_const_value_raw (164,442 samples, 0.23%)</title><rect x="22.3456%" y="117" width="0.2263%" height="15" fill="rgb(217,147,25)"/><text x="22.5956%" y="127.50"></text></g><g><title>eval_to_allocation_raw (154,712 samples, 0.21%)</title><rect x="22.3590%" y="101" width="0.2129%" height="15" fill="rgb(247,81,37)"/><text x="22.6090%" y="111.50"></text></g><g><title>param_env (151,872 samples, 0.21%)</title><rect x="22.5719%" y="133" width="0.2090%" height="15" fill="rgb(209,12,38)"/><text x="22.8219%" y="143.50"></text></g><g><title>crate_lints (1,019,612 samples, 1.40%)</title><rect x="21.8280%" y="149" width="1.4031%" height="15" fill="rgb(227,1,9)"/><text x="22.0780%" y="159.50"></text></g><g><title>type_of (327,164 samples, 0.45%)</title><rect x="22.7809%" y="133" width="0.4502%" height="15" fill="rgb(248,47,43)"/><text x="23.0309%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (249,674 samples, 0.34%)</title><rect x="22.8876%" y="117" width="0.3436%" height="15" fill="rgb(221,10,30)"/><text x="23.1376%" y="127.50"></text></g><g><title>lint_checking (1,244,584 samples, 1.71%)</title><rect x="21.8260%" y="165" width="1.7127%" height="15" fill="rgb(210,229,1)"/><text x="22.0760%" y="175.50"></text></g><g><title>module_lints (223,512 samples, 0.31%)</title><rect x="23.2311%" y="149" width="0.3076%" height="15" fill="rgb(222,148,37)"/><text x="23.4811%" y="159.50"></text></g><g><title>lint_mod (220,532 samples, 0.30%)</title><rect x="23.2352%" y="133" width="0.3035%" height="15" fill="rgb(234,67,33)"/><text x="23.4852%" y="143.50"></text></g><g><title>privacy_access_levels (146,351 samples, 0.20%)</title><rect x="23.5387%" y="165" width="0.2014%" height="15" fill="rgb(247,98,35)"/><text x="23.7887%" y="175.50"></text></g><g><title>privacy_checking_modules (359,604 samples, 0.49%)</title><rect x="23.7401%" y="165" width="0.4949%" height="15" fill="rgb(247,138,52)"/><text x="23.9901%" y="175.50"></text></g><g><title>check_mod_privacy (357,114 samples, 0.49%)</title><rect x="23.7435%" y="149" width="0.4914%" height="15" fill="rgb(213,79,30)"/><text x="23.9935%" y="159.50"></text></g><g><title>misc_checking_3 (2,189,494 samples, 3.01%)</title><rect x="21.2392%" y="181" width="3.0130%" height="15" fill="rgb(246,177,23)"/><text x="21.4892%" y="191.50">mis..</text></g><g><title>impl_parent (921,121 samples, 1.27%)</title><rect x="26.4820%" y="117" width="1.2676%" height="15" fill="rgb(230,62,27)"/><text x="26.7320%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (516,837 samples, 0.71%)</title><rect x="27.0383%" y="101" width="0.7112%" height="15" fill="rgb(216,154,8)"/><text x="27.2883%" y="111.50"></text></g><g><title>impl_trait_ref (1,955,423 samples, 2.69%)</title><rect x="27.7495%" y="117" width="2.6909%" height="15" fill="rgb(244,35,45)"/><text x="27.9995%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,545,590 samples, 2.13%)</title><rect x="28.3135%" y="101" width="2.1269%" height="15" fill="rgb(251,115,12)"/><text x="28.5635%" y="111.50">m..</text></g><g><title>coherent_trait (4,761,912 samples, 6.55%)</title><rect x="24.3620%" y="149" width="6.5529%" height="15" fill="rgb(240,54,50)"/><text x="24.6120%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (4,742,662 samples, 6.53%)</title><rect x="24.3885%" y="133" width="6.5264%" height="15" fill="rgb(233,84,52)"/><text x="24.6385%" y="143.50">specializ..</text></g><g><title>trait_impls_of (343,423 samples, 0.47%)</title><rect x="30.4423%" y="117" width="0.4726%" height="15" fill="rgb(207,117,47)"/><text x="30.6923%" y="127.50"></text></g><g><title>implementations_of_trait (78,200 samples, 0.11%)</title><rect x="30.8073%" y="101" width="0.1076%" height="15" fill="rgb(249,43,39)"/><text x="31.0573%" y="111.50"></text></g><g><title>coherence_checking (4,852,004 samples, 6.68%)</title><rect x="24.3290%" y="165" width="6.6769%" height="15" fill="rgb(209,38,44)"/><text x="24.5790%" y="175.50">coherence..</text></g><g><title>associated_item (419,326 samples, 0.58%)</title><rect x="43.9094%" y="101" width="0.5770%" height="15" fill="rgb(236,212,23)"/><text x="44.1594%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (335,713 samples, 0.46%)</title><rect x="44.0245%" y="85" width="0.4620%" height="15" fill="rgb(242,79,21)"/><text x="44.2745%" y="95.50"></text></g><g><title>associated_items (579,167 samples, 0.80%)</title><rect x="43.7085%" y="117" width="0.7970%" height="15" fill="rgb(211,96,35)"/><text x="43.9585%" y="127.50"></text></g><g><title>dropck_outlives (114,312 samples, 0.16%)</title><rect x="44.5503%" y="117" width="0.1573%" height="15" fill="rgb(253,215,40)"/><text x="44.8003%" y="127.50"></text></g><g><title>fn_abi_of_instance (85,721 samples, 0.12%)</title><rect x="44.7715%" y="69" width="0.1180%" height="15" fill="rgb(211,81,21)"/><text x="45.0215%" y="79.50"></text></g><g><title>eval_to_const_value_raw (173,212 samples, 0.24%)</title><rect x="44.7076%" y="117" width="0.2384%" height="15" fill="rgb(208,190,38)"/><text x="44.9576%" y="127.50"></text></g><g><title>eval_to_const_value_raw (171,752 samples, 0.24%)</title><rect x="44.7096%" y="101" width="0.2363%" height="15" fill="rgb(235,213,38)"/><text x="44.9596%" y="111.50"></text></g><g><title>eval_to_allocation_raw (168,692 samples, 0.23%)</title><rect x="44.7138%" y="85" width="0.2321%" height="15" fill="rgb(237,122,38)"/><text x="44.9638%" y="95.50"></text></g><g><title>generics_of (125,644 samples, 0.17%)</title><rect x="46.7417%" y="101" width="0.1729%" height="15" fill="rgb(244,218,35)"/><text x="46.9917%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (94,991 samples, 0.13%)</title><rect x="46.7839%" y="85" width="0.1307%" height="15" fill="rgb(240,68,47)"/><text x="47.0339%" y="95.50"></text></g><g><title>impl_trait_ref (137,472 samples, 0.19%)</title><rect x="47.0500%" y="101" width="0.1892%" height="15" fill="rgb(210,16,53)"/><text x="47.3000%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (109,542 samples, 0.15%)</title><rect x="47.0885%" y="85" width="0.1507%" height="15" fill="rgb(235,124,12)"/><text x="47.3385%" y="95.50"></text></g><g><title>predicates_of (575,717 samples, 0.79%)</title><rect x="47.2863%" y="101" width="0.7922%" height="15" fill="rgb(224,169,11)"/><text x="47.5363%" y="111.50"></text></g><g><title>predicates_defined_on (199,223 samples, 0.27%)</title><rect x="47.8044%" y="85" width="0.2742%" height="15" fill="rgb(250,166,2)"/><text x="48.0544%" y="95.50"></text></g><g><title>specializes (934,438 samples, 1.29%)</title><rect x="48.0786%" y="101" width="1.2859%" height="15" fill="rgb(242,216,29)"/><text x="48.3286%" y="111.50"></text></g><g><title>param_env (571,815 samples, 0.79%)</title><rect x="48.5776%" y="85" width="0.7869%" height="15" fill="rgb(230,116,27)"/><text x="48.8276%" y="95.50"></text></g><g><title>def_span (264,003 samples, 0.36%)</title><rect x="49.0012%" y="69" width="0.3633%" height="15" fill="rgb(228,99,48)"/><text x="49.2512%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (238,123 samples, 0.33%)</title><rect x="49.0368%" y="53" width="0.3277%" height="15" fill="rgb(253,11,6)"/><text x="49.2868%" y="63.50"></text></g><g><title>trait_impls_of (319,762 samples, 0.44%)</title><rect x="49.3800%" y="101" width="0.4400%" height="15" fill="rgb(247,143,39)"/><text x="49.6300%" y="111.50"></text></g><g><title>implementations_of_trait (120,852 samples, 0.17%)</title><rect x="49.6537%" y="85" width="0.1663%" height="15" fill="rgb(236,97,10)"/><text x="49.9037%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (109,680 samples, 0.15%)</title><rect x="49.6690%" y="69" width="0.1509%" height="15" fill="rgb(233,208,19)"/><text x="49.9190%" y="79.50"></text></g><g><title>evaluate_obligation (3,546,549 samples, 4.88%)</title><rect x="44.9459%" y="117" width="4.8804%" height="15" fill="rgb(216,164,2)"/><text x="45.1959%" y="127.50">evalua..</text></g><g><title>impl_item_implementor_ids (72,902 samples, 0.10%)</title><rect x="50.0424%" y="117" width="0.1003%" height="15" fill="rgb(220,129,5)"/><text x="50.2924%" y="127.50"></text></g><g><title>method_autoderef_steps (117,872 samples, 0.16%)</title><rect x="50.3130%" y="117" width="0.1622%" height="15" fill="rgb(242,17,10)"/><text x="50.5630%" y="127.50"></text></g><g><title>param_env (75,000 samples, 0.10%)</title><rect x="50.5143%" y="117" width="0.1032%" height="15" fill="rgb(242,107,0)"/><text x="50.7643%" y="127.50"></text></g><g><title>predicates_of (199,813 samples, 0.27%)</title><rect x="50.6305%" y="117" width="0.2750%" height="15" fill="rgb(251,28,31)"/><text x="50.8805%" y="127.50"></text></g><g><title>predicates_defined_on (133,662 samples, 0.18%)</title><rect x="50.7215%" y="101" width="0.1839%" height="15" fill="rgb(233,223,10)"/><text x="50.9715%" y="111.50"></text></g><g><title>item_bodies_checking (14,534,783 samples, 20.00%)</title><rect x="31.0667%" y="165" width="20.0014%" height="15" fill="rgb(215,21,27)"/><text x="31.3167%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (14,532,142 samples, 20.00%)</title><rect x="31.0703%" y="149" width="19.9978%" height="15" fill="rgb(232,23,21)"/><text x="31.3203%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (14,472,821 samples, 19.92%)</title><rect x="31.1519%" y="133" width="19.9162%" height="15" fill="rgb(244,5,23)"/><text x="31.4019%" y="143.50">typeck</text></g><g><title>def_span (162,493 samples, 0.22%)</title><rect x="53.6734%" y="69" width="0.2236%" height="15" fill="rgb(226,81,46)"/><text x="53.9234%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (154,412 samples, 0.21%)</title><rect x="53.6845%" y="53" width="0.2125%" height="15" fill="rgb(247,70,30)"/><text x="53.9345%" y="63.50"></text></g><g><title>mir_for_ctfe (883,823 samples, 1.22%)</title><rect x="53.9355%" y="69" width="1.2162%" height="15" fill="rgb(212,68,19)"/><text x="54.1855%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (874,293 samples, 1.20%)</title><rect x="53.9486%" y="53" width="1.2031%" height="15" fill="rgb(240,187,13)"/><text x="54.1986%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,888,952 samples, 2.60%)</title><rect x="52.5947%" y="117" width="2.5994%" height="15" fill="rgb(223,113,26)"/><text x="52.8447%" y="127.50">ev..</text></g><g><title>eval_to_const_value_raw (1,847,222 samples, 2.54%)</title><rect x="52.6522%" y="101" width="2.5420%" height="15" fill="rgb(206,192,2)"/><text x="52.9022%" y="111.50">ev..</text></g><g><title>eval_to_allocation_raw (1,798,402 samples, 2.47%)</title><rect x="52.7193%" y="85" width="2.4748%" height="15" fill="rgb(241,108,4)"/><text x="52.9693%" y="95.50">ev..</text></g><g><title>evaluate_obligation (2,540,899 samples, 3.50%)</title><rect x="52.0211%" y="133" width="3.4966%" height="15" fill="rgb(247,173,49)"/><text x="52.2711%" y="143.50">eva..</text></g><g><title>item_types_checking (3,482,889 samples, 4.79%)</title><rect x="51.0681%" y="165" width="4.7928%" height="15" fill="rgb(224,114,35)"/><text x="51.3181%" y="175.50">item_t..</text></g><g><title>check_mod_item_types (3,479,779 samples, 4.79%)</title><rect x="51.0724%" y="149" width="4.7886%" height="15" fill="rgb(245,159,27)"/><text x="51.3224%" y="159.50">check_..</text></g><g><title>typeck (157,422 samples, 0.22%)</title><rect x="55.6443%" y="133" width="0.2166%" height="15" fill="rgb(245,172,44)"/><text x="55.8943%" y="143.50"></text></g><g><title>late_bound_vars_map (118,901 samples, 0.16%)</title><rect x="57.0065%" y="117" width="0.1636%" height="15" fill="rgb(236,23,11)"/><text x="57.2565%" y="127.50"></text></g><g><title>resolve_lifetimes (82,441 samples, 0.11%)</title><rect x="57.0567%" y="101" width="0.1134%" height="15" fill="rgb(205,117,38)"/><text x="57.3067%" y="111.50"></text></g><g><title>fn_sig (647,408 samples, 0.89%)</title><rect x="56.4141%" y="133" width="0.8909%" height="15" fill="rgb(237,72,25)"/><text x="56.6641%" y="143.50"></text></g><g><title>type_of (77,890 samples, 0.11%)</title><rect x="57.1979%" y="117" width="0.1072%" height="15" fill="rgb(244,70,9)"/><text x="57.4479%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (75,050 samples, 0.10%)</title><rect x="57.2018%" y="101" width="0.1033%" height="15" fill="rgb(217,125,39)"/><text x="57.4518%" y="111.50"></text></g><g><title>named_region_map (648,658 samples, 0.89%)</title><rect x="57.5324%" y="117" width="0.8926%" height="15" fill="rgb(235,36,10)"/><text x="57.7824%" y="127.50"></text></g><g><title>resolve_lifetimes (616,768 samples, 0.85%)</title><rect x="57.5762%" y="101" width="0.8487%" height="15" fill="rgb(251,123,47)"/><text x="57.8262%" y="111.50"></text></g><g><title>lint_levels (183,252 samples, 0.25%)</title><rect x="58.1728%" y="85" width="0.2522%" height="15" fill="rgb(221,13,13)"/><text x="58.4228%" y="95.50"></text></g><g><title>generics_of (840,623 samples, 1.16%)</title><rect x="57.3050%" y="133" width="1.1568%" height="15" fill="rgb(238,131,9)"/><text x="57.5550%" y="143.50"></text></g><g><title>impl_trait_ref (100,750 samples, 0.14%)</title><rect x="58.4618%" y="133" width="0.1386%" height="15" fill="rgb(211,50,8)"/><text x="58.7118%" y="143.50"></text></g><g><title>explicit_predicates_of (173,982 samples, 0.24%)</title><rect x="58.8780%" y="101" width="0.2394%" height="15" fill="rgb(245,182,24)"/><text x="59.1280%" y="111.50"></text></g><g><title>predicates_of (457,233 samples, 0.63%)</title><rect x="58.6005%" y="133" width="0.6292%" height="15" fill="rgb(242,14,37)"/><text x="58.8505%" y="143.50"></text></g><g><title>predicates_defined_on (379,942 samples, 0.52%)</title><rect x="58.7068%" y="117" width="0.5228%" height="15" fill="rgb(246,228,12)"/><text x="58.9568%" y="127.50"></text></g><g><title>inferred_outlives_of (81,550 samples, 0.11%)</title><rect x="59.1175%" y="101" width="0.1122%" height="15" fill="rgb(213,55,15)"/><text x="59.3675%" y="111.50"></text></g><g><title>type_collecting (2,684,810 samples, 3.69%)</title><rect x="55.8630%" y="165" width="3.6946%" height="15" fill="rgb(209,9,3)"/><text x="56.1130%" y="175.50">type..</text></g><g><title>collect_mod_item_types (2,664,210 samples, 3.67%)</title><rect x="55.8913%" y="149" width="3.6662%" height="15" fill="rgb(230,59,30)"/><text x="56.1413%" y="159.50">coll..</text></g><g><title>type_of (238,255 samples, 0.33%)</title><rect x="59.2297%" y="133" width="0.3279%" height="15" fill="rgb(209,121,21)"/><text x="59.4797%" y="143.50"></text></g><g><title>adt_def (75,941 samples, 0.10%)</title><rect x="61.3871%" y="85" width="0.1045%" height="15" fill="rgb(220,109,13)"/><text x="61.6371%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (75,721 samples, 0.10%)</title><rect x="61.3874%" y="69" width="0.1042%" height="15" fill="rgb(232,18,1)"/><text x="61.6374%" y="79.50"></text></g><g><title>adt_sized_constraint (77,621 samples, 0.11%)</title><rect x="61.3858%" y="101" width="0.1068%" height="15" fill="rgb(215,41,42)"/><text x="61.6358%" y="111.50"></text></g><g><title>adt_sized_constraint (113,351 samples, 0.16%)</title><rect x="61.3392%" y="117" width="0.1560%" height="15" fill="rgb(224,123,36)"/><text x="61.5892%" y="127.50"></text></g><g><title>evaluate_obligation (319,204 samples, 0.44%)</title><rect x="61.1127%" y="133" width="0.4393%" height="15" fill="rgb(240,125,3)"/><text x="61.3627%" y="143.50"></text></g><g><title>implied_outlives_bounds (82,400 samples, 0.11%)</title><rect x="61.5647%" y="133" width="0.1134%" height="15" fill="rgb(205,98,50)"/><text x="61.8147%" y="143.50"></text></g><g><title>param_env (157,911 samples, 0.22%)</title><rect x="61.6781%" y="133" width="0.2173%" height="15" fill="rgb(205,185,37)"/><text x="61.9281%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,832,901 samples, 2.52%)</title><rect x="59.7129%" y="149" width="2.5223%" height="15" fill="rgb(238,207,15)"/><text x="59.9629%" y="159.50">ch..</text></g><g><title>region_scope_tree (220,992 samples, 0.30%)</title><rect x="61.9311%" y="133" width="0.3041%" height="15" fill="rgb(213,199,42)"/><text x="62.1811%" y="143.50"></text></g><g><title>evaluate_obligation (263,723 samples, 0.36%)</title><rect x="63.0991%" y="133" width="0.3629%" height="15" fill="rgb(235,201,11)"/><text x="63.3491%" y="143.50"></text></g><g><title>param_env (211,413 samples, 0.29%)</title><rect x="63.5348%" y="133" width="0.2909%" height="15" fill="rgb(207,46,11)"/><text x="63.7848%" y="143.50"></text></g><g><title>analysis (45,766,991 samples, 62.98%)</title><rect x="1.0239%" y="197" width="62.9803%" height="15" fill="rgb(241,35,35)"/><text x="1.2739%" y="207.50">analysis</text></g><g><title>type_check_crate (28,887,263 samples, 39.75%)</title><rect x="24.2522%" y="181" width="39.7520%" height="15" fill="rgb(243,32,47)"/><text x="24.5022%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,227,296 samples, 4.44%)</title><rect x="59.5631%" y="165" width="4.4411%" height="15" fill="rgb(247,202,23)"/><text x="59.8131%" y="175.50">wf_ch..</text></g><g><title>check_item_well_formed (1,285,503 samples, 1.77%)</title><rect x="62.2352%" y="149" width="1.7690%" height="15" fill="rgb(219,102,11)"/><text x="62.4852%" y="159.50"></text></g><g><title>codegen_crate (292,893 samples, 0.40%)</title><rect x="64.0184%" y="197" width="0.4031%" height="15" fill="rgb(243,110,44)"/><text x="64.2684%" y="207.50"></text></g><g><title>AST_validation (208,302 samples, 0.29%)</title><rect x="64.7274%" y="181" width="0.2866%" height="15" fill="rgb(222,74,54)"/><text x="64.9774%" y="191.50"></text></g><g><title>complete_gated_feature_checking (100,481 samples, 0.14%)</title><rect x="65.0141%" y="181" width="0.1383%" height="15" fill="rgb(216,99,12)"/><text x="65.2641%" y="191.50"></text></g><g><title>crate_injection (109,621 samples, 0.15%)</title><rect x="65.1523%" y="181" width="0.1509%" height="15" fill="rgb(226,22,26)"/><text x="65.4023%" y="191.50"></text></g><g><title>metadata_load_macro (361,734 samples, 0.50%)</title><rect x="83.1427%" y="149" width="0.4978%" height="15" fill="rgb(217,163,10)"/><text x="83.3927%" y="159.50"></text></g><g><title>metadata_register_crate (217,852 samples, 0.30%)</title><rect x="83.6405%" y="149" width="0.2998%" height="15" fill="rgb(213,25,53)"/><text x="83.8905%" y="159.50"></text></g><g><title>macro_expand_crate (13,730,784 samples, 18.90%)</title><rect x="65.3032%" y="181" width="18.8950%" height="15" fill="rgb(252,105,26)"/><text x="65.5532%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,704,214 samples, 18.86%)</title><rect x="65.3397%" y="165" width="18.8585%" height="15" fill="rgb(220,39,43)"/><text x="65.5897%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (187,443 samples, 0.26%)</title><rect x="83.9403%" y="149" width="0.2579%" height="15" fill="rgb(229,68,48)"/><text x="84.1903%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (112,271 samples, 0.15%)</title><rect x="84.2051%" y="181" width="0.1545%" height="15" fill="rgb(252,8,32)"/><text x="84.4551%" y="191.50"></text></g><g><title>finalize_imports (88,871 samples, 0.12%)</title><rect x="84.3730%" y="165" width="0.1223%" height="15" fill="rgb(223,20,43)"/><text x="84.6230%" y="175.50"></text></g><g><title>finalize_macro_resolutions (275,843 samples, 0.38%)</title><rect x="84.4953%" y="165" width="0.3796%" height="15" fill="rgb(229,81,49)"/><text x="84.7453%" y="175.50"></text></g><g><title>late_resolve_crate (2,084,053 samples, 2.87%)</title><rect x="84.8749%" y="165" width="2.8679%" height="15" fill="rgb(236,28,36)"/><text x="85.1249%" y="175.50">la..</text></g><g><title>resolve_check_unused (75,081 samples, 0.10%)</title><rect x="87.7672%" y="165" width="0.1033%" height="15" fill="rgb(249,185,26)"/><text x="88.0172%" y="175.50"></text></g><g><title>configure_and_expand (17,105,322 samples, 23.54%)</title><rect x="64.4214%" y="197" width="23.5388%" height="15" fill="rgb(249,174,33)"/><text x="64.6714%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,616,489 samples, 3.60%)</title><rect x="84.3596%" y="181" width="3.6006%" height="15" fill="rgb(233,201,37)"/><text x="84.6096%" y="191.50">reso..</text></g><g><title>drop_ast (246,423 samples, 0.34%)</title><rect x="87.9602%" y="197" width="0.3391%" height="15" fill="rgb(221,78,26)"/><text x="88.2102%" y="207.50"></text></g><g><title>early_lint_checks (475,906 samples, 0.65%)</title><rect x="88.3219%" y="197" width="0.6549%" height="15" fill="rgb(250,127,30)"/><text x="88.5719%" y="207.50"></text></g><g><title>free_global_ctxt (1,909,962 samples, 2.63%)</title><rect x="88.9768%" y="197" width="2.6283%" height="15" fill="rgb(230,49,44)"/><text x="89.2268%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (712,698 samples, 0.98%)</title><rect x="91.6051%" y="197" width="0.9807%" height="15" fill="rgb(229,67,23)"/><text x="91.8551%" y="207.50"></text></g><g><title>hir_lowering (3,530,299 samples, 4.86%)</title><rect x="92.5859%" y="197" width="4.8581%" height="15" fill="rgb(249,83,47)"/><text x="92.8359%" y="207.50">hir_lo..</text></g><g><title>parse_crate (428,715 samples, 0.59%)</title><rect x="97.5062%" y="197" width="0.5900%" height="15" fill="rgb(215,43,3)"/><text x="97.7562%" y="207.50"></text></g><g><title>prepare_outputs (323,174 samples, 0.44%)</title><rect x="98.1089%" y="197" width="0.4447%" height="15" fill="rgb(238,154,13)"/><text x="98.3589%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (576,826 samples, 0.79%)</title><rect x="98.5536%" y="197" width="0.7938%" height="15" fill="rgb(219,56,2)"/><text x="98.8036%" y="207.50"></text></g><g><title>setup_global_ctxt (135,722 samples, 0.19%)</title><rect x="99.3622%" y="197" width="0.1868%" height="15" fill="rgb(233,0,4)"/><text x="99.6122%" y="207.50"></text></g><g><title>all (72,668,722 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (72,668,722 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (327,794 samples, 0.45%)</title><rect x="99.5489%" y="197" width="0.4511%" height="15" fill="rgb(211,146,34)"/><text x="99.7989%" y="207.50"></text></g></svg></svg>