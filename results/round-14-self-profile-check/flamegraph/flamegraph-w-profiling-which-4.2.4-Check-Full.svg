<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (185,664 samples, 0.16%)</title><rect x="7.1166%" y="181" width="0.1588%" height="15" fill="rgb(227,0,7)"/><text x="7.3666%" y="191.50"></text></g><g><title>item_attrs (170,973 samples, 0.15%)</title><rect x="7.5784%" y="149" width="0.1462%" height="15" fill="rgb(217,0,24)"/><text x="7.8284%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (165,303 samples, 0.14%)</title><rect x="7.5832%" y="133" width="0.1414%" height="15" fill="rgb(221,193,54)"/><text x="7.8332%" y="143.50"></text></g><g><title>codegen_fn_attrs (242,744 samples, 0.21%)</title><rect x="7.5232%" y="165" width="0.2076%" height="15" fill="rgb(248,212,6)"/><text x="7.7732%" y="175.50"></text></g><g><title>adt_drop_tys (202,462 samples, 0.17%)</title><rect x="9.0565%" y="133" width="0.1731%" height="15" fill="rgb(208,68,35)"/><text x="9.3065%" y="143.50"></text></g><g><title>needs_drop_raw (568,265 samples, 0.49%)</title><rect x="9.0054%" y="149" width="0.4859%" height="15" fill="rgb(232,128,0)"/><text x="9.2554%" y="159.50"></text></g><g><title>is_copy_raw (305,982 samples, 0.26%)</title><rect x="9.2297%" y="133" width="0.2617%" height="15" fill="rgb(207,160,47)"/><text x="9.4797%" y="143.50"></text></g><g><title>evaluate_obligation (234,472 samples, 0.20%)</title><rect x="9.2908%" y="117" width="0.2005%" height="15" fill="rgb(228,23,34)"/><text x="9.5408%" y="127.50"></text></g><g><title>impl_parent (152,474 samples, 0.13%)</title><rect x="9.9475%" y="117" width="0.1304%" height="15" fill="rgb(218,30,26)"/><text x="10.1975%" y="127.50"></text></g><g><title>specialization_graph_of (767,578 samples, 0.66%)</title><rect x="9.7344%" y="133" width="0.6564%" height="15" fill="rgb(220,122,19)"/><text x="9.9844%" y="143.50"></text></g><g><title>impl_trait_ref (365,870 samples, 0.31%)</title><rect x="10.0779%" y="117" width="0.3129%" height="15" fill="rgb(250,228,42)"/><text x="10.3279%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (316,430 samples, 0.27%)</title><rect x="10.1202%" y="101" width="0.2706%" height="15" fill="rgb(240,193,28)"/><text x="10.3702%" y="111.50"></text></g><g><title>resolve_instance (1,101,641 samples, 0.94%)</title><rect x="9.4913%" y="149" width="0.9420%" height="15" fill="rgb(216,20,37)"/><text x="9.7413%" y="159.50"></text></g><g><title>thir_body (524,622 samples, 0.45%)</title><rect x="10.4547%" y="149" width="0.4486%" height="15" fill="rgb(206,188,39)"/><text x="10.7047%" y="159.50"></text></g><g><title>mir_const (4,958,100 samples, 4.24%)</title><rect x="6.6850%" y="197" width="4.2398%" height="15" fill="rgb(217,207,13)"/><text x="6.9350%" y="207.50">mir_c..</text></g><g><title>unsafety_check_result (4,267,642 samples, 3.65%)</title><rect x="7.2754%" y="181" width="3.6494%" height="15" fill="rgb(231,73,38)"/><text x="7.5254%" y="191.50">unsa..</text></g><g><title>mir_built (3,735,162 samples, 3.19%)</title><rect x="7.7307%" y="165" width="3.1940%" height="15" fill="rgb(225,20,46)"/><text x="7.9807%" y="175.50">mir..</text></g><g><title>mir_promoted (5,501,634 samples, 4.70%)</title><rect x="6.2462%" y="213" width="4.7046%" height="15" fill="rgb(210,31,41)"/><text x="6.4962%" y="223.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (211,073 samples, 0.18%)</title><rect x="10.9508%" y="213" width="0.1805%" height="15" fill="rgb(221,200,47)"/><text x="11.2008%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (166,903 samples, 0.14%)</title><rect x="11.1313%" y="213" width="0.1427%" height="15" fill="rgb(226,26,5)"/><text x="11.3813%" y="223.50"></text></g><g><title>type_op_prove_predicate (991,831 samples, 0.85%)</title><rect x="11.3459%" y="213" width="0.8481%" height="15" fill="rgb(249,33,26)"/><text x="11.5959%" y="223.50"></text></g><g><title>MIR_borrow_checking (13,406,021 samples, 11.46%)</title><rect x="0.7354%" y="245" width="11.4638%" height="15" fill="rgb(235,183,28)"/><text x="0.9854%" y="255.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (13,300,810 samples, 11.37%)</title><rect x="0.8254%" y="229" width="11.3739%" height="15" fill="rgb(221,5,38)"/><text x="1.0754%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (151,962 samples, 0.13%)</title><rect x="12.2227%" y="245" width="0.1299%" height="15" fill="rgb(247,18,42)"/><text x="12.4727%" y="255.50"></text></g><g><title>should_inherit_track_caller (192,481 samples, 0.16%)</title><rect x="12.6593%" y="197" width="0.1646%" height="15" fill="rgb(241,131,45)"/><text x="12.9093%" y="207.50"></text></g><g><title>codegen_fn_attrs (368,802 samples, 0.32%)</title><rect x="12.5248%" y="213" width="0.3154%" height="15" fill="rgb(249,31,29)"/><text x="12.7748%" y="223.50"></text></g><g><title>check_mod_attrs (542,185 samples, 0.46%)</title><rect x="12.3767%" y="229" width="0.4636%" height="15" fill="rgb(225,111,53)"/><text x="12.6267%" y="239.50"></text></g><g><title>lookup_deprecation_entry (119,631 samples, 0.10%)</title><rect x="13.0925%" y="213" width="0.1023%" height="15" fill="rgb(238,160,17)"/><text x="13.3425%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (338,985 samples, 0.29%)</title><rect x="12.9767%" y="229" width="0.2899%" height="15" fill="rgb(214,148,48)"/><text x="13.2267%" y="239.50"></text></g><g><title>misc_checking_1 (1,115,853 samples, 0.95%)</title><rect x="12.3534%" y="245" width="0.9542%" height="15" fill="rgb(232,36,49)"/><text x="12.6034%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (404,404 samples, 0.35%)</title><rect x="13.3090%" y="229" width="0.3458%" height="15" fill="rgb(209,103,24)"/><text x="13.5590%" y="239.50"></text></g><g><title>check_mod_liveness (334,474 samples, 0.29%)</title><rect x="13.3688%" y="213" width="0.2860%" height="15" fill="rgb(229,88,8)"/><text x="13.6188%" y="223.50"></text></g><g><title>misc_checking_2 (823,799 samples, 0.70%)</title><rect x="13.3076%" y="245" width="0.7045%" height="15" fill="rgb(213,181,19)"/><text x="13.5576%" y="255.50"></text></g><g><title>match_checking (417,715 samples, 0.36%)</title><rect x="13.6548%" y="229" width="0.3572%" height="15" fill="rgb(254,191,54)"/><text x="13.9048%" y="239.50"></text></g><g><title>check_match (383,365 samples, 0.33%)</title><rect x="13.6842%" y="213" width="0.3278%" height="15" fill="rgb(241,83,37)"/><text x="13.9342%" y="223.50"></text></g><g><title>check_private_in_public (193,553 samples, 0.17%)</title><rect x="14.0207%" y="229" width="0.1655%" height="15" fill="rgb(233,36,39)"/><text x="14.2707%" y="239.50"></text></g><g><title>death_checking (422,004 samples, 0.36%)</title><rect x="14.1862%" y="229" width="0.3609%" height="15" fill="rgb(226,3,54)"/><text x="14.4362%" y="239.50"></text></g><g><title>item_attrs (125,171 samples, 0.11%)</title><rect x="14.4400%" y="213" width="0.1070%" height="15" fill="rgb(245,192,40)"/><text x="14.6900%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (123,811 samples, 0.11%)</title><rect x="14.4412%" y="197" width="0.1059%" height="15" fill="rgb(238,167,29)"/><text x="14.6912%" y="207.50"></text></g><g><title>param_env (239,831 samples, 0.21%)</title><rect x="15.1023%" y="197" width="0.2051%" height="15" fill="rgb(232,182,51)"/><text x="15.3523%" y="207.50"></text></g><g><title>crate_lints (2,005,882 samples, 1.72%)</title><rect x="14.5485%" y="213" width="1.7153%" height="15" fill="rgb(231,60,39)"/><text x="14.7985%" y="223.50"></text></g><g><title>type_of (1,070,659 samples, 0.92%)</title><rect x="15.3482%" y="197" width="0.9155%" height="15" fill="rgb(208,69,12)"/><text x="15.5982%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (839,528 samples, 0.72%)</title><rect x="15.5459%" y="181" width="0.7179%" height="15" fill="rgb(235,93,37)"/><text x="15.7959%" y="191.50"></text></g><g><title>lint_checking (2,328,156 samples, 1.99%)</title><rect x="14.5470%" y="229" width="1.9909%" height="15" fill="rgb(213,116,39)"/><text x="14.7970%" y="239.50">l..</text></g><g><title>module_lints (320,594 samples, 0.27%)</title><rect x="16.2638%" y="213" width="0.2741%" height="15" fill="rgb(222,207,29)"/><text x="16.5138%" y="223.50"></text></g><g><title>lint_mod (316,094 samples, 0.27%)</title><rect x="16.2676%" y="197" width="0.2703%" height="15" fill="rgb(206,96,30)"/><text x="16.5176%" y="207.50"></text></g><g><title>privacy_access_levels (337,604 samples, 0.29%)</title><rect x="16.5379%" y="229" width="0.2887%" height="15" fill="rgb(218,138,4)"/><text x="16.7879%" y="239.50"></text></g><g><title>privacy_checking_modules (778,578 samples, 0.67%)</title><rect x="16.8266%" y="229" width="0.6658%" height="15" fill="rgb(250,191,14)"/><text x="17.0766%" y="239.50"></text></g><g><title>check_mod_privacy (775,348 samples, 0.66%)</title><rect x="16.8294%" y="213" width="0.6630%" height="15" fill="rgb(239,60,40)"/><text x="17.0794%" y="223.50"></text></g><g><title>misc_checking_3 (4,081,876 samples, 3.49%)</title><rect x="14.0120%" y="245" width="3.4905%" height="15" fill="rgb(206,27,48)"/><text x="14.2620%" y="255.50">mis..</text></g><g><title>impl_trait_ref (197,271 samples, 0.17%)</title><rect x="17.7163%" y="149" width="0.1687%" height="15" fill="rgb(225,35,8)"/><text x="17.9663%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (178,881 samples, 0.15%)</title><rect x="17.7320%" y="133" width="0.1530%" height="15" fill="rgb(250,213,24)"/><text x="17.9820%" y="143.50"></text></g><g><title>adt_destructor (347,824 samples, 0.30%)</title><rect x="17.6092%" y="197" width="0.2974%" height="15" fill="rgb(247,123,22)"/><text x="17.8592%" y="207.50"></text></g><g><title>coherent_trait (339,264 samples, 0.29%)</title><rect x="17.6165%" y="181" width="0.2901%" height="15" fill="rgb(231,138,38)"/><text x="17.8665%" y="191.50"></text></g><g><title>specialization_graph_of (338,114 samples, 0.29%)</title><rect x="17.6175%" y="165" width="0.2891%" height="15" fill="rgb(231,145,46)"/><text x="17.8675%" y="175.50"></text></g><g><title>impl_parent (2,892,497 samples, 2.47%)</title><rect x="21.4283%" y="181" width="2.4735%" height="15" fill="rgb(251,118,11)"/><text x="21.6783%" y="191.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,434,654 samples, 1.23%)</title><rect x="22.6749%" y="165" width="1.2268%" height="15" fill="rgb(217,147,25)"/><text x="22.9249%" y="175.50"></text></g><g><title>impl_trait_ref (5,139,428 samples, 4.39%)</title><rect x="23.9017%" y="181" width="4.3949%" height="15" fill="rgb(247,81,37)"/><text x="24.1517%" y="191.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,134,524 samples, 3.54%)</title><rect x="24.7611%" y="165" width="3.5355%" height="15" fill="rgb(209,12,38)"/><text x="25.0111%" y="175.50">met..</text></g><g><title>coherent_trait (13,434,451 samples, 11.49%)</title><rect x="17.5826%" y="213" width="11.4882%" height="15" fill="rgb(227,1,9)"/><text x="17.8326%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (12,967,586 samples, 11.09%)</title><rect x="17.9819%" y="197" width="11.0889%" height="15" fill="rgb(248,47,43)"/><text x="18.2319%" y="207.50">specialization_g..</text></g><g><title>trait_impls_of (902,880 samples, 0.77%)</title><rect x="28.2987%" y="181" width="0.7721%" height="15" fill="rgb(221,10,30)"/><text x="28.5487%" y="191.50"></text></g><g><title>implementations_of_trait (240,410 samples, 0.21%)</title><rect x="28.8652%" y="165" width="0.2056%" height="15" fill="rgb(210,229,1)"/><text x="29.1152%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (195,470 samples, 0.17%)</title><rect x="28.9036%" y="149" width="0.1672%" height="15" fill="rgb(222,148,37)"/><text x="29.1536%" y="159.50"></text></g><g><title>coherence_checking (13,518,432 samples, 11.56%)</title><rect x="17.5647%" y="229" width="11.5600%" height="15" fill="rgb(234,67,33)"/><text x="17.8147%" y="239.50">coherence_checking</text></g><g><title>associated_item (206,143 samples, 0.18%)</title><rect x="34.1667%" y="165" width="0.1763%" height="15" fill="rgb(247,98,35)"/><text x="34.4167%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (164,743 samples, 0.14%)</title><rect x="34.2021%" y="149" width="0.1409%" height="15" fill="rgb(247,138,52)"/><text x="34.4521%" y="159.50"></text></g><g><title>associated_items (316,114 samples, 0.27%)</title><rect x="34.0833%" y="181" width="0.2703%" height="15" fill="rgb(213,79,30)"/><text x="34.3333%" y="191.50"></text></g><g><title>dropck_outlives (146,622 samples, 0.13%)</title><rect x="34.3728%" y="181" width="0.1254%" height="15" fill="rgb(246,177,23)"/><text x="34.6228%" y="191.50"></text></g><g><title>evaluate_obligation (478,365 samples, 0.41%)</title><rect x="34.4981%" y="181" width="0.4091%" height="15" fill="rgb(230,62,27)"/><text x="34.7481%" y="191.50"></text></g><g><title>method_autoderef_steps (205,791 samples, 0.18%)</title><rect x="35.0618%" y="181" width="0.1760%" height="15" fill="rgb(216,154,8)"/><text x="35.3118%" y="191.50"></text></g><g><title>associated_item (187,992 samples, 0.16%)</title><rect x="38.6853%" y="149" width="0.1608%" height="15" fill="rgb(244,35,45)"/><text x="38.9353%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (169,812 samples, 0.15%)</title><rect x="38.7008%" y="133" width="0.1452%" height="15" fill="rgb(251,115,12)"/><text x="38.9508%" y="143.50"></text></g><g><title>associated_items (229,112 samples, 0.20%)</title><rect x="38.6582%" y="165" width="0.1959%" height="15" fill="rgb(240,54,50)"/><text x="38.9082%" y="175.50"></text></g><g><title>adt_dtorck_constraint (158,342 samples, 0.14%)</title><rect x="38.9296%" y="133" width="0.1354%" height="15" fill="rgb(233,84,52)"/><text x="39.1796%" y="143.50"></text></g><g><title>dropck_outlives (243,765 samples, 0.21%)</title><rect x="38.8671%" y="165" width="0.2084%" height="15" fill="rgb(207,117,47)"/><text x="39.1171%" y="175.50"></text></g><g><title>adt_dtorck_constraint (201,212 samples, 0.17%)</title><rect x="38.9034%" y="149" width="0.1721%" height="15" fill="rgb(249,43,39)"/><text x="39.1534%" y="159.50"></text></g><g><title>evaluate_obligation (471,848 samples, 0.40%)</title><rect x="39.0755%" y="165" width="0.4035%" height="15" fill="rgb(209,38,44)"/><text x="39.3255%" y="175.50"></text></g><g><title>method_autoderef_steps (144,501 samples, 0.12%)</title><rect x="39.7257%" y="165" width="0.1236%" height="15" fill="rgb(236,212,23)"/><text x="39.9757%" y="175.50"></text></g><g><title>typeck (5,397,131 samples, 4.62%)</title><rect x="35.3602%" y="181" width="4.6152%" height="15" fill="rgb(242,79,21)"/><text x="35.6102%" y="191.50">typeck</text></g><g><title>item_bodies_checking (12,688,063 samples, 10.85%)</title><rect x="29.1510%" y="229" width="10.8499%" height="15" fill="rgb(211,96,35)"/><text x="29.4010%" y="239.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (12,684,633 samples, 10.85%)</title><rect x="29.1539%" y="213" width="10.8470%" height="15" fill="rgb(253,215,40)"/><text x="29.4039%" y="223.50">typeck_item_bodi..</text></g><g><title>typeck (12,619,253 samples, 10.79%)</title><rect x="29.2098%" y="197" width="10.7911%" height="15" fill="rgb(211,81,21)"/><text x="29.4598%" y="207.50">typeck</text></g><g><title>mir_borrowck (289,504 samples, 0.25%)</title><rect x="44.8418%" y="133" width="0.2476%" height="15" fill="rgb(208,190,38)"/><text x="45.0918%" y="143.50"></text></g><g><title>mir_borrowck (1,007,674 samples, 0.86%)</title><rect x="44.4146%" y="149" width="0.8617%" height="15" fill="rgb(235,213,38)"/><text x="44.6646%" y="159.50"></text></g><g><title>type_op_prove_predicate (119,292 samples, 0.10%)</title><rect x="45.1743%" y="133" width="0.1020%" height="15" fill="rgb(237,122,38)"/><text x="45.4243%" y="143.50"></text></g><g><title>mir_promoted (131,744 samples, 0.11%)</title><rect x="45.2763%" y="149" width="0.1127%" height="15" fill="rgb(244,218,35)"/><text x="45.5263%" y="159.50"></text></g><g><title>mir_borrowck (2,164,406 samples, 1.85%)</title><rect x="43.7850%" y="165" width="1.8508%" height="15" fill="rgb(240,68,47)"/><text x="44.0350%" y="175.50">m..</text></g><g><title>type_op_prove_predicate (194,371 samples, 0.17%)</title><rect x="45.4696%" y="149" width="0.1662%" height="15" fill="rgb(210,16,53)"/><text x="45.7196%" y="159.50"></text></g><g><title>codegen_fn_attrs (139,632 samples, 0.12%)</title><rect x="46.2033%" y="117" width="0.1194%" height="15" fill="rgb(235,124,12)"/><text x="46.4533%" y="127.50"></text></g><g><title>adt_drop_tys (231,712 samples, 0.20%)</title><rect x="46.9039%" y="85" width="0.1981%" height="15" fill="rgb(224,169,11)"/><text x="47.1539%" y="95.50"></text></g><g><title>is_copy_raw (473,876 samples, 0.41%)</title><rect x="47.1020%" y="85" width="0.4052%" height="15" fill="rgb(250,166,2)"/><text x="47.3520%" y="95.50"></text></g><g><title>evaluate_obligation (393,154 samples, 0.34%)</title><rect x="47.1711%" y="69" width="0.3362%" height="15" fill="rgb(242,216,29)"/><text x="47.4211%" y="79.50"></text></g><g><title>needs_drop_raw (776,969 samples, 0.66%)</title><rect x="46.8434%" y="101" width="0.6644%" height="15" fill="rgb(230,116,27)"/><text x="47.0934%" y="111.50"></text></g><g><title>impl_parent (188,383 samples, 0.16%)</title><rect x="47.9090%" y="69" width="0.1611%" height="15" fill="rgb(228,99,48)"/><text x="48.1590%" y="79.50"></text></g><g><title>specialization_graph_of (889,471 samples, 0.76%)</title><rect x="47.6261%" y="85" width="0.7606%" height="15" fill="rgb(253,11,6)"/><text x="47.8761%" y="95.50"></text></g><g><title>impl_trait_ref (370,254 samples, 0.32%)</title><rect x="48.0701%" y="69" width="0.3166%" height="15" fill="rgb(247,143,39)"/><text x="48.3201%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (283,994 samples, 0.24%)</title><rect x="48.1439%" y="53" width="0.2429%" height="15" fill="rgb(236,97,10)"/><text x="48.3939%" y="63.50"></text></g><g><title>resolve_instance (1,049,282 samples, 0.90%)</title><rect x="47.5078%" y="101" width="0.8973%" height="15" fill="rgb(233,208,19)"/><text x="47.7578%" y="111.50"></text></g><g><title>thir_body (171,760 samples, 0.15%)</title><rect x="48.4096%" y="101" width="0.1469%" height="15" fill="rgb(216,164,2)"/><text x="48.6596%" y="111.50"></text></g><g><title>associated_item (183,502 samples, 0.16%)</title><rect x="54.7101%" y="69" width="0.1569%" height="15" fill="rgb(220,129,5)"/><text x="54.9601%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (149,382 samples, 0.13%)</title><rect x="54.7393%" y="53" width="0.1277%" height="15" fill="rgb(242,17,10)"/><text x="54.9893%" y="63.50"></text></g><g><title>associated_items (268,064 samples, 0.23%)</title><rect x="54.6501%" y="85" width="0.2292%" height="15" fill="rgb(242,107,0)"/><text x="54.9001%" y="95.50"></text></g><g><title>adt_dtorck_constraint (133,211 samples, 0.11%)</title><rect x="55.1572%" y="37" width="0.1139%" height="15" fill="rgb(251,28,31)"/><text x="55.4072%" y="47.50"></text></g><g><title>adt_dtorck_constraint (148,242 samples, 0.13%)</title><rect x="55.1462%" y="53" width="0.1268%" height="15" fill="rgb(233,223,10)"/><text x="55.3962%" y="63.50"></text></g><g><title>adt_dtorck_constraint (267,393 samples, 0.23%)</title><rect x="55.0591%" y="69" width="0.2287%" height="15" fill="rgb(215,21,27)"/><text x="55.3091%" y="79.50"></text></g><g><title>dropck_outlives (465,135 samples, 0.40%)</title><rect x="54.9058%" y="85" width="0.3977%" height="15" fill="rgb(232,23,21)"/><text x="55.1558%" y="95.50"></text></g><g><title>adt_sized_constraint (119,452 samples, 0.10%)</title><rect x="55.9892%" y="69" width="0.1021%" height="15" fill="rgb(244,5,23)"/><text x="56.2392%" y="79.50"></text></g><g><title>trait_impls_of (153,891 samples, 0.13%)</title><rect x="56.2374%" y="69" width="0.1316%" height="15" fill="rgb(226,81,46)"/><text x="56.4874%" y="79.50"></text></g><g><title>evaluate_obligation (1,247,513 samples, 1.07%)</title><rect x="55.3035%" y="85" width="1.0668%" height="15" fill="rgb(247,70,30)"/><text x="55.5535%" y="95.50"></text></g><g><title>is_copy_raw (198,962 samples, 0.17%)</title><rect x="56.6674%" y="85" width="0.1701%" height="15" fill="rgb(212,68,19)"/><text x="56.9174%" y="95.50"></text></g><g><title>evaluate_obligation (156,612 samples, 0.13%)</title><rect x="56.7036%" y="69" width="0.1339%" height="15" fill="rgb(240,187,13)"/><text x="56.9536%" y="79.50"></text></g><g><title>evaluate_obligation (250,954 samples, 0.21%)</title><rect x="57.0949%" y="69" width="0.2146%" height="15" fill="rgb(223,113,26)"/><text x="57.3449%" y="79.50"></text></g><g><title>method_autoderef_steps (383,614 samples, 0.33%)</title><rect x="56.9888%" y="85" width="0.3280%" height="15" fill="rgb(206,192,2)"/><text x="57.2388%" y="95.50"></text></g><g><title>predicates_of (250,332 samples, 0.21%)</title><rect x="57.3325%" y="85" width="0.2141%" height="15" fill="rgb(241,108,4)"/><text x="57.5825%" y="95.50"></text></g><g><title>predicates_defined_on (188,471 samples, 0.16%)</title><rect x="57.3854%" y="69" width="0.1612%" height="15" fill="rgb(247,173,49)"/><text x="57.6354%" y="79.50"></text></g><g><title>mir_built (13,278,051 samples, 11.35%)</title><rect x="46.3227%" y="117" width="11.3544%" height="15" fill="rgb(224,114,35)"/><text x="46.5727%" y="127.50">mir_built</text></g><g><title>typeck (10,631,400 samples, 9.09%)</title><rect x="48.5859%" y="101" width="9.0912%" height="15" fill="rgb(245,159,27)"/><text x="48.8359%" y="111.50">typeck</text></g><g><title>thir_body (124,192 samples, 0.11%)</title><rect x="57.8279%" y="85" width="0.1062%" height="15" fill="rgb(245,172,44)"/><text x="58.0779%" y="95.50"></text></g><g><title>mir_built (266,902 samples, 0.23%)</title><rect x="57.7121%" y="101" width="0.2282%" height="15" fill="rgb(236,23,11)"/><text x="57.9621%" y="111.50"></text></g><g><title>mir_built (140,312 samples, 0.12%)</title><rect x="57.9882%" y="85" width="0.1200%" height="15" fill="rgb(205,117,38)"/><text x="58.2382%" y="95.50"></text></g><g><title>needs_drop_raw (128,642 samples, 0.11%)</title><rect x="58.1716%" y="53" width="0.1100%" height="15" fill="rgb(237,72,25)"/><text x="58.4216%" y="63.50"></text></g><g><title>mir_built (245,744 samples, 0.21%)</title><rect x="58.1187%" y="69" width="0.2101%" height="15" fill="rgb(244,70,9)"/><text x="58.3687%" y="79.50"></text></g><g><title>mir_const (14,647,105 samples, 12.53%)</title><rect x="45.8042%" y="149" width="12.5251%" height="15" fill="rgb(217,125,39)"/><text x="46.0542%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (14,289,253 samples, 12.22%)</title><rect x="46.1103%" y="133" width="12.2191%" height="15" fill="rgb(235,36,10)"/><text x="46.3603%" y="143.50">unsafety_check_res..</text></g><g><title>unsafety_check_result (762,818 samples, 0.65%)</title><rect x="57.6771%" y="117" width="0.6523%" height="15" fill="rgb(251,123,47)"/><text x="57.9271%" y="127.50"></text></g><g><title>unsafety_check_result (452,826 samples, 0.39%)</title><rect x="57.9422%" y="101" width="0.3872%" height="15" fill="rgb(221,13,13)"/><text x="58.1922%" y="111.50"></text></g><g><title>unsafety_check_result (258,184 samples, 0.22%)</title><rect x="58.1086%" y="85" width="0.2208%" height="15" fill="rgb(238,131,9)"/><text x="58.3586%" y="95.50"></text></g><g><title>mir_promoted (14,859,187 samples, 12.71%)</title><rect x="45.6358%" y="165" width="12.7065%" height="15" fill="rgb(211,50,8)"/><text x="45.8858%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (229,452 samples, 0.20%)</title><rect x="58.3444%" y="165" width="0.1962%" height="15" fill="rgb(245,182,24)"/><text x="58.5944%" y="175.50"></text></g><g><title>type_op_normalize_predicate (180,101 samples, 0.15%)</title><rect x="58.6036%" y="165" width="0.1540%" height="15" fill="rgb(242,14,37)"/><text x="58.8536%" y="175.50"></text></g><g><title>type_op_prove_predicate (744,477 samples, 0.64%)</title><rect x="58.8134%" y="165" width="0.6366%" height="15" fill="rgb(246,228,12)"/><text x="59.0634%" y="175.50"></text></g><g><title>item_types_checking (22,751,246 samples, 19.46%)</title><rect x="40.0009%" y="229" width="19.4552%" height="15" fill="rgb(213,55,15)"/><text x="40.2509%" y="239.50">item_types_checking</text></g><g><title>check_mod_item_types (22,744,266 samples, 19.45%)</title><rect x="40.0068%" y="213" width="19.4492%" height="15" fill="rgb(209,9,3)"/><text x="40.2568%" y="223.50">check_mod_item_types</text></g><g><title>type_of (21,368,240 samples, 18.27%)</title><rect x="41.1835%" y="197" width="18.2726%" height="15" fill="rgb(230,59,30)"/><text x="41.4335%" y="207.50">type_of</text></g><g><title>mir_borrowck (21,346,300 samples, 18.25%)</title><rect x="41.2023%" y="181" width="18.2538%" height="15" fill="rgb(209,121,21)"/><text x="41.4523%" y="191.50">mir_borrowck</text></g><g><title>fn_sig (344,365 samples, 0.29%)</title><rect x="59.6800%" y="197" width="0.2945%" height="15" fill="rgb(220,109,13)"/><text x="59.9300%" y="207.50"></text></g><g><title>named_region_map (289,513 samples, 0.25%)</title><rect x="60.0921%" y="181" width="0.2476%" height="15" fill="rgb(232,18,1)"/><text x="60.3421%" y="191.50"></text></g><g><title>resolve_lifetimes (271,513 samples, 0.23%)</title><rect x="60.1075%" y="165" width="0.2322%" height="15" fill="rgb(215,41,42)"/><text x="60.3575%" y="175.50"></text></g><g><title>generics_of (441,614 samples, 0.38%)</title><rect x="59.9744%" y="197" width="0.3776%" height="15" fill="rgb(224,123,36)"/><text x="60.2244%" y="207.50"></text></g><g><title>late_bound_vars_map (235,444 samples, 0.20%)</title><rect x="60.6848%" y="149" width="0.2013%" height="15" fill="rgb(240,125,3)"/><text x="60.9348%" y="159.50"></text></g><g><title>resolve_lifetimes (221,373 samples, 0.19%)</title><rect x="60.6969%" y="133" width="0.1893%" height="15" fill="rgb(205,98,50)"/><text x="60.9469%" y="143.50"></text></g><g><title>explicit_predicates_of (483,717 samples, 0.41%)</title><rect x="60.4989%" y="165" width="0.4136%" height="15" fill="rgb(205,185,37)"/><text x="60.7489%" y="175.50"></text></g><g><title>predicates_of (868,151 samples, 0.74%)</title><rect x="60.3939%" y="197" width="0.7424%" height="15" fill="rgb(238,207,15)"/><text x="60.6439%" y="207.50"></text></g><g><title>predicates_defined_on (820,420 samples, 0.70%)</title><rect x="60.4347%" y="181" width="0.7016%" height="15" fill="rgb(213,199,42)"/><text x="60.6847%" y="191.50"></text></g><g><title>inferred_outlives_of (261,683 samples, 0.22%)</title><rect x="60.9125%" y="165" width="0.2238%" height="15" fill="rgb(235,201,11)"/><text x="61.1625%" y="175.50"></text></g><g><title>inferred_outlives_crate (243,553 samples, 0.21%)</title><rect x="60.9280%" y="149" width="0.2083%" height="15" fill="rgb(207,46,11)"/><text x="61.1780%" y="159.50"></text></g><g><title>type_of (183,852 samples, 0.16%)</title><rect x="60.9791%" y="133" width="0.1572%" height="15" fill="rgb(241,35,35)"/><text x="61.2291%" y="143.50"></text></g><g><title>type_collecting (2,027,753 samples, 1.73%)</title><rect x="59.4580%" y="229" width="1.7340%" height="15" fill="rgb(243,32,47)"/><text x="59.7080%" y="239.50"></text></g><g><title>collect_mod_item_types (2,018,483 samples, 1.73%)</title><rect x="59.4659%" y="213" width="1.7261%" height="15" fill="rgb(247,202,23)"/><text x="59.7159%" y="223.50"></text></g><g><title>evaluate_obligation (269,932 samples, 0.23%)</title><rect x="62.5509%" y="197" width="0.2308%" height="15" fill="rgb(219,102,11)"/><text x="62.8009%" y="207.50"></text></g><g><title>implied_outlives_bounds (161,803 samples, 0.14%)</title><rect x="62.7847%" y="197" width="0.1384%" height="15" fill="rgb(243,110,44)"/><text x="63.0347%" y="207.50"></text></g><g><title>explicit_item_bounds (166,513 samples, 0.14%)</title><rect x="62.9348%" y="181" width="0.1424%" height="15" fill="rgb(222,74,54)"/><text x="63.1848%" y="191.50"></text></g><g><title>item_bounds (180,883 samples, 0.15%)</title><rect x="62.9231%" y="197" width="0.1547%" height="15" fill="rgb(216,99,12)"/><text x="63.1731%" y="207.50"></text></g><g><title>param_env (214,933 samples, 0.18%)</title><rect x="63.0778%" y="197" width="0.1838%" height="15" fill="rgb(226,22,26)"/><text x="63.3278%" y="207.50"></text></g><g><title>region_scope_tree (250,832 samples, 0.21%)</title><rect x="63.2975%" y="197" width="0.2145%" height="15" fill="rgb(217,163,10)"/><text x="63.5475%" y="207.50"></text></g><g><title>check_impl_item_well_formed (2,623,121 samples, 2.24%)</title><rect x="61.3410%" y="213" width="2.2431%" height="15" fill="rgb(213,25,53)"/><text x="61.5910%" y="223.50">c..</text></g><g><title>adt_sized_constraint (175,812 samples, 0.15%)</title><rect x="64.6658%" y="181" width="0.1503%" height="15" fill="rgb(252,105,26)"/><text x="64.9158%" y="191.50"></text></g><g><title>evaluate_obligation (548,528 samples, 0.47%)</title><rect x="64.3675%" y="197" width="0.4691%" height="15" fill="rgb(220,39,43)"/><text x="64.6175%" y="207.50"></text></g><g><title>object_safety_violations (163,512 samples, 0.14%)</title><rect x="64.9561%" y="197" width="0.1398%" height="15" fill="rgb(229,68,48)"/><text x="65.2061%" y="207.50"></text></g><g><title>param_env (203,033 samples, 0.17%)</title><rect x="65.0960%" y="197" width="0.1736%" height="15" fill="rgb(252,8,32)"/><text x="65.3460%" y="207.50"></text></g><g><title>check_item_well_formed (2,149,403 samples, 1.84%)</title><rect x="63.5841%" y="213" width="1.8380%" height="15" fill="rgb(223,20,43)"/><text x="63.8341%" y="223.50">c..</text></g><g><title>analysis (76,062,787 samples, 65.04%)</title><rect x="0.5434%" y="261" width="65.0433%" height="15" fill="rgb(229,81,49)"/><text x="0.7934%" y="271.50">analysis</text></g><g><title>type_check_crate (56,230,484 samples, 48.08%)</title><rect x="17.5025%" y="245" width="48.0842%" height="15" fill="rgb(236,28,36)"/><text x="17.7525%" y="255.50">type_check_crate</text></g><g><title>wf_checking (5,132,578 samples, 4.39%)</title><rect x="61.1977%" y="229" width="4.3890%" height="15" fill="rgb(249,185,26)"/><text x="61.4477%" y="239.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (192,503 samples, 0.16%)</title><rect x="65.4221%" y="213" width="0.1646%" height="15" fill="rgb(249,174,33)"/><text x="65.6721%" y="223.50"></text></g><g><title>codegen_crate (549,457 samples, 0.47%)</title><rect x="65.5965%" y="261" width="0.4699%" height="15" fill="rgb(233,201,37)"/><text x="65.8465%" y="271.50"></text></g><g><title>used_crate_source (206,523 samples, 0.18%)</title><rect x="65.8898%" y="245" width="0.1766%" height="15" fill="rgb(221,78,26)"/><text x="66.1398%" y="255.50"></text></g><g><title>AST_validation (225,672 samples, 0.19%)</title><rect x="66.2691%" y="245" width="0.1930%" height="15" fill="rgb(250,127,30)"/><text x="66.5191%" y="255.50"></text></g><g><title>metadata_load_macro (436,715 samples, 0.37%)</title><rect x="80.4439%" y="213" width="0.3734%" height="15" fill="rgb(230,49,44)"/><text x="80.6939%" y="223.50"></text></g><g><title>metadata_register_crate (2,712,291 samples, 2.32%)</title><rect x="80.8173%" y="213" width="2.3194%" height="15" fill="rgb(229,67,23)"/><text x="81.0673%" y="223.50">m..</text></g><g><title>metadata_register_crate (987,129 samples, 0.84%)</title><rect x="82.2925%" y="197" width="0.8441%" height="15" fill="rgb(249,83,47)"/><text x="82.5425%" y="207.50"></text></g><g><title>macro_expand_crate (19,515,081 samples, 16.69%)</title><rect x="66.5794%" y="245" width="16.6879%" height="15" fill="rgb(215,43,3)"/><text x="66.8294%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (19,487,590 samples, 16.66%)</title><rect x="66.6029%" y="229" width="16.6644%" height="15" fill="rgb(238,154,13)"/><text x="66.8529%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (152,762 samples, 0.13%)</title><rect x="83.1367%" y="213" width="0.1306%" height="15" fill="rgb(219,56,2)"/><text x="83.3867%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (175,322 samples, 0.15%)</title><rect x="83.2716%" y="245" width="0.1499%" height="15" fill="rgb(233,0,4)"/><text x="83.5216%" y="255.50"></text></g><g><title>finalize_imports (126,502 samples, 0.11%)</title><rect x="83.4287%" y="229" width="0.1082%" height="15" fill="rgb(235,30,7)"/><text x="83.6787%" y="239.50"></text></g><g><title>finalize_macro_resolutions (349,104 samples, 0.30%)</title><rect x="83.5369%" y="229" width="0.2985%" height="15" fill="rgb(250,79,13)"/><text x="83.7869%" y="239.50"></text></g><g><title>late_resolve_crate (7,122,960 samples, 6.09%)</title><rect x="83.8354%" y="229" width="6.0910%" height="15" fill="rgb(211,146,34)"/><text x="84.0854%" y="239.50">late_res..</text></g><g><title>configure_and_expand (28,007,145 samples, 23.95%)</title><rect x="66.0664%" y="261" width="23.9497%" height="15" fill="rgb(228,22,38)"/><text x="66.3164%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (7,711,757 samples, 6.59%)</title><rect x="83.4215%" y="245" width="6.5945%" height="15" fill="rgb(235,168,5)"/><text x="83.6715%" y="255.50">resolve_c..</text></g><g><title>drop_ast (135,822 samples, 0.12%)</title><rect x="90.0160%" y="261" width="0.1161%" height="15" fill="rgb(221,155,16)"/><text x="90.2660%" y="271.50"></text></g><g><title>early_lint_checks (244,912 samples, 0.21%)</title><rect x="90.1464%" y="261" width="0.2094%" height="15" fill="rgb(215,215,53)"/><text x="90.3964%" y="271.50"></text></g><g><title>free_global_ctxt (3,307,977 samples, 2.83%)</title><rect x="90.3558%" y="261" width="2.8287%" height="15" fill="rgb(223,4,10)"/><text x="90.6058%" y="271.50">fr..</text></g><g><title>generate_crate_metadata (1,069,922 samples, 0.91%)</title><rect x="93.1846%" y="261" width="0.9149%" height="15" fill="rgb(234,103,6)"/><text x="93.4346%" y="271.50"></text></g><g><title>hir_lowering (2,031,573 samples, 1.74%)</title><rect x="94.0995%" y="261" width="1.7373%" height="15" fill="rgb(227,97,0)"/><text x="94.3495%" y="271.50"></text></g><g><title>parse_crate (3,359,487 samples, 2.87%)</title><rect x="95.8814%" y="261" width="2.8728%" height="15" fill="rgb(234,150,53)"/><text x="96.1314%" y="271.50">pa..</text></g><g><title>prepare_outputs (200,803 samples, 0.17%)</title><rect x="98.7618%" y="261" width="0.1717%" height="15" fill="rgb(228,201,54)"/><text x="99.0118%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (800,739 samples, 0.68%)</title><rect x="98.9335%" y="261" width="0.6847%" height="15" fill="rgb(222,22,37)"/><text x="99.1835%" y="271.50"></text></g><g><title>all (116,941,717 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (116,941,717 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (343,183 samples, 0.29%)</title><rect x="99.7065%" y="261" width="0.2935%" height="15" fill="rgb(210,40,34)"/><text x="99.9565%" y="271.50"></text></g></svg></svg>