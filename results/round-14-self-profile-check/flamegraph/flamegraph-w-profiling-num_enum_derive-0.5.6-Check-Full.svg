<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (395,233 samples, 0.16%)</title><rect x="12.0391%" y="165" width="0.1592%" height="15" fill="rgb(227,0,7)"/><text x="12.2891%" y="175.50"></text></g><g><title>item_attrs (359,875 samples, 0.14%)</title><rect x="12.5633%" y="133" width="0.1450%" height="15" fill="rgb(217,0,24)"/><text x="12.8133%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (344,695 samples, 0.14%)</title><rect x="12.5694%" y="117" width="0.1389%" height="15" fill="rgb(221,193,54)"/><text x="12.8194%" y="127.50"></text></g><g><title>codegen_fn_attrs (527,776 samples, 0.21%)</title><rect x="12.5081%" y="149" width="0.2126%" height="15" fill="rgb(248,212,6)"/><text x="12.7581%" y="159.50"></text></g><g><title>adt_drop_tys (690,465 samples, 0.28%)</title><rect x="15.3562%" y="117" width="0.2782%" height="15" fill="rgb(208,68,35)"/><text x="15.6062%" y="127.50"></text></g><g><title>needs_drop_raw (2,070,922 samples, 0.83%)</title><rect x="15.2763%" y="133" width="0.8344%" height="15" fill="rgb(232,128,0)"/><text x="15.5263%" y="143.50"></text></g><g><title>is_copy_raw (1,180,556 samples, 0.48%)</title><rect x="15.6350%" y="117" width="0.4756%" height="15" fill="rgb(207,160,47)"/><text x="15.8850%" y="127.50"></text></g><g><title>evaluate_obligation (983,183 samples, 0.40%)</title><rect x="15.7145%" y="101" width="0.3961%" height="15" fill="rgb(228,23,34)"/><text x="15.9645%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (422,227 samples, 0.17%)</title><rect x="16.1909%" y="117" width="0.1701%" height="15" fill="rgb(218,30,26)"/><text x="16.4409%" y="127.50"></text></g><g><title>resolve_instance (913,590 samples, 0.37%)</title><rect x="16.1106%" y="133" width="0.3681%" height="15" fill="rgb(220,122,19)"/><text x="16.3606%" y="143.50"></text></g><g><title>thir_body (2,448,948 samples, 0.99%)</title><rect x="16.4888%" y="133" width="0.9867%" height="15" fill="rgb(250,228,42)"/><text x="16.7388%" y="143.50"></text></g><g><title>mir_const (14,755,445 samples, 5.94%)</title><rect x="11.5404%" y="181" width="5.9449%" height="15" fill="rgb(240,193,28)"/><text x="11.7904%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (13,122,434 samples, 5.29%)</title><rect x="12.1983%" y="165" width="5.2869%" height="15" fill="rgb(216,20,37)"/><text x="12.4483%" y="175.50">unsafe..</text></g><g><title>mir_built (11,825,683 samples, 4.76%)</title><rect x="12.7207%" y="149" width="4.7645%" height="15" fill="rgb(206,188,39)"/><text x="12.9707%" y="159.50">mir_bu..</text></g><g><title>mir_promoted (16,584,914 samples, 6.68%)</title><rect x="11.0257%" y="197" width="6.6820%" height="15" fill="rgb(217,207,13)"/><text x="11.2757%" y="207.50">mir_promo..</text></g><g><title>mir_const_qualif (552,027 samples, 0.22%)</title><rect x="17.4852%" y="181" width="0.2224%" height="15" fill="rgb(231,73,38)"/><text x="17.7352%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (462,133 samples, 0.19%)</title><rect x="17.7100%" y="197" width="0.1862%" height="15" fill="rgb(225,20,46)"/><text x="17.9600%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (883,111 samples, 0.36%)</title><rect x="17.8962%" y="197" width="0.3558%" height="15" fill="rgb(210,31,41)"/><text x="18.1462%" y="207.50"></text></g><g><title>normalize_projection_ty (584,397 samples, 0.24%)</title><rect x="18.0165%" y="181" width="0.2354%" height="15" fill="rgb(221,200,47)"/><text x="18.2665%" y="191.50"></text></g><g><title>type_op_normalize_predicate (702,147 samples, 0.28%)</title><rect x="18.2520%" y="197" width="0.2829%" height="15" fill="rgb(226,26,5)"/><text x="18.5020%" y="207.50"></text></g><g><title>normalize_projection_ty (375,226 samples, 0.15%)</title><rect x="18.3837%" y="181" width="0.1512%" height="15" fill="rgb(249,33,26)"/><text x="18.6337%" y="191.50"></text></g><g><title>type_op_prove_predicate (3,372,934 samples, 1.36%)</title><rect x="18.5364%" y="197" width="1.3589%" height="15" fill="rgb(235,183,28)"/><text x="18.7864%" y="207.50"></text></g><g><title>evaluate_obligation (300,705 samples, 0.12%)</title><rect x="19.7742%" y="181" width="0.1212%" height="15" fill="rgb(221,5,38)"/><text x="20.0242%" y="191.50"></text></g><g><title>MIR_borrow_checking (48,043,639 samples, 19.36%)</title><rect x="0.5469%" y="229" width="19.3565%" height="15" fill="rgb(247,18,42)"/><text x="0.7969%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,905,628 samples, 19.30%)</title><rect x="0.6025%" y="213" width="19.3009%" height="15" fill="rgb(241,131,45)"/><text x="0.8525%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (339,153 samples, 0.14%)</title><rect x="20.1954%" y="197" width="0.1366%" height="15" fill="rgb(249,31,29)"/><text x="20.4454%" y="207.50"></text></g><g><title>check_mod_attrs (695,588 samples, 0.28%)</title><rect x="20.0518%" y="213" width="0.2802%" height="15" fill="rgb(225,111,53)"/><text x="20.3018%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (411,315 samples, 0.17%)</title><rect x="20.4242%" y="213" width="0.1657%" height="15" fill="rgb(238,160,17)"/><text x="20.6742%" y="223.50"></text></g><g><title>misc_checking_1 (1,404,966 samples, 0.57%)</title><rect x="20.0455%" y="229" width="0.5661%" height="15" fill="rgb(214,148,48)"/><text x="20.2955%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,030,181 samples, 0.42%)</title><rect x="20.6123%" y="213" width="0.4151%" height="15" fill="rgb(232,36,49)"/><text x="20.8623%" y="223.50"></text></g><g><title>check_mod_liveness (866,000 samples, 0.35%)</title><rect x="20.6784%" y="197" width="0.3489%" height="15" fill="rgb(209,103,24)"/><text x="20.9284%" y="207.50"></text></g><g><title>misc_checking_2 (1,895,251 samples, 0.76%)</title><rect x="20.6116%" y="229" width="0.7636%" height="15" fill="rgb(229,88,8)"/><text x="20.8616%" y="239.50"></text></g><g><title>match_checking (863,420 samples, 0.35%)</title><rect x="21.0273%" y="213" width="0.3479%" height="15" fill="rgb(213,181,19)"/><text x="21.2773%" y="223.50"></text></g><g><title>check_match (834,699 samples, 0.34%)</title><rect x="21.0389%" y="197" width="0.3363%" height="15" fill="rgb(254,191,54)"/><text x="21.2889%" y="207.50"></text></g><g><title>death_checking (414,484 samples, 0.17%)</title><rect x="21.4621%" y="213" width="0.1670%" height="15" fill="rgb(241,83,37)"/><text x="21.7121%" y="223.50"></text></g><g><title>eval_to_const_value_raw (532,056 samples, 0.21%)</title><rect x="21.9311%" y="133" width="0.2144%" height="15" fill="rgb(233,36,39)"/><text x="22.1811%" y="143.50"></text></g><g><title>eval_to_const_value_raw (531,436 samples, 0.21%)</title><rect x="21.9313%" y="117" width="0.2141%" height="15" fill="rgb(226,3,54)"/><text x="22.1813%" y="127.50"></text></g><g><title>eval_to_allocation_raw (529,726 samples, 0.21%)</title><rect x="21.9320%" y="101" width="0.2134%" height="15" fill="rgb(245,192,40)"/><text x="22.1820%" y="111.50"></text></g><g><title>eval_to_allocation_raw (600,516 samples, 0.24%)</title><rect x="21.9041%" y="181" width="0.2419%" height="15" fill="rgb(238,167,29)"/><text x="22.1541%" y="191.50"></text></g><g><title>eval_to_allocation_raw (599,766 samples, 0.24%)</title><rect x="21.9044%" y="165" width="0.2416%" height="15" fill="rgb(232,182,51)"/><text x="22.1544%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (540,766 samples, 0.22%)</title><rect x="21.9281%" y="149" width="0.2179%" height="15" fill="rgb(231,60,39)"/><text x="22.1781%" y="159.50"></text></g><g><title>crate_lints (1,711,349 samples, 0.69%)</title><rect x="21.6298%" y="197" width="0.6895%" height="15" fill="rgb(208,69,12)"/><text x="21.8798%" y="207.50"></text></g><g><title>lint_checking (2,790,571 samples, 1.12%)</title><rect x="21.6291%" y="213" width="1.1243%" height="15" fill="rgb(235,93,37)"/><text x="21.8791%" y="223.50"></text></g><g><title>module_lints (1,077,502 samples, 0.43%)</title><rect x="22.3193%" y="197" width="0.4341%" height="15" fill="rgb(213,116,39)"/><text x="22.5693%" y="207.50"></text></g><g><title>lint_mod (1,073,812 samples, 0.43%)</title><rect x="22.3208%" y="181" width="0.4326%" height="15" fill="rgb(222,207,29)"/><text x="22.5708%" y="191.50"></text></g><g><title>privacy_checking_modules (1,526,297 samples, 0.61%)</title><rect x="22.8209%" y="213" width="0.6149%" height="15" fill="rgb(206,96,30)"/><text x="23.0709%" y="223.50"></text></g><g><title>check_mod_privacy (1,523,907 samples, 0.61%)</title><rect x="22.8219%" y="197" width="0.6140%" height="15" fill="rgb(218,138,4)"/><text x="23.0719%" y="207.50"></text></g><g><title>misc_checking_3 (5,127,288 samples, 2.07%)</title><rect x="21.3752%" y="229" width="2.0658%" height="15" fill="rgb(250,191,14)"/><text x="21.6252%" y="239.50">m..</text></g><g><title>adt_destructor (437,675 samples, 0.18%)</title><rect x="23.4940%" y="181" width="0.1763%" height="15" fill="rgb(239,60,40)"/><text x="23.7440%" y="191.50"></text></g><g><title>coherent_trait (424,954 samples, 0.17%)</title><rect x="23.4992%" y="165" width="0.1712%" height="15" fill="rgb(206,27,48)"/><text x="23.7492%" y="175.50"></text></g><g><title>specialization_graph_of (423,374 samples, 0.17%)</title><rect x="23.4998%" y="149" width="0.1706%" height="15" fill="rgb(225,35,8)"/><text x="23.7498%" y="159.50"></text></g><g><title>impl_parent (1,513,747 samples, 0.61%)</title><rect x="24.7447%" y="165" width="0.6099%" height="15" fill="rgb(250,213,24)"/><text x="24.9947%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (916,762 samples, 0.37%)</title><rect x="24.9852%" y="149" width="0.3694%" height="15" fill="rgb(247,123,22)"/><text x="25.2352%" y="159.50"></text></g><g><title>impl_trait_ref (3,900,453 samples, 1.57%)</title><rect x="25.3550%" y="165" width="1.5715%" height="15" fill="rgb(231,138,38)"/><text x="25.6050%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,082,167 samples, 1.24%)</title><rect x="25.6846%" y="149" width="1.2418%" height="15" fill="rgb(231,145,46)"/><text x="25.9346%" y="159.50"></text></g><g><title>trait_impls_of (541,274 samples, 0.22%)</title><rect x="26.9317%" y="165" width="0.2181%" height="15" fill="rgb(251,118,11)"/><text x="27.1817%" y="175.50"></text></g><g><title>coherent_trait (9,105,482 samples, 3.67%)</title><rect x="23.4815%" y="197" width="3.6685%" height="15" fill="rgb(217,147,25)"/><text x="23.7315%" y="207.50">cohe..</text></g><g><title>specialization_graph_of (8,526,086 samples, 3.44%)</title><rect x="23.7149%" y="181" width="3.4351%" height="15" fill="rgb(247,81,37)"/><text x="23.9649%" y="191.50">spe..</text></g><g><title>coherence_checking (9,185,743 samples, 3.70%)</title><rect x="23.4728%" y="213" width="3.7009%" height="15" fill="rgb(209,12,38)"/><text x="23.7228%" y="223.50">cohe..</text></g><g><title>associated_item (323,833 samples, 0.13%)</title><rect x="43.6436%" y="149" width="0.1305%" height="15" fill="rgb(227,1,9)"/><text x="43.8936%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (259,932 samples, 0.10%)</title><rect x="43.6694%" y="133" width="0.1047%" height="15" fill="rgb(248,47,43)"/><text x="43.9194%" y="143.50"></text></g><g><title>associated_items (465,674 samples, 0.19%)</title><rect x="43.5981%" y="165" width="0.1876%" height="15" fill="rgb(221,10,30)"/><text x="43.8481%" y="175.50"></text></g><g><title>adt_def (275,353 samples, 0.11%)</title><rect x="44.4190%" y="133" width="0.1109%" height="15" fill="rgb(210,229,1)"/><text x="44.6690%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (268,023 samples, 0.11%)</title><rect x="44.4220%" y="117" width="0.1080%" height="15" fill="rgb(222,148,37)"/><text x="44.6720%" y="127.50"></text></g><g><title>adt_dtorck_constraint (516,905 samples, 0.21%)</title><rect x="44.8737%" y="101" width="0.2083%" height="15" fill="rgb(234,67,33)"/><text x="45.1237%" y="111.50"></text></g><g><title>adt_dtorck_constraint (849,056 samples, 0.34%)</title><rect x="44.7595%" y="117" width="0.3421%" height="15" fill="rgb(247,98,35)"/><text x="45.0095%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,441,526 samples, 0.58%)</title><rect x="44.5576%" y="133" width="0.5808%" height="15" fill="rgb(247,138,52)"/><text x="44.8076%" y="143.50"></text></g><g><title>dropck_outlives (3,344,449 samples, 1.35%)</title><rect x="43.8303%" y="165" width="1.3475%" height="15" fill="rgb(213,79,30)"/><text x="44.0803%" y="175.50"></text></g><g><title>adt_dtorck_constraint (2,323,827 samples, 0.94%)</title><rect x="44.2415%" y="149" width="0.9363%" height="15" fill="rgb(246,177,23)"/><text x="44.4915%" y="159.50"></text></g><g><title>adt_sized_constraint (265,304 samples, 0.11%)</title><rect x="46.0837%" y="149" width="0.1069%" height="15" fill="rgb(230,62,27)"/><text x="46.3337%" y="159.50"></text></g><g><title>predicates_of (289,540 samples, 0.12%)</title><rect x="46.3291%" y="149" width="0.1167%" height="15" fill="rgb(216,154,8)"/><text x="46.5791%" y="159.50"></text></g><g><title>trait_impls_of (1,028,735 samples, 0.41%)</title><rect x="46.5195%" y="149" width="0.4145%" height="15" fill="rgb(244,35,45)"/><text x="46.7695%" y="159.50"></text></g><g><title>implementations_of_trait (412,577 samples, 0.17%)</title><rect x="46.7677%" y="133" width="0.1662%" height="15" fill="rgb(251,115,12)"/><text x="47.0177%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (255,336 samples, 0.10%)</title><rect x="46.8311%" y="117" width="0.1029%" height="15" fill="rgb(240,54,50)"/><text x="47.0811%" y="127.50"></text></g><g><title>evaluate_obligation (4,361,323 samples, 1.76%)</title><rect x="45.1778%" y="165" width="1.7571%" height="15" fill="rgb(233,84,52)"/><text x="45.4278%" y="175.50"></text></g><g><title>method_autoderef_steps (512,076 samples, 0.21%)</title><rect x="47.2839%" y="165" width="0.2063%" height="15" fill="rgb(207,117,47)"/><text x="47.5339%" y="175.50"></text></g><g><title>evaluate_obligation (255,224 samples, 0.10%)</title><rect x="47.3874%" y="149" width="0.1028%" height="15" fill="rgb(249,43,39)"/><text x="47.6374%" y="159.50"></text></g><g><title>predicates_of (610,675 samples, 0.25%)</title><rect x="47.5169%" y="165" width="0.2460%" height="15" fill="rgb(209,38,44)"/><text x="47.7669%" y="175.50"></text></g><g><title>predicates_defined_on (368,345 samples, 0.15%)</title><rect x="47.6146%" y="149" width="0.1484%" height="15" fill="rgb(236,212,23)"/><text x="47.8646%" y="159.50"></text></g><g><title>adt_dtorck_constraint (292,443 samples, 0.12%)</title><rect x="51.1147%" y="117" width="0.1178%" height="15" fill="rgb(242,79,21)"/><text x="51.3647%" y="127.50"></text></g><g><title>dropck_outlives (553,336 samples, 0.22%)</title><rect x="51.0197%" y="149" width="0.2229%" height="15" fill="rgb(211,96,35)"/><text x="51.2697%" y="159.50"></text></g><g><title>adt_dtorck_constraint (375,083 samples, 0.15%)</title><rect x="51.0915%" y="133" width="0.1511%" height="15" fill="rgb(253,215,40)"/><text x="51.3415%" y="143.50"></text></g><g><title>evaluate_obligation (1,649,487 samples, 0.66%)</title><rect x="51.2427%" y="149" width="0.6646%" height="15" fill="rgb(211,81,21)"/><text x="51.4927%" y="159.50"></text></g><g><title>method_autoderef_steps (354,234 samples, 0.14%)</title><rect x="52.1273%" y="149" width="0.1427%" height="15" fill="rgb(208,190,38)"/><text x="52.3773%" y="159.50"></text></g><g><title>typeck (11,329,746 samples, 4.56%)</title><rect x="47.8328%" y="165" width="4.5647%" height="15" fill="rgb(235,213,38)"/><text x="48.0828%" y="175.50">typeck</text></g><g><title>item_bodies_checking (62,641,712 samples, 25.24%)</title><rect x="27.1842%" y="213" width="25.2379%" height="15" fill="rgb(237,122,38)"/><text x="27.4342%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (62,637,752 samples, 25.24%)</title><rect x="27.1857%" y="197" width="25.2364%" height="15" fill="rgb(244,218,35)"/><text x="27.4357%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (62,573,209 samples, 25.21%)</title><rect x="27.2118%" y="181" width="25.2103%" height="15" fill="rgb(240,68,47)"/><text x="27.4618%" y="191.50">typeck</text></g><g><title>specialization_graph_of (1,077,181 samples, 0.43%)</title><rect x="53.3184%" y="69" width="0.4340%" height="15" fill="rgb(210,16,53)"/><text x="53.5684%" y="79.50"></text></g><g><title>impl_trait_ref (457,562 samples, 0.18%)</title><rect x="53.5681%" y="53" width="0.1843%" height="15" fill="rgb(235,124,12)"/><text x="53.8181%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (390,742 samples, 0.16%)</title><rect x="53.5950%" y="37" width="0.1574%" height="15" fill="rgb(224,169,11)"/><text x="53.8450%" y="47.50"></text></g><g><title>resolve_instance (1,150,333 samples, 0.46%)</title><rect x="53.2913%" y="85" width="0.4635%" height="15" fill="rgb(250,166,2)"/><text x="53.5413%" y="95.50"></text></g><g><title>mir_const (3,305,717 samples, 1.33%)</title><rect x="53.0946%" y="133" width="1.3319%" height="15" fill="rgb(242,216,29)"/><text x="53.3446%" y="143.50"></text></g><g><title>unsafety_check_result (3,189,786 samples, 1.29%)</title><rect x="53.1413%" y="117" width="1.2851%" height="15" fill="rgb(230,116,27)"/><text x="53.3913%" y="127.50"></text></g><g><title>mir_built (3,110,844 samples, 1.25%)</title><rect x="53.1731%" y="101" width="1.2533%" height="15" fill="rgb(228,99,48)"/><text x="53.4231%" y="111.50"></text></g><g><title>typeck (1,633,818 samples, 0.66%)</title><rect x="53.7682%" y="85" width="0.6583%" height="15" fill="rgb(253,11,6)"/><text x="54.0182%" y="95.50"></text></g><g><title>mir_promoted (3,377,148 samples, 1.36%)</title><rect x="53.0679%" y="149" width="1.3606%" height="15" fill="rgb(247,143,39)"/><text x="53.3179%" y="159.50"></text></g><g><title>type_of (4,313,548 samples, 1.74%)</title><rect x="52.7853%" y="181" width="1.7379%" height="15" fill="rgb(236,97,10)"/><text x="53.0353%" y="191.50"></text></g><g><title>mir_borrowck (4,194,867 samples, 1.69%)</title><rect x="52.8331%" y="165" width="1.6901%" height="15" fill="rgb(233,208,19)"/><text x="53.0831%" y="175.50"></text></g><g><title>typeck (744,528 samples, 0.30%)</title><rect x="54.5232%" y="181" width="0.3000%" height="15" fill="rgb(216,164,2)"/><text x="54.7732%" y="191.50"></text></g><g><title>item_types_checking (5,961,597 samples, 2.40%)</title><rect x="52.4221%" y="213" width="2.4019%" height="15" fill="rgb(220,129,5)"/><text x="52.6721%" y="223.50">it..</text></g><g><title>check_mod_item_types (5,956,857 samples, 2.40%)</title><rect x="52.4240%" y="197" width="2.4000%" height="15" fill="rgb(242,17,10)"/><text x="52.6740%" y="207.50">ch..</text></g><g><title>fn_sig (405,915 samples, 0.16%)</title><rect x="54.9192%" y="181" width="0.1635%" height="15" fill="rgb(242,107,0)"/><text x="55.1692%" y="191.50"></text></g><g><title>named_region_map (567,066 samples, 0.23%)</title><rect x="55.1182%" y="165" width="0.2285%" height="15" fill="rgb(251,28,31)"/><text x="55.3682%" y="175.50"></text></g><g><title>resolve_lifetimes (555,446 samples, 0.22%)</title><rect x="55.1229%" y="149" width="0.2238%" height="15" fill="rgb(233,223,10)"/><text x="55.3729%" y="159.50"></text></g><g><title>lint_levels (279,693 samples, 0.11%)</title><rect x="55.2340%" y="133" width="0.1127%" height="15" fill="rgb(215,21,27)"/><text x="55.4840%" y="143.50"></text></g><g><title>generics_of (665,686 samples, 0.27%)</title><rect x="55.0828%" y="181" width="0.2682%" height="15" fill="rgb(232,23,21)"/><text x="55.3328%" y="191.50"></text></g><g><title>predicates_of (420,744 samples, 0.17%)</title><rect x="55.3647%" y="181" width="0.1695%" height="15" fill="rgb(244,5,23)"/><text x="55.6147%" y="191.50"></text></g><g><title>predicates_defined_on (383,813 samples, 0.15%)</title><rect x="55.3796%" y="165" width="0.1546%" height="15" fill="rgb(226,81,46)"/><text x="55.6296%" y="175.50"></text></g><g><title>type_collecting (1,837,641 samples, 0.74%)</title><rect x="54.8252%" y="213" width="0.7404%" height="15" fill="rgb(247,70,30)"/><text x="55.0752%" y="223.50"></text></g><g><title>collect_mod_item_types (1,830,451 samples, 0.74%)</title><rect x="54.8281%" y="197" width="0.7375%" height="15" fill="rgb(212,68,19)"/><text x="55.0781%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,397,147 samples, 0.56%)</title><rect x="55.6316%" y="197" width="0.5629%" height="15" fill="rgb(240,187,13)"/><text x="55.8816%" y="207.50"></text></g><g><title>adt_def (508,325 samples, 0.20%)</title><rect x="56.6973%" y="133" width="0.2048%" height="15" fill="rgb(223,113,26)"/><text x="56.9473%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (499,845 samples, 0.20%)</title><rect x="56.7007%" y="117" width="0.2014%" height="15" fill="rgb(206,192,2)"/><text x="56.9507%" y="127.50"></text></g><g><title>item_attrs (437,744 samples, 0.18%)</title><rect x="56.7258%" y="101" width="0.1764%" height="15" fill="rgb(241,108,4)"/><text x="56.9758%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (429,064 samples, 0.17%)</title><rect x="56.7293%" y="85" width="0.1729%" height="15" fill="rgb(247,173,49)"/><text x="56.9793%" y="95.50"></text></g><g><title>adt_sized_constraint (762,139 samples, 0.31%)</title><rect x="56.6845%" y="149" width="0.3071%" height="15" fill="rgb(224,114,35)"/><text x="56.9345%" y="159.50"></text></g><g><title>adt_sized_constraint (923,321 samples, 0.37%)</title><rect x="56.6263%" y="165" width="0.3720%" height="15" fill="rgb(245,159,27)"/><text x="56.8763%" y="175.50"></text></g><g><title>evaluate_obligation (1,346,543 samples, 0.54%)</title><rect x="56.4912%" y="181" width="0.5425%" height="15" fill="rgb(245,172,44)"/><text x="56.7412%" y="191.50"></text></g><g><title>region_scope_tree (525,086 samples, 0.21%)</title><rect x="57.1447%" y="181" width="0.2116%" height="15" fill="rgb(236,23,11)"/><text x="57.3947%" y="191.50"></text></g><g><title>analysis (141,553,646 samples, 57.03%)</title><rect x="0.3486%" y="245" width="57.0311%" height="15" fill="rgb(205,117,38)"/><text x="0.5986%" y="255.50">analysis</text></g><g><title>type_check_crate (84,237,464 samples, 33.94%)</title><rect x="23.4409%" y="229" width="33.9387%" height="15" fill="rgb(237,72,25)"/><text x="23.6909%" y="239.50">type_check_crate</text></g><g><title>wf_checking (4,498,450 samples, 1.81%)</title><rect x="55.5673%" y="213" width="1.8124%" height="15" fill="rgb(244,70,9)"/><text x="55.8173%" y="223.50">w..</text></g><g><title>check_item_well_formed (2,941,570 samples, 1.19%)</title><rect x="56.1945%" y="197" width="1.1851%" height="15" fill="rgb(217,125,39)"/><text x="56.4445%" y="207.50"></text></g><g><title>codegen_crate (681,878 samples, 0.27%)</title><rect x="57.3847%" y="245" width="0.2747%" height="15" fill="rgb(235,36,10)"/><text x="57.6347%" y="255.50"></text></g><g><title>metadata_load_macro (1,322,698 samples, 0.53%)</title><rect x="88.0862%" y="197" width="0.5329%" height="15" fill="rgb(251,123,47)"/><text x="88.3362%" y="207.50"></text></g><g><title>macro_expand_crate (79,114,837 samples, 31.87%)</title><rect x="57.9237%" y="229" width="31.8749%" height="15" fill="rgb(221,13,13)"/><text x="58.1737%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (79,100,516 samples, 31.87%)</title><rect x="57.9294%" y="213" width="31.8691%" height="15" fill="rgb(238,131,9)"/><text x="58.1794%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,927,312 samples, 1.18%)</title><rect x="88.6191%" y="197" width="1.1794%" height="15" fill="rgb(211,50,8)"/><text x="88.8691%" y="207.50"></text></g><g><title>metadata_register_crate (968,080 samples, 0.39%)</title><rect x="89.4085%" y="181" width="0.3900%" height="15" fill="rgb(245,182,24)"/><text x="89.6585%" y="191.50"></text></g><g><title>maybe_create_a_macro_crate (512,166 samples, 0.21%)</title><rect x="89.7989%" y="229" width="0.2063%" height="15" fill="rgb(242,14,37)"/><text x="90.0489%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (271,923 samples, 0.11%)</title><rect x="90.0053%" y="229" width="0.1096%" height="15" fill="rgb(246,228,12)"/><text x="90.2553%" y="239.50"></text></g><g><title>finalize_macro_resolutions (891,240 samples, 0.36%)</title><rect x="90.1449%" y="213" width="0.3591%" height="15" fill="rgb(213,55,15)"/><text x="90.3949%" y="223.50"></text></g><g><title>late_resolve_crate (6,944,438 samples, 2.80%)</title><rect x="90.5040%" y="213" width="2.7979%" height="15" fill="rgb(209,9,3)"/><text x="90.7540%" y="223.50">la..</text></g><g><title>metadata_register_crate (2,923,832 samples, 1.18%)</title><rect x="92.1238%" y="197" width="1.1780%" height="15" fill="rgb(230,59,30)"/><text x="92.3738%" y="207.50"></text></g><g><title>metadata_register_crate (2,842,112 samples, 1.15%)</title><rect x="92.1568%" y="181" width="1.1451%" height="15" fill="rgb(209,121,21)"/><text x="92.4068%" y="191.50"></text></g><g><title>metadata_register_crate (2,575,318 samples, 1.04%)</title><rect x="92.2643%" y="165" width="1.0376%" height="15" fill="rgb(220,109,13)"/><text x="92.5143%" y="175.50"></text></g><g><title>configure_and_expand (88,700,764 samples, 35.74%)</title><rect x="57.6594%" y="245" width="35.7370%" height="15" fill="rgb(232,18,1)"/><text x="57.9094%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (8,144,871 samples, 3.28%)</title><rect x="90.1148%" y="229" width="3.2815%" height="15" fill="rgb(215,41,42)"/><text x="90.3648%" y="239.50">res..</text></g><g><title>drop_ast (300,463 samples, 0.12%)</title><rect x="93.3964%" y="245" width="0.1211%" height="15" fill="rgb(224,123,36)"/><text x="93.6464%" y="255.50"></text></g><g><title>early_lint_checks (826,650 samples, 0.33%)</title><rect x="93.5254%" y="245" width="0.3331%" height="15" fill="rgb(240,125,3)"/><text x="93.7754%" y="255.50"></text></g><g><title>free_global_ctxt (4,202,017 samples, 1.69%)</title><rect x="93.8585%" y="245" width="1.6930%" height="15" fill="rgb(205,98,50)"/><text x="94.1085%" y="255.50"></text></g><g><title>hir_lowering (4,471,890 samples, 1.80%)</title><rect x="95.6301%" y="245" width="1.8017%" height="15" fill="rgb(205,185,37)"/><text x="95.8801%" y="255.50">h..</text></g><g><title>parse_crate (4,785,104 samples, 1.93%)</title><rect x="97.4578%" y="245" width="1.9279%" height="15" fill="rgb(238,207,15)"/><text x="97.7078%" y="255.50">p..</text></g><g><title>self_profile_alloc_query_strings (878,359 samples, 0.35%)</title><rect x="99.4702%" y="245" width="0.3539%" height="15" fill="rgb(213,199,42)"/><text x="99.7202%" y="255.50"></text></g><g><title>all (248,204,472 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (248,204,472 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (328,654 samples, 0.13%)</title><rect x="99.8676%" y="245" width="0.1324%" height="15" fill="rgb(241,35,35)"/><text x="100.1176%" y="255.50"></text></g></svg></svg>