<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (259,573 samples, 0.21%)</title><rect x="8.7384%" y="197" width="0.2150%" height="15" fill="rgb(227,0,7)"/><text x="8.9884%" y="207.50"></text></g><g><title>evaluate_obligation (221,502 samples, 0.18%)</title><rect x="8.7699%" y="181" width="0.1834%" height="15" fill="rgb(217,0,24)"/><text x="9.0199%" y="191.50"></text></g><g><title>param_env (294,442 samples, 0.24%)</title><rect x="9.8865%" y="165" width="0.2438%" height="15" fill="rgb(221,193,54)"/><text x="10.1365%" y="175.50"></text></g><g><title>item_attrs (234,234 samples, 0.19%)</title><rect x="10.4291%" y="133" width="0.1940%" height="15" fill="rgb(248,212,6)"/><text x="10.6791%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (226,544 samples, 0.19%)</title><rect x="10.4355%" y="117" width="0.1876%" height="15" fill="rgb(208,68,35)"/><text x="10.6855%" y="127.50"></text></g><g><title>codegen_fn_attrs (312,515 samples, 0.26%)</title><rect x="10.3739%" y="149" width="0.2588%" height="15" fill="rgb(232,128,0)"/><text x="10.6239%" y="159.50"></text></g><g><title>adt_drop_tys (349,094 samples, 0.29%)</title><rect x="12.7988%" y="101" width="0.2891%" height="15" fill="rgb(207,160,47)"/><text x="13.0488%" y="111.50"></text></g><g><title>adt_drop_tys (495,296 samples, 0.41%)</title><rect x="12.7844%" y="117" width="0.4102%" height="15" fill="rgb(228,23,34)"/><text x="13.0344%" y="127.50"></text></g><g><title>needs_drop_raw (1,201,302 samples, 0.99%)</title><rect x="12.7069%" y="133" width="0.9949%" height="15" fill="rgb(218,30,26)"/><text x="12.9569%" y="143.50"></text></g><g><title>is_copy_raw (612,395 samples, 0.51%)</title><rect x="13.1946%" y="117" width="0.5072%" height="15" fill="rgb(220,122,19)"/><text x="13.4446%" y="127.50"></text></g><g><title>evaluate_obligation (464,975 samples, 0.39%)</title><rect x="13.3167%" y="101" width="0.3851%" height="15" fill="rgb(250,228,42)"/><text x="13.5667%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (515,926 samples, 0.43%)</title><rect x="13.7973%" y="117" width="0.4273%" height="15" fill="rgb(240,193,28)"/><text x="14.0473%" y="127.50"></text></g><g><title>resolve_instance (725,590 samples, 0.60%)</title><rect x="13.7018%" y="133" width="0.6009%" height="15" fill="rgb(216,20,37)"/><text x="13.9518%" y="143.50"></text></g><g><title>thir_body (879,625 samples, 0.73%)</title><rect x="14.3150%" y="133" width="0.7285%" height="15" fill="rgb(206,188,39)"/><text x="14.5650%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (213,953 samples, 0.18%)</title><rect x="15.0483%" y="133" width="0.1772%" height="15" fill="rgb(217,207,13)"/><text x="15.2983%" y="143.50"></text></g><g><title>normalize_projection_ty (135,632 samples, 0.11%)</title><rect x="15.1132%" y="117" width="0.1123%" height="15" fill="rgb(231,73,38)"/><text x="15.3632%" y="127.50"></text></g><g><title>mir_const (7,033,751 samples, 5.83%)</title><rect x="9.4036%" y="181" width="5.8251%" height="15" fill="rgb(225,20,46)"/><text x="9.6536%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (6,156,291 samples, 5.10%)</title><rect x="10.1303%" y="165" width="5.0984%" height="15" fill="rgb(210,31,41)"/><text x="10.3803%" y="175.50">unsafe..</text></g><g><title>mir_built (5,549,665 samples, 4.60%)</title><rect x="10.6327%" y="149" width="4.5960%" height="15" fill="rgb(221,200,47)"/><text x="10.8827%" y="159.50">mir_b..</text></g><g><title>mir_promoted (7,594,025 samples, 6.29%)</title><rect x="8.9534%" y="197" width="6.2891%" height="15" fill="rgb(226,26,5)"/><text x="9.2034%" y="207.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (167,683 samples, 0.14%)</title><rect x="15.2425%" y="197" width="0.1389%" height="15" fill="rgb(249,33,26)"/><text x="15.4925%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,310,442 samples, 1.09%)</title><rect x="15.3813%" y="197" width="1.0853%" height="15" fill="rgb(235,183,28)"/><text x="15.6313%" y="207.50"></text></g><g><title>normalize_projection_ty (920,769 samples, 0.76%)</title><rect x="15.7040%" y="181" width="0.7625%" height="15" fill="rgb(221,5,38)"/><text x="15.9540%" y="191.50"></text></g><g><title>type_op_normalize_predicate (1,081,132 samples, 0.90%)</title><rect x="16.4666%" y="197" width="0.8954%" height="15" fill="rgb(247,18,42)"/><text x="16.7166%" y="207.50"></text></g><g><title>normalize_projection_ty (721,409 samples, 0.60%)</title><rect x="16.7645%" y="181" width="0.5974%" height="15" fill="rgb(241,131,45)"/><text x="17.0145%" y="191.50"></text></g><g><title>type_op_normalize_ty (138,293 samples, 0.11%)</title><rect x="17.3619%" y="197" width="0.1145%" height="15" fill="rgb(249,31,29)"/><text x="17.6119%" y="207.50"></text></g><g><title>type_op_prove_predicate (4,315,842 samples, 3.57%)</title><rect x="17.4765%" y="197" width="3.5742%" height="15" fill="rgb(225,111,53)"/><text x="17.7265%" y="207.50">type..</text></g><g><title>MIR_borrow_checking (24,615,164 samples, 20.39%)</title><rect x="0.6683%" y="229" width="20.3853%" height="15" fill="rgb(238,160,17)"/><text x="0.9183%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,569,654 samples, 20.35%)</title><rect x="0.7060%" y="213" width="20.3476%" height="15" fill="rgb(214,148,48)"/><text x="0.9560%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (123,311 samples, 0.10%)</title><rect x="21.0648%" y="229" width="0.1021%" height="15" fill="rgb(232,36,49)"/><text x="21.3148%" y="239.50"></text></g><g><title>codegen_fn_attrs (236,701 samples, 0.20%)</title><rect x="21.3057%" y="197" width="0.1960%" height="15" fill="rgb(209,103,24)"/><text x="21.5557%" y="207.50"></text></g><g><title>check_mod_attrs (382,694 samples, 0.32%)</title><rect x="21.1849%" y="213" width="0.3169%" height="15" fill="rgb(229,88,8)"/><text x="21.4349%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (263,483 samples, 0.22%)</title><rect x="21.5907%" y="213" width="0.2182%" height="15" fill="rgb(213,181,19)"/><text x="21.8407%" y="223.50"></text></g><g><title>misc_checking_1 (811,788 samples, 0.67%)</title><rect x="21.1674%" y="229" width="0.6723%" height="15" fill="rgb(254,191,54)"/><text x="21.4174%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (425,805 samples, 0.35%)</title><rect x="21.8410%" y="213" width="0.3526%" height="15" fill="rgb(241,83,37)"/><text x="22.0910%" y="223.50"></text></g><g><title>check_mod_liveness (357,224 samples, 0.30%)</title><rect x="21.8978%" y="197" width="0.2958%" height="15" fill="rgb(233,36,39)"/><text x="22.1478%" y="207.50"></text></g><g><title>misc_checking_2 (769,239 samples, 0.64%)</title><rect x="21.8397%" y="229" width="0.6371%" height="15" fill="rgb(226,3,54)"/><text x="22.0897%" y="239.50"></text></g><g><title>match_checking (341,804 samples, 0.28%)</title><rect x="22.1936%" y="213" width="0.2831%" height="15" fill="rgb(245,192,40)"/><text x="22.4436%" y="223.50"></text></g><g><title>check_match (327,014 samples, 0.27%)</title><rect x="22.2059%" y="197" width="0.2708%" height="15" fill="rgb(238,167,29)"/><text x="22.4559%" y="207.50"></text></g><g><title>death_checking (251,943 samples, 0.21%)</title><rect x="22.5566%" y="213" width="0.2086%" height="15" fill="rgb(232,182,51)"/><text x="22.8066%" y="223.50"></text></g><g><title>specialization_graph_of (1,179,403 samples, 0.98%)</title><rect x="23.4220%" y="165" width="0.9767%" height="15" fill="rgb(231,60,39)"/><text x="23.6720%" y="175.50"></text></g><g><title>impl_parent (457,596 samples, 0.38%)</title><rect x="24.0198%" y="149" width="0.3790%" height="15" fill="rgb(208,69,12)"/><text x="24.2698%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (256,904 samples, 0.21%)</title><rect x="24.1860%" y="133" width="0.2128%" height="15" fill="rgb(235,93,37)"/><text x="24.4360%" y="143.50"></text></g><g><title>resolve_instance (1,272,845 samples, 1.05%)</title><rect x="23.3453%" y="181" width="1.0541%" height="15" fill="rgb(213,116,39)"/><text x="23.5953%" y="191.50"></text></g><g><title>crate_lints (3,086,865 samples, 2.56%)</title><rect x="22.7663%" y="197" width="2.5564%" height="15" fill="rgb(222,207,29)"/><text x="23.0163%" y="207.50">cr..</text></g><g><title>type_of (1,107,192 samples, 0.92%)</title><rect x="24.4058%" y="181" width="0.9169%" height="15" fill="rgb(206,96,30)"/><text x="24.6558%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (873,179 samples, 0.72%)</title><rect x="24.5996%" y="165" width="0.7231%" height="15" fill="rgb(218,138,4)"/><text x="24.8496%" y="175.50"></text></g><g><title>lint_checking (3,414,928 samples, 2.83%)</title><rect x="22.7652%" y="213" width="2.8281%" height="15" fill="rgb(250,191,14)"/><text x="23.0152%" y="223.50">li..</text></g><g><title>module_lints (326,753 samples, 0.27%)</title><rect x="25.3227%" y="197" width="0.2706%" height="15" fill="rgb(239,60,40)"/><text x="25.5727%" y="207.50"></text></g><g><title>lint_mod (324,073 samples, 0.27%)</title><rect x="25.3250%" y="181" width="0.2684%" height="15" fill="rgb(206,27,48)"/><text x="25.5750%" y="191.50"></text></g><g><title>privacy_access_levels (149,872 samples, 0.12%)</title><rect x="25.5933%" y="213" width="0.1241%" height="15" fill="rgb(225,35,8)"/><text x="25.8433%" y="223.50"></text></g><g><title>privacy_checking_modules (496,696 samples, 0.41%)</title><rect x="25.7175%" y="213" width="0.4113%" height="15" fill="rgb(250,213,24)"/><text x="25.9675%" y="223.50"></text></g><g><title>check_mod_privacy (495,186 samples, 0.41%)</title><rect x="25.7187%" y="197" width="0.4101%" height="15" fill="rgb(247,123,22)"/><text x="25.9687%" y="207.50"></text></g><g><title>misc_checking_3 (4,426,750 samples, 3.67%)</title><rect x="22.4767%" y="229" width="3.6661%" height="15" fill="rgb(231,138,38)"/><text x="22.7267%" y="239.50">misc..</text></g><g><title>impl_parent (1,549,491 samples, 1.28%)</title><rect x="28.0730%" y="165" width="1.2832%" height="15" fill="rgb(231,145,46)"/><text x="28.3230%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (858,764 samples, 0.71%)</title><rect x="28.6450%" y="149" width="0.7112%" height="15" fill="rgb(251,118,11)"/><text x="28.8950%" y="159.50"></text></g><g><title>impl_trait_ref (3,730,113 samples, 3.09%)</title><rect x="29.3562%" y="165" width="3.0891%" height="15" fill="rgb(217,147,25)"/><text x="29.6062%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,248,158 samples, 2.69%)</title><rect x="29.7554%" y="149" width="2.6900%" height="15" fill="rgb(247,81,37)"/><text x="30.0054%" y="159.50">me..</text></g><g><title>explicit_predicates_of (125,921 samples, 0.10%)</title><rect x="32.5537%" y="133" width="0.1043%" height="15" fill="rgb(209,12,38)"/><text x="32.8037%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (121,161 samples, 0.10%)</title><rect x="32.5576%" y="117" width="0.1003%" height="15" fill="rgb(227,1,9)"/><text x="32.8076%" y="127.50"></text></g><g><title>predicates_of (194,992 samples, 0.16%)</title><rect x="32.5257%" y="165" width="0.1615%" height="15" fill="rgb(248,47,43)"/><text x="32.7757%" y="175.50"></text></g><g><title>predicates_defined_on (173,871 samples, 0.14%)</title><rect x="32.5432%" y="149" width="0.1440%" height="15" fill="rgb(221,10,30)"/><text x="32.7932%" y="159.50"></text></g><g><title>trait_impls_of (447,204 samples, 0.37%)</title><rect x="32.6892%" y="165" width="0.3704%" height="15" fill="rgb(210,229,1)"/><text x="32.9392%" y="175.50"></text></g><g><title>implementations_of_trait (138,741 samples, 0.11%)</title><rect x="32.9447%" y="149" width="0.1149%" height="15" fill="rgb(222,148,37)"/><text x="33.1947%" y="159.50"></text></g><g><title>coherent_trait (8,322,863 samples, 6.89%)</title><rect x="26.1843%" y="197" width="6.8927%" height="15" fill="rgb(234,67,33)"/><text x="26.4343%" y="207.50">coherent_..</text></g><g><title>specialization_graph_of (8,311,043 samples, 6.88%)</title><rect x="26.1941%" y="181" width="6.8829%" height="15" fill="rgb(247,98,35)"/><text x="26.4441%" y="191.50">specializ..</text></g><g><title>coherence_checking (8,382,723 samples, 6.94%)</title><rect x="26.1720%" y="213" width="6.9422%" height="15" fill="rgb(247,138,52)"/><text x="26.4220%" y="223.50">coherence..</text></g><g><title>adt_def (156,512 samples, 0.13%)</title><rect x="50.6960%" y="149" width="0.1296%" height="15" fill="rgb(213,79,30)"/><text x="50.9460%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (154,562 samples, 0.13%)</title><rect x="50.6976%" y="133" width="0.1280%" height="15" fill="rgb(246,177,23)"/><text x="50.9476%" y="143.50"></text></g><g><title>item_attrs (133,042 samples, 0.11%)</title><rect x="50.7154%" y="117" width="0.1102%" height="15" fill="rgb(230,62,27)"/><text x="50.9654%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (130,872 samples, 0.11%)</title><rect x="50.7172%" y="101" width="0.1084%" height="15" fill="rgb(216,154,8)"/><text x="50.9672%" y="111.50"></text></g><g><title>adt_sized_constraint (218,172 samples, 0.18%)</title><rect x="50.6866%" y="165" width="0.1807%" height="15" fill="rgb(244,35,45)"/><text x="50.9366%" y="175.50"></text></g><g><title>associated_item (452,356 samples, 0.37%)</title><rect x="50.9917%" y="149" width="0.3746%" height="15" fill="rgb(251,115,12)"/><text x="51.2417%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (372,056 samples, 0.31%)</title><rect x="51.0582%" y="133" width="0.3081%" height="15" fill="rgb(240,54,50)"/><text x="51.3082%" y="143.50"></text></g><g><title>associated_items (626,388 samples, 0.52%)</title><rect x="50.8689%" y="165" width="0.5187%" height="15" fill="rgb(233,84,52)"/><text x="51.1189%" y="175.50"></text></g><g><title>adt_dtorck_constraint (122,312 samples, 0.10%)</title><rect x="51.6126%" y="133" width="0.1013%" height="15" fill="rgb(207,117,47)"/><text x="51.8626%" y="143.50"></text></g><g><title>adt_dtorck_constraint (174,262 samples, 0.14%)</title><rect x="51.5856%" y="149" width="0.1443%" height="15" fill="rgb(249,43,39)"/><text x="51.8356%" y="159.50"></text></g><g><title>dropck_outlives (486,257 samples, 0.40%)</title><rect x="51.4374%" y="165" width="0.4027%" height="15" fill="rgb(209,38,44)"/><text x="51.6874%" y="175.50"></text></g><g><title>normalize_projection_ty (133,000 samples, 0.11%)</title><rect x="51.7300%" y="149" width="0.1101%" height="15" fill="rgb(236,212,23)"/><text x="51.9800%" y="159.50"></text></g><g><title>generics_of (1,050,916 samples, 0.87%)</title><rect x="55.7380%" y="149" width="0.8703%" height="15" fill="rgb(242,79,21)"/><text x="55.9880%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (812,483 samples, 0.67%)</title><rect x="55.9355%" y="133" width="0.6729%" height="15" fill="rgb(211,96,35)"/><text x="56.1855%" y="143.50"></text></g><g><title>impl_trait_ref (832,099 samples, 0.69%)</title><rect x="56.6916%" y="149" width="0.6891%" height="15" fill="rgb(253,215,40)"/><text x="56.9416%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (486,773 samples, 0.40%)</title><rect x="56.9775%" y="133" width="0.4031%" height="15" fill="rgb(211,81,21)"/><text x="57.2275%" y="143.50"></text></g><g><title>predicates_of (302,845 samples, 0.25%)</title><rect x="57.4076%" y="149" width="0.2508%" height="15" fill="rgb(208,190,38)"/><text x="57.6576%" y="159.50"></text></g><g><title>predicates_defined_on (183,662 samples, 0.15%)</title><rect x="57.5063%" y="133" width="0.1521%" height="15" fill="rgb(235,213,38)"/><text x="57.7563%" y="143.50"></text></g><g><title>specializes (532,935 samples, 0.44%)</title><rect x="57.6584%" y="149" width="0.4414%" height="15" fill="rgb(237,122,38)"/><text x="57.9084%" y="159.50"></text></g><g><title>param_env (350,823 samples, 0.29%)</title><rect x="57.8092%" y="133" width="0.2905%" height="15" fill="rgb(244,218,35)"/><text x="58.0592%" y="143.50"></text></g><g><title>def_span (156,381 samples, 0.13%)</title><rect x="57.9702%" y="117" width="0.1295%" height="15" fill="rgb(240,68,47)"/><text x="58.2202%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (142,051 samples, 0.12%)</title><rect x="57.9821%" y="101" width="0.1176%" height="15" fill="rgb(210,16,53)"/><text x="58.2321%" y="111.50"></text></g><g><title>trait_impls_of (442,314 samples, 0.37%)</title><rect x="58.1112%" y="149" width="0.3663%" height="15" fill="rgb(235,124,12)"/><text x="58.3612%" y="159.50"></text></g><g><title>implementations_of_trait (180,293 samples, 0.15%)</title><rect x="58.3282%" y="133" width="0.1493%" height="15" fill="rgb(224,169,11)"/><text x="58.5782%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (121,302 samples, 0.10%)</title><rect x="58.3770%" y="117" width="0.1005%" height="15" fill="rgb(250,166,2)"/><text x="58.6270%" y="127.50"></text></g><g><title>evaluate_obligation (8,043,785 samples, 6.66%)</title><rect x="51.8403%" y="165" width="6.6615%" height="15" fill="rgb(242,216,29)"/><text x="52.0903%" y="175.50">evaluate_..</text></g><g><title>generics_of (1,273,845 samples, 1.05%)</title><rect x="58.5991%" y="165" width="1.0549%" height="15" fill="rgb(230,116,27)"/><text x="58.8491%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (986,334 samples, 0.82%)</title><rect x="58.8372%" y="149" width="0.8168%" height="15" fill="rgb(228,99,48)"/><text x="59.0872%" y="159.50"></text></g><g><title>impl_trait_ref (1,651,498 samples, 1.37%)</title><rect x="59.7606%" y="165" width="1.3677%" height="15" fill="rgb(253,11,6)"/><text x="60.0106%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,391,344 samples, 1.15%)</title><rect x="59.9761%" y="149" width="1.1523%" height="15" fill="rgb(247,143,39)"/><text x="60.2261%" y="159.50"></text></g><g><title>evaluate_obligation (179,832 samples, 0.15%)</title><rect x="61.4166%" y="149" width="0.1489%" height="15" fill="rgb(236,97,10)"/><text x="61.6666%" y="159.50"></text></g><g><title>method_autoderef_steps (364,614 samples, 0.30%)</title><rect x="61.2717%" y="165" width="0.3020%" height="15" fill="rgb(233,208,19)"/><text x="61.5217%" y="175.50"></text></g><g><title>predicates_of (341,255 samples, 0.28%)</title><rect x="61.5950%" y="165" width="0.2826%" height="15" fill="rgb(216,164,2)"/><text x="61.8450%" y="175.50"></text></g><g><title>predicates_defined_on (226,635 samples, 0.19%)</title><rect x="61.6899%" y="149" width="0.1877%" height="15" fill="rgb(220,129,5)"/><text x="61.9399%" y="159.50"></text></g><g><title>associated_items (125,580 samples, 0.10%)</title><rect x="66.1105%" y="149" width="0.1040%" height="15" fill="rgb(242,17,10)"/><text x="66.3605%" y="159.50"></text></g><g><title>dropck_outlives (180,812 samples, 0.15%)</title><rect x="66.2245%" y="149" width="0.1497%" height="15" fill="rgb(242,107,0)"/><text x="66.4745%" y="159.50"></text></g><g><title>adt_def (400,774 samples, 0.33%)</title><rect x="67.8104%" y="117" width="0.3319%" height="15" fill="rgb(251,28,31)"/><text x="68.0604%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (400,414 samples, 0.33%)</title><rect x="67.8107%" y="101" width="0.3316%" height="15" fill="rgb(233,223,10)"/><text x="68.0607%" y="111.50"></text></g><g><title>item_attrs (395,754 samples, 0.33%)</title><rect x="67.8146%" y="85" width="0.3277%" height="15" fill="rgb(215,21,27)"/><text x="68.0646%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (395,224 samples, 0.33%)</title><rect x="67.8150%" y="69" width="0.3273%" height="15" fill="rgb(232,23,21)"/><text x="68.0650%" y="79.50"></text></g><g><title>adt_sized_constraint (406,854 samples, 0.34%)</title><rect x="67.8085%" y="133" width="0.3369%" height="15" fill="rgb(244,5,23)"/><text x="68.0585%" y="143.50"></text></g><g><title>generics_of (149,225 samples, 0.12%)</title><rect x="68.1454%" y="133" width="0.1236%" height="15" fill="rgb(226,81,46)"/><text x="68.3954%" y="143.50"></text></g><g><title>impl_trait_ref (207,560 samples, 0.17%)</title><rect x="68.2946%" y="133" width="0.1719%" height="15" fill="rgb(247,70,30)"/><text x="68.5446%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (161,160 samples, 0.13%)</title><rect x="68.3330%" y="117" width="0.1335%" height="15" fill="rgb(212,68,19)"/><text x="68.5830%" y="127.50"></text></g><g><title>predicates_of (128,640 samples, 0.11%)</title><rect x="68.4706%" y="133" width="0.1065%" height="15" fill="rgb(240,187,13)"/><text x="68.7206%" y="143.50"></text></g><g><title>specializes (242,442 samples, 0.20%)</title><rect x="68.5771%" y="133" width="0.2008%" height="15" fill="rgb(223,113,26)"/><text x="68.8271%" y="143.50"></text></g><g><title>param_env (134,741 samples, 0.11%)</title><rect x="68.6663%" y="117" width="0.1116%" height="15" fill="rgb(206,192,2)"/><text x="68.9163%" y="127.50"></text></g><g><title>evaluate_obligation (2,930,313 samples, 2.43%)</title><rect x="66.3742%" y="149" width="2.4268%" height="15" fill="rgb(241,108,4)"/><text x="66.6242%" y="159.50">ev..</text></g><g><title>method_autoderef_steps (153,132 samples, 0.13%)</title><rect x="68.9815%" y="149" width="0.1268%" height="15" fill="rgb(247,173,49)"/><text x="69.2315%" y="159.50"></text></g><g><title>typeck (8,654,746 samples, 7.17%)</title><rect x="62.0663%" y="165" width="7.1675%" height="15" fill="rgb(224,114,35)"/><text x="62.3163%" y="175.50">typeck</text></g><g><title>item_bodies_checking (43,647,376 samples, 36.15%)</title><rect x="33.1264%" y="213" width="36.1470%" height="15" fill="rgb(245,159,27)"/><text x="33.3764%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (43,643,356 samples, 36.14%)</title><rect x="33.1298%" y="197" width="36.1437%" height="15" fill="rgb(245,172,44)"/><text x="33.3798%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (43,611,436 samples, 36.12%)</title><rect x="33.1562%" y="181" width="36.1173%" height="15" fill="rgb(236,23,11)"/><text x="33.4062%" y="191.50">typeck</text></g><g><title>impl_trait_ref (147,191 samples, 0.12%)</title><rect x="69.7602%" y="133" width="0.1219%" height="15" fill="rgb(205,117,38)"/><text x="70.0102%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (128,141 samples, 0.11%)</title><rect x="69.7759%" y="117" width="0.1061%" height="15" fill="rgb(237,72,25)"/><text x="70.0259%" y="127.50"></text></g><g><title>adt_destructor (322,613 samples, 0.27%)</title><rect x="69.6463%" y="181" width="0.2672%" height="15" fill="rgb(244,70,9)"/><text x="69.8963%" y="191.50"></text></g><g><title>coherent_trait (319,133 samples, 0.26%)</title><rect x="69.6492%" y="165" width="0.2643%" height="15" fill="rgb(217,125,39)"/><text x="69.8992%" y="175.50"></text></g><g><title>specialization_graph_of (317,653 samples, 0.26%)</title><rect x="69.6504%" y="149" width="0.2631%" height="15" fill="rgb(235,36,10)"/><text x="69.9004%" y="159.50"></text></g><g><title>adt_drop_tys (122,322 samples, 0.10%)</title><rect x="70.9299%" y="69" width="0.1013%" height="15" fill="rgb(251,123,47)"/><text x="71.1799%" y="79.50"></text></g><g><title>needs_drop_raw (278,743 samples, 0.23%)</title><rect x="70.9231%" y="85" width="0.2308%" height="15" fill="rgb(221,13,13)"/><text x="71.1731%" y="95.50"></text></g><g><title>is_copy_raw (148,171 samples, 0.12%)</title><rect x="71.0312%" y="69" width="0.1227%" height="15" fill="rgb(238,131,9)"/><text x="71.2812%" y="79.50"></text></g><g><title>evaluate_obligation (141,691 samples, 0.12%)</title><rect x="71.0366%" y="53" width="0.1173%" height="15" fill="rgb(211,50,8)"/><text x="71.2866%" y="63.50"></text></g><g><title>trait_impls_of (124,371 samples, 0.10%)</title><rect x="71.0510%" y="37" width="0.1030%" height="15" fill="rgb(245,182,24)"/><text x="71.3010%" y="47.50"></text></g><g><title>impl_parent (149,633 samples, 0.12%)</title><rect x="71.3522%" y="53" width="0.1239%" height="15" fill="rgb(242,14,37)"/><text x="71.6022%" y="63.50"></text></g><g><title>specialization_graph_of (694,298 samples, 0.57%)</title><rect x="71.1825%" y="69" width="0.5750%" height="15" fill="rgb(246,228,12)"/><text x="71.4325%" y="79.50"></text></g><g><title>impl_trait_ref (339,852 samples, 0.28%)</title><rect x="71.4761%" y="53" width="0.2815%" height="15" fill="rgb(213,55,15)"/><text x="71.7261%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (290,021 samples, 0.24%)</title><rect x="71.5174%" y="37" width="0.2402%" height="15" fill="rgb(209,9,3)"/><text x="71.7674%" y="47.50"></text></g><g><title>resolve_instance (784,279 samples, 0.65%)</title><rect x="71.1540%" y="85" width="0.6495%" height="15" fill="rgb(230,59,30)"/><text x="71.4040%" y="95.50"></text></g><g><title>mir_const (2,498,178 samples, 2.07%)</title><rect x="70.6381%" y="133" width="2.0689%" height="15" fill="rgb(209,121,21)"/><text x="70.8881%" y="143.50">m..</text></g><g><title>unsafety_check_result (2,388,477 samples, 1.98%)</title><rect x="70.7290%" y="117" width="1.9780%" height="15" fill="rgb(220,109,13)"/><text x="70.9790%" y="127.50">u..</text></g><g><title>mir_built (2,275,695 samples, 1.88%)</title><rect x="70.8224%" y="101" width="1.8846%" height="15" fill="rgb(232,18,1)"/><text x="71.0724%" y="111.50">m..</text></g><g><title>typeck (1,019,101 samples, 0.84%)</title><rect x="71.8630%" y="85" width="0.8440%" height="15" fill="rgb(215,41,42)"/><text x="72.1130%" y="95.50"></text></g><g><title>mir_promoted (2,571,879 samples, 2.13%)</title><rect x="70.5818%" y="149" width="2.1299%" height="15" fill="rgb(224,123,36)"/><text x="70.8318%" y="159.50">m..</text></g><g><title>item_types_checking (4,289,408 samples, 3.55%)</title><rect x="69.2735%" y="213" width="3.5523%" height="15" fill="rgb(240,125,3)"/><text x="69.5235%" y="223.50">item..</text></g><g><title>check_mod_item_types (4,286,568 samples, 3.55%)</title><rect x="69.2758%" y="197" width="3.5500%" height="15" fill="rgb(205,98,50)"/><text x="69.5258%" y="207.50">chec..</text></g><g><title>type_of (3,314,897 samples, 2.75%)</title><rect x="70.0805%" y="181" width="2.7453%" height="15" fill="rgb(205,185,37)"/><text x="70.3305%" y="191.50">ty..</text></g><g><title>mir_borrowck (3,310,267 samples, 2.74%)</title><rect x="70.0843%" y="165" width="2.7414%" height="15" fill="rgb(238,207,15)"/><text x="70.3343%" y="175.50">mi..</text></g><g><title>fn_sig (171,401 samples, 0.14%)</title><rect x="72.9423%" y="181" width="0.1419%" height="15" fill="rgb(213,199,42)"/><text x="73.1923%" y="191.50"></text></g><g><title>is_late_bound_map (165,452 samples, 0.14%)</title><rect x="73.1321%" y="165" width="0.1370%" height="15" fill="rgb(235,201,11)"/><text x="73.3821%" y="175.50"></text></g><g><title>resolve_lifetimes (161,212 samples, 0.13%)</title><rect x="73.1357%" y="149" width="0.1335%" height="15" fill="rgb(207,46,11)"/><text x="73.3857%" y="159.50"></text></g><g><title>named_region_map (196,723 samples, 0.16%)</title><rect x="73.2692%" y="165" width="0.1629%" height="15" fill="rgb(241,35,35)"/><text x="73.5192%" y="175.50"></text></g><g><title>resolve_lifetimes (188,532 samples, 0.16%)</title><rect x="73.2760%" y="149" width="0.1561%" height="15" fill="rgb(243,32,47)"/><text x="73.5260%" y="159.50"></text></g><g><title>generics_of (434,385 samples, 0.36%)</title><rect x="73.0842%" y="181" width="0.3597%" height="15" fill="rgb(247,202,23)"/><text x="73.3342%" y="191.50"></text></g><g><title>explicit_predicates_of (198,702 samples, 0.16%)</title><rect x="73.5068%" y="149" width="0.1646%" height="15" fill="rgb(219,102,11)"/><text x="73.7568%" y="159.50"></text></g><g><title>predicates_of (363,693 samples, 0.30%)</title><rect x="73.4709%" y="181" width="0.3012%" height="15" fill="rgb(243,110,44)"/><text x="73.7209%" y="191.50"></text></g><g><title>predicates_defined_on (347,593 samples, 0.29%)</title><rect x="73.4842%" y="165" width="0.2879%" height="15" fill="rgb(222,74,54)"/><text x="73.7342%" y="175.50"></text></g><g><title>inferred_outlives_of (121,581 samples, 0.10%)</title><rect x="73.6714%" y="149" width="0.1007%" height="15" fill="rgb(216,99,12)"/><text x="73.9214%" y="159.50"></text></g><g><title>type_collecting (1,253,304 samples, 1.04%)</title><rect x="72.8272%" y="213" width="1.0379%" height="15" fill="rgb(226,22,26)"/><text x="73.0772%" y="223.50"></text></g><g><title>collect_mod_item_types (1,245,144 samples, 1.03%)</title><rect x="72.8339%" y="197" width="1.0312%" height="15" fill="rgb(217,163,10)"/><text x="73.0839%" y="207.50"></text></g><g><title>check_impl_item_well_formed (456,356 samples, 0.38%)</title><rect x="73.9285%" y="197" width="0.3779%" height="15" fill="rgb(213,25,53)"/><text x="74.1785%" y="207.50"></text></g><g><title>param_env (158,542 samples, 0.13%)</title><rect x="75.3986%" y="181" width="0.1313%" height="15" fill="rgb(252,105,26)"/><text x="75.6486%" y="191.50"></text></g><g><title>region_scope_tree (260,114 samples, 0.22%)</title><rect x="75.5620%" y="181" width="0.2154%" height="15" fill="rgb(220,39,43)"/><text x="75.8120%" y="191.50"></text></g><g><title>trait_impls_of (323,163 samples, 0.27%)</title><rect x="75.7840%" y="181" width="0.2676%" height="15" fill="rgb(229,68,48)"/><text x="76.0340%" y="191.50"></text></g><g><title>analysis (91,293,387 samples, 75.61%)</title><rect x="0.4775%" y="245" width="75.6056%" height="15" fill="rgb(252,8,32)"/><text x="0.7275%" y="255.50">analysis</text></g><g><title>type_check_crate (60,302,651 samples, 49.94%)</title><rect x="26.1428%" y="229" width="49.9403%" height="15" fill="rgb(223,20,43)"/><text x="26.3928%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,675,670 samples, 2.22%)</title><rect x="73.8672%" y="213" width="2.2159%" height="15" fill="rgb(229,81,49)"/><text x="74.1172%" y="223.50">w..</text></g><g><title>check_item_well_formed (2,145,254 samples, 1.78%)</title><rect x="74.3064%" y="197" width="1.7766%" height="15" fill="rgb(236,28,36)"/><text x="74.5564%" y="207.50">c..</text></g><g><title>codegen_crate (345,944 samples, 0.29%)</title><rect x="76.0931%" y="245" width="0.2865%" height="15" fill="rgb(249,185,26)"/><text x="76.3431%" y="255.50"></text></g><g><title>macro_expand_crate (11,455,938 samples, 9.49%)</title><rect x="76.7221%" y="229" width="9.4874%" height="15" fill="rgb(249,174,33)"/><text x="76.9721%" y="239.50">macro_expand_c..</text></g><g><title>expand_crate (11,437,268 samples, 9.47%)</title><rect x="76.7376%" y="213" width="9.4719%" height="15" fill="rgb(233,201,37)"/><text x="76.9876%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,318,426 samples, 1.92%)</title><rect x="84.2894%" y="197" width="1.9200%" height="15" fill="rgb(221,78,26)"/><text x="84.5394%" y="207.50">m..</text></g><g><title>metadata_register_crate (858,368 samples, 0.71%)</title><rect x="85.4986%" y="181" width="0.7109%" height="15" fill="rgb(250,127,30)"/><text x="85.7486%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (412,785 samples, 0.34%)</title><rect x="86.2121%" y="229" width="0.3419%" height="15" fill="rgb(230,49,44)"/><text x="86.4621%" y="239.50"></text></g><g><title>late_resolve_crate (1,037,502 samples, 0.86%)</title><rect x="86.5955%" y="213" width="0.8592%" height="15" fill="rgb(229,67,23)"/><text x="86.8455%" y="223.50"></text></g><g><title>configure_and_expand (13,441,640 samples, 11.13%)</title><rect x="76.3796%" y="245" width="11.1318%" height="15" fill="rgb(249,83,47)"/><text x="76.6296%" y="255.50">configure_and_ex..</text></g><g><title>resolve_crate (1,156,132 samples, 0.96%)</title><rect x="86.5539%" y="229" width="0.9575%" height="15" fill="rgb(215,43,3)"/><text x="86.8039%" y="239.50"></text></g><g><title>drop_ast (140,171 samples, 0.12%)</title><rect x="87.5114%" y="245" width="0.1161%" height="15" fill="rgb(238,154,13)"/><text x="87.7614%" y="255.50"></text></g><g><title>early_lint_checks (249,753 samples, 0.21%)</title><rect x="87.6402%" y="245" width="0.2068%" height="15" fill="rgb(219,56,2)"/><text x="87.8902%" y="255.50"></text></g><g><title>free_global_ctxt (3,967,533 samples, 3.29%)</title><rect x="87.8471%" y="245" width="3.2858%" height="15" fill="rgb(233,0,4)"/><text x="88.0971%" y="255.50">fre..</text></g><g><title>generate_crate_metadata (653,787 samples, 0.54%)</title><rect x="91.1328%" y="245" width="0.5414%" height="15" fill="rgb(235,30,7)"/><text x="91.3828%" y="255.50"></text></g><g><title>hir_lowering (1,513,527 samples, 1.25%)</title><rect x="91.6743%" y="245" width="1.2534%" height="15" fill="rgb(250,79,13)"/><text x="91.9243%" y="255.50"></text></g><g><title>parse_crate (6,897,307 samples, 5.71%)</title><rect x="92.9760%" y="245" width="5.7121%" height="15" fill="rgb(211,146,34)"/><text x="93.2260%" y="255.50">parse_c..</text></g><g><title>prepare_outputs (196,002 samples, 0.16%)</title><rect x="98.6950%" y="245" width="0.1623%" height="15" fill="rgb(228,22,38)"/><text x="98.9450%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (980,531 samples, 0.81%)</title><rect x="98.8573%" y="245" width="0.8120%" height="15" fill="rgb(235,168,5)"/><text x="99.1073%" y="255.50"></text></g><g><title>all (120,749,564 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (120,749,564 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (303,954 samples, 0.25%)</title><rect x="99.7483%" y="245" width="0.2517%" height="15" fill="rgb(223,4,10)"/><text x="99.9983%" y="255.50"></text></g></svg></svg>