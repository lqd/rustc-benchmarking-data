<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (281,002 samples, 0.17%)</title><rect x="15.6099%" y="53" width="0.1738%" height="15" fill="rgb(227,0,7)"/><text x="15.8599%" y="63.50"></text></g><g><title>evaluate_obligation (240,522 samples, 0.15%)</title><rect x="15.6349%" y="37" width="0.1488%" height="15" fill="rgb(217,0,24)"/><text x="15.8849%" y="47.50"></text></g><g><title>needs_drop_raw (239,174 samples, 0.15%)</title><rect x="15.7855%" y="53" width="0.1479%" height="15" fill="rgb(221,193,54)"/><text x="16.0355%" y="63.50"></text></g><g><title>is_copy_raw (176,782 samples, 0.11%)</title><rect x="15.8241%" y="37" width="0.1093%" height="15" fill="rgb(248,212,6)"/><text x="16.0741%" y="47.50"></text></g><g><title>resolve_instance (240,814 samples, 0.15%)</title><rect x="15.9334%" y="53" width="0.1489%" height="15" fill="rgb(208,68,35)"/><text x="16.1834%" y="63.50"></text></g><g><title>thir_body (2,345,584 samples, 1.45%)</title><rect x="16.1177%" y="53" width="1.4507%" height="15" fill="rgb(232,128,0)"/><text x="16.3677%" y="63.50"></text></g><g><title>mir_const (10,738,724 samples, 6.64%)</title><rect x="10.9465%" y="101" width="6.6416%" height="15" fill="rgb(207,160,47)"/><text x="11.1965%" y="111.50">mir_const</text></g><g><title>unsafety_check_result (9,046,705 samples, 5.60%)</title><rect x="11.9930%" y="85" width="5.5952%" height="15" fill="rgb(228,23,34)"/><text x="12.2430%" y="95.50">unsafet..</text></g><g><title>mir_built (8,236,302 samples, 5.09%)</title><rect x="12.4942%" y="69" width="5.0940%" height="15" fill="rgb(218,30,26)"/><text x="12.7442%" y="79.50">mir_bu..</text></g><g><title>mir_promoted (12,327,407 samples, 7.62%)</title><rect x="10.0191%" y="117" width="7.6242%" height="15" fill="rgb(220,122,19)"/><text x="10.2691%" y="127.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (368,142 samples, 0.23%)</title><rect x="17.6433%" y="117" width="0.2277%" height="15" fill="rgb(250,228,42)"/><text x="17.8933%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (225,934 samples, 0.14%)</title><rect x="17.8710%" y="117" width="0.1397%" height="15" fill="rgb(240,193,28)"/><text x="18.1210%" y="127.50"></text></g><g><title>type_op_prove_predicate (251,170 samples, 0.16%)</title><rect x="18.0735%" y="117" width="0.1553%" height="15" fill="rgb(216,20,37)"/><text x="18.3235%" y="127.50"></text></g><g><title>MIR_borrow_checking (28,075,822 samples, 17.36%)</title><rect x="0.8656%" y="149" width="17.3642%" height="15" fill="rgb(206,188,39)"/><text x="1.1156%" y="159.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (27,807,309 samples, 17.20%)</title><rect x="1.0316%" y="133" width="17.1982%" height="15" fill="rgb(217,207,13)"/><text x="1.2816%" y="143.50">mir_borrowck</text></g><g><title>hir_module_items (427,385 samples, 0.26%)</title><rect x="18.2616%" y="149" width="0.2643%" height="15" fill="rgb(231,73,38)"/><text x="18.5116%" y="159.50"></text></g><g><title>get_lang_items (179,882 samples, 0.11%)</title><rect x="18.8640%" y="101" width="0.1113%" height="15" fill="rgb(225,20,46)"/><text x="19.1140%" y="111.50"></text></g><g><title>should_inherit_track_caller (312,923 samples, 0.19%)</title><rect x="18.9752%" y="101" width="0.1935%" height="15" fill="rgb(210,31,41)"/><text x="19.2252%" y="111.50"></text></g><g><title>codegen_fn_attrs (618,156 samples, 0.38%)</title><rect x="18.7972%" y="117" width="0.3823%" height="15" fill="rgb(221,200,47)"/><text x="19.0472%" y="127.50"></text></g><g><title>check_mod_attrs (1,034,542 samples, 0.64%)</title><rect x="18.5398%" y="133" width="0.6398%" height="15" fill="rgb(226,26,5)"/><text x="18.7898%" y="143.50"></text></g><g><title>check_mod_const_bodies (216,442 samples, 0.13%)</title><rect x="19.1797%" y="133" width="0.1339%" height="15" fill="rgb(249,33,26)"/><text x="19.4297%" y="143.50"></text></g><g><title>lint_levels (228,153 samples, 0.14%)</title><rect x="19.7059%" y="117" width="0.1411%" height="15" fill="rgb(235,183,28)"/><text x="19.9559%" y="127.50"></text></g><g><title>lookup_deprecation_entry (191,642 samples, 0.12%)</title><rect x="19.8470%" y="117" width="0.1185%" height="15" fill="rgb(221,5,38)"/><text x="20.0970%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,032,082 samples, 0.64%)</title><rect x="19.3900%" y="133" width="0.6383%" height="15" fill="rgb(247,18,42)"/><text x="19.6400%" y="143.50"></text></g><g><title>misc_checking_1 (2,513,638 samples, 1.55%)</title><rect x="18.5263%" y="149" width="1.5546%" height="15" fill="rgb(241,131,45)"/><text x="18.7763%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (639,737 samples, 0.40%)</title><rect x="20.0820%" y="133" width="0.3957%" height="15" fill="rgb(249,31,29)"/><text x="20.3320%" y="143.50"></text></g><g><title>check_mod_liveness (487,415 samples, 0.30%)</title><rect x="20.1763%" y="117" width="0.3015%" height="15" fill="rgb(225,111,53)"/><text x="20.4263%" y="127.50"></text></g><g><title>misc_checking_2 (1,413,216 samples, 0.87%)</title><rect x="20.0809%" y="149" width="0.8740%" height="15" fill="rgb(238,160,17)"/><text x="20.3309%" y="159.50"></text></g><g><title>match_checking (771,679 samples, 0.48%)</title><rect x="20.4777%" y="133" width="0.4773%" height="15" fill="rgb(214,148,48)"/><text x="20.7277%" y="143.50"></text></g><g><title>check_match (708,779 samples, 0.44%)</title><rect x="20.5166%" y="117" width="0.4384%" height="15" fill="rgb(232,36,49)"/><text x="20.7666%" y="127.50"></text></g><g><title>check_private_in_public (442,454 samples, 0.27%)</title><rect x="20.9617%" y="133" width="0.2736%" height="15" fill="rgb(209,103,24)"/><text x="21.2117%" y="143.50"></text></g><g><title>death_checking (742,709 samples, 0.46%)</title><rect x="21.2353%" y="133" width="0.4593%" height="15" fill="rgb(229,88,8)"/><text x="21.4853%" y="143.50"></text></g><g><title>param_env (467,745 samples, 0.29%)</title><rect x="22.3608%" y="101" width="0.2893%" height="15" fill="rgb(213,181,19)"/><text x="22.6108%" y="111.50"></text></g><g><title>crate_lints (2,627,459 samples, 1.63%)</title><rect x="21.6957%" y="117" width="1.6250%" height="15" fill="rgb(254,191,54)"/><text x="21.9457%" y="127.50"></text></g><g><title>type_of (1,084,299 samples, 0.67%)</title><rect x="22.6501%" y="101" width="0.6706%" height="15" fill="rgb(241,83,37)"/><text x="22.9001%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (854,254 samples, 0.53%)</title><rect x="22.7924%" y="85" width="0.5283%" height="15" fill="rgb(233,36,39)"/><text x="23.0424%" y="95.50"></text></g><g><title>lint_checking (3,302,966 samples, 2.04%)</title><rect x="21.6947%" y="133" width="2.0428%" height="15" fill="rgb(226,3,54)"/><text x="21.9447%" y="143.50">l..</text></g><g><title>module_lints (673,807 samples, 0.42%)</title><rect x="23.3207%" y="117" width="0.4167%" height="15" fill="rgb(245,192,40)"/><text x="23.5707%" y="127.50"></text></g><g><title>lint_mod (668,707 samples, 0.41%)</title><rect x="23.3239%" y="101" width="0.4136%" height="15" fill="rgb(238,167,29)"/><text x="23.5739%" y="111.50"></text></g><g><title>privacy_access_levels (625,817 samples, 0.39%)</title><rect x="23.7375%" y="133" width="0.3871%" height="15" fill="rgb(232,182,51)"/><text x="23.9875%" y="143.50"></text></g><g><title>privacy_checking_modules (1,299,125 samples, 0.80%)</title><rect x="24.1245%" y="133" width="0.8035%" height="15" fill="rgb(231,60,39)"/><text x="24.3745%" y="143.50"></text></g><g><title>check_mod_privacy (1,296,405 samples, 0.80%)</title><rect x="24.1262%" y="117" width="0.8018%" height="15" fill="rgb(208,69,12)"/><text x="24.3762%" y="127.50"></text></g><g><title>misc_checking_3 (6,443,362 samples, 3.99%)</title><rect x="20.9550%" y="149" width="3.9851%" height="15" fill="rgb(235,93,37)"/><text x="21.2050%" y="159.50">misc..</text></g><g><title>adt_destructor (279,003 samples, 0.17%)</title><rect x="25.0482%" y="101" width="0.1726%" height="15" fill="rgb(213,116,39)"/><text x="25.2982%" y="111.50"></text></g><g><title>coherent_trait (275,593 samples, 0.17%)</title><rect x="25.0504%" y="85" width="0.1704%" height="15" fill="rgb(222,207,29)"/><text x="25.3004%" y="95.50"></text></g><g><title>specialization_graph_of (274,603 samples, 0.17%)</title><rect x="25.0510%" y="69" width="0.1698%" height="15" fill="rgb(206,96,30)"/><text x="25.3010%" y="79.50"></text></g><g><title>impl_parent (2,646,733 samples, 1.64%)</title><rect x="27.8285%" y="85" width="1.6369%" height="15" fill="rgb(218,138,4)"/><text x="28.0785%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,444,225 samples, 0.89%)</title><rect x="28.5722%" y="69" width="0.8932%" height="15" fill="rgb(250,191,14)"/><text x="28.8222%" y="79.50"></text></g><g><title>impl_trait_ref (5,461,462 samples, 3.38%)</title><rect x="29.4657%" y="85" width="3.3778%" height="15" fill="rgb(239,60,40)"/><text x="29.7157%" y="95.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,219,126 samples, 2.61%)</title><rect x="30.2340%" y="69" width="2.6094%" height="15" fill="rgb(206,27,48)"/><text x="30.4840%" y="79.50">me..</text></g><g><title>trait_impls_of (883,091 samples, 0.55%)</title><rect x="32.8641%" y="85" width="0.5462%" height="15" fill="rgb(225,35,8)"/><text x="33.1141%" y="95.50"></text></g><g><title>implementations_of_trait (229,832 samples, 0.14%)</title><rect x="33.2681%" y="69" width="0.1421%" height="15" fill="rgb(250,213,24)"/><text x="33.5181%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (188,612 samples, 0.12%)</title><rect x="33.2936%" y="53" width="0.1167%" height="15" fill="rgb(247,123,22)"/><text x="33.5436%" y="63.50"></text></g><g><title>coherent_trait (13,566,980 samples, 8.39%)</title><rect x="25.0200%" y="117" width="8.3909%" height="15" fill="rgb(231,138,38)"/><text x="25.2700%" y="127.50">coherent_tra..</text></g><g><title>specialization_graph_of (13,207,626 samples, 8.17%)</title><rect x="25.2423%" y="101" width="8.1686%" height="15" fill="rgb(231,145,46)"/><text x="25.4923%" y="111.50">specializat..</text></g><g><title>coherence_checking (13,690,352 samples, 8.47%)</title><rect x="25.0066%" y="133" width="8.4672%" height="15" fill="rgb(251,118,11)"/><text x="25.2566%" y="143.50">coherence_ch..</text></g><g><title>associated_item (171,094 samples, 0.11%)</title><rect x="51.9560%" y="69" width="0.1058%" height="15" fill="rgb(217,147,25)"/><text x="52.2060%" y="79.50"></text></g><g><title>associated_items (213,474 samples, 0.13%)</title><rect x="51.9326%" y="85" width="0.1320%" height="15" fill="rgb(247,81,37)"/><text x="52.1826%" y="95.50"></text></g><g><title>dropck_outlives (252,783 samples, 0.16%)</title><rect x="52.0721%" y="85" width="0.1563%" height="15" fill="rgb(209,12,38)"/><text x="52.3221%" y="95.50"></text></g><g><title>evaluate_obligation (804,161 samples, 0.50%)</title><rect x="52.2285%" y="85" width="0.4974%" height="15" fill="rgb(227,1,9)"/><text x="52.4785%" y="95.50"></text></g><g><title>predicates_of (180,672 samples, 0.11%)</title><rect x="52.9931%" y="85" width="0.1117%" height="15" fill="rgb(248,47,43)"/><text x="53.2431%" y="95.50"></text></g><g><title>item_bodies_checking (31,787,213 samples, 19.66%)</title><rect x="33.5376%" y="133" width="19.6596%" height="15" fill="rgb(221,10,30)"/><text x="33.7876%" y="143.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (31,783,853 samples, 19.66%)</title><rect x="33.5397%" y="117" width="19.6576%" height="15" fill="rgb(210,229,1)"/><text x="33.7897%" y="127.50">typeck_item_bodies</text></g><g><title>typeck (31,578,322 samples, 19.53%)</title><rect x="33.6668%" y="101" width="19.5304%" height="15" fill="rgb(222,148,37)"/><text x="33.9168%" y="111.50">typeck</text></g><g><title>impl_item_implementor_ids (290,014 samples, 0.18%)</title><rect x="56.4863%" y="101" width="0.1794%" height="15" fill="rgb(234,67,33)"/><text x="56.7363%" y="111.50"></text></g><g><title>item_types_checking (5,624,552 samples, 3.48%)</title><rect x="53.1972%" y="133" width="3.4787%" height="15" fill="rgb(247,98,35)"/><text x="53.4472%" y="143.50">ite..</text></g><g><title>check_mod_item_types (5,620,032 samples, 3.48%)</title><rect x="53.2000%" y="117" width="3.4759%" height="15" fill="rgb(247,138,52)"/><text x="53.4500%" y="127.50">che..</text></g><g><title>late_bound_vars_map (712,432 samples, 0.44%)</title><rect x="57.3881%" y="85" width="0.4406%" height="15" fill="rgb(213,79,30)"/><text x="57.6381%" y="95.50"></text></g><g><title>resolve_lifetimes (635,462 samples, 0.39%)</title><rect x="57.4357%" y="69" width="0.3930%" height="15" fill="rgb(246,177,23)"/><text x="57.6857%" y="79.50"></text></g><g><title>fn_sig (1,175,103 samples, 0.73%)</title><rect x="57.1375%" y="101" width="0.7268%" height="15" fill="rgb(230,62,27)"/><text x="57.3875%" y="111.50"></text></g><g><title>generics_of (457,005 samples, 0.28%)</title><rect x="57.8643%" y="101" width="0.2826%" height="15" fill="rgb(216,154,8)"/><text x="58.1143%" y="111.50"></text></g><g><title>explicit_predicates_of (339,802 samples, 0.21%)</title><rect x="58.5601%" y="69" width="0.2102%" height="15" fill="rgb(244,35,45)"/><text x="58.8101%" y="79.50"></text></g><g><title>predicates_of (879,948 samples, 0.54%)</title><rect x="58.2762%" y="101" width="0.5442%" height="15" fill="rgb(251,115,12)"/><text x="58.5262%" y="111.50"></text></g><g><title>predicates_defined_on (701,126 samples, 0.43%)</title><rect x="58.3868%" y="85" width="0.4336%" height="15" fill="rgb(240,54,50)"/><text x="58.6368%" y="95.50"></text></g><g><title>type_collecting (3,779,592 samples, 2.34%)</title><rect x="56.6776%" y="133" width="2.3376%" height="15" fill="rgb(233,84,52)"/><text x="56.9276%" y="143.50">t..</text></g><g><title>collect_mod_item_types (3,770,582 samples, 2.33%)</title><rect x="56.6831%" y="117" width="2.3320%" height="15" fill="rgb(207,117,47)"/><text x="56.9331%" y="127.50">c..</text></g><g><title>type_of (205,952 samples, 0.13%)</title><rect x="58.8878%" y="101" width="0.1274%" height="15" fill="rgb(249,43,39)"/><text x="59.1378%" y="111.50"></text></g><g><title>implied_outlives_bounds (190,112 samples, 0.12%)</title><rect x="61.6922%" y="101" width="0.1176%" height="15" fill="rgb(209,38,44)"/><text x="61.9422%" y="111.50"></text></g><g><title>param_env (1,033,737 samples, 0.64%)</title><rect x="61.8173%" y="101" width="0.6393%" height="15" fill="rgb(236,212,23)"/><text x="62.0673%" y="111.50"></text></g><g><title>check_impl_item_well_formed (6,193,268 samples, 3.83%)</title><rect x="59.3338%" y="117" width="3.8304%" height="15" fill="rgb(242,79,21)"/><text x="59.5838%" y="127.50">chec..</text></g><g><title>region_scope_tree (1,109,097 samples, 0.69%)</title><rect x="62.4782%" y="101" width="0.6860%" height="15" fill="rgb(211,96,35)"/><text x="62.7282%" y="111.50"></text></g><g><title>evaluate_obligation (1,529,305 samples, 0.95%)</title><rect x="65.0342%" y="101" width="0.9458%" height="15" fill="rgb(253,215,40)"/><text x="65.2842%" y="111.50"></text></g><g><title>param_env (594,604 samples, 0.37%)</title><rect x="66.0641%" y="101" width="0.3677%" height="15" fill="rgb(211,81,21)"/><text x="66.3141%" y="111.50"></text></g><g><title>check_item_well_formed (5,541,330 samples, 3.43%)</title><rect x="63.1641%" y="117" width="3.4272%" height="15" fill="rgb(208,190,38)"/><text x="63.4141%" y="127.50">che..</text></g><g><title>analysis (106,985,488 samples, 66.17%)</title><rect x="0.5325%" y="165" width="66.1680%" height="15" fill="rgb(235,213,38)"/><text x="0.7825%" y="175.50">analysis</text></g><g><title>type_check_crate (67,521,499 samples, 41.76%)</title><rect x="24.9400%" y="149" width="41.7604%" height="15" fill="rgb(237,122,38)"/><text x="25.1900%" y="159.50">type_check_crate</text></g><g><title>wf_checking (12,415,207 samples, 7.68%)</title><rect x="59.0220%" y="133" width="7.6785%" height="15" fill="rgb(244,218,35)"/><text x="59.2720%" y="143.50">wf_checking</text></g><g><title>check_trait_item_well_formed (176,482 samples, 0.11%)</title><rect x="66.5913%" y="117" width="0.1091%" height="15" fill="rgb(240,68,47)"/><text x="66.8413%" y="127.50"></text></g><g><title>codegen_crate (383,164 samples, 0.24%)</title><rect x="66.7074%" y="165" width="0.2370%" height="15" fill="rgb(210,16,53)"/><text x="66.9574%" y="175.50"></text></g><g><title>metadata_load_macro (279,703 samples, 0.17%)</title><rect x="85.7496%" y="117" width="0.1730%" height="15" fill="rgb(235,124,12)"/><text x="85.9996%" y="127.50"></text></g><g><title>metadata_register_crate (2,617,118 samples, 1.62%)</title><rect x="85.9226%" y="117" width="1.6186%" height="15" fill="rgb(224,169,11)"/><text x="86.1726%" y="127.50"></text></g><g><title>metadata_register_crate (948,651 samples, 0.59%)</title><rect x="86.9545%" y="101" width="0.5867%" height="15" fill="rgb(250,166,2)"/><text x="87.2045%" y="111.50"></text></g><g><title>macro_expand_crate (32,957,626 samples, 20.38%)</title><rect x="67.2801%" y="149" width="20.3835%" height="15" fill="rgb(242,216,29)"/><text x="67.5301%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (32,938,646 samples, 20.37%)</title><rect x="67.2919%" y="133" width="20.3718%" height="15" fill="rgb(230,116,27)"/><text x="67.5419%" y="143.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (197,962 samples, 0.12%)</title><rect x="87.5412%" y="117" width="0.1224%" height="15" fill="rgb(228,99,48)"/><text x="87.7912%" y="127.50"></text></g><g><title>late_resolve_crate (3,582,470 samples, 2.22%)</title><rect x="87.8456%" y="133" width="2.2157%" height="15" fill="rgb(253,11,6)"/><text x="88.0956%" y="143.50">l..</text></g><g><title>configure_and_expand (37,539,767 samples, 23.22%)</title><rect x="66.9444%" y="165" width="23.2175%" height="15" fill="rgb(247,143,39)"/><text x="67.1944%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (3,943,844 samples, 2.44%)</title><rect x="87.7226%" y="149" width="2.4392%" height="15" fill="rgb(236,97,10)"/><text x="87.9726%" y="159.50">re..</text></g><g><title>drop_ast (285,113 samples, 0.18%)</title><rect x="90.1618%" y="165" width="0.1763%" height="15" fill="rgb(233,208,19)"/><text x="90.4118%" y="175.50"></text></g><g><title>early_lint_checks (903,340 samples, 0.56%)</title><rect x="90.3465%" y="165" width="0.5587%" height="15" fill="rgb(216,164,2)"/><text x="90.5965%" y="175.50"></text></g><g><title>free_global_ctxt (3,489,039 samples, 2.16%)</title><rect x="90.9052%" y="165" width="2.1579%" height="15" fill="rgb(220,129,5)"/><text x="91.1552%" y="175.50">f..</text></g><g><title>generate_crate_metadata (1,815,280 samples, 1.12%)</title><rect x="93.0630%" y="165" width="1.1227%" height="15" fill="rgb(242,17,10)"/><text x="93.3130%" y="175.50"></text></g><g><title>hir_lowering (6,848,916 samples, 4.24%)</title><rect x="94.1858%" y="165" width="4.2359%" height="15" fill="rgb(242,107,0)"/><text x="94.4358%" y="175.50">hir_l..</text></g><g><title>parse_crate (988,411 samples, 0.61%)</title><rect x="98.4559%" y="165" width="0.6113%" height="15" fill="rgb(251,28,31)"/><text x="98.7059%" y="175.50"></text></g><g><title>prepare_outputs (188,392 samples, 0.12%)</title><rect x="99.0729%" y="165" width="0.1165%" height="15" fill="rgb(233,223,10)"/><text x="99.3229%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (879,690 samples, 0.54%)</title><rect x="99.1894%" y="165" width="0.5441%" height="15" fill="rgb(215,21,27)"/><text x="99.4394%" y="175.50"></text></g><g><title>all (161,687,714 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (161,687,714 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (345,284 samples, 0.21%)</title><rect x="99.7865%" y="165" width="0.2135%" height="15" fill="rgb(226,81,46)"/><text x="100.0365%" y="175.50"></text></g></svg></svg>