<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (153,841 samples, 0.15%)</title><rect x="9.5943%" y="101" width="0.1482%" height="15" fill="rgb(227,0,7)"/><text x="9.8443%" y="111.50"></text></g><g><title>item_attrs (178,952 samples, 0.17%)</title><rect x="10.0993%" y="69" width="0.1724%" height="15" fill="rgb(217,0,24)"/><text x="10.3493%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (172,802 samples, 0.17%)</title><rect x="10.1053%" y="53" width="0.1665%" height="15" fill="rgb(221,193,54)"/><text x="10.3553%" y="63.50"></text></g><g><title>codegen_fn_attrs (260,164 samples, 0.25%)</title><rect x="10.0358%" y="85" width="0.2506%" height="15" fill="rgb(248,212,6)"/><text x="10.2858%" y="95.50"></text></g><g><title>adt_drop_tys (144,453 samples, 0.14%)</title><rect x="12.1325%" y="53" width="0.1392%" height="15" fill="rgb(208,68,35)"/><text x="12.3825%" y="63.50"></text></g><g><title>needs_drop_raw (946,589 samples, 0.91%)</title><rect x="12.0567%" y="69" width="0.9119%" height="15" fill="rgb(232,128,0)"/><text x="12.3067%" y="79.50"></text></g><g><title>is_copy_raw (723,465 samples, 0.70%)</title><rect x="12.2716%" y="53" width="0.6969%" height="15" fill="rgb(207,160,47)"/><text x="12.5216%" y="63.50"></text></g><g><title>evaluate_obligation (620,955 samples, 0.60%)</title><rect x="12.3704%" y="37" width="0.5982%" height="15" fill="rgb(228,23,34)"/><text x="12.6204%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (116,791 samples, 0.11%)</title><rect x="13.0554%" y="53" width="0.1125%" height="15" fill="rgb(218,30,26)"/><text x="13.3054%" y="63.50"></text></g><g><title>specialization_graph_of (151,452 samples, 0.15%)</title><rect x="13.1877%" y="53" width="0.1459%" height="15" fill="rgb(220,122,19)"/><text x="13.4377%" y="63.50"></text></g><g><title>resolve_instance (413,805 samples, 0.40%)</title><rect x="12.9685%" y="69" width="0.3986%" height="15" fill="rgb(250,228,42)"/><text x="13.2185%" y="79.50"></text></g><g><title>thir_body (670,058 samples, 0.65%)</title><rect x="13.3789%" y="69" width="0.6455%" height="15" fill="rgb(240,193,28)"/><text x="13.6289%" y="79.50"></text></g><g><title>mir_const (5,092,109 samples, 4.91%)</title><rect x="9.1265%" y="117" width="4.9053%" height="15" fill="rgb(216,20,37)"/><text x="9.3765%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (4,452,641 samples, 4.29%)</title><rect x="9.7425%" y="101" width="4.2893%" height="15" fill="rgb(206,188,39)"/><text x="9.9925%" y="111.50">unsaf..</text></g><g><title>mir_built (3,888,034 samples, 3.75%)</title><rect x="10.2864%" y="85" width="3.7454%" height="15" fill="rgb(217,207,13)"/><text x="10.5364%" y="95.50">mir_..</text></g><g><title>mir_promoted (5,735,467 samples, 5.53%)</title><rect x="8.5945%" y="133" width="5.5250%" height="15" fill="rgb(231,73,38)"/><text x="8.8445%" y="143.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (267,894 samples, 0.26%)</title><rect x="14.1201%" y="133" width="0.2581%" height="15" fill="rgb(225,20,46)"/><text x="14.3701%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (287,131 samples, 0.28%)</title><rect x="14.3782%" y="133" width="0.2766%" height="15" fill="rgb(210,31,41)"/><text x="14.6282%" y="143.50"></text></g><g><title>normalize_projection_ty (191,570 samples, 0.18%)</title><rect x="14.4702%" y="117" width="0.1845%" height="15" fill="rgb(221,200,47)"/><text x="14.7202%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,543,317 samples, 1.49%)</title><rect x="14.7133%" y="133" width="1.4867%" height="15" fill="rgb(226,26,5)"/><text x="14.9633%" y="143.50"></text></g><g><title>MIR_borrow_checking (15,657,186 samples, 15.08%)</title><rect x="1.1328%" y="165" width="15.0827%" height="15" fill="rgb(249,33,26)"/><text x="1.3828%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,606,655 samples, 15.03%)</title><rect x="1.1814%" y="149" width="15.0340%" height="15" fill="rgb(235,183,28)"/><text x="1.4314%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (132,532 samples, 0.13%)</title><rect x="16.2154%" y="165" width="0.1277%" height="15" fill="rgb(221,5,38)"/><text x="16.4654%" y="175.50"></text></g><g><title>hir_module_items (261,682 samples, 0.25%)</title><rect x="16.3431%" y="165" width="0.2521%" height="15" fill="rgb(247,18,42)"/><text x="16.5931%" y="175.50"></text></g><g><title>get_lang_items (124,971 samples, 0.12%)</title><rect x="17.0404%" y="117" width="0.1204%" height="15" fill="rgb(241,131,45)"/><text x="17.2904%" y="127.50"></text></g><g><title>codegen_fn_attrs (154,061 samples, 0.15%)</title><rect x="17.3122%" y="101" width="0.1484%" height="15" fill="rgb(249,31,29)"/><text x="17.5622%" y="111.50"></text></g><g><title>should_inherit_track_caller (318,442 samples, 0.31%)</title><rect x="17.1607%" y="117" width="0.3068%" height="15" fill="rgb(225,111,53)"/><text x="17.4107%" y="127.50"></text></g><g><title>codegen_fn_attrs (572,245 samples, 0.55%)</title><rect x="16.9460%" y="133" width="0.5512%" height="15" fill="rgb(238,160,17)"/><text x="17.1960%" y="143.50"></text></g><g><title>check_mod_attrs (898,020 samples, 0.87%)</title><rect x="16.6324%" y="149" width="0.8651%" height="15" fill="rgb(214,148,48)"/><text x="16.8824%" y="159.50"></text></g><g><title>check_mod_const_bodies (161,072 samples, 0.16%)</title><rect x="17.4975%" y="149" width="0.1552%" height="15" fill="rgb(232,36,49)"/><text x="17.7475%" y="159.50"></text></g><g><title>check_mod_loops (118,402 samples, 0.11%)</title><rect x="17.6527%" y="149" width="0.1141%" height="15" fill="rgb(209,103,24)"/><text x="17.9027%" y="159.50"></text></g><g><title>lookup_deprecation_entry (224,022 samples, 0.22%)</title><rect x="18.0410%" y="133" width="0.2158%" height="15" fill="rgb(229,88,8)"/><text x="18.2910%" y="143.50"></text></g><g><title>stability_index (133,002 samples, 0.13%)</title><rect x="18.1287%" y="117" width="0.1281%" height="15" fill="rgb(213,181,19)"/><text x="18.3787%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (645,876 samples, 0.62%)</title><rect x="17.7865%" y="149" width="0.6222%" height="15" fill="rgb(254,191,54)"/><text x="18.0365%" y="159.50"></text></g><g><title>misc_checking_1 (1,949,382 samples, 1.88%)</title><rect x="16.5955%" y="165" width="1.8779%" height="15" fill="rgb(241,83,37)"/><text x="16.8455%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (318,394 samples, 0.31%)</title><rect x="18.4749%" y="149" width="0.3067%" height="15" fill="rgb(233,36,39)"/><text x="18.7249%" y="159.50"></text></g><g><title>check_mod_liveness (247,923 samples, 0.24%)</title><rect x="18.5428%" y="133" width="0.2388%" height="15" fill="rgb(226,3,54)"/><text x="18.7928%" y="143.50"></text></g><g><title>misc_checking_2 (726,858 samples, 0.70%)</title><rect x="18.4734%" y="165" width="0.7002%" height="15" fill="rgb(245,192,40)"/><text x="18.7234%" y="175.50"></text></g><g><title>match_checking (406,884 samples, 0.39%)</title><rect x="18.7816%" y="149" width="0.3920%" height="15" fill="rgb(238,167,29)"/><text x="19.0316%" y="159.50"></text></g><g><title>check_match (391,094 samples, 0.38%)</title><rect x="18.7968%" y="133" width="0.3767%" height="15" fill="rgb(232,182,51)"/><text x="19.0468%" y="143.50"></text></g><g><title>check_private_in_public (122,751 samples, 0.12%)</title><rect x="19.1832%" y="149" width="0.1182%" height="15" fill="rgb(231,60,39)"/><text x="19.4332%" y="159.50"></text></g><g><title>death_checking (276,253 samples, 0.27%)</title><rect x="19.3015%" y="149" width="0.2661%" height="15" fill="rgb(208,69,12)"/><text x="19.5515%" y="159.50"></text></g><g><title>eval_to_const_value_raw (174,082 samples, 0.17%)</title><rect x="20.1571%" y="117" width="0.1677%" height="15" fill="rgb(235,93,37)"/><text x="20.4071%" y="127.50"></text></g><g><title>eval_to_const_value_raw (171,582 samples, 0.17%)</title><rect x="20.1595%" y="101" width="0.1653%" height="15" fill="rgb(213,116,39)"/><text x="20.4095%" y="111.50"></text></g><g><title>eval_to_allocation_raw (166,242 samples, 0.16%)</title><rect x="20.1646%" y="85" width="0.1601%" height="15" fill="rgb(222,207,29)"/><text x="20.4146%" y="95.50"></text></g><g><title>param_env (120,391 samples, 0.12%)</title><rect x="20.3248%" y="117" width="0.1160%" height="15" fill="rgb(206,96,30)"/><text x="20.5748%" y="127.50"></text></g><g><title>crate_lints (1,954,602 samples, 1.88%)</title><rect x="19.5691%" y="133" width="1.8829%" height="15" fill="rgb(218,138,4)"/><text x="19.8191%" y="143.50">c..</text></g><g><title>type_of (1,041,163 samples, 1.00%)</title><rect x="20.4490%" y="117" width="1.0030%" height="15" fill="rgb(250,191,14)"/><text x="20.6990%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (811,993 samples, 0.78%)</title><rect x="20.6698%" y="101" width="0.7822%" height="15" fill="rgb(239,60,40)"/><text x="20.9198%" y="111.50"></text></g><g><title>lint_checking (2,385,397 samples, 2.30%)</title><rect x="19.5676%" y="149" width="2.2979%" height="15" fill="rgb(206,27,48)"/><text x="19.8176%" y="159.50">l..</text></g><g><title>module_lints (429,225 samples, 0.41%)</title><rect x="21.4520%" y="133" width="0.4135%" height="15" fill="rgb(225,35,8)"/><text x="21.7020%" y="143.50"></text></g><g><title>lint_mod (425,045 samples, 0.41%)</title><rect x="21.4560%" y="117" width="0.4094%" height="15" fill="rgb(250,213,24)"/><text x="21.7060%" y="127.50"></text></g><g><title>layout_of (142,061 samples, 0.14%)</title><rect x="21.7286%" y="101" width="0.1368%" height="15" fill="rgb(247,123,22)"/><text x="21.9786%" y="111.50"></text></g><g><title>layout_of (119,251 samples, 0.11%)</title><rect x="21.7506%" y="85" width="0.1149%" height="15" fill="rgb(231,138,38)"/><text x="22.0006%" y="95.50"></text></g><g><title>privacy_access_levels (165,242 samples, 0.16%)</title><rect x="21.8655%" y="149" width="0.1592%" height="15" fill="rgb(231,145,46)"/><text x="22.1155%" y="159.50"></text></g><g><title>privacy_checking_modules (570,127 samples, 0.55%)</title><rect x="22.0247%" y="149" width="0.5492%" height="15" fill="rgb(251,118,11)"/><text x="22.2747%" y="159.50"></text></g><g><title>check_mod_privacy (566,907 samples, 0.55%)</title><rect x="22.0278%" y="133" width="0.5461%" height="15" fill="rgb(217,147,25)"/><text x="22.2778%" y="143.50"></text></g><g><title>misc_checking_3 (3,546,020 samples, 3.42%)</title><rect x="19.1736%" y="165" width="3.4159%" height="15" fill="rgb(247,81,37)"/><text x="19.4236%" y="175.50">mis..</text></g><g><title>impl_trait_ref (269,384 samples, 0.26%)</title><rect x="22.9150%" y="69" width="0.2595%" height="15" fill="rgb(209,12,38)"/><text x="23.1650%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (232,852 samples, 0.22%)</title><rect x="22.9502%" y="53" width="0.2243%" height="15" fill="rgb(227,1,9)"/><text x="23.2002%" y="63.50"></text></g><g><title>adt_destructor (538,536 samples, 0.52%)</title><rect x="22.6977%" y="117" width="0.5188%" height="15" fill="rgb(248,47,43)"/><text x="22.9477%" y="127.50"></text></g><g><title>coherent_trait (534,256 samples, 0.51%)</title><rect x="22.7018%" y="101" width="0.5147%" height="15" fill="rgb(221,10,30)"/><text x="22.9518%" y="111.50"></text></g><g><title>specialization_graph_of (530,446 samples, 0.51%)</title><rect x="22.7055%" y="85" width="0.5110%" height="15" fill="rgb(210,229,1)"/><text x="22.9555%" y="95.50"></text></g><g><title>is_copy_raw (371,345 samples, 0.36%)</title><rect x="23.2165%" y="117" width="0.3577%" height="15" fill="rgb(222,148,37)"/><text x="23.4665%" y="127.50"></text></g><g><title>evaluate_obligation (322,974 samples, 0.31%)</title><rect x="23.2631%" y="101" width="0.3111%" height="15" fill="rgb(234,67,33)"/><text x="23.5131%" y="111.50"></text></g><g><title>impl_parent (2,827,576 samples, 2.72%)</title><rect x="28.5186%" y="101" width="2.7238%" height="15" fill="rgb(247,98,35)"/><text x="28.7686%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,553,187 samples, 1.50%)</title><rect x="29.7462%" y="85" width="1.4962%" height="15" fill="rgb(247,138,52)"/><text x="29.9962%" y="95.50"></text></g><g><title>impl_trait_ref (7,743,850 samples, 7.46%)</title><rect x="31.2424%" y="101" width="7.4597%" height="15" fill="rgb(213,79,30)"/><text x="31.4924%" y="111.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,506,225 samples, 6.27%)</title><rect x="32.4346%" y="85" width="6.2675%" height="15" fill="rgb(246,177,23)"/><text x="32.6846%" y="95.50">metadata..</text></g><g><title>coherent_trait (17,688,740 samples, 17.04%)</title><rect x="22.6470%" y="133" width="17.0397%" height="15" fill="rgb(230,62,27)"/><text x="22.8970%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (16,627,018 samples, 16.02%)</title><rect x="23.6698%" y="117" width="16.0169%" height="15" fill="rgb(216,154,8)"/><text x="23.9198%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,020,331 samples, 0.98%)</title><rect x="38.7038%" y="101" width="0.9829%" height="15" fill="rgb(244,35,45)"/><text x="38.9538%" y="111.50"></text></g><g><title>implementations_of_trait (242,412 samples, 0.23%)</title><rect x="39.4532%" y="85" width="0.2335%" height="15" fill="rgb(251,115,12)"/><text x="39.7032%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (194,392 samples, 0.19%)</title><rect x="39.4994%" y="69" width="0.1873%" height="15" fill="rgb(240,54,50)"/><text x="39.7494%" y="79.50"></text></g><g><title>coherence_checking (17,769,010 samples, 17.12%)</title><rect x="22.6266%" y="149" width="17.1170%" height="15" fill="rgb(233,84,52)"/><text x="22.8766%" y="159.50">coherence_checking</text></g><g><title>associated_item (402,725 samples, 0.39%)</title><rect x="55.4062%" y="85" width="0.3879%" height="15" fill="rgb(207,117,47)"/><text x="55.6562%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (326,575 samples, 0.31%)</title><rect x="55.4796%" y="69" width="0.3146%" height="15" fill="rgb(249,43,39)"/><text x="55.7296%" y="79.50"></text></g><g><title>associated_items (559,248 samples, 0.54%)</title><rect x="55.2756%" y="101" width="0.5387%" height="15" fill="rgb(209,38,44)"/><text x="55.5256%" y="111.50"></text></g><g><title>adt_dtorck_constraint (129,062 samples, 0.12%)</title><rect x="56.1968%" y="53" width="0.1243%" height="15" fill="rgb(236,212,23)"/><text x="56.4468%" y="63.50"></text></g><g><title>adt_dtorck_constraint (147,302 samples, 0.14%)</title><rect x="56.1840%" y="69" width="0.1419%" height="15" fill="rgb(242,79,21)"/><text x="56.4340%" y="79.50"></text></g><g><title>dropck_outlives (512,794 samples, 0.49%)</title><rect x="55.8580%" y="101" width="0.4940%" height="15" fill="rgb(211,96,35)"/><text x="56.1080%" y="111.50"></text></g><g><title>adt_dtorck_constraint (291,133 samples, 0.28%)</title><rect x="56.0715%" y="85" width="0.2805%" height="15" fill="rgb(253,215,40)"/><text x="56.3215%" y="95.50"></text></g><g><title>adt_sized_constraint (131,230 samples, 0.13%)</title><rect x="57.1802%" y="85" width="0.1264%" height="15" fill="rgb(211,81,21)"/><text x="57.4302%" y="95.50"></text></g><g><title>predicates_of (112,881 samples, 0.11%)</title><rect x="57.4101%" y="85" width="0.1087%" height="15" fill="rgb(208,190,38)"/><text x="57.6601%" y="95.50"></text></g><g><title>trait_impls_of (335,282 samples, 0.32%)</title><rect x="57.5542%" y="85" width="0.3230%" height="15" fill="rgb(235,213,38)"/><text x="57.8042%" y="95.50"></text></g><g><title>implementations_of_trait (116,140 samples, 0.11%)</title><rect x="57.7653%" y="69" width="0.1119%" height="15" fill="rgb(237,122,38)"/><text x="58.0153%" y="79.50"></text></g><g><title>evaluate_obligation (1,587,466 samples, 1.53%)</title><rect x="56.3519%" y="101" width="1.5292%" height="15" fill="rgb(244,218,35)"/><text x="56.6019%" y="111.50"></text></g><g><title>fn_sig (127,270 samples, 0.12%)</title><rect x="57.9161%" y="101" width="0.1226%" height="15" fill="rgb(240,68,47)"/><text x="58.1661%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (112,500 samples, 0.11%)</title><rect x="57.9304%" y="85" width="0.1084%" height="15" fill="rgb(210,16,53)"/><text x="58.1804%" y="95.50"></text></g><g><title>generics_of (854,819 samples, 0.82%)</title><rect x="58.0387%" y="101" width="0.8235%" height="15" fill="rgb(235,124,12)"/><text x="58.2887%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (671,128 samples, 0.65%)</title><rect x="58.2157%" y="85" width="0.6465%" height="15" fill="rgb(224,169,11)"/><text x="58.4657%" y="95.50"></text></g><g><title>item_attrs (163,263 samples, 0.16%)</title><rect x="59.0091%" y="101" width="0.1573%" height="15" fill="rgb(250,166,2)"/><text x="59.2591%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (155,673 samples, 0.15%)</title><rect x="59.0165%" y="85" width="0.1500%" height="15" fill="rgb(242,216,29)"/><text x="59.2665%" y="95.50"></text></g><g><title>evaluate_obligation (137,942 samples, 0.13%)</title><rect x="59.3328%" y="85" width="0.1329%" height="15" fill="rgb(230,116,27)"/><text x="59.5828%" y="95.50"></text></g><g><title>method_autoderef_steps (246,972 samples, 0.24%)</title><rect x="59.2370%" y="101" width="0.2379%" height="15" fill="rgb(228,99,48)"/><text x="59.4870%" y="111.50"></text></g><g><title>predicates_of (335,703 samples, 0.32%)</title><rect x="59.5591%" y="101" width="0.3234%" height="15" fill="rgb(253,11,6)"/><text x="59.8091%" y="111.50"></text></g><g><title>predicates_defined_on (229,323 samples, 0.22%)</title><rect x="59.6616%" y="85" width="0.2209%" height="15" fill="rgb(247,143,39)"/><text x="59.9116%" y="95.50"></text></g><g><title>associated_item (108,051 samples, 0.10%)</title><rect x="60.8040%" y="69" width="0.1041%" height="15" fill="rgb(236,97,10)"/><text x="61.0540%" y="79.50"></text></g><g><title>associated_items (165,871 samples, 0.16%)</title><rect x="60.7554%" y="85" width="0.1598%" height="15" fill="rgb(233,208,19)"/><text x="61.0054%" y="95.50"></text></g><g><title>typeck (1,087,853 samples, 1.05%)</title><rect x="60.1434%" y="101" width="1.0479%" height="15" fill="rgb(216,164,2)"/><text x="60.3934%" y="111.50"></text></g><g><title>item_bodies_checking (22,269,801 samples, 21.45%)</title><rect x="39.7907%" y="149" width="21.4526%" height="15" fill="rgb(220,129,5)"/><text x="40.0407%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,266,761 samples, 21.45%)</title><rect x="39.7936%" y="133" width="21.4497%" height="15" fill="rgb(242,17,10)"/><text x="40.0436%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (22,230,851 samples, 21.42%)</title><rect x="39.8282%" y="117" width="21.4151%" height="15" fill="rgb(242,107,0)"/><text x="40.0782%" y="127.50">typeck</text></g><g><title>item_types_checking (448,885 samples, 0.43%)</title><rect x="61.2434%" y="149" width="0.4324%" height="15" fill="rgb(251,28,31)"/><text x="61.4934%" y="159.50"></text></g><g><title>check_mod_item_types (444,835 samples, 0.43%)</title><rect x="61.2473%" y="133" width="0.4285%" height="15" fill="rgb(233,223,10)"/><text x="61.4973%" y="143.50"></text></g><g><title>typeck (118,621 samples, 0.11%)</title><rect x="61.5615%" y="117" width="0.1143%" height="15" fill="rgb(215,21,27)"/><text x="61.8115%" y="127.50"></text></g><g><title>fn_sig (594,438 samples, 0.57%)</title><rect x="62.0604%" y="117" width="0.5726%" height="15" fill="rgb(232,23,21)"/><text x="62.3104%" y="127.50"></text></g><g><title>type_of (109,310 samples, 0.11%)</title><rect x="62.5277%" y="101" width="0.1053%" height="15" fill="rgb(244,5,23)"/><text x="62.7777%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (104,490 samples, 0.10%)</title><rect x="62.5323%" y="85" width="0.1007%" height="15" fill="rgb(226,81,46)"/><text x="62.7823%" y="95.50"></text></g><g><title>is_late_bound_map (579,076 samples, 0.56%)</title><rect x="62.8048%" y="101" width="0.5578%" height="15" fill="rgb(247,70,30)"/><text x="63.0548%" y="111.50"></text></g><g><title>resolve_lifetimes (550,976 samples, 0.53%)</title><rect x="62.8318%" y="85" width="0.5308%" height="15" fill="rgb(212,68,19)"/><text x="63.0818%" y="95.50"></text></g><g><title>lint_levels (216,712 samples, 0.21%)</title><rect x="63.1538%" y="69" width="0.2088%" height="15" fill="rgb(240,187,13)"/><text x="63.4038%" y="79.50"></text></g><g><title>generics_of (874,269 samples, 0.84%)</title><rect x="62.6330%" y="117" width="0.8422%" height="15" fill="rgb(223,113,26)"/><text x="62.8830%" y="127.50"></text></g><g><title>explicit_predicates_of (650,208 samples, 0.63%)</title><rect x="63.7262%" y="85" width="0.6263%" height="15" fill="rgb(206,192,2)"/><text x="63.9762%" y="95.50"></text></g><g><title>predicates_of (1,197,714 samples, 1.15%)</title><rect x="63.5506%" y="117" width="1.1538%" height="15" fill="rgb(241,108,4)"/><text x="63.8006%" y="127.50"></text></g><g><title>predicates_defined_on (1,120,023 samples, 1.08%)</title><rect x="63.6254%" y="101" width="1.0789%" height="15" fill="rgb(247,173,49)"/><text x="63.8754%" y="111.50"></text></g><g><title>inferred_outlives_of (365,154 samples, 0.35%)</title><rect x="64.3526%" y="85" width="0.3518%" height="15" fill="rgb(224,114,35)"/><text x="64.6026%" y="95.50"></text></g><g><title>inferred_outlives_crate (330,124 samples, 0.32%)</title><rect x="64.3863%" y="69" width="0.3180%" height="15" fill="rgb(245,159,27)"/><text x="64.6363%" y="79.50"></text></g><g><title>type_of (176,652 samples, 0.17%)</title><rect x="64.5342%" y="53" width="0.1702%" height="15" fill="rgb(245,172,44)"/><text x="64.7842%" y="63.50"></text></g><g><title>type_collecting (3,390,708 samples, 3.27%)</title><rect x="61.6774%" y="149" width="3.2663%" height="15" fill="rgb(236,23,11)"/><text x="61.9274%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (3,373,208 samples, 3.25%)</title><rect x="61.6943%" y="133" width="3.2494%" height="15" fill="rgb(205,117,38)"/><text x="61.9443%" y="143.50">col..</text></g><g><title>type_of (248,484 samples, 0.24%)</title><rect x="64.7043%" y="117" width="0.2394%" height="15" fill="rgb(237,72,25)"/><text x="64.9543%" y="127.50"></text></g><g><title>adt_def (118,202 samples, 0.11%)</title><rect x="66.0288%" y="85" width="0.1139%" height="15" fill="rgb(244,70,9)"/><text x="66.2788%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (116,622 samples, 0.11%)</title><rect x="66.0304%" y="69" width="0.1123%" height="15" fill="rgb(217,125,39)"/><text x="66.2804%" y="79.50"></text></g><g><title>adt_sized_constraint (122,791 samples, 0.12%)</title><rect x="66.1427%" y="85" width="0.1183%" height="15" fill="rgb(235,36,10)"/><text x="66.3927%" y="95.50"></text></g><g><title>adt_sized_constraint (252,543 samples, 0.24%)</title><rect x="66.0211%" y="101" width="0.2433%" height="15" fill="rgb(251,123,47)"/><text x="66.2711%" y="111.50"></text></g><g><title>evaluate_obligation (436,445 samples, 0.42%)</title><rect x="65.8730%" y="117" width="0.4204%" height="15" fill="rgb(221,13,13)"/><text x="66.1230%" y="127.50"></text></g><g><title>implied_outlives_bounds (125,881 samples, 0.12%)</title><rect x="66.2935%" y="117" width="0.1213%" height="15" fill="rgb(238,131,9)"/><text x="66.5435%" y="127.50"></text></g><g><title>evaluate_obligation (136,272 samples, 0.13%)</title><rect x="66.5263%" y="101" width="0.1313%" height="15" fill="rgb(211,50,8)"/><text x="66.7763%" y="111.50"></text></g><g><title>object_safety_violations (443,925 samples, 0.43%)</title><rect x="66.4147%" y="117" width="0.4276%" height="15" fill="rgb(245,182,24)"/><text x="66.6647%" y="127.50"></text></g><g><title>param_env (108,141 samples, 0.10%)</title><rect x="66.8424%" y="117" width="0.1042%" height="15" fill="rgb(242,14,37)"/><text x="67.0924%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,232,322 samples, 2.15%)</title><rect x="65.0516%" y="133" width="2.1504%" height="15" fill="rgb(246,228,12)"/><text x="65.3016%" y="143.50">c..</text></g><g><title>region_scope_tree (228,862 samples, 0.22%)</title><rect x="66.9815%" y="117" width="0.2205%" height="15" fill="rgb(213,55,15)"/><text x="67.2315%" y="127.50"></text></g><g><title>param_env (135,553 samples, 0.13%)</title><rect x="68.0379%" y="117" width="0.1306%" height="15" fill="rgb(209,9,3)"/><text x="68.2879%" y="127.50"></text></g><g><title>analysis (70,238,202 samples, 67.66%)</title><rect x="0.6851%" y="181" width="67.6609%" height="15" fill="rgb(230,59,30)"/><text x="0.9351%" y="191.50">analysis</text></g><g><title>type_check_crate (47,499,446 samples, 45.76%)</title><rect x="22.5895%" y="165" width="45.7565%" height="15" fill="rgb(209,121,21)"/><text x="22.8395%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,529,410 samples, 3.40%)</title><rect x="64.9461%" y="149" width="3.3999%" height="15" fill="rgb(220,109,13)"/><text x="65.1961%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (1,187,577 samples, 1.14%)</title><rect x="67.2020%" y="133" width="1.1440%" height="15" fill="rgb(232,18,1)"/><text x="67.4520%" y="143.50"></text></g><g><title>codegen_crate (404,294 samples, 0.39%)</title><rect x="68.3561%" y="181" width="0.3895%" height="15" fill="rgb(215,41,42)"/><text x="68.6061%" y="191.50"></text></g><g><title>AST_validation (140,351 samples, 0.14%)</title><rect x="68.9422%" y="165" width="0.1352%" height="15" fill="rgb(224,123,36)"/><text x="69.1922%" y="175.50"></text></g><g><title>metadata_load_macro (171,540 samples, 0.17%)</title><rect x="82.5438%" y="133" width="0.1652%" height="15" fill="rgb(240,125,3)"/><text x="82.7938%" y="143.50"></text></g><g><title>metadata_register_crate (2,331,786 samples, 2.25%)</title><rect x="82.7091%" y="133" width="2.2462%" height="15" fill="rgb(205,98,50)"/><text x="82.9591%" y="143.50">m..</text></g><g><title>metadata_register_crate (872,058 samples, 0.84%)</title><rect x="84.1153%" y="117" width="0.8401%" height="15" fill="rgb(205,185,37)"/><text x="84.3653%" y="127.50"></text></g><g><title>macro_expand_crate (16,421,004 samples, 15.82%)</title><rect x="69.2515%" y="165" width="15.8185%" height="15" fill="rgb(238,207,15)"/><text x="69.5015%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (16,398,374 samples, 15.80%)</title><rect x="69.2733%" y="149" width="15.7967%" height="15" fill="rgb(213,199,42)"/><text x="69.5233%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (118,982 samples, 0.11%)</title><rect x="84.9553%" y="133" width="0.1146%" height="15" fill="rgb(235,201,11)"/><text x="85.2053%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (129,321 samples, 0.12%)</title><rect x="85.0740%" y="165" width="0.1246%" height="15" fill="rgb(207,46,11)"/><text x="85.3240%" y="175.50"></text></g><g><title>finalize_macro_resolutions (143,832 samples, 0.14%)</title><rect x="85.2567%" y="149" width="0.1386%" height="15" fill="rgb(241,35,35)"/><text x="85.5067%" y="159.50"></text></g><g><title>late_resolve_crate (2,743,351 samples, 2.64%)</title><rect x="85.3952%" y="149" width="2.6427%" height="15" fill="rgb(243,32,47)"/><text x="85.6452%" y="159.50">la..</text></g><g><title>configure_and_expand (20,181,517 samples, 19.44%)</title><rect x="68.7456%" y="181" width="19.4410%" height="15" fill="rgb(247,202,23)"/><text x="68.9956%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,101,785 samples, 2.99%)</title><rect x="85.1986%" y="165" width="2.9880%" height="15" fill="rgb(219,102,11)"/><text x="85.4486%" y="175.50">res..</text></g><g><title>drop_ast (269,853 samples, 0.26%)</title><rect x="88.1866%" y="181" width="0.2600%" height="15" fill="rgb(243,110,44)"/><text x="88.4366%" y="191.50"></text></g><g><title>early_lint_checks (573,307 samples, 0.55%)</title><rect x="88.4601%" y="181" width="0.5523%" height="15" fill="rgb(222,74,54)"/><text x="88.7101%" y="191.50"></text></g><g><title>free_global_ctxt (3,330,867 samples, 3.21%)</title><rect x="89.0124%" y="181" width="3.2086%" height="15" fill="rgb(216,99,12)"/><text x="89.2624%" y="191.50">fre..</text></g><g><title>generate_crate_metadata (784,879 samples, 0.76%)</title><rect x="92.2210%" y="181" width="0.7561%" height="15" fill="rgb(226,22,26)"/><text x="92.4710%" y="191.50"></text></g><g><title>hir_lowering (3,918,854 samples, 3.78%)</title><rect x="92.9771%" y="181" width="3.7751%" height="15" fill="rgb(217,163,10)"/><text x="93.2271%" y="191.50">hir_..</text></g><g><title>parse_crate (1,842,931 samples, 1.78%)</title><rect x="96.8011%" y="181" width="1.7753%" height="15" fill="rgb(213,25,53)"/><text x="97.0511%" y="191.50">p..</text></g><g><title>prepare_outputs (276,314 samples, 0.27%)</title><rect x="98.5838%" y="181" width="0.2662%" height="15" fill="rgb(252,105,26)"/><text x="98.8338%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (730,609 samples, 0.70%)</title><rect x="98.8500%" y="181" width="0.7038%" height="15" fill="rgb(220,39,43)"/><text x="99.1000%" y="191.50"></text></g><g><title>setup_global_ctxt (141,472 samples, 0.14%)</title><rect x="99.5650%" y="181" width="0.1363%" height="15" fill="rgb(229,68,48)"/><text x="99.8150%" y="191.50"></text></g><g><title>all (103,809,111 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (103,809,111 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (310,104 samples, 0.30%)</title><rect x="99.7013%" y="181" width="0.2987%" height="15" fill="rgb(229,81,49)"/><text x="99.9513%" y="191.50"></text></g></svg></svg>