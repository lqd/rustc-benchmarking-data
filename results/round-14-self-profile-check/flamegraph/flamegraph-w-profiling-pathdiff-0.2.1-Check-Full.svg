<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (91,471 samples, 0.24%)</title><rect x="7.6419%" y="165" width="0.2387%" height="15" fill="rgb(227,0,7)"/><text x="7.8919%" y="175.50"></text></g><g><title>item_attrs (99,901 samples, 0.26%)</title><rect x="8.1558%" y="133" width="0.2607%" height="15" fill="rgb(217,0,24)"/><text x="8.4058%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,701 samples, 0.25%)</title><rect x="8.1641%" y="117" width="0.2524%" height="15" fill="rgb(221,193,54)"/><text x="8.4141%" y="127.50"></text></g><g><title>codegen_fn_attrs (130,491 samples, 0.34%)</title><rect x="8.0892%" y="149" width="0.3406%" height="15" fill="rgb(248,212,6)"/><text x="8.3392%" y="159.50"></text></g><g><title>is_copy_raw (124,982 samples, 0.33%)</title><rect x="9.5319%" y="101" width="0.3262%" height="15" fill="rgb(208,68,35)"/><text x="9.7819%" y="111.50"></text></g><g><title>evaluate_obligation (110,221 samples, 0.29%)</title><rect x="9.5704%" y="85" width="0.2877%" height="15" fill="rgb(232,128,0)"/><text x="9.8204%" y="95.50"></text></g><g><title>param_env (46,631 samples, 0.12%)</title><rect x="9.8581%" y="101" width="0.1217%" height="15" fill="rgb(207,160,47)"/><text x="10.1081%" y="111.50"></text></g><g><title>adt_drop_tys (204,864 samples, 0.53%)</title><rect x="9.4475%" y="117" width="0.5347%" height="15" fill="rgb(228,23,34)"/><text x="9.6975%" y="127.50"></text></g><g><title>needs_drop_raw (313,515 samples, 0.82%)</title><rect x="9.3838%" y="133" width="0.8183%" height="15" fill="rgb(218,30,26)"/><text x="9.6338%" y="143.50"></text></g><g><title>is_copy_raw (84,230 samples, 0.22%)</title><rect x="9.9822%" y="117" width="0.2198%" height="15" fill="rgb(220,122,19)"/><text x="10.2322%" y="127.50"></text></g><g><title>evaluate_obligation (69,010 samples, 0.18%)</title><rect x="10.0220%" y="101" width="0.1801%" height="15" fill="rgb(250,228,42)"/><text x="10.2720%" y="111.50"></text></g><g><title>impl_parent (222,832 samples, 0.58%)</title><rect x="11.1422%" y="101" width="0.5816%" height="15" fill="rgb(240,193,28)"/><text x="11.3922%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (136,402 samples, 0.36%)</title><rect x="11.3678%" y="85" width="0.3560%" height="15" fill="rgb(216,20,37)"/><text x="11.6178%" y="95.50"></text></g><g><title>specialization_graph_of (1,148,272 samples, 3.00%)</title><rect x="10.3641%" y="117" width="2.9970%" height="15" fill="rgb(206,188,39)"/><text x="10.6141%" y="127.50">spe..</text></g><g><title>impl_trait_ref (627,298 samples, 1.64%)</title><rect x="11.7238%" y="101" width="1.6373%" height="15" fill="rgb(217,207,13)"/><text x="11.9738%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (547,138 samples, 1.43%)</title><rect x="11.9331%" y="85" width="1.4280%" height="15" fill="rgb(231,73,38)"/><text x="12.1831%" y="95.50"></text></g><g><title>resolve_instance (1,215,374 samples, 3.17%)</title><rect x="10.2021%" y="133" width="3.1722%" height="15" fill="rgb(225,20,46)"/><text x="10.4521%" y="143.50">res..</text></g><g><title>thir_body (95,991 samples, 0.25%)</title><rect x="13.3805%" y="133" width="0.2505%" height="15" fill="rgb(210,31,41)"/><text x="13.6305%" y="143.50"></text></g><g><title>mir_const (2,449,558 samples, 6.39%)</title><rect x="7.2433%" y="181" width="6.3934%" height="15" fill="rgb(221,200,47)"/><text x="7.4933%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (2,205,364 samples, 5.76%)</title><rect x="7.8806%" y="165" width="5.7561%" height="15" fill="rgb(226,26,5)"/><text x="8.1306%" y="175.50">unsafet..</text></g><g><title>mir_built (1,994,963 samples, 5.21%)</title><rect x="8.4298%" y="149" width="5.2069%" height="15" fill="rgb(249,33,26)"/><text x="8.6798%" y="159.50">mir_bu..</text></g><g><title>mir_promoted (2,613,020 samples, 6.82%)</title><rect x="6.8312%" y="197" width="6.8201%" height="15" fill="rgb(235,183,28)"/><text x="7.0812%" y="207.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (58,320 samples, 0.15%)</title><rect x="13.6512%" y="197" width="0.1522%" height="15" fill="rgb(221,5,38)"/><text x="13.9012%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (93,982 samples, 0.25%)</title><rect x="13.8034%" y="197" width="0.2453%" height="15" fill="rgb(247,18,42)"/><text x="14.0534%" y="207.50"></text></g><g><title>normalize_projection_ty (57,572 samples, 0.15%)</title><rect x="13.8985%" y="181" width="0.1503%" height="15" fill="rgb(241,131,45)"/><text x="14.1485%" y="191.50"></text></g><g><title>type_op_normalize_predicate (167,852 samples, 0.44%)</title><rect x="14.0487%" y="197" width="0.4381%" height="15" fill="rgb(249,31,29)"/><text x="14.2987%" y="207.50"></text></g><g><title>normalize_projection_ty (100,242 samples, 0.26%)</title><rect x="14.2252%" y="181" width="0.2616%" height="15" fill="rgb(225,111,53)"/><text x="14.4752%" y="191.50"></text></g><g><title>type_op_prove_predicate (492,068 samples, 1.28%)</title><rect x="14.4868%" y="197" width="1.2843%" height="15" fill="rgb(238,160,17)"/><text x="14.7368%" y="207.50"></text></g><g><title>MIR_borrow_checking (5,386,961 samples, 14.06%)</title><rect x="1.7308%" y="229" width="14.0601%" height="15" fill="rgb(214,148,48)"/><text x="1.9808%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (5,382,261 samples, 14.05%)</title><rect x="1.7430%" y="213" width="14.0479%" height="15" fill="rgb(232,36,49)"/><text x="1.9930%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (98,541 samples, 0.26%)</title><rect x="15.7998%" y="229" width="0.2572%" height="15" fill="rgb(209,103,24)"/><text x="16.0498%" y="239.50"></text></g><g><title>get_lang_items (75,691 samples, 0.20%)</title><rect x="16.4663%" y="181" width="0.1976%" height="15" fill="rgb(229,88,8)"/><text x="16.7163%" y="191.50"></text></g><g><title>codegen_fn_attrs (170,562 samples, 0.45%)</title><rect x="16.3165%" y="197" width="0.4452%" height="15" fill="rgb(213,181,19)"/><text x="16.5665%" y="207.50"></text></g><g><title>check_mod_attrs (240,633 samples, 0.63%)</title><rect x="16.1341%" y="213" width="0.6281%" height="15" fill="rgb(254,191,54)"/><text x="16.3841%" y="223.50"></text></g><g><title>lookup_deprecation_entry (57,600 samples, 0.15%)</title><rect x="17.0892%" y="197" width="0.1503%" height="15" fill="rgb(241,83,37)"/><text x="17.3392%" y="207.50"></text></g><g><title>lookup_stability (39,631 samples, 0.10%)</title><rect x="17.2396%" y="197" width="0.1034%" height="15" fill="rgb(233,36,39)"/><text x="17.4896%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (195,302 samples, 0.51%)</title><rect x="16.8952%" y="213" width="0.5097%" height="15" fill="rgb(226,3,54)"/><text x="17.1452%" y="223.50"></text></g><g><title>misc_checking_1 (540,716 samples, 1.41%)</title><rect x="16.0583%" y="229" width="1.4113%" height="15" fill="rgb(245,192,40)"/><text x="16.3083%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (105,641 samples, 0.28%)</title><rect x="17.4737%" y="213" width="0.2757%" height="15" fill="rgb(238,167,29)"/><text x="17.7237%" y="223.50"></text></g><g><title>check_mod_liveness (89,221 samples, 0.23%)</title><rect x="17.5166%" y="197" width="0.2329%" height="15" fill="rgb(232,182,51)"/><text x="17.7666%" y="207.50"></text></g><g><title>misc_checking_2 (249,323 samples, 0.65%)</title><rect x="17.4696%" y="229" width="0.6507%" height="15" fill="rgb(231,60,39)"/><text x="17.7196%" y="239.50"></text></g><g><title>match_checking (142,102 samples, 0.37%)</title><rect x="17.7495%" y="213" width="0.3709%" height="15" fill="rgb(208,69,12)"/><text x="17.9995%" y="223.50"></text></g><g><title>check_match (139,982 samples, 0.37%)</title><rect x="17.7550%" y="197" width="0.3654%" height="15" fill="rgb(235,93,37)"/><text x="18.0050%" y="207.50"></text></g><g><title>death_checking (42,591 samples, 0.11%)</title><rect x="18.1948%" y="213" width="0.1112%" height="15" fill="rgb(213,116,39)"/><text x="18.4448%" y="223.50"></text></g><g><title>crate_lints (93,121 samples, 0.24%)</title><rect x="18.3091%" y="197" width="0.2430%" height="15" fill="rgb(222,207,29)"/><text x="18.5591%" y="207.50"></text></g><g><title>lint_checking (146,582 samples, 0.38%)</title><rect x="18.3060%" y="213" width="0.3826%" height="15" fill="rgb(206,96,30)"/><text x="18.5560%" y="223.50"></text></g><g><title>module_lints (52,241 samples, 0.14%)</title><rect x="18.5522%" y="197" width="0.1364%" height="15" fill="rgb(218,138,4)"/><text x="18.8022%" y="207.50"></text></g><g><title>lint_mod (50,101 samples, 0.13%)</title><rect x="18.5578%" y="181" width="0.1308%" height="15" fill="rgb(250,191,14)"/><text x="18.8078%" y="191.50"></text></g><g><title>privacy_access_levels (48,350 samples, 0.13%)</title><rect x="18.6885%" y="213" width="0.1262%" height="15" fill="rgb(239,60,40)"/><text x="18.9385%" y="223.50"></text></g><g><title>privacy_checking_modules (101,421 samples, 0.26%)</title><rect x="18.8147%" y="213" width="0.2647%" height="15" fill="rgb(206,27,48)"/><text x="19.0647%" y="223.50"></text></g><g><title>check_mod_privacy (100,291 samples, 0.26%)</title><rect x="18.8177%" y="197" width="0.2618%" height="15" fill="rgb(225,35,8)"/><text x="19.0677%" y="207.50"></text></g><g><title>misc_checking_3 (375,664 samples, 0.98%)</title><rect x="18.1204%" y="229" width="0.9805%" height="15" fill="rgb(250,213,24)"/><text x="18.3704%" y="239.50"></text></g><g><title>adt_def (90,251 samples, 0.24%)</title><rect x="31.7089%" y="133" width="0.2356%" height="15" fill="rgb(247,123,22)"/><text x="31.9589%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (84,791 samples, 0.22%)</title><rect x="31.7232%" y="117" width="0.2213%" height="15" fill="rgb(231,138,38)"/><text x="31.9732%" y="127.50"></text></g><g><title>item_attrs (59,371 samples, 0.15%)</title><rect x="31.7895%" y="101" width="0.1550%" height="15" fill="rgb(231,145,46)"/><text x="32.0395%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (56,981 samples, 0.15%)</title><rect x="31.7958%" y="85" width="0.1487%" height="15" fill="rgb(251,118,11)"/><text x="32.0458%" y="95.50"></text></g><g><title>adt_def (64,230 samples, 0.17%)</title><rect x="31.9547%" y="117" width="0.1676%" height="15" fill="rgb(217,147,25)"/><text x="32.2047%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (63,090 samples, 0.16%)</title><rect x="31.9577%" y="101" width="0.1647%" height="15" fill="rgb(247,81,37)"/><text x="32.2077%" y="111.50"></text></g><g><title>item_attrs (52,880 samples, 0.14%)</title><rect x="31.9843%" y="85" width="0.1380%" height="15" fill="rgb(209,12,38)"/><text x="32.2343%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (51,700 samples, 0.13%)</title><rect x="31.9874%" y="69" width="0.1349%" height="15" fill="rgb(227,1,9)"/><text x="32.2374%" y="79.50"></text></g><g><title>adt_sized_constraint (46,240 samples, 0.12%)</title><rect x="32.1223%" y="117" width="0.1207%" height="15" fill="rgb(248,47,43)"/><text x="32.3723%" y="127.50"></text></g><g><title>adt_sized_constraint (120,961 samples, 0.32%)</title><rect x="31.9445%" y="133" width="0.3157%" height="15" fill="rgb(221,10,30)"/><text x="32.1945%" y="143.50"></text></g><g><title>adt_sized_constraint (238,592 samples, 0.62%)</title><rect x="31.6725%" y="149" width="0.6227%" height="15" fill="rgb(210,229,1)"/><text x="31.9225%" y="159.50"></text></g><g><title>associated_item (555,048 samples, 1.45%)</title><rect x="32.9005%" y="133" width="1.4487%" height="15" fill="rgb(222,148,37)"/><text x="33.1505%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (411,064 samples, 1.07%)</title><rect x="33.2763%" y="117" width="1.0729%" height="15" fill="rgb(234,67,33)"/><text x="33.5263%" y="127.50"></text></g><g><title>associated_items (816,759 samples, 2.13%)</title><rect x="32.3090%" y="149" width="2.1318%" height="15" fill="rgb(247,98,35)"/><text x="32.5590%" y="159.50">a..</text></g><g><title>impl_parent (66,470 samples, 0.17%)</title><rect x="35.0295%" y="53" width="0.1735%" height="15" fill="rgb(247,138,52)"/><text x="35.2795%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (45,610 samples, 0.12%)</title><rect x="35.0839%" y="37" width="0.1190%" height="15" fill="rgb(213,79,30)"/><text x="35.3339%" y="47.50"></text></g><g><title>impl_trait_ref (269,674 samples, 0.70%)</title><rect x="35.2029%" y="53" width="0.7039%" height="15" fill="rgb(246,177,23)"/><text x="35.4529%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (249,684 samples, 0.65%)</title><rect x="35.2551%" y="37" width="0.6517%" height="15" fill="rgb(230,62,27)"/><text x="35.5051%" y="47.50"></text></g><g><title>coherent_trait (464,686 samples, 1.21%)</title><rect x="34.7710%" y="85" width="1.2128%" height="15" fill="rgb(216,154,8)"/><text x="35.0210%" y="95.50"></text></g><g><title>specialization_graph_of (461,046 samples, 1.20%)</title><rect x="34.7805%" y="69" width="1.2033%" height="15" fill="rgb(244,35,45)"/><text x="35.0305%" y="79.50"></text></g><g><title>adt_destructor (480,576 samples, 1.25%)</title><rect x="34.7469%" y="117" width="1.2543%" height="15" fill="rgb(251,115,12)"/><text x="34.9969%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (478,336 samples, 1.25%)</title><rect x="34.7528%" y="101" width="1.2485%" height="15" fill="rgb(240,54,50)"/><text x="35.0028%" y="111.50"></text></g><g><title>adt_dtorck_constraint (60,041 samples, 0.16%)</title><rect x="36.1096%" y="69" width="0.1567%" height="15" fill="rgb(233,84,52)"/><text x="36.3596%" y="79.50"></text></g><g><title>adt_dtorck_constraint (68,501 samples, 0.18%)</title><rect x="36.0957%" y="85" width="0.1788%" height="15" fill="rgb(207,117,47)"/><text x="36.3457%" y="95.50"></text></g><g><title>adt_dtorck_constraint (71,681 samples, 0.19%)</title><rect x="36.0890%" y="101" width="0.1871%" height="15" fill="rgb(249,43,39)"/><text x="36.3390%" y="111.50"></text></g><g><title>adt_dtorck_constraint (108,451 samples, 0.28%)</title><rect x="36.0013%" y="117" width="0.2831%" height="15" fill="rgb(209,38,44)"/><text x="36.2513%" y="127.50"></text></g><g><title>dropck_outlives (683,088 samples, 1.78%)</title><rect x="34.5400%" y="149" width="1.7829%" height="15" fill="rgb(236,212,23)"/><text x="34.7900%" y="159.50">d..</text></g><g><title>adt_dtorck_constraint (623,947 samples, 1.63%)</title><rect x="34.6944%" y="133" width="1.6285%" height="15" fill="rgb(242,79,21)"/><text x="34.9444%" y="143.50"></text></g><g><title>adt_def (49,150 samples, 0.13%)</title><rect x="38.1969%" y="117" width="0.1283%" height="15" fill="rgb(211,96,35)"/><text x="38.4469%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (47,870 samples, 0.12%)</title><rect x="38.2002%" y="101" width="0.1249%" height="15" fill="rgb(253,215,40)"/><text x="38.4502%" y="111.50"></text></g><g><title>adt_sized_constraint (56,371 samples, 0.15%)</title><rect x="38.1812%" y="133" width="0.1471%" height="15" fill="rgb(211,81,21)"/><text x="38.4312%" y="143.50"></text></g><g><title>generics_of (40,281 samples, 0.11%)</title><rect x="38.3284%" y="133" width="0.1051%" height="15" fill="rgb(208,190,38)"/><text x="38.5784%" y="143.50"></text></g><g><title>impl_trait_ref (108,950 samples, 0.28%)</title><rect x="38.4920%" y="133" width="0.2844%" height="15" fill="rgb(235,213,38)"/><text x="38.7420%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (93,850 samples, 0.24%)</title><rect x="38.5314%" y="117" width="0.2450%" height="15" fill="rgb(237,122,38)"/><text x="38.7814%" y="127.50"></text></g><g><title>explicit_predicates_of (57,800 samples, 0.15%)</title><rect x="38.9787%" y="101" width="0.1509%" height="15" fill="rgb(244,218,35)"/><text x="39.2287%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (48,380 samples, 0.13%)</title><rect x="39.0033%" y="85" width="0.1263%" height="15" fill="rgb(240,68,47)"/><text x="39.2533%" y="95.50"></text></g><g><title>predicates_of (146,710 samples, 0.38%)</title><rect x="38.7968%" y="133" width="0.3829%" height="15" fill="rgb(210,16,53)"/><text x="39.0468%" y="143.50"></text></g><g><title>predicates_defined_on (102,730 samples, 0.27%)</title><rect x="38.9115%" y="117" width="0.2681%" height="15" fill="rgb(235,124,12)"/><text x="39.1615%" y="127.50"></text></g><g><title>specializes (170,441 samples, 0.44%)</title><rect x="39.1797%" y="133" width="0.4449%" height="15" fill="rgb(224,169,11)"/><text x="39.4297%" y="143.50"></text></g><g><title>param_env (99,490 samples, 0.26%)</title><rect x="39.3649%" y="117" width="0.2597%" height="15" fill="rgb(250,166,2)"/><text x="39.6149%" y="127.50"></text></g><g><title>evaluate_obligation (2,085,795 samples, 5.44%)</title><rect x="36.3229%" y="149" width="5.4440%" height="15" fill="rgb(242,216,29)"/><text x="36.5729%" y="159.50">evaluat..</text></g><g><title>trait_impls_of (817,119 samples, 2.13%)</title><rect x="39.6342%" y="133" width="2.1327%" height="15" fill="rgb(230,116,27)"/><text x="39.8842%" y="143.50">t..</text></g><g><title>implementations_of_trait (235,381 samples, 0.61%)</title><rect x="41.1525%" y="117" width="0.6144%" height="15" fill="rgb(228,99,48)"/><text x="41.4025%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (169,451 samples, 0.44%)</title><rect x="41.3246%" y="101" width="0.4423%" height="15" fill="rgb(253,11,6)"/><text x="41.5746%" y="111.50"></text></g><g><title>fn_sig (148,682 samples, 0.39%)</title><rect x="41.8081%" y="149" width="0.3881%" height="15" fill="rgb(247,143,39)"/><text x="42.0581%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (132,291 samples, 0.35%)</title><rect x="41.8509%" y="133" width="0.3453%" height="15" fill="rgb(236,97,10)"/><text x="42.1009%" y="143.50"></text></g><g><title>generics_of (137,301 samples, 0.36%)</title><rect x="42.1962%" y="149" width="0.3584%" height="15" fill="rgb(233,208,19)"/><text x="42.4462%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (109,611 samples, 0.29%)</title><rect x="42.2685%" y="133" width="0.2861%" height="15" fill="rgb(216,164,2)"/><text x="42.5185%" y="143.50"></text></g><g><title>impl_item_implementor_ids (69,060 samples, 0.18%)</title><rect x="42.5546%" y="149" width="0.1802%" height="15" fill="rgb(220,129,5)"/><text x="42.8046%" y="159.50"></text></g><g><title>associated_items (57,890 samples, 0.15%)</title><rect x="42.5837%" y="133" width="0.1511%" height="15" fill="rgb(242,17,10)"/><text x="42.8337%" y="143.50"></text></g><g><title>impl_trait_ref (144,712 samples, 0.38%)</title><rect x="42.7434%" y="149" width="0.3777%" height="15" fill="rgb(242,107,0)"/><text x="42.9934%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (135,042 samples, 0.35%)</title><rect x="42.7687%" y="133" width="0.3525%" height="15" fill="rgb(251,28,31)"/><text x="43.0187%" y="143.50"></text></g><g><title>item_attrs (65,162 samples, 0.17%)</title><rect x="43.2485%" y="149" width="0.1701%" height="15" fill="rgb(233,223,10)"/><text x="43.4985%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (61,862 samples, 0.16%)</title><rect x="43.2571%" y="133" width="0.1615%" height="15" fill="rgb(215,21,27)"/><text x="43.5071%" y="143.50"></text></g><g><title>evaluate_obligation (208,482 samples, 0.54%)</title><rect x="43.9709%" y="133" width="0.5441%" height="15" fill="rgb(232,23,21)"/><text x="44.2209%" y="143.50"></text></g><g><title>trait_impls_of (39,370 samples, 0.10%)</title><rect x="44.4123%" y="117" width="0.1028%" height="15" fill="rgb(244,5,23)"/><text x="44.6623%" y="127.50"></text></g><g><title>method_autoderef_steps (404,575 samples, 1.06%)</title><rect x="43.5348%" y="149" width="1.0560%" height="15" fill="rgb(226,81,46)"/><text x="43.7848%" y="159.50"></text></g><g><title>explicit_predicates_of (95,142 samples, 0.25%)</title><rect x="45.0707%" y="117" width="0.2483%" height="15" fill="rgb(247,70,30)"/><text x="45.3207%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (74,032 samples, 0.19%)</title><rect x="45.1258%" y="101" width="0.1932%" height="15" fill="rgb(212,68,19)"/><text x="45.3758%" y="111.50"></text></g><g><title>predicates_of (297,863 samples, 0.78%)</title><rect x="44.6488%" y="149" width="0.7774%" height="15" fill="rgb(240,187,13)"/><text x="44.8988%" y="159.50"></text></g><g><title>predicates_defined_on (217,613 samples, 0.57%)</title><rect x="44.8582%" y="133" width="0.5680%" height="15" fill="rgb(223,113,26)"/><text x="45.1082%" y="143.50"></text></g><g><title>inferred_outlives_of (41,070 samples, 0.11%)</title><rect x="45.3190%" y="117" width="0.1072%" height="15" fill="rgb(206,192,2)"/><text x="45.5690%" y="127.50"></text></g><g><title>trait_impls_of (61,870 samples, 0.16%)</title><rect x="45.4906%" y="149" width="0.1615%" height="15" fill="rgb(241,108,4)"/><text x="45.7406%" y="159.50"></text></g><g><title>type_of (78,820 samples, 0.21%)</title><rect x="45.6521%" y="149" width="0.2057%" height="15" fill="rgb(247,173,49)"/><text x="45.9021%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (66,820 samples, 0.17%)</title><rect x="45.6834%" y="133" width="0.1744%" height="15" fill="rgb(224,114,35)"/><text x="45.9334%" y="143.50"></text></g><g><title>item_bodies_checking (10,254,215 samples, 26.76%)</title><rect x="19.2220%" y="213" width="26.7638%" height="15" fill="rgb(245,159,27)"/><text x="19.4720%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,251,305 samples, 26.76%)</title><rect x="19.2296%" y="197" width="26.7562%" height="15" fill="rgb(245,172,44)"/><text x="19.4796%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (10,248,005 samples, 26.75%)</title><rect x="19.2382%" y="181" width="26.7476%" height="15" fill="rgb(236,23,11)"/><text x="19.4882%" y="191.50">typeck</text></g><g><title>typeck (10,241,705 samples, 26.73%)</title><rect x="19.2547%" y="165" width="26.7312%" height="15" fill="rgb(205,117,38)"/><text x="19.5047%" y="175.50">typeck</text></g><g><title>fn_sig (58,701 samples, 0.15%)</title><rect x="46.1508%" y="181" width="0.1532%" height="15" fill="rgb(237,72,25)"/><text x="46.4008%" y="191.50"></text></g><g><title>generics_of (48,561 samples, 0.13%)</title><rect x="46.3040%" y="181" width="0.1267%" height="15" fill="rgb(244,70,9)"/><text x="46.5540%" y="191.50"></text></g><g><title>late_bound_vars_map (129,711 samples, 0.34%)</title><rect x="46.7368%" y="133" width="0.3386%" height="15" fill="rgb(217,125,39)"/><text x="46.9868%" y="143.50"></text></g><g><title>resolve_lifetimes (119,161 samples, 0.31%)</title><rect x="46.7644%" y="117" width="0.3110%" height="15" fill="rgb(235,36,10)"/><text x="47.0144%" y="127.50"></text></g><g><title>explicit_predicates_of (260,323 samples, 0.68%)</title><rect x="46.4581%" y="149" width="0.6795%" height="15" fill="rgb(251,123,47)"/><text x="46.7081%" y="159.50"></text></g><g><title>predicates_of (276,863 samples, 0.72%)</title><rect x="46.4307%" y="181" width="0.7226%" height="15" fill="rgb(221,13,13)"/><text x="46.6807%" y="191.50"></text></g><g><title>predicates_defined_on (273,353 samples, 0.71%)</title><rect x="46.4399%" y="165" width="0.7135%" height="15" fill="rgb(238,131,9)"/><text x="46.6899%" y="175.50"></text></g><g><title>type_collecting (469,065 samples, 1.22%)</title><rect x="45.9988%" y="213" width="1.2243%" height="15" fill="rgb(211,50,8)"/><text x="46.2488%" y="223.50"></text></g><g><title>collect_mod_item_types (458,975 samples, 1.20%)</title><rect x="46.0251%" y="197" width="1.1979%" height="15" fill="rgb(245,182,24)"/><text x="46.2751%" y="207.50"></text></g><g><title>adt_def (43,630 samples, 0.11%)</title><rect x="48.3659%" y="149" width="0.1139%" height="15" fill="rgb(242,14,37)"/><text x="48.6159%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (42,240 samples, 0.11%)</title><rect x="48.3695%" y="133" width="0.1102%" height="15" fill="rgb(246,228,12)"/><text x="48.6195%" y="143.50"></text></g><g><title>adt_def (98,131 samples, 0.26%)</title><rect x="48.6228%" y="101" width="0.2561%" height="15" fill="rgb(213,55,15)"/><text x="48.8728%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (97,541 samples, 0.25%)</title><rect x="48.6243%" y="85" width="0.2546%" height="15" fill="rgb(209,9,3)"/><text x="48.8743%" y="95.50"></text></g><g><title>item_attrs (92,611 samples, 0.24%)</title><rect x="48.6372%" y="69" width="0.2417%" height="15" fill="rgb(230,59,30)"/><text x="48.8872%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (92,071 samples, 0.24%)</title><rect x="48.6386%" y="53" width="0.2403%" height="15" fill="rgb(209,121,21)"/><text x="48.8886%" y="63.50"></text></g><g><title>adt_sized_constraint (107,181 samples, 0.28%)</title><rect x="48.6155%" y="117" width="0.2797%" height="15" fill="rgb(220,109,13)"/><text x="48.8655%" y="127.50"></text></g><g><title>adt_sized_constraint (133,361 samples, 0.35%)</title><rect x="48.5609%" y="133" width="0.3481%" height="15" fill="rgb(232,18,1)"/><text x="48.8109%" y="143.50"></text></g><g><title>adt_sized_constraint (172,582 samples, 0.45%)</title><rect x="48.4798%" y="149" width="0.4504%" height="15" fill="rgb(215,41,42)"/><text x="48.7298%" y="159.50"></text></g><g><title>evaluate_obligation (282,953 samples, 0.74%)</title><rect x="48.2029%" y="181" width="0.7385%" height="15" fill="rgb(224,123,36)"/><text x="48.4529%" y="191.50"></text></g><g><title>adt_sized_constraint (232,732 samples, 0.61%)</title><rect x="48.3340%" y="165" width="0.6074%" height="15" fill="rgb(240,125,3)"/><text x="48.5840%" y="175.50"></text></g><g><title>implied_outlives_bounds (61,241 samples, 0.16%)</title><rect x="48.9415%" y="181" width="0.1598%" height="15" fill="rgb(205,98,50)"/><text x="49.1915%" y="191.50"></text></g><g><title>param_env (216,862 samples, 0.57%)</title><rect x="49.1013%" y="181" width="0.5660%" height="15" fill="rgb(205,185,37)"/><text x="49.3513%" y="191.50"></text></g><g><title>predicates_of (76,892 samples, 0.20%)</title><rect x="49.6673%" y="181" width="0.2007%" height="15" fill="rgb(238,207,15)"/><text x="49.9173%" y="191.50"></text></g><g><title>predicates_defined_on (60,172 samples, 0.16%)</title><rect x="49.7110%" y="165" width="0.1571%" height="15" fill="rgb(213,199,42)"/><text x="49.9610%" y="175.50"></text></g><g><title>region_scope_tree (68,551 samples, 0.18%)</title><rect x="49.8680%" y="181" width="0.1789%" height="15" fill="rgb(235,201,11)"/><text x="50.1180%" y="191.50"></text></g><g><title>analysis (18,704,710 samples, 48.82%)</title><rect x="1.3819%" y="245" width="48.8199%" height="15" fill="rgb(207,46,11)"/><text x="1.6319%" y="255.50">analysis</text></g><g><title>type_check_crate (11,915,923 samples, 31.10%)</title><rect x="19.1009%" y="229" width="31.1010%" height="15" fill="rgb(241,35,35)"/><text x="19.3509%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,140,513 samples, 2.98%)</title><rect x="47.2250%" y="213" width="2.9768%" height="15" fill="rgb(243,32,47)"/><text x="47.4750%" y="223.50">wf_..</text></g><g><title>check_item_well_formed (1,112,162 samples, 2.90%)</title><rect x="47.2990%" y="197" width="2.9028%" height="15" fill="rgb(247,202,23)"/><text x="47.5490%" y="207.50">ch..</text></g><g><title>trait_impls_of (59,340 samples, 0.15%)</title><rect x="50.0469%" y="181" width="0.1549%" height="15" fill="rgb(219,102,11)"/><text x="50.2969%" y="191.50"></text></g><g><title>codegen_crate (552,477 samples, 1.44%)</title><rect x="50.2254%" y="245" width="1.4420%" height="15" fill="rgb(243,110,44)"/><text x="50.4754%" y="255.50"></text></g><g><title>AST_validation (42,030 samples, 0.11%)</title><rect x="52.1461%" y="229" width="0.1097%" height="15" fill="rgb(222,74,54)"/><text x="52.3961%" y="239.50"></text></g><g><title>crate_injection (73,041 samples, 0.19%)</title><rect x="52.3009%" y="229" width="0.1906%" height="15" fill="rgb(216,99,12)"/><text x="52.5509%" y="239.50"></text></g><g><title>metadata_load_macro (110,272 samples, 0.29%)</title><rect x="73.7680%" y="197" width="0.2878%" height="15" fill="rgb(226,22,26)"/><text x="74.0180%" y="207.50"></text></g><g><title>macro_expand_crate (10,506,268 samples, 27.42%)</title><rect x="52.4915%" y="229" width="27.4217%" height="15" fill="rgb(217,163,10)"/><text x="52.7415%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (10,486,018 samples, 27.37%)</title><rect x="52.5444%" y="213" width="27.3689%" height="15" fill="rgb(213,25,53)"/><text x="52.7944%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,244,205 samples, 5.86%)</title><rect x="74.0558%" y="197" width="5.8574%" height="15" fill="rgb(252,105,26)"/><text x="74.3058%" y="207.50">metadat..</text></g><g><title>metadata_register_crate (836,251 samples, 2.18%)</title><rect x="77.7306%" y="181" width="2.1826%" height="15" fill="rgb(220,39,43)"/><text x="77.9806%" y="191.50">m..</text></g><g><title>metadata_register_crate (72,870 samples, 0.19%)</title><rect x="79.7231%" y="165" width="0.1902%" height="15" fill="rgb(229,68,48)"/><text x="79.9731%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (144,452 samples, 0.38%)</title><rect x="79.9224%" y="229" width="0.3770%" height="15" fill="rgb(252,8,32)"/><text x="80.1724%" y="239.50"></text></g><g><title>finalize_imports (263,843 samples, 0.69%)</title><rect x="80.3199%" y="213" width="0.6886%" height="15" fill="rgb(223,20,43)"/><text x="80.5699%" y="223.50"></text></g><g><title>late_resolve_crate (943,070 samples, 2.46%)</title><rect x="81.0345%" y="213" width="2.4614%" height="15" fill="rgb(229,81,49)"/><text x="81.2845%" y="223.50">la..</text></g><g><title>configure_and_expand (12,227,687 samples, 31.91%)</title><rect x="51.6674%" y="245" width="31.9147%" height="15" fill="rgb(236,28,36)"/><text x="51.9174%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,257,684 samples, 3.28%)</title><rect x="80.2995%" y="229" width="3.2826%" height="15" fill="rgb(249,185,26)"/><text x="80.5495%" y="239.50">res..</text></g><g><title>early_lint_checks (105,322 samples, 0.27%)</title><rect x="83.7115%" y="245" width="0.2749%" height="15" fill="rgb(249,174,33)"/><text x="83.9615%" y="255.50"></text></g><g><title>free_global_ctxt (1,914,152 samples, 5.00%)</title><rect x="83.9864%" y="245" width="4.9960%" height="15" fill="rgb(233,201,37)"/><text x="84.2364%" y="255.50">free_g..</text></g><g><title>crate_hash (67,960 samples, 0.18%)</title><rect x="89.4273%" y="229" width="0.1774%" height="15" fill="rgb(221,78,26)"/><text x="89.6773%" y="239.50"></text></g><g><title>generate_crate_metadata (309,463 samples, 0.81%)</title><rect x="88.9824%" y="245" width="0.8077%" height="15" fill="rgb(250,127,30)"/><text x="89.2324%" y="255.50"></text></g><g><title>hir_lowering (569,256 samples, 1.49%)</title><rect x="89.7901%" y="245" width="1.4858%" height="15" fill="rgb(230,49,44)"/><text x="90.0401%" y="255.50"></text></g><g><title>link (45,050 samples, 0.12%)</title><rect x="91.2759%" y="245" width="0.1176%" height="15" fill="rgb(229,67,23)"/><text x="91.5259%" y="255.50"></text></g><g><title>parse_crate (2,240,755 samples, 5.85%)</title><rect x="91.3935%" y="245" width="5.8484%" height="15" fill="rgb(249,83,47)"/><text x="91.6435%" y="255.50">parse_c..</text></g><g><title>prepare_outputs (270,113 samples, 0.71%)</title><rect x="97.2605%" y="245" width="0.7050%" height="15" fill="rgb(215,43,3)"/><text x="97.5105%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (381,874 samples, 1.00%)</title><rect x="97.9655%" y="245" width="0.9967%" height="15" fill="rgb(238,154,13)"/><text x="98.2155%" y="255.50"></text></g><g><title>setup_global_ctxt (112,772 samples, 0.29%)</title><rect x="98.9893%" y="245" width="0.2943%" height="15" fill="rgb(219,56,2)"/><text x="99.2393%" y="255.50"></text></g><g><title>all (38,313,689 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (38,313,689 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (274,453 samples, 0.72%)</title><rect x="99.2837%" y="245" width="0.7163%" height="15" fill="rgb(250,79,13)"/><text x="99.5337%" y="255.50"></text></g></svg></svg>