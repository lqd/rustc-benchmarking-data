<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (438,303 samples, 0.12%)</title><rect x="14.0215%" y="149" width="0.1245%" height="15" fill="rgb(227,0,7)"/><text x="14.2715%" y="159.50"></text></g><g><title>param_env (523,726 samples, 0.15%)</title><rect x="15.9068%" y="117" width="0.1488%" height="15" fill="rgb(217,0,24)"/><text x="16.1568%" y="127.50"></text></g><g><title>codegen_fn_attrs (561,194 samples, 0.16%)</title><rect x="16.4376%" y="101" width="0.1594%" height="15" fill="rgb(221,193,54)"/><text x="16.6876%" y="111.50"></text></g><g><title>adt_drop_tys (518,794 samples, 0.15%)</title><rect x="19.6498%" y="69" width="0.1474%" height="15" fill="rgb(248,212,6)"/><text x="19.8998%" y="79.50"></text></g><g><title>is_copy_raw (1,664,929 samples, 0.47%)</title><rect x="19.7971%" y="69" width="0.4730%" height="15" fill="rgb(208,68,35)"/><text x="20.0471%" y="79.50"></text></g><g><title>evaluate_obligation (1,385,236 samples, 0.39%)</title><rect x="19.8766%" y="53" width="0.3935%" height="15" fill="rgb(232,128,0)"/><text x="20.1266%" y="63.50"></text></g><g><title>needs_drop_raw (2,434,485 samples, 0.69%)</title><rect x="19.5842%" y="85" width="0.6916%" height="15" fill="rgb(207,160,47)"/><text x="19.8342%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (630,404 samples, 0.18%)</title><rect x="20.4350%" y="69" width="0.1791%" height="15" fill="rgb(228,23,34)"/><text x="20.6850%" y="79.50"></text></g><g><title>impl_parent (411,993 samples, 0.12%)</title><rect x="20.8448%" y="53" width="0.1170%" height="15" fill="rgb(218,30,26)"/><text x="21.0948%" y="63.50"></text></g><g><title>specialization_graph_of (3,324,368 samples, 0.94%)</title><rect x="20.6596%" y="69" width="0.9444%" height="15" fill="rgb(220,122,19)"/><text x="20.9096%" y="79.50"></text></g><g><title>impl_trait_ref (2,260,418 samples, 0.64%)</title><rect x="20.9619%" y="53" width="0.6422%" height="15" fill="rgb(250,228,42)"/><text x="21.2119%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,116,297 samples, 0.60%)</title><rect x="21.0028%" y="37" width="0.6012%" height="15" fill="rgb(240,193,28)"/><text x="21.2528%" y="47.50"></text></g><g><title>resolve_instance (4,804,311 samples, 1.36%)</title><rect x="20.2837%" y="85" width="1.3649%" height="15" fill="rgb(216,20,37)"/><text x="20.5337%" y="95.50"></text></g><g><title>thir_body (4,425,216 samples, 1.26%)</title><rect x="21.6702%" y="85" width="1.2572%" height="15" fill="rgb(206,188,39)"/><text x="21.9202%" y="95.50"></text></g><g><title>mir_const (27,251,330 samples, 7.74%)</title><rect x="15.2014%" y="133" width="7.7420%" height="15" fill="rgb(217,207,13)"/><text x="15.4514%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (24,244,582 samples, 6.89%)</title><rect x="16.0556%" y="117" width="6.8878%" height="15" fill="rgb(231,73,38)"/><text x="16.3056%" y="127.50">unsafety_..</text></g><g><title>mir_built (22,339,024 samples, 6.35%)</title><rect x="16.5970%" y="101" width="6.3465%" height="15" fill="rgb(225,20,46)"/><text x="16.8470%" y="111.50">mir_built</text></g><g><title>thir_body (411,005 samples, 0.12%)</title><rect x="24.9681%" y="69" width="0.1168%" height="15" fill="rgb(210,31,41)"/><text x="25.2181%" y="79.50"></text></g><g><title>mir_const_qualif (7,569,896 samples, 2.15%)</title><rect x="22.9435%" y="133" width="2.1506%" height="15" fill="rgb(221,200,47)"/><text x="23.1935%" y="143.50">m..</text></g><g><title>mir_const (3,325,008 samples, 0.94%)</title><rect x="24.1494%" y="117" width="0.9446%" height="15" fill="rgb(226,26,5)"/><text x="24.3994%" y="127.50"></text></g><g><title>unsafety_check_result (2,482,589 samples, 0.71%)</title><rect x="24.3888%" y="101" width="0.7053%" height="15" fill="rgb(249,33,26)"/><text x="24.6388%" y="111.50"></text></g><g><title>mir_built (2,144,525 samples, 0.61%)</title><rect x="24.4848%" y="85" width="0.6093%" height="15" fill="rgb(235,183,28)"/><text x="24.7348%" y="95.50"></text></g><g><title>mir_promoted (38,531,909 samples, 10.95%)</title><rect x="14.1473%" y="149" width="10.9468%" height="15" fill="rgb(221,5,38)"/><text x="14.3973%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (882,531 samples, 0.25%)</title><rect x="25.1037%" y="149" width="0.2507%" height="15" fill="rgb(247,18,42)"/><text x="25.3537%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,200,259 samples, 0.34%)</title><rect x="25.3545%" y="149" width="0.3410%" height="15" fill="rgb(241,131,45)"/><text x="25.6045%" y="159.50"></text></g><g><title>normalize_projection_ty (794,565 samples, 0.23%)</title><rect x="25.4697%" y="133" width="0.2257%" height="15" fill="rgb(249,31,29)"/><text x="25.7197%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,029,113 samples, 0.29%)</title><rect x="25.6955%" y="149" width="0.2924%" height="15" fill="rgb(225,111,53)"/><text x="25.9455%" y="159.50"></text></g><g><title>normalize_projection_ty (653,199 samples, 0.19%)</title><rect x="25.8023%" y="133" width="0.1856%" height="15" fill="rgb(238,160,17)"/><text x="26.0523%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,025,956 samples, 2.00%)</title><rect x="25.9946%" y="149" width="1.9961%" height="15" fill="rgb(214,148,48)"/><text x="26.2446%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (96,998,685 samples, 27.56%)</title><rect x="0.4380%" y="181" width="27.5571%" height="15" fill="rgb(232,36,49)"/><text x="0.6880%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (96,405,454 samples, 27.39%)</title><rect x="0.6066%" y="165" width="27.3885%" height="15" fill="rgb(209,103,24)"/><text x="0.8566%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,254,996 samples, 0.64%)</title><rect x="27.9951%" y="181" width="0.6406%" height="15" fill="rgb(229,88,8)"/><text x="28.2451%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,983,882 samples, 0.56%)</title><rect x="28.0721%" y="165" width="0.5636%" height="15" fill="rgb(213,181,19)"/><text x="28.3221%" y="175.50"></text></g><g><title>hir_module_items (654,977 samples, 0.19%)</title><rect x="28.6357%" y="181" width="0.1861%" height="15" fill="rgb(254,191,54)"/><text x="28.8857%" y="191.50"></text></g><g><title>should_inherit_track_caller (389,062 samples, 0.11%)</title><rect x="29.1516%" y="133" width="0.1105%" height="15" fill="rgb(241,83,37)"/><text x="29.4016%" y="143.50"></text></g><g><title>codegen_fn_attrs (778,745 samples, 0.22%)</title><rect x="29.0454%" y="149" width="0.2212%" height="15" fill="rgb(233,36,39)"/><text x="29.2954%" y="159.50"></text></g><g><title>check_mod_attrs (1,537,287 samples, 0.44%)</title><rect x="28.8299%" y="165" width="0.4367%" height="15" fill="rgb(226,3,54)"/><text x="29.0799%" y="175.50"></text></g><g><title>check_mod_const_bodies (354,123 samples, 0.10%)</title><rect x="29.2666%" y="165" width="0.1006%" height="15" fill="rgb(245,192,40)"/><text x="29.5166%" y="175.50"></text></g><g><title>lint_levels (485,735 samples, 0.14%)</title><rect x="29.5770%" y="149" width="0.1380%" height="15" fill="rgb(238,167,29)"/><text x="29.8270%" y="159.50"></text></g><g><title>lookup_deprecation_entry (370,283 samples, 0.11%)</title><rect x="29.7150%" y="149" width="0.1052%" height="15" fill="rgb(232,182,51)"/><text x="29.9650%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,499,936 samples, 0.43%)</title><rect x="29.4302%" y="165" width="0.4261%" height="15" fill="rgb(231,60,39)"/><text x="29.6802%" y="175.50"></text></g><g><title>misc_checking_1 (3,733,482 samples, 1.06%)</title><rect x="28.8220%" y="181" width="1.0607%" height="15" fill="rgb(208,69,12)"/><text x="29.0720%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,457,476 samples, 0.41%)</title><rect x="29.8837%" y="165" width="0.4141%" height="15" fill="rgb(235,93,37)"/><text x="30.1337%" y="175.50"></text></g><g><title>check_mod_liveness (1,100,153 samples, 0.31%)</title><rect x="29.9853%" y="149" width="0.3126%" height="15" fill="rgb(213,116,39)"/><text x="30.2353%" y="159.50"></text></g><g><title>mir_borrowck (1,420,834 samples, 0.40%)</title><rect x="33.1113%" y="53" width="0.4037%" height="15" fill="rgb(222,207,29)"/><text x="33.3613%" y="63.50"></text></g><g><title>mir_for_ctfe (2,608,896 samples, 0.74%)</title><rect x="32.7794%" y="85" width="0.7412%" height="15" fill="rgb(206,96,30)"/><text x="33.0294%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,015,771 samples, 0.57%)</title><rect x="32.9479%" y="69" width="0.5727%" height="15" fill="rgb(218,138,4)"/><text x="33.1979%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,529,251 samples, 1.00%)</title><rect x="32.5645%" y="133" width="1.0027%" height="15" fill="rgb(250,191,14)"/><text x="32.8145%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,508,321 samples, 1.00%)</title><rect x="32.5704%" y="117" width="0.9967%" height="15" fill="rgb(239,60,40)"/><text x="32.8204%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,464,641 samples, 0.98%)</title><rect x="32.5828%" y="101" width="0.9843%" height="15" fill="rgb(206,27,48)"/><text x="32.8328%" y="111.50"></text></g><g><title>mir_const (638,169 samples, 0.18%)</title><rect x="33.8237%" y="117" width="0.1813%" height="15" fill="rgb(225,35,8)"/><text x="34.0737%" y="127.50"></text></g><g><title>unsafety_check_result (471,625 samples, 0.13%)</title><rect x="33.8710%" y="101" width="0.1340%" height="15" fill="rgb(250,213,24)"/><text x="34.1210%" y="111.50"></text></g><g><title>mir_built (385,265 samples, 0.11%)</title><rect x="33.8956%" y="85" width="0.1095%" height="15" fill="rgb(247,123,22)"/><text x="34.1456%" y="95.50"></text></g><g><title>mir_const_qualif (1,437,698 samples, 0.41%)</title><rect x="33.5994%" y="133" width="0.4084%" height="15" fill="rgb(231,138,38)"/><text x="33.8494%" y="143.50"></text></g><g><title>misc_checking_2 (19,244,865 samples, 5.47%)</title><rect x="29.8827%" y="181" width="5.4674%" height="15" fill="rgb(231,145,46)"/><text x="30.1327%" y="191.50">misc_ch..</text></g><g><title>match_checking (17,783,649 samples, 5.05%)</title><rect x="30.2978%" y="165" width="5.0523%" height="15" fill="rgb(251,118,11)"/><text x="30.5478%" y="175.50">match_..</text></g><g><title>check_match (17,586,767 samples, 5.00%)</title><rect x="30.3537%" y="149" width="4.9964%" height="15" fill="rgb(217,147,25)"/><text x="30.6037%" y="159.50">check_..</text></g><g><title>visible_parent_map (4,548,641 samples, 1.29%)</title><rect x="34.0578%" y="133" width="1.2923%" height="15" fill="rgb(247,81,37)"/><text x="34.3078%" y="143.50"></text></g><g><title>module_children (4,101,026 samples, 1.17%)</title><rect x="34.1850%" y="117" width="1.1651%" height="15" fill="rgb(209,12,38)"/><text x="34.4350%" y="127.50"></text></g><g><title>metadata_decode_entry_module_children (4,036,595 samples, 1.15%)</title><rect x="34.2033%" y="101" width="1.1468%" height="15" fill="rgb(227,1,9)"/><text x="34.4533%" y="111.50"></text></g><g><title>check_private_in_public (666,748 samples, 0.19%)</title><rect x="35.3534%" y="165" width="0.1894%" height="15" fill="rgb(248,47,43)"/><text x="35.6034%" y="175.50"></text></g><g><title>death_checking (1,452,146 samples, 0.41%)</title><rect x="35.5428%" y="165" width="0.4126%" height="15" fill="rgb(221,10,30)"/><text x="35.7928%" y="175.50"></text></g><g><title>param_env (377,823 samples, 0.11%)</title><rect x="36.4692%" y="133" width="0.1073%" height="15" fill="rgb(210,229,1)"/><text x="36.7192%" y="143.50"></text></g><g><title>crate_lints (3,592,461 samples, 1.02%)</title><rect x="35.9560%" y="149" width="1.0206%" height="15" fill="rgb(222,148,37)"/><text x="36.2060%" y="159.50"></text></g><g><title>type_of (1,351,105 samples, 0.38%)</title><rect x="36.5928%" y="133" width="0.3838%" height="15" fill="rgb(234,67,33)"/><text x="36.8428%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,084,955 samples, 0.31%)</title><rect x="36.6684%" y="117" width="0.3082%" height="15" fill="rgb(247,98,35)"/><text x="36.9184%" y="127.50"></text></g><g><title>lint_checking (5,383,491 samples, 1.53%)</title><rect x="35.9554%" y="165" width="1.5294%" height="15" fill="rgb(247,138,52)"/><text x="36.2054%" y="175.50"></text></g><g><title>module_lints (1,788,900 samples, 0.51%)</title><rect x="36.9766%" y="149" width="0.5082%" height="15" fill="rgb(213,79,30)"/><text x="37.2266%" y="159.50"></text></g><g><title>lint_mod (1,781,540 samples, 0.51%)</title><rect x="36.9787%" y="133" width="0.5061%" height="15" fill="rgb(246,177,23)"/><text x="37.2287%" y="143.50"></text></g><g><title>privacy_access_levels (1,475,726 samples, 0.42%)</title><rect x="37.4848%" y="165" width="0.4193%" height="15" fill="rgb(230,62,27)"/><text x="37.7348%" y="175.50"></text></g><g><title>privacy_checking_modules (4,799,053 samples, 1.36%)</title><rect x="37.9041%" y="165" width="1.3634%" height="15" fill="rgb(216,154,8)"/><text x="38.1541%" y="175.50"></text></g><g><title>check_mod_privacy (4,792,923 samples, 1.36%)</title><rect x="37.9058%" y="149" width="1.3617%" height="15" fill="rgb(244,35,45)"/><text x="38.1558%" y="159.50"></text></g><g><title>misc_checking_3 (13,814,064 samples, 3.92%)</title><rect x="35.3501%" y="181" width="3.9245%" height="15" fill="rgb(251,115,12)"/><text x="35.6001%" y="191.50">misc..</text></g><g><title>impl_parent (3,415,244 samples, 0.97%)</title><rect x="41.2841%" y="117" width="0.9703%" height="15" fill="rgb(240,54,50)"/><text x="41.5341%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,998,775 samples, 0.57%)</title><rect x="41.6865%" y="101" width="0.5678%" height="15" fill="rgb(233,84,52)"/><text x="41.9365%" y="111.50"></text></g><g><title>impl_trait_ref (7,029,485 samples, 2.00%)</title><rect x="42.2544%" y="117" width="1.9971%" height="15" fill="rgb(207,117,47)"/><text x="42.5044%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,615,459 samples, 1.60%)</title><rect x="42.6562%" y="101" width="1.5953%" height="15" fill="rgb(249,43,39)"/><text x="42.9062%" y="111.50"></text></g><g><title>trait_impls_of (1,313,803 samples, 0.37%)</title><rect x="44.2664%" y="117" width="0.3732%" height="15" fill="rgb(209,38,44)"/><text x="44.5164%" y="127.50"></text></g><g><title>implementations_of_trait (430,533 samples, 0.12%)</title><rect x="44.5173%" y="101" width="0.1223%" height="15" fill="rgb(236,212,23)"/><text x="44.7673%" y="111.50"></text></g><g><title>coherent_trait (18,640,698 samples, 5.30%)</title><rect x="39.3440%" y="149" width="5.2958%" height="15" fill="rgb(242,79,21)"/><text x="39.5940%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (18,072,662 samples, 5.13%)</title><rect x="39.5054%" y="133" width="5.1344%" height="15" fill="rgb(211,96,35)"/><text x="39.7554%" y="143.50">specia..</text></g><g><title>coherence_checking (18,808,031 samples, 5.34%)</title><rect x="39.3362%" y="165" width="5.3433%" height="15" fill="rgb(253,215,40)"/><text x="39.5862%" y="175.50">coheren..</text></g><g><title>impl_wf_inference (427,975 samples, 0.12%)</title><rect x="44.6795%" y="165" width="0.1216%" height="15" fill="rgb(211,81,21)"/><text x="44.9295%" y="175.50"></text></g><g><title>check_mod_impl_wf (424,095 samples, 0.12%)</title><rect x="44.6806%" y="149" width="0.1205%" height="15" fill="rgb(208,190,38)"/><text x="44.9306%" y="159.50"></text></g><g><title>associated_item (467,972 samples, 0.13%)</title><rect x="65.6885%" y="101" width="0.1329%" height="15" fill="rgb(235,213,38)"/><text x="65.9385%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (373,752 samples, 0.11%)</title><rect x="65.7153%" y="85" width="0.1062%" height="15" fill="rgb(237,122,38)"/><text x="65.9653%" y="95.50"></text></g><g><title>associated_items (688,896 samples, 0.20%)</title><rect x="65.6384%" y="117" width="0.1957%" height="15" fill="rgb(244,218,35)"/><text x="65.8884%" y="127.50"></text></g><g><title>dropck_outlives (762,139 samples, 0.22%)</title><rect x="65.8649%" y="117" width="0.2165%" height="15" fill="rgb(240,68,47)"/><text x="66.1149%" y="127.50"></text></g><g><title>predicates_of (698,777 samples, 0.20%)</title><rect x="67.0525%" y="101" width="0.1985%" height="15" fill="rgb(210,16,53)"/><text x="67.3025%" y="111.50"></text></g><g><title>predicates_defined_on (518,016 samples, 0.15%)</title><rect x="67.1039%" y="85" width="0.1472%" height="15" fill="rgb(235,124,12)"/><text x="67.3539%" y="95.50"></text></g><g><title>specializes (422,894 samples, 0.12%)</title><rect x="67.2510%" y="101" width="0.1201%" height="15" fill="rgb(224,169,11)"/><text x="67.5010%" y="111.50"></text></g><g><title>trait_impls_of (924,718 samples, 0.26%)</title><rect x="67.3734%" y="101" width="0.2627%" height="15" fill="rgb(250,166,2)"/><text x="67.6234%" y="111.50"></text></g><g><title>evaluate_obligation (5,213,342 samples, 1.48%)</title><rect x="66.1570%" y="117" width="1.4811%" height="15" fill="rgb(242,216,29)"/><text x="66.4070%" y="127.50"></text></g><g><title>generics_of (1,078,001 samples, 0.31%)</title><rect x="67.7067%" y="117" width="0.3063%" height="15" fill="rgb(230,116,27)"/><text x="67.9567%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (818,509 samples, 0.23%)</title><rect x="67.7805%" y="101" width="0.2325%" height="15" fill="rgb(228,99,48)"/><text x="68.0305%" y="111.50"></text></g><g><title>method_autoderef_steps (407,677 samples, 0.12%)</title><rect x="68.1690%" y="117" width="0.1158%" height="15" fill="rgb(253,11,6)"/><text x="68.4190%" y="127.50"></text></g><g><title>predicates_of (478,195 samples, 0.14%)</title><rect x="68.3322%" y="117" width="0.1359%" height="15" fill="rgb(247,143,39)"/><text x="68.5822%" y="127.50"></text></g><g><title>associated_item (453,177 samples, 0.13%)</title><rect x="71.4085%" y="85" width="0.1287%" height="15" fill="rgb(236,97,10)"/><text x="71.6585%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (357,057 samples, 0.10%)</title><rect x="71.4358%" y="69" width="0.1014%" height="15" fill="rgb(233,208,19)"/><text x="71.6858%" y="79.50"></text></g><g><title>associated_items (632,798 samples, 0.18%)</title><rect x="71.3639%" y="101" width="0.1798%" height="15" fill="rgb(216,164,2)"/><text x="71.6139%" y="111.50"></text></g><g><title>dropck_outlives (532,937 samples, 0.15%)</title><rect x="71.5564%" y="101" width="0.1514%" height="15" fill="rgb(220,129,5)"/><text x="71.8064%" y="111.50"></text></g><g><title>trait_impls_of (639,335 samples, 0.18%)</title><rect x="72.3932%" y="85" width="0.1816%" height="15" fill="rgb(242,17,10)"/><text x="72.6432%" y="95.50"></text></g><g><title>evaluate_obligation (3,054,923 samples, 0.87%)</title><rect x="71.7078%" y="101" width="0.8679%" height="15" fill="rgb(242,107,0)"/><text x="71.9578%" y="111.50"></text></g><g><title>method_autoderef_steps (382,156 samples, 0.11%)</title><rect x="72.7889%" y="101" width="0.1086%" height="15" fill="rgb(251,28,31)"/><text x="73.0389%" y="111.50"></text></g><g><title>predicates_of (354,685 samples, 0.10%)</title><rect x="72.9020%" y="101" width="0.1008%" height="15" fill="rgb(233,223,10)"/><text x="73.1520%" y="111.50"></text></g><g><title>typeck (15,868,667 samples, 4.51%)</title><rect x="68.5354%" y="117" width="4.5082%" height="15" fill="rgb(215,21,27)"/><text x="68.7854%" y="127.50">typeck</text></g><g><title>item_bodies_checking (99,548,825 samples, 28.28%)</title><rect x="44.8011%" y="165" width="28.2816%" height="15" fill="rgb(232,23,21)"/><text x="45.0511%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (99,544,905 samples, 28.28%)</title><rect x="44.8022%" y="149" width="28.2805%" height="15" fill="rgb(244,5,23)"/><text x="45.0522%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (99,142,590 samples, 28.17%)</title><rect x="44.9165%" y="133" width="28.1662%" height="15" fill="rgb(226,81,46)"/><text x="45.1665%" y="143.50">typeck</text></g><g><title>implied_outlives_bounds (548,609 samples, 0.16%)</title><rect x="74.0632%" y="133" width="0.1559%" height="15" fill="rgb(247,70,30)"/><text x="74.3132%" y="143.50"></text></g><g><title>item_types_checking (4,137,766 samples, 1.18%)</title><rect x="73.0826%" y="165" width="1.1755%" height="15" fill="rgb(212,68,19)"/><text x="73.3326%" y="175.50"></text></g><g><title>check_mod_item_types (4,131,316 samples, 1.17%)</title><rect x="73.0845%" y="149" width="1.1737%" height="15" fill="rgb(240,187,13)"/><text x="73.3345%" y="159.50"></text></g><g><title>fn_sig (1,703,861 samples, 0.48%)</title><rect x="74.5521%" y="133" width="0.4841%" height="15" fill="rgb(223,113,26)"/><text x="74.8021%" y="143.50"></text></g><g><title>resolve_lifetimes (424,075 samples, 0.12%)</title><rect x="75.1635%" y="101" width="0.1205%" height="15" fill="rgb(206,192,2)"/><text x="75.4135%" y="111.50"></text></g><g><title>is_late_bound_map (473,266 samples, 0.13%)</title><rect x="75.1526%" y="117" width="0.1345%" height="15" fill="rgb(241,108,4)"/><text x="75.4026%" y="127.50"></text></g><g><title>named_region_map (758,078 samples, 0.22%)</title><rect x="75.2870%" y="117" width="0.2154%" height="15" fill="rgb(247,173,49)"/><text x="75.5370%" y="127.50"></text></g><g><title>resolve_lifetimes (688,718 samples, 0.20%)</title><rect x="75.3068%" y="101" width="0.1957%" height="15" fill="rgb(224,114,35)"/><text x="75.5568%" y="111.50"></text></g><g><title>generics_of (1,693,216 samples, 0.48%)</title><rect x="75.0362%" y="133" width="0.4810%" height="15" fill="rgb(245,159,27)"/><text x="75.2862%" y="143.50"></text></g><g><title>explicit_predicates_of (671,006 samples, 0.19%)</title><rect x="75.7307%" y="101" width="0.1906%" height="15" fill="rgb(245,172,44)"/><text x="75.9807%" y="111.50"></text></g><g><title>predicates_of (1,542,255 samples, 0.44%)</title><rect x="75.5515%" y="133" width="0.4382%" height="15" fill="rgb(236,23,11)"/><text x="75.8015%" y="143.50"></text></g><g><title>predicates_defined_on (1,297,393 samples, 0.37%)</title><rect x="75.6210%" y="117" width="0.3686%" height="15" fill="rgb(205,117,38)"/><text x="75.8710%" y="127.50"></text></g><g><title>type_collecting (6,517,383 samples, 1.85%)</title><rect x="74.2593%" y="165" width="1.8516%" height="15" fill="rgb(237,72,25)"/><text x="74.5093%" y="175.50">t..</text></g><g><title>collect_mod_item_types (6,505,943 samples, 1.85%)</title><rect x="74.2626%" y="149" width="1.8483%" height="15" fill="rgb(244,70,9)"/><text x="74.5126%" y="159.50">c..</text></g><g><title>type_of (365,442 samples, 0.10%)</title><rect x="76.0071%" y="133" width="0.1038%" height="15" fill="rgb(217,125,39)"/><text x="76.2571%" y="143.50"></text></g><g><title>evaluate_obligation (993,229 samples, 0.28%)</title><rect x="78.1882%" y="133" width="0.2822%" height="15" fill="rgb(235,36,10)"/><text x="78.4382%" y="143.50"></text></g><g><title>implied_outlives_bounds (615,487 samples, 0.17%)</title><rect x="78.4716%" y="133" width="0.1749%" height="15" fill="rgb(251,123,47)"/><text x="78.7216%" y="143.50"></text></g><g><title>param_env (1,224,230 samples, 0.35%)</title><rect x="78.6464%" y="133" width="0.3478%" height="15" fill="rgb(221,13,13)"/><text x="78.8964%" y="143.50"></text></g><g><title>region_scope_tree (1,692,816 samples, 0.48%)</title><rect x="79.0004%" y="133" width="0.4809%" height="15" fill="rgb(238,131,9)"/><text x="79.2504%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,203,159 samples, 3.18%)</title><rect x="76.3056%" y="149" width="3.1828%" height="15" fill="rgb(211,50,8)"/><text x="76.5556%" y="159.50">che..</text></g><g><title>evaluate_obligation (1,383,134 samples, 0.39%)</title><rect x="80.6196%" y="133" width="0.3929%" height="15" fill="rgb(245,182,24)"/><text x="80.8696%" y="143.50"></text></g><g><title>object_safety_violations (509,585 samples, 0.14%)</title><rect x="81.1166%" y="133" width="0.1448%" height="15" fill="rgb(242,14,37)"/><text x="81.3666%" y="143.50"></text></g><g><title>param_env (599,706 samples, 0.17%)</title><rect x="81.2615%" y="133" width="0.1704%" height="15" fill="rgb(246,228,12)"/><text x="81.5115%" y="143.50"></text></g><g><title>check_item_well_formed (7,459,142 samples, 2.12%)</title><rect x="79.4884%" y="149" width="2.1191%" height="15" fill="rgb(213,55,15)"/><text x="79.7384%" y="159.50">c..</text></g><g><title>analysis (287,439,997 samples, 81.66%)</title><rect x="0.1421%" y="197" width="81.6610%" height="15" fill="rgb(209,9,3)"/><text x="0.3921%" y="207.50">analysis</text></g><g><title>type_check_crate (149,696,566 samples, 42.53%)</title><rect x="39.2746%" y="181" width="42.5284%" height="15" fill="rgb(230,59,30)"/><text x="39.5246%" y="191.50">type_check_crate</text></g><g><title>wf_checking (20,008,673 samples, 5.68%)</title><rect x="76.1186%" y="165" width="5.6844%" height="15" fill="rgb(209,121,21)"/><text x="76.3686%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (688,208 samples, 0.20%)</title><rect x="81.6075%" y="149" width="0.1955%" height="15" fill="rgb(220,109,13)"/><text x="81.8575%" y="159.50"></text></g><g><title>codegen_crate (543,856 samples, 0.15%)</title><rect x="81.8051%" y="197" width="0.1545%" height="15" fill="rgb(232,18,1)"/><text x="82.0551%" y="207.50"></text></g><g><title>metadata_register_crate (2,319,986 samples, 0.66%)</title><rect x="88.1726%" y="149" width="0.6591%" height="15" fill="rgb(215,41,42)"/><text x="88.4226%" y="159.50"></text></g><g><title>metadata_register_crate (1,191,833 samples, 0.34%)</title><rect x="88.4931%" y="133" width="0.3386%" height="15" fill="rgb(224,123,36)"/><text x="88.7431%" y="143.50"></text></g><g><title>metadata_register_crate (497,545 samples, 0.14%)</title><rect x="88.6904%" y="117" width="0.1414%" height="15" fill="rgb(240,125,3)"/><text x="88.9404%" y="127.50"></text></g><g><title>macro_expand_crate (23,782,606 samples, 6.76%)</title><rect x="82.1521%" y="181" width="6.7566%" height="15" fill="rgb(205,98,50)"/><text x="82.4021%" y="191.50">macro_exp..</text></g><g><title>expand_crate (23,766,686 samples, 6.75%)</title><rect x="82.1566%" y="165" width="6.7521%" height="15" fill="rgb(205,185,37)"/><text x="82.4066%" y="175.50">expand_cr..</text></g><g><title>late_resolve_crate (6,120,818 samples, 1.74%)</title><rect x="89.0681%" y="165" width="1.7389%" height="15" fill="rgb(238,207,15)"/><text x="89.3181%" y="175.50"></text></g><g><title>configure_and_expand (31,464,442 samples, 8.94%)</title><rect x="81.9596%" y="197" width="8.9390%" height="15" fill="rgb(213,199,42)"/><text x="82.2096%" y="207.50">configure_and..</text></g><g><title>resolve_crate (6,796,176 samples, 1.93%)</title><rect x="88.9678%" y="181" width="1.9308%" height="15" fill="rgb(235,201,11)"/><text x="89.2178%" y="191.50">r..</text></g><g><title>drop_ast (836,679 samples, 0.24%)</title><rect x="90.8986%" y="197" width="0.2377%" height="15" fill="rgb(207,46,11)"/><text x="91.1486%" y="207.50"></text></g><g><title>early_lint_checks (1,466,907 samples, 0.42%)</title><rect x="91.1429%" y="197" width="0.4167%" height="15" fill="rgb(241,35,35)"/><text x="91.3929%" y="207.50"></text></g><g><title>free_global_ctxt (6,234,910 samples, 1.77%)</title><rect x="91.5596%" y="197" width="1.7713%" height="15" fill="rgb(243,32,47)"/><text x="91.8096%" y="207.50">f..</text></g><g><title>mir_for_ctfe (1,422,498 samples, 0.40%)</title><rect x="94.5950%" y="181" width="0.4041%" height="15" fill="rgb(247,202,23)"/><text x="94.8450%" y="191.50"></text></g><g><title>generate_crate_metadata (6,159,709 samples, 1.75%)</title><rect x="93.3310%" y="197" width="1.7500%" height="15" fill="rgb(219,102,11)"/><text x="93.5810%" y="207.50"></text></g><g><title>hir_lowering (11,407,538 samples, 3.24%)</title><rect x="95.0809%" y="197" width="3.2409%" height="15" fill="rgb(243,110,44)"/><text x="95.3309%" y="207.50">hir..</text></g><g><title>parse_crate (3,367,697 samples, 0.96%)</title><rect x="98.3426%" y="197" width="0.9568%" height="15" fill="rgb(222,74,54)"/><text x="98.5926%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,654,709 samples, 0.47%)</title><rect x="99.3603%" y="197" width="0.4701%" height="15" fill="rgb(216,99,12)"/><text x="99.6103%" y="207.50"></text></g><g><title>all (351,991,889 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (351,991,889 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (488,995 samples, 0.14%)</title><rect x="99.8611%" y="197" width="0.1389%" height="15" fill="rgb(213,25,53)"/><text x="100.1111%" y="207.50"></text></g></svg></svg>