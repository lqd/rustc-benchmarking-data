<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (149,712 samples, 0.25%)</title><rect x="4.2967%" y="101" width="0.2512%" height="15" fill="rgb(227,0,7)"/><text x="4.5467%" y="111.50"></text></g><g><title>is_copy_raw (135,172 samples, 0.23%)</title><rect x="4.3211%" y="85" width="0.2268%" height="15" fill="rgb(217,0,24)"/><text x="4.5711%" y="95.50"></text></g><g><title>evaluate_obligation (121,862 samples, 0.20%)</title><rect x="4.3434%" y="69" width="0.2045%" height="15" fill="rgb(221,193,54)"/><text x="4.5934%" y="79.50"></text></g><g><title>predicates_of (63,141 samples, 0.11%)</title><rect x="4.4420%" y="53" width="0.1060%" height="15" fill="rgb(248,212,6)"/><text x="4.6920%" y="63.50"></text></g><g><title>predicates_defined_on (60,891 samples, 0.10%)</title><rect x="4.4458%" y="37" width="0.1022%" height="15" fill="rgb(208,68,35)"/><text x="4.6958%" y="47.50"></text></g><g><title>thir_body (81,251 samples, 0.14%)</title><rect x="4.5635%" y="101" width="0.1363%" height="15" fill="rgb(232,128,0)"/><text x="4.8135%" y="111.50"></text></g><g><title>mir_const (758,059 samples, 1.27%)</title><rect x="3.4321%" y="149" width="1.2721%" height="15" fill="rgb(207,160,47)"/><text x="3.6821%" y="159.50"></text></g><g><title>unsafety_check_result (626,868 samples, 1.05%)</title><rect x="3.6522%" y="133" width="1.0519%" height="15" fill="rgb(228,23,34)"/><text x="3.9022%" y="143.50"></text></g><g><title>mir_built (559,927 samples, 0.94%)</title><rect x="3.7646%" y="117" width="0.9396%" height="15" fill="rgb(218,30,26)"/><text x="4.0146%" y="127.50"></text></g><g><title>mir_promoted (892,200 samples, 1.50%)</title><rect x="3.2234%" y="165" width="1.4972%" height="15" fill="rgb(220,122,19)"/><text x="3.4734%" y="175.50"></text></g><g><title>MIR_borrow_checking (1,956,992 samples, 3.28%)</title><rect x="1.5374%" y="197" width="3.2839%" height="15" fill="rgb(250,228,42)"/><text x="1.7874%" y="207.50">MIR..</text></g><g><title>mir_borrowck (1,941,871 samples, 3.26%)</title><rect x="1.5628%" y="181" width="3.2586%" height="15" fill="rgb(240,193,28)"/><text x="1.8128%" y="191.50">mir..</text></g><g><title>hir_module_items (154,172 samples, 0.26%)</title><rect x="4.8287%" y="197" width="0.2587%" height="15" fill="rgb(216,20,37)"/><text x="5.0787%" y="207.50"></text></g><g><title>get_lang_items (107,231 samples, 0.18%)</title><rect x="5.4858%" y="149" width="0.1799%" height="15" fill="rgb(206,188,39)"/><text x="5.7358%" y="159.50"></text></g><g><title>associated_item (59,730 samples, 0.10%)</title><rect x="5.7368%" y="133" width="0.1002%" height="15" fill="rgb(217,207,13)"/><text x="5.9868%" y="143.50"></text></g><g><title>item_attrs (90,821 samples, 0.15%)</title><rect x="5.8730%" y="117" width="0.1524%" height="15" fill="rgb(231,73,38)"/><text x="6.1230%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (86,301 samples, 0.14%)</title><rect x="5.8806%" y="101" width="0.1448%" height="15" fill="rgb(225,20,46)"/><text x="6.1306%" y="111.50"></text></g><g><title>codegen_fn_attrs (163,162 samples, 0.27%)</title><rect x="5.8371%" y="133" width="0.2738%" height="15" fill="rgb(210,31,41)"/><text x="6.0871%" y="143.50"></text></g><g><title>should_inherit_track_caller (269,504 samples, 0.45%)</title><rect x="5.6657%" y="149" width="0.4522%" height="15" fill="rgb(221,200,47)"/><text x="5.9157%" y="159.50"></text></g><g><title>codegen_fn_attrs (511,547 samples, 0.86%)</title><rect x="5.3203%" y="165" width="0.8584%" height="15" fill="rgb(226,26,5)"/><text x="5.5703%" y="175.50"></text></g><g><title>check_mod_attrs (620,317 samples, 1.04%)</title><rect x="5.1382%" y="181" width="1.0409%" height="15" fill="rgb(249,33,26)"/><text x="5.3882%" y="191.50"></text></g><g><title>lookup_deprecation_entry (103,901 samples, 0.17%)</title><rect x="6.4957%" y="165" width="0.1744%" height="15" fill="rgb(235,183,28)"/><text x="6.7457%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (302,023 samples, 0.51%)</title><rect x="6.3098%" y="181" width="0.5068%" height="15" fill="rgb(221,5,38)"/><text x="6.5598%" y="191.50"></text></g><g><title>misc_checking_1 (1,078,822 samples, 1.81%)</title><rect x="5.0880%" y="197" width="1.8103%" height="15" fill="rgb(247,18,42)"/><text x="5.3380%" y="207.50">m..</text></g><g><title>misc_checking_2 (181,443 samples, 0.30%)</title><rect x="6.8983%" y="197" width="0.3045%" height="15" fill="rgb(241,131,45)"/><text x="7.1483%" y="207.50"></text></g><g><title>match_checking (121,322 samples, 0.20%)</title><rect x="6.9992%" y="181" width="0.2036%" height="15" fill="rgb(249,31,29)"/><text x="7.2492%" y="191.50"></text></g><g><title>check_match (115,472 samples, 0.19%)</title><rect x="7.0090%" y="165" width="0.1938%" height="15" fill="rgb(225,111,53)"/><text x="7.2590%" y="175.50"></text></g><g><title>death_checking (69,251 samples, 0.12%)</title><rect x="7.2878%" y="181" width="0.1162%" height="15" fill="rgb(238,160,17)"/><text x="7.5378%" y="191.50"></text></g><g><title>crate_lints (1,701,449 samples, 2.86%)</title><rect x="7.4064%" y="165" width="2.8551%" height="15" fill="rgb(214,148,48)"/><text x="7.6564%" y="175.50">cr..</text></g><g><title>type_of (982,644 samples, 1.65%)</title><rect x="8.6126%" y="149" width="1.6489%" height="15" fill="rgb(232,36,49)"/><text x="8.8626%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (750,011 samples, 1.26%)</title><rect x="9.0030%" y="133" width="1.2586%" height="15" fill="rgb(209,103,24)"/><text x="9.2530%" y="143.50"></text></g><g><title>lint_checking (1,769,860 samples, 2.97%)</title><rect x="7.4040%" y="181" width="2.9699%" height="15" fill="rgb(229,88,8)"/><text x="7.6540%" y="191.50">lin..</text></g><g><title>module_lints (66,971 samples, 0.11%)</title><rect x="10.2615%" y="165" width="0.1124%" height="15" fill="rgb(213,181,19)"/><text x="10.5115%" y="175.50"></text></g><g><title>lint_mod (64,921 samples, 0.11%)</title><rect x="10.2650%" y="149" width="0.1089%" height="15" fill="rgb(254,191,54)"/><text x="10.5150%" y="159.50"></text></g><g><title>privacy_access_levels (62,590 samples, 0.11%)</title><rect x="10.3739%" y="181" width="0.1050%" height="15" fill="rgb(241,83,37)"/><text x="10.6239%" y="191.50"></text></g><g><title>privacy_checking_modules (162,402 samples, 0.27%)</title><rect x="10.4789%" y="181" width="0.2725%" height="15" fill="rgb(233,36,39)"/><text x="10.7289%" y="191.50"></text></g><g><title>check_mod_privacy (160,752 samples, 0.27%)</title><rect x="10.4817%" y="165" width="0.2698%" height="15" fill="rgb(226,3,54)"/><text x="10.7317%" y="175.50"></text></g><g><title>misc_checking_3 (2,125,464 samples, 3.57%)</title><rect x="7.2028%" y="197" width="3.5666%" height="15" fill="rgb(245,192,40)"/><text x="7.4528%" y="207.50">misc..</text></g><g><title>impl_parent (106,271 samples, 0.18%)</title><rect x="11.3029%" y="101" width="0.1783%" height="15" fill="rgb(238,167,29)"/><text x="11.5529%" y="111.50"></text></g><g><title>impl_trait_ref (307,584 samples, 0.52%)</title><rect x="11.4812%" y="101" width="0.5161%" height="15" fill="rgb(232,182,51)"/><text x="11.7312%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (261,894 samples, 0.44%)</title><rect x="11.5579%" y="85" width="0.4395%" height="15" fill="rgb(231,60,39)"/><text x="11.8079%" y="95.50"></text></g><g><title>adt_destructor (684,698 samples, 1.15%)</title><rect x="10.9705%" y="149" width="1.1490%" height="15" fill="rgb(208,69,12)"/><text x="11.2205%" y="159.50"></text></g><g><title>coherent_trait (672,318 samples, 1.13%)</title><rect x="10.9913%" y="133" width="1.1282%" height="15" fill="rgb(235,93,37)"/><text x="11.2413%" y="143.50"></text></g><g><title>specialization_graph_of (669,028 samples, 1.12%)</title><rect x="10.9968%" y="117" width="1.1227%" height="15" fill="rgb(213,116,39)"/><text x="11.2468%" y="127.50"></text></g><g><title>trait_impls_of (72,771 samples, 0.12%)</title><rect x="11.9973%" y="101" width="0.1221%" height="15" fill="rgb(222,207,29)"/><text x="12.2473%" y="111.50"></text></g><g><title>param_env (109,301 samples, 0.18%)</title><rect x="12.1195%" y="149" width="0.1834%" height="15" fill="rgb(206,96,30)"/><text x="12.3695%" y="159.50"></text></g><g><title>impl_parent (4,118,952 samples, 6.91%)</title><rect x="26.0950%" y="133" width="6.9118%" height="15" fill="rgb(218,138,4)"/><text x="26.3450%" y="143.50">impl_pare..</text></g><g><title>metadata_decode_entry_impl_parent (2,120,358 samples, 3.56%)</title><rect x="29.4488%" y="117" width="3.5581%" height="15" fill="rgb(250,191,14)"/><text x="29.6988%" y="127.50">meta..</text></g><g><title>impl_trait_ref (10,488,965 samples, 17.60%)</title><rect x="33.0069%" y="133" width="17.6010%" height="15" fill="rgb(239,60,40)"/><text x="33.2569%" y="143.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (8,520,972 samples, 14.30%)</title><rect x="36.3093%" y="117" width="14.2986%" height="15" fill="rgb(206,27,48)"/><text x="36.5593%" y="127.50">metadata_decode_entry_..</text></g><g><title>coherent_trait (25,269,185 samples, 42.40%)</title><rect x="10.8671%" y="165" width="42.4030%" height="15" fill="rgb(225,35,8)"/><text x="11.1171%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (24,413,596 samples, 40.97%)</title><rect x="12.3029%" y="149" width="40.9673%" height="15" fill="rgb(250,213,24)"/><text x="12.5529%" y="159.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,583,388 samples, 2.66%)</title><rect x="50.6132%" y="133" width="2.6570%" height="15" fill="rgb(247,123,22)"/><text x="50.8632%" y="143.50">tr..</text></g><g><title>implementations_of_trait (381,132 samples, 0.64%)</title><rect x="52.6306%" y="117" width="0.6396%" height="15" fill="rgb(231,138,38)"/><text x="52.8806%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (313,662 samples, 0.53%)</title><rect x="52.7439%" y="101" width="0.5263%" height="15" fill="rgb(231,145,46)"/><text x="52.9939%" y="111.50"></text></g><g><title>coherence_checking (25,340,566 samples, 42.52%)</title><rect x="10.8090%" y="181" width="42.5228%" height="15" fill="rgb(251,118,11)"/><text x="11.0590%" y="191.50">coherence_checking</text></g><g><title>dropck_outlives (74,852 samples, 0.13%)</title><rect x="54.8415%" y="133" width="0.1256%" height="15" fill="rgb(217,147,25)"/><text x="55.0915%" y="143.50"></text></g><g><title>item_bodies_checking (1,055,382 samples, 1.77%)</title><rect x="53.3862%" y="181" width="1.7710%" height="15" fill="rgb(247,81,37)"/><text x="53.6362%" y="191.50">i..</text></g><g><title>typeck_item_bodies (1,053,542 samples, 1.77%)</title><rect x="53.3892%" y="165" width="1.7679%" height="15" fill="rgb(209,12,38)"/><text x="53.6392%" y="175.50"></text></g><g><title>typeck (1,041,422 samples, 1.75%)</title><rect x="53.4096%" y="149" width="1.7476%" height="15" fill="rgb(227,1,9)"/><text x="53.6596%" y="159.50"></text></g><g><title>item_types_checking (280,133 samples, 0.47%)</title><rect x="55.1571%" y="181" width="0.4701%" height="15" fill="rgb(248,47,43)"/><text x="55.4071%" y="191.50"></text></g><g><title>check_mod_item_types (276,913 samples, 0.46%)</title><rect x="55.1625%" y="165" width="0.4647%" height="15" fill="rgb(221,10,30)"/><text x="55.4125%" y="175.50"></text></g><g><title>late_bound_vars_map (120,921 samples, 0.20%)</title><rect x="57.0409%" y="133" width="0.2029%" height="15" fill="rgb(210,229,1)"/><text x="57.2909%" y="143.50"></text></g><g><title>resolve_lifetimes (102,391 samples, 0.17%)</title><rect x="57.0720%" y="117" width="0.1718%" height="15" fill="rgb(222,148,37)"/><text x="57.3220%" y="127.50"></text></g><g><title>fn_sig (841,019 samples, 1.41%)</title><rect x="55.9355%" y="149" width="1.4113%" height="15" fill="rgb(234,67,33)"/><text x="56.1855%" y="159.50"></text></g><g><title>named_region_map (197,064 samples, 0.33%)</title><rect x="57.4627%" y="133" width="0.3307%" height="15" fill="rgb(247,98,35)"/><text x="57.7127%" y="143.50"></text></g><g><title>resolve_lifetimes (187,584 samples, 0.31%)</title><rect x="57.4786%" y="117" width="0.3148%" height="15" fill="rgb(247,138,52)"/><text x="57.7286%" y="127.50"></text></g><g><title>lint_levels (61,191 samples, 0.10%)</title><rect x="57.6907%" y="101" width="0.1027%" height="15" fill="rgb(213,79,30)"/><text x="57.9407%" y="111.50"></text></g><g><title>generics_of (282,174 samples, 0.47%)</title><rect x="57.3467%" y="149" width="0.4735%" height="15" fill="rgb(246,177,23)"/><text x="57.5967%" y="159.50"></text></g><g><title>impl_trait_ref (87,231 samples, 0.15%)</title><rect x="57.8202%" y="149" width="0.1464%" height="15" fill="rgb(230,62,27)"/><text x="58.0702%" y="159.50"></text></g><g><title>explicit_predicates_of (113,812 samples, 0.19%)</title><rect x="58.0985%" y="117" width="0.1910%" height="15" fill="rgb(216,154,8)"/><text x="58.3485%" y="127.50"></text></g><g><title>predicates_of (235,892 samples, 0.40%)</title><rect x="57.9666%" y="149" width="0.3958%" height="15" fill="rgb(244,35,45)"/><text x="58.2166%" y="159.50"></text></g><g><title>predicates_defined_on (204,712 samples, 0.34%)</title><rect x="58.0189%" y="133" width="0.3435%" height="15" fill="rgb(251,115,12)"/><text x="58.2689%" y="143.50"></text></g><g><title>super_predicates_of (79,101 samples, 0.13%)</title><rect x="58.3625%" y="149" width="0.1327%" height="15" fill="rgb(240,54,50)"/><text x="58.6125%" y="159.50"></text></g><g><title>super_predicates_that_define_assoc_type (64,071 samples, 0.11%)</title><rect x="58.3877%" y="133" width="0.1075%" height="15" fill="rgb(233,84,52)"/><text x="58.6377%" y="143.50"></text></g><g><title>type_collecting (1,870,492 samples, 3.14%)</title><rect x="55.6287%" y="181" width="3.1388%" height="15" fill="rgb(207,117,47)"/><text x="55.8787%" y="191.50">typ..</text></g><g><title>collect_mod_item_types (1,857,042 samples, 3.12%)</title><rect x="55.6513%" y="165" width="3.1162%" height="15" fill="rgb(249,43,39)"/><text x="55.9013%" y="175.50">col..</text></g><g><title>type_of (159,632 samples, 0.27%)</title><rect x="58.4997%" y="149" width="0.2679%" height="15" fill="rgb(209,38,44)"/><text x="58.7497%" y="159.50"></text></g><g><title>adt_sized_constraint (82,391 samples, 0.14%)</title><rect x="60.2849%" y="133" width="0.1383%" height="15" fill="rgb(236,212,23)"/><text x="60.5349%" y="143.50"></text></g><g><title>adt_def (77,171 samples, 0.13%)</title><rect x="60.2937%" y="117" width="0.1295%" height="15" fill="rgb(242,79,21)"/><text x="60.5437%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (75,031 samples, 0.13%)</title><rect x="60.2973%" y="101" width="0.1259%" height="15" fill="rgb(211,96,35)"/><text x="60.5473%" y="111.50"></text></g><g><title>evaluate_obligation (278,764 samples, 0.47%)</title><rect x="60.0382%" y="149" width="0.4678%" height="15" fill="rgb(253,215,40)"/><text x="60.2882%" y="159.50"></text></g><g><title>implied_outlives_bounds (110,861 samples, 0.19%)</title><rect x="60.5060%" y="149" width="0.1860%" height="15" fill="rgb(211,81,21)"/><text x="60.7560%" y="159.50"></text></g><g><title>evaluate_obligation (253,382 samples, 0.43%)</title><rect x="61.0684%" y="133" width="0.4252%" height="15" fill="rgb(208,190,38)"/><text x="61.3184%" y="143.50"></text></g><g><title>layout_of (84,220 samples, 0.14%)</title><rect x="61.6979%" y="117" width="0.1413%" height="15" fill="rgb(235,213,38)"/><text x="61.9479%" y="127.50"></text></g><g><title>layout_of (144,792 samples, 0.24%)</title><rect x="61.6031%" y="133" width="0.2430%" height="15" fill="rgb(237,122,38)"/><text x="61.8531%" y="143.50"></text></g><g><title>param_env (92,240 samples, 0.15%)</title><rect x="61.8461%" y="133" width="0.1548%" height="15" fill="rgb(244,218,35)"/><text x="62.0961%" y="143.50"></text></g><g><title>object_safety_violations (818,909 samples, 1.37%)</title><rect x="60.6920%" y="149" width="1.3742%" height="15" fill="rgb(240,68,47)"/><text x="60.9420%" y="159.50"></text></g><g><title>param_env (79,622 samples, 0.13%)</title><rect x="62.0662%" y="149" width="0.1336%" height="15" fill="rgb(210,16,53)"/><text x="62.3162%" y="159.50"></text></g><g><title>predicates_of (66,480 samples, 0.11%)</title><rect x="62.1998%" y="149" width="0.1116%" height="15" fill="rgb(235,124,12)"/><text x="62.4498%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,109,845 samples, 3.54%)</title><rect x="58.8933%" y="165" width="3.5404%" height="15" fill="rgb(224,169,11)"/><text x="59.1433%" y="175.50">chec..</text></g><g><title>region_scope_tree (72,930 samples, 0.12%)</title><rect x="62.3114%" y="149" width="0.1224%" height="15" fill="rgb(250,166,2)"/><text x="62.5614%" y="159.50"></text></g><g><title>evaluate_obligation (166,722 samples, 0.28%)</title><rect x="63.7991%" y="149" width="0.2798%" height="15" fill="rgb(242,216,29)"/><text x="64.0491%" y="159.50"></text></g><g><title>implied_outlives_bounds (76,680 samples, 0.13%)</title><rect x="64.0919%" y="149" width="0.1287%" height="15" fill="rgb(230,116,27)"/><text x="64.3419%" y="159.50"></text></g><g><title>param_env (124,442 samples, 0.21%)</title><rect x="64.2206%" y="149" width="0.2088%" height="15" fill="rgb(228,99,48)"/><text x="64.4706%" y="159.50"></text></g><g><title>predicates_of (97,710 samples, 0.16%)</title><rect x="64.4294%" y="149" width="0.1640%" height="15" fill="rgb(253,11,6)"/><text x="64.6794%" y="159.50"></text></g><g><title>predicates_defined_on (74,910 samples, 0.13%)</title><rect x="64.4676%" y="133" width="0.1257%" height="15" fill="rgb(247,143,39)"/><text x="64.7176%" y="143.50"></text></g><g><title>check_item_well_formed (1,371,482 samples, 2.30%)</title><rect x="62.4338%" y="165" width="2.3014%" height="15" fill="rgb(236,97,10)"/><text x="62.6838%" y="175.50">c..</text></g><g><title>analysis (37,958,949 samples, 63.70%)</title><rect x="1.2425%" y="213" width="63.6972%" height="15" fill="rgb(233,208,19)"/><text x="1.4925%" y="223.50">analysis</text></g><g><title>type_check_crate (32,281,604 samples, 54.17%)</title><rect x="10.7694%" y="197" width="54.1703%" height="15" fill="rgb(216,164,2)"/><text x="11.0194%" y="207.50">type_check_crate</text></g><g><title>wf_checking (3,677,031 samples, 6.17%)</title><rect x="58.7694%" y="181" width="6.1703%" height="15" fill="rgb(220,129,5)"/><text x="59.0194%" y="191.50">wf_check..</text></g><g><title>check_trait_item_well_formed (121,872 samples, 0.20%)</title><rect x="64.7352%" y="165" width="0.2045%" height="15" fill="rgb(242,17,10)"/><text x="64.9852%" y="175.50"></text></g><g><title>codegen_crate (580,846 samples, 0.97%)</title><rect x="64.9741%" y="213" width="0.9747%" height="15" fill="rgb(242,107,0)"/><text x="65.2241%" y="223.50"></text></g><g><title>AST_validation (94,151 samples, 0.16%)</title><rect x="66.2952%" y="197" width="0.1580%" height="15" fill="rgb(251,28,31)"/><text x="66.5452%" y="207.50"></text></g><g><title>crate_injection (113,022 samples, 0.19%)</title><rect x="66.4902%" y="197" width="0.1897%" height="15" fill="rgb(233,223,10)"/><text x="66.7402%" y="207.50"></text></g><g><title>metadata_load_macro (82,430 samples, 0.14%)</title><rect x="82.1547%" y="165" width="0.1383%" height="15" fill="rgb(215,21,27)"/><text x="82.4047%" y="175.50"></text></g><g><title>macro_expand_crate (11,878,994 samples, 19.93%)</title><rect x="66.6799%" y="197" width="19.9336%" height="15" fill="rgb(232,23,21)"/><text x="66.9299%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (11,862,734 samples, 19.91%)</title><rect x="66.7071%" y="181" width="19.9063%" height="15" fill="rgb(244,5,23)"/><text x="66.9571%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (2,574,659 samples, 4.32%)</title><rect x="82.2930%" y="165" width="4.3204%" height="15" fill="rgb(226,81,46)"/><text x="82.5430%" y="175.50">metad..</text></g><g><title>metadata_register_crate (927,130 samples, 1.56%)</title><rect x="85.0577%" y="149" width="1.5558%" height="15" fill="rgb(247,70,30)"/><text x="85.3077%" y="159.50"></text></g><g><title>metadata_register_crate (67,980 samples, 0.11%)</title><rect x="86.4994%" y="133" width="0.1141%" height="15" fill="rgb(212,68,19)"/><text x="86.7494%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (107,041 samples, 0.18%)</title><rect x="86.6207%" y="197" width="0.1796%" height="15" fill="rgb(240,187,13)"/><text x="86.8707%" y="207.50"></text></g><g><title>finalize_macro_resolutions (191,072 samples, 0.32%)</title><rect x="86.8586%" y="181" width="0.3206%" height="15" fill="rgb(223,113,26)"/><text x="87.1086%" y="191.50"></text></g><g><title>late_resolve_crate (1,089,233 samples, 1.83%)</title><rect x="87.1793%" y="181" width="1.8278%" height="15" fill="rgb(206,192,2)"/><text x="87.4293%" y="191.50">l..</text></g><g><title>configure_and_expand (13,793,685 samples, 23.15%)</title><rect x="65.9488%" y="213" width="23.1465%" height="15" fill="rgb(241,108,4)"/><text x="66.1988%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,367,635 samples, 2.29%)</title><rect x="86.8003%" y="197" width="2.2950%" height="15" fill="rgb(247,173,49)"/><text x="87.0503%" y="207.50">r..</text></g><g><title>drop_ast (63,870 samples, 0.11%)</title><rect x="89.0953%" y="213" width="0.1072%" height="15" fill="rgb(224,114,35)"/><text x="89.3453%" y="223.50"></text></g><g><title>early_lint_checks (143,522 samples, 0.24%)</title><rect x="89.2224%" y="213" width="0.2408%" height="15" fill="rgb(245,159,27)"/><text x="89.4724%" y="223.50"></text></g><g><title>free_global_ctxt (2,573,689 samples, 4.32%)</title><rect x="89.4632%" y="213" width="4.3188%" height="15" fill="rgb(245,172,44)"/><text x="89.7132%" y="223.50">free_..</text></g><g><title>crate_hash (67,741 samples, 0.11%)</title><rect x="94.2581%" y="197" width="0.1137%" height="15" fill="rgb(236,23,11)"/><text x="94.5081%" y="207.50"></text></g><g><title>generate_crate_metadata (424,705 samples, 0.71%)</title><rect x="93.7820%" y="213" width="0.7127%" height="15" fill="rgb(205,117,38)"/><text x="94.0320%" y="223.50"></text></g><g><title>hir_lowering (911,820 samples, 1.53%)</title><rect x="94.4947%" y="213" width="1.5301%" height="15" fill="rgb(237,72,25)"/><text x="94.7447%" y="223.50"></text></g><g><title>parse_crate (1,163,603 samples, 1.95%)</title><rect x="96.0943%" y="213" width="1.9526%" height="15" fill="rgb(244,70,9)"/><text x="96.3443%" y="223.50">p..</text></g><g><title>prepare_outputs (279,613 samples, 0.47%)</title><rect x="98.0638%" y="213" width="0.4692%" height="15" fill="rgb(217,125,39)"/><text x="98.3138%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (488,616 samples, 0.82%)</title><rect x="98.5330%" y="213" width="0.8199%" height="15" fill="rgb(235,36,10)"/><text x="98.7830%" y="223.50"></text></g><g><title>setup_global_ctxt (142,152 samples, 0.24%)</title><rect x="99.3723%" y="213" width="0.2385%" height="15" fill="rgb(251,123,47)"/><text x="99.6223%" y="223.50"></text></g><g><title>all (59,592,853 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (59,592,853 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (231,913 samples, 0.39%)</title><rect x="99.6108%" y="213" width="0.3892%" height="15" fill="rgb(211,50,8)"/><text x="99.8608%" y="223.50"></text></g></svg></svg>