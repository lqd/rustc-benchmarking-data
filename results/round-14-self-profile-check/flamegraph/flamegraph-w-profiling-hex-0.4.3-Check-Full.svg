<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (510,777 samples, 0.14%)</title><rect x="12.5496%" y="165" width="0.1441%" height="15" fill="rgb(227,0,7)"/><text x="12.7996%" y="175.50"></text></g><g><title>item_attrs (520,467 samples, 0.15%)</title><rect x="14.8500%" y="101" width="0.1468%" height="15" fill="rgb(217,0,24)"/><text x="15.1000%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (515,087 samples, 0.15%)</title><rect x="14.8515%" y="85" width="0.1453%" height="15" fill="rgb(221,193,54)"/><text x="15.1015%" y="95.50"></text></g><g><title>codegen_fn_attrs (591,818 samples, 0.17%)</title><rect x="14.8350%" y="117" width="0.1670%" height="15" fill="rgb(248,212,6)"/><text x="15.0850%" y="127.50"></text></g><g><title>is_copy_raw (3,556,845 samples, 1.00%)</title><rect x="17.6724%" y="101" width="1.0035%" height="15" fill="rgb(208,68,35)"/><text x="17.9224%" y="111.50"></text></g><g><title>evaluate_obligation (3,009,456 samples, 0.85%)</title><rect x="17.8268%" y="85" width="0.8490%" height="15" fill="rgb(232,128,0)"/><text x="18.0768%" y="95.50"></text></g><g><title>needs_drop_raw (664,887 samples, 0.19%)</title><rect x="18.6769%" y="101" width="0.1876%" height="15" fill="rgb(207,160,47)"/><text x="18.9269%" y="111.50"></text></g><g><title>is_copy_raw (373,864 samples, 0.11%)</title><rect x="18.7590%" y="85" width="0.1055%" height="15" fill="rgb(228,23,34)"/><text x="19.0090%" y="95.50"></text></g><g><title>thir_body (3,822,158 samples, 1.08%)</title><rect x="18.9498%" y="101" width="1.0783%" height="15" fill="rgb(218,30,26)"/><text x="19.1998%" y="111.50"></text></g><g><title>mir_const (22,619,838 samples, 6.38%)</title><rect x="13.6555%" y="149" width="6.3815%" height="15" fill="rgb(220,122,19)"/><text x="13.9055%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (19,827,496 samples, 5.59%)</title><rect x="14.4433%" y="133" width="5.5937%" height="15" fill="rgb(250,228,42)"/><text x="14.6933%" y="143.50">unsafet..</text></g><g><title>mir_built (17,847,066 samples, 5.03%)</title><rect x="15.0020%" y="117" width="5.0350%" height="15" fill="rgb(240,193,28)"/><text x="15.2520%" y="127.50">mir_bu..</text></g><g><title>thir_body (500,036 samples, 0.14%)</title><rect x="21.6709%" y="85" width="0.1411%" height="15" fill="rgb(216,20,37)"/><text x="21.9209%" y="95.50"></text></g><g><title>mir_const_qualif (6,350,252 samples, 1.79%)</title><rect x="20.0370%" y="149" width="1.7915%" height="15" fill="rgb(206,188,39)"/><text x="20.2870%" y="159.50">m..</text></g><g><title>mir_const (5,167,860 samples, 1.46%)</title><rect x="20.3706%" y="133" width="1.4580%" height="15" fill="rgb(217,207,13)"/><text x="20.6206%" y="143.50"></text></g><g><title>unsafety_check_result (3,483,562 samples, 0.98%)</title><rect x="20.8457%" y="117" width="0.9828%" height="15" fill="rgb(231,73,38)"/><text x="21.0957%" y="127.50"></text></g><g><title>mir_built (3,011,845 samples, 0.85%)</title><rect x="20.9788%" y="101" width="0.8497%" height="15" fill="rgb(225,20,46)"/><text x="21.2288%" y="111.50"></text></g><g><title>mir_promoted (32,373,903 samples, 9.13%)</title><rect x="12.6953%" y="165" width="9.1333%" height="15" fill="rgb(210,31,41)"/><text x="12.9453%" y="175.50">mir_promoted</text></g><g><title>type_op_normalize_fn_sig (360,543 samples, 0.10%)</title><rect x="21.8993%" y="165" width="0.1017%" height="15" fill="rgb(221,200,47)"/><text x="22.1493%" y="175.50"></text></g><g><title>type_op_normalize_ty (2,617,428 samples, 0.74%)</title><rect x="22.0682%" y="165" width="0.7384%" height="15" fill="rgb(226,26,5)"/><text x="22.3182%" y="175.50"></text></g><g><title>normalize_projection_ty (1,741,772 samples, 0.49%)</title><rect x="22.3153%" y="149" width="0.4914%" height="15" fill="rgb(249,33,26)"/><text x="22.5653%" y="159.50"></text></g><g><title>type_op_prove_predicate (7,041,566 samples, 1.99%)</title><rect x="22.8067%" y="165" width="1.9866%" height="15" fill="rgb(235,183,28)"/><text x="23.0567%" y="175.50">t..</text></g><g><title>evaluate_obligation (582,256 samples, 0.16%)</title><rect x="24.6290%" y="149" width="0.1643%" height="15" fill="rgb(221,5,38)"/><text x="24.8790%" y="159.50"></text></g><g><title>MIR_borrow_checking (86,400,582 samples, 24.38%)</title><rect x="0.4199%" y="197" width="24.3753%" height="15" fill="rgb(247,18,42)"/><text x="0.6699%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (85,656,555 samples, 24.17%)</title><rect x="0.6298%" y="181" width="24.1654%" height="15" fill="rgb(241,131,45)"/><text x="0.8798%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (3,213,666 samples, 0.91%)</title><rect x="24.7951%" y="197" width="0.9066%" height="15" fill="rgb(249,31,29)"/><text x="25.0451%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,808,163 samples, 0.79%)</title><rect x="24.9095%" y="181" width="0.7922%" height="15" fill="rgb(225,111,53)"/><text x="25.1595%" y="191.50"></text></g><g><title>hir_module_items (462,605 samples, 0.13%)</title><rect x="25.7018%" y="197" width="0.1305%" height="15" fill="rgb(238,160,17)"/><text x="25.9518%" y="207.50"></text></g><g><title>codegen_fn_attrs (660,928 samples, 0.19%)</title><rect x="26.0144%" y="165" width="0.1865%" height="15" fill="rgb(214,148,48)"/><text x="26.2644%" y="175.50"></text></g><g><title>check_mod_attrs (1,289,754 samples, 0.36%)</title><rect x="25.8371%" y="181" width="0.3639%" height="15" fill="rgb(232,36,49)"/><text x="26.0871%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (689,998 samples, 0.19%)</title><rect x="26.3347%" y="181" width="0.1947%" height="15" fill="rgb(209,103,24)"/><text x="26.5847%" y="191.50"></text></g><g><title>misc_checking_1 (2,559,218 samples, 0.72%)</title><rect x="25.8324%" y="197" width="0.7220%" height="15" fill="rgb(229,88,8)"/><text x="26.0824%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,365,155 samples, 0.39%)</title><rect x="26.5550%" y="181" width="0.3851%" height="15" fill="rgb(213,181,19)"/><text x="26.8050%" y="191.50"></text></g><g><title>check_mod_liveness (1,138,612 samples, 0.32%)</title><rect x="26.6189%" y="165" width="0.3212%" height="15" fill="rgb(254,191,54)"/><text x="26.8689%" y="175.50"></text></g><g><title>misc_checking_2 (3,170,676 samples, 0.89%)</title><rect x="26.5544%" y="197" width="0.8945%" height="15" fill="rgb(241,83,37)"/><text x="26.8044%" y="207.50"></text></g><g><title>match_checking (1,803,461 samples, 0.51%)</title><rect x="26.9401%" y="181" width="0.5088%" height="15" fill="rgb(233,36,39)"/><text x="27.1901%" y="191.50"></text></g><g><title>check_match (1,617,898 samples, 0.46%)</title><rect x="26.9925%" y="165" width="0.4564%" height="15" fill="rgb(226,3,54)"/><text x="27.2425%" y="175.50"></text></g><g><title>check_private_in_public (533,526 samples, 0.15%)</title><rect x="27.4519%" y="181" width="0.1505%" height="15" fill="rgb(245,192,40)"/><text x="27.7019%" y="191.50"></text></g><g><title>death_checking (908,750 samples, 0.26%)</title><rect x="27.6024%" y="181" width="0.2564%" height="15" fill="rgb(238,167,29)"/><text x="27.8524%" y="191.50"></text></g><g><title>crate_lints (2,803,122 samples, 0.79%)</title><rect x="27.8592%" y="165" width="0.7908%" height="15" fill="rgb(232,182,51)"/><text x="28.1092%" y="175.50"></text></g><g><title>type_of (1,155,004 samples, 0.33%)</title><rect x="28.3242%" y="149" width="0.3258%" height="15" fill="rgb(231,60,39)"/><text x="28.5742%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (926,280 samples, 0.26%)</title><rect x="28.3887%" y="133" width="0.2613%" height="15" fill="rgb(208,69,12)"/><text x="28.6387%" y="143.50"></text></g><g><title>lint_checking (4,170,007 samples, 1.18%)</title><rect x="27.8588%" y="181" width="1.1764%" height="15" fill="rgb(235,93,37)"/><text x="28.1088%" y="191.50"></text></g><g><title>module_lints (1,365,415 samples, 0.39%)</title><rect x="28.6500%" y="165" width="0.3852%" height="15" fill="rgb(213,116,39)"/><text x="28.9000%" y="175.50"></text></g><g><title>lint_mod (1,360,895 samples, 0.38%)</title><rect x="28.6513%" y="149" width="0.3839%" height="15" fill="rgb(222,207,29)"/><text x="28.9013%" y="159.50"></text></g><g><title>privacy_access_levels (928,730 samples, 0.26%)</title><rect x="29.0352%" y="181" width="0.2620%" height="15" fill="rgb(206,96,30)"/><text x="29.2852%" y="191.50"></text></g><g><title>privacy_checking_modules (2,996,593 samples, 0.85%)</title><rect x="29.2972%" y="181" width="0.8454%" height="15" fill="rgb(218,138,4)"/><text x="29.5472%" y="191.50"></text></g><g><title>check_mod_privacy (2,994,133 samples, 0.84%)</title><rect x="29.2979%" y="165" width="0.8447%" height="15" fill="rgb(250,191,14)"/><text x="29.5479%" y="175.50"></text></g><g><title>misc_checking_3 (9,569,436 samples, 2.70%)</title><rect x="27.4489%" y="197" width="2.6997%" height="15" fill="rgb(239,60,40)"/><text x="27.6989%" y="207.50">mi..</text></g><g><title>impl_parent (2,418,534 samples, 0.68%)</title><rect x="34.3574%" y="133" width="0.6823%" height="15" fill="rgb(206,27,48)"/><text x="34.6074%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,323,074 samples, 0.37%)</title><rect x="34.6665%" y="117" width="0.3733%" height="15" fill="rgb(225,35,8)"/><text x="34.9165%" y="127.50"></text></g><g><title>impl_trait_ref (5,112,872 samples, 1.44%)</title><rect x="35.0397%" y="133" width="1.4424%" height="15" fill="rgb(250,213,24)"/><text x="35.2897%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,068,264 samples, 1.15%)</title><rect x="35.3344%" y="117" width="1.1477%" height="15" fill="rgb(247,123,22)"/><text x="35.5844%" y="127.50"></text></g><g><title>coherent_trait (22,955,276 samples, 6.48%)</title><rect x="30.2249%" y="165" width="6.4761%" height="15" fill="rgb(231,138,38)"/><text x="30.4749%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (22,433,241 samples, 6.33%)</title><rect x="30.3721%" y="149" width="6.3288%" height="15" fill="rgb(231,145,46)"/><text x="30.6221%" y="159.50">speciali..</text></g><g><title>trait_impls_of (773,237 samples, 0.22%)</title><rect x="36.4828%" y="133" width="0.2181%" height="15" fill="rgb(251,118,11)"/><text x="36.7328%" y="143.50"></text></g><g><title>coherence_checking (23,087,227 samples, 6.51%)</title><rect x="30.2179%" y="181" width="6.5133%" height="15" fill="rgb(217,147,25)"/><text x="30.4679%" y="191.50">coherence..</text></g><g><title>dropck_outlives (936,539 samples, 0.26%)</title><rect x="55.9837%" y="133" width="0.2642%" height="15" fill="rgb(247,81,37)"/><text x="56.2337%" y="143.50"></text></g><g><title>evaluate_obligation (5,426,804 samples, 1.53%)</title><rect x="56.2480%" y="133" width="1.5310%" height="15" fill="rgb(209,12,38)"/><text x="56.4980%" y="143.50"></text></g><g><title>explicit_predicates_of (864,712 samples, 0.24%)</title><rect x="58.8146%" y="85" width="0.2440%" height="15" fill="rgb(227,1,9)"/><text x="59.0646%" y="95.50"></text></g><g><title>generics_of (491,171 samples, 0.14%)</title><rect x="58.9200%" y="69" width="0.1386%" height="15" fill="rgb(248,47,43)"/><text x="59.1700%" y="79.50"></text></g><g><title>param_env (3,608,300 samples, 1.02%)</title><rect x="58.0594%" y="133" width="1.0180%" height="15" fill="rgb(221,10,30)"/><text x="58.3094%" y="143.50"></text></g><g><title>predicates_of (1,499,253 samples, 0.42%)</title><rect x="58.6544%" y="117" width="0.4230%" height="15" fill="rgb(210,229,1)"/><text x="58.9044%" y="127.50"></text></g><g><title>predicates_defined_on (1,281,178 samples, 0.36%)</title><rect x="58.7159%" y="101" width="0.3614%" height="15" fill="rgb(222,148,37)"/><text x="58.9659%" y="111.50"></text></g><g><title>region_scope_tree (610,608 samples, 0.17%)</title><rect x="59.1241%" y="133" width="0.1723%" height="15" fill="rgb(234,67,33)"/><text x="59.3741%" y="143.50"></text></g><g><title>generics_of (616,881 samples, 0.17%)</title><rect x="61.2017%" y="101" width="0.1740%" height="15" fill="rgb(247,98,35)"/><text x="61.4517%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (479,381 samples, 0.14%)</title><rect x="61.2405%" y="85" width="0.1352%" height="15" fill="rgb(247,138,52)"/><text x="61.4905%" y="95.50"></text></g><g><title>impl_trait_ref (864,777 samples, 0.24%)</title><rect x="61.3920%" y="101" width="0.2440%" height="15" fill="rgb(213,79,30)"/><text x="61.6420%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (725,466 samples, 0.20%)</title><rect x="61.4313%" y="85" width="0.2047%" height="15" fill="rgb(246,177,23)"/><text x="61.6813%" y="95.50"></text></g><g><title>specializes (689,795 samples, 0.19%)</title><rect x="61.7157%" y="101" width="0.1946%" height="15" fill="rgb(230,62,27)"/><text x="61.9657%" y="111.50"></text></g><g><title>param_env (399,843 samples, 0.11%)</title><rect x="61.7975%" y="85" width="0.1128%" height="15" fill="rgb(216,154,8)"/><text x="62.0475%" y="95.50"></text></g><g><title>trait_impls_of (378,852 samples, 0.11%)</title><rect x="61.9135%" y="101" width="0.1069%" height="15" fill="rgb(244,35,45)"/><text x="62.1635%" y="111.50"></text></g><g><title>evaluate_obligation (5,107,736 samples, 1.44%)</title><rect x="60.5830%" y="117" width="1.4410%" height="15" fill="rgb(251,115,12)"/><text x="60.8330%" y="127.50"></text></g><g><title>typeck (10,417,086 samples, 2.94%)</title><rect x="59.3378%" y="133" width="2.9389%" height="15" fill="rgb(240,54,50)"/><text x="59.5878%" y="143.50">ty..</text></g><g><title>item_bodies_checking (90,548,578 samples, 25.55%)</title><rect x="36.7625%" y="181" width="25.5455%" height="15" fill="rgb(233,84,52)"/><text x="37.0125%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (90,544,948 samples, 25.54%)</title><rect x="36.7635%" y="165" width="25.5445%" height="15" fill="rgb(207,117,47)"/><text x="37.0135%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (89,987,768 samples, 25.39%)</title><rect x="36.9207%" y="149" width="25.3873%" height="15" fill="rgb(249,43,39)"/><text x="37.1707%" y="159.50">typeck</text></g><g><title>evaluate_obligation (578,859 samples, 0.16%)</title><rect x="67.3515%" y="37" width="0.1633%" height="15" fill="rgb(209,38,44)"/><text x="67.6015%" y="47.50"></text></g><g><title>mir_const (1,766,780 samples, 0.50%)</title><rect x="67.0618%" y="101" width="0.4984%" height="15" fill="rgb(236,212,23)"/><text x="67.3118%" y="111.50"></text></g><g><title>unsafety_check_result (1,661,869 samples, 0.47%)</title><rect x="67.0914%" y="85" width="0.4688%" height="15" fill="rgb(242,79,21)"/><text x="67.3414%" y="95.50"></text></g><g><title>mir_built (1,551,968 samples, 0.44%)</title><rect x="67.1224%" y="69" width="0.4378%" height="15" fill="rgb(211,96,35)"/><text x="67.3724%" y="79.50"></text></g><g><title>typeck (1,289,864 samples, 0.36%)</title><rect x="67.1964%" y="53" width="0.3639%" height="15" fill="rgb(253,215,40)"/><text x="67.4464%" y="63.50"></text></g><g><title>mir_promoted (1,817,301 samples, 0.51%)</title><rect x="67.0490%" y="117" width="0.5127%" height="15" fill="rgb(211,81,21)"/><text x="67.2990%" y="127.50"></text></g><g><title>type_of (2,320,466 samples, 0.65%)</title><rect x="66.9295%" y="149" width="0.6546%" height="15" fill="rgb(208,190,38)"/><text x="67.1795%" y="159.50"></text></g><g><title>mir_borrowck (2,309,596 samples, 0.65%)</title><rect x="66.9326%" y="133" width="0.6516%" height="15" fill="rgb(235,213,38)"/><text x="67.1826%" y="143.50"></text></g><g><title>item_types_checking (18,889,340 samples, 5.33%)</title><rect x="62.3080%" y="181" width="5.3290%" height="15" fill="rgb(237,122,38)"/><text x="62.5580%" y="191.50">item_ty..</text></g><g><title>check_mod_item_types (18,884,440 samples, 5.33%)</title><rect x="62.3094%" y="165" width="5.3277%" height="15" fill="rgb(244,218,35)"/><text x="62.5594%" y="175.50">check_m..</text></g><g><title>fn_sig (1,170,352 samples, 0.33%)</title><rect x="67.8760%" y="149" width="0.3302%" height="15" fill="rgb(240,68,47)"/><text x="68.1260%" y="159.50"></text></g><g><title>is_late_bound_map (705,777 samples, 0.20%)</title><rect x="68.3123%" y="133" width="0.1991%" height="15" fill="rgb(210,16,53)"/><text x="68.5623%" y="143.50"></text></g><g><title>resolve_lifetimes (700,927 samples, 0.20%)</title><rect x="68.3136%" y="117" width="0.1977%" height="15" fill="rgb(235,124,12)"/><text x="68.5636%" y="127.50"></text></g><g><title>lint_levels (620,817 samples, 0.18%)</title><rect x="68.3362%" y="101" width="0.1751%" height="15" fill="rgb(224,169,11)"/><text x="68.5862%" y="111.50"></text></g><g><title>generics_of (1,228,580 samples, 0.35%)</title><rect x="68.2062%" y="149" width="0.3466%" height="15" fill="rgb(250,166,2)"/><text x="68.4562%" y="159.50"></text></g><g><title>late_bound_vars_map (1,106,503 samples, 0.31%)</title><rect x="68.9387%" y="101" width="0.3122%" height="15" fill="rgb(242,216,29)"/><text x="69.1887%" y="111.50"></text></g><g><title>resolve_lifetimes (1,003,371 samples, 0.28%)</title><rect x="68.9678%" y="85" width="0.2831%" height="15" fill="rgb(230,116,27)"/><text x="69.2178%" y="95.50"></text></g><g><title>explicit_predicates_of (1,824,460 samples, 0.51%)</title><rect x="68.7519%" y="117" width="0.5147%" height="15" fill="rgb(228,99,48)"/><text x="69.0019%" y="127.50"></text></g><g><title>predicates_of (2,538,617 samples, 0.72%)</title><rect x="68.6028%" y="149" width="0.7162%" height="15" fill="rgb(253,11,6)"/><text x="68.8528%" y="159.50"></text></g><g><title>predicates_defined_on (2,334,606 samples, 0.66%)</title><rect x="68.6604%" y="133" width="0.6586%" height="15" fill="rgb(247,143,39)"/><text x="68.9104%" y="143.50"></text></g><g><title>type_collecting (6,545,343 samples, 1.85%)</title><rect x="67.6373%" y="181" width="1.8466%" height="15" fill="rgb(236,97,10)"/><text x="67.8873%" y="191.50">t..</text></g><g><title>collect_mod_item_types (6,537,343 samples, 1.84%)</title><rect x="67.6395%" y="165" width="1.8443%" height="15" fill="rgb(233,208,19)"/><text x="67.8895%" y="175.50">c..</text></g><g><title>type_of (534,556 samples, 0.15%)</title><rect x="69.3331%" y="149" width="0.1508%" height="15" fill="rgb(216,164,2)"/><text x="69.5831%" y="159.50"></text></g><g><title>evaluate_obligation (873,001 samples, 0.25%)</title><rect x="74.6659%" y="149" width="0.2463%" height="15" fill="rgb(220,129,5)"/><text x="74.9159%" y="159.50"></text></g><g><title>implied_outlives_bounds (990,046 samples, 0.28%)</title><rect x="75.0102%" y="149" width="0.2793%" height="15" fill="rgb(242,17,10)"/><text x="75.2602%" y="159.50"></text></g><g><title>param_env (1,566,869 samples, 0.44%)</title><rect x="75.2895%" y="149" width="0.4420%" height="15" fill="rgb(242,107,0)"/><text x="75.5395%" y="159.50"></text></g><g><title>check_impl_item_well_formed (22,704,825 samples, 6.41%)</title><rect x="69.7129%" y="165" width="6.4055%" height="15" fill="rgb(251,28,31)"/><text x="69.9629%" y="175.50">check_im..</text></g><g><title>region_scope_tree (1,356,696 samples, 0.38%)</title><rect x="75.7356%" y="149" width="0.3827%" height="15" fill="rgb(233,223,10)"/><text x="75.9856%" y="159.50"></text></g><g><title>evaluate_obligation (11,660,121 samples, 3.29%)</title><rect x="77.1812%" y="149" width="3.2895%" height="15" fill="rgb(215,21,27)"/><text x="77.4312%" y="159.50">eva..</text></g><g><title>implied_outlives_bounds (441,526 samples, 0.12%)</title><rect x="80.4911%" y="149" width="0.1246%" height="15" fill="rgb(232,23,21)"/><text x="80.7411%" y="159.50"></text></g><g><title>param_env (806,151 samples, 0.23%)</title><rect x="80.6156%" y="149" width="0.2274%" height="15" fill="rgb(244,5,23)"/><text x="80.8656%" y="159.50"></text></g><g><title>check_item_well_formed (17,174,195 samples, 4.85%)</title><rect x="76.1183%" y="165" width="4.8452%" height="15" fill="rgb(226,81,46)"/><text x="76.3683%" y="175.50">check_..</text></g><g><title>analysis (286,523,190 samples, 80.83%)</title><rect x="0.2110%" y="213" width="80.8337%" height="15" fill="rgb(247,70,30)"/><text x="0.4610%" y="223.50">analysis</text></g><g><title>type_check_crate (180,405,988 samples, 50.90%)</title><rect x="30.1487%" y="197" width="50.8960%" height="15" fill="rgb(212,68,19)"/><text x="30.3987%" y="207.50">type_check_crate</text></g><g><title>wf_checking (40,942,226 samples, 11.55%)</title><rect x="69.4941%" y="181" width="11.5506%" height="15" fill="rgb(240,187,13)"/><text x="69.7441%" y="191.50">wf_checking</text></g><g><title>AST_validation (417,915 samples, 0.12%)</title><rect x="81.1987%" y="197" width="0.1179%" height="15" fill="rgb(223,113,26)"/><text x="81.4487%" y="207.50"></text></g><g><title>metadata_register_crate (2,366,036 samples, 0.67%)</title><rect x="89.4158%" y="165" width="0.6675%" height="15" fill="rgb(206,192,2)"/><text x="89.6658%" y="175.50"></text></g><g><title>metadata_register_crate (856,679 samples, 0.24%)</title><rect x="89.8417%" y="149" width="0.2417%" height="15" fill="rgb(241,108,4)"/><text x="90.0917%" y="159.50"></text></g><g><title>macro_expand_crate (30,785,632 samples, 8.69%)</title><rect x="81.4059%" y="197" width="8.6852%" height="15" fill="rgb(247,173,49)"/><text x="81.6559%" y="207.50">macro_expand..</text></g><g><title>expand_crate (30,770,592 samples, 8.68%)</title><rect x="81.4101%" y="181" width="8.6810%" height="15" fill="rgb(224,114,35)"/><text x="81.6601%" y="191.50">expand_crate</text></g><g><title>late_resolve_crate (6,825,466 samples, 1.93%)</title><rect x="90.2344%" y="181" width="1.9256%" height="15" fill="rgb(245,159,27)"/><text x="90.4844%" y="191.50">l..</text></g><g><title>configure_and_expand (39,340,818 samples, 11.10%)</title><rect x="81.1461%" y="213" width="11.0988%" height="15" fill="rgb(245,172,44)"/><text x="81.3961%" y="223.50">configure_and_ex..</text></g><g><title>resolve_crate (7,402,323 samples, 2.09%)</title><rect x="90.1565%" y="197" width="2.0883%" height="15" fill="rgb(236,23,11)"/><text x="90.4065%" y="207.50">r..</text></g><g><title>early_lint_checks (700,618 samples, 0.20%)</title><rect x="92.3398%" y="213" width="0.1977%" height="15" fill="rgb(205,117,38)"/><text x="92.5898%" y="223.50"></text></g><g><title>free_global_ctxt (4,927,794 samples, 1.39%)</title><rect x="92.5375%" y="213" width="1.3902%" height="15" fill="rgb(237,72,25)"/><text x="92.7875%" y="223.50"></text></g><g><title>mir_for_ctfe (852,030 samples, 0.24%)</title><rect x="95.0561%" y="197" width="0.2404%" height="15" fill="rgb(244,70,9)"/><text x="95.3061%" y="207.50"></text></g><g><title>generate_crate_metadata (5,035,316 samples, 1.42%)</title><rect x="93.9277%" y="213" width="1.4206%" height="15" fill="rgb(217,125,39)"/><text x="94.1777%" y="223.50"></text></g><g><title>hir_lowering (10,653,569 samples, 3.01%)</title><rect x="95.3482%" y="213" width="3.0056%" height="15" fill="rgb(235,36,10)"/><text x="95.5982%" y="223.50">hir..</text></g><g><title>parse_crate (3,519,370 samples, 0.99%)</title><rect x="98.3779%" y="213" width="0.9929%" height="15" fill="rgb(251,123,47)"/><text x="98.6279%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,381,406 samples, 0.39%)</title><rect x="99.4609%" y="213" width="0.3897%" height="15" fill="rgb(221,13,13)"/><text x="99.7109%" y="223.50"></text></g><g><title>all (354,460,106 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (354,460,106 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (437,605 samples, 0.12%)</title><rect x="99.8765%" y="213" width="0.1235%" height="15" fill="rgb(245,182,24)"/><text x="100.1265%" y="223.50"></text></g></svg></svg>