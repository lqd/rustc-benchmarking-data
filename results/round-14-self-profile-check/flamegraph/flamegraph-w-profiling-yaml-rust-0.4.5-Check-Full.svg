<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (683,446 samples, 0.17%)</title><rect x="19.8987%" y="101" width="0.1707%" height="15" fill="rgb(227,0,7)"/><text x="20.1487%" y="111.50"></text></g><g><title>item_attrs (551,716 samples, 0.14%)</title><rect x="20.7227%" y="69" width="0.1378%" height="15" fill="rgb(217,0,24)"/><text x="20.9727%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (530,016 samples, 0.13%)</title><rect x="20.7281%" y="53" width="0.1324%" height="15" fill="rgb(221,193,54)"/><text x="20.9781%" y="63.50"></text></g><g><title>codegen_fn_attrs (775,969 samples, 0.19%)</title><rect x="20.6759%" y="85" width="0.1938%" height="15" fill="rgb(248,212,6)"/><text x="20.9259%" y="95.50"></text></g><g><title>needs_drop_raw (2,580,404 samples, 0.64%)</title><rect x="25.3539%" y="69" width="0.6445%" height="15" fill="rgb(208,68,35)"/><text x="25.6039%" y="79.50"></text></g><g><title>is_copy_raw (1,964,815 samples, 0.49%)</title><rect x="25.5077%" y="53" width="0.4907%" height="15" fill="rgb(232,128,0)"/><text x="25.7577%" y="63.50"></text></g><g><title>evaluate_obligation (1,672,972 samples, 0.42%)</title><rect x="25.5806%" y="37" width="0.4178%" height="15" fill="rgb(207,160,47)"/><text x="25.8306%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (458,274 samples, 0.11%)</title><rect x="26.1317%" y="53" width="0.1145%" height="15" fill="rgb(228,23,34)"/><text x="26.3817%" y="63.50"></text></g><g><title>specialization_graph_of (464,365 samples, 0.12%)</title><rect x="26.2913%" y="53" width="0.1160%" height="15" fill="rgb(218,30,26)"/><text x="26.5413%" y="63.50"></text></g><g><title>resolve_instance (1,792,269 samples, 0.45%)</title><rect x="26.0072%" y="69" width="0.4476%" height="15" fill="rgb(220,122,19)"/><text x="26.2572%" y="79.50"></text></g><g><title>thir_body (7,511,428 samples, 1.88%)</title><rect x="26.4762%" y="69" width="1.8761%" height="15" fill="rgb(250,228,42)"/><text x="26.7262%" y="79.50">t..</text></g><g><title>mir_const (38,537,790 samples, 9.63%)</title><rect x="18.7415%" y="117" width="9.6252%" height="15" fill="rgb(240,193,28)"/><text x="18.9915%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (33,220,896 samples, 8.30%)</title><rect x="20.0694%" y="101" width="8.2973%" height="15" fill="rgb(216,20,37)"/><text x="20.3194%" y="111.50">unsafety_che..</text></g><g><title>mir_built (30,016,542 samples, 7.50%)</title><rect x="20.8697%" y="85" width="7.4969%" height="15" fill="rgb(206,188,39)"/><text x="21.1197%" y="95.50">mir_built</text></g><g><title>mir_promoted (43,684,336 samples, 10.91%)</title><rect x="17.5774%" y="133" width="10.9106%" height="15" fill="rgb(217,207,13)"/><text x="17.8274%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (485,845 samples, 0.12%)</title><rect x="28.3667%" y="117" width="0.1213%" height="15" fill="rgb(231,73,38)"/><text x="28.6167%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (662,256 samples, 0.17%)</title><rect x="28.4880%" y="133" width="0.1654%" height="15" fill="rgb(225,20,46)"/><text x="28.7380%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,352,145 samples, 0.34%)</title><rect x="28.6534%" y="133" width="0.3377%" height="15" fill="rgb(210,31,41)"/><text x="28.9034%" y="143.50"></text></g><g><title>normalize_projection_ty (905,972 samples, 0.23%)</title><rect x="28.7649%" y="117" width="0.2263%" height="15" fill="rgb(221,200,47)"/><text x="29.0149%" y="127.50"></text></g><g><title>type_op_normalize_predicate (415,263 samples, 0.10%)</title><rect x="28.9912%" y="133" width="0.1037%" height="15" fill="rgb(226,26,5)"/><text x="29.2412%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,943,569 samples, 1.23%)</title><rect x="29.0992%" y="133" width="1.2347%" height="15" fill="rgb(249,33,26)"/><text x="29.3492%" y="143.50"></text></g><g><title>MIR_borrow_checking (119,235,122 samples, 29.78%)</title><rect x="0.5562%" y="165" width="29.7802%" height="15" fill="rgb(235,183,28)"/><text x="0.8062%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (118,828,235 samples, 29.68%)</title><rect x="0.6578%" y="149" width="29.6786%" height="15" fill="rgb(221,5,38)"/><text x="0.9078%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (716,167 samples, 0.18%)</title><rect x="30.3900%" y="165" width="0.1789%" height="15" fill="rgb(247,18,42)"/><text x="30.6400%" y="175.50"></text></g><g><title>should_inherit_track_caller (477,994 samples, 0.12%)</title><rect x="30.9051%" y="117" width="0.1194%" height="15" fill="rgb(241,131,45)"/><text x="31.1551%" y="127.50"></text></g><g><title>codegen_fn_attrs (712,716 samples, 0.18%)</title><rect x="30.8515%" y="133" width="0.1780%" height="15" fill="rgb(249,31,29)"/><text x="31.1015%" y="143.50"></text></g><g><title>check_mod_attrs (1,818,331 samples, 0.45%)</title><rect x="30.5754%" y="149" width="0.4541%" height="15" fill="rgb(225,111,53)"/><text x="30.8254%" y="159.50"></text></g><g><title>check_mod_const_bodies (441,416 samples, 0.11%)</title><rect x="31.0295%" y="149" width="0.1102%" height="15" fill="rgb(238,160,17)"/><text x="31.2795%" y="159.50"></text></g><g><title>lint_levels (934,410 samples, 0.23%)</title><rect x="31.3446%" y="133" width="0.2334%" height="15" fill="rgb(214,148,48)"/><text x="31.5946%" y="143.50"></text></g><g><title>lookup_deprecation_entry (447,247 samples, 0.11%)</title><rect x="31.5780%" y="133" width="0.1117%" height="15" fill="rgb(232,36,49)"/><text x="31.8280%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,024,454 samples, 0.51%)</title><rect x="31.2169%" y="149" width="0.5056%" height="15" fill="rgb(209,103,24)"/><text x="31.4669%" y="159.50"></text></g><g><title>misc_checking_1 (4,709,654 samples, 1.18%)</title><rect x="30.5691%" y="165" width="1.1763%" height="15" fill="rgb(229,88,8)"/><text x="30.8191%" y="175.50"></text></g><g><title>check_mod_intrinsics (479,866 samples, 0.12%)</title><rect x="31.7482%" y="133" width="0.1199%" height="15" fill="rgb(213,181,19)"/><text x="31.9982%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (2,240,466 samples, 0.56%)</title><rect x="31.7459%" y="149" width="0.5596%" height="15" fill="rgb(254,191,54)"/><text x="31.9959%" y="159.50"></text></g><g><title>check_mod_liveness (1,751,240 samples, 0.44%)</title><rect x="31.8681%" y="133" width="0.4374%" height="15" fill="rgb(241,83,37)"/><text x="32.1181%" y="143.50"></text></g><g><title>misc_checking_2 (7,117,411 samples, 1.78%)</title><rect x="31.7454%" y="165" width="1.7776%" height="15" fill="rgb(233,36,39)"/><text x="31.9954%" y="175.50">m..</text></g><g><title>match_checking (4,874,825 samples, 1.22%)</title><rect x="32.3055%" y="149" width="1.2175%" height="15" fill="rgb(226,3,54)"/><text x="32.5555%" y="159.50"></text></g><g><title>check_match (4,766,834 samples, 1.19%)</title><rect x="32.3324%" y="133" width="1.1906%" height="15" fill="rgb(245,192,40)"/><text x="32.5824%" y="143.50"></text></g><g><title>check_private_in_public (726,798 samples, 0.18%)</title><rect x="33.5259%" y="149" width="0.1815%" height="15" fill="rgb(238,167,29)"/><text x="33.7759%" y="159.50"></text></g><g><title>death_checking (1,903,732 samples, 0.48%)</title><rect x="33.7074%" y="149" width="0.4755%" height="15" fill="rgb(232,182,51)"/><text x="33.9574%" y="159.50"></text></g><g><title>crate_lints (4,063,726 samples, 1.01%)</title><rect x="34.1834%" y="133" width="1.0150%" height="15" fill="rgb(231,60,39)"/><text x="34.4334%" y="143.50"></text></g><g><title>type_of (1,181,644 samples, 0.30%)</title><rect x="34.9032%" y="117" width="0.2951%" height="15" fill="rgb(208,69,12)"/><text x="35.1532%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (943,048 samples, 0.24%)</title><rect x="34.9628%" y="101" width="0.2355%" height="15" fill="rgb(235,93,37)"/><text x="35.2128%" y="111.50"></text></g><g><title>lint_checking (6,726,276 samples, 1.68%)</title><rect x="34.1829%" y="149" width="1.6800%" height="15" fill="rgb(213,116,39)"/><text x="34.4329%" y="159.50"></text></g><g><title>module_lints (2,660,550 samples, 0.66%)</title><rect x="35.1983%" y="133" width="0.6645%" height="15" fill="rgb(222,207,29)"/><text x="35.4483%" y="143.50"></text></g><g><title>lint_mod (2,652,840 samples, 0.66%)</title><rect x="35.2003%" y="117" width="0.6626%" height="15" fill="rgb(206,96,30)"/><text x="35.4503%" y="127.50"></text></g><g><title>privacy_access_levels (1,010,332 samples, 0.25%)</title><rect x="35.8628%" y="149" width="0.2523%" height="15" fill="rgb(218,138,4)"/><text x="36.1128%" y="159.50"></text></g><g><title>privacy_checking_modules (4,276,438 samples, 1.07%)</title><rect x="36.1152%" y="149" width="1.0681%" height="15" fill="rgb(250,191,14)"/><text x="36.3652%" y="159.50"></text></g><g><title>check_mod_privacy (4,271,598 samples, 1.07%)</title><rect x="36.1164%" y="133" width="1.0669%" height="15" fill="rgb(239,60,40)"/><text x="36.3664%" y="143.50"></text></g><g><title>misc_checking_3 (14,681,936 samples, 3.67%)</title><rect x="33.5230%" y="165" width="3.6670%" height="15" fill="rgb(206,27,48)"/><text x="33.7730%" y="175.50">misc..</text></g><g><title>impl_parent (3,074,911 samples, 0.77%)</title><rect x="38.5450%" y="101" width="0.7680%" height="15" fill="rgb(225,35,8)"/><text x="38.7950%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,674,506 samples, 0.42%)</title><rect x="38.8947%" y="85" width="0.4182%" height="15" fill="rgb(250,213,24)"/><text x="39.1447%" y="95.50"></text></g><g><title>impl_trait_ref (6,615,192 samples, 1.65%)</title><rect x="39.3129%" y="101" width="1.6522%" height="15" fill="rgb(247,123,22)"/><text x="39.5629%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,989,865 samples, 1.25%)</title><rect x="39.7189%" y="85" width="1.2463%" height="15" fill="rgb(231,138,38)"/><text x="39.9689%" y="95.50"></text></g><g><title>trait_impls_of (1,040,291 samples, 0.26%)</title><rect x="40.9804%" y="101" width="0.2598%" height="15" fill="rgb(231,145,46)"/><text x="41.2304%" y="111.50"></text></g><g><title>coherent_trait (16,016,400 samples, 4.00%)</title><rect x="37.2404%" y="133" width="4.0003%" height="15" fill="rgb(251,118,11)"/><text x="37.4904%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (15,482,674 samples, 3.87%)</title><rect x="37.3737%" y="117" width="3.8670%" height="15" fill="rgb(217,147,25)"/><text x="37.6237%" y="127.50">spec..</text></g><g><title>coherence_checking (16,152,552 samples, 4.03%)</title><rect x="37.2324%" y="149" width="4.0343%" height="15" fill="rgb(247,81,37)"/><text x="37.4824%" y="159.50">cohe..</text></g><g><title>associated_item (650,758 samples, 0.16%)</title><rect x="73.7472%" y="85" width="0.1625%" height="15" fill="rgb(209,12,38)"/><text x="73.9972%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (521,275 samples, 0.13%)</title><rect x="73.7795%" y="69" width="0.1302%" height="15" fill="rgb(227,1,9)"/><text x="74.0295%" y="79.50"></text></g><g><title>associated_items (981,154 samples, 0.25%)</title><rect x="73.6773%" y="101" width="0.2451%" height="15" fill="rgb(248,47,43)"/><text x="73.9273%" y="111.50"></text></g><g><title>dropck_outlives (864,030 samples, 0.22%)</title><rect x="73.9628%" y="101" width="0.2158%" height="15" fill="rgb(221,10,30)"/><text x="74.2128%" y="111.50"></text></g><g><title>generics_of (649,939 samples, 0.16%)</title><rect x="75.3851%" y="85" width="0.1623%" height="15" fill="rgb(210,229,1)"/><text x="75.6351%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (535,727 samples, 0.13%)</title><rect x="75.4137%" y="69" width="0.1338%" height="15" fill="rgb(222,148,37)"/><text x="75.6637%" y="79.50"></text></g><g><title>predicates_of (801,257 samples, 0.20%)</title><rect x="75.6428%" y="85" width="0.2001%" height="15" fill="rgb(234,67,33)"/><text x="75.8928%" y="95.50"></text></g><g><title>predicates_defined_on (504,862 samples, 0.13%)</title><rect x="75.7168%" y="69" width="0.1261%" height="15" fill="rgb(247,98,35)"/><text x="75.9668%" y="79.50"></text></g><g><title>specializes (621,886 samples, 0.16%)</title><rect x="75.8429%" y="85" width="0.1553%" height="15" fill="rgb(247,138,52)"/><text x="76.0929%" y="95.50"></text></g><g><title>param_env (400,873 samples, 0.10%)</title><rect x="75.8981%" y="69" width="0.1001%" height="15" fill="rgb(213,79,30)"/><text x="76.1481%" y="79.50"></text></g><g><title>trait_impls_of (477,266 samples, 0.12%)</title><rect x="76.0026%" y="85" width="0.1192%" height="15" fill="rgb(246,177,23)"/><text x="76.2526%" y="95.50"></text></g><g><title>evaluate_obligation (7,788,302 samples, 1.95%)</title><rect x="74.1794%" y="101" width="1.9452%" height="15" fill="rgb(230,62,27)"/><text x="74.4294%" y="111.50">e..</text></g><g><title>generics_of (841,314 samples, 0.21%)</title><rect x="76.2151%" y="101" width="0.2101%" height="15" fill="rgb(216,154,8)"/><text x="76.4651%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (648,660 samples, 0.16%)</title><rect x="76.2632%" y="85" width="0.1620%" height="15" fill="rgb(244,35,45)"/><text x="76.5132%" y="95.50"></text></g><g><title>method_autoderef_steps (895,915 samples, 0.22%)</title><rect x="76.6472%" y="101" width="0.2238%" height="15" fill="rgb(251,115,12)"/><text x="76.8972%" y="111.50"></text></g><g><title>evaluate_obligation (419,660 samples, 0.10%)</title><rect x="76.7662%" y="85" width="0.1048%" height="15" fill="rgb(240,54,50)"/><text x="77.0162%" y="95.50"></text></g><g><title>predicates_of (694,116 samples, 0.17%)</title><rect x="76.9159%" y="101" width="0.1734%" height="15" fill="rgb(233,84,52)"/><text x="77.1659%" y="111.50"></text></g><g><title>predicates_defined_on (480,893 samples, 0.12%)</title><rect x="76.9692%" y="85" width="0.1201%" height="15" fill="rgb(207,117,47)"/><text x="77.2192%" y="95.50"></text></g><g><title>evaluate_obligation (737,977 samples, 0.18%)</title><rect x="77.7334%" y="85" width="0.1843%" height="15" fill="rgb(249,43,39)"/><text x="77.9834%" y="95.50"></text></g><g><title>typeck (3,379,559 samples, 0.84%)</title><rect x="77.1782%" y="101" width="0.8441%" height="15" fill="rgb(209,38,44)"/><text x="77.4282%" y="111.50"></text></g><g><title>item_bodies_checking (147,244,347 samples, 36.78%)</title><rect x="41.2856%" y="149" width="36.7758%" height="15" fill="rgb(236,212,23)"/><text x="41.5356%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (147,240,227 samples, 36.77%)</title><rect x="41.2866%" y="133" width="36.7748%" height="15" fill="rgb(242,79,21)"/><text x="41.5366%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (146,937,951 samples, 36.70%)</title><rect x="41.3621%" y="117" width="36.6993%" height="15" fill="rgb(211,96,35)"/><text x="41.6121%" y="127.50">typeck</text></g><g><title>item_types_checking (2,599,510 samples, 0.65%)</title><rect x="78.0614%" y="149" width="0.6493%" height="15" fill="rgb(253,215,40)"/><text x="78.3114%" y="159.50"></text></g><g><title>check_mod_item_types (2,593,280 samples, 0.65%)</title><rect x="78.0630%" y="133" width="0.6477%" height="15" fill="rgb(211,81,21)"/><text x="78.3130%" y="143.50"></text></g><g><title>fn_sig (597,046 samples, 0.15%)</title><rect x="78.9194%" y="117" width="0.1491%" height="15" fill="rgb(208,190,38)"/><text x="79.1694%" y="127.50"></text></g><g><title>named_region_map (561,677 samples, 0.14%)</title><rect x="79.1577%" y="101" width="0.1403%" height="15" fill="rgb(235,213,38)"/><text x="79.4077%" y="111.50"></text></g><g><title>resolve_lifetimes (505,515 samples, 0.13%)</title><rect x="79.1718%" y="85" width="0.1263%" height="15" fill="rgb(237,122,38)"/><text x="79.4218%" y="95.50"></text></g><g><title>generics_of (949,823 samples, 0.24%)</title><rect x="79.0685%" y="117" width="0.2372%" height="15" fill="rgb(244,218,35)"/><text x="79.3185%" y="127.50"></text></g><g><title>late_bound_vars_map (558,126 samples, 0.14%)</title><rect x="79.4919%" y="69" width="0.1394%" height="15" fill="rgb(240,68,47)"/><text x="79.7419%" y="79.50"></text></g><g><title>resolve_lifetimes (552,586 samples, 0.14%)</title><rect x="79.4933%" y="53" width="0.1380%" height="15" fill="rgb(210,16,53)"/><text x="79.7433%" y="63.50"></text></g><g><title>explicit_predicates_of (836,230 samples, 0.21%)</title><rect x="79.4301%" y="85" width="0.2089%" height="15" fill="rgb(235,124,12)"/><text x="79.6801%" y="95.50"></text></g><g><title>predicates_of (1,960,086 samples, 0.49%)</title><rect x="79.3270%" y="117" width="0.4896%" height="15" fill="rgb(224,169,11)"/><text x="79.5770%" y="127.50"></text></g><g><title>predicates_defined_on (1,804,475 samples, 0.45%)</title><rect x="79.3659%" y="101" width="0.4507%" height="15" fill="rgb(250,166,2)"/><text x="79.6159%" y="111.50"></text></g><g><title>inferred_outlives_of (711,139 samples, 0.18%)</title><rect x="79.6389%" y="85" width="0.1776%" height="15" fill="rgb(242,216,29)"/><text x="79.8889%" y="95.50"></text></g><g><title>inferred_outlives_crate (659,377 samples, 0.16%)</title><rect x="79.6519%" y="69" width="0.1647%" height="15" fill="rgb(230,116,27)"/><text x="79.9019%" y="79.50"></text></g><g><title>type_of (417,715 samples, 0.10%)</title><rect x="79.7122%" y="53" width="0.1043%" height="15" fill="rgb(228,99,48)"/><text x="79.9622%" y="63.50"></text></g><g><title>type_collecting (4,637,032 samples, 1.16%)</title><rect x="78.7113%" y="149" width="1.1581%" height="15" fill="rgb(253,11,6)"/><text x="78.9613%" y="159.50"></text></g><g><title>collect_mod_item_types (4,622,062 samples, 1.15%)</title><rect x="78.7150%" y="133" width="1.1544%" height="15" fill="rgb(247,143,39)"/><text x="78.9650%" y="143.50"></text></g><g><title>evaluate_obligation (649,057 samples, 0.16%)</title><rect x="81.4755%" y="117" width="0.1621%" height="15" fill="rgb(236,97,10)"/><text x="81.7255%" y="127.50"></text></g><g><title>object_safety_violations (436,945 samples, 0.11%)</title><rect x="81.7344%" y="117" width="0.1091%" height="15" fill="rgb(233,208,19)"/><text x="81.9844%" y="127.50"></text></g><g><title>param_env (932,169 samples, 0.23%)</title><rect x="81.8435%" y="117" width="0.2328%" height="15" fill="rgb(216,164,2)"/><text x="82.0935%" y="127.50"></text></g><g><title>region_scope_tree (2,336,650 samples, 0.58%)</title><rect x="82.0809%" y="117" width="0.5836%" height="15" fill="rgb(220,129,5)"/><text x="82.3309%" y="127.50"></text></g><g><title>check_impl_item_well_formed (10,581,716 samples, 2.64%)</title><rect x="80.0257%" y="133" width="2.6429%" height="15" fill="rgb(242,17,10)"/><text x="80.2757%" y="143.50">ch..</text></g><g><title>evaluate_obligation (1,204,032 samples, 0.30%)</title><rect x="83.1780%" y="117" width="0.3007%" height="15" fill="rgb(242,107,0)"/><text x="83.4280%" y="127.50"></text></g><g><title>param_env (446,454 samples, 0.11%)</title><rect x="83.5465%" y="117" width="0.1115%" height="15" fill="rgb(251,28,31)"/><text x="83.7965%" y="127.50"></text></g><g><title>check_item_well_formed (4,353,773 samples, 1.09%)</title><rect x="82.6685%" y="133" width="1.0874%" height="15" fill="rgb(233,223,10)"/><text x="82.9185%" y="143.50"></text></g><g><title>analysis (334,510,487 samples, 83.55%)</title><rect x="0.2420%" y="181" width="83.5475%" height="15" fill="rgb(215,21,27)"/><text x="0.4920%" y="191.50">analysis</text></g><g><title>type_check_crate (186,577,020 samples, 46.60%)</title><rect x="37.1900%" y="165" width="46.5996%" height="15" fill="rgb(232,23,21)"/><text x="37.4400%" y="175.50">type_check_crate</text></g><g><title>wf_checking (15,679,616 samples, 3.92%)</title><rect x="79.8734%" y="149" width="3.9161%" height="15" fill="rgb(244,5,23)"/><text x="80.1234%" y="159.50">wf_c..</text></g><g><title>codegen_crate (556,507 samples, 0.14%)</title><rect x="83.7912%" y="181" width="0.1390%" height="15" fill="rgb(226,81,46)"/><text x="84.0412%" y="191.50"></text></g><g><title>metadata_register_crate (1,283,714 samples, 0.32%)</title><rect x="90.9131%" y="133" width="0.3206%" height="15" fill="rgb(247,70,30)"/><text x="91.1631%" y="143.50"></text></g><g><title>metadata_register_crate (465,666 samples, 0.12%)</title><rect x="91.1174%" y="117" width="0.1163%" height="15" fill="rgb(212,68,19)"/><text x="91.3674%" y="127.50"></text></g><g><title>macro_expand_crate (29,206,179 samples, 7.29%)</title><rect x="84.1305%" y="165" width="7.2945%" height="15" fill="rgb(240,187,13)"/><text x="84.3805%" y="175.50">macro_expa..</text></g><g><title>expand_crate (29,189,059 samples, 7.29%)</title><rect x="84.1348%" y="149" width="7.2903%" height="15" fill="rgb(223,113,26)"/><text x="84.3848%" y="159.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (765,950 samples, 0.19%)</title><rect x="91.2337%" y="133" width="0.1913%" height="15" fill="rgb(206,192,2)"/><text x="91.4837%" y="143.50"></text></g><g><title>late_resolve_crate (6,491,992 samples, 1.62%)</title><rect x="91.5237%" y="149" width="1.6214%" height="15" fill="rgb(241,108,4)"/><text x="91.7737%" y="159.50"></text></g><g><title>configure_and_expand (37,355,030 samples, 9.33%)</title><rect x="83.9302%" y="181" width="9.3298%" height="15" fill="rgb(247,173,49)"/><text x="84.1802%" y="191.50">configure_and..</text></g><g><title>resolve_crate (7,298,282 samples, 1.82%)</title><rect x="91.4371%" y="165" width="1.8228%" height="15" fill="rgb(224,114,35)"/><text x="91.6871%" y="175.50">r..</text></g><g><title>drop_ast (840,630 samples, 0.21%)</title><rect x="93.2600%" y="181" width="0.2100%" height="15" fill="rgb(245,159,27)"/><text x="93.5100%" y="191.50"></text></g><g><title>early_lint_checks (1,802,940 samples, 0.45%)</title><rect x="93.4743%" y="181" width="0.4503%" height="15" fill="rgb(245,172,44)"/><text x="93.7243%" y="191.50"></text></g><g><title>free_global_ctxt (6,229,810 samples, 1.56%)</title><rect x="93.9246%" y="181" width="1.5560%" height="15" fill="rgb(236,23,11)"/><text x="94.1746%" y="191.50"></text></g><g><title>generate_crate_metadata (2,951,123 samples, 0.74%)</title><rect x="95.4806%" y="181" width="0.7371%" height="15" fill="rgb(205,117,38)"/><text x="95.7306%" y="191.50"></text></g><g><title>hir_lowering (12,675,793 samples, 3.17%)</title><rect x="96.2177%" y="181" width="3.1659%" height="15" fill="rgb(237,72,25)"/><text x="96.4677%" y="191.50">hir..</text></g><g><title>parse_crate (449,896 samples, 0.11%)</title><rect x="99.4019%" y="181" width="0.1124%" height="15" fill="rgb(244,70,9)"/><text x="99.6519%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,239,044 samples, 0.31%)</title><rect x="99.5701%" y="181" width="0.3095%" height="15" fill="rgb(217,125,39)"/><text x="99.8201%" y="191.50"></text></g><g><title>all (400,383,689 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (400,383,689 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>