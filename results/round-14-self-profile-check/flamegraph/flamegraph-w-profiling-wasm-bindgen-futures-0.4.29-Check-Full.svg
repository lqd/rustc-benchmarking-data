<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (107,950 samples, 0.13%)</title><rect x="8.5497%" y="165" width="0.1327%" height="15" fill="rgb(227,0,7)"/><text x="8.7997%" y="175.50"></text></g><g><title>param_env (260,554 samples, 0.32%)</title><rect x="9.9592%" y="133" width="0.3203%" height="15" fill="rgb(217,0,24)"/><text x="10.2092%" y="143.50"></text></g><g><title>item_attrs (142,771 samples, 0.18%)</title><rect x="10.7320%" y="101" width="0.1755%" height="15" fill="rgb(221,193,54)"/><text x="10.9820%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,801 samples, 0.17%)</title><rect x="10.7406%" y="85" width="0.1670%" height="15" fill="rgb(248,212,6)"/><text x="10.9906%" y="95.50"></text></g><g><title>codegen_fn_attrs (258,731 samples, 0.32%)</title><rect x="10.6116%" y="117" width="0.3181%" height="15" fill="rgb(208,68,35)"/><text x="10.8616%" y="127.50"></text></g><g><title>is_copy_raw (136,831 samples, 0.17%)</title><rect x="12.7529%" y="69" width="0.1682%" height="15" fill="rgb(232,128,0)"/><text x="13.0029%" y="79.50"></text></g><g><title>evaluate_obligation (117,771 samples, 0.14%)</title><rect x="12.7764%" y="53" width="0.1448%" height="15" fill="rgb(207,160,47)"/><text x="13.0264%" y="63.50"></text></g><g><title>adt_drop_tys (226,831 samples, 0.28%)</title><rect x="12.7032%" y="85" width="0.2789%" height="15" fill="rgb(228,23,34)"/><text x="12.9532%" y="95.50"></text></g><g><title>needs_drop_raw (810,759 samples, 1.00%)</title><rect x="12.5845%" y="101" width="0.9968%" height="15" fill="rgb(218,30,26)"/><text x="12.8345%" y="111.50"></text></g><g><title>is_copy_raw (485,788 samples, 0.60%)</title><rect x="12.9840%" y="85" width="0.5973%" height="15" fill="rgb(220,122,19)"/><text x="13.2340%" y="95.50"></text></g><g><title>evaluate_obligation (390,347 samples, 0.48%)</title><rect x="13.1013%" y="69" width="0.4799%" height="15" fill="rgb(250,228,42)"/><text x="13.3513%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (123,442 samples, 0.15%)</title><rect x="13.7587%" y="85" width="0.1518%" height="15" fill="rgb(240,193,28)"/><text x="14.0087%" y="95.50"></text></g><g><title>impl_parent (682,839 samples, 0.84%)</title><rect x="15.4863%" y="69" width="0.8395%" height="15" fill="rgb(216,20,37)"/><text x="15.7363%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (416,104 samples, 0.51%)</title><rect x="15.8143%" y="53" width="0.5116%" height="15" fill="rgb(206,188,39)"/><text x="16.0643%" y="63.50"></text></g><g><title>specialization_graph_of (3,061,096 samples, 3.76%)</title><rect x="13.9481%" y="85" width="3.7635%" height="15" fill="rgb(217,207,13)"/><text x="14.1981%" y="95.50">spec..</text></g><g><title>impl_trait_ref (1,127,054 samples, 1.39%)</title><rect x="16.3259%" y="69" width="1.3857%" height="15" fill="rgb(231,73,38)"/><text x="16.5759%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (887,833 samples, 1.09%)</title><rect x="16.6200%" y="53" width="1.0915%" height="15" fill="rgb(225,20,46)"/><text x="16.8700%" y="63.50"></text></g><g><title>resolve_instance (3,423,159 samples, 4.21%)</title><rect x="13.5813%" y="101" width="4.2086%" height="15" fill="rgb(210,31,41)"/><text x="13.8313%" y="111.50">resol..</text></g><g><title>thir_body (509,633 samples, 0.63%)</title><rect x="17.8186%" y="101" width="0.6266%" height="15" fill="rgb(221,200,47)"/><text x="18.0686%" y="111.50"></text></g><g><title>mir_const (7,387,475 samples, 9.08%)</title><rect x="9.3854%" y="149" width="9.0826%" height="15" fill="rgb(226,26,5)"/><text x="9.6354%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (6,660,214 samples, 8.19%)</title><rect x="10.2796%" y="133" width="8.1884%" height="15" fill="rgb(249,33,26)"/><text x="10.5296%" y="143.50">unsafety_ch..</text></g><g><title>mir_built (6,131,380 samples, 7.54%)</title><rect x="10.9297%" y="117" width="7.5382%" height="15" fill="rgb(235,183,28)"/><text x="11.1797%" y="127.50">mir_built</text></g><g><title>has_structural_eq_impls (212,573 samples, 0.26%)</title><rect x="18.7379%" y="133" width="0.2613%" height="15" fill="rgb(221,5,38)"/><text x="18.9879%" y="143.50"></text></g><g><title>evaluate_obligation (185,233 samples, 0.23%)</title><rect x="18.7715%" y="117" width="0.2277%" height="15" fill="rgb(247,18,42)"/><text x="19.0215%" y="127.50"></text></g><g><title>trait_impls_of (137,600 samples, 0.17%)</title><rect x="18.8301%" y="101" width="0.1692%" height="15" fill="rgb(241,131,45)"/><text x="19.0801%" y="111.50"></text></g><g><title>mir_const (136,722 samples, 0.17%)</title><rect x="19.1259%" y="133" width="0.1681%" height="15" fill="rgb(249,31,29)"/><text x="19.3759%" y="143.50"></text></g><g><title>unsafety_check_result (89,761 samples, 0.11%)</title><rect x="19.1836%" y="117" width="0.1104%" height="15" fill="rgb(225,111,53)"/><text x="19.4336%" y="127.50"></text></g><g><title>mir_const_qualif (731,109 samples, 0.90%)</title><rect x="18.4680%" y="149" width="0.8989%" height="15" fill="rgb(238,160,17)"/><text x="18.7180%" y="159.50"></text></g><g><title>mir_promoted (8,621,457 samples, 10.60%)</title><rect x="8.7678%" y="165" width="10.5997%" height="15" fill="rgb(214,148,48)"/><text x="9.0178%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (496,945 samples, 0.61%)</title><rect x="19.3675%" y="165" width="0.6110%" height="15" fill="rgb(232,36,49)"/><text x="19.6175%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (406,201 samples, 0.50%)</title><rect x="19.9785%" y="165" width="0.4994%" height="15" fill="rgb(209,103,24)"/><text x="20.2285%" y="175.50"></text></g><g><title>normalize_projection_ty (245,001 samples, 0.30%)</title><rect x="20.1766%" y="149" width="0.3012%" height="15" fill="rgb(229,88,8)"/><text x="20.4266%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,419,169 samples, 1.74%)</title><rect x="20.5083%" y="165" width="1.7448%" height="15" fill="rgb(213,181,19)"/><text x="20.7583%" y="175.50"></text></g><g><title>MIR_borrow_checking (17,304,744 samples, 21.28%)</title><rect x="0.9839%" y="197" width="21.2754%" height="15" fill="rgb(254,191,54)"/><text x="1.2339%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (17,250,054 samples, 21.21%)</title><rect x="1.0511%" y="181" width="21.2081%" height="15" fill="rgb(241,83,37)"/><text x="1.3011%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (311,754 samples, 0.38%)</title><rect x="22.2593%" y="197" width="0.3833%" height="15" fill="rgb(233,36,39)"/><text x="22.5093%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (132,632 samples, 0.16%)</title><rect x="22.4795%" y="181" width="0.1631%" height="15" fill="rgb(226,3,54)"/><text x="22.7295%" y="191.50"></text></g><g><title>hir_module_items (128,042 samples, 0.16%)</title><rect x="22.6425%" y="197" width="0.1574%" height="15" fill="rgb(245,192,40)"/><text x="22.8925%" y="207.50"></text></g><g><title>should_inherit_track_caller (124,280 samples, 0.15%)</title><rect x="23.0809%" y="149" width="0.1528%" height="15" fill="rgb(238,167,29)"/><text x="23.3309%" y="159.50"></text></g><g><title>codegen_fn_attrs (252,391 samples, 0.31%)</title><rect x="22.9528%" y="165" width="0.3103%" height="15" fill="rgb(232,182,51)"/><text x="23.2028%" y="175.50"></text></g><g><title>check_mod_attrs (358,534 samples, 0.44%)</title><rect x="22.8224%" y="181" width="0.4408%" height="15" fill="rgb(231,60,39)"/><text x="23.0724%" y="191.50"></text></g><g><title>lookup_deprecation_entry (82,471 samples, 0.10%)</title><rect x="23.5142%" y="165" width="0.1014%" height="15" fill="rgb(208,69,12)"/><text x="23.7642%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (257,602 samples, 0.32%)</title><rect x="23.3871%" y="181" width="0.3167%" height="15" fill="rgb(235,93,37)"/><text x="23.6371%" y="191.50"></text></g><g><title>misc_checking_1 (788,739 samples, 0.97%)</title><rect x="22.8005%" y="197" width="0.9697%" height="15" fill="rgb(213,116,39)"/><text x="23.0505%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (288,824 samples, 0.36%)</title><rect x="23.7723%" y="181" width="0.3551%" height="15" fill="rgb(222,207,29)"/><text x="24.0223%" y="191.50"></text></g><g><title>check_mod_liveness (237,943 samples, 0.29%)</title><rect x="23.8348%" y="165" width="0.2925%" height="15" fill="rgb(206,96,30)"/><text x="24.0848%" y="175.50"></text></g><g><title>misc_checking_2 (573,447 samples, 0.71%)</title><rect x="23.7702%" y="197" width="0.7050%" height="15" fill="rgb(218,138,4)"/><text x="24.0202%" y="207.50"></text></g><g><title>match_checking (282,943 samples, 0.35%)</title><rect x="24.1274%" y="181" width="0.3479%" height="15" fill="rgb(250,191,14)"/><text x="24.3774%" y="191.50"></text></g><g><title>check_match (267,433 samples, 0.33%)</title><rect x="24.1464%" y="165" width="0.3288%" height="15" fill="rgb(239,60,40)"/><text x="24.3964%" y="175.50"></text></g><g><title>check_private_in_public (105,241 samples, 0.13%)</title><rect x="24.4872%" y="181" width="0.1294%" height="15" fill="rgb(206,27,48)"/><text x="24.7372%" y="191.50"></text></g><g><title>death_checking (175,452 samples, 0.22%)</title><rect x="24.6166%" y="181" width="0.2157%" height="15" fill="rgb(225,35,8)"/><text x="24.8666%" y="191.50"></text></g><g><title>fn_abi_of_instance (83,961 samples, 0.10%)</title><rect x="25.7025%" y="117" width="0.1032%" height="15" fill="rgb(250,213,24)"/><text x="25.9525%" y="127.50"></text></g><g><title>eval_to_allocation_raw (260,023 samples, 0.32%)</title><rect x="25.5874%" y="149" width="0.3197%" height="15" fill="rgb(247,123,22)"/><text x="25.8374%" y="159.50"></text></g><g><title>eval_to_allocation_raw (259,053 samples, 0.32%)</title><rect x="25.5886%" y="133" width="0.3185%" height="15" fill="rgb(231,138,38)"/><text x="25.8386%" y="143.50"></text></g><g><title>eval_to_const_value_raw (326,233 samples, 0.40%)</title><rect x="25.9071%" y="149" width="0.4011%" height="15" fill="rgb(231,145,46)"/><text x="26.1571%" y="159.50"></text></g><g><title>eval_to_const_value_raw (323,003 samples, 0.40%)</title><rect x="25.9111%" y="133" width="0.3971%" height="15" fill="rgb(251,118,11)"/><text x="26.1611%" y="143.50"></text></g><g><title>eval_to_allocation_raw (315,803 samples, 0.39%)</title><rect x="25.9199%" y="117" width="0.3883%" height="15" fill="rgb(217,147,25)"/><text x="26.1699%" y="127.50"></text></g><g><title>param_env (206,622 samples, 0.25%)</title><rect x="26.3082%" y="149" width="0.2540%" height="15" fill="rgb(247,81,37)"/><text x="26.5582%" y="159.50"></text></g><g><title>predicates_of (93,370 samples, 0.11%)</title><rect x="26.4474%" y="133" width="0.1148%" height="15" fill="rgb(209,12,38)"/><text x="26.6974%" y="143.50"></text></g><g><title>crate_lints (2,599,240 samples, 3.20%)</title><rect x="24.8343%" y="165" width="3.1956%" height="15" fill="rgb(227,1,9)"/><text x="25.0843%" y="175.50">cra..</text></g><g><title>type_of (1,122,797 samples, 1.38%)</title><rect x="26.6495%" y="149" width="1.3804%" height="15" fill="rgb(248,47,43)"/><text x="26.8995%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (879,547 samples, 1.08%)</title><rect x="26.9486%" y="133" width="1.0814%" height="15" fill="rgb(221,10,30)"/><text x="27.1986%" y="143.50"></text></g><g><title>lint_checking (2,808,772 samples, 3.45%)</title><rect x="24.8323%" y="181" width="3.4533%" height="15" fill="rgb(210,229,1)"/><text x="25.0823%" y="191.50">lin..</text></g><g><title>module_lints (207,892 samples, 0.26%)</title><rect x="28.0299%" y="165" width="0.2556%" height="15" fill="rgb(222,148,37)"/><text x="28.2799%" y="175.50"></text></g><g><title>lint_mod (203,052 samples, 0.25%)</title><rect x="28.0359%" y="149" width="0.2496%" height="15" fill="rgb(234,67,33)"/><text x="28.2859%" y="159.50"></text></g><g><title>privacy_access_levels (96,921 samples, 0.12%)</title><rect x="28.2855%" y="181" width="0.1192%" height="15" fill="rgb(247,98,35)"/><text x="28.5355%" y="191.50"></text></g><g><title>privacy_checking_modules (550,286 samples, 0.68%)</title><rect x="28.4047%" y="181" width="0.6766%" height="15" fill="rgb(247,138,52)"/><text x="28.6547%" y="191.50"></text></g><g><title>check_mod_privacy (546,496 samples, 0.67%)</title><rect x="28.4094%" y="165" width="0.6719%" height="15" fill="rgb(213,79,30)"/><text x="28.6594%" y="175.50"></text></g><g><title>misc_checking_3 (3,756,612 samples, 4.62%)</title><rect x="24.4752%" y="197" width="4.6186%" height="15" fill="rgb(246,177,23)"/><text x="24.7252%" y="207.50">misc_..</text></g><g><title>impl_parent (1,127,358 samples, 1.39%)</title><rect x="31.2802%" y="133" width="1.3860%" height="15" fill="rgb(230,62,27)"/><text x="31.5302%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (682,846 samples, 0.84%)</title><rect x="31.8267%" y="117" width="0.8395%" height="15" fill="rgb(216,154,8)"/><text x="32.0767%" y="127.50"></text></g><g><title>impl_trait_ref (3,314,862 samples, 4.08%)</title><rect x="32.6662%" y="133" width="4.0755%" height="15" fill="rgb(244,35,45)"/><text x="32.9162%" y="143.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,912,535 samples, 3.58%)</title><rect x="33.1609%" y="117" width="3.5808%" height="15" fill="rgb(251,115,12)"/><text x="33.4109%" y="127.50">meta..</text></g><g><title>trait_impls_of (286,185 samples, 0.35%)</title><rect x="36.7561%" y="133" width="0.3519%" height="15" fill="rgb(240,54,50)"/><text x="37.0061%" y="143.50"></text></g><g><title>implementations_of_trait (81,501 samples, 0.10%)</title><rect x="37.0078%" y="117" width="0.1002%" height="15" fill="rgb(233,84,52)"/><text x="37.2578%" y="127.50"></text></g><g><title>coherent_trait (6,454,443 samples, 7.94%)</title><rect x="29.1734%" y="165" width="7.9354%" height="15" fill="rgb(207,117,47)"/><text x="29.4234%" y="175.50">coherent_tr..</text></g><g><title>specialization_graph_of (6,447,253 samples, 7.93%)</title><rect x="29.1822%" y="149" width="7.9266%" height="15" fill="rgb(249,43,39)"/><text x="29.4322%" y="159.50">specializat..</text></g><g><title>coherence_checking (6,512,673 samples, 8.01%)</title><rect x="29.1516%" y="181" width="8.0070%" height="15" fill="rgb(209,38,44)"/><text x="29.4016%" y="191.50">coherence_c..</text></g><g><title>associated_item (342,502 samples, 0.42%)</title><rect x="44.7281%" y="117" width="0.4211%" height="15" fill="rgb(236,212,23)"/><text x="44.9781%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (265,312 samples, 0.33%)</title><rect x="44.8230%" y="101" width="0.3262%" height="15" fill="rgb(242,79,21)"/><text x="45.0730%" y="111.50"></text></g><g><title>associated_items (544,384 samples, 0.67%)</title><rect x="44.5347%" y="133" width="0.6693%" height="15" fill="rgb(211,96,35)"/><text x="44.7847%" y="143.50"></text></g><g><title>dropck_outlives (157,480 samples, 0.19%)</title><rect x="45.2767%" y="133" width="0.1936%" height="15" fill="rgb(253,215,40)"/><text x="45.5267%" y="143.50"></text></g><g><title>evaluate_obligation (641,325 samples, 0.79%)</title><rect x="45.4704%" y="133" width="0.7885%" height="15" fill="rgb(211,81,21)"/><text x="45.7204%" y="143.50"></text></g><g><title>trait_impls_of (241,341 samples, 0.30%)</title><rect x="45.9621%" y="117" width="0.2967%" height="15" fill="rgb(208,190,38)"/><text x="46.2121%" y="127.50"></text></g><g><title>fn_sig (87,533 samples, 0.11%)</title><rect x="46.2930%" y="133" width="0.1076%" height="15" fill="rgb(235,213,38)"/><text x="46.5430%" y="143.50"></text></g><g><title>impl_trait_ref (227,982 samples, 0.28%)</title><rect x="46.5460%" y="133" width="0.2803%" height="15" fill="rgb(237,122,38)"/><text x="46.7960%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (221,532 samples, 0.27%)</title><rect x="46.5539%" y="117" width="0.2724%" height="15" fill="rgb(244,218,35)"/><text x="46.8039%" y="127.50"></text></g><g><title>item_attrs (95,531 samples, 0.12%)</title><rect x="46.8834%" y="133" width="0.1175%" height="15" fill="rgb(240,68,47)"/><text x="47.1334%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (91,351 samples, 0.11%)</title><rect x="46.8885%" y="117" width="0.1123%" height="15" fill="rgb(210,16,53)"/><text x="47.1385%" y="127.50"></text></g><g><title>evaluate_obligation (227,654 samples, 0.28%)</title><rect x="47.3264%" y="117" width="0.2799%" height="15" fill="rgb(235,124,12)"/><text x="47.5764%" y="127.50"></text></g><g><title>method_autoderef_steps (480,725 samples, 0.59%)</title><rect x="47.0635%" y="133" width="0.5910%" height="15" fill="rgb(224,169,11)"/><text x="47.3135%" y="143.50"></text></g><g><title>predicates_of (209,130 samples, 0.26%)</title><rect x="47.6955%" y="133" width="0.2571%" height="15" fill="rgb(250,166,2)"/><text x="47.9455%" y="143.50"></text></g><g><title>predicates_defined_on (140,820 samples, 0.17%)</title><rect x="47.7795%" y="117" width="0.1731%" height="15" fill="rgb(242,216,29)"/><text x="48.0295%" y="127.50"></text></g><g><title>associated_item (86,160 samples, 0.11%)</title><rect x="54.8898%" y="101" width="0.1059%" height="15" fill="rgb(230,116,27)"/><text x="55.1398%" y="111.50"></text></g><g><title>associated_items (145,512 samples, 0.18%)</title><rect x="54.8356%" y="117" width="0.1789%" height="15" fill="rgb(228,99,48)"/><text x="55.0856%" y="127.50"></text></g><g><title>dropck_outlives (126,551 samples, 0.16%)</title><rect x="55.0454%" y="117" width="0.1556%" height="15" fill="rgb(253,11,6)"/><text x="55.2954%" y="127.50"></text></g><g><title>explicit_predicates_of (83,632 samples, 0.10%)</title><rect x="56.1730%" y="69" width="0.1028%" height="15" fill="rgb(247,143,39)"/><text x="56.4230%" y="79.50"></text></g><g><title>predicates_of (140,752 samples, 0.17%)</title><rect x="56.1130%" y="101" width="0.1730%" height="15" fill="rgb(236,97,10)"/><text x="56.3630%" y="111.50"></text></g><g><title>predicates_defined_on (112,642 samples, 0.14%)</title><rect x="56.1475%" y="85" width="0.1385%" height="15" fill="rgb(233,208,19)"/><text x="56.3975%" y="95.50"></text></g><g><title>evaluate_obligation (1,222,363 samples, 1.50%)</title><rect x="55.2010%" y="117" width="1.5028%" height="15" fill="rgb(216,164,2)"/><text x="55.4510%" y="127.50"></text></g><g><title>trait_impls_of (335,713 samples, 0.41%)</title><rect x="56.2911%" y="101" width="0.4127%" height="15" fill="rgb(220,129,5)"/><text x="56.5411%" y="111.50"></text></g><g><title>implementations_of_trait (105,250 samples, 0.13%)</title><rect x="56.5744%" y="85" width="0.1294%" height="15" fill="rgb(242,17,10)"/><text x="56.8244%" y="95.50"></text></g><g><title>is_copy_raw (251,522 samples, 0.31%)</title><rect x="56.9577%" y="117" width="0.3092%" height="15" fill="rgb(242,107,0)"/><text x="57.2077%" y="127.50"></text></g><g><title>evaluate_obligation (208,852 samples, 0.26%)</title><rect x="57.0101%" y="101" width="0.2568%" height="15" fill="rgb(251,28,31)"/><text x="57.2601%" y="111.50"></text></g><g><title>item_attrs (142,221 samples, 0.17%)</title><rect x="57.2669%" y="117" width="0.1749%" height="15" fill="rgb(233,223,10)"/><text x="57.5169%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,161 samples, 0.17%)</title><rect x="57.2756%" y="101" width="0.1662%" height="15" fill="rgb(215,21,27)"/><text x="57.5256%" y="111.50"></text></g><g><title>evaluate_obligation (85,910 samples, 0.11%)</title><rect x="57.6106%" y="101" width="0.1056%" height="15" fill="rgb(232,23,21)"/><text x="57.8606%" y="111.50"></text></g><g><title>method_autoderef_steps (167,363 samples, 0.21%)</title><rect x="57.5197%" y="117" width="0.2058%" height="15" fill="rgb(244,5,23)"/><text x="57.7697%" y="127.50"></text></g><g><title>predicates_of (173,923 samples, 0.21%)</title><rect x="57.7757%" y="117" width="0.2138%" height="15" fill="rgb(226,81,46)"/><text x="58.0257%" y="127.50"></text></g><g><title>predicates_defined_on (117,122 samples, 0.14%)</title><rect x="57.8455%" y="101" width="0.1440%" height="15" fill="rgb(247,70,30)"/><text x="58.0955%" y="111.50"></text></g><g><title>typeck (8,233,953 samples, 10.12%)</title><rect x="48.0063%" y="133" width="10.1233%" height="15" fill="rgb(212,68,19)"/><text x="48.2563%" y="143.50">typeck</text></g><g><title>item_bodies_checking (17,077,134 samples, 21.00%)</title><rect x="37.1801%" y="181" width="20.9955%" height="15" fill="rgb(240,187,13)"/><text x="37.4301%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,074,024 samples, 20.99%)</title><rect x="37.1839%" y="165" width="20.9917%" height="15" fill="rgb(223,113,26)"/><text x="37.4339%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (17,043,144 samples, 20.95%)</title><rect x="37.2219%" y="149" width="20.9538%" height="15" fill="rgb(206,192,2)"/><text x="37.4719%" y="159.50">typeck</text></g><g><title>impl_trait_ref (153,552 samples, 0.19%)</title><rect x="58.9518%" y="101" width="0.1888%" height="15" fill="rgb(241,108,4)"/><text x="59.2018%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (132,392 samples, 0.16%)</title><rect x="58.9778%" y="85" width="0.1628%" height="15" fill="rgb(247,173,49)"/><text x="59.2278%" y="95.50"></text></g><g><title>adt_destructor (569,136 samples, 0.70%)</title><rect x="58.4823%" y="149" width="0.6997%" height="15" fill="rgb(224,114,35)"/><text x="58.7323%" y="159.50"></text></g><g><title>coherent_trait (558,106 samples, 0.69%)</title><rect x="58.4959%" y="133" width="0.6862%" height="15" fill="rgb(245,159,27)"/><text x="58.7459%" y="143.50"></text></g><g><title>specialization_graph_of (556,246 samples, 0.68%)</title><rect x="58.4982%" y="117" width="0.6839%" height="15" fill="rgb(245,172,44)"/><text x="58.7482%" y="127.50"></text></g><g><title>layout_of (97,792 samples, 0.12%)</title><rect x="59.3433%" y="37" width="0.1202%" height="15" fill="rgb(236,23,11)"/><text x="59.5933%" y="47.50"></text></g><g><title>layout_of (151,552 samples, 0.19%)</title><rect x="59.2965%" y="53" width="0.1863%" height="15" fill="rgb(205,117,38)"/><text x="59.5465%" y="63.50"></text></g><g><title>layout_of (193,512 samples, 0.24%)</title><rect x="59.2498%" y="101" width="0.2379%" height="15" fill="rgb(237,72,25)"/><text x="59.4998%" y="111.50"></text></g><g><title>layout_of (173,632 samples, 0.21%)</title><rect x="59.2743%" y="85" width="0.2135%" height="15" fill="rgb(244,70,9)"/><text x="59.5243%" y="95.50"></text></g><g><title>layout_of (166,922 samples, 0.21%)</title><rect x="59.2825%" y="69" width="0.2052%" height="15" fill="rgb(217,125,39)"/><text x="59.5325%" y="79.50"></text></g><g><title>layout_of (205,663 samples, 0.25%)</title><rect x="59.2389%" y="117" width="0.2529%" height="15" fill="rgb(235,36,10)"/><text x="59.4889%" y="127.50"></text></g><g><title>layout_of (239,053 samples, 0.29%)</title><rect x="59.2131%" y="133" width="0.2939%" height="15" fill="rgb(251,123,47)"/><text x="59.4631%" y="143.50"></text></g><g><title>layout_of (253,943 samples, 0.31%)</title><rect x="59.1994%" y="149" width="0.3122%" height="15" fill="rgb(221,13,13)"/><text x="59.4494%" y="159.50"></text></g><g><title>adt_dtorck_constraint (119,422 samples, 0.15%)</title><rect x="60.2487%" y="101" width="0.1468%" height="15" fill="rgb(238,131,9)"/><text x="60.4987%" y="111.50"></text></g><g><title>dropck_outlives (235,362 samples, 0.29%)</title><rect x="60.1355%" y="133" width="0.2894%" height="15" fill="rgb(211,50,8)"/><text x="60.3855%" y="143.50"></text></g><g><title>adt_dtorck_constraint (195,992 samples, 0.24%)</title><rect x="60.1839%" y="117" width="0.2410%" height="15" fill="rgb(245,182,24)"/><text x="60.4339%" y="127.50"></text></g><g><title>typeck (889,730 samples, 1.09%)</title><rect x="59.5358%" y="149" width="1.0939%" height="15" fill="rgb(242,14,37)"/><text x="59.7858%" y="159.50"></text></g><g><title>item_types_checking (2,003,082 samples, 2.46%)</title><rect x="58.1757%" y="181" width="2.4627%" height="15" fill="rgb(246,228,12)"/><text x="58.4257%" y="191.50">it..</text></g><g><title>check_mod_item_types (1,998,372 samples, 2.46%)</title><rect x="58.1814%" y="165" width="2.4569%" height="15" fill="rgb(213,55,15)"/><text x="58.4314%" y="175.50">ch..</text></g><g><title>fn_sig (134,121 samples, 0.16%)</title><rect x="60.8059%" y="149" width="0.1649%" height="15" fill="rgb(209,9,3)"/><text x="61.0559%" y="159.50"></text></g><g><title>named_region_map (141,053 samples, 0.17%)</title><rect x="61.0640%" y="133" width="0.1734%" height="15" fill="rgb(230,59,30)"/><text x="61.3140%" y="143.50"></text></g><g><title>resolve_lifetimes (135,653 samples, 0.17%)</title><rect x="61.0706%" y="117" width="0.1668%" height="15" fill="rgb(209,121,21)"/><text x="61.3206%" y="127.50"></text></g><g><title>generics_of (225,873 samples, 0.28%)</title><rect x="60.9708%" y="149" width="0.2777%" height="15" fill="rgb(220,109,13)"/><text x="61.2208%" y="159.50"></text></g><g><title>late_bound_vars_map (82,251 samples, 0.10%)</title><rect x="61.4926%" y="101" width="0.1011%" height="15" fill="rgb(232,18,1)"/><text x="61.7426%" y="111.50"></text></g><g><title>explicit_predicates_of (227,984 samples, 0.28%)</title><rect x="61.3221%" y="117" width="0.2803%" height="15" fill="rgb(215,41,42)"/><text x="61.5721%" y="127.50"></text></g><g><title>type_of (84,771 samples, 0.10%)</title><rect x="62.1803%" y="69" width="0.1042%" height="15" fill="rgb(224,123,36)"/><text x="62.4303%" y="79.50"></text></g><g><title>predicates_of (833,940 samples, 1.03%)</title><rect x="61.2598%" y="149" width="1.0253%" height="15" fill="rgb(240,125,3)"/><text x="61.5098%" y="159.50"></text></g><g><title>predicates_defined_on (815,040 samples, 1.00%)</title><rect x="61.2830%" y="133" width="1.0021%" height="15" fill="rgb(205,98,50)"/><text x="61.5330%" y="143.50"></text></g><g><title>inferred_outlives_of (555,296 samples, 0.68%)</title><rect x="61.6024%" y="117" width="0.6827%" height="15" fill="rgb(205,185,37)"/><text x="61.8524%" y="127.50"></text></g><g><title>inferred_outlives_crate (540,576 samples, 0.66%)</title><rect x="61.6204%" y="101" width="0.6646%" height="15" fill="rgb(238,207,15)"/><text x="61.8704%" y="111.50"></text></g><g><title>type_of (401,944 samples, 0.49%)</title><rect x="61.7909%" y="85" width="0.4942%" height="15" fill="rgb(213,199,42)"/><text x="62.0409%" y="95.50"></text></g><g><title>type_collecting (1,405,856 samples, 1.73%)</title><rect x="60.6413%" y="181" width="1.7284%" height="15" fill="rgb(235,201,11)"/><text x="60.8913%" y="191.50"></text></g><g><title>collect_mod_item_types (1,396,056 samples, 1.72%)</title><rect x="60.6534%" y="165" width="1.7164%" height="15" fill="rgb(207,46,11)"/><text x="60.9034%" y="175.50"></text></g><g><title>evaluate_obligation (271,743 samples, 0.33%)</title><rect x="62.9160%" y="149" width="0.3341%" height="15" fill="rgb(241,35,35)"/><text x="63.1660%" y="159.50"></text></g><g><title>implied_outlives_bounds (83,371 samples, 0.10%)</title><rect x="63.2700%" y="149" width="0.1025%" height="15" fill="rgb(243,32,47)"/><text x="63.5200%" y="159.50"></text></g><g><title>region_scope_tree (93,220 samples, 0.11%)</title><rect x="63.4442%" y="149" width="0.1146%" height="15" fill="rgb(247,202,23)"/><text x="63.6942%" y="159.50"></text></g><g><title>check_impl_item_well_formed (886,460 samples, 1.09%)</title><rect x="62.4728%" y="165" width="1.0899%" height="15" fill="rgb(219,102,11)"/><text x="62.7228%" y="175.50"></text></g><g><title>adt_def (186,274 samples, 0.23%)</title><rect x="64.5409%" y="117" width="0.2290%" height="15" fill="rgb(243,110,44)"/><text x="64.7909%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (181,854 samples, 0.22%)</title><rect x="64.5464%" y="101" width="0.2236%" height="15" fill="rgb(222,74,54)"/><text x="64.7964%" y="111.50"></text></g><g><title>item_attrs (131,253 samples, 0.16%)</title><rect x="64.6086%" y="85" width="0.1614%" height="15" fill="rgb(216,99,12)"/><text x="64.8586%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (126,883 samples, 0.16%)</title><rect x="64.6140%" y="69" width="0.1560%" height="15" fill="rgb(226,22,26)"/><text x="64.8640%" y="79.50"></text></g><g><title>adt_def (114,812 samples, 0.14%)</title><rect x="64.7854%" y="101" width="0.1412%" height="15" fill="rgb(217,163,10)"/><text x="65.0354%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (112,902 samples, 0.14%)</title><rect x="64.7878%" y="85" width="0.1388%" height="15" fill="rgb(213,25,53)"/><text x="65.0378%" y="95.50"></text></g><g><title>item_attrs (87,142 samples, 0.11%)</title><rect x="64.8194%" y="69" width="0.1071%" height="15" fill="rgb(252,105,26)"/><text x="65.0694%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (84,982 samples, 0.10%)</title><rect x="64.8221%" y="53" width="0.1045%" height="15" fill="rgb(220,39,43)"/><text x="65.0721%" y="63.50"></text></g><g><title>adt_sized_constraint (161,592 samples, 0.20%)</title><rect x="64.7700%" y="117" width="0.1987%" height="15" fill="rgb(229,68,48)"/><text x="65.0200%" y="127.50"></text></g><g><title>adt_sized_constraint (396,516 samples, 0.49%)</title><rect x="64.5075%" y="133" width="0.4875%" height="15" fill="rgb(252,8,32)"/><text x="64.7575%" y="143.50"></text></g><g><title>evaluate_obligation (617,038 samples, 0.76%)</title><rect x="64.2626%" y="149" width="0.7586%" height="15" fill="rgb(223,20,43)"/><text x="64.5126%" y="159.50"></text></g><g><title>evaluate_obligation (120,962 samples, 0.15%)</title><rect x="65.2919%" y="133" width="0.1487%" height="15" fill="rgb(229,81,49)"/><text x="65.5419%" y="143.50"></text></g><g><title>layout_of (168,302 samples, 0.21%)</title><rect x="65.4963%" y="133" width="0.2069%" height="15" fill="rgb(236,28,36)"/><text x="65.7463%" y="143.50"></text></g><g><title>object_safety_violations (506,696 samples, 0.62%)</title><rect x="65.1205%" y="149" width="0.6230%" height="15" fill="rgb(249,185,26)"/><text x="65.3705%" y="159.50"></text></g><g><title>param_env (133,603 samples, 0.16%)</title><rect x="65.7435%" y="149" width="0.1643%" height="15" fill="rgb(249,174,33)"/><text x="65.9935%" y="159.50"></text></g><g><title>analysis (53,136,149 samples, 65.33%)</title><rect x="0.7512%" y="213" width="65.3284%" height="15" fill="rgb(233,201,37)"/><text x="1.0012%" y="223.50">analysis</text></g><g><title>type_check_crate (30,083,169 samples, 36.99%)</title><rect x="29.0938%" y="197" width="36.9859%" height="15" fill="rgb(221,78,26)"/><text x="29.3438%" y="207.50">type_check_crate</text></g><g><title>wf_checking (3,015,014 samples, 3.71%)</title><rect x="62.3728%" y="181" width="3.7068%" height="15" fill="rgb(250,127,30)"/><text x="62.6228%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (2,047,243 samples, 2.52%)</title><rect x="63.5627%" y="165" width="2.5170%" height="15" fill="rgb(230,49,44)"/><text x="63.8127%" y="175.50">ch..</text></g><g><title>codegen_crate (661,648 samples, 0.81%)</title><rect x="66.0928%" y="213" width="0.8135%" height="15" fill="rgb(229,67,23)"/><text x="66.3428%" y="223.50"></text></g><g><title>crate_injection (84,601 samples, 0.10%)</title><rect x="67.2822%" y="197" width="0.1040%" height="15" fill="rgb(249,83,47)"/><text x="67.5322%" y="207.50"></text></g><g><title>metadata_load_macro (227,773 samples, 0.28%)</title><rect x="77.7320%" y="165" width="0.2800%" height="15" fill="rgb(215,43,3)"/><text x="77.9820%" y="175.50"></text></g><g><title>metadata_register_crate (7,423,414 samples, 9.13%)</title><rect x="78.0121%" y="165" width="9.1267%" height="15" fill="rgb(238,154,13)"/><text x="78.2621%" y="175.50">metadata_regi..</text></g><g><title>metadata_register_crate (5,997,597 samples, 7.37%)</title><rect x="79.7651%" y="149" width="7.3738%" height="15" fill="rgb(219,56,2)"/><text x="80.0151%" y="159.50">metadata_r..</text></g><g><title>metadata_register_crate (4,852,496 samples, 5.97%)</title><rect x="81.1729%" y="133" width="5.9659%" height="15" fill="rgb(233,0,4)"/><text x="81.4229%" y="143.50">metadata..</text></g><g><title>macro_expand_crate (16,138,362 samples, 19.84%)</title><rect x="67.3862%" y="197" width="19.8414%" height="15" fill="rgb(235,30,7)"/><text x="67.6362%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (16,118,442 samples, 19.82%)</title><rect x="67.4107%" y="181" width="19.8169%" height="15" fill="rgb(250,79,13)"/><text x="67.6607%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (160,161 samples, 0.20%)</title><rect x="87.2316%" y="197" width="0.1969%" height="15" fill="rgb(211,146,34)"/><text x="87.4816%" y="207.50"></text></g><g><title>finalize_imports (101,431 samples, 0.12%)</title><rect x="87.4343%" y="181" width="0.1247%" height="15" fill="rgb(228,22,38)"/><text x="87.6843%" y="191.50"></text></g><g><title>late_resolve_crate (967,971 samples, 1.19%)</title><rect x="87.5871%" y="181" width="1.1901%" height="15" fill="rgb(235,168,5)"/><text x="87.8371%" y="191.50"></text></g><g><title>configure_and_expand (17,842,011 samples, 21.94%)</title><rect x="66.9063%" y="213" width="21.9359%" height="15" fill="rgb(221,155,16)"/><text x="67.1563%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,149,892 samples, 1.41%)</title><rect x="87.4285%" y="197" width="1.4137%" height="15" fill="rgb(215,215,53)"/><text x="87.6785%" y="207.50"></text></g><g><title>drop_ast (91,421 samples, 0.11%)</title><rect x="88.8422%" y="213" width="0.1124%" height="15" fill="rgb(223,4,10)"/><text x="89.0922%" y="223.50"></text></g><g><title>early_lint_checks (161,002 samples, 0.20%)</title><rect x="88.9786%" y="213" width="0.1979%" height="15" fill="rgb(234,103,6)"/><text x="89.2286%" y="223.50"></text></g><g><title>free_global_ctxt (3,140,875 samples, 3.86%)</title><rect x="89.1765%" y="213" width="3.8616%" height="15" fill="rgb(227,97,0)"/><text x="89.4265%" y="223.50">free..</text></g><g><title>mir_drops_elaborated_and_const_checked (469,485 samples, 0.58%)</title><rect x="94.4495%" y="181" width="0.5772%" height="15" fill="rgb(234,150,53)"/><text x="94.6995%" y="191.50"></text></g><g><title>optimized_mir (917,670 samples, 1.13%)</title><rect x="93.8990%" y="197" width="1.1282%" height="15" fill="rgb(228,201,54)"/><text x="94.1490%" y="207.50"></text></g><g><title>generate_crate_metadata (1,630,278 samples, 2.00%)</title><rect x="93.0381%" y="213" width="2.0044%" height="15" fill="rgb(222,22,37)"/><text x="93.2881%" y="223.50">g..</text></g><g><title>hir_lowering (1,161,523 samples, 1.43%)</title><rect x="95.0425%" y="213" width="1.4280%" height="15" fill="rgb(237,53,32)"/><text x="95.2925%" y="223.50"></text></g><g><title>parse_crate (1,455,176 samples, 1.79%)</title><rect x="96.5400%" y="213" width="1.7891%" height="15" fill="rgb(233,25,53)"/><text x="96.7900%" y="223.50">p..</text></g><g><title>prepare_outputs (173,422 samples, 0.21%)</title><rect x="98.3396%" y="213" width="0.2132%" height="15" fill="rgb(210,40,34)"/><text x="98.5896%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (728,978 samples, 0.90%)</title><rect x="98.5528%" y="213" width="0.8962%" height="15" fill="rgb(241,220,44)"/><text x="98.8028%" y="223.50"></text></g><g><title>setup_global_ctxt (106,202 samples, 0.13%)</title><rect x="99.4656%" y="213" width="0.1306%" height="15" fill="rgb(235,28,35)"/><text x="99.7156%" y="223.50"></text></g><g><title>all (81,336,936 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(210,56,17)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (81,336,936 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (328,464 samples, 0.40%)</title><rect x="99.5962%" y="213" width="0.4038%" height="15" fill="rgb(235,212,8)"/><text x="99.8462%" y="223.50"></text></g></svg></svg>