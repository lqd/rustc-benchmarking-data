<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (368,476 samples, 0.17%)</title><rect x="13.6424%" y="181" width="0.1701%" height="15" fill="rgb(227,0,7)"/><text x="13.8924%" y="191.50"></text></g><g><title>param_env (575,107 samples, 0.27%)</title><rect x="15.2434%" y="149" width="0.2656%" height="15" fill="rgb(217,0,24)"/><text x="15.4934%" y="159.50"></text></g><g><title>item_attrs (555,475 samples, 0.26%)</title><rect x="15.9881%" y="117" width="0.2565%" height="15" fill="rgb(221,193,54)"/><text x="16.2381%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (533,295 samples, 0.25%)</title><rect x="15.9983%" y="101" width="0.2463%" height="15" fill="rgb(248,212,6)"/><text x="16.2483%" y="111.50"></text></g><g><title>codegen_fn_attrs (765,097 samples, 0.35%)</title><rect x="15.9071%" y="133" width="0.3533%" height="15" fill="rgb(208,68,35)"/><text x="16.1571%" y="143.50"></text></g><g><title>adt_drop_tys (295,684 samples, 0.14%)</title><rect x="18.7130%" y="85" width="0.1365%" height="15" fill="rgb(232,128,0)"/><text x="18.9630%" y="95.50"></text></g><g><title>is_copy_raw (281,292 samples, 0.13%)</title><rect x="18.8506%" y="85" width="0.1299%" height="15" fill="rgb(207,160,47)"/><text x="19.1006%" y="95.50"></text></g><g><title>param_env (266,396 samples, 0.12%)</title><rect x="18.9805%" y="85" width="0.1230%" height="15" fill="rgb(228,23,34)"/><text x="19.2305%" y="95.50"></text></g><g><title>adt_drop_tys (932,484 samples, 0.43%)</title><rect x="18.6734%" y="101" width="0.4306%" height="15" fill="rgb(218,30,26)"/><text x="18.9234%" y="111.50"></text></g><g><title>is_copy_raw (1,275,445 samples, 0.59%)</title><rect x="19.1047%" y="101" width="0.5889%" height="15" fill="rgb(220,122,19)"/><text x="19.3547%" y="111.50"></text></g><g><title>evaluate_obligation (1,002,321 samples, 0.46%)</title><rect x="19.2308%" y="85" width="0.4628%" height="15" fill="rgb(250,228,42)"/><text x="19.4808%" y="95.50"></text></g><g><title>needs_drop_raw (2,490,519 samples, 1.15%)</title><rect x="18.5519%" y="117" width="1.1500%" height="15" fill="rgb(240,193,28)"/><text x="18.8019%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (814,305 samples, 0.38%)</title><rect x="19.8962%" y="101" width="0.3760%" height="15" fill="rgb(216,20,37)"/><text x="20.1462%" y="111.50"></text></g><g><title>impl_parent (685,817 samples, 0.32%)</title><rect x="20.8828%" y="85" width="0.3167%" height="15" fill="rgb(206,188,39)"/><text x="21.1328%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (437,687 samples, 0.20%)</title><rect x="20.9974%" y="69" width="0.2021%" height="15" fill="rgb(217,207,13)"/><text x="21.2474%" y="79.50"></text></g><g><title>specialization_graph_of (2,910,914 samples, 1.34%)</title><rect x="20.3410%" y="101" width="1.3441%" height="15" fill="rgb(231,73,38)"/><text x="20.5910%" y="111.50"></text></g><g><title>impl_trait_ref (1,051,880 samples, 0.49%)</title><rect x="21.1995%" y="85" width="0.4857%" height="15" fill="rgb(225,20,46)"/><text x="21.4495%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (810,568 samples, 0.37%)</title><rect x="21.3109%" y="69" width="0.3743%" height="15" fill="rgb(210,31,41)"/><text x="21.5609%" y="79.50"></text></g><g><title>resolve_instance (4,474,625 samples, 2.07%)</title><rect x="19.7019%" y="117" width="2.0662%" height="15" fill="rgb(221,200,47)"/><text x="19.9519%" y="127.50">r..</text></g><g><title>thir_body (1,670,212 samples, 0.77%)</title><rect x="21.7984%" y="117" width="0.7712%" height="15" fill="rgb(226,26,5)"/><text x="22.0484%" y="127.50"></text></g><g><title>mir_const (17,332,637 samples, 8.00%)</title><rect x="14.5846%" y="165" width="8.0034%" height="15" fill="rgb(249,33,26)"/><text x="14.8346%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (15,330,674 samples, 7.08%)</title><rect x="15.5090%" y="149" width="7.0790%" height="15" fill="rgb(235,183,28)"/><text x="15.7590%" y="159.50">unsafety_..</text></g><g><title>mir_built (13,703,483 samples, 6.33%)</title><rect x="16.2604%" y="133" width="6.3277%" height="15" fill="rgb(221,5,38)"/><text x="16.5104%" y="143.50">mir_built</text></g><g><title>mir_promoted (18,918,522 samples, 8.74%)</title><rect x="13.8858%" y="181" width="8.7357%" height="15" fill="rgb(247,18,42)"/><text x="14.1358%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (705,119 samples, 0.33%)</title><rect x="22.6216%" y="181" width="0.3256%" height="15" fill="rgb(241,131,45)"/><text x="22.8716%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (880,851 samples, 0.41%)</title><rect x="22.9472%" y="181" width="0.4067%" height="15" fill="rgb(249,31,29)"/><text x="23.1972%" y="191.50"></text></g><g><title>normalize_projection_ty (547,456 samples, 0.25%)</title><rect x="23.1011%" y="165" width="0.2528%" height="15" fill="rgb(225,111,53)"/><text x="23.3511%" y="175.50"></text></g><g><title>type_op_normalize_predicate (629,477 samples, 0.29%)</title><rect x="23.3539%" y="181" width="0.2907%" height="15" fill="rgb(238,160,17)"/><text x="23.6039%" y="191.50"></text></g><g><title>normalize_projection_ty (292,103 samples, 0.13%)</title><rect x="23.5097%" y="165" width="0.1349%" height="15" fill="rgb(214,148,48)"/><text x="23.7597%" y="175.50"></text></g><g><title>type_op_prove_predicate (7,975,129 samples, 3.68%)</title><rect x="23.6446%" y="181" width="3.6826%" height="15" fill="rgb(232,36,49)"/><text x="23.8946%" y="191.50">type..</text></g><g><title>MIR_borrow_checking (58,069,096 samples, 26.81%)</title><rect x="0.5207%" y="213" width="26.8137%" height="15" fill="rgb(209,103,24)"/><text x="0.7707%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (57,868,874 samples, 26.72%)</title><rect x="0.6131%" y="197" width="26.7213%" height="15" fill="rgb(229,88,8)"/><text x="0.8631%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (221,232 samples, 0.10%)</title><rect x="27.3616%" y="213" width="0.1022%" height="15" fill="rgb(213,181,19)"/><text x="27.6116%" y="223.50"></text></g><g><title>should_inherit_track_caller (232,650 samples, 0.11%)</title><rect x="27.7116%" y="165" width="0.1074%" height="15" fill="rgb(254,191,54)"/><text x="27.9616%" y="175.50"></text></g><g><title>codegen_fn_attrs (452,413 samples, 0.21%)</title><rect x="27.6194%" y="181" width="0.2089%" height="15" fill="rgb(241,83,37)"/><text x="27.8694%" y="191.50"></text></g><g><title>check_mod_attrs (764,728 samples, 0.35%)</title><rect x="27.4752%" y="197" width="0.3531%" height="15" fill="rgb(233,36,39)"/><text x="27.7252%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (515,255 samples, 0.24%)</title><rect x="27.9503%" y="197" width="0.2379%" height="15" fill="rgb(226,3,54)"/><text x="28.2003%" y="207.50"></text></g><g><title>misc_checking_1 (1,634,298 samples, 0.75%)</title><rect x="27.4640%" y="213" width="0.7546%" height="15" fill="rgb(245,192,40)"/><text x="27.7140%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (848,570 samples, 0.39%)</title><rect x="28.2197%" y="197" width="0.3918%" height="15" fill="rgb(238,167,29)"/><text x="28.4697%" y="207.50"></text></g><g><title>check_mod_liveness (713,818 samples, 0.33%)</title><rect x="28.2819%" y="181" width="0.3296%" height="15" fill="rgb(232,182,51)"/><text x="28.5319%" y="191.50"></text></g><g><title>misc_checking_2 (2,171,385 samples, 1.00%)</title><rect x="28.2186%" y="213" width="1.0026%" height="15" fill="rgb(231,60,39)"/><text x="28.4686%" y="223.50"></text></g><g><title>match_checking (1,320,415 samples, 0.61%)</title><rect x="28.6115%" y="197" width="0.6097%" height="15" fill="rgb(208,69,12)"/><text x="28.8615%" y="207.50"></text></g><g><title>check_match (1,029,522 samples, 0.48%)</title><rect x="28.7459%" y="181" width="0.4754%" height="15" fill="rgb(235,93,37)"/><text x="28.9959%" y="191.50"></text></g><g><title>check_private_in_public (321,724 samples, 0.15%)</title><rect x="29.2263%" y="197" width="0.1486%" height="15" fill="rgb(213,116,39)"/><text x="29.4763%" y="207.50"></text></g><g><title>death_checking (563,806 samples, 0.26%)</title><rect x="29.3749%" y="197" width="0.2603%" height="15" fill="rgb(222,207,29)"/><text x="29.6249%" y="207.50"></text></g><g><title>param_env (336,913 samples, 0.16%)</title><rect x="30.0849%" y="165" width="0.1556%" height="15" fill="rgb(206,96,30)"/><text x="30.3349%" y="175.50"></text></g><g><title>crate_lints (2,727,801 samples, 1.26%)</title><rect x="29.6360%" y="181" width="1.2596%" height="15" fill="rgb(218,138,4)"/><text x="29.8860%" y="191.50"></text></g><g><title>type_of (1,361,213 samples, 0.63%)</title><rect x="30.2670%" y="165" width="0.6285%" height="15" fill="rgb(250,191,14)"/><text x="30.5170%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (889,058 samples, 0.41%)</title><rect x="30.4850%" y="149" width="0.4105%" height="15" fill="rgb(239,60,40)"/><text x="30.7350%" y="159.50"></text></g><g><title>layout_of (238,872 samples, 0.11%)</title><rect x="31.4827%" y="69" width="0.1103%" height="15" fill="rgb(206,27,48)"/><text x="31.7327%" y="79.50"></text></g><g><title>layout_of (384,133 samples, 0.18%)</title><rect x="31.4239%" y="85" width="0.1774%" height="15" fill="rgb(225,35,8)"/><text x="31.6739%" y="95.50"></text></g><g><title>layout_of (541,754 samples, 0.25%)</title><rect x="31.3703%" y="101" width="0.2502%" height="15" fill="rgb(250,213,24)"/><text x="31.6203%" y="111.50"></text></g><g><title>layout_of (635,556 samples, 0.29%)</title><rect x="31.3311%" y="117" width="0.2935%" height="15" fill="rgb(247,123,22)"/><text x="31.5811%" y="127.50"></text></g><g><title>lint_checking (4,312,589 samples, 1.99%)</title><rect x="29.6352%" y="197" width="1.9914%" height="15" fill="rgb(231,138,38)"/><text x="29.8852%" y="207.50">l..</text></g><g><title>module_lints (1,583,138 samples, 0.73%)</title><rect x="30.8956%" y="181" width="0.7310%" height="15" fill="rgb(231,145,46)"/><text x="31.1456%" y="191.50"></text></g><g><title>lint_mod (1,575,888 samples, 0.73%)</title><rect x="30.8989%" y="165" width="0.7277%" height="15" fill="rgb(251,118,11)"/><text x="31.1489%" y="175.50"></text></g><g><title>layout_of (761,997 samples, 0.35%)</title><rect x="31.2747%" y="149" width="0.3519%" height="15" fill="rgb(217,147,25)"/><text x="31.5247%" y="159.50"></text></g><g><title>layout_of (716,037 samples, 0.33%)</title><rect x="31.2960%" y="133" width="0.3306%" height="15" fill="rgb(247,81,37)"/><text x="31.5460%" y="143.50"></text></g><g><title>privacy_access_levels (429,715 samples, 0.20%)</title><rect x="31.6266%" y="197" width="0.1984%" height="15" fill="rgb(209,12,38)"/><text x="31.8766%" y="207.50"></text></g><g><title>privacy_checking_modules (1,752,219 samples, 0.81%)</title><rect x="31.8250%" y="197" width="0.8091%" height="15" fill="rgb(227,1,9)"/><text x="32.0750%" y="207.50"></text></g><g><title>check_mod_privacy (1,747,129 samples, 0.81%)</title><rect x="31.8274%" y="181" width="0.8067%" height="15" fill="rgb(248,47,43)"/><text x="32.0774%" y="191.50"></text></g><g><title>misc_checking_3 (7,418,553 samples, 3.43%)</title><rect x="29.2213%" y="213" width="3.4256%" height="15" fill="rgb(221,10,30)"/><text x="29.4713%" y="223.50">mis..</text></g><g><title>impl_parent (1,662,325 samples, 0.77%)</title><rect x="33.9237%" y="149" width="0.7676%" height="15" fill="rgb(210,229,1)"/><text x="34.1737%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,034,139 samples, 0.48%)</title><rect x="34.2138%" y="133" width="0.4775%" height="15" fill="rgb(222,148,37)"/><text x="34.4638%" y="143.50"></text></g><g><title>impl_trait_ref (4,314,508 samples, 1.99%)</title><rect x="34.6913%" y="149" width="1.9922%" height="15" fill="rgb(234,67,33)"/><text x="34.9413%" y="159.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,689,074 samples, 1.70%)</title><rect x="34.9801%" y="133" width="1.7034%" height="15" fill="rgb(247,98,35)"/><text x="35.2301%" y="143.50"></text></g><g><title>trait_impls_of (520,386 samples, 0.24%)</title><rect x="36.6911%" y="149" width="0.2403%" height="15" fill="rgb(247,138,52)"/><text x="36.9411%" y="159.50"></text></g><g><title>coherent_trait (9,151,831 samples, 4.23%)</title><rect x="32.7060%" y="181" width="4.2259%" height="15" fill="rgb(213,79,30)"/><text x="32.9560%" y="191.50">coher..</text></g><g><title>specialization_graph_of (9,136,301 samples, 4.22%)</title><rect x="32.7131%" y="165" width="4.2187%" height="15" fill="rgb(246,177,23)"/><text x="32.9631%" y="175.50">speci..</text></g><g><title>coherence_checking (9,229,383 samples, 4.26%)</title><rect x="32.6961%" y="197" width="4.2617%" height="15" fill="rgb(230,62,27)"/><text x="32.9461%" y="207.50">coher..</text></g><g><title>associated_item (346,652 samples, 0.16%)</title><rect x="47.8084%" y="133" width="0.1601%" height="15" fill="rgb(216,154,8)"/><text x="48.0584%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (274,682 samples, 0.13%)</title><rect x="47.8416%" y="117" width="0.1268%" height="15" fill="rgb(244,35,45)"/><text x="48.0916%" y="127.50"></text></g><g><title>associated_items (722,468 samples, 0.33%)</title><rect x="47.6488%" y="149" width="0.3336%" height="15" fill="rgb(251,115,12)"/><text x="47.8988%" y="159.50"></text></g><g><title>adt_dtorck_constraint (277,643 samples, 0.13%)</title><rect x="48.5513%" y="101" width="0.1282%" height="15" fill="rgb(240,54,50)"/><text x="48.8013%" y="111.50"></text></g><g><title>adt_dtorck_constraint (497,214 samples, 0.23%)</title><rect x="48.4721%" y="117" width="0.2296%" height="15" fill="rgb(233,84,52)"/><text x="48.7221%" y="127.50"></text></g><g><title>adt_dtorck_constraint (983,549 samples, 0.45%)</title><rect x="48.2949%" y="133" width="0.4542%" height="15" fill="rgb(207,117,47)"/><text x="48.5449%" y="143.50"></text></g><g><title>dropck_outlives (1,680,896 samples, 0.78%)</title><rect x="48.0139%" y="149" width="0.7762%" height="15" fill="rgb(249,43,39)"/><text x="48.2639%" y="159.50"></text></g><g><title>evaluate_obligation (1,676,260 samples, 0.77%)</title><rect x="48.7901%" y="149" width="0.7740%" height="15" fill="rgb(209,38,44)"/><text x="49.0401%" y="159.50"></text></g><g><title>evaluate_obligation (277,052 samples, 0.13%)</title><rect x="50.0306%" y="133" width="0.1279%" height="15" fill="rgb(236,212,23)"/><text x="50.2806%" y="143.50"></text></g><g><title>method_autoderef_steps (553,935 samples, 0.26%)</title><rect x="49.9121%" y="149" width="0.2558%" height="15" fill="rgb(242,79,21)"/><text x="50.1621%" y="159.50"></text></g><g><title>predicates_of (348,635 samples, 0.16%)</title><rect x="50.1947%" y="149" width="0.1610%" height="15" fill="rgb(211,96,35)"/><text x="50.4447%" y="159.50"></text></g><g><title>predicates_defined_on (233,325 samples, 0.11%)</title><rect x="50.2479%" y="133" width="0.1077%" height="15" fill="rgb(253,215,40)"/><text x="50.4979%" y="143.50"></text></g><g><title>associated_item (318,953 samples, 0.15%)</title><rect x="61.4225%" y="117" width="0.1473%" height="15" fill="rgb(211,81,21)"/><text x="61.6725%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (260,383 samples, 0.12%)</title><rect x="61.4495%" y="101" width="0.1202%" height="15" fill="rgb(208,190,38)"/><text x="61.6995%" y="111.50"></text></g><g><title>associated_items (458,145 samples, 0.21%)</title><rect x="61.3707%" y="133" width="0.2116%" height="15" fill="rgb(235,213,38)"/><text x="61.6207%" y="143.50"></text></g><g><title>adt_dtorck_constraint (327,875 samples, 0.15%)</title><rect x="61.7902%" y="117" width="0.1514%" height="15" fill="rgb(237,122,38)"/><text x="62.0402%" y="127.50"></text></g><g><title>dropck_outlives (761,609 samples, 0.35%)</title><rect x="61.6104%" y="133" width="0.3517%" height="15" fill="rgb(244,218,35)"/><text x="61.8604%" y="143.50"></text></g><g><title>trait_impls_of (334,704 samples, 0.15%)</title><rect x="63.2015%" y="117" width="0.1546%" height="15" fill="rgb(240,68,47)"/><text x="63.4515%" y="127.50"></text></g><g><title>evaluate_obligation (3,019,812 samples, 1.39%)</title><rect x="61.9620%" y="133" width="1.3944%" height="15" fill="rgb(210,16,53)"/><text x="62.2120%" y="143.50"></text></g><g><title>is_copy_raw (548,427 samples, 0.25%)</title><rect x="63.6524%" y="133" width="0.2532%" height="15" fill="rgb(235,124,12)"/><text x="63.9024%" y="143.50"></text></g><g><title>evaluate_obligation (454,296 samples, 0.21%)</title><rect x="63.6959%" y="117" width="0.2098%" height="15" fill="rgb(224,169,11)"/><text x="63.9459%" y="127.50"></text></g><g><title>evaluate_obligation (529,685 samples, 0.24%)</title><rect x="64.2941%" y="117" width="0.2446%" height="15" fill="rgb(250,166,2)"/><text x="64.5441%" y="127.50"></text></g><g><title>method_autoderef_steps (1,276,133 samples, 0.59%)</title><rect x="63.9563%" y="133" width="0.5893%" height="15" fill="rgb(242,216,29)"/><text x="64.2063%" y="143.50"></text></g><g><title>predicates_of (464,476 samples, 0.21%)</title><rect x="64.5689%" y="133" width="0.2145%" height="15" fill="rgb(230,116,27)"/><text x="64.8189%" y="143.50"></text></g><g><title>predicates_defined_on (329,074 samples, 0.15%)</title><rect x="64.6314%" y="117" width="0.1520%" height="15" fill="rgb(228,99,48)"/><text x="64.8814%" y="127.50"></text></g><g><title>typeck (31,211,999 samples, 14.41%)</title><rect x="50.4966%" y="149" width="14.4123%" height="15" fill="rgb(253,11,6)"/><text x="50.7466%" y="159.50">typeck</text></g><g><title>item_bodies_checking (60,560,535 samples, 27.96%)</title><rect x="36.9760%" y="197" width="27.9642%" height="15" fill="rgb(247,143,39)"/><text x="37.2260%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (60,556,395 samples, 27.96%)</title><rect x="36.9779%" y="181" width="27.9622%" height="15" fill="rgb(236,97,10)"/><text x="37.2279%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (60,436,862 samples, 27.91%)</title><rect x="37.0331%" y="165" width="27.9070%" height="15" fill="rgb(233,208,19)"/><text x="37.2831%" y="175.50">typeck</text></g><g><title>adt_destructor (344,414 samples, 0.16%)</title><rect x="65.5327%" y="165" width="0.1590%" height="15" fill="rgb(216,164,2)"/><text x="65.7827%" y="175.50"></text></g><g><title>coherent_trait (334,124 samples, 0.15%)</title><rect x="65.5374%" y="149" width="0.1543%" height="15" fill="rgb(220,129,5)"/><text x="65.7874%" y="159.50"></text></g><g><title>specialization_graph_of (331,364 samples, 0.15%)</title><rect x="65.5387%" y="133" width="0.1530%" height="15" fill="rgb(242,17,10)"/><text x="65.7887%" y="143.50"></text></g><g><title>item_types_checking (1,728,979 samples, 0.80%)</title><rect x="64.9401%" y="197" width="0.7984%" height="15" fill="rgb(242,107,0)"/><text x="65.1901%" y="207.50"></text></g><g><title>check_mod_item_types (1,723,669 samples, 0.80%)</title><rect x="64.9426%" y="181" width="0.7959%" height="15" fill="rgb(251,28,31)"/><text x="65.1926%" y="191.50"></text></g><g><title>fn_sig (415,245 samples, 0.19%)</title><rect x="65.9260%" y="165" width="0.1917%" height="15" fill="rgb(233,223,10)"/><text x="66.1760%" y="175.50"></text></g><g><title>named_region_map (282,771 samples, 0.13%)</title><rect x="66.2101%" y="149" width="0.1306%" height="15" fill="rgb(215,21,27)"/><text x="66.4601%" y="159.50"></text></g><g><title>resolve_lifetimes (262,281 samples, 0.12%)</title><rect x="66.2195%" y="133" width="0.1211%" height="15" fill="rgb(232,23,21)"/><text x="66.4695%" y="143.50"></text></g><g><title>generics_of (501,431 samples, 0.23%)</title><rect x="66.1177%" y="165" width="0.2315%" height="15" fill="rgb(244,5,23)"/><text x="66.3677%" y="175.50"></text></g><g><title>explicit_predicates_of (327,654 samples, 0.15%)</title><rect x="66.5055%" y="133" width="0.1513%" height="15" fill="rgb(226,81,46)"/><text x="66.7555%" y="143.50"></text></g><g><title>predicates_of (1,264,127 samples, 0.58%)</title><rect x="66.4048%" y="165" width="0.5837%" height="15" fill="rgb(247,70,30)"/><text x="66.6548%" y="175.50"></text></g><g><title>predicates_defined_on (1,179,575 samples, 0.54%)</title><rect x="66.4438%" y="149" width="0.5447%" height="15" fill="rgb(212,68,19)"/><text x="66.6938%" y="159.50"></text></g><g><title>inferred_outlives_of (718,237 samples, 0.33%)</title><rect x="66.6568%" y="133" width="0.3316%" height="15" fill="rgb(240,187,13)"/><text x="66.9068%" y="143.50"></text></g><g><title>inferred_outlives_crate (684,587 samples, 0.32%)</title><rect x="66.6724%" y="117" width="0.3161%" height="15" fill="rgb(223,113,26)"/><text x="66.9224%" y="127.50"></text></g><g><title>type_of (387,832 samples, 0.18%)</title><rect x="66.8094%" y="101" width="0.1791%" height="15" fill="rgb(206,192,2)"/><text x="67.0594%" y="111.50"></text></g><g><title>late_bound_vars_map (259,433 samples, 0.12%)</title><rect x="67.1747%" y="149" width="0.1198%" height="15" fill="rgb(241,108,4)"/><text x="67.4247%" y="159.50"></text></g><g><title>resolve_lifetimes (255,123 samples, 0.12%)</title><rect x="67.1767%" y="133" width="0.1178%" height="15" fill="rgb(247,173,49)"/><text x="67.4267%" y="143.50"></text></g><g><title>type_collecting (3,440,269 samples, 1.59%)</title><rect x="65.7402%" y="197" width="1.5886%" height="15" fill="rgb(224,114,35)"/><text x="65.9902%" y="207.50"></text></g><g><title>collect_mod_item_types (3,430,479 samples, 1.58%)</title><rect x="65.7447%" y="181" width="1.5840%" height="15" fill="rgb(245,159,27)"/><text x="65.9947%" y="191.50"></text></g><g><title>type_of (736,948 samples, 0.34%)</title><rect x="66.9885%" y="165" width="0.3403%" height="15" fill="rgb(245,172,44)"/><text x="67.2385%" y="175.50"></text></g><g><title>evaluate_obligation (454,716 samples, 0.21%)</title><rect x="68.5187%" y="165" width="0.2100%" height="15" fill="rgb(236,23,11)"/><text x="68.7687%" y="175.50"></text></g><g><title>implied_outlives_bounds (244,932 samples, 0.11%)</title><rect x="68.7302%" y="165" width="0.1131%" height="15" fill="rgb(205,117,38)"/><text x="68.9802%" y="175.50"></text></g><g><title>object_safety_violations (450,096 samples, 0.21%)</title><rect x="68.8433%" y="165" width="0.2078%" height="15" fill="rgb(237,72,25)"/><text x="69.0933%" y="175.50"></text></g><g><title>param_env (398,435 samples, 0.18%)</title><rect x="69.0512%" y="165" width="0.1840%" height="15" fill="rgb(244,70,9)"/><text x="69.3012%" y="175.50"></text></g><g><title>region_scope_tree (532,723 samples, 0.25%)</title><rect x="69.2535%" y="165" width="0.2460%" height="15" fill="rgb(217,125,39)"/><text x="69.5035%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,485,885 samples, 2.07%)</title><rect x="67.4553%" y="181" width="2.0714%" height="15" fill="rgb(235,36,10)"/><text x="67.7053%" y="191.50">c..</text></g><g><title>adt_def (352,863 samples, 0.16%)</title><rect x="71.1548%" y="133" width="0.1629%" height="15" fill="rgb(251,123,47)"/><text x="71.4048%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (346,053 samples, 0.16%)</title><rect x="71.1580%" y="117" width="0.1598%" height="15" fill="rgb(221,13,13)"/><text x="71.4080%" y="127.50"></text></g><g><title>item_attrs (271,482 samples, 0.13%)</title><rect x="71.1924%" y="101" width="0.1254%" height="15" fill="rgb(238,131,9)"/><text x="71.4424%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (265,522 samples, 0.12%)</title><rect x="71.1952%" y="85" width="0.1226%" height="15" fill="rgb(211,50,8)"/><text x="71.4452%" y="95.50"></text></g><g><title>adt_def (224,682 samples, 0.10%)</title><rect x="71.3273%" y="117" width="0.1037%" height="15" fill="rgb(245,182,24)"/><text x="71.5773%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (222,402 samples, 0.10%)</title><rect x="71.3283%" y="101" width="0.1027%" height="15" fill="rgb(242,14,37)"/><text x="71.5783%" y="111.50"></text></g><g><title>adt_def (406,984 samples, 0.19%)</title><rect x="71.4668%" y="85" width="0.1879%" height="15" fill="rgb(246,228,12)"/><text x="71.7168%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (406,544 samples, 0.19%)</title><rect x="71.4670%" y="69" width="0.1877%" height="15" fill="rgb(213,55,15)"/><text x="71.7170%" y="79.50"></text></g><g><title>item_attrs (401,594 samples, 0.19%)</title><rect x="71.4693%" y="53" width="0.1854%" height="15" fill="rgb(209,9,3)"/><text x="71.7193%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (400,914 samples, 0.19%)</title><rect x="71.4696%" y="37" width="0.1851%" height="15" fill="rgb(230,59,30)"/><text x="71.7196%" y="47.50"></text></g><g><title>adt_sized_constraint (408,864 samples, 0.19%)</title><rect x="71.4663%" y="101" width="0.1888%" height="15" fill="rgb(209,121,21)"/><text x="71.7163%" y="111.50"></text></g><g><title>adt_sized_constraint (489,925 samples, 0.23%)</title><rect x="71.4310%" y="117" width="0.2262%" height="15" fill="rgb(220,109,13)"/><text x="71.6810%" y="127.50"></text></g><g><title>adt_sized_constraint (779,588 samples, 0.36%)</title><rect x="71.3178%" y="133" width="0.3600%" height="15" fill="rgb(232,18,1)"/><text x="71.5678%" y="143.50"></text></g><g><title>adt_sized_constraint (1,202,023 samples, 0.56%)</title><rect x="71.1362%" y="149" width="0.5550%" height="15" fill="rgb(215,41,42)"/><text x="71.3862%" y="159.50"></text></g><g><title>evaluate_obligation (2,829,010 samples, 1.31%)</title><rect x="70.4754%" y="165" width="1.3063%" height="15" fill="rgb(224,123,36)"/><text x="70.7254%" y="175.50"></text></g><g><title>object_safety_violations (650,107 samples, 0.30%)</title><rect x="71.8556%" y="165" width="0.3002%" height="15" fill="rgb(240,125,3)"/><text x="72.1056%" y="175.50"></text></g><g><title>param_env (291,314 samples, 0.13%)</title><rect x="72.1558%" y="165" width="0.1345%" height="15" fill="rgb(205,98,50)"/><text x="72.4058%" y="175.50"></text></g><g><title>analysis (156,054,570 samples, 72.06%)</title><rect x="0.3395%" y="229" width="72.0590%" height="15" fill="rgb(205,185,37)"/><text x="0.5895%" y="239.50">analysis</text></g><g><title>type_check_crate (86,088,200 samples, 39.75%)</title><rect x="32.6468%" y="213" width="39.7517%" height="15" fill="rgb(238,207,15)"/><text x="32.8968%" y="223.50">type_check_crate</text></g><g><title>wf_checking (10,971,403 samples, 5.07%)</title><rect x="67.3324%" y="197" width="5.0661%" height="15" fill="rgb(213,199,42)"/><text x="67.5824%" y="207.50">wf_che..</text></g><g><title>check_item_well_formed (6,219,407 samples, 2.87%)</title><rect x="69.5267%" y="181" width="2.8718%" height="15" fill="rgb(235,201,11)"/><text x="69.7767%" y="191.50">ch..</text></g><g><title>codegen_crate (389,174 samples, 0.18%)</title><rect x="72.4037%" y="229" width="0.1797%" height="15" fill="rgb(207,46,11)"/><text x="72.6537%" y="239.50"></text></g><g><title>AST_validation (323,753 samples, 0.15%)</title><rect x="72.6885%" y="213" width="0.1495%" height="15" fill="rgb(241,35,35)"/><text x="72.9385%" y="223.50"></text></g><g><title>metadata_load_macro (336,733 samples, 0.16%)</title><rect x="89.6452%" y="181" width="0.1555%" height="15" fill="rgb(243,32,47)"/><text x="89.8952%" y="191.50"></text></g><g><title>metadata_register_crate (2,734,620 samples, 1.26%)</title><rect x="89.8007%" y="181" width="1.2627%" height="15" fill="rgb(247,202,23)"/><text x="90.0507%" y="191.50"></text></g><g><title>metadata_register_crate (981,610 samples, 0.45%)</title><rect x="90.6101%" y="165" width="0.4533%" height="15" fill="rgb(219,102,11)"/><text x="90.8601%" y="175.50"></text></g><g><title>macro_expand_crate (39,889,405 samples, 18.42%)</title><rect x="72.9652%" y="213" width="18.4191%" height="15" fill="rgb(243,110,44)"/><text x="73.2152%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (39,860,684 samples, 18.41%)</title><rect x="72.9785%" y="197" width="18.4059%" height="15" fill="rgb(222,74,54)"/><text x="73.2285%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (695,109 samples, 0.32%)</title><rect x="91.0634%" y="181" width="0.3210%" height="15" fill="rgb(216,99,12)"/><text x="91.3134%" y="191.50"></text></g><g><title>late_resolve_crate (3,766,702 samples, 1.74%)</title><rect x="91.6031%" y="197" width="1.7393%" height="15" fill="rgb(226,22,26)"/><text x="91.8531%" y="207.50"></text></g><g><title>configure_and_expand (45,227,925 samples, 20.88%)</title><rect x="72.5834%" y="229" width="20.8842%" height="15" fill="rgb(217,163,10)"/><text x="72.8334%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (4,365,229 samples, 2.02%)</title><rect x="91.4520%" y="213" width="2.0157%" height="15" fill="rgb(213,25,53)"/><text x="91.7020%" y="223.50">r..</text></g><g><title>drop_ast (303,714 samples, 0.14%)</title><rect x="93.4676%" y="229" width="0.1402%" height="15" fill="rgb(252,105,26)"/><text x="93.7176%" y="239.50"></text></g><g><title>early_lint_checks (492,995 samples, 0.23%)</title><rect x="93.6150%" y="229" width="0.2276%" height="15" fill="rgb(220,39,43)"/><text x="93.8650%" y="239.50"></text></g><g><title>free_global_ctxt (4,193,207 samples, 1.94%)</title><rect x="93.8427%" y="229" width="1.9362%" height="15" fill="rgb(229,68,48)"/><text x="94.0927%" y="239.50">f..</text></g><g><title>generate_crate_metadata (1,891,512 samples, 0.87%)</title><rect x="95.7789%" y="229" width="0.8734%" height="15" fill="rgb(252,8,32)"/><text x="96.0289%" y="239.50"></text></g><g><title>hir_lowering (4,115,176 samples, 1.90%)</title><rect x="96.6523%" y="229" width="1.9002%" height="15" fill="rgb(223,20,43)"/><text x="96.9023%" y="239.50">h..</text></g><g><title>parse_crate (1,382,295 samples, 0.64%)</title><rect x="98.5907%" y="229" width="0.6383%" height="15" fill="rgb(229,81,49)"/><text x="98.8407%" y="239.50"></text></g><g><title>prepare_outputs (271,233 samples, 0.13%)</title><rect x="99.2328%" y="229" width="0.1252%" height="15" fill="rgb(236,28,36)"/><text x="99.4828%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (893,200 samples, 0.41%)</title><rect x="99.3581%" y="229" width="0.4124%" height="15" fill="rgb(249,185,26)"/><text x="99.6081%" y="239.50"></text></g><g><title>all (216,564,894 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (216,564,894 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (399,644 samples, 0.18%)</title><rect x="99.8155%" y="229" width="0.1845%" height="15" fill="rgb(221,78,26)"/><text x="100.0655%" y="239.50"></text></g></svg></svg>