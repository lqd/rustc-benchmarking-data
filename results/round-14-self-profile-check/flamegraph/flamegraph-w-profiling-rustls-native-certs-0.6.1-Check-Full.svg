<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (220,483 samples, 0.41%)</title><rect x="8.0524%" y="181" width="0.4080%" height="15" fill="rgb(227,0,7)"/><text x="8.3024%" y="191.50"></text></g><g><title>item_attrs (154,282 samples, 0.29%)</title><rect x="8.8265%" y="149" width="0.2855%" height="15" fill="rgb(217,0,24)"/><text x="9.0765%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (150,802 samples, 0.28%)</title><rect x="8.8330%" y="133" width="0.2791%" height="15" fill="rgb(221,193,54)"/><text x="9.0830%" y="143.50"></text></g><g><title>codegen_fn_attrs (220,372 samples, 0.41%)</title><rect x="8.7303%" y="165" width="0.4078%" height="15" fill="rgb(248,212,6)"/><text x="8.9803%" y="175.50"></text></g><g><title>adt_drop_tys (123,482 samples, 0.23%)</title><rect x="10.5888%" y="101" width="0.2285%" height="15" fill="rgb(208,68,35)"/><text x="10.8388%" y="111.50"></text></g><g><title>adt_drop_tys (197,752 samples, 0.37%)</title><rect x="10.5672%" y="117" width="0.3660%" height="15" fill="rgb(232,128,0)"/><text x="10.8172%" y="127.50"></text></g><g><title>is_copy_raw (187,382 samples, 0.35%)</title><rect x="10.9332%" y="117" width="0.3468%" height="15" fill="rgb(207,160,47)"/><text x="11.1832%" y="127.50"></text></g><g><title>evaluate_obligation (162,992 samples, 0.30%)</title><rect x="10.9783%" y="101" width="0.3016%" height="15" fill="rgb(228,23,34)"/><text x="11.2283%" y="111.50"></text></g><g><title>adt_drop_tys (511,415 samples, 0.95%)</title><rect x="10.5029%" y="133" width="0.9464%" height="15" fill="rgb(218,30,26)"/><text x="10.7529%" y="143.50"></text></g><g><title>param_env (91,531 samples, 0.17%)</title><rect x="11.2800%" y="117" width="0.1694%" height="15" fill="rgb(220,122,19)"/><text x="11.5300%" y="127.50"></text></g><g><title>predicates_of (79,382 samples, 0.15%)</title><rect x="12.4658%" y="101" width="0.1469%" height="15" fill="rgb(250,228,42)"/><text x="12.7158%" y="111.50"></text></g><g><title>predicates_defined_on (62,582 samples, 0.12%)</title><rect x="12.4969%" y="85" width="0.1158%" height="15" fill="rgb(240,193,28)"/><text x="12.7469%" y="95.50"></text></g><g><title>needs_drop_raw (1,505,105 samples, 2.79%)</title><rect x="10.3361%" y="149" width="2.7854%" height="15" fill="rgb(216,20,37)"/><text x="10.5861%" y="159.50">ne..</text></g><g><title>is_copy_raw (903,560 samples, 1.67%)</title><rect x="11.4494%" y="133" width="1.6722%" height="15" fill="rgb(206,188,39)"/><text x="11.6994%" y="143.50"></text></g><g><title>evaluate_obligation (817,860 samples, 1.51%)</title><rect x="11.6080%" y="117" width="1.5136%" height="15" fill="rgb(217,207,13)"/><text x="11.8580%" y="127.50"></text></g><g><title>trait_impls_of (271,843 samples, 0.50%)</title><rect x="12.6185%" y="101" width="0.5031%" height="15" fill="rgb(231,73,38)"/><text x="12.8685%" y="111.50"></text></g><g><title>implementations_of_trait (60,930 samples, 0.11%)</title><rect x="13.0088%" y="85" width="0.1128%" height="15" fill="rgb(225,20,46)"/><text x="13.2588%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (56,531 samples, 0.10%)</title><rect x="13.2314%" y="133" width="0.1046%" height="15" fill="rgb(210,31,41)"/><text x="13.4814%" y="143.50"></text></g><g><title>specialization_graph_of (56,451 samples, 0.10%)</title><rect x="13.3433%" y="133" width="0.1045%" height="15" fill="rgb(221,200,47)"/><text x="13.5933%" y="143.50"></text></g><g><title>resolve_instance (195,783 samples, 0.36%)</title><rect x="13.1215%" y="149" width="0.3623%" height="15" fill="rgb(226,26,5)"/><text x="13.3715%" y="159.50"></text></g><g><title>thir_body (181,994 samples, 0.34%)</title><rect x="13.4909%" y="149" width="0.3368%" height="15" fill="rgb(249,33,26)"/><text x="13.7409%" y="159.50"></text></g><g><title>mir_const (3,420,378 samples, 6.33%)</title><rect x="7.5023%" y="197" width="6.3299%" height="15" fill="rgb(235,183,28)"/><text x="7.7523%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (2,902,633 samples, 5.37%)</title><rect x="8.4604%" y="181" width="5.3717%" height="15" fill="rgb(221,5,38)"/><text x="8.7104%" y="191.50">unsafet..</text></g><g><title>mir_built (2,536,450 samples, 4.69%)</title><rect x="9.1381%" y="165" width="4.6941%" height="15" fill="rgb(247,18,42)"/><text x="9.3881%" y="175.50">mir_b..</text></g><g><title>mir_promoted (3,823,143 samples, 7.08%)</title><rect x="6.9384%" y="213" width="7.0753%" height="15" fill="rgb(241,131,45)"/><text x="7.1884%" y="223.50">mir_promo..</text></g><g><title>mir_const_qualif (98,071 samples, 0.18%)</title><rect x="13.8322%" y="197" width="0.1815%" height="15" fill="rgb(249,31,29)"/><text x="14.0822%" y="207.50"></text></g><g><title>mir_const (69,371 samples, 0.13%)</title><rect x="13.8853%" y="181" width="0.1284%" height="15" fill="rgb(225,111,53)"/><text x="14.1353%" y="191.50"></text></g><g><title>unsafety_check_result (57,480 samples, 0.11%)</title><rect x="13.9073%" y="165" width="0.1064%" height="15" fill="rgb(238,160,17)"/><text x="14.1573%" y="175.50"></text></g><g><title>type_op_ascribe_user_type (339,684 samples, 0.63%)</title><rect x="14.0264%" y="213" width="0.6286%" height="15" fill="rgb(214,148,48)"/><text x="14.2764%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (179,692 samples, 0.33%)</title><rect x="14.6550%" y="213" width="0.3325%" height="15" fill="rgb(232,36,49)"/><text x="14.9050%" y="223.50"></text></g><g><title>normalize_projection_ty (121,901 samples, 0.23%)</title><rect x="14.7620%" y="197" width="0.2256%" height="15" fill="rgb(209,103,24)"/><text x="15.0120%" y="207.50"></text></g><g><title>type_op_normalize_predicate (241,782 samples, 0.45%)</title><rect x="14.9876%" y="213" width="0.4475%" height="15" fill="rgb(229,88,8)"/><text x="15.2376%" y="223.50"></text></g><g><title>normalize_projection_ty (186,411 samples, 0.34%)</title><rect x="15.0900%" y="197" width="0.3450%" height="15" fill="rgb(213,181,19)"/><text x="15.3400%" y="207.50"></text></g><g><title>type_op_prove_predicate (724,278 samples, 1.34%)</title><rect x="15.4350%" y="213" width="1.3404%" height="15" fill="rgb(254,191,54)"/><text x="15.6850%" y="223.50"></text></g><g><title>MIR_borrow_checking (8,396,354 samples, 15.54%)</title><rect x="1.2639%" y="245" width="15.5387%" height="15" fill="rgb(241,83,37)"/><text x="1.5139%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,377,164 samples, 15.50%)</title><rect x="1.2994%" y="229" width="15.5032%" height="15" fill="rgb(233,36,39)"/><text x="1.5494%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (160,912 samples, 0.30%)</title><rect x="16.8026%" y="245" width="0.2978%" height="15" fill="rgb(226,3,54)"/><text x="17.0526%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (119,761 samples, 0.22%)</title><rect x="16.8787%" y="229" width="0.2216%" height="15" fill="rgb(245,192,40)"/><text x="17.1287%" y="239.50"></text></g><g><title>hir_module_items (120,782 samples, 0.22%)</title><rect x="17.1004%" y="245" width="0.2235%" height="15" fill="rgb(238,167,29)"/><text x="17.3504%" y="255.50"></text></g><g><title>get_lang_items (71,461 samples, 0.13%)</title><rect x="17.6545%" y="197" width="0.1322%" height="15" fill="rgb(232,182,51)"/><text x="17.9045%" y="207.50"></text></g><g><title>codegen_fn_attrs (177,312 samples, 0.33%)</title><rect x="17.5437%" y="213" width="0.3281%" height="15" fill="rgb(231,60,39)"/><text x="17.7937%" y="223.50"></text></g><g><title>check_mod_attrs (268,753 samples, 0.50%)</title><rect x="17.3748%" y="229" width="0.4974%" height="15" fill="rgb(208,69,12)"/><text x="17.6248%" y="239.50"></text></g><g><title>lookup_deprecation_entry (83,190 samples, 0.15%)</title><rect x="18.1666%" y="213" width="0.1540%" height="15" fill="rgb(235,93,37)"/><text x="18.4166%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (266,613 samples, 0.49%)</title><rect x="17.9853%" y="229" width="0.4934%" height="15" fill="rgb(213,116,39)"/><text x="18.2353%" y="239.50"></text></g><g><title>misc_checking_1 (666,287 samples, 1.23%)</title><rect x="17.3252%" y="245" width="1.2331%" height="15" fill="rgb(222,207,29)"/><text x="17.5752%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (209,233 samples, 0.39%)</title><rect x="18.5625%" y="229" width="0.3872%" height="15" fill="rgb(206,96,30)"/><text x="18.8125%" y="239.50"></text></g><g><title>check_mod_liveness (176,793 samples, 0.33%)</title><rect x="18.6226%" y="213" width="0.3272%" height="15" fill="rgb(218,138,4)"/><text x="18.8726%" y="223.50"></text></g><g><title>type_uninhabited_from (71,151 samples, 0.13%)</title><rect x="18.8181%" y="197" width="0.1317%" height="15" fill="rgb(250,191,14)"/><text x="19.0681%" y="207.50"></text></g><g><title>misc_checking_2 (392,505 samples, 0.73%)</title><rect x="18.5582%" y="245" width="0.7264%" height="15" fill="rgb(239,60,40)"/><text x="18.8082%" y="255.50"></text></g><g><title>match_checking (180,932 samples, 0.33%)</title><rect x="18.9498%" y="229" width="0.3348%" height="15" fill="rgb(206,27,48)"/><text x="19.1998%" y="239.50"></text></g><g><title>check_match (173,072 samples, 0.32%)</title><rect x="18.9643%" y="213" width="0.3203%" height="15" fill="rgb(225,35,8)"/><text x="19.2143%" y="223.50"></text></g><g><title>check_private_in_public (58,441 samples, 0.11%)</title><rect x="19.3044%" y="229" width="0.1082%" height="15" fill="rgb(250,213,24)"/><text x="19.5544%" y="239.50"></text></g><g><title>death_checking (191,512 samples, 0.35%)</title><rect x="19.4126%" y="229" width="0.3544%" height="15" fill="rgb(247,123,22)"/><text x="19.6626%" y="239.50"></text></g><g><title>lint_levels (66,011 samples, 0.12%)</title><rect x="19.6449%" y="213" width="0.1222%" height="15" fill="rgb(231,138,38)"/><text x="19.8949%" y="223.50"></text></g><g><title>eval_to_const_value_raw (165,831 samples, 0.31%)</title><rect x="20.8819%" y="197" width="0.3069%" height="15" fill="rgb(231,145,46)"/><text x="21.1319%" y="207.50"></text></g><g><title>eval_to_const_value_raw (158,751 samples, 0.29%)</title><rect x="20.8950%" y="181" width="0.2938%" height="15" fill="rgb(251,118,11)"/><text x="21.1450%" y="191.50"></text></g><g><title>eval_to_allocation_raw (153,011 samples, 0.28%)</title><rect x="20.9056%" y="165" width="0.2832%" height="15" fill="rgb(217,147,25)"/><text x="21.1556%" y="175.50"></text></g><g><title>param_env (173,343 samples, 0.32%)</title><rect x="21.1888%" y="197" width="0.3208%" height="15" fill="rgb(247,81,37)"/><text x="21.4388%" y="207.50"></text></g><g><title>predicates_of (78,292 samples, 0.14%)</title><rect x="21.3647%" y="181" width="0.1449%" height="15" fill="rgb(209,12,38)"/><text x="21.6147%" y="191.50"></text></g><g><title>predicates_defined_on (66,362 samples, 0.12%)</title><rect x="21.3868%" y="165" width="0.1228%" height="15" fill="rgb(227,1,9)"/><text x="21.6368%" y="175.50"></text></g><g><title>crate_lints (4,494,671 samples, 8.32%)</title><rect x="19.7700%" y="213" width="8.3180%" height="15" fill="rgb(248,47,43)"/><text x="20.0200%" y="223.50">crate_lints</text></g><g><title>type_of (3,551,659 samples, 6.57%)</title><rect x="21.5152%" y="197" width="6.5729%" height="15" fill="rgb(221,10,30)"/><text x="21.7652%" y="207.50">type_of</text></g><g><title>metadata_decode_entry_type_of (3,174,985 samples, 5.88%)</title><rect x="22.2123%" y="181" width="5.8758%" height="15" fill="rgb(210,229,1)"/><text x="22.4623%" y="191.50">metadat..</text></g><g><title>lint_checking (4,578,952 samples, 8.47%)</title><rect x="19.7670%" y="229" width="8.4740%" height="15" fill="rgb(222,148,37)"/><text x="20.0170%" y="239.50">lint_checking</text></g><g><title>module_lints (82,671 samples, 0.15%)</title><rect x="28.0880%" y="213" width="0.1530%" height="15" fill="rgb(234,67,33)"/><text x="28.3380%" y="223.50"></text></g><g><title>lint_mod (79,271 samples, 0.15%)</title><rect x="28.0943%" y="197" width="0.1467%" height="15" fill="rgb(247,98,35)"/><text x="28.3443%" y="207.50"></text></g><g><title>privacy_access_levels (63,070 samples, 0.12%)</title><rect x="28.2410%" y="229" width="0.1167%" height="15" fill="rgb(247,138,52)"/><text x="28.4910%" y="239.50"></text></g><g><title>privacy_checking_modules (114,141 samples, 0.21%)</title><rect x="28.3578%" y="229" width="0.2112%" height="15" fill="rgb(213,79,30)"/><text x="28.6078%" y="239.50"></text></g><g><title>check_mod_privacy (112,441 samples, 0.21%)</title><rect x="28.3609%" y="213" width="0.2081%" height="15" fill="rgb(246,177,23)"/><text x="28.6109%" y="223.50"></text></g><g><title>misc_checking_3 (5,033,876 samples, 9.32%)</title><rect x="19.2846%" y="245" width="9.3159%" height="15" fill="rgb(230,62,27)"/><text x="19.5346%" y="255.50">misc_checking..</text></g><g><title>adt_sized_constraint (57,991 samples, 0.11%)</title><rect x="39.5026%" y="181" width="0.1073%" height="15" fill="rgb(216,154,8)"/><text x="39.7526%" y="191.50"></text></g><g><title>associated_item (604,466 samples, 1.12%)</title><rect x="40.1111%" y="165" width="1.1187%" height="15" fill="rgb(244,35,45)"/><text x="40.3611%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (449,435 samples, 0.83%)</title><rect x="40.3980%" y="149" width="0.8317%" height="15" fill="rgb(251,115,12)"/><text x="40.6480%" y="159.50"></text></g><g><title>associated_items (896,169 samples, 1.66%)</title><rect x="39.6552%" y="181" width="1.6585%" height="15" fill="rgb(240,54,50)"/><text x="39.9052%" y="191.50"></text></g><g><title>adt_def (224,282 samples, 0.42%)</title><rect x="41.9832%" y="149" width="0.4151%" height="15" fill="rgb(233,84,52)"/><text x="42.2332%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (222,132 samples, 0.41%)</title><rect x="41.9872%" y="133" width="0.4111%" height="15" fill="rgb(207,117,47)"/><text x="42.2372%" y="143.50"></text></g><g><title>item_attrs (175,981 samples, 0.33%)</title><rect x="42.0726%" y="117" width="0.3257%" height="15" fill="rgb(249,43,39)"/><text x="42.3226%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (173,651 samples, 0.32%)</title><rect x="42.0769%" y="101" width="0.3214%" height="15" fill="rgb(209,38,44)"/><text x="42.3269%" y="111.50"></text></g><g><title>adt_def (63,671 samples, 0.12%)</title><rect x="42.8758%" y="85" width="0.1178%" height="15" fill="rgb(236,212,23)"/><text x="43.1258%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (63,171 samples, 0.12%)</title><rect x="42.8767%" y="69" width="0.1169%" height="15" fill="rgb(242,79,21)"/><text x="43.1267%" y="79.50"></text></g><g><title>item_attrs (59,231 samples, 0.11%)</title><rect x="42.8840%" y="53" width="0.1096%" height="15" fill="rgb(211,96,35)"/><text x="43.1340%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (58,611 samples, 0.11%)</title><rect x="42.8852%" y="37" width="0.1085%" height="15" fill="rgb(253,215,40)"/><text x="43.1352%" y="47.50"></text></g><g><title>adt_dtorck_constraint (73,041 samples, 0.14%)</title><rect x="42.8650%" y="101" width="0.1352%" height="15" fill="rgb(211,81,21)"/><text x="43.1150%" y="111.50"></text></g><g><title>adt_dtorck_constraint (147,541 samples, 0.27%)</title><rect x="42.7414%" y="117" width="0.2730%" height="15" fill="rgb(208,190,38)"/><text x="42.9914%" y="127.50"></text></g><g><title>adt_dtorck_constraint (199,312 samples, 0.37%)</title><rect x="42.6708%" y="133" width="0.3689%" height="15" fill="rgb(235,213,38)"/><text x="42.9208%" y="143.50"></text></g><g><title>adt_dtorck_constraint (305,163 samples, 0.56%)</title><rect x="42.4975%" y="149" width="0.5647%" height="15" fill="rgb(237,122,38)"/><text x="42.7475%" y="159.50"></text></g><g><title>dropck_outlives (960,411 samples, 1.78%)</title><rect x="41.4428%" y="181" width="1.7774%" height="15" fill="rgb(244,218,35)"/><text x="41.6928%" y="191.50">d..</text></g><g><title>adt_dtorck_constraint (760,207 samples, 1.41%)</title><rect x="41.8133%" y="165" width="1.4069%" height="15" fill="rgb(240,68,47)"/><text x="42.0633%" y="175.50"></text></g><g><title>adt_def (427,354 samples, 0.79%)</title><rect x="46.1317%" y="149" width="0.7909%" height="15" fill="rgb(210,16,53)"/><text x="46.3817%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (421,184 samples, 0.78%)</title><rect x="46.1431%" y="133" width="0.7795%" height="15" fill="rgb(235,124,12)"/><text x="46.3931%" y="143.50"></text></g><g><title>item_attrs (345,653 samples, 0.64%)</title><rect x="46.2829%" y="117" width="0.6397%" height="15" fill="rgb(224,169,11)"/><text x="46.5329%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (338,113 samples, 0.63%)</title><rect x="46.2968%" y="101" width="0.6257%" height="15" fill="rgb(250,166,2)"/><text x="46.5468%" y="111.50"></text></g><g><title>adt_sized_constraint (104,801 samples, 0.19%)</title><rect x="46.9225%" y="149" width="0.1939%" height="15" fill="rgb(242,216,29)"/><text x="47.1725%" y="159.50"></text></g><g><title>adt_sized_constraint (587,897 samples, 1.09%)</title><rect x="46.0709%" y="165" width="1.0880%" height="15" fill="rgb(230,116,27)"/><text x="46.3209%" y="175.50"></text></g><g><title>impl_trait_ref (188,691 samples, 0.35%)</title><rect x="47.3171%" y="165" width="0.3492%" height="15" fill="rgb(228,99,48)"/><text x="47.5671%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (158,441 samples, 0.29%)</title><rect x="47.3731%" y="149" width="0.2932%" height="15" fill="rgb(253,11,6)"/><text x="47.6231%" y="159.50"></text></g><g><title>explicit_predicates_of (92,892 samples, 0.17%)</title><rect x="47.9904%" y="133" width="0.1719%" height="15" fill="rgb(247,143,39)"/><text x="48.2404%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (78,282 samples, 0.14%)</title><rect x="48.0174%" y="117" width="0.1449%" height="15" fill="rgb(236,97,10)"/><text x="48.2674%" y="127.50"></text></g><g><title>predicates_of (274,905 samples, 0.51%)</title><rect x="47.6964%" y="165" width="0.5088%" height="15" fill="rgb(233,208,19)"/><text x="47.9464%" y="175.50"></text></g><g><title>predicates_defined_on (186,774 samples, 0.35%)</title><rect x="47.8595%" y="149" width="0.3457%" height="15" fill="rgb(216,164,2)"/><text x="48.1095%" y="159.50"></text></g><g><title>specializes (94,340 samples, 0.17%)</title><rect x="48.2051%" y="165" width="0.1746%" height="15" fill="rgb(220,129,5)"/><text x="48.4551%" y="175.50"></text></g><g><title>evaluate_obligation (3,959,082 samples, 7.33%)</title><rect x="43.2202%" y="181" width="7.3269%" height="15" fill="rgb(242,17,10)"/><text x="43.4702%" y="191.50">evaluate_o..</text></g><g><title>trait_impls_of (1,150,031 samples, 2.13%)</title><rect x="48.4188%" y="165" width="2.1283%" height="15" fill="rgb(242,107,0)"/><text x="48.6688%" y="175.50">t..</text></g><g><title>implementations_of_trait (385,906 samples, 0.71%)</title><rect x="49.8329%" y="149" width="0.7142%" height="15" fill="rgb(251,28,31)"/><text x="50.0829%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (218,265 samples, 0.40%)</title><rect x="50.1431%" y="133" width="0.4039%" height="15" fill="rgb(233,223,10)"/><text x="50.3931%" y="143.50"></text></g><g><title>fn_sig (185,084 samples, 0.34%)</title><rect x="50.5934%" y="181" width="0.3425%" height="15" fill="rgb(215,21,27)"/><text x="50.8434%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (165,663 samples, 0.31%)</title><rect x="50.6293%" y="165" width="0.3066%" height="15" fill="rgb(232,23,21)"/><text x="50.8793%" y="175.50"></text></g><g><title>generics_of (120,930 samples, 0.22%)</title><rect x="50.9359%" y="181" width="0.2238%" height="15" fill="rgb(244,5,23)"/><text x="51.1859%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (83,180 samples, 0.15%)</title><rect x="51.0058%" y="165" width="0.1539%" height="15" fill="rgb(226,81,46)"/><text x="51.2558%" y="175.50"></text></g><g><title>impl_item_implementor_ids (102,412 samples, 0.19%)</title><rect x="51.1597%" y="181" width="0.1895%" height="15" fill="rgb(247,70,30)"/><text x="51.4097%" y="191.50"></text></g><g><title>associated_items (80,862 samples, 0.15%)</title><rect x="51.1996%" y="165" width="0.1496%" height="15" fill="rgb(212,68,19)"/><text x="51.4496%" y="175.50"></text></g><g><title>item_attrs (206,100 samples, 0.38%)</title><rect x="51.5186%" y="181" width="0.3814%" height="15" fill="rgb(240,187,13)"/><text x="51.7686%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (193,440 samples, 0.36%)</title><rect x="51.5420%" y="165" width="0.3580%" height="15" fill="rgb(223,113,26)"/><text x="51.7920%" y="175.50"></text></g><g><title>evaluate_obligation (94,223 samples, 0.17%)</title><rect x="52.1491%" y="165" width="0.1744%" height="15" fill="rgb(206,192,2)"/><text x="52.3991%" y="175.50"></text></g><g><title>method_autoderef_steps (180,803 samples, 0.33%)</title><rect x="52.0186%" y="181" width="0.3346%" height="15" fill="rgb(241,108,4)"/><text x="52.2686%" y="191.50"></text></g><g><title>evaluate_obligation (242,203 samples, 0.45%)</title><rect x="53.1864%" y="165" width="0.4482%" height="15" fill="rgb(247,173,49)"/><text x="53.4364%" y="175.50"></text></g><g><title>fn_sig (70,990 samples, 0.13%)</title><rect x="53.6347%" y="165" width="0.1314%" height="15" fill="rgb(224,114,35)"/><text x="53.8847%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (64,180 samples, 0.12%)</title><rect x="53.6473%" y="149" width="0.1188%" height="15" fill="rgb(245,159,27)"/><text x="53.8973%" y="159.50"></text></g><g><title>layout_of (68,221 samples, 0.13%)</title><rect x="53.9400%" y="149" width="0.1263%" height="15" fill="rgb(245,172,44)"/><text x="54.1900%" y="159.50"></text></g><g><title>layout_of (148,232 samples, 0.27%)</title><rect x="53.7963%" y="165" width="0.2743%" height="15" fill="rgb(236,23,11)"/><text x="54.0463%" y="175.50"></text></g><g><title>param_env (157,644 samples, 0.29%)</title><rect x="54.0707%" y="165" width="0.2917%" height="15" fill="rgb(205,117,38)"/><text x="54.3207%" y="175.50"></text></g><g><title>predicates_of (127,272 samples, 0.24%)</title><rect x="54.3624%" y="165" width="0.2355%" height="15" fill="rgb(237,72,25)"/><text x="54.6124%" y="175.50"></text></g><g><title>predicates_defined_on (70,891 samples, 0.13%)</title><rect x="54.4668%" y="149" width="0.1312%" height="15" fill="rgb(244,70,9)"/><text x="54.7168%" y="159.50"></text></g><g><title>object_safety_violations (1,226,964 samples, 2.27%)</title><rect x="52.3532%" y="181" width="2.2707%" height="15" fill="rgb(217,125,39)"/><text x="52.6032%" y="191.50">o..</text></g><g><title>explicit_predicates_of (265,142 samples, 0.49%)</title><rect x="55.1861%" y="149" width="0.4907%" height="15" fill="rgb(235,36,10)"/><text x="55.4361%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (229,222 samples, 0.42%)</title><rect x="55.2525%" y="133" width="0.4242%" height="15" fill="rgb(251,123,47)"/><text x="55.5025%" y="143.50"></text></g><g><title>predicates_of (626,587 samples, 1.16%)</title><rect x="54.6674%" y="181" width="1.1596%" height="15" fill="rgb(221,13,13)"/><text x="54.9174%" y="191.50"></text></g><g><title>predicates_defined_on (458,195 samples, 0.85%)</title><rect x="54.9791%" y="165" width="0.8480%" height="15" fill="rgb(238,131,9)"/><text x="55.2291%" y="175.50"></text></g><g><title>inferred_outlives_of (81,200 samples, 0.15%)</title><rect x="55.6767%" y="149" width="0.1503%" height="15" fill="rgb(211,50,8)"/><text x="55.9267%" y="159.50"></text></g><g><title>type_of (141,213 samples, 0.26%)</title><rect x="55.8923%" y="181" width="0.2613%" height="15" fill="rgb(245,182,24)"/><text x="56.1423%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (115,582 samples, 0.21%)</title><rect x="55.9397%" y="165" width="0.2139%" height="15" fill="rgb(242,14,37)"/><text x="56.1897%" y="175.50"></text></g><g><title>variances_of (66,500 samples, 0.12%)</title><rect x="56.1589%" y="181" width="0.1231%" height="15" fill="rgb(246,228,12)"/><text x="56.4089%" y="191.50"></text></g><g><title>item_bodies_checking (14,889,076 samples, 27.55%)</title><rect x="28.7542%" y="229" width="27.5544%" height="15" fill="rgb(213,55,15)"/><text x="29.0042%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (14,885,696 samples, 27.55%)</title><rect x="28.7604%" y="213" width="27.5482%" height="15" fill="rgb(209,9,3)"/><text x="29.0104%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (14,873,495 samples, 27.53%)</title><rect x="28.7830%" y="197" width="27.5256%" height="15" fill="rgb(230,59,30)"/><text x="29.0330%" y="207.50">typeck</text></g><g><title>impl_parent (151,893 samples, 0.28%)</title><rect x="56.7535%" y="149" width="0.2811%" height="15" fill="rgb(209,121,21)"/><text x="57.0035%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (108,062 samples, 0.20%)</title><rect x="56.8347%" y="133" width="0.2000%" height="15" fill="rgb(220,109,13)"/><text x="57.0847%" y="143.50"></text></g><g><title>impl_trait_ref (564,687 samples, 1.05%)</title><rect x="57.0346%" y="149" width="1.0450%" height="15" fill="rgb(232,18,1)"/><text x="57.2846%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (518,996 samples, 0.96%)</title><rect x="57.1192%" y="133" width="0.9605%" height="15" fill="rgb(215,41,42)"/><text x="57.3692%" y="143.50"></text></g><g><title>adt_destructor (973,841 samples, 1.80%)</title><rect x="56.3890%" y="197" width="1.8022%" height="15" fill="rgb(224,123,36)"/><text x="56.6390%" y="207.50">a..</text></g><g><title>coherent_trait (967,511 samples, 1.79%)</title><rect x="56.4007%" y="181" width="1.7905%" height="15" fill="rgb(240,125,3)"/><text x="56.6507%" y="191.50">c..</text></g><g><title>specialization_graph_of (961,891 samples, 1.78%)</title><rect x="56.4111%" y="165" width="1.7801%" height="15" fill="rgb(205,98,50)"/><text x="56.6611%" y="175.50">s..</text></g><g><title>trait_impls_of (60,291 samples, 0.11%)</title><rect x="58.0797%" y="149" width="0.1116%" height="15" fill="rgb(205,185,37)"/><text x="58.3297%" y="159.50"></text></g><g><title>item_types_checking (1,321,065 samples, 2.44%)</title><rect x="56.3086%" y="229" width="2.4448%" height="15" fill="rgb(238,207,15)"/><text x="56.5586%" y="239.50">it..</text></g><g><title>check_mod_item_types (1,316,475 samples, 2.44%)</title><rect x="56.3171%" y="213" width="2.4363%" height="15" fill="rgb(213,199,42)"/><text x="56.5671%" y="223.50">ch..</text></g><g><title>typeck (288,954 samples, 0.53%)</title><rect x="58.2187%" y="197" width="0.5348%" height="15" fill="rgb(235,201,11)"/><text x="58.4687%" y="207.50"></text></g><g><title>late_bound_vars_map (78,600 samples, 0.15%)</title><rect x="59.1164%" y="181" width="0.1455%" height="15" fill="rgb(207,46,11)"/><text x="59.3664%" y="191.50"></text></g><g><title>resolve_lifetimes (71,270 samples, 0.13%)</title><rect x="59.1300%" y="165" width="0.1319%" height="15" fill="rgb(241,35,35)"/><text x="59.3800%" y="175.50"></text></g><g><title>fn_sig (312,743 samples, 0.58%)</title><rect x="58.9116%" y="197" width="0.5788%" height="15" fill="rgb(243,32,47)"/><text x="59.1616%" y="207.50"></text></g><g><title>type_of (123,491 samples, 0.23%)</title><rect x="59.2619%" y="181" width="0.2285%" height="15" fill="rgb(247,202,23)"/><text x="59.5119%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (79,871 samples, 0.15%)</title><rect x="59.3426%" y="165" width="0.1478%" height="15" fill="rgb(219,102,11)"/><text x="59.5926%" y="175.50"></text></g><g><title>generics_of (72,561 samples, 0.13%)</title><rect x="59.4904%" y="197" width="0.1343%" height="15" fill="rgb(243,110,44)"/><text x="59.7404%" y="207.50"></text></g><g><title>predicates_of (139,923 samples, 0.26%)</title><rect x="59.6247%" y="197" width="0.2589%" height="15" fill="rgb(222,74,54)"/><text x="59.8747%" y="207.50"></text></g><g><title>predicates_defined_on (130,463 samples, 0.24%)</title><rect x="59.6422%" y="181" width="0.2414%" height="15" fill="rgb(216,99,12)"/><text x="59.8922%" y="191.50"></text></g><g><title>inferred_outlives_of (83,431 samples, 0.15%)</title><rect x="59.7293%" y="165" width="0.1544%" height="15" fill="rgb(226,22,26)"/><text x="59.9793%" y="175.50"></text></g><g><title>inferred_outlives_crate (70,931 samples, 0.13%)</title><rect x="59.7524%" y="149" width="0.1313%" height="15" fill="rgb(217,163,10)"/><text x="60.0024%" y="159.50"></text></g><g><title>type_collecting (639,437 samples, 1.18%)</title><rect x="58.7589%" y="229" width="1.1834%" height="15" fill="rgb(213,25,53)"/><text x="59.0089%" y="239.50"></text></g><g><title>collect_mod_item_types (627,257 samples, 1.16%)</title><rect x="58.7814%" y="213" width="1.1608%" height="15" fill="rgb(252,105,26)"/><text x="59.0314%" y="223.50"></text></g><g><title>adt_def (165,622 samples, 0.31%)</title><rect x="61.2898%" y="165" width="0.3065%" height="15" fill="rgb(220,39,43)"/><text x="61.5398%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (162,092 samples, 0.30%)</title><rect x="61.2963%" y="149" width="0.3000%" height="15" fill="rgb(229,68,48)"/><text x="61.5463%" y="159.50"></text></g><g><title>item_attrs (131,991 samples, 0.24%)</title><rect x="61.3520%" y="133" width="0.2443%" height="15" fill="rgb(252,8,32)"/><text x="61.6020%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (128,401 samples, 0.24%)</title><rect x="61.3587%" y="117" width="0.2376%" height="15" fill="rgb(223,20,43)"/><text x="61.6087%" y="127.50"></text></g><g><title>adt_sized_constraint (60,410 samples, 0.11%)</title><rect x="61.6262%" y="149" width="0.1118%" height="15" fill="rgb(229,81,49)"/><text x="61.8762%" y="159.50"></text></g><g><title>adt_sized_constraint (104,811 samples, 0.19%)</title><rect x="61.5963%" y="165" width="0.1940%" height="15" fill="rgb(236,28,36)"/><text x="61.8463%" y="175.50"></text></g><g><title>adt_sized_constraint (303,894 samples, 0.56%)</title><rect x="61.2581%" y="181" width="0.5624%" height="15" fill="rgb(249,185,26)"/><text x="61.5081%" y="191.50"></text></g><g><title>evaluate_obligation (531,326 samples, 0.98%)</title><rect x="60.9595%" y="197" width="0.9833%" height="15" fill="rgb(249,174,33)"/><text x="61.2095%" y="207.50"></text></g><g><title>implied_outlives_bounds (108,752 samples, 0.20%)</title><rect x="61.9428%" y="197" width="0.2013%" height="15" fill="rgb(233,201,37)"/><text x="62.1928%" y="207.50"></text></g><g><title>param_env (196,843 samples, 0.36%)</title><rect x="62.1440%" y="197" width="0.3643%" height="15" fill="rgb(221,78,26)"/><text x="62.3940%" y="207.50"></text></g><g><title>region_scope_tree (67,750 samples, 0.13%)</title><rect x="62.6054%" y="197" width="0.1254%" height="15" fill="rgb(250,127,30)"/><text x="62.8554%" y="207.50"></text></g><g><title>analysis (33,380,773 samples, 61.78%)</title><rect x="0.9962%" y="261" width="61.7760%" height="15" fill="rgb(230,49,44)"/><text x="1.2462%" y="271.50">analysis</text></g><g><title>type_check_crate (18,464,716 samples, 34.17%)</title><rect x="28.6005%" y="245" width="34.1717%" height="15" fill="rgb(229,67,23)"/><text x="28.8505%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,527,547 samples, 2.83%)</title><rect x="59.9452%" y="229" width="2.8269%" height="15" fill="rgb(249,83,47)"/><text x="60.1952%" y="239.50">wf..</text></g><g><title>check_item_well_formed (1,476,847 samples, 2.73%)</title><rect x="60.0391%" y="213" width="2.7331%" height="15" fill="rgb(215,43,3)"/><text x="60.2891%" y="223.50">ch..</text></g><g><title>codegen_crate (355,363 samples, 0.66%)</title><rect x="62.7896%" y="261" width="0.6577%" height="15" fill="rgb(238,154,13)"/><text x="63.0396%" y="271.50"></text></g><g><title>AST_validation (88,781 samples, 0.16%)</title><rect x="63.8153%" y="245" width="0.1643%" height="15" fill="rgb(219,56,2)"/><text x="64.0653%" y="255.50"></text></g><g><title>crate_injection (84,931 samples, 0.16%)</title><rect x="64.0123%" y="245" width="0.1572%" height="15" fill="rgb(233,0,4)"/><text x="64.2623%" y="255.50"></text></g><g><title>metadata_load_macro (113,501 samples, 0.21%)</title><rect x="81.6380%" y="213" width="0.2101%" height="15" fill="rgb(235,30,7)"/><text x="81.8880%" y="223.50"></text></g><g><title>metadata_register_crate (2,313,336 samples, 4.28%)</title><rect x="81.8481%" y="213" width="4.2812%" height="15" fill="rgb(250,79,13)"/><text x="82.0981%" y="223.50">metad..</text></g><g><title>metadata_register_crate (833,059 samples, 1.54%)</title><rect x="84.5876%" y="197" width="1.5417%" height="15" fill="rgb(211,146,34)"/><text x="84.8376%" y="207.50"></text></g><g><title>metadata_register_crate (68,350 samples, 0.13%)</title><rect x="86.0028%" y="181" width="0.1265%" height="15" fill="rgb(228,22,38)"/><text x="86.2528%" y="191.50"></text></g><g><title>macro_expand_crate (11,882,643 samples, 21.99%)</title><rect x="64.1695%" y="245" width="21.9906%" height="15" fill="rgb(235,168,5)"/><text x="64.4195%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (11,860,683 samples, 21.95%)</title><rect x="64.2101%" y="229" width="21.9499%" height="15" fill="rgb(221,155,16)"/><text x="64.4601%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (68,831 samples, 0.13%)</title><rect x="86.1680%" y="245" width="0.1274%" height="15" fill="rgb(215,215,53)"/><text x="86.4180%" y="255.50"></text></g><g><title>finalize_imports (61,951 samples, 0.11%)</title><rect x="86.3103%" y="229" width="0.1146%" height="15" fill="rgb(223,4,10)"/><text x="86.5603%" y="239.50"></text></g><g><title>late_resolve_crate (1,635,208 samples, 3.03%)</title><rect x="86.4463%" y="229" width="3.0262%" height="15" fill="rgb(234,103,6)"/><text x="86.6963%" y="239.50">lat..</text></g><g><title>metadata_register_crate (124,202 samples, 0.23%)</title><rect x="89.2427%" y="213" width="0.2299%" height="15" fill="rgb(227,97,0)"/><text x="89.4927%" y="223.50"></text></g><g><title>configure_and_expand (14,103,977 samples, 26.10%)</title><rect x="63.4472%" y="261" width="26.1015%" height="15" fill="rgb(234,150,53)"/><text x="63.6972%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,757,969 samples, 3.25%)</title><rect x="86.2953%" y="245" width="3.2534%" height="15" fill="rgb(228,201,54)"/><text x="86.5453%" y="255.50">res..</text></g><g><title>early_lint_checks (97,081 samples, 0.18%)</title><rect x="89.6624%" y="261" width="0.1797%" height="15" fill="rgb(222,22,37)"/><text x="89.9124%" y="271.50"></text></g><g><title>free_global_ctxt (2,385,926 samples, 4.42%)</title><rect x="89.8421%" y="261" width="4.4155%" height="15" fill="rgb(237,53,32)"/><text x="90.0921%" y="271.50">free_..</text></g><g><title>crate_hash (66,820 samples, 0.12%)</title><rect x="94.7195%" y="245" width="0.1237%" height="15" fill="rgb(233,25,53)"/><text x="94.9695%" y="255.50"></text></g><g><title>generate_crate_metadata (398,324 samples, 0.74%)</title><rect x="94.2576%" y="261" width="0.7372%" height="15" fill="rgb(210,40,34)"/><text x="94.5076%" y="271.50"></text></g><g><title>hir_lowering (769,768 samples, 1.42%)</title><rect x="94.9948%" y="261" width="1.4246%" height="15" fill="rgb(241,220,44)"/><text x="95.2448%" y="271.50"></text></g><g><title>parse_crate (831,470 samples, 1.54%)</title><rect x="96.5067%" y="261" width="1.5388%" height="15" fill="rgb(235,28,35)"/><text x="96.7567%" y="271.50"></text></g><g><title>prepare_outputs (246,942 samples, 0.46%)</title><rect x="98.0601%" y="261" width="0.4570%" height="15" fill="rgb(210,56,17)"/><text x="98.3101%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (408,395 samples, 0.76%)</title><rect x="98.5171%" y="261" width="0.7558%" height="15" fill="rgb(224,130,29)"/><text x="98.7671%" y="271.50"></text></g><g><title>setup_global_ctxt (108,621 samples, 0.20%)</title><rect x="99.2941%" y="261" width="0.2010%" height="15" fill="rgb(235,212,8)"/><text x="99.5441%" y="271.50"></text></g><g><title>all (54,035,163 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(223,33,50)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (54,035,163 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(219,149,13)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (272,803 samples, 0.50%)</title><rect x="99.4951%" y="261" width="0.5049%" height="15" fill="rgb(250,156,29)"/><text x="99.7451%" y="271.50"></text></g></svg></svg>