<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (331,612 samples, 0.19%)</title><rect x="12.2146%" y="149" width="0.1860%" height="15" fill="rgb(227,0,7)"/><text x="12.4646%" y="159.50"></text></g><g><title>param_env (246,531 samples, 0.14%)</title><rect x="14.0713%" y="117" width="0.1383%" height="15" fill="rgb(217,0,24)"/><text x="14.3213%" y="127.50"></text></g><g><title>item_attrs (1,096,719 samples, 0.62%)</title><rect x="14.7501%" y="85" width="0.6151%" height="15" fill="rgb(221,193,54)"/><text x="15.0001%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,073,049 samples, 0.60%)</title><rect x="14.7634%" y="69" width="0.6018%" height="15" fill="rgb(248,212,6)"/><text x="15.0134%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,339,363 samples, 0.75%)</title><rect x="14.6369%" y="101" width="0.7511%" height="15" fill="rgb(208,68,35)"/><text x="14.8869%" y="111.50"></text></g><g><title>is_copy_raw (192,521 samples, 0.11%)</title><rect x="17.8526%" y="85" width="0.1080%" height="15" fill="rgb(232,128,0)"/><text x="18.1026%" y="95.50"></text></g><g><title>needs_drop_raw (1,914,658 samples, 1.07%)</title><rect x="17.9664%" y="85" width="1.0738%" height="15" fill="rgb(207,160,47)"/><text x="18.2164%" y="95.50"></text></g><g><title>is_copy_raw (1,531,082 samples, 0.86%)</title><rect x="18.1815%" y="69" width="0.8587%" height="15" fill="rgb(228,23,34)"/><text x="18.4315%" y="79.50"></text></g><g><title>evaluate_obligation (1,241,911 samples, 0.70%)</title><rect x="18.3437%" y="53" width="0.6965%" height="15" fill="rgb(218,30,26)"/><text x="18.5937%" y="63.50"></text></g><g><title>impl_parent (501,236 samples, 0.28%)</title><rect x="19.7294%" y="53" width="0.2811%" height="15" fill="rgb(220,122,19)"/><text x="19.9794%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (308,943 samples, 0.17%)</title><rect x="19.8373%" y="37" width="0.1733%" height="15" fill="rgb(250,228,42)"/><text x="20.0873%" y="47.50"></text></g><g><title>specialization_graph_of (2,310,946 samples, 1.30%)</title><rect x="19.2708%" y="69" width="1.2960%" height="15" fill="rgb(240,193,28)"/><text x="19.5208%" y="79.50"></text></g><g><title>impl_trait_ref (991,880 samples, 0.56%)</title><rect x="20.0105%" y="53" width="0.5563%" height="15" fill="rgb(216,20,37)"/><text x="20.2605%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (791,419 samples, 0.44%)</title><rect x="20.1230%" y="37" width="0.4438%" height="15" fill="rgb(206,188,39)"/><text x="20.3730%" y="47.50"></text></g><g><title>resolve_instance (2,810,620 samples, 1.58%)</title><rect x="19.0402%" y="85" width="1.5763%" height="15" fill="rgb(217,207,13)"/><text x="19.2902%" y="95.50"></text></g><g><title>thir_body (1,877,005 samples, 1.05%)</title><rect x="20.6656%" y="85" width="1.0527%" height="15" fill="rgb(231,73,38)"/><text x="20.9156%" y="95.50"></text></g><g><title>mir_const (14,976,964 samples, 8.40%)</title><rect x="13.3453%" y="133" width="8.3994%" height="15" fill="rgb(225,20,46)"/><text x="13.5953%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (13,435,931 samples, 7.54%)</title><rect x="14.2095%" y="117" width="7.5351%" height="15" fill="rgb(210,31,41)"/><text x="14.4595%" y="127.50">unsafety_c..</text></g><g><title>mir_built (11,334,478 samples, 6.36%)</title><rect x="15.3881%" y="101" width="6.3566%" height="15" fill="rgb(221,200,47)"/><text x="15.6381%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (519,535 samples, 0.29%)</title><rect x="21.7447%" y="133" width="0.2914%" height="15" fill="rgb(226,26,5)"/><text x="21.9947%" y="143.50"></text></g><g><title>mir_promoted (17,005,525 samples, 9.54%)</title><rect x="12.4998%" y="149" width="9.5370%" height="15" fill="rgb(249,33,26)"/><text x="12.7498%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,025,179 samples, 0.57%)</title><rect x="22.0368%" y="149" width="0.5749%" height="15" fill="rgb(235,183,28)"/><text x="22.2868%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (450,062 samples, 0.25%)</title><rect x="22.6117%" y="149" width="0.2524%" height="15" fill="rgb(221,5,38)"/><text x="22.8617%" y="159.50"></text></g><g><title>normalize_projection_ty (264,632 samples, 0.15%)</title><rect x="22.7157%" y="133" width="0.1484%" height="15" fill="rgb(247,18,42)"/><text x="22.9657%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,024,374 samples, 2.82%)</title><rect x="22.8641%" y="149" width="2.8178%" height="15" fill="rgb(241,131,45)"/><text x="23.1141%" y="159.50">ty..</text></g><g><title>evaluate_obligation (362,014 samples, 0.20%)</title><rect x="25.4789%" y="133" width="0.2030%" height="15" fill="rgb(249,31,29)"/><text x="25.7289%" y="143.50"></text></g><g><title>MIR_borrow_checking (44,834,450 samples, 25.14%)</title><rect x="0.5404%" y="181" width="25.1440%" height="15" fill="rgb(225,111,53)"/><text x="0.7904%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (44,640,108 samples, 25.04%)</title><rect x="0.6494%" y="165" width="25.0350%" height="15" fill="rgb(238,160,17)"/><text x="0.8994%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (357,894 samples, 0.20%)</title><rect x="25.6844%" y="181" width="0.2007%" height="15" fill="rgb(214,148,48)"/><text x="25.9344%" y="191.50"></text></g><g><title>codegen_fn_attrs (351,192 samples, 0.20%)</title><rect x="26.1384%" y="149" width="0.1970%" height="15" fill="rgb(232,36,49)"/><text x="26.3884%" y="159.50"></text></g><g><title>check_mod_attrs (620,937 samples, 0.35%)</title><rect x="25.9871%" y="165" width="0.3482%" height="15" fill="rgb(209,103,24)"/><text x="26.2371%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (555,837 samples, 0.31%)</title><rect x="26.4340%" y="165" width="0.3117%" height="15" fill="rgb(229,88,8)"/><text x="26.6840%" y="175.50"></text></g><g><title>misc_checking_1 (1,411,626 samples, 0.79%)</title><rect x="25.9749%" y="181" width="0.7917%" height="15" fill="rgb(213,181,19)"/><text x="26.2249%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (650,517 samples, 0.36%)</title><rect x="26.7675%" y="165" width="0.3648%" height="15" fill="rgb(254,191,54)"/><text x="27.0175%" y="175.50"></text></g><g><title>check_mod_liveness (545,576 samples, 0.31%)</title><rect x="26.8264%" y="149" width="0.3060%" height="15" fill="rgb(241,83,37)"/><text x="27.0764%" y="159.50"></text></g><g><title>param_env (317,173 samples, 0.18%)</title><rect x="27.5172%" y="133" width="0.1779%" height="15" fill="rgb(233,36,39)"/><text x="27.7672%" y="143.50"></text></g><g><title>misc_checking_2 (1,656,629 samples, 0.93%)</title><rect x="26.7666%" y="181" width="0.9291%" height="15" fill="rgb(226,3,54)"/><text x="27.0166%" y="191.50"></text></g><g><title>match_checking (1,004,422 samples, 0.56%)</title><rect x="27.1323%" y="165" width="0.5633%" height="15" fill="rgb(245,192,40)"/><text x="27.3823%" y="175.50"></text></g><g><title>check_match (957,761 samples, 0.54%)</title><rect x="27.1585%" y="149" width="0.5371%" height="15" fill="rgb(238,167,29)"/><text x="27.4085%" y="159.50"></text></g><g><title>death_checking (615,587 samples, 0.35%)</title><rect x="27.7946%" y="165" width="0.3452%" height="15" fill="rgb(232,182,51)"/><text x="28.0446%" y="175.50"></text></g><g><title>eval_to_allocation_raw (255,483 samples, 0.14%)</title><rect x="28.6184%" y="133" width="0.1433%" height="15" fill="rgb(231,60,39)"/><text x="28.8684%" y="143.50"></text></g><g><title>eval_to_allocation_raw (254,573 samples, 0.14%)</title><rect x="28.6189%" y="117" width="0.1428%" height="15" fill="rgb(208,69,12)"/><text x="28.8689%" y="127.50"></text></g><g><title>eval_to_const_value_raw (452,924 samples, 0.25%)</title><rect x="28.7617%" y="133" width="0.2540%" height="15" fill="rgb(235,93,37)"/><text x="29.0117%" y="143.50"></text></g><g><title>eval_to_const_value_raw (442,004 samples, 0.25%)</title><rect x="28.7678%" y="117" width="0.2479%" height="15" fill="rgb(213,116,39)"/><text x="29.0178%" y="127.50"></text></g><g><title>eval_to_allocation_raw (430,254 samples, 0.24%)</title><rect x="28.7744%" y="101" width="0.2413%" height="15" fill="rgb(222,207,29)"/><text x="29.0244%" y="111.50"></text></g><g><title>crate_lints (2,827,292 samples, 1.59%)</title><rect x="28.1409%" y="149" width="1.5856%" height="15" fill="rgb(206,96,30)"/><text x="28.3909%" y="159.50"></text></g><g><title>type_of (1,110,043 samples, 0.62%)</title><rect x="29.1039%" y="133" width="0.6225%" height="15" fill="rgb(218,138,4)"/><text x="29.3539%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (875,122 samples, 0.49%)</title><rect x="29.2357%" y="117" width="0.4908%" height="15" fill="rgb(250,191,14)"/><text x="29.4857%" y="127.50"></text></g><g><title>lint_checking (3,359,898 samples, 1.88%)</title><rect x="28.1398%" y="165" width="1.8843%" height="15" fill="rgb(239,60,40)"/><text x="28.3898%" y="175.50">l..</text></g><g><title>module_lints (530,736 samples, 0.30%)</title><rect x="29.7265%" y="149" width="0.2976%" height="15" fill="rgb(206,27,48)"/><text x="29.9765%" y="159.50"></text></g><g><title>lint_mod (527,756 samples, 0.30%)</title><rect x="29.7281%" y="133" width="0.2960%" height="15" fill="rgb(225,35,8)"/><text x="29.9781%" y="143.50"></text></g><g><title>privacy_access_levels (228,532 samples, 0.13%)</title><rect x="30.0241%" y="165" width="0.1282%" height="15" fill="rgb(250,213,24)"/><text x="30.2741%" y="175.50"></text></g><g><title>privacy_checking_modules (906,270 samples, 0.51%)</title><rect x="30.1523%" y="165" width="0.5083%" height="15" fill="rgb(247,123,22)"/><text x="30.4023%" y="175.50"></text></g><g><title>check_mod_privacy (904,590 samples, 0.51%)</title><rect x="30.1532%" y="149" width="0.5073%" height="15" fill="rgb(231,138,38)"/><text x="30.4032%" y="159.50"></text></g><g><title>misc_checking_3 (5,298,749 samples, 2.97%)</title><rect x="27.6956%" y="181" width="2.9716%" height="15" fill="rgb(231,145,46)"/><text x="27.9456%" y="191.50">mis..</text></g><g><title>impl_parent (1,993,532 samples, 1.12%)</title><rect x="32.4716%" y="117" width="1.1180%" height="15" fill="rgb(251,118,11)"/><text x="32.7216%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,220,571 samples, 0.68%)</title><rect x="32.9051%" y="101" width="0.6845%" height="15" fill="rgb(217,147,25)"/><text x="33.1551%" y="111.50"></text></g><g><title>impl_trait_ref (4,793,333 samples, 2.69%)</title><rect x="33.5896%" y="117" width="2.6882%" height="15" fill="rgb(247,81,37)"/><text x="33.8396%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,768,361 samples, 2.11%)</title><rect x="34.1644%" y="101" width="2.1134%" height="15" fill="rgb(209,12,38)"/><text x="34.4144%" y="111.50">m..</text></g><g><title>coherent_trait (10,565,857 samples, 5.93%)</title><rect x="30.7162%" y="149" width="5.9255%" height="15" fill="rgb(227,1,9)"/><text x="30.9662%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (10,552,037 samples, 5.92%)</title><rect x="30.7239%" y="133" width="5.9178%" height="15" fill="rgb(248,47,43)"/><text x="30.9739%" y="143.50">speciali..</text></g><g><title>trait_impls_of (646,878 samples, 0.36%)</title><rect x="36.2789%" y="117" width="0.3628%" height="15" fill="rgb(221,10,30)"/><text x="36.5289%" y="127.50"></text></g><g><title>coherence_checking (10,633,178 samples, 5.96%)</title><rect x="30.7077%" y="165" width="5.9633%" height="15" fill="rgb(210,229,1)"/><text x="30.9577%" y="175.50">coherenc..</text></g><g><title>associated_item (637,668 samples, 0.36%)</title><rect x="42.2522%" y="101" width="0.3576%" height="15" fill="rgb(222,148,37)"/><text x="42.5022%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (510,986 samples, 0.29%)</title><rect x="42.3233%" y="85" width="0.2866%" height="15" fill="rgb(234,67,33)"/><text x="42.5733%" y="95.50"></text></g><g><title>associated_items (1,108,383 samples, 0.62%)</title><rect x="42.0072%" y="117" width="0.6216%" height="15" fill="rgb(247,98,35)"/><text x="42.2572%" y="127.50"></text></g><g><title>adt_dtorck_constraint (200,584 samples, 0.11%)</title><rect x="42.7411%" y="85" width="0.1125%" height="15" fill="rgb(247,138,52)"/><text x="42.9911%" y="95.50"></text></g><g><title>dropck_outlives (374,704 samples, 0.21%)</title><rect x="42.6550%" y="117" width="0.2101%" height="15" fill="rgb(213,79,30)"/><text x="42.9050%" y="127.50"></text></g><g><title>adt_dtorck_constraint (321,384 samples, 0.18%)</title><rect x="42.6849%" y="101" width="0.1802%" height="15" fill="rgb(246,177,23)"/><text x="42.9349%" y="111.50"></text></g><g><title>adt_sized_constraint (303,254 samples, 0.17%)</title><rect x="45.5428%" y="101" width="0.1701%" height="15" fill="rgb(230,62,27)"/><text x="45.7928%" y="111.50"></text></g><g><title>generics_of (991,936 samples, 0.56%)</title><rect x="45.7129%" y="101" width="0.5563%" height="15" fill="rgb(216,154,8)"/><text x="45.9629%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (730,611 samples, 0.41%)</title><rect x="45.8594%" y="85" width="0.4097%" height="15" fill="rgb(244,35,45)"/><text x="46.1094%" y="95.50"></text></g><g><title>impl_polarity (189,732 samples, 0.11%)</title><rect x="46.3383%" y="101" width="0.1064%" height="15" fill="rgb(251,115,12)"/><text x="46.5883%" y="111.50"></text></g><g><title>impl_trait_ref (1,499,042 samples, 0.84%)</title><rect x="46.4447%" y="101" width="0.8407%" height="15" fill="rgb(240,54,50)"/><text x="46.6947%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,248,991 samples, 0.70%)</title><rect x="46.5849%" y="85" width="0.7005%" height="15" fill="rgb(233,84,52)"/><text x="46.8349%" y="95.50"></text></g><g><title>opt_def_kind (210,513 samples, 0.12%)</title><rect x="47.4807%" y="85" width="0.1181%" height="15" fill="rgb(207,117,47)"/><text x="47.7307%" y="95.50"></text></g><g><title>explicit_predicates_of (193,303 samples, 0.11%)</title><rect x="47.7525%" y="69" width="0.1084%" height="15" fill="rgb(249,43,39)"/><text x="48.0025%" y="79.50"></text></g><g><title>predicates_of (1,121,171 samples, 0.63%)</title><rect x="47.3255%" y="101" width="0.6288%" height="15" fill="rgb(209,38,44)"/><text x="47.5755%" y="111.50"></text></g><g><title>predicates_defined_on (633,928 samples, 0.36%)</title><rect x="47.5988%" y="85" width="0.3555%" height="15" fill="rgb(236,212,23)"/><text x="47.8488%" y="95.50"></text></g><g><title>specializes (3,291,065 samples, 1.85%)</title><rect x="47.9543%" y="101" width="1.8457%" height="15" fill="rgb(242,79,21)"/><text x="48.2043%" y="111.50">s..</text></g><g><title>param_env (1,882,494 samples, 1.06%)</title><rect x="48.7443%" y="85" width="1.0557%" height="15" fill="rgb(211,96,35)"/><text x="48.9943%" y="95.50"></text></g><g><title>def_span (836,698 samples, 0.47%)</title><rect x="49.3308%" y="69" width="0.4692%" height="15" fill="rgb(253,215,40)"/><text x="49.5808%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (745,866 samples, 0.42%)</title><rect x="49.3817%" y="53" width="0.4183%" height="15" fill="rgb(211,81,21)"/><text x="49.6317%" y="63.50"></text></g><g><title>trait_impls_of (858,471 samples, 0.48%)</title><rect x="49.8116%" y="101" width="0.4814%" height="15" fill="rgb(208,190,38)"/><text x="50.0616%" y="111.50"></text></g><g><title>implementations_of_trait (327,154 samples, 0.18%)</title><rect x="50.1095%" y="85" width="0.1835%" height="15" fill="rgb(235,213,38)"/><text x="50.3595%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (246,973 samples, 0.14%)</title><rect x="50.1545%" y="69" width="0.1385%" height="15" fill="rgb(237,122,38)"/><text x="50.4045%" y="79.50"></text></g><g><title>evaluate_obligation (13,279,835 samples, 7.45%)</title><rect x="42.8651%" y="117" width="7.4476%" height="15" fill="rgb(244,218,35)"/><text x="43.1151%" y="127.50">evaluate_o..</text></g><g><title>predicates_of (317,972 samples, 0.18%)</title><rect x="50.8059%" y="117" width="0.1783%" height="15" fill="rgb(240,68,47)"/><text x="51.0559%" y="127.50"></text></g><g><title>predicates_defined_on (213,812 samples, 0.12%)</title><rect x="50.8644%" y="101" width="0.1199%" height="15" fill="rgb(210,16,53)"/><text x="51.1144%" y="111.50"></text></g><g><title>specializes (207,552 samples, 0.12%)</title><rect x="50.9843%" y="117" width="0.1164%" height="15" fill="rgb(235,124,12)"/><text x="51.2343%" y="127.50"></text></g><g><title>associated_item (1,159,083 samples, 0.65%)</title><rect x="66.8535%" y="85" width="0.6500%" height="15" fill="rgb(224,169,11)"/><text x="67.1035%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (733,269 samples, 0.41%)</title><rect x="67.0923%" y="69" width="0.4112%" height="15" fill="rgb(250,166,2)"/><text x="67.3423%" y="79.50"></text></g><g><title>associated_items (1,498,145 samples, 0.84%)</title><rect x="66.6835%" y="101" width="0.8402%" height="15" fill="rgb(242,216,29)"/><text x="66.9335%" y="111.50"></text></g><g><title>dropck_outlives (323,352 samples, 0.18%)</title><rect x="67.5631%" y="101" width="0.1813%" height="15" fill="rgb(230,116,27)"/><text x="67.8131%" y="111.50"></text></g><g><title>evaluate_obligation (3,400,224 samples, 1.91%)</title><rect x="67.7444%" y="101" width="1.9069%" height="15" fill="rgb(228,99,48)"/><text x="67.9944%" y="111.50">e..</text></g><g><title>is_copy_raw (936,769 samples, 0.53%)</title><rect x="69.8516%" y="101" width="0.5254%" height="15" fill="rgb(253,11,6)"/><text x="70.1016%" y="111.50"></text></g><g><title>evaluate_obligation (739,516 samples, 0.41%)</title><rect x="69.9622%" y="85" width="0.4147%" height="15" fill="rgb(247,143,39)"/><text x="70.2122%" y="95.50"></text></g><g><title>method_autoderef_steps (600,924 samples, 0.34%)</title><rect x="70.4486%" y="101" width="0.3370%" height="15" fill="rgb(236,97,10)"/><text x="70.6986%" y="111.50"></text></g><g><title>evaluate_obligation (310,452 samples, 0.17%)</title><rect x="70.6115%" y="85" width="0.1741%" height="15" fill="rgb(233,208,19)"/><text x="70.8615%" y="95.50"></text></g><g><title>predicates_of (438,615 samples, 0.25%)</title><rect x="70.8179%" y="101" width="0.2460%" height="15" fill="rgb(216,164,2)"/><text x="71.0679%" y="111.50"></text></g><g><title>predicates_defined_on (338,094 samples, 0.19%)</title><rect x="70.8742%" y="85" width="0.1896%" height="15" fill="rgb(220,129,5)"/><text x="71.1242%" y="95.50"></text></g><g><title>typeck (35,750,338 samples, 20.05%)</title><rect x="51.1402%" y="117" width="20.0495%" height="15" fill="rgb(242,17,10)"/><text x="51.3902%" y="127.50">typeck</text></g><g><title>item_bodies_checking (61,573,847 samples, 34.53%)</title><rect x="36.6811%" y="165" width="34.5318%" height="15" fill="rgb(242,107,0)"/><text x="36.9311%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (61,570,597 samples, 34.53%)</title><rect x="36.6829%" y="149" width="34.5300%" height="15" fill="rgb(251,28,31)"/><text x="36.9329%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (61,478,146 samples, 34.48%)</title><rect x="36.7348%" y="133" width="34.4781%" height="15" fill="rgb(233,223,10)"/><text x="36.9848%" y="143.50">typeck</text></g><g><title>adt_destructor (302,913 samples, 0.17%)</title><rect x="71.3232%" y="133" width="0.1699%" height="15" fill="rgb(215,21,27)"/><text x="71.5732%" y="143.50"></text></g><g><title>coherent_trait (299,143 samples, 0.17%)</title><rect x="71.3253%" y="117" width="0.1678%" height="15" fill="rgb(232,23,21)"/><text x="71.5753%" y="127.50"></text></g><g><title>specialization_graph_of (297,243 samples, 0.17%)</title><rect x="71.3264%" y="101" width="0.1667%" height="15" fill="rgb(244,5,23)"/><text x="71.5764%" y="111.50"></text></g><g><title>item_types_checking (1,510,377 samples, 0.85%)</title><rect x="71.2129%" y="165" width="0.8470%" height="15" fill="rgb(226,81,46)"/><text x="71.4629%" y="175.50"></text></g><g><title>check_mod_item_types (1,507,987 samples, 0.85%)</title><rect x="71.2143%" y="149" width="0.8457%" height="15" fill="rgb(247,70,30)"/><text x="71.4643%" y="159.50"></text></g><g><title>typeck (805,448 samples, 0.45%)</title><rect x="71.6083%" y="133" width="0.4517%" height="15" fill="rgb(212,68,19)"/><text x="71.8583%" y="143.50"></text></g><g><title>late_bound_vars_map (186,853 samples, 0.10%)</title><rect x="72.2433%" y="117" width="0.1048%" height="15" fill="rgb(240,187,13)"/><text x="72.4933%" y="127.50"></text></g><g><title>fn_sig (312,984 samples, 0.18%)</title><rect x="72.1830%" y="133" width="0.1755%" height="15" fill="rgb(223,113,26)"/><text x="72.4330%" y="143.50"></text></g><g><title>generics_of (199,772 samples, 0.11%)</title><rect x="72.3585%" y="133" width="0.1120%" height="15" fill="rgb(206,192,2)"/><text x="72.6085%" y="143.50"></text></g><g><title>predicates_of (388,463 samples, 0.22%)</title><rect x="72.4864%" y="133" width="0.2179%" height="15" fill="rgb(241,108,4)"/><text x="72.7364%" y="143.50"></text></g><g><title>predicates_defined_on (352,503 samples, 0.20%)</title><rect x="72.5065%" y="117" width="0.1977%" height="15" fill="rgb(247,173,49)"/><text x="72.7565%" y="127.50"></text></g><g><title>type_collecting (1,252,734 samples, 0.70%)</title><rect x="72.0610%" y="165" width="0.7026%" height="15" fill="rgb(224,114,35)"/><text x="72.3110%" y="175.50"></text></g><g><title>collect_mod_item_types (1,245,174 samples, 0.70%)</title><rect x="72.0653%" y="149" width="0.6983%" height="15" fill="rgb(245,159,27)"/><text x="72.3153%" y="159.50"></text></g><g><title>evaluate_obligation (341,904 samples, 0.19%)</title><rect x="73.4863%" y="133" width="0.1917%" height="15" fill="rgb(245,172,44)"/><text x="73.7363%" y="143.50"></text></g><g><title>implied_outlives_bounds (181,084 samples, 0.10%)</title><rect x="73.6781%" y="133" width="0.1016%" height="15" fill="rgb(236,23,11)"/><text x="73.9281%" y="143.50"></text></g><g><title>param_env (181,261 samples, 0.10%)</title><rect x="73.7797%" y="133" width="0.1017%" height="15" fill="rgb(205,117,38)"/><text x="74.0297%" y="143.50"></text></g><g><title>region_scope_tree (418,926 samples, 0.23%)</title><rect x="73.9000%" y="133" width="0.2349%" height="15" fill="rgb(237,72,25)"/><text x="74.1500%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,294,266 samples, 1.29%)</title><rect x="72.8555%" y="149" width="1.2867%" height="15" fill="rgb(244,70,9)"/><text x="73.1055%" y="159.50"></text></g><g><title>evaluate_obligation (283,454 samples, 0.16%)</title><rect x="74.5172%" y="133" width="0.1590%" height="15" fill="rgb(217,125,39)"/><text x="74.7672%" y="143.50"></text></g><g><title>param_env (256,762 samples, 0.14%)</title><rect x="74.7017%" y="133" width="0.1440%" height="15" fill="rgb(235,36,10)"/><text x="74.9517%" y="143.50"></text></g><g><title>analysis (133,050,713 samples, 74.62%)</title><rect x="0.3557%" y="197" width="74.6174%" height="15" fill="rgb(251,123,47)"/><text x="0.6057%" y="207.50">analysis</text></g><g><title>type_check_crate (79,002,030 samples, 44.31%)</title><rect x="30.6673%" y="181" width="44.3059%" height="15" fill="rgb(221,13,13)"/><text x="30.9173%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,931,204 samples, 2.20%)</title><rect x="72.7685%" y="165" width="2.2047%" height="15" fill="rgb(238,131,9)"/><text x="73.0185%" y="175.50">w..</text></g><g><title>check_item_well_formed (1,481,695 samples, 0.83%)</title><rect x="74.1422%" y="149" width="0.8310%" height="15" fill="rgb(211,50,8)"/><text x="74.3922%" y="159.50"></text></g><g><title>codegen_crate (389,355 samples, 0.22%)</title><rect x="74.9787%" y="197" width="0.2184%" height="15" fill="rgb(245,182,24)"/><text x="75.2287%" y="207.50"></text></g><g><title>AST_validation (271,143 samples, 0.15%)</title><rect x="75.3020%" y="181" width="0.1521%" height="15" fill="rgb(242,14,37)"/><text x="75.5520%" y="191.50"></text></g><g><title>metadata_load_macro (590,615 samples, 0.33%)</title><rect x="86.9080%" y="149" width="0.3312%" height="15" fill="rgb(246,228,12)"/><text x="87.1580%" y="159.50"></text></g><g><title>macro_expand_crate (23,094,408 samples, 12.95%)</title><rect x="75.5629%" y="181" width="12.9518%" height="15" fill="rgb(213,55,15)"/><text x="75.8129%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (23,071,097 samples, 12.94%)</title><rect x="75.5759%" y="165" width="12.9387%" height="15" fill="rgb(209,9,3)"/><text x="75.8259%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,274,276 samples, 1.28%)</title><rect x="87.2392%" y="149" width="1.2755%" height="15" fill="rgb(230,59,30)"/><text x="87.4892%" y="159.50"></text></g><g><title>metadata_register_crate (829,588 samples, 0.47%)</title><rect x="88.0494%" y="133" width="0.4652%" height="15" fill="rgb(209,121,21)"/><text x="88.2994%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (286,323 samples, 0.16%)</title><rect x="88.5174%" y="181" width="0.1606%" height="15" fill="rgb(220,109,13)"/><text x="88.7674%" y="191.50"></text></g><g><title>finalize_macro_resolutions (237,363 samples, 0.13%)</title><rect x="88.7182%" y="165" width="0.1331%" height="15" fill="rgb(232,18,1)"/><text x="88.9682%" y="175.50"></text></g><g><title>late_resolve_crate (4,247,837 samples, 2.38%)</title><rect x="88.8513%" y="165" width="2.3823%" height="15" fill="rgb(215,41,42)"/><text x="89.1013%" y="175.50">la..</text></g><g><title>configure_and_expand (28,792,831 samples, 16.15%)</title><rect x="75.1971%" y="197" width="16.1476%" height="15" fill="rgb(224,123,36)"/><text x="75.4471%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,754,893 samples, 2.67%)</title><rect x="88.6780%" y="181" width="2.6666%" height="15" fill="rgb(240,125,3)"/><text x="88.9280%" y="191.50">re..</text></g><g><title>drop_ast (217,982 samples, 0.12%)</title><rect x="91.3446%" y="197" width="0.1222%" height="15" fill="rgb(205,98,50)"/><text x="91.5946%" y="207.50"></text></g><g><title>early_lint_checks (389,485 samples, 0.22%)</title><rect x="91.4761%" y="197" width="0.2184%" height="15" fill="rgb(205,185,37)"/><text x="91.7261%" y="207.50"></text></g><g><title>free_global_ctxt (4,182,027 samples, 2.35%)</title><rect x="91.6945%" y="197" width="2.3454%" height="15" fill="rgb(238,207,15)"/><text x="91.9445%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,042,162 samples, 0.58%)</title><rect x="94.0399%" y="197" width="0.5845%" height="15" fill="rgb(213,199,42)"/><text x="94.2899%" y="207.50"></text></g><g><title>hir_lowering (3,554,489 samples, 1.99%)</title><rect x="94.6244%" y="197" width="1.9934%" height="15" fill="rgb(235,201,11)"/><text x="94.8744%" y="207.50">h..</text></g><g><title>parse_crate (4,091,655 samples, 2.29%)</title><rect x="96.6540%" y="197" width="2.2947%" height="15" fill="rgb(207,46,11)"/><text x="96.9040%" y="207.50">p..</text></g><g><title>prepare_outputs (285,203 samples, 0.16%)</title><rect x="98.9531%" y="197" width="0.1599%" height="15" fill="rgb(241,35,35)"/><text x="99.2031%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,182,773 samples, 0.66%)</title><rect x="99.1130%" y="197" width="0.6633%" height="15" fill="rgb(243,32,47)"/><text x="99.3630%" y="207.50"></text></g><g><title>all (178,310,478 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (178,310,478 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (311,163 samples, 0.17%)</title><rect x="99.8255%" y="197" width="0.1745%" height="15" fill="rgb(243,110,44)"/><text x="100.0755%" y="207.50"></text></g></svg></svg>