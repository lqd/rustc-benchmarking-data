<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (284,342 samples, 0.21%)</title><rect x="11.8133%" y="133" width="0.2136%" height="15" fill="rgb(227,0,7)"/><text x="12.0633%" y="143.50"></text></g><g><title>item_attrs (283,491 samples, 0.21%)</title><rect x="12.4693%" y="101" width="0.2129%" height="15" fill="rgb(217,0,24)"/><text x="12.7193%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (272,020 samples, 0.20%)</title><rect x="12.4779%" y="85" width="0.2043%" height="15" fill="rgb(221,193,54)"/><text x="12.7279%" y="95.50"></text></g><g><title>codegen_fn_attrs (423,673 samples, 0.32%)</title><rect x="12.3817%" y="117" width="0.3182%" height="15" fill="rgb(248,212,6)"/><text x="12.6317%" y="127.50"></text></g><g><title>adt_drop_tys (161,233 samples, 0.12%)</title><rect x="14.8411%" y="69" width="0.1211%" height="15" fill="rgb(208,68,35)"/><text x="15.0911%" y="79.50"></text></g><g><title>is_copy_raw (147,191 samples, 0.11%)</title><rect x="14.9631%" y="69" width="0.1106%" height="15" fill="rgb(232,128,0)"/><text x="15.2131%" y="79.50"></text></g><g><title>adt_drop_tys (532,917 samples, 0.40%)</title><rect x="14.8017%" y="85" width="0.4003%" height="15" fill="rgb(207,160,47)"/><text x="15.0517%" y="95.50"></text></g><g><title>is_copy_raw (968,416 samples, 0.73%)</title><rect x="15.2020%" y="85" width="0.7274%" height="15" fill="rgb(228,23,34)"/><text x="15.4520%" y="95.50"></text></g><g><title>evaluate_obligation (815,626 samples, 0.61%)</title><rect x="15.3167%" y="69" width="0.6127%" height="15" fill="rgb(218,30,26)"/><text x="15.5667%" y="79.50"></text></g><g><title>needs_drop_raw (1,658,264 samples, 1.25%)</title><rect x="14.6969%" y="101" width="1.2456%" height="15" fill="rgb(220,122,19)"/><text x="14.9469%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (197,394 samples, 0.15%)</title><rect x="16.0774%" y="85" width="0.1483%" height="15" fill="rgb(250,228,42)"/><text x="16.3274%" y="95.50"></text></g><g><title>impl_parent (206,672 samples, 0.16%)</title><rect x="16.6025%" y="69" width="0.1552%" height="15" fill="rgb(240,193,28)"/><text x="16.8525%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (138,002 samples, 0.10%)</title><rect x="16.6541%" y="53" width="0.1037%" height="15" fill="rgb(216,20,37)"/><text x="16.9041%" y="63.50"></text></g><g><title>specialization_graph_of (922,111 samples, 0.69%)</title><rect x="16.2787%" y="85" width="0.6926%" height="15" fill="rgb(206,188,39)"/><text x="16.5287%" y="95.50"></text></g><g><title>impl_trait_ref (284,353 samples, 0.21%)</title><rect x="16.7578%" y="69" width="0.2136%" height="15" fill="rgb(217,207,13)"/><text x="17.0078%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (213,822 samples, 0.16%)</title><rect x="16.8108%" y="53" width="0.1606%" height="15" fill="rgb(231,73,38)"/><text x="17.0608%" y="63.50"></text></g><g><title>resolve_instance (1,438,375 samples, 1.08%)</title><rect x="15.9426%" y="101" width="1.0804%" height="15" fill="rgb(225,20,46)"/><text x="16.1926%" y="111.50"></text></g><g><title>thir_body (1,030,891 samples, 0.77%)</title><rect x="17.0405%" y="101" width="0.7744%" height="15" fill="rgb(210,31,41)"/><text x="17.2905%" y="111.50"></text></g><g><title>mir_const (8,806,033 samples, 6.61%)</title><rect x="11.2184%" y="149" width="6.6147%" height="15" fill="rgb(221,200,47)"/><text x="11.4684%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (7,729,647 samples, 5.81%)</title><rect x="12.0269%" y="133" width="5.8061%" height="15" fill="rgb(226,26,5)"/><text x="12.2769%" y="143.50">unsafet..</text></g><g><title>mir_built (6,833,658 samples, 5.13%)</title><rect x="12.7000%" y="117" width="5.1331%" height="15" fill="rgb(249,33,26)"/><text x="12.9500%" y="127.50">mir_bu..</text></g><g><title>mir_promoted (9,695,480 samples, 7.28%)</title><rect x="10.5763%" y="165" width="7.2828%" height="15" fill="rgb(235,183,28)"/><text x="10.8263%" y="175.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (363,254 samples, 0.27%)</title><rect x="17.8591%" y="165" width="0.2729%" height="15" fill="rgb(221,5,38)"/><text x="18.1091%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (439,223 samples, 0.33%)</title><rect x="18.1319%" y="165" width="0.3299%" height="15" fill="rgb(247,18,42)"/><text x="18.3819%" y="175.50"></text></g><g><title>normalize_projection_ty (278,942 samples, 0.21%)</title><rect x="18.2523%" y="149" width="0.2095%" height="15" fill="rgb(241,131,45)"/><text x="18.5023%" y="159.50"></text></g><g><title>type_op_normalize_predicate (294,843 samples, 0.22%)</title><rect x="18.4619%" y="165" width="0.2215%" height="15" fill="rgb(249,31,29)"/><text x="18.7119%" y="175.50"></text></g><g><title>normalize_projection_ty (140,883 samples, 0.11%)</title><rect x="18.5775%" y="149" width="0.1058%" height="15" fill="rgb(225,111,53)"/><text x="18.8275%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,168,275 samples, 2.38%)</title><rect x="18.6972%" y="165" width="2.3798%" height="15" fill="rgb(238,160,17)"/><text x="18.9472%" y="175.50">ty..</text></g><g><title>evaluate_obligation (140,230 samples, 0.11%)</title><rect x="20.9717%" y="149" width="0.1053%" height="15" fill="rgb(214,148,48)"/><text x="21.2217%" y="159.50"></text></g><g><title>MIR_borrow_checking (27,217,635 samples, 20.44%)</title><rect x="0.6530%" y="197" width="20.4445%" height="15" fill="rgb(232,36,49)"/><text x="0.9030%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (27,127,775 samples, 20.38%)</title><rect x="0.7205%" y="181" width="20.3770%" height="15" fill="rgb(209,103,24)"/><text x="0.9705%" y="191.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (179,972 samples, 0.14%)</title><rect x="21.4469%" y="133" width="0.1352%" height="15" fill="rgb(229,88,8)"/><text x="21.6969%" y="143.50"></text></g><g><title>codegen_fn_attrs (302,603 samples, 0.23%)</title><rect x="21.3583%" y="165" width="0.2273%" height="15" fill="rgb(213,181,19)"/><text x="21.6083%" y="175.50"></text></g><g><title>should_inherit_track_caller (265,043 samples, 0.20%)</title><rect x="21.3865%" y="149" width="0.1991%" height="15" fill="rgb(254,191,54)"/><text x="21.6365%" y="159.50"></text></g><g><title>check_mod_attrs (481,055 samples, 0.36%)</title><rect x="21.2244%" y="181" width="0.3613%" height="15" fill="rgb(241,83,37)"/><text x="21.4744%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (303,953 samples, 0.23%)</title><rect x="21.6926%" y="181" width="0.2283%" height="15" fill="rgb(233,36,39)"/><text x="21.9426%" y="191.50"></text></g><g><title>misc_checking_1 (982,972 samples, 0.74%)</title><rect x="21.2117%" y="197" width="0.7384%" height="15" fill="rgb(226,3,54)"/><text x="21.4617%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (423,254 samples, 0.32%)</title><rect x="21.9512%" y="181" width="0.3179%" height="15" fill="rgb(245,192,40)"/><text x="22.2012%" y="191.50"></text></g><g><title>check_mod_liveness (350,034 samples, 0.26%)</title><rect x="22.0062%" y="165" width="0.2629%" height="15" fill="rgb(238,167,29)"/><text x="22.2562%" y="175.50"></text></g><g><title>misc_checking_2 (975,810 samples, 0.73%)</title><rect x="21.9500%" y="197" width="0.7330%" height="15" fill="rgb(232,182,51)"/><text x="22.2000%" y="207.50"></text></g><g><title>match_checking (550,996 samples, 0.41%)</title><rect x="22.2691%" y="181" width="0.4139%" height="15" fill="rgb(231,60,39)"/><text x="22.5191%" y="191.50"></text></g><g><title>check_match (527,325 samples, 0.40%)</title><rect x="22.2869%" y="165" width="0.3961%" height="15" fill="rgb(208,69,12)"/><text x="22.5369%" y="175.50"></text></g><g><title>death_checking (282,963 samples, 0.21%)</title><rect x="22.7881%" y="181" width="0.2125%" height="15" fill="rgb(235,93,37)"/><text x="23.0381%" y="191.50"></text></g><g><title>crate_lints (1,879,341 samples, 1.41%)</title><rect x="23.0017%" y="165" width="1.4117%" height="15" fill="rgb(213,116,39)"/><text x="23.2517%" y="175.50"></text></g><g><title>type_of (1,085,282 samples, 0.82%)</title><rect x="23.5982%" y="149" width="0.8152%" height="15" fill="rgb(222,207,29)"/><text x="23.8482%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (847,220 samples, 0.64%)</title><rect x="23.7770%" y="133" width="0.6364%" height="15" fill="rgb(206,96,30)"/><text x="24.0270%" y="143.50"></text></g><g><title>lint_checking (2,398,506 samples, 1.80%)</title><rect x="23.0006%" y="181" width="1.8016%" height="15" fill="rgb(218,138,4)"/><text x="23.2506%" y="191.50">l..</text></g><g><title>module_lints (517,645 samples, 0.39%)</title><rect x="24.4134%" y="165" width="0.3888%" height="15" fill="rgb(250,191,14)"/><text x="24.6634%" y="175.50"></text></g><g><title>lint_mod (515,035 samples, 0.39%)</title><rect x="24.4154%" y="149" width="0.3869%" height="15" fill="rgb(239,60,40)"/><text x="24.6654%" y="159.50"></text></g><g><title>layout_of (153,522 samples, 0.12%)</title><rect x="24.6869%" y="133" width="0.1153%" height="15" fill="rgb(206,27,48)"/><text x="24.9369%" y="143.50"></text></g><g><title>layout_of (142,631 samples, 0.11%)</title><rect x="24.6951%" y="117" width="0.1071%" height="15" fill="rgb(225,35,8)"/><text x="24.9451%" y="127.50"></text></g><g><title>privacy_access_levels (171,102 samples, 0.13%)</title><rect x="24.8022%" y="181" width="0.1285%" height="15" fill="rgb(250,213,24)"/><text x="25.0522%" y="191.50"></text></g><g><title>privacy_checking_modules (718,329 samples, 0.54%)</title><rect x="24.9308%" y="181" width="0.5396%" height="15" fill="rgb(247,123,22)"/><text x="25.1808%" y="191.50"></text></g><g><title>check_mod_privacy (716,459 samples, 0.54%)</title><rect x="24.9322%" y="165" width="0.5382%" height="15" fill="rgb(231,138,38)"/><text x="25.1822%" y="175.50"></text></g><g><title>misc_checking_3 (3,723,072 samples, 2.80%)</title><rect x="22.6830%" y="197" width="2.7966%" height="15" fill="rgb(231,145,46)"/><text x="22.9330%" y="207.50">mi..</text></g><g><title>impl_parent (1,657,932 samples, 1.25%)</title><rect x="27.4103%" y="133" width="1.2454%" height="15" fill="rgb(251,118,11)"/><text x="27.6603%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,068,605 samples, 0.80%)</title><rect x="27.8529%" y="117" width="0.8027%" height="15" fill="rgb(217,147,25)"/><text x="28.1029%" y="127.50"></text></g><g><title>impl_trait_ref (4,274,208 samples, 3.21%)</title><rect x="28.6556%" y="133" width="3.2106%" height="15" fill="rgb(247,81,37)"/><text x="28.9056%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,673,680 samples, 2.76%)</title><rect x="29.1067%" y="117" width="2.7595%" height="15" fill="rgb(209,12,38)"/><text x="29.3567%" y="127.50">me..</text></g><g><title>coherent_trait (8,931,070 samples, 6.71%)</title><rect x="25.5357%" y="165" width="6.7086%" height="15" fill="rgb(227,1,9)"/><text x="25.7857%" y="175.50">coherent_..</text></g><g><title>specialization_graph_of (8,920,400 samples, 6.70%)</title><rect x="25.5438%" y="149" width="6.7006%" height="15" fill="rgb(248,47,43)"/><text x="25.7938%" y="159.50">specializ..</text></g><g><title>trait_impls_of (501,327 samples, 0.38%)</title><rect x="31.8677%" y="133" width="0.3766%" height="15" fill="rgb(221,10,30)"/><text x="32.1177%" y="143.50"></text></g><g><title>coherence_checking (8,981,560 samples, 6.75%)</title><rect x="25.5213%" y="181" width="6.7465%" height="15" fill="rgb(210,229,1)"/><text x="25.7713%" y="191.50">coherence..</text></g><g><title>associated_item (323,405 samples, 0.24%)</title><rect x="42.4734%" y="117" width="0.2429%" height="15" fill="rgb(222,148,37)"/><text x="42.7234%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (252,995 samples, 0.19%)</title><rect x="42.5262%" y="101" width="0.1900%" height="15" fill="rgb(234,67,33)"/><text x="42.7762%" y="111.50"></text></g><g><title>associated_items (465,047 samples, 0.35%)</title><rect x="42.3841%" y="133" width="0.3493%" height="15" fill="rgb(247,98,35)"/><text x="42.6341%" y="143.50"></text></g><g><title>adt_dtorck_constraint (168,233 samples, 0.13%)</title><rect x="42.8677%" y="117" width="0.1264%" height="15" fill="rgb(247,138,52)"/><text x="43.1177%" y="127.50"></text></g><g><title>dropck_outlives (333,484 samples, 0.25%)</title><rect x="42.7568%" y="133" width="0.2505%" height="15" fill="rgb(213,79,30)"/><text x="43.0068%" y="143.50"></text></g><g><title>evaluate_obligation (841,517 samples, 0.63%)</title><rect x="43.0073%" y="133" width="0.6321%" height="15" fill="rgb(246,177,23)"/><text x="43.2573%" y="143.50"></text></g><g><title>evaluate_obligation (174,752 samples, 0.13%)</title><rect x="44.0636%" y="117" width="0.1313%" height="15" fill="rgb(230,62,27)"/><text x="44.3136%" y="127.50"></text></g><g><title>method_autoderef_steps (330,364 samples, 0.25%)</title><rect x="43.9551%" y="133" width="0.2482%" height="15" fill="rgb(216,154,8)"/><text x="44.2051%" y="143.50"></text></g><g><title>predicates_of (145,951 samples, 0.11%)</title><rect x="44.2535%" y="133" width="0.1096%" height="15" fill="rgb(244,35,45)"/><text x="44.5035%" y="143.50"></text></g><g><title>associated_item (365,282 samples, 0.27%)</title><rect x="52.6753%" y="101" width="0.2744%" height="15" fill="rgb(251,115,12)"/><text x="52.9253%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (301,122 samples, 0.23%)</title><rect x="52.7235%" y="85" width="0.2262%" height="15" fill="rgb(240,54,50)"/><text x="52.9735%" y="95.50"></text></g><g><title>associated_items (515,006 samples, 0.39%)</title><rect x="52.5818%" y="117" width="0.3868%" height="15" fill="rgb(233,84,52)"/><text x="52.8318%" y="127.50"></text></g><g><title>adt_def (512,095 samples, 0.38%)</title><rect x="53.1979%" y="85" width="0.3847%" height="15" fill="rgb(207,117,47)"/><text x="53.4479%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (508,295 samples, 0.38%)</title><rect x="53.2007%" y="69" width="0.3818%" height="15" fill="rgb(249,43,39)"/><text x="53.4507%" y="79.50"></text></g><g><title>item_attrs (449,884 samples, 0.34%)</title><rect x="53.2446%" y="53" width="0.3379%" height="15" fill="rgb(209,38,44)"/><text x="53.4946%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (445,474 samples, 0.33%)</title><rect x="53.2479%" y="37" width="0.3346%" height="15" fill="rgb(236,212,23)"/><text x="53.4979%" y="47.50"></text></g><g><title>adt_dtorck_constraint (182,863 samples, 0.14%)</title><rect x="53.6698%" y="69" width="0.1374%" height="15" fill="rgb(242,79,21)"/><text x="53.9198%" y="79.50"></text></g><g><title>adt_dtorck_constraint (274,705 samples, 0.21%)</title><rect x="53.6228%" y="85" width="0.2063%" height="15" fill="rgb(211,96,35)"/><text x="53.8728%" y="95.50"></text></g><g><title>adt_dtorck_constraint (965,542 samples, 0.73%)</title><rect x="53.1461%" y="101" width="0.7253%" height="15" fill="rgb(253,215,40)"/><text x="53.3961%" y="111.50"></text></g><g><title>dropck_outlives (1,234,736 samples, 0.93%)</title><rect x="53.0088%" y="117" width="0.9275%" height="15" fill="rgb(211,81,21)"/><text x="53.2588%" y="127.50"></text></g><g><title>adt_def (158,300 samples, 0.12%)</title><rect x="54.8701%" y="85" width="0.1189%" height="15" fill="rgb(208,190,38)"/><text x="55.1201%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (154,650 samples, 0.12%)</title><rect x="54.8728%" y="69" width="0.1162%" height="15" fill="rgb(235,213,38)"/><text x="55.1228%" y="79.50"></text></g><g><title>adt_sized_constraint (224,970 samples, 0.17%)</title><rect x="54.8574%" y="101" width="0.1690%" height="15" fill="rgb(237,122,38)"/><text x="55.1074%" y="111.50"></text></g><g><title>predicates_of (138,740 samples, 0.10%)</title><rect x="55.1483%" y="101" width="0.1042%" height="15" fill="rgb(244,218,35)"/><text x="55.3983%" y="111.50"></text></g><g><title>trait_impls_of (431,385 samples, 0.32%)</title><rect x="55.3127%" y="101" width="0.3240%" height="15" fill="rgb(240,68,47)"/><text x="55.5627%" y="111.50"></text></g><g><title>implementations_of_trait (158,413 samples, 0.12%)</title><rect x="55.5177%" y="85" width="0.1190%" height="15" fill="rgb(210,16,53)"/><text x="55.7677%" y="95.50"></text></g><g><title>evaluate_obligation (2,270,086 samples, 1.71%)</title><rect x="53.9363%" y="117" width="1.7052%" height="15" fill="rgb(235,124,12)"/><text x="54.1863%" y="127.50"></text></g><g><title>generics_of (155,874 samples, 0.12%)</title><rect x="55.7395%" y="117" width="0.1171%" height="15" fill="rgb(224,169,11)"/><text x="55.9895%" y="127.50"></text></g><g><title>lookup_stability (258,172 samples, 0.19%)</title><rect x="56.1966%" y="117" width="0.1939%" height="15" fill="rgb(250,166,2)"/><text x="56.4466%" y="127.50"></text></g><g><title>evaluate_obligation (210,774 samples, 0.16%)</title><rect x="56.5437%" y="101" width="0.1583%" height="15" fill="rgb(242,216,29)"/><text x="56.7937%" y="111.50"></text></g><g><title>method_autoderef_steps (438,318 samples, 0.33%)</title><rect x="56.3906%" y="117" width="0.3292%" height="15" fill="rgb(230,116,27)"/><text x="56.6406%" y="127.50"></text></g><g><title>explicit_predicates_of (156,751 samples, 0.12%)</title><rect x="56.8936%" y="85" width="0.1177%" height="15" fill="rgb(228,99,48)"/><text x="57.1436%" y="95.50"></text></g><g><title>predicates_of (416,575 samples, 0.31%)</title><rect x="56.7396%" y="117" width="0.3129%" height="15" fill="rgb(253,11,6)"/><text x="56.9896%" y="127.50"></text></g><g><title>predicates_defined_on (306,505 samples, 0.23%)</title><rect x="56.8223%" y="101" width="0.2302%" height="15" fill="rgb(247,143,39)"/><text x="57.0723%" y="111.50"></text></g><g><title>typeck (17,047,800 samples, 12.81%)</title><rect x="44.4370%" y="133" width="12.8055%" height="15" fill="rgb(236,97,10)"/><text x="44.6870%" y="143.50">typeck</text></g><g><title>item_bodies_checking (33,274,012 samples, 24.99%)</title><rect x="32.2825%" y="181" width="24.9938%" height="15" fill="rgb(233,208,19)"/><text x="32.5325%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (33,270,812 samples, 24.99%)</title><rect x="32.2849%" y="165" width="24.9914%" height="15" fill="rgb(216,164,2)"/><text x="32.5349%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (33,215,220 samples, 24.95%)</title><rect x="32.3267%" y="149" width="24.9496%" height="15" fill="rgb(220,129,5)"/><text x="32.5767%" y="159.50">typeck</text></g><g><title>impl_trait_ref (152,861 samples, 0.11%)</title><rect x="57.6013%" y="101" width="0.1148%" height="15" fill="rgb(242,17,10)"/><text x="57.8513%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (133,601 samples, 0.10%)</title><rect x="57.6158%" y="85" width="0.1004%" height="15" fill="rgb(242,107,0)"/><text x="57.8658%" y="95.50"></text></g><g><title>adt_destructor (337,593 samples, 0.25%)</title><rect x="57.4892%" y="149" width="0.2536%" height="15" fill="rgb(251,28,31)"/><text x="57.7392%" y="159.50"></text></g><g><title>coherent_trait (332,633 samples, 0.25%)</title><rect x="57.4929%" y="133" width="0.2499%" height="15" fill="rgb(233,223,10)"/><text x="57.7429%" y="143.50"></text></g><g><title>specialization_graph_of (330,733 samples, 0.25%)</title><rect x="57.4943%" y="117" width="0.2484%" height="15" fill="rgb(215,21,27)"/><text x="57.7443%" y="127.50"></text></g><g><title>item_types_checking (666,167 samples, 0.50%)</title><rect x="57.2763%" y="181" width="0.5004%" height="15" fill="rgb(232,23,21)"/><text x="57.5263%" y="191.50"></text></g><g><title>check_mod_item_types (663,917 samples, 0.50%)</title><rect x="57.2780%" y="165" width="0.4987%" height="15" fill="rgb(244,5,23)"/><text x="57.5280%" y="175.50"></text></g><g><title>fn_sig (420,304 samples, 0.32%)</title><rect x="57.9230%" y="149" width="0.3157%" height="15" fill="rgb(226,81,46)"/><text x="58.1730%" y="159.50"></text></g><g><title>named_region_map (329,435 samples, 0.25%)</title><rect x="58.3023%" y="133" width="0.2475%" height="15" fill="rgb(247,70,30)"/><text x="58.5523%" y="143.50"></text></g><g><title>resolve_lifetimes (311,615 samples, 0.23%)</title><rect x="58.3157%" y="117" width="0.2341%" height="15" fill="rgb(212,68,19)"/><text x="58.5657%" y="127.50"></text></g><g><title>lint_levels (138,631 samples, 0.10%)</title><rect x="58.4456%" y="101" width="0.1041%" height="15" fill="rgb(240,187,13)"/><text x="58.6956%" y="111.50"></text></g><g><title>generics_of (424,755 samples, 0.32%)</title><rect x="58.2388%" y="149" width="0.3191%" height="15" fill="rgb(223,113,26)"/><text x="58.4888%" y="159.50"></text></g><g><title>explicit_predicates_of (146,411 samples, 0.11%)</title><rect x="58.6359%" y="117" width="0.1100%" height="15" fill="rgb(206,192,2)"/><text x="58.8859%" y="127.50"></text></g><g><title>predicates_of (446,634 samples, 0.34%)</title><rect x="58.5754%" y="149" width="0.3355%" height="15" fill="rgb(241,108,4)"/><text x="58.8254%" y="159.50"></text></g><g><title>predicates_defined_on (417,243 samples, 0.31%)</title><rect x="58.5975%" y="133" width="0.3134%" height="15" fill="rgb(247,173,49)"/><text x="58.8475%" y="143.50"></text></g><g><title>inferred_outlives_of (219,762 samples, 0.17%)</title><rect x="58.7458%" y="117" width="0.1651%" height="15" fill="rgb(224,114,35)"/><text x="58.9958%" y="127.50"></text></g><g><title>inferred_outlives_crate (208,932 samples, 0.16%)</title><rect x="58.7540%" y="101" width="0.1569%" height="15" fill="rgb(245,159,27)"/><text x="59.0040%" y="111.50"></text></g><g><title>type_collecting (1,580,977 samples, 1.19%)</title><rect x="57.7778%" y="181" width="1.1876%" height="15" fill="rgb(245,172,44)"/><text x="58.0278%" y="191.50"></text></g><g><title>collect_mod_item_types (1,570,027 samples, 1.18%)</title><rect x="57.7860%" y="165" width="1.1793%" height="15" fill="rgb(236,23,11)"/><text x="58.0360%" y="175.50"></text></g><g><title>adt_sized_constraint (182,323 samples, 0.14%)</title><rect x="60.4415%" y="117" width="0.1370%" height="15" fill="rgb(205,117,38)"/><text x="60.6915%" y="127.50"></text></g><g><title>adt_sized_constraint (319,434 samples, 0.24%)</title><rect x="60.3433%" y="133" width="0.2399%" height="15" fill="rgb(237,72,25)"/><text x="60.5933%" y="143.50"></text></g><g><title>evaluate_obligation (776,362 samples, 0.58%)</title><rect x="60.0558%" y="149" width="0.5832%" height="15" fill="rgb(244,70,9)"/><text x="60.3058%" y="159.50"></text></g><g><title>implied_outlives_bounds (169,721 samples, 0.13%)</title><rect x="60.6507%" y="149" width="0.1275%" height="15" fill="rgb(217,125,39)"/><text x="60.9007%" y="159.50"></text></g><g><title>object_safety_violations (475,076 samples, 0.36%)</title><rect x="60.7782%" y="149" width="0.3569%" height="15" fill="rgb(235,36,10)"/><text x="61.0282%" y="159.50"></text></g><g><title>param_env (196,574 samples, 0.15%)</title><rect x="61.1359%" y="149" width="0.1477%" height="15" fill="rgb(251,123,47)"/><text x="61.3859%" y="159.50"></text></g><g><title>region_scope_tree (314,574 samples, 0.24%)</title><rect x="61.3365%" y="149" width="0.2363%" height="15" fill="rgb(221,13,13)"/><text x="61.5865%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,551,551 samples, 2.67%)</title><rect x="59.0521%" y="165" width="2.6677%" height="15" fill="rgb(238,131,9)"/><text x="59.3021%" y="175.50">ch..</text></g><g><title>trait_impls_of (193,533 samples, 0.15%)</title><rect x="61.5745%" y="149" width="0.1454%" height="15" fill="rgb(211,50,8)"/><text x="61.8245%" y="159.50"></text></g><g><title>evaluate_obligation (190,552 samples, 0.14%)</title><rect x="61.9968%" y="149" width="0.1431%" height="15" fill="rgb(245,182,24)"/><text x="62.2468%" y="159.50"></text></g><g><title>param_env (135,891 samples, 0.10%)</title><rect x="62.1906%" y="149" width="0.1021%" height="15" fill="rgb(242,14,37)"/><text x="62.4406%" y="159.50"></text></g><g><title>analysis (82,391,232 samples, 61.89%)</title><rect x="0.4545%" y="213" width="61.8882%" height="15" fill="rgb(246,228,12)"/><text x="0.7045%" y="223.50">analysis</text></g><g><title>type_check_crate (49,075,558 samples, 36.86%)</title><rect x="25.4796%" y="197" width="36.8631%" height="15" fill="rgb(213,55,15)"/><text x="25.7296%" y="207.50">type_check_crate</text></g><g><title>wf_checking (4,492,411 samples, 3.37%)</title><rect x="58.9682%" y="181" width="3.3745%" height="15" fill="rgb(209,9,3)"/><text x="59.2182%" y="191.50">wf_..</text></g><g><title>check_item_well_formed (829,147 samples, 0.62%)</title><rect x="61.7199%" y="165" width="0.6228%" height="15" fill="rgb(230,59,30)"/><text x="61.9699%" y="175.50"></text></g><g><title>codegen_crate (848,579 samples, 0.64%)</title><rect x="62.3522%" y="213" width="0.6374%" height="15" fill="rgb(209,121,21)"/><text x="62.6022%" y="223.50"></text></g><g><title>used_crate_source (195,912 samples, 0.15%)</title><rect x="62.8425%" y="197" width="0.1472%" height="15" fill="rgb(220,109,13)"/><text x="63.0925%" y="207.50"></text></g><g><title>metadata_load_macro (322,415 samples, 0.24%)</title><rect x="81.6822%" y="165" width="0.2422%" height="15" fill="rgb(232,18,1)"/><text x="81.9322%" y="175.50"></text></g><g><title>macro_expand_crate (34,416,644 samples, 25.85%)</title><rect x="63.3224%" y="197" width="25.8521%" height="15" fill="rgb(215,41,42)"/><text x="63.5724%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (34,396,294 samples, 25.84%)</title><rect x="63.3377%" y="181" width="25.8368%" height="15" fill="rgb(224,123,36)"/><text x="63.5877%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (9,652,018 samples, 7.25%)</title><rect x="81.9244%" y="165" width="7.2501%" height="15" fill="rgb(240,125,3)"/><text x="82.1744%" y="175.50">metadata_r..</text></g><g><title>metadata_register_crate (6,902,575 samples, 5.18%)</title><rect x="83.9896%" y="149" width="5.1849%" height="15" fill="rgb(205,98,50)"/><text x="84.2396%" y="159.50">metada..</text></g><g><title>pre_AST_expansion_lint_checks (291,783 samples, 0.22%)</title><rect x="89.1809%" y="197" width="0.2192%" height="15" fill="rgb(205,185,37)"/><text x="89.4309%" y="207.50"></text></g><g><title>late_resolve_crate (1,739,669 samples, 1.31%)</title><rect x="89.4917%" y="181" width="1.3068%" height="15" fill="rgb(238,207,15)"/><text x="89.7417%" y="191.50"></text></g><g><title>configure_and_expand (37,093,665 samples, 27.86%)</title><rect x="62.9896%" y="213" width="27.8629%" height="15" fill="rgb(213,199,42)"/><text x="63.2396%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,933,692 samples, 1.45%)</title><rect x="89.4001%" y="197" width="1.4525%" height="15" fill="rgb(235,201,11)"/><text x="89.6501%" y="207.50"></text></g><g><title>early_lint_checks (300,473 samples, 0.23%)</title><rect x="90.9591%" y="213" width="0.2257%" height="15" fill="rgb(207,46,11)"/><text x="91.2091%" y="223.50"></text></g><g><title>free_global_ctxt (3,462,879 samples, 2.60%)</title><rect x="91.1848%" y="213" width="2.6011%" height="15" fill="rgb(241,35,35)"/><text x="91.4348%" y="223.50">fr..</text></g><g><title>generate_crate_metadata (883,179 samples, 0.66%)</title><rect x="93.7860%" y="213" width="0.6634%" height="15" fill="rgb(243,32,47)"/><text x="94.0360%" y="223.50"></text></g><g><title>hir_lowering (2,036,263 samples, 1.53%)</title><rect x="94.4494%" y="213" width="1.5295%" height="15" fill="rgb(247,202,23)"/><text x="94.6994%" y="223.50"></text></g><g><title>parse_crate (3,842,023 samples, 2.89%)</title><rect x="96.0209%" y="213" width="2.8859%" height="15" fill="rgb(219,102,11)"/><text x="96.2709%" y="223.50">pa..</text></g><g><title>prepare_outputs (196,602 samples, 0.15%)</title><rect x="98.9148%" y="213" width="0.1477%" height="15" fill="rgb(243,110,44)"/><text x="99.1648%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (781,129 samples, 0.59%)</title><rect x="99.0625%" y="213" width="0.5867%" height="15" fill="rgb(222,74,54)"/><text x="99.3125%" y="223.50"></text></g><g><title>all (133,129,199 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (133,129,199 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (362,874 samples, 0.27%)</title><rect x="99.7274%" y="213" width="0.2726%" height="15" fill="rgb(217,163,10)"/><text x="99.9774%" y="223.50"></text></g></svg></svg>