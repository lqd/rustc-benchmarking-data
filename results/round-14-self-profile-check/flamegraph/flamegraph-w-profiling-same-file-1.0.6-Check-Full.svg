<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (117,011 samples, 0.19%)</title><rect x="8.8314%" y="133" width="0.1862%" height="15" fill="rgb(227,0,7)"/><text x="9.0814%" y="143.50"></text></g><g><title>item_attrs (107,772 samples, 0.17%)</title><rect x="9.4106%" y="101" width="0.1715%" height="15" fill="rgb(217,0,24)"/><text x="9.6606%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (104,492 samples, 0.17%)</title><rect x="9.4158%" y="85" width="0.1663%" height="15" fill="rgb(221,193,54)"/><text x="9.6658%" y="95.50"></text></g><g><title>codegen_fn_attrs (152,603 samples, 0.24%)</title><rect x="9.3513%" y="117" width="0.2428%" height="15" fill="rgb(248,212,6)"/><text x="9.6013%" y="127.50"></text></g><g><title>is_copy_raw (65,761 samples, 0.10%)</title><rect x="11.4105%" y="37" width="0.1046%" height="15" fill="rgb(208,68,35)"/><text x="11.6605%" y="47.50"></text></g><g><title>adt_drop_tys (126,291 samples, 0.20%)</title><rect x="11.3792%" y="53" width="0.2009%" height="15" fill="rgb(232,128,0)"/><text x="11.6292%" y="63.50"></text></g><g><title>adt_drop_tys (164,181 samples, 0.26%)</title><rect x="11.3671%" y="69" width="0.2612%" height="15" fill="rgb(207,160,47)"/><text x="11.6171%" y="79.50"></text></g><g><title>adt_drop_tys (253,822 samples, 0.40%)</title><rect x="11.3382%" y="85" width="0.4038%" height="15" fill="rgb(228,23,34)"/><text x="11.5882%" y="95.50"></text></g><g><title>needs_drop_raw (803,320 samples, 1.28%)</title><rect x="11.2575%" y="101" width="1.2781%" height="15" fill="rgb(218,30,26)"/><text x="11.5075%" y="111.50"></text></g><g><title>is_copy_raw (498,756 samples, 0.79%)</title><rect x="11.7420%" y="85" width="0.7935%" height="15" fill="rgb(220,122,19)"/><text x="11.9920%" y="95.50"></text></g><g><title>evaluate_obligation (396,805 samples, 0.63%)</title><rect x="11.9043%" y="69" width="0.6313%" height="15" fill="rgb(250,228,42)"/><text x="12.1543%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (102,063 samples, 0.16%)</title><rect x="12.7468%" y="85" width="0.1624%" height="15" fill="rgb(240,193,28)"/><text x="12.9968%" y="95.50"></text></g><g><title>resolve_instance (401,845 samples, 0.64%)</title><rect x="12.5356%" y="101" width="0.6394%" height="15" fill="rgb(216,20,37)"/><text x="12.7856%" y="111.50"></text></g><g><title>thir_body (347,534 samples, 0.55%)</title><rect x="13.1953%" y="101" width="0.5529%" height="15" fill="rgb(206,188,39)"/><text x="13.4453%" y="111.50"></text></g><g><title>mir_const (3,486,561 samples, 5.55%)</title><rect x="8.2147%" y="149" width="5.5473%" height="15" fill="rgb(217,207,13)"/><text x="8.4647%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (2,981,927 samples, 4.74%)</title><rect x="9.0176%" y="133" width="4.7444%" height="15" fill="rgb(231,73,38)"/><text x="9.2676%" y="143.50">unsafe..</text></g><g><title>mir_built (2,619,589 samples, 4.17%)</title><rect x="9.5941%" y="117" width="4.1679%" height="15" fill="rgb(225,20,46)"/><text x="9.8441%" y="127.50">mir_b..</text></g><g><title>mir_promoted (3,888,813 samples, 6.19%)</title><rect x="7.6114%" y="165" width="6.1873%" height="15" fill="rgb(210,31,41)"/><text x="7.8614%" y="175.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (168,683 samples, 0.27%)</title><rect x="13.7986%" y="165" width="0.2684%" height="15" fill="rgb(221,200,47)"/><text x="14.0486%" y="175.50"></text></g><g><title>type_op_normalize_predicate (87,041 samples, 0.14%)</title><rect x="14.1650%" y="165" width="0.1385%" height="15" fill="rgb(226,26,5)"/><text x="14.4150%" y="175.50"></text></g><g><title>type_op_prove_predicate (652,633 samples, 1.04%)</title><rect x="14.3035%" y="165" width="1.0384%" height="15" fill="rgb(249,33,26)"/><text x="14.5535%" y="175.50"></text></g><g><title>evaluate_obligation (73,790 samples, 0.12%)</title><rect x="15.2245%" y="149" width="0.1174%" height="15" fill="rgb(235,183,28)"/><text x="15.4745%" y="159.50"></text></g><g><title>MIR_borrow_checking (8,974,759 samples, 14.28%)</title><rect x="1.0695%" y="197" width="14.2792%" height="15" fill="rgb(221,5,38)"/><text x="1.3195%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,921,129 samples, 14.19%)</title><rect x="1.1549%" y="181" width="14.1939%" height="15" fill="rgb(247,18,42)"/><text x="1.4049%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (116,351 samples, 0.19%)</title><rect x="15.3710%" y="197" width="0.1851%" height="15" fill="rgb(241,131,45)"/><text x="15.6210%" y="207.50"></text></g><g><title>get_lang_items (63,841 samples, 0.10%)</title><rect x="15.8819%" y="149" width="0.1016%" height="15" fill="rgb(249,31,29)"/><text x="16.1319%" y="159.50"></text></g><g><title>codegen_fn_attrs (93,551 samples, 0.15%)</title><rect x="16.1104%" y="133" width="0.1488%" height="15" fill="rgb(225,111,53)"/><text x="16.3604%" y="143.50"></text></g><g><title>should_inherit_track_caller (177,882 samples, 0.28%)</title><rect x="15.9834%" y="149" width="0.2830%" height="15" fill="rgb(238,160,17)"/><text x="16.2334%" y="159.50"></text></g><g><title>codegen_fn_attrs (317,903 samples, 0.51%)</title><rect x="15.7867%" y="165" width="0.5058%" height="15" fill="rgb(214,148,48)"/><text x="16.0367%" y="175.50"></text></g><g><title>check_mod_attrs (441,656 samples, 0.70%)</title><rect x="15.5900%" y="181" width="0.7027%" height="15" fill="rgb(232,36,49)"/><text x="15.8400%" y="191.50"></text></g><g><title>lookup_deprecation_entry (76,581 samples, 0.12%)</title><rect x="16.5569%" y="165" width="0.1218%" height="15" fill="rgb(209,103,24)"/><text x="16.8069%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (214,812 samples, 0.34%)</title><rect x="16.4344%" y="181" width="0.3418%" height="15" fill="rgb(229,88,8)"/><text x="16.6844%" y="191.50"></text></g><g><title>misc_checking_1 (802,669 samples, 1.28%)</title><rect x="15.5567%" y="197" width="1.2771%" height="15" fill="rgb(213,181,19)"/><text x="15.8067%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (172,052 samples, 0.27%)</title><rect x="16.8361%" y="181" width="0.2737%" height="15" fill="rgb(254,191,54)"/><text x="17.0861%" y="191.50"></text></g><g><title>check_mod_liveness (135,951 samples, 0.22%)</title><rect x="16.8935%" y="165" width="0.2163%" height="15" fill="rgb(241,83,37)"/><text x="17.1435%" y="175.50"></text></g><g><title>misc_checking_2 (393,875 samples, 0.63%)</title><rect x="16.8338%" y="197" width="0.6267%" height="15" fill="rgb(233,36,39)"/><text x="17.0838%" y="207.50"></text></g><g><title>match_checking (220,373 samples, 0.35%)</title><rect x="17.1098%" y="181" width="0.3506%" height="15" fill="rgb(226,3,54)"/><text x="17.3598%" y="191.50"></text></g><g><title>check_match (205,633 samples, 0.33%)</title><rect x="17.1333%" y="165" width="0.3272%" height="15" fill="rgb(245,192,40)"/><text x="17.3833%" y="175.50"></text></g><g><title>check_private_in_public (87,600 samples, 0.14%)</title><rect x="17.4757%" y="181" width="0.1394%" height="15" fill="rgb(238,167,29)"/><text x="17.7257%" y="191.50"></text></g><g><title>death_checking (242,442 samples, 0.39%)</title><rect x="17.6151%" y="181" width="0.3857%" height="15" fill="rgb(232,182,51)"/><text x="17.8651%" y="191.50"></text></g><g><title>item_attrs (106,242 samples, 0.17%)</title><rect x="17.8318%" y="165" width="0.1690%" height="15" fill="rgb(231,60,39)"/><text x="18.0818%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (105,132 samples, 0.17%)</title><rect x="17.8335%" y="149" width="0.1673%" height="15" fill="rgb(208,69,12)"/><text x="18.0835%" y="159.50"></text></g><g><title>param_env (107,281 samples, 0.17%)</title><rect x="18.8313%" y="149" width="0.1707%" height="15" fill="rgb(235,93,37)"/><text x="19.0813%" y="159.50"></text></g><g><title>crate_lints (1,885,282 samples, 3.00%)</title><rect x="18.0033%" y="165" width="2.9996%" height="15" fill="rgb(213,116,39)"/><text x="18.2533%" y="175.50">cra..</text></g><g><title>type_of (1,255,376 samples, 2.00%)</title><rect x="19.0055%" y="149" width="1.9974%" height="15" fill="rgb(222,207,29)"/><text x="19.2555%" y="159.50">t..</text></g><g><title>metadata_decode_entry_type_of (805,559 samples, 1.28%)</title><rect x="19.7212%" y="133" width="1.2817%" height="15" fill="rgb(206,96,30)"/><text x="19.9712%" y="143.50"></text></g><g><title>lint_checking (2,048,603 samples, 3.26%)</title><rect x="18.0008%" y="181" width="3.2594%" height="15" fill="rgb(218,138,4)"/><text x="18.2508%" y="191.50">lin..</text></g><g><title>module_lints (161,741 samples, 0.26%)</title><rect x="21.0029%" y="165" width="0.2573%" height="15" fill="rgb(250,191,14)"/><text x="21.2529%" y="175.50"></text></g><g><title>lint_mod (158,311 samples, 0.25%)</title><rect x="21.0083%" y="149" width="0.2519%" height="15" fill="rgb(239,60,40)"/><text x="21.2583%" y="159.50"></text></g><g><title>privacy_access_levels (89,251 samples, 0.14%)</title><rect x="21.2602%" y="181" width="0.1420%" height="15" fill="rgb(206,27,48)"/><text x="21.5102%" y="191.50"></text></g><g><title>privacy_checking_modules (292,494 samples, 0.47%)</title><rect x="21.4022%" y="181" width="0.4654%" height="15" fill="rgb(225,35,8)"/><text x="21.6522%" y="191.50"></text></g><g><title>check_mod_privacy (290,134 samples, 0.46%)</title><rect x="21.4060%" y="165" width="0.4616%" height="15" fill="rgb(250,213,24)"/><text x="21.6560%" y="175.50"></text></g><g><title>misc_checking_3 (2,786,962 samples, 4.43%)</title><rect x="17.4604%" y="197" width="4.4342%" height="15" fill="rgb(247,123,22)"/><text x="17.7104%" y="207.50">misc_..</text></g><g><title>impl_parent (1,684,815 samples, 2.68%)</title><rect x="25.9262%" y="133" width="2.6806%" height="15" fill="rgb(231,138,38)"/><text x="26.1762%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,034,461 samples, 1.65%)</title><rect x="26.9610%" y="117" width="1.6459%" height="15" fill="rgb(231,145,46)"/><text x="27.2110%" y="127.50"></text></g><g><title>impl_trait_ref (4,230,212 samples, 6.73%)</title><rect x="28.6069%" y="133" width="6.7304%" height="15" fill="rgb(251,118,11)"/><text x="28.8569%" y="143.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,342,454 samples, 5.32%)</title><rect x="30.0193%" y="117" width="5.3180%" height="15" fill="rgb(217,147,25)"/><text x="30.2693%" y="127.50">metadat..</text></g><g><title>coherent_trait (8,968,240 samples, 14.27%)</title><rect x="21.9828%" y="165" width="14.2688%" height="15" fill="rgb(247,81,37)"/><text x="22.2328%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (8,951,750 samples, 14.24%)</title><rect x="22.0090%" y="149" width="14.2426%" height="15" fill="rgb(209,12,38)"/><text x="22.2590%" y="159.50">specialization_graph_of</text></g><g><title>trait_impls_of (573,076 samples, 0.91%)</title><rect x="35.3398%" y="133" width="0.9118%" height="15" fill="rgb(227,1,9)"/><text x="35.5898%" y="143.50"></text></g><g><title>implementations_of_trait (150,181 samples, 0.24%)</title><rect x="36.0127%" y="117" width="0.2389%" height="15" fill="rgb(248,47,43)"/><text x="36.2627%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (114,991 samples, 0.18%)</title><rect x="36.0686%" y="101" width="0.1830%" height="15" fill="rgb(221,10,30)"/><text x="36.3186%" y="111.50"></text></g><g><title>coherence_checking (9,026,690 samples, 14.36%)</title><rect x="21.9568%" y="181" width="14.3618%" height="15" fill="rgb(210,229,1)"/><text x="22.2068%" y="191.50">coherence_checking</text></g><g><title>associated_item (283,435 samples, 0.45%)</title><rect x="46.7673%" y="117" width="0.4510%" height="15" fill="rgb(222,148,37)"/><text x="47.0173%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (225,522 samples, 0.36%)</title><rect x="46.8594%" y="101" width="0.3588%" height="15" fill="rgb(234,67,33)"/><text x="47.1094%" y="111.50"></text></g><g><title>associated_items (412,026 samples, 0.66%)</title><rect x="46.5901%" y="133" width="0.6556%" height="15" fill="rgb(247,98,35)"/><text x="46.8401%" y="143.50"></text></g><g><title>adt_dtorck_constraint (79,861 samples, 0.13%)</title><rect x="47.8573%" y="69" width="0.1271%" height="15" fill="rgb(247,138,52)"/><text x="48.1073%" y="79.50"></text></g><g><title>adt_dtorck_constraint (193,512 samples, 0.31%)</title><rect x="47.7158%" y="85" width="0.3079%" height="15" fill="rgb(213,79,30)"/><text x="47.9658%" y="95.50"></text></g><g><title>adt_dtorck_constraint (249,334 samples, 0.40%)</title><rect x="47.6468%" y="101" width="0.3967%" height="15" fill="rgb(246,177,23)"/><text x="47.8968%" y="111.50"></text></g><g><title>dropck_outlives (481,476 samples, 0.77%)</title><rect x="47.3066%" y="133" width="0.7660%" height="15" fill="rgb(230,62,27)"/><text x="47.5566%" y="143.50"></text></g><g><title>adt_dtorck_constraint (358,225 samples, 0.57%)</title><rect x="47.5027%" y="117" width="0.5700%" height="15" fill="rgb(216,154,8)"/><text x="47.7527%" y="127.50"></text></g><g><title>adt_sized_constraint (87,470 samples, 0.14%)</title><rect x="48.8818%" y="117" width="0.1392%" height="15" fill="rgb(244,35,45)"/><text x="49.1318%" y="127.50"></text></g><g><title>explicit_predicates_of (82,200 samples, 0.13%)</title><rect x="49.1647%" y="85" width="0.1308%" height="15" fill="rgb(251,115,12)"/><text x="49.4147%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (78,340 samples, 0.12%)</title><rect x="49.1708%" y="69" width="0.1246%" height="15" fill="rgb(240,54,50)"/><text x="49.4208%" y="79.50"></text></g><g><title>predicates_of (129,200 samples, 0.21%)</title><rect x="49.1078%" y="117" width="0.2056%" height="15" fill="rgb(233,84,52)"/><text x="49.3578%" y="127.50"></text></g><g><title>predicates_defined_on (106,000 samples, 0.17%)</title><rect x="49.1447%" y="101" width="0.1687%" height="15" fill="rgb(207,117,47)"/><text x="49.3947%" y="111.50"></text></g><g><title>evaluate_obligation (957,032 samples, 1.52%)</title><rect x="48.0726%" y="133" width="1.5227%" height="15" fill="rgb(249,43,39)"/><text x="48.3226%" y="143.50"></text></g><g><title>trait_impls_of (174,373 samples, 0.28%)</title><rect x="49.3179%" y="117" width="0.2774%" height="15" fill="rgb(209,38,44)"/><text x="49.5679%" y="127.50"></text></g><g><title>fn_sig (75,871 samples, 0.12%)</title><rect x="49.6222%" y="133" width="0.1207%" height="15" fill="rgb(236,212,23)"/><text x="49.8722%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (66,220 samples, 0.11%)</title><rect x="49.6376%" y="117" width="0.1054%" height="15" fill="rgb(242,79,21)"/><text x="49.8876%" y="127.50"></text></g><g><title>item_attrs (114,011 samples, 0.18%)</title><rect x="49.9271%" y="133" width="0.1814%" height="15" fill="rgb(211,96,35)"/><text x="50.1771%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (109,901 samples, 0.17%)</title><rect x="49.9336%" y="117" width="0.1749%" height="15" fill="rgb(253,215,40)"/><text x="50.1836%" y="127.50"></text></g><g><title>method_autoderef_steps (136,882 samples, 0.22%)</title><rect x="50.1752%" y="133" width="0.2178%" height="15" fill="rgb(211,81,21)"/><text x="50.4252%" y="143.50"></text></g><g><title>evaluate_obligation (83,952 samples, 0.13%)</title><rect x="50.2594%" y="117" width="0.1336%" height="15" fill="rgb(208,190,38)"/><text x="50.5094%" y="127.50"></text></g><g><title>object_safety_violations (140,122 samples, 0.22%)</title><rect x="50.3930%" y="133" width="0.2229%" height="15" fill="rgb(235,213,38)"/><text x="50.6430%" y="143.50"></text></g><g><title>predicates_of (179,334 samples, 0.29%)</title><rect x="50.6752%" y="133" width="0.2853%" height="15" fill="rgb(237,122,38)"/><text x="50.9252%" y="143.50"></text></g><g><title>predicates_defined_on (117,233 samples, 0.19%)</title><rect x="50.7740%" y="117" width="0.1865%" height="15" fill="rgb(244,218,35)"/><text x="51.0240%" y="127.50"></text></g><g><title>type_of (106,042 samples, 0.17%)</title><rect x="50.9885%" y="133" width="0.1687%" height="15" fill="rgb(240,68,47)"/><text x="51.2385%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (94,481 samples, 0.15%)</title><rect x="51.0069%" y="117" width="0.1503%" height="15" fill="rgb(210,16,53)"/><text x="51.2569%" y="127.50"></text></g><g><title>is_copy_raw (158,462 samples, 0.25%)</title><rect x="51.7462%" y="117" width="0.2521%" height="15" fill="rgb(235,124,12)"/><text x="51.9962%" y="127.50"></text></g><g><title>evaluate_obligation (151,122 samples, 0.24%)</title><rect x="51.7579%" y="101" width="0.2404%" height="15" fill="rgb(224,169,11)"/><text x="52.0079%" y="111.50"></text></g><g><title>trait_impls_of (126,462 samples, 0.20%)</title><rect x="51.7971%" y="85" width="0.2012%" height="15" fill="rgb(250,166,2)"/><text x="52.0471%" y="95.50"></text></g><g><title>typeck (562,367 samples, 0.89%)</title><rect x="51.1572%" y="133" width="0.8947%" height="15" fill="rgb(242,216,29)"/><text x="51.4072%" y="143.50"></text></g><g><title>item_bodies_checking (9,923,961 samples, 15.79%)</title><rect x="36.3488%" y="181" width="15.7894%" height="15" fill="rgb(230,116,27)"/><text x="36.5988%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,921,351 samples, 15.79%)</title><rect x="36.3530%" y="165" width="15.7853%" height="15" fill="rgb(228,99,48)"/><text x="36.6030%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (9,883,170 samples, 15.72%)</title><rect x="36.4137%" y="149" width="15.7245%" height="15" fill="rgb(253,11,6)"/><text x="36.6637%" y="159.50">typeck</text></g><g><title>item_types_checking (376,095 samples, 0.60%)</title><rect x="52.1383%" y="181" width="0.5984%" height="15" fill="rgb(247,143,39)"/><text x="52.3883%" y="191.50"></text></g><g><title>check_mod_item_types (373,245 samples, 0.59%)</title><rect x="52.1428%" y="165" width="0.5938%" height="15" fill="rgb(236,97,10)"/><text x="52.3928%" y="175.50"></text></g><g><title>fn_sig (112,960 samples, 0.18%)</title><rect x="52.9420%" y="149" width="0.1797%" height="15" fill="rgb(233,208,19)"/><text x="53.1920%" y="159.50"></text></g><g><title>named_region_map (150,523 samples, 0.24%)</title><rect x="53.2064%" y="133" width="0.2395%" height="15" fill="rgb(216,164,2)"/><text x="53.4564%" y="143.50"></text></g><g><title>resolve_lifetimes (143,033 samples, 0.23%)</title><rect x="53.2183%" y="117" width="0.2276%" height="15" fill="rgb(220,129,5)"/><text x="53.4683%" y="127.50"></text></g><g><title>lint_levels (66,100 samples, 0.11%)</title><rect x="53.3407%" y="101" width="0.1052%" height="15" fill="rgb(242,17,10)"/><text x="53.5907%" y="111.50"></text></g><g><title>generics_of (216,643 samples, 0.34%)</title><rect x="53.1217%" y="149" width="0.3447%" height="15" fill="rgb(242,107,0)"/><text x="53.3717%" y="159.50"></text></g><g><title>late_bound_vars_map (90,692 samples, 0.14%)</title><rect x="53.7691%" y="101" width="0.1443%" height="15" fill="rgb(251,28,31)"/><text x="54.0191%" y="111.50"></text></g><g><title>resolve_lifetimes (85,351 samples, 0.14%)</title><rect x="53.7776%" y="85" width="0.1358%" height="15" fill="rgb(233,223,10)"/><text x="54.0276%" y="95.50"></text></g><g><title>explicit_predicates_of (184,752 samples, 0.29%)</title><rect x="53.6393%" y="117" width="0.2939%" height="15" fill="rgb(215,21,27)"/><text x="53.8893%" y="127.50"></text></g><g><title>predicates_of (395,253 samples, 0.63%)</title><rect x="53.5353%" y="149" width="0.6289%" height="15" fill="rgb(232,23,21)"/><text x="53.7853%" y="159.50"></text></g><g><title>predicates_defined_on (375,263 samples, 0.60%)</title><rect x="53.5671%" y="133" width="0.5971%" height="15" fill="rgb(244,5,23)"/><text x="53.8171%" y="143.50"></text></g><g><title>inferred_outlives_of (145,161 samples, 0.23%)</title><rect x="53.9332%" y="117" width="0.2310%" height="15" fill="rgb(226,81,46)"/><text x="54.1832%" y="127.50"></text></g><g><title>inferred_outlives_crate (130,391 samples, 0.21%)</title><rect x="53.9567%" y="101" width="0.2075%" height="15" fill="rgb(247,70,30)"/><text x="54.2067%" y="111.50"></text></g><g><title>type_of (68,211 samples, 0.11%)</title><rect x="54.0557%" y="85" width="0.1085%" height="15" fill="rgb(212,68,19)"/><text x="54.3057%" y="95.50"></text></g><g><title>type_collecting (956,360 samples, 1.52%)</title><rect x="52.7395%" y="181" width="1.5216%" height="15" fill="rgb(240,187,13)"/><text x="52.9895%" y="191.50"></text></g><g><title>collect_mod_item_types (948,390 samples, 1.51%)</title><rect x="52.7522%" y="165" width="1.5089%" height="15" fill="rgb(223,113,26)"/><text x="53.0022%" y="175.50"></text></g><g><title>adt_sized_constraint (96,291 samples, 0.15%)</title><rect x="55.9178%" y="133" width="0.1532%" height="15" fill="rgb(206,192,2)"/><text x="56.1678%" y="143.50"></text></g><g><title>evaluate_obligation (311,941 samples, 0.50%)</title><rect x="55.6245%" y="149" width="0.4963%" height="15" fill="rgb(241,108,4)"/><text x="55.8745%" y="159.50"></text></g><g><title>implied_outlives_bounds (101,590 samples, 0.16%)</title><rect x="56.1208%" y="149" width="0.1616%" height="15" fill="rgb(247,173,49)"/><text x="56.3708%" y="159.50"></text></g><g><title>param_env (118,652 samples, 0.19%)</title><rect x="56.2825%" y="149" width="0.1888%" height="15" fill="rgb(224,114,35)"/><text x="56.5325%" y="159.50"></text></g><g><title>region_scope_tree (134,252 samples, 0.21%)</title><rect x="56.5199%" y="149" width="0.2136%" height="15" fill="rgb(245,159,27)"/><text x="56.7699%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,523,738 samples, 2.42%)</title><rect x="54.3880%" y="165" width="2.4243%" height="15" fill="rgb(245,172,44)"/><text x="54.6380%" y="175.50">ch..</text></g><g><title>adt_sized_constraint (101,631 samples, 0.16%)</title><rect x="57.7685%" y="133" width="0.1617%" height="15" fill="rgb(236,23,11)"/><text x="58.0185%" y="143.50"></text></g><g><title>evaluate_obligation (273,314 samples, 0.43%)</title><rect x="57.4966%" y="149" width="0.4349%" height="15" fill="rgb(205,117,38)"/><text x="57.7466%" y="159.50"></text></g><g><title>param_env (158,061 samples, 0.25%)</title><rect x="58.0121%" y="149" width="0.2515%" height="15" fill="rgb(237,72,25)"/><text x="58.2621%" y="159.50"></text></g><g><title>analysis (36,221,544 samples, 57.63%)</title><rect x="0.8356%" y="213" width="57.6300%" height="15" fill="rgb(244,70,9)"/><text x="1.0856%" y="223.50">analysis</text></g><g><title>type_check_crate (22,985,576 samples, 36.57%)</title><rect x="21.8946%" y="197" width="36.5710%" height="15" fill="rgb(217,125,39)"/><text x="22.1446%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,640,239 samples, 4.20%)</title><rect x="54.2649%" y="181" width="4.2007%" height="15" fill="rgb(235,36,10)"/><text x="54.5149%" y="191.50">wf_ch..</text></g><g><title>check_item_well_formed (1,039,120 samples, 1.65%)</title><rect x="56.8123%" y="165" width="1.6533%" height="15" fill="rgb(251,123,47)"/><text x="57.0623%" y="175.50"></text></g><g><title>codegen_crate (529,786 samples, 0.84%)</title><rect x="58.4838%" y="213" width="0.8429%" height="15" fill="rgb(221,13,13)"/><text x="58.7338%" y="223.50"></text></g><g><title>AST_validation (138,652 samples, 0.22%)</title><rect x="59.6801%" y="197" width="0.2206%" height="15" fill="rgb(238,131,9)"/><text x="59.9301%" y="207.50"></text></g><g><title>crate_injection (93,501 samples, 0.15%)</title><rect x="59.9398%" y="197" width="0.1488%" height="15" fill="rgb(211,50,8)"/><text x="60.1898%" y="207.50"></text></g><g><title>metadata_load_macro (106,261 samples, 0.17%)</title><rect x="78.6963%" y="165" width="0.1691%" height="15" fill="rgb(245,182,24)"/><text x="78.9463%" y="175.50"></text></g><g><title>metadata_register_crate (2,661,869 samples, 4.24%)</title><rect x="78.8653%" y="165" width="4.2351%" height="15" fill="rgb(242,14,37)"/><text x="79.1153%" y="175.50">metad..</text></g><g><title>metadata_register_crate (989,561 samples, 1.57%)</title><rect x="81.5260%" y="149" width="1.5744%" height="15" fill="rgb(246,228,12)"/><text x="81.7760%" y="159.50"></text></g><g><title>metadata_register_crate (82,231 samples, 0.13%)</title><rect x="82.9696%" y="133" width="0.1308%" height="15" fill="rgb(213,55,15)"/><text x="83.2196%" y="143.50"></text></g><g><title>macro_expand_crate (14,519,012 samples, 23.10%)</title><rect x="60.0886%" y="197" width="23.1003%" height="15" fill="rgb(209,9,3)"/><text x="60.3386%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (14,497,362 samples, 23.07%)</title><rect x="60.1230%" y="181" width="23.0659%" height="15" fill="rgb(230,59,30)"/><text x="60.3730%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (212,403 samples, 0.34%)</title><rect x="83.1957%" y="197" width="0.3379%" height="15" fill="rgb(209,121,21)"/><text x="83.4457%" y="207.50"></text></g><g><title>finalize_imports (70,721 samples, 0.11%)</title><rect x="83.5431%" y="181" width="0.1125%" height="15" fill="rgb(220,109,13)"/><text x="83.7931%" y="191.50"></text></g><g><title>finalize_macro_resolutions (162,281 samples, 0.26%)</title><rect x="83.6556%" y="181" width="0.2582%" height="15" fill="rgb(232,18,1)"/><text x="83.9056%" y="191.50"></text></g><g><title>late_resolve_crate (1,021,871 samples, 1.63%)</title><rect x="83.9138%" y="181" width="1.6258%" height="15" fill="rgb(215,41,42)"/><text x="84.1638%" y="191.50"></text></g><g><title>configure_and_expand (16,523,834 samples, 26.29%)</title><rect x="59.3268%" y="213" width="26.2901%" height="15" fill="rgb(224,123,36)"/><text x="59.5768%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,309,354 samples, 2.08%)</title><rect x="83.5336%" y="197" width="2.0832%" height="15" fill="rgb(240,125,3)"/><text x="83.7836%" y="207.50">r..</text></g><g><title>drop_ast (78,011 samples, 0.12%)</title><rect x="85.6169%" y="213" width="0.1241%" height="15" fill="rgb(205,98,50)"/><text x="85.8669%" y="223.50"></text></g><g><title>early_lint_checks (153,172 samples, 0.24%)</title><rect x="85.7636%" y="213" width="0.2437%" height="15" fill="rgb(205,185,37)"/><text x="86.0136%" y="223.50"></text></g><g><title>free_global_ctxt (2,919,243 samples, 4.64%)</title><rect x="86.0073%" y="213" width="4.6446%" height="15" fill="rgb(238,207,15)"/><text x="86.2573%" y="223.50">free_..</text></g><g><title>crate_hash (67,270 samples, 0.11%)</title><rect x="91.4049%" y="197" width="0.1070%" height="15" fill="rgb(213,199,42)"/><text x="91.6549%" y="207.50"></text></g><g><title>generate_crate_metadata (684,667 samples, 1.09%)</title><rect x="90.6520%" y="213" width="1.0893%" height="15" fill="rgb(235,201,11)"/><text x="90.9020%" y="223.50"></text></g><g><title>hir_lowering (1,019,371 samples, 1.62%)</title><rect x="91.7413%" y="213" width="1.6219%" height="15" fill="rgb(207,46,11)"/><text x="91.9913%" y="223.50"></text></g><g><title>parse_crate (3,100,745 samples, 4.93%)</title><rect x="93.4454%" y="213" width="4.9334%" height="15" fill="rgb(241,35,35)"/><text x="93.6954%" y="223.50">parse_..</text></g><g><title>prepare_outputs (153,221 samples, 0.24%)</title><rect x="98.3948%" y="213" width="0.2438%" height="15" fill="rgb(243,32,47)"/><text x="98.6448%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (516,096 samples, 0.82%)</title><rect x="98.6386%" y="213" width="0.8211%" height="15" fill="rgb(247,202,23)"/><text x="98.8886%" y="223.50"></text></g><g><title>setup_global_ctxt (82,921 samples, 0.13%)</title><rect x="99.4776%" y="213" width="0.1319%" height="15" fill="rgb(219,102,11)"/><text x="99.7276%" y="223.50"></text></g><g><title>all (62,851,922 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (62,851,922 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (245,393 samples, 0.39%)</title><rect x="99.6096%" y="213" width="0.3904%" height="15" fill="rgb(216,99,12)"/><text x="99.8596%" y="223.50"></text></g></svg></svg>