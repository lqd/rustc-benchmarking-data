<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (9,646,438 samples, 0.38%)</title><rect x="18.1994%" y="133" width="0.3831%" height="15" fill="rgb(227,0,7)"/><text x="18.4494%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,829,150 samples, 0.11%)</title><rect x="20.9951%" y="85" width="0.1123%" height="15" fill="rgb(217,0,24)"/><text x="21.2451%" y="95.50"></text></g><g><title>is_copy_raw (13,901,771 samples, 0.55%)</title><rect x="24.4408%" y="53" width="0.5521%" height="15" fill="rgb(221,193,54)"/><text x="24.6908%" y="63.50"></text></g><g><title>evaluate_obligation (9,421,754 samples, 0.37%)</title><rect x="24.6187%" y="37" width="0.3742%" height="15" fill="rgb(248,212,6)"/><text x="24.8687%" y="47.50"></text></g><g><title>needs_drop_raw (18,683,977 samples, 0.74%)</title><rect x="24.2567%" y="69" width="0.7420%" height="15" fill="rgb(208,68,35)"/><text x="24.5067%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,952,379 samples, 0.12%)</title><rect x="25.0844%" y="53" width="0.1172%" height="15" fill="rgb(232,128,0)"/><text x="25.3344%" y="63.50"></text></g><g><title>resolve_instance (7,489,580 samples, 0.30%)</title><rect x="25.0003%" y="69" width="0.2974%" height="15" fill="rgb(207,160,47)"/><text x="25.2503%" y="79.50"></text></g><g><title>thir_body (30,544,099 samples, 1.21%)</title><rect x="25.3279%" y="69" width="1.2130%" height="15" fill="rgb(228,23,34)"/><text x="25.5779%" y="79.50"></text></g><g><title>mir_const (177,757,457 samples, 7.06%)</title><rect x="19.5187%" y="117" width="7.0590%" height="15" fill="rgb(218,30,26)"/><text x="19.7687%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (153,990,045 samples, 6.12%)</title><rect x="20.4626%" y="101" width="6.1152%" height="15" fill="rgb(220,122,19)"/><text x="20.7126%" y="111.50">unsafety..</text></g><g><title>mir_built (137,745,136 samples, 5.47%)</title><rect x="21.1077%" y="85" width="5.4701%" height="15" fill="rgb(250,228,42)"/><text x="21.3577%" y="95.50">mir_bui..</text></g><g><title>mir_const_qualif (2,951,036 samples, 0.12%)</title><rect x="26.5778%" y="117" width="0.1172%" height="15" fill="rgb(240,193,28)"/><text x="26.8278%" y="127.50"></text></g><g><title>mir_promoted (203,372,629 samples, 8.08%)</title><rect x="18.6188%" y="133" width="8.0762%" height="15" fill="rgb(216,20,37)"/><text x="18.8688%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (5,910,799 samples, 0.23%)</title><rect x="26.6954%" y="133" width="0.2347%" height="15" fill="rgb(206,188,39)"/><text x="26.9454%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (6,385,880 samples, 0.25%)</title><rect x="26.9301%" y="133" width="0.2536%" height="15" fill="rgb(217,207,13)"/><text x="27.1801%" y="143.50"></text></g><g><title>normalize_projection_ty (4,142,249 samples, 0.16%)</title><rect x="27.0192%" y="117" width="0.1645%" height="15" fill="rgb(231,73,38)"/><text x="27.2692%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,605,639 samples, 0.10%)</title><rect x="27.1837%" y="133" width="0.1035%" height="15" fill="rgb(225,20,46)"/><text x="27.4337%" y="143.50"></text></g><g><title>type_op_prove_predicate (77,950,248 samples, 3.10%)</title><rect x="27.2882%" y="133" width="3.0955%" height="15" fill="rgb(210,31,41)"/><text x="27.5382%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (759,261,330 samples, 30.15%)</title><rect x="0.2344%" y="165" width="30.1514%" height="15" fill="rgb(221,200,47)"/><text x="0.4844%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (755,794,783 samples, 30.01%)</title><rect x="0.3721%" y="149" width="30.0137%" height="15" fill="rgb(226,26,5)"/><text x="0.6221%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (6,507,134 samples, 0.26%)</title><rect x="30.5226%" y="149" width="0.2584%" height="15" fill="rgb(249,33,26)"/><text x="30.7726%" y="159.50"></text></g><g><title>lint_levels (3,602,430 samples, 0.14%)</title><rect x="30.9686%" y="133" width="0.1431%" height="15" fill="rgb(235,183,28)"/><text x="31.2186%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (7,015,926 samples, 0.28%)</title><rect x="30.9034%" y="149" width="0.2786%" height="15" fill="rgb(221,5,38)"/><text x="31.1534%" y="159.50"></text></g><g><title>misc_checking_1 (17,056,700 samples, 0.68%)</title><rect x="30.5189%" y="165" width="0.6773%" height="15" fill="rgb(247,18,42)"/><text x="30.7689%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (10,547,657 samples, 0.42%)</title><rect x="31.1964%" y="149" width="0.4189%" height="15" fill="rgb(241,131,45)"/><text x="31.4464%" y="159.50"></text></g><g><title>check_mod_liveness (8,785,417 samples, 0.35%)</title><rect x="31.2663%" y="133" width="0.3489%" height="15" fill="rgb(249,31,29)"/><text x="31.5163%" y="143.50"></text></g><g><title>param_env (4,582,598 samples, 0.18%)</title><rect x="32.2082%" y="117" width="0.1820%" height="15" fill="rgb(225,111,53)"/><text x="32.4582%" y="127.50"></text></g><g><title>misc_checking_2 (30,105,445 samples, 1.20%)</title><rect x="31.1962%" y="165" width="1.1955%" height="15" fill="rgb(238,160,17)"/><text x="31.4462%" y="175.50"></text></g><g><title>match_checking (19,553,858 samples, 0.78%)</title><rect x="31.6152%" y="149" width="0.7765%" height="15" fill="rgb(214,148,48)"/><text x="31.8652%" y="159.50"></text></g><g><title>check_match (18,669,808 samples, 0.74%)</title><rect x="31.6503%" y="133" width="0.7414%" height="15" fill="rgb(232,36,49)"/><text x="31.9003%" y="143.50"></text></g><g><title>check_private_in_public (2,950,623 samples, 0.12%)</title><rect x="32.3925%" y="149" width="0.1172%" height="15" fill="rgb(209,103,24)"/><text x="32.6425%" y="159.50"></text></g><g><title>death_checking (5,476,021 samples, 0.22%)</title><rect x="32.5097%" y="149" width="0.2175%" height="15" fill="rgb(229,88,8)"/><text x="32.7597%" y="159.50"></text></g><g><title>crate_lints (16,497,344 samples, 0.66%)</title><rect x="32.7273%" y="133" width="0.6551%" height="15" fill="rgb(213,181,19)"/><text x="32.9773%" y="143.50"></text></g><g><title>lint_checking (31,907,715 samples, 1.27%)</title><rect x="32.7272%" y="149" width="1.2671%" height="15" fill="rgb(254,191,54)"/><text x="32.9772%" y="159.50"></text></g><g><title>module_lints (15,406,921 samples, 0.61%)</title><rect x="33.3824%" y="133" width="0.6118%" height="15" fill="rgb(241,83,37)"/><text x="33.6324%" y="143.50"></text></g><g><title>lint_mod (15,376,091 samples, 0.61%)</title><rect x="33.3837%" y="117" width="0.6106%" height="15" fill="rgb(233,36,39)"/><text x="33.6337%" y="127.50"></text></g><g><title>privacy_access_levels (3,572,350 samples, 0.14%)</title><rect x="33.9943%" y="149" width="0.1419%" height="15" fill="rgb(226,3,54)"/><text x="34.2443%" y="159.50"></text></g><g><title>privacy_checking_modules (24,668,135 samples, 0.98%)</title><rect x="34.1361%" y="149" width="0.9796%" height="15" fill="rgb(245,192,40)"/><text x="34.3861%" y="159.50"></text></g><g><title>check_mod_privacy (24,642,645 samples, 0.98%)</title><rect x="34.1371%" y="133" width="0.9786%" height="15" fill="rgb(238,167,29)"/><text x="34.3871%" y="143.50"></text></g><g><title>misc_checking_3 (68,702,715 samples, 2.73%)</title><rect x="32.3917%" y="165" width="2.7283%" height="15" fill="rgb(232,182,51)"/><text x="32.6417%" y="175.50">mi..</text></g><g><title>impl_parent (4,331,309 samples, 0.17%)</title><rect x="35.4856%" y="101" width="0.1720%" height="15" fill="rgb(231,60,39)"/><text x="35.7356%" y="111.50"></text></g><g><title>impl_trait_ref (8,909,455 samples, 0.35%)</title><rect x="35.6576%" y="101" width="0.3538%" height="15" fill="rgb(208,69,12)"/><text x="35.9076%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,676,112 samples, 0.27%)</title><rect x="35.7463%" y="85" width="0.2651%" height="15" fill="rgb(235,93,37)"/><text x="35.9963%" y="95.50"></text></g><g><title>coherent_trait (23,294,579 samples, 0.93%)</title><rect x="35.1641%" y="133" width="0.9251%" height="15" fill="rgb(213,116,39)"/><text x="35.4141%" y="143.50"></text></g><g><title>specialization_graph_of (22,637,131 samples, 0.90%)</title><rect x="35.1902%" y="117" width="0.8990%" height="15" fill="rgb(222,207,29)"/><text x="35.4402%" y="127.50"></text></g><g><title>coherence_checking (23,658,823 samples, 0.94%)</title><rect x="35.1627%" y="149" width="0.9395%" height="15" fill="rgb(206,96,30)"/><text x="35.4127%" y="159.50"></text></g><g><title>dropck_outlives (4,038,737 samples, 0.16%)</title><rect x="51.0986%" y="101" width="0.1604%" height="15" fill="rgb(218,138,4)"/><text x="51.3486%" y="111.50"></text></g><g><title>evaluate_obligation (23,035,166 samples, 0.91%)</title><rect x="51.2590%" y="101" width="0.9148%" height="15" fill="rgb(250,191,14)"/><text x="51.5090%" y="111.50"></text></g><g><title>evaluate_obligation (19,402,411 samples, 0.77%)</title><rect x="67.4041%" y="85" width="0.7705%" height="15" fill="rgb(239,60,40)"/><text x="67.6541%" y="95.50"></text></g><g><title>typeck (403,425,967 samples, 16.02%)</title><rect x="52.4831%" y="101" width="16.0206%" height="15" fill="rgb(206,27,48)"/><text x="52.7331%" y="111.50">typeck</text></g><g><title>item_bodies_checking (816,029,231 samples, 32.41%)</title><rect x="36.1111%" y="149" width="32.4057%" height="15" fill="rgb(225,35,8)"/><text x="36.3611%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (816,024,801 samples, 32.41%)</title><rect x="36.1112%" y="133" width="32.4056%" height="15" fill="rgb(250,213,24)"/><text x="36.3612%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (813,997,673 samples, 32.33%)</title><rect x="36.1917%" y="117" width="32.3251%" height="15" fill="rgb(247,123,22)"/><text x="36.4417%" y="127.50">typeck</text></g><g><title>mir_built (3,265,907 samples, 0.13%)</title><rect x="68.7667%" y="37" width="0.1297%" height="15" fill="rgb(231,138,38)"/><text x="69.0167%" y="47.50"></text></g><g><title>mir_const (3,514,569 samples, 0.14%)</title><rect x="68.7599%" y="69" width="0.1396%" height="15" fill="rgb(231,145,46)"/><text x="69.0099%" y="79.50"></text></g><g><title>unsafety_check_result (3,398,038 samples, 0.13%)</title><rect x="68.7645%" y="53" width="0.1349%" height="15" fill="rgb(251,118,11)"/><text x="69.0145%" y="63.50"></text></g><g><title>mir_promoted (3,594,880 samples, 0.14%)</title><rect x="68.7569%" y="85" width="0.1428%" height="15" fill="rgb(217,147,25)"/><text x="69.0069%" y="95.50"></text></g><g><title>type_of (4,728,572 samples, 0.19%)</title><rect x="68.7198%" y="117" width="0.1878%" height="15" fill="rgb(247,81,37)"/><text x="68.9698%" y="127.50"></text></g><g><title>mir_borrowck (4,706,002 samples, 0.19%)</title><rect x="68.7207%" y="101" width="0.1869%" height="15" fill="rgb(209,12,38)"/><text x="68.9707%" y="111.50"></text></g><g><title>typeck (4,989,152 samples, 0.20%)</title><rect x="68.9076%" y="117" width="0.1981%" height="15" fill="rgb(227,1,9)"/><text x="69.1576%" y="127.50"></text></g><g><title>item_types_checking (14,830,495 samples, 0.59%)</title><rect x="68.5168%" y="149" width="0.5889%" height="15" fill="rgb(248,47,43)"/><text x="68.7668%" y="159.50"></text></g><g><title>check_mod_item_types (14,803,925 samples, 0.59%)</title><rect x="68.5179%" y="133" width="0.5879%" height="15" fill="rgb(221,10,30)"/><text x="68.7679%" y="143.50"></text></g><g><title>named_region_map (4,445,885 samples, 0.18%)</title><rect x="69.4002%" y="101" width="0.1766%" height="15" fill="rgb(210,229,1)"/><text x="69.6502%" y="111.50"></text></g><g><title>resolve_lifetimes (4,230,523 samples, 0.17%)</title><rect x="69.4088%" y="85" width="0.1680%" height="15" fill="rgb(222,148,37)"/><text x="69.6588%" y="95.50"></text></g><g><title>generics_of (6,963,094 samples, 0.28%)</title><rect x="69.3033%" y="117" width="0.2765%" height="15" fill="rgb(234,67,33)"/><text x="69.5533%" y="127.50"></text></g><g><title>predicates_of (4,015,045 samples, 0.16%)</title><rect x="69.5856%" y="117" width="0.1594%" height="15" fill="rgb(247,98,35)"/><text x="69.8356%" y="127.50"></text></g><g><title>predicates_defined_on (3,599,192 samples, 0.14%)</title><rect x="69.6021%" y="101" width="0.1429%" height="15" fill="rgb(247,138,52)"/><text x="69.8521%" y="111.50"></text></g><g><title>type_collecting (16,613,045 samples, 0.66%)</title><rect x="69.1064%" y="149" width="0.6597%" height="15" fill="rgb(213,79,30)"/><text x="69.3564%" y="159.50"></text></g><g><title>collect_mod_item_types (16,567,895 samples, 0.66%)</title><rect x="69.1082%" y="133" width="0.6579%" height="15" fill="rgb(246,177,23)"/><text x="69.3582%" y="143.50"></text></g><g><title>region_scope_tree (3,212,461 samples, 0.13%)</title><rect x="70.3961%" y="117" width="0.1276%" height="15" fill="rgb(230,62,27)"/><text x="70.6461%" y="127.50"></text></g><g><title>check_impl_item_well_formed (17,470,995 samples, 0.69%)</title><rect x="69.8464%" y="133" width="0.6938%" height="15" fill="rgb(216,154,8)"/><text x="70.0964%" y="143.50"></text></g><g><title>evaluate_obligation (4,641,350 samples, 0.18%)</title><rect x="70.9689%" y="117" width="0.1843%" height="15" fill="rgb(244,35,45)"/><text x="71.2189%" y="127.50"></text></g><g><title>region_scope_tree (4,094,669 samples, 0.16%)</title><rect x="71.2564%" y="117" width="0.1626%" height="15" fill="rgb(251,115,12)"/><text x="71.5064%" y="127.50"></text></g><g><title>check_item_well_formed (22,686,371 samples, 0.90%)</title><rect x="70.5402%" y="133" width="0.9009%" height="15" fill="rgb(240,54,50)"/><text x="70.7902%" y="143.50"></text></g><g><title>analysis (1,798,385,054 samples, 71.42%)</title><rect x="0.0688%" y="181" width="71.4166%" height="15" fill="rgb(233,84,52)"/><text x="0.3188%" y="191.50">analysis</text></g><g><title>type_check_crate (915,737,771 samples, 36.37%)</title><rect x="35.1200%" y="165" width="36.3653%" height="15" fill="rgb(207,117,47)"/><text x="35.3700%" y="175.50">type_check_crate</text></g><g><title>wf_checking (43,133,330 samples, 1.71%)</title><rect x="69.7724%" y="149" width="1.7129%" height="15" fill="rgb(249,43,39)"/><text x="70.0224%" y="159.50"></text></g><g><title>AST_validation (2,595,749 samples, 0.10%)</title><rect x="71.5275%" y="165" width="0.1031%" height="15" fill="rgb(209,38,44)"/><text x="71.7775%" y="175.50"></text></g><g><title>metadata_register_crate (7,550,125 samples, 0.30%)</title><rect x="94.5915%" y="133" width="0.2998%" height="15" fill="rgb(236,212,23)"/><text x="94.8415%" y="143.50"></text></g><g><title>macro_expand_crate (586,294,845 samples, 23.28%)</title><rect x="71.7167%" y="165" width="23.2826%" height="15" fill="rgb(242,79,21)"/><text x="71.9667%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (586,277,365 samples, 23.28%)</title><rect x="71.7174%" y="149" width="23.2819%" height="15" fill="rgb(211,96,35)"/><text x="71.9674%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,720,640 samples, 0.11%)</title><rect x="94.8913%" y="133" width="0.1080%" height="15" fill="rgb(253,215,40)"/><text x="95.1413%" y="143.50"></text></g><g><title>late_resolve_crate (24,361,321 samples, 0.97%)</title><rect x="95.0582%" y="149" width="0.9674%" height="15" fill="rgb(211,81,21)"/><text x="95.3082%" y="159.50"></text></g><g><title>configure_and_expand (620,891,209 samples, 24.66%)</title><rect x="71.5195%" y="181" width="24.6565%" height="15" fill="rgb(208,190,38)"/><text x="71.7695%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (29,544,309 samples, 1.17%)</title><rect x="95.0028%" y="165" width="1.1732%" height="15" fill="rgb(235,213,38)"/><text x="95.2528%" y="175.50"></text></g><g><title>drop_ast (5,715,204 samples, 0.23%)</title><rect x="96.1761%" y="181" width="0.2270%" height="15" fill="rgb(237,122,38)"/><text x="96.4261%" y="191.50"></text></g><g><title>early_lint_checks (7,920,488 samples, 0.31%)</title><rect x="96.4045%" y="181" width="0.3145%" height="15" fill="rgb(244,218,35)"/><text x="96.6545%" y="191.50"></text></g><g><title>free_global_ctxt (15,939,077 samples, 0.63%)</title><rect x="96.7190%" y="181" width="0.6330%" height="15" fill="rgb(240,68,47)"/><text x="96.9690%" y="191.50"></text></g><g><title>generate_crate_metadata (11,647,230 samples, 0.46%)</title><rect x="97.3520%" y="181" width="0.4625%" height="15" fill="rgb(210,16,53)"/><text x="97.6020%" y="191.50"></text></g><g><title>hir_lowering (49,812,114 samples, 1.98%)</title><rect x="97.8145%" y="181" width="1.9781%" height="15" fill="rgb(235,124,12)"/><text x="98.0645%" y="191.50">h..</text></g><g><title>self_profile_alloc_query_strings (3,386,257 samples, 0.13%)</title><rect x="99.8227%" y="181" width="0.1345%" height="15" fill="rgb(224,169,11)"/><text x="100.0727%" y="191.50"></text></g><g><title>all (2,518,162,873 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,518,162,873 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>