<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (246,463 samples, 0.77%)</title><rect x="7.1092%" y="85" width="0.7720%" height="15" fill="rgb(227,0,7)"/><text x="7.3592%" y="95.50"></text></g><g><title>evaluate_obligation (238,223 samples, 0.75%)</title><rect x="7.1350%" y="69" width="0.7462%" height="15" fill="rgb(217,0,24)"/><text x="7.3850%" y="79.50"></text></g><g><title>trait_impls_of (182,452 samples, 0.57%)</title><rect x="7.3097%" y="53" width="0.5715%" height="15" fill="rgb(221,193,54)"/><text x="7.5597%" y="63.50"></text></g><g><title>implementations_of_trait (35,350 samples, 0.11%)</title><rect x="7.7704%" y="37" width="0.1107%" height="15" fill="rgb(248,212,6)"/><text x="8.0204%" y="47.50"></text></g><g><title>is_copy_raw (60,070 samples, 0.19%)</title><rect x="7.9500%" y="53" width="0.1882%" height="15" fill="rgb(208,68,35)"/><text x="8.2000%" y="63.50"></text></g><g><title>evaluate_obligation (56,080 samples, 0.18%)</title><rect x="7.9625%" y="37" width="0.1757%" height="15" fill="rgb(232,128,0)"/><text x="8.2125%" y="47.50"></text></g><g><title>adt_drop_tys (75,450 samples, 0.24%)</title><rect x="7.9300%" y="69" width="0.2363%" height="15" fill="rgb(207,160,47)"/><text x="8.1800%" y="79.50"></text></g><g><title>needs_drop_raw (133,592 samples, 0.42%)</title><rect x="7.8891%" y="85" width="0.4184%" height="15" fill="rgb(228,23,34)"/><text x="8.1391%" y="95.50"></text></g><g><title>is_copy_raw (45,062 samples, 0.14%)</title><rect x="8.1664%" y="69" width="0.1411%" height="15" fill="rgb(218,30,26)"/><text x="8.4164%" y="79.50"></text></g><g><title>evaluate_obligation (36,602 samples, 0.11%)</title><rect x="8.1929%" y="53" width="0.1146%" height="15" fill="rgb(220,122,19)"/><text x="8.4429%" y="63.50"></text></g><g><title>thir_body (105,570 samples, 0.33%)</title><rect x="8.3643%" y="85" width="0.3307%" height="15" fill="rgb(250,228,42)"/><text x="8.6143%" y="95.50"></text></g><g><title>mir_const (990,029 samples, 3.10%)</title><rect x="5.5993%" y="133" width="3.1010%" height="15" fill="rgb(240,193,28)"/><text x="5.8493%" y="143.50">mir..</text></g><g><title>unsafety_check_result (846,619 samples, 2.65%)</title><rect x="6.0485%" y="117" width="2.6518%" height="15" fill="rgb(216,20,37)"/><text x="6.2985%" y="127.50">un..</text></g><g><title>mir_built (763,637 samples, 2.39%)</title><rect x="6.3085%" y="101" width="2.3919%" height="15" fill="rgb(206,188,39)"/><text x="6.5585%" y="111.50">mi..</text></g><g><title>mir_promoted (1,124,172 samples, 3.52%)</title><rect x="5.2003%" y="149" width="3.5212%" height="15" fill="rgb(217,207,13)"/><text x="5.4503%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (72,491 samples, 0.23%)</title><rect x="8.7215%" y="149" width="0.2271%" height="15" fill="rgb(231,73,38)"/><text x="8.9715%" y="159.50"></text></g><g><title>type_op_prove_predicate (122,702 samples, 0.38%)</title><rect x="8.9485%" y="149" width="0.3843%" height="15" fill="rgb(225,20,46)"/><text x="9.1985%" y="159.50"></text></g><g><title>MIR_borrow_checking (2,462,097 samples, 7.71%)</title><rect x="1.6275%" y="181" width="7.7120%" height="15" fill="rgb(210,31,41)"/><text x="1.8775%" y="191.50">MIR_borrow_..</text></g><g><title>mir_borrowck (2,454,457 samples, 7.69%)</title><rect x="1.6514%" y="165" width="7.6880%" height="15" fill="rgb(221,200,47)"/><text x="1.9014%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (79,521 samples, 0.25%)</title><rect x="9.3530%" y="181" width="0.2491%" height="15" fill="rgb(226,26,5)"/><text x="9.6030%" y="191.50"></text></g><g><title>get_lang_items (42,681 samples, 0.13%)</title><rect x="10.1081%" y="101" width="0.1337%" height="15" fill="rgb(249,33,26)"/><text x="10.3581%" y="111.50"></text></g><g><title>codegen_fn_attrs (95,981 samples, 0.30%)</title><rect x="10.0522%" y="117" width="0.3006%" height="15" fill="rgb(235,183,28)"/><text x="10.3022%" y="127.50"></text></g><g><title>codegen_fn_attrs (174,232 samples, 0.55%)</title><rect x="9.8121%" y="149" width="0.5457%" height="15" fill="rgb(221,5,38)"/><text x="10.0621%" y="159.50"></text></g><g><title>should_inherit_track_caller (149,992 samples, 0.47%)</title><rect x="9.8880%" y="133" width="0.4698%" height="15" fill="rgb(247,18,42)"/><text x="10.1380%" y="143.50"></text></g><g><title>check_mod_attrs (223,472 samples, 0.70%)</title><rect x="9.6583%" y="165" width="0.7000%" height="15" fill="rgb(241,131,45)"/><text x="9.9083%" y="175.50"></text></g><g><title>lookup_deprecation_entry (43,861 samples, 0.14%)</title><rect x="10.5865%" y="149" width="0.1374%" height="15" fill="rgb(249,31,29)"/><text x="10.8365%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (108,972 samples, 0.34%)</title><rect x="10.4759%" y="165" width="0.3413%" height="15" fill="rgb(225,111,53)"/><text x="10.7259%" y="175.50"></text></g><g><title>misc_checking_1 (415,455 samples, 1.30%)</title><rect x="9.6032%" y="181" width="1.3013%" height="15" fill="rgb(238,160,17)"/><text x="9.8532%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (64,500 samples, 0.20%)</title><rect x="10.9088%" y="165" width="0.2020%" height="15" fill="rgb(214,148,48)"/><text x="11.1588%" y="175.50"></text></g><g><title>check_mod_liveness (45,490 samples, 0.14%)</title><rect x="10.9683%" y="149" width="0.1425%" height="15" fill="rgb(232,36,49)"/><text x="11.2183%" y="159.50"></text></g><g><title>misc_checking_2 (163,992 samples, 0.51%)</title><rect x="10.9046%" y="181" width="0.5137%" height="15" fill="rgb(209,103,24)"/><text x="11.1546%" y="191.50"></text></g><g><title>match_checking (98,151 samples, 0.31%)</title><rect x="11.1108%" y="165" width="0.3074%" height="15" fill="rgb(229,88,8)"/><text x="11.3608%" y="175.50"></text></g><g><title>check_match (94,131 samples, 0.29%)</title><rect x="11.1234%" y="149" width="0.2948%" height="15" fill="rgb(213,181,19)"/><text x="11.3734%" y="159.50"></text></g><g><title>check_private_in_public (38,880 samples, 0.12%)</title><rect x="11.4414%" y="165" width="0.1218%" height="15" fill="rgb(254,191,54)"/><text x="11.6914%" y="175.50"></text></g><g><title>death_checking (113,212 samples, 0.35%)</title><rect x="11.5631%" y="165" width="0.3546%" height="15" fill="rgb(241,83,37)"/><text x="11.8131%" y="175.50"></text></g><g><title>item_attrs (38,920 samples, 0.12%)</title><rect x="11.7958%" y="149" width="0.1219%" height="15" fill="rgb(233,36,39)"/><text x="12.0458%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (38,460 samples, 0.12%)</title><rect x="11.7973%" y="133" width="0.1205%" height="15" fill="rgb(226,3,54)"/><text x="12.0473%" y="143.50"></text></g><g><title>all_diagnostic_items (39,361 samples, 0.12%)</title><rect x="13.0832%" y="133" width="0.1233%" height="15" fill="rgb(245,192,40)"/><text x="13.3332%" y="143.50"></text></g><g><title>param_env (93,111 samples, 0.29%)</title><rect x="13.2077%" y="133" width="0.2916%" height="15" fill="rgb(238,167,29)"/><text x="13.4577%" y="143.50"></text></g><g><title>predicates_of (42,580 samples, 0.13%)</title><rect x="13.3660%" y="117" width="0.1334%" height="15" fill="rgb(232,182,51)"/><text x="13.6160%" y="127.50"></text></g><g><title>predicates_defined_on (36,950 samples, 0.12%)</title><rect x="13.3836%" y="101" width="0.1157%" height="15" fill="rgb(231,60,39)"/><text x="13.6336%" y="111.50"></text></g><g><title>crate_lints (1,526,837 samples, 4.78%)</title><rect x="11.9219%" y="149" width="4.7825%" height="15" fill="rgb(208,69,12)"/><text x="12.1719%" y="159.50">crate_..</text></g><g><title>type_of (1,021,769 samples, 3.20%)</title><rect x="13.5040%" y="133" width="3.2005%" height="15" fill="rgb(235,93,37)"/><text x="13.7540%" y="143.50">typ..</text></g><g><title>metadata_decode_entry_type_of (773,028 samples, 2.42%)</title><rect x="14.2831%" y="117" width="2.4213%" height="15" fill="rgb(213,116,39)"/><text x="14.5331%" y="127.50">me..</text></g><g><title>lint_checking (1,593,287 samples, 4.99%)</title><rect x="11.9177%" y="165" width="4.9906%" height="15" fill="rgb(222,207,29)"/><text x="12.1677%" y="175.50">lint_c..</text></g><g><title>module_lints (65,110 samples, 0.20%)</title><rect x="16.7044%" y="149" width="0.2039%" height="15" fill="rgb(206,96,30)"/><text x="16.9544%" y="159.50"></text></g><g><title>lint_mod (62,640 samples, 0.20%)</title><rect x="16.7122%" y="133" width="0.1962%" height="15" fill="rgb(218,138,4)"/><text x="16.9622%" y="143.50"></text></g><g><title>privacy_access_levels (45,691 samples, 0.14%)</title><rect x="16.9084%" y="165" width="0.1431%" height="15" fill="rgb(250,191,14)"/><text x="17.1584%" y="175.50"></text></g><g><title>privacy_checking_modules (75,041 samples, 0.24%)</title><rect x="17.0515%" y="165" width="0.2350%" height="15" fill="rgb(239,60,40)"/><text x="17.3015%" y="175.50"></text></g><g><title>check_mod_privacy (73,571 samples, 0.23%)</title><rect x="17.0561%" y="149" width="0.2304%" height="15" fill="rgb(206,27,48)"/><text x="17.3061%" y="159.50"></text></g><g><title>misc_checking_3 (1,886,361 samples, 5.91%)</title><rect x="11.4182%" y="181" width="5.9086%" height="15" fill="rgb(225,35,8)"/><text x="11.6682%" y="191.50">misc_che..</text></g><g><title>impl_parent (816,006 samples, 2.56%)</title><rect x="20.6297%" y="117" width="2.5560%" height="15" fill="rgb(250,213,24)"/><text x="20.8797%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (552,913 samples, 1.73%)</title><rect x="21.4538%" y="101" width="1.7319%" height="15" fill="rgb(247,123,22)"/><text x="21.7038%" y="111.50"></text></g><g><title>impl_trait_ref (2,698,213 samples, 8.45%)</title><rect x="23.1857%" y="117" width="8.4515%" height="15" fill="rgb(231,138,38)"/><text x="23.4357%" y="127.50">impl_trait_r..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,439,531 samples, 7.64%)</title><rect x="23.9959%" y="101" width="7.6413%" height="15" fill="rgb(231,145,46)"/><text x="24.2459%" y="111.50">metadata_d..</text></g><g><title>coherent_trait (4,715,692 samples, 14.77%)</title><rect x="17.4254%" y="149" width="14.7708%" height="15" fill="rgb(251,118,11)"/><text x="17.6754%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (4,709,972 samples, 14.75%)</title><rect x="17.4433%" y="133" width="14.7529%" height="15" fill="rgb(217,147,25)"/><text x="17.6933%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (177,032 samples, 0.55%)</title><rect x="31.6417%" y="117" width="0.5545%" height="15" fill="rgb(247,81,37)"/><text x="31.8917%" y="127.50"></text></g><g><title>implementations_of_trait (38,561 samples, 0.12%)</title><rect x="32.0755%" y="101" width="0.1208%" height="15" fill="rgb(209,12,38)"/><text x="32.3255%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (33,841 samples, 0.11%)</title><rect x="32.0903%" y="85" width="0.1060%" height="15" fill="rgb(227,1,9)"/><text x="32.3403%" y="95.50"></text></g><g><title>coherence_checking (4,758,413 samples, 14.90%)</title><rect x="17.3910%" y="165" width="14.9047%" height="15" fill="rgb(248,47,43)"/><text x="17.6410%" y="175.50">coherence_checking</text></g><g><title>associated_item (163,283 samples, 0.51%)</title><rect x="38.2141%" y="101" width="0.5114%" height="15" fill="rgb(221,10,30)"/><text x="38.4641%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (133,622 samples, 0.42%)</title><rect x="38.3070%" y="85" width="0.4185%" height="15" fill="rgb(210,229,1)"/><text x="38.5570%" y="95.50"></text></g><g><title>associated_items (211,863 samples, 0.66%)</title><rect x="38.0863%" y="117" width="0.6636%" height="15" fill="rgb(222,148,37)"/><text x="38.3363%" y="127.50"></text></g><g><title>dropck_outlives (75,820 samples, 0.24%)</title><rect x="38.7787%" y="117" width="0.2375%" height="15" fill="rgb(234,67,33)"/><text x="39.0287%" y="127.50"></text></g><g><title>adt_def (34,740 samples, 0.11%)</title><rect x="39.5089%" y="85" width="0.1088%" height="15" fill="rgb(247,98,35)"/><text x="39.7589%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (33,610 samples, 0.11%)</title><rect x="39.5125%" y="69" width="0.1053%" height="15" fill="rgb(247,138,52)"/><text x="39.7625%" y="79.50"></text></g><g><title>adt_sized_constraint (45,060 samples, 0.14%)</title><rect x="39.4886%" y="101" width="0.1411%" height="15" fill="rgb(213,79,30)"/><text x="39.7386%" y="111.50"></text></g><g><title>predicates_of (43,640 samples, 0.14%)</title><rect x="39.8021%" y="101" width="0.1367%" height="15" fill="rgb(246,177,23)"/><text x="40.0521%" y="111.50"></text></g><g><title>evaluate_obligation (585,876 samples, 1.84%)</title><rect x="39.0162%" y="117" width="1.8351%" height="15" fill="rgb(230,62,27)"/><text x="39.2662%" y="127.50">e..</text></g><g><title>trait_impls_of (291,312 samples, 0.91%)</title><rect x="39.9388%" y="101" width="0.9125%" height="15" fill="rgb(216,154,8)"/><text x="40.1888%" y="111.50"></text></g><g><title>implementations_of_trait (89,380 samples, 0.28%)</title><rect x="40.5713%" y="85" width="0.2800%" height="15" fill="rgb(244,35,45)"/><text x="40.8213%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (63,270 samples, 0.20%)</title><rect x="40.6531%" y="69" width="0.1982%" height="15" fill="rgb(251,115,12)"/><text x="40.9031%" y="79.50"></text></g><g><title>fn_sig (32,331 samples, 0.10%)</title><rect x="40.8844%" y="117" width="0.1013%" height="15" fill="rgb(240,54,50)"/><text x="41.1344%" y="127.50"></text></g><g><title>associated_item (75,940 samples, 0.24%)</title><rect x="41.0989%" y="85" width="0.2379%" height="15" fill="rgb(233,84,52)"/><text x="41.3489%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (74,920 samples, 0.23%)</title><rect x="41.1021%" y="69" width="0.2347%" height="15" fill="rgb(207,117,47)"/><text x="41.3521%" y="79.50"></text></g><g><title>impl_item_implementor_ids (81,621 samples, 0.26%)</title><rect x="41.0843%" y="117" width="0.2557%" height="15" fill="rgb(249,43,39)"/><text x="41.3343%" y="127.50"></text></g><g><title>associated_items (79,761 samples, 0.25%)</title><rect x="41.0901%" y="101" width="0.2498%" height="15" fill="rgb(209,38,44)"/><text x="41.3401%" y="111.50"></text></g><g><title>item_attrs (32,572 samples, 0.10%)</title><rect x="41.4134%" y="117" width="0.1020%" height="15" fill="rgb(236,212,23)"/><text x="41.6634%" y="127.50"></text></g><g><title>method_autoderef_steps (41,191 samples, 0.13%)</title><rect x="41.5601%" y="117" width="0.1290%" height="15" fill="rgb(242,79,21)"/><text x="41.8101%" y="127.50"></text></g><g><title>evaluate_obligation (33,291 samples, 0.10%)</title><rect x="41.5848%" y="101" width="0.1043%" height="15" fill="rgb(211,96,35)"/><text x="41.8348%" y="111.50"></text></g><g><title>evaluate_obligation (64,991 samples, 0.20%)</title><rect x="41.8023%" y="101" width="0.2036%" height="15" fill="rgb(253,215,40)"/><text x="42.0523%" y="111.50"></text></g><g><title>layout_of (47,450 samples, 0.15%)</title><rect x="42.0059%" y="101" width="0.1486%" height="15" fill="rgb(211,81,21)"/><text x="42.2559%" y="111.50"></text></g><g><title>object_safety_violations (158,601 samples, 0.50%)</title><rect x="41.6891%" y="117" width="0.4968%" height="15" fill="rgb(208,190,38)"/><text x="41.9391%" y="127.50"></text></g><g><title>explicit_predicates_of (68,161 samples, 0.21%)</title><rect x="42.4149%" y="85" width="0.2135%" height="15" fill="rgb(235,213,38)"/><text x="42.6649%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (60,950 samples, 0.19%)</title><rect x="42.4375%" y="69" width="0.1909%" height="15" fill="rgb(237,122,38)"/><text x="42.6875%" y="79.50"></text></g><g><title>predicates_of (142,441 samples, 0.45%)</title><rect x="42.2207%" y="117" width="0.4462%" height="15" fill="rgb(244,218,35)"/><text x="42.4707%" y="127.50"></text></g><g><title>predicates_defined_on (101,731 samples, 0.32%)</title><rect x="42.3482%" y="101" width="0.3186%" height="15" fill="rgb(240,68,47)"/><text x="42.5982%" y="111.50"></text></g><g><title>type_of (45,110 samples, 0.14%)</title><rect x="42.7599%" y="117" width="0.1413%" height="15" fill="rgb(210,16,53)"/><text x="43.0099%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (37,620 samples, 0.12%)</title><rect x="42.7834%" y="101" width="0.1178%" height="15" fill="rgb(235,124,12)"/><text x="43.0334%" y="111.50"></text></g><g><title>item_bodies_checking (3,395,808 samples, 10.64%)</title><rect x="32.3317%" y="165" width="10.6366%" height="15" fill="rgb(224,169,11)"/><text x="32.5817%" y="175.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (3,394,308 samples, 10.63%)</title><rect x="32.3364%" y="149" width="10.6319%" height="15" fill="rgb(250,166,2)"/><text x="32.5864%" y="159.50">typeck_item_bodi..</text></g><g><title>typeck (3,386,618 samples, 10.61%)</title><rect x="32.3604%" y="133" width="10.6078%" height="15" fill="rgb(242,216,29)"/><text x="32.6104%" y="143.50">typeck</text></g><g><title>impl_parent (64,481 samples, 0.20%)</title><rect x="43.5672%" y="85" width="0.2020%" height="15" fill="rgb(230,116,27)"/><text x="43.8172%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (43,220 samples, 0.14%)</title><rect x="43.6338%" y="69" width="0.1354%" height="15" fill="rgb(228,99,48)"/><text x="43.8838%" y="79.50"></text></g><g><title>impl_trait_ref (214,972 samples, 0.67%)</title><rect x="43.7692%" y="85" width="0.6734%" height="15" fill="rgb(253,11,6)"/><text x="44.0192%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (195,051 samples, 0.61%)</title><rect x="43.8316%" y="69" width="0.6110%" height="15" fill="rgb(247,143,39)"/><text x="44.0816%" y="79.50"></text></g><g><title>adt_destructor (405,615 samples, 1.27%)</title><rect x="43.2922%" y="133" width="1.2705%" height="15" fill="rgb(236,97,10)"/><text x="43.5422%" y="143.50"></text></g><g><title>coherent_trait (402,095 samples, 1.26%)</title><rect x="43.3032%" y="117" width="1.2595%" height="15" fill="rgb(233,208,19)"/><text x="43.5532%" y="127.50"></text></g><g><title>specialization_graph_of (400,325 samples, 1.25%)</title><rect x="43.3088%" y="101" width="1.2539%" height="15" fill="rgb(216,164,2)"/><text x="43.5588%" y="111.50"></text></g><g><title>trait_impls_of (38,371 samples, 0.12%)</title><rect x="44.4425%" y="85" width="0.1202%" height="15" fill="rgb(220,129,5)"/><text x="44.6925%" y="95.50"></text></g><g><title>item_types_checking (533,466 samples, 1.67%)</title><rect x="42.9683%" y="165" width="1.6710%" height="15" fill="rgb(242,17,10)"/><text x="43.2183%" y="175.50"></text></g><g><title>check_mod_item_types (530,756 samples, 1.66%)</title><rect x="42.9768%" y="149" width="1.6625%" height="15" fill="rgb(242,107,0)"/><text x="43.2268%" y="159.50"></text></g><g><title>fn_sig (83,521 samples, 0.26%)</title><rect x="44.8279%" y="133" width="0.2616%" height="15" fill="rgb(251,28,31)"/><text x="45.0779%" y="143.50"></text></g><g><title>type_of (35,040 samples, 0.11%)</title><rect x="44.9797%" y="117" width="0.1098%" height="15" fill="rgb(233,223,10)"/><text x="45.2297%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (33,600 samples, 0.11%)</title><rect x="44.9842%" y="101" width="0.1052%" height="15" fill="rgb(215,21,27)"/><text x="45.2342%" y="111.50"></text></g><g><title>named_region_map (93,191 samples, 0.29%)</title><rect x="45.1526%" y="117" width="0.2919%" height="15" fill="rgb(232,23,21)"/><text x="45.4026%" y="127.50"></text></g><g><title>resolve_lifetimes (89,181 samples, 0.28%)</title><rect x="45.1652%" y="101" width="0.2793%" height="15" fill="rgb(244,5,23)"/><text x="45.4152%" y="111.50"></text></g><g><title>generics_of (122,531 samples, 0.38%)</title><rect x="45.0895%" y="133" width="0.3838%" height="15" fill="rgb(226,81,46)"/><text x="45.3395%" y="143.50"></text></g><g><title>predicates_of (95,110 samples, 0.30%)</title><rect x="45.5326%" y="133" width="0.2979%" height="15" fill="rgb(247,70,30)"/><text x="45.7826%" y="143.50"></text></g><g><title>predicates_defined_on (88,950 samples, 0.28%)</title><rect x="45.5519%" y="117" width="0.2786%" height="15" fill="rgb(212,68,19)"/><text x="45.8019%" y="127.50"></text></g><g><title>inferred_outlives_of (47,890 samples, 0.15%)</title><rect x="45.6805%" y="101" width="0.1500%" height="15" fill="rgb(240,187,13)"/><text x="45.9305%" y="111.50"></text></g><g><title>inferred_outlives_crate (39,320 samples, 0.12%)</title><rect x="45.7074%" y="85" width="0.1232%" height="15" fill="rgb(223,113,26)"/><text x="45.9574%" y="95.50"></text></g><g><title>type_collecting (439,124 samples, 1.38%)</title><rect x="44.6444%" y="165" width="1.3755%" height="15" fill="rgb(206,192,2)"/><text x="44.8944%" y="175.50"></text></g><g><title>collect_mod_item_types (431,844 samples, 1.35%)</title><rect x="44.6672%" y="149" width="1.3527%" height="15" fill="rgb(241,108,4)"/><text x="44.9172%" y="159.50"></text></g><g><title>type_of (60,442 samples, 0.19%)</title><rect x="45.8305%" y="133" width="0.1893%" height="15" fill="rgb(247,173,49)"/><text x="46.0805%" y="143.50"></text></g><g><title>evaluate_obligation (147,412 samples, 0.46%)</title><rect x="46.5502%" y="133" width="0.4617%" height="15" fill="rgb(224,114,35)"/><text x="46.8002%" y="143.50"></text></g><g><title>implied_outlives_bounds (31,980 samples, 0.10%)</title><rect x="47.0119%" y="133" width="0.1002%" height="15" fill="rgb(245,159,27)"/><text x="47.2619%" y="143.50"></text></g><g><title>check_impl_item_well_formed (360,724 samples, 1.13%)</title><rect x="46.0908%" y="149" width="1.1299%" height="15" fill="rgb(245,172,44)"/><text x="46.3408%" y="159.50"></text></g><g><title>evaluate_obligation (88,361 samples, 0.28%)</title><rect x="47.9399%" y="133" width="0.2768%" height="15" fill="rgb(236,23,11)"/><text x="48.1899%" y="143.50"></text></g><g><title>implied_outlives_bounds (48,301 samples, 0.15%)</title><rect x="48.2202%" y="133" width="0.1513%" height="15" fill="rgb(205,117,38)"/><text x="48.4702%" y="143.50"></text></g><g><title>param_env (105,681 samples, 0.33%)</title><rect x="48.3715%" y="133" width="0.3310%" height="15" fill="rgb(237,72,25)"/><text x="48.6215%" y="143.50"></text></g><g><title>region_scope_tree (35,410 samples, 0.11%)</title><rect x="48.7958%" y="133" width="0.1109%" height="15" fill="rgb(244,70,9)"/><text x="49.0458%" y="143.50"></text></g><g><title>analysis (15,218,589 samples, 47.67%)</title><rect x="1.3200%" y="197" width="47.6688%" height="15" fill="rgb(217,125,39)"/><text x="1.5700%" y="207.50">analysis</text></g><g><title>type_check_crate (10,108,282 samples, 31.66%)</title><rect x="17.3268%" y="181" width="31.6619%" height="15" fill="rgb(235,36,10)"/><text x="17.5768%" y="191.50">type_check_crate</text></g><g><title>wf_checking (947,260 samples, 2.97%)</title><rect x="46.0217%" y="165" width="2.9671%" height="15" fill="rgb(251,123,47)"/><text x="46.2717%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (564,456 samples, 1.77%)</title><rect x="47.2207%" y="149" width="1.7680%" height="15" fill="rgb(221,13,13)"/><text x="47.4707%" y="159.50"></text></g><g><title>codegen_crate (415,914 samples, 1.30%)</title><rect x="49.0092%" y="197" width="1.3028%" height="15" fill="rgb(238,131,9)"/><text x="49.2592%" y="207.50"></text></g><g><title>AST_validation (46,590 samples, 0.15%)</title><rect x="50.7272%" y="181" width="0.1459%" height="15" fill="rgb(211,50,8)"/><text x="50.9772%" y="191.50"></text></g><g><title>crate_injection (60,241 samples, 0.19%)</title><rect x="50.9154%" y="181" width="0.1887%" height="15" fill="rgb(245,182,24)"/><text x="51.1654%" y="191.50"></text></g><g><title>metadata_load_macro (54,203 samples, 0.17%)</title><rect x="77.6625%" y="149" width="0.1698%" height="15" fill="rgb(242,14,37)"/><text x="77.9125%" y="159.50"></text></g><g><title>metadata_register_crate (1,322,245 samples, 4.14%)</title><rect x="77.8322%" y="149" width="4.1416%" height="15" fill="rgb(246,228,12)"/><text x="78.0822%" y="159.50">metad..</text></g><g><title>metadata_register_crate (479,057 samples, 1.50%)</title><rect x="80.4733%" y="133" width="1.5005%" height="15" fill="rgb(213,55,15)"/><text x="80.7233%" y="143.50"></text></g><g><title>metadata_register_crate (43,380 samples, 0.14%)</title><rect x="81.8380%" y="117" width="0.1359%" height="15" fill="rgb(209,9,3)"/><text x="82.0880%" y="127.50"></text></g><g><title>macro_expand_crate (9,884,851 samples, 30.96%)</title><rect x="51.1041%" y="181" width="30.9621%" height="15" fill="rgb(230,59,30)"/><text x="51.3541%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (9,869,250 samples, 30.91%)</title><rect x="51.1530%" y="165" width="30.9132%" height="15" fill="rgb(209,121,21)"/><text x="51.4030%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (36,270 samples, 0.11%)</title><rect x="82.0764%" y="181" width="0.1136%" height="15" fill="rgb(220,109,13)"/><text x="82.3264%" y="191.50"></text></g><g><title>finalize_imports (33,111 samples, 0.10%)</title><rect x="82.2021%" y="165" width="0.1037%" height="15" fill="rgb(232,18,1)"/><text x="82.4521%" y="175.50"></text></g><g><title>late_resolve_crate (564,776 samples, 1.77%)</title><rect x="82.3842%" y="165" width="1.7690%" height="15" fill="rgb(215,41,42)"/><text x="82.6342%" y="175.50"></text></g><g><title>configure_and_expand (10,836,902 samples, 33.94%)</title><rect x="50.3119%" y="197" width="33.9441%" height="15" fill="rgb(224,123,36)"/><text x="50.5619%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (659,607 samples, 2.07%)</title><rect x="82.1900%" y="181" width="2.0661%" height="15" fill="rgb(240,125,3)"/><text x="82.4400%" y="191.50">r..</text></g><g><title>early_lint_checks (87,610 samples, 0.27%)</title><rect x="84.3945%" y="197" width="0.2744%" height="15" fill="rgb(205,98,50)"/><text x="84.6445%" y="207.50"></text></g><g><title>free_global_ctxt (2,525,498 samples, 7.91%)</title><rect x="84.6690%" y="197" width="7.9106%" height="15" fill="rgb(205,185,37)"/><text x="84.9190%" y="207.50">free_global..</text></g><g><title>crate_hash (69,681 samples, 0.22%)</title><rect x="94.1122%" y="181" width="0.2183%" height="15" fill="rgb(238,207,15)"/><text x="94.3622%" y="191.50"></text></g><g><title>mir_for_ctfe (35,550 samples, 0.11%)</title><rect x="94.4479%" y="181" width="0.1114%" height="15" fill="rgb(213,199,42)"/><text x="94.6979%" y="191.50"></text></g><g><title>generate_crate_metadata (671,438 samples, 2.10%)</title><rect x="92.5795%" y="197" width="2.1031%" height="15" fill="rgb(235,201,11)"/><text x="92.8295%" y="207.50">g..</text></g><g><title>hir_lowering (425,085 samples, 1.33%)</title><rect x="94.6826%" y="197" width="1.3315%" height="15" fill="rgb(207,46,11)"/><text x="94.9326%" y="207.50"></text></g><g><title>link (46,911 samples, 0.15%)</title><rect x="96.0141%" y="197" width="0.1469%" height="15" fill="rgb(241,35,35)"/><text x="96.2641%" y="207.50"></text></g><g><title>parse_crate (280,034 samples, 0.88%)</title><rect x="96.1611%" y="197" width="0.8771%" height="15" fill="rgb(243,32,47)"/><text x="96.4111%" y="207.50"></text></g><g><title>prepare_outputs (190,742 samples, 0.60%)</title><rect x="97.0548%" y="197" width="0.5975%" height="15" fill="rgb(247,202,23)"/><text x="97.3048%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (410,365 samples, 1.29%)</title><rect x="97.6523%" y="197" width="1.2854%" height="15" fill="rgb(219,102,11)"/><text x="97.9023%" y="207.50"></text></g><g><title>setup_global_ctxt (75,381 samples, 0.24%)</title><rect x="98.9720%" y="197" width="0.2361%" height="15" fill="rgb(243,110,44)"/><text x="99.2220%" y="207.50"></text></g><g><title>all (31,925,686 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (31,925,686 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (252,823 samples, 0.79%)</title><rect x="99.2081%" y="197" width="0.7919%" height="15" fill="rgb(226,22,26)"/><text x="99.4581%" y="207.50"></text></g></svg></svg>