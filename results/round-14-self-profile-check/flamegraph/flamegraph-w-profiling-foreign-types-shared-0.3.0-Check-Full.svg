<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (24,581 samples, 0.10%)</title><rect x="7.4206%" y="117" width="0.1014%" height="15" fill="rgb(227,0,7)"/><text x="7.6706%" y="127.50"></text></g><g><title>is_copy_raw (80,120 samples, 0.33%)</title><rect x="8.6790%" y="85" width="0.3305%" height="15" fill="rgb(217,0,24)"/><text x="8.9290%" y="95.50"></text></g><g><title>evaluate_obligation (69,120 samples, 0.29%)</title><rect x="8.7244%" y="69" width="0.2852%" height="15" fill="rgb(221,193,54)"/><text x="8.9744%" y="79.50"></text></g><g><title>needs_drop_raw (59,921 samples, 0.25%)</title><rect x="9.0095%" y="85" width="0.2472%" height="15" fill="rgb(248,212,6)"/><text x="9.2595%" y="95.50"></text></g><g><title>is_copy_raw (55,911 samples, 0.23%)</title><rect x="9.0261%" y="69" width="0.2307%" height="15" fill="rgb(208,68,35)"/><text x="9.2761%" y="79.50"></text></g><g><title>evaluate_obligation (51,291 samples, 0.21%)</title><rect x="9.0451%" y="53" width="0.2116%" height="15" fill="rgb(232,128,0)"/><text x="9.2951%" y="63.50"></text></g><g><title>trait_impls_of (40,471 samples, 0.17%)</title><rect x="9.0898%" y="37" width="0.1670%" height="15" fill="rgb(207,160,47)"/><text x="9.3398%" y="47.50"></text></g><g><title>resolve_instance (27,830 samples, 0.11%)</title><rect x="9.2568%" y="85" width="0.1148%" height="15" fill="rgb(228,23,34)"/><text x="9.5068%" y="95.50"></text></g><g><title>thir_body (71,432 samples, 0.29%)</title><rect x="9.3832%" y="85" width="0.2947%" height="15" fill="rgb(218,30,26)"/><text x="9.6332%" y="95.50"></text></g><g><title>mir_const (653,927 samples, 2.70%)</title><rect x="7.0296%" y="133" width="2.6978%" height="15" fill="rgb(220,122,19)"/><text x="7.2796%" y="143.50">mi..</text></g><g><title>unsafety_check_result (516,326 samples, 2.13%)</title><rect x="7.5973%" y="117" width="2.1302%" height="15" fill="rgb(250,228,42)"/><text x="7.8473%" y="127.50">u..</text></g><g><title>mir_built (439,335 samples, 1.81%)</title><rect x="7.9149%" y="101" width="1.8125%" height="15" fill="rgb(240,193,28)"/><text x="8.1649%" y="111.50">m..</text></g><g><title>mir_promoted (756,928 samples, 3.12%)</title><rect x="6.6343%" y="149" width="3.1228%" height="15" fill="rgb(216,20,37)"/><text x="6.8843%" y="159.50">mir..</text></g><g><title>type_op_normalize_ty (32,820 samples, 0.14%)</title><rect x="9.8189%" y="149" width="0.1354%" height="15" fill="rgb(206,188,39)"/><text x="10.0689%" y="159.50"></text></g><g><title>MIR_borrow_checking (1,659,188 samples, 6.85%)</title><rect x="3.4910%" y="181" width="6.8452%" height="15" fill="rgb(217,207,13)"/><text x="3.7410%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (1,651,368 samples, 6.81%)</title><rect x="3.5233%" y="165" width="6.8129%" height="15" fill="rgb(231,73,38)"/><text x="3.7733%" y="175.50">mir_borro..</text></g><g><title>type_op_prove_predicate (92,550 samples, 0.38%)</title><rect x="9.9543%" y="149" width="0.3818%" height="15" fill="rgb(225,20,46)"/><text x="10.2043%" y="159.50"></text></g><g><title>hir_owner (30,801 samples, 0.13%)</title><rect x="10.8267%" y="165" width="0.1271%" height="15" fill="rgb(210,31,41)"/><text x="11.0767%" y="175.50"></text></g><g><title>hir_module_items (144,962 samples, 0.60%)</title><rect x="10.3591%" y="181" width="0.5981%" height="15" fill="rgb(221,200,47)"/><text x="10.6091%" y="191.50"></text></g><g><title>get_lang_items (72,921 samples, 0.30%)</title><rect x="11.7885%" y="133" width="0.3008%" height="15" fill="rgb(226,26,5)"/><text x="12.0385%" y="143.50"></text></g><g><title>associated_item (43,750 samples, 0.18%)</title><rect x="12.2298%" y="117" width="0.1805%" height="15" fill="rgb(249,33,26)"/><text x="12.4798%" y="127.50"></text></g><g><title>should_inherit_track_caller (80,760 samples, 0.33%)</title><rect x="12.0894%" y="133" width="0.3332%" height="15" fill="rgb(235,183,28)"/><text x="12.3394%" y="143.50"></text></g><g><title>codegen_fn_attrs (267,674 samples, 1.10%)</title><rect x="11.4806%" y="149" width="1.1043%" height="15" fill="rgb(221,5,38)"/><text x="11.7306%" y="159.50"></text></g><g><title>supported_target_features (39,341 samples, 0.16%)</title><rect x="12.4226%" y="133" width="0.1623%" height="15" fill="rgb(247,18,42)"/><text x="12.6726%" y="143.50"></text></g><g><title>check_mod_attrs (364,994 samples, 1.51%)</title><rect x="11.0821%" y="165" width="1.5058%" height="15" fill="rgb(241,131,45)"/><text x="11.3321%" y="175.50"></text></g><g><title>check_mod_const_bodies (37,370 samples, 0.15%)</title><rect x="12.5879%" y="165" width="0.1542%" height="15" fill="rgb(249,31,29)"/><text x="12.8379%" y="175.50"></text></g><g><title>lookup_deprecation_entry (57,610 samples, 0.24%)</title><rect x="13.0427%" y="149" width="0.2377%" height="15" fill="rgb(225,111,53)"/><text x="13.2927%" y="159.50"></text></g><g><title>stability_index (27,470 samples, 0.11%)</title><rect x="13.1671%" y="133" width="0.1133%" height="15" fill="rgb(238,160,17)"/><text x="13.4171%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (142,882 samples, 0.59%)</title><rect x="12.8335%" y="165" width="0.5895%" height="15" fill="rgb(214,148,48)"/><text x="13.0835%" y="175.50"></text></g><g><title>looking_for_derive_registrar (31,770 samples, 0.13%)</title><rect x="13.4282%" y="165" width="0.1311%" height="15" fill="rgb(232,36,49)"/><text x="13.6782%" y="175.50"></text></g><g><title>misc_checking_1 (641,867 samples, 2.65%)</title><rect x="10.9588%" y="181" width="2.6481%" height="15" fill="rgb(209,103,24)"/><text x="11.2088%" y="191.50">mi..</text></g><g><title>liveness_and_intrinsic_checking (55,690 samples, 0.23%)</title><rect x="13.6116%" y="165" width="0.2298%" height="15" fill="rgb(229,88,8)"/><text x="13.8616%" y="175.50"></text></g><g><title>check_mod_liveness (43,180 samples, 0.18%)</title><rect x="13.6632%" y="149" width="0.1781%" height="15" fill="rgb(213,181,19)"/><text x="13.9132%" y="159.50"></text></g><g><title>misc_checking_2 (129,601 samples, 0.53%)</title><rect x="13.6068%" y="181" width="0.5347%" height="15" fill="rgb(254,191,54)"/><text x="13.8568%" y="191.50"></text></g><g><title>match_checking (72,751 samples, 0.30%)</title><rect x="13.8414%" y="165" width="0.3001%" height="15" fill="rgb(241,83,37)"/><text x="14.0914%" y="175.50"></text></g><g><title>check_match (69,771 samples, 0.29%)</title><rect x="13.8537%" y="149" width="0.2878%" height="15" fill="rgb(233,36,39)"/><text x="14.1037%" y="159.50"></text></g><g><title>check_private_in_public (30,690 samples, 0.13%)</title><rect x="14.1669%" y="165" width="0.1266%" height="15" fill="rgb(226,3,54)"/><text x="14.4169%" y="175.50"></text></g><g><title>death_checking (41,931 samples, 0.17%)</title><rect x="14.2935%" y="165" width="0.1730%" height="15" fill="rgb(245,192,40)"/><text x="14.5435%" y="175.50"></text></g><g><title>param_env (41,381 samples, 0.17%)</title><rect x="15.2083%" y="133" width="0.1707%" height="15" fill="rgb(238,167,29)"/><text x="15.4583%" y="143.50"></text></g><g><title>trait_impls_of (72,651 samples, 0.30%)</title><rect x="15.3790%" y="133" width="0.2997%" height="15" fill="rgb(232,182,51)"/><text x="15.6290%" y="143.50"></text></g><g><title>crate_lints (1,228,404 samples, 5.07%)</title><rect x="14.4724%" y="149" width="5.0679%" height="15" fill="rgb(231,60,39)"/><text x="14.7224%" y="159.50">crate_..</text></g><g><title>type_of (936,001 samples, 3.86%)</title><rect x="15.6787%" y="133" width="3.8616%" height="15" fill="rgb(208,69,12)"/><text x="15.9287%" y="143.50">type..</text></g><g><title>metadata_decode_entry_type_of (850,649 samples, 3.51%)</title><rect x="16.0308%" y="117" width="3.5094%" height="15" fill="rgb(235,93,37)"/><text x="16.2808%" y="127.50">met..</text></g><g><title>lint_checking (1,316,135 samples, 5.43%)</title><rect x="14.4665%" y="165" width="5.4299%" height="15" fill="rgb(213,116,39)"/><text x="14.7165%" y="175.50">lint_ch..</text></g><g><title>module_lints (86,301 samples, 0.36%)</title><rect x="19.5403%" y="149" width="0.3560%" height="15" fill="rgb(222,207,29)"/><text x="19.7903%" y="159.50"></text></g><g><title>lint_mod (84,321 samples, 0.35%)</title><rect x="19.5484%" y="133" width="0.3479%" height="15" fill="rgb(206,96,30)"/><text x="19.7984%" y="143.50"></text></g><g><title>is_copy_raw (42,020 samples, 0.17%)</title><rect x="19.7230%" y="117" width="0.1734%" height="15" fill="rgb(218,138,4)"/><text x="19.9730%" y="127.50"></text></g><g><title>evaluate_obligation (33,610 samples, 0.14%)</title><rect x="19.7577%" y="101" width="0.1387%" height="15" fill="rgb(250,191,14)"/><text x="20.0077%" y="111.50"></text></g><g><title>privacy_access_levels (41,971 samples, 0.17%)</title><rect x="19.8963%" y="165" width="0.1732%" height="15" fill="rgb(239,60,40)"/><text x="20.1463%" y="175.50"></text></g><g><title>privacy_checking_modules (62,280 samples, 0.26%)</title><rect x="20.0695%" y="165" width="0.2569%" height="15" fill="rgb(206,27,48)"/><text x="20.3195%" y="175.50"></text></g><g><title>check_mod_privacy (60,910 samples, 0.25%)</title><rect x="20.0751%" y="149" width="0.2513%" height="15" fill="rgb(225,35,8)"/><text x="20.3251%" y="159.50"></text></g><g><title>misc_checking_3 (1,508,827 samples, 6.22%)</title><rect x="14.1415%" y="181" width="6.2248%" height="15" fill="rgb(250,213,24)"/><text x="14.3915%" y="191.50">misc_che..</text></g><g><title>associated_item (73,161 samples, 0.30%)</title><rect x="26.1666%" y="101" width="0.3018%" height="15" fill="rgb(247,123,22)"/><text x="26.4166%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (57,211 samples, 0.24%)</title><rect x="26.2324%" y="85" width="0.2360%" height="15" fill="rgb(231,138,38)"/><text x="26.4824%" y="95.50"></text></g><g><title>associated_items (106,511 samples, 0.44%)</title><rect x="26.0481%" y="117" width="0.4394%" height="15" fill="rgb(231,145,46)"/><text x="26.2981%" y="127.50"></text></g><g><title>evaluate_obligation (155,971 samples, 0.64%)</title><rect x="26.5081%" y="117" width="0.6435%" height="15" fill="rgb(251,118,11)"/><text x="26.7581%" y="127.50"></text></g><g><title>trait_impls_of (31,820 samples, 0.13%)</title><rect x="27.0203%" y="101" width="0.1313%" height="15" fill="rgb(217,147,25)"/><text x="27.2703%" y="111.50"></text></g><g><title>fn_sig (27,360 samples, 0.11%)</title><rect x="27.1652%" y="117" width="0.1129%" height="15" fill="rgb(247,81,37)"/><text x="27.4152%" y="127.50"></text></g><g><title>generics_of (27,230 samples, 0.11%)</title><rect x="27.2781%" y="117" width="0.1123%" height="15" fill="rgb(209,12,38)"/><text x="27.5281%" y="127.50"></text></g><g><title>associated_item (94,011 samples, 0.39%)</title><rect x="27.4140%" y="85" width="0.3879%" height="15" fill="rgb(227,1,9)"/><text x="27.6640%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (93,141 samples, 0.38%)</title><rect x="27.4176%" y="69" width="0.3843%" height="15" fill="rgb(248,47,43)"/><text x="27.6676%" y="79.50"></text></g><g><title>impl_item_implementor_ids (100,381 samples, 0.41%)</title><rect x="27.3918%" y="117" width="0.4141%" height="15" fill="rgb(221,10,30)"/><text x="27.6418%" y="127.50"></text></g><g><title>associated_items (97,271 samples, 0.40%)</title><rect x="27.4046%" y="101" width="0.4013%" height="15" fill="rgb(210,229,1)"/><text x="27.6546%" y="111.50"></text></g><g><title>impl_trait_ref (30,060 samples, 0.12%)</title><rect x="27.8257%" y="117" width="0.1240%" height="15" fill="rgb(222,148,37)"/><text x="28.0757%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (25,600 samples, 0.11%)</title><rect x="27.8441%" y="101" width="0.1056%" height="15" fill="rgb(234,67,33)"/><text x="28.0941%" y="111.50"></text></g><g><title>item_attrs (79,971 samples, 0.33%)</title><rect x="27.9542%" y="117" width="0.3299%" height="15" fill="rgb(247,98,35)"/><text x="28.2042%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (76,331 samples, 0.31%)</title><rect x="27.9692%" y="101" width="0.3149%" height="15" fill="rgb(247,138,52)"/><text x="28.2192%" y="111.50"></text></g><g><title>lint_levels (31,240 samples, 0.13%)</title><rect x="28.2841%" y="117" width="0.1289%" height="15" fill="rgb(213,79,30)"/><text x="28.5341%" y="127.50"></text></g><g><title>method_autoderef_steps (56,791 samples, 0.23%)</title><rect x="28.4277%" y="117" width="0.2343%" height="15" fill="rgb(246,177,23)"/><text x="28.6777%" y="127.50"></text></g><g><title>evaluate_obligation (40,781 samples, 0.17%)</title><rect x="28.4937%" y="101" width="0.1682%" height="15" fill="rgb(230,62,27)"/><text x="28.7437%" y="111.50"></text></g><g><title>explicit_predicates_of (28,531 samples, 0.12%)</title><rect x="28.8510%" y="85" width="0.1177%" height="15" fill="rgb(216,154,8)"/><text x="29.1010%" y="95.50"></text></g><g><title>predicates_of (82,921 samples, 0.34%)</title><rect x="28.6806%" y="117" width="0.3421%" height="15" fill="rgb(244,35,45)"/><text x="28.9306%" y="127.50"></text></g><g><title>predicates_defined_on (62,121 samples, 0.26%)</title><rect x="28.7664%" y="101" width="0.2563%" height="15" fill="rgb(251,115,12)"/><text x="29.0164%" y="111.50"></text></g><g><title>type_of (25,431 samples, 0.10%)</title><rect x="29.0920%" y="117" width="0.1049%" height="15" fill="rgb(240,54,50)"/><text x="29.3420%" y="127.50"></text></g><g><title>item_bodies_checking (2,095,443 samples, 8.64%)</title><rect x="20.5649%" y="165" width="8.6450%" height="15" fill="rgb(233,84,52)"/><text x="20.8149%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (2,093,503 samples, 8.64%)</title><rect x="20.5729%" y="149" width="8.6370%" height="15" fill="rgb(207,117,47)"/><text x="20.8229%" y="159.50">typeck_item_..</text></g><g><title>typeck (2,085,013 samples, 8.60%)</title><rect x="20.6080%" y="133" width="8.6019%" height="15" fill="rgb(249,43,39)"/><text x="20.8580%" y="143.50">typeck</text></g><g><title>impl_trait_ref (65,261 samples, 0.27%)</title><rect x="29.4751%" y="85" width="0.2692%" height="15" fill="rgb(209,38,44)"/><text x="29.7251%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (61,991 samples, 0.26%)</title><rect x="29.4885%" y="69" width="0.2558%" height="15" fill="rgb(236,212,23)"/><text x="29.7385%" y="79.50"></text></g><g><title>item_types_checking (140,551 samples, 0.58%)</title><rect x="29.2099%" y="165" width="0.5799%" height="15" fill="rgb(242,79,21)"/><text x="29.4599%" y="175.50"></text></g><g><title>check_mod_item_types (137,711 samples, 0.57%)</title><rect x="29.2216%" y="149" width="0.5681%" height="15" fill="rgb(211,96,35)"/><text x="29.4716%" y="159.50"></text></g><g><title>adt_destructor (122,341 samples, 0.50%)</title><rect x="29.2850%" y="133" width="0.5047%" height="15" fill="rgb(253,215,40)"/><text x="29.5350%" y="143.50"></text></g><g><title>coherent_trait (116,751 samples, 0.48%)</title><rect x="29.3081%" y="117" width="0.4817%" height="15" fill="rgb(211,81,21)"/><text x="29.5581%" y="127.50"></text></g><g><title>specialization_graph_of (111,661 samples, 0.46%)</title><rect x="29.3291%" y="101" width="0.4607%" height="15" fill="rgb(208,190,38)"/><text x="29.5791%" y="111.50"></text></g><g><title>fn_sig (71,750 samples, 0.30%)</title><rect x="30.2567%" y="133" width="0.2960%" height="15" fill="rgb(235,213,38)"/><text x="30.5067%" y="143.50"></text></g><g><title>is_late_bound_map (38,620 samples, 0.16%)</title><rect x="30.7629%" y="117" width="0.1593%" height="15" fill="rgb(237,122,38)"/><text x="31.0129%" y="127.50"></text></g><g><title>resolve_lifetimes (35,650 samples, 0.15%)</title><rect x="30.7751%" y="101" width="0.1471%" height="15" fill="rgb(244,218,35)"/><text x="31.0251%" y="111.50"></text></g><g><title>generics_of (103,751 samples, 0.43%)</title><rect x="30.5527%" y="133" width="0.4280%" height="15" fill="rgb(240,68,47)"/><text x="30.8027%" y="143.50"></text></g><g><title>late_bound_vars_map (68,311 samples, 0.28%)</title><rect x="31.5571%" y="101" width="0.2818%" height="15" fill="rgb(210,16,53)"/><text x="31.8071%" y="111.50"></text></g><g><title>resolve_lifetimes (64,101 samples, 0.26%)</title><rect x="31.5745%" y="85" width="0.2645%" height="15" fill="rgb(235,124,12)"/><text x="31.8245%" y="95.50"></text></g><g><title>item_bounds (231,223 samples, 0.95%)</title><rect x="30.9807%" y="133" width="0.9539%" height="15" fill="rgb(224,169,11)"/><text x="31.2307%" y="143.50"></text></g><g><title>explicit_item_bounds (154,292 samples, 0.64%)</title><rect x="31.2981%" y="117" width="0.6365%" height="15" fill="rgb(250,166,2)"/><text x="31.5481%" y="127.50"></text></g><g><title>explicit_predicates_of (52,390 samples, 0.22%)</title><rect x="32.0829%" y="101" width="0.2161%" height="15" fill="rgb(242,216,29)"/><text x="32.3329%" y="111.50"></text></g><g><title>predicates_of (275,632 samples, 1.14%)</title><rect x="31.9346%" y="133" width="1.1371%" height="15" fill="rgb(230,116,27)"/><text x="32.1846%" y="143.50"></text></g><g><title>predicates_defined_on (262,012 samples, 1.08%)</title><rect x="31.9908%" y="117" width="1.0810%" height="15" fill="rgb(228,99,48)"/><text x="32.2408%" y="127.50"></text></g><g><title>inferred_outlives_of (187,302 samples, 0.77%)</title><rect x="32.2991%" y="101" width="0.7727%" height="15" fill="rgb(253,11,6)"/><text x="32.5491%" y="111.50"></text></g><g><title>inferred_outlives_crate (170,712 samples, 0.70%)</title><rect x="32.3675%" y="85" width="0.7043%" height="15" fill="rgb(247,143,39)"/><text x="32.6175%" y="95.50"></text></g><g><title>type_of (101,932 samples, 0.42%)</title><rect x="32.6513%" y="69" width="0.4205%" height="15" fill="rgb(236,97,10)"/><text x="32.9013%" y="79.50"></text></g><g><title>type_of (36,560 samples, 0.15%)</title><rect x="32.9210%" y="53" width="0.1508%" height="15" fill="rgb(233,208,19)"/><text x="33.1710%" y="63.50"></text></g><g><title>metadata_decode_entry_type_of (34,770 samples, 0.14%)</title><rect x="32.9283%" y="37" width="0.1434%" height="15" fill="rgb(216,164,2)"/><text x="33.1783%" y="47.50"></text></g><g><title>late_bound_vars_map (31,420 samples, 0.13%)</title><rect x="33.2917%" y="101" width="0.1296%" height="15" fill="rgb(220,129,5)"/><text x="33.5417%" y="111.50"></text></g><g><title>resolve_lifetimes_trait_definition (26,000 samples, 0.11%)</title><rect x="33.3141%" y="85" width="0.1073%" height="15" fill="rgb(242,17,10)"/><text x="33.5641%" y="95.50"></text></g><g><title>super_predicates_of (95,711 samples, 0.39%)</title><rect x="33.0718%" y="133" width="0.3949%" height="15" fill="rgb(242,107,0)"/><text x="33.3218%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (84,390 samples, 0.35%)</title><rect x="33.1185%" y="117" width="0.3482%" height="15" fill="rgb(251,28,31)"/><text x="33.3685%" y="127.50"></text></g><g><title>type_collecting (973,291 samples, 4.02%)</title><rect x="29.7939%" y="165" width="4.0154%" height="15" fill="rgb(233,223,10)"/><text x="30.0439%" y="175.50">type..</text></g><g><title>collect_mod_item_types (961,401 samples, 3.97%)</title><rect x="29.8430%" y="149" width="3.9664%" height="15" fill="rgb(215,21,27)"/><text x="30.0930%" y="159.50">coll..</text></g><g><title>type_of (81,011 samples, 0.33%)</title><rect x="33.4751%" y="133" width="0.3342%" height="15" fill="rgb(232,23,21)"/><text x="33.7251%" y="143.50"></text></g><g><title>adt_def (51,711 samples, 0.21%)</title><rect x="33.5960%" y="117" width="0.2133%" height="15" fill="rgb(244,5,23)"/><text x="33.8460%" y="127.50"></text></g><g><title>param_env (169,981 samples, 0.70%)</title><rect x="35.1362%" y="133" width="0.7013%" height="15" fill="rgb(226,81,46)"/><text x="35.3862%" y="143.50"></text></g><g><title>check_item_well_formed (498,007 samples, 2.05%)</title><rect x="34.0016%" y="149" width="2.0546%" height="15" fill="rgb(247,70,30)"/><text x="34.2516%" y="159.50">c..</text></g><g><title>variances_of (41,310 samples, 0.17%)</title><rect x="35.8858%" y="133" width="0.1704%" height="15" fill="rgb(212,68,19)"/><text x="36.1358%" y="143.50"></text></g><g><title>crate_variances (37,540 samples, 0.15%)</title><rect x="35.9013%" y="117" width="0.1549%" height="15" fill="rgb(240,187,13)"/><text x="36.1513%" y="127.50"></text></g><g><title>evaluate_obligation (150,621 samples, 0.62%)</title><rect x="38.5273%" y="133" width="0.6214%" height="15" fill="rgb(223,113,26)"/><text x="38.7773%" y="143.50"></text></g><g><title>implied_outlives_bounds (125,221 samples, 0.52%)</title><rect x="39.1487%" y="133" width="0.5166%" height="15" fill="rgb(206,192,2)"/><text x="39.3987%" y="143.50"></text></g><g><title>param_env (99,212 samples, 0.41%)</title><rect x="39.6653%" y="133" width="0.4093%" height="15" fill="rgb(241,108,4)"/><text x="39.9153%" y="143.50"></text></g><g><title>region_scope_tree (46,910 samples, 0.19%)</title><rect x="40.0746%" y="133" width="0.1935%" height="15" fill="rgb(247,173,49)"/><text x="40.3246%" y="143.50"></text></g><g><title>analysis (9,093,811 samples, 37.52%)</title><rect x="2.7533%" y="197" width="37.5175%" height="15" fill="rgb(224,114,35)"/><text x="3.0033%" y="207.50">analysis</text></g><g><title>type_check_crate (4,824,604 samples, 19.90%)</title><rect x="20.3664%" y="181" width="19.9044%" height="15" fill="rgb(245,159,27)"/><text x="20.6164%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,565,568 samples, 6.46%)</title><rect x="33.8119%" y="165" width="6.4589%" height="15" fill="rgb(245,172,44)"/><text x="34.0619%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (1,021,570 samples, 4.21%)</title><rect x="36.0562%" y="149" width="4.2146%" height="15" fill="rgb(236,23,11)"/><text x="36.3062%" y="159.50">check..</text></g><g><title>codegen_crate (460,176 samples, 1.90%)</title><rect x="40.3213%" y="197" width="1.8985%" height="15" fill="rgb(205,117,38)"/><text x="40.5713%" y="207.50">c..</text></g><g><title>AST_validation (109,561 samples, 0.45%)</title><rect x="43.1423%" y="181" width="0.4520%" height="15" fill="rgb(237,72,25)"/><text x="43.3923%" y="191.50"></text></g><g><title>complete_gated_feature_checking (26,680 samples, 0.11%)</title><rect x="43.5943%" y="181" width="0.1101%" height="15" fill="rgb(244,70,9)"/><text x="43.8443%" y="191.50"></text></g><g><title>crate_injection (125,771 samples, 0.52%)</title><rect x="43.7044%" y="181" width="0.5189%" height="15" fill="rgb(217,125,39)"/><text x="43.9544%" y="191.50"></text></g><g><title>metadata_load_macro (128,272 samples, 0.53%)</title><rect x="74.6604%" y="149" width="0.5292%" height="15" fill="rgb(235,36,10)"/><text x="74.9104%" y="159.50"></text></g><g><title>macro_expand_crate (7,715,296 samples, 31.83%)</title><rect x="44.2232%" y="181" width="31.8303%" height="15" fill="rgb(251,123,47)"/><text x="44.4732%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (7,688,416 samples, 31.72%)</title><rect x="44.3341%" y="165" width="31.7194%" height="15" fill="rgb(221,13,13)"/><text x="44.5841%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (209,403 samples, 0.86%)</title><rect x="75.1896%" y="149" width="0.8639%" height="15" fill="rgb(238,131,9)"/><text x="75.4396%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (123,191 samples, 0.51%)</title><rect x="76.0738%" y="181" width="0.5082%" height="15" fill="rgb(211,50,8)"/><text x="76.3238%" y="191.50"></text></g><g><title>finalize_imports (261,133 samples, 1.08%)</title><rect x="76.6207%" y="165" width="1.0773%" height="15" fill="rgb(245,182,24)"/><text x="76.8707%" y="175.50"></text></g><g><title>late_resolve_crate (828,489 samples, 3.42%)</title><rect x="77.7941%" y="165" width="3.4180%" height="15" fill="rgb(242,14,37)"/><text x="78.0441%" y="175.50">lat..</text></g><g><title>resolve_check_unused (27,790 samples, 0.11%)</title><rect x="81.2512%" y="165" width="0.1147%" height="15" fill="rgb(246,228,12)"/><text x="81.5012%" y="175.50"></text></g><g><title>configure_and_expand (9,505,716 samples, 39.22%)</title><rect x="42.2198%" y="197" width="39.2168%" height="15" fill="rgb(213,55,15)"/><text x="42.4698%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,176,714 samples, 4.85%)</title><rect x="76.5820%" y="181" width="4.8547%" height="15" fill="rgb(209,9,3)"/><text x="76.8320%" y="191.50">resolv..</text></g><g><title>drop_ast (46,140 samples, 0.19%)</title><rect x="81.4367%" y="197" width="0.1904%" height="15" fill="rgb(230,59,30)"/><text x="81.6867%" y="207.50"></text></g><g><title>early_lint_checks (121,382 samples, 0.50%)</title><rect x="81.6834%" y="197" width="0.5008%" height="15" fill="rgb(209,121,21)"/><text x="81.9334%" y="207.50"></text></g><g><title>free_global_ctxt (1,264,605 samples, 5.22%)</title><rect x="82.1842%" y="197" width="5.2173%" height="15" fill="rgb(220,109,13)"/><text x="82.4342%" y="207.50">free_g..</text></g><g><title>crate_hash (60,861 samples, 0.25%)</title><rect x="88.2562%" y="181" width="0.2511%" height="15" fill="rgb(232,18,1)"/><text x="88.5062%" y="191.50"></text></g><g><title>mir_for_ctfe (32,851 samples, 0.14%)</title><rect x="88.5702%" y="181" width="0.1355%" height="15" fill="rgb(215,41,42)"/><text x="88.8202%" y="191.50"></text></g><g><title>generate_crate_metadata (350,504 samples, 1.45%)</title><rect x="87.4015%" y="197" width="1.4460%" height="15" fill="rgb(224,123,36)"/><text x="87.6515%" y="207.50"></text></g><g><title>hir_lowering (669,537 samples, 2.76%)</title><rect x="88.8475%" y="197" width="2.7622%" height="15" fill="rgb(240,125,3)"/><text x="89.0975%" y="207.50">hi..</text></g><g><title>link (45,560 samples, 0.19%)</title><rect x="91.6097%" y="197" width="0.1880%" height="15" fill="rgb(205,98,50)"/><text x="91.8597%" y="207.50"></text></g><g><title>parse_crate (899,250 samples, 3.71%)</title><rect x="91.7977%" y="197" width="3.7100%" height="15" fill="rgb(205,185,37)"/><text x="92.0477%" y="207.50">pars..</text></g><g><title>prepare_outputs (313,844 samples, 1.29%)</title><rect x="95.5528%" y="197" width="1.2948%" height="15" fill="rgb(238,207,15)"/><text x="95.8028%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (324,553 samples, 1.34%)</title><rect x="96.8475%" y="197" width="1.3390%" height="15" fill="rgb(213,199,42)"/><text x="97.0975%" y="207.50"></text></g><g><title>setup_global_ctxt (146,562 samples, 0.60%)</title><rect x="98.2338%" y="197" width="0.6047%" height="15" fill="rgb(235,201,11)"/><text x="98.4838%" y="207.50"></text></g><g><title>all (24,238,859 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (24,238,859 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (281,533 samples, 1.16%)</title><rect x="98.8385%" y="197" width="1.1615%" height="15" fill="rgb(243,32,47)"/><text x="99.0885%" y="207.50"></text></g></svg></svg>