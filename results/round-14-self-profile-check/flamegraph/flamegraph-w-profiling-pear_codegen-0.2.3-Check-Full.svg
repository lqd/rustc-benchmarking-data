<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (456,319 samples, 0.17%)</title><rect x="11.9735%" y="133" width="0.1729%" height="15" fill="rgb(227,0,7)"/><text x="12.2235%" y="143.50"></text></g><g><title>item_attrs (403,812 samples, 0.15%)</title><rect x="12.5360%" y="101" width="0.1530%" height="15" fill="rgb(217,0,24)"/><text x="12.7860%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (387,012 samples, 0.15%)</title><rect x="12.5423%" y="85" width="0.1466%" height="15" fill="rgb(221,193,54)"/><text x="12.7923%" y="95.50"></text></g><g><title>codegen_fn_attrs (603,295 samples, 0.23%)</title><rect x="12.4748%" y="117" width="0.2286%" height="15" fill="rgb(248,212,6)"/><text x="12.7248%" y="127.50"></text></g><g><title>adt_drop_tys (601,534 samples, 0.23%)</title><rect x="15.3738%" y="85" width="0.2279%" height="15" fill="rgb(208,68,35)"/><text x="15.6238%" y="95.50"></text></g><g><title>needs_drop_raw (2,683,843 samples, 1.02%)</title><rect x="15.2743%" y="101" width="1.0168%" height="15" fill="rgb(232,128,0)"/><text x="15.5243%" y="111.50"></text></g><g><title>is_copy_raw (1,819,677 samples, 0.69%)</title><rect x="15.6017%" y="85" width="0.6894%" height="15" fill="rgb(207,160,47)"/><text x="15.8517%" y="95.50"></text></g><g><title>evaluate_obligation (1,535,493 samples, 0.58%)</title><rect x="15.7094%" y="69" width="0.5817%" height="15" fill="rgb(228,23,34)"/><text x="15.9594%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (381,636 samples, 0.14%)</title><rect x="16.3912%" y="85" width="0.1446%" height="15" fill="rgb(218,30,26)"/><text x="16.6412%" y="95.50"></text></g><g><title>resolve_instance (929,641 samples, 0.35%)</title><rect x="16.2916%" y="101" width="0.3522%" height="15" fill="rgb(220,122,19)"/><text x="16.5416%" y="111.50"></text></g><g><title>thir_body (2,551,813 samples, 0.97%)</title><rect x="16.6609%" y="101" width="0.9667%" height="15" fill="rgb(250,228,42)"/><text x="16.9109%" y="111.50"></text></g><g><title>mir_const (16,336,300 samples, 6.19%)</title><rect x="11.4485%" y="149" width="6.1890%" height="15" fill="rgb(240,193,28)"/><text x="11.6985%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (14,493,986 samples, 5.49%)</title><rect x="12.1464%" y="133" width="5.4910%" height="15" fill="rgb(216,20,37)"/><text x="12.3964%" y="143.50">unsafet..</text></g><g><title>mir_built (13,023,890 samples, 4.93%)</title><rect x="12.7034%" y="117" width="4.9341%" height="15" fill="rgb(206,188,39)"/><text x="12.9534%" y="127.50">mir_bu..</text></g><g><title>mir_const_qualif (523,465 samples, 0.20%)</title><rect x="17.6374%" y="149" width="0.1983%" height="15" fill="rgb(217,207,13)"/><text x="17.8874%" y="159.50"></text></g><g><title>mir_promoted (18,296,028 samples, 6.93%)</title><rect x="10.9045%" y="165" width="6.9314%" height="15" fill="rgb(231,73,38)"/><text x="11.1545%" y="175.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (494,726 samples, 0.19%)</title><rect x="17.8359%" y="165" width="0.1874%" height="15" fill="rgb(225,20,46)"/><text x="18.0859%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,137,635 samples, 0.43%)</title><rect x="18.0233%" y="165" width="0.4310%" height="15" fill="rgb(210,31,41)"/><text x="18.2733%" y="175.50"></text></g><g><title>normalize_projection_ty (791,016 samples, 0.30%)</title><rect x="18.1546%" y="149" width="0.2997%" height="15" fill="rgb(221,200,47)"/><text x="18.4046%" y="159.50"></text></g><g><title>type_op_normalize_predicate (627,259 samples, 0.24%)</title><rect x="18.4543%" y="165" width="0.2376%" height="15" fill="rgb(226,26,5)"/><text x="18.7043%" y="175.50"></text></g><g><title>normalize_projection_ty (445,285 samples, 0.17%)</title><rect x="18.5233%" y="149" width="0.1687%" height="15" fill="rgb(249,33,26)"/><text x="18.7733%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,834,738 samples, 1.83%)</title><rect x="18.6920%" y="165" width="1.8316%" height="15" fill="rgb(235,183,28)"/><text x="18.9420%" y="175.50">t..</text></g><g><title>evaluate_obligation (557,484 samples, 0.21%)</title><rect x="20.3124%" y="149" width="0.2112%" height="15" fill="rgb(221,5,38)"/><text x="20.5624%" y="159.50"></text></g><g><title>MIR_borrow_checking (52,760,281 samples, 19.99%)</title><rect x="0.5394%" y="197" width="19.9881%" height="15" fill="rgb(247,18,42)"/><text x="0.7894%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (52,634,661 samples, 19.94%)</title><rect x="0.5870%" y="181" width="19.9405%" height="15" fill="rgb(241,131,45)"/><text x="0.8370%" y="191.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (366,024 samples, 0.14%)</title><rect x="20.8231%" y="165" width="0.1387%" height="15" fill="rgb(249,31,29)"/><text x="21.0731%" y="175.50"></text></g><g><title>check_mod_attrs (750,188 samples, 0.28%)</title><rect x="20.6776%" y="181" width="0.2842%" height="15" fill="rgb(225,111,53)"/><text x="20.9276%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (436,595 samples, 0.17%)</title><rect x="21.0552%" y="181" width="0.1654%" height="15" fill="rgb(238,160,17)"/><text x="21.3052%" y="191.50"></text></g><g><title>misc_checking_1 (1,500,316 samples, 0.57%)</title><rect x="20.6702%" y="197" width="0.5684%" height="15" fill="rgb(214,148,48)"/><text x="20.9202%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,200,193 samples, 0.45%)</title><rect x="21.2392%" y="181" width="0.4547%" height="15" fill="rgb(232,36,49)"/><text x="21.4892%" y="191.50"></text></g><g><title>check_mod_liveness (1,012,692 samples, 0.38%)</title><rect x="21.3103%" y="165" width="0.3837%" height="15" fill="rgb(209,103,24)"/><text x="21.5603%" y="175.50"></text></g><g><title>type_uninhabited_from (345,122 samples, 0.13%)</title><rect x="21.5632%" y="149" width="0.1307%" height="15" fill="rgb(229,88,8)"/><text x="21.8132%" y="159.50"></text></g><g><title>type_uninhabited_from (287,942 samples, 0.11%)</title><rect x="21.5848%" y="133" width="0.1091%" height="15" fill="rgb(213,181,19)"/><text x="21.8348%" y="143.50"></text></g><g><title>misc_checking_2 (2,522,058 samples, 0.96%)</title><rect x="21.2386%" y="197" width="0.9555%" height="15" fill="rgb(254,191,54)"/><text x="21.4886%" y="207.50"></text></g><g><title>match_checking (1,320,215 samples, 0.50%)</title><rect x="21.6939%" y="181" width="0.5002%" height="15" fill="rgb(241,83,37)"/><text x="21.9439%" y="191.50"></text></g><g><title>check_match (1,287,824 samples, 0.49%)</title><rect x="21.7062%" y="165" width="0.4879%" height="15" fill="rgb(233,36,39)"/><text x="21.9562%" y="175.50"></text></g><g><title>death_checking (494,156 samples, 0.19%)</title><rect x="22.2940%" y="181" width="0.1872%" height="15" fill="rgb(226,3,54)"/><text x="22.5440%" y="191.50"></text></g><g><title>eval_to_const_value_raw (432,485 samples, 0.16%)</title><rect x="22.7589%" y="101" width="0.1638%" height="15" fill="rgb(245,192,40)"/><text x="23.0089%" y="111.50"></text></g><g><title>eval_to_const_value_raw (431,835 samples, 0.16%)</title><rect x="22.7591%" y="85" width="0.1636%" height="15" fill="rgb(238,167,29)"/><text x="23.0091%" y="95.50"></text></g><g><title>eval_to_allocation_raw (429,745 samples, 0.16%)</title><rect x="22.7599%" y="69" width="0.1628%" height="15" fill="rgb(232,182,51)"/><text x="23.0099%" y="79.50"></text></g><g><title>eval_to_allocation_raw (477,986 samples, 0.18%)</title><rect x="22.7422%" y="149" width="0.1811%" height="15" fill="rgb(231,60,39)"/><text x="22.9922%" y="159.50"></text></g><g><title>eval_to_allocation_raw (477,465 samples, 0.18%)</title><rect x="22.7424%" y="133" width="0.1809%" height="15" fill="rgb(208,69,12)"/><text x="22.9924%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (441,745 samples, 0.17%)</title><rect x="22.7559%" y="117" width="0.1674%" height="15" fill="rgb(235,93,37)"/><text x="23.0059%" y="127.50"></text></g><g><title>crate_lints (1,839,891 samples, 0.70%)</title><rect x="22.4819%" y="165" width="0.6970%" height="15" fill="rgb(213,116,39)"/><text x="22.7319%" y="175.50"></text></g><g><title>lint_checking (3,046,144 samples, 1.15%)</title><rect x="22.4812%" y="181" width="1.1540%" height="15" fill="rgb(222,207,29)"/><text x="22.7312%" y="191.50"></text></g><g><title>module_lints (1,204,403 samples, 0.46%)</title><rect x="23.1790%" y="165" width="0.4563%" height="15" fill="rgb(206,96,30)"/><text x="23.4290%" y="175.50"></text></g><g><title>lint_mod (1,200,703 samples, 0.45%)</title><rect x="23.1804%" y="149" width="0.4549%" height="15" fill="rgb(218,138,4)"/><text x="23.4304%" y="159.50"></text></g><g><title>privacy_checking_modules (1,677,749 samples, 0.64%)</title><rect x="23.7038%" y="181" width="0.6356%" height="15" fill="rgb(250,191,14)"/><text x="23.9538%" y="191.50"></text></g><g><title>check_mod_privacy (1,675,219 samples, 0.63%)</title><rect x="23.7047%" y="165" width="0.6347%" height="15" fill="rgb(239,60,40)"/><text x="23.9547%" y="175.50"></text></g><g><title>misc_checking_3 (5,682,134 samples, 2.15%)</title><rect x="22.1941%" y="197" width="2.1527%" height="15" fill="rgb(206,27,48)"/><text x="22.4441%" y="207.50">m..</text></g><g><title>adt_destructor (328,234 samples, 0.12%)</title><rect x="24.3963%" y="149" width="0.1244%" height="15" fill="rgb(225,35,8)"/><text x="24.6463%" y="159.50"></text></g><g><title>coherent_trait (325,464 samples, 0.12%)</title><rect x="24.3974%" y="133" width="0.1233%" height="15" fill="rgb(250,213,24)"/><text x="24.6474%" y="143.50"></text></g><g><title>specialization_graph_of (324,344 samples, 0.12%)</title><rect x="24.3978%" y="117" width="0.1229%" height="15" fill="rgb(247,123,22)"/><text x="24.6478%" y="127.50"></text></g><g><title>impl_parent (2,364,970 samples, 0.90%)</title><rect x="25.8300%" y="133" width="0.8960%" height="15" fill="rgb(231,138,38)"/><text x="26.0800%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,261,068 samples, 0.48%)</title><rect x="26.2482%" y="117" width="0.4778%" height="15" fill="rgb(231,145,46)"/><text x="26.4982%" y="127.50"></text></g><g><title>impl_trait_ref (4,811,413 samples, 1.82%)</title><rect x="26.7259%" y="133" width="1.8228%" height="15" fill="rgb(251,118,11)"/><text x="26.9759%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,941,609 samples, 1.49%)</title><rect x="27.0555%" y="117" width="1.4933%" height="15" fill="rgb(217,147,25)"/><text x="27.3055%" y="127.50"></text></g><g><title>coherent_trait (11,687,321 samples, 4.43%)</title><rect x="24.3826%" y="165" width="4.4277%" height="15" fill="rgb(247,81,37)"/><text x="24.6326%" y="175.50">coher..</text></g><g><title>specialization_graph_of (11,242,326 samples, 4.26%)</title><rect x="24.5512%" y="149" width="4.2591%" height="15" fill="rgb(209,12,38)"/><text x="24.8012%" y="159.50">speci..</text></g><g><title>trait_impls_of (688,630 samples, 0.26%)</title><rect x="28.5494%" y="133" width="0.2609%" height="15" fill="rgb(227,1,9)"/><text x="28.7994%" y="143.50"></text></g><g><title>coherence_checking (11,757,452 samples, 4.45%)</title><rect x="24.3758%" y="181" width="4.4543%" height="15" fill="rgb(248,47,43)"/><text x="24.6258%" y="191.50">coher..</text></g><g><title>associated_items (276,314 samples, 0.10%)</title><rect x="36.2008%" y="133" width="0.1047%" height="15" fill="rgb(221,10,30)"/><text x="36.4508%" y="143.50"></text></g><g><title>adt_def (410,753 samples, 0.16%)</title><rect x="37.0193%" y="101" width="0.1556%" height="15" fill="rgb(210,229,1)"/><text x="37.2693%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (400,553 samples, 0.15%)</title><rect x="37.0232%" y="85" width="0.1517%" height="15" fill="rgb(222,148,37)"/><text x="37.2732%" y="95.50"></text></g><g><title>item_attrs (275,942 samples, 0.10%)</title><rect x="37.0704%" y="69" width="0.1045%" height="15" fill="rgb(234,67,33)"/><text x="37.3204%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (265,012 samples, 0.10%)</title><rect x="37.0745%" y="53" width="0.1004%" height="15" fill="rgb(247,98,35)"/><text x="37.3245%" y="63.50"></text></g><g><title>adt_def (276,882 samples, 0.10%)</title><rect x="37.2976%" y="85" width="0.1049%" height="15" fill="rgb(247,138,52)"/><text x="37.5476%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (269,692 samples, 0.10%)</title><rect x="37.3003%" y="69" width="0.1022%" height="15" fill="rgb(213,79,30)"/><text x="37.5503%" y="79.50"></text></g><g><title>adt_def (288,212 samples, 0.11%)</title><rect x="37.6463%" y="53" width="0.1092%" height="15" fill="rgb(246,177,23)"/><text x="37.8963%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (275,692 samples, 0.10%)</title><rect x="37.6510%" y="37" width="0.1044%" height="15" fill="rgb(230,62,27)"/><text x="37.9010%" y="47.50"></text></g><g><title>adt_dtorck_constraint (265,851 samples, 0.10%)</title><rect x="37.7685%" y="53" width="0.1007%" height="15" fill="rgb(216,154,8)"/><text x="38.0185%" y="63.50"></text></g><g><title>adt_dtorck_constraint (766,219 samples, 0.29%)</title><rect x="37.5978%" y="69" width="0.2903%" height="15" fill="rgb(244,35,45)"/><text x="37.8478%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,337,854 samples, 0.51%)</title><rect x="37.4178%" y="85" width="0.5068%" height="15" fill="rgb(251,115,12)"/><text x="37.6678%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,000,460 samples, 0.76%)</title><rect x="37.1991%" y="101" width="0.7579%" height="15" fill="rgb(240,54,50)"/><text x="37.4491%" y="111.50"></text></g><g><title>dropck_outlives (4,350,727 samples, 1.65%)</title><rect x="36.3443%" y="133" width="1.6483%" height="15" fill="rgb(233,84,52)"/><text x="36.5943%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,820,050 samples, 1.07%)</title><rect x="36.9242%" y="117" width="1.0684%" height="15" fill="rgb(207,117,47)"/><text x="37.1742%" y="127.50"></text></g><g><title>trait_impls_of (294,754 samples, 0.11%)</title><rect x="38.7335%" y="117" width="0.1117%" height="15" fill="rgb(249,43,39)"/><text x="38.9835%" y="127.50"></text></g><g><title>evaluate_obligation (2,251,205 samples, 0.85%)</title><rect x="37.9926%" y="133" width="0.8529%" height="15" fill="rgb(209,38,44)"/><text x="38.2426%" y="143.50"></text></g><g><title>predicates_of (477,093 samples, 0.18%)</title><rect x="39.2649%" y="133" width="0.1807%" height="15" fill="rgb(236,212,23)"/><text x="39.5149%" y="143.50"></text></g><g><title>predicates_defined_on (332,281 samples, 0.13%)</title><rect x="39.3198%" y="117" width="0.1259%" height="15" fill="rgb(242,79,21)"/><text x="39.5698%" y="127.50"></text></g><g><title>associated_item (379,286 samples, 0.14%)</title><rect x="52.1063%" y="101" width="0.1437%" height="15" fill="rgb(211,96,35)"/><text x="52.3563%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (301,226 samples, 0.11%)</title><rect x="52.1358%" y="85" width="0.1141%" height="15" fill="rgb(253,215,40)"/><text x="52.3858%" y="95.50"></text></g><g><title>associated_items (572,650 samples, 0.22%)</title><rect x="52.0457%" y="117" width="0.2169%" height="15" fill="rgb(211,81,21)"/><text x="52.2957%" y="127.50"></text></g><g><title>adt_dtorck_constraint (288,112 samples, 0.11%)</title><rect x="53.5063%" y="85" width="0.1092%" height="15" fill="rgb(208,190,38)"/><text x="53.7563%" y="95.50"></text></g><g><title>dropck_outlives (3,492,880 samples, 1.32%)</title><rect x="52.3010%" y="117" width="1.3233%" height="15" fill="rgb(235,213,38)"/><text x="52.5510%" y="127.50"></text></g><g><title>adt_dtorck_constraint (399,055 samples, 0.15%)</title><rect x="53.4731%" y="101" width="0.1512%" height="15" fill="rgb(237,122,38)"/><text x="53.7231%" y="111.50"></text></g><g><title>trait_impls_of (539,955 samples, 0.20%)</title><rect x="54.6769%" y="101" width="0.2046%" height="15" fill="rgb(244,218,35)"/><text x="54.9269%" y="111.50"></text></g><g><title>evaluate_obligation (3,319,083 samples, 1.26%)</title><rect x="53.6243%" y="117" width="1.2574%" height="15" fill="rgb(240,68,47)"/><text x="53.8743%" y="127.50"></text></g><g><title>is_copy_raw (634,011 samples, 0.24%)</title><rect x="55.0649%" y="117" width="0.2402%" height="15" fill="rgb(210,16,53)"/><text x="55.3149%" y="127.50"></text></g><g><title>evaluate_obligation (503,990 samples, 0.19%)</title><rect x="55.1142%" y="101" width="0.1909%" height="15" fill="rgb(235,124,12)"/><text x="55.3642%" y="111.50"></text></g><g><title>evaluate_obligation (273,313 samples, 0.10%)</title><rect x="55.4574%" y="101" width="0.1035%" height="15" fill="rgb(224,169,11)"/><text x="55.7074%" y="111.50"></text></g><g><title>method_autoderef_steps (533,336 samples, 0.20%)</title><rect x="55.3619%" y="117" width="0.2021%" height="15" fill="rgb(250,166,2)"/><text x="55.6119%" y="127.50"></text></g><g><title>predicates_of (402,513 samples, 0.15%)</title><rect x="55.5716%" y="117" width="0.1525%" height="15" fill="rgb(242,216,29)"/><text x="55.8216%" y="127.50"></text></g><g><title>type_of (299,293 samples, 0.11%)</title><rect x="55.7289%" y="117" width="0.1134%" height="15" fill="rgb(230,116,27)"/><text x="55.9789%" y="127.50"></text></g><g><title>typeck (43,271,144 samples, 16.39%)</title><rect x="39.4909%" y="133" width="16.3931%" height="15" fill="rgb(228,99,48)"/><text x="39.7409%" y="143.50">typeck</text></g><g><title>item_bodies_checking (71,445,739 samples, 27.07%)</title><rect x="28.8397%" y="181" width="27.0670%" height="15" fill="rgb(253,11,6)"/><text x="29.0897%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (71,442,559 samples, 27.07%)</title><rect x="28.8409%" y="165" width="27.0658%" height="15" fill="rgb(247,143,39)"/><text x="29.0909%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (71,377,169 samples, 27.04%)</title><rect x="28.8656%" y="149" width="27.0410%" height="15" fill="rgb(236,97,10)"/><text x="29.1156%" y="159.50">typeck</text></g><g><title>item_types_checking (2,879,533 samples, 1.09%)</title><rect x="55.9066%" y="181" width="1.0909%" height="15" fill="rgb(233,208,19)"/><text x="56.1566%" y="191.50"></text></g><g><title>check_mod_item_types (2,875,823 samples, 1.09%)</title><rect x="55.9081%" y="165" width="1.0895%" height="15" fill="rgb(216,164,2)"/><text x="56.1581%" y="175.50"></text></g><g><title>typeck (633,197 samples, 0.24%)</title><rect x="56.7577%" y="149" width="0.2399%" height="15" fill="rgb(220,129,5)"/><text x="57.0077%" y="159.50"></text></g><g><title>fn_sig (325,842 samples, 0.12%)</title><rect x="57.1060%" y="149" width="0.1234%" height="15" fill="rgb(242,17,10)"/><text x="57.3560%" y="159.50"></text></g><g><title>is_late_bound_map (484,316 samples, 0.18%)</title><rect x="57.2675%" y="133" width="0.1835%" height="15" fill="rgb(242,107,0)"/><text x="57.5175%" y="143.50"></text></g><g><title>resolve_lifetimes (481,326 samples, 0.18%)</title><rect x="57.2686%" y="117" width="0.1823%" height="15" fill="rgb(251,28,31)"/><text x="57.5186%" y="127.50"></text></g><g><title>lint_levels (320,183 samples, 0.12%)</title><rect x="57.3297%" y="101" width="0.1213%" height="15" fill="rgb(233,223,10)"/><text x="57.5797%" y="111.50"></text></g><g><title>named_region_map (331,184 samples, 0.13%)</title><rect x="57.4510%" y="133" width="0.1255%" height="15" fill="rgb(215,21,27)"/><text x="57.7010%" y="143.50"></text></g><g><title>resolve_lifetimes (313,534 samples, 0.12%)</title><rect x="57.4577%" y="117" width="0.1188%" height="15" fill="rgb(232,23,21)"/><text x="57.7077%" y="127.50"></text></g><g><title>generics_of (932,232 samples, 0.35%)</title><rect x="57.2294%" y="149" width="0.3532%" height="15" fill="rgb(244,5,23)"/><text x="57.4794%" y="159.50"></text></g><g><title>predicates_of (635,547 samples, 0.24%)</title><rect x="57.5949%" y="149" width="0.2408%" height="15" fill="rgb(226,81,46)"/><text x="57.8449%" y="159.50"></text></g><g><title>predicates_defined_on (588,107 samples, 0.22%)</title><rect x="57.6129%" y="133" width="0.2228%" height="15" fill="rgb(247,70,30)"/><text x="57.8629%" y="143.50"></text></g><g><title>type_collecting (2,342,677 samples, 0.89%)</title><rect x="56.9988%" y="181" width="0.8875%" height="15" fill="rgb(212,68,19)"/><text x="57.2488%" y="191.50"></text></g><g><title>collect_mod_item_types (2,333,756 samples, 0.88%)</title><rect x="57.0022%" y="165" width="0.8841%" height="15" fill="rgb(240,187,13)"/><text x="57.2522%" y="175.50"></text></g><g><title>region_scope_tree (424,776 samples, 0.16%)</title><rect x="58.5054%" y="149" width="0.1609%" height="15" fill="rgb(223,113,26)"/><text x="58.7554%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,921,594 samples, 0.73%)</title><rect x="57.9615%" y="165" width="0.7280%" height="15" fill="rgb(206,192,2)"/><text x="58.2115%" y="175.50"></text></g><g><title>adt_def (327,503 samples, 0.12%)</title><rect x="59.2482%" y="85" width="0.1241%" height="15" fill="rgb(241,108,4)"/><text x="59.4982%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (316,563 samples, 0.12%)</title><rect x="59.2524%" y="69" width="0.1199%" height="15" fill="rgb(247,173,49)"/><text x="59.5024%" y="79.50"></text></g><g><title>adt_sized_constraint (607,626 samples, 0.23%)</title><rect x="59.2315%" y="101" width="0.2302%" height="15" fill="rgb(224,114,35)"/><text x="59.4815%" y="111.50"></text></g><g><title>adt_sized_constraint (784,228 samples, 0.30%)</title><rect x="59.1750%" y="117" width="0.2971%" height="15" fill="rgb(245,159,27)"/><text x="59.4250%" y="127.50"></text></g><g><title>adt_sized_constraint (843,748 samples, 0.32%)</title><rect x="59.1536%" y="133" width="0.3197%" height="15" fill="rgb(245,172,44)"/><text x="59.4036%" y="143.50"></text></g><g><title>evaluate_obligation (1,230,425 samples, 0.47%)</title><rect x="59.0274%" y="149" width="0.4661%" height="15" fill="rgb(236,23,11)"/><text x="59.2774%" y="159.50"></text></g><g><title>region_scope_tree (300,383 samples, 0.11%)</title><rect x="59.6232%" y="149" width="0.1138%" height="15" fill="rgb(205,117,38)"/><text x="59.8732%" y="159.50"></text></g><g><title>check_item_well_formed (2,819,909 samples, 1.07%)</title><rect x="58.6895%" y="165" width="1.0683%" height="15" fill="rgb(237,72,25)"/><text x="58.9395%" y="175.50"></text></g><g><title>adt_def (366,724 samples, 0.14%)</title><rect x="59.8928%" y="101" width="0.1389%" height="15" fill="rgb(244,70,9)"/><text x="60.1428%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (366,444 samples, 0.14%)</title><rect x="59.8929%" y="85" width="0.1388%" height="15" fill="rgb(217,125,39)"/><text x="60.1429%" y="95.50"></text></g><g><title>item_attrs (363,584 samples, 0.14%)</title><rect x="59.8940%" y="69" width="0.1377%" height="15" fill="rgb(235,36,10)"/><text x="60.1440%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (362,864 samples, 0.14%)</title><rect x="59.8943%" y="53" width="0.1375%" height="15" fill="rgb(251,123,47)"/><text x="60.1443%" y="63.50"></text></g><g><title>adt_sized_constraint (368,574 samples, 0.14%)</title><rect x="59.8924%" y="117" width="0.1396%" height="15" fill="rgb(221,13,13)"/><text x="60.1424%" y="127.50"></text></g><g><title>evaluate_obligation (467,816 samples, 0.18%)</title><rect x="59.8571%" y="149" width="0.1772%" height="15" fill="rgb(238,131,9)"/><text x="60.1071%" y="159.50"></text></g><g><title>adt_sized_constraint (412,464 samples, 0.16%)</title><rect x="59.8781%" y="133" width="0.1563%" height="15" fill="rgb(211,50,8)"/><text x="60.1281%" y="143.50"></text></g><g><title>analysis (157,757,376 samples, 59.77%)</title><rect x="0.3367%" y="213" width="59.7658%" height="15" fill="rgb(245,182,24)"/><text x="0.5867%" y="223.50">analysis</text></g><g><title>type_check_crate (94,380,607 samples, 35.76%)</title><rect x="24.3467%" y="197" width="35.7558%" height="15" fill="rgb(242,14,37)"/><text x="24.5967%" y="207.50">type_check_crate</text></g><g><title>wf_checking (5,844,565 samples, 2.21%)</title><rect x="57.8883%" y="181" width="2.2142%" height="15" fill="rgb(246,228,12)"/><text x="58.1383%" y="191.50">w..</text></g><g><title>check_trait_item_well_formed (909,860 samples, 0.34%)</title><rect x="59.7578%" y="165" width="0.3447%" height="15" fill="rgb(213,55,15)"/><text x="60.0078%" y="175.50"></text></g><g><title>codegen_crate (404,455 samples, 0.15%)</title><rect x="60.1071%" y="213" width="0.1532%" height="15" fill="rgb(209,9,3)"/><text x="60.3571%" y="223.50"></text></g><g><title>metadata_load_macro (1,987,304 samples, 0.75%)</title><rect x="89.8619%" y="165" width="0.7529%" height="15" fill="rgb(230,59,30)"/><text x="90.1119%" y="175.50"></text></g><g><title>metadata_register_crate (3,103,226 samples, 1.18%)</title><rect x="90.6148%" y="165" width="1.1756%" height="15" fill="rgb(209,121,21)"/><text x="90.8648%" y="175.50"></text></g><g><title>metadata_register_crate (1,043,132 samples, 0.40%)</title><rect x="91.3952%" y="149" width="0.3952%" height="15" fill="rgb(220,109,13)"/><text x="91.6452%" y="159.50"></text></g><g><title>macro_expand_crate (82,809,577 samples, 31.37%)</title><rect x="60.4785%" y="197" width="31.3721%" height="15" fill="rgb(232,18,1)"/><text x="60.7285%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (82,787,337 samples, 31.36%)</title><rect x="60.4869%" y="181" width="31.3637%" height="15" fill="rgb(215,41,42)"/><text x="60.7369%" y="191.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (421,665 samples, 0.16%)</title><rect x="91.8510%" y="197" width="0.1597%" height="15" fill="rgb(224,123,36)"/><text x="92.1010%" y="207.50"></text></g><g><title>finalize_macro_resolutions (731,289 samples, 0.28%)</title><rect x="92.1318%" y="181" width="0.2770%" height="15" fill="rgb(240,125,3)"/><text x="92.3818%" y="191.50"></text></g><g><title>late_resolve_crate (3,943,964 samples, 1.49%)</title><rect x="92.4089%" y="181" width="1.4942%" height="15" fill="rgb(205,98,50)"/><text x="92.6589%" y="191.50"></text></g><g><title>configure_and_expand (89,000,866 samples, 33.72%)</title><rect x="60.2603%" y="213" width="33.7177%" height="15" fill="rgb(205,185,37)"/><text x="60.5103%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (4,946,265 samples, 1.87%)</title><rect x="92.1041%" y="197" width="1.8739%" height="15" fill="rgb(238,207,15)"/><text x="92.3541%" y="207.50">r..</text></g><g><title>drop_ast (295,823 samples, 0.11%)</title><rect x="93.9780%" y="213" width="0.1121%" height="15" fill="rgb(213,199,42)"/><text x="94.2280%" y="223.50"></text></g><g><title>early_lint_checks (744,598 samples, 0.28%)</title><rect x="94.0972%" y="213" width="0.2821%" height="15" fill="rgb(235,201,11)"/><text x="94.3472%" y="223.50"></text></g><g><title>free_global_ctxt (4,209,348 samples, 1.59%)</title><rect x="94.3793%" y="213" width="1.5947%" height="15" fill="rgb(207,46,11)"/><text x="94.6293%" y="223.50"></text></g><g><title>hir_lowering (5,108,537 samples, 1.94%)</title><rect x="96.0394%" y="213" width="1.9354%" height="15" fill="rgb(241,35,35)"/><text x="96.2894%" y="223.50">h..</text></g><g><title>parse_crate (3,797,532 samples, 1.44%)</title><rect x="98.0013%" y="213" width="1.4387%" height="15" fill="rgb(243,32,47)"/><text x="98.2513%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (900,020 samples, 0.34%)</title><rect x="99.5144%" y="213" width="0.3410%" height="15" fill="rgb(247,202,23)"/><text x="99.7644%" y="223.50"></text></g><g><title>all (263,959,085 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (263,959,085 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (291,143 samples, 0.11%)</title><rect x="99.8897%" y="213" width="0.1103%" height="15" fill="rgb(222,74,54)"/><text x="100.1397%" y="223.50"></text></g></svg></svg>