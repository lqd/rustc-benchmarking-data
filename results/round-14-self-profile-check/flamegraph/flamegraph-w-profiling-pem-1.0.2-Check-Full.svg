<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (212,102 samples, 0.18%)</title><rect x="10.5684%" y="117" width="0.1790%" height="15" fill="rgb(227,0,7)"/><text x="10.8184%" y="127.50"></text></g><g><title>item_attrs (557,558 samples, 0.47%)</title><rect x="11.1084%" y="85" width="0.4704%" height="15" fill="rgb(217,0,24)"/><text x="11.3584%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (549,958 samples, 0.46%)</title><rect x="11.1148%" y="69" width="0.4640%" height="15" fill="rgb(221,193,54)"/><text x="11.3648%" y="79.50"></text></g><g><title>codegen_fn_attrs (653,338 samples, 0.55%)</title><rect x="11.0455%" y="101" width="0.5512%" height="15" fill="rgb(248,212,6)"/><text x="11.2955%" y="111.50"></text></g><g><title>is_copy_raw (141,121 samples, 0.12%)</title><rect x="13.4628%" y="53" width="0.1191%" height="15" fill="rgb(208,68,35)"/><text x="13.7128%" y="63.50"></text></g><g><title>adt_drop_tys (312,264 samples, 0.26%)</title><rect x="13.4115%" y="69" width="0.2635%" height="15" fill="rgb(232,128,0)"/><text x="13.6615%" y="79.50"></text></g><g><title>is_copy_raw (691,798 samples, 0.58%)</title><rect x="13.6750%" y="69" width="0.5837%" height="15" fill="rgb(207,160,47)"/><text x="13.9250%" y="79.50"></text></g><g><title>evaluate_obligation (593,207 samples, 0.50%)</title><rect x="13.7582%" y="53" width="0.5005%" height="15" fill="rgb(228,23,34)"/><text x="14.0082%" y="63.50"></text></g><g><title>needs_drop_raw (1,114,682 samples, 0.94%)</title><rect x="13.3335%" y="85" width="0.9405%" height="15" fill="rgb(218,30,26)"/><text x="13.5835%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (261,411 samples, 0.22%)</title><rect x="14.3848%" y="69" width="0.2206%" height="15" fill="rgb(220,122,19)"/><text x="14.6348%" y="79.50"></text></g><g><title>impl_parent (246,653 samples, 0.21%)</title><rect x="14.6911%" y="53" width="0.2081%" height="15" fill="rgb(250,228,42)"/><text x="14.9411%" y="63.50"></text></g><g><title>specialization_graph_of (356,724 samples, 0.30%)</title><rect x="14.6467%" y="69" width="0.3010%" height="15" fill="rgb(240,193,28)"/><text x="14.8967%" y="79.50"></text></g><g><title>resolve_instance (850,918 samples, 0.72%)</title><rect x="14.2740%" y="85" width="0.7179%" height="15" fill="rgb(216,20,37)"/><text x="14.5240%" y="95.50"></text></g><g><title>thir_body (737,600 samples, 0.62%)</title><rect x="15.0064%" y="85" width="0.6223%" height="15" fill="rgb(206,188,39)"/><text x="15.2564%" y="95.50"></text></g><g><title>mir_const (6,612,315 samples, 5.58%)</title><rect x="10.0600%" y="133" width="5.5790%" height="15" fill="rgb(217,207,13)"/><text x="10.3100%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (5,797,597 samples, 4.89%)</title><rect x="10.7474%" y="117" width="4.8916%" height="15" fill="rgb(231,73,38)"/><text x="10.9974%" y="127.50">unsafe..</text></g><g><title>mir_built (4,790,921 samples, 4.04%)</title><rect x="11.5967%" y="101" width="4.0422%" height="15" fill="rgb(225,20,46)"/><text x="11.8467%" y="111.50">mir_..</text></g><g><title>mir_promoted (7,294,123 samples, 6.15%)</title><rect x="9.5280%" y="149" width="6.1542%" height="15" fill="rgb(210,31,41)"/><text x="9.7780%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (569,757 samples, 0.48%)</title><rect x="15.6822%" y="149" width="0.4807%" height="15" fill="rgb(221,200,47)"/><text x="15.9322%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (617,788 samples, 0.52%)</title><rect x="16.1629%" y="149" width="0.5212%" height="15" fill="rgb(226,26,5)"/><text x="16.4129%" y="159.50"></text></g><g><title>normalize_projection_ty (511,377 samples, 0.43%)</title><rect x="16.2527%" y="133" width="0.4315%" height="15" fill="rgb(249,33,26)"/><text x="16.5027%" y="143.50"></text></g><g><title>type_op_normalize_predicate (353,012 samples, 0.30%)</title><rect x="16.6842%" y="149" width="0.2978%" height="15" fill="rgb(235,183,28)"/><text x="16.9342%" y="159.50"></text></g><g><title>normalize_projection_ty (199,922 samples, 0.17%)</title><rect x="16.8133%" y="133" width="0.1687%" height="15" fill="rgb(221,5,38)"/><text x="17.0633%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,011,792 samples, 1.70%)</title><rect x="17.0158%" y="149" width="1.6974%" height="15" fill="rgb(247,18,42)"/><text x="17.2658%" y="159.50"></text></g><g><title>MIR_borrow_checking (20,903,084 samples, 17.64%)</title><rect x="1.0930%" y="181" width="17.6364%" height="15" fill="rgb(241,131,45)"/><text x="1.3430%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (20,841,613 samples, 17.58%)</title><rect x="1.1449%" y="165" width="17.5845%" height="15" fill="rgb(249,31,29)"/><text x="1.3949%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (121,062 samples, 0.10%)</title><rect x="18.7294%" y="181" width="0.1021%" height="15" fill="rgb(225,111,53)"/><text x="18.9794%" y="191.50"></text></g><g><title>hir_module_items (243,484 samples, 0.21%)</title><rect x="18.8316%" y="181" width="0.2054%" height="15" fill="rgb(238,160,17)"/><text x="19.0816%" y="191.50"></text></g><g><title>item_attrs (119,411 samples, 0.10%)</title><rect x="19.7289%" y="101" width="0.1007%" height="15" fill="rgb(214,148,48)"/><text x="19.9789%" y="111.50"></text></g><g><title>codegen_fn_attrs (216,902 samples, 0.18%)</title><rect x="19.6982%" y="117" width="0.1830%" height="15" fill="rgb(232,36,49)"/><text x="19.9482%" y="127.50"></text></g><g><title>should_inherit_track_caller (359,675 samples, 0.30%)</title><rect x="19.5852%" y="133" width="0.3035%" height="15" fill="rgb(209,103,24)"/><text x="19.8352%" y="143.50"></text></g><g><title>codegen_fn_attrs (602,358 samples, 0.51%)</title><rect x="19.4106%" y="149" width="0.5082%" height="15" fill="rgb(229,88,8)"/><text x="19.6606%" y="159.50"></text></g><g><title>check_mod_attrs (1,006,552 samples, 0.85%)</title><rect x="19.0698%" y="165" width="0.8493%" height="15" fill="rgb(213,181,19)"/><text x="19.3198%" y="175.50"></text></g><g><title>check_mod_const_bodies (173,992 samples, 0.15%)</title><rect x="19.9191%" y="165" width="0.1468%" height="15" fill="rgb(254,191,54)"/><text x="20.1691%" y="175.50"></text></g><g><title>lookup_deprecation_entry (219,763 samples, 0.19%)</title><rect x="20.3990%" y="149" width="0.1854%" height="15" fill="rgb(241,83,37)"/><text x="20.6490%" y="159.50"></text></g><g><title>stability_index (125,312 samples, 0.11%)</title><rect x="20.4787%" y="133" width="0.1057%" height="15" fill="rgb(233,36,39)"/><text x="20.7287%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (651,767 samples, 0.55%)</title><rect x="20.1749%" y="165" width="0.5499%" height="15" fill="rgb(226,3,54)"/><text x="20.4249%" y="175.50"></text></g><g><title>misc_checking_1 (2,079,694 samples, 1.75%)</title><rect x="19.0373%" y="181" width="1.7547%" height="15" fill="rgb(245,192,40)"/><text x="19.2873%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (310,363 samples, 0.26%)</title><rect x="20.7936%" y="165" width="0.2619%" height="15" fill="rgb(238,167,29)"/><text x="21.0436%" y="175.50"></text></g><g><title>check_mod_liveness (237,252 samples, 0.20%)</title><rect x="20.8552%" y="149" width="0.2002%" height="15" fill="rgb(232,182,51)"/><text x="21.1052%" y="159.50"></text></g><g><title>misc_checking_2 (822,109 samples, 0.69%)</title><rect x="20.7920%" y="181" width="0.6936%" height="15" fill="rgb(231,60,39)"/><text x="21.0420%" y="191.50"></text></g><g><title>match_checking (509,935 samples, 0.43%)</title><rect x="21.0554%" y="165" width="0.4302%" height="15" fill="rgb(208,69,12)"/><text x="21.3054%" y="175.50"></text></g><g><title>check_match (491,535 samples, 0.41%)</title><rect x="21.0709%" y="149" width="0.4147%" height="15" fill="rgb(235,93,37)"/><text x="21.3209%" y="159.50"></text></g><g><title>check_private_in_public (118,802 samples, 0.10%)</title><rect x="21.4932%" y="165" width="0.1002%" height="15" fill="rgb(213,116,39)"/><text x="21.7432%" y="175.50"></text></g><g><title>death_checking (321,963 samples, 0.27%)</title><rect x="21.5934%" y="165" width="0.2716%" height="15" fill="rgb(222,207,29)"/><text x="21.8434%" y="175.50"></text></g><g><title>eval_to_const_value_raw (130,701 samples, 0.11%)</title><rect x="22.4100%" y="133" width="0.1103%" height="15" fill="rgb(206,96,30)"/><text x="22.6600%" y="143.50"></text></g><g><title>eval_to_const_value_raw (119,241 samples, 0.10%)</title><rect x="22.4197%" y="117" width="0.1006%" height="15" fill="rgb(218,138,4)"/><text x="22.6697%" y="127.50"></text></g><g><title>crate_lints (1,965,992 samples, 1.66%)</title><rect x="21.8663%" y="149" width="1.6588%" height="15" fill="rgb(250,191,14)"/><text x="22.1163%" y="159.50"></text></g><g><title>type_of (1,081,540 samples, 0.91%)</title><rect x="22.6126%" y="133" width="0.9125%" height="15" fill="rgb(239,60,40)"/><text x="22.8626%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (850,828 samples, 0.72%)</title><rect x="22.8072%" y="117" width="0.7179%" height="15" fill="rgb(206,27,48)"/><text x="23.0572%" y="127.50"></text></g><g><title>lint_checking (2,430,567 samples, 2.05%)</title><rect x="21.8651%" y="165" width="2.0507%" height="15" fill="rgb(225,35,8)"/><text x="22.1151%" y="175.50">l..</text></g><g><title>module_lints (463,095 samples, 0.39%)</title><rect x="23.5251%" y="149" width="0.3907%" height="15" fill="rgb(250,213,24)"/><text x="23.7751%" y="159.50"></text></g><g><title>lint_mod (458,535 samples, 0.39%)</title><rect x="23.5289%" y="133" width="0.3869%" height="15" fill="rgb(247,123,22)"/><text x="23.7789%" y="143.50"></text></g><g><title>layout_of (135,391 samples, 0.11%)</title><rect x="23.8016%" y="117" width="0.1142%" height="15" fill="rgb(231,138,38)"/><text x="24.0516%" y="127.50"></text></g><g><title>privacy_access_levels (155,661 samples, 0.13%)</title><rect x="23.9158%" y="165" width="0.1313%" height="15" fill="rgb(231,145,46)"/><text x="24.1658%" y="175.50"></text></g><g><title>privacy_checking_modules (629,517 samples, 0.53%)</title><rect x="24.0471%" y="165" width="0.5311%" height="15" fill="rgb(251,118,11)"/><text x="24.2971%" y="175.50"></text></g><g><title>check_mod_privacy (625,967 samples, 0.53%)</title><rect x="24.0501%" y="149" width="0.5281%" height="15" fill="rgb(217,147,25)"/><text x="24.3001%" y="159.50"></text></g><g><title>misc_checking_3 (3,678,651 samples, 3.10%)</title><rect x="21.4857%" y="181" width="3.1038%" height="15" fill="rgb(247,81,37)"/><text x="21.7357%" y="191.50">mis..</text></g><g><title>impl_trait_ref (156,521 samples, 0.13%)</title><rect x="24.8618%" y="85" width="0.1321%" height="15" fill="rgb(209,12,38)"/><text x="25.1118%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (137,161 samples, 0.12%)</title><rect x="24.8781%" y="69" width="0.1157%" height="15" fill="rgb(227,1,9)"/><text x="25.1281%" y="79.50"></text></g><g><title>adt_destructor (382,414 samples, 0.32%)</title><rect x="24.6911%" y="133" width="0.3227%" height="15" fill="rgb(248,47,43)"/><text x="24.9411%" y="143.50"></text></g><g><title>coherent_trait (379,344 samples, 0.32%)</title><rect x="24.6937%" y="117" width="0.3201%" height="15" fill="rgb(221,10,30)"/><text x="24.9437%" y="127.50"></text></g><g><title>specialization_graph_of (378,084 samples, 0.32%)</title><rect x="24.6948%" y="101" width="0.3190%" height="15" fill="rgb(210,229,1)"/><text x="24.9448%" y="111.50"></text></g><g><title>impl_parent (3,526,910 samples, 2.98%)</title><rect x="29.3932%" y="117" width="2.9757%" height="15" fill="rgb(222,148,37)"/><text x="29.6432%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,805,549 samples, 1.52%)</title><rect x="30.8455%" y="101" width="1.5234%" height="15" fill="rgb(234,67,33)"/><text x="31.0955%" y="111.50"></text></g><g><title>impl_trait_ref (8,079,165 samples, 6.82%)</title><rect x="32.3689%" y="117" width="6.8166%" height="15" fill="rgb(247,98,35)"/><text x="32.6189%" y="127.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,689,121 samples, 5.64%)</title><rect x="33.5417%" y="101" width="5.6438%" height="15" fill="rgb(247,138,52)"/><text x="33.7917%" y="111.50">metadat..</text></g><g><title>coherent_trait (18,403,126 samples, 15.53%)</title><rect x="24.6520%" y="149" width="15.5271%" height="15" fill="rgb(213,79,30)"/><text x="24.9020%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (17,785,040 samples, 15.01%)</title><rect x="25.1734%" y="133" width="15.0056%" height="15" fill="rgb(246,177,23)"/><text x="25.4234%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,174,694 samples, 0.99%)</title><rect x="39.1880%" y="117" width="0.9911%" height="15" fill="rgb(230,62,27)"/><text x="39.4380%" y="127.50"></text></g><g><title>implementations_of_trait (297,485 samples, 0.25%)</title><rect x="39.9281%" y="101" width="0.2510%" height="15" fill="rgb(216,154,8)"/><text x="40.1781%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (239,615 samples, 0.20%)</title><rect x="39.9769%" y="85" width="0.2022%" height="15" fill="rgb(244,35,45)"/><text x="40.2269%" y="95.50"></text></g><g><title>coherence_checking (18,484,367 samples, 15.60%)</title><rect x="24.6309%" y="165" width="15.5957%" height="15" fill="rgb(251,115,12)"/><text x="24.8809%" y="175.50">coherence_checking</text></g><g><title>adt_def (120,891 samples, 0.10%)</title><rect x="54.3989%" y="101" width="0.1020%" height="15" fill="rgb(240,54,50)"/><text x="54.6489%" y="111.50"></text></g><g><title>adt_sized_constraint (183,332 samples, 0.15%)</title><rect x="54.3872%" y="117" width="0.1547%" height="15" fill="rgb(233,84,52)"/><text x="54.6372%" y="127.50"></text></g><g><title>associated_item (387,125 samples, 0.33%)</title><rect x="54.6558%" y="101" width="0.3266%" height="15" fill="rgb(207,117,47)"/><text x="54.9058%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (312,515 samples, 0.26%)</title><rect x="54.7188%" y="85" width="0.2637%" height="15" fill="rgb(249,43,39)"/><text x="54.9688%" y="95.50"></text></g><g><title>associated_items (537,395 samples, 0.45%)</title><rect x="54.5510%" y="117" width="0.4534%" height="15" fill="rgb(209,38,44)"/><text x="54.8010%" y="127.50"></text></g><g><title>adt_dtorck_constraint (157,243 samples, 0.13%)</title><rect x="55.3646%" y="85" width="0.1327%" height="15" fill="rgb(236,212,23)"/><text x="55.6146%" y="95.50"></text></g><g><title>adt_dtorck_constraint (339,687 samples, 0.29%)</title><rect x="55.2416%" y="101" width="0.2866%" height="15" fill="rgb(242,79,21)"/><text x="55.4916%" y="111.50"></text></g><g><title>dropck_outlives (655,909 samples, 0.55%)</title><rect x="55.0696%" y="117" width="0.5534%" height="15" fill="rgb(211,96,35)"/><text x="55.3196%" y="127.50"></text></g><g><title>predicates_of (246,755 samples, 0.21%)</title><rect x="56.8495%" y="101" width="0.2082%" height="15" fill="rgb(253,215,40)"/><text x="57.0995%" y="111.50"></text></g><g><title>predicates_defined_on (156,513 samples, 0.13%)</title><rect x="56.9256%" y="85" width="0.1321%" height="15" fill="rgb(211,81,21)"/><text x="57.1756%" y="95.50"></text></g><g><title>specializes (230,283 samples, 0.19%)</title><rect x="57.0577%" y="101" width="0.1943%" height="15" fill="rgb(208,190,38)"/><text x="57.3077%" y="111.50"></text></g><g><title>param_env (141,752 samples, 0.12%)</title><rect x="57.1324%" y="85" width="0.1196%" height="15" fill="rgb(235,213,38)"/><text x="57.3824%" y="95.50"></text></g><g><title>trait_impls_of (311,944 samples, 0.26%)</title><rect x="57.2604%" y="101" width="0.2632%" height="15" fill="rgb(237,122,38)"/><text x="57.5104%" y="111.50"></text></g><g><title>implementations_of_trait (130,842 samples, 0.11%)</title><rect x="57.4132%" y="85" width="0.1104%" height="15" fill="rgb(244,218,35)"/><text x="57.6632%" y="95.50"></text></g><g><title>evaluate_obligation (2,255,219 samples, 1.90%)</title><rect x="55.6230%" y="117" width="1.9028%" height="15" fill="rgb(240,68,47)"/><text x="55.8730%" y="127.50">e..</text></g><g><title>fn_sig (139,602 samples, 0.12%)</title><rect x="57.5470%" y="117" width="0.1178%" height="15" fill="rgb(210,16,53)"/><text x="57.7970%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (119,802 samples, 0.10%)</title><rect x="57.5637%" y="101" width="0.1011%" height="15" fill="rgb(235,124,12)"/><text x="57.8137%" y="111.50"></text></g><g><title>generics_of (127,490 samples, 0.11%)</title><rect x="57.6648%" y="117" width="0.1076%" height="15" fill="rgb(224,169,11)"/><text x="57.9148%" y="127.50"></text></g><g><title>impl_item_implementor_ids (134,110 samples, 0.11%)</title><rect x="57.7724%" y="117" width="0.1132%" height="15" fill="rgb(250,166,2)"/><text x="58.0224%" y="127.50"></text></g><g><title>item_attrs (200,823 samples, 0.17%)</title><rect x="57.9677%" y="117" width="0.1694%" height="15" fill="rgb(242,216,29)"/><text x="58.2177%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (192,193 samples, 0.16%)</title><rect x="57.9750%" y="101" width="0.1622%" height="15" fill="rgb(230,116,27)"/><text x="58.2250%" y="111.50"></text></g><g><title>evaluate_obligation (137,392 samples, 0.12%)</title><rect x="58.2905%" y="101" width="0.1159%" height="15" fill="rgb(228,99,48)"/><text x="58.5405%" y="111.50"></text></g><g><title>method_autoderef_steps (271,112 samples, 0.23%)</title><rect x="58.1928%" y="117" width="0.2287%" height="15" fill="rgb(253,11,6)"/><text x="58.4428%" y="127.50"></text></g><g><title>explicit_predicates_of (138,490 samples, 0.12%)</title><rect x="58.6474%" y="85" width="0.1168%" height="15" fill="rgb(247,143,39)"/><text x="58.8974%" y="95.50"></text></g><g><title>predicates_of (408,502 samples, 0.34%)</title><rect x="58.4744%" y="117" width="0.3447%" height="15" fill="rgb(236,97,10)"/><text x="58.7244%" y="127.50"></text></g><g><title>predicates_defined_on (291,321 samples, 0.25%)</title><rect x="58.5733%" y="101" width="0.2458%" height="15" fill="rgb(233,208,19)"/><text x="58.8233%" y="111.50"></text></g><g><title>evaluate_obligation (349,135 samples, 0.29%)</title><rect x="60.7879%" y="101" width="0.2946%" height="15" fill="rgb(216,164,2)"/><text x="61.0379%" y="111.50"></text></g><g><title>typeck (2,802,073 samples, 2.36%)</title><rect x="58.9475%" y="117" width="2.3642%" height="15" fill="rgb(220,129,5)"/><text x="59.1975%" y="127.50">ty..</text></g><g><title>item_bodies_checking (25,009,240 samples, 21.10%)</title><rect x="40.2629%" y="165" width="21.1009%" height="15" fill="rgb(242,17,10)"/><text x="40.5129%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,006,300 samples, 21.10%)</title><rect x="40.2654%" y="149" width="21.0984%" height="15" fill="rgb(242,107,0)"/><text x="40.5154%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (24,966,740 samples, 21.07%)</title><rect x="40.2987%" y="133" width="21.0650%" height="15" fill="rgb(251,28,31)"/><text x="40.5487%" y="143.50">typeck</text></g><g><title>item_types_checking (591,077 samples, 0.50%)</title><rect x="61.3637%" y="165" width="0.4987%" height="15" fill="rgb(233,223,10)"/><text x="61.6137%" y="175.50"></text></g><g><title>check_mod_item_types (587,117 samples, 0.50%)</title><rect x="61.3671%" y="149" width="0.4954%" height="15" fill="rgb(215,21,27)"/><text x="61.6171%" y="159.50"></text></g><g><title>associated_items (163,471 samples, 0.14%)</title><rect x="62.6792%" y="117" width="0.1379%" height="15" fill="rgb(232,23,21)"/><text x="62.9292%" y="127.50"></text></g><g><title>fn_sig (838,091 samples, 0.71%)</title><rect x="62.2298%" y="133" width="0.7071%" height="15" fill="rgb(244,5,23)"/><text x="62.4798%" y="143.50"></text></g><g><title>is_late_bound_map (202,862 samples, 0.17%)</title><rect x="63.0679%" y="117" width="0.1712%" height="15" fill="rgb(226,81,46)"/><text x="63.3179%" y="127.50"></text></g><g><title>resolve_lifetimes (191,732 samples, 0.16%)</title><rect x="63.0773%" y="101" width="0.1618%" height="15" fill="rgb(247,70,30)"/><text x="63.3273%" y="111.50"></text></g><g><title>lint_levels (323,844 samples, 0.27%)</title><rect x="63.5763%" y="85" width="0.2732%" height="15" fill="rgb(212,68,19)"/><text x="63.8263%" y="95.50"></text></g><g><title>named_region_map (724,759 samples, 0.61%)</title><rect x="63.2390%" y="117" width="0.6115%" height="15" fill="rgb(240,187,13)"/><text x="63.4890%" y="127.50"></text></g><g><title>resolve_lifetimes (699,208 samples, 0.59%)</title><rect x="63.2606%" y="101" width="0.5899%" height="15" fill="rgb(223,113,26)"/><text x="63.5106%" y="111.50"></text></g><g><title>generics_of (1,104,133 samples, 0.93%)</title><rect x="62.9369%" y="133" width="0.9316%" height="15" fill="rgb(206,192,2)"/><text x="63.1869%" y="143.50"></text></g><g><title>explicit_predicates_of (212,673 samples, 0.18%)</title><rect x="64.1244%" y="101" width="0.1794%" height="15" fill="rgb(241,108,4)"/><text x="64.3744%" y="111.50"></text></g><g><title>predicates_of (824,827 samples, 0.70%)</title><rect x="63.9657%" y="133" width="0.6959%" height="15" fill="rgb(247,173,49)"/><text x="64.2157%" y="143.50"></text></g><g><title>predicates_defined_on (754,987 samples, 0.64%)</title><rect x="64.0246%" y="117" width="0.6370%" height="15" fill="rgb(224,114,35)"/><text x="64.2746%" y="127.50"></text></g><g><title>inferred_outlives_of (424,004 samples, 0.36%)</title><rect x="64.3039%" y="101" width="0.3577%" height="15" fill="rgb(245,159,27)"/><text x="64.5539%" y="111.50"></text></g><g><title>inferred_outlives_crate (397,364 samples, 0.34%)</title><rect x="64.3263%" y="85" width="0.3353%" height="15" fill="rgb(245,172,44)"/><text x="64.5763%" y="95.50"></text></g><g><title>type_of (206,682 samples, 0.17%)</title><rect x="64.4872%" y="69" width="0.1744%" height="15" fill="rgb(236,23,11)"/><text x="64.7372%" y="79.50"></text></g><g><title>type_collecting (3,465,629 samples, 2.92%)</title><rect x="61.8635%" y="165" width="2.9240%" height="15" fill="rgb(205,117,38)"/><text x="62.1135%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (3,449,599 samples, 2.91%)</title><rect x="61.8770%" y="149" width="2.9105%" height="15" fill="rgb(237,72,25)"/><text x="62.1270%" y="159.50">co..</text></g><g><title>type_of (149,252 samples, 0.13%)</title><rect x="64.6616%" y="133" width="0.1259%" height="15" fill="rgb(244,70,9)"/><text x="64.9116%" y="143.50"></text></g><g><title>adt_def (139,782 samples, 0.12%)</title><rect x="65.5293%" y="85" width="0.1179%" height="15" fill="rgb(217,125,39)"/><text x="65.7793%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (138,602 samples, 0.12%)</title><rect x="65.5303%" y="69" width="0.1169%" height="15" fill="rgb(235,36,10)"/><text x="65.7803%" y="79.50"></text></g><g><title>item_attrs (120,602 samples, 0.10%)</title><rect x="65.5455%" y="53" width="0.1018%" height="15" fill="rgb(251,123,47)"/><text x="65.7955%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (119,152 samples, 0.10%)</title><rect x="65.5468%" y="37" width="0.1005%" height="15" fill="rgb(221,13,13)"/><text x="65.7968%" y="47.50"></text></g><g><title>adt_sized_constraint (197,802 samples, 0.17%)</title><rect x="65.4977%" y="117" width="0.1669%" height="15" fill="rgb(238,131,9)"/><text x="65.7477%" y="127.50"></text></g><g><title>adt_sized_constraint (165,002 samples, 0.14%)</title><rect x="65.5254%" y="101" width="0.1392%" height="15" fill="rgb(211,50,8)"/><text x="65.7754%" y="111.50"></text></g><g><title>evaluate_obligation (382,454 samples, 0.32%)</title><rect x="65.3793%" y="133" width="0.3227%" height="15" fill="rgb(245,182,24)"/><text x="65.6293%" y="143.50"></text></g><g><title>evaluate_obligation (132,551 samples, 0.11%)</title><rect x="65.8805%" y="117" width="0.1118%" height="15" fill="rgb(242,14,37)"/><text x="66.1305%" y="127.50"></text></g><g><title>object_safety_violations (457,465 samples, 0.39%)</title><rect x="65.7735%" y="133" width="0.3860%" height="15" fill="rgb(246,228,12)"/><text x="66.0235%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,792,523 samples, 1.51%)</title><rect x="64.8768%" y="149" width="1.5124%" height="15" fill="rgb(213,55,15)"/><text x="65.1268%" y="159.50"></text></g><g><title>region_scope_tree (181,182 samples, 0.15%)</title><rect x="66.2363%" y="133" width="0.1529%" height="15" fill="rgb(209,9,3)"/><text x="66.4863%" y="143.50"></text></g><g><title>evaluate_obligation (226,373 samples, 0.19%)</title><rect x="67.0266%" y="133" width="0.1910%" height="15" fill="rgb(230,59,30)"/><text x="67.2766%" y="143.50"></text></g><g><title>param_env (150,520 samples, 0.13%)</title><rect x="67.3008%" y="133" width="0.1270%" height="15" fill="rgb(209,121,21)"/><text x="67.5508%" y="143.50"></text></g><g><title>region_scope_tree (131,620 samples, 0.11%)</title><rect x="67.4865%" y="133" width="0.1111%" height="15" fill="rgb(220,109,13)"/><text x="67.7365%" y="143.50"></text></g><g><title>analysis (79,373,799 samples, 66.97%)</title><rect x="0.6886%" y="197" width="66.9695%" height="15" fill="rgb(232,18,1)"/><text x="0.9386%" y="207.50">analysis</text></g><g><title>type_check_crate (51,045,971 samples, 43.07%)</title><rect x="24.5894%" y="181" width="43.0687%" height="15" fill="rgb(215,41,42)"/><text x="24.8394%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,399,777 samples, 2.87%)</title><rect x="64.7896%" y="165" width="2.8685%" height="15" fill="rgb(224,123,36)"/><text x="65.0396%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,503,903 samples, 1.27%)</title><rect x="66.3892%" y="149" width="1.2689%" height="15" fill="rgb(240,125,3)"/><text x="66.6392%" y="159.50"></text></g><g><title>codegen_crate (391,374 samples, 0.33%)</title><rect x="67.6687%" y="197" width="0.3302%" height="15" fill="rgb(205,98,50)"/><text x="67.9187%" y="207.50"></text></g><g><title>AST_validation (219,073 samples, 0.18%)</title><rect x="68.1959%" y="181" width="0.1848%" height="15" fill="rgb(205,185,37)"/><text x="68.4459%" y="191.50"></text></g><g><title>metadata_load_macro (260,454 samples, 0.22%)</title><rect x="81.7442%" y="149" width="0.2198%" height="15" fill="rgb(238,207,15)"/><text x="81.9942%" y="159.50"></text></g><g><title>metadata_register_crate (2,648,920 samples, 2.23%)</title><rect x="81.9639%" y="149" width="2.2350%" height="15" fill="rgb(213,199,42)"/><text x="82.2139%" y="159.50">m..</text></g><g><title>metadata_register_crate (965,531 samples, 0.81%)</title><rect x="83.3842%" y="133" width="0.8146%" height="15" fill="rgb(235,201,11)"/><text x="83.6342%" y="143.50"></text></g><g><title>macro_expand_crate (18,661,549 samples, 15.75%)</title><rect x="68.5448%" y="181" width="15.7452%" height="15" fill="rgb(207,46,11)"/><text x="68.7948%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (18,633,719 samples, 15.72%)</title><rect x="68.5683%" y="165" width="15.7217%" height="15" fill="rgb(241,35,35)"/><text x="68.8183%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (229,443 samples, 0.19%)</title><rect x="84.3010%" y="181" width="0.1936%" height="15" fill="rgb(243,32,47)"/><text x="84.5510%" y="191.50"></text></g><g><title>finalize_macro_resolutions (349,314 samples, 0.29%)</title><rect x="84.5494%" y="165" width="0.2947%" height="15" fill="rgb(247,202,23)"/><text x="84.7994%" y="175.50"></text></g><g><title>late_resolve_crate (3,598,090 samples, 3.04%)</title><rect x="84.8441%" y="165" width="3.0358%" height="15" fill="rgb(219,102,11)"/><text x="85.0941%" y="175.50">lat..</text></g><g><title>configure_and_expand (23,740,596 samples, 20.03%)</title><rect x="67.9989%" y="197" width="20.0305%" height="15" fill="rgb(243,110,44)"/><text x="68.2489%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,189,567 samples, 3.53%)</title><rect x="84.4945%" y="181" width="3.5348%" height="15" fill="rgb(222,74,54)"/><text x="84.7445%" y="191.50">res..</text></g><g><title>drop_ast (266,123 samples, 0.22%)</title><rect x="88.0294%" y="197" width="0.2245%" height="15" fill="rgb(216,99,12)"/><text x="88.2794%" y="207.50"></text></g><g><title>early_lint_checks (646,108 samples, 0.55%)</title><rect x="88.2671%" y="197" width="0.5451%" height="15" fill="rgb(226,22,26)"/><text x="88.5171%" y="207.50"></text></g><g><title>free_global_ctxt (3,383,418 samples, 2.85%)</title><rect x="88.8123%" y="197" width="2.8547%" height="15" fill="rgb(217,163,10)"/><text x="89.0623%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (804,259 samples, 0.68%)</title><rect x="91.6670%" y="197" width="0.6786%" height="15" fill="rgb(213,25,53)"/><text x="91.9170%" y="207.50"></text></g><g><title>hir_lowering (4,308,508 samples, 3.64%)</title><rect x="92.3455%" y="197" width="3.6352%" height="15" fill="rgb(252,105,26)"/><text x="92.5955%" y="207.50">hir_..</text></g><g><title>parse_crate (3,157,245 samples, 2.66%)</title><rect x="96.0226%" y="197" width="2.6638%" height="15" fill="rgb(220,39,43)"/><text x="96.2726%" y="207.50">pa..</text></g><g><title>prepare_outputs (323,164 samples, 0.27%)</title><rect x="98.6949%" y="197" width="0.2727%" height="15" fill="rgb(229,68,48)"/><text x="98.9449%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (736,038 samples, 0.62%)</title><rect x="98.9676%" y="197" width="0.6210%" height="15" fill="rgb(252,8,32)"/><text x="99.2176%" y="207.50"></text></g><g><title>setup_global_ctxt (156,492 samples, 0.13%)</title><rect x="99.5977%" y="197" width="0.1320%" height="15" fill="rgb(223,20,43)"/><text x="99.8477%" y="207.50"></text></g><g><title>all (118,522,317 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (118,522,317 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (320,294 samples, 0.27%)</title><rect x="99.7298%" y="197" width="0.2702%" height="15" fill="rgb(249,185,26)"/><text x="99.9798%" y="207.50"></text></g></svg></svg>