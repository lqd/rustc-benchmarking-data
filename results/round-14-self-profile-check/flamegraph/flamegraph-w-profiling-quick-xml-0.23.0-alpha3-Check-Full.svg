<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (557,986 samples, 0.12%)</title><rect x="16.1395%" y="133" width="0.1239%" height="15" fill="rgb(227,0,7)"/><text x="16.3895%" y="143.50"></text></g><g><title>is_sized_raw (607,304 samples, 0.13%)</title><rect x="16.3068%" y="133" width="0.1349%" height="15" fill="rgb(217,0,24)"/><text x="16.5568%" y="143.50"></text></g><g><title>evaluate_obligation (497,423 samples, 0.11%)</title><rect x="16.3312%" y="117" width="0.1105%" height="15" fill="rgb(221,193,54)"/><text x="16.5812%" y="127.50"></text></g><g><title>param_env (828,399 samples, 0.18%)</title><rect x="18.2040%" y="101" width="0.1840%" height="15" fill="rgb(248,212,6)"/><text x="18.4540%" y="111.50"></text></g><g><title>item_attrs (788,661 samples, 0.18%)</title><rect x="18.9771%" y="69" width="0.1751%" height="15" fill="rgb(208,68,35)"/><text x="19.2271%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (763,020 samples, 0.17%)</title><rect x="18.9828%" y="53" width="0.1695%" height="15" fill="rgb(232,128,0)"/><text x="19.2328%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,064,165 samples, 0.24%)</title><rect x="18.9253%" y="85" width="0.2363%" height="15" fill="rgb(207,160,47)"/><text x="19.1753%" y="95.50"></text></g><g><title>adt_drop_tys (509,694 samples, 0.11%)</title><rect x="22.5571%" y="53" width="0.1132%" height="15" fill="rgb(228,23,34)"/><text x="22.8071%" y="63.50"></text></g><g><title>is_copy_raw (4,055,467 samples, 0.90%)</title><rect x="22.6703%" y="53" width="0.9006%" height="15" fill="rgb(218,30,26)"/><text x="22.9203%" y="63.50"></text></g><g><title>evaluate_obligation (3,318,623 samples, 0.74%)</title><rect x="22.8340%" y="37" width="0.7370%" height="15" fill="rgb(220,122,19)"/><text x="23.0840%" y="47.50"></text></g><g><title>needs_drop_raw (5,181,094 samples, 1.15%)</title><rect x="22.4321%" y="69" width="1.1506%" height="15" fill="rgb(250,228,42)"/><text x="22.6821%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,346,814 samples, 0.30%)</title><rect x="23.7523%" y="53" width="0.2991%" height="15" fill="rgb(240,193,28)"/><text x="24.0023%" y="63.50"></text></g><g><title>specialization_graph_of (736,698 samples, 0.16%)</title><rect x="24.1005%" y="53" width="0.1636%" height="15" fill="rgb(216,20,37)"/><text x="24.3505%" y="63.50"></text></g><g><title>resolve_instance (3,335,666 samples, 0.74%)</title><rect x="23.5834%" y="69" width="0.7408%" height="15" fill="rgb(206,188,39)"/><text x="23.8334%" y="79.50"></text></g><g><title>thir_body (5,687,586 samples, 1.26%)</title><rect x="24.3537%" y="69" width="1.2631%" height="15" fill="rgb(217,207,13)"/><text x="24.6037%" y="79.50"></text></g><g><title>mir_const (37,402,964 samples, 8.31%)</title><rect x="17.3312%" y="117" width="8.3064%" height="15" fill="rgb(231,73,38)"/><text x="17.5812%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (32,644,129 samples, 7.25%)</title><rect x="18.3880%" y="101" width="7.2496%" height="15" fill="rgb(225,20,46)"/><text x="18.6380%" y="111.50">unsafety_c..</text></g><g><title>mir_built (29,160,444 samples, 6.48%)</title><rect x="19.1616%" y="85" width="6.4759%" height="15" fill="rgb(210,31,41)"/><text x="19.4116%" y="95.50">mir_built</text></g><g><title>mir_promoted (41,851,051 samples, 9.29%)</title><rect x="16.4417%" y="133" width="9.2943%" height="15" fill="rgb(221,200,47)"/><text x="16.6917%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,669,957 samples, 0.37%)</title><rect x="25.7360%" y="133" width="0.3709%" height="15" fill="rgb(226,26,5)"/><text x="25.9860%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,580,304 samples, 0.57%)</title><rect x="26.1069%" y="133" width="0.5730%" height="15" fill="rgb(249,33,26)"/><text x="26.3569%" y="143.50"></text></g><g><title>normalize_projection_ty (1,524,595 samples, 0.34%)</title><rect x="26.3414%" y="117" width="0.3386%" height="15" fill="rgb(235,183,28)"/><text x="26.5914%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,772,871 samples, 0.39%)</title><rect x="26.6799%" y="133" width="0.3937%" height="15" fill="rgb(221,5,38)"/><text x="26.9299%" y="143.50"></text></g><g><title>normalize_projection_ty (777,428 samples, 0.17%)</title><rect x="26.9010%" y="117" width="0.1727%" height="15" fill="rgb(247,18,42)"/><text x="27.1510%" y="127.50"></text></g><g><title>type_op_prove_predicate (13,033,975 samples, 2.89%)</title><rect x="27.0930%" y="133" width="2.8946%" height="15" fill="rgb(241,131,45)"/><text x="27.3430%" y="143.50">ty..</text></g><g><title>evaluate_obligation (484,186 samples, 0.11%)</title><rect x="29.8801%" y="117" width="0.1075%" height="15" fill="rgb(249,31,29)"/><text x="30.1301%" y="127.50"></text></g><g><title>MIR_borrow_checking (133,068,407 samples, 29.55%)</title><rect x="0.4443%" y="165" width="29.5517%" height="15" fill="rgb(225,111,53)"/><text x="0.6943%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (132,549,762 samples, 29.44%)</title><rect x="0.5594%" y="149" width="29.4366%" height="15" fill="rgb(238,160,17)"/><text x="0.8094%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (662,888 samples, 0.15%)</title><rect x="30.0734%" y="165" width="0.1472%" height="15" fill="rgb(214,148,48)"/><text x="30.3234%" y="175.50"></text></g><g><title>codegen_fn_attrs (742,700 samples, 0.16%)</title><rect x="30.4267%" y="133" width="0.1649%" height="15" fill="rgb(232,36,49)"/><text x="30.6767%" y="143.50"></text></g><g><title>should_inherit_track_caller (594,087 samples, 0.13%)</title><rect x="30.4597%" y="117" width="0.1319%" height="15" fill="rgb(209,103,24)"/><text x="30.7097%" y="127.50"></text></g><g><title>check_mod_attrs (1,636,099 samples, 0.36%)</title><rect x="30.2283%" y="149" width="0.3633%" height="15" fill="rgb(229,88,8)"/><text x="30.4783%" y="159.50"></text></g><g><title>lookup_deprecation_entry (463,546 samples, 0.10%)</title><rect x="30.8544%" y="133" width="0.1029%" height="15" fill="rgb(213,181,19)"/><text x="31.1044%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,074,932 samples, 0.24%)</title><rect x="30.7491%" y="149" width="0.2387%" height="15" fill="rgb(254,191,54)"/><text x="30.9991%" y="159.50"></text></g><g><title>misc_checking_1 (3,551,240 samples, 0.79%)</title><rect x="30.2207%" y="165" width="0.7887%" height="15" fill="rgb(241,83,37)"/><text x="30.4707%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,116,924 samples, 0.47%)</title><rect x="31.0098%" y="149" width="0.4701%" height="15" fill="rgb(233,36,39)"/><text x="31.2598%" y="159.50"></text></g><g><title>check_mod_liveness (1,712,759 samples, 0.38%)</title><rect x="31.0996%" y="133" width="0.3804%" height="15" fill="rgb(226,3,54)"/><text x="31.3496%" y="143.50"></text></g><g><title>misc_checking_2 (5,718,425 samples, 1.27%)</title><rect x="31.0094%" y="165" width="1.2699%" height="15" fill="rgb(245,192,40)"/><text x="31.2594%" y="175.50"></text></g><g><title>match_checking (3,599,351 samples, 0.80%)</title><rect x="31.4800%" y="149" width="0.7993%" height="15" fill="rgb(238,167,29)"/><text x="31.7300%" y="159.50"></text></g><g><title>check_match (3,471,149 samples, 0.77%)</title><rect x="31.5084%" y="133" width="0.7709%" height="15" fill="rgb(232,182,51)"/><text x="31.7584%" y="143.50"></text></g><g><title>check_private_in_public (750,138 samples, 0.17%)</title><rect x="32.2817%" y="149" width="0.1666%" height="15" fill="rgb(231,60,39)"/><text x="32.5317%" y="159.50"></text></g><g><title>death_checking (1,362,056 samples, 0.30%)</title><rect x="32.4483%" y="149" width="0.3025%" height="15" fill="rgb(208,69,12)"/><text x="32.6983%" y="159.50"></text></g><g><title>param_env (716,929 samples, 0.16%)</title><rect x="33.1581%" y="117" width="0.1592%" height="15" fill="rgb(235,93,37)"/><text x="33.4081%" y="127.50"></text></g><g><title>crate_lints (3,874,234 samples, 0.86%)</title><rect x="32.7512%" y="133" width="0.8604%" height="15" fill="rgb(213,116,39)"/><text x="33.0012%" y="143.50"></text></g><g><title>type_of (1,191,493 samples, 0.26%)</title><rect x="33.3470%" y="117" width="0.2646%" height="15" fill="rgb(222,207,29)"/><text x="33.5970%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (940,889 samples, 0.21%)</title><rect x="33.4027%" y="101" width="0.2090%" height="15" fill="rgb(206,96,30)"/><text x="33.6527%" y="111.50"></text></g><g><title>lint_checking (6,269,590 samples, 1.39%)</title><rect x="32.7508%" y="149" width="1.3923%" height="15" fill="rgb(218,138,4)"/><text x="33.0008%" y="159.50"></text></g><g><title>module_lints (2,393,306 samples, 0.53%)</title><rect x="33.6116%" y="133" width="0.5315%" height="15" fill="rgb(250,191,14)"/><text x="33.8616%" y="143.50"></text></g><g><title>lint_mod (2,383,036 samples, 0.53%)</title><rect x="33.6139%" y="117" width="0.5292%" height="15" fill="rgb(239,60,40)"/><text x="33.8639%" y="127.50"></text></g><g><title>privacy_access_levels (991,221 samples, 0.22%)</title><rect x="34.1431%" y="149" width="0.2201%" height="15" fill="rgb(206,27,48)"/><text x="34.3931%" y="159.50"></text></g><g><title>privacy_checking_modules (4,050,006 samples, 0.90%)</title><rect x="34.3632%" y="149" width="0.8994%" height="15" fill="rgb(225,35,8)"/><text x="34.6132%" y="159.50"></text></g><g><title>check_mod_privacy (4,043,026 samples, 0.90%)</title><rect x="34.3648%" y="133" width="0.8979%" height="15" fill="rgb(250,213,24)"/><text x="34.6148%" y="143.50"></text></g><g><title>misc_checking_3 (13,473,541 samples, 2.99%)</title><rect x="32.2793%" y="165" width="2.9922%" height="15" fill="rgb(247,123,22)"/><text x="32.5293%" y="175.50">mis..</text></g><g><title>impl_parent (2,946,060 samples, 0.65%)</title><rect x="36.3988%" y="101" width="0.6543%" height="15" fill="rgb(231,138,38)"/><text x="36.6488%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,576,840 samples, 0.35%)</title><rect x="36.7029%" y="85" width="0.3502%" height="15" fill="rgb(231,145,46)"/><text x="36.9529%" y="95.50"></text></g><g><title>impl_trait_ref (5,954,702 samples, 1.32%)</title><rect x="37.0531%" y="101" width="1.3224%" height="15" fill="rgb(251,118,11)"/><text x="37.3031%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,640,901 samples, 1.03%)</title><rect x="37.3449%" y="85" width="1.0306%" height="15" fill="rgb(217,147,25)"/><text x="37.5949%" y="95.50"></text></g><g><title>trait_impls_of (947,810 samples, 0.21%)</title><rect x="38.3825%" y="101" width="0.2105%" height="15" fill="rgb(247,81,37)"/><text x="38.6325%" y="111.50"></text></g><g><title>coherent_trait (14,725,065 samples, 3.27%)</title><rect x="35.3230%" y="133" width="3.2701%" height="15" fill="rgb(209,12,38)"/><text x="35.5730%" y="143.50">coh..</text></g><g><title>specialization_graph_of (14,319,500 samples, 3.18%)</title><rect x="35.4131%" y="117" width="3.1801%" height="15" fill="rgb(227,1,9)"/><text x="35.6631%" y="127.50">spe..</text></g><g><title>coherence_checking (14,861,446 samples, 3.30%)</title><rect x="35.3176%" y="149" width="3.3004%" height="15" fill="rgb(248,47,43)"/><text x="35.5676%" y="159.50">coh..</text></g><g><title>adt_dtorck_constraint (719,430 samples, 0.16%)</title><rect x="59.8256%" y="85" width="0.1598%" height="15" fill="rgb(221,10,30)"/><text x="60.0756%" y="95.50"></text></g><g><title>dropck_outlives (2,249,714 samples, 0.50%)</title><rect x="59.6007%" y="101" width="0.4996%" height="15" fill="rgb(210,229,1)"/><text x="59.8507%" y="111.50"></text></g><g><title>normalize_projection_ty (517,705 samples, 0.11%)</title><rect x="59.9854%" y="85" width="0.1150%" height="15" fill="rgb(222,148,37)"/><text x="60.2354%" y="95.50"></text></g><g><title>generics_of (1,221,945 samples, 0.27%)</title><rect x="62.1970%" y="85" width="0.2714%" height="15" fill="rgb(234,67,33)"/><text x="62.4470%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (950,083 samples, 0.21%)</title><rect x="62.2574%" y="69" width="0.2110%" height="15" fill="rgb(247,98,35)"/><text x="62.5074%" y="79.50"></text></g><g><title>impl_trait_ref (526,083 samples, 0.12%)</title><rect x="62.5117%" y="85" width="0.1168%" height="15" fill="rgb(247,138,52)"/><text x="62.7617%" y="95.50"></text></g><g><title>predicates_of (1,188,754 samples, 0.26%)</title><rect x="62.6418%" y="85" width="0.2640%" height="15" fill="rgb(213,79,30)"/><text x="62.8918%" y="95.50"></text></g><g><title>predicates_defined_on (681,598 samples, 0.15%)</title><rect x="62.7545%" y="69" width="0.1514%" height="15" fill="rgb(246,177,23)"/><text x="63.0045%" y="79.50"></text></g><g><title>specializes (2,585,598 samples, 0.57%)</title><rect x="62.9058%" y="85" width="0.5742%" height="15" fill="rgb(230,62,27)"/><text x="63.1558%" y="95.50"></text></g><g><title>param_env (1,480,813 samples, 0.33%)</title><rect x="63.1512%" y="69" width="0.3289%" height="15" fill="rgb(216,154,8)"/><text x="63.4012%" y="79.50"></text></g><g><title>def_span (641,956 samples, 0.14%)</title><rect x="63.3375%" y="53" width="0.1426%" height="15" fill="rgb(244,35,45)"/><text x="63.5875%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (561,436 samples, 0.12%)</title><rect x="63.3553%" y="37" width="0.1247%" height="15" fill="rgb(251,115,12)"/><text x="63.6053%" y="47.50"></text></g><g><title>evaluate_obligation (15,518,001 samples, 3.45%)</title><rect x="60.1003%" y="101" width="3.4462%" height="15" fill="rgb(240,54,50)"/><text x="60.3503%" y="111.50">eva..</text></g><g><title>evaluate_obligation (748,382 samples, 0.17%)</title><rect x="64.0226%" y="85" width="0.1662%" height="15" fill="rgb(233,84,52)"/><text x="64.2726%" y="95.50"></text></g><g><title>method_autoderef_steps (1,655,602 samples, 0.37%)</title><rect x="63.8231%" y="101" width="0.3677%" height="15" fill="rgb(207,117,47)"/><text x="64.0731%" y="111.50"></text></g><g><title>associated_item (613,765 samples, 0.14%)</title><rect x="73.9395%" y="69" width="0.1363%" height="15" fill="rgb(249,43,39)"/><text x="74.1895%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (511,225 samples, 0.11%)</title><rect x="73.9623%" y="53" width="0.1135%" height="15" fill="rgb(209,38,44)"/><text x="74.2123%" y="63.50"></text></g><g><title>associated_items (838,558 samples, 0.19%)</title><rect x="73.9003%" y="85" width="0.1862%" height="15" fill="rgb(236,212,23)"/><text x="74.1503%" y="95.50"></text></g><g><title>dropck_outlives (688,506 samples, 0.15%)</title><rect x="74.1087%" y="85" width="0.1529%" height="15" fill="rgb(242,79,21)"/><text x="74.3587%" y="95.50"></text></g><g><title>impl_trait_ref (891,211 samples, 0.20%)</title><rect x="75.2863%" y="69" width="0.1979%" height="15" fill="rgb(211,96,35)"/><text x="75.5363%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (826,651 samples, 0.18%)</title><rect x="75.3007%" y="53" width="0.1836%" height="15" fill="rgb(253,215,40)"/><text x="75.5507%" y="63.50"></text></g><g><title>evaluate_obligation (6,607,483 samples, 1.47%)</title><rect x="74.2616%" y="85" width="1.4674%" height="15" fill="rgb(211,81,21)"/><text x="74.5116%" y="95.50"></text></g><g><title>is_copy_raw (450,605 samples, 0.10%)</title><rect x="75.9109%" y="85" width="0.1001%" height="15" fill="rgb(208,190,38)"/><text x="76.1609%" y="95.50"></text></g><g><title>evaluate_obligation (522,546 samples, 0.12%)</title><rect x="76.2022%" y="69" width="0.1160%" height="15" fill="rgb(235,213,38)"/><text x="76.4522%" y="79.50"></text></g><g><title>method_autoderef_steps (1,187,763 samples, 0.26%)</title><rect x="76.0560%" y="85" width="0.2638%" height="15" fill="rgb(237,122,38)"/><text x="76.3060%" y="95.50"></text></g><g><title>predicates_of (470,097 samples, 0.10%)</title><rect x="76.3308%" y="85" width="0.1044%" height="15" fill="rgb(244,218,35)"/><text x="76.5808%" y="95.50"></text></g><g><title>typeck (54,511,633 samples, 12.11%)</title><rect x="64.4018%" y="101" width="12.1059%" height="15" fill="rgb(240,68,47)"/><text x="64.6518%" y="111.50">typeck</text></g><g><title>item_bodies_checking (170,656,279 samples, 37.90%)</title><rect x="38.6357%" y="149" width="37.8992%" height="15" fill="rgb(210,16,53)"/><text x="38.8857%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (170,652,409 samples, 37.90%)</title><rect x="38.6366%" y="133" width="37.8984%" height="15" fill="rgb(235,124,12)"/><text x="38.8866%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (170,322,335 samples, 37.83%)</title><rect x="38.7099%" y="117" width="37.8251%" height="15" fill="rgb(224,169,11)"/><text x="38.9599%" y="127.50">typeck</text></g><g><title>item_types_checking (1,783,140 samples, 0.40%)</title><rect x="76.5350%" y="149" width="0.3960%" height="15" fill="rgb(250,166,2)"/><text x="76.7850%" y="159.50"></text></g><g><title>check_mod_item_types (1,775,720 samples, 0.39%)</title><rect x="76.5366%" y="133" width="0.3944%" height="15" fill="rgb(242,216,29)"/><text x="76.7866%" y="143.50"></text></g><g><title>fn_sig (983,384 samples, 0.22%)</title><rect x="77.1229%" y="117" width="0.2184%" height="15" fill="rgb(230,116,27)"/><text x="77.3729%" y="127.50"></text></g><g><title>resolve_lifetimes (968,351 samples, 0.22%)</title><rect x="77.4385%" y="85" width="0.2151%" height="15" fill="rgb(228,99,48)"/><text x="77.6885%" y="95.50"></text></g><g><title>is_late_bound_map (1,036,152 samples, 0.23%)</title><rect x="77.4243%" y="101" width="0.2301%" height="15" fill="rgb(253,11,6)"/><text x="77.6743%" y="111.50"></text></g><g><title>named_region_map (962,090 samples, 0.21%)</title><rect x="77.6544%" y="101" width="0.2137%" height="15" fill="rgb(247,143,39)"/><text x="77.9044%" y="111.50"></text></g><g><title>resolve_lifetimes (915,439 samples, 0.20%)</title><rect x="77.6647%" y="85" width="0.2033%" height="15" fill="rgb(236,97,10)"/><text x="77.9147%" y="95.50"></text></g><g><title>lint_levels (645,417 samples, 0.14%)</title><rect x="77.7247%" y="69" width="0.1433%" height="15" fill="rgb(233,208,19)"/><text x="77.9747%" y="79.50"></text></g><g><title>generics_of (2,412,774 samples, 0.54%)</title><rect x="77.3413%" y="117" width="0.5358%" height="15" fill="rgb(216,164,2)"/><text x="77.5913%" y="127.50"></text></g><g><title>explicit_predicates_of (806,983 samples, 0.18%)</title><rect x="77.9953%" y="85" width="0.1792%" height="15" fill="rgb(220,129,5)"/><text x="78.2453%" y="95.50"></text></g><g><title>predicates_of (1,873,686 samples, 0.42%)</title><rect x="77.8994%" y="117" width="0.4161%" height="15" fill="rgb(242,17,10)"/><text x="78.1494%" y="127.50"></text></g><g><title>predicates_defined_on (1,701,985 samples, 0.38%)</title><rect x="77.9376%" y="101" width="0.3780%" height="15" fill="rgb(242,107,0)"/><text x="78.1876%" y="111.50"></text></g><g><title>inferred_outlives_of (635,169 samples, 0.14%)</title><rect x="78.1745%" y="85" width="0.1411%" height="15" fill="rgb(251,28,31)"/><text x="78.4245%" y="95.50"></text></g><g><title>inferred_outlives_crate (579,656 samples, 0.13%)</title><rect x="78.1868%" y="69" width="0.1287%" height="15" fill="rgb(233,223,10)"/><text x="78.4368%" y="79.50"></text></g><g><title>type_collecting (6,541,333 samples, 1.45%)</title><rect x="76.9320%" y="149" width="1.4527%" height="15" fill="rgb(215,21,27)"/><text x="77.1820%" y="159.50"></text></g><g><title>collect_mod_item_types (6,522,993 samples, 1.45%)</title><rect x="76.9361%" y="133" width="1.4486%" height="15" fill="rgb(232,23,21)"/><text x="77.1861%" y="143.50"></text></g><g><title>evaluate_obligation (1,112,908 samples, 0.25%)</title><rect x="80.3230%" y="117" width="0.2472%" height="15" fill="rgb(244,5,23)"/><text x="80.5730%" y="127.50"></text></g><g><title>implied_outlives_bounds (671,746 samples, 0.15%)</title><rect x="80.5745%" y="117" width="0.1492%" height="15" fill="rgb(226,81,46)"/><text x="80.8245%" y="127.50"></text></g><g><title>param_env (1,138,452 samples, 0.25%)</title><rect x="80.8252%" y="117" width="0.2528%" height="15" fill="rgb(247,70,30)"/><text x="81.0752%" y="127.50"></text></g><g><title>region_scope_tree (1,641,006 samples, 0.36%)</title><rect x="81.0873%" y="117" width="0.3644%" height="15" fill="rgb(212,68,19)"/><text x="81.3373%" y="127.50"></text></g><g><title>check_impl_item_well_formed (13,165,943 samples, 2.92%)</title><rect x="78.5377%" y="133" width="2.9239%" height="15" fill="rgb(240,187,13)"/><text x="78.7877%" y="143.50">ch..</text></g><g><title>evaluate_obligation (882,632 samples, 0.20%)</title><rect x="82.1445%" y="117" width="0.1960%" height="15" fill="rgb(223,113,26)"/><text x="82.3945%" y="127.50"></text></g><g><title>param_env (461,916 samples, 0.10%)</title><rect x="82.4074%" y="117" width="0.1026%" height="15" fill="rgb(206,192,2)"/><text x="82.6574%" y="127.50"></text></g><g><title>check_item_well_formed (5,363,575 samples, 1.19%)</title><rect x="81.4616%" y="133" width="1.1911%" height="15" fill="rgb(241,108,4)"/><text x="81.7116%" y="143.50"></text></g><g><title>analysis (371,743,407 samples, 82.56%)</title><rect x="0.2122%" y="181" width="82.5565%" height="15" fill="rgb(247,173,49)"/><text x="0.4622%" y="191.50">analysis</text></g><g><title>type_check_crate (213,875,171 samples, 47.50%)</title><rect x="35.2715%" y="165" width="47.4973%" height="15" fill="rgb(224,114,35)"/><text x="35.5215%" y="175.50">type_check_crate</text></g><g><title>wf_checking (19,719,680 samples, 4.38%)</title><rect x="78.3894%" y="149" width="4.3793%" height="15" fill="rgb(245,159,27)"/><text x="78.6394%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (522,486 samples, 0.12%)</title><rect x="82.6527%" y="133" width="0.1160%" height="15" fill="rgb(245,172,44)"/><text x="82.9027%" y="143.50"></text></g><g><title>metadata_register_crate (1,287,444 samples, 0.29%)</title><rect x="92.1601%" y="133" width="0.2859%" height="15" fill="rgb(236,23,11)"/><text x="92.4101%" y="143.50"></text></g><g><title>metadata_register_crate (467,216 samples, 0.10%)</title><rect x="92.3423%" y="117" width="0.1038%" height="15" fill="rgb(205,117,38)"/><text x="92.5923%" y="127.50"></text></g><g><title>macro_expand_crate (43,170,043 samples, 9.59%)</title><rect x="83.0723%" y="165" width="9.5872%" height="15" fill="rgb(237,72,25)"/><text x="83.3223%" y="175.50">macro_expand_c..</text></g><g><title>expand_crate (43,157,203 samples, 9.58%)</title><rect x="83.0752%" y="149" width="9.5843%" height="15" fill="rgb(244,70,9)"/><text x="83.3252%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (961,111 samples, 0.21%)</title><rect x="92.4460%" y="133" width="0.2134%" height="15" fill="rgb(217,125,39)"/><text x="92.6960%" y="143.50"></text></g><g><title>late_resolve_crate (5,924,296 samples, 1.32%)</title><rect x="92.7642%" y="149" width="1.3157%" height="15" fill="rgb(235,36,10)"/><text x="93.0142%" y="159.50"></text></g><g><title>configure_and_expand (50,967,160 samples, 11.32%)</title><rect x="82.8597%" y="181" width="11.3188%" height="15" fill="rgb(251,123,47)"/><text x="83.1097%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (6,761,536 samples, 1.50%)</title><rect x="92.6769%" y="165" width="1.5016%" height="15" fill="rgb(221,13,13)"/><text x="92.9269%" y="175.50"></text></g><g><title>drop_ast (869,079 samples, 0.19%)</title><rect x="94.1785%" y="181" width="0.1930%" height="15" fill="rgb(238,131,9)"/><text x="94.4285%" y="191.50"></text></g><g><title>early_lint_checks (1,480,427 samples, 0.33%)</title><rect x="94.3760%" y="181" width="0.3288%" height="15" fill="rgb(211,50,8)"/><text x="94.6260%" y="191.50"></text></g><g><title>free_global_ctxt (6,281,000 samples, 1.39%)</title><rect x="94.7048%" y="181" width="1.3949%" height="15" fill="rgb(245,182,24)"/><text x="94.9548%" y="191.50"></text></g><g><title>generate_crate_metadata (3,460,209 samples, 0.77%)</title><rect x="96.0997%" y="181" width="0.7684%" height="15" fill="rgb(242,14,37)"/><text x="96.3497%" y="191.50"></text></g><g><title>hir_lowering (11,124,764 samples, 2.47%)</title><rect x="96.8681%" y="181" width="2.4706%" height="15" fill="rgb(246,228,12)"/><text x="97.1181%" y="191.50">hi..</text></g><g><title>parse_crate (507,726 samples, 0.11%)</title><rect x="99.3527%" y="181" width="0.1128%" height="15" fill="rgb(213,55,15)"/><text x="99.6027%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,552,127 samples, 0.34%)</title><rect x="99.5152%" y="181" width="0.3447%" height="15" fill="rgb(209,9,3)"/><text x="99.7652%" y="191.50"></text></g><g><title>all (450,289,455 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (450,289,455 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (518,416 samples, 0.12%)</title><rect x="99.8849%" y="181" width="0.1151%" height="15" fill="rgb(220,109,13)"/><text x="100.1349%" y="191.50"></text></g></svg></svg>