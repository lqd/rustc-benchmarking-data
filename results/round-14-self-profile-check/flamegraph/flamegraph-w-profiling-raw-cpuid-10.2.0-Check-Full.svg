<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (3,346,701 samples, 0.25%)</title><rect x="17.5681%" y="133" width="0.2527%" height="15" fill="rgb(227,0,7)"/><text x="17.8181%" y="143.50"></text></g><g><title>needs_drop_raw (2,640,180 samples, 0.20%)</title><rect x="24.7070%" y="69" width="0.1994%" height="15" fill="rgb(217,0,24)"/><text x="24.9570%" y="79.50"></text></g><g><title>is_copy_raw (2,000,110 samples, 0.15%)</title><rect x="24.7553%" y="53" width="0.1510%" height="15" fill="rgb(221,193,54)"/><text x="25.0053%" y="63.50"></text></g><g><title>evaluate_obligation (1,568,565 samples, 0.12%)</title><rect x="24.7879%" y="37" width="0.1185%" height="15" fill="rgb(248,212,6)"/><text x="25.0379%" y="47.50"></text></g><g><title>resolve_instance (2,854,537 samples, 0.22%)</title><rect x="24.9089%" y="69" width="0.2156%" height="15" fill="rgb(208,68,35)"/><text x="25.1589%" y="79.50"></text></g><g><title>thir_body (19,780,672 samples, 1.49%)</title><rect x="25.1628%" y="69" width="1.4938%" height="15" fill="rgb(232,128,0)"/><text x="25.4128%" y="79.50"></text></g><g><title>mir_const (99,484,377 samples, 7.51%)</title><rect x="19.1709%" y="117" width="7.5128%" height="15" fill="rgb(207,160,47)"/><text x="19.4209%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (84,331,932 samples, 6.37%)</title><rect x="20.3152%" y="101" width="6.3685%" height="15" fill="rgb(228,23,34)"/><text x="20.5652%" y="111.50">unsafety..</text></g><g><title>mir_built (76,712,788 samples, 5.79%)</title><rect x="20.8906%" y="85" width="5.7931%" height="15" fill="rgb(218,30,26)"/><text x="21.1406%" y="95.50">mir_bui..</text></g><g><title>thir_body (3,989,772 samples, 0.30%)</title><rect x="28.6679%" y="53" width="0.3013%" height="15" fill="rgb(220,122,19)"/><text x="28.9179%" y="63.50"></text></g><g><title>mir_const (23,185,674 samples, 1.75%)</title><rect x="27.2324%" y="101" width="1.7509%" height="15" fill="rgb(250,228,42)"/><text x="27.4824%" y="111.50"></text></g><g><title>unsafety_check_result (18,027,101 samples, 1.36%)</title><rect x="27.6220%" y="85" width="1.3614%" height="15" fill="rgb(240,193,28)"/><text x="27.8720%" y="95.50"></text></g><g><title>mir_built (16,088,857 samples, 1.21%)</title><rect x="27.7683%" y="69" width="1.2150%" height="15" fill="rgb(216,20,37)"/><text x="28.0183%" y="79.50"></text></g><g><title>mir_const_qualif (30,920,136 samples, 2.33%)</title><rect x="26.6837%" y="117" width="2.3350%" height="15" fill="rgb(206,188,39)"/><text x="26.9337%" y="127.50">m..</text></g><g><title>mir_promoted (148,122,483 samples, 11.19%)</title><rect x="17.8330%" y="133" width="11.1858%" height="15" fill="rgb(217,207,13)"/><text x="18.0830%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,040,448 samples, 0.23%)</title><rect x="29.0302%" y="133" width="0.2296%" height="15" fill="rgb(231,73,38)"/><text x="29.2802%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,867,128 samples, 0.52%)</title><rect x="29.3766%" y="133" width="0.5186%" height="15" fill="rgb(225,20,46)"/><text x="29.6266%" y="143.50"></text></g><g><title>MIR_borrow_checking (390,693,788 samples, 29.50%)</title><rect x="0.3920%" y="165" width="29.5040%" height="15" fill="rgb(210,31,41)"/><text x="0.6420%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (385,329,988 samples, 29.10%)</title><rect x="0.7971%" y="149" width="29.0990%" height="15" fill="rgb(221,200,47)"/><text x="1.0471%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (15,120,589 samples, 1.14%)</title><rect x="29.8961%" y="165" width="1.1419%" height="15" fill="rgb(226,26,5)"/><text x="30.1461%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,242,097 samples, 0.92%)</title><rect x="30.1134%" y="149" width="0.9245%" height="15" fill="rgb(249,33,26)"/><text x="30.3634%" y="159.50"></text></g><g><title>hir_module_items (3,407,718 samples, 0.26%)</title><rect x="31.0379%" y="165" width="0.2573%" height="15" fill="rgb(235,183,28)"/><text x="31.2879%" y="175.50"></text></g><g><title>get_lang_items (1,453,376 samples, 0.11%)</title><rect x="31.8121%" y="117" width="0.1098%" height="15" fill="rgb(221,5,38)"/><text x="32.0621%" y="127.50"></text></g><g><title>should_inherit_track_caller (2,628,326 samples, 0.20%)</title><rect x="31.9219%" y="117" width="0.1985%" height="15" fill="rgb(247,18,42)"/><text x="32.1719%" y="127.50"></text></g><g><title>codegen_fn_attrs (4,946,994 samples, 0.37%)</title><rect x="31.7489%" y="133" width="0.3736%" height="15" fill="rgb(241,131,45)"/><text x="31.9989%" y="143.50"></text></g><g><title>check_mod_attrs (10,912,922 samples, 0.82%)</title><rect x="31.2984%" y="149" width="0.8241%" height="15" fill="rgb(249,31,29)"/><text x="31.5484%" y="159.50"></text></g><g><title>check_mod_const_bodies (2,389,856 samples, 0.18%)</title><rect x="32.1225%" y="149" width="0.1805%" height="15" fill="rgb(225,111,53)"/><text x="32.3725%" y="159.50"></text></g><g><title>check_mod_loops (1,486,657 samples, 0.11%)</title><rect x="32.3030%" y="149" width="0.1123%" height="15" fill="rgb(238,160,17)"/><text x="32.5530%" y="159.50"></text></g><g><title>lookup_deprecation_entry (2,179,775 samples, 0.16%)</title><rect x="32.5786%" y="133" width="0.1646%" height="15" fill="rgb(214,148,48)"/><text x="32.8286%" y="143.50"></text></g><g><title>stability_index (2,070,243 samples, 0.16%)</title><rect x="32.5869%" y="117" width="0.1563%" height="15" fill="rgb(232,36,49)"/><text x="32.8369%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (4,183,787 samples, 0.32%)</title><rect x="32.4383%" y="149" width="0.3159%" height="15" fill="rgb(209,103,24)"/><text x="32.6883%" y="159.50"></text></g><g><title>misc_checking_1 (19,691,060 samples, 1.49%)</title><rect x="31.2953%" y="165" width="1.4870%" height="15" fill="rgb(229,88,8)"/><text x="31.5453%" y="175.50"></text></g><g><title>check_mod_intrinsics (1,765,500 samples, 0.13%)</title><rect x="32.7836%" y="133" width="0.1333%" height="15" fill="rgb(213,181,19)"/><text x="33.0336%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (7,985,429 samples, 0.60%)</title><rect x="32.7826%" y="149" width="0.6030%" height="15" fill="rgb(254,191,54)"/><text x="33.0326%" y="159.50"></text></g><g><title>check_mod_liveness (6,207,029 samples, 0.47%)</title><rect x="32.9169%" y="133" width="0.4687%" height="15" fill="rgb(241,83,37)"/><text x="33.1669%" y="143.50"></text></g><g><title>misc_checking_2 (18,790,230 samples, 1.42%)</title><rect x="32.7823%" y="165" width="1.4190%" height="15" fill="rgb(233,36,39)"/><text x="33.0323%" y="175.50"></text></g><g><title>match_checking (10,801,011 samples, 0.82%)</title><rect x="33.3856%" y="149" width="0.8157%" height="15" fill="rgb(226,3,54)"/><text x="33.6356%" y="159.50"></text></g><g><title>check_match (9,669,420 samples, 0.73%)</title><rect x="33.4711%" y="133" width="0.7302%" height="15" fill="rgb(245,192,40)"/><text x="33.7211%" y="143.50"></text></g><g><title>check_private_in_public (4,746,893 samples, 0.36%)</title><rect x="34.2029%" y="149" width="0.3585%" height="15" fill="rgb(238,167,29)"/><text x="34.4529%" y="159.50"></text></g><g><title>death_checking (8,133,981 samples, 0.61%)</title><rect x="34.5614%" y="149" width="0.6143%" height="15" fill="rgb(232,182,51)"/><text x="34.8114%" y="159.50"></text></g><g><title>crate_lints (10,830,272 samples, 0.82%)</title><rect x="35.1760%" y="133" width="0.8179%" height="15" fill="rgb(231,60,39)"/><text x="35.4260%" y="143.50"></text></g><g><title>lint_checking (20,975,045 samples, 1.58%)</title><rect x="35.1757%" y="149" width="1.5840%" height="15" fill="rgb(208,69,12)"/><text x="35.4257%" y="159.50"></text></g><g><title>module_lints (10,140,413 samples, 0.77%)</title><rect x="35.9939%" y="133" width="0.7658%" height="15" fill="rgb(235,93,37)"/><text x="36.2439%" y="143.50"></text></g><g><title>lint_mod (10,128,893 samples, 0.76%)</title><rect x="35.9947%" y="117" width="0.7649%" height="15" fill="rgb(213,116,39)"/><text x="36.2447%" y="127.50"></text></g><g><title>privacy_access_levels (5,064,637 samples, 0.38%)</title><rect x="36.7596%" y="149" width="0.3825%" height="15" fill="rgb(222,207,29)"/><text x="37.0096%" y="159.50"></text></g><g><title>privacy_checking_modules (15,010,728 samples, 1.13%)</title><rect x="37.1421%" y="149" width="1.1336%" height="15" fill="rgb(206,96,30)"/><text x="37.3921%" y="159.50"></text></g><g><title>check_mod_privacy (15,000,877 samples, 1.13%)</title><rect x="37.1428%" y="133" width="1.1328%" height="15" fill="rgb(218,138,4)"/><text x="37.3928%" y="143.50"></text></g><g><title>misc_checking_3 (54,184,496 samples, 4.09%)</title><rect x="34.2013%" y="165" width="4.0919%" height="15" fill="rgb(250,191,14)"/><text x="34.4513%" y="175.50">misc..</text></g><g><title>impl_parent (1,636,238 samples, 0.12%)</title><rect x="38.6720%" y="101" width="0.1236%" height="15" fill="rgb(239,60,40)"/><text x="38.9220%" y="111.50"></text></g><g><title>impl_trait_ref (3,087,482 samples, 0.23%)</title><rect x="38.7956%" y="101" width="0.2332%" height="15" fill="rgb(206,27,48)"/><text x="39.0456%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,340,503 samples, 0.18%)</title><rect x="38.8520%" y="85" width="0.1767%" height="15" fill="rgb(225,35,8)"/><text x="39.1020%" y="95.50"></text></g><g><title>coherent_trait (9,030,519 samples, 0.68%)</title><rect x="38.4022%" y="133" width="0.6820%" height="15" fill="rgb(250,213,24)"/><text x="38.6522%" y="143.50"></text></g><g><title>specialization_graph_of (8,648,395 samples, 0.65%)</title><rect x="38.4310%" y="117" width="0.6531%" height="15" fill="rgb(247,123,22)"/><text x="38.6810%" y="127.50"></text></g><g><title>coherence_checking (9,786,889 samples, 0.74%)</title><rect x="38.3989%" y="149" width="0.7391%" height="15" fill="rgb(231,138,38)"/><text x="38.6489%" y="159.50"></text></g><g><title>generics_of (1,388,841 samples, 0.10%)</title><rect x="67.2416%" y="85" width="0.1049%" height="15" fill="rgb(231,145,46)"/><text x="67.4916%" y="95.50"></text></g><g><title>predicates_of (1,354,114 samples, 0.10%)</title><rect x="67.4783%" y="85" width="0.1023%" height="15" fill="rgb(251,118,11)"/><text x="67.7283%" y="95.50"></text></g><g><title>specializes (3,579,551 samples, 0.27%)</title><rect x="67.5805%" y="85" width="0.2703%" height="15" fill="rgb(217,147,25)"/><text x="67.8305%" y="95.50"></text></g><g><title>param_env (1,997,823 samples, 0.15%)</title><rect x="67.7000%" y="69" width="0.1509%" height="15" fill="rgb(247,81,37)"/><text x="67.9500%" y="79.50"></text></g><g><title>evaluate_obligation (16,579,899 samples, 1.25%)</title><rect x="66.6216%" y="101" width="1.2521%" height="15" fill="rgb(209,12,38)"/><text x="66.8716%" y="111.50"></text></g><g><title>typeck (8,460,566 samples, 0.64%)</title><rect x="68.1863%" y="101" width="0.6389%" height="15" fill="rgb(227,1,9)"/><text x="68.4363%" y="111.50"></text></g><g><title>item_bodies_checking (392,971,573 samples, 29.68%)</title><rect x="39.2033%" y="149" width="29.6761%" height="15" fill="rgb(248,47,43)"/><text x="39.4533%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (392,966,723 samples, 29.68%)</title><rect x="39.2037%" y="133" width="29.6757%" height="15" fill="rgb(221,10,30)"/><text x="39.4537%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (390,084,538 samples, 29.46%)</title><rect x="39.4214%" y="117" width="29.4580%" height="15" fill="rgb(210,229,1)"/><text x="39.6714%" y="127.50">typeck</text></g><g><title>item_types_checking (17,364,715 samples, 1.31%)</title><rect x="68.8794%" y="149" width="1.3113%" height="15" fill="rgb(222,148,37)"/><text x="69.1294%" y="159.50"></text></g><g><title>check_mod_item_types (17,356,865 samples, 1.31%)</title><rect x="68.8800%" y="133" width="1.3107%" height="15" fill="rgb(234,67,33)"/><text x="69.1300%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,209,416 samples, 0.24%)</title><rect x="70.5880%" y="117" width="0.2424%" height="15" fill="rgb(247,98,35)"/><text x="70.8380%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,186,185 samples, 0.24%)</title><rect x="70.5898%" y="101" width="0.2406%" height="15" fill="rgb(247,138,52)"/><text x="70.8398%" y="111.50"></text></g><g><title>eval_to_allocation_raw (3,165,815 samples, 0.24%)</title><rect x="70.5913%" y="85" width="0.2391%" height="15" fill="rgb(213,79,30)"/><text x="70.8413%" y="95.50"></text></g><g><title>late_bound_vars_map (1,850,619 samples, 0.14%)</title><rect x="71.0219%" y="101" width="0.1398%" height="15" fill="rgb(246,177,23)"/><text x="71.2719%" y="111.50"></text></g><g><title>resolve_lifetimes (1,485,484 samples, 0.11%)</title><rect x="71.0494%" y="85" width="0.1122%" height="15" fill="rgb(230,62,27)"/><text x="71.2994%" y="95.50"></text></g><g><title>fn_sig (4,412,611 samples, 0.33%)</title><rect x="70.8304%" y="117" width="0.3332%" height="15" fill="rgb(216,154,8)"/><text x="71.0804%" y="127.50"></text></g><g><title>named_region_map (10,734,521 samples, 0.81%)</title><rect x="71.3190%" y="101" width="0.8106%" height="15" fill="rgb(244,35,45)"/><text x="71.5690%" y="111.50"></text></g><g><title>resolve_lifetimes (10,287,069 samples, 0.78%)</title><rect x="71.3528%" y="85" width="0.7768%" height="15" fill="rgb(251,115,12)"/><text x="71.6028%" y="95.50"></text></g><g><title>lint_levels (5,707,904 samples, 0.43%)</title><rect x="71.6986%" y="69" width="0.4310%" height="15" fill="rgb(240,54,50)"/><text x="71.9486%" y="79.50"></text></g><g><title>generics_of (13,077,364 samples, 0.99%)</title><rect x="71.1636%" y="117" width="0.9876%" height="15" fill="rgb(233,84,52)"/><text x="71.4136%" y="127.50"></text></g><g><title>explicit_predicates_of (1,746,631 samples, 0.13%)</title><rect x="72.4386%" y="85" width="0.1319%" height="15" fill="rgb(207,117,47)"/><text x="72.6886%" y="95.50"></text></g><g><title>predicates_of (5,920,623 samples, 0.45%)</title><rect x="72.2003%" y="117" width="0.4471%" height="15" fill="rgb(249,43,39)"/><text x="72.4503%" y="127.50"></text></g><g><title>predicates_defined_on (4,523,775 samples, 0.34%)</title><rect x="72.3058%" y="101" width="0.3416%" height="15" fill="rgb(209,38,44)"/><text x="72.5558%" y="111.50"></text></g><g><title>type_collecting (33,659,276 samples, 2.54%)</title><rect x="70.1909%" y="149" width="2.5418%" height="15" fill="rgb(236,212,23)"/><text x="70.4409%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (33,646,006 samples, 2.54%)</title><rect x="70.1919%" y="133" width="2.5408%" height="15" fill="rgb(242,79,21)"/><text x="70.4419%" y="143.50">co..</text></g><g><title>evaluate_obligation (2,462,619 samples, 0.19%)</title><rect x="75.4322%" y="117" width="0.1860%" height="15" fill="rgb(211,96,35)"/><text x="75.6822%" y="127.50"></text></g><g><title>param_env (6,458,193 samples, 0.49%)</title><rect x="75.6939%" y="117" width="0.4877%" height="15" fill="rgb(253,215,40)"/><text x="75.9439%" y="127.50"></text></g><g><title>region_scope_tree (8,702,027 samples, 0.66%)</title><rect x="76.1851%" y="117" width="0.6572%" height="15" fill="rgb(211,81,21)"/><text x="76.4351%" y="127.50"></text></g><g><title>check_impl_item_well_formed (50,498,095 samples, 3.81%)</title><rect x="73.0301%" y="133" width="3.8135%" height="15" fill="rgb(208,190,38)"/><text x="73.2801%" y="143.50">chec..</text></g><g><title>evaluate_obligation (4,553,977 samples, 0.34%)</title><rect x="77.6140%" y="117" width="0.3439%" height="15" fill="rgb(235,213,38)"/><text x="77.8640%" y="127.50"></text></g><g><title>param_env (2,598,380 samples, 0.20%)</title><rect x="77.9912%" y="117" width="0.1962%" height="15" fill="rgb(237,122,38)"/><text x="78.2412%" y="127.50"></text></g><g><title>check_item_well_formed (18,857,928 samples, 1.42%)</title><rect x="76.8435%" y="133" width="1.4241%" height="15" fill="rgb(244,218,35)"/><text x="77.0935%" y="143.50"></text></g><g><title>param_env (2,006,596 samples, 0.15%)</title><rect x="78.8359%" y="117" width="0.1515%" height="15" fill="rgb(240,68,47)"/><text x="79.0859%" y="127.50"></text></g><g><title>analysis (1,045,863,823 samples, 78.98%)</title><rect x="0.0680%" y="181" width="78.9805%" height="15" fill="rgb(210,16,53)"/><text x="0.3180%" y="191.50">analysis</text></g><g><title>type_check_crate (539,684,404 samples, 40.76%)</title><rect x="38.2931%" y="165" width="40.7554%" height="15" fill="rgb(235,124,12)"/><text x="38.5431%" y="175.50">type_check_crate</text></g><g><title>wf_checking (83,409,013 samples, 6.30%)</title><rect x="72.7497%" y="149" width="6.2988%" height="15" fill="rgb(224,169,11)"/><text x="72.9997%" y="159.50">wf_check..</text></g><g><title>check_trait_item_well_formed (10,340,339 samples, 0.78%)</title><rect x="78.2676%" y="133" width="0.7809%" height="15" fill="rgb(250,166,2)"/><text x="78.5176%" y="143.50"></text></g><g><title>AST_validation (3,065,164 samples, 0.23%)</title><rect x="79.1001%" y="165" width="0.2315%" height="15" fill="rgb(242,216,29)"/><text x="79.3501%" y="175.50"></text></g><g><title>complete_gated_feature_checking (2,063,303 samples, 0.16%)</title><rect x="79.3315%" y="165" width="0.1558%" height="15" fill="rgb(230,116,27)"/><text x="79.5815%" y="175.50"></text></g><g><title>macro_expand_crate (104,314,276 samples, 7.88%)</title><rect x="79.4910%" y="165" width="7.8775%" height="15" fill="rgb(228,99,48)"/><text x="79.7410%" y="175.50">macro_expan..</text></g><g><title>expand_crate (104,287,866 samples, 7.88%)</title><rect x="79.4930%" y="149" width="7.8755%" height="15" fill="rgb(253,11,6)"/><text x="79.7430%" y="159.50">expand_crate</text></g><g><title>finalize_macro_resolutions (1,917,392 samples, 0.14%)</title><rect x="87.4205%" y="149" width="0.1448%" height="15" fill="rgb(247,143,39)"/><text x="87.6705%" y="159.50"></text></g><g><title>late_resolve_crate (23,280,030 samples, 1.76%)</title><rect x="87.5653%" y="149" width="1.7580%" height="15" fill="rgb(236,97,10)"/><text x="87.8153%" y="159.50"></text></g><g><title>resolve_check_unused (1,818,950 samples, 0.14%)</title><rect x="89.3285%" y="149" width="0.1374%" height="15" fill="rgb(233,208,19)"/><text x="89.5785%" y="159.50"></text></g><g><title>resolve_postprocess (1,576,058 samples, 0.12%)</title><rect x="89.4659%" y="149" width="0.1190%" height="15" fill="rgb(216,164,2)"/><text x="89.7159%" y="159.50"></text></g><g><title>configure_and_expand (138,985,684 samples, 10.50%)</title><rect x="79.0892%" y="181" width="10.4958%" height="15" fill="rgb(220,129,5)"/><text x="79.3392%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (28,760,721 samples, 2.17%)</title><rect x="87.4131%" y="165" width="2.1719%" height="15" fill="rgb(242,17,10)"/><text x="87.6631%" y="175.50">r..</text></g><g><title>drop_ast (8,791,628 samples, 0.66%)</title><rect x="89.5850%" y="181" width="0.6639%" height="15" fill="rgb(242,107,0)"/><text x="89.8350%" y="191.50"></text></g><g><title>early_lint_checks (7,164,630 samples, 0.54%)</title><rect x="90.2506%" y="181" width="0.5411%" height="15" fill="rgb(251,28,31)"/><text x="90.5006%" y="191.50"></text></g><g><title>free_global_ctxt (13,221,338 samples, 1.00%)</title><rect x="90.7916%" y="181" width="0.9984%" height="15" fill="rgb(233,223,10)"/><text x="91.0416%" y="191.50"></text></g><g><title>eval_to_const_value_raw (2,960,736 samples, 0.22%)</title><rect x="94.1960%" y="133" width="0.2236%" height="15" fill="rgb(215,21,27)"/><text x="94.4460%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,767,104 samples, 0.21%)</title><rect x="94.2107%" y="117" width="0.2090%" height="15" fill="rgb(232,23,21)"/><text x="94.4607%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,501,472 samples, 0.19%)</title><rect x="94.2307%" y="101" width="0.1889%" height="15" fill="rgb(244,5,23)"/><text x="94.4807%" y="111.50"></text></g><g><title>mir_for_ctfe (14,529,328 samples, 1.10%)</title><rect x="93.3406%" y="165" width="1.0972%" height="15" fill="rgb(226,81,46)"/><text x="93.5906%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,285,135 samples, 0.32%)</title><rect x="94.1142%" y="149" width="0.3236%" height="15" fill="rgb(247,70,30)"/><text x="94.3642%" y="159.50"></text></g><g><title>generate_crate_metadata (36,100,474 samples, 2.73%)</title><rect x="91.7901%" y="181" width="2.7262%" height="15" fill="rgb(212,68,19)"/><text x="92.0401%" y="191.50">ge..</text></g><g><title>hir_lowering (54,646,701 samples, 4.13%)</title><rect x="94.5163%" y="181" width="4.1268%" height="15" fill="rgb(240,187,13)"/><text x="94.7663%" y="191.50">hir_..</text></g><g><title>parse_crate (12,123,536 samples, 0.92%)</title><rect x="98.6478%" y="181" width="0.9155%" height="15" fill="rgb(223,113,26)"/><text x="98.8978%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,986,645 samples, 0.30%)</title><rect x="99.5825%" y="181" width="0.3011%" height="15" fill="rgb(206,192,2)"/><text x="99.8325%" y="191.50"></text></g><g><title>all (1,324,204,286 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,324,204,286 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>