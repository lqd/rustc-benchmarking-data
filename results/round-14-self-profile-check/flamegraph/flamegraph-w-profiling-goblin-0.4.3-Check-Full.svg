<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (24,016,355 samples, 0.56%)</title><rect x="19.5254%" y="53" width="0.5625%" height="15" fill="rgb(227,0,7)"/><text x="19.7754%" y="63.50"></text></g><g><title>evaluate_obligation (19,596,756 samples, 0.46%)</title><rect x="19.6290%" y="37" width="0.4590%" height="15" fill="rgb(217,0,24)"/><text x="19.8790%" y="47.50"></text></g><g><title>needs_drop_raw (30,000,915 samples, 0.70%)</title><rect x="19.3854%" y="69" width="0.7027%" height="15" fill="rgb(221,193,54)"/><text x="19.6354%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (18,248,076 samples, 0.43%)</title><rect x="20.2086%" y="53" width="0.4274%" height="15" fill="rgb(248,212,6)"/><text x="20.4586%" y="63.50"></text></g><g><title>evaluate_obligation (6,774,857 samples, 0.16%)</title><rect x="20.4773%" y="37" width="0.1587%" height="15" fill="rgb(208,68,35)"/><text x="20.7273%" y="47.50"></text></g><g><title>resolve_instance (25,718,354 samples, 0.60%)</title><rect x="20.0892%" y="69" width="0.6024%" height="15" fill="rgb(232,128,0)"/><text x="20.3392%" y="79.50"></text></g><g><title>thir_body (60,517,107 samples, 1.42%)</title><rect x="20.7092%" y="69" width="1.4175%" height="15" fill="rgb(207,160,47)"/><text x="20.9592%" y="79.50"></text></g><g><title>mir_const (303,225,452 samples, 7.10%)</title><rect x="15.0344%" y="117" width="7.1024%" height="15" fill="rgb(228,23,34)"/><text x="15.2844%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (271,223,086 samples, 6.35%)</title><rect x="15.7840%" y="101" width="6.3528%" height="15" fill="rgb(218,30,26)"/><text x="16.0340%" y="111.50">unsafety..</text></g><g><title>mir_built (249,896,473 samples, 5.85%)</title><rect x="16.2835%" y="85" width="5.8533%" height="15" fill="rgb(220,122,19)"/><text x="16.5335%" y="95.50">mir_bui..</text></g><g><title>mir_const_qualif (16,168,388 samples, 0.38%)</title><rect x="22.1368%" y="117" width="0.3787%" height="15" fill="rgb(250,228,42)"/><text x="22.3868%" y="127.50"></text></g><g><title>mir_const (11,832,547 samples, 0.28%)</title><rect x="22.2384%" y="101" width="0.2772%" height="15" fill="rgb(240,193,28)"/><text x="22.4884%" y="111.50"></text></g><g><title>unsafety_check_result (8,501,815 samples, 0.20%)</title><rect x="22.3164%" y="85" width="0.1991%" height="15" fill="rgb(216,20,37)"/><text x="22.5664%" y="95.50"></text></g><g><title>mir_built (7,494,427 samples, 0.18%)</title><rect x="22.3400%" y="69" width="0.1755%" height="15" fill="rgb(206,188,39)"/><text x="22.5900%" y="79.50"></text></g><g><title>mir_promoted (353,600,084 samples, 8.28%)</title><rect x="14.2333%" y="133" width="8.2823%" height="15" fill="rgb(217,207,13)"/><text x="14.4833%" y="143.50">mir_promoted</text></g><g><title>evaluate_obligation (6,051,468 samples, 0.14%)</title><rect x="23.2596%" y="117" width="0.1417%" height="15" fill="rgb(231,73,38)"/><text x="23.5096%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (37,809,707 samples, 0.89%)</title><rect x="22.5166%" y="133" width="0.8856%" height="15" fill="rgb(225,20,46)"/><text x="22.7666%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (14,137,011 samples, 0.33%)</title><rect x="23.4022%" y="133" width="0.3311%" height="15" fill="rgb(210,31,41)"/><text x="23.6522%" y="143.50"></text></g><g><title>normalize_projection_ty (8,936,185 samples, 0.21%)</title><rect x="23.5240%" y="117" width="0.2093%" height="15" fill="rgb(221,200,47)"/><text x="23.7740%" y="127.50"></text></g><g><title>type_op_normalize_predicate (12,560,411 samples, 0.29%)</title><rect x="23.7334%" y="133" width="0.2942%" height="15" fill="rgb(226,26,5)"/><text x="23.9834%" y="143.50"></text></g><g><title>normalize_projection_ty (7,869,459 samples, 0.18%)</title><rect x="23.8432%" y="117" width="0.1843%" height="15" fill="rgb(249,33,26)"/><text x="24.0932%" y="127.50"></text></g><g><title>type_op_normalize_ty (9,788,748 samples, 0.23%)</title><rect x="24.0276%" y="133" width="0.2293%" height="15" fill="rgb(235,183,28)"/><text x="24.2776%" y="143.50"></text></g><g><title>normalize_projection_ty (5,987,178 samples, 0.14%)</title><rect x="24.1166%" y="117" width="0.1402%" height="15" fill="rgb(221,5,38)"/><text x="24.3666%" y="127.50"></text></g><g><title>type_op_prove_predicate (48,659,864 samples, 1.14%)</title><rect x="24.2568%" y="133" width="1.1398%" height="15" fill="rgb(247,18,42)"/><text x="24.5068%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,072,089,710 samples, 25.11%)</title><rect x="0.2880%" y="165" width="25.1114%" height="15" fill="rgb(241,131,45)"/><text x="0.5380%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,063,212,410 samples, 24.90%)</title><rect x="0.4960%" y="149" width="24.9035%" height="15" fill="rgb(249,31,29)"/><text x="0.7460%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (9,476,945 samples, 0.22%)</title><rect x="25.3994%" y="165" width="0.2220%" height="15" fill="rgb(225,111,53)"/><text x="25.6494%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,729,954 samples, 0.16%)</title><rect x="25.4638%" y="149" width="0.1576%" height="15" fill="rgb(238,160,17)"/><text x="25.7138%" y="159.50"></text></g><g><title>hir_module_items (7,500,621 samples, 0.18%)</title><rect x="25.6214%" y="165" width="0.1757%" height="15" fill="rgb(214,148,48)"/><text x="25.8714%" y="175.50"></text></g><g><title>codegen_fn_attrs (6,273,208 samples, 0.15%)</title><rect x="26.1049%" y="133" width="0.1469%" height="15" fill="rgb(232,36,49)"/><text x="26.3549%" y="143.50"></text></g><g><title>check_mod_attrs (19,217,174 samples, 0.45%)</title><rect x="25.8018%" y="149" width="0.4501%" height="15" fill="rgb(209,103,24)"/><text x="26.0518%" y="159.50"></text></g><g><title>check_mod_const_bodies (4,466,053 samples, 0.10%)</title><rect x="26.2519%" y="149" width="0.1046%" height="15" fill="rgb(229,88,8)"/><text x="26.5019%" y="159.50"></text></g><g><title>check_mod_loops (7,063,277 samples, 0.17%)</title><rect x="26.3565%" y="149" width="0.1654%" height="15" fill="rgb(213,181,19)"/><text x="26.6065%" y="159.50"></text></g><g><title>lint_levels (12,415,439 samples, 0.29%)</title><rect x="26.6353%" y="133" width="0.2908%" height="15" fill="rgb(254,191,54)"/><text x="26.8853%" y="143.50"></text></g><g><title>lookup_deprecation_entry (6,123,528 samples, 0.14%)</title><rect x="26.9261%" y="133" width="0.1434%" height="15" fill="rgb(241,83,37)"/><text x="27.1761%" y="143.50"></text></g><g><title>stability_index (5,868,795 samples, 0.14%)</title><rect x="26.9321%" y="117" width="0.1375%" height="15" fill="rgb(233,36,39)"/><text x="27.1821%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (23,118,628 samples, 0.54%)</title><rect x="26.5349%" y="149" width="0.5415%" height="15" fill="rgb(226,3,54)"/><text x="26.7849%" y="159.50"></text></g><g><title>misc_checking_1 (56,698,312 samples, 1.33%)</title><rect x="25.7971%" y="165" width="1.3280%" height="15" fill="rgb(245,192,40)"/><text x="26.0471%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (20,624,780 samples, 0.48%)</title><rect x="27.1252%" y="149" width="0.4831%" height="15" fill="rgb(238,167,29)"/><text x="27.3752%" y="159.50"></text></g><g><title>check_mod_liveness (16,402,786 samples, 0.38%)</title><rect x="27.2241%" y="133" width="0.3842%" height="15" fill="rgb(232,182,51)"/><text x="27.4741%" y="143.50"></text></g><g><title>mir_borrowck (45,216,965 samples, 1.06%)</title><rect x="29.3672%" y="37" width="1.0591%" height="15" fill="rgb(231,60,39)"/><text x="29.6172%" y="47.50"></text></g><g><title>mir_for_ctfe (71,074,072 samples, 1.66%)</title><rect x="28.7690%" y="69" width="1.6648%" height="15" fill="rgb(208,69,12)"/><text x="29.0190%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (64,873,841 samples, 1.52%)</title><rect x="28.9143%" y="53" width="1.5195%" height="15" fill="rgb(235,93,37)"/><text x="29.1643%" y="63.50"></text></g><g><title>eval_to_const_value_raw (86,079,593 samples, 2.02%)</title><rect x="28.4324%" y="117" width="2.0162%" height="15" fill="rgb(213,116,39)"/><text x="28.6824%" y="127.50">e..</text></g><g><title>eval_to_const_value_raw (85,035,635 samples, 1.99%)</title><rect x="28.4568%" y="101" width="1.9918%" height="15" fill="rgb(222,207,29)"/><text x="28.7068%" y="111.50">e..</text></g><g><title>eval_to_allocation_raw (83,254,578 samples, 1.95%)</title><rect x="28.4985%" y="85" width="1.9501%" height="15" fill="rgb(206,96,30)"/><text x="28.7485%" y="95.50">e..</text></g><g><title>mir_const_qualif (19,698,703 samples, 0.46%)</title><rect x="30.4503%" y="117" width="0.4614%" height="15" fill="rgb(218,138,4)"/><text x="30.7003%" y="127.50"></text></g><g><title>mir_const (16,630,925 samples, 0.39%)</title><rect x="30.5222%" y="101" width="0.3895%" height="15" fill="rgb(250,191,14)"/><text x="30.7722%" y="111.50"></text></g><g><title>unsafety_check_result (11,927,606 samples, 0.28%)</title><rect x="30.6323%" y="85" width="0.2794%" height="15" fill="rgb(239,60,40)"/><text x="30.8823%" y="95.50"></text></g><g><title>mir_built (10,375,016 samples, 0.24%)</title><rect x="30.6687%" y="69" width="0.2430%" height="15" fill="rgb(206,27,48)"/><text x="30.9187%" y="79.50"></text></g><g><title>misc_checking_2 (163,948,106 samples, 3.84%)</title><rect x="27.1252%" y="165" width="3.8401%" height="15" fill="rgb(225,35,8)"/><text x="27.3752%" y="175.50">misc..</text></g><g><title>match_checking (143,319,916 samples, 3.36%)</title><rect x="27.6083%" y="149" width="3.3570%" height="15" fill="rgb(250,213,24)"/><text x="27.8583%" y="159.50">mat..</text></g><g><title>check_match (141,236,530 samples, 3.31%)</title><rect x="27.6571%" y="133" width="3.3082%" height="15" fill="rgb(247,123,22)"/><text x="27.9071%" y="143.50">che..</text></g><g><title>check_private_in_public (14,681,074 samples, 0.34%)</title><rect x="30.9659%" y="149" width="0.3439%" height="15" fill="rgb(231,138,38)"/><text x="31.2159%" y="159.50"></text></g><g><title>death_checking (22,899,245 samples, 0.54%)</title><rect x="31.3098%" y="149" width="0.5364%" height="15" fill="rgb(231,145,46)"/><text x="31.5598%" y="159.50"></text></g><g><title>eval_to_const_value_raw (7,053,948 samples, 0.17%)</title><rect x="32.3990%" y="117" width="0.1652%" height="15" fill="rgb(251,118,11)"/><text x="32.6490%" y="127.50"></text></g><g><title>eval_to_const_value_raw (6,733,108 samples, 0.16%)</title><rect x="32.4065%" y="101" width="0.1577%" height="15" fill="rgb(217,147,25)"/><text x="32.6565%" y="111.50"></text></g><g><title>eval_to_allocation_raw (6,201,142 samples, 0.15%)</title><rect x="32.4189%" y="85" width="0.1452%" height="15" fill="rgb(247,81,37)"/><text x="32.6689%" y="95.50"></text></g><g><title>param_env (7,389,751 samples, 0.17%)</title><rect x="32.5642%" y="117" width="0.1731%" height="15" fill="rgb(209,12,38)"/><text x="32.8142%" y="127.50"></text></g><g><title>crate_lints (39,506,950 samples, 0.93%)</title><rect x="31.8462%" y="133" width="0.9254%" height="15" fill="rgb(227,1,9)"/><text x="32.0962%" y="143.50"></text></g><g><title>lint_checking (67,169,218 samples, 1.57%)</title><rect x="31.8461%" y="149" width="1.5733%" height="15" fill="rgb(248,47,43)"/><text x="32.0961%" y="159.50"></text></g><g><title>module_lints (27,658,778 samples, 0.65%)</title><rect x="32.7716%" y="133" width="0.6478%" height="15" fill="rgb(221,10,30)"/><text x="33.0216%" y="143.50"></text></g><g><title>lint_mod (27,594,215 samples, 0.65%)</title><rect x="32.7731%" y="117" width="0.6463%" height="15" fill="rgb(210,229,1)"/><text x="33.0231%" y="127.50"></text></g><g><title>privacy_access_levels (16,876,868 samples, 0.40%)</title><rect x="33.4194%" y="149" width="0.3953%" height="15" fill="rgb(222,148,37)"/><text x="33.6694%" y="159.50"></text></g><g><title>privacy_checking_modules (42,400,613 samples, 0.99%)</title><rect x="33.8147%" y="149" width="0.9931%" height="15" fill="rgb(234,67,33)"/><text x="34.0647%" y="159.50"></text></g><g><title>check_mod_privacy (42,342,452 samples, 0.99%)</title><rect x="33.8161%" y="133" width="0.9918%" height="15" fill="rgb(247,98,35)"/><text x="34.0661%" y="143.50"></text></g><g><title>misc_checking_3 (164,558,663 samples, 3.85%)</title><rect x="30.9653%" y="165" width="3.8544%" height="15" fill="rgb(247,138,52)"/><text x="31.2153%" y="175.50">misc..</text></g><g><title>impl_trait_ref (7,448,549 samples, 0.17%)</title><rect x="35.6043%" y="101" width="0.1745%" height="15" fill="rgb(213,79,30)"/><text x="35.8543%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,033,482 samples, 0.14%)</title><rect x="35.6375%" y="85" width="0.1413%" height="15" fill="rgb(246,177,23)"/><text x="35.8875%" y="95.50"></text></g><g><title>coherent_trait (40,169,057 samples, 0.94%)</title><rect x="34.8913%" y="133" width="0.9409%" height="15" fill="rgb(230,62,27)"/><text x="35.1413%" y="143.50"></text></g><g><title>specialization_graph_of (37,012,884 samples, 0.87%)</title><rect x="34.9652%" y="117" width="0.8669%" height="15" fill="rgb(216,154,8)"/><text x="35.2152%" y="127.50"></text></g><g><title>coherence_checking (41,795,085 samples, 0.98%)</title><rect x="34.8901%" y="149" width="0.9790%" height="15" fill="rgb(244,35,45)"/><text x="35.1401%" y="159.50"></text></g><g><title>dropck_outlives (7,110,212 samples, 0.17%)</title><rect x="61.7808%" y="101" width="0.1665%" height="15" fill="rgb(251,115,12)"/><text x="62.0308%" y="111.50"></text></g><g><title>evaluate_obligation (69,184,580 samples, 1.62%)</title><rect x="62.0022%" y="101" width="1.6205%" height="15" fill="rgb(240,54,50)"/><text x="62.2522%" y="111.50"></text></g><g><title>method_autoderef_steps (4,397,564 samples, 0.10%)</title><rect x="63.7190%" y="101" width="0.1030%" height="15" fill="rgb(233,84,52)"/><text x="63.9690%" y="111.50"></text></g><g><title>evaluate_obligation (7,412,720 samples, 0.17%)</title><rect x="67.6840%" y="85" width="0.1736%" height="15" fill="rgb(207,117,47)"/><text x="67.9340%" y="95.50"></text></g><g><title>typeck (172,050,419 samples, 4.03%)</title><rect x="63.9491%" y="101" width="4.0299%" height="15" fill="rgb(249,43,39)"/><text x="64.1991%" y="111.50">type..</text></g><g><title>item_bodies_checking (1,370,056,618 samples, 32.09%)</title><rect x="35.9052%" y="149" width="32.0906%" height="15" fill="rgb(209,38,44)"/><text x="36.1552%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,370,052,958 samples, 32.09%)</title><rect x="35.9053%" y="133" width="32.0906%" height="15" fill="rgb(236,212,23)"/><text x="36.1553%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,366,337,862 samples, 32.00%)</title><rect x="35.9923%" y="117" width="32.0035%" height="15" fill="rgb(242,79,21)"/><text x="36.2423%" y="127.50">typeck</text></g><g><title>evaluate_obligation (11,281,465 samples, 0.26%)</title><rect x="69.6561%" y="101" width="0.2642%" height="15" fill="rgb(211,96,35)"/><text x="69.9061%" y="111.50"></text></g><g><title>item_types_checking (82,997,574 samples, 1.94%)</title><rect x="67.9958%" y="149" width="1.9440%" height="15" fill="rgb(253,215,40)"/><text x="68.2458%" y="159.50">i..</text></g><g><title>check_mod_item_types (82,931,784 samples, 1.94%)</title><rect x="67.9974%" y="133" width="1.9425%" height="15" fill="rgb(211,81,21)"/><text x="68.2474%" y="143.50">c..</text></g><g><title>typeck (32,629,969 samples, 0.76%)</title><rect x="69.1756%" y="117" width="0.7643%" height="15" fill="rgb(208,190,38)"/><text x="69.4256%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,769,382 samples, 0.11%)</title><rect x="70.2162%" y="117" width="0.1117%" height="15" fill="rgb(235,213,38)"/><text x="70.4662%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,754,342 samples, 0.11%)</title><rect x="70.2165%" y="101" width="0.1114%" height="15" fill="rgb(237,122,38)"/><text x="70.4665%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,746,732 samples, 0.11%)</title><rect x="70.2167%" y="85" width="0.1112%" height="15" fill="rgb(244,218,35)"/><text x="70.4667%" y="95.50"></text></g><g><title>fn_sig (7,502,184 samples, 0.18%)</title><rect x="70.3279%" y="117" width="0.1757%" height="15" fill="rgb(240,68,47)"/><text x="70.5779%" y="127.50"></text></g><g><title>resolve_lifetimes (7,722,810 samples, 0.18%)</title><rect x="70.6123%" y="85" width="0.1809%" height="15" fill="rgb(210,16,53)"/><text x="70.8623%" y="95.50"></text></g><g><title>is_late_bound_map (8,192,594 samples, 0.19%)</title><rect x="70.6016%" y="101" width="0.1919%" height="15" fill="rgb(235,124,12)"/><text x="70.8516%" y="111.50"></text></g><g><title>named_region_map (7,359,163 samples, 0.17%)</title><rect x="70.7935%" y="101" width="0.1724%" height="15" fill="rgb(224,169,11)"/><text x="71.0435%" y="111.50"></text></g><g><title>resolve_lifetimes (6,685,403 samples, 0.16%)</title><rect x="70.8093%" y="85" width="0.1566%" height="15" fill="rgb(250,166,2)"/><text x="71.0593%" y="95.50"></text></g><g><title>generics_of (20,190,607 samples, 0.47%)</title><rect x="70.5036%" y="117" width="0.4729%" height="15" fill="rgb(242,216,29)"/><text x="70.7536%" y="127.50"></text></g><g><title>predicates_of (15,779,691 samples, 0.37%)</title><rect x="71.0147%" y="117" width="0.3696%" height="15" fill="rgb(230,116,27)"/><text x="71.2647%" y="127.50"></text></g><g><title>predicates_defined_on (12,819,801 samples, 0.30%)</title><rect x="71.0840%" y="101" width="0.3003%" height="15" fill="rgb(228,99,48)"/><text x="71.3340%" y="111.50"></text></g><g><title>inferred_outlives_of (5,161,352 samples, 0.12%)</title><rect x="71.2634%" y="85" width="0.1209%" height="15" fill="rgb(253,11,6)"/><text x="71.5134%" y="95.50"></text></g><g><title>inferred_outlives_crate (4,503,680 samples, 0.11%)</title><rect x="71.2788%" y="69" width="0.1055%" height="15" fill="rgb(247,143,39)"/><text x="71.5288%" y="79.50"></text></g><g><title>type_collecting (64,366,786 samples, 1.51%)</title><rect x="69.9419%" y="149" width="1.5077%" height="15" fill="rgb(236,97,10)"/><text x="70.1919%" y="159.50"></text></g><g><title>collect_mod_item_types (64,296,826 samples, 1.51%)</title><rect x="69.9435%" y="133" width="1.5060%" height="15" fill="rgb(233,208,19)"/><text x="70.1935%" y="143.50"></text></g><g><title>evaluate_obligation (5,409,410 samples, 0.13%)</title><rect x="72.7640%" y="117" width="0.1267%" height="15" fill="rgb(216,164,2)"/><text x="73.0140%" y="127.50"></text></g><g><title>param_env (7,088,201 samples, 0.17%)</title><rect x="73.0083%" y="117" width="0.1660%" height="15" fill="rgb(220,129,5)"/><text x="73.2583%" y="127.50"></text></g><g><title>region_scope_tree (17,277,307 samples, 0.40%)</title><rect x="73.1762%" y="117" width="0.4047%" height="15" fill="rgb(242,17,10)"/><text x="73.4262%" y="127.50"></text></g><g><title>check_impl_item_well_formed (82,825,357 samples, 1.94%)</title><rect x="71.6423%" y="133" width="1.9400%" height="15" fill="rgb(242,107,0)"/><text x="71.8923%" y="143.50">c..</text></g><g><title>evaluate_obligation (9,969,579 samples, 0.23%)</title><rect x="74.9817%" y="117" width="0.2335%" height="15" fill="rgb(251,28,31)"/><text x="75.2317%" y="127.50"></text></g><g><title>param_env (10,212,572 samples, 0.24%)</title><rect x="75.2673%" y="117" width="0.2392%" height="15" fill="rgb(233,223,10)"/><text x="75.5173%" y="127.50"></text></g><g><title>check_item_well_formed (88,066,305 samples, 2.06%)</title><rect x="73.5823%" y="133" width="2.0628%" height="15" fill="rgb(215,21,27)"/><text x="73.8323%" y="143.50">c..</text></g><g><title>analysis (3,228,232,782 samples, 75.61%)</title><rect x="0.0419%" y="181" width="75.6144%" height="15" fill="rgb(232,23,21)"/><text x="0.2919%" y="191.50">analysis</text></g><g><title>type_check_crate (1,743,452,686 samples, 40.84%)</title><rect x="34.8197%" y="165" width="40.8366%" height="15" fill="rgb(244,5,23)"/><text x="35.0697%" y="175.50">type_check_crate</text></g><g><title>wf_checking (179,295,037 samples, 4.20%)</title><rect x="71.4568%" y="149" width="4.1996%" height="15" fill="rgb(226,81,46)"/><text x="71.7068%" y="159.50">wf_ch..</text></g><g><title>AST_validation (6,580,343 samples, 0.15%)</title><rect x="75.6714%" y="165" width="0.1541%" height="15" fill="rgb(247,70,30)"/><text x="75.9214%" y="175.50"></text></g><g><title>complete_gated_feature_checking (5,241,999 samples, 0.12%)</title><rect x="75.8255%" y="165" width="0.1228%" height="15" fill="rgb(212,68,19)"/><text x="76.0755%" y="175.50"></text></g><g><title>macro_expand_crate (707,133,516 samples, 16.56%)</title><rect x="75.9502%" y="165" width="16.5631%" height="15" fill="rgb(240,187,13)"/><text x="76.2002%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (707,117,865 samples, 16.56%)</title><rect x="75.9506%" y="149" width="16.5627%" height="15" fill="rgb(223,113,26)"/><text x="76.2006%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (54,716,670 samples, 1.28%)</title><rect x="92.6190%" y="149" width="1.2816%" height="15" fill="rgb(206,192,2)"/><text x="92.8690%" y="159.50"></text></g><g><title>resolve_check_unused (4,504,489 samples, 0.11%)</title><rect x="93.9224%" y="149" width="0.1055%" height="15" fill="rgb(241,108,4)"/><text x="94.1724%" y="159.50"></text></g><g><title>configure_and_expand (787,951,925 samples, 18.46%)</title><rect x="75.6674%" y="181" width="18.4561%" height="15" fill="rgb(247,173,49)"/><text x="75.9174%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (68,633,554 samples, 1.61%)</title><rect x="92.5159%" y="165" width="1.6076%" height="15" fill="rgb(224,114,35)"/><text x="92.7659%" y="175.50"></text></g><g><title>drop_ast (19,047,422 samples, 0.45%)</title><rect x="94.1235%" y="181" width="0.4461%" height="15" fill="rgb(245,159,27)"/><text x="94.3735%" y="191.50"></text></g><g><title>early_lint_checks (16,195,040 samples, 0.38%)</title><rect x="94.5703%" y="181" width="0.3793%" height="15" fill="rgb(245,172,44)"/><text x="94.8203%" y="191.50"></text></g><g><title>free_global_ctxt (28,515,637 samples, 0.67%)</title><rect x="94.9496%" y="181" width="0.6679%" height="15" fill="rgb(236,23,11)"/><text x="95.1996%" y="191.50"></text></g><g><title>generate_crate_metadata (40,364,679 samples, 0.95%)</title><rect x="95.6175%" y="181" width="0.9455%" height="15" fill="rgb(205,117,38)"/><text x="95.8675%" y="191.50"></text></g><g><title>hir_lowering (135,629,831 samples, 3.18%)</title><rect x="96.5630%" y="181" width="3.1768%" height="15" fill="rgb(237,72,25)"/><text x="96.8130%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (7,459,324 samples, 0.17%)</title><rect x="99.7712%" y="181" width="0.1747%" height="15" fill="rgb(244,70,9)"/><text x="100.0212%" y="191.50"></text></g><g><title>all (4,269,333,676 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (4,269,333,676 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>