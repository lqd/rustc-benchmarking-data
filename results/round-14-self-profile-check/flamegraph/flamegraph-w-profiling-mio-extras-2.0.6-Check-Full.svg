<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (540,067 samples, 0.36%)</title><rect x="13.3797%" y="165" width="0.3596%" height="15" fill="rgb(227,0,7)"/><text x="13.6297%" y="175.50"></text></g><g><title>item_attrs (540,335 samples, 0.36%)</title><rect x="14.2751%" y="133" width="0.3598%" height="15" fill="rgb(217,0,24)"/><text x="14.5251%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (525,535 samples, 0.35%)</title><rect x="14.2850%" y="117" width="0.3499%" height="15" fill="rgb(221,193,54)"/><text x="14.5350%" y="127.50"></text></g><g><title>codegen_fn_attrs (712,948 samples, 0.47%)</title><rect x="14.1797%" y="149" width="0.4747%" height="15" fill="rgb(248,212,6)"/><text x="14.4297%" y="159.50"></text></g><g><title>is_copy_raw (198,721 samples, 0.13%)</title><rect x="17.4727%" y="101" width="0.1323%" height="15" fill="rgb(208,68,35)"/><text x="17.7227%" y="111.50"></text></g><g><title>evaluate_obligation (162,361 samples, 0.11%)</title><rect x="17.4969%" y="85" width="0.1081%" height="15" fill="rgb(232,128,0)"/><text x="17.7469%" y="95.50"></text></g><g><title>param_env (157,822 samples, 0.11%)</title><rect x="17.6050%" y="101" width="0.1051%" height="15" fill="rgb(207,160,47)"/><text x="17.8550%" y="111.50"></text></g><g><title>adt_drop_tys (494,145 samples, 0.33%)</title><rect x="17.3819%" y="117" width="0.3290%" height="15" fill="rgb(228,23,34)"/><text x="17.6319%" y="127.50"></text></g><g><title>needs_drop_raw (1,525,741 samples, 1.02%)</title><rect x="17.2878%" y="133" width="1.0159%" height="15" fill="rgb(218,30,26)"/><text x="17.5378%" y="143.50"></text></g><g><title>is_copy_raw (890,386 samples, 0.59%)</title><rect x="17.7109%" y="117" width="0.5928%" height="15" fill="rgb(220,122,19)"/><text x="17.9609%" y="127.50"></text></g><g><title>evaluate_obligation (721,313 samples, 0.48%)</title><rect x="17.8235%" y="101" width="0.4803%" height="15" fill="rgb(250,228,42)"/><text x="18.0735%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (230,331 samples, 0.15%)</title><rect x="18.4896%" y="117" width="0.1534%" height="15" fill="rgb(240,193,28)"/><text x="18.7396%" y="127.50"></text></g><g><title>impl_parent (745,428 samples, 0.50%)</title><rect x="19.3891%" y="101" width="0.4963%" height="15" fill="rgb(216,20,37)"/><text x="19.6391%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (474,627 samples, 0.32%)</title><rect x="19.5694%" y="85" width="0.3160%" height="15" fill="rgb(206,188,39)"/><text x="19.8194%" y="95.50"></text></g><g><title>specialization_graph_of (2,629,329 samples, 1.75%)</title><rect x="18.7167%" y="117" width="1.7507%" height="15" fill="rgb(217,207,13)"/><text x="18.9667%" y="127.50"></text></g><g><title>impl_trait_ref (874,039 samples, 0.58%)</title><rect x="19.8854%" y="101" width="0.5820%" height="15" fill="rgb(231,73,38)"/><text x="20.1354%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (709,426 samples, 0.47%)</title><rect x="19.9950%" y="85" width="0.4724%" height="15" fill="rgb(225,20,46)"/><text x="20.2450%" y="95.50"></text></g><g><title>resolve_instance (3,471,839 samples, 2.31%)</title><rect x="18.3037%" y="133" width="2.3116%" height="15" fill="rgb(210,31,41)"/><text x="18.5537%" y="143.50">r..</text></g><g><title>thir_body (1,591,214 samples, 1.06%)</title><rect x="20.6418%" y="133" width="1.0595%" height="15" fill="rgb(221,200,47)"/><text x="20.8918%" y="143.50"></text></g><g><title>mir_const (13,651,499 samples, 9.09%)</title><rect x="12.6275%" y="181" width="9.0895%" height="15" fill="rgb(226,26,5)"/><text x="12.8775%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (11,981,651 samples, 7.98%)</title><rect x="13.7393%" y="165" width="7.9777%" height="15" fill="rgb(249,33,26)"/><text x="13.9893%" y="175.50">unsafety_ch..</text></g><g><title>mir_built (10,607,205 samples, 7.06%)</title><rect x="14.6544%" y="149" width="7.0625%" height="15" fill="rgb(235,183,28)"/><text x="14.9044%" y="159.50">mir_built</text></g><g><title>has_structural_eq_impls (182,382 samples, 0.12%)</title><rect x="21.7747%" y="165" width="0.1214%" height="15" fill="rgb(221,5,38)"/><text x="22.0247%" y="175.50"></text></g><g><title>evaluate_obligation (174,142 samples, 0.12%)</title><rect x="21.7802%" y="149" width="0.1159%" height="15" fill="rgb(247,18,42)"/><text x="22.0302%" y="159.50"></text></g><g><title>mir_const_qualif (390,312 samples, 0.26%)</title><rect x="21.7170%" y="181" width="0.2599%" height="15" fill="rgb(241,131,45)"/><text x="21.9670%" y="191.50"></text></g><g><title>mir_promoted (15,305,206 samples, 10.19%)</title><rect x="11.7868%" y="197" width="10.1906%" height="15" fill="rgb(249,31,29)"/><text x="12.0368%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (604,656 samples, 0.40%)</title><rect x="21.9774%" y="197" width="0.4026%" height="15" fill="rgb(225,111,53)"/><text x="22.2274%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (248,686 samples, 0.17%)</title><rect x="22.3800%" y="197" width="0.1656%" height="15" fill="rgb(238,160,17)"/><text x="22.6300%" y="207.50"></text></g><g><title>type_op_normalize_predicate (225,082 samples, 0.15%)</title><rect x="22.5456%" y="197" width="0.1499%" height="15" fill="rgb(214,148,48)"/><text x="22.7956%" y="207.50"></text></g><g><title>type_op_prove_predicate (2,359,424 samples, 1.57%)</title><rect x="22.6955%" y="197" width="1.5710%" height="15" fill="rgb(232,36,49)"/><text x="22.9455%" y="207.50"></text></g><g><title>MIR_borrow_checking (35,606,985 samples, 23.71%)</title><rect x="0.5631%" y="229" width="23.7080%" height="15" fill="rgb(209,103,24)"/><text x="0.8131%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (35,461,662 samples, 23.61%)</title><rect x="0.6599%" y="213" width="23.6112%" height="15" fill="rgb(229,88,8)"/><text x="0.9099%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (180,702 samples, 0.12%)</title><rect x="24.2711%" y="229" width="0.1203%" height="15" fill="rgb(213,181,19)"/><text x="24.5211%" y="239.50"></text></g><g><title>hir_module_items (204,722 samples, 0.14%)</title><rect x="24.3914%" y="229" width="0.1363%" height="15" fill="rgb(254,191,54)"/><text x="24.6414%" y="239.50"></text></g><g><title>should_inherit_track_caller (199,043 samples, 0.13%)</title><rect x="24.8164%" y="181" width="0.1325%" height="15" fill="rgb(241,83,37)"/><text x="25.0664%" y="191.50"></text></g><g><title>codegen_fn_attrs (368,265 samples, 0.25%)</title><rect x="24.7140%" y="197" width="0.2452%" height="15" fill="rgb(233,36,39)"/><text x="24.9640%" y="207.50"></text></g><g><title>check_mod_attrs (625,247 samples, 0.42%)</title><rect x="24.5430%" y="213" width="0.4163%" height="15" fill="rgb(226,3,54)"/><text x="24.7930%" y="223.50"></text></g><g><title>lint_levels (159,072 samples, 0.11%)</title><rect x="25.2684%" y="197" width="0.1059%" height="15" fill="rgb(245,192,40)"/><text x="25.5184%" y="207.50"></text></g><g><title>lookup_deprecation_entry (161,651 samples, 0.11%)</title><rect x="25.3743%" y="197" width="0.1076%" height="15" fill="rgb(238,167,29)"/><text x="25.6243%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (682,307 samples, 0.45%)</title><rect x="25.1048%" y="213" width="0.4543%" height="15" fill="rgb(232,182,51)"/><text x="25.3548%" y="223.50"></text></g><g><title>misc_checking_1 (1,603,748 samples, 1.07%)</title><rect x="24.5281%" y="229" width="1.0678%" height="15" fill="rgb(231,60,39)"/><text x="24.7781%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (650,017 samples, 0.43%)</title><rect x="25.5970%" y="213" width="0.4328%" height="15" fill="rgb(208,69,12)"/><text x="25.8470%" y="223.50"></text></g><g><title>check_mod_liveness (522,905 samples, 0.35%)</title><rect x="25.6816%" y="197" width="0.3482%" height="15" fill="rgb(235,93,37)"/><text x="25.9316%" y="207.50"></text></g><g><title>misc_checking_2 (1,345,765 samples, 0.90%)</title><rect x="25.5960%" y="229" width="0.8960%" height="15" fill="rgb(213,116,39)"/><text x="25.8460%" y="239.50"></text></g><g><title>match_checking (694,208 samples, 0.46%)</title><rect x="26.0298%" y="213" width="0.4622%" height="15" fill="rgb(222,207,29)"/><text x="26.2798%" y="223.50"></text></g><g><title>check_match (658,698 samples, 0.44%)</title><rect x="26.0534%" y="197" width="0.4386%" height="15" fill="rgb(206,96,30)"/><text x="26.3034%" y="207.50"></text></g><g><title>check_private_in_public (254,563 samples, 0.17%)</title><rect x="26.4985%" y="213" width="0.1695%" height="15" fill="rgb(218,138,4)"/><text x="26.7485%" y="223.50"></text></g><g><title>death_checking (492,676 samples, 0.33%)</title><rect x="26.6680%" y="213" width="0.3280%" height="15" fill="rgb(250,191,14)"/><text x="26.9180%" y="223.50"></text></g><g><title>eval_to_const_value_raw (341,044 samples, 0.23%)</title><rect x="27.5519%" y="181" width="0.2271%" height="15" fill="rgb(239,60,40)"/><text x="27.8019%" y="191.50"></text></g><g><title>eval_to_const_value_raw (336,204 samples, 0.22%)</title><rect x="27.5552%" y="165" width="0.2239%" height="15" fill="rgb(206,27,48)"/><text x="27.8052%" y="175.50"></text></g><g><title>eval_to_allocation_raw (329,334 samples, 0.22%)</title><rect x="27.5597%" y="149" width="0.2193%" height="15" fill="rgb(225,35,8)"/><text x="27.8097%" y="159.50"></text></g><g><title>param_env (328,076 samples, 0.22%)</title><rect x="27.7790%" y="181" width="0.2184%" height="15" fill="rgb(250,213,24)"/><text x="28.0290%" y="191.50"></text></g><g><title>crate_lints (2,938,312 samples, 1.96%)</title><rect x="26.9972%" y="197" width="1.9564%" height="15" fill="rgb(247,123,22)"/><text x="27.2472%" y="207.50">c..</text></g><g><title>type_of (1,350,937 samples, 0.90%)</title><rect x="28.0541%" y="181" width="0.8995%" height="15" fill="rgb(231,138,38)"/><text x="28.3041%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (884,480 samples, 0.59%)</title><rect x="28.3647%" y="165" width="0.5889%" height="15" fill="rgb(231,145,46)"/><text x="28.6147%" y="175.50"></text></g><g><title>lint_checking (3,590,519 samples, 2.39%)</title><rect x="26.9960%" y="213" width="2.3907%" height="15" fill="rgb(251,118,11)"/><text x="27.2460%" y="223.50">li..</text></g><g><title>module_lints (650,517 samples, 0.43%)</title><rect x="28.9536%" y="197" width="0.4331%" height="15" fill="rgb(217,147,25)"/><text x="29.2036%" y="207.50"></text></g><g><title>lint_mod (644,637 samples, 0.43%)</title><rect x="28.9575%" y="181" width="0.4292%" height="15" fill="rgb(247,81,37)"/><text x="29.2075%" y="191.50"></text></g><g><title>privacy_access_levels (281,863 samples, 0.19%)</title><rect x="29.3867%" y="213" width="0.1877%" height="15" fill="rgb(209,12,38)"/><text x="29.6367%" y="223.50"></text></g><g><title>privacy_checking_modules (1,024,891 samples, 0.68%)</title><rect x="29.5744%" y="213" width="0.6824%" height="15" fill="rgb(227,1,9)"/><text x="29.8244%" y="223.50"></text></g><g><title>check_mod_privacy (1,021,561 samples, 0.68%)</title><rect x="29.5766%" y="197" width="0.6802%" height="15" fill="rgb(248,47,43)"/><text x="29.8266%" y="207.50"></text></g><g><title>misc_checking_3 (5,673,973 samples, 3.78%)</title><rect x="26.4920%" y="229" width="3.7779%" height="15" fill="rgb(221,10,30)"/><text x="26.7420%" y="239.50">misc..</text></g><g><title>impl_trait_ref (192,433 samples, 0.13%)</title><rect x="30.4701%" y="133" width="0.1281%" height="15" fill="rgb(210,229,1)"/><text x="30.7201%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (172,883 samples, 0.12%)</title><rect x="30.4831%" y="117" width="0.1151%" height="15" fill="rgb(222,148,37)"/><text x="30.7331%" y="127.50"></text></g><g><title>adt_destructor (364,725 samples, 0.24%)</title><rect x="30.3755%" y="181" width="0.2428%" height="15" fill="rgb(234,67,33)"/><text x="30.6255%" y="191.50"></text></g><g><title>coherent_trait (357,694 samples, 0.24%)</title><rect x="30.3802%" y="165" width="0.2382%" height="15" fill="rgb(247,98,35)"/><text x="30.6302%" y="175.50"></text></g><g><title>specialization_graph_of (355,753 samples, 0.24%)</title><rect x="30.3815%" y="149" width="0.2369%" height="15" fill="rgb(247,138,52)"/><text x="30.6315%" y="159.50"></text></g><g><title>impl_parent (2,320,314 samples, 1.54%)</title><rect x="32.9993%" y="165" width="1.5449%" height="15" fill="rgb(213,79,30)"/><text x="33.2493%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,280,028 samples, 0.85%)</title><rect x="33.6920%" y="149" width="0.8523%" height="15" fill="rgb(246,177,23)"/><text x="33.9420%" y="159.50"></text></g><g><title>impl_trait_ref (5,152,498 samples, 3.43%)</title><rect x="34.5443%" y="165" width="3.4307%" height="15" fill="rgb(230,62,27)"/><text x="34.7943%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,095,196 samples, 2.73%)</title><rect x="35.2482%" y="149" width="2.7267%" height="15" fill="rgb(216,154,8)"/><text x="35.4982%" y="159.50">me..</text></g><g><title>trait_impls_of (725,669 samples, 0.48%)</title><rect x="37.9907%" y="165" width="0.4832%" height="15" fill="rgb(244,35,45)"/><text x="38.2407%" y="175.50"></text></g><g><title>implementations_of_trait (204,433 samples, 0.14%)</title><rect x="38.3377%" y="149" width="0.1361%" height="15" fill="rgb(251,115,12)"/><text x="38.5877%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (160,651 samples, 0.11%)</title><rect x="38.3669%" y="133" width="0.1070%" height="15" fill="rgb(240,54,50)"/><text x="38.6169%" y="143.50"></text></g><g><title>coherent_trait (12,203,076 samples, 8.13%)</title><rect x="30.3492%" y="197" width="8.1251%" height="15" fill="rgb(233,84,52)"/><text x="30.5992%" y="207.50">coherent_tr..</text></g><g><title>specialization_graph_of (11,650,720 samples, 7.76%)</title><rect x="30.7170%" y="181" width="7.7573%" height="15" fill="rgb(207,117,47)"/><text x="30.9670%" y="191.50">specializat..</text></g><g><title>coherence_checking (12,296,217 samples, 8.19%)</title><rect x="30.3308%" y="213" width="8.1871%" height="15" fill="rgb(249,43,39)"/><text x="30.5808%" y="223.50">coherence_c..</text></g><g><title>associated_item (442,963 samples, 0.29%)</title><rect x="55.5030%" y="149" width="0.2949%" height="15" fill="rgb(209,38,44)"/><text x="55.7530%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (351,481 samples, 0.23%)</title><rect x="55.5639%" y="133" width="0.2340%" height="15" fill="rgb(236,212,23)"/><text x="55.8139%" y="143.50"></text></g><g><title>associated_items (670,877 samples, 0.45%)</title><rect x="55.3750%" y="165" width="0.4467%" height="15" fill="rgb(242,79,21)"/><text x="55.6250%" y="175.50"></text></g><g><title>adt_def (156,801 samples, 0.10%)</title><rect x="56.2020%" y="133" width="0.1044%" height="15" fill="rgb(211,96,35)"/><text x="56.4520%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (151,931 samples, 0.10%)</title><rect x="56.2052%" y="117" width="0.1012%" height="15" fill="rgb(253,215,40)"/><text x="56.4552%" y="127.50"></text></g><g><title>adt_def (386,164 samples, 0.26%)</title><rect x="56.5339%" y="85" width="0.2571%" height="15" fill="rgb(211,81,21)"/><text x="56.7839%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (385,024 samples, 0.26%)</title><rect x="56.5346%" y="69" width="0.2564%" height="15" fill="rgb(208,190,38)"/><text x="56.7846%" y="79.50"></text></g><g><title>item_attrs (370,194 samples, 0.25%)</title><rect x="56.5445%" y="53" width="0.2465%" height="15" fill="rgb(235,213,38)"/><text x="56.7945%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (368,904 samples, 0.25%)</title><rect x="56.5453%" y="37" width="0.2456%" height="15" fill="rgb(237,122,38)"/><text x="56.7953%" y="47.50"></text></g><g><title>adt_dtorck_constraint (452,456 samples, 0.30%)</title><rect x="56.5229%" y="101" width="0.3013%" height="15" fill="rgb(244,218,35)"/><text x="56.7729%" y="111.50"></text></g><g><title>adt_dtorck_constraint (572,287 samples, 0.38%)</title><rect x="56.4596%" y="117" width="0.3810%" height="15" fill="rgb(240,68,47)"/><text x="56.7096%" y="127.50"></text></g><g><title>adt_dtorck_constraint (804,649 samples, 0.54%)</title><rect x="56.3401%" y="133" width="0.5358%" height="15" fill="rgb(210,16,53)"/><text x="56.5901%" y="143.50"></text></g><g><title>dropck_outlives (1,607,689 samples, 1.07%)</title><rect x="55.8824%" y="165" width="1.0704%" height="15" fill="rgb(235,124,12)"/><text x="56.1324%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,240,042 samples, 0.83%)</title><rect x="56.1272%" y="149" width="0.8257%" height="15" fill="rgb(224,169,11)"/><text x="56.3772%" y="159.50"></text></g><g><title>generics_of (1,326,697 samples, 0.88%)</title><rect x="60.0668%" y="149" width="0.8833%" height="15" fill="rgb(250,166,2)"/><text x="60.3168%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (1,047,171 samples, 0.70%)</title><rect x="60.2529%" y="133" width="0.6972%" height="15" fill="rgb(242,216,29)"/><text x="60.5029%" y="143.50"></text></g><g><title>impl_polarity (155,230 samples, 0.10%)</title><rect x="60.9762%" y="149" width="0.1034%" height="15" fill="rgb(230,116,27)"/><text x="61.2262%" y="159.50"></text></g><g><title>impl_trait_ref (1,457,783 samples, 0.97%)</title><rect x="61.0795%" y="149" width="0.9706%" height="15" fill="rgb(228,99,48)"/><text x="61.3295%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,186,259 samples, 0.79%)</title><rect x="61.2603%" y="133" width="0.7898%" height="15" fill="rgb(253,11,6)"/><text x="61.5103%" y="143.50"></text></g><g><title>opt_def_kind (162,782 samples, 0.11%)</title><rect x="62.2399%" y="133" width="0.1084%" height="15" fill="rgb(247,143,39)"/><text x="62.4899%" y="143.50"></text></g><g><title>explicit_predicates_of (158,200 samples, 0.11%)</title><rect x="62.4956%" y="117" width="0.1053%" height="15" fill="rgb(236,97,10)"/><text x="62.7456%" y="127.50"></text></g><g><title>predicates_of (887,931 samples, 0.59%)</title><rect x="62.0904%" y="149" width="0.5912%" height="15" fill="rgb(233,208,19)"/><text x="62.3404%" y="159.50"></text></g><g><title>predicates_defined_on (500,684 samples, 0.33%)</title><rect x="62.3483%" y="133" width="0.3334%" height="15" fill="rgb(216,164,2)"/><text x="62.5983%" y="143.50"></text></g><g><title>specializes (2,254,745 samples, 1.50%)</title><rect x="62.6816%" y="149" width="1.5013%" height="15" fill="rgb(220,129,5)"/><text x="62.9316%" y="159.50"></text></g><g><title>param_env (1,358,394 samples, 0.90%)</title><rect x="63.2784%" y="133" width="0.9045%" height="15" fill="rgb(242,17,10)"/><text x="63.5284%" y="143.50"></text></g><g><title>def_span (607,748 samples, 0.40%)</title><rect x="63.7782%" y="117" width="0.4047%" height="15" fill="rgb(242,107,0)"/><text x="64.0282%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (538,308 samples, 0.36%)</title><rect x="63.8245%" y="101" width="0.3584%" height="15" fill="rgb(251,28,31)"/><text x="64.0745%" y="111.50"></text></g><g><title>trait_impls_of (620,317 samples, 0.41%)</title><rect x="64.1917%" y="149" width="0.4130%" height="15" fill="rgb(233,223,10)"/><text x="64.4417%" y="159.50"></text></g><g><title>implementations_of_trait (248,974 samples, 0.17%)</title><rect x="64.4389%" y="133" width="0.1658%" height="15" fill="rgb(215,21,27)"/><text x="64.6889%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (169,841 samples, 0.11%)</title><rect x="64.4916%" y="117" width="0.1131%" height="15" fill="rgb(232,23,21)"/><text x="64.7416%" y="127.50"></text></g><g><title>evaluate_obligation (11,510,266 samples, 7.66%)</title><rect x="56.9528%" y="165" width="7.6638%" height="15" fill="rgb(244,5,23)"/><text x="57.2028%" y="175.50">evaluate_o..</text></g><g><title>fn_sig (175,230 samples, 0.12%)</title><rect x="64.6424%" y="165" width="0.1167%" height="15" fill="rgb(226,81,46)"/><text x="64.8924%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (152,500 samples, 0.10%)</title><rect x="64.6576%" y="149" width="0.1015%" height="15" fill="rgb(247,70,30)"/><text x="64.9076%" y="159.50"></text></g><g><title>item_attrs (238,591 samples, 0.16%)</title><rect x="64.9906%" y="165" width="0.1589%" height="15" fill="rgb(212,68,19)"/><text x="65.2406%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (229,431 samples, 0.15%)</title><rect x="64.9967%" y="149" width="0.1528%" height="15" fill="rgb(240,187,13)"/><text x="65.2467%" y="159.50"></text></g><g><title>method_autoderef_steps (390,982 samples, 0.26%)</title><rect x="65.2192%" y="165" width="0.2603%" height="15" fill="rgb(223,113,26)"/><text x="65.4692%" y="175.50"></text></g><g><title>evaluate_obligation (199,371 samples, 0.13%)</title><rect x="65.3468%" y="149" width="0.1327%" height="15" fill="rgb(206,192,2)"/><text x="65.5968%" y="159.50"></text></g><g><title>object_safety_violations (177,262 samples, 0.12%)</title><rect x="65.4796%" y="165" width="0.1180%" height="15" fill="rgb(241,108,4)"/><text x="65.7296%" y="175.50"></text></g><g><title>predicates_of (458,312 samples, 0.31%)</title><rect x="65.6321%" y="165" width="0.3052%" height="15" fill="rgb(247,173,49)"/><text x="65.8821%" y="175.50"></text></g><g><title>predicates_defined_on (306,461 samples, 0.20%)</title><rect x="65.7332%" y="149" width="0.2040%" height="15" fill="rgb(224,114,35)"/><text x="65.9832%" y="159.50"></text></g><g><title>specializes (180,593 samples, 0.12%)</title><rect x="65.9372%" y="165" width="0.1202%" height="15" fill="rgb(245,159,27)"/><text x="66.1872%" y="175.50"></text></g><g><title>associated_item (320,503 samples, 0.21%)</title><rect x="71.0203%" y="133" width="0.2134%" height="15" fill="rgb(245,172,44)"/><text x="71.2703%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (258,082 samples, 0.17%)</title><rect x="71.0619%" y="117" width="0.1718%" height="15" fill="rgb(236,23,11)"/><text x="71.3119%" y="127.50"></text></g><g><title>associated_items (449,065 samples, 0.30%)</title><rect x="70.9461%" y="149" width="0.2990%" height="15" fill="rgb(205,117,38)"/><text x="71.1961%" y="159.50"></text></g><g><title>dropck_outlives (163,741 samples, 0.11%)</title><rect x="71.2571%" y="149" width="0.1090%" height="15" fill="rgb(237,72,25)"/><text x="71.5071%" y="159.50"></text></g><g><title>evaluate_obligation (1,187,060 samples, 0.79%)</title><rect x="71.3661%" y="149" width="0.7904%" height="15" fill="rgb(244,70,9)"/><text x="71.6161%" y="159.50"></text></g><g><title>trait_impls_of (360,786 samples, 0.24%)</title><rect x="71.9162%" y="133" width="0.2402%" height="15" fill="rgb(217,125,39)"/><text x="72.1662%" y="143.50"></text></g><g><title>is_copy_raw (323,543 samples, 0.22%)</title><rect x="72.2689%" y="149" width="0.2154%" height="15" fill="rgb(235,36,10)"/><text x="72.5189%" y="159.50"></text></g><g><title>evaluate_obligation (256,112 samples, 0.17%)</title><rect x="72.3138%" y="133" width="0.1705%" height="15" fill="rgb(251,123,47)"/><text x="72.5638%" y="143.50"></text></g><g><title>method_autoderef_steps (247,263 samples, 0.16%)</title><rect x="72.5607%" y="149" width="0.1646%" height="15" fill="rgb(221,13,13)"/><text x="72.8107%" y="159.50"></text></g><g><title>typeck (10,162,833 samples, 6.77%)</title><rect x="66.1313%" y="165" width="6.7667%" height="15" fill="rgb(238,131,9)"/><text x="66.3813%" y="175.50">typeck</text></g><g><title>item_bodies_checking (51,648,934 samples, 34.39%)</title><rect x="38.5448%" y="213" width="34.3891%" height="15" fill="rgb(211,50,8)"/><text x="38.7948%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (51,645,784 samples, 34.39%)</title><rect x="38.5469%" y="197" width="34.3870%" height="15" fill="rgb(245,182,24)"/><text x="38.7969%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (51,554,984 samples, 34.33%)</title><rect x="38.6074%" y="181" width="34.3266%" height="15" fill="rgb(242,14,37)"/><text x="38.8574%" y="191.50">typeck</text></g><g><title>item_types_checking (1,271,984 samples, 0.85%)</title><rect x="72.9340%" y="213" width="0.8469%" height="15" fill="rgb(246,228,12)"/><text x="73.1840%" y="223.50"></text></g><g><title>check_mod_item_types (1,267,524 samples, 0.84%)</title><rect x="72.9369%" y="197" width="0.8439%" height="15" fill="rgb(213,55,15)"/><text x="73.1869%" y="207.50"></text></g><g><title>typeck (294,004 samples, 0.20%)</title><rect x="73.5851%" y="181" width="0.1958%" height="15" fill="rgb(209,9,3)"/><text x="73.8351%" y="191.50"></text></g><g><title>late_bound_vars_map (192,660 samples, 0.13%)</title><rect x="74.1216%" y="165" width="0.1283%" height="15" fill="rgb(230,59,30)"/><text x="74.3716%" y="175.50"></text></g><g><title>resolve_lifetimes (168,370 samples, 0.11%)</title><rect x="74.1378%" y="149" width="0.1121%" height="15" fill="rgb(209,121,21)"/><text x="74.3878%" y="159.50"></text></g><g><title>fn_sig (487,202 samples, 0.32%)</title><rect x="73.9819%" y="181" width="0.3244%" height="15" fill="rgb(220,109,13)"/><text x="74.2319%" y="191.50"></text></g><g><title>named_region_map (222,612 samples, 0.15%)</title><rect x="74.3886%" y="165" width="0.1482%" height="15" fill="rgb(232,18,1)"/><text x="74.6386%" y="175.50"></text></g><g><title>resolve_lifetimes (203,392 samples, 0.14%)</title><rect x="74.4014%" y="149" width="0.1354%" height="15" fill="rgb(215,41,42)"/><text x="74.6514%" y="159.50"></text></g><g><title>generics_of (363,767 samples, 0.24%)</title><rect x="74.3063%" y="181" width="0.2422%" height="15" fill="rgb(224,123,36)"/><text x="74.5563%" y="191.50"></text></g><g><title>explicit_predicates_of (191,103 samples, 0.13%)</title><rect x="74.6872%" y="149" width="0.1272%" height="15" fill="rgb(240,125,3)"/><text x="74.9372%" y="159.50"></text></g><g><title>predicates_of (678,989 samples, 0.45%)</title><rect x="74.5863%" y="181" width="0.4521%" height="15" fill="rgb(205,98,50)"/><text x="74.8363%" y="191.50"></text></g><g><title>predicates_defined_on (622,199 samples, 0.41%)</title><rect x="74.6241%" y="165" width="0.4143%" height="15" fill="rgb(205,185,37)"/><text x="74.8741%" y="175.50"></text></g><g><title>inferred_outlives_of (336,415 samples, 0.22%)</title><rect x="74.8144%" y="149" width="0.2240%" height="15" fill="rgb(238,207,15)"/><text x="75.0644%" y="159.50"></text></g><g><title>inferred_outlives_crate (311,484 samples, 0.21%)</title><rect x="74.8310%" y="133" width="0.2074%" height="15" fill="rgb(213,199,42)"/><text x="75.0810%" y="143.50"></text></g><g><title>type_of (155,661 samples, 0.10%)</title><rect x="74.9348%" y="117" width="0.1036%" height="15" fill="rgb(235,201,11)"/><text x="75.1848%" y="127.50"></text></g><g><title>type_collecting (1,951,481 samples, 1.30%)</title><rect x="73.7835%" y="213" width="1.2993%" height="15" fill="rgb(207,46,11)"/><text x="74.0335%" y="223.50"></text></g><g><title>collect_mod_item_types (1,937,931 samples, 1.29%)</title><rect x="73.7925%" y="197" width="1.2903%" height="15" fill="rgb(241,35,35)"/><text x="74.0425%" y="207.50"></text></g><g><title>evaluate_obligation (419,483 samples, 0.28%)</title><rect x="76.4416%" y="181" width="0.2793%" height="15" fill="rgb(243,32,47)"/><text x="76.6916%" y="191.50"></text></g><g><title>implied_outlives_bounds (207,533 samples, 0.14%)</title><rect x="76.7209%" y="181" width="0.1382%" height="15" fill="rgb(247,202,23)"/><text x="76.9709%" y="191.50"></text></g><g><title>param_env (253,982 samples, 0.17%)</title><rect x="76.8591%" y="181" width="0.1691%" height="15" fill="rgb(219,102,11)"/><text x="77.1091%" y="191.50"></text></g><g><title>check_impl_item_well_formed (3,152,694 samples, 2.10%)</title><rect x="75.2323%" y="197" width="2.0991%" height="15" fill="rgb(243,110,44)"/><text x="75.4823%" y="207.50">c..</text></g><g><title>region_scope_tree (431,146 samples, 0.29%)</title><rect x="77.0443%" y="181" width="0.2871%" height="15" fill="rgb(222,74,54)"/><text x="77.2943%" y="191.50"></text></g><g><title>adt_sized_constraint (210,722 samples, 0.14%)</title><rect x="78.3245%" y="181" width="0.1403%" height="15" fill="rgb(216,99,12)"/><text x="78.5745%" y="191.50"></text></g><g><title>adt_def (197,463 samples, 0.13%)</title><rect x="78.6134%" y="149" width="0.1315%" height="15" fill="rgb(226,22,26)"/><text x="78.8634%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (194,613 samples, 0.13%)</title><rect x="78.6153%" y="133" width="0.1296%" height="15" fill="rgb(217,163,10)"/><text x="78.8653%" y="143.50"></text></g><g><title>item_attrs (163,632 samples, 0.11%)</title><rect x="78.6359%" y="117" width="0.1090%" height="15" fill="rgb(213,25,53)"/><text x="78.8859%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (160,732 samples, 0.11%)</title><rect x="78.6379%" y="101" width="0.1070%" height="15" fill="rgb(252,105,26)"/><text x="78.8879%" y="111.50"></text></g><g><title>adt_sized_constraint (181,003 samples, 0.12%)</title><rect x="78.7449%" y="149" width="0.1205%" height="15" fill="rgb(220,39,43)"/><text x="78.9949%" y="159.50"></text></g><g><title>adt_sized_constraint (406,466 samples, 0.27%)</title><rect x="78.6023%" y="165" width="0.2706%" height="15" fill="rgb(229,68,48)"/><text x="78.8523%" y="175.50"></text></g><g><title>evaluate_obligation (637,487 samples, 0.42%)</title><rect x="78.4648%" y="181" width="0.4245%" height="15" fill="rgb(252,8,32)"/><text x="78.7148%" y="191.50"></text></g><g><title>param_env (307,163 samples, 0.20%)</title><rect x="78.9823%" y="181" width="0.2045%" height="15" fill="rgb(223,20,43)"/><text x="79.2323%" y="191.50"></text></g><g><title>analysis (118,783,169 samples, 79.09%)</title><rect x="0.3304%" y="245" width="79.0887%" height="15" fill="rgb(229,81,49)"/><text x="0.5804%" y="255.50">analysis</text></g><g><title>type_check_crate (73,817,170 samples, 49.15%)</title><rect x="30.2699%" y="229" width="49.1493%" height="15" fill="rgb(236,28,36)"/><text x="30.5199%" y="239.50">type_check_crate</text></g><g><title>wf_checking (6,505,832 samples, 4.33%)</title><rect x="75.0874%" y="213" width="4.3317%" height="15" fill="rgb(249,185,26)"/><text x="75.3374%" y="223.50">wf_ch..</text></g><g><title>check_item_well_formed (3,135,588 samples, 2.09%)</title><rect x="77.3314%" y="197" width="2.0878%" height="15" fill="rgb(249,174,33)"/><text x="77.5814%" y="207.50">c..</text></g><g><title>codegen_crate (400,954 samples, 0.27%)</title><rect x="79.4232%" y="245" width="0.2670%" height="15" fill="rgb(233,201,37)"/><text x="79.6732%" y="255.50"></text></g><g><title>metadata_load_macro (152,260 samples, 0.10%)</title><rect x="89.0403%" y="197" width="0.1014%" height="15" fill="rgb(221,78,26)"/><text x="89.2903%" y="207.50"></text></g><g><title>metadata_register_crate (1,557,347 samples, 1.04%)</title><rect x="89.1417%" y="197" width="1.0369%" height="15" fill="rgb(250,127,30)"/><text x="89.3917%" y="207.50"></text></g><g><title>metadata_register_crate (596,166 samples, 0.40%)</title><rect x="89.7817%" y="181" width="0.3969%" height="15" fill="rgb(230,49,44)"/><text x="90.0317%" y="191.50"></text></g><g><title>macro_expand_crate (15,574,514 samples, 10.37%)</title><rect x="79.9408%" y="229" width="10.3699%" height="15" fill="rgb(229,67,23)"/><text x="80.1908%" y="239.50">macro_expand_cr..</text></g><g><title>expand_crate (15,559,514 samples, 10.36%)</title><rect x="79.9508%" y="213" width="10.3599%" height="15" fill="rgb(249,83,47)"/><text x="80.2008%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (198,373 samples, 0.13%)</title><rect x="90.1786%" y="197" width="0.1321%" height="15" fill="rgb(215,43,3)"/><text x="90.4286%" y="207.50"></text></g><g><title>finalize_macro_resolutions (168,472 samples, 0.11%)</title><rect x="90.4034%" y="213" width="0.1122%" height="15" fill="rgb(238,154,13)"/><text x="90.6534%" y="223.50"></text></g><g><title>late_resolve_crate (2,329,586 samples, 1.55%)</title><rect x="90.5156%" y="213" width="1.5511%" height="15" fill="rgb(219,56,2)"/><text x="90.7656%" y="223.50"></text></g><g><title>configure_and_expand (18,717,448 samples, 12.46%)</title><rect x="79.6901%" y="245" width="12.4625%" height="15" fill="rgb(233,0,4)"/><text x="79.9401%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,697,090 samples, 1.80%)</title><rect x="90.3569%" y="229" width="1.7958%" height="15" fill="rgb(235,30,7)"/><text x="90.6069%" y="239.50">r..</text></g><g><title>drop_ast (227,332 samples, 0.15%)</title><rect x="92.1527%" y="245" width="0.1514%" height="15" fill="rgb(250,79,13)"/><text x="92.4027%" y="255.50"></text></g><g><title>early_lint_checks (414,045 samples, 0.28%)</title><rect x="92.3167%" y="245" width="0.2757%" height="15" fill="rgb(211,146,34)"/><text x="92.5667%" y="255.50"></text></g><g><title>free_global_ctxt (4,475,640 samples, 2.98%)</title><rect x="92.5924%" y="245" width="2.9800%" height="15" fill="rgb(228,22,38)"/><text x="92.8424%" y="255.50">fre..</text></g><g><title>generate_crate_metadata (1,222,524 samples, 0.81%)</title><rect x="95.5724%" y="245" width="0.8140%" height="15" fill="rgb(235,168,5)"/><text x="95.8224%" y="255.50"></text></g><g><title>hir_lowering (3,329,047 samples, 2.22%)</title><rect x="96.3864%" y="245" width="2.2166%" height="15" fill="rgb(221,155,16)"/><text x="96.6364%" y="255.50">h..</text></g><g><title>parse_crate (320,564 samples, 0.21%)</title><rect x="98.6404%" y="245" width="0.2134%" height="15" fill="rgb(215,215,53)"/><text x="98.8904%" y="255.50"></text></g><g><title>prepare_outputs (173,662 samples, 0.12%)</title><rect x="98.8568%" y="245" width="0.1156%" height="15" fill="rgb(223,4,10)"/><text x="99.1068%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,119,122 samples, 0.75%)</title><rect x="98.9725%" y="245" width="0.7451%" height="15" fill="rgb(234,103,6)"/><text x="99.2225%" y="255.50"></text></g><g><title>all (150,189,728 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (150,189,728 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (330,064 samples, 0.22%)</title><rect x="99.7802%" y="245" width="0.2198%" height="15" fill="rgb(228,201,54)"/><text x="100.0302%" y="255.50"></text></g></svg></svg>