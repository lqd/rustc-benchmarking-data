<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>adt_drop_tys (184,900 samples, 0.13%)</title><rect x="13.3178%" y="117" width="0.1254%" height="15" fill="rgb(227,0,7)"/><text x="13.5678%" y="127.50"></text></g><g><title>needs_drop_raw (766,661 samples, 0.52%)</title><rect x="13.2870%" y="133" width="0.5198%" height="15" fill="rgb(217,0,24)"/><text x="13.5370%" y="143.50"></text></g><g><title>is_copy_raw (536,270 samples, 0.36%)</title><rect x="13.4432%" y="117" width="0.3636%" height="15" fill="rgb(221,193,54)"/><text x="13.6932%" y="127.50"></text></g><g><title>evaluate_obligation (494,459 samples, 0.34%)</title><rect x="13.4715%" y="101" width="0.3352%" height="15" fill="rgb(248,212,6)"/><text x="13.7215%" y="111.50"></text></g><g><title>trait_impls_of (149,572 samples, 0.10%)</title><rect x="13.7054%" y="85" width="0.1014%" height="15" fill="rgb(208,68,35)"/><text x="13.9554%" y="95.50"></text></g><g><title>impl_parent (312,982 samples, 0.21%)</title><rect x="14.2582%" y="101" width="0.2122%" height="15" fill="rgb(232,128,0)"/><text x="14.5082%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (203,342 samples, 0.14%)</title><rect x="14.3325%" y="85" width="0.1379%" height="15" fill="rgb(207,160,47)"/><text x="14.5825%" y="95.50"></text></g><g><title>specialization_graph_of (1,707,979 samples, 1.16%)</title><rect x="13.9633%" y="117" width="1.1580%" height="15" fill="rgb(228,23,34)"/><text x="14.2133%" y="127.50"></text></g><g><title>impl_trait_ref (960,103 samples, 0.65%)</title><rect x="14.4704%" y="101" width="0.6509%" height="15" fill="rgb(218,30,26)"/><text x="14.7204%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (615,660 samples, 0.42%)</title><rect x="14.7039%" y="85" width="0.4174%" height="15" fill="rgb(220,122,19)"/><text x="14.9539%" y="95.50"></text></g><g><title>resolve_instance (1,967,803 samples, 1.33%)</title><rect x="13.8068%" y="133" width="1.3342%" height="15" fill="rgb(250,228,42)"/><text x="14.0568%" y="143.50"></text></g><g><title>thir_body (1,375,815 samples, 0.93%)</title><rect x="15.1453%" y="133" width="0.9328%" height="15" fill="rgb(240,193,28)"/><text x="15.3953%" y="143.50"></text></g><g><title>mir_const (8,518,737 samples, 5.78%)</title><rect x="10.3075%" y="181" width="5.7757%" height="15" fill="rgb(216,20,37)"/><text x="10.5575%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (7,863,550 samples, 5.33%)</title><rect x="10.7517%" y="165" width="5.3315%" height="15" fill="rgb(206,188,39)"/><text x="11.0017%" y="175.50">unsafet..</text></g><g><title>mir_built (7,391,154 samples, 5.01%)</title><rect x="11.0720%" y="149" width="5.0112%" height="15" fill="rgb(217,207,13)"/><text x="11.3220%" y="159.50">mir_bu..</text></g><g><title>has_structural_eq_impls (149,782 samples, 0.10%)</title><rect x="16.1362%" y="165" width="0.1016%" height="15" fill="rgb(231,73,38)"/><text x="16.3862%" y="175.50"></text></g><g><title>mir_promoted (9,590,567 samples, 6.50%)</title><rect x="9.8784%" y="197" width="6.5024%" height="15" fill="rgb(225,20,46)"/><text x="10.1284%" y="207.50">mir_promo..</text></g><g><title>mir_const_qualif (438,885 samples, 0.30%)</title><rect x="16.0832%" y="181" width="0.2976%" height="15" fill="rgb(210,31,41)"/><text x="16.3332%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (275,423 samples, 0.19%)</title><rect x="16.4517%" y="197" width="0.1867%" height="15" fill="rgb(221,200,47)"/><text x="16.7017%" y="207.50"></text></g><g><title>normalize_projection_ty (169,051 samples, 0.11%)</title><rect x="16.5239%" y="181" width="0.1146%" height="15" fill="rgb(226,26,5)"/><text x="16.7739%" y="191.50"></text></g><g><title>type_op_prove_predicate (819,497 samples, 0.56%)</title><rect x="16.6385%" y="197" width="0.5556%" height="15" fill="rgb(249,33,26)"/><text x="16.8885%" y="207.50"></text></g><g><title>MIR_borrow_checking (24,371,892 samples, 16.52%)</title><rect x="0.6771%" y="229" width="16.5241%" height="15" fill="rgb(235,183,28)"/><text x="0.9271%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,349,912 samples, 16.51%)</title><rect x="0.6920%" y="213" width="16.5092%" height="15" fill="rgb(221,5,38)"/><text x="0.9420%" y="223.50">mir_borrowck</text></g><g><title>check_mod_attrs (325,784 samples, 0.22%)</title><rect x="17.3610%" y="213" width="0.2209%" height="15" fill="rgb(247,18,42)"/><text x="17.6110%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (237,303 samples, 0.16%)</title><rect x="17.6569%" y="213" width="0.1609%" height="15" fill="rgb(241,131,45)"/><text x="17.9069%" y="223.50"></text></g><g><title>misc_checking_1 (720,408 samples, 0.49%)</title><rect x="17.3524%" y="229" width="0.4884%" height="15" fill="rgb(249,31,29)"/><text x="17.6024%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (522,596 samples, 0.35%)</title><rect x="17.8418%" y="213" width="0.3543%" height="15" fill="rgb(225,111,53)"/><text x="18.0918%" y="223.50"></text></g><g><title>check_mod_liveness (427,165 samples, 0.29%)</title><rect x="17.9065%" y="197" width="0.2896%" height="15" fill="rgb(238,160,17)"/><text x="18.1565%" y="207.50"></text></g><g><title>misc_checking_2 (923,790 samples, 0.63%)</title><rect x="17.8409%" y="229" width="0.6263%" height="15" fill="rgb(214,148,48)"/><text x="18.0909%" y="239.50"></text></g><g><title>match_checking (399,844 samples, 0.27%)</title><rect x="18.1961%" y="213" width="0.2711%" height="15" fill="rgb(232,36,49)"/><text x="18.4461%" y="223.50"></text></g><g><title>check_match (393,064 samples, 0.27%)</title><rect x="18.2007%" y="197" width="0.2665%" height="15" fill="rgb(209,103,24)"/><text x="18.4507%" y="207.50"></text></g><g><title>death_checking (149,881 samples, 0.10%)</title><rect x="18.5168%" y="213" width="0.1016%" height="15" fill="rgb(229,88,8)"/><text x="18.7668%" y="223.50"></text></g><g><title>eval_to_const_value_raw (365,774 samples, 0.25%)</title><rect x="18.9137%" y="133" width="0.2480%" height="15" fill="rgb(213,181,19)"/><text x="19.1637%" y="143.50"></text></g><g><title>eval_to_const_value_raw (365,054 samples, 0.25%)</title><rect x="18.9142%" y="117" width="0.2475%" height="15" fill="rgb(254,191,54)"/><text x="19.1642%" y="127.50"></text></g><g><title>eval_to_allocation_raw (363,204 samples, 0.25%)</title><rect x="18.9154%" y="101" width="0.2463%" height="15" fill="rgb(241,83,37)"/><text x="19.1654%" y="111.50"></text></g><g><title>eval_to_allocation_raw (410,304 samples, 0.28%)</title><rect x="18.8846%" y="181" width="0.2782%" height="15" fill="rgb(233,36,39)"/><text x="19.1346%" y="191.50"></text></g><g><title>eval_to_allocation_raw (409,684 samples, 0.28%)</title><rect x="18.8850%" y="165" width="0.2778%" height="15" fill="rgb(226,3,54)"/><text x="19.1350%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (375,474 samples, 0.25%)</title><rect x="18.9082%" y="149" width="0.2546%" height="15" fill="rgb(245,192,40)"/><text x="19.1582%" y="159.50"></text></g><g><title>crate_lints (983,521 samples, 0.67%)</title><rect x="18.6195%" y="197" width="0.6668%" height="15" fill="rgb(238,167,29)"/><text x="18.8695%" y="207.50"></text></g><g><title>lint_checking (1,523,357 samples, 1.03%)</title><rect x="18.6184%" y="213" width="1.0328%" height="15" fill="rgb(232,182,51)"/><text x="18.8684%" y="223.50"></text></g><g><title>module_lints (538,156 samples, 0.36%)</title><rect x="19.2864%" y="197" width="0.3649%" height="15" fill="rgb(231,60,39)"/><text x="19.5364%" y="207.50"></text></g><g><title>lint_mod (535,696 samples, 0.36%)</title><rect x="19.2880%" y="181" width="0.3632%" height="15" fill="rgb(208,69,12)"/><text x="19.5380%" y="191.50"></text></g><g><title>privacy_checking_modules (743,679 samples, 0.50%)</title><rect x="19.7192%" y="213" width="0.5042%" height="15" fill="rgb(235,93,37)"/><text x="19.9692%" y="223.50"></text></g><g><title>check_mod_privacy (742,269 samples, 0.50%)</title><rect x="19.7201%" y="197" width="0.5033%" height="15" fill="rgb(213,116,39)"/><text x="19.9701%" y="207.50"></text></g><g><title>misc_checking_3 (2,599,279 samples, 1.76%)</title><rect x="18.4672%" y="229" width="1.7623%" height="15" fill="rgb(222,207,29)"/><text x="18.7172%" y="239.50"></text></g><g><title>associated_item (247,603 samples, 0.17%)</title><rect x="37.2902%" y="149" width="0.1679%" height="15" fill="rgb(206,96,30)"/><text x="37.5402%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (187,892 samples, 0.13%)</title><rect x="37.3307%" y="133" width="0.1274%" height="15" fill="rgb(218,138,4)"/><text x="37.5807%" y="143.50"></text></g><g><title>associated_items (369,355 samples, 0.25%)</title><rect x="37.2215%" y="165" width="0.2504%" height="15" fill="rgb(250,191,14)"/><text x="37.4715%" y="175.50"></text></g><g><title>adt_def (222,013 samples, 0.15%)</title><rect x="37.7424%" y="133" width="0.1505%" height="15" fill="rgb(239,60,40)"/><text x="37.9924%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (213,803 samples, 0.14%)</title><rect x="37.7479%" y="117" width="0.1450%" height="15" fill="rgb(206,27,48)"/><text x="37.9979%" y="127.50"></text></g><g><title>adt_def (147,612 samples, 0.10%)</title><rect x="38.0483%" y="117" width="0.1001%" height="15" fill="rgb(225,35,8)"/><text x="38.2983%" y="127.50"></text></g><g><title>adt_def (149,410 samples, 0.10%)</title><rect x="38.2679%" y="101" width="0.1013%" height="15" fill="rgb(250,213,24)"/><text x="38.5179%" y="111.50"></text></g><g><title>adt_def (287,842 samples, 0.20%)</title><rect x="38.4598%" y="85" width="0.1952%" height="15" fill="rgb(247,123,22)"/><text x="38.7098%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (277,562 samples, 0.19%)</title><rect x="38.4668%" y="69" width="0.1882%" height="15" fill="rgb(231,138,38)"/><text x="38.7168%" y="79.50"></text></g><g><title>item_attrs (162,022 samples, 0.11%)</title><rect x="38.5451%" y="53" width="0.1099%" height="15" fill="rgb(231,145,46)"/><text x="38.7951%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (152,952 samples, 0.10%)</title><rect x="38.5513%" y="37" width="0.1037%" height="15" fill="rgb(251,118,11)"/><text x="38.8013%" y="47.50"></text></g><g><title>adt_dtorck_constraint (216,423 samples, 0.15%)</title><rect x="38.6958%" y="85" width="0.1467%" height="15" fill="rgb(217,147,25)"/><text x="38.9458%" y="95.50"></text></g><g><title>adt_dtorck_constraint (714,788 samples, 0.48%)</title><rect x="38.3920%" y="101" width="0.4846%" height="15" fill="rgb(247,81,37)"/><text x="38.6420%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,095,901 samples, 0.74%)</title><rect x="38.1976%" y="117" width="0.7430%" height="15" fill="rgb(209,12,38)"/><text x="38.4476%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,629,288 samples, 1.10%)</title><rect x="37.9260%" y="133" width="1.1047%" height="15" fill="rgb(227,1,9)"/><text x="38.1760%" y="143.50"></text></g><g><title>dropck_outlives (2,341,284 samples, 1.59%)</title><rect x="37.5027%" y="165" width="1.5874%" height="15" fill="rgb(248,47,43)"/><text x="37.7527%" y="175.50"></text></g><g><title>adt_dtorck_constraint (2,155,963 samples, 1.46%)</title><rect x="37.6284%" y="149" width="1.4617%" height="15" fill="rgb(221,10,30)"/><text x="37.8784%" y="159.50"></text></g><g><title>adt_def (202,423 samples, 0.14%)</title><rect x="39.3605%" y="133" width="0.1372%" height="15" fill="rgb(210,229,1)"/><text x="39.6105%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (199,873 samples, 0.14%)</title><rect x="39.3622%" y="117" width="0.1355%" height="15" fill="rgb(222,148,37)"/><text x="39.6122%" y="127.50"></text></g><g><title>item_attrs (169,993 samples, 0.12%)</title><rect x="39.3825%" y="101" width="0.1153%" height="15" fill="rgb(234,67,33)"/><text x="39.6325%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (167,273 samples, 0.11%)</title><rect x="39.3843%" y="85" width="0.1134%" height="15" fill="rgb(247,98,35)"/><text x="39.6343%" y="95.50"></text></g><g><title>adt_def (173,831 samples, 0.12%)</title><rect x="39.6975%" y="69" width="0.1179%" height="15" fill="rgb(247,138,52)"/><text x="39.9475%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (165,581 samples, 0.11%)</title><rect x="39.7031%" y="53" width="0.1123%" height="15" fill="rgb(213,79,30)"/><text x="39.9531%" y="63.50"></text></g><g><title>adt_sized_constraint (356,924 samples, 0.24%)</title><rect x="39.6789%" y="85" width="0.2420%" height="15" fill="rgb(246,177,23)"/><text x="39.9289%" y="95.50"></text></g><g><title>adt_sized_constraint (503,555 samples, 0.34%)</title><rect x="39.6050%" y="101" width="0.3414%" height="15" fill="rgb(230,62,27)"/><text x="39.8550%" y="111.50"></text></g><g><title>adt_sized_constraint (623,837 samples, 0.42%)</title><rect x="39.5374%" y="117" width="0.4230%" height="15" fill="rgb(216,154,8)"/><text x="39.7874%" y="127.50"></text></g><g><title>adt_sized_constraint (699,838 samples, 0.47%)</title><rect x="39.4977%" y="133" width="0.4745%" height="15" fill="rgb(244,35,45)"/><text x="39.7477%" y="143.50"></text></g><g><title>adt_sized_constraint (931,572 samples, 0.63%)</title><rect x="39.3489%" y="149" width="0.6316%" height="15" fill="rgb(251,115,12)"/><text x="39.5989%" y="159.50"></text></g><g><title>evaluate_obligation (1,865,559 samples, 1.26%)</title><rect x="39.0901%" y="165" width="1.2648%" height="15" fill="rgb(240,54,50)"/><text x="39.3401%" y="175.50"></text></g><g><title>trait_impls_of (345,745 samples, 0.23%)</title><rect x="40.1206%" y="149" width="0.2344%" height="15" fill="rgb(233,84,52)"/><text x="40.3706%" y="159.50"></text></g><g><title>generics_of (165,942 samples, 0.11%)</title><rect x="40.4664%" y="165" width="0.1125%" height="15" fill="rgb(207,117,47)"/><text x="40.7164%" y="175.50"></text></g><g><title>method_autoderef_steps (160,621 samples, 0.11%)</title><rect x="40.7890%" y="165" width="0.1089%" height="15" fill="rgb(249,43,39)"/><text x="41.0390%" y="175.50"></text></g><g><title>predicates_of (396,445 samples, 0.27%)</title><rect x="40.9074%" y="165" width="0.2688%" height="15" fill="rgb(209,38,44)"/><text x="41.1574%" y="175.50"></text></g><g><title>predicates_defined_on (267,063 samples, 0.18%)</title><rect x="40.9951%" y="149" width="0.1811%" height="15" fill="rgb(236,212,23)"/><text x="41.2451%" y="159.50"></text></g><g><title>item_bodies_checking (30,988,195 samples, 21.01%)</title><rect x="20.2769%" y="213" width="21.0099%" height="15" fill="rgb(242,79,21)"/><text x="20.5269%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,985,555 samples, 21.01%)</title><rect x="20.2787%" y="197" width="21.0081%" height="15" fill="rgb(211,96,35)"/><text x="20.5287%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (30,974,615 samples, 21.00%)</title><rect x="20.2861%" y="181" width="21.0007%" height="15" fill="rgb(253,215,40)"/><text x="20.5361%" y="191.50">typeck</text></g><g><title>impl_trait_ref (380,603 samples, 0.26%)</title><rect x="41.7475%" y="53" width="0.2580%" height="15" fill="rgb(211,81,21)"/><text x="41.9975%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (355,613 samples, 0.24%)</title><rect x="41.7644%" y="37" width="0.2411%" height="15" fill="rgb(208,190,38)"/><text x="42.0144%" y="47.50"></text></g><g><title>coherent_trait (629,057 samples, 0.43%)</title><rect x="41.6065%" y="85" width="0.4265%" height="15" fill="rgb(235,213,38)"/><text x="41.8565%" y="95.50"></text></g><g><title>specialization_graph_of (625,647 samples, 0.42%)</title><rect x="41.6088%" y="69" width="0.4242%" height="15" fill="rgb(237,122,38)"/><text x="41.8588%" y="79.50"></text></g><g><title>adt_destructor (635,927 samples, 0.43%)</title><rect x="41.6030%" y="117" width="0.4312%" height="15" fill="rgb(244,218,35)"/><text x="41.8530%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (635,437 samples, 0.43%)</title><rect x="41.6033%" y="101" width="0.4308%" height="15" fill="rgb(240,68,47)"/><text x="41.8533%" y="111.50"></text></g><g><title>adt_dtorck_constraint (645,857 samples, 0.44%)</title><rect x="41.5966%" y="133" width="0.4379%" height="15" fill="rgb(210,16,53)"/><text x="41.8466%" y="143.50"></text></g><g><title>dropck_outlives (674,977 samples, 0.46%)</title><rect x="41.5779%" y="165" width="0.4576%" height="15" fill="rgb(235,124,12)"/><text x="41.8279%" y="175.50"></text></g><g><title>adt_dtorck_constraint (658,727 samples, 0.45%)</title><rect x="41.5889%" y="149" width="0.4466%" height="15" fill="rgb(224,169,11)"/><text x="41.8389%" y="159.50"></text></g><g><title>item_types_checking (1,290,654 samples, 0.88%)</title><rect x="41.2868%" y="213" width="0.8751%" height="15" fill="rgb(250,166,2)"/><text x="41.5368%" y="223.50"></text></g><g><title>check_mod_item_types (1,289,044 samples, 0.87%)</title><rect x="41.2879%" y="197" width="0.8740%" height="15" fill="rgb(242,216,29)"/><text x="41.5379%" y="207.50"></text></g><g><title>typeck (1,254,864 samples, 0.85%)</title><rect x="41.3110%" y="181" width="0.8508%" height="15" fill="rgb(230,116,27)"/><text x="41.5610%" y="191.50"></text></g><g><title>lint_levels (165,162 samples, 0.11%)</title><rect x="42.1618%" y="213" width="0.1120%" height="15" fill="rgb(228,99,48)"/><text x="42.4118%" y="223.50"></text></g><g><title>named_region_map (153,472 samples, 0.10%)</title><rect x="42.4236%" y="165" width="0.1041%" height="15" fill="rgb(253,11,6)"/><text x="42.6736%" y="175.50"></text></g><g><title>generics_of (184,892 samples, 0.13%)</title><rect x="42.4058%" y="181" width="0.1254%" height="15" fill="rgb(247,143,39)"/><text x="42.6558%" y="191.50"></text></g><g><title>type_collecting (449,265 samples, 0.30%)</title><rect x="42.2745%" y="213" width="0.3046%" height="15" fill="rgb(236,97,10)"/><text x="42.5245%" y="223.50"></text></g><g><title>collect_mod_item_types (442,985 samples, 0.30%)</title><rect x="42.2788%" y="197" width="0.3003%" height="15" fill="rgb(233,208,19)"/><text x="42.5288%" y="207.50"></text></g><g><title>evaluate_obligation (238,153 samples, 0.16%)</title><rect x="42.9058%" y="181" width="0.1615%" height="15" fill="rgb(216,164,2)"/><text x="43.1558%" y="191.50"></text></g><g><title>region_scope_tree (324,636 samples, 0.22%)</title><rect x="43.2474%" y="181" width="0.2201%" height="15" fill="rgb(220,129,5)"/><text x="43.4974%" y="191.50"></text></g><g><title>analysis (63,464,689 samples, 43.03%)</title><rect x="0.4390%" y="245" width="43.0289%" height="15" fill="rgb(242,17,10)"/><text x="0.6890%" y="255.50">analysis</text></g><g><title>type_check_crate (34,274,973 samples, 23.24%)</title><rect x="20.2295%" y="229" width="23.2383%" height="15" fill="rgb(242,107,0)"/><text x="20.4795%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,309,955 samples, 0.89%)</title><rect x="42.5797%" y="213" width="0.8881%" height="15" fill="rgb(251,28,31)"/><text x="42.8297%" y="223.50"></text></g><g><title>check_item_well_formed (1,253,825 samples, 0.85%)</title><rect x="42.6177%" y="197" width="0.8501%" height="15" fill="rgb(233,223,10)"/><text x="42.8677%" y="207.50"></text></g><g><title>codegen_crate (400,134 samples, 0.27%)</title><rect x="43.4753%" y="245" width="0.2713%" height="15" fill="rgb(215,21,27)"/><text x="43.7253%" y="255.50"></text></g><g><title>metadata_load_macro (732,309 samples, 0.50%)</title><rect x="88.5506%" y="197" width="0.4965%" height="15" fill="rgb(232,23,21)"/><text x="88.8006%" y="207.50"></text></g><g><title>macro_expand_crate (69,161,132 samples, 46.89%)</title><rect x="44.0284%" y="229" width="46.8910%" height="15" fill="rgb(244,5,23)"/><text x="44.2784%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (69,142,621 samples, 46.88%)</title><rect x="44.0410%" y="213" width="46.8785%" height="15" fill="rgb(226,81,46)"/><text x="44.2910%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,761,641 samples, 1.87%)</title><rect x="89.0471%" y="197" width="1.8724%" height="15" fill="rgb(247,70,30)"/><text x="89.2971%" y="207.50">m..</text></g><g><title>metadata_register_crate (905,629 samples, 0.61%)</title><rect x="90.3054%" y="181" width="0.6140%" height="15" fill="rgb(212,68,19)"/><text x="90.5554%" y="191.50"></text></g><g><title>maybe_create_a_macro_crate (283,863 samples, 0.19%)</title><rect x="90.9202%" y="229" width="0.1925%" height="15" fill="rgb(240,187,13)"/><text x="91.1702%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (164,512 samples, 0.11%)</title><rect x="91.1127%" y="229" width="0.1115%" height="15" fill="rgb(223,113,26)"/><text x="91.3627%" y="239.50"></text></g><g><title>finalize_macro_resolutions (643,647 samples, 0.44%)</title><rect x="91.3238%" y="213" width="0.4364%" height="15" fill="rgb(206,192,2)"/><text x="91.5738%" y="223.50"></text></g><g><title>late_resolve_crate (2,196,795 samples, 1.49%)</title><rect x="91.7602%" y="213" width="1.4894%" height="15" fill="rgb(241,108,4)"/><text x="92.0102%" y="223.50"></text></g><g><title>configure_and_expand (73,136,095 samples, 49.59%)</title><rect x="43.7466%" y="245" width="49.5861%" height="15" fill="rgb(247,173,49)"/><text x="43.9966%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (3,109,764 samples, 2.11%)</title><rect x="91.2242%" y="229" width="2.1084%" height="15" fill="rgb(224,114,35)"/><text x="91.4742%" y="239.50">r..</text></g><g><title>drop_ast (165,862 samples, 0.11%)</title><rect x="93.3326%" y="245" width="0.1125%" height="15" fill="rgb(245,159,27)"/><text x="93.5826%" y="255.50"></text></g><g><title>early_lint_checks (528,006 samples, 0.36%)</title><rect x="93.4574%" y="245" width="0.3580%" height="15" fill="rgb(245,172,44)"/><text x="93.7074%" y="255.50"></text></g><g><title>free_global_ctxt (2,822,311 samples, 1.91%)</title><rect x="93.8154%" y="245" width="1.9135%" height="15" fill="rgb(236,23,11)"/><text x="94.0654%" y="255.50">f..</text></g><g><title>generate_crate_metadata (170,632 samples, 0.12%)</title><rect x="95.7289%" y="245" width="0.1157%" height="15" fill="rgb(205,117,38)"/><text x="95.9789%" y="255.50"></text></g><g><title>hir_lowering (2,647,410 samples, 1.79%)</title><rect x="95.8446%" y="245" width="1.7949%" height="15" fill="rgb(237,72,25)"/><text x="96.0946%" y="255.50">h..</text></g><g><title>parse_crate (2,402,527 samples, 1.63%)</title><rect x="97.6731%" y="245" width="1.6289%" height="15" fill="rgb(244,70,9)"/><text x="97.9231%" y="255.50"></text></g><g><title>prepare_outputs (182,292 samples, 0.12%)</title><rect x="99.3066%" y="245" width="0.1236%" height="15" fill="rgb(217,125,39)"/><text x="99.5566%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (454,565 samples, 0.31%)</title><rect x="99.4302%" y="245" width="0.3082%" height="15" fill="rgb(235,36,10)"/><text x="99.6802%" y="255.50"></text></g><g><title>all (147,493,256 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (147,493,256 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (282,343 samples, 0.19%)</title><rect x="99.8086%" y="245" width="0.1914%" height="15" fill="rgb(238,131,9)"/><text x="100.0586%" y="255.50"></text></g></svg></svg>