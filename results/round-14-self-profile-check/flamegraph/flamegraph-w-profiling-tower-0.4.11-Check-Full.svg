<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (58,460 samples, 0.11%)</title><rect x="4.9568%" y="181" width="0.1146%" height="15" fill="rgb(227,0,7)"/><text x="5.2068%" y="191.50"></text></g><g><title>explicit_predicates_of (57,060 samples, 0.11%)</title><rect x="6.1435%" y="53" width="0.1119%" height="15" fill="rgb(217,0,24)"/><text x="6.3935%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (56,700 samples, 0.11%)</title><rect x="6.1443%" y="37" width="0.1112%" height="15" fill="rgb(221,193,54)"/><text x="6.3943%" y="47.50"></text></g><g><title>is_copy_raw (104,871 samples, 0.21%)</title><rect x="6.0511%" y="117" width="0.2056%" height="15" fill="rgb(248,212,6)"/><text x="6.3011%" y="127.50"></text></g><g><title>evaluate_obligation (101,181 samples, 0.20%)</title><rect x="6.0584%" y="101" width="0.1984%" height="15" fill="rgb(208,68,35)"/><text x="6.3084%" y="111.50"></text></g><g><title>predicates_of (61,270 samples, 0.12%)</title><rect x="6.1366%" y="85" width="0.1201%" height="15" fill="rgb(232,128,0)"/><text x="6.3866%" y="95.50"></text></g><g><title>predicates_defined_on (58,960 samples, 0.12%)</title><rect x="6.1411%" y="69" width="0.1156%" height="15" fill="rgb(207,160,47)"/><text x="6.3911%" y="79.50"></text></g><g><title>adt_drop_tys (119,401 samples, 0.23%)</title><rect x="6.0401%" y="133" width="0.2341%" height="15" fill="rgb(228,23,34)"/><text x="6.2901%" y="143.50"></text></g><g><title>needs_drop_raw (505,817 samples, 0.99%)</title><rect x="5.9713%" y="149" width="0.9918%" height="15" fill="rgb(218,30,26)"/><text x="6.2213%" y="159.50"></text></g><g><title>is_copy_raw (351,316 samples, 0.69%)</title><rect x="6.2742%" y="133" width="0.6889%" height="15" fill="rgb(220,122,19)"/><text x="6.5242%" y="143.50"></text></g><g><title>evaluate_obligation (309,735 samples, 0.61%)</title><rect x="6.3558%" y="117" width="0.6073%" height="15" fill="rgb(250,228,42)"/><text x="6.6058%" y="127.50"></text></g><g><title>trait_impls_of (139,932 samples, 0.27%)</title><rect x="6.6887%" y="101" width="0.2744%" height="15" fill="rgb(240,193,28)"/><text x="6.9387%" y="111.50"></text></g><g><title>resolve_instance (55,490 samples, 0.11%)</title><rect x="6.9631%" y="149" width="0.1088%" height="15" fill="rgb(216,20,37)"/><text x="7.2131%" y="159.50"></text></g><g><title>thir_body (103,872 samples, 0.20%)</title><rect x="7.0830%" y="149" width="0.2037%" height="15" fill="rgb(206,188,39)"/><text x="7.3330%" y="159.50"></text></g><g><title>mir_const (1,378,796 samples, 2.70%)</title><rect x="4.5967%" y="197" width="2.7035%" height="15" fill="rgb(217,207,13)"/><text x="4.8467%" y="207.50">mi..</text></g><g><title>unsafety_check_result (1,136,652 samples, 2.23%)</title><rect x="5.0715%" y="181" width="2.2287%" height="15" fill="rgb(231,73,38)"/><text x="5.3215%" y="191.50">u..</text></g><g><title>mir_built (1,005,882 samples, 1.97%)</title><rect x="5.3279%" y="165" width="1.9723%" height="15" fill="rgb(225,20,46)"/><text x="5.5779%" y="175.50">m..</text></g><g><title>mir_promoted (1,548,740 samples, 3.04%)</title><rect x="4.2851%" y="213" width="3.0367%" height="15" fill="rgb(210,31,41)"/><text x="4.5351%" y="223.50">mir..</text></g><g><title>type_op_prove_predicate (225,572 samples, 0.44%)</title><rect x="7.4871%" y="213" width="0.4423%" height="15" fill="rgb(221,200,47)"/><text x="7.7371%" y="223.50"></text></g><g><title>MIR_borrow_checking (3,232,076 samples, 6.34%)</title><rect x="1.5943%" y="245" width="6.3374%" height="15" fill="rgb(226,26,5)"/><text x="1.8443%" y="255.50">MIR_borr..</text></g><g><title>mir_borrowck (3,212,706 samples, 6.30%)</title><rect x="1.6323%" y="229" width="6.2994%" height="15" fill="rgb(249,33,26)"/><text x="1.8823%" y="239.50">mir_borr..</text></g><g><title>hir_module_items (137,221 samples, 0.27%)</title><rect x="7.9433%" y="245" width="0.2691%" height="15" fill="rgb(235,183,28)"/><text x="8.1933%" y="255.50"></text></g><g><title>get_lang_items (66,541 samples, 0.13%)</title><rect x="8.8006%" y="165" width="0.1305%" height="15" fill="rgb(221,5,38)"/><text x="9.0506%" y="175.50"></text></g><g><title>item_attrs (53,052 samples, 0.10%)</title><rect x="8.9311%" y="165" width="0.1040%" height="15" fill="rgb(247,18,42)"/><text x="9.1811%" y="175.50"></text></g><g><title>codegen_fn_attrs (215,643 samples, 0.42%)</title><rect x="8.7299%" y="181" width="0.4228%" height="15" fill="rgb(241,131,45)"/><text x="8.9799%" y="191.50"></text></g><g><title>codegen_fn_attrs (314,074 samples, 0.62%)</title><rect x="8.5434%" y="213" width="0.6158%" height="15" fill="rgb(249,31,29)"/><text x="8.7934%" y="223.50"></text></g><g><title>should_inherit_track_caller (279,663 samples, 0.55%)</title><rect x="8.6109%" y="197" width="0.5484%" height="15" fill="rgb(225,111,53)"/><text x="8.8609%" y="207.50"></text></g><g><title>check_mod_attrs (446,685 samples, 0.88%)</title><rect x="8.2837%" y="229" width="0.8758%" height="15" fill="rgb(238,160,17)"/><text x="8.5337%" y="239.50"></text></g><g><title>check_mod_const_bodies (64,021 samples, 0.13%)</title><rect x="9.1595%" y="229" width="0.1255%" height="15" fill="rgb(214,148,48)"/><text x="9.4095%" y="239.50"></text></g><g><title>lookup_deprecation_entry (117,831 samples, 0.23%)</title><rect x="9.5906%" y="213" width="0.2310%" height="15" fill="rgb(232,36,49)"/><text x="9.8406%" y="223.50"></text></g><g><title>stability_index (61,841 samples, 0.12%)</title><rect x="9.7004%" y="197" width="0.1213%" height="15" fill="rgb(209,103,24)"/><text x="9.9504%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (293,643 samples, 0.58%)</title><rect x="9.3554%" y="229" width="0.5758%" height="15" fill="rgb(229,88,8)"/><text x="9.6054%" y="239.50"></text></g><g><title>misc_checking_1 (938,541 samples, 1.84%)</title><rect x="8.2133%" y="245" width="1.8403%" height="15" fill="rgb(213,181,19)"/><text x="8.4633%" y="255.50">m..</text></g><g><title>liveness_and_intrinsic_checking (77,061 samples, 0.15%)</title><rect x="10.0560%" y="229" width="0.1511%" height="15" fill="rgb(254,191,54)"/><text x="10.3060%" y="239.50"></text></g><g><title>check_mod_liveness (55,301 samples, 0.11%)</title><rect x="10.0986%" y="213" width="0.1084%" height="15" fill="rgb(241,83,37)"/><text x="10.3486%" y="223.50"></text></g><g><title>misc_checking_2 (163,982 samples, 0.32%)</title><rect x="10.0535%" y="245" width="0.3215%" height="15" fill="rgb(233,36,39)"/><text x="10.3035%" y="255.50"></text></g><g><title>match_checking (85,671 samples, 0.17%)</title><rect x="10.2071%" y="229" width="0.1680%" height="15" fill="rgb(226,3,54)"/><text x="10.4571%" y="239.50"></text></g><g><title>check_match (79,181 samples, 0.16%)</title><rect x="10.2198%" y="213" width="0.1553%" height="15" fill="rgb(245,192,40)"/><text x="10.4698%" y="223.50"></text></g><g><title>check_private_in_public (63,161 samples, 0.12%)</title><rect x="10.3904%" y="229" width="0.1238%" height="15" fill="rgb(238,167,29)"/><text x="10.6404%" y="239.50"></text></g><g><title>death_checking (198,302 samples, 0.39%)</title><rect x="10.5142%" y="229" width="0.3888%" height="15" fill="rgb(232,182,51)"/><text x="10.7642%" y="239.50"></text></g><g><title>lint_levels (68,040 samples, 0.13%)</title><rect x="10.7696%" y="213" width="0.1334%" height="15" fill="rgb(231,60,39)"/><text x="11.0196%" y="223.50"></text></g><g><title>param_env (116,552 samples, 0.23%)</title><rect x="12.0244%" y="197" width="0.2285%" height="15" fill="rgb(208,69,12)"/><text x="12.2744%" y="207.50"></text></g><g><title>crate_lints (1,713,709 samples, 3.36%)</title><rect x="10.9057%" y="213" width="3.3602%" height="15" fill="rgb(235,93,37)"/><text x="11.1557%" y="223.50">cra..</text></g><g><title>type_of (1,026,631 samples, 2.01%)</title><rect x="12.2529%" y="197" width="2.0130%" height="15" fill="rgb(213,116,39)"/><text x="12.5029%" y="207.50">t..</text></g><g><title>metadata_decode_entry_type_of (796,529 samples, 1.56%)</title><rect x="12.7041%" y="181" width="1.5618%" height="15" fill="rgb(222,207,29)"/><text x="12.9541%" y="191.50"></text></g><g><title>lint_checking (1,773,699 samples, 3.48%)</title><rect x="10.9030%" y="229" width="3.4778%" height="15" fill="rgb(206,96,30)"/><text x="11.1530%" y="239.50">lin..</text></g><g><title>module_lints (58,620 samples, 0.11%)</title><rect x="14.2659%" y="213" width="0.1149%" height="15" fill="rgb(218,138,4)"/><text x="14.5159%" y="223.50"></text></g><g><title>lint_mod (55,190 samples, 0.11%)</title><rect x="14.2726%" y="197" width="0.1082%" height="15" fill="rgb(250,191,14)"/><text x="14.5226%" y="207.50"></text></g><g><title>privacy_access_levels (73,051 samples, 0.14%)</title><rect x="14.3808%" y="229" width="0.1432%" height="15" fill="rgb(239,60,40)"/><text x="14.6308%" y="239.50"></text></g><g><title>privacy_checking_modules (167,442 samples, 0.33%)</title><rect x="14.5241%" y="229" width="0.3283%" height="15" fill="rgb(206,27,48)"/><text x="14.7741%" y="239.50"></text></g><g><title>check_mod_privacy (164,332 samples, 0.32%)</title><rect x="14.5302%" y="213" width="0.3222%" height="15" fill="rgb(225,35,8)"/><text x="14.7802%" y="223.50"></text></g><g><title>misc_checking_3 (2,294,755 samples, 4.50%)</title><rect x="10.3751%" y="245" width="4.4995%" height="15" fill="rgb(250,213,24)"/><text x="10.6251%" y="255.50">misc_..</text></g><g><title>impl_parent (2,187,323 samples, 4.29%)</title><rect x="21.3599%" y="181" width="4.2888%" height="15" fill="rgb(247,123,22)"/><text x="21.6099%" y="191.50">impl_..</text></g><g><title>metadata_decode_entry_impl_parent (1,180,403 samples, 2.31%)</title><rect x="23.3342%" y="165" width="2.3145%" height="15" fill="rgb(231,138,38)"/><text x="23.5842%" y="175.50">m..</text></g><g><title>impl_trait_ref (6,264,968 samples, 12.28%)</title><rect x="25.6487%" y="181" width="12.2842%" height="15" fill="rgb(231,145,46)"/><text x="25.8987%" y="191.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,441,949 samples, 10.67%)</title><rect x="27.2625%" y="165" width="10.6704%" height="15" fill="rgb(251,118,11)"/><text x="27.5125%" y="175.50">metadata_decode_..</text></g><g><title>coherent_trait (12,587,860 samples, 24.68%)</title><rect x="14.9941%" y="213" width="24.6819%" height="15" fill="rgb(217,147,25)"/><text x="15.2441%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (12,574,950 samples, 24.66%)</title><rect x="15.0194%" y="197" width="24.6566%" height="15" fill="rgb(247,81,37)"/><text x="15.2694%" y="207.50">specialization_graph_of</text></g><g><title>trait_impls_of (887,040 samples, 1.74%)</title><rect x="37.9367%" y="181" width="1.7393%" height="15" fill="rgb(209,12,38)"/><text x="38.1867%" y="191.50"></text></g><g><title>implementations_of_trait (197,170 samples, 0.39%)</title><rect x="39.2894%" y="165" width="0.3866%" height="15" fill="rgb(227,1,9)"/><text x="39.5394%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (160,820 samples, 0.32%)</title><rect x="39.3607%" y="149" width="0.3153%" height="15" fill="rgb(248,47,43)"/><text x="39.6107%" y="159.50"></text></g><g><title>coherence_checking (12,657,901 samples, 24.82%)</title><rect x="14.9496%" y="229" width="24.8193%" height="15" fill="rgb(221,10,30)"/><text x="15.1996%" y="239.50">coherence_checking</text></g><g><title>associated_items (52,430 samples, 0.10%)</title><rect x="42.9342%" y="181" width="0.1028%" height="15" fill="rgb(210,229,1)"/><text x="43.1842%" y="191.50"></text></g><g><title>adt_dtorck_constraint (70,280 samples, 0.14%)</title><rect x="43.1893%" y="165" width="0.1378%" height="15" fill="rgb(222,148,37)"/><text x="43.4393%" y="175.50"></text></g><g><title>dropck_outlives (153,931 samples, 0.30%)</title><rect x="43.0493%" y="181" width="0.3018%" height="15" fill="rgb(234,67,33)"/><text x="43.2993%" y="191.50"></text></g><g><title>method_autoderef_steps (96,752 samples, 0.19%)</title><rect x="43.5915%" y="181" width="0.1897%" height="15" fill="rgb(247,98,35)"/><text x="43.8415%" y="191.50"></text></g><g><title>evaluate_obligation (56,882 samples, 0.11%)</title><rect x="43.6697%" y="165" width="0.1115%" height="15" fill="rgb(247,138,52)"/><text x="43.9197%" y="175.50"></text></g><g><title>object_safety_violations (147,901 samples, 0.29%)</title><rect x="43.7812%" y="181" width="0.2900%" height="15" fill="rgb(213,79,30)"/><text x="44.0312%" y="191.50"></text></g><g><title>item_bodies_checking (2,253,855 samples, 4.42%)</title><rect x="39.8337%" y="229" width="4.4193%" height="15" fill="rgb(246,177,23)"/><text x="40.0837%" y="239.50">item_..</text></g><g><title>typeck_item_bodies (2,252,315 samples, 4.42%)</title><rect x="39.8367%" y="213" width="4.4163%" height="15" fill="rgb(230,62,27)"/><text x="40.0867%" y="223.50">typec..</text></g><g><title>typeck (2,237,855 samples, 4.39%)</title><rect x="39.8651%" y="197" width="4.3879%" height="15" fill="rgb(216,154,8)"/><text x="40.1151%" y="207.50">typeck</text></g><g><title>impl_trait_ref (134,252 samples, 0.26%)</title><rect x="44.9112%" y="149" width="0.2632%" height="15" fill="rgb(244,35,45)"/><text x="45.1612%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (115,332 samples, 0.23%)</title><rect x="44.9483%" y="133" width="0.2261%" height="15" fill="rgb(251,115,12)"/><text x="45.1983%" y="143.50"></text></g><g><title>adt_destructor (286,233 samples, 0.56%)</title><rect x="44.6643%" y="197" width="0.5612%" height="15" fill="rgb(240,54,50)"/><text x="44.9143%" y="207.50"></text></g><g><title>coherent_trait (283,313 samples, 0.56%)</title><rect x="44.6700%" y="181" width="0.5555%" height="15" fill="rgb(233,84,52)"/><text x="44.9200%" y="191.50"></text></g><g><title>specialization_graph_of (281,893 samples, 0.55%)</title><rect x="44.6728%" y="165" width="0.5527%" height="15" fill="rgb(207,117,47)"/><text x="44.9228%" y="175.50"></text></g><g><title>item_types_checking (534,216 samples, 1.05%)</title><rect x="44.2530%" y="229" width="1.0475%" height="15" fill="rgb(249,43,39)"/><text x="44.5030%" y="239.50"></text></g><g><title>check_mod_item_types (530,276 samples, 1.04%)</title><rect x="44.2607%" y="213" width="1.0398%" height="15" fill="rgb(209,38,44)"/><text x="44.5107%" y="223.50"></text></g><g><title>late_bound_vars_map (113,871 samples, 0.22%)</title><rect x="45.8767%" y="181" width="0.2233%" height="15" fill="rgb(236,212,23)"/><text x="46.1267%" y="191.50"></text></g><g><title>resolve_lifetimes (107,681 samples, 0.21%)</title><rect x="45.8889%" y="165" width="0.2111%" height="15" fill="rgb(242,79,21)"/><text x="46.1389%" y="175.50"></text></g><g><title>fn_sig (334,004 samples, 0.65%)</title><rect x="45.6297%" y="197" width="0.6549%" height="15" fill="rgb(211,96,35)"/><text x="45.8797%" y="207.50"></text></g><g><title>type_param_predicates (57,061 samples, 0.11%)</title><rect x="46.1727%" y="181" width="0.1119%" height="15" fill="rgb(253,215,40)"/><text x="46.4227%" y="191.50"></text></g><g><title>generics_of (86,781 samples, 0.17%)</title><rect x="46.2846%" y="197" width="0.1702%" height="15" fill="rgb(211,81,21)"/><text x="46.5346%" y="207.50"></text></g><g><title>late_bound_vars_map (85,460 samples, 0.17%)</title><rect x="46.9380%" y="149" width="0.1676%" height="15" fill="rgb(208,190,38)"/><text x="47.1880%" y="159.50"></text></g><g><title>resolve_lifetimes (77,820 samples, 0.15%)</title><rect x="46.9530%" y="133" width="0.1526%" height="15" fill="rgb(235,213,38)"/><text x="47.2030%" y="143.50"></text></g><g><title>explicit_predicates_of (299,111 samples, 0.59%)</title><rect x="46.6255%" y="165" width="0.5865%" height="15" fill="rgb(237,122,38)"/><text x="46.8755%" y="175.50"></text></g><g><title>predicates_of (400,752 samples, 0.79%)</title><rect x="46.5043%" y="197" width="0.7858%" height="15" fill="rgb(244,218,35)"/><text x="46.7543%" y="207.50"></text></g><g><title>predicates_defined_on (377,121 samples, 0.74%)</title><rect x="46.5506%" y="181" width="0.7394%" height="15" fill="rgb(240,68,47)"/><text x="46.8006%" y="191.50"></text></g><g><title>late_bound_vars_map (52,121 samples, 0.10%)</title><rect x="48.1666%" y="181" width="0.1022%" height="15" fill="rgb(210,16,53)"/><text x="48.4166%" y="191.50"></text></g><g><title>type_collecting (1,583,918 samples, 3.11%)</title><rect x="45.3027%" y="229" width="3.1057%" height="15" fill="rgb(235,124,12)"/><text x="45.5527%" y="239.50">typ..</text></g><g><title>collect_mod_item_types (1,569,198 samples, 3.08%)</title><rect x="45.3316%" y="213" width="3.0768%" height="15" fill="rgb(224,169,11)"/><text x="45.5816%" y="223.50">col..</text></g><g><title>type_of (564,618 samples, 1.11%)</title><rect x="47.3014%" y="197" width="1.1071%" height="15" fill="rgb(250,166,2)"/><text x="47.5514%" y="207.50"></text></g><g><title>evaluate_obligation (150,573 samples, 0.30%)</title><rect x="49.7128%" y="197" width="0.2952%" height="15" fill="rgb(242,216,29)"/><text x="49.9628%" y="207.50"></text></g><g><title>implied_outlives_bounds (89,621 samples, 0.18%)</title><rect x="50.0169%" y="197" width="0.1757%" height="15" fill="rgb(230,116,27)"/><text x="50.2669%" y="207.50"></text></g><g><title>param_env (98,571 samples, 0.19%)</title><rect x="50.2075%" y="197" width="0.1933%" height="15" fill="rgb(228,99,48)"/><text x="50.4575%" y="207.50"></text></g><g><title>predicates_of (58,150 samples, 0.11%)</title><rect x="50.4008%" y="197" width="0.1140%" height="15" fill="rgb(253,11,6)"/><text x="50.6508%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,090,913 samples, 2.14%)</title><rect x="48.5000%" y="213" width="2.1390%" height="15" fill="rgb(247,143,39)"/><text x="48.7500%" y="223.50">c..</text></g><g><title>evaluate_obligation (96,371 samples, 0.19%)</title><rect x="51.2606%" y="197" width="0.1890%" height="15" fill="rgb(236,97,10)"/><text x="51.5106%" y="207.50"></text></g><g><title>implied_outlives_bounds (51,911 samples, 0.10%)</title><rect x="51.4539%" y="197" width="0.1018%" height="15" fill="rgb(233,208,19)"/><text x="51.7039%" y="207.50"></text></g><g><title>param_env (114,451 samples, 0.22%)</title><rect x="51.5557%" y="197" width="0.2244%" height="15" fill="rgb(216,164,2)"/><text x="51.8057%" y="207.50"></text></g><g><title>analysis (25,865,807 samples, 50.72%)</title><rect x="1.2257%" y="261" width="50.7170%" height="15" fill="rgb(220,129,5)"/><text x="1.4757%" y="271.50">analysis</text></g><g><title>type_check_crate (18,904,870 samples, 37.07%)</title><rect x="14.8746%" y="245" width="37.0681%" height="15" fill="rgb(242,17,10)"/><text x="15.1246%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,801,390 samples, 3.53%)</title><rect x="48.4106%" y="229" width="3.5321%" height="15" fill="rgb(242,107,0)"/><text x="48.6606%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (664,847 samples, 1.30%)</title><rect x="50.6391%" y="213" width="1.3036%" height="15" fill="rgb(251,28,31)"/><text x="50.8891%" y="223.50"></text></g><g><title>codegen_crate (573,556 samples, 1.12%)</title><rect x="51.9608%" y="261" width="1.1246%" height="15" fill="rgb(233,223,10)"/><text x="52.2108%" y="271.50"></text></g><g><title>AST_validation (124,691 samples, 0.24%)</title><rect x="53.4536%" y="245" width="0.2445%" height="15" fill="rgb(215,21,27)"/><text x="53.7036%" y="255.50"></text></g><g><title>crate_injection (74,811 samples, 0.15%)</title><rect x="53.7831%" y="245" width="0.1467%" height="15" fill="rgb(232,23,21)"/><text x="54.0331%" y="255.50"></text></g><g><title>metadata_load_macro (58,580 samples, 0.11%)</title><rect x="78.5173%" y="213" width="0.1149%" height="15" fill="rgb(244,5,23)"/><text x="78.7673%" y="223.50"></text></g><g><title>metadata_register_crate (2,316,266 samples, 4.54%)</title><rect x="78.6321%" y="213" width="4.5417%" height="15" fill="rgb(226,81,46)"/><text x="78.8821%" y="223.50">metad..</text></g><g><title>metadata_register_crate (849,600 samples, 1.67%)</title><rect x="81.5079%" y="197" width="1.6659%" height="15" fill="rgb(247,70,30)"/><text x="81.7579%" y="207.50"></text></g><g><title>metadata_register_crate (71,331 samples, 0.14%)</title><rect x="83.0339%" y="181" width="0.1399%" height="15" fill="rgb(212,68,19)"/><text x="83.2839%" y="191.50"></text></g><g><title>macro_expand_crate (15,056,347 samples, 29.52%)</title><rect x="53.9297%" y="245" width="29.5221%" height="15" fill="rgb(240,187,13)"/><text x="54.1797%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (15,041,397 samples, 29.49%)</title><rect x="53.9591%" y="229" width="29.4928%" height="15" fill="rgb(223,113,26)"/><text x="54.2091%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (141,791 samples, 0.28%)</title><rect x="83.1738%" y="213" width="0.2780%" height="15" fill="rgb(206,192,2)"/><text x="83.4238%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (123,601 samples, 0.24%)</title><rect x="83.4817%" y="245" width="0.2424%" height="15" fill="rgb(241,108,4)"/><text x="83.7317%" y="255.50"></text></g><g><title>finalize_imports (77,281 samples, 0.15%)</title><rect x="83.7400%" y="229" width="0.1515%" height="15" fill="rgb(247,173,49)"/><text x="83.9900%" y="239.50"></text></g><g><title>finalize_macro_resolutions (59,101 samples, 0.12%)</title><rect x="83.8916%" y="229" width="0.1159%" height="15" fill="rgb(224,114,35)"/><text x="84.1416%" y="239.50"></text></g><g><title>late_resolve_crate (1,225,103 samples, 2.40%)</title><rect x="84.0074%" y="229" width="2.4021%" height="15" fill="rgb(245,159,27)"/><text x="84.2574%" y="239.50">la..</text></g><g><title>configure_and_expand (17,095,440 samples, 33.52%)</title><rect x="53.0854%" y="261" width="33.5203%" height="15" fill="rgb(245,172,44)"/><text x="53.3354%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,469,636 samples, 2.88%)</title><rect x="83.7240%" y="245" width="2.8816%" height="15" fill="rgb(236,23,11)"/><text x="83.9740%" y="255.50">re..</text></g><g><title>drop_ast (134,922 samples, 0.26%)</title><rect x="86.6057%" y="261" width="0.2646%" height="15" fill="rgb(205,117,38)"/><text x="86.8557%" y="271.50"></text></g><g><title>early_lint_checks (261,802 samples, 0.51%)</title><rect x="86.9108%" y="261" width="0.5133%" height="15" fill="rgb(237,72,25)"/><text x="87.1608%" y="271.50"></text></g><g><title>free_global_ctxt (2,540,808 samples, 4.98%)</title><rect x="87.4242%" y="261" width="4.9819%" height="15" fill="rgb(244,70,9)"/><text x="87.6742%" y="271.50">free_g..</text></g><g><title>crate_hash (69,711 samples, 0.14%)</title><rect x="93.1455%" y="245" width="0.1367%" height="15" fill="rgb(217,125,39)"/><text x="93.3955%" y="255.50"></text></g><g><title>generate_crate_metadata (531,276 samples, 1.04%)</title><rect x="92.4061%" y="261" width="1.0417%" height="15" fill="rgb(235,36,10)"/><text x="92.6561%" y="271.50"></text></g><g><title>hir_lowering (1,174,722 samples, 2.30%)</title><rect x="93.4478%" y="261" width="2.3034%" height="15" fill="rgb(251,123,47)"/><text x="93.6978%" y="271.50">h..</text></g><g><title>parse_crate (995,620 samples, 1.95%)</title><rect x="95.8444%" y="261" width="1.9522%" height="15" fill="rgb(221,13,13)"/><text x="96.0944%" y="271.50">p..</text></g><g><title>prepare_outputs (244,932 samples, 0.48%)</title><rect x="97.8126%" y="261" width="0.4803%" height="15" fill="rgb(238,131,9)"/><text x="98.0626%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (467,475 samples, 0.92%)</title><rect x="98.2929%" y="261" width="0.9166%" height="15" fill="rgb(211,50,8)"/><text x="98.5429%" y="271.50"></text></g><g><title>setup_global_ctxt (122,971 samples, 0.24%)</title><rect x="99.2322%" y="261" width="0.2411%" height="15" fill="rgb(245,182,24)"/><text x="99.4822%" y="271.50"></text></g><g><title>all (51,000,316 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (51,000,316 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (268,593 samples, 0.53%)</title><rect x="99.4734%" y="261" width="0.5266%" height="15" fill="rgb(213,55,15)"/><text x="99.7234%" y="271.50"></text></g></svg></svg>