<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (244,393 samples, 0.16%)</title><rect x="12.1172%" y="149" width="0.1559%" height="15" fill="rgb(227,0,7)"/><text x="12.3672%" y="159.50"></text></g><g><title>param_env (413,164 samples, 0.26%)</title><rect x="13.8845%" y="117" width="0.2635%" height="15" fill="rgb(217,0,24)"/><text x="14.1345%" y="127.50"></text></g><g><title>item_attrs (383,255 samples, 0.24%)</title><rect x="14.6563%" y="85" width="0.2444%" height="15" fill="rgb(221,193,54)"/><text x="14.9063%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (368,435 samples, 0.23%)</title><rect x="14.6658%" y="69" width="0.2350%" height="15" fill="rgb(248,212,6)"/><text x="14.9158%" y="79.50"></text></g><g><title>codegen_fn_attrs (528,276 samples, 0.34%)</title><rect x="14.5793%" y="101" width="0.3369%" height="15" fill="rgb(208,68,35)"/><text x="14.8293%" y="111.50"></text></g><g><title>adt_drop_tys (274,303 samples, 0.17%)</title><rect x="17.6367%" y="53" width="0.1749%" height="15" fill="rgb(232,128,0)"/><text x="17.8867%" y="63.50"></text></g><g><title>adt_drop_tys (531,695 samples, 0.34%)</title><rect x="17.6104%" y="69" width="0.3391%" height="15" fill="rgb(207,160,47)"/><text x="17.8604%" y="79.50"></text></g><g><title>needs_drop_raw (2,303,226 samples, 1.47%)</title><rect x="17.4864%" y="85" width="1.4688%" height="15" fill="rgb(228,23,34)"/><text x="17.7364%" y="95.50"></text></g><g><title>is_copy_raw (1,576,669 samples, 1.01%)</title><rect x="17.9498%" y="69" width="1.0055%" height="15" fill="rgb(218,30,26)"/><text x="18.1998%" y="79.50"></text></g><g><title>evaluate_obligation (1,347,623 samples, 0.86%)</title><rect x="18.0958%" y="53" width="0.8594%" height="15" fill="rgb(220,122,19)"/><text x="18.3458%" y="63.50"></text></g><g><title>specialization_graph_of (188,652 samples, 0.12%)</title><rect x="19.1889%" y="69" width="0.1203%" height="15" fill="rgb(250,228,42)"/><text x="19.4389%" y="79.50"></text></g><g><title>resolve_instance (647,999 samples, 0.41%)</title><rect x="18.9552%" y="85" width="0.4132%" height="15" fill="rgb(240,193,28)"/><text x="19.2052%" y="95.50"></text></g><g><title>thir_body (1,431,371 samples, 0.91%)</title><rect x="19.4070%" y="85" width="0.9128%" height="15" fill="rgb(216,20,37)"/><text x="19.6570%" y="95.50"></text></g><g><title>mir_const (11,349,536 samples, 7.24%)</title><rect x="13.1018%" y="133" width="7.2378%" height="15" fill="rgb(206,188,39)"/><text x="13.3518%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (9,709,140 samples, 6.19%)</title><rect x="14.1480%" y="117" width="6.1917%" height="15" fill="rgb(217,207,13)"/><text x="14.3980%" y="127.50">unsafety..</text></g><g><title>mir_built (8,504,454 samples, 5.42%)</title><rect x="14.9162%" y="101" width="5.4235%" height="15" fill="rgb(231,73,38)"/><text x="15.1662%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (12,606,192 samples, 8.04%)</title><rect x="12.3348%" y="149" width="8.0392%" height="15" fill="rgb(225,20,46)"/><text x="12.5848%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (549,224 samples, 0.35%)</title><rect x="20.3740%" y="149" width="0.3503%" height="15" fill="rgb(210,31,41)"/><text x="20.6240%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (640,650 samples, 0.41%)</title><rect x="20.7243%" y="149" width="0.4086%" height="15" fill="rgb(221,200,47)"/><text x="20.9743%" y="159.50"></text></g><g><title>normalize_projection_ty (436,618 samples, 0.28%)</title><rect x="20.8544%" y="133" width="0.2784%" height="15" fill="rgb(226,26,5)"/><text x="21.1044%" y="143.50"></text></g><g><title>type_op_normalize_predicate (198,382 samples, 0.13%)</title><rect x="21.1328%" y="149" width="0.1265%" height="15" fill="rgb(249,33,26)"/><text x="21.3828%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,069,584 samples, 1.96%)</title><rect x="21.2593%" y="149" width="1.9575%" height="15" fill="rgb(235,183,28)"/><text x="21.5093%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (35,045,286 samples, 22.35%)</title><rect x="0.8740%" y="181" width="22.3490%" height="15" fill="rgb(221,5,38)"/><text x="1.1240%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (34,871,044 samples, 22.24%)</title><rect x="0.9852%" y="165" width="22.2379%" height="15" fill="rgb(247,18,42)"/><text x="1.2352%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (304,933 samples, 0.19%)</title><rect x="23.2511%" y="181" width="0.1945%" height="15" fill="rgb(241,131,45)"/><text x="23.5011%" y="191.50"></text></g><g><title>codegen_fn_attrs (390,163 samples, 0.25%)</title><rect x="23.9763%" y="117" width="0.2488%" height="15" fill="rgb(249,31,29)"/><text x="24.2263%" y="127.50"></text></g><g><title>codegen_fn_attrs (715,209 samples, 0.46%)</title><rect x="23.7800%" y="149" width="0.4561%" height="15" fill="rgb(225,111,53)"/><text x="24.0300%" y="159.50"></text></g><g><title>should_inherit_track_caller (601,317 samples, 0.38%)</title><rect x="23.8527%" y="133" width="0.3835%" height="15" fill="rgb(238,160,17)"/><text x="24.1027%" y="143.50"></text></g><g><title>check_mod_attrs (1,204,294 samples, 0.77%)</title><rect x="23.4684%" y="165" width="0.7680%" height="15" fill="rgb(214,148,48)"/><text x="23.7184%" y="175.50"></text></g><g><title>check_mod_const_bodies (243,844 samples, 0.16%)</title><rect x="24.2364%" y="165" width="0.1555%" height="15" fill="rgb(232,36,49)"/><text x="24.4864%" y="175.50"></text></g><g><title>lint_levels (305,374 samples, 0.19%)</title><rect x="24.7120%" y="149" width="0.1947%" height="15" fill="rgb(209,103,24)"/><text x="24.9620%" y="159.50"></text></g><g><title>lookup_deprecation_entry (258,701 samples, 0.16%)</title><rect x="24.9067%" y="149" width="0.1650%" height="15" fill="rgb(229,88,8)"/><text x="25.1567%" y="159.50"></text></g><g><title>stability_index (161,171 samples, 0.10%)</title><rect x="24.9689%" y="133" width="0.1028%" height="15" fill="rgb(213,181,19)"/><text x="25.2189%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,091,081 samples, 0.70%)</title><rect x="24.4960%" y="165" width="0.6958%" height="15" fill="rgb(254,191,54)"/><text x="24.7460%" y="175.50"></text></g><g><title>misc_checking_1 (2,820,652 samples, 1.80%)</title><rect x="23.4459%" y="181" width="1.7988%" height="15" fill="rgb(241,83,37)"/><text x="23.6959%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (649,937 samples, 0.41%)</title><rect x="25.2457%" y="165" width="0.4145%" height="15" fill="rgb(233,36,39)"/><text x="25.4957%" y="175.50"></text></g><g><title>check_mod_liveness (534,726 samples, 0.34%)</title><rect x="25.3192%" y="149" width="0.3410%" height="15" fill="rgb(226,3,54)"/><text x="25.5692%" y="159.50"></text></g><g><title>misc_checking_2 (1,605,018 samples, 1.02%)</title><rect x="25.2446%" y="181" width="1.0236%" height="15" fill="rgb(245,192,40)"/><text x="25.4946%" y="191.50"></text></g><g><title>match_checking (953,441 samples, 0.61%)</title><rect x="25.6602%" y="165" width="0.6080%" height="15" fill="rgb(238,167,29)"/><text x="25.9102%" y="175.50"></text></g><g><title>check_match (914,591 samples, 0.58%)</title><rect x="25.6849%" y="149" width="0.5833%" height="15" fill="rgb(232,182,51)"/><text x="25.9349%" y="159.50"></text></g><g><title>check_private_in_public (235,263 samples, 0.15%)</title><rect x="26.2754%" y="165" width="0.1500%" height="15" fill="rgb(231,60,39)"/><text x="26.5254%" y="175.50"></text></g><g><title>death_checking (427,405 samples, 0.27%)</title><rect x="26.4254%" y="165" width="0.2726%" height="15" fill="rgb(208,69,12)"/><text x="26.6754%" y="175.50"></text></g><g><title>param_env (292,565 samples, 0.19%)</title><rect x="27.2144%" y="133" width="0.1866%" height="15" fill="rgb(235,93,37)"/><text x="27.4644%" y="143.50"></text></g><g><title>crate_lints (2,472,208 samples, 1.58%)</title><rect x="26.6990%" y="149" width="1.5766%" height="15" fill="rgb(213,116,39)"/><text x="26.9490%" y="159.50"></text></g><g><title>type_of (1,319,216 samples, 0.84%)</title><rect x="27.4343%" y="133" width="0.8413%" height="15" fill="rgb(222,207,29)"/><text x="27.6843%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (864,180 samples, 0.55%)</title><rect x="27.7245%" y="117" width="0.5511%" height="15" fill="rgb(206,96,30)"/><text x="27.9745%" y="127.50"></text></g><g><title>layout_of (245,233 samples, 0.16%)</title><rect x="28.6148%" y="117" width="0.1564%" height="15" fill="rgb(218,138,4)"/><text x="28.8648%" y="127.50"></text></g><g><title>layout_of (233,483 samples, 0.15%)</title><rect x="28.6223%" y="101" width="0.1489%" height="15" fill="rgb(250,191,14)"/><text x="28.8723%" y="111.50"></text></g><g><title>layout_of (219,893 samples, 0.14%)</title><rect x="28.6310%" y="85" width="0.1402%" height="15" fill="rgb(239,60,40)"/><text x="28.8810%" y="95.50"></text></g><g><title>layout_of (208,903 samples, 0.13%)</title><rect x="28.6380%" y="69" width="0.1332%" height="15" fill="rgb(206,27,48)"/><text x="28.8880%" y="79.50"></text></g><g><title>layout_of (201,612 samples, 0.13%)</title><rect x="28.6427%" y="53" width="0.1286%" height="15" fill="rgb(225,35,8)"/><text x="28.8927%" y="63.50"></text></g><g><title>layout_of (190,182 samples, 0.12%)</title><rect x="28.6499%" y="37" width="0.1213%" height="15" fill="rgb(250,213,24)"/><text x="28.8999%" y="47.50"></text></g><g><title>lint_checking (3,252,256 samples, 2.07%)</title><rect x="26.6980%" y="165" width="2.0740%" height="15" fill="rgb(247,123,22)"/><text x="26.9480%" y="175.50">l..</text></g><g><title>module_lints (778,398 samples, 0.50%)</title><rect x="28.2756%" y="149" width="0.4964%" height="15" fill="rgb(231,138,38)"/><text x="28.5256%" y="159.50"></text></g><g><title>lint_mod (773,478 samples, 0.49%)</title><rect x="28.2787%" y="133" width="0.4933%" height="15" fill="rgb(231,145,46)"/><text x="28.5287%" y="143.50"></text></g><g><title>privacy_access_levels (271,583 samples, 0.17%)</title><rect x="28.7720%" y="165" width="0.1732%" height="15" fill="rgb(251,118,11)"/><text x="29.0220%" y="175.50"></text></g><g><title>privacy_checking_modules (1,115,702 samples, 0.71%)</title><rect x="28.9452%" y="165" width="0.7115%" height="15" fill="rgb(217,147,25)"/><text x="29.1952%" y="175.50"></text></g><g><title>check_mod_privacy (1,111,541 samples, 0.71%)</title><rect x="28.9478%" y="149" width="0.7089%" height="15" fill="rgb(247,81,37)"/><text x="29.1978%" y="159.50"></text></g><g><title>misc_checking_3 (5,329,980 samples, 3.40%)</title><rect x="26.2682%" y="181" width="3.3990%" height="15" fill="rgb(209,12,38)"/><text x="26.5182%" y="191.50">mis..</text></g><g><title>impl_parent (1,923,570 samples, 1.23%)</title><rect x="31.4646%" y="117" width="1.2267%" height="15" fill="rgb(227,1,9)"/><text x="31.7146%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,066,493 samples, 0.68%)</title><rect x="32.0112%" y="101" width="0.6801%" height="15" fill="rgb(248,47,43)"/><text x="32.2612%" y="111.50"></text></g><g><title>impl_trait_ref (4,540,629 samples, 2.90%)</title><rect x="32.6913%" y="117" width="2.8956%" height="15" fill="rgb(221,10,30)"/><text x="32.9413%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,882,707 samples, 2.48%)</title><rect x="33.1109%" y="101" width="2.4761%" height="15" fill="rgb(210,229,1)"/><text x="33.3609%" y="111.50">me..</text></g><g><title>trait_impls_of (688,057 samples, 0.44%)</title><rect x="35.6208%" y="117" width="0.4388%" height="15" fill="rgb(222,148,37)"/><text x="35.8708%" y="127.50"></text></g><g><title>implementations_of_trait (182,113 samples, 0.12%)</title><rect x="35.9434%" y="101" width="0.1161%" height="15" fill="rgb(234,67,33)"/><text x="36.1934%" y="111.50"></text></g><g><title>coherent_trait (9,913,131 samples, 6.32%)</title><rect x="29.7387%" y="149" width="6.3218%" height="15" fill="rgb(247,98,35)"/><text x="29.9887%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (9,894,861 samples, 6.31%)</title><rect x="29.7503%" y="133" width="6.3101%" height="15" fill="rgb(247,138,52)"/><text x="30.0003%" y="143.50">speciali..</text></g><g><title>coherence_checking (9,998,683 samples, 6.38%)</title><rect x="29.7224%" y="165" width="6.3764%" height="15" fill="rgb(213,79,30)"/><text x="29.9724%" y="175.50">coherenc..</text></g><g><title>associated_items (244,293 samples, 0.16%)</title><rect x="46.7805%" y="117" width="0.1558%" height="15" fill="rgb(246,177,23)"/><text x="47.0305%" y="127.50"></text></g><g><title>adt_def (419,756 samples, 0.27%)</title><rect x="47.2903%" y="85" width="0.2677%" height="15" fill="rgb(230,62,27)"/><text x="47.5403%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (417,996 samples, 0.27%)</title><rect x="47.2915%" y="69" width="0.2666%" height="15" fill="rgb(216,154,8)"/><text x="47.5415%" y="79.50"></text></g><g><title>item_attrs (395,485 samples, 0.25%)</title><rect x="47.3058%" y="53" width="0.2522%" height="15" fill="rgb(244,35,45)"/><text x="47.5558%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (393,525 samples, 0.25%)</title><rect x="47.3071%" y="37" width="0.2510%" height="15" fill="rgb(251,115,12)"/><text x="47.5571%" y="47.50"></text></g><g><title>adt_dtorck_constraint (265,000 samples, 0.17%)</title><rect x="47.6423%" y="69" width="0.1690%" height="15" fill="rgb(240,54,50)"/><text x="47.8923%" y="79.50"></text></g><g><title>adt_dtorck_constraint (397,374 samples, 0.25%)</title><rect x="47.5766%" y="85" width="0.2534%" height="15" fill="rgb(233,84,52)"/><text x="47.8266%" y="95.50"></text></g><g><title>dropck_outlives (1,395,188 samples, 0.89%)</title><rect x="46.9621%" y="117" width="0.8897%" height="15" fill="rgb(207,117,47)"/><text x="47.2121%" y="127.50"></text></g><g><title>adt_dtorck_constraint (941,023 samples, 0.60%)</title><rect x="47.2517%" y="101" width="0.6001%" height="15" fill="rgb(249,43,39)"/><text x="47.5017%" y="111.50"></text></g><g><title>evaluate_obligation (1,311,591 samples, 0.84%)</title><rect x="47.8518%" y="117" width="0.8364%" height="15" fill="rgb(209,38,44)"/><text x="48.1018%" y="127.50"></text></g><g><title>method_autoderef_steps (168,642 samples, 0.11%)</title><rect x="48.9725%" y="117" width="0.1075%" height="15" fill="rgb(236,212,23)"/><text x="49.2225%" y="127.50"></text></g><g><title>predicates_of (248,692 samples, 0.16%)</title><rect x="49.1270%" y="117" width="0.1586%" height="15" fill="rgb(242,79,21)"/><text x="49.3770%" y="127.50"></text></g><g><title>predicates_defined_on (190,931 samples, 0.12%)</title><rect x="49.1639%" y="101" width="0.1218%" height="15" fill="rgb(211,96,35)"/><text x="49.4139%" y="111.50"></text></g><g><title>associated_item (489,395 samples, 0.31%)</title><rect x="57.8927%" y="85" width="0.3121%" height="15" fill="rgb(253,215,40)"/><text x="58.1427%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (405,625 samples, 0.26%)</title><rect x="57.9461%" y="69" width="0.2587%" height="15" fill="rgb(211,81,21)"/><text x="58.1961%" y="79.50"></text></g><g><title>associated_items (681,907 samples, 0.43%)</title><rect x="57.7951%" y="101" width="0.4349%" height="15" fill="rgb(208,190,38)"/><text x="58.0451%" y="111.50"></text></g><g><title>dropck_outlives (322,833 samples, 0.21%)</title><rect x="58.2766%" y="101" width="0.2059%" height="15" fill="rgb(235,213,38)"/><text x="58.5266%" y="111.50"></text></g><g><title>evaluate_obligation (1,711,649 samples, 1.09%)</title><rect x="58.4825%" y="101" width="1.0916%" height="15" fill="rgb(237,122,38)"/><text x="58.7325%" y="111.50"></text></g><g><title>trait_impls_of (220,342 samples, 0.14%)</title><rect x="59.4335%" y="85" width="0.1405%" height="15" fill="rgb(244,218,35)"/><text x="59.6835%" y="95.50"></text></g><g><title>is_copy_raw (451,727 samples, 0.29%)</title><rect x="59.8633%" y="101" width="0.2881%" height="15" fill="rgb(240,68,47)"/><text x="60.1133%" y="111.50"></text></g><g><title>evaluate_obligation (384,207 samples, 0.25%)</title><rect x="59.9064%" y="85" width="0.2450%" height="15" fill="rgb(210,16,53)"/><text x="60.1564%" y="95.50"></text></g><g><title>evaluate_obligation (280,273 samples, 0.18%)</title><rect x="60.4434%" y="85" width="0.1787%" height="15" fill="rgb(235,124,12)"/><text x="60.6934%" y="95.50"></text></g><g><title>method_autoderef_steps (615,014 samples, 0.39%)</title><rect x="60.2350%" y="101" width="0.3922%" height="15" fill="rgb(224,169,11)"/><text x="60.4850%" y="111.50"></text></g><g><title>predicates_of (308,545 samples, 0.20%)</title><rect x="60.6461%" y="101" width="0.1968%" height="15" fill="rgb(250,166,2)"/><text x="60.8961%" y="111.50"></text></g><g><title>predicates_defined_on (217,594 samples, 0.14%)</title><rect x="60.7041%" y="85" width="0.1388%" height="15" fill="rgb(242,216,29)"/><text x="60.9541%" y="95.50"></text></g><g><title>typeck (18,120,993 samples, 11.56%)</title><rect x="49.4067%" y="117" width="11.5561%" height="15" fill="rgb(230,116,27)"/><text x="49.6567%" y="127.50">typeck</text></g><g><title>item_bodies_checking (38,989,220 samples, 24.86%)</title><rect x="36.1348%" y="165" width="24.8642%" height="15" fill="rgb(228,99,48)"/><text x="36.3848%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (38,985,770 samples, 24.86%)</title><rect x="36.1370%" y="149" width="24.8620%" height="15" fill="rgb(253,11,6)"/><text x="36.3870%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (38,893,528 samples, 24.80%)</title><rect x="36.1958%" y="133" width="24.8031%" height="15" fill="rgb(247,143,39)"/><text x="36.4458%" y="143.50">typeck</text></g><g><title>impl_trait_ref (240,103 samples, 0.15%)</title><rect x="61.6168%" y="85" width="0.1531%" height="15" fill="rgb(236,97,10)"/><text x="61.8668%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (220,562 samples, 0.14%)</title><rect x="61.6292%" y="69" width="0.1407%" height="15" fill="rgb(233,208,19)"/><text x="61.8792%" y="79.50"></text></g><g><title>adt_destructor (415,155 samples, 0.26%)</title><rect x="61.5231%" y="133" width="0.2648%" height="15" fill="rgb(216,164,2)"/><text x="61.7731%" y="143.50"></text></g><g><title>coherent_trait (408,104 samples, 0.26%)</title><rect x="61.5276%" y="117" width="0.2603%" height="15" fill="rgb(220,129,5)"/><text x="61.7776%" y="127.50"></text></g><g><title>specialization_graph_of (406,444 samples, 0.26%)</title><rect x="61.5287%" y="101" width="0.2592%" height="15" fill="rgb(242,17,10)"/><text x="61.7787%" y="111.50"></text></g><g><title>item_types_checking (1,395,955 samples, 0.89%)</title><rect x="60.9990%" y="165" width="0.8902%" height="15" fill="rgb(242,107,0)"/><text x="61.2490%" y="175.50"></text></g><g><title>check_mod_item_types (1,391,155 samples, 0.89%)</title><rect x="61.0020%" y="149" width="0.8872%" height="15" fill="rgb(251,28,31)"/><text x="61.2520%" y="159.50"></text></g><g><title>fn_sig (511,657 samples, 0.33%)</title><rect x="62.2248%" y="133" width="0.3263%" height="15" fill="rgb(233,223,10)"/><text x="62.4748%" y="143.50"></text></g><g><title>named_region_map (527,097 samples, 0.34%)</title><rect x="62.6990%" y="117" width="0.3361%" height="15" fill="rgb(215,21,27)"/><text x="62.9490%" y="127.50"></text></g><g><title>resolve_lifetimes (494,005 samples, 0.32%)</title><rect x="62.7201%" y="101" width="0.3150%" height="15" fill="rgb(232,23,21)"/><text x="62.9701%" y="111.50"></text></g><g><title>generics_of (791,522 samples, 0.50%)</title><rect x="62.5511%" y="133" width="0.5048%" height="15" fill="rgb(244,5,23)"/><text x="62.8011%" y="143.50"></text></g><g><title>late_bound_vars_map (167,692 samples, 0.11%)</title><rect x="63.4589%" y="85" width="0.1069%" height="15" fill="rgb(226,81,46)"/><text x="63.7089%" y="95.50"></text></g><g><title>resolve_lifetimes (159,392 samples, 0.10%)</title><rect x="63.4642%" y="69" width="0.1016%" height="15" fill="rgb(247,70,30)"/><text x="63.7142%" y="79.50"></text></g><g><title>explicit_predicates_of (524,613 samples, 0.33%)</title><rect x="63.2532%" y="101" width="0.3346%" height="15" fill="rgb(212,68,19)"/><text x="63.5032%" y="111.50"></text></g><g><title>predicates_of (1,634,117 samples, 1.04%)</title><rect x="63.0920%" y="133" width="1.0421%" height="15" fill="rgb(240,187,13)"/><text x="63.3420%" y="143.50"></text></g><g><title>predicates_defined_on (1,539,905 samples, 0.98%)</title><rect x="63.1520%" y="117" width="0.9820%" height="15" fill="rgb(223,113,26)"/><text x="63.4020%" y="127.50"></text></g><g><title>inferred_outlives_of (856,611 samples, 0.55%)</title><rect x="63.5878%" y="101" width="0.5463%" height="15" fill="rgb(206,192,2)"/><text x="63.8378%" y="111.50"></text></g><g><title>inferred_outlives_crate (819,250 samples, 0.52%)</title><rect x="63.6116%" y="85" width="0.5225%" height="15" fill="rgb(241,108,4)"/><text x="63.8616%" y="95.50"></text></g><g><title>type_of (576,467 samples, 0.37%)</title><rect x="63.7664%" y="69" width="0.3676%" height="15" fill="rgb(247,173,49)"/><text x="64.0164%" y="79.50"></text></g><g><title>type_collecting (3,764,983 samples, 2.40%)</title><rect x="61.8911%" y="165" width="2.4010%" height="15" fill="rgb(224,114,35)"/><text x="62.1411%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (3,745,602 samples, 2.39%)</title><rect x="61.9035%" y="149" width="2.3886%" height="15" fill="rgb(245,159,27)"/><text x="62.1535%" y="159.50">co..</text></g><g><title>type_of (217,042 samples, 0.14%)</title><rect x="64.1537%" y="133" width="0.1384%" height="15" fill="rgb(245,172,44)"/><text x="64.4037%" y="143.50"></text></g><g><title>evaluate_obligation (506,788 samples, 0.32%)</title><rect x="65.5847%" y="133" width="0.3232%" height="15" fill="rgb(236,23,11)"/><text x="65.8347%" y="143.50"></text></g><g><title>implied_outlives_bounds (271,472 samples, 0.17%)</title><rect x="65.9079%" y="133" width="0.1731%" height="15" fill="rgb(205,117,38)"/><text x="66.1579%" y="143.50"></text></g><g><title>object_safety_violations (432,235 samples, 0.28%)</title><rect x="66.0810%" y="133" width="0.2756%" height="15" fill="rgb(237,72,25)"/><text x="66.3310%" y="143.50"></text></g><g><title>param_env (320,563 samples, 0.20%)</title><rect x="66.3577%" y="133" width="0.2044%" height="15" fill="rgb(244,70,9)"/><text x="66.6077%" y="143.50"></text></g><g><title>region_scope_tree (524,774 samples, 0.33%)</title><rect x="66.5822%" y="133" width="0.3347%" height="15" fill="rgb(217,125,39)"/><text x="66.8322%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,140,835 samples, 2.64%)</title><rect x="64.4202%" y="149" width="2.6407%" height="15" fill="rgb(235,36,10)"/><text x="64.6702%" y="159.50">ch..</text></g><g><title>trait_impls_of (225,912 samples, 0.14%)</title><rect x="66.9169%" y="133" width="0.1441%" height="15" fill="rgb(251,123,47)"/><text x="67.1669%" y="143.50"></text></g><g><title>adt_sized_constraint (172,451 samples, 0.11%)</title><rect x="67.7675%" y="117" width="0.1100%" height="15" fill="rgb(221,13,13)"/><text x="68.0175%" y="127.50"></text></g><g><title>evaluate_obligation (455,144 samples, 0.29%)</title><rect x="67.6011%" y="133" width="0.2903%" height="15" fill="rgb(238,131,9)"/><text x="67.8511%" y="143.50"></text></g><g><title>object_safety_violations (191,252 samples, 0.12%)</title><rect x="67.9333%" y="133" width="0.1220%" height="15" fill="rgb(211,50,8)"/><text x="68.1833%" y="143.50"></text></g><g><title>param_env (182,652 samples, 0.12%)</title><rect x="68.0553%" y="133" width="0.1165%" height="15" fill="rgb(245,182,24)"/><text x="68.3053%" y="143.50"></text></g><g><title>check_item_well_formed (1,910,624 samples, 1.22%)</title><rect x="67.0609%" y="149" width="1.2184%" height="15" fill="rgb(242,14,37)"/><text x="67.3109%" y="159.50"></text></g><g><title>analysis (106,330,289 samples, 67.81%)</title><rect x="0.5150%" y="197" width="67.8088%" height="15" fill="rgb(246,228,12)"/><text x="0.7650%" y="207.50">analysis</text></g><g><title>type_check_crate (60,616,954 samples, 38.66%)</title><rect x="29.6672%" y="181" width="38.6566%" height="15" fill="rgb(213,55,15)"/><text x="29.9172%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,315,331 samples, 4.03%)</title><rect x="64.2964%" y="165" width="4.0274%" height="15" fill="rgb(209,9,3)"/><text x="64.5464%" y="175.50">wf_c..</text></g><g><title>codegen_crate (362,704 samples, 0.23%)</title><rect x="68.3313%" y="197" width="0.2313%" height="15" fill="rgb(230,59,30)"/><text x="68.5813%" y="207.50"></text></g><g><title>AST_validation (327,004 samples, 0.21%)</title><rect x="68.6935%" y="181" width="0.2085%" height="15" fill="rgb(209,121,21)"/><text x="68.9435%" y="191.50"></text></g><g><title>complete_gated_feature_checking (171,222 samples, 0.11%)</title><rect x="68.9021%" y="181" width="0.1092%" height="15" fill="rgb(220,109,13)"/><text x="69.1521%" y="191.50"></text></g><g><title>metadata_load_macro (243,632 samples, 0.16%)</title><rect x="81.9503%" y="149" width="0.1554%" height="15" fill="rgb(232,18,1)"/><text x="82.2003%" y="159.50"></text></g><g><title>metadata_register_crate (2,687,040 samples, 1.71%)</title><rect x="82.1057%" y="149" width="1.7136%" height="15" fill="rgb(215,41,42)"/><text x="82.3557%" y="159.50"></text></g><g><title>metadata_register_crate (960,670 samples, 0.61%)</title><rect x="83.2066%" y="133" width="0.6126%" height="15" fill="rgb(224,123,36)"/><text x="83.4566%" y="143.50"></text></g><g><title>macro_expand_crate (23,342,764 samples, 14.89%)</title><rect x="69.0742%" y="181" width="14.8861%" height="15" fill="rgb(240,125,3)"/><text x="69.3242%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (23,316,484 samples, 14.87%)</title><rect x="69.0909%" y="165" width="14.8694%" height="15" fill="rgb(205,98,50)"/><text x="69.3409%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (221,122 samples, 0.14%)</title><rect x="83.8193%" y="149" width="0.1410%" height="15" fill="rgb(205,185,37)"/><text x="84.0693%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (348,204 samples, 0.22%)</title><rect x="83.9685%" y="181" width="0.2221%" height="15" fill="rgb(238,207,15)"/><text x="84.2185%" y="191.50"></text></g><g><title>late_resolve_crate (4,749,124 samples, 3.03%)</title><rect x="84.3742%" y="165" width="3.0286%" height="15" fill="rgb(213,199,42)"/><text x="84.6242%" y="175.50">lat..</text></g><g><title>configure_and_expand (29,831,867 samples, 19.02%)</title><rect x="68.5626%" y="197" width="19.0243%" height="15" fill="rgb(235,201,11)"/><text x="68.8126%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,325,950 samples, 3.40%)</title><rect x="84.1905%" y="181" width="3.3965%" height="15" fill="rgb(207,46,11)"/><text x="84.4405%" y="191.50">res..</text></g><g><title>drop_ast (392,624 samples, 0.25%)</title><rect x="87.5870%" y="197" width="0.2504%" height="15" fill="rgb(241,35,35)"/><text x="87.8370%" y="207.50"></text></g><g><title>early_lint_checks (765,659 samples, 0.49%)</title><rect x="87.8472%" y="197" width="0.4883%" height="15" fill="rgb(243,32,47)"/><text x="88.0972%" y="207.50"></text></g><g><title>free_global_ctxt (3,907,205 samples, 2.49%)</title><rect x="88.3355%" y="197" width="2.4917%" height="15" fill="rgb(247,202,23)"/><text x="88.5855%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,162,463 samples, 0.74%)</title><rect x="90.8272%" y="197" width="0.7413%" height="15" fill="rgb(219,102,11)"/><text x="91.0772%" y="207.50"></text></g><g><title>hir_lowering (5,582,362 samples, 3.56%)</title><rect x="91.5685%" y="197" width="3.5600%" height="15" fill="rgb(243,110,44)"/><text x="91.8185%" y="207.50">hir_..</text></g><g><title>parse_crate (6,063,728 samples, 3.87%)</title><rect x="95.1627%" y="197" width="3.8670%" height="15" fill="rgb(222,74,54)"/><text x="95.4127%" y="207.50">pars..</text></g><g><title>prepare_outputs (274,224 samples, 0.17%)</title><rect x="99.0358%" y="197" width="0.1749%" height="15" fill="rgb(216,99,12)"/><text x="99.2858%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (785,099 samples, 0.50%)</title><rect x="99.2107%" y="197" width="0.5007%" height="15" fill="rgb(226,22,26)"/><text x="99.4607%" y="207.50"></text></g><g><title>all (156,808,868 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (156,808,868 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (317,274 samples, 0.20%)</title><rect x="99.7977%" y="197" width="0.2023%" height="15" fill="rgb(252,105,26)"/><text x="100.0477%" y="207.50"></text></g></svg></svg>