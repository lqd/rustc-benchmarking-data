<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (3,035,123 samples, 0.18%)</title><rect x="14.9243%" y="133" width="0.1792%" height="15" fill="rgb(227,0,7)"/><text x="15.1743%" y="143.50"></text></g><g><title>is_sized_raw (5,134,960 samples, 0.30%)</title><rect x="15.1616%" y="133" width="0.3032%" height="15" fill="rgb(217,0,24)"/><text x="15.4116%" y="143.50"></text></g><g><title>evaluate_obligation (3,073,717 samples, 0.18%)</title><rect x="15.2832%" y="117" width="0.1815%" height="15" fill="rgb(221,193,54)"/><text x="15.5332%" y="127.50"></text></g><g><title>param_env (1,898,051 samples, 0.11%)</title><rect x="17.2015%" y="101" width="0.1121%" height="15" fill="rgb(248,212,6)"/><text x="17.4515%" y="111.50"></text></g><g><title>codegen_fn_attrs (2,120,682 samples, 0.13%)</title><rect x="17.8593%" y="85" width="0.1252%" height="15" fill="rgb(208,68,35)"/><text x="18.1093%" y="95.50"></text></g><g><title>is_copy_raw (19,707,944 samples, 1.16%)</title><rect x="21.6174%" y="53" width="1.1636%" height="15" fill="rgb(232,128,0)"/><text x="21.8674%" y="63.50"></text></g><g><title>evaluate_obligation (15,498,622 samples, 0.92%)</title><rect x="21.8659%" y="37" width="0.9151%" height="15" fill="rgb(207,160,47)"/><text x="22.1159%" y="47.50"></text></g><g><title>needs_drop_raw (24,307,699 samples, 1.44%)</title><rect x="21.3501%" y="69" width="1.4351%" height="15" fill="rgb(228,23,34)"/><text x="21.6001%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (7,614,176 samples, 0.45%)</title><rect x="23.0097%" y="53" width="0.4495%" height="15" fill="rgb(218,30,26)"/><text x="23.2597%" y="63.50"></text></g><g><title>specialization_graph_of (1,845,270 samples, 0.11%)</title><rect x="23.4954%" y="53" width="0.1089%" height="15" fill="rgb(220,122,19)"/><text x="23.7454%" y="63.50"></text></g><g><title>resolve_instance (14,800,901 samples, 0.87%)</title><rect x="22.7870%" y="69" width="0.8739%" height="15" fill="rgb(250,228,42)"/><text x="23.0370%" y="79.50"></text></g><g><title>thir_body (20,387,184 samples, 1.20%)</title><rect x="23.7003%" y="69" width="1.2037%" height="15" fill="rgb(240,193,28)"/><text x="23.9503%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,777,753 samples, 0.10%)</title><rect x="24.9182%" y="69" width="0.1050%" height="15" fill="rgb(216,20,37)"/><text x="25.1682%" y="79.50"></text></g><g><title>mir_const (147,456,201 samples, 8.71%)</title><rect x="16.3239%" y="117" width="8.7060%" height="15" fill="rgb(206,188,39)"/><text x="16.5739%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (130,693,508 samples, 7.72%)</title><rect x="17.3136%" y="101" width="7.7163%" height="15" fill="rgb(217,207,13)"/><text x="17.5636%" y="111.50">unsafety_ch..</text></g><g><title>mir_built (119,329,351 samples, 7.05%)</title><rect x="17.9845%" y="85" width="7.0453%" height="15" fill="rgb(231,73,38)"/><text x="18.2345%" y="95.50">mir_built</text></g><g><title>mir_promoted (162,777,178 samples, 9.61%)</title><rect x="15.4647%" y="133" width="9.6105%" height="15" fill="rgb(225,20,46)"/><text x="15.7147%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (4,504,467 samples, 0.27%)</title><rect x="25.0753%" y="133" width="0.2659%" height="15" fill="rgb(210,31,41)"/><text x="25.3253%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (9,743,028 samples, 0.58%)</title><rect x="25.3412%" y="133" width="0.5752%" height="15" fill="rgb(221,200,47)"/><text x="25.5912%" y="143.50"></text></g><g><title>normalize_projection_ty (4,004,267 samples, 0.24%)</title><rect x="25.6801%" y="117" width="0.2364%" height="15" fill="rgb(226,26,5)"/><text x="25.9301%" y="127.50"></text></g><g><title>type_op_normalize_predicate (8,070,033 samples, 0.48%)</title><rect x="25.9174%" y="133" width="0.4765%" height="15" fill="rgb(249,33,26)"/><text x="26.1674%" y="143.50"></text></g><g><title>normalize_projection_ty (2,951,151 samples, 0.17%)</title><rect x="26.2196%" y="117" width="0.1742%" height="15" fill="rgb(235,183,28)"/><text x="26.4696%" y="127.50"></text></g><g><title>type_op_normalize_ty (11,396,203 samples, 0.67%)</title><rect x="26.3938%" y="133" width="0.6728%" height="15" fill="rgb(221,5,38)"/><text x="26.6438%" y="143.50"></text></g><g><title>normalize_projection_ty (6,099,697 samples, 0.36%)</title><rect x="26.7066%" y="117" width="0.3601%" height="15" fill="rgb(247,18,42)"/><text x="26.9566%" y="127.50"></text></g><g><title>type_op_prove_predicate (67,011,782 samples, 3.96%)</title><rect x="27.0667%" y="133" width="3.9564%" height="15" fill="rgb(241,131,45)"/><text x="27.3167%" y="143.50">type..</text></g><g><title>MIR_borrow_checking (516,829,558 samples, 30.51%)</title><rect x="0.5101%" y="165" width="30.5141%" height="15" fill="rgb(249,31,29)"/><text x="0.7601%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (514,634,339 samples, 30.38%)</title><rect x="0.6398%" y="149" width="30.3845%" height="15" fill="rgb(225,111,53)"/><text x="0.8898%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (2,865,285 samples, 0.17%)</title><rect x="31.0742%" y="165" width="0.1692%" height="15" fill="rgb(238,160,17)"/><text x="31.3242%" y="175.50"></text></g><g><title>codegen_fn_attrs (3,299,012 samples, 0.19%)</title><rect x="31.4474%" y="133" width="0.1948%" height="15" fill="rgb(214,148,48)"/><text x="31.6974%" y="143.50"></text></g><g><title>check_mod_attrs (6,642,644 samples, 0.39%)</title><rect x="31.2500%" y="149" width="0.3922%" height="15" fill="rgb(232,36,49)"/><text x="31.5000%" y="159.50"></text></g><g><title>check_mod_loops (1,703,006 samples, 0.10%)</title><rect x="31.7396%" y="149" width="0.1005%" height="15" fill="rgb(209,103,24)"/><text x="31.9896%" y="159.50"></text></g><g><title>lint_levels (2,980,043 samples, 0.18%)</title><rect x="31.9918%" y="133" width="0.1759%" height="15" fill="rgb(229,88,8)"/><text x="32.2418%" y="143.50"></text></g><g><title>lookup_deprecation_entry (2,436,159 samples, 0.14%)</title><rect x="32.1678%" y="133" width="0.1438%" height="15" fill="rgb(213,181,19)"/><text x="32.4178%" y="143.50"></text></g><g><title>stability_index (2,169,995 samples, 0.13%)</title><rect x="32.1835%" y="117" width="0.1281%" height="15" fill="rgb(254,191,54)"/><text x="32.4335%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (7,989,486 samples, 0.47%)</title><rect x="31.8566%" y="149" width="0.4717%" height="15" fill="rgb(241,83,37)"/><text x="32.1066%" y="159.50"></text></g><g><title>misc_checking_1 (18,872,981 samples, 1.11%)</title><rect x="31.2434%" y="165" width="1.1143%" height="15" fill="rgb(233,36,39)"/><text x="31.4934%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (10,164,593 samples, 0.60%)</title><rect x="32.3578%" y="149" width="0.6001%" height="15" fill="rgb(226,3,54)"/><text x="32.6078%" y="159.50"></text></g><g><title>check_mod_liveness (8,733,717 samples, 0.52%)</title><rect x="32.4423%" y="133" width="0.5156%" height="15" fill="rgb(245,192,40)"/><text x="32.6923%" y="143.50"></text></g><g><title>type_uninhabited_from (1,760,316 samples, 0.10%)</title><rect x="32.8540%" y="117" width="0.1039%" height="15" fill="rgb(238,167,29)"/><text x="33.1040%" y="127.50"></text></g><g><title>param_env (3,672,615 samples, 0.22%)</title><rect x="33.6173%" y="117" width="0.2168%" height="15" fill="rgb(232,182,51)"/><text x="33.8673%" y="127.50"></text></g><g><title>misc_checking_2 (25,401,592 samples, 1.50%)</title><rect x="32.3577%" y="165" width="1.4997%" height="15" fill="rgb(231,60,39)"/><text x="32.6077%" y="175.50"></text></g><g><title>match_checking (15,233,869 samples, 0.90%)</title><rect x="32.9580%" y="149" width="0.8994%" height="15" fill="rgb(208,69,12)"/><text x="33.2080%" y="159.50"></text></g><g><title>check_match (14,511,352 samples, 0.86%)</title><rect x="33.0006%" y="133" width="0.8568%" height="15" fill="rgb(235,93,37)"/><text x="33.2506%" y="143.50"></text></g><g><title>check_private_in_public (4,528,540 samples, 0.27%)</title><rect x="33.8587%" y="149" width="0.2674%" height="15" fill="rgb(213,116,39)"/><text x="34.1087%" y="159.50"></text></g><g><title>death_checking (6,515,153 samples, 0.38%)</title><rect x="34.1260%" y="149" width="0.3847%" height="15" fill="rgb(222,207,29)"/><text x="34.3760%" y="159.50"></text></g><g><title>param_env (2,334,176 samples, 0.14%)</title><rect x="34.9418%" y="117" width="0.1378%" height="15" fill="rgb(206,96,30)"/><text x="35.1918%" y="127.50"></text></g><g><title>crate_lints (11,453,267 samples, 0.68%)</title><rect x="34.5109%" y="133" width="0.6762%" height="15" fill="rgb(218,138,4)"/><text x="34.7609%" y="143.50"></text></g><g><title>lint_checking (20,603,629 samples, 1.22%)</title><rect x="34.5107%" y="149" width="1.2165%" height="15" fill="rgb(250,191,14)"/><text x="34.7607%" y="159.50"></text></g><g><title>module_lints (9,146,872 samples, 0.54%)</title><rect x="35.1871%" y="133" width="0.5400%" height="15" fill="rgb(239,60,40)"/><text x="35.4371%" y="143.50"></text></g><g><title>lint_mod (9,105,261 samples, 0.54%)</title><rect x="35.1896%" y="117" width="0.5376%" height="15" fill="rgb(206,27,48)"/><text x="35.4396%" y="127.50"></text></g><g><title>privacy_access_levels (11,351,517 samples, 0.67%)</title><rect x="35.7272%" y="149" width="0.6702%" height="15" fill="rgb(225,35,8)"/><text x="35.9772%" y="159.50"></text></g><g><title>privacy_checking_modules (20,735,910 samples, 1.22%)</title><rect x="36.3974%" y="149" width="1.2243%" height="15" fill="rgb(250,213,24)"/><text x="36.6474%" y="159.50"></text></g><g><title>check_mod_privacy (20,690,380 samples, 1.22%)</title><rect x="36.4001%" y="133" width="1.2216%" height="15" fill="rgb(247,123,22)"/><text x="36.6501%" y="143.50"></text></g><g><title>misc_checking_3 (63,923,491 samples, 3.77%)</title><rect x="33.8574%" y="165" width="3.7741%" height="15" fill="rgb(231,138,38)"/><text x="34.1074%" y="175.50">misc..</text></g><g><title>impl_parent (3,144,444 samples, 0.19%)</title><rect x="38.4313%" y="101" width="0.1857%" height="15" fill="rgb(231,145,46)"/><text x="38.6813%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,883,156 samples, 0.11%)</title><rect x="38.5057%" y="85" width="0.1112%" height="15" fill="rgb(251,118,11)"/><text x="38.7557%" y="95.50"></text></g><g><title>impl_trait_ref (6,809,909 samples, 0.40%)</title><rect x="38.6176%" y="101" width="0.4021%" height="15" fill="rgb(217,147,25)"/><text x="38.8676%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,344,583 samples, 0.32%)</title><rect x="38.7041%" y="85" width="0.3155%" height="15" fill="rgb(247,81,37)"/><text x="38.9541%" y="95.50"></text></g><g><title>coherent_trait (27,656,368 samples, 1.63%)</title><rect x="37.7655%" y="133" width="1.6329%" height="15" fill="rgb(209,12,38)"/><text x="38.0155%" y="143.50"></text></g><g><title>specialization_graph_of (27,108,792 samples, 1.60%)</title><rect x="37.7978%" y="117" width="1.6005%" height="15" fill="rgb(227,1,9)"/><text x="38.0478%" y="127.50"></text></g><g><title>visible_parent_map (4,743,183 samples, 0.28%)</title><rect x="39.1183%" y="101" width="0.2800%" height="15" fill="rgb(248,47,43)"/><text x="39.3683%" y="111.50"></text></g><g><title>module_children (4,303,789 samples, 0.25%)</title><rect x="39.1443%" y="85" width="0.2541%" height="15" fill="rgb(221,10,30)"/><text x="39.3943%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (4,229,919 samples, 0.25%)</title><rect x="39.1486%" y="69" width="0.2497%" height="15" fill="rgb(210,229,1)"/><text x="39.3986%" y="79.50"></text></g><g><title>coherence_checking (28,359,735 samples, 1.67%)</title><rect x="37.7630%" y="149" width="1.6744%" height="15" fill="rgb(222,148,37)"/><text x="38.0130%" y="159.50"></text></g><g><title>dropck_outlives (7,863,168 samples, 0.46%)</title><rect x="59.2024%" y="101" width="0.4642%" height="15" fill="rgb(234,67,33)"/><text x="59.4524%" y="111.50"></text></g><g><title>evaluate_obligation (19,170,556 samples, 1.13%)</title><rect x="59.6666%" y="101" width="1.1318%" height="15" fill="rgb(247,98,35)"/><text x="59.9166%" y="111.50"></text></g><g><title>evaluate_obligation (3,679,395 samples, 0.22%)</title><rect x="61.1324%" y="85" width="0.2172%" height="15" fill="rgb(247,138,52)"/><text x="61.3824%" y="95.50"></text></g><g><title>method_autoderef_steps (7,751,354 samples, 0.46%)</title><rect x="60.8930%" y="101" width="0.4576%" height="15" fill="rgb(213,79,30)"/><text x="61.1430%" y="111.50"></text></g><g><title>dropck_outlives (2,368,169 samples, 0.14%)</title><rect x="68.8116%" y="85" width="0.1398%" height="15" fill="rgb(246,177,23)"/><text x="69.0616%" y="95.50"></text></g><g><title>evaluate_obligation (13,298,908 samples, 0.79%)</title><rect x="68.9515%" y="85" width="0.7852%" height="15" fill="rgb(230,62,27)"/><text x="69.2015%" y="95.50"></text></g><g><title>is_copy_raw (5,637,709 samples, 0.33%)</title><rect x="69.8899%" y="85" width="0.3329%" height="15" fill="rgb(216,154,8)"/><text x="70.1399%" y="95.50"></text></g><g><title>evaluate_obligation (4,144,203 samples, 0.24%)</title><rect x="69.9781%" y="69" width="0.2447%" height="15" fill="rgb(244,35,45)"/><text x="70.2281%" y="79.50"></text></g><g><title>evaluate_obligation (2,318,284 samples, 0.14%)</title><rect x="70.3878%" y="69" width="0.1369%" height="15" fill="rgb(251,115,12)"/><text x="70.6378%" y="79.50"></text></g><g><title>method_autoderef_steps (4,781,014 samples, 0.28%)</title><rect x="70.2441%" y="85" width="0.2823%" height="15" fill="rgb(240,54,50)"/><text x="70.4941%" y="95.50"></text></g><g><title>typeck (155,586,677 samples, 9.19%)</title><rect x="61.4502%" y="101" width="9.1860%" height="15" fill="rgb(233,84,52)"/><text x="61.7002%" y="111.50">typeck</text></g><g><title>item_bodies_checking (527,931,361 samples, 31.17%)</title><rect x="39.4863%" y="149" width="31.1696%" height="15" fill="rgb(207,117,47)"/><text x="39.7363%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (527,926,571 samples, 31.17%)</title><rect x="39.4866%" y="133" width="31.1693%" height="15" fill="rgb(249,43,39)"/><text x="39.7366%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (526,484,706 samples, 31.08%)</title><rect x="39.5717%" y="117" width="31.0842%" height="15" fill="rgb(209,38,44)"/><text x="39.8217%" y="127.50">typeck</text></g><g><title>item_types_checking (37,231,703 samples, 2.20%)</title><rect x="70.6559%" y="149" width="2.1982%" height="15" fill="rgb(236,212,23)"/><text x="70.9059%" y="159.50">i..</text></g><g><title>check_mod_item_types (37,183,893 samples, 2.20%)</title><rect x="70.6587%" y="133" width="2.1954%" height="15" fill="rgb(242,79,21)"/><text x="70.9087%" y="143.50">c..</text></g><g><title>fn_sig (4,492,861 samples, 0.27%)</title><rect x="73.1614%" y="117" width="0.2653%" height="15" fill="rgb(211,96,35)"/><text x="73.4114%" y="127.50"></text></g><g><title>generics_of (4,234,552 samples, 0.25%)</title><rect x="73.4267%" y="117" width="0.2500%" height="15" fill="rgb(253,215,40)"/><text x="73.6767%" y="127.50"></text></g><g><title>late_bound_vars_map (6,349,675 samples, 0.37%)</title><rect x="74.3262%" y="69" width="0.3749%" height="15" fill="rgb(211,81,21)"/><text x="74.5762%" y="79.50"></text></g><g><title>resolve_lifetimes (5,969,840 samples, 0.35%)</title><rect x="74.3486%" y="53" width="0.3525%" height="15" fill="rgb(208,190,38)"/><text x="74.5986%" y="63.50"></text></g><g><title>explicit_predicates_of (15,946,440 samples, 0.94%)</title><rect x="73.8501%" y="85" width="0.9415%" height="15" fill="rgb(235,213,38)"/><text x="74.1001%" y="95.50"></text></g><g><title>predicates_of (20,666,441 samples, 1.22%)</title><rect x="73.7116%" y="117" width="1.2202%" height="15" fill="rgb(237,122,38)"/><text x="73.9616%" y="127.50"></text></g><g><title>predicates_defined_on (19,775,382 samples, 1.17%)</title><rect x="73.7642%" y="101" width="1.1676%" height="15" fill="rgb(244,218,35)"/><text x="74.0142%" y="111.50"></text></g><g><title>inferred_outlives_of (2,373,266 samples, 0.14%)</title><rect x="74.7916%" y="85" width="0.1401%" height="15" fill="rgb(240,68,47)"/><text x="75.0416%" y="95.50"></text></g><g><title>inferred_outlives_crate (2,055,602 samples, 0.12%)</title><rect x="74.8104%" y="69" width="0.1214%" height="15" fill="rgb(210,16,53)"/><text x="75.0604%" y="79.50"></text></g><g><title>type_collecting (38,383,096 samples, 2.27%)</title><rect x="72.8556%" y="149" width="2.2662%" height="15" fill="rgb(235,124,12)"/><text x="73.1056%" y="159.50">t..</text></g><g><title>collect_mod_item_types (38,332,036 samples, 2.26%)</title><rect x="72.8586%" y="133" width="2.2632%" height="15" fill="rgb(224,169,11)"/><text x="73.1086%" y="143.50">c..</text></g><g><title>type_of (3,135,061 samples, 0.19%)</title><rect x="74.9367%" y="117" width="0.1851%" height="15" fill="rgb(250,166,2)"/><text x="75.1867%" y="127.50"></text></g><g><title>mir_borrowck (1,772,361 samples, 0.10%)</title><rect x="78.2300%" y="37" width="0.1046%" height="15" fill="rgb(242,216,29)"/><text x="78.4800%" y="47.50"></text></g><g><title>mir_for_ctfe (2,716,851 samples, 0.16%)</title><rect x="78.1747%" y="69" width="0.1604%" height="15" fill="rgb(230,116,27)"/><text x="78.4247%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,476,298 samples, 0.15%)</title><rect x="78.1889%" y="53" width="0.1462%" height="15" fill="rgb(228,99,48)"/><text x="78.4389%" y="63.50"></text></g><g><title>evaluate_obligation (2,282,315 samples, 0.13%)</title><rect x="78.5551%" y="53" width="0.1348%" height="15" fill="rgb(253,11,6)"/><text x="78.8051%" y="63.50"></text></g><g><title>eval_to_const_value_raw (11,550,587 samples, 0.68%)</title><rect x="78.0226%" y="117" width="0.6820%" height="15" fill="rgb(247,143,39)"/><text x="78.2726%" y="127.50"></text></g><g><title>eval_to_const_value_raw (11,519,577 samples, 0.68%)</title><rect x="78.0244%" y="101" width="0.6801%" height="15" fill="rgb(236,97,10)"/><text x="78.2744%" y="111.50"></text></g><g><title>eval_to_allocation_raw (11,491,377 samples, 0.68%)</title><rect x="78.0261%" y="85" width="0.6785%" height="15" fill="rgb(233,208,19)"/><text x="78.2761%" y="95.50"></text></g><g><title>typeck (6,253,700 samples, 0.37%)</title><rect x="78.3353%" y="69" width="0.3692%" height="15" fill="rgb(216,164,2)"/><text x="78.5853%" y="79.50"></text></g><g><title>evaluate_obligation (8,496,736 samples, 0.50%)</title><rect x="78.7045%" y="117" width="0.5017%" height="15" fill="rgb(220,129,5)"/><text x="78.9545%" y="127.50"></text></g><g><title>implied_outlives_bounds (6,262,072 samples, 0.37%)</title><rect x="79.2246%" y="117" width="0.3697%" height="15" fill="rgb(242,17,10)"/><text x="79.4746%" y="127.50"></text></g><g><title>param_env (9,533,311 samples, 0.56%)</title><rect x="79.5951%" y="117" width="0.5629%" height="15" fill="rgb(242,107,0)"/><text x="79.8451%" y="127.50"></text></g><g><title>region_scope_tree (6,091,535 samples, 0.36%)</title><rect x="80.1615%" y="117" width="0.3597%" height="15" fill="rgb(251,28,31)"/><text x="80.4115%" y="127.50"></text></g><g><title>check_impl_item_well_formed (87,741,937 samples, 5.18%)</title><rect x="75.3533%" y="133" width="5.1804%" height="15" fill="rgb(233,223,10)"/><text x="75.6033%" y="143.50">check_..</text></g><g><title>implied_outlives_bounds (3,293,190 samples, 0.19%)</title><rect x="83.5868%" y="117" width="0.1944%" height="15" fill="rgb(215,21,27)"/><text x="83.8368%" y="127.50"></text></g><g><title>param_env (7,458,096 samples, 0.44%)</title><rect x="83.7827%" y="117" width="0.4403%" height="15" fill="rgb(232,23,21)"/><text x="84.0327%" y="127.50"></text></g><g><title>check_item_well_formed (65,331,746 samples, 3.86%)</title><rect x="80.5337%" y="133" width="3.8572%" height="15" fill="rgb(244,5,23)"/><text x="80.7837%" y="143.50">chec..</text></g><g><title>param_env (1,842,303 samples, 0.11%)</title><rect x="84.9413%" y="117" width="0.1088%" height="15" fill="rgb(226,81,46)"/><text x="85.1913%" y="127.50"></text></g><g><title>analysis (1,436,546,425 samples, 84.82%)</title><rect x="0.2763%" y="181" width="84.8151%" height="15" fill="rgb(247,70,30)"/><text x="0.5263%" y="191.50">analysis</text></g><g><title>type_check_crate (803,847,619 samples, 47.46%)</title><rect x="37.6315%" y="165" width="47.4599%" height="15" fill="rgb(212,68,19)"/><text x="37.8815%" y="175.50">type_check_crate</text></g><g><title>wf_checking (168,655,897 samples, 9.96%)</title><rect x="75.1338%" y="149" width="9.9576%" height="15" fill="rgb(240,187,13)"/><text x="75.3838%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (11,864,744 samples, 0.70%)</title><rect x="84.3909%" y="133" width="0.7005%" height="15" fill="rgb(223,113,26)"/><text x="84.6409%" y="143.50"></text></g><g><title>AST_validation (2,591,929 samples, 0.15%)</title><rect x="85.1470%" y="165" width="0.1530%" height="15" fill="rgb(206,192,2)"/><text x="85.3970%" y="175.50"></text></g><g><title>complete_gated_feature_checking (2,019,443 samples, 0.12%)</title><rect x="85.3001%" y="165" width="0.1192%" height="15" fill="rgb(241,108,4)"/><text x="85.5501%" y="175.50"></text></g><g><title>macro_expand_crate (96,223,810 samples, 5.68%)</title><rect x="85.4231%" y="165" width="5.6811%" height="15" fill="rgb(247,173,49)"/><text x="85.6731%" y="175.50">macro_e..</text></g><g><title>expand_crate (96,207,950 samples, 5.68%)</title><rect x="85.4240%" y="149" width="5.6802%" height="15" fill="rgb(224,114,35)"/><text x="85.6740%" y="159.50">expand_..</text></g><g><title>late_resolve_crate (23,980,927 samples, 1.42%)</title><rect x="91.2247%" y="149" width="1.4159%" height="15" fill="rgb(245,159,27)"/><text x="91.4747%" y="159.50"></text></g><g><title>resolve_check_unused (1,966,481 samples, 0.12%)</title><rect x="92.6531%" y="149" width="0.1161%" height="15" fill="rgb(245,172,44)"/><text x="92.9031%" y="159.50"></text></g><g><title>configure_and_expand (130,974,506 samples, 7.73%)</title><rect x="85.1354%" y="181" width="7.7329%" height="15" fill="rgb(236,23,11)"/><text x="85.3854%" y="191.50">configure_a..</text></g><g><title>resolve_crate (29,270,195 samples, 1.73%)</title><rect x="91.1401%" y="165" width="1.7281%" height="15" fill="rgb(205,117,38)"/><text x="91.3901%" y="175.50"></text></g><g><title>drop_ast (4,396,219 samples, 0.26%)</title><rect x="92.8682%" y="181" width="0.2596%" height="15" fill="rgb(237,72,25)"/><text x="93.1182%" y="191.50"></text></g><g><title>early_lint_checks (6,883,707 samples, 0.41%)</title><rect x="93.1291%" y="181" width="0.4064%" height="15" fill="rgb(244,70,9)"/><text x="93.3791%" y="191.50"></text></g><g><title>free_global_ctxt (14,717,894 samples, 0.87%)</title><rect x="93.5355%" y="181" width="0.8690%" height="15" fill="rgb(217,125,39)"/><text x="93.7855%" y="191.50"></text></g><g><title>generate_crate_metadata (19,212,414 samples, 1.13%)</title><rect x="94.4045%" y="181" width="1.1343%" height="15" fill="rgb(235,36,10)"/><text x="94.6545%" y="191.50"></text></g><g><title>hir_lowering (54,659,618 samples, 3.23%)</title><rect x="95.5388%" y="181" width="3.2272%" height="15" fill="rgb(251,123,47)"/><text x="95.7888%" y="191.50">hir..</text></g><g><title>parse_crate (14,845,625 samples, 0.88%)</title><rect x="98.7699%" y="181" width="0.8765%" height="15" fill="rgb(221,13,13)"/><text x="99.0199%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,250,907 samples, 0.25%)</title><rect x="99.6643%" y="181" width="0.2510%" height="15" fill="rgb(238,131,9)"/><text x="99.9143%" y="191.50"></text></g><g><title>all (1,693,739,395 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,693,739,395 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>