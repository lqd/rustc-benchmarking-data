<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (355,110 samples, 0.10%)</title><rect x="14.4379%" y="133" width="0.1043%" height="15" fill="rgb(227,0,7)"/><text x="14.6879%" y="143.50"></text></g><g><title>param_env (980,062 samples, 0.29%)</title><rect x="16.4644%" y="101" width="0.2877%" height="15" fill="rgb(217,0,24)"/><text x="16.7144%" y="111.50"></text></g><g><title>item_attrs (928,308 samples, 0.27%)</title><rect x="17.3550%" y="69" width="0.2725%" height="15" fill="rgb(221,193,54)"/><text x="17.6050%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (905,498 samples, 0.27%)</title><rect x="17.3617%" y="53" width="0.2658%" height="15" fill="rgb(248,212,6)"/><text x="17.6117%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,154,222 samples, 0.34%)</title><rect x="17.2977%" y="85" width="0.3389%" height="15" fill="rgb(208,68,35)"/><text x="17.5477%" y="95.50"></text></g><g><title>is_copy_raw (563,296 samples, 0.17%)</title><rect x="20.3862%" y="69" width="0.1654%" height="15" fill="rgb(232,128,0)"/><text x="20.6362%" y="79.50"></text></g><g><title>evaluate_obligation (453,895 samples, 0.13%)</title><rect x="20.4183%" y="53" width="0.1333%" height="15" fill="rgb(207,160,47)"/><text x="20.6683%" y="63.50"></text></g><g><title>adt_drop_tys (628,600 samples, 0.18%)</title><rect x="20.7323%" y="53" width="0.1846%" height="15" fill="rgb(228,23,34)"/><text x="20.9823%" y="63.50"></text></g><g><title>needs_drop_raw (3,961,562 samples, 1.16%)</title><rect x="20.5529%" y="69" width="1.1631%" height="15" fill="rgb(218,30,26)"/><text x="20.8029%" y="79.50"></text></g><g><title>is_copy_raw (2,721,945 samples, 0.80%)</title><rect x="20.9168%" y="53" width="0.7991%" height="15" fill="rgb(220,122,19)"/><text x="21.1668%" y="63.50"></text></g><g><title>evaluate_obligation (2,085,659 samples, 0.61%)</title><rect x="21.1036%" y="37" width="0.6123%" height="15" fill="rgb(250,228,42)"/><text x="21.3536%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,643,209 samples, 0.48%)</title><rect x="22.0351%" y="53" width="0.4824%" height="15" fill="rgb(240,193,28)"/><text x="22.2851%" y="63.50"></text></g><g><title>resolve_instance (3,117,609 samples, 0.92%)</title><rect x="21.7160%" y="69" width="0.9153%" height="15" fill="rgb(216,20,37)"/><text x="21.9660%" y="79.50"></text></g><g><title>thir_body (3,341,210 samples, 0.98%)</title><rect x="22.6732%" y="69" width="0.9809%" height="15" fill="rgb(206,188,39)"/><text x="22.9232%" y="79.50"></text></g><g><title>mir_const (27,722,771 samples, 8.14%)</title><rect x="15.5512%" y="117" width="8.1392%" height="15" fill="rgb(217,207,13)"/><text x="15.8012%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (23,632,332 samples, 6.94%)</title><rect x="16.7521%" y="101" width="6.9382%" height="15" fill="rgb(231,73,38)"/><text x="17.0021%" y="111.50">unsafety_..</text></g><g><title>mir_built (20,619,960 samples, 6.05%)</title><rect x="17.6365%" y="85" width="6.0538%" height="15" fill="rgb(225,20,46)"/><text x="17.8865%" y="95.50">mir_built</text></g><g><title>mir_promoted (30,811,647 samples, 9.05%)</title><rect x="14.7051%" y="133" width="9.0460%" height="15" fill="rgb(210,31,41)"/><text x="14.9551%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (774,459 samples, 0.23%)</title><rect x="23.7511%" y="133" width="0.2274%" height="15" fill="rgb(221,200,47)"/><text x="24.0011%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,277,015 samples, 0.37%)</title><rect x="23.9785%" y="133" width="0.3749%" height="15" fill="rgb(226,26,5)"/><text x="24.2285%" y="143.50"></text></g><g><title>normalize_projection_ty (746,299 samples, 0.22%)</title><rect x="24.1343%" y="117" width="0.2191%" height="15" fill="rgb(249,33,26)"/><text x="24.3843%" y="127.50"></text></g><g><title>type_op_normalize_predicate (799,568 samples, 0.23%)</title><rect x="24.3534%" y="133" width="0.2347%" height="15" fill="rgb(235,183,28)"/><text x="24.6034%" y="143.50"></text></g><g><title>normalize_projection_ty (394,984 samples, 0.12%)</title><rect x="24.4722%" y="117" width="0.1160%" height="15" fill="rgb(221,5,38)"/><text x="24.7222%" y="127.50"></text></g><g><title>type_op_prove_predicate (13,237,006 samples, 3.89%)</title><rect x="24.6074%" y="133" width="3.8863%" height="15" fill="rgb(247,18,42)"/><text x="24.8574%" y="143.50">type..</text></g><g><title>MIR_borrow_checking (95,766,296 samples, 28.12%)</title><rect x="0.3799%" y="165" width="28.1161%" height="15" fill="rgb(241,131,45)"/><text x="0.6299%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (95,166,099 samples, 27.94%)</title><rect x="0.5561%" y="149" width="27.9399%" height="15" fill="rgb(249,31,29)"/><text x="0.8061%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (621,147 samples, 0.18%)</title><rect x="28.5585%" y="165" width="0.1824%" height="15" fill="rgb(225,111,53)"/><text x="28.8085%" y="175.50"></text></g><g><title>should_inherit_track_caller (665,477 samples, 0.20%)</title><rect x="29.0314%" y="117" width="0.1954%" height="15" fill="rgb(238,160,17)"/><text x="29.2814%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,023,379 samples, 0.30%)</title><rect x="28.9316%" y="133" width="0.3005%" height="15" fill="rgb(214,148,48)"/><text x="29.1816%" y="143.50"></text></g><g><title>check_mod_attrs (1,645,599 samples, 0.48%)</title><rect x="28.7490%" y="149" width="0.4831%" height="15" fill="rgb(232,36,49)"/><text x="28.9990%" y="159.50"></text></g><g><title>check_mod_const_bodies (418,175 samples, 0.12%)</title><rect x="29.2321%" y="149" width="0.1228%" height="15" fill="rgb(209,103,24)"/><text x="29.4821%" y="159.50"></text></g><g><title>is_copy_raw (381,464 samples, 0.11%)</title><rect x="29.5970%" y="133" width="0.1120%" height="15" fill="rgb(229,88,8)"/><text x="29.8470%" y="143.50"></text></g><g><title>evaluate_obligation (349,914 samples, 0.10%)</title><rect x="29.6062%" y="117" width="0.1027%" height="15" fill="rgb(213,181,19)"/><text x="29.8562%" y="127.50"></text></g><g><title>lookup_deprecation_entry (510,628 samples, 0.15%)</title><rect x="29.7969%" y="133" width="0.1499%" height="15" fill="rgb(254,191,54)"/><text x="30.0469%" y="143.50"></text></g><g><title>stability_index (397,624 samples, 0.12%)</title><rect x="29.8300%" y="117" width="0.1167%" height="15" fill="rgb(241,83,37)"/><text x="30.0800%" y="127.50"></text></g><g><title>predicates_of (1,080,912 samples, 0.32%)</title><rect x="30.0329%" y="117" width="0.3173%" height="15" fill="rgb(233,36,39)"/><text x="30.2829%" y="127.50"></text></g><g><title>predicates_defined_on (1,079,592 samples, 0.32%)</title><rect x="30.0333%" y="101" width="0.3170%" height="15" fill="rgb(226,3,54)"/><text x="30.2833%" y="111.50"></text></g><g><title>inferred_outlives_of (1,029,352 samples, 0.30%)</title><rect x="30.0480%" y="85" width="0.3022%" height="15" fill="rgb(245,192,40)"/><text x="30.2980%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,020,722 samples, 0.30%)</title><rect x="30.0506%" y="69" width="0.2997%" height="15" fill="rgb(238,167,29)"/><text x="30.3006%" y="79.50"></text></g><g><title>type_of (508,924 samples, 0.15%)</title><rect x="30.2008%" y="53" width="0.1494%" height="15" fill="rgb(232,182,51)"/><text x="30.4508%" y="63.50"></text></g><g><title>param_env (1,258,584 samples, 0.37%)</title><rect x="29.9822%" y="133" width="0.3695%" height="15" fill="rgb(231,60,39)"/><text x="30.2322%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,262,407 samples, 0.96%)</title><rect x="29.4261%" y="149" width="0.9578%" height="15" fill="rgb(208,69,12)"/><text x="29.6761%" y="159.50"></text></g><g><title>misc_checking_1 (5,702,023 samples, 1.67%)</title><rect x="28.7410%" y="165" width="1.6741%" height="15" fill="rgb(235,93,37)"/><text x="28.9910%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,876,051 samples, 0.55%)</title><rect x="30.4155%" y="149" width="0.5508%" height="15" fill="rgb(213,116,39)"/><text x="30.6655%" y="159.50"></text></g><g><title>check_mod_liveness (1,620,978 samples, 0.48%)</title><rect x="30.4904%" y="133" width="0.4759%" height="15" fill="rgb(222,207,29)"/><text x="30.7404%" y="143.50"></text></g><g><title>type_uninhabited_from (443,584 samples, 0.13%)</title><rect x="30.8361%" y="117" width="0.1302%" height="15" fill="rgb(206,96,30)"/><text x="31.0861%" y="127.50"></text></g><g><title>misc_checking_2 (3,621,820 samples, 1.06%)</title><rect x="30.4151%" y="165" width="1.0633%" height="15" fill="rgb(218,138,4)"/><text x="30.6651%" y="175.50"></text></g><g><title>match_checking (1,744,199 samples, 0.51%)</title><rect x="30.9663%" y="149" width="0.5121%" height="15" fill="rgb(250,191,14)"/><text x="31.2163%" y="159.50"></text></g><g><title>check_match (1,604,409 samples, 0.47%)</title><rect x="31.0074%" y="133" width="0.4710%" height="15" fill="rgb(239,60,40)"/><text x="31.2574%" y="143.50"></text></g><g><title>check_private_in_public (770,399 samples, 0.23%)</title><rect x="31.4821%" y="149" width="0.2262%" height="15" fill="rgb(206,27,48)"/><text x="31.7321%" y="159.50"></text></g><g><title>death_checking (1,158,263 samples, 0.34%)</title><rect x="31.7083%" y="149" width="0.3401%" height="15" fill="rgb(225,35,8)"/><text x="31.9583%" y="159.50"></text></g><g><title>param_env (373,384 samples, 0.11%)</title><rect x="32.4367%" y="117" width="0.1096%" height="15" fill="rgb(250,213,24)"/><text x="32.6867%" y="127.50"></text></g><g><title>crate_lints (2,905,613 samples, 0.85%)</title><rect x="32.0488%" y="133" width="0.8531%" height="15" fill="rgb(247,123,22)"/><text x="32.2988%" y="143.50"></text></g><g><title>type_of (1,206,244 samples, 0.35%)</title><rect x="32.5477%" y="117" width="0.3541%" height="15" fill="rgb(231,138,38)"/><text x="32.7977%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (968,911 samples, 0.28%)</title><rect x="32.6174%" y="101" width="0.2845%" height="15" fill="rgb(231,145,46)"/><text x="32.8674%" y="111.50"></text></g><g><title>lint_checking (4,229,438 samples, 1.24%)</title><rect x="32.0483%" y="149" width="1.2417%" height="15" fill="rgb(251,118,11)"/><text x="32.2983%" y="159.50"></text></g><g><title>module_lints (1,322,235 samples, 0.39%)</title><rect x="32.9019%" y="133" width="0.3882%" height="15" fill="rgb(217,147,25)"/><text x="33.1519%" y="143.50"></text></g><g><title>lint_mod (1,315,815 samples, 0.39%)</title><rect x="32.9038%" y="117" width="0.3863%" height="15" fill="rgb(247,81,37)"/><text x="33.1538%" y="127.50"></text></g><g><title>privacy_access_levels (1,137,632 samples, 0.33%)</title><rect x="33.2901%" y="149" width="0.3340%" height="15" fill="rgb(209,12,38)"/><text x="33.5401%" y="159.50"></text></g><g><title>privacy_checking_modules (3,382,697 samples, 0.99%)</title><rect x="33.6241%" y="149" width="0.9931%" height="15" fill="rgb(227,1,9)"/><text x="33.8741%" y="159.50"></text></g><g><title>check_mod_privacy (3,379,047 samples, 0.99%)</title><rect x="33.6251%" y="133" width="0.9921%" height="15" fill="rgb(248,47,43)"/><text x="33.8751%" y="143.50"></text></g><g><title>misc_checking_3 (10,724,229 samples, 3.15%)</title><rect x="31.4784%" y="165" width="3.1485%" height="15" fill="rgb(221,10,30)"/><text x="31.7284%" y="175.50">mis..</text></g><g><title>impl_parent (3,418,262 samples, 1.00%)</title><rect x="37.2845%" y="101" width="1.0036%" height="15" fill="rgb(210,229,1)"/><text x="37.5345%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,042,499 samples, 0.60%)</title><rect x="37.6884%" y="85" width="0.5997%" height="15" fill="rgb(222,148,37)"/><text x="37.9384%" y="95.50"></text></g><g><title>impl_trait_ref (7,311,676 samples, 2.15%)</title><rect x="38.2884%" y="101" width="2.1466%" height="15" fill="rgb(234,67,33)"/><text x="38.5384%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,750,675 samples, 1.69%)</title><rect x="38.7467%" y="85" width="1.6883%" height="15" fill="rgb(247,98,35)"/><text x="38.9967%" y="95.50"></text></g><g><title>item_attrs (1,042,396 samples, 0.31%)</title><rect x="40.4350%" y="101" width="0.3060%" height="15" fill="rgb(247,138,52)"/><text x="40.6850%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (975,026 samples, 0.29%)</title><rect x="40.4548%" y="85" width="0.2863%" height="15" fill="rgb(213,79,30)"/><text x="40.7048%" y="95.50"></text></g><g><title>predicates_of (1,074,768 samples, 0.32%)</title><rect x="40.7410%" y="101" width="0.3155%" height="15" fill="rgb(246,177,23)"/><text x="40.9910%" y="111.50"></text></g><g><title>predicates_defined_on (791,272 samples, 0.23%)</title><rect x="40.8243%" y="85" width="0.2323%" height="15" fill="rgb(230,62,27)"/><text x="41.0743%" y="95.50"></text></g><g><title>trait_impls_of (1,161,934 samples, 0.34%)</title><rect x="41.0572%" y="101" width="0.3411%" height="15" fill="rgb(216,154,8)"/><text x="41.3072%" y="111.50"></text></g><g><title>implementations_of_trait (375,666 samples, 0.11%)</title><rect x="41.2880%" y="85" width="0.1103%" height="15" fill="rgb(244,35,45)"/><text x="41.5380%" y="95.50"></text></g><g><title>coherent_trait (22,958,843 samples, 6.74%)</title><rect x="34.7066%" y="133" width="6.7405%" height="15" fill="rgb(251,115,12)"/><text x="34.9566%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (22,297,336 samples, 6.55%)</title><rect x="34.9008%" y="117" width="6.5463%" height="15" fill="rgb(240,54,50)"/><text x="35.1508%" y="127.50">specializ..</text></g><g><title>coherence_checking (23,162,237 samples, 6.80%)</title><rect x="34.6972%" y="149" width="6.8002%" height="15" fill="rgb(233,84,52)"/><text x="34.9472%" y="159.50">coherence..</text></g><g><title>associated_item (346,093 samples, 0.10%)</title><rect x="61.3985%" y="85" width="0.1016%" height="15" fill="rgb(207,117,47)"/><text x="61.6485%" y="95.50"></text></g><g><title>associated_items (513,486 samples, 0.15%)</title><rect x="61.3601%" y="101" width="0.1508%" height="15" fill="rgb(249,43,39)"/><text x="61.6101%" y="111.50"></text></g><g><title>adt_dtorck_constraint (473,794 samples, 0.14%)</title><rect x="61.8965%" y="85" width="0.1391%" height="15" fill="rgb(209,38,44)"/><text x="62.1465%" y="95.50"></text></g><g><title>dropck_outlives (1,697,463 samples, 0.50%)</title><rect x="61.5581%" y="101" width="0.4984%" height="15" fill="rgb(236,212,23)"/><text x="61.8081%" y="111.50"></text></g><g><title>evaluate_obligation (3,892,869 samples, 1.14%)</title><rect x="62.0564%" y="101" width="1.1429%" height="15" fill="rgb(242,79,21)"/><text x="62.3064%" y="111.50"></text></g><g><title>method_autoderef_steps (2,254,622 samples, 0.66%)</title><rect x="63.5672%" y="101" width="0.6619%" height="15" fill="rgb(211,96,35)"/><text x="63.8172%" y="111.50"></text></g><g><title>evaluate_obligation (1,050,221 samples, 0.31%)</title><rect x="63.9208%" y="85" width="0.3083%" height="15" fill="rgb(253,215,40)"/><text x="64.1708%" y="95.50"></text></g><g><title>predicates_of (554,706 samples, 0.16%)</title><rect x="64.3367%" y="101" width="0.1629%" height="15" fill="rgb(211,81,21)"/><text x="64.5867%" y="111.50"></text></g><g><title>predicates_defined_on (414,295 samples, 0.12%)</title><rect x="64.3780%" y="85" width="0.1216%" height="15" fill="rgb(208,190,38)"/><text x="64.6280%" y="95.50"></text></g><g><title>evaluate_obligation (1,442,152 samples, 0.42%)</title><rect x="69.7293%" y="85" width="0.4234%" height="15" fill="rgb(235,213,38)"/><text x="69.9793%" y="95.50"></text></g><g><title>method_autoderef_steps (558,108 samples, 0.16%)</title><rect x="70.3673%" y="85" width="0.1639%" height="15" fill="rgb(237,122,38)"/><text x="70.6173%" y="95.50"></text></g><g><title>typeck (20,678,759 samples, 6.07%)</title><rect x="64.5609%" y="101" width="6.0711%" height="15" fill="rgb(244,218,35)"/><text x="64.8109%" y="111.50">typeck</text></g><g><title>item_bodies_checking (99,235,815 samples, 29.13%)</title><rect x="41.5398%" y="149" width="29.1347%" height="15" fill="rgb(240,68,47)"/><text x="41.7898%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (99,231,575 samples, 29.13%)</title><rect x="41.5410%" y="133" width="29.1335%" height="15" fill="rgb(210,16,53)"/><text x="41.7910%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (98,826,463 samples, 29.01%)</title><rect x="41.6600%" y="117" width="29.0146%" height="15" fill="rgb(235,124,12)"/><text x="41.9100%" y="127.50">typeck</text></g><g><title>item_types_checking (7,403,562 samples, 2.17%)</title><rect x="70.6745%" y="149" width="2.1736%" height="15" fill="rgb(224,169,11)"/><text x="70.9245%" y="159.50">i..</text></g><g><title>check_mod_item_types (7,398,122 samples, 2.17%)</title><rect x="70.6761%" y="133" width="2.1720%" height="15" fill="rgb(250,166,2)"/><text x="70.9261%" y="143.50">c..</text></g><g><title>fn_sig (861,337 samples, 0.25%)</title><rect x="73.1390%" y="117" width="0.2529%" height="15" fill="rgb(242,216,29)"/><text x="73.3890%" y="127.50"></text></g><g><title>is_late_bound_map (1,053,411 samples, 0.31%)</title><rect x="73.5363%" y="101" width="0.3093%" height="15" fill="rgb(230,116,27)"/><text x="73.7863%" y="111.50"></text></g><g><title>resolve_lifetimes (965,900 samples, 0.28%)</title><rect x="73.5619%" y="85" width="0.2836%" height="15" fill="rgb(228,99,48)"/><text x="73.8119%" y="95.50"></text></g><g><title>generics_of (1,804,904 samples, 0.53%)</title><rect x="73.3918%" y="117" width="0.5299%" height="15" fill="rgb(253,11,6)"/><text x="73.6418%" y="127.50"></text></g><g><title>late_bound_vars_map (516,998 samples, 0.15%)</title><rect x="74.4874%" y="69" width="0.1518%" height="15" fill="rgb(247,143,39)"/><text x="74.7374%" y="79.50"></text></g><g><title>resolve_lifetimes (480,536 samples, 0.14%)</title><rect x="74.4981%" y="53" width="0.1411%" height="15" fill="rgb(236,97,10)"/><text x="74.7481%" y="63.50"></text></g><g><title>explicit_predicates_of (1,556,694 samples, 0.46%)</title><rect x="74.1943%" y="85" width="0.4570%" height="15" fill="rgb(233,208,19)"/><text x="74.4443%" y="95.50"></text></g><g><title>predicates_of (2,392,135 samples, 0.70%)</title><rect x="73.9687%" y="117" width="0.7023%" height="15" fill="rgb(216,164,2)"/><text x="74.2187%" y="127.50"></text></g><g><title>predicates_defined_on (1,957,010 samples, 0.57%)</title><rect x="74.0964%" y="101" width="0.5746%" height="15" fill="rgb(220,129,5)"/><text x="74.3464%" y="111.50"></text></g><g><title>type_collecting (6,753,105 samples, 1.98%)</title><rect x="72.8493%" y="149" width="1.9827%" height="15" fill="rgb(242,17,10)"/><text x="73.0993%" y="159.50">t..</text></g><g><title>collect_mod_item_types (6,748,175 samples, 1.98%)</title><rect x="72.8508%" y="133" width="1.9812%" height="15" fill="rgb(242,107,0)"/><text x="73.1008%" y="143.50">c..</text></g><g><title>type_of (528,455 samples, 0.16%)</title><rect x="74.6768%" y="117" width="0.1551%" height="15" fill="rgb(251,28,31)"/><text x="74.9268%" y="127.50"></text></g><g><title>evaluate_obligation (2,378,696 samples, 0.70%)</title><rect x="79.0054%" y="117" width="0.6984%" height="15" fill="rgb(233,223,10)"/><text x="79.2554%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,780,350 samples, 0.52%)</title><rect x="79.7051%" y="117" width="0.5227%" height="15" fill="rgb(215,21,27)"/><text x="79.9551%" y="127.50"></text></g><g><title>param_env (2,171,694 samples, 0.64%)</title><rect x="80.2278%" y="117" width="0.6376%" height="15" fill="rgb(232,23,21)"/><text x="80.4778%" y="127.50"></text></g><g><title>region_scope_tree (1,337,074 samples, 0.39%)</title><rect x="80.8809%" y="117" width="0.3926%" height="15" fill="rgb(244,5,23)"/><text x="81.1309%" y="127.50"></text></g><g><title>check_impl_item_well_formed (21,016,367 samples, 6.17%)</title><rect x="75.1135%" y="133" width="6.1702%" height="15" fill="rgb(226,81,46)"/><text x="75.3635%" y="143.50">check_im..</text></g><g><title>implied_outlives_bounds (724,511 samples, 0.21%)</title><rect x="84.2691%" y="117" width="0.2127%" height="15" fill="rgb(247,70,30)"/><text x="84.5191%" y="127.50"></text></g><g><title>param_env (1,396,808 samples, 0.41%)</title><rect x="84.4818%" y="117" width="0.4101%" height="15" fill="rgb(212,68,19)"/><text x="84.7318%" y="127.50"></text></g><g><title>check_item_well_formed (13,014,622 samples, 3.82%)</title><rect x="81.2837%" y="133" width="3.8210%" height="15" fill="rgb(240,187,13)"/><text x="81.5337%" y="143.50">chec..</text></g><g><title>variances_of (418,116 samples, 0.12%)</title><rect x="84.9819%" y="117" width="0.1228%" height="15" fill="rgb(223,113,26)"/><text x="85.2319%" y="127.50"></text></g><g><title>crate_variances (406,645 samples, 0.12%)</title><rect x="84.9853%" y="101" width="0.1194%" height="15" fill="rgb(206,192,2)"/><text x="85.2353%" y="111.50"></text></g><g><title>analysis (289,426,982 samples, 84.97%)</title><rect x="0.1401%" y="181" width="84.9731%" height="15" fill="rgb(241,108,4)"/><text x="0.3901%" y="191.50">analysis</text></g><g><title>type_check_crate (171,961,405 samples, 50.49%)</title><rect x="34.6270%" y="165" width="50.4863%" height="15" fill="rgb(247,173,49)"/><text x="34.8770%" y="175.50">type_check_crate</text></g><g><title>wf_checking (34,993,901 samples, 10.27%)</title><rect x="74.8394%" y="149" width="10.2739%" height="15" fill="rgb(224,114,35)"/><text x="75.0894%" y="159.50">wf_checking</text></g><g><title>codegen_crate (411,475 samples, 0.12%)</title><rect x="85.1155%" y="181" width="0.1208%" height="15" fill="rgb(245,159,27)"/><text x="85.3655%" y="191.50"></text></g><g><title>metadata_register_crate (1,471,226 samples, 0.43%)</title><rect x="91.0990%" y="133" width="0.4319%" height="15" fill="rgb(245,172,44)"/><text x="91.3490%" y="143.50"></text></g><g><title>metadata_register_crate (606,066 samples, 0.18%)</title><rect x="91.3530%" y="117" width="0.1779%" height="15" fill="rgb(236,23,11)"/><text x="91.6030%" y="127.50"></text></g><g><title>macro_expand_crate (21,205,376 samples, 6.23%)</title><rect x="85.4499%" y="165" width="6.2257%" height="15" fill="rgb(205,117,38)"/><text x="85.6999%" y="175.50">macro_ex..</text></g><g><title>expand_crate (21,187,406 samples, 6.22%)</title><rect x="85.4552%" y="149" width="6.2204%" height="15" fill="rgb(237,72,25)"/><text x="85.7052%" y="159.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (492,847 samples, 0.14%)</title><rect x="91.5309%" y="133" width="0.1447%" height="15" fill="rgb(244,70,9)"/><text x="91.7809%" y="143.50"></text></g><g><title>late_resolve_crate (4,166,757 samples, 1.22%)</title><rect x="91.7640%" y="149" width="1.2233%" height="15" fill="rgb(217,125,39)"/><text x="92.0140%" y="159.50"></text></g><g><title>configure_and_expand (26,715,788 samples, 7.84%)</title><rect x="85.2363%" y="181" width="7.8435%" height="15" fill="rgb(235,36,10)"/><text x="85.4863%" y="191.50">configure_a..</text></g><g><title>resolve_crate (4,741,283 samples, 1.39%)</title><rect x="91.6878%" y="165" width="1.3920%" height="15" fill="rgb(251,123,47)"/><text x="91.9378%" y="175.50"></text></g><g><title>drop_ast (906,141 samples, 0.27%)</title><rect x="93.0798%" y="181" width="0.2660%" height="15" fill="rgb(221,13,13)"/><text x="93.3298%" y="191.50"></text></g><g><title>early_lint_checks (896,440 samples, 0.26%)</title><rect x="93.3509%" y="181" width="0.2632%" height="15" fill="rgb(238,131,9)"/><text x="93.6009%" y="191.50"></text></g><g><title>free_global_ctxt (5,077,667 samples, 1.49%)</title><rect x="93.6141%" y="181" width="1.4908%" height="15" fill="rgb(211,50,8)"/><text x="93.8641%" y="191.50"></text></g><g><title>generate_crate_metadata (4,394,149 samples, 1.29%)</title><rect x="95.1048%" y="181" width="1.2901%" height="15" fill="rgb(245,182,24)"/><text x="95.3548%" y="191.50"></text></g><g><title>hir_lowering (9,749,858 samples, 2.86%)</title><rect x="96.3949%" y="181" width="2.8625%" height="15" fill="rgb(242,14,37)"/><text x="96.6449%" y="191.50">hi..</text></g><g><title>self_profile_alloc_query_strings (1,498,707 samples, 0.44%)</title><rect x="99.3987%" y="181" width="0.4400%" height="15" fill="rgb(246,228,12)"/><text x="99.6487%" y="191.50"></text></g><g><title>all (340,609,983 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (340,609,983 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (451,715 samples, 0.13%)</title><rect x="99.8674%" y="181" width="0.1326%" height="15" fill="rgb(230,59,30)"/><text x="100.1174%" y="191.50"></text></g></svg></svg>