<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (367,695 samples, 0.11%)</title><rect x="19.3755%" y="117" width="0.1110%" height="15" fill="rgb(227,0,7)"/><text x="19.6255%" y="127.50"></text></g><g><title>codegen_fn_attrs (456,775 samples, 0.14%)</title><rect x="19.9944%" y="101" width="0.1379%" height="15" fill="rgb(217,0,24)"/><text x="20.2444%" y="111.50"></text></g><g><title>adt_drop_tys (415,447 samples, 0.13%)</title><rect x="23.8106%" y="69" width="0.1254%" height="15" fill="rgb(221,193,54)"/><text x="24.0606%" y="79.50"></text></g><g><title>needs_drop_raw (2,070,328 samples, 0.62%)</title><rect x="23.7416%" y="85" width="0.6249%" height="15" fill="rgb(248,212,6)"/><text x="23.9916%" y="95.50"></text></g><g><title>is_copy_raw (1,422,928 samples, 0.43%)</title><rect x="23.9370%" y="69" width="0.4295%" height="15" fill="rgb(208,68,35)"/><text x="24.1870%" y="79.50"></text></g><g><title>evaluate_obligation (1,151,035 samples, 0.35%)</title><rect x="24.0191%" y="53" width="0.3474%" height="15" fill="rgb(232,128,0)"/><text x="24.2691%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (422,763 samples, 0.13%)</title><rect x="24.4805%" y="69" width="0.1276%" height="15" fill="rgb(207,160,47)"/><text x="24.7305%" y="79.50"></text></g><g><title>impl_parent (1,029,346 samples, 0.31%)</title><rect x="25.1350%" y="53" width="0.3107%" height="15" fill="rgb(228,23,34)"/><text x="25.3850%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (698,481 samples, 0.21%)</title><rect x="25.2349%" y="37" width="0.2108%" height="15" fill="rgb(218,30,26)"/><text x="25.4849%" y="47.50"></text></g><g><title>specialization_graph_of (6,795,575 samples, 2.05%)</title><rect x="24.6533%" y="69" width="2.0513%" height="15" fill="rgb(220,122,19)"/><text x="24.9033%" y="79.50">s..</text></g><g><title>impl_trait_ref (4,170,204 samples, 1.26%)</title><rect x="25.4457%" y="53" width="1.2588%" height="15" fill="rgb(250,228,42)"/><text x="25.6957%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,822,769 samples, 1.15%)</title><rect x="25.5506%" y="37" width="1.1539%" height="15" fill="rgb(240,193,28)"/><text x="25.8006%" y="47.50"></text></g><g><title>resolve_instance (7,861,247 samples, 2.37%)</title><rect x="24.3665%" y="85" width="2.3730%" height="15" fill="rgb(216,20,37)"/><text x="24.6165%" y="95.50">re..</text></g><g><title>thir_body (4,268,627 samples, 1.29%)</title><rect x="26.7613%" y="85" width="1.2885%" height="15" fill="rgb(206,188,39)"/><text x="27.0113%" y="95.50"></text></g><g><title>mir_const (31,861,816 samples, 9.62%)</title><rect x="18.4440%" y="133" width="9.6176%" height="15" fill="rgb(217,207,13)"/><text x="18.6940%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (28,408,355 samples, 8.58%)</title><rect x="19.4864%" y="117" width="8.5752%" height="15" fill="rgb(231,73,38)"/><text x="19.7364%" y="127.50">unsafety_che..</text></g><g><title>mir_built (26,267,438 samples, 7.93%)</title><rect x="20.1327%" y="101" width="7.9289%" height="15" fill="rgb(225,20,46)"/><text x="20.3827%" y="111.50">mir_built</text></g><g><title>mir_promoted (35,500,339 samples, 10.72%)</title><rect x="17.3836%" y="149" width="10.7159%" height="15" fill="rgb(210,31,41)"/><text x="17.6336%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,113,912 samples, 0.34%)</title><rect x="28.1011%" y="149" width="0.3362%" height="15" fill="rgb(221,200,47)"/><text x="28.3511%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (966,481 samples, 0.29%)</title><rect x="28.4374%" y="149" width="0.2917%" height="15" fill="rgb(226,26,5)"/><text x="28.6874%" y="159.50"></text></g><g><title>normalize_projection_ty (631,350 samples, 0.19%)</title><rect x="28.5385%" y="133" width="0.1906%" height="15" fill="rgb(249,33,26)"/><text x="28.7885%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,330,996 samples, 1.61%)</title><rect x="28.8172%" y="149" width="1.6092%" height="15" fill="rgb(235,183,28)"/><text x="29.0672%" y="159.50"></text></g><g><title>MIR_borrow_checking (99,420,037 samples, 30.01%)</title><rect x="0.4193%" y="181" width="30.0104%" height="15" fill="rgb(221,5,38)"/><text x="0.6693%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (99,135,034 samples, 29.92%)</title><rect x="0.5053%" y="165" width="29.9243%" height="15" fill="rgb(247,18,42)"/><text x="0.7553%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (341,194 samples, 0.10%)</title><rect x="30.4851%" y="181" width="0.1030%" height="15" fill="rgb(241,131,45)"/><text x="30.7351%" y="191.50"></text></g><g><title>should_inherit_track_caller (335,262 samples, 0.10%)</title><rect x="30.9004%" y="133" width="0.1012%" height="15" fill="rgb(249,31,29)"/><text x="31.1504%" y="143.50"></text></g><g><title>codegen_fn_attrs (574,646 samples, 0.17%)</title><rect x="30.8343%" y="149" width="0.1735%" height="15" fill="rgb(225,111,53)"/><text x="31.0843%" y="159.50"></text></g><g><title>check_mod_attrs (1,366,325 samples, 0.41%)</title><rect x="30.5953%" y="165" width="0.4124%" height="15" fill="rgb(238,160,17)"/><text x="30.8453%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (592,306 samples, 0.18%)</title><rect x="31.1310%" y="165" width="0.1788%" height="15" fill="rgb(214,148,48)"/><text x="31.3810%" y="175.50"></text></g><g><title>misc_checking_1 (2,433,907 samples, 0.73%)</title><rect x="30.5882%" y="181" width="0.7347%" height="15" fill="rgb(232,36,49)"/><text x="30.8382%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,537,958 samples, 0.46%)</title><rect x="31.3234%" y="165" width="0.4642%" height="15" fill="rgb(209,103,24)"/><text x="31.5734%" y="175.50"></text></g><g><title>check_mod_liveness (1,290,185 samples, 0.39%)</title><rect x="31.3982%" y="149" width="0.3894%" height="15" fill="rgb(229,88,8)"/><text x="31.6482%" y="159.50"></text></g><g><title>misc_checking_2 (3,712,302 samples, 1.12%)</title><rect x="31.3229%" y="181" width="1.1206%" height="15" fill="rgb(213,181,19)"/><text x="31.5729%" y="191.50"></text></g><g><title>match_checking (2,172,514 samples, 0.66%)</title><rect x="31.7877%" y="165" width="0.6558%" height="15" fill="rgb(254,191,54)"/><text x="32.0377%" y="175.50"></text></g><g><title>check_match (2,107,704 samples, 0.64%)</title><rect x="31.8072%" y="149" width="0.6362%" height="15" fill="rgb(241,83,37)"/><text x="32.0572%" y="159.50"></text></g><g><title>check_private_in_public (410,544 samples, 0.12%)</title><rect x="32.4466%" y="165" width="0.1239%" height="15" fill="rgb(233,36,39)"/><text x="32.6966%" y="175.50"></text></g><g><title>death_checking (709,008 samples, 0.21%)</title><rect x="32.5705%" y="165" width="0.2140%" height="15" fill="rgb(226,3,54)"/><text x="32.8205%" y="175.50"></text></g><g><title>crate_lints (3,939,324 samples, 1.19%)</title><rect x="32.7850%" y="149" width="1.1891%" height="15" fill="rgb(245,192,40)"/><text x="33.0350%" y="159.50"></text></g><g><title>type_of (1,519,448 samples, 0.46%)</title><rect x="33.5155%" y="133" width="0.4587%" height="15" fill="rgb(238,167,29)"/><text x="33.7655%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,255,956 samples, 0.38%)</title><rect x="33.5950%" y="117" width="0.3791%" height="15" fill="rgb(232,182,51)"/><text x="33.8450%" y="127.50"></text></g><g><title>lint_checking (5,808,335 samples, 1.75%)</title><rect x="32.7845%" y="165" width="1.7533%" height="15" fill="rgb(231,60,39)"/><text x="33.0345%" y="175.50"></text></g><g><title>module_lints (1,867,281 samples, 0.56%)</title><rect x="33.9741%" y="149" width="0.5636%" height="15" fill="rgb(208,69,12)"/><text x="34.2241%" y="159.50"></text></g><g><title>lint_mod (1,863,721 samples, 0.56%)</title><rect x="33.9752%" y="133" width="0.5626%" height="15" fill="rgb(235,93,37)"/><text x="34.2252%" y="143.50"></text></g><g><title>privacy_access_levels (652,927 samples, 0.20%)</title><rect x="34.5378%" y="165" width="0.1971%" height="15" fill="rgb(213,116,39)"/><text x="34.7878%" y="175.50"></text></g><g><title>privacy_checking_modules (4,204,057 samples, 1.27%)</title><rect x="34.7349%" y="165" width="1.2690%" height="15" fill="rgb(222,207,29)"/><text x="34.9849%" y="175.50"></text></g><g><title>check_mod_privacy (4,201,877 samples, 1.27%)</title><rect x="34.7355%" y="149" width="1.2684%" height="15" fill="rgb(206,96,30)"/><text x="34.9855%" y="159.50"></text></g><g><title>misc_checking_3 (11,824,791 samples, 3.57%)</title><rect x="32.4434%" y="181" width="3.5694%" height="15" fill="rgb(218,138,4)"/><text x="32.6934%" y="191.50">misc..</text></g><g><title>impl_trait_ref (415,925 samples, 0.13%)</title><rect x="36.1315%" y="117" width="0.1255%" height="15" fill="rgb(250,191,14)"/><text x="36.3815%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (385,254 samples, 0.12%)</title><rect x="36.1407%" y="101" width="0.1163%" height="15" fill="rgb(239,60,40)"/><text x="36.3907%" y="111.50"></text></g><g><title>coherent_trait (815,669 samples, 0.25%)</title><rect x="36.0471%" y="149" width="0.2462%" height="15" fill="rgb(206,27,48)"/><text x="36.2971%" y="159.50"></text></g><g><title>specialization_graph_of (805,129 samples, 0.24%)</title><rect x="36.0503%" y="133" width="0.2430%" height="15" fill="rgb(225,35,8)"/><text x="36.3003%" y="143.50"></text></g><g><title>coherence_checking (883,250 samples, 0.27%)</title><rect x="36.0431%" y="165" width="0.2666%" height="15" fill="rgb(250,213,24)"/><text x="36.2931%" y="175.50"></text></g><g><title>associated_item (506,898 samples, 0.15%)</title><rect x="65.2436%" y="101" width="0.1530%" height="15" fill="rgb(247,123,22)"/><text x="65.4936%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (403,368 samples, 0.12%)</title><rect x="65.2748%" y="85" width="0.1218%" height="15" fill="rgb(231,138,38)"/><text x="65.5248%" y="95.50"></text></g><g><title>associated_items (733,210 samples, 0.22%)</title><rect x="65.1882%" y="117" width="0.2213%" height="15" fill="rgb(231,145,46)"/><text x="65.4382%" y="127.50"></text></g><g><title>adt_dtorck_constraint (641,827 samples, 0.19%)</title><rect x="65.5578%" y="101" width="0.1937%" height="15" fill="rgb(251,118,11)"/><text x="65.8078%" y="111.50"></text></g><g><title>dropck_outlives (1,056,853 samples, 0.32%)</title><rect x="65.4377%" y="117" width="0.3190%" height="15" fill="rgb(217,147,25)"/><text x="65.6877%" y="127.50"></text></g><g><title>evaluate_obligation (3,363,335 samples, 1.02%)</title><rect x="65.7587%" y="117" width="1.0152%" height="15" fill="rgb(247,81,37)"/><text x="66.0087%" y="127.50"></text></g><g><title>trait_impls_of (546,236 samples, 0.16%)</title><rect x="66.6090%" y="101" width="0.1649%" height="15" fill="rgb(209,12,38)"/><text x="66.8590%" y="111.50"></text></g><g><title>method_autoderef_steps (663,254 samples, 0.20%)</title><rect x="67.0253%" y="117" width="0.2002%" height="15" fill="rgb(227,1,9)"/><text x="67.2753%" y="127.50"></text></g><g><title>predicates_of (463,945 samples, 0.14%)</title><rect x="67.2532%" y="117" width="0.1400%" height="15" fill="rgb(248,47,43)"/><text x="67.5032%" y="127.50"></text></g><g><title>evaluate_obligation (1,721,710 samples, 0.52%)</title><rect x="71.5433%" y="101" width="0.5197%" height="15" fill="rgb(221,10,30)"/><text x="71.7933%" y="111.50"></text></g><g><title>is_copy_raw (570,846 samples, 0.17%)</title><rect x="72.1436%" y="101" width="0.1723%" height="15" fill="rgb(210,229,1)"/><text x="72.3936%" y="111.50"></text></g><g><title>evaluate_obligation (496,815 samples, 0.15%)</title><rect x="72.1660%" y="85" width="0.1500%" height="15" fill="rgb(222,148,37)"/><text x="72.4160%" y="95.50"></text></g><g><title>method_autoderef_steps (363,415 samples, 0.11%)</title><rect x="72.3468%" y="101" width="0.1097%" height="15" fill="rgb(234,67,33)"/><text x="72.5968%" y="111.50"></text></g><g><title>typeck (16,970,416 samples, 5.12%)</title><rect x="67.5236%" y="117" width="5.1226%" height="15" fill="rgb(247,98,35)"/><text x="67.7736%" y="127.50">typeck</text></g><g><title>item_bodies_checking (120,408,201 samples, 36.35%)</title><rect x="36.3234%" y="165" width="36.3457%" height="15" fill="rgb(247,138,52)"/><text x="36.5734%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (120,404,301 samples, 36.34%)</title><rect x="36.3246%" y="149" width="36.3446%" height="15" fill="rgb(213,79,30)"/><text x="36.5746%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (120,222,310 samples, 36.29%)</title><rect x="36.3795%" y="133" width="36.2896%" height="15" fill="rgb(246,177,23)"/><text x="36.6295%" y="143.50">typeck</text></g><g><title>item_types_checking (1,866,081 samples, 0.56%)</title><rect x="72.6691%" y="165" width="0.5633%" height="15" fill="rgb(230,62,27)"/><text x="72.9191%" y="175.50"></text></g><g><title>check_mod_item_types (1,863,801 samples, 0.56%)</title><rect x="72.6698%" y="149" width="0.5626%" height="15" fill="rgb(216,154,8)"/><text x="72.9198%" y="159.50"></text></g><g><title>fn_sig (534,446 samples, 0.16%)</title><rect x="73.3882%" y="133" width="0.1613%" height="15" fill="rgb(244,35,45)"/><text x="73.6382%" y="143.50"></text></g><g><title>is_late_bound_map (382,535 samples, 0.12%)</title><rect x="73.6080%" y="117" width="0.1155%" height="15" fill="rgb(251,115,12)"/><text x="73.8580%" y="127.50"></text></g><g><title>resolve_lifetimes (367,415 samples, 0.11%)</title><rect x="73.6125%" y="101" width="0.1109%" height="15" fill="rgb(240,54,50)"/><text x="73.8625%" y="111.50"></text></g><g><title>generics_of (884,931 samples, 0.27%)</title><rect x="73.5495%" y="133" width="0.2671%" height="15" fill="rgb(233,84,52)"/><text x="73.7995%" y="143.50"></text></g><g><title>lint_levels (905,960 samples, 0.27%)</title><rect x="74.0967%" y="53" width="0.2735%" height="15" fill="rgb(207,117,47)"/><text x="74.3467%" y="63.50"></text></g><g><title>late_bound_vars_map (1,198,542 samples, 0.36%)</title><rect x="74.0087%" y="85" width="0.3618%" height="15" fill="rgb(249,43,39)"/><text x="74.2587%" y="95.50"></text></g><g><title>resolve_lifetimes (1,177,422 samples, 0.36%)</title><rect x="74.0150%" y="69" width="0.3554%" height="15" fill="rgb(209,38,44)"/><text x="74.2650%" y="79.50"></text></g><g><title>explicit_predicates_of (1,609,830 samples, 0.49%)</title><rect x="73.8965%" y="101" width="0.4859%" height="15" fill="rgb(236,212,23)"/><text x="74.1465%" y="111.50"></text></g><g><title>predicates_of (2,649,630 samples, 0.80%)</title><rect x="73.8255%" y="133" width="0.7998%" height="15" fill="rgb(242,79,21)"/><text x="74.0755%" y="143.50"></text></g><g><title>predicates_defined_on (2,553,160 samples, 0.77%)</title><rect x="73.8546%" y="117" width="0.7707%" height="15" fill="rgb(211,96,35)"/><text x="74.1046%" y="127.50"></text></g><g><title>inferred_outlives_of (804,478 samples, 0.24%)</title><rect x="74.3825%" y="101" width="0.2428%" height="15" fill="rgb(253,215,40)"/><text x="74.6325%" y="111.50"></text></g><g><title>inferred_outlives_crate (773,958 samples, 0.23%)</title><rect x="74.3917%" y="85" width="0.2336%" height="15" fill="rgb(211,81,21)"/><text x="74.6417%" y="95.50"></text></g><g><title>type_of (501,504 samples, 0.15%)</title><rect x="74.4739%" y="69" width="0.1514%" height="15" fill="rgb(208,190,38)"/><text x="74.7239%" y="79.50"></text></g><g><title>type_collecting (5,127,758 samples, 1.55%)</title><rect x="73.2330%" y="165" width="1.5478%" height="15" fill="rgb(235,213,38)"/><text x="73.4830%" y="175.50"></text></g><g><title>collect_mod_item_types (5,120,178 samples, 1.55%)</title><rect x="73.2353%" y="149" width="1.5455%" height="15" fill="rgb(237,122,38)"/><text x="73.4853%" y="159.50"></text></g><g><title>type_of (375,014 samples, 0.11%)</title><rect x="74.6677%" y="133" width="0.1132%" height="15" fill="rgb(244,218,35)"/><text x="74.9177%" y="143.50"></text></g><g><title>evaluate_obligation (400,025 samples, 0.12%)</title><rect x="76.0336%" y="133" width="0.1207%" height="15" fill="rgb(240,68,47)"/><text x="76.2836%" y="143.50"></text></g><g><title>param_env (559,274 samples, 0.17%)</title><rect x="76.2552%" y="133" width="0.1688%" height="15" fill="rgb(210,16,53)"/><text x="76.5052%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,207,613 samples, 1.87%)</title><rect x="74.8929%" y="149" width="1.8738%" height="15" fill="rgb(235,124,12)"/><text x="75.1429%" y="159.50">c..</text></g><g><title>region_scope_tree (1,120,684 samples, 0.34%)</title><rect x="76.4284%" y="133" width="0.3383%" height="15" fill="rgb(224,169,11)"/><text x="76.6784%" y="143.50"></text></g><g><title>evaluate_obligation (464,991 samples, 0.14%)</title><rect x="77.6038%" y="133" width="0.1404%" height="15" fill="rgb(250,166,2)"/><text x="77.8538%" y="143.50"></text></g><g><title>object_safety_violations (1,247,094 samples, 0.38%)</title><rect x="77.7893%" y="133" width="0.3764%" height="15" fill="rgb(242,216,29)"/><text x="78.0393%" y="143.50"></text></g><g><title>param_env (426,332 samples, 0.13%)</title><rect x="78.1657%" y="133" width="0.1287%" height="15" fill="rgb(230,116,27)"/><text x="78.4157%" y="143.50"></text></g><g><title>check_item_well_formed (5,431,599 samples, 1.64%)</title><rect x="76.7667%" y="149" width="1.6396%" height="15" fill="rgb(228,99,48)"/><text x="77.0167%" y="159.50"></text></g><g><title>analysis (259,985,126 samples, 78.48%)</title><rect x="0.1874%" y="197" width="78.4776%" height="15" fill="rgb(253,11,6)"/><text x="0.4374%" y="207.50">analysis</text></g><g><title>type_check_crate (141,300,804 samples, 42.65%)</title><rect x="36.0128%" y="181" width="42.6523%" height="15" fill="rgb(247,143,39)"/><text x="36.2628%" y="191.50">type_check_crate</text></g><g><title>wf_checking (12,857,253 samples, 3.88%)</title><rect x="74.7841%" y="165" width="3.8810%" height="15" fill="rgb(236,97,10)"/><text x="75.0341%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (857,410 samples, 0.26%)</title><rect x="78.4063%" y="149" width="0.2588%" height="15" fill="rgb(233,208,19)"/><text x="78.6563%" y="159.50"></text></g><g><title>codegen_crate (454,975 samples, 0.14%)</title><rect x="78.6685%" y="197" width="0.1373%" height="15" fill="rgb(216,164,2)"/><text x="78.9185%" y="207.50"></text></g><g><title>metadata_load_macro (344,884 samples, 0.10%)</title><rect x="88.7982%" y="149" width="0.1041%" height="15" fill="rgb(220,129,5)"/><text x="89.0482%" y="159.50"></text></g><g><title>macro_expand_crate (35,214,582 samples, 10.63%)</title><rect x="78.9815%" y="181" width="10.6297%" height="15" fill="rgb(242,17,10)"/><text x="79.2315%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (35,195,762 samples, 10.62%)</title><rect x="78.9872%" y="165" width="10.6240%" height="15" fill="rgb(242,107,0)"/><text x="79.2372%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,348,196 samples, 0.71%)</title><rect x="88.9023%" y="149" width="0.7088%" height="15" fill="rgb(251,28,31)"/><text x="89.1523%" y="159.50"></text></g><g><title>metadata_register_crate (852,819 samples, 0.26%)</title><rect x="89.3537%" y="133" width="0.2574%" height="15" fill="rgb(233,223,10)"/><text x="89.6037%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (585,387 samples, 0.18%)</title><rect x="89.6122%" y="181" width="0.1767%" height="15" fill="rgb(215,21,27)"/><text x="89.8622%" y="191.50"></text></g><g><title>late_resolve_crate (5,006,836 samples, 1.51%)</title><rect x="89.8916%" y="165" width="1.5113%" height="15" fill="rgb(232,23,21)"/><text x="90.1416%" y="175.50"></text></g><g><title>configure_and_expand (41,956,927 samples, 12.66%)</title><rect x="78.8059%" y="197" width="12.6649%" height="15" fill="rgb(244,5,23)"/><text x="79.0559%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,571,651 samples, 1.68%)</title><rect x="89.7889%" y="181" width="1.6818%" height="15" fill="rgb(226,81,46)"/><text x="90.0389%" y="191.50"></text></g><g><title>drop_ast (553,316 samples, 0.17%)</title><rect x="91.4707%" y="197" width="0.1670%" height="15" fill="rgb(247,70,30)"/><text x="91.7207%" y="207.50"></text></g><g><title>early_lint_checks (816,459 samples, 0.25%)</title><rect x="91.6436%" y="197" width="0.2465%" height="15" fill="rgb(212,68,19)"/><text x="91.8936%" y="207.50"></text></g><g><title>free_global_ctxt (4,856,464 samples, 1.47%)</title><rect x="91.8900%" y="197" width="1.4659%" height="15" fill="rgb(240,187,13)"/><text x="92.1400%" y="207.50"></text></g><g><title>generate_crate_metadata (1,527,637 samples, 0.46%)</title><rect x="93.3560%" y="197" width="0.4611%" height="15" fill="rgb(223,113,26)"/><text x="93.6060%" y="207.50"></text></g><g><title>hir_lowering (8,275,353 samples, 2.50%)</title><rect x="93.8171%" y="197" width="2.4980%" height="15" fill="rgb(206,192,2)"/><text x="94.0671%" y="207.50">hi..</text></g><g><title>parse_crate (10,629,988 samples, 3.21%)</title><rect x="96.3363%" y="197" width="3.2087%" height="15" fill="rgb(241,108,4)"/><text x="96.5863%" y="207.50">par..</text></g><g><title>self_profile_alloc_query_strings (850,889 samples, 0.26%)</title><rect x="99.6022%" y="197" width="0.2568%" height="15" fill="rgb(247,173,49)"/><text x="99.8522%" y="207.50"></text></g><g><title>all (331,285,600 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (331,285,600 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (356,234 samples, 0.11%)</title><rect x="99.8925%" y="197" width="0.1075%" height="15" fill="rgb(245,172,44)"/><text x="100.1425%" y="207.50"></text></g></svg></svg>