<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (231,504 samples, 0.12%)</title><rect x="13.6344%" y="165" width="0.1156%" height="15" fill="rgb(227,0,7)"/><text x="13.8844%" y="175.50"></text></g><g><title>param_env (467,322 samples, 0.23%)</title><rect x="15.3990%" y="133" width="0.2333%" height="15" fill="rgb(217,0,24)"/><text x="15.6490%" y="143.50"></text></g><g><title>item_attrs (554,735 samples, 0.28%)</title><rect x="16.1855%" y="101" width="0.2769%" height="15" fill="rgb(221,193,54)"/><text x="16.4355%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (537,785 samples, 0.27%)</title><rect x="16.1939%" y="85" width="0.2685%" height="15" fill="rgb(248,212,6)"/><text x="16.4439%" y="95.50"></text></g><g><title>codegen_fn_attrs (740,686 samples, 0.37%)</title><rect x="16.1079%" y="117" width="0.3698%" height="15" fill="rgb(208,68,35)"/><text x="16.3579%" y="127.50"></text></g><g><title>adt_drop_tys (440,234 samples, 0.22%)</title><rect x="19.5346%" y="85" width="0.2198%" height="15" fill="rgb(232,128,0)"/><text x="19.7846%" y="95.50"></text></g><g><title>is_copy_raw (1,204,015 samples, 0.60%)</title><rect x="19.7544%" y="85" width="0.6011%" height="15" fill="rgb(207,160,47)"/><text x="20.0044%" y="95.50"></text></g><g><title>evaluate_obligation (763,048 samples, 0.38%)</title><rect x="19.9745%" y="69" width="0.3809%" height="15" fill="rgb(228,23,34)"/><text x="20.2245%" y="79.50"></text></g><g><title>needs_drop_raw (1,881,182 samples, 0.94%)</title><rect x="19.4369%" y="101" width="0.9391%" height="15" fill="rgb(218,30,26)"/><text x="19.6869%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,045,084 samples, 0.52%)</title><rect x="20.5641%" y="85" width="0.5217%" height="15" fill="rgb(220,122,19)"/><text x="20.8141%" y="95.50"></text></g><g><title>impl_parent (211,927 samples, 0.11%)</title><rect x="21.2915%" y="69" width="0.1058%" height="15" fill="rgb(250,228,42)"/><text x="21.5415%" y="79.50"></text></g><g><title>specialization_graph_of (1,052,073 samples, 0.53%)</title><rect x="21.1241%" y="85" width="0.5252%" height="15" fill="rgb(240,193,28)"/><text x="21.3741%" y="95.50"></text></g><g><title>impl_trait_ref (504,733 samples, 0.25%)</title><rect x="21.3973%" y="69" width="0.2520%" height="15" fill="rgb(216,20,37)"/><text x="21.6473%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (437,572 samples, 0.22%)</title><rect x="21.4309%" y="53" width="0.2185%" height="15" fill="rgb(206,188,39)"/><text x="21.6809%" y="63.50"></text></g><g><title>resolve_instance (2,657,770 samples, 1.33%)</title><rect x="20.3760%" y="101" width="1.3268%" height="15" fill="rgb(217,207,13)"/><text x="20.6260%" y="111.50"></text></g><g><title>thir_body (2,143,714 samples, 1.07%)</title><rect x="21.7311%" y="101" width="1.0702%" height="15" fill="rgb(231,73,38)"/><text x="21.9811%" y="111.50"></text></g><g><title>mir_const (16,438,263 samples, 8.21%)</title><rect x="14.6242%" y="149" width="8.2065%" height="15" fill="rgb(225,20,46)"/><text x="14.8742%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (14,419,088 samples, 7.20%)</title><rect x="15.6323%" y="133" width="7.1985%" height="15" fill="rgb(210,31,41)"/><text x="15.8823%" y="143.50">unsafety_c..</text></g><g><title>mir_built (12,722,065 samples, 6.35%)</title><rect x="16.4795%" y="117" width="6.3513%" height="15" fill="rgb(221,200,47)"/><text x="16.7295%" y="127.50">mir_built</text></g><g><title>mir_promoted (18,171,180 samples, 9.07%)</title><rect x="13.7957%" y="165" width="9.0716%" height="15" fill="rgb(226,26,5)"/><text x="14.0457%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,033,641 samples, 0.52%)</title><rect x="22.8701%" y="165" width="0.5160%" height="15" fill="rgb(249,33,26)"/><text x="23.1201%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,425,542 samples, 0.71%)</title><rect x="23.3861%" y="165" width="0.7117%" height="15" fill="rgb(235,183,28)"/><text x="23.6361%" y="175.50"></text></g><g><title>normalize_projection_ty (947,506 samples, 0.47%)</title><rect x="23.6248%" y="149" width="0.4730%" height="15" fill="rgb(221,5,38)"/><text x="23.8748%" y="159.50"></text></g><g><title>type_op_normalize_predicate (784,269 samples, 0.39%)</title><rect x="24.0978%" y="165" width="0.3915%" height="15" fill="rgb(247,18,42)"/><text x="24.3478%" y="175.50"></text></g><g><title>normalize_projection_ty (351,276 samples, 0.18%)</title><rect x="24.3140%" y="149" width="0.1754%" height="15" fill="rgb(241,131,45)"/><text x="24.5640%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,448,471 samples, 2.22%)</title><rect x="24.5157%" y="165" width="2.2208%" height="15" fill="rgb(249,31,29)"/><text x="24.7657%" y="175.50">t..</text></g><g><title>evaluate_obligation (307,682 samples, 0.15%)</title><rect x="26.5829%" y="149" width="0.1536%" height="15" fill="rgb(225,111,53)"/><text x="26.8329%" y="159.50"></text></g><g><title>MIR_borrow_checking (52,417,814 samples, 26.17%)</title><rect x="0.5747%" y="197" width="26.1687%" height="15" fill="rgb(238,160,17)"/><text x="0.8247%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (52,226,514 samples, 26.07%)</title><rect x="0.6702%" y="181" width="26.0732%" height="15" fill="rgb(214,148,48)"/><text x="0.9202%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (226,662 samples, 0.11%)</title><rect x="26.7697%" y="197" width="0.1132%" height="15" fill="rgb(232,36,49)"/><text x="27.0197%" y="207.50"></text></g><g><title>should_inherit_track_caller (217,651 samples, 0.11%)</title><rect x="27.1592%" y="149" width="0.1087%" height="15" fill="rgb(209,103,24)"/><text x="27.4092%" y="159.50"></text></g><g><title>codegen_fn_attrs (417,083 samples, 0.21%)</title><rect x="27.0674%" y="165" width="0.2082%" height="15" fill="rgb(229,88,8)"/><text x="27.3174%" y="175.50"></text></g><g><title>check_mod_attrs (769,018 samples, 0.38%)</title><rect x="26.8917%" y="181" width="0.3839%" height="15" fill="rgb(213,181,19)"/><text x="27.1417%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (437,915 samples, 0.22%)</title><rect x="27.4055%" y="181" width="0.2186%" height="15" fill="rgb(254,191,54)"/><text x="27.6555%" y="191.50"></text></g><g><title>misc_checking_1 (1,534,587 samples, 0.77%)</title><rect x="26.8832%" y="197" width="0.7661%" height="15" fill="rgb(241,83,37)"/><text x="27.1332%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (773,519 samples, 0.39%)</title><rect x="27.6501%" y="181" width="0.3862%" height="15" fill="rgb(233,36,39)"/><text x="27.9001%" y="191.50"></text></g><g><title>check_mod_liveness (620,307 samples, 0.31%)</title><rect x="27.7266%" y="165" width="0.3097%" height="15" fill="rgb(226,3,54)"/><text x="27.9766%" y="175.50"></text></g><g><title>misc_checking_2 (2,114,164 samples, 1.06%)</title><rect x="27.6493%" y="197" width="1.0555%" height="15" fill="rgb(245,192,40)"/><text x="27.8993%" y="207.50"></text></g><g><title>match_checking (1,338,955 samples, 0.67%)</title><rect x="28.0363%" y="181" width="0.6685%" height="15" fill="rgb(238,167,29)"/><text x="28.2863%" y="191.50"></text></g><g><title>check_match (1,293,905 samples, 0.65%)</title><rect x="28.0588%" y="165" width="0.6460%" height="15" fill="rgb(232,182,51)"/><text x="28.3088%" y="175.50"></text></g><g><title>check_private_in_public (277,253 samples, 0.14%)</title><rect x="28.7100%" y="181" width="0.1384%" height="15" fill="rgb(231,60,39)"/><text x="28.9600%" y="191.50"></text></g><g><title>death_checking (572,376 samples, 0.29%)</title><rect x="28.8484%" y="181" width="0.2857%" height="15" fill="rgb(208,69,12)"/><text x="29.0984%" y="191.50"></text></g><g><title>crate_lints (2,364,166 samples, 1.18%)</title><rect x="29.1349%" y="165" width="1.1803%" height="15" fill="rgb(235,93,37)"/><text x="29.3849%" y="175.50"></text></g><g><title>type_of (1,088,553 samples, 0.54%)</title><rect x="29.7717%" y="149" width="0.5434%" height="15" fill="rgb(213,116,39)"/><text x="30.0217%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (855,587 samples, 0.43%)</title><rect x="29.8880%" y="133" width="0.4271%" height="15" fill="rgb(222,207,29)"/><text x="30.1380%" y="143.50"></text></g><g><title>lint_checking (3,265,576 samples, 1.63%)</title><rect x="29.1342%" y="181" width="1.6303%" height="15" fill="rgb(206,96,30)"/><text x="29.3842%" y="191.50"></text></g><g><title>module_lints (899,990 samples, 0.45%)</title><rect x="30.3152%" y="165" width="0.4493%" height="15" fill="rgb(218,138,4)"/><text x="30.5652%" y="175.50"></text></g><g><title>lint_mod (896,910 samples, 0.45%)</title><rect x="30.3167%" y="149" width="0.4478%" height="15" fill="rgb(250,191,14)"/><text x="30.5667%" y="159.50"></text></g><g><title>privacy_access_levels (372,904 samples, 0.19%)</title><rect x="30.7645%" y="181" width="0.1862%" height="15" fill="rgb(239,60,40)"/><text x="31.0145%" y="191.50"></text></g><g><title>privacy_checking_modules (1,528,427 samples, 0.76%)</title><rect x="30.9506%" y="181" width="0.7630%" height="15" fill="rgb(206,27,48)"/><text x="31.2006%" y="191.50"></text></g><g><title>check_mod_privacy (1,526,557 samples, 0.76%)</title><rect x="30.9516%" y="165" width="0.7621%" height="15" fill="rgb(225,35,8)"/><text x="31.2016%" y="175.50"></text></g><g><title>misc_checking_3 (6,051,797 samples, 3.02%)</title><rect x="28.7048%" y="197" width="3.0213%" height="15" fill="rgb(250,213,24)"/><text x="28.9548%" y="207.50">mis..</text></g><g><title>impl_trait_ref (207,673 samples, 0.10%)</title><rect x="31.8591%" y="101" width="0.1037%" height="15" fill="rgb(247,123,22)"/><text x="32.1091%" y="111.50"></text></g><g><title>adt_destructor (361,104 samples, 0.18%)</title><rect x="31.7946%" y="149" width="0.1803%" height="15" fill="rgb(231,138,38)"/><text x="32.0446%" y="159.50"></text></g><g><title>coherent_trait (357,054 samples, 0.18%)</title><rect x="31.7966%" y="133" width="0.1783%" height="15" fill="rgb(231,145,46)"/><text x="32.0466%" y="143.50"></text></g><g><title>specialization_graph_of (356,074 samples, 0.18%)</title><rect x="31.7971%" y="117" width="0.1778%" height="15" fill="rgb(251,118,11)"/><text x="32.0471%" y="127.50"></text></g><g><title>impl_parent (2,401,841 samples, 1.20%)</title><rect x="34.0688%" y="133" width="1.1991%" height="15" fill="rgb(217,147,25)"/><text x="34.3188%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,403,692 samples, 0.70%)</title><rect x="34.5671%" y="117" width="0.7008%" height="15" fill="rgb(247,81,37)"/><text x="34.8171%" y="127.50"></text></g><g><title>impl_trait_ref (4,979,431 samples, 2.49%)</title><rect x="35.2679%" y="133" width="2.4859%" height="15" fill="rgb(209,12,38)"/><text x="35.5179%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,988,627 samples, 1.99%)</title><rect x="35.7626%" y="117" width="1.9913%" height="15" fill="rgb(227,1,9)"/><text x="36.0126%" y="127.50">m..</text></g><g><title>coherent_trait (12,769,423 samples, 6.37%)</title><rect x="31.7741%" y="165" width="6.3749%" height="15" fill="rgb(248,47,43)"/><text x="32.0241%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (12,288,678 samples, 6.13%)</title><rect x="32.0141%" y="149" width="6.1349%" height="15" fill="rgb(221,10,30)"/><text x="32.2641%" y="159.50">speciali..</text></g><g><title>trait_impls_of (789,869 samples, 0.39%)</title><rect x="37.7547%" y="133" width="0.3943%" height="15" fill="rgb(210,229,1)"/><text x="38.0047%" y="143.50"></text></g><g><title>implementations_of_trait (215,331 samples, 0.11%)</title><rect x="38.0416%" y="117" width="0.1075%" height="15" fill="rgb(222,148,37)"/><text x="38.2916%" y="127.50"></text></g><g><title>coherence_checking (12,841,813 samples, 6.41%)</title><rect x="31.7638%" y="181" width="6.4111%" height="15" fill="rgb(234,67,33)"/><text x="32.0138%" y="191.50">coherenc..</text></g><g><title>associated_item (260,632 samples, 0.13%)</title><rect x="50.0814%" y="117" width="0.1301%" height="15" fill="rgb(247,98,35)"/><text x="50.3314%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (208,492 samples, 0.10%)</title><rect x="50.1074%" y="101" width="0.1041%" height="15" fill="rgb(247,138,52)"/><text x="50.3574%" y="111.50"></text></g><g><title>associated_items (350,495 samples, 0.17%)</title><rect x="50.0430%" y="133" width="0.1750%" height="15" fill="rgb(213,79,30)"/><text x="50.2930%" y="143.50"></text></g><g><title>dropck_outlives (295,174 samples, 0.15%)</title><rect x="50.2319%" y="133" width="0.1474%" height="15" fill="rgb(246,177,23)"/><text x="50.4819%" y="143.50"></text></g><g><title>evaluate_obligation (1,466,407 samples, 0.73%)</title><rect x="50.3792%" y="133" width="0.7321%" height="15" fill="rgb(230,62,27)"/><text x="50.6292%" y="143.50"></text></g><g><title>method_autoderef_steps (310,263 samples, 0.15%)</title><rect x="51.2892%" y="133" width="0.1549%" height="15" fill="rgb(216,154,8)"/><text x="51.5392%" y="143.50"></text></g><g><title>adt_sized_constraint (232,913 samples, 0.12%)</title><rect x="62.9951%" y="117" width="0.1163%" height="15" fill="rgb(244,35,45)"/><text x="63.2451%" y="127.50"></text></g><g><title>associated_item (280,544 samples, 0.14%)</title><rect x="63.1776%" y="101" width="0.1401%" height="15" fill="rgb(251,115,12)"/><text x="63.4276%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (225,133 samples, 0.11%)</title><rect x="63.2053%" y="85" width="0.1124%" height="15" fill="rgb(240,54,50)"/><text x="63.4553%" y="95.50"></text></g><g><title>associated_items (442,306 samples, 0.22%)</title><rect x="63.1139%" y="117" width="0.2208%" height="15" fill="rgb(233,84,52)"/><text x="63.3639%" y="127.50"></text></g><g><title>adt_def (423,155 samples, 0.21%)</title><rect x="63.5908%" y="85" width="0.2113%" height="15" fill="rgb(207,117,47)"/><text x="63.8408%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (421,495 samples, 0.21%)</title><rect x="63.5916%" y="69" width="0.2104%" height="15" fill="rgb(249,43,39)"/><text x="63.8416%" y="79.50"></text></g><g><title>item_attrs (397,145 samples, 0.20%)</title><rect x="63.6038%" y="53" width="0.1983%" height="15" fill="rgb(209,38,44)"/><text x="63.8538%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (395,265 samples, 0.20%)</title><rect x="63.6047%" y="37" width="0.1973%" height="15" fill="rgb(236,212,23)"/><text x="63.8547%" y="47.50"></text></g><g><title>adt_dtorck_constraint (659,447 samples, 0.33%)</title><rect x="63.5531%" y="101" width="0.3292%" height="15" fill="rgb(242,79,21)"/><text x="63.8031%" y="111.50"></text></g><g><title>dropck_outlives (1,101,118 samples, 0.55%)</title><rect x="63.3897%" y="117" width="0.5497%" height="15" fill="rgb(211,96,35)"/><text x="63.6397%" y="127.50"></text></g><g><title>generics_of (1,270,283 samples, 0.63%)</title><rect x="66.6180%" y="101" width="0.6342%" height="15" fill="rgb(253,215,40)"/><text x="66.8680%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,027,324 samples, 0.51%)</title><rect x="66.7393%" y="85" width="0.5129%" height="15" fill="rgb(211,81,21)"/><text x="66.9893%" y="95.50"></text></g><g><title>impl_trait_ref (725,975 samples, 0.36%)</title><rect x="67.3019%" y="101" width="0.3624%" height="15" fill="rgb(208,190,38)"/><text x="67.5519%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (600,985 samples, 0.30%)</title><rect x="67.3643%" y="85" width="0.3000%" height="15" fill="rgb(235,213,38)"/><text x="67.6143%" y="95.50"></text></g><g><title>predicates_of (484,617 samples, 0.24%)</title><rect x="67.6810%" y="101" width="0.2419%" height="15" fill="rgb(237,122,38)"/><text x="67.9310%" y="111.50"></text></g><g><title>predicates_defined_on (295,733 samples, 0.15%)</title><rect x="67.7753%" y="85" width="0.1476%" height="15" fill="rgb(244,218,35)"/><text x="68.0253%" y="95.50"></text></g><g><title>specializes (707,639 samples, 0.35%)</title><rect x="67.9229%" y="101" width="0.3533%" height="15" fill="rgb(240,68,47)"/><text x="68.1729%" y="111.50"></text></g><g><title>param_env (414,485 samples, 0.21%)</title><rect x="68.0693%" y="85" width="0.2069%" height="15" fill="rgb(210,16,53)"/><text x="68.3193%" y="95.50"></text></g><g><title>trait_impls_of (701,076 samples, 0.35%)</title><rect x="68.2842%" y="101" width="0.3500%" height="15" fill="rgb(235,124,12)"/><text x="68.5342%" y="111.50"></text></g><g><title>implementations_of_trait (410,523 samples, 0.20%)</title><rect x="68.4293%" y="85" width="0.2049%" height="15" fill="rgb(224,169,11)"/><text x="68.6793%" y="95.50"></text></g><g><title>evaluate_obligation (9,432,692 samples, 4.71%)</title><rect x="63.9399%" y="117" width="4.7091%" height="15" fill="rgb(250,166,2)"/><text x="64.1899%" y="127.50">evalu..</text></g><g><title>impl_item_implementor_ids (309,100 samples, 0.15%)</title><rect x="68.8417%" y="117" width="0.1543%" height="15" fill="rgb(242,216,29)"/><text x="69.0917%" y="127.50"></text></g><g><title>associated_items (268,430 samples, 0.13%)</title><rect x="68.8620%" y="101" width="0.1340%" height="15" fill="rgb(230,116,27)"/><text x="69.1120%" y="111.50"></text></g><g><title>is_copy_raw (264,376 samples, 0.13%)</title><rect x="69.1082%" y="117" width="0.1320%" height="15" fill="rgb(228,99,48)"/><text x="69.3582%" y="127.50"></text></g><g><title>evaluate_obligation (201,403 samples, 0.10%)</title><rect x="69.1396%" y="101" width="0.1005%" height="15" fill="rgb(253,11,6)"/><text x="69.3896%" y="111.50"></text></g><g><title>method_autoderef_steps (916,402 samples, 0.46%)</title><rect x="69.3483%" y="117" width="0.4575%" height="15" fill="rgb(247,143,39)"/><text x="69.5983%" y="127.50"></text></g><g><title>evaluate_obligation (426,996 samples, 0.21%)</title><rect x="69.5926%" y="101" width="0.2132%" height="15" fill="rgb(236,97,10)"/><text x="69.8426%" y="111.50"></text></g><g><title>predicates_of (514,575 samples, 0.26%)</title><rect x="69.8230%" y="117" width="0.2569%" height="15" fill="rgb(233,208,19)"/><text x="70.0730%" y="127.50"></text></g><g><title>predicates_defined_on (371,104 samples, 0.19%)</title><rect x="69.8946%" y="101" width="0.1853%" height="15" fill="rgb(216,164,2)"/><text x="70.1446%" y="111.50"></text></g><g><title>typeck (37,198,126 samples, 18.57%)</title><rect x="51.6483%" y="133" width="18.5705%" height="15" fill="rgb(220,129,5)"/><text x="51.8983%" y="143.50">typeck</text></g><g><title>item_bodies_checking (64,193,075 samples, 32.05%)</title><rect x="38.1921%" y="181" width="32.0473%" height="15" fill="rgb(242,17,10)"/><text x="38.4421%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (64,188,485 samples, 32.04%)</title><rect x="38.1944%" y="165" width="32.0450%" height="15" fill="rgb(242,107,0)"/><text x="38.4444%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (64,076,894 samples, 31.99%)</title><rect x="38.2501%" y="149" width="31.9893%" height="15" fill="rgb(251,28,31)"/><text x="38.5001%" y="159.50">typeck</text></g><g><title>item_types_checking (921,270 samples, 0.46%)</title><rect x="70.2394%" y="181" width="0.4599%" height="15" fill="rgb(233,223,10)"/><text x="70.4894%" y="191.50"></text></g><g><title>check_mod_item_types (919,100 samples, 0.46%)</title><rect x="70.2405%" y="165" width="0.4588%" height="15" fill="rgb(215,21,27)"/><text x="70.4905%" y="175.50"></text></g><g><title>late_bound_vars_map (220,042 samples, 0.11%)</title><rect x="70.9955%" y="133" width="0.1099%" height="15" fill="rgb(232,23,21)"/><text x="71.2455%" y="143.50"></text></g><g><title>resolve_lifetimes (204,122 samples, 0.10%)</title><rect x="71.0034%" y="117" width="0.1019%" height="15" fill="rgb(244,5,23)"/><text x="71.2534%" y="127.50"></text></g><g><title>fn_sig (508,387 samples, 0.25%)</title><rect x="70.8782%" y="149" width="0.2538%" height="15" fill="rgb(226,81,46)"/><text x="71.1282%" y="159.50"></text></g><g><title>named_region_map (636,714 samples, 0.32%)</title><rect x="71.2012%" y="133" width="0.3179%" height="15" fill="rgb(247,70,30)"/><text x="71.4512%" y="143.50"></text></g><g><title>resolve_lifetimes (600,754 samples, 0.30%)</title><rect x="71.2192%" y="117" width="0.2999%" height="15" fill="rgb(212,68,19)"/><text x="71.4692%" y="127.50"></text></g><g><title>lint_levels (235,522 samples, 0.12%)</title><rect x="71.4015%" y="101" width="0.1176%" height="15" fill="rgb(240,187,13)"/><text x="71.6515%" y="111.50"></text></g><g><title>generics_of (797,116 samples, 0.40%)</title><rect x="71.1320%" y="149" width="0.3979%" height="15" fill="rgb(223,113,26)"/><text x="71.3820%" y="159.50"></text></g><g><title>explicit_predicates_of (390,764 samples, 0.20%)</title><rect x="71.6493%" y="117" width="0.1951%" height="15" fill="rgb(206,192,2)"/><text x="71.8993%" y="127.50"></text></g><g><title>predicates_of (771,949 samples, 0.39%)</title><rect x="71.5632%" y="149" width="0.3854%" height="15" fill="rgb(241,108,4)"/><text x="71.8132%" y="159.50"></text></g><g><title>predicates_defined_on (703,989 samples, 0.35%)</title><rect x="71.5971%" y="133" width="0.3515%" height="15" fill="rgb(247,173,49)"/><text x="71.8471%" y="143.50"></text></g><g><title>inferred_outlives_of (208,572 samples, 0.10%)</title><rect x="71.8444%" y="117" width="0.1041%" height="15" fill="rgb(224,114,35)"/><text x="72.0944%" y="127.50"></text></g><g><title>type_collecting (2,618,860 samples, 1.31%)</title><rect x="70.7001%" y="181" width="1.3074%" height="15" fill="rgb(245,159,27)"/><text x="70.9501%" y="191.50"></text></g><g><title>collect_mod_item_types (2,611,380 samples, 1.30%)</title><rect x="70.7039%" y="165" width="1.3037%" height="15" fill="rgb(245,172,44)"/><text x="70.9539%" y="175.50"></text></g><g><title>evaluate_obligation (424,283 samples, 0.21%)</title><rect x="73.2486%" y="149" width="0.2118%" height="15" fill="rgb(236,23,11)"/><text x="73.4986%" y="159.50"></text></g><g><title>predicates_of (283,684 samples, 0.14%)</title><rect x="73.7965%" y="133" width="0.1416%" height="15" fill="rgb(205,117,38)"/><text x="74.0465%" y="143.50"></text></g><g><title>predicates_defined_on (218,103 samples, 0.11%)</title><rect x="73.8292%" y="117" width="0.1089%" height="15" fill="rgb(237,72,25)"/><text x="74.0792%" y="127.50"></text></g><g><title>object_safety_violations (762,899 samples, 0.38%)</title><rect x="73.5649%" y="149" width="0.3809%" height="15" fill="rgb(244,70,9)"/><text x="73.8149%" y="159.50"></text></g><g><title>param_env (412,995 samples, 0.21%)</title><rect x="73.9458%" y="149" width="0.2062%" height="15" fill="rgb(217,125,39)"/><text x="74.1958%" y="159.50"></text></g><g><title>region_scope_tree (670,839 samples, 0.33%)</title><rect x="74.1942%" y="149" width="0.3349%" height="15" fill="rgb(235,36,10)"/><text x="74.4442%" y="159.50"></text></g><g><title>check_impl_item_well_formed (4,832,933 samples, 2.41%)</title><rect x="72.1338%" y="165" width="2.4128%" height="15" fill="rgb(251,123,47)"/><text x="72.3838%" y="175.50">ch..</text></g><g><title>evaluate_obligation (630,906 samples, 0.31%)</title><rect x="75.1115%" y="149" width="0.3150%" height="15" fill="rgb(221,13,13)"/><text x="75.3615%" y="159.50"></text></g><g><title>param_env (259,340 samples, 0.13%)</title><rect x="75.4684%" y="149" width="0.1295%" height="15" fill="rgb(238,131,9)"/><text x="75.7184%" y="159.50"></text></g><g><title>analysis (150,976,152 samples, 75.37%)</title><rect x="0.3497%" y="213" width="75.3722%" height="15" fill="rgb(211,50,8)"/><text x="0.5997%" y="223.50">analysis</text></g><g><title>type_check_crate (88,127,072 samples, 44.00%)</title><rect x="31.7260%" y="197" width="43.9959%" height="15" fill="rgb(245,182,24)"/><text x="31.9760%" y="207.50">type_check_crate</text></g><g><title>wf_checking (7,433,013 samples, 3.71%)</title><rect x="72.0111%" y="181" width="3.7108%" height="15" fill="rgb(242,14,37)"/><text x="72.2611%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (2,354,266 samples, 1.18%)</title><rect x="74.5466%" y="165" width="1.1753%" height="15" fill="rgb(246,228,12)"/><text x="74.7966%" y="175.50"></text></g><g><title>codegen_crate (415,234 samples, 0.21%)</title><rect x="75.7273%" y="213" width="0.2073%" height="15" fill="rgb(213,55,15)"/><text x="75.9773%" y="223.50"></text></g><g><title>AST_validation (333,653 samples, 0.17%)</title><rect x="76.0352%" y="197" width="0.1666%" height="15" fill="rgb(209,9,3)"/><text x="76.2852%" y="207.50"></text></g><g><title>metadata_load_macro (477,303 samples, 0.24%)</title><rect x="85.6727%" y="165" width="0.2383%" height="15" fill="rgb(230,59,30)"/><text x="85.9227%" y="175.50"></text></g><g><title>macro_expand_crate (21,650,222 samples, 10.81%)</title><rect x="76.2960%" y="197" width="10.8085%" height="15" fill="rgb(209,121,21)"/><text x="76.5460%" y="207.50">macro_expand_cra..</text></g><g><title>expand_crate (21,627,541 samples, 10.80%)</title><rect x="76.3073%" y="181" width="10.7972%" height="15" fill="rgb(220,109,13)"/><text x="76.5573%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (2,390,546 samples, 1.19%)</title><rect x="85.9110%" y="165" width="1.1934%" height="15" fill="rgb(232,18,1)"/><text x="86.1610%" y="175.50"></text></g><g><title>metadata_register_crate (884,880 samples, 0.44%)</title><rect x="86.6627%" y="149" width="0.4418%" height="15" fill="rgb(215,41,42)"/><text x="86.9127%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (403,095 samples, 0.20%)</title><rect x="87.1070%" y="197" width="0.2012%" height="15" fill="rgb(224,123,36)"/><text x="87.3570%" y="207.50"></text></g><g><title>finalize_macro_resolutions (444,365 samples, 0.22%)</title><rect x="87.3355%" y="181" width="0.2218%" height="15" fill="rgb(240,125,3)"/><text x="87.5855%" y="191.50"></text></g><g><title>late_resolve_crate (4,793,884 samples, 2.39%)</title><rect x="87.5574%" y="181" width="2.3933%" height="15" fill="rgb(205,98,50)"/><text x="87.8074%" y="191.50">la..</text></g><g><title>configure_and_expand (28,349,347 samples, 14.15%)</title><rect x="75.9346%" y="213" width="14.1529%" height="15" fill="rgb(205,185,37)"/><text x="76.1846%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (5,567,123 samples, 2.78%)</title><rect x="87.3082%" y="197" width="2.7793%" height="15" fill="rgb(238,207,15)"/><text x="87.5582%" y="207.50">re..</text></g><g><title>drop_ast (268,983 samples, 0.13%)</title><rect x="90.0875%" y="213" width="0.1343%" height="15" fill="rgb(213,199,42)"/><text x="90.3375%" y="223.50"></text></g><g><title>early_lint_checks (614,277 samples, 0.31%)</title><rect x="90.2296%" y="213" width="0.3067%" height="15" fill="rgb(235,201,11)"/><text x="90.4796%" y="223.50"></text></g><g><title>free_global_ctxt (4,427,999 samples, 2.21%)</title><rect x="90.5363%" y="213" width="2.2106%" height="15" fill="rgb(207,46,11)"/><text x="90.7863%" y="223.50">f..</text></g><g><title>generate_crate_metadata (1,335,525 samples, 0.67%)</title><rect x="92.7469%" y="213" width="0.6667%" height="15" fill="rgb(241,35,35)"/><text x="92.9969%" y="223.50"></text></g><g><title>hir_lowering (4,237,607 samples, 2.12%)</title><rect x="93.4136%" y="213" width="2.1156%" height="15" fill="rgb(243,32,47)"/><text x="93.6636%" y="223.50">h..</text></g><g><title>parse_crate (7,282,851 samples, 3.64%)</title><rect x="95.5579%" y="213" width="3.6358%" height="15" fill="rgb(247,202,23)"/><text x="95.8079%" y="223.50">pars..</text></g><g><title>self_profile_alloc_query_strings (991,692 samples, 0.50%)</title><rect x="99.2912%" y="213" width="0.4951%" height="15" fill="rgb(219,102,11)"/><text x="99.5412%" y="223.50"></text></g><g><title>all (200,307,402 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (200,307,402 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (341,284 samples, 0.17%)</title><rect x="99.8296%" y="213" width="0.1704%" height="15" fill="rgb(216,99,12)"/><text x="100.0796%" y="223.50"></text></g></svg></svg>