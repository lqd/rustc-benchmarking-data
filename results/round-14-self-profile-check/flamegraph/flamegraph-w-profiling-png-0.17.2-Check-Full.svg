<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,338,465 samples, 0.17%)</title><rect x="17.6875%" y="133" width="0.1685%" height="15" fill="rgb(227,0,7)"/><text x="17.9375%" y="143.50"></text></g><g><title>item_attrs (918,649 samples, 0.12%)</title><rect x="18.4651%" y="101" width="0.1157%" height="15" fill="rgb(217,0,24)"/><text x="18.7151%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (885,179 samples, 0.11%)</title><rect x="18.4693%" y="85" width="0.1115%" height="15" fill="rgb(221,193,54)"/><text x="18.7193%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,302,271 samples, 0.16%)</title><rect x="18.4244%" y="117" width="0.1640%" height="15" fill="rgb(248,212,6)"/><text x="18.6744%" y="127.50"></text></g><g><title>adt_drop_tys (903,559 samples, 0.11%)</title><rect x="22.3920%" y="85" width="0.1138%" height="15" fill="rgb(208,68,35)"/><text x="22.6420%" y="95.50"></text></g><g><title>is_copy_raw (5,279,955 samples, 0.66%)</title><rect x="22.5058%" y="85" width="0.6648%" height="15" fill="rgb(232,128,0)"/><text x="22.7558%" y="95.50"></text></g><g><title>evaluate_obligation (4,408,736 samples, 0.56%)</title><rect x="22.6155%" y="69" width="0.5551%" height="15" fill="rgb(207,160,47)"/><text x="22.8655%" y="79.50"></text></g><g><title>needs_drop_raw (6,988,967 samples, 0.88%)</title><rect x="22.2944%" y="101" width="0.8800%" height="15" fill="rgb(228,23,34)"/><text x="22.5444%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,388,097 samples, 0.17%)</title><rect x="23.3171%" y="85" width="0.1748%" height="15" fill="rgb(218,30,26)"/><text x="23.5671%" y="95.50"></text></g><g><title>resolve_instance (3,897,143 samples, 0.49%)</title><rect x="23.1866%" y="101" width="0.4907%" height="15" fill="rgb(220,122,19)"/><text x="23.4366%" y="111.50"></text></g><g><title>thir_body (11,776,067 samples, 1.48%)</title><rect x="23.7008%" y="101" width="1.4828%" height="15" fill="rgb(250,228,42)"/><text x="23.9508%" y="111.50"></text></g><g><title>mir_const (66,972,457 samples, 8.43%)</title><rect x="16.7679%" y="149" width="8.4330%" height="15" fill="rgb(240,193,28)"/><text x="17.0179%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (58,330,774 samples, 7.34%)</title><rect x="17.8560%" y="133" width="7.3449%" height="15" fill="rgb(216,20,37)"/><text x="18.1060%" y="143.50">unsafety_c..</text></g><g><title>mir_built (52,514,643 samples, 6.61%)</title><rect x="18.5884%" y="117" width="6.6125%" height="15" fill="rgb(206,188,39)"/><text x="18.8384%" y="127.50">mir_built</text></g><g><title>mir_const (1,293,508 samples, 0.16%)</title><rect x="25.2926%" y="133" width="0.1629%" height="15" fill="rgb(217,207,13)"/><text x="25.5426%" y="143.50"></text></g><g><title>unsafety_check_result (994,796 samples, 0.13%)</title><rect x="25.3302%" y="117" width="0.1253%" height="15" fill="rgb(231,73,38)"/><text x="25.5802%" y="127.50"></text></g><g><title>mir_built (873,443 samples, 0.11%)</title><rect x="25.3455%" y="101" width="0.1100%" height="15" fill="rgb(225,20,46)"/><text x="25.5955%" y="111.50"></text></g><g><title>mir_const_qualif (2,046,977 samples, 0.26%)</title><rect x="25.2009%" y="149" width="0.2578%" height="15" fill="rgb(210,31,41)"/><text x="25.4509%" y="159.50"></text></g><g><title>mir_promoted (76,586,253 samples, 9.64%)</title><rect x="15.8156%" y="165" width="9.6436%" height="15" fill="rgb(221,200,47)"/><text x="16.0656%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,912,996 samples, 0.24%)</title><rect x="25.4599%" y="165" width="0.2409%" height="15" fill="rgb(226,26,5)"/><text x="25.7099%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (4,210,412 samples, 0.53%)</title><rect x="25.7008%" y="165" width="0.5302%" height="15" fill="rgb(249,33,26)"/><text x="25.9508%" y="175.50"></text></g><g><title>normalize_projection_ty (2,966,582 samples, 0.37%)</title><rect x="25.8574%" y="149" width="0.3735%" height="15" fill="rgb(235,183,28)"/><text x="26.1074%" y="159.50"></text></g><g><title>type_op_normalize_predicate (1,284,502 samples, 0.16%)</title><rect x="26.2309%" y="165" width="0.1617%" height="15" fill="rgb(221,5,38)"/><text x="26.4809%" y="175.50"></text></g><g><title>normalize_projection_ty (801,468 samples, 0.10%)</title><rect x="26.2917%" y="149" width="0.1009%" height="15" fill="rgb(247,18,42)"/><text x="26.5417%" y="159.50"></text></g><g><title>type_op_prove_predicate (13,312,608 samples, 1.68%)</title><rect x="26.4065%" y="165" width="1.6763%" height="15" fill="rgb(241,131,45)"/><text x="26.6565%" y="175.50"></text></g><g><title>evaluate_obligation (1,007,311 samples, 0.13%)</title><rect x="27.9560%" y="149" width="0.1268%" height="15" fill="rgb(249,31,29)"/><text x="28.2060%" y="159.50"></text></g><g><title>MIR_borrow_checking (219,012,111 samples, 27.58%)</title><rect x="0.5078%" y="197" width="27.5775%" height="15" fill="rgb(225,111,53)"/><text x="0.7578%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (218,004,235 samples, 27.45%)</title><rect x="0.6347%" y="181" width="27.4506%" height="15" fill="rgb(238,160,17)"/><text x="0.8847%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,104,343 samples, 0.14%)</title><rect x="28.0854%" y="197" width="0.1391%" height="15" fill="rgb(214,148,48)"/><text x="28.3354%" y="207.50"></text></g><g><title>hir_module_items (1,422,015 samples, 0.18%)</title><rect x="28.2244%" y="197" width="0.1791%" height="15" fill="rgb(232,36,49)"/><text x="28.4744%" y="207.50"></text></g><g><title>should_inherit_track_caller (860,391 samples, 0.11%)</title><rect x="28.7176%" y="149" width="0.1083%" height="15" fill="rgb(209,103,24)"/><text x="28.9676%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,373,277 samples, 0.17%)</title><rect x="28.6566%" y="165" width="0.1729%" height="15" fill="rgb(229,88,8)"/><text x="28.9066%" y="175.50"></text></g><g><title>check_mod_attrs (3,341,478 samples, 0.42%)</title><rect x="28.4088%" y="181" width="0.4208%" height="15" fill="rgb(213,181,19)"/><text x="28.6588%" y="191.50"></text></g><g><title>check_mod_const_bodies (857,549 samples, 0.11%)</title><rect x="28.8296%" y="181" width="0.1080%" height="15" fill="rgb(254,191,54)"/><text x="29.0796%" y="191.50"></text></g><g><title>lint_levels (1,645,918 samples, 0.21%)</title><rect x="29.1339%" y="165" width="0.2073%" height="15" fill="rgb(241,83,37)"/><text x="29.3839%" y="175.50"></text></g><g><title>lookup_deprecation_entry (882,351 samples, 0.11%)</title><rect x="29.3411%" y="165" width="0.1111%" height="15" fill="rgb(233,36,39)"/><text x="29.5911%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (3,681,140 samples, 0.46%)</title><rect x="29.0153%" y="181" width="0.4635%" height="15" fill="rgb(226,3,54)"/><text x="29.2653%" y="191.50"></text></g><g><title>misc_checking_1 (8,784,859 samples, 1.11%)</title><rect x="28.4035%" y="197" width="1.1062%" height="15" fill="rgb(245,192,40)"/><text x="28.6535%" y="207.50"></text></g><g><title>check_mod_intrinsics (851,659 samples, 0.11%)</title><rect x="29.5126%" y="165" width="0.1072%" height="15" fill="rgb(238,167,29)"/><text x="29.7626%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,628,012 samples, 0.58%)</title><rect x="29.5101%" y="181" width="0.5827%" height="15" fill="rgb(232,182,51)"/><text x="29.7601%" y="191.50"></text></g><g><title>check_mod_liveness (3,756,593 samples, 0.47%)</title><rect x="29.6199%" y="165" width="0.4730%" height="15" fill="rgb(231,60,39)"/><text x="29.8699%" y="175.50"></text></g><g><title>type_uninhabited_from (837,460 samples, 0.11%)</title><rect x="29.9874%" y="149" width="0.1055%" height="15" fill="rgb(208,69,12)"/><text x="30.2374%" y="159.50"></text></g><g><title>mir_borrowck (856,850 samples, 0.11%)</title><rect x="31.0349%" y="69" width="0.1079%" height="15" fill="rgb(235,93,37)"/><text x="31.2849%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,650,140 samples, 0.21%)</title><rect x="30.9355%" y="149" width="0.2078%" height="15" fill="rgb(213,116,39)"/><text x="31.1855%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,638,070 samples, 0.21%)</title><rect x="30.9371%" y="133" width="0.2063%" height="15" fill="rgb(222,207,29)"/><text x="31.1871%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,611,849 samples, 0.20%)</title><rect x="30.9404%" y="117" width="0.2030%" height="15" fill="rgb(206,96,30)"/><text x="31.1904%" y="127.50"></text></g><g><title>mir_for_ctfe (1,314,496 samples, 0.17%)</title><rect x="30.9778%" y="101" width="0.1655%" height="15" fill="rgb(218,138,4)"/><text x="31.2278%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,196,483 samples, 0.15%)</title><rect x="30.9927%" y="85" width="0.1507%" height="15" fill="rgb(250,191,14)"/><text x="31.2427%" y="95.50"></text></g><g><title>misc_checking_2 (13,993,857 samples, 1.76%)</title><rect x="29.5097%" y="197" width="1.7621%" height="15" fill="rgb(239,60,40)"/><text x="29.7597%" y="207.50"></text></g><g><title>match_checking (9,362,565 samples, 1.18%)</title><rect x="30.0929%" y="181" width="1.1789%" height="15" fill="rgb(206,27,48)"/><text x="30.3429%" y="191.50"></text></g><g><title>check_match (9,044,633 samples, 1.14%)</title><rect x="30.1329%" y="165" width="1.1389%" height="15" fill="rgb(225,35,8)"/><text x="30.3829%" y="175.50"></text></g><g><title>check_private_in_public (1,547,067 samples, 0.19%)</title><rect x="31.2736%" y="181" width="0.1948%" height="15" fill="rgb(250,213,24)"/><text x="31.5236%" y="191.50"></text></g><g><title>death_checking (4,220,307 samples, 0.53%)</title><rect x="31.4684%" y="181" width="0.5314%" height="15" fill="rgb(247,123,22)"/><text x="31.7184%" y="191.50"></text></g><g><title>param_env (1,135,792 samples, 0.14%)</title><rect x="32.5847%" y="149" width="0.1430%" height="15" fill="rgb(231,138,38)"/><text x="32.8347%" y="159.50"></text></g><g><title>crate_lints (7,300,751 samples, 0.92%)</title><rect x="32.0002%" y="165" width="0.9193%" height="15" fill="rgb(231,145,46)"/><text x="32.2502%" y="175.50"></text></g><g><title>type_of (1,278,053 samples, 0.16%)</title><rect x="32.7586%" y="149" width="0.1609%" height="15" fill="rgb(251,118,11)"/><text x="33.0086%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,025,752 samples, 0.13%)</title><rect x="32.7903%" y="133" width="0.1292%" height="15" fill="rgb(217,147,25)"/><text x="33.0403%" y="143.50"></text></g><g><title>lint_checking (12,803,063 samples, 1.61%)</title><rect x="31.9998%" y="181" width="1.6121%" height="15" fill="rgb(247,81,37)"/><text x="32.2498%" y="191.50"></text></g><g><title>module_lints (5,499,052 samples, 0.69%)</title><rect x="32.9195%" y="165" width="0.6924%" height="15" fill="rgb(209,12,38)"/><text x="33.1695%" y="175.50"></text></g><g><title>lint_mod (5,482,752 samples, 0.69%)</title><rect x="32.9215%" y="149" width="0.6904%" height="15" fill="rgb(227,1,9)"/><text x="33.1715%" y="159.50"></text></g><g><title>privacy_access_levels (2,875,642 samples, 0.36%)</title><rect x="33.6119%" y="181" width="0.3621%" height="15" fill="rgb(248,47,43)"/><text x="33.8619%" y="191.50"></text></g><g><title>privacy_checking_modules (8,277,793 samples, 1.04%)</title><rect x="33.9740%" y="181" width="1.0423%" height="15" fill="rgb(221,10,30)"/><text x="34.2240%" y="191.50"></text></g><g><title>check_mod_privacy (8,265,583 samples, 1.04%)</title><rect x="33.9755%" y="165" width="1.0408%" height="15" fill="rgb(210,229,1)"/><text x="34.2255%" y="175.50"></text></g><g><title>misc_checking_3 (29,816,713 samples, 3.75%)</title><rect x="31.2718%" y="197" width="3.7545%" height="15" fill="rgb(222,148,37)"/><text x="31.5218%" y="207.50">misc..</text></g><g><title>impl_parent (3,996,416 samples, 0.50%)</title><rect x="36.0135%" y="133" width="0.5032%" height="15" fill="rgb(234,67,33)"/><text x="36.2635%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,185,771 samples, 0.28%)</title><rect x="36.2415%" y="117" width="0.2752%" height="15" fill="rgb(247,98,35)"/><text x="36.4915%" y="127.50"></text></g><g><title>impl_trait_ref (7,862,557 samples, 0.99%)</title><rect x="36.5167%" y="133" width="0.9900%" height="15" fill="rgb(247,138,52)"/><text x="36.7667%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,077,317 samples, 0.77%)</title><rect x="36.7415%" y="117" width="0.7652%" height="15" fill="rgb(213,79,30)"/><text x="36.9915%" y="127.50"></text></g><g><title>trait_impls_of (1,595,753 samples, 0.20%)</title><rect x="37.5108%" y="133" width="0.2009%" height="15" fill="rgb(246,177,23)"/><text x="37.7608%" y="143.50"></text></g><g><title>coherent_trait (20,811,391 samples, 2.62%)</title><rect x="35.0913%" y="165" width="2.6205%" height="15" fill="rgb(230,62,27)"/><text x="35.3413%" y="175.50">co..</text></g><g><title>specialization_graph_of (20,048,024 samples, 2.52%)</title><rect x="35.1874%" y="149" width="2.5244%" height="15" fill="rgb(216,154,8)"/><text x="35.4374%" y="159.50">sp..</text></g><g><title>coherence_checking (21,331,438 samples, 2.69%)</title><rect x="35.0851%" y="181" width="2.6860%" height="15" fill="rgb(244,35,45)"/><text x="35.3351%" y="191.50">co..</text></g><g><title>associated_item (1,167,694 samples, 0.15%)</title><rect x="65.7347%" y="117" width="0.1470%" height="15" fill="rgb(251,115,12)"/><text x="65.9847%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (935,162 samples, 0.12%)</title><rect x="65.7639%" y="101" width="0.1178%" height="15" fill="rgb(240,54,50)"/><text x="66.0139%" y="111.50"></text></g><g><title>associated_items (1,705,060 samples, 0.21%)</title><rect x="65.6777%" y="133" width="0.2147%" height="15" fill="rgb(233,84,52)"/><text x="65.9277%" y="143.50"></text></g><g><title>adt_dtorck_constraint (810,327 samples, 0.10%)</title><rect x="66.0760%" y="117" width="0.1020%" height="15" fill="rgb(207,117,47)"/><text x="66.3260%" y="127.50"></text></g><g><title>dropck_outlives (2,117,955 samples, 0.27%)</title><rect x="65.9266%" y="133" width="0.2667%" height="15" fill="rgb(249,43,39)"/><text x="66.1766%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,047,045 samples, 0.13%)</title><rect x="66.1933%" y="133" width="0.1318%" height="15" fill="rgb(209,38,44)"/><text x="66.4433%" y="143.50"></text></g><g><title>generics_of (1,009,879 samples, 0.13%)</title><rect x="67.7619%" y="117" width="0.1272%" height="15" fill="rgb(236,212,23)"/><text x="68.0119%" y="127.50"></text></g><g><title>impl_trait_ref (832,305 samples, 0.10%)</title><rect x="67.9285%" y="117" width="0.1048%" height="15" fill="rgb(242,79,21)"/><text x="68.1785%" y="127.50"></text></g><g><title>predicates_of (1,216,036 samples, 0.15%)</title><rect x="68.0392%" y="117" width="0.1531%" height="15" fill="rgb(211,96,35)"/><text x="68.2892%" y="127.50"></text></g><g><title>specializes (1,818,846 samples, 0.23%)</title><rect x="68.1923%" y="117" width="0.2290%" height="15" fill="rgb(253,215,40)"/><text x="68.4423%" y="127.50"></text></g><g><title>param_env (1,058,938 samples, 0.13%)</title><rect x="68.2880%" y="101" width="0.1333%" height="15" fill="rgb(211,81,21)"/><text x="68.5380%" y="111.50"></text></g><g><title>trait_impls_of (891,591 samples, 0.11%)</title><rect x="68.4233%" y="117" width="0.1123%" height="15" fill="rgb(208,190,38)"/><text x="68.6733%" y="127.50"></text></g><g><title>evaluate_obligation (17,599,936 samples, 2.22%)</title><rect x="66.3251%" y="133" width="2.2161%" height="15" fill="rgb(235,213,38)"/><text x="66.5751%" y="143.50">e..</text></g><g><title>generics_of (1,920,801 samples, 0.24%)</title><rect x="68.5986%" y="133" width="0.2419%" height="15" fill="rgb(237,122,38)"/><text x="68.8486%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (1,418,765 samples, 0.18%)</title><rect x="68.6618%" y="117" width="0.1786%" height="15" fill="rgb(244,218,35)"/><text x="68.9118%" y="127.50"></text></g><g><title>evaluate_obligation (800,255 samples, 0.10%)</title><rect x="69.1114%" y="117" width="0.1008%" height="15" fill="rgb(240,68,47)"/><text x="69.3614%" y="127.50"></text></g><g><title>method_autoderef_steps (1,718,415 samples, 0.22%)</title><rect x="68.9977%" y="133" width="0.2164%" height="15" fill="rgb(210,16,53)"/><text x="69.2477%" y="143.50"></text></g><g><title>predicates_of (1,031,439 samples, 0.13%)</title><rect x="69.2838%" y="133" width="0.1299%" height="15" fill="rgb(235,124,12)"/><text x="69.5338%" y="143.50"></text></g><g><title>evaluate_obligation (4,630,226 samples, 0.58%)</title><rect x="74.3300%" y="117" width="0.5830%" height="15" fill="rgb(224,169,11)"/><text x="74.5800%" y="127.50"></text></g><g><title>typeck (45,239,116 samples, 5.70%)</title><rect x="69.4813%" y="133" width="5.6964%" height="15" fill="rgb(250,166,2)"/><text x="69.7313%" y="143.50">typeck</text></g><g><title>item_bodies_checking (297,083,935 samples, 37.41%)</title><rect x="37.7996%" y="181" width="37.4082%" height="15" fill="rgb(242,216,29)"/><text x="38.0496%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (297,080,045 samples, 37.41%)</title><rect x="37.8000%" y="165" width="37.4077%" height="15" fill="rgb(230,116,27)"/><text x="38.0500%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (296,422,223 samples, 37.32%)</title><rect x="37.8829%" y="149" width="37.3248%" height="15" fill="rgb(228,99,48)"/><text x="38.1329%" y="159.50">typeck</text></g><g><title>evaluate_obligation (2,124,564 samples, 0.27%)</title><rect x="76.2700%" y="37" width="0.2675%" height="15" fill="rgb(253,11,6)"/><text x="76.5200%" y="47.50"></text></g><g><title>mir_built (4,322,458 samples, 0.54%)</title><rect x="76.0395%" y="69" width="0.5443%" height="15" fill="rgb(247,143,39)"/><text x="76.2895%" y="79.50"></text></g><g><title>typeck (4,108,896 samples, 0.52%)</title><rect x="76.0664%" y="53" width="0.5174%" height="15" fill="rgb(236,97,10)"/><text x="76.3164%" y="63.50"></text></g><g><title>mir_const (4,638,092 samples, 0.58%)</title><rect x="76.0211%" y="101" width="0.5840%" height="15" fill="rgb(233,208,19)"/><text x="76.2711%" y="111.50"></text></g><g><title>unsafety_check_result (4,553,691 samples, 0.57%)</title><rect x="76.0318%" y="85" width="0.5734%" height="15" fill="rgb(216,164,2)"/><text x="76.2818%" y="95.50"></text></g><g><title>mir_promoted (4,661,222 samples, 0.59%)</title><rect x="76.0184%" y="117" width="0.5869%" height="15" fill="rgb(220,129,5)"/><text x="76.2684%" y="127.50"></text></g><g><title>type_of (5,630,334 samples, 0.71%)</title><rect x="75.9143%" y="149" width="0.7090%" height="15" fill="rgb(242,17,10)"/><text x="76.1643%" y="159.50"></text></g><g><title>mir_borrowck (5,544,932 samples, 0.70%)</title><rect x="75.9251%" y="133" width="0.6982%" height="15" fill="rgb(242,107,0)"/><text x="76.1751%" y="143.50"></text></g><g><title>evaluate_obligation (1,816,901 samples, 0.23%)</title><rect x="76.7943%" y="133" width="0.2288%" height="15" fill="rgb(251,28,31)"/><text x="77.0443%" y="143.50"></text></g><g><title>item_types_checking (14,548,573 samples, 1.83%)</title><rect x="75.2077%" y="181" width="1.8319%" height="15" fill="rgb(233,223,10)"/><text x="75.4577%" y="191.50">i..</text></g><g><title>check_mod_item_types (14,533,543 samples, 1.83%)</title><rect x="75.2096%" y="165" width="1.8300%" height="15" fill="rgb(215,21,27)"/><text x="75.4596%" y="175.50">c..</text></g><g><title>typeck (3,306,417 samples, 0.42%)</title><rect x="76.6233%" y="149" width="0.4163%" height="15" fill="rgb(232,23,21)"/><text x="76.8733%" y="159.50"></text></g><g><title>mir_const_qualif (836,829 samples, 0.11%)</title><rect x="77.4444%" y="101" width="0.1054%" height="15" fill="rgb(244,5,23)"/><text x="77.6944%" y="111.50"></text></g><g><title>mir_borrowck (1,850,480 samples, 0.23%)</title><rect x="77.6686%" y="69" width="0.2330%" height="15" fill="rgb(226,81,46)"/><text x="77.9186%" y="79.50"></text></g><g><title>mir_for_ctfe (2,805,699 samples, 0.35%)</title><rect x="77.5497%" y="101" width="0.3533%" height="15" fill="rgb(247,70,30)"/><text x="77.7997%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,562,908 samples, 0.32%)</title><rect x="77.5803%" y="85" width="0.3227%" height="15" fill="rgb(212,68,19)"/><text x="77.8303%" y="95.50"></text></g><g><title>eval_to_const_value_raw (5,725,773 samples, 0.72%)</title><rect x="77.3291%" y="149" width="0.7210%" height="15" fill="rgb(240,187,13)"/><text x="77.5791%" y="159.50"></text></g><g><title>eval_to_const_value_raw (5,684,292 samples, 0.72%)</title><rect x="77.3343%" y="133" width="0.7158%" height="15" fill="rgb(223,113,26)"/><text x="77.5843%" y="143.50"></text></g><g><title>eval_to_allocation_raw (5,619,979 samples, 0.71%)</title><rect x="77.3424%" y="117" width="0.7077%" height="15" fill="rgb(206,192,2)"/><text x="77.5924%" y="127.50"></text></g><g><title>typeck (1,160,821 samples, 0.15%)</title><rect x="77.9039%" y="101" width="0.1462%" height="15" fill="rgb(241,108,4)"/><text x="78.1539%" y="111.50"></text></g><g><title>fn_sig (1,817,953 samples, 0.23%)</title><rect x="78.0501%" y="149" width="0.2289%" height="15" fill="rgb(247,173,49)"/><text x="78.3001%" y="159.50"></text></g><g><title>named_region_map (1,457,333 samples, 0.18%)</title><rect x="78.4381%" y="133" width="0.1835%" height="15" fill="rgb(224,114,35)"/><text x="78.6881%" y="143.50"></text></g><g><title>resolve_lifetimes (1,333,453 samples, 0.17%)</title><rect x="78.4537%" y="117" width="0.1679%" height="15" fill="rgb(245,159,27)"/><text x="78.7037%" y="127.50"></text></g><g><title>generics_of (2,793,418 samples, 0.35%)</title><rect x="78.2790%" y="149" width="0.3517%" height="15" fill="rgb(245,172,44)"/><text x="78.5290%" y="159.50"></text></g><g><title>explicit_predicates_of (1,206,175 samples, 0.15%)</title><rect x="78.8559%" y="117" width="0.1519%" height="15" fill="rgb(236,23,11)"/><text x="79.1059%" y="127.50"></text></g><g><title>predicates_of (3,630,833 samples, 0.46%)</title><rect x="78.7256%" y="149" width="0.4572%" height="15" fill="rgb(205,117,38)"/><text x="78.9756%" y="159.50"></text></g><g><title>predicates_defined_on (3,228,810 samples, 0.41%)</title><rect x="78.7762%" y="133" width="0.4066%" height="15" fill="rgb(237,72,25)"/><text x="79.0262%" y="143.50"></text></g><g><title>inferred_outlives_of (1,390,088 samples, 0.18%)</title><rect x="79.0078%" y="117" width="0.1750%" height="15" fill="rgb(244,70,9)"/><text x="79.2578%" y="127.50"></text></g><g><title>inferred_outlives_crate (1,239,113 samples, 0.16%)</title><rect x="79.0268%" y="101" width="0.1560%" height="15" fill="rgb(217,125,39)"/><text x="79.2768%" y="111.50"></text></g><g><title>type_collecting (17,485,226 samples, 2.20%)</title><rect x="77.0411%" y="181" width="2.2017%" height="15" fill="rgb(235,36,10)"/><text x="77.2911%" y="191.50">t..</text></g><g><title>collect_mod_item_types (17,455,276 samples, 2.20%)</title><rect x="77.0449%" y="165" width="2.1979%" height="15" fill="rgb(251,123,47)"/><text x="77.2949%" y="175.50">c..</text></g><g><title>evaluate_obligation (1,810,950 samples, 0.23%)</title><rect x="80.8187%" y="149" width="0.2280%" height="15" fill="rgb(221,13,13)"/><text x="81.0687%" y="159.50"></text></g><g><title>implied_outlives_bounds (894,541 samples, 0.11%)</title><rect x="81.0509%" y="149" width="0.1126%" height="15" fill="rgb(238,131,9)"/><text x="81.3009%" y="159.50"></text></g><g><title>param_env (1,775,051 samples, 0.22%)</title><rect x="81.2180%" y="149" width="0.2235%" height="15" fill="rgb(211,50,8)"/><text x="81.4680%" y="159.50"></text></g><g><title>region_scope_tree (3,519,501 samples, 0.44%)</title><rect x="81.4505%" y="149" width="0.4432%" height="15" fill="rgb(245,182,24)"/><text x="81.7005%" y="159.50"></text></g><g><title>check_impl_item_well_formed (19,753,228 samples, 2.49%)</title><rect x="79.4183%" y="165" width="2.4873%" height="15" fill="rgb(242,14,37)"/><text x="79.6683%" y="175.50">ch..</text></g><g><title>evaluate_obligation (2,031,136 samples, 0.26%)</title><rect x="82.6709%" y="149" width="0.2558%" height="15" fill="rgb(246,228,12)"/><text x="82.9209%" y="159.50"></text></g><g><title>param_env (1,343,361 samples, 0.17%)</title><rect x="82.9707%" y="149" width="0.1692%" height="15" fill="rgb(213,55,15)"/><text x="83.2207%" y="159.50"></text></g><g><title>check_item_well_formed (10,996,816 samples, 1.38%)</title><rect x="81.9055%" y="165" width="1.3847%" height="15" fill="rgb(209,9,3)"/><text x="82.1555%" y="175.50"></text></g><g><title>analysis (660,021,288 samples, 83.11%)</title><rect x="0.2358%" y="213" width="83.1084%" height="15" fill="rgb(230,59,30)"/><text x="0.4858%" y="223.50">analysis</text></g><g><title>type_check_crate (383,726,765 samples, 48.32%)</title><rect x="35.0262%" y="197" width="48.3180%" height="15" fill="rgb(209,121,21)"/><text x="35.2762%" y="207.50">type_check_crate</text></g><g><title>wf_checking (32,521,694 samples, 4.10%)</title><rect x="79.2492%" y="181" width="4.0951%" height="15" fill="rgb(220,109,13)"/><text x="79.4992%" y="191.50">wf_c..</text></g><g><title>AST_validation (824,579 samples, 0.10%)</title><rect x="83.4324%" y="197" width="0.1038%" height="15" fill="rgb(232,18,1)"/><text x="83.6824%" y="207.50"></text></g><g><title>metadata_register_crate (1,636,018 samples, 0.21%)</title><rect x="91.3753%" y="165" width="0.2060%" height="15" fill="rgb(215,41,42)"/><text x="91.6253%" y="175.50"></text></g><g><title>macro_expand_crate (64,926,747 samples, 8.18%)</title><rect x="83.6110%" y="197" width="8.1754%" height="15" fill="rgb(224,123,36)"/><text x="83.8610%" y="207.50">macro_expan..</text></g><g><title>expand_crate (64,900,317 samples, 8.17%)</title><rect x="83.6144%" y="181" width="8.1721%" height="15" fill="rgb(240,125,3)"/><text x="83.8644%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,629,710 samples, 0.21%)</title><rect x="91.5813%" y="165" width="0.2052%" height="15" fill="rgb(205,98,50)"/><text x="91.8313%" y="175.50"></text></g><g><title>late_resolve_crate (12,083,335 samples, 1.52%)</title><rect x="91.9040%" y="181" width="1.5215%" height="15" fill="rgb(205,185,37)"/><text x="92.1540%" y="191.50"></text></g><g><title>configure_and_expand (80,811,765 samples, 10.18%)</title><rect x="83.4063%" y="213" width="10.1756%" height="15" fill="rgb(238,207,15)"/><text x="83.6563%" y="223.50">configure_and_e..</text></g><g><title>resolve_crate (14,154,338 samples, 1.78%)</title><rect x="91.7996%" y="197" width="1.7823%" height="15" fill="rgb(213,199,42)"/><text x="92.0496%" y="207.50">r..</text></g><g><title>drop_ast (1,688,359 samples, 0.21%)</title><rect x="93.5819%" y="213" width="0.2126%" height="15" fill="rgb(235,201,11)"/><text x="93.8319%" y="223.50"></text></g><g><title>early_lint_checks (3,562,790 samples, 0.45%)</title><rect x="93.7969%" y="213" width="0.4486%" height="15" fill="rgb(207,46,11)"/><text x="94.0469%" y="223.50"></text></g><g><title>free_global_ctxt (9,064,432 samples, 1.14%)</title><rect x="94.2456%" y="213" width="1.1414%" height="15" fill="rgb(241,35,35)"/><text x="94.4956%" y="223.50"></text></g><g><title>generate_crate_metadata (8,308,853 samples, 1.05%)</title><rect x="95.3869%" y="213" width="1.0462%" height="15" fill="rgb(243,32,47)"/><text x="95.6369%" y="223.50"></text></g><g><title>hir_lowering (24,376,133 samples, 3.07%)</title><rect x="96.4332%" y="213" width="3.0694%" height="15" fill="rgb(247,202,23)"/><text x="96.6832%" y="223.50">hir..</text></g><g><title>self_profile_alloc_query_strings (2,413,027 samples, 0.30%)</title><rect x="99.5956%" y="213" width="0.3038%" height="15" fill="rgb(219,102,11)"/><text x="99.8456%" y="223.50"></text></g><g><title>all (794,168,699 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (794,168,699 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>