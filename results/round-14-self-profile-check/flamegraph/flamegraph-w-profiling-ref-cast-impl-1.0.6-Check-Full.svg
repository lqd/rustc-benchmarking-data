<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (193,152 samples, 0.14%)</title><rect x="10.7157%" y="181" width="0.1410%" height="15" fill="rgb(227,0,7)"/><text x="10.9657%" y="191.50"></text></g><g><title>item_attrs (171,552 samples, 0.13%)</title><rect x="11.1560%" y="149" width="0.1252%" height="15" fill="rgb(217,0,24)"/><text x="11.4060%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (164,022 samples, 0.12%)</title><rect x="11.1615%" y="133" width="0.1197%" height="15" fill="rgb(221,193,54)"/><text x="11.4115%" y="143.50"></text></g><g><title>codegen_fn_attrs (261,932 samples, 0.19%)</title><rect x="11.1064%" y="165" width="0.1912%" height="15" fill="rgb(248,212,6)"/><text x="11.3564%" y="175.50"></text></g><g><title>adt_drop_tys (214,314 samples, 0.16%)</title><rect x="13.8720%" y="117" width="0.1564%" height="15" fill="rgb(208,68,35)"/><text x="14.1220%" y="127.50"></text></g><g><title>adt_drop_tys (428,577 samples, 0.31%)</title><rect x="13.8440%" y="133" width="0.3128%" height="15" fill="rgb(232,128,0)"/><text x="14.0940%" y="143.50"></text></g><g><title>needs_drop_raw (1,169,148 samples, 0.85%)</title><rect x="13.7698%" y="149" width="0.8533%" height="15" fill="rgb(207,160,47)"/><text x="14.0198%" y="159.50"></text></g><g><title>is_copy_raw (638,840 samples, 0.47%)</title><rect x="14.1568%" y="133" width="0.4662%" height="15" fill="rgb(228,23,34)"/><text x="14.4068%" y="143.50"></text></g><g><title>evaluate_obligation (555,989 samples, 0.41%)</title><rect x="14.2173%" y="117" width="0.4058%" height="15" fill="rgb(218,30,26)"/><text x="14.4673%" y="127.50"></text></g><g><title>impl_parent (236,423 samples, 0.17%)</title><rect x="14.9560%" y="117" width="0.1725%" height="15" fill="rgb(220,122,19)"/><text x="15.2060%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (168,982 samples, 0.12%)</title><rect x="15.0052%" y="101" width="0.1233%" height="15" fill="rgb(250,228,42)"/><text x="15.2552%" y="111.50"></text></g><g><title>specialization_graph_of (1,437,446 samples, 1.05%)</title><rect x="14.7542%" y="133" width="1.0491%" height="15" fill="rgb(240,193,28)"/><text x="15.0042%" y="143.50"></text></g><g><title>impl_trait_ref (924,568 samples, 0.67%)</title><rect x="15.1285%" y="117" width="0.6748%" height="15" fill="rgb(216,20,37)"/><text x="15.3785%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (861,218 samples, 0.63%)</title><rect x="15.1747%" y="101" width="0.6285%" height="15" fill="rgb(206,188,39)"/><text x="15.4247%" y="111.50"></text></g><g><title>resolve_instance (1,635,828 samples, 1.19%)</title><rect x="14.6231%" y="149" width="1.1939%" height="15" fill="rgb(217,207,13)"/><text x="14.8731%" y="159.50"></text></g><g><title>thir_body (1,107,080 samples, 0.81%)</title><rect x="15.8273%" y="149" width="0.8080%" height="15" fill="rgb(231,73,38)"/><text x="16.0773%" y="159.50"></text></g><g><title>mir_const (8,727,937 samples, 6.37%)</title><rect x="10.2713%" y="197" width="6.3700%" height="15" fill="rgb(225,20,46)"/><text x="10.5213%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (7,925,787 samples, 5.78%)</title><rect x="10.8567%" y="181" width="5.7845%" height="15" fill="rgb(210,31,41)"/><text x="11.1067%" y="191.50">unsafet..</text></g><g><title>mir_built (7,321,671 samples, 5.34%)</title><rect x="11.2976%" y="165" width="5.3436%" height="15" fill="rgb(221,200,47)"/><text x="11.5476%" y="175.50">mir_bui..</text></g><g><title>mir_promoted (9,861,000 samples, 7.20%)</title><rect x="9.7502%" y="213" width="7.1969%" height="15" fill="rgb(226,26,5)"/><text x="10.0002%" y="223.50">mir_promot..</text></g><g><title>mir_const_qualif (419,196 samples, 0.31%)</title><rect x="16.6412%" y="197" width="0.3059%" height="15" fill="rgb(249,33,26)"/><text x="16.8912%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (150,721 samples, 0.11%)</title><rect x="16.9472%" y="213" width="0.1100%" height="15" fill="rgb(235,183,28)"/><text x="17.1972%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (554,101 samples, 0.40%)</title><rect x="17.0572%" y="213" width="0.4044%" height="15" fill="rgb(221,5,38)"/><text x="17.3072%" y="223.50"></text></g><g><title>normalize_projection_ty (373,646 samples, 0.27%)</title><rect x="17.1889%" y="197" width="0.2727%" height="15" fill="rgb(247,18,42)"/><text x="17.4389%" y="207.50"></text></g><g><title>type_op_normalize_predicate (280,951 samples, 0.21%)</title><rect x="17.4616%" y="213" width="0.2050%" height="15" fill="rgb(241,131,45)"/><text x="17.7116%" y="223.50"></text></g><g><title>normalize_projection_ty (200,401 samples, 0.15%)</title><rect x="17.5204%" y="197" width="0.1463%" height="15" fill="rgb(249,31,29)"/><text x="17.7704%" y="207.50"></text></g><g><title>type_op_prove_predicate (1,328,458 samples, 0.97%)</title><rect x="17.6666%" y="213" width="0.9696%" height="15" fill="rgb(225,111,53)"/><text x="17.9166%" y="223.50"></text></g><g><title>evaluate_obligation (142,043 samples, 0.10%)</title><rect x="18.5325%" y="197" width="0.1037%" height="15" fill="rgb(238,160,17)"/><text x="18.7825%" y="207.50"></text></g><g><title>MIR_borrow_checking (24,606,205 samples, 17.96%)</title><rect x="0.6812%" y="245" width="17.9585%" height="15" fill="rgb(214,148,48)"/><text x="0.9312%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,573,715 samples, 17.93%)</title><rect x="0.7049%" y="229" width="17.9348%" height="15" fill="rgb(232,36,49)"/><text x="0.9549%" y="239.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (159,621 samples, 0.12%)</title><rect x="18.9536%" y="213" width="0.1165%" height="15" fill="rgb(209,103,24)"/><text x="19.2036%" y="223.50"></text></g><g><title>check_mod_attrs (348,954 samples, 0.25%)</title><rect x="18.8155%" y="229" width="0.2547%" height="15" fill="rgb(229,88,8)"/><text x="19.0655%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (214,493 samples, 0.16%)</title><rect x="19.1449%" y="229" width="0.1565%" height="15" fill="rgb(213,181,19)"/><text x="19.3949%" y="239.50"></text></g><g><title>misc_checking_1 (712,278 samples, 0.52%)</title><rect x="18.8031%" y="245" width="0.5198%" height="15" fill="rgb(254,191,54)"/><text x="19.0531%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (511,825 samples, 0.37%)</title><rect x="19.3241%" y="229" width="0.3735%" height="15" fill="rgb(241,83,37)"/><text x="19.5741%" y="239.50"></text></g><g><title>check_mod_liveness (430,014 samples, 0.31%)</title><rect x="19.3838%" y="213" width="0.3138%" height="15" fill="rgb(233,36,39)"/><text x="19.6338%" y="223.50"></text></g><g><title>type_uninhabited_from (139,041 samples, 0.10%)</title><rect x="19.5962%" y="197" width="0.1015%" height="15" fill="rgb(226,3,54)"/><text x="19.8462%" y="207.50"></text></g><g><title>misc_checking_2 (995,181 samples, 0.73%)</title><rect x="19.3229%" y="245" width="0.7263%" height="15" fill="rgb(245,192,40)"/><text x="19.5729%" y="255.50"></text></g><g><title>match_checking (481,736 samples, 0.35%)</title><rect x="19.6977%" y="229" width="0.3516%" height="15" fill="rgb(238,167,29)"/><text x="19.9477%" y="239.50"></text></g><g><title>check_match (471,955 samples, 0.34%)</title><rect x="19.7048%" y="213" width="0.3444%" height="15" fill="rgb(232,182,51)"/><text x="19.9548%" y="223.50"></text></g><g><title>death_checking (165,952 samples, 0.12%)</title><rect x="20.1099%" y="229" width="0.1211%" height="15" fill="rgb(231,60,39)"/><text x="20.3599%" y="239.50"></text></g><g><title>eval_to_const_value_raw (408,884 samples, 0.30%)</title><rect x="20.5247%" y="149" width="0.2984%" height="15" fill="rgb(208,69,12)"/><text x="20.7747%" y="159.50"></text></g><g><title>eval_to_const_value_raw (408,234 samples, 0.30%)</title><rect x="20.5251%" y="133" width="0.2979%" height="15" fill="rgb(235,93,37)"/><text x="20.7751%" y="143.50"></text></g><g><title>eval_to_allocation_raw (406,374 samples, 0.30%)</title><rect x="20.5265%" y="117" width="0.2966%" height="15" fill="rgb(213,116,39)"/><text x="20.7765%" y="127.50"></text></g><g><title>eval_to_allocation_raw (454,265 samples, 0.33%)</title><rect x="20.4933%" y="197" width="0.3315%" height="15" fill="rgb(222,207,29)"/><text x="20.7433%" y="207.50"></text></g><g><title>eval_to_allocation_raw (453,345 samples, 0.33%)</title><rect x="20.4940%" y="181" width="0.3309%" height="15" fill="rgb(206,96,30)"/><text x="20.7440%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (419,415 samples, 0.31%)</title><rect x="20.5187%" y="165" width="0.3061%" height="15" fill="rgb(218,138,4)"/><text x="20.7687%" y="175.50"></text></g><g><title>param_env (167,950 samples, 0.12%)</title><rect x="20.9156%" y="197" width="0.1226%" height="15" fill="rgb(250,191,14)"/><text x="21.1656%" y="207.50"></text></g><g><title>impl_parent (732,913 samples, 0.53%)</title><rect x="21.8073%" y="165" width="0.5349%" height="15" fill="rgb(239,60,40)"/><text x="22.0573%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (477,619 samples, 0.35%)</title><rect x="21.9936%" y="149" width="0.3486%" height="15" fill="rgb(206,27,48)"/><text x="22.2436%" y="159.50"></text></g><g><title>specialization_graph_of (4,549,901 samples, 3.32%)</title><rect x="21.0769%" y="181" width="3.3207%" height="15" fill="rgb(225,35,8)"/><text x="21.3269%" y="191.50">spe..</text></g><g><title>impl_trait_ref (2,816,182 samples, 2.06%)</title><rect x="22.3422%" y="165" width="2.0554%" height="15" fill="rgb(250,213,24)"/><text x="22.5922%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,562,098 samples, 1.87%)</title><rect x="22.5277%" y="149" width="1.8699%" height="15" fill="rgb(247,123,22)"/><text x="22.7777%" y="159.50">m..</text></g><g><title>resolve_instance (4,605,171 samples, 3.36%)</title><rect x="21.0381%" y="197" width="3.3610%" height="15" fill="rgb(231,138,38)"/><text x="21.2881%" y="207.50">res..</text></g><g><title>crate_lints (5,723,365 samples, 4.18%)</title><rect x="20.2331%" y="213" width="4.1771%" height="15" fill="rgb(231,145,46)"/><text x="20.4831%" y="223.50">crate..</text></g><g><title>lint_checking (6,214,560 samples, 4.54%)</title><rect x="20.2310%" y="229" width="4.5356%" height="15" fill="rgb(251,118,11)"/><text x="20.4810%" y="239.50">lint_..</text></g><g><title>module_lints (488,345 samples, 0.36%)</title><rect x="24.4102%" y="213" width="0.3564%" height="15" fill="rgb(217,147,25)"/><text x="24.6602%" y="223.50"></text></g><g><title>lint_mod (484,985 samples, 0.35%)</title><rect x="24.4127%" y="197" width="0.3540%" height="15" fill="rgb(247,81,37)"/><text x="24.6627%" y="207.50"></text></g><g><title>privacy_checking_modules (960,231 samples, 0.70%)</title><rect x="24.8240%" y="229" width="0.7008%" height="15" fill="rgb(209,12,38)"/><text x="25.0740%" y="239.50"></text></g><g><title>check_mod_privacy (958,321 samples, 0.70%)</title><rect x="24.8254%" y="213" width="0.6994%" height="15" fill="rgb(227,1,9)"/><text x="25.0754%" y="223.50"></text></g><g><title>visibility (263,932 samples, 0.19%)</title><rect x="25.3322%" y="197" width="0.1926%" height="15" fill="rgb(248,47,43)"/><text x="25.5822%" y="207.50"></text></g><g><title>misc_checking_3 (7,517,784 samples, 5.49%)</title><rect x="20.0492%" y="245" width="5.4867%" height="15" fill="rgb(221,10,30)"/><text x="20.2992%" y="255.50">misc_ch..</text></g><g><title>associated_item (346,685 samples, 0.25%)</title><rect x="37.3942%" y="165" width="0.2530%" height="15" fill="rgb(210,229,1)"/><text x="37.6442%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (273,214 samples, 0.20%)</title><rect x="37.4478%" y="149" width="0.1994%" height="15" fill="rgb(222,148,37)"/><text x="37.6978%" y="159.50"></text></g><g><title>associated_items (481,637 samples, 0.35%)</title><rect x="37.3113%" y="181" width="0.3515%" height="15" fill="rgb(234,67,33)"/><text x="37.5613%" y="191.50"></text></g><g><title>adt_def (252,134 samples, 0.18%)</title><rect x="37.9752%" y="149" width="0.1840%" height="15" fill="rgb(247,98,35)"/><text x="38.2252%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (245,344 samples, 0.18%)</title><rect x="37.9801%" y="133" width="0.1791%" height="15" fill="rgb(247,138,52)"/><text x="38.2301%" y="143.50"></text></g><g><title>item_attrs (171,753 samples, 0.13%)</title><rect x="38.0338%" y="117" width="0.1254%" height="15" fill="rgb(213,79,30)"/><text x="38.2838%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (165,003 samples, 0.12%)</title><rect x="38.0388%" y="101" width="0.1204%" height="15" fill="rgb(246,177,23)"/><text x="38.2888%" y="111.50"></text></g><g><title>adt_def (161,622 samples, 0.12%)</title><rect x="38.5417%" y="117" width="0.1180%" height="15" fill="rgb(230,62,27)"/><text x="38.7917%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (156,752 samples, 0.11%)</title><rect x="38.5452%" y="101" width="0.1144%" height="15" fill="rgb(216,154,8)"/><text x="38.7952%" y="111.50"></text></g><g><title>adt_def (200,552 samples, 0.15%)</title><rect x="38.7576%" y="101" width="0.1464%" height="15" fill="rgb(244,35,45)"/><text x="39.0076%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (191,682 samples, 0.14%)</title><rect x="38.7641%" y="85" width="0.1399%" height="15" fill="rgb(251,115,12)"/><text x="39.0141%" y="95.50"></text></g><g><title>adt_def (235,423 samples, 0.17%)</title><rect x="38.9611%" y="85" width="0.1718%" height="15" fill="rgb(240,54,50)"/><text x="39.2111%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (234,013 samples, 0.17%)</title><rect x="38.9621%" y="69" width="0.1708%" height="15" fill="rgb(233,84,52)"/><text x="39.2121%" y="79.50"></text></g><g><title>item_attrs (221,173 samples, 0.16%)</title><rect x="38.9715%" y="53" width="0.1614%" height="15" fill="rgb(207,117,47)"/><text x="39.2215%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (219,433 samples, 0.16%)</title><rect x="38.9728%" y="37" width="0.1602%" height="15" fill="rgb(249,43,39)"/><text x="39.2228%" y="47.50"></text></g><g><title>adt_dtorck_constraint (360,343 samples, 0.26%)</title><rect x="38.9461%" y="101" width="0.2630%" height="15" fill="rgb(209,38,44)"/><text x="39.1961%" y="111.50"></text></g><g><title>adt_dtorck_constraint (770,006 samples, 0.56%)</title><rect x="38.6898%" y="117" width="0.5620%" height="15" fill="rgb(236,212,23)"/><text x="38.9398%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,174,984 samples, 0.86%)</title><rect x="38.4679%" y="133" width="0.8575%" height="15" fill="rgb(242,79,21)"/><text x="38.7179%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,667,729 samples, 1.22%)</title><rect x="38.1946%" y="149" width="1.2172%" height="15" fill="rgb(211,96,35)"/><text x="38.4446%" y="159.50"></text></g><g><title>dropck_outlives (2,432,796 samples, 1.78%)</title><rect x="37.7010%" y="181" width="1.7755%" height="15" fill="rgb(253,215,40)"/><text x="37.9510%" y="191.50">d..</text></g><g><title>adt_dtorck_constraint (2,227,956 samples, 1.63%)</title><rect x="37.8505%" y="165" width="1.6260%" height="15" fill="rgb(211,81,21)"/><text x="38.1005%" y="175.50"></text></g><g><title>evaluate_obligation (1,631,585 samples, 1.19%)</title><rect x="39.4765%" y="181" width="1.1908%" height="15" fill="rgb(208,190,38)"/><text x="39.7265%" y="191.50"></text></g><g><title>trait_impls_of (636,777 samples, 0.46%)</title><rect x="40.2026%" y="165" width="0.4647%" height="15" fill="rgb(235,213,38)"/><text x="40.4526%" y="175.50"></text></g><g><title>implementations_of_trait (219,013 samples, 0.16%)</title><rect x="40.5075%" y="149" width="0.1598%" height="15" fill="rgb(237,122,38)"/><text x="40.7575%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (139,671 samples, 0.10%)</title><rect x="40.5654%" y="133" width="0.1019%" height="15" fill="rgb(244,218,35)"/><text x="40.8154%" y="143.50"></text></g><g><title>evaluate_obligation (153,401 samples, 0.11%)</title><rect x="41.0942%" y="165" width="0.1120%" height="15" fill="rgb(240,68,47)"/><text x="41.3442%" y="175.50"></text></g><g><title>method_autoderef_steps (262,432 samples, 0.19%)</title><rect x="41.0224%" y="181" width="0.1915%" height="15" fill="rgb(210,16,53)"/><text x="41.2724%" y="191.50"></text></g><g><title>predicates_of (377,291 samples, 0.28%)</title><rect x="41.2261%" y="181" width="0.2754%" height="15" fill="rgb(235,124,12)"/><text x="41.4761%" y="191.50"></text></g><g><title>predicates_defined_on (242,880 samples, 0.18%)</title><rect x="41.3242%" y="165" width="0.1773%" height="15" fill="rgb(224,169,11)"/><text x="41.5742%" y="175.50"></text></g><g><title>dropck_outlives (214,653 samples, 0.16%)</title><rect x="46.1271%" y="165" width="0.1567%" height="15" fill="rgb(250,166,2)"/><text x="46.3771%" y="175.50"></text></g><g><title>evaluate_obligation (966,230 samples, 0.71%)</title><rect x="46.2837%" y="165" width="0.7052%" height="15" fill="rgb(242,216,29)"/><text x="46.5337%" y="175.50"></text></g><g><title>trait_impls_of (266,883 samples, 0.19%)</title><rect x="46.7942%" y="149" width="0.1948%" height="15" fill="rgb(230,116,27)"/><text x="47.0442%" y="159.50"></text></g><g><title>is_copy_raw (314,535 samples, 0.23%)</title><rect x="47.2237%" y="165" width="0.2296%" height="15" fill="rgb(228,99,48)"/><text x="47.4737%" y="175.50"></text></g><g><title>evaluate_obligation (267,665 samples, 0.20%)</title><rect x="47.2580%" y="149" width="0.1954%" height="15" fill="rgb(253,11,6)"/><text x="47.5080%" y="159.50"></text></g><g><title>predicates_of (403,805 samples, 0.29%)</title><rect x="47.5534%" y="165" width="0.2947%" height="15" fill="rgb(247,143,39)"/><text x="47.8034%" y="175.50"></text></g><g><title>predicates_defined_on (346,675 samples, 0.25%)</title><rect x="47.5951%" y="149" width="0.2530%" height="15" fill="rgb(236,97,10)"/><text x="47.8451%" y="159.50"></text></g><g><title>typeck (8,828,329 samples, 6.44%)</title><rect x="41.5680%" y="181" width="6.4432%" height="15" fill="rgb(233,208,19)"/><text x="41.8180%" y="191.50">typeck</text></g><g><title>item_bodies_checking (30,783,434 samples, 22.47%)</title><rect x="25.5861%" y="229" width="22.4668%" height="15" fill="rgb(216,164,2)"/><text x="25.8361%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,779,734 samples, 22.46%)</title><rect x="25.5888%" y="213" width="22.4641%" height="15" fill="rgb(220,129,5)"/><text x="25.8388%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (30,761,884 samples, 22.45%)</title><rect x="25.6018%" y="197" width="22.4511%" height="15" fill="rgb(242,17,10)"/><text x="25.8518%" y="207.50">typeck</text></g><g><title>impl_trait_ref (337,605 samples, 0.25%)</title><rect x="48.5599%" y="69" width="0.2464%" height="15" fill="rgb(242,107,0)"/><text x="48.8099%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (314,355 samples, 0.23%)</title><rect x="48.5769%" y="53" width="0.2294%" height="15" fill="rgb(251,28,31)"/><text x="48.8269%" y="63.50"></text></g><g><title>coherent_trait (581,897 samples, 0.42%)</title><rect x="48.4041%" y="101" width="0.4247%" height="15" fill="rgb(233,223,10)"/><text x="48.6541%" y="111.50"></text></g><g><title>specialization_graph_of (578,147 samples, 0.42%)</title><rect x="48.4069%" y="85" width="0.4220%" height="15" fill="rgb(215,21,27)"/><text x="48.6569%" y="95.50"></text></g><g><title>adt_destructor (588,857 samples, 0.43%)</title><rect x="48.4004%" y="133" width="0.4298%" height="15" fill="rgb(232,23,21)"/><text x="48.6504%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (588,347 samples, 0.43%)</title><rect x="48.4008%" y="117" width="0.4294%" height="15" fill="rgb(244,5,23)"/><text x="48.6508%" y="127.50"></text></g><g><title>adt_dtorck_constraint (599,237 samples, 0.44%)</title><rect x="48.3931%" y="149" width="0.4373%" height="15" fill="rgb(226,81,46)"/><text x="48.6431%" y="159.50"></text></g><g><title>dropck_outlives (623,707 samples, 0.46%)</title><rect x="48.3760%" y="181" width="0.4552%" height="15" fill="rgb(247,70,30)"/><text x="48.6260%" y="191.50"></text></g><g><title>adt_dtorck_constraint (607,467 samples, 0.44%)</title><rect x="48.3878%" y="165" width="0.4434%" height="15" fill="rgb(212,68,19)"/><text x="48.6378%" y="175.50"></text></g><g><title>item_types_checking (1,266,224 samples, 0.92%)</title><rect x="48.0529%" y="229" width="0.9241%" height="15" fill="rgb(240,187,13)"/><text x="48.3029%" y="239.50"></text></g><g><title>check_mod_item_types (1,264,284 samples, 0.92%)</title><rect x="48.0543%" y="213" width="0.9227%" height="15" fill="rgb(223,113,26)"/><text x="48.3043%" y="223.50"></text></g><g><title>typeck (1,228,573 samples, 0.90%)</title><rect x="48.0804%" y="197" width="0.8967%" height="15" fill="rgb(206,192,2)"/><text x="48.3304%" y="207.50"></text></g><g><title>fn_sig (215,363 samples, 0.16%)</title><rect x="49.0451%" y="197" width="0.1572%" height="15" fill="rgb(241,108,4)"/><text x="49.2951%" y="207.50"></text></g><g><title>named_region_map (239,153 samples, 0.17%)</title><rect x="49.2361%" y="181" width="0.1745%" height="15" fill="rgb(247,173,49)"/><text x="49.4861%" y="191.50"></text></g><g><title>resolve_lifetimes (234,843 samples, 0.17%)</title><rect x="49.2393%" y="165" width="0.1714%" height="15" fill="rgb(224,114,35)"/><text x="49.4893%" y="175.50"></text></g><g><title>lint_levels (153,512 samples, 0.11%)</title><rect x="49.2986%" y="149" width="0.1120%" height="15" fill="rgb(245,159,27)"/><text x="49.5486%" y="159.50"></text></g><g><title>generics_of (295,594 samples, 0.22%)</title><rect x="49.2023%" y="197" width="0.2157%" height="15" fill="rgb(245,172,44)"/><text x="49.4523%" y="207.50"></text></g><g><title>type_collecting (686,308 samples, 0.50%)</title><rect x="48.9790%" y="229" width="0.5009%" height="15" fill="rgb(236,23,11)"/><text x="49.2290%" y="239.50"></text></g><g><title>collect_mod_item_types (679,368 samples, 0.50%)</title><rect x="48.9840%" y="213" width="0.4958%" height="15" fill="rgb(205,117,38)"/><text x="49.2340%" y="223.50"></text></g><g><title>adt_def (186,613 samples, 0.14%)</title><rect x="50.2812%" y="101" width="0.1362%" height="15" fill="rgb(237,72,25)"/><text x="50.5312%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (178,543 samples, 0.13%)</title><rect x="50.2871%" y="85" width="0.1303%" height="15" fill="rgb(244,70,9)"/><text x="50.5371%" y="95.50"></text></g><g><title>adt_sized_constraint (166,200 samples, 0.12%)</title><rect x="50.4174%" y="101" width="0.1213%" height="15" fill="rgb(217,125,39)"/><text x="50.6674%" y="111.50"></text></g><g><title>adt_sized_constraint (403,114 samples, 0.29%)</title><rect x="50.2595%" y="117" width="0.2942%" height="15" fill="rgb(235,36,10)"/><text x="50.5095%" y="127.50"></text></g><g><title>adt_sized_constraint (551,156 samples, 0.40%)</title><rect x="50.1817%" y="133" width="0.4023%" height="15" fill="rgb(251,123,47)"/><text x="50.4317%" y="143.50"></text></g><g><title>adt_sized_constraint (649,597 samples, 0.47%)</title><rect x="50.1245%" y="149" width="0.4741%" height="15" fill="rgb(221,13,13)"/><text x="50.3745%" y="159.50"></text></g><g><title>adt_sized_constraint (792,057 samples, 0.58%)</title><rect x="50.0365%" y="165" width="0.5781%" height="15" fill="rgb(238,131,9)"/><text x="50.2865%" y="175.50"></text></g><g><title>adt_sized_constraint (873,100 samples, 0.64%)</title><rect x="49.9822%" y="181" width="0.6372%" height="15" fill="rgb(211,50,8)"/><text x="50.2322%" y="191.50"></text></g><g><title>evaluate_obligation (1,167,883 samples, 0.85%)</title><rect x="49.8646%" y="197" width="0.8524%" height="15" fill="rgb(245,182,24)"/><text x="50.1146%" y="207.50"></text></g><g><title>implied_outlives_bounds (138,435 samples, 0.10%)</title><rect x="50.7169%" y="197" width="0.1010%" height="15" fill="rgb(242,14,37)"/><text x="50.9669%" y="207.50"></text></g><g><title>param_env (151,841 samples, 0.11%)</title><rect x="50.8182%" y="197" width="0.1108%" height="15" fill="rgb(246,228,12)"/><text x="51.0682%" y="207.50"></text></g><g><title>region_scope_tree (286,812 samples, 0.21%)</title><rect x="50.9816%" y="197" width="0.2093%" height="15" fill="rgb(213,55,15)"/><text x="51.2316%" y="207.50"></text></g><g><title>analysis (69,471,347 samples, 50.70%)</title><rect x="0.4886%" y="261" width="50.7027%" height="15" fill="rgb(209,9,3)"/><text x="0.7386%" y="271.50">analysis</text></g><g><title>type_check_crate (35,152,123 samples, 25.66%)</title><rect x="25.5360%" y="245" width="25.6553%" height="15" fill="rgb(230,59,30)"/><text x="25.7860%" y="255.50">type_check_crate</text></g><g><title>wf_checking (2,343,526 samples, 1.71%)</title><rect x="49.4809%" y="229" width="1.7104%" height="15" fill="rgb(209,121,21)"/><text x="49.7309%" y="239.50"></text></g><g><title>check_item_well_formed (2,283,576 samples, 1.67%)</title><rect x="49.5246%" y="213" width="1.6666%" height="15" fill="rgb(220,109,13)"/><text x="49.7746%" y="223.50"></text></g><g><title>codegen_crate (459,225 samples, 0.34%)</title><rect x="51.1996%" y="261" width="0.3352%" height="15" fill="rgb(232,18,1)"/><text x="51.4496%" y="271.50"></text></g><g><title>metadata_load_macro (948,140 samples, 0.69%)</title><rect x="88.0013%" y="213" width="0.6920%" height="15" fill="rgb(215,41,42)"/><text x="88.2513%" y="223.50"></text></g><g><title>macro_expand_crate (53,414,207 samples, 38.98%)</title><rect x="51.8533%" y="245" width="38.9836%" height="15" fill="rgb(224,123,36)"/><text x="52.1033%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (53,396,086 samples, 38.97%)</title><rect x="51.8665%" y="229" width="38.9704%" height="15" fill="rgb(240,125,3)"/><text x="52.1165%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (2,937,032 samples, 2.14%)</title><rect x="88.6933%" y="213" width="2.1436%" height="15" fill="rgb(205,98,50)"/><text x="88.9433%" y="223.50">m..</text></g><g><title>metadata_register_crate (1,000,162 samples, 0.73%)</title><rect x="90.1069%" y="197" width="0.7300%" height="15" fill="rgb(205,185,37)"/><text x="90.3569%" y="207.50"></text></g><g><title>maybe_create_a_macro_crate (387,314 samples, 0.28%)</title><rect x="90.8377%" y="245" width="0.2827%" height="15" fill="rgb(238,207,15)"/><text x="91.0877%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (183,472 samples, 0.13%)</title><rect x="91.1204%" y="245" width="0.1339%" height="15" fill="rgb(213,199,42)"/><text x="91.3704%" y="255.50"></text></g><g><title>finalize_imports (176,552 samples, 0.13%)</title><rect x="91.2578%" y="229" width="0.1289%" height="15" fill="rgb(235,201,11)"/><text x="91.5078%" y="239.50"></text></g><g><title>finalize_macro_resolutions (449,945 samples, 0.33%)</title><rect x="91.3867%" y="229" width="0.3284%" height="15" fill="rgb(207,46,11)"/><text x="91.6367%" y="239.50"></text></g><g><title>late_resolve_crate (1,630,238 samples, 1.19%)</title><rect x="91.7151%" y="229" width="1.1898%" height="15" fill="rgb(241,35,35)"/><text x="91.9651%" y="239.50"></text></g><g><title>configure_and_expand (56,768,945 samples, 41.43%)</title><rect x="51.5347%" y="261" width="41.4320%" height="15" fill="rgb(243,32,47)"/><text x="51.7847%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (2,346,336 samples, 1.71%)</title><rect x="91.2543%" y="245" width="1.7124%" height="15" fill="rgb(247,202,23)"/><text x="91.5043%" y="255.50"></text></g><g><title>early_lint_checks (374,704 samples, 0.27%)</title><rect x="93.0747%" y="261" width="0.2735%" height="15" fill="rgb(219,102,11)"/><text x="93.3247%" y="271.50"></text></g><g><title>free_global_ctxt (3,330,647 samples, 2.43%)</title><rect x="93.3482%" y="261" width="2.4308%" height="15" fill="rgb(243,110,44)"/><text x="93.5982%" y="271.50">fr..</text></g><g><title>generate_crate_metadata (172,082 samples, 0.13%)</title><rect x="95.7790%" y="261" width="0.1256%" height="15" fill="rgb(222,74,54)"/><text x="96.0290%" y="271.50"></text></g><g><title>hir_lowering (1,977,532 samples, 1.44%)</title><rect x="95.9046%" y="261" width="1.4433%" height="15" fill="rgb(216,99,12)"/><text x="96.1546%" y="271.50"></text></g><g><title>parse_crate (2,519,938 samples, 1.84%)</title><rect x="97.3854%" y="261" width="1.8391%" height="15" fill="rgb(226,22,26)"/><text x="97.6354%" y="271.50">p..</text></g><g><title>prepare_outputs (180,222 samples, 0.13%)</title><rect x="99.2311%" y="261" width="0.1315%" height="15" fill="rgb(217,163,10)"/><text x="99.4811%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (531,066 samples, 0.39%)</title><rect x="99.3627%" y="261" width="0.3876%" height="15" fill="rgb(213,25,53)"/><text x="99.6127%" y="271.50"></text></g><g><title>all (137,017,141 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (137,017,141 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (259,023 samples, 0.19%)</title><rect x="99.8110%" y="261" width="0.1890%" height="15" fill="rgb(229,68,48)"/><text x="100.0610%" y="271.50"></text></g></svg></svg>