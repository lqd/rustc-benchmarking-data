<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (192,791 samples, 0.19%)</title><rect x="10.9415%" y="149" width="0.1865%" height="15" fill="rgb(227,0,7)"/><text x="11.1915%" y="159.50"></text></g><g><title>evaluate_obligation (147,480 samples, 0.14%)</title><rect x="10.9853%" y="133" width="0.1427%" height="15" fill="rgb(217,0,24)"/><text x="11.2353%" y="143.50"></text></g><g><title>item_attrs (111,831 samples, 0.11%)</title><rect x="13.1414%" y="85" width="0.1082%" height="15" fill="rgb(221,193,54)"/><text x="13.3914%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (106,731 samples, 0.10%)</title><rect x="13.1463%" y="69" width="0.1032%" height="15" fill="rgb(248,212,6)"/><text x="13.3963%" y="79.50"></text></g><g><title>codegen_fn_attrs (175,971 samples, 0.17%)</title><rect x="13.0861%" y="101" width="0.1702%" height="15" fill="rgb(208,68,35)"/><text x="13.3361%" y="111.50"></text></g><g><title>is_copy_raw (518,218 samples, 0.50%)</title><rect x="15.2682%" y="85" width="0.5013%" height="15" fill="rgb(232,128,0)"/><text x="15.5182%" y="95.50"></text></g><g><title>evaluate_obligation (445,077 samples, 0.43%)</title><rect x="15.3390%" y="69" width="0.4305%" height="15" fill="rgb(207,160,47)"/><text x="15.5890%" y="79.50"></text></g><g><title>adt_drop_tys (118,520 samples, 0.11%)</title><rect x="15.8470%" y="69" width="0.1146%" height="15" fill="rgb(228,23,34)"/><text x="16.0970%" y="79.50"></text></g><g><title>needs_drop_raw (465,424 samples, 0.45%)</title><rect x="15.7817%" y="85" width="0.4502%" height="15" fill="rgb(218,30,26)"/><text x="16.0317%" y="95.50"></text></g><g><title>is_copy_raw (279,394 samples, 0.27%)</title><rect x="15.9616%" y="69" width="0.2703%" height="15" fill="rgb(220,122,19)"/><text x="16.2116%" y="79.50"></text></g><g><title>evaluate_obligation (204,352 samples, 0.20%)</title><rect x="16.0342%" y="53" width="0.1977%" height="15" fill="rgb(250,228,42)"/><text x="16.2842%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (470,712 samples, 0.46%)</title><rect x="16.4982%" y="69" width="0.4553%" height="15" fill="rgb(240,193,28)"/><text x="16.7482%" y="79.50"></text></g><g><title>impl_parent (377,525 samples, 0.37%)</title><rect x="17.5579%" y="53" width="0.3652%" height="15" fill="rgb(216,20,37)"/><text x="17.8079%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (240,595 samples, 0.23%)</title><rect x="17.6904%" y="37" width="0.2327%" height="15" fill="rgb(206,188,39)"/><text x="17.9404%" y="47.50"></text></g><g><title>specialization_graph_of (1,738,110 samples, 1.68%)</title><rect x="17.0330%" y="69" width="1.6813%" height="15" fill="rgb(217,207,13)"/><text x="17.2830%" y="79.50"></text></g><g><title>impl_trait_ref (817,919 samples, 0.79%)</title><rect x="17.9231%" y="53" width="0.7912%" height="15" fill="rgb(231,73,38)"/><text x="18.1731%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (709,927 samples, 0.69%)</title><rect x="18.0276%" y="37" width="0.6867%" height="15" fill="rgb(225,20,46)"/><text x="18.2776%" y="47.50"></text></g><g><title>resolve_instance (2,631,527 samples, 2.55%)</title><rect x="16.2319%" y="85" width="2.5455%" height="15" fill="rgb(210,31,41)"/><text x="16.4819%" y="95.50">re..</text></g><g><title>thir_body (755,298 samples, 0.73%)</title><rect x="18.8129%" y="85" width="0.7306%" height="15" fill="rgb(221,200,47)"/><text x="19.0629%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (110,503 samples, 0.11%)</title><rect x="19.5618%" y="85" width="0.1069%" height="15" fill="rgb(226,26,5)"/><text x="19.8118%" y="95.50"></text></g><g><title>mir_const (8,109,393 samples, 7.84%)</title><rect x="11.8275%" y="133" width="7.8442%" height="15" fill="rgb(249,33,26)"/><text x="12.0775%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,216,827 samples, 6.98%)</title><rect x="12.6909%" y="117" width="6.9809%" height="15" fill="rgb(235,183,28)"/><text x="12.9409%" y="127.50">unsafety_..</text></g><g><title>mir_built (6,632,234 samples, 6.42%)</title><rect x="13.2564%" y="101" width="6.4154%" height="15" fill="rgb(221,5,38)"/><text x="13.5064%" y="111.50">mir_built</text></g><g><title>mir_promoted (8,885,633 samples, 8.60%)</title><rect x="11.1280%" y="149" width="8.5951%" height="15" fill="rgb(247,18,42)"/><text x="11.3780%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (779,955 samples, 0.75%)</title><rect x="19.7231%" y="149" width="0.7545%" height="15" fill="rgb(241,131,45)"/><text x="19.9731%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (787,480 samples, 0.76%)</title><rect x="20.4775%" y="149" width="0.7617%" height="15" fill="rgb(249,31,29)"/><text x="20.7275%" y="159.50"></text></g><g><title>normalize_projection_ty (332,064 samples, 0.32%)</title><rect x="20.9180%" y="133" width="0.3212%" height="15" fill="rgb(225,111,53)"/><text x="21.1680%" y="143.50"></text></g><g><title>type_op_normalize_predicate (313,891 samples, 0.30%)</title><rect x="21.2393%" y="149" width="0.3036%" height="15" fill="rgb(238,160,17)"/><text x="21.4893%" y="159.50"></text></g><g><title>normalize_projection_ty (142,181 samples, 0.14%)</title><rect x="21.4054%" y="133" width="0.1375%" height="15" fill="rgb(214,148,48)"/><text x="21.6554%" y="143.50"></text></g><g><title>type_op_normalize_ty (147,271 samples, 0.14%)</title><rect x="21.5429%" y="149" width="0.1425%" height="15" fill="rgb(232,36,49)"/><text x="21.7929%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,064,580 samples, 2.00%)</title><rect x="21.6853%" y="149" width="1.9971%" height="15" fill="rgb(209,103,24)"/><text x="21.9353%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (23,245,997 samples, 22.49%)</title><rect x="1.2048%" y="181" width="22.4859%" height="15" fill="rgb(229,88,8)"/><text x="1.4548%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (23,112,396 samples, 22.36%)</title><rect x="1.3341%" y="165" width="22.3567%" height="15" fill="rgb(213,181,19)"/><text x="1.5841%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (289,235 samples, 0.28%)</title><rect x="23.7226%" y="181" width="0.2798%" height="15" fill="rgb(254,191,54)"/><text x="23.9726%" y="191.50"></text></g><g><title>get_lang_items (105,411 samples, 0.10%)</title><rect x="24.4643%" y="101" width="0.1020%" height="15" fill="rgb(241,83,37)"/><text x="24.7143%" y="111.50"></text></g><g><title>codegen_fn_attrs (205,132 samples, 0.20%)</title><rect x="24.4414%" y="117" width="0.1984%" height="15" fill="rgb(233,36,39)"/><text x="24.6914%" y="127.50"></text></g><g><title>codegen_fn_attrs (422,756 samples, 0.41%)</title><rect x="24.2390%" y="149" width="0.4089%" height="15" fill="rgb(226,3,54)"/><text x="24.4890%" y="159.50"></text></g><g><title>should_inherit_track_caller (348,494 samples, 0.34%)</title><rect x="24.3108%" y="133" width="0.3371%" height="15" fill="rgb(245,192,40)"/><text x="24.5608%" y="143.50"></text></g><g><title>check_mod_attrs (633,409 samples, 0.61%)</title><rect x="24.0355%" y="165" width="0.6127%" height="15" fill="rgb(238,167,29)"/><text x="24.2855%" y="175.50"></text></g><g><title>check_mod_const_bodies (116,911 samples, 0.11%)</title><rect x="24.6482%" y="165" width="0.1131%" height="15" fill="rgb(232,182,51)"/><text x="24.8982%" y="175.50"></text></g><g><title>lookup_deprecation_entry (103,491 samples, 0.10%)</title><rect x="25.0389%" y="149" width="0.1001%" height="15" fill="rgb(231,60,39)"/><text x="25.2889%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (350,303 samples, 0.34%)</title><rect x="24.8270%" y="165" width="0.3388%" height="15" fill="rgb(208,69,12)"/><text x="25.0770%" y="175.50"></text></g><g><title>misc_checking_1 (1,278,294 samples, 1.24%)</title><rect x="24.0030%" y="181" width="1.2365%" height="15" fill="rgb(235,93,37)"/><text x="24.2530%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (579,017 samples, 0.56%)</title><rect x="25.2410%" y="165" width="0.5601%" height="15" fill="rgb(213,116,39)"/><text x="25.4910%" y="175.50"></text></g><g><title>check_mod_liveness (507,746 samples, 0.49%)</title><rect x="25.3100%" y="149" width="0.4911%" height="15" fill="rgb(222,207,29)"/><text x="25.5600%" y="159.50"></text></g><g><title>misc_checking_2 (945,661 samples, 0.91%)</title><rect x="25.2395%" y="181" width="0.9147%" height="15" fill="rgb(206,96,30)"/><text x="25.4895%" y="191.50"></text></g><g><title>match_checking (365,074 samples, 0.35%)</title><rect x="25.8011%" y="165" width="0.3531%" height="15" fill="rgb(218,138,4)"/><text x="26.0511%" y="175.50"></text></g><g><title>check_match (333,354 samples, 0.32%)</title><rect x="25.8318%" y="149" width="0.3225%" height="15" fill="rgb(250,191,14)"/><text x="26.0818%" y="159.50"></text></g><g><title>check_private_in_public (179,502 samples, 0.17%)</title><rect x="26.1635%" y="165" width="0.1736%" height="15" fill="rgb(239,60,40)"/><text x="26.4135%" y="175.50"></text></g><g><title>death_checking (273,833 samples, 0.26%)</title><rect x="26.3371%" y="165" width="0.2649%" height="15" fill="rgb(206,27,48)"/><text x="26.5871%" y="175.50"></text></g><g><title>param_env (234,985 samples, 0.23%)</title><rect x="26.9735%" y="133" width="0.2273%" height="15" fill="rgb(225,35,8)"/><text x="27.2235%" y="143.50"></text></g><g><title>predicates_of (105,432 samples, 0.10%)</title><rect x="27.0988%" y="117" width="0.1020%" height="15" fill="rgb(250,213,24)"/><text x="27.3488%" y="127.50"></text></g><g><title>crate_lints (1,126,312 samples, 1.09%)</title><rect x="26.6035%" y="149" width="1.0895%" height="15" fill="rgb(247,123,22)"/><text x="26.8535%" y="159.50"></text></g><g><title>type_of (421,736 samples, 0.41%)</title><rect x="27.2851%" y="133" width="0.4079%" height="15" fill="rgb(231,138,38)"/><text x="27.5351%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (340,536 samples, 0.33%)</title><rect x="27.3636%" y="117" width="0.3294%" height="15" fill="rgb(231,145,46)"/><text x="27.6136%" y="127.50"></text></g><g><title>lint_checking (1,370,745 samples, 1.33%)</title><rect x="26.6020%" y="165" width="1.3259%" height="15" fill="rgb(251,118,11)"/><text x="26.8520%" y="175.50"></text></g><g><title>module_lints (242,803 samples, 0.23%)</title><rect x="27.6930%" y="149" width="0.2349%" height="15" fill="rgb(217,147,25)"/><text x="27.9430%" y="159.50"></text></g><g><title>lint_mod (238,383 samples, 0.23%)</title><rect x="27.6973%" y="133" width="0.2306%" height="15" fill="rgb(247,81,37)"/><text x="27.9473%" y="143.50"></text></g><g><title>privacy_access_levels (253,613 samples, 0.25%)</title><rect x="27.9279%" y="165" width="0.2453%" height="15" fill="rgb(209,12,38)"/><text x="28.1779%" y="175.50"></text></g><g><title>privacy_checking_modules (564,826 samples, 0.55%)</title><rect x="28.1732%" y="165" width="0.5464%" height="15" fill="rgb(227,1,9)"/><text x="28.4232%" y="175.50"></text></g><g><title>check_mod_privacy (561,056 samples, 0.54%)</title><rect x="28.1769%" y="149" width="0.5427%" height="15" fill="rgb(248,47,43)"/><text x="28.4269%" y="159.50"></text></g><g><title>misc_checking_3 (2,668,430 samples, 2.58%)</title><rect x="26.1543%" y="181" width="2.5812%" height="15" fill="rgb(221,10,30)"/><text x="26.4043%" y="191.50">mi..</text></g><g><title>impl_trait_ref (233,433 samples, 0.23%)</title><rect x="29.0482%" y="117" width="0.2258%" height="15" fill="rgb(210,229,1)"/><text x="29.2982%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (211,303 samples, 0.20%)</title><rect x="29.0696%" y="101" width="0.2044%" height="15" fill="rgb(222,148,37)"/><text x="29.3196%" y="111.50"></text></g><g><title>coherent_trait (509,806 samples, 0.49%)</title><rect x="28.8187%" y="149" width="0.4931%" height="15" fill="rgb(234,67,33)"/><text x="29.0687%" y="159.50"></text></g><g><title>specialization_graph_of (501,026 samples, 0.48%)</title><rect x="28.8272%" y="133" width="0.4846%" height="15" fill="rgb(247,98,35)"/><text x="29.0772%" y="143.50"></text></g><g><title>coherence_checking (576,566 samples, 0.56%)</title><rect x="28.8081%" y="165" width="0.5577%" height="15" fill="rgb(247,138,52)"/><text x="29.0581%" y="175.50"></text></g><g><title>associated_item (549,216 samples, 0.53%)</title><rect x="42.2507%" y="101" width="0.5313%" height="15" fill="rgb(213,79,30)"/><text x="42.5007%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (422,224 samples, 0.41%)</title><rect x="42.3735%" y="85" width="0.4084%" height="15" fill="rgb(246,177,23)"/><text x="42.6235%" y="95.50"></text></g><g><title>associated_items (773,808 samples, 0.75%)</title><rect x="42.0632%" y="117" width="0.7485%" height="15" fill="rgb(230,62,27)"/><text x="42.3132%" y="127.50"></text></g><g><title>dropck_outlives (224,862 samples, 0.22%)</title><rect x="42.8349%" y="117" width="0.2175%" height="15" fill="rgb(216,154,8)"/><text x="43.0849%" y="127.50"></text></g><g><title>generics_of (173,152 samples, 0.17%)</title><rect x="45.7723%" y="101" width="0.1675%" height="15" fill="rgb(244,35,45)"/><text x="46.0223%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (138,121 samples, 0.13%)</title><rect x="45.8062%" y="85" width="0.1336%" height="15" fill="rgb(251,115,12)"/><text x="46.0562%" y="95.50"></text></g><g><title>impl_trait_ref (226,282 samples, 0.22%)</title><rect x="46.0025%" y="101" width="0.2189%" height="15" fill="rgb(240,54,50)"/><text x="46.2525%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (192,982 samples, 0.19%)</title><rect x="46.0347%" y="85" width="0.1867%" height="15" fill="rgb(233,84,52)"/><text x="46.2847%" y="95.50"></text></g><g><title>predicates_of (191,690 samples, 0.19%)</title><rect x="46.2297%" y="101" width="0.1854%" height="15" fill="rgb(207,117,47)"/><text x="46.4797%" y="111.50"></text></g><g><title>predicates_defined_on (107,130 samples, 0.10%)</title><rect x="46.3115%" y="85" width="0.1036%" height="15" fill="rgb(249,43,39)"/><text x="46.5615%" y="95.50"></text></g><g><title>specializes (359,504 samples, 0.35%)</title><rect x="46.4151%" y="101" width="0.3477%" height="15" fill="rgb(209,38,44)"/><text x="46.6651%" y="111.50"></text></g><g><title>param_env (242,923 samples, 0.23%)</title><rect x="46.5279%" y="85" width="0.2350%" height="15" fill="rgb(236,212,23)"/><text x="46.7779%" y="95.50"></text></g><g><title>def_span (107,400 samples, 0.10%)</title><rect x="46.6590%" y="69" width="0.1039%" height="15" fill="rgb(242,79,21)"/><text x="46.9090%" y="79.50"></text></g><g><title>trait_impls_of (126,752 samples, 0.12%)</title><rect x="46.7664%" y="101" width="0.1226%" height="15" fill="rgb(211,96,35)"/><text x="47.0164%" y="111.50"></text></g><g><title>evaluate_obligation (3,970,322 samples, 3.84%)</title><rect x="43.0524%" y="117" width="3.8405%" height="15" fill="rgb(253,215,40)"/><text x="43.3024%" y="127.50">eval..</text></g><g><title>associated_item (132,521 samples, 0.13%)</title><rect x="47.0868%" y="85" width="0.1282%" height="15" fill="rgb(211,81,21)"/><text x="47.3368%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (121,301 samples, 0.12%)</title><rect x="47.0977%" y="69" width="0.1173%" height="15" fill="rgb(208,190,38)"/><text x="47.3477%" y="79.50"></text></g><g><title>impl_item_implementor_ids (229,852 samples, 0.22%)</title><rect x="47.0287%" y="117" width="0.2223%" height="15" fill="rgb(235,213,38)"/><text x="47.2787%" y="127.50"></text></g><g><title>associated_items (205,012 samples, 0.20%)</title><rect x="47.0528%" y="101" width="0.1983%" height="15" fill="rgb(237,122,38)"/><text x="47.3028%" y="111.50"></text></g><g><title>item_attrs (130,691 samples, 0.13%)</title><rect x="47.3102%" y="117" width="0.1264%" height="15" fill="rgb(244,218,35)"/><text x="47.5602%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (127,761 samples, 0.12%)</title><rect x="47.3130%" y="101" width="0.1236%" height="15" fill="rgb(240,68,47)"/><text x="47.5630%" y="111.50"></text></g><g><title>predicates_of (180,752 samples, 0.17%)</title><rect x="47.5917%" y="117" width="0.1748%" height="15" fill="rgb(210,16,53)"/><text x="47.8417%" y="127.50"></text></g><g><title>predicates_defined_on (116,331 samples, 0.11%)</title><rect x="47.6540%" y="101" width="0.1125%" height="15" fill="rgb(235,124,12)"/><text x="47.9040%" y="111.50"></text></g><g><title>associated_item (148,141 samples, 0.14%)</title><rect x="50.5940%" y="85" width="0.1433%" height="15" fill="rgb(224,169,11)"/><text x="50.8440%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (111,481 samples, 0.11%)</title><rect x="50.6294%" y="69" width="0.1078%" height="15" fill="rgb(250,166,2)"/><text x="50.8794%" y="79.50"></text></g><g><title>associated_items (199,052 samples, 0.19%)</title><rect x="50.5495%" y="101" width="0.1925%" height="15" fill="rgb(242,216,29)"/><text x="50.7995%" y="111.50"></text></g><g><title>evaluate_obligation (425,124 samples, 0.41%)</title><rect x="50.8369%" y="101" width="0.4112%" height="15" fill="rgb(230,116,27)"/><text x="51.0869%" y="111.50"></text></g><g><title>method_autoderef_steps (139,781 samples, 0.14%)</title><rect x="51.5080%" y="101" width="0.1352%" height="15" fill="rgb(228,99,48)"/><text x="51.7580%" y="111.50"></text></g><g><title>predicates_of (142,512 samples, 0.14%)</title><rect x="51.6471%" y="101" width="0.1379%" height="15" fill="rgb(253,11,6)"/><text x="51.8971%" y="111.50"></text></g><g><title>predicates_defined_on (123,032 samples, 0.12%)</title><rect x="51.6660%" y="85" width="0.1190%" height="15" fill="rgb(247,143,39)"/><text x="51.9160%" y="95.50"></text></g><g><title>typeck (4,100,786 samples, 3.97%)</title><rect x="47.8785%" y="117" width="3.9667%" height="15" fill="rgb(236,97,10)"/><text x="48.1285%" y="127.50">type..</text></g><g><title>item_bodies_checking (23,221,726 samples, 22.46%)</title><rect x="29.4121%" y="165" width="22.4624%" height="15" fill="rgb(233,208,19)"/><text x="29.6621%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,219,356 samples, 22.46%)</title><rect x="29.4144%" y="149" width="22.4602%" height="15" fill="rgb(216,164,2)"/><text x="29.6644%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,130,335 samples, 22.37%)</title><rect x="29.5005%" y="133" width="22.3740%" height="15" fill="rgb(220,129,5)"/><text x="29.7505%" y="143.50">typeck</text></g><g><title>item_types_checking (2,263,315 samples, 2.19%)</title><rect x="51.8745%" y="165" width="2.1893%" height="15" fill="rgb(242,17,10)"/><text x="52.1245%" y="175.50">i..</text></g><g><title>check_mod_item_types (2,258,145 samples, 2.18%)</title><rect x="51.8795%" y="149" width="2.1843%" height="15" fill="rgb(242,107,0)"/><text x="52.1295%" y="159.50">c..</text></g><g><title>late_bound_vars_map (166,583 samples, 0.16%)</title><rect x="54.5900%" y="117" width="0.1611%" height="15" fill="rgb(251,28,31)"/><text x="54.8400%" y="127.50"></text></g><g><title>resolve_lifetimes (141,113 samples, 0.14%)</title><rect x="54.6146%" y="101" width="0.1365%" height="15" fill="rgb(233,223,10)"/><text x="54.8646%" y="111.50"></text></g><g><title>fn_sig (485,266 samples, 0.47%)</title><rect x="54.3505%" y="133" width="0.4694%" height="15" fill="rgb(215,21,27)"/><text x="54.6005%" y="143.50"></text></g><g><title>generics_of (242,912 samples, 0.23%)</title><rect x="54.8199%" y="133" width="0.2350%" height="15" fill="rgb(232,23,21)"/><text x="55.0699%" y="143.50"></text></g><g><title>late_bound_vars_map (199,350 samples, 0.19%)</title><rect x="55.5050%" y="85" width="0.1928%" height="15" fill="rgb(244,5,23)"/><text x="55.7550%" y="95.50"></text></g><g><title>resolve_lifetimes (182,390 samples, 0.18%)</title><rect x="55.5214%" y="69" width="0.1764%" height="15" fill="rgb(226,81,46)"/><text x="55.7714%" y="79.50"></text></g><g><title>explicit_predicates_of (480,365 samples, 0.46%)</title><rect x="55.2771%" y="101" width="0.4647%" height="15" fill="rgb(247,70,30)"/><text x="55.5271%" y="111.50"></text></g><g><title>predicates_of (887,607 samples, 0.86%)</title><rect x="55.1313%" y="133" width="0.8586%" height="15" fill="rgb(212,68,19)"/><text x="55.3813%" y="143.50"></text></g><g><title>predicates_defined_on (825,977 samples, 0.80%)</title><rect x="55.1909%" y="117" width="0.7990%" height="15" fill="rgb(240,187,13)"/><text x="55.4409%" y="127.50"></text></g><g><title>inferred_outlives_of (256,582 samples, 0.25%)</title><rect x="55.7417%" y="101" width="0.2482%" height="15" fill="rgb(223,113,26)"/><text x="55.9917%" y="111.50"></text></g><g><title>inferred_outlives_crate (238,872 samples, 0.23%)</title><rect x="55.7589%" y="85" width="0.2311%" height="15" fill="rgb(206,192,2)"/><text x="56.0089%" y="95.50"></text></g><g><title>type_of (198,552 samples, 0.19%)</title><rect x="55.7979%" y="69" width="0.1921%" height="15" fill="rgb(241,108,4)"/><text x="56.0479%" y="79.50"></text></g><g><title>type_param_predicates (131,062 samples, 0.13%)</title><rect x="55.8631%" y="53" width="0.1268%" height="15" fill="rgb(247,173,49)"/><text x="56.1131%" y="63.50"></text></g><g><title>type_param_predicates (123,572 samples, 0.12%)</title><rect x="55.8704%" y="37" width="0.1195%" height="15" fill="rgb(224,114,35)"/><text x="56.1204%" y="47.50"></text></g><g><title>type_collecting (2,161,413 samples, 2.09%)</title><rect x="54.0655%" y="165" width="2.0907%" height="15" fill="rgb(245,159,27)"/><text x="54.3155%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,152,023 samples, 2.08%)</title><rect x="54.0746%" y="149" width="2.0817%" height="15" fill="rgb(245,172,44)"/><text x="54.3246%" y="159.50">c..</text></g><g><title>type_of (171,974 samples, 0.17%)</title><rect x="55.9899%" y="133" width="0.1664%" height="15" fill="rgb(236,23,11)"/><text x="56.2399%" y="143.50"></text></g><g><title>evaluate_obligation (467,684 samples, 0.45%)</title><rect x="58.5585%" y="133" width="0.4524%" height="15" fill="rgb(205,117,38)"/><text x="58.8085%" y="143.50"></text></g><g><title>implied_outlives_bounds (275,304 samples, 0.27%)</title><rect x="59.0109%" y="133" width="0.2663%" height="15" fill="rgb(237,72,25)"/><text x="59.2609%" y="143.50"></text></g><g><title>param_env (493,834 samples, 0.48%)</title><rect x="59.2772%" y="133" width="0.4777%" height="15" fill="rgb(244,70,9)"/><text x="59.5272%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,801,252 samples, 3.68%)</title><rect x="56.3641%" y="149" width="3.6770%" height="15" fill="rgb(217,125,39)"/><text x="56.6141%" y="159.50">chec..</text></g><g><title>region_scope_tree (295,878 samples, 0.29%)</title><rect x="59.7549%" y="133" width="0.2862%" height="15" fill="rgb(235,36,10)"/><text x="60.0049%" y="143.50"></text></g><g><title>evaluate_obligation (291,504 samples, 0.28%)</title><rect x="61.7897%" y="133" width="0.2820%" height="15" fill="rgb(251,123,47)"/><text x="62.0397%" y="143.50"></text></g><g><title>param_env (363,063 samples, 0.35%)</title><rect x="62.2240%" y="133" width="0.3512%" height="15" fill="rgb(221,13,13)"/><text x="62.4740%" y="143.50"></text></g><g><title>check_item_well_formed (2,870,902 samples, 2.78%)</title><rect x="60.0411%" y="149" width="2.7770%" height="15" fill="rgb(238,131,9)"/><text x="60.2911%" y="159.50">ch..</text></g><g><title>evaluate_obligation (111,750 samples, 0.11%)</title><rect x="63.2604%" y="133" width="0.1081%" height="15" fill="rgb(211,50,8)"/><text x="63.5104%" y="143.50"></text></g><g><title>analysis (64,881,577 samples, 62.76%)</title><rect x="0.7957%" y="197" width="62.7602%" height="15" fill="rgb(245,182,24)"/><text x="1.0457%" y="207.50">analysis</text></g><g><title>type_check_crate (35,997,387 samples, 34.82%)</title><rect x="28.7355%" y="181" width="34.8204%" height="15" fill="rgb(242,14,37)"/><text x="28.9855%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,643,335 samples, 7.39%)</title><rect x="56.1624%" y="165" width="7.3934%" height="15" fill="rgb(246,228,12)"/><text x="56.4124%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (762,628 samples, 0.74%)</title><rect x="62.8181%" y="149" width="0.7377%" height="15" fill="rgb(213,55,15)"/><text x="63.0681%" y="159.50"></text></g><g><title>codegen_crate (484,376 samples, 0.47%)</title><rect x="63.5667%" y="197" width="0.4685%" height="15" fill="rgb(209,9,3)"/><text x="63.8167%" y="207.50"></text></g><g><title>AST_validation (314,733 samples, 0.30%)</title><rect x="64.2647%" y="181" width="0.3044%" height="15" fill="rgb(230,59,30)"/><text x="64.5147%" y="191.50"></text></g><g><title>complete_gated_feature_checking (116,901 samples, 0.11%)</title><rect x="64.5691%" y="181" width="0.1131%" height="15" fill="rgb(209,121,21)"/><text x="64.8191%" y="191.50"></text></g><g><title>metadata_register_crate (222,562 samples, 0.22%)</title><rect x="82.7782%" y="149" width="0.2153%" height="15" fill="rgb(220,109,13)"/><text x="83.0282%" y="159.50"></text></g><g><title>macro_expand_crate (19,182,122 samples, 18.55%)</title><rect x="64.7608%" y="181" width="18.5549%" height="15" fill="rgb(232,18,1)"/><text x="65.0108%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (19,165,502 samples, 18.54%)</title><rect x="64.7769%" y="165" width="18.5389%" height="15" fill="rgb(215,41,42)"/><text x="65.0269%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (333,203 samples, 0.32%)</title><rect x="82.9934%" y="149" width="0.3223%" height="15" fill="rgb(224,123,36)"/><text x="83.2434%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (157,671 samples, 0.15%)</title><rect x="83.3218%" y="181" width="0.1525%" height="15" fill="rgb(240,125,3)"/><text x="83.5718%" y="191.50"></text></g><g><title>finalize_macro_resolutions (350,544 samples, 0.34%)</title><rect x="83.5594%" y="165" width="0.3391%" height="15" fill="rgb(205,98,50)"/><text x="83.8094%" y="175.50"></text></g><g><title>late_resolve_crate (2,673,840 samples, 2.59%)</title><rect x="83.8985%" y="165" width="2.5864%" height="15" fill="rgb(205,185,37)"/><text x="84.1485%" y="175.50">la..</text></g><g><title>configure_and_expand (23,401,859 samples, 22.64%)</title><rect x="64.0353%" y="197" width="22.6367%" height="15" fill="rgb(238,207,15)"/><text x="64.2853%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,305,687 samples, 3.20%)</title><rect x="83.4743%" y="181" width="3.1976%" height="15" fill="rgb(213,199,42)"/><text x="83.7243%" y="191.50">res..</text></g><g><title>drop_ast (282,884 samples, 0.27%)</title><rect x="86.6720%" y="197" width="0.2736%" height="15" fill="rgb(235,201,11)"/><text x="86.9220%" y="207.50"></text></g><g><title>early_lint_checks (470,005 samples, 0.45%)</title><rect x="86.9606%" y="197" width="0.4546%" height="15" fill="rgb(207,46,11)"/><text x="87.2106%" y="207.50"></text></g><g><title>free_global_ctxt (1,996,122 samples, 1.93%)</title><rect x="87.4152%" y="197" width="1.9309%" height="15" fill="rgb(241,35,35)"/><text x="87.6652%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,196,263 samples, 1.16%)</title><rect x="89.3461%" y="197" width="1.1571%" height="15" fill="rgb(243,32,47)"/><text x="89.5961%" y="207.50"></text></g><g><title>hir_lowering (6,439,151 samples, 6.23%)</title><rect x="90.5032%" y="197" width="6.2286%" height="15" fill="rgb(247,202,23)"/><text x="90.7532%" y="207.50">hir_lowe..</text></g><g><title>parse_crate (1,940,812 samples, 1.88%)</title><rect x="96.7766%" y="197" width="1.8774%" height="15" fill="rgb(219,102,11)"/><text x="97.0266%" y="207.50">p..</text></g><g><title>prepare_outputs (325,294 samples, 0.31%)</title><rect x="98.6642%" y="197" width="0.3147%" height="15" fill="rgb(243,110,44)"/><text x="98.9142%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (576,556 samples, 0.56%)</title><rect x="98.9788%" y="197" width="0.5577%" height="15" fill="rgb(222,74,54)"/><text x="99.2288%" y="207.50"></text></g><g><title>setup_global_ctxt (117,251 samples, 0.11%)</title><rect x="99.5463%" y="197" width="0.1134%" height="15" fill="rgb(216,99,12)"/><text x="99.7963%" y="207.50"></text></g><g><title>all (103,380,204 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (103,380,204 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (351,734 samples, 0.34%)</title><rect x="99.6598%" y="197" width="0.3402%" height="15" fill="rgb(213,25,53)"/><text x="99.9098%" y="207.50"></text></g></svg></svg>