<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (481,524 samples, 0.39%)</title><rect x="13.6515%" y="117" width="0.3917%" height="15" fill="rgb(227,0,7)"/><text x="13.9015%" y="127.50"></text></g><g><title>item_attrs (789,037 samples, 0.64%)</title><rect x="14.5543%" y="85" width="0.6419%" height="15" fill="rgb(217,0,24)"/><text x="14.8043%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (774,557 samples, 0.63%)</title><rect x="14.5661%" y="69" width="0.6301%" height="15" fill="rgb(221,193,54)"/><text x="14.8161%" y="79.50"></text></g><g><title>codegen_fn_attrs (927,559 samples, 0.75%)</title><rect x="14.4649%" y="101" width="0.7546%" height="15" fill="rgb(248,212,6)"/><text x="14.7149%" y="111.50"></text></g><g><title>is_copy_raw (142,000 samples, 0.12%)</title><rect x="18.5127%" y="53" width="0.1155%" height="15" fill="rgb(208,68,35)"/><text x="18.7627%" y="63.50"></text></g><g><title>param_env (148,142 samples, 0.12%)</title><rect x="18.6282%" y="53" width="0.1205%" height="15" fill="rgb(232,128,0)"/><text x="18.8782%" y="63.50"></text></g><g><title>adt_drop_tys (429,723 samples, 0.35%)</title><rect x="18.3999%" y="69" width="0.3496%" height="15" fill="rgb(207,160,47)"/><text x="18.6499%" y="79.50"></text></g><g><title>needs_drop_raw (1,301,241 samples, 1.06%)</title><rect x="18.3168%" y="85" width="1.0586%" height="15" fill="rgb(228,23,34)"/><text x="18.5668%" y="95.50"></text></g><g><title>is_copy_raw (769,326 samples, 0.63%)</title><rect x="18.7495%" y="69" width="0.6259%" height="15" fill="rgb(218,30,26)"/><text x="18.9995%" y="79.50"></text></g><g><title>evaluate_obligation (662,084 samples, 0.54%)</title><rect x="18.8368%" y="53" width="0.5386%" height="15" fill="rgb(220,122,19)"/><text x="19.0868%" y="63.50"></text></g><g><title>impl_parent (830,772 samples, 0.68%)</title><rect x="20.5640%" y="53" width="0.6759%" height="15" fill="rgb(250,228,42)"/><text x="20.8140%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (541,769 samples, 0.44%)</title><rect x="20.7991%" y="37" width="0.4407%" height="15" fill="rgb(240,193,28)"/><text x="21.0491%" y="47.50"></text></g><g><title>specialization_graph_of (3,974,146 samples, 3.23%)</title><rect x="19.6153%" y="69" width="3.2331%" height="15" fill="rgb(216,20,37)"/><text x="19.8653%" y="79.50">spe..</text></g><g><title>impl_trait_ref (1,977,245 samples, 1.61%)</title><rect x="21.2398%" y="53" width="1.6085%" height="15" fill="rgb(206,188,39)"/><text x="21.4898%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,699,855 samples, 1.38%)</title><rect x="21.4655%" y="37" width="1.3829%" height="15" fill="rgb(217,207,13)"/><text x="21.7155%" y="47.50"></text></g><g><title>resolve_instance (4,324,629 samples, 3.52%)</title><rect x="19.3754%" y="85" width="3.5182%" height="15" fill="rgb(231,73,38)"/><text x="19.6254%" y="95.50">res..</text></g><g><title>thir_body (1,387,576 samples, 1.13%)</title><rect x="22.9078%" y="85" width="1.1288%" height="15" fill="rgb(225,20,46)"/><text x="23.1578%" y="95.50"></text></g><g><title>mir_const (13,782,704 samples, 11.21%)</title><rect x="12.8379%" y="133" width="11.2126%" height="15" fill="rgb(210,31,41)"/><text x="13.0879%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (12,301,158 samples, 10.01%)</title><rect x="14.0432%" y="117" width="10.0073%" height="15" fill="rgb(221,200,47)"/><text x="14.2932%" y="127.50">unsafety_check..</text></g><g><title>mir_built (10,855,301 samples, 8.83%)</title><rect x="15.2195%" y="101" width="8.8311%" height="15" fill="rgb(226,26,5)"/><text x="15.4695%" y="111.50">mir_built</text></g><g><title>mir_promoted (15,171,663 samples, 12.34%)</title><rect x="12.0099%" y="149" width="12.3426%" height="15" fill="rgb(249,33,26)"/><text x="12.2599%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (371,126 samples, 0.30%)</title><rect x="24.0506%" y="133" width="0.3019%" height="15" fill="rgb(235,183,28)"/><text x="24.3006%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (182,691 samples, 0.15%)</title><rect x="24.3557%" y="149" width="0.1486%" height="15" fill="rgb(221,5,38)"/><text x="24.6057%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (533,206 samples, 0.43%)</title><rect x="24.5043%" y="149" width="0.4338%" height="15" fill="rgb(247,18,42)"/><text x="24.7543%" y="159.50"></text></g><g><title>normalize_projection_ty (346,833 samples, 0.28%)</title><rect x="24.6560%" y="133" width="0.2822%" height="15" fill="rgb(241,131,45)"/><text x="24.9060%" y="143.50"></text></g><g><title>type_op_normalize_predicate (240,342 samples, 0.20%)</title><rect x="24.9381%" y="149" width="0.1955%" height="15" fill="rgb(249,31,29)"/><text x="25.1881%" y="159.50"></text></g><g><title>normalize_projection_ty (144,451 samples, 0.12%)</title><rect x="25.0161%" y="133" width="0.1175%" height="15" fill="rgb(225,111,53)"/><text x="25.2661%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,534,945 samples, 1.25%)</title><rect x="25.1336%" y="149" width="1.2487%" height="15" fill="rgb(238,160,17)"/><text x="25.3836%" y="159.50"></text></g><g><title>evaluate_obligation (178,402 samples, 0.15%)</title><rect x="26.2372%" y="133" width="0.1451%" height="15" fill="rgb(214,148,48)"/><text x="26.4872%" y="143.50"></text></g><g><title>MIR_borrow_checking (31,523,554 samples, 25.65%)</title><rect x="0.7403%" y="181" width="25.6453%" height="15" fill="rgb(232,36,49)"/><text x="0.9903%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,473,644 samples, 25.60%)</title><rect x="0.7809%" y="165" width="25.6047%" height="15" fill="rgb(209,103,24)"/><text x="1.0309%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (139,671 samples, 0.11%)</title><rect x="26.4809%" y="181" width="0.1136%" height="15" fill="rgb(229,88,8)"/><text x="26.7309%" y="191.50"></text></g><g><title>codegen_fn_attrs (209,572 samples, 0.17%)</title><rect x="26.7822%" y="149" width="0.1705%" height="15" fill="rgb(213,181,19)"/><text x="27.0322%" y="159.50"></text></g><g><title>check_mod_attrs (418,765 samples, 0.34%)</title><rect x="26.6121%" y="165" width="0.3407%" height="15" fill="rgb(254,191,54)"/><text x="26.8621%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (358,894 samples, 0.29%)</title><rect x="27.0799%" y="165" width="0.2920%" height="15" fill="rgb(241,83,37)"/><text x="27.3299%" y="175.50"></text></g><g><title>misc_checking_1 (1,004,101 samples, 0.82%)</title><rect x="26.5948%" y="181" width="0.8169%" height="15" fill="rgb(233,36,39)"/><text x="26.8448%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (595,726 samples, 0.48%)</title><rect x="27.4134%" y="165" width="0.4846%" height="15" fill="rgb(226,3,54)"/><text x="27.6634%" y="175.50"></text></g><g><title>check_mod_liveness (484,235 samples, 0.39%)</title><rect x="27.5041%" y="149" width="0.3939%" height="15" fill="rgb(245,192,40)"/><text x="27.7541%" y="159.50"></text></g><g><title>misc_checking_2 (1,310,134 samples, 1.07%)</title><rect x="27.4117%" y="181" width="1.0658%" height="15" fill="rgb(238,167,29)"/><text x="27.6617%" y="191.50"></text></g><g><title>match_checking (712,388 samples, 0.58%)</title><rect x="27.8980%" y="165" width="0.5795%" height="15" fill="rgb(232,182,51)"/><text x="28.1480%" y="175.50"></text></g><g><title>check_match (697,357 samples, 0.57%)</title><rect x="27.9102%" y="149" width="0.5673%" height="15" fill="rgb(231,60,39)"/><text x="28.1602%" y="159.50"></text></g><g><title>check_private_in_public (135,722 samples, 0.11%)</title><rect x="28.4857%" y="165" width="0.1104%" height="15" fill="rgb(208,69,12)"/><text x="28.7357%" y="175.50"></text></g><g><title>death_checking (361,754 samples, 0.29%)</title><rect x="28.5961%" y="165" width="0.2943%" height="15" fill="rgb(235,93,37)"/><text x="28.8461%" y="175.50"></text></g><g><title>eval_to_const_value_raw (398,014 samples, 0.32%)</title><rect x="29.2469%" y="85" width="0.3238%" height="15" fill="rgb(213,116,39)"/><text x="29.4969%" y="95.50"></text></g><g><title>eval_to_const_value_raw (397,364 samples, 0.32%)</title><rect x="29.2474%" y="69" width="0.3233%" height="15" fill="rgb(222,207,29)"/><text x="29.4974%" y="79.50"></text></g><g><title>eval_to_allocation_raw (395,674 samples, 0.32%)</title><rect x="29.2488%" y="53" width="0.3219%" height="15" fill="rgb(206,96,30)"/><text x="29.4988%" y="63.50"></text></g><g><title>eval_to_allocation_raw (443,785 samples, 0.36%)</title><rect x="29.2107%" y="133" width="0.3610%" height="15" fill="rgb(218,138,4)"/><text x="29.4607%" y="143.50"></text></g><g><title>eval_to_allocation_raw (443,135 samples, 0.36%)</title><rect x="29.2112%" y="117" width="0.3605%" height="15" fill="rgb(250,191,14)"/><text x="29.4612%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (405,914 samples, 0.33%)</title><rect x="29.2415%" y="101" width="0.3302%" height="15" fill="rgb(239,60,40)"/><text x="29.4915%" y="111.50"></text></g><g><title>param_env (298,282 samples, 0.24%)</title><rect x="29.6630%" y="133" width="0.2427%" height="15" fill="rgb(206,27,48)"/><text x="29.9130%" y="143.50"></text></g><g><title>predicates_of (131,501 samples, 0.11%)</title><rect x="29.7987%" y="117" width="0.1070%" height="15" fill="rgb(225,35,8)"/><text x="30.0487%" y="127.50"></text></g><g><title>crate_lints (1,362,595 samples, 1.11%)</title><rect x="28.8916%" y="149" width="1.1085%" height="15" fill="rgb(250,213,24)"/><text x="29.1416%" y="159.50"></text></g><g><title>lint_checking (1,939,322 samples, 1.58%)</title><rect x="28.8904%" y="165" width="1.5777%" height="15" fill="rgb(247,123,22)"/><text x="29.1404%" y="175.50"></text></g><g><title>module_lints (575,207 samples, 0.47%)</title><rect x="30.0002%" y="149" width="0.4679%" height="15" fill="rgb(231,138,38)"/><text x="30.2502%" y="159.50"></text></g><g><title>lint_mod (570,307 samples, 0.46%)</title><rect x="30.0041%" y="133" width="0.4640%" height="15" fill="rgb(231,145,46)"/><text x="30.2541%" y="143.50"></text></g><g><title>privacy_checking_modules (821,359 samples, 0.67%)</title><rect x="30.5488%" y="165" width="0.6682%" height="15" fill="rgb(251,118,11)"/><text x="30.7988%" y="175.50"></text></g><g><title>check_mod_privacy (817,918 samples, 0.67%)</title><rect x="30.5516%" y="149" width="0.6654%" height="15" fill="rgb(217,147,25)"/><text x="30.8016%" y="159.50"></text></g><g><title>misc_checking_3 (3,379,198 samples, 2.75%)</title><rect x="28.4775%" y="181" width="2.7491%" height="15" fill="rgb(247,81,37)"/><text x="28.7275%" y="191.50">mi..</text></g><g><title>impl_parent (523,803 samples, 0.43%)</title><rect x="31.8858%" y="117" width="0.4261%" height="15" fill="rgb(209,12,38)"/><text x="32.1358%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (343,502 samples, 0.28%)</title><rect x="32.0325%" y="101" width="0.2794%" height="15" fill="rgb(227,1,9)"/><text x="32.2825%" y="111.50"></text></g><g><title>impl_trait_ref (1,741,294 samples, 1.42%)</title><rect x="32.3119%" y="117" width="1.4166%" height="15" fill="rgb(248,47,43)"/><text x="32.5619%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,554,552 samples, 1.26%)</title><rect x="32.4639%" y="101" width="1.2647%" height="15" fill="rgb(221,10,30)"/><text x="32.7139%" y="111.50"></text></g><g><title>coherent_trait (3,166,465 samples, 2.58%)</title><rect x="31.2862%" y="149" width="2.5760%" height="15" fill="rgb(210,229,1)"/><text x="31.5362%" y="159.50">co..</text></g><g><title>specialization_graph_of (3,160,405 samples, 2.57%)</title><rect x="31.2911%" y="133" width="2.5711%" height="15" fill="rgb(222,148,37)"/><text x="31.5411%" y="143.50">sp..</text></g><g><title>trait_impls_of (164,282 samples, 0.13%)</title><rect x="33.7285%" y="117" width="0.1336%" height="15" fill="rgb(234,67,33)"/><text x="33.9785%" y="127.50"></text></g><g><title>coherence_checking (3,217,606 samples, 2.62%)</title><rect x="31.2781%" y="165" width="2.6176%" height="15" fill="rgb(247,98,35)"/><text x="31.5281%" y="175.50">co..</text></g><g><title>associated_item (388,574 samples, 0.32%)</title><rect x="49.8123%" y="101" width="0.3161%" height="15" fill="rgb(247,138,52)"/><text x="50.0623%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (304,242 samples, 0.25%)</title><rect x="49.8809%" y="85" width="0.2475%" height="15" fill="rgb(213,79,30)"/><text x="50.1309%" y="95.50"></text></g><g><title>associated_items (546,455 samples, 0.44%)</title><rect x="49.7071%" y="117" width="0.4446%" height="15" fill="rgb(246,177,23)"/><text x="49.9571%" y="127.50"></text></g><g><title>adt_dtorck_constraint (275,482 samples, 0.22%)</title><rect x="50.4190%" y="85" width="0.2241%" height="15" fill="rgb(230,62,27)"/><text x="50.6690%" y="95.50"></text></g><g><title>adt_dtorck_constraint (380,795 samples, 0.31%)</title><rect x="50.3624%" y="101" width="0.3098%" height="15" fill="rgb(216,154,8)"/><text x="50.6124%" y="111.50"></text></g><g><title>dropck_outlives (542,585 samples, 0.44%)</title><rect x="50.2390%" y="117" width="0.4414%" height="15" fill="rgb(244,35,45)"/><text x="50.4890%" y="127.50"></text></g><g><title>adt_sized_constraint (195,084 samples, 0.16%)</title><rect x="51.5149%" y="101" width="0.1587%" height="15" fill="rgb(251,115,12)"/><text x="51.7649%" y="111.50"></text></g><g><title>predicates_of (224,284 samples, 0.18%)</title><rect x="51.7939%" y="101" width="0.1825%" height="15" fill="rgb(240,54,50)"/><text x="52.0439%" y="111.50"></text></g><g><title>predicates_defined_on (131,971 samples, 0.11%)</title><rect x="51.8690%" y="85" width="0.1074%" height="15" fill="rgb(233,84,52)"/><text x="52.1190%" y="95.50"></text></g><g><title>specializes (181,712 samples, 0.15%)</title><rect x="51.9764%" y="101" width="0.1478%" height="15" fill="rgb(207,117,47)"/><text x="52.2264%" y="111.50"></text></g><g><title>trait_impls_of (439,905 samples, 0.36%)</title><rect x="52.1343%" y="101" width="0.3579%" height="15" fill="rgb(249,43,39)"/><text x="52.3843%" y="111.50"></text></g><g><title>implementations_of_trait (151,013 samples, 0.12%)</title><rect x="52.3693%" y="85" width="0.1229%" height="15" fill="rgb(209,38,44)"/><text x="52.6193%" y="95.50"></text></g><g><title>evaluate_obligation (2,227,605 samples, 1.81%)</title><rect x="50.6804%" y="117" width="1.8122%" height="15" fill="rgb(236,212,23)"/><text x="50.9304%" y="127.50">e..</text></g><g><title>fn_sig (165,881 samples, 0.13%)</title><rect x="52.5104%" y="117" width="0.1349%" height="15" fill="rgb(242,79,21)"/><text x="52.7604%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (139,041 samples, 0.11%)</title><rect x="52.5322%" y="101" width="0.1131%" height="15" fill="rgb(211,96,35)"/><text x="52.7822%" y="111.50"></text></g><g><title>generics_of (195,033 samples, 0.16%)</title><rect x="52.6453%" y="117" width="0.1587%" height="15" fill="rgb(253,215,40)"/><text x="52.8953%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (145,153 samples, 0.12%)</title><rect x="52.6859%" y="101" width="0.1181%" height="15" fill="rgb(211,81,21)"/><text x="52.9359%" y="111.50"></text></g><g><title>impl_item_implementor_ids (231,192 samples, 0.19%)</title><rect x="52.8040%" y="117" width="0.1881%" height="15" fill="rgb(208,190,38)"/><text x="53.0540%" y="127.50"></text></g><g><title>associated_items (203,382 samples, 0.17%)</title><rect x="52.8266%" y="101" width="0.1655%" height="15" fill="rgb(235,213,38)"/><text x="53.0766%" y="111.50"></text></g><g><title>item_attrs (136,701 samples, 0.11%)</title><rect x="53.1161%" y="117" width="0.1112%" height="15" fill="rgb(237,122,38)"/><text x="53.3661%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (129,481 samples, 0.11%)</title><rect x="53.1219%" y="101" width="0.1053%" height="15" fill="rgb(244,218,35)"/><text x="53.3719%" y="111.50"></text></g><g><title>evaluate_obligation (131,181 samples, 0.11%)</title><rect x="53.4321%" y="101" width="0.1067%" height="15" fill="rgb(240,68,47)"/><text x="53.6821%" y="111.50"></text></g><g><title>method_autoderef_steps (306,247 samples, 0.25%)</title><rect x="53.2977%" y="117" width="0.2491%" height="15" fill="rgb(210,16,53)"/><text x="53.5477%" y="127.50"></text></g><g><title>explicit_predicates_of (133,152 samples, 0.11%)</title><rect x="53.7650%" y="85" width="0.1083%" height="15" fill="rgb(235,124,12)"/><text x="54.0150%" y="95.50"></text></g><g><title>predicates_of (426,467 samples, 0.35%)</title><rect x="53.5827%" y="117" width="0.3469%" height="15" fill="rgb(224,169,11)"/><text x="53.8327%" y="127.50"></text></g><g><title>predicates_defined_on (306,545 samples, 0.25%)</title><rect x="53.6802%" y="101" width="0.2494%" height="15" fill="rgb(250,166,2)"/><text x="53.9302%" y="111.50"></text></g><g><title>associated_item (141,992 samples, 0.12%)</title><rect x="60.2232%" y="85" width="0.1155%" height="15" fill="rgb(242,216,29)"/><text x="60.4732%" y="95.50"></text></g><g><title>associated_items (214,653 samples, 0.17%)</title><rect x="60.1745%" y="101" width="0.1746%" height="15" fill="rgb(230,116,27)"/><text x="60.4245%" y="111.50"></text></g><g><title>adt_dtorck_constraint (131,672 samples, 0.11%)</title><rect x="60.4949%" y="53" width="0.1071%" height="15" fill="rgb(228,99,48)"/><text x="60.7449%" y="63.50"></text></g><g><title>adt_dtorck_constraint (169,813 samples, 0.14%)</title><rect x="60.4720%" y="69" width="0.1381%" height="15" fill="rgb(253,11,6)"/><text x="60.7220%" y="79.50"></text></g><g><title>dropck_outlives (293,664 samples, 0.24%)</title><rect x="60.3793%" y="101" width="0.2389%" height="15" fill="rgb(247,143,39)"/><text x="60.6293%" y="111.50"></text></g><g><title>adt_dtorck_constraint (242,803 samples, 0.20%)</title><rect x="60.4206%" y="85" width="0.1975%" height="15" fill="rgb(236,97,10)"/><text x="60.6706%" y="95.50"></text></g><g><title>adt_sized_constraint (161,501 samples, 0.13%)</title><rect x="62.7372%" y="85" width="0.1314%" height="15" fill="rgb(233,208,19)"/><text x="62.9872%" y="95.50"></text></g><g><title>generics_of (898,290 samples, 0.73%)</title><rect x="62.8686%" y="85" width="0.7308%" height="15" fill="rgb(216,164,2)"/><text x="63.1186%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (725,749 samples, 0.59%)</title><rect x="63.0089%" y="69" width="0.5904%" height="15" fill="rgb(220,129,5)"/><text x="63.2589%" y="79.50"></text></g><g><title>impl_trait_ref (826,682 samples, 0.67%)</title><rect x="63.6523%" y="85" width="0.6725%" height="15" fill="rgb(242,17,10)"/><text x="63.9023%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (655,699 samples, 0.53%)</title><rect x="63.7913%" y="69" width="0.5334%" height="15" fill="rgb(242,107,0)"/><text x="64.0413%" y="79.50"></text></g><g><title>predicates_of (313,692 samples, 0.26%)</title><rect x="64.3440%" y="85" width="0.2552%" height="15" fill="rgb(251,28,31)"/><text x="64.5940%" y="95.50"></text></g><g><title>predicates_defined_on (190,530 samples, 0.16%)</title><rect x="64.4442%" y="69" width="0.1550%" height="15" fill="rgb(233,223,10)"/><text x="64.6942%" y="79.50"></text></g><g><title>specializes (642,249 samples, 0.52%)</title><rect x="64.5992%" y="85" width="0.5225%" height="15" fill="rgb(215,21,27)"/><text x="64.8492%" y="95.50"></text></g><g><title>param_env (368,037 samples, 0.30%)</title><rect x="64.8223%" y="69" width="0.2994%" height="15" fill="rgb(232,23,21)"/><text x="65.0723%" y="79.50"></text></g><g><title>def_span (136,872 samples, 0.11%)</title><rect x="65.0103%" y="53" width="0.1113%" height="15" fill="rgb(244,5,23)"/><text x="65.2603%" y="63.50"></text></g><g><title>trait_impls_of (564,929 samples, 0.46%)</title><rect x="65.1354%" y="85" width="0.4596%" height="15" fill="rgb(226,81,46)"/><text x="65.3854%" y="95.50"></text></g><g><title>implementations_of_trait (175,091 samples, 0.14%)</title><rect x="65.4525%" y="69" width="0.1424%" height="15" fill="rgb(247,70,30)"/><text x="65.7025%" y="79.50"></text></g><g><title>evaluate_obligation (6,141,030 samples, 5.00%)</title><rect x="60.6182%" y="101" width="4.9959%" height="15" fill="rgb(212,68,19)"/><text x="60.8682%" y="111.50">evalua..</text></g><g><title>generics_of (643,844 samples, 0.52%)</title><rect x="65.6898%" y="101" width="0.5238%" height="15" fill="rgb(240,187,13)"/><text x="65.9398%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (497,423 samples, 0.40%)</title><rect x="65.8089%" y="85" width="0.4047%" height="15" fill="rgb(223,113,26)"/><text x="66.0589%" y="95.50"></text></g><g><title>is_copy_raw (209,422 samples, 0.17%)</title><rect x="66.3330%" y="101" width="0.1704%" height="15" fill="rgb(206,192,2)"/><text x="66.5830%" y="111.50"></text></g><g><title>evaluate_obligation (193,852 samples, 0.16%)</title><rect x="66.3457%" y="85" width="0.1577%" height="15" fill="rgb(241,108,4)"/><text x="66.5957%" y="95.50"></text></g><g><title>trait_impls_of (130,221 samples, 0.11%)</title><rect x="66.3974%" y="69" width="0.1059%" height="15" fill="rgb(247,173,49)"/><text x="66.6474%" y="79.50"></text></g><g><title>lint_levels (229,683 samples, 0.19%)</title><rect x="66.5767%" y="101" width="0.1869%" height="15" fill="rgb(224,114,35)"/><text x="66.8267%" y="111.50"></text></g><g><title>object_safety_violations (167,412 samples, 0.14%)</title><rect x="66.8912%" y="101" width="0.1362%" height="15" fill="rgb(245,159,27)"/><text x="67.1412%" y="111.50"></text></g><g><title>predicates_of (284,564 samples, 0.23%)</title><rect x="67.0413%" y="101" width="0.2315%" height="15" fill="rgb(245,172,44)"/><text x="67.2913%" y="111.50"></text></g><g><title>predicates_defined_on (198,073 samples, 0.16%)</title><rect x="67.1117%" y="85" width="0.1611%" height="15" fill="rgb(236,23,11)"/><text x="67.3617%" y="95.50"></text></g><g><title>typeck (16,494,325 samples, 13.42%)</title><rect x="54.0302%" y="117" width="13.4186%" height="15" fill="rgb(205,117,38)"/><text x="54.2802%" y="127.50">typeck</text></g><g><title>item_bodies_checking (41,292,383 samples, 33.59%)</title><rect x="33.9111%" y="165" width="33.5925%" height="15" fill="rgb(237,72,25)"/><text x="34.1611%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (41,289,813 samples, 33.59%)</title><rect x="33.9132%" y="149" width="33.5905%" height="15" fill="rgb(244,70,9)"/><text x="34.1632%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (41,259,453 samples, 33.57%)</title><rect x="33.9379%" y="133" width="33.5658%" height="15" fill="rgb(217,125,39)"/><text x="34.1879%" y="143.50">typeck</text></g><g><title>impl_trait_ref (215,464 samples, 0.18%)</title><rect x="67.7503%" y="85" width="0.1753%" height="15" fill="rgb(235,36,10)"/><text x="68.0003%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (194,724 samples, 0.16%)</title><rect x="67.7672%" y="69" width="0.1584%" height="15" fill="rgb(251,123,47)"/><text x="68.0172%" y="79.50"></text></g><g><title>adt_destructor (394,934 samples, 0.32%)</title><rect x="67.6245%" y="133" width="0.3213%" height="15" fill="rgb(221,13,13)"/><text x="67.8745%" y="143.50"></text></g><g><title>coherent_trait (386,494 samples, 0.31%)</title><rect x="67.6313%" y="117" width="0.3144%" height="15" fill="rgb(238,131,9)"/><text x="67.8813%" y="127.50"></text></g><g><title>specialization_graph_of (384,934 samples, 0.31%)</title><rect x="67.6326%" y="101" width="0.3132%" height="15" fill="rgb(211,50,8)"/><text x="67.8826%" y="111.50"></text></g><g><title>item_types_checking (1,081,872 samples, 0.88%)</title><rect x="67.5036%" y="165" width="0.8801%" height="15" fill="rgb(245,182,24)"/><text x="67.7536%" y="175.50"></text></g><g><title>check_mod_item_types (1,078,522 samples, 0.88%)</title><rect x="67.5064%" y="149" width="0.8774%" height="15" fill="rgb(242,14,37)"/><text x="67.7564%" y="159.50"></text></g><g><title>typeck (475,985 samples, 0.39%)</title><rect x="67.9965%" y="133" width="0.3872%" height="15" fill="rgb(246,228,12)"/><text x="68.2465%" y="143.50"></text></g><g><title>fn_sig (276,952 samples, 0.23%)</title><rect x="68.5213%" y="133" width="0.2253%" height="15" fill="rgb(213,55,15)"/><text x="68.7713%" y="143.50"></text></g><g><title>named_region_map (142,633 samples, 0.12%)</title><rect x="68.7928%" y="117" width="0.1160%" height="15" fill="rgb(209,9,3)"/><text x="69.0428%" y="127.50"></text></g><g><title>resolve_lifetimes (135,653 samples, 0.11%)</title><rect x="68.7985%" y="101" width="0.1104%" height="15" fill="rgb(230,59,30)"/><text x="69.0485%" y="111.50"></text></g><g><title>generics_of (206,514 samples, 0.17%)</title><rect x="68.7466%" y="133" width="0.1680%" height="15" fill="rgb(209,121,21)"/><text x="68.9966%" y="143.50"></text></g><g><title>predicates_of (214,443 samples, 0.17%)</title><rect x="68.9269%" y="133" width="0.1745%" height="15" fill="rgb(220,109,13)"/><text x="69.1769%" y="143.50"></text></g><g><title>predicates_defined_on (192,612 samples, 0.16%)</title><rect x="68.9447%" y="117" width="0.1567%" height="15" fill="rgb(232,18,1)"/><text x="69.1947%" y="127.50"></text></g><g><title>type_collecting (911,150 samples, 0.74%)</title><rect x="68.3870%" y="165" width="0.7412%" height="15" fill="rgb(215,41,42)"/><text x="68.6370%" y="175.50"></text></g><g><title>collect_mod_item_types (898,860 samples, 0.73%)</title><rect x="68.3970%" y="149" width="0.7312%" height="15" fill="rgb(224,123,36)"/><text x="68.6470%" y="159.50"></text></g><g><title>check_impl_item_well_formed (312,163 samples, 0.25%)</title><rect x="69.2033%" y="149" width="0.2540%" height="15" fill="rgb(240,125,3)"/><text x="69.4533%" y="159.50"></text></g><g><title>adt_sized_constraint (156,751 samples, 0.13%)</title><rect x="70.1244%" y="101" width="0.1275%" height="15" fill="rgb(205,98,50)"/><text x="70.3744%" y="111.50"></text></g><g><title>adt_sized_constraint (223,081 samples, 0.18%)</title><rect x="70.0744%" y="117" width="0.1815%" height="15" fill="rgb(205,185,37)"/><text x="70.3244%" y="127.50"></text></g><g><title>evaluate_obligation (570,288 samples, 0.46%)</title><rect x="69.9055%" y="133" width="0.4639%" height="15" fill="rgb(238,207,15)"/><text x="70.1555%" y="143.50"></text></g><g><title>param_env (177,042 samples, 0.14%)</title><rect x="70.4494%" y="133" width="0.1440%" height="15" fill="rgb(213,199,42)"/><text x="70.6994%" y="143.50"></text></g><g><title>region_scope_tree (309,521 samples, 0.25%)</title><rect x="70.6310%" y="133" width="0.2518%" height="15" fill="rgb(235,201,11)"/><text x="70.8810%" y="143.50"></text></g><g><title>analysis (86,533,800 samples, 70.40%)</title><rect x="0.5019%" y="197" width="70.3978%" height="15" fill="rgb(207,46,11)"/><text x="0.7519%" y="207.50">analysis</text></g><g><title>type_check_crate (48,766,627 samples, 39.67%)</title><rect x="31.2266%" y="181" width="39.6731%" height="15" fill="rgb(241,35,35)"/><text x="31.4766%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,175,134 samples, 1.77%)</title><rect x="69.1301%" y="165" width="1.7695%" height="15" fill="rgb(243,32,47)"/><text x="69.3801%" y="175.50"></text></g><g><title>check_item_well_formed (1,773,041 samples, 1.44%)</title><rect x="69.4573%" y="149" width="1.4424%" height="15" fill="rgb(247,202,23)"/><text x="69.7073%" y="159.50"></text></g><g><title>is_compiler_builtins (197,052 samples, 0.16%)</title><rect x="71.3384%" y="181" width="0.1603%" height="15" fill="rgb(219,102,11)"/><text x="71.5884%" y="191.50"></text></g><g><title>codegen_crate (776,899 samples, 0.63%)</title><rect x="70.9093%" y="197" width="0.6320%" height="15" fill="rgb(243,110,44)"/><text x="71.1593%" y="207.50"></text></g><g><title>metadata_load_macro (155,360 samples, 0.13%)</title><rect x="85.6875%" y="149" width="0.1264%" height="15" fill="rgb(222,74,54)"/><text x="85.9375%" y="159.50"></text></g><g><title>metadata_register_crate (2,673,671 samples, 2.18%)</title><rect x="85.8138%" y="149" width="2.1751%" height="15" fill="rgb(216,99,12)"/><text x="86.0638%" y="159.50">m..</text></g><g><title>metadata_register_crate (973,560 samples, 0.79%)</title><rect x="87.1969%" y="133" width="0.7920%" height="15" fill="rgb(226,22,26)"/><text x="87.4469%" y="143.50"></text></g><g><title>macro_expand_crate (20,002,144 samples, 16.27%)</title><rect x="71.9242%" y="181" width="16.2723%" height="15" fill="rgb(217,163,10)"/><text x="72.1742%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (19,987,474 samples, 16.26%)</title><rect x="71.9362%" y="165" width="16.2604%" height="15" fill="rgb(213,25,53)"/><text x="72.1862%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (255,192 samples, 0.21%)</title><rect x="87.9890%" y="149" width="0.2076%" height="15" fill="rgb(252,105,26)"/><text x="88.2390%" y="159.50"></text></g><g><title>maybe_create_a_macro_crate (240,143 samples, 0.20%)</title><rect x="88.1979%" y="181" width="0.1954%" height="15" fill="rgb(220,39,43)"/><text x="88.4479%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (284,883 samples, 0.23%)</title><rect x="88.3933%" y="181" width="0.2318%" height="15" fill="rgb(229,68,48)"/><text x="88.6433%" y="191.50"></text></g><g><title>late_resolve_crate (2,180,695 samples, 1.77%)</title><rect x="88.7338%" y="165" width="1.7741%" height="15" fill="rgb(252,8,32)"/><text x="88.9838%" y="175.50">l..</text></g><g><title>configure_and_expand (23,414,073 samples, 19.05%)</title><rect x="71.5413%" y="197" width="19.0480%" height="15" fill="rgb(223,20,43)"/><text x="71.7913%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,414,607 samples, 1.96%)</title><rect x="88.6250%" y="181" width="1.9644%" height="15" fill="rgb(229,81,49)"/><text x="88.8750%" y="191.50">r..</text></g><g><title>drop_ast (150,221 samples, 0.12%)</title><rect x="90.5894%" y="197" width="0.1222%" height="15" fill="rgb(236,28,36)"/><text x="90.8394%" y="207.50"></text></g><g><title>early_lint_checks (364,584 samples, 0.30%)</title><rect x="90.7276%" y="197" width="0.2966%" height="15" fill="rgb(249,185,26)"/><text x="90.9776%" y="207.50"></text></g><g><title>free_global_ctxt (3,816,723 samples, 3.11%)</title><rect x="91.0242%" y="197" width="3.1050%" height="15" fill="rgb(249,174,33)"/><text x="91.2742%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (179,852 samples, 0.15%)</title><rect x="94.1292%" y="197" width="0.1463%" height="15" fill="rgb(233,201,37)"/><text x="94.3792%" y="207.50"></text></g><g><title>hir_lowering (2,214,485 samples, 1.80%)</title><rect x="94.2755%" y="197" width="1.8015%" height="15" fill="rgb(221,78,26)"/><text x="94.5255%" y="207.50">h..</text></g><g><title>parse_crate (3,355,787 samples, 2.73%)</title><rect x="96.1189%" y="197" width="2.7300%" height="15" fill="rgb(250,127,30)"/><text x="96.3689%" y="207.50">pa..</text></g><g><title>prepare_outputs (179,832 samples, 0.15%)</title><rect x="98.8565%" y="197" width="0.1463%" height="15" fill="rgb(230,49,44)"/><text x="99.1065%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (835,509 samples, 0.68%)</title><rect x="99.0028%" y="197" width="0.6797%" height="15" fill="rgb(229,67,23)"/><text x="99.2528%" y="207.50"></text></g><g><title>all (122,921,257 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (122,921,257 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (286,973 samples, 0.23%)</title><rect x="99.7665%" y="197" width="0.2335%" height="15" fill="rgb(238,154,13)"/><text x="100.0165%" y="207.50"></text></g></svg></svg>