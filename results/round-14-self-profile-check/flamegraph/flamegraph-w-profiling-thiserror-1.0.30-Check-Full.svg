<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>specialization_graph_of (136,302 samples, 0.36%)</title><rect x="6.2399%" y="101" width="0.3591%" height="15" fill="rgb(227,0,7)"/><text x="6.4899%" y="111.50"></text></g><g><title>impl_trait_ref (69,821 samples, 0.18%)</title><rect x="6.4150%" y="85" width="0.1839%" height="15" fill="rgb(217,0,24)"/><text x="6.6650%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (63,441 samples, 0.17%)</title><rect x="6.4318%" y="69" width="0.1671%" height="15" fill="rgb(221,193,54)"/><text x="6.6818%" y="79.50"></text></g><g><title>resolve_instance (171,083 samples, 0.45%)</title><rect x="6.1613%" y="117" width="0.4507%" height="15" fill="rgb(248,212,6)"/><text x="6.4113%" y="127.50"></text></g><g><title>thir_body (41,871 samples, 0.11%)</title><rect x="6.6229%" y="117" width="0.1103%" height="15" fill="rgb(208,68,35)"/><text x="6.8729%" y="127.50"></text></g><g><title>mir_const (652,267 samples, 1.72%)</title><rect x="5.0208%" y="165" width="1.7184%" height="15" fill="rgb(232,128,0)"/><text x="5.2708%" y="175.50"></text></g><g><title>unsafety_check_result (485,196 samples, 1.28%)</title><rect x="5.4609%" y="149" width="1.2783%" height="15" fill="rgb(207,160,47)"/><text x="5.7109%" y="159.50"></text></g><g><title>mir_built (401,996 samples, 1.06%)</title><rect x="5.6801%" y="133" width="1.0591%" height="15" fill="rgb(228,23,34)"/><text x="5.9301%" y="143.50"></text></g><g><title>mir_promoted (766,319 samples, 2.02%)</title><rect x="4.7422%" y="181" width="2.0189%" height="15" fill="rgb(218,30,26)"/><text x="4.9922%" y="191.50">m..</text></g><g><title>MIR_borrow_checking (2,103,363 samples, 5.54%)</title><rect x="1.9291%" y="213" width="5.5414%" height="15" fill="rgb(220,122,19)"/><text x="2.1791%" y="223.50">MIR_bor..</text></g><g><title>mir_borrowck (2,087,833 samples, 5.50%)</title><rect x="1.9700%" y="197" width="5.5005%" height="15" fill="rgb(250,228,42)"/><text x="2.2200%" y="207.50">mir_bor..</text></g><g><title>type_op_prove_predicate (237,382 samples, 0.63%)</title><rect x="6.8451%" y="181" width="0.6254%" height="15" fill="rgb(240,193,28)"/><text x="7.0951%" y="191.50"></text></g><g><title>hir_module_items (129,401 samples, 0.34%)</title><rect x="7.4823%" y="213" width="0.3409%" height="15" fill="rgb(216,20,37)"/><text x="7.7323%" y="223.50"></text></g><g><title>get_lang_items (86,851 samples, 0.23%)</title><rect x="8.3212%" y="165" width="0.2288%" height="15" fill="rgb(206,188,39)"/><text x="8.5712%" y="175.50"></text></g><g><title>should_inherit_track_caller (61,610 samples, 0.16%)</title><rect x="8.5500%" y="165" width="0.1623%" height="15" fill="rgb(217,207,13)"/><text x="8.8000%" y="175.50"></text></g><g><title>codegen_fn_attrs (232,062 samples, 0.61%)</title><rect x="8.1827%" y="181" width="0.6114%" height="15" fill="rgb(231,73,38)"/><text x="8.4327%" y="191.50"></text></g><g><title>check_mod_attrs (329,852 samples, 0.87%)</title><rect x="7.9263%" y="197" width="0.8690%" height="15" fill="rgb(225,20,46)"/><text x="8.1763%" y="207.50"></text></g><g><title>check_mod_const_bodies (51,861 samples, 0.14%)</title><rect x="8.7954%" y="197" width="0.1366%" height="15" fill="rgb(210,31,41)"/><text x="9.0454%" y="207.50"></text></g><g><title>lookup_deprecation_entry (43,650 samples, 0.11%)</title><rect x="9.2757%" y="181" width="0.1150%" height="15" fill="rgb(221,200,47)"/><text x="9.5257%" y="191.50"></text></g><g><title>lookup_stability (72,660 samples, 0.19%)</title><rect x="9.3907%" y="181" width="0.1914%" height="15" fill="rgb(226,26,5)"/><text x="9.6407%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (233,263 samples, 0.61%)</title><rect x="9.0128%" y="197" width="0.6145%" height="15" fill="rgb(249,33,26)"/><text x="9.2628%" y="207.50"></text></g><g><title>looking_for_derive_registrar (46,761 samples, 0.12%)</title><rect x="9.6346%" y="197" width="0.1232%" height="15" fill="rgb(235,183,28)"/><text x="9.8846%" y="207.50"></text></g><g><title>misc_checking_1 (737,488 samples, 1.94%)</title><rect x="7.8242%" y="213" width="1.9429%" height="15" fill="rgb(221,5,38)"/><text x="8.0742%" y="223.50">m..</text></g><g><title>liveness_and_intrinsic_checking (46,761 samples, 0.12%)</title><rect x="9.7706%" y="197" width="0.1232%" height="15" fill="rgb(247,18,42)"/><text x="10.0206%" y="207.50"></text></g><g><title>misc_checking_2 (127,292 samples, 0.34%)</title><rect x="9.7672%" y="213" width="0.3354%" height="15" fill="rgb(241,131,45)"/><text x="10.0172%" y="223.50"></text></g><g><title>match_checking (79,221 samples, 0.21%)</title><rect x="9.8938%" y="197" width="0.2087%" height="15" fill="rgb(249,31,29)"/><text x="10.1438%" y="207.50"></text></g><g><title>check_match (74,261 samples, 0.20%)</title><rect x="9.9069%" y="181" width="0.1956%" height="15" fill="rgb(225,111,53)"/><text x="10.1569%" y="191.50"></text></g><g><title>check_private_in_public (43,141 samples, 0.11%)</title><rect x="10.1202%" y="197" width="0.1137%" height="15" fill="rgb(238,160,17)"/><text x="10.3702%" y="207.50"></text></g><g><title>death_checking (130,871 samples, 0.34%)</title><rect x="10.2339%" y="197" width="0.3448%" height="15" fill="rgb(214,148,48)"/><text x="10.4839%" y="207.50"></text></g><g><title>lint_levels (47,720 samples, 0.13%)</title><rect x="10.4530%" y="181" width="0.1257%" height="15" fill="rgb(232,36,49)"/><text x="10.7030%" y="191.50"></text></g><g><title>crate_lints (195,993 samples, 0.52%)</title><rect x="10.5820%" y="181" width="0.5164%" height="15" fill="rgb(209,103,24)"/><text x="10.8320%" y="191.50"></text></g><g><title>param_env (102,652 samples, 0.27%)</title><rect x="10.8279%" y="165" width="0.2704%" height="15" fill="rgb(229,88,8)"/><text x="11.0779%" y="175.50"></text></g><g><title>predicates_of (53,272 samples, 0.14%)</title><rect x="10.9580%" y="149" width="0.1403%" height="15" fill="rgb(213,181,19)"/><text x="11.2080%" y="159.50"></text></g><g><title>predicates_defined_on (44,592 samples, 0.12%)</title><rect x="10.9809%" y="133" width="0.1175%" height="15" fill="rgb(254,191,54)"/><text x="11.2309%" y="143.50"></text></g><g><title>lint_checking (233,453 samples, 0.62%)</title><rect x="10.5787%" y="197" width="0.6150%" height="15" fill="rgb(241,83,37)"/><text x="10.8287%" y="207.50"></text></g><g><title>privacy_access_levels (57,510 samples, 0.15%)</title><rect x="11.1937%" y="197" width="0.1515%" height="15" fill="rgb(233,36,39)"/><text x="11.4437%" y="207.50"></text></g><g><title>privacy_checking_modules (142,512 samples, 0.38%)</title><rect x="11.3452%" y="197" width="0.3755%" height="15" fill="rgb(226,3,54)"/><text x="11.5952%" y="207.50"></text></g><g><title>check_mod_privacy (140,122 samples, 0.37%)</title><rect x="11.3515%" y="181" width="0.3692%" height="15" fill="rgb(245,192,40)"/><text x="11.6015%" y="191.50"></text></g><g><title>misc_checking_3 (629,017 samples, 1.66%)</title><rect x="10.1025%" y="213" width="1.6572%" height="15" fill="rgb(238,167,29)"/><text x="10.3525%" y="223.50"></text></g><g><title>evaluate_obligation (405,734 samples, 1.07%)</title><rect x="12.8069%" y="149" width="1.0689%" height="15" fill="rgb(232,182,51)"/><text x="13.0569%" y="159.50"></text></g><g><title>trait_impls_of (44,210 samples, 0.12%)</title><rect x="13.7593%" y="133" width="0.1165%" height="15" fill="rgb(231,60,39)"/><text x="14.0093%" y="143.50"></text></g><g><title>fn_sig (80,420 samples, 0.21%)</title><rect x="13.8758%" y="149" width="0.2119%" height="15" fill="rgb(208,69,12)"/><text x="14.1258%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (74,950 samples, 0.20%)</title><rect x="13.8902%" y="133" width="0.1975%" height="15" fill="rgb(235,93,37)"/><text x="14.1402%" y="143.50"></text></g><g><title>layout_of (66,651 samples, 0.18%)</title><rect x="14.2750%" y="133" width="0.1756%" height="15" fill="rgb(213,116,39)"/><text x="14.5250%" y="143.50"></text></g><g><title>is_sized_raw (38,330 samples, 0.10%)</title><rect x="14.3496%" y="117" width="0.1010%" height="15" fill="rgb(222,207,29)"/><text x="14.5996%" y="127.50"></text></g><g><title>layout_of (130,492 samples, 0.34%)</title><rect x="14.1183%" y="149" width="0.3438%" height="15" fill="rgb(206,96,30)"/><text x="14.3683%" y="159.50"></text></g><g><title>param_env (131,571 samples, 0.35%)</title><rect x="14.4621%" y="149" width="0.3466%" height="15" fill="rgb(218,138,4)"/><text x="14.7121%" y="159.50"></text></g><g><title>predicates_of (103,482 samples, 0.27%)</title><rect x="14.8087%" y="149" width="0.2726%" height="15" fill="rgb(250,191,14)"/><text x="15.0587%" y="159.50"></text></g><g><title>predicates_defined_on (70,940 samples, 0.19%)</title><rect x="14.8945%" y="133" width="0.1869%" height="15" fill="rgb(239,60,40)"/><text x="15.1445%" y="143.50"></text></g><g><title>object_safety_violations (1,196,734 samples, 3.15%)</title><rect x="11.9596%" y="165" width="3.1528%" height="15" fill="rgb(206,27,48)"/><text x="12.2096%" y="175.50">obj..</text></g><g><title>item_attrs (38,550 samples, 0.10%)</title><rect x="16.0620%" y="149" width="0.1016%" height="15" fill="rgb(225,35,8)"/><text x="16.3120%" y="159.50"></text></g><g><title>coherent_trait (1,642,038 samples, 4.33%)</title><rect x="11.8867%" y="181" width="4.3260%" height="15" fill="rgb(250,213,24)"/><text x="12.1367%" y="191.50">coher..</text></g><g><title>specialization_graph_of (417,624 samples, 1.10%)</title><rect x="15.1125%" y="165" width="1.1002%" height="15" fill="rgb(247,123,22)"/><text x="15.3625%" y="175.50"></text></g><g><title>coherence_checking (1,695,849 samples, 4.47%)</title><rect x="11.8405%" y="197" width="4.4678%" height="15" fill="rgb(231,138,38)"/><text x="12.0905%" y="207.50">coher..</text></g><g><title>associated_item (55,401 samples, 0.15%)</title><rect x="20.8403%" y="133" width="0.1460%" height="15" fill="rgb(231,145,46)"/><text x="21.0903%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (41,161 samples, 0.11%)</title><rect x="20.8778%" y="117" width="0.1084%" height="15" fill="rgb(251,118,11)"/><text x="21.1278%" y="127.50"></text></g><g><title>associated_items (80,261 samples, 0.21%)</title><rect x="20.7815%" y="149" width="0.2115%" height="15" fill="rgb(217,147,25)"/><text x="21.0315%" y="159.50"></text></g><g><title>impl_parent (97,450 samples, 0.26%)</title><rect x="21.3351%" y="53" width="0.2567%" height="15" fill="rgb(247,81,37)"/><text x="21.5851%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (76,190 samples, 0.20%)</title><rect x="21.3911%" y="37" width="0.2007%" height="15" fill="rgb(209,12,38)"/><text x="21.6411%" y="47.50"></text></g><g><title>impl_trait_ref (324,673 samples, 0.86%)</title><rect x="21.5918%" y="53" width="0.8554%" height="15" fill="rgb(227,1,9)"/><text x="21.8418%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (304,643 samples, 0.80%)</title><rect x="21.6446%" y="37" width="0.8026%" height="15" fill="rgb(248,47,43)"/><text x="21.8946%" y="47.50"></text></g><g><title>adt_destructor (554,156 samples, 1.46%)</title><rect x="21.0701%" y="117" width="1.4599%" height="15" fill="rgb(221,10,30)"/><text x="21.3201%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (553,606 samples, 1.46%)</title><rect x="21.0715%" y="101" width="1.4585%" height="15" fill="rgb(210,229,1)"/><text x="21.3215%" y="111.50"></text></g><g><title>coherent_trait (550,336 samples, 1.45%)</title><rect x="21.0801%" y="85" width="1.4499%" height="15" fill="rgb(222,148,37)"/><text x="21.3301%" y="95.50"></text></g><g><title>specialization_graph_of (548,596 samples, 1.45%)</title><rect x="21.0847%" y="69" width="1.4453%" height="15" fill="rgb(234,67,33)"/><text x="21.3347%" y="79.50"></text></g><g><title>dropck_outlives (583,036 samples, 1.54%)</title><rect x="20.9970%" y="149" width="1.5360%" height="15" fill="rgb(247,98,35)"/><text x="21.2470%" y="159.50"></text></g><g><title>adt_dtorck_constraint (559,956 samples, 1.48%)</title><rect x="21.0578%" y="133" width="1.4752%" height="15" fill="rgb(247,138,52)"/><text x="21.3078%" y="143.50"></text></g><g><title>evaluate_obligation (53,940 samples, 0.14%)</title><rect x="22.7950%" y="133" width="0.1421%" height="15" fill="rgb(213,79,30)"/><text x="23.0450%" y="143.50"></text></g><g><title>method_autoderef_steps (107,490 samples, 0.28%)</title><rect x="22.6800%" y="149" width="0.2832%" height="15" fill="rgb(246,177,23)"/><text x="22.9300%" y="159.50"></text></g><g><title>item_bodies_checking (2,569,078 samples, 6.77%)</title><rect x="16.3901%" y="197" width="6.7683%" height="15" fill="rgb(230,62,27)"/><text x="16.6401%" y="207.50">item_bodi..</text></g><g><title>typeck_item_bodies (2,567,218 samples, 6.76%)</title><rect x="16.3950%" y="181" width="6.7634%" height="15" fill="rgb(216,154,8)"/><text x="16.6450%" y="191.50">typeck_it..</text></g><g><title>typeck (2,548,328 samples, 6.71%)</title><rect x="16.4447%" y="165" width="6.7137%" height="15" fill="rgb(244,35,45)"/><text x="16.6947%" y="175.50">typeck</text></g><g><title>item_types_checking (400,345 samples, 1.05%)</title><rect x="23.1584%" y="197" width="1.0547%" height="15" fill="rgb(251,115,12)"/><text x="23.4084%" y="207.50"></text></g><g><title>check_mod_item_types (394,805 samples, 1.04%)</title><rect x="23.1730%" y="181" width="1.0401%" height="15" fill="rgb(240,54,50)"/><text x="23.4230%" y="191.50"></text></g><g><title>fn_sig (152,893 samples, 0.40%)</title><rect x="24.6879%" y="165" width="0.4028%" height="15" fill="rgb(233,84,52)"/><text x="24.9379%" y="175.50"></text></g><g><title>resolve_lifetimes (154,163 samples, 0.41%)</title><rect x="25.3981%" y="133" width="0.4061%" height="15" fill="rgb(207,117,47)"/><text x="25.6481%" y="143.50"></text></g><g><title>is_late_bound_map (207,593 samples, 0.55%)</title><rect x="25.3157%" y="149" width="0.5469%" height="15" fill="rgb(249,43,39)"/><text x="25.5657%" y="159.50"></text></g><g><title>named_region_map (83,691 samples, 0.22%)</title><rect x="25.8626%" y="149" width="0.2205%" height="15" fill="rgb(209,38,44)"/><text x="26.1126%" y="159.50"></text></g><g><title>resolve_lifetimes (69,101 samples, 0.18%)</title><rect x="25.9010%" y="133" width="0.1820%" height="15" fill="rgb(236,212,23)"/><text x="26.1510%" y="143.50"></text></g><g><title>generics_of (390,025 samples, 1.03%)</title><rect x="25.0907%" y="165" width="1.0275%" height="15" fill="rgb(242,79,21)"/><text x="25.3407%" y="175.50"></text></g><g><title>explicit_predicates_of (133,963 samples, 0.35%)</title><rect x="26.3971%" y="133" width="0.3529%" height="15" fill="rgb(211,96,35)"/><text x="26.6471%" y="143.50"></text></g><g><title>predicates_of (218,123 samples, 0.57%)</title><rect x="26.2085%" y="165" width="0.5747%" height="15" fill="rgb(253,215,40)"/><text x="26.4585%" y="175.50"></text></g><g><title>predicates_defined_on (185,713 samples, 0.49%)</title><rect x="26.2938%" y="149" width="0.4893%" height="15" fill="rgb(211,81,21)"/><text x="26.5438%" y="159.50"></text></g><g><title>super_predicates_of (55,430 samples, 0.15%)</title><rect x="26.7831%" y="165" width="0.1460%" height="15" fill="rgb(208,190,38)"/><text x="27.0331%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (46,430 samples, 0.12%)</title><rect x="26.8068%" y="149" width="0.1223%" height="15" fill="rgb(235,213,38)"/><text x="27.0568%" y="159.50"></text></g><g><title>associated_items (42,220 samples, 0.11%)</title><rect x="27.7579%" y="149" width="0.1112%" height="15" fill="rgb(237,122,38)"/><text x="28.0079%" y="159.50"></text></g><g><title>type_collecting (1,462,466 samples, 3.85%)</title><rect x="24.2171%" y="197" width="3.8529%" height="15" fill="rgb(244,218,35)"/><text x="24.4671%" y="207.50">type..</text></g><g><title>collect_mod_item_types (1,443,466 samples, 3.80%)</title><rect x="24.2672%" y="181" width="3.8029%" height="15" fill="rgb(240,68,47)"/><text x="24.5172%" y="191.50">coll..</text></g><g><title>type_of (423,474 samples, 1.12%)</title><rect x="26.9544%" y="165" width="1.1157%" height="15" fill="rgb(210,16,53)"/><text x="27.2044%" y="175.50"></text></g><g><title>evaluate_obligation (285,585 samples, 0.75%)</title><rect x="29.9414%" y="165" width="0.7524%" height="15" fill="rgb(235,124,12)"/><text x="30.1914%" y="175.50"></text></g><g><title>implied_outlives_bounds (127,641 samples, 0.34%)</title><rect x="30.6938%" y="165" width="0.3363%" height="15" fill="rgb(224,169,11)"/><text x="30.9438%" y="175.50"></text></g><g><title>param_env (88,331 samples, 0.23%)</title><rect x="31.0300%" y="165" width="0.2327%" height="15" fill="rgb(250,166,2)"/><text x="31.2800%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,172,362 samples, 3.09%)</title><rect x="28.3113%" y="181" width="3.0886%" height="15" fill="rgb(242,216,29)"/><text x="28.5613%" y="191.50">che..</text></g><g><title>region_scope_tree (52,070 samples, 0.14%)</title><rect x="31.2628%" y="165" width="0.1372%" height="15" fill="rgb(230,116,27)"/><text x="31.5128%" y="175.50"></text></g><g><title>implied_outlives_bounds (80,631 samples, 0.21%)</title><rect x="34.1309%" y="165" width="0.2124%" height="15" fill="rgb(228,99,48)"/><text x="34.3809%" y="175.50"></text></g><g><title>param_env (137,582 samples, 0.36%)</title><rect x="34.3433%" y="165" width="0.3625%" height="15" fill="rgb(253,11,6)"/><text x="34.5933%" y="175.50"></text></g><g><title>check_item_well_formed (1,821,131 samples, 4.80%)</title><rect x="31.3999%" y="181" width="4.7978%" height="15" fill="rgb(247,143,39)"/><text x="31.6499%" y="191.50">check_..</text></g><g><title>trait_impls_of (527,785 samples, 1.39%)</title><rect x="34.8073%" y="165" width="1.3905%" height="15" fill="rgb(236,97,10)"/><text x="35.0573%" y="175.50"></text></g><g><title>implementations_of_trait (143,842 samples, 0.38%)</title><rect x="35.8188%" y="149" width="0.3790%" height="15" fill="rgb(233,208,19)"/><text x="36.0688%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (114,162 samples, 0.30%)</title><rect x="35.8970%" y="133" width="0.3008%" height="15" fill="rgb(216,164,2)"/><text x="36.1470%" y="143.50"></text></g><g><title>evaluate_obligation (180,223 samples, 0.47%)</title><rect x="37.0096%" y="165" width="0.4748%" height="15" fill="rgb(220,129,5)"/><text x="37.2596%" y="175.50"></text></g><g><title>implied_outlives_bounds (97,001 samples, 0.26%)</title><rect x="37.4844%" y="165" width="0.2556%" height="15" fill="rgb(242,17,10)"/><text x="37.7344%" y="175.50"></text></g><g><title>analysis (13,773,504 samples, 36.29%)</title><rect x="1.5544%" y="229" width="36.2869%" height="15" fill="rgb(242,107,0)"/><text x="1.8044%" y="239.50">analysis</text></g><g><title>type_check_crate (9,899,850 samples, 26.08%)</title><rect x="11.7597%" y="213" width="26.0816%" height="15" fill="rgb(251,28,31)"/><text x="12.0097%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,708,171 samples, 9.77%)</title><rect x="28.0719%" y="197" width="9.7693%" height="15" fill="rgb(233,223,10)"/><text x="28.3219%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (623,827 samples, 1.64%)</title><rect x="36.1978%" y="181" width="1.6435%" height="15" fill="rgb(215,21,27)"/><text x="36.4478%" y="191.50"></text></g><g><title>codegen_crate (331,544 samples, 0.87%)</title><rect x="37.8635%" y="229" width="0.8735%" height="15" fill="rgb(232,23,21)"/><text x="38.1135%" y="239.50"></text></g><g><title>AST_validation (109,361 samples, 0.29%)</title><rect x="39.2173%" y="213" width="0.2881%" height="15" fill="rgb(244,5,23)"/><text x="39.4673%" y="223.50"></text></g><g><title>crate_injection (83,081 samples, 0.22%)</title><rect x="39.5786%" y="213" width="0.2189%" height="15" fill="rgb(226,81,46)"/><text x="39.8286%" y="223.50"></text></g><g><title>metadata_load_macro (39,950 samples, 0.11%)</title><rect x="65.7144%" y="181" width="0.1052%" height="15" fill="rgb(247,70,30)"/><text x="65.9644%" y="191.50"></text></g><g><title>metadata_register_crate (7,272,650 samples, 19.16%)</title><rect x="65.8196%" y="181" width="19.1601%" height="15" fill="rgb(212,68,19)"/><text x="66.0696%" y="191.50">metadata_register_crate</text></g><g><title>metadata_register_crate (858,769 samples, 2.26%)</title><rect x="82.7173%" y="165" width="2.2625%" height="15" fill="rgb(240,187,13)"/><text x="82.9673%" y="175.50">m..</text></g><g><title>metadata_register_crate (62,570 samples, 0.16%)</title><rect x="84.8149%" y="149" width="0.1648%" height="15" fill="rgb(223,113,26)"/><text x="85.0649%" y="159.50"></text></g><g><title>macro_expand_crate (17,199,261 samples, 45.31%)</title><rect x="39.7975%" y="213" width="45.3122%" height="15" fill="rgb(206,192,2)"/><text x="40.0475%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (17,176,221 samples, 45.25%)</title><rect x="39.8582%" y="197" width="45.2515%" height="15" fill="rgb(241,108,4)"/><text x="40.1082%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (49,331 samples, 0.13%)</title><rect x="84.9797%" y="181" width="0.1300%" height="15" fill="rgb(247,173,49)"/><text x="85.2297%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (108,381 samples, 0.29%)</title><rect x="85.1239%" y="213" width="0.2855%" height="15" fill="rgb(224,114,35)"/><text x="85.3739%" y="223.50"></text></g><g><title>finalize_imports (218,873 samples, 0.58%)</title><rect x="85.4293%" y="197" width="0.5766%" height="15" fill="rgb(245,159,27)"/><text x="85.6793%" y="207.50"></text></g><g><title>late_resolve_crate (409,565 samples, 1.08%)</title><rect x="86.0358%" y="197" width="1.0790%" height="15" fill="rgb(245,172,44)"/><text x="86.2858%" y="207.50"></text></g><g><title>configure_and_expand (18,419,125 samples, 48.53%)</title><rect x="38.7369%" y="229" width="48.5260%" height="15" fill="rgb(236,23,11)"/><text x="38.9869%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (703,508 samples, 1.85%)</title><rect x="85.4095%" y="213" width="1.8534%" height="15" fill="rgb(205,117,38)"/><text x="85.6595%" y="223.50">r..</text></g><g><title>drop_ast (51,720 samples, 0.14%)</title><rect x="87.2629%" y="229" width="0.1363%" height="15" fill="rgb(237,72,25)"/><text x="87.5129%" y="239.50"></text></g><g><title>early_lint_checks (156,151 samples, 0.41%)</title><rect x="87.4389%" y="229" width="0.4114%" height="15" fill="rgb(244,70,9)"/><text x="87.6889%" y="239.50"></text></g><g><title>free_global_ctxt (1,710,629 samples, 4.51%)</title><rect x="87.8502%" y="229" width="4.5067%" height="15" fill="rgb(217,125,39)"/><text x="88.1002%" y="239.50">free_..</text></g><g><title>crate_hash (67,581 samples, 0.18%)</title><rect x="93.1531%" y="213" width="0.1780%" height="15" fill="rgb(235,36,10)"/><text x="93.4031%" y="223.50"></text></g><g><title>generate_crate_metadata (469,235 samples, 1.24%)</title><rect x="92.3570%" y="229" width="1.2362%" height="15" fill="rgb(251,123,47)"/><text x="92.6070%" y="239.50"></text></g><g><title>hir_lowering (792,519 samples, 2.09%)</title><rect x="93.5932%" y="229" width="2.0879%" height="15" fill="rgb(221,13,13)"/><text x="93.8432%" y="239.50">h..</text></g><g><title>link (45,591 samples, 0.12%)</title><rect x="95.6811%" y="229" width="0.1201%" height="15" fill="rgb(238,131,9)"/><text x="95.9311%" y="239.50"></text></g><g><title>parse_crate (556,847 samples, 1.47%)</title><rect x="95.8012%" y="229" width="1.4670%" height="15" fill="rgb(211,50,8)"/><text x="96.0512%" y="239.50"></text></g><g><title>prepare_outputs (268,693 samples, 0.71%)</title><rect x="97.2870%" y="229" width="0.7079%" height="15" fill="rgb(245,182,24)"/><text x="97.5370%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (329,044 samples, 0.87%)</title><rect x="97.9949%" y="229" width="0.8669%" height="15" fill="rgb(242,14,37)"/><text x="98.2449%" y="239.50"></text></g><g><title>setup_global_ctxt (115,432 samples, 0.30%)</title><rect x="98.8909%" y="229" width="0.3041%" height="15" fill="rgb(246,228,12)"/><text x="99.1409%" y="239.50"></text></g><g><title>all (37,957,253 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (37,957,253 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (305,543 samples, 0.80%)</title><rect x="99.1950%" y="229" width="0.8050%" height="15" fill="rgb(230,59,30)"/><text x="99.4450%" y="239.50"></text></g></svg></svg>