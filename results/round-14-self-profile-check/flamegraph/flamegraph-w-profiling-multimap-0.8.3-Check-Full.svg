<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (300,322 samples, 0.20%)</title><rect x="9.8980%" y="165" width="0.2034%" height="15" fill="rgb(227,0,7)"/><text x="10.1480%" y="175.50"></text></g><g><title>is_sized_raw (201,382 samples, 0.14%)</title><rect x="10.1449%" y="165" width="0.1364%" height="15" fill="rgb(217,0,24)"/><text x="10.3949%" y="175.50"></text></g><g><title>param_env (613,315 samples, 0.42%)</title><rect x="11.3964%" y="133" width="0.4153%" height="15" fill="rgb(221,193,54)"/><text x="11.6464%" y="143.50"></text></g><g><title>item_attrs (483,816 samples, 0.33%)</title><rect x="12.2210%" y="101" width="0.3276%" height="15" fill="rgb(248,212,6)"/><text x="12.4710%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (466,736 samples, 0.32%)</title><rect x="12.2326%" y="85" width="0.3160%" height="15" fill="rgb(208,68,35)"/><text x="12.4826%" y="95.50"></text></g><g><title>codegen_fn_attrs (635,728 samples, 0.43%)</title><rect x="12.1331%" y="117" width="0.4305%" height="15" fill="rgb(232,128,0)"/><text x="12.3831%" y="127.50"></text></g><g><title>adt_drop_tys (236,132 samples, 0.16%)</title><rect x="14.4523%" y="69" width="0.1599%" height="15" fill="rgb(207,160,47)"/><text x="14.7023%" y="79.50"></text></g><g><title>adt_drop_tys (494,077 samples, 0.33%)</title><rect x="14.4307%" y="85" width="0.3345%" height="15" fill="rgb(228,23,34)"/><text x="14.6807%" y="95.50"></text></g><g><title>is_copy_raw (1,237,003 samples, 0.84%)</title><rect x="14.7653%" y="85" width="0.8376%" height="15" fill="rgb(218,30,26)"/><text x="15.0153%" y="95.50"></text></g><g><title>evaluate_obligation (948,010 samples, 0.64%)</title><rect x="14.9609%" y="69" width="0.6419%" height="15" fill="rgb(220,122,19)"/><text x="15.2109%" y="79.50"></text></g><g><title>needs_drop_raw (1,930,091 samples, 1.31%)</title><rect x="14.2998%" y="101" width="1.3069%" height="15" fill="rgb(250,228,42)"/><text x="14.5498%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (621,006 samples, 0.42%)</title><rect x="15.8123%" y="85" width="0.4205%" height="15" fill="rgb(240,193,28)"/><text x="16.0623%" y="95.50"></text></g><g><title>specialization_graph_of (284,902 samples, 0.19%)</title><rect x="16.3009%" y="85" width="0.1929%" height="15" fill="rgb(216,20,37)"/><text x="16.5509%" y="95.50"></text></g><g><title>resolve_instance (1,459,012 samples, 0.99%)</title><rect x="15.6067%" y="101" width="0.9879%" height="15" fill="rgb(206,188,39)"/><text x="15.8567%" y="111.50"></text></g><g><title>thir_body (771,338 samples, 0.52%)</title><rect x="16.6177%" y="101" width="0.5223%" height="15" fill="rgb(217,207,13)"/><text x="16.8677%" y="111.50"></text></g><g><title>mir_const (9,436,697 samples, 6.39%)</title><rect x="10.7971%" y="149" width="6.3898%" height="15" fill="rgb(231,73,38)"/><text x="11.0471%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (7,938,377 samples, 5.38%)</title><rect x="11.8116%" y="133" width="5.3752%" height="15" fill="rgb(225,20,46)"/><text x="12.0616%" y="143.50">unsafet..</text></g><g><title>mir_built (6,827,908 samples, 4.62%)</title><rect x="12.5636%" y="117" width="4.6233%" height="15" fill="rgb(210,31,41)"/><text x="12.8136%" y="127.50">mir_b..</text></g><g><title>mir_promoted (10,248,495 samples, 6.94%)</title><rect x="10.2812%" y="165" width="6.9394%" height="15" fill="rgb(221,200,47)"/><text x="10.5312%" y="175.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (384,084 samples, 0.26%)</title><rect x="17.2232%" y="165" width="0.2601%" height="15" fill="rgb(226,26,5)"/><text x="17.4732%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (852,288 samples, 0.58%)</title><rect x="17.4832%" y="165" width="0.5771%" height="15" fill="rgb(249,33,26)"/><text x="17.7332%" y="175.50"></text></g><g><title>normalize_projection_ty (488,305 samples, 0.33%)</title><rect x="17.7297%" y="149" width="0.3306%" height="15" fill="rgb(235,183,28)"/><text x="17.9797%" y="159.50"></text></g><g><title>type_op_normalize_predicate (401,045 samples, 0.27%)</title><rect x="18.0603%" y="165" width="0.2716%" height="15" fill="rgb(221,5,38)"/><text x="18.3103%" y="175.50"></text></g><g><title>type_op_normalize_ty (214,783 samples, 0.15%)</title><rect x="18.3319%" y="165" width="0.1454%" height="15" fill="rgb(247,18,42)"/><text x="18.5819%" y="175.50"></text></g><g><title>type_op_prove_predicate (5,757,899 samples, 3.90%)</title><rect x="18.4773%" y="165" width="3.8988%" height="15" fill="rgb(241,131,45)"/><text x="18.7273%" y="175.50">type..</text></g><g><title>MIR_borrow_checking (31,764,666 samples, 21.51%)</title><rect x="0.8686%" y="197" width="21.5084%" height="15" fill="rgb(249,31,29)"/><text x="1.1186%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,622,724 samples, 21.41%)</title><rect x="0.9647%" y="181" width="21.4123%" height="15" fill="rgb(225,111,53)"/><text x="1.2147%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (331,783 samples, 0.22%)</title><rect x="22.4027%" y="197" width="0.2247%" height="15" fill="rgb(238,160,17)"/><text x="22.6527%" y="207.50"></text></g><g><title>get_lang_items (187,502 samples, 0.13%)</title><rect x="23.2305%" y="117" width="0.1270%" height="15" fill="rgb(214,148,48)"/><text x="23.4805%" y="127.50"></text></g><g><title>item_attrs (198,782 samples, 0.13%)</title><rect x="23.3574%" y="117" width="0.1346%" height="15" fill="rgb(232,36,49)"/><text x="23.6074%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (186,542 samples, 0.13%)</title><rect x="23.3657%" y="101" width="0.1263%" height="15" fill="rgb(209,103,24)"/><text x="23.6157%" y="111.50"></text></g><g><title>codegen_fn_attrs (619,755 samples, 0.42%)</title><rect x="23.1478%" y="133" width="0.4196%" height="15" fill="rgb(229,88,8)"/><text x="23.3978%" y="143.50"></text></g><g><title>codegen_fn_attrs (983,699 samples, 0.67%)</title><rect x="22.9130%" y="165" width="0.6661%" height="15" fill="rgb(213,181,19)"/><text x="23.1630%" y="175.50"></text></g><g><title>should_inherit_track_caller (879,207 samples, 0.60%)</title><rect x="22.9837%" y="149" width="0.5953%" height="15" fill="rgb(254,191,54)"/><text x="23.2337%" y="159.50"></text></g><g><title>check_mod_attrs (1,373,236 samples, 0.93%)</title><rect x="22.6496%" y="181" width="0.9298%" height="15" fill="rgb(241,83,37)"/><text x="22.8996%" y="191.50"></text></g><g><title>check_mod_const_bodies (231,712 samples, 0.16%)</title><rect x="23.5794%" y="181" width="0.1569%" height="15" fill="rgb(233,36,39)"/><text x="23.8294%" y="191.50"></text></g><g><title>lookup_deprecation_entry (266,463 samples, 0.18%)</title><rect x="24.0941%" y="165" width="0.1804%" height="15" fill="rgb(226,3,54)"/><text x="24.3441%" y="175.50"></text></g><g><title>stability_index (172,402 samples, 0.12%)</title><rect x="24.1578%" y="149" width="0.1167%" height="15" fill="rgb(245,192,40)"/><text x="24.4078%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (790,640 samples, 0.54%)</title><rect x="23.8439%" y="181" width="0.5354%" height="15" fill="rgb(238,167,29)"/><text x="24.0939%" y="191.50"></text></g><g><title>misc_checking_1 (2,680,300 samples, 1.81%)</title><rect x="22.6277%" y="197" width="1.8149%" height="15" fill="rgb(232,182,51)"/><text x="22.8777%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (533,446 samples, 0.36%)</title><rect x="24.4439%" y="181" width="0.3612%" height="15" fill="rgb(231,60,39)"/><text x="24.6939%" y="191.50"></text></g><g><title>check_mod_liveness (463,365 samples, 0.31%)</title><rect x="24.4913%" y="165" width="0.3138%" height="15" fill="rgb(208,69,12)"/><text x="24.7413%" y="175.50"></text></g><g><title>type_uninhabited_from (186,173 samples, 0.13%)</title><rect x="24.6790%" y="149" width="0.1261%" height="15" fill="rgb(235,93,37)"/><text x="24.9290%" y="159.50"></text></g><g><title>misc_checking_2 (1,082,562 samples, 0.73%)</title><rect x="24.4425%" y="197" width="0.7330%" height="15" fill="rgb(213,116,39)"/><text x="24.6925%" y="207.50"></text></g><g><title>match_checking (547,106 samples, 0.37%)</title><rect x="24.8051%" y="181" width="0.3705%" height="15" fill="rgb(222,207,29)"/><text x="25.0551%" y="191.50"></text></g><g><title>check_match (515,395 samples, 0.35%)</title><rect x="24.8266%" y="165" width="0.3490%" height="15" fill="rgb(206,96,30)"/><text x="25.0766%" y="175.50"></text></g><g><title>check_private_in_public (220,413 samples, 0.15%)</title><rect x="25.1824%" y="181" width="0.1492%" height="15" fill="rgb(218,138,4)"/><text x="25.4324%" y="191.50"></text></g><g><title>death_checking (375,944 samples, 0.25%)</title><rect x="25.3317%" y="181" width="0.2546%" height="15" fill="rgb(250,191,14)"/><text x="25.5817%" y="191.50"></text></g><g><title>param_env (253,583 samples, 0.17%)</title><rect x="26.0069%" y="149" width="0.1717%" height="15" fill="rgb(239,60,40)"/><text x="26.2569%" y="159.50"></text></g><g><title>crate_lints (1,988,463 samples, 1.35%)</title><rect x="25.5872%" y="165" width="1.3464%" height="15" fill="rgb(206,27,48)"/><text x="25.8372%" y="175.50"></text></g><g><title>type_of (1,103,912 samples, 0.75%)</title><rect x="26.1862%" y="149" width="0.7475%" height="15" fill="rgb(225,35,8)"/><text x="26.4362%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (868,772 samples, 0.59%)</title><rect x="26.3454%" y="133" width="0.5883%" height="15" fill="rgb(250,213,24)"/><text x="26.5954%" y="143.50"></text></g><g><title>lint_checking (2,314,086 samples, 1.57%)</title><rect x="25.5862%" y="181" width="1.5669%" height="15" fill="rgb(247,123,22)"/><text x="25.8362%" y="191.50"></text></g><g><title>module_lints (324,143 samples, 0.22%)</title><rect x="26.9337%" y="165" width="0.2195%" height="15" fill="rgb(231,138,38)"/><text x="27.1837%" y="175.50"></text></g><g><title>lint_mod (320,163 samples, 0.22%)</title><rect x="26.9364%" y="149" width="0.2168%" height="15" fill="rgb(231,145,46)"/><text x="27.1864%" y="159.50"></text></g><g><title>privacy_access_levels (284,493 samples, 0.19%)</title><rect x="27.1532%" y="181" width="0.1926%" height="15" fill="rgb(251,118,11)"/><text x="27.4032%" y="191.50"></text></g><g><title>privacy_checking_modules (882,790 samples, 0.60%)</title><rect x="27.3458%" y="181" width="0.5978%" height="15" fill="rgb(217,147,25)"/><text x="27.5958%" y="191.50"></text></g><g><title>check_mod_privacy (879,990 samples, 0.60%)</title><rect x="27.3477%" y="165" width="0.5959%" height="15" fill="rgb(247,81,37)"/><text x="27.5977%" y="175.50"></text></g><g><title>misc_checking_3 (4,108,956 samples, 2.78%)</title><rect x="25.1756%" y="197" width="2.7822%" height="15" fill="rgb(209,12,38)"/><text x="25.4256%" y="207.50">mi..</text></g><g><title>impl_parent (2,786,497 samples, 1.89%)</title><rect x="30.9544%" y="133" width="1.8868%" height="15" fill="rgb(227,1,9)"/><text x="31.2044%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,443,033 samples, 0.98%)</title><rect x="31.8641%" y="117" width="0.9771%" height="15" fill="rgb(248,47,43)"/><text x="32.1141%" y="127.50"></text></g><g><title>impl_trait_ref (5,788,765 samples, 3.92%)</title><rect x="32.8422%" y="133" width="3.9197%" height="15" fill="rgb(221,10,30)"/><text x="33.0922%" y="143.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,850,366 samples, 3.28%)</title><rect x="33.4776%" y="117" width="3.2843%" height="15" fill="rgb(210,229,1)"/><text x="33.7276%" y="127.50">met..</text></g><g><title>trait_impls_of (862,550 samples, 0.58%)</title><rect x="36.9403%" y="133" width="0.5840%" height="15" fill="rgb(222,148,37)"/><text x="37.1903%" y="143.50"></text></g><g><title>implementations_of_trait (256,412 samples, 0.17%)</title><rect x="37.3507%" y="117" width="0.1736%" height="15" fill="rgb(234,67,33)"/><text x="37.6007%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (193,492 samples, 0.13%)</title><rect x="37.3933%" y="101" width="0.1310%" height="15" fill="rgb(247,98,35)"/><text x="37.6433%" y="111.50"></text></g><g><title>coherent_trait (14,043,337 samples, 9.51%)</title><rect x="28.0295%" y="165" width="9.5090%" height="15" fill="rgb(247,138,52)"/><text x="28.2795%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (14,018,357 samples, 9.49%)</title><rect x="28.0464%" y="149" width="9.4921%" height="15" fill="rgb(213,79,30)"/><text x="28.2964%" y="159.50">specialization..</text></g><g><title>coherence_checking (14,162,609 samples, 9.59%)</title><rect x="28.0127%" y="181" width="9.5898%" height="15" fill="rgb(246,177,23)"/><text x="28.2627%" y="191.50">coherence_chec..</text></g><g><title>associated_item (268,512 samples, 0.18%)</title><rect x="48.0739%" y="117" width="0.1818%" height="15" fill="rgb(230,62,27)"/><text x="48.3239%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (211,072 samples, 0.14%)</title><rect x="48.1128%" y="101" width="0.1429%" height="15" fill="rgb(216,154,8)"/><text x="48.3628%" y="111.50"></text></g><g><title>associated_items (404,363 samples, 0.27%)</title><rect x="47.9951%" y="133" width="0.2738%" height="15" fill="rgb(244,35,45)"/><text x="48.2451%" y="143.50"></text></g><g><title>adt_def (439,407 samples, 0.30%)</title><rect x="48.6028%" y="101" width="0.2975%" height="15" fill="rgb(251,115,12)"/><text x="48.8528%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (438,067 samples, 0.30%)</title><rect x="48.6037%" y="85" width="0.2966%" height="15" fill="rgb(240,54,50)"/><text x="48.8537%" y="95.50"></text></g><g><title>item_attrs (414,277 samples, 0.28%)</title><rect x="48.6198%" y="69" width="0.2805%" height="15" fill="rgb(233,84,52)"/><text x="48.8698%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (412,827 samples, 0.28%)</title><rect x="48.6208%" y="53" width="0.2795%" height="15" fill="rgb(207,117,47)"/><text x="48.8708%" y="63.50"></text></g><g><title>adt_dtorck_constraint (181,201 samples, 0.12%)</title><rect x="48.9814%" y="85" width="0.1227%" height="15" fill="rgb(249,43,39)"/><text x="49.2314%" y="95.50"></text></g><g><title>adt_dtorck_constraint (296,262 samples, 0.20%)</title><rect x="48.9171%" y="101" width="0.2006%" height="15" fill="rgb(209,38,44)"/><text x="49.1671%" y="111.50"></text></g><g><title>adt_dtorck_constraint (838,570 samples, 0.57%)</title><rect x="48.5691%" y="117" width="0.5678%" height="15" fill="rgb(236,212,23)"/><text x="48.8191%" y="127.50"></text></g><g><title>dropck_outlives (1,265,644 samples, 0.86%)</title><rect x="48.3186%" y="133" width="0.8570%" height="15" fill="rgb(242,79,21)"/><text x="48.5686%" y="143.50"></text></g><g><title>evaluate_obligation (1,352,855 samples, 0.92%)</title><rect x="49.1755%" y="133" width="0.9160%" height="15" fill="rgb(211,96,35)"/><text x="49.4255%" y="143.50"></text></g><g><title>evaluate_obligation (408,448 samples, 0.28%)</title><rect x="50.7540%" y="117" width="0.2766%" height="15" fill="rgb(253,215,40)"/><text x="51.0040%" y="127.50"></text></g><g><title>method_autoderef_steps (843,832 samples, 0.57%)</title><rect x="50.4664%" y="133" width="0.5714%" height="15" fill="rgb(211,81,21)"/><text x="50.7164%" y="143.50"></text></g><g><title>predicates_of (348,183 samples, 0.24%)</title><rect x="51.0765%" y="133" width="0.2358%" height="15" fill="rgb(208,190,38)"/><text x="51.3265%" y="143.50"></text></g><g><title>predicates_defined_on (254,762 samples, 0.17%)</title><rect x="51.1398%" y="117" width="0.1725%" height="15" fill="rgb(235,213,38)"/><text x="51.3898%" y="127.50"></text></g><g><title>dropck_outlives (166,803 samples, 0.11%)</title><rect x="56.0056%" y="117" width="0.1129%" height="15" fill="rgb(237,122,38)"/><text x="56.2556%" y="127.50"></text></g><g><title>evaluate_obligation (1,587,908 samples, 1.08%)</title><rect x="56.1185%" y="117" width="1.0752%" height="15" fill="rgb(244,218,35)"/><text x="56.3685%" y="127.50"></text></g><g><title>is_copy_raw (152,360 samples, 0.10%)</title><rect x="57.3728%" y="117" width="0.1032%" height="15" fill="rgb(240,68,47)"/><text x="57.6228%" y="127.50"></text></g><g><title>method_autoderef_steps (473,246 samples, 0.32%)</title><rect x="57.4918%" y="117" width="0.3204%" height="15" fill="rgb(210,16,53)"/><text x="57.7418%" y="127.50"></text></g><g><title>evaluate_obligation (213,624 samples, 0.14%)</title><rect x="57.6676%" y="101" width="0.1446%" height="15" fill="rgb(235,124,12)"/><text x="57.9176%" y="111.50"></text></g><g><title>typeck (9,641,158 samples, 6.53%)</title><rect x="51.4162%" y="133" width="6.5282%" height="15" fill="rgb(224,169,11)"/><text x="51.6662%" y="143.50">typeck</text></g><g><title>item_bodies_checking (30,025,247 samples, 20.33%)</title><rect x="37.6520%" y="181" width="20.3306%" height="15" fill="rgb(250,166,2)"/><text x="37.9020%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,021,787 samples, 20.33%)</title><rect x="37.6544%" y="165" width="20.3283%" height="15" fill="rgb(242,216,29)"/><text x="37.9044%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (29,935,277 samples, 20.27%)</title><rect x="37.7130%" y="149" width="20.2697%" height="15" fill="rgb(230,116,27)"/><text x="37.9630%" y="159.50">typeck</text></g><g><title>adt_destructor (320,593 samples, 0.22%)</title><rect x="59.4612%" y="149" width="0.2171%" height="15" fill="rgb(228,99,48)"/><text x="59.7112%" y="159.50"></text></g><g><title>coherent_trait (313,893 samples, 0.21%)</title><rect x="59.4657%" y="133" width="0.2125%" height="15" fill="rgb(253,11,6)"/><text x="59.7157%" y="143.50"></text></g><g><title>specialization_graph_of (311,183 samples, 0.21%)</title><rect x="59.4675%" y="117" width="0.2107%" height="15" fill="rgb(247,143,39)"/><text x="59.7175%" y="127.50"></text></g><g><title>item_types_checking (2,899,872 samples, 1.96%)</title><rect x="57.9827%" y="181" width="1.9636%" height="15" fill="rgb(236,97,10)"/><text x="58.2327%" y="191.50">i..</text></g><g><title>check_mod_item_types (2,896,062 samples, 1.96%)</title><rect x="57.9853%" y="165" width="1.9610%" height="15" fill="rgb(233,208,19)"/><text x="58.2353%" y="175.50">c..</text></g><g><title>fn_sig (753,055 samples, 0.51%)</title><rect x="60.3068%" y="149" width="0.5099%" height="15" fill="rgb(216,164,2)"/><text x="60.5568%" y="159.50"></text></g><g><title>type_param_predicates (216,094 samples, 0.15%)</title><rect x="60.6704%" y="133" width="0.1463%" height="15" fill="rgb(220,129,5)"/><text x="60.9204%" y="143.50"></text></g><g><title>is_late_bound_map (486,505 samples, 0.33%)</title><rect x="60.9976%" y="133" width="0.3294%" height="15" fill="rgb(242,17,10)"/><text x="61.2476%" y="143.50"></text></g><g><title>resolve_lifetimes (452,604 samples, 0.31%)</title><rect x="61.0206%" y="117" width="0.3065%" height="15" fill="rgb(242,107,0)"/><text x="61.2706%" y="127.50"></text></g><g><title>generics_of (812,568 samples, 0.55%)</title><rect x="60.8167%" y="149" width="0.5502%" height="15" fill="rgb(251,28,31)"/><text x="61.0667%" y="159.50"></text></g><g><title>late_bound_vars_map (793,012 samples, 0.54%)</title><rect x="62.1989%" y="101" width="0.5370%" height="15" fill="rgb(233,223,10)"/><text x="62.4489%" y="111.50"></text></g><g><title>resolve_lifetimes (757,861 samples, 0.51%)</title><rect x="62.2227%" y="85" width="0.5132%" height="15" fill="rgb(215,21,27)"/><text x="62.4727%" y="95.50"></text></g><g><title>lint_levels (196,452 samples, 0.13%)</title><rect x="62.6028%" y="69" width="0.1330%" height="15" fill="rgb(232,23,21)"/><text x="62.8528%" y="79.50"></text></g><g><title>explicit_predicates_of (1,703,783 samples, 1.15%)</title><rect x="61.6190%" y="117" width="1.1537%" height="15" fill="rgb(244,5,23)"/><text x="61.8690%" y="127.50"></text></g><g><title>predicates_of (253,722 samples, 0.17%)</title><rect x="62.9446%" y="85" width="0.1718%" height="15" fill="rgb(226,81,46)"/><text x="63.1946%" y="95.50"></text></g><g><title>predicates_defined_on (241,612 samples, 0.16%)</title><rect x="62.9528%" y="69" width="0.1636%" height="15" fill="rgb(247,70,30)"/><text x="63.2028%" y="79.50"></text></g><g><title>inferred_outlives_of (181,842 samples, 0.12%)</title><rect x="62.9933%" y="53" width="0.1231%" height="15" fill="rgb(212,68,19)"/><text x="63.2433%" y="63.50"></text></g><g><title>metadata_decode_entry_inferred_outlives_of (176,802 samples, 0.12%)</title><rect x="62.9967%" y="37" width="0.1197%" height="15" fill="rgb(240,187,13)"/><text x="63.2467%" y="47.50"></text></g><g><title>predicates_of (2,790,888 samples, 1.89%)</title><rect x="61.4506%" y="149" width="1.8898%" height="15" fill="rgb(223,113,26)"/><text x="61.7006%" y="159.50">p..</text></g><g><title>predicates_defined_on (2,697,003 samples, 1.83%)</title><rect x="61.5142%" y="133" width="1.8262%" height="15" fill="rgb(206,192,2)"/><text x="61.7642%" y="143.50">p..</text></g><g><title>inferred_outlives_of (838,440 samples, 0.57%)</title><rect x="62.7726%" y="117" width="0.5677%" height="15" fill="rgb(241,108,4)"/><text x="63.0226%" y="127.50"></text></g><g><title>inferred_outlives_crate (796,069 samples, 0.54%)</title><rect x="62.8013%" y="101" width="0.5390%" height="15" fill="rgb(247,173,49)"/><text x="63.0513%" y="111.50"></text></g><g><title>type_of (330,693 samples, 0.22%)</title><rect x="63.1164%" y="85" width="0.2239%" height="15" fill="rgb(224,114,35)"/><text x="63.3664%" y="95.50"></text></g><g><title>type_collecting (5,355,520 samples, 3.63%)</title><rect x="59.9482%" y="181" width="3.6263%" height="15" fill="rgb(245,159,27)"/><text x="60.1982%" y="191.50">type..</text></g><g><title>collect_mod_item_types (5,343,060 samples, 3.62%)</title><rect x="59.9566%" y="165" width="3.6179%" height="15" fill="rgb(245,172,44)"/><text x="60.2066%" y="175.50">coll..</text></g><g><title>type_of (345,812 samples, 0.23%)</title><rect x="63.3404%" y="149" width="0.2342%" height="15" fill="rgb(236,23,11)"/><text x="63.5904%" y="159.50"></text></g><g><title>evaluate_obligation (593,459 samples, 0.40%)</title><rect x="66.3440%" y="149" width="0.4018%" height="15" fill="rgb(205,117,38)"/><text x="66.5940%" y="159.50"></text></g><g><title>implied_outlives_bounds (588,610 samples, 0.40%)</title><rect x="66.7512%" y="149" width="0.3986%" height="15" fill="rgb(237,72,25)"/><text x="67.0012%" y="159.50"></text></g><g><title>param_env (629,248 samples, 0.43%)</title><rect x="67.1994%" y="149" width="0.4261%" height="15" fill="rgb(244,70,9)"/><text x="67.4494%" y="159.50"></text></g><g><title>region_scope_tree (304,073 samples, 0.21%)</title><rect x="67.6892%" y="149" width="0.2059%" height="15" fill="rgb(217,125,39)"/><text x="67.9392%" y="159.50"></text></g><g><title>check_impl_item_well_formed (6,209,600 samples, 4.20%)</title><rect x="63.7273%" y="165" width="4.2046%" height="15" fill="rgb(235,36,10)"/><text x="63.9773%" y="175.50">check..</text></g><g><title>adt_sized_constraint (151,751 samples, 0.10%)</title><rect x="69.5053%" y="149" width="0.1028%" height="15" fill="rgb(251,123,47)"/><text x="69.7553%" y="159.50"></text></g><g><title>evaluate_obligation (156,653 samples, 0.11%)</title><rect x="69.6082%" y="149" width="0.1061%" height="15" fill="rgb(221,13,13)"/><text x="69.8582%" y="159.50"></text></g><g><title>implied_outlives_bounds (195,843 samples, 0.13%)</title><rect x="69.7227%" y="149" width="0.1326%" height="15" fill="rgb(238,131,9)"/><text x="69.9727%" y="159.50"></text></g><g><title>param_env (356,843 samples, 0.24%)</title><rect x="69.8553%" y="149" width="0.2416%" height="15" fill="rgb(211,50,8)"/><text x="70.1053%" y="159.50"></text></g><g><title>trait_impls_of (213,632 samples, 0.14%)</title><rect x="70.1712%" y="149" width="0.1447%" height="15" fill="rgb(245,182,24)"/><text x="70.4212%" y="159.50"></text></g><g><title>analysis (103,211,547 samples, 69.89%)</title><rect x="0.5289%" y="213" width="69.8864%" height="15" fill="rgb(242,14,37)"/><text x="0.7789%" y="223.50">analysis</text></g><g><title>type_check_crate (62,703,224 samples, 42.46%)</title><rect x="27.9578%" y="197" width="42.4575%" height="15" fill="rgb(246,228,12)"/><text x="28.2078%" y="207.50">type_check_crate</text></g><g><title>wf_checking (10,097,794 samples, 6.84%)</title><rect x="63.5779%" y="181" width="6.8374%" height="15" fill="rgb(213,55,15)"/><text x="63.8279%" y="191.50">wf_checki..</text></g><g><title>check_item_well_formed (3,667,552 samples, 2.48%)</title><rect x="67.9319%" y="165" width="2.4834%" height="15" fill="rgb(209,9,3)"/><text x="68.1819%" y="175.50">ch..</text></g><g><title>codegen_crate (378,584 samples, 0.26%)</title><rect x="70.4225%" y="213" width="0.2563%" height="15" fill="rgb(230,59,30)"/><text x="70.6725%" y="223.50"></text></g><g><title>AST_validation (240,222 samples, 0.16%)</title><rect x="70.8112%" y="197" width="0.1627%" height="15" fill="rgb(209,121,21)"/><text x="71.0612%" y="207.50"></text></g><g><title>metadata_register_crate (2,366,696 samples, 1.60%)</title><rect x="81.0828%" y="165" width="1.6025%" height="15" fill="rgb(220,109,13)"/><text x="81.3328%" y="175.50"></text></g><g><title>metadata_register_crate (894,560 samples, 0.61%)</title><rect x="82.0796%" y="149" width="0.6057%" height="15" fill="rgb(232,18,1)"/><text x="82.3296%" y="159.50"></text></g><g><title>macro_expand_crate (17,213,853 samples, 11.66%)</title><rect x="71.1029%" y="197" width="11.6558%" height="15" fill="rgb(215,41,42)"/><text x="71.3529%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (17,199,473 samples, 11.65%)</title><rect x="71.1126%" y="181" width="11.6461%" height="15" fill="rgb(224,123,36)"/><text x="71.3626%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (484,846 samples, 0.33%)</title><rect x="82.7618%" y="197" width="0.3283%" height="15" fill="rgb(240,125,3)"/><text x="83.0118%" y="207.50"></text></g><g><title>late_resolve_crate (2,605,769 samples, 1.76%)</title><rect x="83.2204%" y="181" width="1.7644%" height="15" fill="rgb(205,98,50)"/><text x="83.4704%" y="191.50"></text></g><g><title>configure_and_expand (21,311,598 samples, 14.43%)</title><rect x="70.6788%" y="213" width="14.4305%" height="15" fill="rgb(205,185,37)"/><text x="70.9288%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,982,064 samples, 2.02%)</title><rect x="83.0901%" y="197" width="2.0192%" height="15" fill="rgb(238,207,15)"/><text x="83.3401%" y="207.50">r..</text></g><g><title>drop_ast (360,434 samples, 0.24%)</title><rect x="85.1093%" y="213" width="0.2441%" height="15" fill="rgb(213,199,42)"/><text x="85.3593%" y="223.50"></text></g><g><title>early_lint_checks (580,136 samples, 0.39%)</title><rect x="85.3647%" y="213" width="0.3928%" height="15" fill="rgb(235,201,11)"/><text x="85.6147%" y="223.50"></text></g><g><title>free_global_ctxt (3,781,643 samples, 2.56%)</title><rect x="85.7576%" y="213" width="2.5606%" height="15" fill="rgb(207,46,11)"/><text x="86.0076%" y="223.50">fr..</text></g><g><title>generate_crate_metadata (1,396,706 samples, 0.95%)</title><rect x="88.3182%" y="213" width="0.9457%" height="15" fill="rgb(241,35,35)"/><text x="88.5682%" y="223.50"></text></g><g><title>hir_lowering (5,464,931 samples, 3.70%)</title><rect x="89.2639%" y="213" width="3.7004%" height="15" fill="rgb(243,32,47)"/><text x="89.5139%" y="223.50">hir_..</text></g><g><title>parse_crate (8,775,748 samples, 5.94%)</title><rect x="93.0029%" y="213" width="5.9422%" height="15" fill="rgb(247,202,23)"/><text x="93.2529%" y="223.50">parse_cr..</text></g><g><title>prepare_outputs (270,793 samples, 0.18%)</title><rect x="98.9496%" y="213" width="0.1834%" height="15" fill="rgb(219,102,11)"/><text x="99.1996%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (790,089 samples, 0.53%)</title><rect x="99.1330%" y="213" width="0.5350%" height="15" fill="rgb(243,110,44)"/><text x="99.3830%" y="223.50"></text></g><g><title>all (147,684,816 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (147,684,816 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (349,964 samples, 0.24%)</title><rect x="99.7630%" y="213" width="0.2370%" height="15" fill="rgb(226,22,26)"/><text x="100.0130%" y="223.50"></text></g></svg></svg>