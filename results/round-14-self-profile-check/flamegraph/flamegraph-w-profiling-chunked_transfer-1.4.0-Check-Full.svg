<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (187,120 samples, 0.21%)</title><rect x="7.9596%" y="133" width="0.2082%" height="15" fill="rgb(227,0,7)"/><text x="8.2096%" y="143.50"></text></g><g><title>item_attrs (542,236 samples, 0.60%)</title><rect x="8.5289%" y="101" width="0.6032%" height="15" fill="rgb(217,0,24)"/><text x="8.7789%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (535,266 samples, 0.60%)</title><rect x="8.5367%" y="85" width="0.5955%" height="15" fill="rgb(221,193,54)"/><text x="8.7867%" y="95.50"></text></g><g><title>codegen_fn_attrs (637,267 samples, 0.71%)</title><rect x="8.4405%" y="117" width="0.7089%" height="15" fill="rgb(248,212,6)"/><text x="8.6905%" y="127.50"></text></g><g><title>adt_drop_tys (174,591 samples, 0.19%)</title><rect x="10.8167%" y="85" width="0.1942%" height="15" fill="rgb(208,68,35)"/><text x="11.0667%" y="95.50"></text></g><g><title>needs_drop_raw (680,060 samples, 0.76%)</title><rect x="10.7496%" y="101" width="0.7565%" height="15" fill="rgb(232,128,0)"/><text x="10.9996%" y="111.50"></text></g><g><title>is_copy_raw (445,176 samples, 0.50%)</title><rect x="11.0109%" y="85" width="0.4952%" height="15" fill="rgb(207,160,47)"/><text x="11.2609%" y="95.50"></text></g><g><title>evaluate_obligation (381,435 samples, 0.42%)</title><rect x="11.0819%" y="69" width="0.4243%" height="15" fill="rgb(228,23,34)"/><text x="11.3319%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (291,784 samples, 0.32%)</title><rect x="11.6135%" y="85" width="0.3246%" height="15" fill="rgb(218,30,26)"/><text x="11.8635%" y="95.50"></text></g><g><title>impl_parent (304,012 samples, 0.34%)</title><rect x="12.5122%" y="69" width="0.3382%" height="15" fill="rgb(220,122,19)"/><text x="12.7622%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (206,170 samples, 0.23%)</title><rect x="12.6210%" y="53" width="0.2294%" height="15" fill="rgb(250,228,42)"/><text x="12.8710%" y="63.50"></text></g><g><title>specialization_graph_of (1,389,965 samples, 1.55%)</title><rect x="11.9793%" y="85" width="1.5463%" height="15" fill="rgb(240,193,28)"/><text x="12.2293%" y="95.50"></text></g><g><title>impl_trait_ref (606,947 samples, 0.68%)</title><rect x="12.8503%" y="69" width="0.6752%" height="15" fill="rgb(216,20,37)"/><text x="13.1003%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (508,207 samples, 0.57%)</title><rect x="12.9602%" y="53" width="0.5654%" height="15" fill="rgb(206,188,39)"/><text x="13.2102%" y="63.50"></text></g><g><title>resolve_instance (1,860,831 samples, 2.07%)</title><rect x="11.5062%" y="101" width="2.0701%" height="15" fill="rgb(217,207,13)"/><text x="11.7562%" y="111.50">r..</text></g><g><title>thir_body (520,755 samples, 0.58%)</title><rect x="13.5886%" y="101" width="0.5793%" height="15" fill="rgb(231,73,38)"/><text x="13.8386%" y="111.50"></text></g><g><title>mir_const (6,061,898 samples, 6.74%)</title><rect x="7.4336%" y="149" width="6.7435%" height="15" fill="rgb(225,20,46)"/><text x="7.6836%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (5,401,901 samples, 6.01%)</title><rect x="8.1678%" y="133" width="6.0093%" height="15" fill="rgb(210,31,41)"/><text x="8.4178%" y="143.50">unsafety..</text></g><g><title>mir_built (4,519,472 samples, 5.03%)</title><rect x="9.1495%" y="117" width="5.0277%" height="15" fill="rgb(221,200,47)"/><text x="9.3995%" y="127.50">mir_bu..</text></g><g><title>mir_promoted (6,597,752 samples, 7.34%)</title><rect x="6.9118%" y="165" width="7.3396%" height="15" fill="rgb(226,26,5)"/><text x="7.1618%" y="175.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (213,483 samples, 0.24%)</title><rect x="14.2515%" y="165" width="0.2375%" height="15" fill="rgb(249,33,26)"/><text x="14.5015%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (314,335 samples, 0.35%)</title><rect x="14.4890%" y="165" width="0.3497%" height="15" fill="rgb(235,183,28)"/><text x="14.7390%" y="175.50"></text></g><g><title>normalize_projection_ty (224,365 samples, 0.25%)</title><rect x="14.5891%" y="149" width="0.2496%" height="15" fill="rgb(221,5,38)"/><text x="14.8391%" y="159.50"></text></g><g><title>type_op_prove_predicate (837,188 samples, 0.93%)</title><rect x="14.9296%" y="165" width="0.9313%" height="15" fill="rgb(247,18,42)"/><text x="15.1796%" y="175.50"></text></g><g><title>MIR_borrow_checking (13,386,577 samples, 14.89%)</title><rect x="0.9755%" y="197" width="14.8918%" height="15" fill="rgb(241,131,45)"/><text x="1.2255%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,341,557 samples, 14.84%)</title><rect x="1.0256%" y="181" width="14.8418%" height="15" fill="rgb(249,31,29)"/><text x="1.2756%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (116,882 samples, 0.13%)</title><rect x="15.8674%" y="197" width="0.1300%" height="15" fill="rgb(225,111,53)"/><text x="16.1174%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (91,771 samples, 0.10%)</title><rect x="15.8953%" y="181" width="0.1021%" height="15" fill="rgb(238,160,17)"/><text x="16.1453%" y="191.50"></text></g><g><title>hir_module_items (171,851 samples, 0.19%)</title><rect x="15.9974%" y="197" width="0.1912%" height="15" fill="rgb(214,148,48)"/><text x="16.2474%" y="207.50"></text></g><g><title>item_attrs (127,631 samples, 0.14%)</title><rect x="16.7750%" y="117" width="0.1420%" height="15" fill="rgb(232,36,49)"/><text x="17.0250%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (122,751 samples, 0.14%)</title><rect x="16.7805%" y="101" width="0.1366%" height="15" fill="rgb(209,103,24)"/><text x="17.0305%" y="111.50"></text></g><g><title>codegen_fn_attrs (203,332 samples, 0.23%)</title><rect x="16.7459%" y="133" width="0.2262%" height="15" fill="rgb(229,88,8)"/><text x="16.9959%" y="143.50"></text></g><g><title>should_inherit_track_caller (299,482 samples, 0.33%)</title><rect x="16.6451%" y="149" width="0.3332%" height="15" fill="rgb(213,181,19)"/><text x="16.8951%" y="159.50"></text></g><g><title>codegen_fn_attrs (465,094 samples, 0.52%)</title><rect x="16.4945%" y="165" width="0.5174%" height="15" fill="rgb(254,191,54)"/><text x="16.7445%" y="175.50"></text></g><g><title>check_mod_attrs (709,077 samples, 0.79%)</title><rect x="16.2233%" y="181" width="0.7888%" height="15" fill="rgb(241,83,37)"/><text x="16.4733%" y="191.50"></text></g><g><title>check_mod_const_bodies (112,642 samples, 0.13%)</title><rect x="17.0121%" y="181" width="0.1253%" height="15" fill="rgb(233,36,39)"/><text x="17.2621%" y="191.50"></text></g><g><title>lint_levels (210,662 samples, 0.23%)</title><rect x="17.4566%" y="165" width="0.2344%" height="15" fill="rgb(226,3,54)"/><text x="17.7066%" y="175.50"></text></g><g><title>lookup_deprecation_entry (164,122 samples, 0.18%)</title><rect x="17.6909%" y="165" width="0.1826%" height="15" fill="rgb(245,192,40)"/><text x="17.9409%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (729,298 samples, 0.81%)</title><rect x="17.2139%" y="181" width="0.8113%" height="15" fill="rgb(238,167,29)"/><text x="17.4639%" y="191.50"></text></g><g><title>misc_checking_1 (1,697,689 samples, 1.89%)</title><rect x="16.1891%" y="197" width="1.8886%" height="15" fill="rgb(232,182,51)"/><text x="16.4391%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (456,195 samples, 0.51%)</title><rect x="18.0793%" y="181" width="0.5075%" height="15" fill="rgb(231,60,39)"/><text x="18.3293%" y="191.50"></text></g><g><title>check_mod_liveness (407,263 samples, 0.45%)</title><rect x="18.1338%" y="165" width="0.4531%" height="15" fill="rgb(208,69,12)"/><text x="18.3838%" y="175.50"></text></g><g><title>misc_checking_2 (765,039 samples, 0.85%)</title><rect x="18.0777%" y="197" width="0.8511%" height="15" fill="rgb(235,93,37)"/><text x="18.3277%" y="207.50"></text></g><g><title>match_checking (307,354 samples, 0.34%)</title><rect x="18.5868%" y="181" width="0.3419%" height="15" fill="rgb(213,116,39)"/><text x="18.8368%" y="191.50"></text></g><g><title>check_match (294,724 samples, 0.33%)</title><rect x="18.6009%" y="165" width="0.3279%" height="15" fill="rgb(222,207,29)"/><text x="18.8509%" y="175.50"></text></g><g><title>death_checking (193,442 samples, 0.22%)</title><rect x="19.0361%" y="181" width="0.2152%" height="15" fill="rgb(206,96,30)"/><text x="19.2861%" y="191.50"></text></g><g><title>eval_to_const_value_raw (103,602 samples, 0.12%)</title><rect x="20.0150%" y="85" width="0.1153%" height="15" fill="rgb(218,138,4)"/><text x="20.2650%" y="95.50"></text></g><g><title>eval_to_const_value_raw (102,872 samples, 0.11%)</title><rect x="20.0158%" y="69" width="0.1144%" height="15" fill="rgb(250,191,14)"/><text x="20.2658%" y="79.50"></text></g><g><title>eval_to_allocation_raw (102,141 samples, 0.11%)</title><rect x="20.0166%" y="53" width="0.1136%" height="15" fill="rgb(239,60,40)"/><text x="20.2666%" y="63.50"></text></g><g><title>eval_to_const_value_raw (219,843 samples, 0.24%)</title><rect x="19.8882%" y="149" width="0.2446%" height="15" fill="rgb(206,27,48)"/><text x="20.1382%" y="159.50"></text></g><g><title>eval_to_const_value_raw (211,463 samples, 0.24%)</title><rect x="19.8975%" y="133" width="0.2352%" height="15" fill="rgb(225,35,8)"/><text x="20.1475%" y="143.50"></text></g><g><title>eval_to_allocation_raw (208,383 samples, 0.23%)</title><rect x="19.9009%" y="117" width="0.2318%" height="15" fill="rgb(250,213,24)"/><text x="20.1509%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (111,372 samples, 0.12%)</title><rect x="20.0088%" y="101" width="0.1239%" height="15" fill="rgb(247,123,22)"/><text x="20.2588%" y="111.50"></text></g><g><title>param_env (115,371 samples, 0.13%)</title><rect x="20.1327%" y="149" width="0.1283%" height="15" fill="rgb(231,138,38)"/><text x="20.3827%" y="159.50"></text></g><g><title>crate_lints (1,961,992 samples, 2.18%)</title><rect x="19.2530%" y="165" width="2.1826%" height="15" fill="rgb(231,145,46)"/><text x="19.5030%" y="175.50">c..</text></g><g><title>type_of (1,048,981 samples, 1.17%)</title><rect x="20.2687%" y="149" width="1.1669%" height="15" fill="rgb(251,118,11)"/><text x="20.5187%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (819,759 samples, 0.91%)</title><rect x="20.5237%" y="133" width="0.9119%" height="15" fill="rgb(217,147,25)"/><text x="20.7737%" y="143.50"></text></g><g><title>lint_checking (2,150,484 samples, 2.39%)</title><rect x="19.2513%" y="181" width="2.3923%" height="15" fill="rgb(247,81,37)"/><text x="19.5013%" y="191.50">li..</text></g><g><title>module_lints (187,022 samples, 0.21%)</title><rect x="21.4356%" y="165" width="0.2081%" height="15" fill="rgb(209,12,38)"/><text x="21.6856%" y="175.50"></text></g><g><title>lint_mod (183,472 samples, 0.20%)</title><rect x="21.4395%" y="149" width="0.2041%" height="15" fill="rgb(227,1,9)"/><text x="21.6895%" y="159.50"></text></g><g><title>privacy_access_levels (97,971 samples, 0.11%)</title><rect x="21.6436%" y="181" width="0.1090%" height="15" fill="rgb(248,47,43)"/><text x="21.8936%" y="191.50"></text></g><g><title>privacy_checking_modules (362,264 samples, 0.40%)</title><rect x="21.7526%" y="181" width="0.4030%" height="15" fill="rgb(221,10,30)"/><text x="22.0026%" y="191.50"></text></g><g><title>check_mod_privacy (360,004 samples, 0.40%)</title><rect x="21.7551%" y="165" width="0.4005%" height="15" fill="rgb(210,229,1)"/><text x="22.0051%" y="175.50"></text></g><g><title>misc_checking_3 (2,911,192 samples, 3.24%)</title><rect x="18.9288%" y="197" width="3.2385%" height="15" fill="rgb(222,148,37)"/><text x="19.1788%" y="207.50">mis..</text></g><g><title>impl_parent (93,192 samples, 0.10%)</title><rect x="22.4661%" y="101" width="0.1037%" height="15" fill="rgb(234,67,33)"/><text x="22.7161%" y="111.50"></text></g><g><title>impl_trait_ref (304,782 samples, 0.34%)</title><rect x="22.5698%" y="101" width="0.3391%" height="15" fill="rgb(247,98,35)"/><text x="22.8198%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (262,142 samples, 0.29%)</title><rect x="22.6172%" y="85" width="0.2916%" height="15" fill="rgb(247,138,52)"/><text x="22.8672%" y="95.50"></text></g><g><title>adt_destructor (614,546 samples, 0.68%)</title><rect x="22.2811%" y="149" width="0.6836%" height="15" fill="rgb(213,79,30)"/><text x="22.5311%" y="159.50"></text></g><g><title>coherent_trait (603,626 samples, 0.67%)</title><rect x="22.2933%" y="133" width="0.6715%" height="15" fill="rgb(246,177,23)"/><text x="22.5433%" y="143.50"></text></g><g><title>specialization_graph_of (600,706 samples, 0.67%)</title><rect x="22.2965%" y="117" width="0.6683%" height="15" fill="rgb(230,62,27)"/><text x="22.5465%" y="127.50"></text></g><g><title>param_env (133,542 samples, 0.15%)</title><rect x="22.9648%" y="149" width="0.1486%" height="15" fill="rgb(216,154,8)"/><text x="23.2148%" y="159.50"></text></g><g><title>impl_parent (2,938,716 samples, 3.27%)</title><rect x="29.4259%" y="133" width="3.2692%" height="15" fill="rgb(244,35,45)"/><text x="29.6759%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,528,268 samples, 1.70%)</title><rect x="30.9949%" y="117" width="1.7001%" height="15" fill="rgb(251,115,12)"/><text x="31.2449%" y="127.50"></text></g><g><title>impl_trait_ref (8,249,222 samples, 9.18%)</title><rect x="32.6951%" y="133" width="9.1768%" height="15" fill="rgb(240,54,50)"/><text x="32.9451%" y="143.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,806,748 samples, 7.57%)</title><rect x="34.2997%" y="117" width="7.5721%" height="15" fill="rgb(233,84,52)"/><text x="34.5497%" y="127.50">metadata_d..</text></g><g><title>coherent_trait (18,831,577 samples, 20.95%)</title><rect x="22.2432%" y="165" width="20.9491%" height="15" fill="rgb(207,117,47)"/><text x="22.4932%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (18,049,359 samples, 20.08%)</title><rect x="23.1133%" y="149" width="20.0789%" height="15" fill="rgb(249,43,39)"/><text x="23.3633%" y="159.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,183,804 samples, 1.32%)</title><rect x="41.8754%" y="133" width="1.3169%" height="15" fill="rgb(209,38,44)"/><text x="42.1254%" y="143.50"></text></g><g><title>implementations_of_trait (298,742 samples, 0.33%)</title><rect x="42.8599%" y="117" width="0.3323%" height="15" fill="rgb(236,212,23)"/><text x="43.1099%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (238,242 samples, 0.27%)</title><rect x="42.9272%" y="101" width="0.2650%" height="15" fill="rgb(242,79,21)"/><text x="43.1772%" y="111.50"></text></g><g><title>coherence_checking (18,922,539 samples, 21.05%)</title><rect x="22.2125%" y="181" width="21.0503%" height="15" fill="rgb(211,96,35)"/><text x="22.4625%" y="191.50">coherence_checking</text></g><g><title>dropck_outlives (149,082 samples, 0.17%)</title><rect x="52.5159%" y="133" width="0.1658%" height="15" fill="rgb(253,215,40)"/><text x="52.7659%" y="143.50"></text></g><g><title>predicates_of (94,790 samples, 0.11%)</title><rect x="53.7504%" y="117" width="0.1054%" height="15" fill="rgb(211,81,21)"/><text x="54.0004%" y="127.50"></text></g><g><title>trait_impls_of (365,354 samples, 0.41%)</title><rect x="53.9019%" y="117" width="0.4064%" height="15" fill="rgb(208,190,38)"/><text x="54.1519%" y="127.50"></text></g><g><title>implementations_of_trait (127,201 samples, 0.14%)</title><rect x="54.1668%" y="101" width="0.1415%" height="15" fill="rgb(235,213,38)"/><text x="54.4168%" y="111.50"></text></g><g><title>evaluate_obligation (1,463,045 samples, 1.63%)</title><rect x="52.6818%" y="133" width="1.6276%" height="15" fill="rgb(237,122,38)"/><text x="52.9318%" y="143.50"></text></g><g><title>method_autoderef_steps (129,970 samples, 0.14%)</title><rect x="54.6996%" y="133" width="0.1446%" height="15" fill="rgb(244,218,35)"/><text x="54.9496%" y="143.50"></text></g><g><title>predicates_of (166,633 samples, 0.19%)</title><rect x="54.8746%" y="133" width="0.1854%" height="15" fill="rgb(240,68,47)"/><text x="55.1246%" y="143.50"></text></g><g><title>predicates_defined_on (119,971 samples, 0.13%)</title><rect x="54.9265%" y="117" width="0.1335%" height="15" fill="rgb(210,16,53)"/><text x="55.1765%" y="127.50"></text></g><g><title>associated_item (558,617 samples, 0.62%)</title><rect x="58.2174%" y="101" width="0.6214%" height="15" fill="rgb(235,124,12)"/><text x="58.4674%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (455,417 samples, 0.51%)</title><rect x="58.3322%" y="85" width="0.5066%" height="15" fill="rgb(224,169,11)"/><text x="58.5822%" y="95.50"></text></g><g><title>associated_items (742,799 samples, 0.83%)</title><rect x="58.0355%" y="117" width="0.8263%" height="15" fill="rgb(250,166,2)"/><text x="58.2855%" y="127.50"></text></g><g><title>adt_dtorck_constraint (121,741 samples, 0.14%)</title><rect x="59.0140%" y="85" width="0.1354%" height="15" fill="rgb(242,216,29)"/><text x="59.2640%" y="95.50"></text></g><g><title>dropck_outlives (250,651 samples, 0.28%)</title><rect x="58.8838%" y="117" width="0.2788%" height="15" fill="rgb(230,116,27)"/><text x="59.1338%" y="127.50"></text></g><g><title>adt_dtorck_constraint (199,591 samples, 0.22%)</title><rect x="58.9406%" y="101" width="0.2220%" height="15" fill="rgb(228,99,48)"/><text x="59.1906%" y="111.50"></text></g><g><title>adt_def (131,172 samples, 0.15%)</title><rect x="59.6438%" y="85" width="0.1459%" height="15" fill="rgb(253,11,6)"/><text x="59.8938%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (129,512 samples, 0.14%)</title><rect x="59.6457%" y="69" width="0.1441%" height="15" fill="rgb(247,143,39)"/><text x="59.8957%" y="79.50"></text></g><g><title>item_attrs (101,011 samples, 0.11%)</title><rect x="59.6774%" y="53" width="0.1124%" height="15" fill="rgb(236,97,10)"/><text x="59.9274%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,981 samples, 0.11%)</title><rect x="59.6796%" y="37" width="0.1101%" height="15" fill="rgb(233,208,19)"/><text x="59.9296%" y="47.50"></text></g><g><title>adt_sized_constraint (174,672 samples, 0.19%)</title><rect x="59.6341%" y="101" width="0.1943%" height="15" fill="rgb(216,164,2)"/><text x="59.8841%" y="111.50"></text></g><g><title>evaluate_obligation (1,049,143 samples, 1.17%)</title><rect x="59.1627%" y="117" width="1.1671%" height="15" fill="rgb(220,129,5)"/><text x="59.4127%" y="127.50"></text></g><g><title>trait_impls_of (320,173 samples, 0.36%)</title><rect x="59.9736%" y="101" width="0.3562%" height="15" fill="rgb(242,17,10)"/><text x="60.2236%" y="111.50"></text></g><g><title>implementations_of_trait (100,700 samples, 0.11%)</title><rect x="60.2177%" y="85" width="0.1120%" height="15" fill="rgb(242,107,0)"/><text x="60.4677%" y="95.50"></text></g><g><title>is_copy_raw (110,820 samples, 0.12%)</title><rect x="60.5013%" y="117" width="0.1233%" height="15" fill="rgb(251,28,31)"/><text x="60.7513%" y="127.50"></text></g><g><title>evaluate_obligation (97,110 samples, 0.11%)</title><rect x="60.5165%" y="101" width="0.1080%" height="15" fill="rgb(233,223,10)"/><text x="60.7665%" y="111.50"></text></g><g><title>evaluate_obligation (128,812 samples, 0.14%)</title><rect x="60.8578%" y="101" width="0.1433%" height="15" fill="rgb(215,21,27)"/><text x="61.1078%" y="111.50"></text></g><g><title>method_autoderef_steps (233,663 samples, 0.26%)</title><rect x="60.7589%" y="117" width="0.2599%" height="15" fill="rgb(232,23,21)"/><text x="61.0089%" y="127.50"></text></g><g><title>predicates_of (179,531 samples, 0.20%)</title><rect x="61.0305%" y="117" width="0.1997%" height="15" fill="rgb(244,5,23)"/><text x="61.2805%" y="127.50"></text></g><g><title>predicates_defined_on (129,121 samples, 0.14%)</title><rect x="61.0866%" y="101" width="0.1436%" height="15" fill="rgb(226,81,46)"/><text x="61.3366%" y="111.50"></text></g><g><title>typeck (5,571,093 samples, 6.20%)</title><rect x="55.1226%" y="133" width="6.1975%" height="15" fill="rgb(247,70,30)"/><text x="55.3726%" y="143.50">typeck</text></g><g><title>item_bodies_checking (16,225,920 samples, 18.05%)</title><rect x="43.3013%" y="181" width="18.0505%" height="15" fill="rgb(212,68,19)"/><text x="43.5513%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,223,210 samples, 18.05%)</title><rect x="43.3043%" y="165" width="18.0474%" height="15" fill="rgb(240,187,13)"/><text x="43.5543%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (16,195,370 samples, 18.02%)</title><rect x="43.3353%" y="149" width="18.0165%" height="15" fill="rgb(223,113,26)"/><text x="43.5853%" y="159.50">typeck</text></g><g><title>item_types_checking (516,586 samples, 0.57%)</title><rect x="61.3518%" y="181" width="0.5747%" height="15" fill="rgb(206,192,2)"/><text x="61.6018%" y="191.50"></text></g><g><title>check_mod_item_types (513,386 samples, 0.57%)</title><rect x="61.3553%" y="165" width="0.5711%" height="15" fill="rgb(241,108,4)"/><text x="61.6053%" y="175.50"></text></g><g><title>typeck (127,382 samples, 0.14%)</title><rect x="61.7847%" y="149" width="0.1417%" height="15" fill="rgb(247,173,49)"/><text x="62.0347%" y="159.50"></text></g><g><title>fn_sig (237,560 samples, 0.26%)</title><rect x="62.2060%" y="149" width="0.2643%" height="15" fill="rgb(224,114,35)"/><text x="62.4560%" y="159.50"></text></g><g><title>generics_of (219,135 samples, 0.24%)</title><rect x="62.4702%" y="149" width="0.2438%" height="15" fill="rgb(245,159,27)"/><text x="62.7202%" y="159.50"></text></g><g><title>late_bound_vars_map (270,093 samples, 0.30%)</title><rect x="63.0881%" y="101" width="0.3005%" height="15" fill="rgb(245,172,44)"/><text x="63.3381%" y="111.50"></text></g><g><title>resolve_lifetimes (250,193 samples, 0.28%)</title><rect x="63.1102%" y="85" width="0.2783%" height="15" fill="rgb(236,23,11)"/><text x="63.3602%" y="95.50"></text></g><g><title>explicit_predicates_of (471,925 samples, 0.52%)</title><rect x="62.8793%" y="117" width="0.5250%" height="15" fill="rgb(205,117,38)"/><text x="63.1293%" y="127.50"></text></g><g><title>predicates_of (824,919 samples, 0.92%)</title><rect x="62.7607%" y="149" width="0.9177%" height="15" fill="rgb(237,72,25)"/><text x="63.0107%" y="159.50"></text></g><g><title>predicates_defined_on (787,918 samples, 0.88%)</title><rect x="62.8019%" y="133" width="0.8765%" height="15" fill="rgb(244,70,9)"/><text x="63.0519%" y="143.50"></text></g><g><title>inferred_outlives_of (246,452 samples, 0.27%)</title><rect x="63.4043%" y="117" width="0.2742%" height="15" fill="rgb(217,125,39)"/><text x="63.6543%" y="127.50"></text></g><g><title>inferred_outlives_crate (229,092 samples, 0.25%)</title><rect x="63.4236%" y="101" width="0.2549%" height="15" fill="rgb(235,36,10)"/><text x="63.6736%" y="111.50"></text></g><g><title>type_of (100,522 samples, 0.11%)</title><rect x="63.5666%" y="85" width="0.1118%" height="15" fill="rgb(251,123,47)"/><text x="63.8166%" y="95.50"></text></g><g><title>type_collecting (1,681,889 samples, 1.87%)</title><rect x="61.9278%" y="181" width="1.8710%" height="15" fill="rgb(221,13,13)"/><text x="62.1778%" y="191.50">t..</text></g><g><title>collect_mod_item_types (1,664,519 samples, 1.85%)</title><rect x="61.9471%" y="165" width="1.8517%" height="15" fill="rgb(238,131,9)"/><text x="62.1971%" y="175.50">c..</text></g><g><title>type_of (108,240 samples, 0.12%)</title><rect x="63.6784%" y="149" width="0.1204%" height="15" fill="rgb(211,50,8)"/><text x="63.9284%" y="159.50"></text></g><g><title>adt_sized_constraint (91,911 samples, 0.10%)</title><rect x="64.8965%" y="133" width="0.1022%" height="15" fill="rgb(245,182,24)"/><text x="65.1465%" y="143.50"></text></g><g><title>evaluate_obligation (318,154 samples, 0.35%)</title><rect x="64.7035%" y="149" width="0.3539%" height="15" fill="rgb(242,14,37)"/><text x="64.9535%" y="159.50"></text></g><g><title>implied_outlives_bounds (97,691 samples, 0.11%)</title><rect x="65.0574%" y="149" width="0.1087%" height="15" fill="rgb(246,228,12)"/><text x="65.3074%" y="159.50"></text></g><g><title>param_env (120,950 samples, 0.13%)</title><rect x="65.1661%" y="149" width="0.1346%" height="15" fill="rgb(213,55,15)"/><text x="65.4161%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,448,635 samples, 1.61%)</title><rect x="63.8928%" y="165" width="1.6115%" height="15" fill="rgb(209,9,3)"/><text x="64.1428%" y="175.50"></text></g><g><title>region_scope_tree (166,902 samples, 0.19%)</title><rect x="65.3187%" y="149" width="0.1857%" height="15" fill="rgb(230,59,30)"/><text x="65.5687%" y="159.50"></text></g><g><title>evaluate_obligation (213,633 samples, 0.24%)</title><rect x="66.0979%" y="149" width="0.2377%" height="15" fill="rgb(209,121,21)"/><text x="66.3479%" y="159.50"></text></g><g><title>param_env (144,161 samples, 0.16%)</title><rect x="66.4013%" y="149" width="0.1604%" height="15" fill="rgb(220,109,13)"/><text x="66.6513%" y="159.50"></text></g><g><title>analysis (59,414,097 samples, 66.09%)</title><rect x="0.6633%" y="213" width="66.0950%" height="15" fill="rgb(232,18,1)"/><text x="0.9133%" y="223.50">analysis</text></g><g><title>type_check_crate (40,083,743 samples, 44.59%)</title><rect x="22.1673%" y="197" width="44.5910%" height="15" fill="rgb(215,41,42)"/><text x="22.4173%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,658,089 samples, 2.96%)</title><rect x="63.8013%" y="181" width="2.9570%" height="15" fill="rgb(224,123,36)"/><text x="64.0513%" y="191.50">wf_..</text></g><g><title>check_item_well_formed (1,127,192 samples, 1.25%)</title><rect x="65.5043%" y="165" width="1.2539%" height="15" fill="rgb(240,125,3)"/><text x="65.7543%" y="175.50"></text></g><g><title>codegen_crate (338,483 samples, 0.38%)</title><rect x="66.7669%" y="213" width="0.3765%" height="15" fill="rgb(205,98,50)"/><text x="67.0169%" y="223.50"></text></g><g><title>metadata_load_macro (356,322 samples, 0.40%)</title><rect x="84.6475%" y="165" width="0.3964%" height="15" fill="rgb(205,185,37)"/><text x="84.8975%" y="175.50"></text></g><g><title>metadata_register_crate (2,416,997 samples, 2.69%)</title><rect x="85.0439%" y="165" width="2.6888%" height="15" fill="rgb(238,207,15)"/><text x="85.2939%" y="175.50">me..</text></g><g><title>metadata_register_crate (915,232 samples, 1.02%)</title><rect x="86.7145%" y="149" width="1.0181%" height="15" fill="rgb(213,199,42)"/><text x="86.9645%" y="159.50"></text></g><g><title>macro_expand_crate (18,308,133 samples, 20.37%)</title><rect x="67.5784%" y="197" width="20.3668%" height="15" fill="rgb(235,201,11)"/><text x="67.8284%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (18,285,312 samples, 20.34%)</title><rect x="67.6038%" y="181" width="20.3414%" height="15" fill="rgb(207,46,11)"/><text x="67.8538%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (191,052 samples, 0.21%)</title><rect x="87.7327%" y="165" width="0.2125%" height="15" fill="rgb(241,35,35)"/><text x="87.9827%" y="175.50"></text></g><g><title>finalize_macro_resolutions (120,872 samples, 0.13%)</title><rect x="88.0707%" y="181" width="0.1345%" height="15" fill="rgb(243,32,47)"/><text x="88.3207%" y="191.50"></text></g><g><title>late_resolve_crate (2,112,303 samples, 2.35%)</title><rect x="88.2052%" y="181" width="2.3498%" height="15" fill="rgb(247,202,23)"/><text x="88.4552%" y="191.50">l..</text></g><g><title>configure_and_expand (21,134,514 samples, 23.51%)</title><rect x="67.1434%" y="213" width="23.5110%" height="15" fill="rgb(219,102,11)"/><text x="67.3934%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,391,736 samples, 2.66%)</title><rect x="87.9938%" y="197" width="2.6607%" height="15" fill="rgb(243,110,44)"/><text x="88.2438%" y="207.50">re..</text></g><g><title>drop_ast (151,862 samples, 0.17%)</title><rect x="90.6544%" y="213" width="0.1689%" height="15" fill="rgb(222,74,54)"/><text x="90.9044%" y="223.50"></text></g><g><title>early_lint_checks (309,353 samples, 0.34%)</title><rect x="90.8384%" y="213" width="0.3441%" height="15" fill="rgb(216,99,12)"/><text x="91.0884%" y="223.50"></text></g><g><title>free_global_ctxt (3,380,128 samples, 3.76%)</title><rect x="91.1825%" y="213" width="3.7602%" height="15" fill="rgb(226,22,26)"/><text x="91.4325%" y="223.50">free..</text></g><g><title>generate_crate_metadata (533,246 samples, 0.59%)</title><rect x="94.9428%" y="213" width="0.5932%" height="15" fill="rgb(217,163,10)"/><text x="95.1928%" y="223.50"></text></g><g><title>hir_lowering (2,440,627 samples, 2.72%)</title><rect x="95.5360%" y="213" width="2.7151%" height="15" fill="rgb(213,25,53)"/><text x="95.7860%" y="223.50">hi..</text></g><g><title>parse_crate (241,303 samples, 0.27%)</title><rect x="98.3017%" y="213" width="0.2684%" height="15" fill="rgb(252,105,26)"/><text x="98.5517%" y="223.50"></text></g><g><title>prepare_outputs (291,623 samples, 0.32%)</title><rect x="98.5790%" y="213" width="0.3244%" height="15" fill="rgb(220,39,43)"/><text x="98.8290%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (577,886 samples, 0.64%)</title><rect x="98.9034%" y="213" width="0.6429%" height="15" fill="rgb(229,68,48)"/><text x="99.1534%" y="223.50"></text></g><g><title>setup_global_ctxt (104,281 samples, 0.12%)</title><rect x="99.5579%" y="213" width="0.1160%" height="15" fill="rgb(252,8,32)"/><text x="99.8079%" y="223.50"></text></g><g><title>all (89,892,023 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (89,892,023 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (293,143 samples, 0.33%)</title><rect x="99.6739%" y="213" width="0.3261%" height="15" fill="rgb(236,28,36)"/><text x="99.9239%" y="223.50"></text></g></svg></svg>