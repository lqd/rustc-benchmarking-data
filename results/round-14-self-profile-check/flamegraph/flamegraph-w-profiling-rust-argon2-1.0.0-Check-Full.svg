<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (326,735 samples, 0.13%)</title><rect x="14.5967%" y="133" width="0.1346%" height="15" fill="rgb(227,0,7)"/><text x="14.8467%" y="143.50"></text></g><g><title>item_attrs (321,033 samples, 0.13%)</title><rect x="15.1843%" y="101" width="0.1322%" height="15" fill="rgb(217,0,24)"/><text x="15.4343%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (310,813 samples, 0.13%)</title><rect x="15.1885%" y="85" width="0.1280%" height="15" fill="rgb(221,193,54)"/><text x="15.4385%" y="95.50"></text></g><g><title>codegen_fn_attrs (453,635 samples, 0.19%)</title><rect x="15.1392%" y="117" width="0.1869%" height="15" fill="rgb(248,212,6)"/><text x="15.3892%" y="127.50"></text></g><g><title>is_copy_raw (253,252 samples, 0.10%)</title><rect x="18.4874%" y="69" width="0.1043%" height="15" fill="rgb(208,68,35)"/><text x="18.7374%" y="79.50"></text></g><g><title>adt_drop_tys (577,964 samples, 0.24%)</title><rect x="18.4487%" y="85" width="0.2381%" height="15" fill="rgb(232,128,0)"/><text x="18.6987%" y="95.50"></text></g><g><title>is_copy_raw (833,746 samples, 0.34%)</title><rect x="18.6868%" y="85" width="0.3434%" height="15" fill="rgb(207,160,47)"/><text x="18.9368%" y="95.50"></text></g><g><title>evaluate_obligation (711,926 samples, 0.29%)</title><rect x="18.7370%" y="69" width="0.2933%" height="15" fill="rgb(228,23,34)"/><text x="18.9870%" y="79.50"></text></g><g><title>needs_drop_raw (1,813,005 samples, 0.75%)</title><rect x="18.2959%" y="101" width="0.7468%" height="15" fill="rgb(218,30,26)"/><text x="18.5459%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (510,979 samples, 0.21%)</title><rect x="19.1803%" y="85" width="0.2105%" height="15" fill="rgb(220,122,19)"/><text x="19.4303%" y="95.50"></text></g><g><title>specialization_graph_of (884,879 samples, 0.36%)</title><rect x="19.4332%" y="85" width="0.3645%" height="15" fill="rgb(250,228,42)"/><text x="19.6832%" y="95.50"></text></g><g><title>impl_trait_ref (412,104 samples, 0.17%)</title><rect x="19.6279%" y="69" width="0.1698%" height="15" fill="rgb(240,193,28)"/><text x="19.8779%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (352,833 samples, 0.15%)</title><rect x="19.6523%" y="53" width="0.1453%" height="15" fill="rgb(216,20,37)"/><text x="19.9023%" y="63.50"></text></g><g><title>resolve_instance (1,940,484 samples, 0.80%)</title><rect x="19.0427%" y="101" width="0.7993%" height="15" fill="rgb(206,188,39)"/><text x="19.2927%" y="111.50"></text></g><g><title>thir_body (2,886,226 samples, 1.19%)</title><rect x="19.8624%" y="101" width="1.1889%" height="15" fill="rgb(217,207,13)"/><text x="20.1124%" y="111.50"></text></g><g><title>mir_const (17,420,393 samples, 7.18%)</title><rect x="13.8928%" y="149" width="7.1757%" height="15" fill="rgb(231,73,38)"/><text x="14.1428%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (15,384,949 samples, 6.34%)</title><rect x="14.7312%" y="133" width="6.3373%" height="15" fill="rgb(225,20,46)"/><text x="14.9812%" y="143.50">unsafety..</text></g><g><title>mir_built (13,940,905 samples, 5.74%)</title><rect x="15.3261%" y="117" width="5.7424%" height="15" fill="rgb(210,31,41)"/><text x="15.5761%" y="127.50">mir_bui..</text></g><g><title>mir_promoted (19,784,511 samples, 8.15%)</title><rect x="13.1440%" y="165" width="8.1495%" height="15" fill="rgb(221,200,47)"/><text x="13.3940%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (546,307 samples, 0.23%)</title><rect x="21.0685%" y="149" width="0.2250%" height="15" fill="rgb(226,26,5)"/><text x="21.3185%" y="159.50"></text></g><g><title>mir_const (384,234 samples, 0.16%)</title><rect x="21.1353%" y="133" width="0.1583%" height="15" fill="rgb(249,33,26)"/><text x="21.3853%" y="143.50"></text></g><g><title>unsafety_check_result (276,911 samples, 0.11%)</title><rect x="21.1795%" y="117" width="0.1141%" height="15" fill="rgb(235,183,28)"/><text x="21.4295%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (340,955 samples, 0.14%)</title><rect x="21.2937%" y="165" width="0.1404%" height="15" fill="rgb(221,5,38)"/><text x="21.5437%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,100,724 samples, 0.45%)</title><rect x="21.4341%" y="165" width="0.4534%" height="15" fill="rgb(247,18,42)"/><text x="21.6841%" y="175.50"></text></g><g><title>normalize_projection_ty (752,070 samples, 0.31%)</title><rect x="21.5778%" y="149" width="0.3098%" height="15" fill="rgb(241,131,45)"/><text x="21.8278%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,802,022 samples, 1.15%)</title><rect x="21.9855%" y="165" width="1.1542%" height="15" fill="rgb(249,31,29)"/><text x="22.2355%" y="175.50"></text></g><g><title>MIR_borrow_checking (54,607,830 samples, 22.49%)</title><rect x="0.6507%" y="197" width="22.4937%" height="15" fill="rgb(225,111,53)"/><text x="0.9007%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (54,355,770 samples, 22.39%)</title><rect x="0.7545%" y="181" width="22.3899%" height="15" fill="rgb(238,160,17)"/><text x="1.0045%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (357,954 samples, 0.15%)</title><rect x="23.1444%" y="197" width="0.1474%" height="15" fill="rgb(214,148,48)"/><text x="23.3944%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (247,723 samples, 0.10%)</title><rect x="23.1898%" y="181" width="0.1020%" height="15" fill="rgb(232,36,49)"/><text x="23.4398%" y="191.50"></text></g><g><title>hir_module_items (340,643 samples, 0.14%)</title><rect x="23.2918%" y="197" width="0.1403%" height="15" fill="rgb(209,103,24)"/><text x="23.5418%" y="207.50"></text></g><g><title>should_inherit_track_caller (310,423 samples, 0.13%)</title><rect x="23.7260%" y="149" width="0.1279%" height="15" fill="rgb(229,88,8)"/><text x="23.9760%" y="159.50"></text></g><g><title>codegen_fn_attrs (510,517 samples, 0.21%)</title><rect x="23.6519%" y="165" width="0.2103%" height="15" fill="rgb(213,181,19)"/><text x="23.9019%" y="175.50"></text></g><g><title>check_mod_attrs (1,004,949 samples, 0.41%)</title><rect x="23.4483%" y="181" width="0.4140%" height="15" fill="rgb(254,191,54)"/><text x="23.6983%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (614,088 samples, 0.25%)</title><rect x="24.0223%" y="181" width="0.2530%" height="15" fill="rgb(241,83,37)"/><text x="24.2723%" y="191.50"></text></g><g><title>misc_checking_1 (2,139,714 samples, 0.88%)</title><rect x="23.4324%" y="197" width="0.8814%" height="15" fill="rgb(233,36,39)"/><text x="23.6824%" y="207.50"></text></g><g><title>eval_to_const_value_raw (245,483 samples, 0.10%)</title><rect x="24.7172%" y="117" width="0.1011%" height="15" fill="rgb(226,3,54)"/><text x="24.9672%" y="127.50"></text></g><g><title>liveness_and_intrinsic_checking (1,261,355 samples, 0.52%)</title><rect x="24.3144%" y="181" width="0.5196%" height="15" fill="rgb(245,192,40)"/><text x="24.5644%" y="191.50"></text></g><g><title>check_mod_liveness (1,035,962 samples, 0.43%)</title><rect x="24.4072%" y="165" width="0.4267%" height="15" fill="rgb(238,167,29)"/><text x="24.6572%" y="175.50"></text></g><g><title>type_uninhabited_from (370,723 samples, 0.15%)</title><rect x="24.6812%" y="149" width="0.1527%" height="15" fill="rgb(232,182,51)"/><text x="24.9312%" y="159.50"></text></g><g><title>type_uninhabited_from (326,593 samples, 0.13%)</title><rect x="24.6994%" y="133" width="0.1345%" height="15" fill="rgb(231,60,39)"/><text x="24.9494%" y="143.50"></text></g><g><title>misc_checking_2 (2,630,480 samples, 1.08%)</title><rect x="24.3137%" y="197" width="1.0835%" height="15" fill="rgb(208,69,12)"/><text x="24.5637%" y="207.50"></text></g><g><title>match_checking (1,367,555 samples, 0.56%)</title><rect x="24.8339%" y="181" width="0.5633%" height="15" fill="rgb(235,93,37)"/><text x="25.0839%" y="191.50"></text></g><g><title>check_match (1,301,923 samples, 0.54%)</title><rect x="24.8610%" y="165" width="0.5363%" height="15" fill="rgb(213,116,39)"/><text x="25.1110%" y="175.50"></text></g><g><title>check_private_in_public (376,104 samples, 0.15%)</title><rect x="25.4014%" y="181" width="0.1549%" height="15" fill="rgb(222,207,29)"/><text x="25.6514%" y="191.50"></text></g><g><title>death_checking (928,270 samples, 0.38%)</title><rect x="25.5563%" y="181" width="0.3824%" height="15" fill="rgb(206,96,30)"/><text x="25.8063%" y="191.50"></text></g><g><title>eval_to_const_value_raw (303,074 samples, 0.12%)</title><rect x="26.4676%" y="149" width="0.1248%" height="15" fill="rgb(218,138,4)"/><text x="26.7176%" y="159.50"></text></g><g><title>eval_to_const_value_raw (289,874 samples, 0.12%)</title><rect x="26.4730%" y="133" width="0.1194%" height="15" fill="rgb(250,191,14)"/><text x="26.7230%" y="143.50"></text></g><g><title>eval_to_allocation_raw (268,173 samples, 0.11%)</title><rect x="26.4820%" y="117" width="0.1105%" height="15" fill="rgb(239,60,40)"/><text x="26.7320%" y="127.50"></text></g><g><title>param_env (537,726 samples, 0.22%)</title><rect x="26.5924%" y="149" width="0.2215%" height="15" fill="rgb(206,27,48)"/><text x="26.8424%" y="159.50"></text></g><g><title>predicates_of (278,795 samples, 0.11%)</title><rect x="26.6991%" y="133" width="0.1148%" height="15" fill="rgb(225,35,8)"/><text x="26.9491%" y="143.50"></text></g><g><title>crate_lints (3,328,177 samples, 1.37%)</title><rect x="25.9394%" y="165" width="1.3709%" height="15" fill="rgb(250,213,24)"/><text x="26.1894%" y="175.50"></text></g><g><title>type_of (1,130,282 samples, 0.47%)</title><rect x="26.8448%" y="149" width="0.4656%" height="15" fill="rgb(247,123,22)"/><text x="27.0948%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (893,040 samples, 0.37%)</title><rect x="26.9425%" y="133" width="0.3679%" height="15" fill="rgb(231,138,38)"/><text x="27.1925%" y="143.50"></text></g><g><title>lint_checking (4,460,890 samples, 1.84%)</title><rect x="25.9387%" y="181" width="1.8375%" height="15" fill="rgb(231,145,46)"/><text x="26.1887%" y="191.50">l..</text></g><g><title>module_lints (1,130,793 samples, 0.47%)</title><rect x="27.3104%" y="165" width="0.4658%" height="15" fill="rgb(251,118,11)"/><text x="27.5604%" y="175.50"></text></g><g><title>lint_mod (1,118,243 samples, 0.46%)</title><rect x="27.3155%" y="149" width="0.4606%" height="15" fill="rgb(217,147,25)"/><text x="27.5655%" y="159.50"></text></g><g><title>privacy_access_levels (449,635 samples, 0.19%)</title><rect x="27.7762%" y="181" width="0.1852%" height="15" fill="rgb(247,81,37)"/><text x="28.0262%" y="191.50"></text></g><g><title>privacy_checking_modules (1,704,459 samples, 0.70%)</title><rect x="27.9614%" y="181" width="0.7021%" height="15" fill="rgb(209,12,38)"/><text x="28.2114%" y="191.50"></text></g><g><title>check_mod_privacy (1,695,899 samples, 0.70%)</title><rect x="27.9649%" y="165" width="0.6986%" height="15" fill="rgb(227,1,9)"/><text x="28.2149%" y="175.50"></text></g><g><title>misc_checking_3 (7,955,429 samples, 3.28%)</title><rect x="25.3973%" y="197" width="3.2769%" height="15" fill="rgb(248,47,43)"/><text x="25.6473%" y="207.50">mis..</text></g><g><title>adt_destructor (316,773 samples, 0.13%)</title><rect x="28.7581%" y="149" width="0.1305%" height="15" fill="rgb(221,10,30)"/><text x="29.0081%" y="159.50"></text></g><g><title>coherent_trait (313,313 samples, 0.13%)</title><rect x="28.7595%" y="133" width="0.1291%" height="15" fill="rgb(210,229,1)"/><text x="29.0095%" y="143.50"></text></g><g><title>specialization_graph_of (312,353 samples, 0.13%)</title><rect x="28.7599%" y="117" width="0.1287%" height="15" fill="rgb(222,148,37)"/><text x="29.0099%" y="127.50"></text></g><g><title>impl_parent (3,002,046 samples, 1.24%)</title><rect x="30.8047%" y="133" width="1.2366%" height="15" fill="rgb(234,67,33)"/><text x="31.0547%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,654,660 samples, 0.68%)</title><rect x="31.3597%" y="117" width="0.6816%" height="15" fill="rgb(247,98,35)"/><text x="31.6097%" y="127.50"></text></g><g><title>impl_trait_ref (5,972,590 samples, 2.46%)</title><rect x="32.0412%" y="133" width="2.4602%" height="15" fill="rgb(247,138,52)"/><text x="32.2912%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,777,703 samples, 1.97%)</title><rect x="32.5334%" y="117" width="1.9680%" height="15" fill="rgb(213,79,30)"/><text x="32.7834%" y="127.50">m..</text></g><g><title>trait_impls_of (1,055,643 samples, 0.43%)</title><rect x="34.5144%" y="133" width="0.4348%" height="15" fill="rgb(246,177,23)"/><text x="34.7644%" y="143.50"></text></g><g><title>implementations_of_trait (317,714 samples, 0.13%)</title><rect x="34.8184%" y="117" width="0.1309%" height="15" fill="rgb(230,62,27)"/><text x="35.0684%" y="127.50"></text></g><g><title>coherent_trait (15,073,438 samples, 6.21%)</title><rect x="28.7408%" y="165" width="6.2089%" height="15" fill="rgb(216,154,8)"/><text x="28.9908%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (14,686,494 samples, 6.05%)</title><rect x="28.9001%" y="149" width="6.0496%" height="15" fill="rgb(244,35,45)"/><text x="29.1501%" y="159.50">speciali..</text></g><g><title>coherence_checking (15,177,699 samples, 6.25%)</title><rect x="28.7308%" y="181" width="6.2519%" height="15" fill="rgb(251,115,12)"/><text x="28.9808%" y="191.50">coherenc..</text></g><g><title>associated_item (968,384 samples, 0.40%)</title><rect x="58.2693%" y="117" width="0.3989%" height="15" fill="rgb(240,54,50)"/><text x="58.5193%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (849,731 samples, 0.35%)</title><rect x="58.3182%" y="101" width="0.3500%" height="15" fill="rgb(233,84,52)"/><text x="58.5682%" y="111.50"></text></g><g><title>associated_items (1,192,895 samples, 0.49%)</title><rect x="58.1907%" y="133" width="0.4914%" height="15" fill="rgb(207,117,47)"/><text x="58.4407%" y="143.50"></text></g><g><title>adt_dtorck_constraint (445,402 samples, 0.18%)</title><rect x="58.8332%" y="117" width="0.1835%" height="15" fill="rgb(249,43,39)"/><text x="59.0832%" y="127.50"></text></g><g><title>dropck_outlives (768,396 samples, 0.32%)</title><rect x="58.7194%" y="133" width="0.3165%" height="15" fill="rgb(209,38,44)"/><text x="58.9694%" y="143.50"></text></g><g><title>mir_borrowck (256,463 samples, 0.11%)</title><rect x="59.1663%" y="69" width="0.1056%" height="15" fill="rgb(236,212,23)"/><text x="59.4163%" y="79.50"></text></g><g><title>mir_for_ctfe (383,336 samples, 0.16%)</title><rect x="59.1145%" y="101" width="0.1579%" height="15" fill="rgb(242,79,21)"/><text x="59.3645%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (342,485 samples, 0.14%)</title><rect x="59.1313%" y="85" width="0.1411%" height="15" fill="rgb(211,96,35)"/><text x="59.3813%" y="95.50"></text></g><g><title>eval_to_allocation_raw (684,027 samples, 0.28%)</title><rect x="59.0432%" y="117" width="0.2818%" height="15" fill="rgb(253,215,40)"/><text x="59.2932%" y="127.50"></text></g><g><title>mir_borrowck (412,763 samples, 0.17%)</title><rect x="59.6256%" y="53" width="0.1700%" height="15" fill="rgb(211,81,21)"/><text x="59.8756%" y="63.50"></text></g><g><title>mir_for_ctfe (655,568 samples, 0.27%)</title><rect x="59.5267%" y="85" width="0.2700%" height="15" fill="rgb(208,190,38)"/><text x="59.7767%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (582,817 samples, 0.24%)</title><rect x="59.5567%" y="69" width="0.2401%" height="15" fill="rgb(235,213,38)"/><text x="59.8067%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,854,859 samples, 0.76%)</title><rect x="59.0359%" y="133" width="0.7640%" height="15" fill="rgb(237,122,38)"/><text x="59.2859%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,152,972 samples, 0.47%)</title><rect x="59.3250%" y="117" width="0.4749%" height="15" fill="rgb(244,218,35)"/><text x="59.5750%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,133,301 samples, 0.47%)</title><rect x="59.3331%" y="101" width="0.4668%" height="15" fill="rgb(240,68,47)"/><text x="59.5831%" y="111.50"></text></g><g><title>generics_of (489,331 samples, 0.20%)</title><rect x="61.5507%" y="117" width="0.2016%" height="15" fill="rgb(210,16,53)"/><text x="61.8007%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (367,960 samples, 0.15%)</title><rect x="61.6007%" y="101" width="0.1516%" height="15" fill="rgb(235,124,12)"/><text x="61.8507%" y="111.50"></text></g><g><title>impl_trait_ref (689,080 samples, 0.28%)</title><rect x="61.8544%" y="117" width="0.2838%" height="15" fill="rgb(224,169,11)"/><text x="62.1044%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (361,766 samples, 0.15%)</title><rect x="61.9892%" y="101" width="0.1490%" height="15" fill="rgb(250,166,2)"/><text x="62.2392%" y="111.50"></text></g><g><title>predicates_of (747,427 samples, 0.31%)</title><rect x="62.1603%" y="117" width="0.3079%" height="15" fill="rgb(242,216,29)"/><text x="62.4103%" y="127.50"></text></g><g><title>predicates_defined_on (454,512 samples, 0.19%)</title><rect x="62.2810%" y="101" width="0.1872%" height="15" fill="rgb(230,116,27)"/><text x="62.5310%" y="111.50"></text></g><g><title>specializes (1,317,563 samples, 0.54%)</title><rect x="62.4682%" y="117" width="0.5427%" height="15" fill="rgb(228,99,48)"/><text x="62.7182%" y="127.50"></text></g><g><title>param_env (817,159 samples, 0.34%)</title><rect x="62.6743%" y="101" width="0.3366%" height="15" fill="rgb(253,11,6)"/><text x="62.9243%" y="111.50"></text></g><g><title>def_span (370,393 samples, 0.15%)</title><rect x="62.8584%" y="85" width="0.1526%" height="15" fill="rgb(247,143,39)"/><text x="63.1084%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (334,623 samples, 0.14%)</title><rect x="62.8731%" y="69" width="0.1378%" height="15" fill="rgb(236,97,10)"/><text x="63.1231%" y="79.50"></text></g><g><title>trait_impls_of (758,650 samples, 0.31%)</title><rect x="63.0223%" y="117" width="0.3125%" height="15" fill="rgb(233,208,19)"/><text x="63.2723%" y="127.50"></text></g><g><title>implementations_of_trait (332,764 samples, 0.14%)</title><rect x="63.1978%" y="101" width="0.1371%" height="15" fill="rgb(216,164,2)"/><text x="63.4478%" y="111.50"></text></g><g><title>evaluate_obligation (8,609,229 samples, 3.55%)</title><rect x="59.7999%" y="133" width="3.5463%" height="15" fill="rgb(220,129,5)"/><text x="60.0499%" y="143.50">eval..</text></g><g><title>generics_of (267,012 samples, 0.11%)</title><rect x="63.4383%" y="133" width="0.1100%" height="15" fill="rgb(242,17,10)"/><text x="63.6883%" y="143.50"></text></g><g><title>method_autoderef_steps (430,237 samples, 0.18%)</title><rect x="63.8198%" y="133" width="0.1772%" height="15" fill="rgb(242,107,0)"/><text x="64.0698%" y="143.50"></text></g><g><title>predicates_of (581,018 samples, 0.24%)</title><rect x="64.0919%" y="133" width="0.2393%" height="15" fill="rgb(251,28,31)"/><text x="64.3419%" y="143.50"></text></g><g><title>predicates_defined_on (395,686 samples, 0.16%)</title><rect x="64.1683%" y="117" width="0.1630%" height="15" fill="rgb(233,223,10)"/><text x="64.4183%" y="127.50"></text></g><g><title>adt_dtorck_constraint (310,884 samples, 0.13%)</title><rect x="65.2747%" y="85" width="0.1281%" height="15" fill="rgb(215,21,27)"/><text x="65.5247%" y="95.50"></text></g><g><title>dropck_outlives (656,247 samples, 0.27%)</title><rect x="65.1581%" y="117" width="0.2703%" height="15" fill="rgb(232,23,21)"/><text x="65.4081%" y="127.50"></text></g><g><title>adt_dtorck_constraint (605,867 samples, 0.25%)</title><rect x="65.1789%" y="101" width="0.2496%" height="15" fill="rgb(244,5,23)"/><text x="65.4289%" y="111.50"></text></g><g><title>evaluate_obligation (269,302 samples, 0.11%)</title><rect x="65.4284%" y="117" width="0.1109%" height="15" fill="rgb(226,81,46)"/><text x="65.6784%" y="127.50"></text></g><g><title>typeck (3,039,004 samples, 1.25%)</title><rect x="64.4623%" y="133" width="1.2518%" height="15" fill="rgb(247,70,30)"/><text x="64.7123%" y="143.50"></text></g><g><title>item_bodies_checking (74,640,084 samples, 30.75%)</title><rect x="35.0045%" y="181" width="30.7452%" height="15" fill="rgb(212,68,19)"/><text x="35.2545%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (74,636,574 samples, 30.74%)</title><rect x="35.0059%" y="165" width="30.7438%" height="15" fill="rgb(240,187,13)"/><text x="35.2559%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (74,472,741 samples, 30.68%)</title><rect x="35.0734%" y="149" width="30.6763%" height="15" fill="rgb(223,113,26)"/><text x="35.3234%" y="159.50">typeck</text></g><g><title>evaluate_obligation (1,222,704 samples, 0.50%)</title><rect x="66.5229%" y="133" width="0.5036%" height="15" fill="rgb(206,192,2)"/><text x="66.7729%" y="143.50"></text></g><g><title>typeck (1,562,348 samples, 0.64%)</title><rect x="66.3918%" y="149" width="0.6436%" height="15" fill="rgb(241,108,4)"/><text x="66.6418%" y="159.50"></text></g><g><title>item_types_checking (3,122,145 samples, 1.29%)</title><rect x="65.7497%" y="181" width="1.2861%" height="15" fill="rgb(247,173,49)"/><text x="65.9997%" y="191.50"></text></g><g><title>check_mod_item_types (3,109,945 samples, 1.28%)</title><rect x="65.7548%" y="165" width="1.2810%" height="15" fill="rgb(224,114,35)"/><text x="66.0048%" y="175.50"></text></g><g><title>mir_borrowck (551,235 samples, 0.23%)</title><rect x="67.5671%" y="69" width="0.2271%" height="15" fill="rgb(245,159,27)"/><text x="67.8171%" y="79.50"></text></g><g><title>mir_for_ctfe (778,698 samples, 0.32%)</title><rect x="67.4743%" y="101" width="0.3208%" height="15" fill="rgb(245,172,44)"/><text x="67.7243%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (715,068 samples, 0.29%)</title><rect x="67.5005%" y="85" width="0.2945%" height="15" fill="rgb(236,23,11)"/><text x="67.7505%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,629,349 samples, 0.67%)</title><rect x="67.2743%" y="149" width="0.6712%" height="15" fill="rgb(205,117,38)"/><text x="67.5243%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,612,439 samples, 0.66%)</title><rect x="67.2813%" y="133" width="0.6642%" height="15" fill="rgb(237,72,25)"/><text x="67.5313%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,600,099 samples, 0.66%)</title><rect x="67.2864%" y="117" width="0.6591%" height="15" fill="rgb(244,70,9)"/><text x="67.5364%" y="127.50"></text></g><g><title>typeck (363,815 samples, 0.15%)</title><rect x="67.7956%" y="101" width="0.1499%" height="15" fill="rgb(217,125,39)"/><text x="68.0456%" y="111.50"></text></g><g><title>fn_sig (822,856 samples, 0.34%)</title><rect x="67.9455%" y="149" width="0.3389%" height="15" fill="rgb(235,36,10)"/><text x="68.1955%" y="159.50"></text></g><g><title>lint_levels (336,804 samples, 0.14%)</title><rect x="68.6645%" y="101" width="0.1387%" height="15" fill="rgb(251,123,47)"/><text x="68.9145%" y="111.50"></text></g><g><title>named_region_map (935,182 samples, 0.39%)</title><rect x="68.4187%" y="133" width="0.3852%" height="15" fill="rgb(221,13,13)"/><text x="68.6687%" y="143.50"></text></g><g><title>resolve_lifetimes (892,371 samples, 0.37%)</title><rect x="68.4363%" y="117" width="0.3676%" height="15" fill="rgb(238,131,9)"/><text x="68.6863%" y="127.50"></text></g><g><title>generics_of (1,288,786 samples, 0.53%)</title><rect x="68.2844%" y="149" width="0.5309%" height="15" fill="rgb(211,50,8)"/><text x="68.5344%" y="159.50"></text></g><g><title>predicates_of (603,810 samples, 0.25%)</title><rect x="68.9072%" y="149" width="0.2487%" height="15" fill="rgb(245,182,24)"/><text x="69.1572%" y="159.50"></text></g><g><title>predicates_defined_on (505,397 samples, 0.21%)</title><rect x="68.9477%" y="133" width="0.2082%" height="15" fill="rgb(242,14,37)"/><text x="69.1977%" y="143.50"></text></g><g><title>type_collecting (5,251,588 samples, 2.16%)</title><rect x="67.0377%" y="181" width="2.1632%" height="15" fill="rgb(246,228,12)"/><text x="67.2877%" y="191.50">t..</text></g><g><title>collect_mod_item_types (5,225,908 samples, 2.15%)</title><rect x="67.0483%" y="165" width="2.1526%" height="15" fill="rgb(213,55,15)"/><text x="67.2983%" y="175.50">c..</text></g><g><title>evaluate_obligation (323,324 samples, 0.13%)</title><rect x="70.2118%" y="149" width="0.1332%" height="15" fill="rgb(209,9,3)"/><text x="70.4618%" y="159.50"></text></g><g><title>object_safety_violations (453,855 samples, 0.19%)</title><rect x="70.3863%" y="149" width="0.1869%" height="15" fill="rgb(230,59,30)"/><text x="70.6363%" y="159.50"></text></g><g><title>param_env (269,302 samples, 0.11%)</title><rect x="70.5732%" y="149" width="0.1109%" height="15" fill="rgb(209,121,21)"/><text x="70.8232%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,665,454 samples, 1.51%)</title><rect x="69.4252%" y="165" width="1.5098%" height="15" fill="rgb(220,109,13)"/><text x="69.6752%" y="175.50"></text></g><g><title>region_scope_tree (592,577 samples, 0.24%)</title><rect x="70.6909%" y="149" width="0.2441%" height="15" fill="rgb(232,18,1)"/><text x="70.9409%" y="159.50"></text></g><g><title>mir_borrowck (258,663 samples, 0.11%)</title><rect x="72.0081%" y="69" width="0.1065%" height="15" fill="rgb(215,41,42)"/><text x="72.2581%" y="79.50"></text></g><g><title>mir_for_ctfe (352,423 samples, 0.15%)</title><rect x="71.9698%" y="101" width="0.1452%" height="15" fill="rgb(224,123,36)"/><text x="72.2198%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (326,563 samples, 0.13%)</title><rect x="71.9804%" y="85" width="0.1345%" height="15" fill="rgb(240,125,3)"/><text x="72.2304%" y="95.50"></text></g><g><title>eval_to_const_value_raw (904,270 samples, 0.37%)</title><rect x="72.1196%" y="85" width="0.3725%" height="15" fill="rgb(205,98,50)"/><text x="72.3696%" y="95.50"></text></g><g><title>eval_to_const_value_raw (901,600 samples, 0.37%)</title><rect x="72.1207%" y="69" width="0.3714%" height="15" fill="rgb(205,185,37)"/><text x="72.3707%" y="79.50"></text></g><g><title>eval_to_allocation_raw (898,750 samples, 0.37%)</title><rect x="72.1219%" y="53" width="0.3702%" height="15" fill="rgb(238,207,15)"/><text x="72.3719%" y="63.50"></text></g><g><title>typeck (413,065 samples, 0.17%)</title><rect x="72.3220%" y="37" width="0.1701%" height="15" fill="rgb(213,199,42)"/><text x="72.5720%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (921,290 samples, 0.38%)</title><rect x="72.1152%" y="101" width="0.3795%" height="15" fill="rgb(235,201,11)"/><text x="72.3652%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,538,778 samples, 0.63%)</title><rect x="71.9090%" y="149" width="0.6338%" height="15" fill="rgb(207,46,11)"/><text x="72.1590%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,533,437 samples, 0.63%)</title><rect x="71.9112%" y="133" width="0.6316%" height="15" fill="rgb(241,35,35)"/><text x="72.1612%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,528,367 samples, 0.63%)</title><rect x="71.9133%" y="117" width="0.6296%" height="15" fill="rgb(243,32,47)"/><text x="72.1633%" y="127.50"></text></g><g><title>evaluate_obligation (732,928 samples, 0.30%)</title><rect x="72.5428%" y="149" width="0.3019%" height="15" fill="rgb(247,202,23)"/><text x="72.7928%" y="159.50"></text></g><g><title>param_env (471,133 samples, 0.19%)</title><rect x="72.9283%" y="149" width="0.1941%" height="15" fill="rgb(219,102,11)"/><text x="73.1783%" y="159.50"></text></g><g><title>region_scope_tree (557,374 samples, 0.23%)</title><rect x="73.1763%" y="149" width="0.2296%" height="15" fill="rgb(243,110,44)"/><text x="73.4263%" y="159.50"></text></g><g><title>analysis (177,354,291 samples, 73.05%)</title><rect x="0.3991%" y="213" width="73.0546%" height="15" fill="rgb(222,74,54)"/><text x="0.6491%" y="223.50">analysis</text></g><g><title>type_check_crate (108,710,983 samples, 44.78%)</title><rect x="28.6742%" y="197" width="44.7795%" height="15" fill="rgb(216,99,12)"/><text x="28.9242%" y="207.50">type_check_crate</text></g><g><title>wf_checking (10,311,865 samples, 4.25%)</title><rect x="69.2061%" y="181" width="4.2476%" height="15" fill="rgb(226,22,26)"/><text x="69.4561%" y="191.50">wf_ch..</text></g><g><title>check_item_well_formed (6,114,622 samples, 2.52%)</title><rect x="70.9350%" y="165" width="2.5187%" height="15" fill="rgb(217,163,10)"/><text x="71.1850%" y="175.50">ch..</text></g><g><title>codegen_crate (393,054 samples, 0.16%)</title><rect x="73.4573%" y="213" width="0.1619%" height="15" fill="rgb(213,25,53)"/><text x="73.7073%" y="223.50"></text></g><g><title>AST_validation (465,926 samples, 0.19%)</title><rect x="73.6957%" y="197" width="0.1919%" height="15" fill="rgb(252,105,26)"/><text x="73.9457%" y="207.50"></text></g><g><title>metadata_load_macro (353,575 samples, 0.15%)</title><rect x="89.2191%" y="165" width="0.1456%" height="15" fill="rgb(220,39,43)"/><text x="89.4691%" y="175.50"></text></g><g><title>metadata_register_crate (2,796,072 samples, 1.15%)</title><rect x="89.3647%" y="165" width="1.1517%" height="15" fill="rgb(229,68,48)"/><text x="89.6147%" y="175.50"></text></g><g><title>metadata_register_crate (904,560 samples, 0.37%)</title><rect x="90.1438%" y="149" width="0.3726%" height="15" fill="rgb(252,8,32)"/><text x="90.3938%" y="159.50"></text></g><g><title>macro_expand_crate (41,142,049 samples, 16.95%)</title><rect x="73.9671%" y="197" width="16.9470%" height="15" fill="rgb(223,20,43)"/><text x="74.2171%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (41,124,999 samples, 16.94%)</title><rect x="73.9741%" y="181" width="16.9399%" height="15" fill="rgb(229,81,49)"/><text x="74.2241%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (965,223 samples, 0.40%)</title><rect x="90.5164%" y="165" width="0.3976%" height="15" fill="rgb(236,28,36)"/><text x="90.7664%" y="175.50"></text></g><g><title>finalize_macro_resolutions (454,025 samples, 0.19%)</title><rect x="91.0328%" y="181" width="0.1870%" height="15" fill="rgb(249,185,26)"/><text x="91.2828%" y="191.50"></text></g><g><title>late_resolve_crate (5,190,738 samples, 2.14%)</title><rect x="91.2198%" y="181" width="2.1381%" height="15" fill="rgb(249,174,33)"/><text x="91.4698%" y="191.50">l..</text></g><g><title>configure_and_expand (48,169,068 samples, 19.84%)</title><rect x="73.6192%" y="213" width="19.8415%" height="15" fill="rgb(233,201,37)"/><text x="73.8692%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (6,123,898 samples, 2.52%)</title><rect x="90.9382%" y="197" width="2.5225%" height="15" fill="rgb(221,78,26)"/><text x="91.1882%" y="207.50">re..</text></g><g><title>drop_ast (365,204 samples, 0.15%)</title><rect x="93.4607%" y="213" width="0.1504%" height="15" fill="rgb(250,127,30)"/><text x="93.7107%" y="223.50"></text></g><g><title>early_lint_checks (797,199 samples, 0.33%)</title><rect x="93.6196%" y="213" width="0.3284%" height="15" fill="rgb(230,49,44)"/><text x="93.8696%" y="223.50"></text></g><g><title>free_global_ctxt (4,750,853 samples, 1.96%)</title><rect x="93.9480%" y="213" width="1.9569%" height="15" fill="rgb(229,67,23)"/><text x="94.1980%" y="223.50">f..</text></g><g><title>generate_crate_metadata (1,846,110 samples, 0.76%)</title><rect x="95.9049%" y="213" width="0.7604%" height="15" fill="rgb(249,83,47)"/><text x="96.1549%" y="223.50"></text></g><g><title>hir_lowering (5,741,365 samples, 2.36%)</title><rect x="96.6654%" y="213" width="2.3649%" height="15" fill="rgb(215,43,3)"/><text x="96.9154%" y="223.50">hi..</text></g><g><title>parse_crate (360,544 samples, 0.15%)</title><rect x="99.0574%" y="213" width="0.1485%" height="15" fill="rgb(238,154,13)"/><text x="99.3074%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,221,013 samples, 0.50%)</title><rect x="99.2919%" y="213" width="0.5030%" height="15" fill="rgb(219,56,2)"/><text x="99.5419%" y="223.50"></text></g><g><title>all (242,769,591 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (242,769,591 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (395,045 samples, 0.16%)</title><rect x="99.8373%" y="213" width="0.1627%" height="15" fill="rgb(250,79,13)"/><text x="100.0873%" y="223.50"></text></g></svg></svg>