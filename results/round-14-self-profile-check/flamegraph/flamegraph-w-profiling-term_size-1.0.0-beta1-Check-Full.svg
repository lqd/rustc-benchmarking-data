<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (55,631 samples, 0.14%)</title><rect x="7.2813%" y="117" width="0.1374%" height="15" fill="rgb(227,0,7)"/><text x="7.5313%" y="127.50"></text></g><g><title>evaluate_obligation (49,271 samples, 0.12%)</title><rect x="7.2970%" y="101" width="0.1217%" height="15" fill="rgb(217,0,24)"/><text x="7.5470%" y="111.50"></text></g><g><title>needs_drop_raw (183,022 samples, 0.45%)</title><rect x="7.4284%" y="117" width="0.4519%" height="15" fill="rgb(221,193,54)"/><text x="7.6784%" y="127.50"></text></g><g><title>is_copy_raw (180,032 samples, 0.44%)</title><rect x="7.4358%" y="101" width="0.4446%" height="15" fill="rgb(248,212,6)"/><text x="7.6858%" y="111.50"></text></g><g><title>evaluate_obligation (175,922 samples, 0.43%)</title><rect x="7.4460%" y="85" width="0.4344%" height="15" fill="rgb(208,68,35)"/><text x="7.6960%" y="95.50"></text></g><g><title>trait_impls_of (149,101 samples, 0.37%)</title><rect x="7.5122%" y="69" width="0.3682%" height="15" fill="rgb(232,128,0)"/><text x="7.7622%" y="79.50"></text></g><g><title>thir_body (139,530 samples, 0.34%)</title><rect x="7.9197%" y="117" width="0.3445%" height="15" fill="rgb(207,160,47)"/><text x="8.1697%" y="127.50"></text></g><g><title>mir_const (959,219 samples, 2.37%)</title><rect x="5.9000%" y="165" width="2.3686%" height="15" fill="rgb(228,23,34)"/><text x="6.1500%" y="175.50">mi..</text></g><g><title>unsafety_check_result (802,388 samples, 1.98%)</title><rect x="6.2873%" y="149" width="1.9813%" height="15" fill="rgb(218,30,26)"/><text x="6.5373%" y="159.50">u..</text></g><g><title>mir_built (747,637 samples, 1.85%)</title><rect x="6.4225%" y="133" width="1.8462%" height="15" fill="rgb(220,122,19)"/><text x="6.6725%" y="143.50">m..</text></g><g><title>mir_promoted (1,196,341 samples, 2.95%)</title><rect x="5.5888%" y="181" width="2.9541%" height="15" fill="rgb(250,228,42)"/><text x="5.8388%" y="191.50">mir..</text></g><g><title>mir_const_qualif (111,081 samples, 0.27%)</title><rect x="8.2686%" y="165" width="0.2743%" height="15" fill="rgb(240,193,28)"/><text x="8.5186%" y="175.50"></text></g><g><title>mir_const (87,441 samples, 0.22%)</title><rect x="8.3270%" y="149" width="0.2159%" height="15" fill="rgb(216,20,37)"/><text x="8.5770%" y="159.50"></text></g><g><title>unsafety_check_result (60,721 samples, 0.15%)</title><rect x="8.3930%" y="133" width="0.1499%" height="15" fill="rgb(206,188,39)"/><text x="8.6430%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,366,037 samples, 5.84%)</title><rect x="2.7714%" y="213" width="5.8425%" height="15" fill="rgb(217,207,13)"/><text x="3.0214%" y="223.50">MIR_bor..</text></g><g><title>mir_borrowck (2,351,026 samples, 5.81%)</title><rect x="2.8085%" y="197" width="5.8054%" height="15" fill="rgb(231,73,38)"/><text x="3.0585%" y="207.50">mir_bor..</text></g><g><title>lint_levels (42,261 samples, 0.10%)</title><rect x="8.6900%" y="197" width="0.1044%" height="15" fill="rgb(225,20,46)"/><text x="8.9400%" y="207.50"></text></g><g><title>MIR_effect_checking (131,151 samples, 0.32%)</title><rect x="8.6139%" y="213" width="0.3239%" height="15" fill="rgb(210,31,41)"/><text x="8.8639%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (58,070 samples, 0.14%)</title><rect x="8.7944%" y="197" width="0.1434%" height="15" fill="rgb(221,200,47)"/><text x="9.0444%" y="207.50"></text></g><g><title>hir_module_items (139,612 samples, 0.34%)</title><rect x="8.9378%" y="213" width="0.3447%" height="15" fill="rgb(226,26,5)"/><text x="9.1878%" y="223.50"></text></g><g><title>get_lang_items (65,150 samples, 0.16%)</title><rect x="9.7835%" y="165" width="0.1609%" height="15" fill="rgb(249,33,26)"/><text x="10.0335%" y="175.50"></text></g><g><title>codegen_fn_attrs (151,772 samples, 0.37%)</title><rect x="9.6631%" y="181" width="0.3748%" height="15" fill="rgb(235,183,28)"/><text x="9.9131%" y="191.50"></text></g><g><title>check_mod_attrs (272,063 samples, 0.67%)</title><rect x="9.3666%" y="197" width="0.6718%" height="15" fill="rgb(221,5,38)"/><text x="9.6166%" y="207.50"></text></g><g><title>check_mod_const_bodies (55,532 samples, 0.14%)</title><rect x="10.0384%" y="197" width="0.1371%" height="15" fill="rgb(247,18,42)"/><text x="10.2884%" y="207.50"></text></g><g><title>lookup_deprecation_entry (88,120 samples, 0.22%)</title><rect x="10.5120%" y="181" width="0.2176%" height="15" fill="rgb(241,131,45)"/><text x="10.7620%" y="191.50"></text></g><g><title>stability_index (40,760 samples, 0.10%)</title><rect x="10.6289%" y="165" width="0.1006%" height="15" fill="rgb(249,31,29)"/><text x="10.8789%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (242,552 samples, 0.60%)</title><rect x="10.2491%" y="197" width="0.5989%" height="15" fill="rgb(225,111,53)"/><text x="10.4991%" y="207.50"></text></g><g><title>looking_for_derive_registrar (42,531 samples, 0.11%)</title><rect x="10.8532%" y="197" width="0.1050%" height="15" fill="rgb(238,160,17)"/><text x="11.1032%" y="207.50"></text></g><g><title>misc_checking_1 (682,408 samples, 1.69%)</title><rect x="9.2837%" y="213" width="1.6851%" height="15" fill="rgb(214,148,48)"/><text x="9.5337%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (71,951 samples, 0.18%)</title><rect x="10.9712%" y="197" width="0.1777%" height="15" fill="rgb(232,36,49)"/><text x="11.2212%" y="207.50"></text></g><g><title>check_mod_liveness (56,371 samples, 0.14%)</title><rect x="11.0097%" y="181" width="0.1392%" height="15" fill="rgb(209,103,24)"/><text x="11.2597%" y="191.50"></text></g><g><title>misc_checking_2 (141,952 samples, 0.35%)</title><rect x="10.9688%" y="213" width="0.3505%" height="15" fill="rgb(229,88,8)"/><text x="11.2188%" y="223.50"></text></g><g><title>match_checking (69,011 samples, 0.17%)</title><rect x="11.1489%" y="197" width="0.1704%" height="15" fill="rgb(213,181,19)"/><text x="11.3989%" y="207.50"></text></g><g><title>check_match (64,001 samples, 0.16%)</title><rect x="11.1613%" y="181" width="0.1580%" height="15" fill="rgb(254,191,54)"/><text x="11.4113%" y="191.50"></text></g><g><title>death_checking (80,041 samples, 0.20%)</title><rect x="11.4135%" y="197" width="0.1976%" height="15" fill="rgb(241,83,37)"/><text x="11.6635%" y="207.50"></text></g><g><title>eval_to_allocation_raw (66,671 samples, 0.16%)</title><rect x="11.8308%" y="165" width="0.1646%" height="15" fill="rgb(233,36,39)"/><text x="12.0808%" y="175.50"></text></g><g><title>eval_to_allocation_raw (64,281 samples, 0.16%)</title><rect x="11.8367%" y="149" width="0.1587%" height="15" fill="rgb(226,3,54)"/><text x="12.0867%" y="159.50"></text></g><g><title>param_env (124,681 samples, 0.31%)</title><rect x="11.9954%" y="165" width="0.3079%" height="15" fill="rgb(245,192,40)"/><text x="12.2454%" y="175.50"></text></g><g><title>predicates_of (58,630 samples, 0.14%)</title><rect x="12.1585%" y="149" width="0.1448%" height="15" fill="rgb(238,167,29)"/><text x="12.4085%" y="159.50"></text></g><g><title>predicates_defined_on (48,710 samples, 0.12%)</title><rect x="12.1830%" y="133" width="0.1203%" height="15" fill="rgb(232,182,51)"/><text x="12.4330%" y="143.50"></text></g><g><title>crate_lints (285,143 samples, 0.70%)</title><rect x="11.6141%" y="181" width="0.7041%" height="15" fill="rgb(231,60,39)"/><text x="11.8641%" y="191.50"></text></g><g><title>lint_checking (351,644 samples, 0.87%)</title><rect x="11.6112%" y="197" width="0.8683%" height="15" fill="rgb(208,69,12)"/><text x="11.8612%" y="207.50"></text></g><g><title>module_lints (65,311 samples, 0.16%)</title><rect x="12.3182%" y="181" width="0.1613%" height="15" fill="rgb(235,93,37)"/><text x="12.5682%" y="191.50"></text></g><g><title>lint_mod (63,101 samples, 0.16%)</title><rect x="12.3237%" y="165" width="0.1558%" height="15" fill="rgb(213,116,39)"/><text x="12.5737%" y="175.50"></text></g><g><title>privacy_checking_modules (55,040 samples, 0.14%)</title><rect x="12.5571%" y="197" width="0.1359%" height="15" fill="rgb(222,207,29)"/><text x="12.8071%" y="207.50"></text></g><g><title>check_mod_privacy (53,640 samples, 0.13%)</title><rect x="12.5606%" y="181" width="0.1325%" height="15" fill="rgb(206,96,30)"/><text x="12.8106%" y="191.50"></text></g><g><title>misc_checking_3 (566,946 samples, 1.40%)</title><rect x="11.3193%" y="213" width="1.4000%" height="15" fill="rgb(218,138,4)"/><text x="11.5693%" y="223.50"></text></g><g><title>impl_parent (146,883 samples, 0.36%)</title><rect x="20.2081%" y="53" width="0.3627%" height="15" fill="rgb(250,191,14)"/><text x="20.4581%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (109,562 samples, 0.27%)</title><rect x="20.3003%" y="37" width="0.2705%" height="15" fill="rgb(239,60,40)"/><text x="20.5503%" y="47.50"></text></g><g><title>impl_trait_ref (567,954 samples, 1.40%)</title><rect x="20.5708%" y="53" width="1.4025%" height="15" fill="rgb(206,27,48)"/><text x="20.8208%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (530,264 samples, 1.31%)</title><rect x="20.6639%" y="37" width="1.3094%" height="15" fill="rgb(225,35,8)"/><text x="20.9139%" y="47.50"></text></g><g><title>adt_destructor (933,810 samples, 2.31%)</title><rect x="19.7812%" y="117" width="2.3059%" height="15" fill="rgb(250,213,24)"/><text x="20.0312%" y="127.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (932,330 samples, 2.30%)</title><rect x="19.7849%" y="101" width="2.3022%" height="15" fill="rgb(247,123,22)"/><text x="20.0349%" y="111.50">m..</text></g><g><title>coherent_trait (926,530 samples, 2.29%)</title><rect x="19.7992%" y="85" width="2.2879%" height="15" fill="rgb(231,138,38)"/><text x="20.0492%" y="95.50">c..</text></g><g><title>specialization_graph_of (920,870 samples, 2.27%)</title><rect x="19.8132%" y="69" width="2.2739%" height="15" fill="rgb(231,145,46)"/><text x="20.0632%" y="79.50">s..</text></g><g><title>trait_impls_of (46,080 samples, 0.11%)</title><rect x="21.9733%" y="53" width="0.1138%" height="15" fill="rgb(251,118,11)"/><text x="22.2233%" y="63.50"></text></g><g><title>dropck_outlives (989,430 samples, 2.44%)</title><rect x="19.6622%" y="149" width="2.4432%" height="15" fill="rgb(217,147,25)"/><text x="19.9122%" y="159.50">dr..</text></g><g><title>adt_dtorck_constraint (954,640 samples, 2.36%)</title><rect x="19.7481%" y="133" width="2.3573%" height="15" fill="rgb(247,81,37)"/><text x="19.9981%" y="143.50">a..</text></g><g><title>adt_def (58,560 samples, 0.14%)</title><rect x="22.4114%" y="117" width="0.1446%" height="15" fill="rgb(209,12,38)"/><text x="22.6614%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (56,450 samples, 0.14%)</title><rect x="22.4166%" y="101" width="0.1394%" height="15" fill="rgb(227,1,9)"/><text x="22.6666%" y="111.50"></text></g><g><title>adt_sized_constraint (69,200 samples, 0.17%)</title><rect x="22.3906%" y="133" width="0.1709%" height="15" fill="rgb(248,47,43)"/><text x="22.6406%" y="143.50"></text></g><g><title>evaluate_obligation (431,844 samples, 1.07%)</title><rect x="22.1054%" y="149" width="1.0664%" height="15" fill="rgb(221,10,30)"/><text x="22.3554%" y="159.50"></text></g><g><title>trait_impls_of (175,492 samples, 0.43%)</title><rect x="22.7385%" y="133" width="0.4333%" height="15" fill="rgb(210,229,1)"/><text x="22.9885%" y="143.50"></text></g><g><title>implementations_of_trait (53,610 samples, 0.13%)</title><rect x="23.0394%" y="117" width="0.1324%" height="15" fill="rgb(222,148,37)"/><text x="23.2894%" y="127.50"></text></g><g><title>fn_sig (43,861 samples, 0.11%)</title><rect x="23.1888%" y="149" width="0.1083%" height="15" fill="rgb(234,67,33)"/><text x="23.4388%" y="159.50"></text></g><g><title>associated_item (58,821 samples, 0.15%)</title><rect x="23.3642%" y="117" width="0.1452%" height="15" fill="rgb(247,98,35)"/><text x="23.6142%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (54,001 samples, 0.13%)</title><rect x="23.3761%" y="101" width="0.1333%" height="15" fill="rgb(247,138,52)"/><text x="23.6261%" y="111.50"></text></g><g><title>impl_item_implementor_ids (69,081 samples, 0.17%)</title><rect x="23.3536%" y="149" width="0.1706%" height="15" fill="rgb(213,79,30)"/><text x="23.6036%" y="159.50"></text></g><g><title>associated_items (66,831 samples, 0.17%)</title><rect x="23.3592%" y="133" width="0.1650%" height="15" fill="rgb(246,177,23)"/><text x="23.6092%" y="143.50"></text></g><g><title>predicates_of (67,381 samples, 0.17%)</title><rect x="23.6074%" y="149" width="0.1664%" height="15" fill="rgb(230,62,27)"/><text x="23.8574%" y="159.50"></text></g><g><title>item_bodies_checking (4,459,749 samples, 11.01%)</title><rect x="12.8666%" y="197" width="11.0125%" height="15" fill="rgb(216,154,8)"/><text x="13.1166%" y="207.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (4,457,269 samples, 11.01%)</title><rect x="12.8727%" y="181" width="11.0064%" height="15" fill="rgb(244,35,45)"/><text x="13.1227%" y="191.50">typeck_item_bodi..</text></g><g><title>typeck (4,439,949 samples, 10.96%)</title><rect x="12.9155%" y="165" width="10.9636%" height="15" fill="rgb(251,115,12)"/><text x="13.1655%" y="175.50">typeck</text></g><g><title>item_types_checking (218,612 samples, 0.54%)</title><rect x="23.8791%" y="197" width="0.5398%" height="15" fill="rgb(240,54,50)"/><text x="24.1291%" y="207.50"></text></g><g><title>check_mod_item_types (214,332 samples, 0.53%)</title><rect x="23.8897%" y="181" width="0.5293%" height="15" fill="rgb(233,84,52)"/><text x="24.1397%" y="191.50"></text></g><g><title>typeck (182,932 samples, 0.45%)</title><rect x="23.9672%" y="165" width="0.4517%" height="15" fill="rgb(207,117,47)"/><text x="24.2172%" y="175.50"></text></g><g><title>late_bound_vars_map (112,432 samples, 0.28%)</title><rect x="24.9054%" y="149" width="0.2776%" height="15" fill="rgb(249,43,39)"/><text x="25.1554%" y="159.50"></text></g><g><title>resolve_lifetimes (96,972 samples, 0.24%)</title><rect x="24.9435%" y="133" width="0.2395%" height="15" fill="rgb(209,38,44)"/><text x="25.1935%" y="143.50"></text></g><g><title>fn_sig (238,633 samples, 0.59%)</title><rect x="24.6845%" y="165" width="0.5893%" height="15" fill="rgb(236,212,23)"/><text x="24.9345%" y="175.50"></text></g><g><title>generics_of (40,740 samples, 0.10%)</title><rect x="25.2738%" y="165" width="0.1006%" height="15" fill="rgb(242,79,21)"/><text x="25.5238%" y="175.50"></text></g><g><title>predicates_of (62,141 samples, 0.15%)</title><rect x="25.3744%" y="165" width="0.1534%" height="15" fill="rgb(211,96,35)"/><text x="25.6244%" y="175.50"></text></g><g><title>predicates_defined_on (50,760 samples, 0.13%)</title><rect x="25.4025%" y="149" width="0.1253%" height="15" fill="rgb(253,215,40)"/><text x="25.6525%" y="159.50"></text></g><g><title>type_collecting (513,636 samples, 1.27%)</title><rect x="24.4330%" y="197" width="1.2683%" height="15" fill="rgb(211,81,21)"/><text x="24.6830%" y="207.50"></text></g><g><title>collect_mod_item_types (495,856 samples, 1.22%)</title><rect x="24.4769%" y="181" width="1.2244%" height="15" fill="rgb(208,190,38)"/><text x="24.7269%" y="191.50"></text></g><g><title>type_of (70,260 samples, 0.17%)</title><rect x="25.5279%" y="165" width="0.1735%" height="15" fill="rgb(235,213,38)"/><text x="25.7779%" y="175.50"></text></g><g><title>evaluate_obligation (286,873 samples, 0.71%)</title><rect x="26.9876%" y="165" width="0.7084%" height="15" fill="rgb(237,122,38)"/><text x="27.2376%" y="175.50"></text></g><g><title>trait_impls_of (103,581 samples, 0.26%)</title><rect x="27.4402%" y="149" width="0.2558%" height="15" fill="rgb(244,218,35)"/><text x="27.6902%" y="159.50"></text></g><g><title>implied_outlives_bounds (83,741 samples, 0.21%)</title><rect x="27.6959%" y="165" width="0.2068%" height="15" fill="rgb(240,68,47)"/><text x="27.9459%" y="175.50"></text></g><g><title>param_env (229,192 samples, 0.57%)</title><rect x="27.9037%" y="165" width="0.5659%" height="15" fill="rgb(210,16,53)"/><text x="28.1537%" y="175.50"></text></g><g><title>region_scope_tree (128,741 samples, 0.32%)</title><rect x="28.5552%" y="165" width="0.3179%" height="15" fill="rgb(235,124,12)"/><text x="28.8052%" y="175.50"></text></g><g><title>analysis (10,737,319 samples, 26.51%)</title><rect x="2.3608%" y="229" width="26.5138%" height="15" fill="rgb(224,169,11)"/><text x="2.6108%" y="239.50">analysis</text></g><g><title>type_check_crate (6,542,462 samples, 16.16%)</title><rect x="12.7193%" y="213" width="16.1554%" height="15" fill="rgb(250,166,2)"/><text x="12.9693%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,284,165 samples, 3.17%)</title><rect x="25.7036%" y="197" width="3.1710%" height="15" fill="rgb(242,216,29)"/><text x="25.9536%" y="207.50">wf_..</text></g><g><title>check_item_well_formed (1,223,153 samples, 3.02%)</title><rect x="25.8543%" y="181" width="3.0203%" height="15" fill="rgb(230,116,27)"/><text x="26.1043%" y="191.50">che..</text></g><g><title>codegen_crate (508,705 samples, 1.26%)</title><rect x="28.8969%" y="229" width="1.2562%" height="15" fill="rgb(228,99,48)"/><text x="29.1469%" y="239.50"></text></g><g><title>AST_validation (205,962 samples, 0.51%)</title><rect x="30.6254%" y="213" width="0.5086%" height="15" fill="rgb(253,11,6)"/><text x="30.8754%" y="223.50"></text></g><g><title>crate_injection (62,721 samples, 0.15%)</title><rect x="31.2259%" y="213" width="0.1549%" height="15" fill="rgb(247,143,39)"/><text x="31.4759%" y="223.50"></text></g><g><title>metadata_load_macro (58,871 samples, 0.15%)</title><rect x="77.7328%" y="181" width="0.1454%" height="15" fill="rgb(236,97,10)"/><text x="77.9828%" y="191.50"></text></g><g><title>metadata_register_crate (2,742,121 samples, 6.77%)</title><rect x="77.8782%" y="181" width="6.7712%" height="15" fill="rgb(233,208,19)"/><text x="78.1282%" y="191.50">metadata_..</text></g><g><title>metadata_register_crate (990,334 samples, 2.45%)</title><rect x="82.2039%" y="165" width="2.4454%" height="15" fill="rgb(216,164,2)"/><text x="82.4539%" y="175.50">me..</text></g><g><title>metadata_register_crate (78,233 samples, 0.19%)</title><rect x="84.4562%" y="149" width="0.1932%" height="15" fill="rgb(220,129,5)"/><text x="84.7062%" y="159.50"></text></g><g><title>macro_expand_crate (21,652,631 samples, 53.47%)</title><rect x="31.3808%" y="213" width="53.4671%" height="15" fill="rgb(242,17,10)"/><text x="31.6308%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (21,636,250 samples, 53.43%)</title><rect x="31.4212%" y="197" width="53.4267%" height="15" fill="rgb(242,107,0)"/><text x="31.6712%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (80,410 samples, 0.20%)</title><rect x="84.6493%" y="181" width="0.1986%" height="15" fill="rgb(251,28,31)"/><text x="84.8993%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (87,081 samples, 0.22%)</title><rect x="84.8622%" y="213" width="0.2150%" height="15" fill="rgb(233,223,10)"/><text x="85.1122%" y="223.50"></text></g><g><title>finalize_imports (57,481 samples, 0.14%)</title><rect x="85.1010%" y="197" width="0.1419%" height="15" fill="rgb(215,21,27)"/><text x="85.3510%" y="207.50"></text></g><g><title>finalize_macro_resolutions (240,823 samples, 0.59%)</title><rect x="85.2429%" y="197" width="0.5947%" height="15" fill="rgb(232,23,21)"/><text x="85.4929%" y="207.50"></text></g><g><title>late_resolve_crate (654,857 samples, 1.62%)</title><rect x="85.8376%" y="197" width="1.6170%" height="15" fill="rgb(244,5,23)"/><text x="86.0876%" y="207.50"></text></g><g><title>configure_and_expand (23,273,559 samples, 57.47%)</title><rect x="30.1531%" y="229" width="57.4697%" height="15" fill="rgb(226,81,46)"/><text x="30.4031%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,030,902 samples, 2.55%)</title><rect x="85.0772%" y="213" width="2.5456%" height="15" fill="rgb(247,70,30)"/><text x="85.3272%" y="223.50">re..</text></g><g><title>drop_ast (79,641 samples, 0.20%)</title><rect x="87.6228%" y="229" width="0.1967%" height="15" fill="rgb(212,68,19)"/><text x="87.8728%" y="239.50"></text></g><g><title>early_lint_checks (219,952 samples, 0.54%)</title><rect x="87.8514%" y="229" width="0.5431%" height="15" fill="rgb(240,187,13)"/><text x="88.1014%" y="239.50"></text></g><g><title>free_global_ctxt (1,768,110 samples, 4.37%)</title><rect x="88.3945%" y="229" width="4.3660%" height="15" fill="rgb(223,113,26)"/><text x="88.6445%" y="239.50">free_..</text></g><g><title>crate_hash (62,160 samples, 0.15%)</title><rect x="93.3228%" y="213" width="0.1535%" height="15" fill="rgb(206,192,2)"/><text x="93.5728%" y="223.50"></text></g><g><title>generate_crate_metadata (354,743 samples, 0.88%)</title><rect x="92.7605%" y="229" width="0.8760%" height="15" fill="rgb(241,108,4)"/><text x="93.0105%" y="239.50"></text></g><g><title>hir_lowering (1,148,653 samples, 2.84%)</title><rect x="93.6365%" y="229" width="2.8364%" height="15" fill="rgb(247,173,49)"/><text x="93.8865%" y="239.50">hi..</text></g><g><title>link (41,110 samples, 0.10%)</title><rect x="96.4729%" y="229" width="0.1015%" height="15" fill="rgb(224,114,35)"/><text x="96.7229%" y="239.50"></text></g><g><title>parse_crate (376,475 samples, 0.93%)</title><rect x="96.5744%" y="229" width="0.9296%" height="15" fill="rgb(245,159,27)"/><text x="96.8244%" y="239.50"></text></g><g><title>prepare_outputs (315,684 samples, 0.78%)</title><rect x="97.5249%" y="229" width="0.7795%" height="15" fill="rgb(245,172,44)"/><text x="97.7749%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (290,554 samples, 0.72%)</title><rect x="98.3044%" y="229" width="0.7175%" height="15" fill="rgb(236,23,11)"/><text x="98.5544%" y="239.50"></text></g><g><title>setup_global_ctxt (108,072 samples, 0.27%)</title><rect x="99.0417%" y="229" width="0.2669%" height="15" fill="rgb(205,117,38)"/><text x="99.2917%" y="239.50"></text></g><g><title>all (40,497,081 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (40,497,081 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (280,003 samples, 0.69%)</title><rect x="99.3086%" y="229" width="0.6914%" height="15" fill="rgb(217,125,39)"/><text x="99.5586%" y="239.50"></text></g></svg></svg>