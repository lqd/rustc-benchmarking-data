<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (241,455 samples, 0.18%)</title><rect x="11.8205%" y="213" width="0.1835%" height="15" fill="rgb(227,0,7)"/><text x="12.0705%" y="223.50"></text></g><g><title>param_env (436,706 samples, 0.33%)</title><rect x="13.6734%" y="181" width="0.3320%" height="15" fill="rgb(217,0,24)"/><text x="13.9234%" y="191.50"></text></g><g><title>item_attrs (407,522 samples, 0.31%)</title><rect x="14.5108%" y="149" width="0.3098%" height="15" fill="rgb(221,193,54)"/><text x="14.7608%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (394,502 samples, 0.30%)</title><rect x="14.5206%" y="133" width="0.2999%" height="15" fill="rgb(248,212,6)"/><text x="14.7706%" y="143.50"></text></g><g><title>codegen_fn_attrs (535,162 samples, 0.41%)</title><rect x="14.4297%" y="165" width="0.4068%" height="15" fill="rgb(208,68,35)"/><text x="14.6797%" y="175.50"></text></g><g><title>is_copy_raw (134,132 samples, 0.10%)</title><rect x="17.7153%" y="117" width="0.1020%" height="15" fill="rgb(232,128,0)"/><text x="17.9653%" y="127.50"></text></g><g><title>adt_drop_tys (446,206 samples, 0.34%)</title><rect x="17.6130%" y="133" width="0.3392%" height="15" fill="rgb(207,160,47)"/><text x="17.8630%" y="143.50"></text></g><g><title>is_copy_raw (645,579 samples, 0.49%)</title><rect x="17.9522%" y="133" width="0.4908%" height="15" fill="rgb(228,23,34)"/><text x="18.2022%" y="143.50"></text></g><g><title>evaluate_obligation (488,798 samples, 0.37%)</title><rect x="18.0714%" y="117" width="0.3716%" height="15" fill="rgb(218,30,26)"/><text x="18.3214%" y="127.50"></text></g><g><title>needs_drop_raw (1,307,358 samples, 0.99%)</title><rect x="17.4852%" y="149" width="0.9938%" height="15" fill="rgb(220,122,19)"/><text x="17.7352%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (773,160 samples, 0.59%)</title><rect x="18.6671%" y="133" width="0.5877%" height="15" fill="rgb(250,228,42)"/><text x="18.9171%" y="143.50"></text></g><g><title>impl_parent (185,784 samples, 0.14%)</title><rect x="19.5026%" y="117" width="0.1412%" height="15" fill="rgb(240,193,28)"/><text x="19.7526%" y="127.50"></text></g><g><title>specialization_graph_of (897,310 samples, 0.68%)</title><rect x="19.2950%" y="133" width="0.6821%" height="15" fill="rgb(216,20,37)"/><text x="19.5450%" y="143.50"></text></g><g><title>impl_trait_ref (438,425 samples, 0.33%)</title><rect x="19.6439%" y="117" width="0.3333%" height="15" fill="rgb(206,188,39)"/><text x="19.8939%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (379,145 samples, 0.29%)</title><rect x="19.6889%" y="101" width="0.2882%" height="15" fill="rgb(217,207,13)"/><text x="19.9389%" y="111.50"></text></g><g><title>resolve_instance (2,015,914 samples, 1.53%)</title><rect x="18.4990%" y="149" width="1.5324%" height="15" fill="rgb(231,73,38)"/><text x="18.7490%" y="159.50"></text></g><g><title>thir_body (1,580,146 samples, 1.20%)</title><rect x="20.0666%" y="149" width="1.2012%" height="15" fill="rgb(225,20,46)"/><text x="20.3166%" y="159.50"></text></g><g><title>mir_const (11,084,211 samples, 8.43%)</title><rect x="12.8713%" y="197" width="8.4259%" height="15" fill="rgb(210,31,41)"/><text x="13.1213%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (9,592,310 samples, 7.29%)</title><rect x="14.0054%" y="181" width="7.2918%" height="15" fill="rgb(221,200,47)"/><text x="14.2554%" y="191.50">unsafety_c..</text></g><g><title>mir_built (8,498,942 samples, 6.46%)</title><rect x="14.8365%" y="165" width="6.4607%" height="15" fill="rgb(226,26,5)"/><text x="15.0865%" y="175.50">mir_built</text></g><g><title>mir_promoted (12,278,189 samples, 9.33%)</title><rect x="12.0611%" y="213" width="9.3335%" height="15" fill="rgb(249,33,26)"/><text x="12.3111%" y="223.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (264,533 samples, 0.20%)</title><rect x="21.3952%" y="213" width="0.2011%" height="15" fill="rgb(235,183,28)"/><text x="21.6452%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (1,118,486 samples, 0.85%)</title><rect x="21.5963%" y="213" width="0.8502%" height="15" fill="rgb(221,5,38)"/><text x="21.8463%" y="223.50"></text></g><g><title>normalize_projection_ty (833,269 samples, 0.63%)</title><rect x="21.8131%" y="197" width="0.6334%" height="15" fill="rgb(247,18,42)"/><text x="22.0631%" y="207.50"></text></g><g><title>type_op_normalize_predicate (539,296 samples, 0.41%)</title><rect x="22.4465%" y="213" width="0.4100%" height="15" fill="rgb(241,131,45)"/><text x="22.6965%" y="223.50"></text></g><g><title>normalize_projection_ty (250,512 samples, 0.19%)</title><rect x="22.6660%" y="197" width="0.1904%" height="15" fill="rgb(249,31,29)"/><text x="22.9160%" y="207.50"></text></g><g><title>type_op_prove_predicate (3,780,135 samples, 2.87%)</title><rect x="22.8565%" y="213" width="2.8736%" height="15" fill="rgb(225,111,53)"/><text x="23.1065%" y="223.50">ty..</text></g><g><title>evaluate_obligation (261,514 samples, 0.20%)</title><rect x="25.5312%" y="197" width="0.1988%" height="15" fill="rgb(238,160,17)"/><text x="25.7812%" y="207.50"></text></g><g><title>MIR_borrow_checking (33,003,323 samples, 25.09%)</title><rect x="0.6487%" y="245" width="25.0882%" height="15" fill="rgb(214,148,48)"/><text x="0.8987%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (32,838,030 samples, 24.96%)</title><rect x="0.7743%" y="229" width="24.9626%" height="15" fill="rgb(232,36,49)"/><text x="1.0243%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (160,821 samples, 0.12%)</title><rect x="25.7369%" y="245" width="0.1223%" height="15" fill="rgb(209,103,24)"/><text x="25.9869%" y="255.50"></text></g><g><title>hir_module_items (151,172 samples, 0.11%)</title><rect x="25.8591%" y="245" width="0.1149%" height="15" fill="rgb(229,88,8)"/><text x="26.1091%" y="255.50"></text></g><g><title>should_inherit_track_caller (168,742 samples, 0.13%)</title><rect x="26.2862%" y="197" width="0.1283%" height="15" fill="rgb(213,181,19)"/><text x="26.5362%" y="207.50"></text></g><g><title>codegen_fn_attrs (341,134 samples, 0.26%)</title><rect x="26.1700%" y="213" width="0.2593%" height="15" fill="rgb(254,191,54)"/><text x="26.4200%" y="223.50"></text></g><g><title>check_mod_attrs (573,526 samples, 0.44%)</title><rect x="25.9934%" y="229" width="0.4360%" height="15" fill="rgb(241,83,37)"/><text x="26.2434%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (339,004 samples, 0.26%)</title><rect x="26.5763%" y="229" width="0.2577%" height="15" fill="rgb(233,36,39)"/><text x="26.8263%" y="239.50"></text></g><g><title>misc_checking_1 (1,173,693 samples, 0.89%)</title><rect x="25.9745%" y="245" width="0.8922%" height="15" fill="rgb(226,3,54)"/><text x="26.2245%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (469,855 samples, 0.36%)</title><rect x="26.8679%" y="229" width="0.3572%" height="15" fill="rgb(245,192,40)"/><text x="27.1179%" y="239.50"></text></g><g><title>check_mod_liveness (374,404 samples, 0.28%)</title><rect x="26.9405%" y="213" width="0.2846%" height="15" fill="rgb(238,167,29)"/><text x="27.1905%" y="223.50"></text></g><g><title>misc_checking_2 (1,305,785 samples, 0.99%)</title><rect x="26.8667%" y="245" width="0.9926%" height="15" fill="rgb(232,182,51)"/><text x="27.1167%" y="255.50"></text></g><g><title>match_checking (834,330 samples, 0.63%)</title><rect x="27.2251%" y="229" width="0.6342%" height="15" fill="rgb(231,60,39)"/><text x="27.4751%" y="239.50"></text></g><g><title>check_match (792,260 samples, 0.60%)</title><rect x="27.2571%" y="213" width="0.6023%" height="15" fill="rgb(208,69,12)"/><text x="27.5071%" y="223.50"></text></g><g><title>check_private_in_public (155,092 samples, 0.12%)</title><rect x="27.8666%" y="229" width="0.1179%" height="15" fill="rgb(235,93,37)"/><text x="28.1166%" y="239.50"></text></g><g><title>death_checking (465,385 samples, 0.35%)</title><rect x="27.9845%" y="229" width="0.3538%" height="15" fill="rgb(213,116,39)"/><text x="28.2345%" y="239.50"></text></g><g><title>item_attrs (181,711 samples, 0.14%)</title><rect x="28.2001%" y="213" width="0.1381%" height="15" fill="rgb(222,207,29)"/><text x="28.4501%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (179,861 samples, 0.14%)</title><rect x="28.2015%" y="197" width="0.1367%" height="15" fill="rgb(206,96,30)"/><text x="28.4515%" y="207.50"></text></g><g><title>eval_to_const_value_raw (140,642 samples, 0.11%)</title><rect x="28.8526%" y="197" width="0.1069%" height="15" fill="rgb(218,138,4)"/><text x="29.1026%" y="207.50"></text></g><g><title>eval_to_const_value_raw (139,492 samples, 0.11%)</title><rect x="28.8535%" y="181" width="0.1060%" height="15" fill="rgb(250,191,14)"/><text x="29.1035%" y="191.50"></text></g><g><title>eval_to_allocation_raw (135,402 samples, 0.10%)</title><rect x="28.8566%" y="165" width="0.1029%" height="15" fill="rgb(239,60,40)"/><text x="29.1066%" y="175.50"></text></g><g><title>crate_lints (2,007,713 samples, 1.53%)</title><rect x="28.3395%" y="213" width="1.5262%" height="15" fill="rgb(206,27,48)"/><text x="28.5895%" y="223.50"></text></g><g><title>type_of (1,085,262 samples, 0.82%)</title><rect x="29.0408%" y="197" width="0.8250%" height="15" fill="rgb(225,35,8)"/><text x="29.2908%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (855,170 samples, 0.65%)</title><rect x="29.2157%" y="181" width="0.6501%" height="15" fill="rgb(250,213,24)"/><text x="29.4657%" y="191.50"></text></g><g><title>lint_checking (2,648,720 samples, 2.01%)</title><rect x="28.3383%" y="229" width="2.0135%" height="15" fill="rgb(247,123,22)"/><text x="28.5883%" y="239.50">l..</text></g><g><title>module_lints (639,327 samples, 0.49%)</title><rect x="29.8658%" y="213" width="0.4860%" height="15" fill="rgb(231,138,38)"/><text x="30.1158%" y="223.50"></text></g><g><title>lint_mod (634,277 samples, 0.48%)</title><rect x="29.8696%" y="197" width="0.4822%" height="15" fill="rgb(231,145,46)"/><text x="30.1196%" y="207.50"></text></g><g><title>privacy_access_levels (217,542 samples, 0.17%)</title><rect x="30.3518%" y="229" width="0.1654%" height="15" fill="rgb(251,118,11)"/><text x="30.6018%" y="239.50"></text></g><g><title>privacy_checking_modules (767,348 samples, 0.58%)</title><rect x="30.5171%" y="229" width="0.5833%" height="15" fill="rgb(217,147,25)"/><text x="30.7671%" y="239.50"></text></g><g><title>check_mod_privacy (763,668 samples, 0.58%)</title><rect x="30.5199%" y="213" width="0.5805%" height="15" fill="rgb(247,81,37)"/><text x="30.7699%" y="223.50"></text></g><g><title>misc_checking_3 (4,277,788 samples, 3.25%)</title><rect x="27.8593%" y="245" width="3.2519%" height="15" fill="rgb(209,12,38)"/><text x="28.1093%" y="255.50">mis..</text></g><g><title>impl_trait_ref (187,851 samples, 0.14%)</title><rect x="31.3062%" y="149" width="0.1428%" height="15" fill="rgb(227,1,9)"/><text x="31.5562%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (169,221 samples, 0.13%)</title><rect x="31.3203%" y="133" width="0.1286%" height="15" fill="rgb(248,47,43)"/><text x="31.5703%" y="143.50"></text></g><g><title>adt_destructor (340,003 samples, 0.26%)</title><rect x="31.2081%" y="197" width="0.2585%" height="15" fill="rgb(221,10,30)"/><text x="31.4581%" y="207.50"></text></g><g><title>coherent_trait (335,273 samples, 0.25%)</title><rect x="31.2117%" y="181" width="0.2549%" height="15" fill="rgb(210,229,1)"/><text x="31.4617%" y="191.50"></text></g><g><title>specialization_graph_of (333,973 samples, 0.25%)</title><rect x="31.2127%" y="165" width="0.2539%" height="15" fill="rgb(222,148,37)"/><text x="31.4627%" y="175.50"></text></g><g><title>is_copy_raw (166,792 samples, 0.13%)</title><rect x="31.4665%" y="197" width="0.1268%" height="15" fill="rgb(234,67,33)"/><text x="31.7165%" y="207.50"></text></g><g><title>evaluate_obligation (134,762 samples, 0.10%)</title><rect x="31.4909%" y="181" width="0.1024%" height="15" fill="rgb(247,98,35)"/><text x="31.7409%" y="191.50"></text></g><g><title>impl_parent (2,871,762 samples, 2.18%)</title><rect x="34.6528%" y="181" width="2.1830%" height="15" fill="rgb(247,138,52)"/><text x="34.9028%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,396,276 samples, 1.06%)</title><rect x="35.7745%" y="165" width="1.0614%" height="15" fill="rgb(213,79,30)"/><text x="36.0245%" y="175.50"></text></g><g><title>impl_trait_ref (5,078,121 samples, 3.86%)</title><rect x="36.8359%" y="181" width="3.8602%" height="15" fill="rgb(246,177,23)"/><text x="37.0859%" y="191.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,057,093 samples, 3.08%)</title><rect x="37.6120%" y="165" width="3.0841%" height="15" fill="rgb(230,62,27)"/><text x="37.8620%" y="175.50">met..</text></g><g><title>coherent_trait (13,359,431 samples, 10.16%)</title><rect x="31.1737%" y="213" width="10.1555%" height="15" fill="rgb(216,154,8)"/><text x="31.4237%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (12,688,474 samples, 9.65%)</title><rect x="31.6838%" y="197" width="9.6454%" height="15" fill="rgb(244,35,45)"/><text x="31.9338%" y="207.50">specialization..</text></g><g><title>trait_impls_of (831,328 samples, 0.63%)</title><rect x="40.6973%" y="181" width="0.6320%" height="15" fill="rgb(251,115,12)"/><text x="40.9473%" y="191.50"></text></g><g><title>implementations_of_trait (217,873 samples, 0.17%)</title><rect x="41.1636%" y="165" width="0.1656%" height="15" fill="rgb(240,54,50)"/><text x="41.4136%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (179,192 samples, 0.14%)</title><rect x="41.1930%" y="149" width="0.1362%" height="15" fill="rgb(233,84,52)"/><text x="41.4430%" y="159.50"></text></g><g><title>coherence_checking (13,431,612 samples, 10.21%)</title><rect x="31.1607%" y="229" width="10.2103%" height="15" fill="rgb(207,117,47)"/><text x="31.4107%" y="239.50">coherence_check..</text></g><g><title>generics_of (135,280 samples, 0.10%)</title><rect x="50.6463%" y="165" width="0.1028%" height="15" fill="rgb(249,43,39)"/><text x="50.8963%" y="175.50"></text></g><g><title>predicates_of (395,325 samples, 0.30%)</title><rect x="50.9356%" y="165" width="0.3005%" height="15" fill="rgb(209,38,44)"/><text x="51.1856%" y="175.50"></text></g><g><title>predicates_defined_on (237,813 samples, 0.18%)</title><rect x="51.0553%" y="149" width="0.1808%" height="15" fill="rgb(236,212,23)"/><text x="51.3053%" y="159.50"></text></g><g><title>specializes (841,430 samples, 0.64%)</title><rect x="51.2361%" y="165" width="0.6396%" height="15" fill="rgb(242,79,21)"/><text x="51.4861%" y="175.50"></text></g><g><title>param_env (502,555 samples, 0.38%)</title><rect x="51.4937%" y="149" width="0.3820%" height="15" fill="rgb(211,96,35)"/><text x="51.7437%" y="159.50"></text></g><g><title>def_span (229,233 samples, 0.17%)</title><rect x="51.7014%" y="133" width="0.1743%" height="15" fill="rgb(253,215,40)"/><text x="51.9514%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (205,753 samples, 0.16%)</title><rect x="51.7193%" y="117" width="0.1564%" height="15" fill="rgb(211,81,21)"/><text x="51.9693%" y="127.50"></text></g><g><title>trait_impls_of (226,113 samples, 0.17%)</title><rect x="51.8795%" y="165" width="0.1719%" height="15" fill="rgb(208,190,38)"/><text x="52.1295%" y="175.50"></text></g><g><title>evaluate_obligation (3,105,312 samples, 2.36%)</title><rect x="49.6946%" y="181" width="2.3606%" height="15" fill="rgb(235,213,38)"/><text x="49.9446%" y="191.50">ev..</text></g><g><title>object_safety_violations (138,811 samples, 0.11%)</title><rect x="52.3143%" y="181" width="0.1055%" height="15" fill="rgb(237,122,38)"/><text x="52.5643%" y="191.50"></text></g><g><title>predicates_of (195,713 samples, 0.15%)</title><rect x="52.4658%" y="181" width="0.1488%" height="15" fill="rgb(244,218,35)"/><text x="52.7158%" y="191.50"></text></g><g><title>predicates_defined_on (133,881 samples, 0.10%)</title><rect x="52.5128%" y="165" width="0.1018%" height="15" fill="rgb(240,68,47)"/><text x="52.7628%" y="175.50"></text></g><g><title>associated_item (314,102 samples, 0.24%)</title><rect x="63.5124%" y="149" width="0.2388%" height="15" fill="rgb(210,16,53)"/><text x="63.7624%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (249,562 samples, 0.19%)</title><rect x="63.5615%" y="133" width="0.1897%" height="15" fill="rgb(235,124,12)"/><text x="63.8115%" y="143.50"></text></g><g><title>associated_items (452,063 samples, 0.34%)</title><rect x="63.4250%" y="165" width="0.3436%" height="15" fill="rgb(224,169,11)"/><text x="63.6750%" y="175.50"></text></g><g><title>adt_def (406,596 samples, 0.31%)</title><rect x="64.3510%" y="85" width="0.3091%" height="15" fill="rgb(250,166,2)"/><text x="64.6010%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (406,106 samples, 0.31%)</title><rect x="64.3514%" y="69" width="0.3087%" height="15" fill="rgb(242,216,29)"/><text x="64.6014%" y="79.50"></text></g><g><title>item_attrs (386,995 samples, 0.29%)</title><rect x="64.3659%" y="53" width="0.2942%" height="15" fill="rgb(230,116,27)"/><text x="64.6159%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (386,365 samples, 0.29%)</title><rect x="64.3664%" y="37" width="0.2937%" height="15" fill="rgb(228,99,48)"/><text x="64.6164%" y="47.50"></text></g><g><title>adt_dtorck_constraint (470,356 samples, 0.36%)</title><rect x="64.3442%" y="101" width="0.3576%" height="15" fill="rgb(253,11,6)"/><text x="64.5942%" y="111.50"></text></g><g><title>adt_dtorck_constraint (628,057 samples, 0.48%)</title><rect x="64.2503%" y="117" width="0.4774%" height="15" fill="rgb(247,143,39)"/><text x="64.5003%" y="127.50"></text></g><g><title>adt_dtorck_constraint (754,447 samples, 0.57%)</title><rect x="64.1847%" y="133" width="0.5735%" height="15" fill="rgb(236,97,10)"/><text x="64.4347%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,003,911 samples, 0.76%)</title><rect x="64.0333%" y="149" width="0.7631%" height="15" fill="rgb(233,208,19)"/><text x="64.2833%" y="159.50"></text></g><g><title>dropck_outlives (1,379,945 samples, 1.05%)</title><rect x="63.8106%" y="165" width="1.0490%" height="15" fill="rgb(216,164,2)"/><text x="64.0606%" y="175.50"></text></g><g><title>adt_def (133,762 samples, 0.10%)</title><rect x="65.9589%" y="133" width="0.1017%" height="15" fill="rgb(220,129,5)"/><text x="66.2089%" y="143.50"></text></g><g><title>adt_sized_constraint (269,874 samples, 0.21%)</title><rect x="65.9476%" y="149" width="0.2052%" height="15" fill="rgb(242,17,10)"/><text x="66.1976%" y="159.50"></text></g><g><title>impl_trait_ref (137,962 samples, 0.10%)</title><rect x="66.2042%" y="149" width="0.1049%" height="15" fill="rgb(242,107,0)"/><text x="66.4542%" y="159.50"></text></g><g><title>predicates_of (338,423 samples, 0.26%)</title><rect x="66.3144%" y="149" width="0.2573%" height="15" fill="rgb(251,28,31)"/><text x="66.5644%" y="159.50"></text></g><g><title>trait_impls_of (232,512 samples, 0.18%)</title><rect x="66.5917%" y="149" width="0.1767%" height="15" fill="rgb(233,223,10)"/><text x="66.8417%" y="159.50"></text></g><g><title>evaluate_obligation (2,512,441 samples, 1.91%)</title><rect x="64.8596%" y="165" width="1.9099%" height="15" fill="rgb(215,21,27)"/><text x="65.1096%" y="175.50">e..</text></g><g><title>impl_item_implementor_ids (161,794 samples, 0.12%)</title><rect x="66.9736%" y="165" width="0.1230%" height="15" fill="rgb(232,23,21)"/><text x="67.2236%" y="175.50"></text></g><g><title>associated_items (144,603 samples, 0.11%)</title><rect x="66.9866%" y="149" width="0.1099%" height="15" fill="rgb(244,5,23)"/><text x="67.2366%" y="159.50"></text></g><g><title>is_copy_raw (302,233 samples, 0.23%)</title><rect x="67.1947%" y="165" width="0.2297%" height="15" fill="rgb(226,81,46)"/><text x="67.4447%" y="175.50"></text></g><g><title>evaluate_obligation (241,053 samples, 0.18%)</title><rect x="67.2412%" y="149" width="0.1832%" height="15" fill="rgb(247,70,30)"/><text x="67.4912%" y="159.50"></text></g><g><title>evaluate_obligation (301,976 samples, 0.23%)</title><rect x="67.7222%" y="149" width="0.2296%" height="15" fill="rgb(212,68,19)"/><text x="67.9722%" y="159.50"></text></g><g><title>method_autoderef_steps (556,098 samples, 0.42%)</title><rect x="67.5400%" y="165" width="0.4227%" height="15" fill="rgb(240,187,13)"/><text x="67.7900%" y="175.50"></text></g><g><title>explicit_predicates_of (184,683 samples, 0.14%)</title><rect x="68.1162%" y="133" width="0.1404%" height="15" fill="rgb(223,113,26)"/><text x="68.3662%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (158,663 samples, 0.12%)</title><rect x="68.1360%" y="117" width="0.1206%" height="15" fill="rgb(206,192,2)"/><text x="68.3860%" y="127.50"></text></g><g><title>predicates_of (408,157 samples, 0.31%)</title><rect x="67.9883%" y="165" width="0.3103%" height="15" fill="rgb(241,108,4)"/><text x="68.2383%" y="175.50"></text></g><g><title>predicates_defined_on (312,946 samples, 0.24%)</title><rect x="68.0607%" y="149" width="0.2379%" height="15" fill="rgb(247,173,49)"/><text x="68.3107%" y="159.50"></text></g><g><title>typeck (20,742,956 samples, 15.77%)</title><rect x="52.7156%" y="181" width="15.7682%" height="15" fill="rgb(224,114,35)"/><text x="52.9656%" y="191.50">typeck</text></g><g><title>item_bodies_checking (35,684,103 samples, 27.13%)</title><rect x="41.3919%" y="229" width="27.1261%" height="15" fill="rgb(245,159,27)"/><text x="41.6419%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (35,680,913 samples, 27.12%)</title><rect x="41.3944%" y="213" width="27.1237%" height="15" fill="rgb(245,172,44)"/><text x="41.6444%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (35,595,511 samples, 27.06%)</title><rect x="41.4593%" y="197" width="27.0587%" height="15" fill="rgb(236,23,11)"/><text x="41.7093%" y="207.50">typeck</text></g><g><title>item_types_checking (757,189 samples, 0.58%)</title><rect x="68.5180%" y="229" width="0.5756%" height="15" fill="rgb(205,117,38)"/><text x="68.7680%" y="239.50"></text></g><g><title>check_mod_item_types (752,129 samples, 0.57%)</title><rect x="68.5218%" y="213" width="0.5717%" height="15" fill="rgb(237,72,25)"/><text x="68.7718%" y="223.50"></text></g><g><title>typeck (150,942 samples, 0.11%)</title><rect x="68.9789%" y="197" width="0.1147%" height="15" fill="rgb(244,70,9)"/><text x="69.2289%" y="207.50"></text></g><g><title>fn_sig (368,815 samples, 0.28%)</title><rect x="69.2892%" y="197" width="0.2804%" height="15" fill="rgb(217,125,39)"/><text x="69.5392%" y="207.50"></text></g><g><title>named_region_map (419,423 samples, 0.32%)</title><rect x="69.6696%" y="181" width="0.3188%" height="15" fill="rgb(235,36,10)"/><text x="69.9196%" y="191.50"></text></g><g><title>resolve_lifetimes (392,613 samples, 0.30%)</title><rect x="69.6900%" y="165" width="0.2985%" height="15" fill="rgb(251,123,47)"/><text x="69.9400%" y="175.50"></text></g><g><title>generics_of (563,554 samples, 0.43%)</title><rect x="69.5696%" y="197" width="0.4284%" height="15" fill="rgb(221,13,13)"/><text x="69.8196%" y="207.50"></text></g><g><title>predicates_of (223,753 samples, 0.17%)</title><rect x="70.0392%" y="197" width="0.1701%" height="15" fill="rgb(238,131,9)"/><text x="70.2892%" y="207.50"></text></g><g><title>predicates_defined_on (184,813 samples, 0.14%)</title><rect x="70.0688%" y="181" width="0.1405%" height="15" fill="rgb(211,50,8)"/><text x="70.3188%" y="191.50"></text></g><g><title>type_collecting (1,520,437 samples, 1.16%)</title><rect x="69.0944%" y="229" width="1.1558%" height="15" fill="rgb(245,182,24)"/><text x="69.3444%" y="239.50"></text></g><g><title>collect_mod_item_types (1,511,337 samples, 1.15%)</title><rect x="69.1013%" y="213" width="1.1489%" height="15" fill="rgb(242,14,37)"/><text x="69.3513%" y="223.50"></text></g><g><title>evaluate_obligation (257,472 samples, 0.20%)</title><rect x="71.3127%" y="197" width="0.1957%" height="15" fill="rgb(246,228,12)"/><text x="71.5627%" y="207.50"></text></g><g><title>param_env (169,971 samples, 0.13%)</title><rect x="71.5804%" y="197" width="0.1292%" height="15" fill="rgb(213,55,15)"/><text x="71.8304%" y="207.50"></text></g><g><title>check_impl_item_well_formed (2,104,241 samples, 1.60%)</title><rect x="70.3797%" y="213" width="1.5996%" height="15" fill="rgb(209,9,3)"/><text x="70.6297%" y="223.50"></text></g><g><title>region_scope_tree (323,324 samples, 0.25%)</title><rect x="71.7335%" y="197" width="0.2458%" height="15" fill="rgb(230,59,30)"/><text x="71.9835%" y="207.50"></text></g><g><title>evaluate_obligation (412,645 samples, 0.31%)</title><rect x="72.6093%" y="197" width="0.3137%" height="15" fill="rgb(209,121,21)"/><text x="72.8593%" y="207.50"></text></g><g><title>param_env (178,993 samples, 0.14%)</title><rect x="72.9717%" y="197" width="0.1361%" height="15" fill="rgb(220,109,13)"/><text x="73.2217%" y="207.50"></text></g><g><title>analysis (95,798,060 samples, 72.82%)</title><rect x="0.4463%" y="261" width="72.8231%" height="15" fill="rgb(232,18,1)"/><text x="0.6963%" y="271.50">analysis</text></g><g><title>type_check_crate (55,458,645 samples, 42.16%)</title><rect x="31.1112%" y="245" width="42.1581%" height="15" fill="rgb(215,41,42)"/><text x="31.3612%" y="255.50">type_check_crate</text></g><g><title>wf_checking (3,965,004 samples, 3.01%)</title><rect x="70.2553%" y="229" width="3.0141%" height="15" fill="rgb(224,123,36)"/><text x="70.5053%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (1,697,002 samples, 1.29%)</title><rect x="71.9793%" y="213" width="1.2900%" height="15" fill="rgb(240,125,3)"/><text x="72.2293%" y="223.50"></text></g><g><title>codegen_crate (375,244 samples, 0.29%)</title><rect x="73.2777%" y="261" width="0.2853%" height="15" fill="rgb(205,98,50)"/><text x="73.5277%" y="271.50"></text></g><g><title>metadata_load_macro (177,171 samples, 0.13%)</title><rect x="86.1393%" y="213" width="0.1347%" height="15" fill="rgb(205,185,37)"/><text x="86.3893%" y="223.50"></text></g><g><title>metadata_register_crate (2,568,089 samples, 1.95%)</title><rect x="86.2740%" y="213" width="1.9522%" height="15" fill="rgb(238,207,15)"/><text x="86.5240%" y="223.50">m..</text></g><g><title>metadata_register_crate (935,832 samples, 0.71%)</title><rect x="87.5148%" y="197" width="0.7114%" height="15" fill="rgb(213,199,42)"/><text x="87.7648%" y="207.50"></text></g><g><title>macro_expand_crate (19,077,165 samples, 14.50%)</title><rect x="73.9021%" y="245" width="14.5019%" height="15" fill="rgb(235,201,11)"/><text x="74.1521%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (19,059,235 samples, 14.49%)</title><rect x="73.9157%" y="229" width="14.4883%" height="15" fill="rgb(207,46,11)"/><text x="74.1657%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (233,893 samples, 0.18%)</title><rect x="88.2262%" y="213" width="0.1778%" height="15" fill="rgb(241,35,35)"/><text x="88.4762%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (251,603 samples, 0.19%)</title><rect x="88.4098%" y="245" width="0.1913%" height="15" fill="rgb(243,32,47)"/><text x="88.6598%" y="255.50"></text></g><g><title>finalize_macro_resolutions (174,732 samples, 0.13%)</title><rect x="88.6181%" y="229" width="0.1328%" height="15" fill="rgb(247,202,23)"/><text x="88.8681%" y="239.50"></text></g><g><title>late_resolve_crate (1,626,308 samples, 1.24%)</title><rect x="88.7510%" y="229" width="1.2363%" height="15" fill="rgb(219,102,11)"/><text x="89.0010%" y="239.50"></text></g><g><title>configure_and_expand (21,699,155 samples, 16.50%)</title><rect x="73.5629%" y="261" width="16.4951%" height="15" fill="rgb(243,110,44)"/><text x="73.8129%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,916,642 samples, 1.46%)</title><rect x="88.6011%" y="245" width="1.4570%" height="15" fill="rgb(222,74,54)"/><text x="88.8511%" y="255.50"></text></g><g><title>drop_ast (177,852 samples, 0.14%)</title><rect x="90.0580%" y="261" width="0.1352%" height="15" fill="rgb(216,99,12)"/><text x="90.3080%" y="271.50"></text></g><g><title>early_lint_checks (352,644 samples, 0.27%)</title><rect x="90.2049%" y="261" width="0.2681%" height="15" fill="rgb(226,22,26)"/><text x="90.4549%" y="271.50"></text></g><g><title>free_global_ctxt (3,890,774 samples, 2.96%)</title><rect x="90.4730%" y="261" width="2.9577%" height="15" fill="rgb(217,163,10)"/><text x="90.7230%" y="271.50">fre..</text></g><g><title>generate_crate_metadata (982,901 samples, 0.75%)</title><rect x="93.4306%" y="261" width="0.7472%" height="15" fill="rgb(213,25,53)"/><text x="93.6806%" y="271.50"></text></g><g><title>hir_lowering (2,366,867 samples, 1.80%)</title><rect x="94.1778%" y="261" width="1.7992%" height="15" fill="rgb(252,105,26)"/><text x="94.4278%" y="271.50">h..</text></g><g><title>parse_crate (3,787,162 samples, 2.88%)</title><rect x="96.0181%" y="261" width="2.8789%" height="15" fill="rgb(220,39,43)"/><text x="96.2681%" y="271.50">pa..</text></g><g><title>prepare_outputs (205,492 samples, 0.16%)</title><rect x="98.9039%" y="261" width="0.1562%" height="15" fill="rgb(229,68,48)"/><text x="99.1539%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (829,360 samples, 0.63%)</title><rect x="99.0601%" y="261" width="0.6305%" height="15" fill="rgb(252,8,32)"/><text x="99.3101%" y="271.50"></text></g><g><title>all (131,549,074 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (131,549,074 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (304,003 samples, 0.23%)</title><rect x="99.7689%" y="261" width="0.2311%" height="15" fill="rgb(236,28,36)"/><text x="100.0189%" y="271.50"></text></g></svg></svg>