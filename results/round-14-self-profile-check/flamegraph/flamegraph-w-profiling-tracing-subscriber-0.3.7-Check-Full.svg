<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (3,631,322 samples, 0.29%)</title><rect x="15.7405%" y="149" width="0.2942%" height="15" fill="rgb(227,0,7)"/><text x="15.9905%" y="159.50"></text></g><g><title>param_env (1,932,079 samples, 0.16%)</title><rect x="17.8759%" y="117" width="0.1565%" height="15" fill="rgb(217,0,24)"/><text x="18.1259%" y="127.50"></text></g><g><title>item_attrs (1,709,402 samples, 0.14%)</title><rect x="18.5918%" y="85" width="0.1385%" height="15" fill="rgb(221,193,54)"/><text x="18.8418%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,648,522 samples, 0.13%)</title><rect x="18.5967%" y="69" width="0.1335%" height="15" fill="rgb(248,212,6)"/><text x="18.8467%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,323,000 samples, 0.19%)</title><rect x="18.5503%" y="101" width="0.1882%" height="15" fill="rgb(208,68,35)"/><text x="18.8003%" y="111.50"></text></g><g><title>is_copy_raw (1,703,165 samples, 0.14%)</title><rect x="21.7331%" y="85" width="0.1380%" height="15" fill="rgb(232,128,0)"/><text x="21.9831%" y="95.50"></text></g><g><title>evaluate_obligation (1,276,570 samples, 0.10%)</title><rect x="21.7677%" y="69" width="0.1034%" height="15" fill="rgb(207,160,47)"/><text x="22.0177%" y="79.50"></text></g><g><title>adt_drop_tys (1,477,631 samples, 0.12%)</title><rect x="22.0175%" y="69" width="0.1197%" height="15" fill="rgb(228,23,34)"/><text x="22.2675%" y="79.50"></text></g><g><title>is_copy_raw (11,224,173 samples, 0.91%)</title><rect x="22.1377%" y="69" width="0.9093%" height="15" fill="rgb(218,30,26)"/><text x="22.3877%" y="79.50"></text></g><g><title>evaluate_obligation (8,677,770 samples, 0.70%)</title><rect x="22.3440%" y="53" width="0.7030%" height="15" fill="rgb(220,122,19)"/><text x="22.5940%" y="63.50"></text></g><g><title>needs_drop_raw (15,093,885 samples, 1.22%)</title><rect x="21.8714%" y="85" width="1.2227%" height="15" fill="rgb(250,228,42)"/><text x="22.1214%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (5,876,964 samples, 0.48%)</title><rect x="23.3152%" y="69" width="0.4761%" height="15" fill="rgb(240,193,28)"/><text x="23.5652%" y="79.50"></text></g><g><title>resolve_instance (10,146,565 samples, 0.82%)</title><rect x="23.0973%" y="85" width="0.8220%" height="15" fill="rgb(216,20,37)"/><text x="23.3473%" y="95.50"></text></g><g><title>thir_body (14,562,184 samples, 1.18%)</title><rect x="23.9530%" y="85" width="1.1797%" height="15" fill="rgb(206,188,39)"/><text x="24.2030%" y="95.50"></text></g><g><title>mir_const (100,293,828 samples, 8.12%)</title><rect x="17.0422%" y="133" width="8.1247%" height="15" fill="rgb(217,207,13)"/><text x="17.2922%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (88,069,528 samples, 7.13%)</title><rect x="18.0324%" y="117" width="7.1344%" height="15" fill="rgb(231,73,38)"/><text x="18.2824%" y="127.50">unsafety_c..</text></g><g><title>mir_built (79,353,484 samples, 6.43%)</title><rect x="18.7385%" y="101" width="6.4283%" height="15" fill="rgb(225,20,46)"/><text x="18.9885%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (3,114,847 samples, 0.25%)</title><rect x="25.1669%" y="133" width="0.2523%" height="15" fill="rgb(210,31,41)"/><text x="25.4169%" y="143.50"></text></g><g><title>mir_promoted (113,590,767 samples, 9.20%)</title><rect x="16.2175%" y="149" width="9.2019%" height="15" fill="rgb(221,200,47)"/><text x="16.4675%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (7,441,930 samples, 0.60%)</title><rect x="25.4196%" y="149" width="0.6029%" height="15" fill="rgb(226,26,5)"/><text x="25.6696%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (5,340,814 samples, 0.43%)</title><rect x="26.0225%" y="149" width="0.4327%" height="15" fill="rgb(249,33,26)"/><text x="26.2725%" y="159.50"></text></g><g><title>normalize_projection_ty (3,288,204 samples, 0.27%)</title><rect x="26.1888%" y="133" width="0.2664%" height="15" fill="rgb(235,183,28)"/><text x="26.4388%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,851,365 samples, 0.15%)</title><rect x="26.4551%" y="149" width="0.1500%" height="15" fill="rgb(221,5,38)"/><text x="26.7051%" y="159.50"></text></g><g><title>type_op_normalize_ty (2,683,029 samples, 0.22%)</title><rect x="26.6051%" y="149" width="0.2173%" height="15" fill="rgb(247,18,42)"/><text x="26.8551%" y="159.50"></text></g><g><title>normalize_projection_ty (1,998,478 samples, 0.16%)</title><rect x="26.6606%" y="133" width="0.1619%" height="15" fill="rgb(241,131,45)"/><text x="26.9106%" y="143.50"></text></g><g><title>type_op_prove_predicate (43,848,453 samples, 3.55%)</title><rect x="26.8225%" y="149" width="3.5521%" height="15" fill="rgb(249,31,29)"/><text x="27.0725%" y="159.50">type..</text></g><g><title>MIR_borrow_checking (371,159,310 samples, 30.07%)</title><rect x="0.3124%" y="181" width="30.0672%" height="15" fill="rgb(225,111,53)"/><text x="0.5624%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (368,848,088 samples, 29.88%)</title><rect x="0.4997%" y="165" width="29.8800%" height="15" fill="rgb(238,160,17)"/><text x="0.7497%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,967,382 samples, 0.16%)</title><rect x="30.3796%" y="181" width="0.1594%" height="15" fill="rgb(214,148,48)"/><text x="30.6296%" y="191.50"></text></g><g><title>hir_module_items (2,216,511 samples, 0.18%)</title><rect x="30.5390%" y="181" width="0.1796%" height="15" fill="rgb(232,36,49)"/><text x="30.7890%" y="191.50"></text></g><g><title>should_inherit_track_caller (1,608,497 samples, 0.13%)</title><rect x="31.0617%" y="133" width="0.1303%" height="15" fill="rgb(209,103,24)"/><text x="31.3117%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,879,038 samples, 0.23%)</title><rect x="30.9602%" y="149" width="0.2332%" height="15" fill="rgb(229,88,8)"/><text x="31.2102%" y="159.50"></text></g><g><title>check_mod_attrs (5,779,515 samples, 0.47%)</title><rect x="30.7253%" y="165" width="0.4682%" height="15" fill="rgb(213,181,19)"/><text x="30.9753%" y="175.50"></text></g><g><title>check_mod_const_bodies (1,380,022 samples, 0.11%)</title><rect x="31.1935%" y="165" width="0.1118%" height="15" fill="rgb(254,191,54)"/><text x="31.4435%" y="175.50"></text></g><g><title>lint_levels (2,171,515 samples, 0.18%)</title><rect x="31.5177%" y="149" width="0.1759%" height="15" fill="rgb(241,83,37)"/><text x="31.7677%" y="159.50"></text></g><g><title>lookup_deprecation_entry (1,475,146 samples, 0.12%)</title><rect x="31.6936%" y="149" width="0.1195%" height="15" fill="rgb(233,36,39)"/><text x="31.9436%" y="159.50"></text></g><g><title>stability_index (1,278,174 samples, 0.10%)</title><rect x="31.7095%" y="133" width="0.1035%" height="15" fill="rgb(226,3,54)"/><text x="31.9595%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (5,358,930 samples, 0.43%)</title><rect x="31.4009%" y="165" width="0.4341%" height="15" fill="rgb(245,192,40)"/><text x="31.6509%" y="175.50"></text></g><g><title>misc_checking_1 (14,204,858 samples, 1.15%)</title><rect x="30.7186%" y="181" width="1.1507%" height="15" fill="rgb(238,167,29)"/><text x="30.9686%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (6,228,639 samples, 0.50%)</title><rect x="31.8695%" y="165" width="0.5046%" height="15" fill="rgb(232,182,51)"/><text x="32.1195%" y="175.50"></text></g><g><title>check_mod_liveness (5,140,978 samples, 0.42%)</title><rect x="31.9576%" y="149" width="0.4165%" height="15" fill="rgb(231,60,39)"/><text x="32.2076%" y="159.50"></text></g><g><title>misc_checking_2 (13,355,078 samples, 1.08%)</title><rect x="31.8693%" y="181" width="1.0819%" height="15" fill="rgb(208,69,12)"/><text x="32.1193%" y="191.50"></text></g><g><title>match_checking (7,124,489 samples, 0.58%)</title><rect x="32.3741%" y="165" width="0.5771%" height="15" fill="rgb(235,93,37)"/><text x="32.6241%" y="175.50"></text></g><g><title>check_match (6,625,997 samples, 0.54%)</title><rect x="32.4144%" y="149" width="0.5368%" height="15" fill="rgb(213,116,39)"/><text x="32.6644%" y="159.50"></text></g><g><title>check_private_in_public (3,036,704 samples, 0.25%)</title><rect x="32.9523%" y="165" width="0.2460%" height="15" fill="rgb(222,207,29)"/><text x="33.2023%" y="175.50"></text></g><g><title>death_checking (5,865,525 samples, 0.48%)</title><rect x="33.1983%" y="165" width="0.4752%" height="15" fill="rgb(206,96,30)"/><text x="33.4483%" y="175.50"></text></g><g><title>param_env (3,010,714 samples, 0.24%)</title><rect x="34.4151%" y="133" width="0.2439%" height="15" fill="rgb(218,138,4)"/><text x="34.6651%" y="143.50"></text></g><g><title>predicates_of (1,520,557 samples, 0.12%)</title><rect x="34.5358%" y="117" width="0.1232%" height="15" fill="rgb(250,191,14)"/><text x="34.7858%" y="127.50"></text></g><g><title>crate_lints (13,664,932 samples, 1.11%)</title><rect x="33.6737%" y="149" width="1.1070%" height="15" fill="rgb(239,60,40)"/><text x="33.9237%" y="159.50"></text></g><g><title>type_of (1,363,127 samples, 0.11%)</title><rect x="34.6703%" y="133" width="0.1104%" height="15" fill="rgb(206,27,48)"/><text x="34.9203%" y="143.50"></text></g><g><title>lint_checking (20,055,193 samples, 1.62%)</title><rect x="33.6735%" y="165" width="1.6246%" height="15" fill="rgb(225,35,8)"/><text x="33.9235%" y="175.50"></text></g><g><title>module_lints (6,387,411 samples, 0.52%)</title><rect x="34.7807%" y="149" width="0.5174%" height="15" fill="rgb(250,213,24)"/><text x="35.0307%" y="159.50"></text></g><g><title>lint_mod (6,348,031 samples, 0.51%)</title><rect x="34.7839%" y="133" width="0.5142%" height="15" fill="rgb(247,123,22)"/><text x="35.0339%" y="143.50"></text></g><g><title>privacy_access_levels (5,587,032 samples, 0.45%)</title><rect x="35.2981%" y="165" width="0.4526%" height="15" fill="rgb(231,138,38)"/><text x="35.5481%" y="175.50"></text></g><g><title>privacy_checking_modules (13,526,600 samples, 1.10%)</title><rect x="35.7507%" y="165" width="1.0958%" height="15" fill="rgb(231,145,46)"/><text x="36.0007%" y="175.50"></text></g><g><title>check_mod_privacy (13,499,570 samples, 1.09%)</title><rect x="35.7529%" y="149" width="1.0936%" height="15" fill="rgb(251,118,11)"/><text x="36.0029%" y="159.50"></text></g><g><title>misc_checking_3 (48,251,696 samples, 3.91%)</title><rect x="32.9512%" y="181" width="3.9088%" height="15" fill="rgb(217,147,25)"/><text x="33.2012%" y="191.50">misc..</text></g><g><title>impl_parent (3,803,418 samples, 0.31%)</title><rect x="37.5965%" y="117" width="0.3081%" height="15" fill="rgb(247,81,37)"/><text x="37.8465%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,072,928 samples, 0.17%)</title><rect x="37.7367%" y="101" width="0.1679%" height="15" fill="rgb(209,12,38)"/><text x="37.9867%" y="111.50"></text></g><g><title>impl_trait_ref (7,417,036 samples, 0.60%)</title><rect x="37.9047%" y="117" width="0.6008%" height="15" fill="rgb(227,1,9)"/><text x="38.1547%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,714,863 samples, 0.46%)</title><rect x="38.0426%" y="101" width="0.4630%" height="15" fill="rgb(248,47,43)"/><text x="38.2926%" y="111.50"></text></g><g><title>trait_impls_of (1,869,717 samples, 0.15%)</title><rect x="38.5337%" y="117" width="0.1515%" height="15" fill="rgb(221,10,30)"/><text x="38.7837%" y="127.50"></text></g><g><title>coherent_trait (21,694,470 samples, 1.76%)</title><rect x="36.9294%" y="149" width="1.7574%" height="15" fill="rgb(210,229,1)"/><text x="37.1794%" y="159.50"></text></g><g><title>specialization_graph_of (20,957,113 samples, 1.70%)</title><rect x="36.9892%" y="133" width="1.6977%" height="15" fill="rgb(222,148,37)"/><text x="37.2392%" y="143.50"></text></g><g><title>coherence_checking (22,246,946 samples, 1.80%)</title><rect x="36.9256%" y="165" width="1.8022%" height="15" fill="rgb(234,67,33)"/><text x="37.1756%" y="175.50">c..</text></g><g><title>associated_item (1,863,992 samples, 0.15%)</title><rect x="58.6650%" y="101" width="0.1510%" height="15" fill="rgb(247,98,35)"/><text x="58.9150%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,445,817 samples, 0.12%)</title><rect x="58.6988%" y="85" width="0.1171%" height="15" fill="rgb(247,138,52)"/><text x="58.9488%" y="95.50"></text></g><g><title>associated_items (2,414,759 samples, 0.20%)</title><rect x="58.6292%" y="117" width="0.1956%" height="15" fill="rgb(213,79,30)"/><text x="58.8792%" y="127.50"></text></g><g><title>dropck_outlives (5,152,244 samples, 0.42%)</title><rect x="58.8559%" y="117" width="0.4174%" height="15" fill="rgb(246,177,23)"/><text x="59.1059%" y="127.50"></text></g><g><title>predicates_of (1,530,317 samples, 0.12%)</title><rect x="60.8331%" y="101" width="0.1240%" height="15" fill="rgb(230,62,27)"/><text x="61.0831%" y="111.50"></text></g><g><title>specializes (2,782,182 samples, 0.23%)</title><rect x="60.9575%" y="101" width="0.2254%" height="15" fill="rgb(216,154,8)"/><text x="61.2075%" y="111.50"></text></g><g><title>param_env (1,626,610 samples, 0.13%)</title><rect x="61.0511%" y="85" width="0.1318%" height="15" fill="rgb(244,35,45)"/><text x="61.3011%" y="95.50"></text></g><g><title>evaluate_obligation (24,296,562 samples, 1.97%)</title><rect x="59.2744%" y="117" width="1.9682%" height="15" fill="rgb(251,115,12)"/><text x="59.5244%" y="127.50">e..</text></g><g><title>generics_of (1,672,328 samples, 0.14%)</title><rect x="61.2905%" y="117" width="0.1355%" height="15" fill="rgb(240,54,50)"/><text x="61.5405%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,265,343 samples, 0.10%)</title><rect x="61.3235%" y="101" width="0.1025%" height="15" fill="rgb(233,84,52)"/><text x="61.5735%" y="111.50"></text></g><g><title>evaluate_obligation (2,246,988 samples, 0.18%)</title><rect x="61.7466%" y="101" width="0.1820%" height="15" fill="rgb(207,117,47)"/><text x="61.9966%" y="111.50"></text></g><g><title>method_autoderef_steps (4,782,001 samples, 0.39%)</title><rect x="61.5449%" y="117" width="0.3874%" height="15" fill="rgb(249,43,39)"/><text x="61.7949%" y="127.50"></text></g><g><title>predicates_of (1,342,445 samples, 0.11%)</title><rect x="61.9880%" y="117" width="0.1087%" height="15" fill="rgb(209,38,44)"/><text x="62.2380%" y="127.50"></text></g><g><title>dropck_outlives (2,093,444 samples, 0.17%)</title><rect x="69.1743%" y="101" width="0.1696%" height="15" fill="rgb(236,212,23)"/><text x="69.4243%" y="111.50"></text></g><g><title>evaluate_obligation (8,204,337 samples, 0.66%)</title><rect x="69.3439%" y="101" width="0.6646%" height="15" fill="rgb(242,79,21)"/><text x="69.5939%" y="111.50"></text></g><g><title>evaluate_obligation (1,358,528 samples, 0.11%)</title><rect x="70.3157%" y="85" width="0.1101%" height="15" fill="rgb(211,96,35)"/><text x="70.5657%" y="95.50"></text></g><g><title>method_autoderef_steps (2,867,059 samples, 0.23%)</title><rect x="70.1943%" y="101" width="0.2323%" height="15" fill="rgb(253,215,40)"/><text x="70.4443%" y="111.50"></text></g><g><title>typeck (103,639,911 samples, 8.40%)</title><rect x="62.1593%" y="117" width="8.3957%" height="15" fill="rgb(211,81,21)"/><text x="62.4093%" y="127.50">typeck</text></g><g><title>item_bodies_checking (392,787,660 samples, 31.82%)</title><rect x="38.7676%" y="165" width="31.8193%" height="15" fill="rgb(208,190,38)"/><text x="39.0176%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (392,784,880 samples, 31.82%)</title><rect x="38.7678%" y="149" width="31.8190%" height="15" fill="rgb(235,213,38)"/><text x="39.0178%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (391,586,315 samples, 31.72%)</title><rect x="38.8649%" y="133" width="31.7220%" height="15" fill="rgb(237,122,38)"/><text x="39.1149%" y="143.50">typeck</text></g><g><title>mir_built (3,975,624 samples, 0.32%)</title><rect x="72.2657%" y="53" width="0.3221%" height="15" fill="rgb(244,218,35)"/><text x="72.5157%" y="63.50"></text></g><g><title>typeck (3,492,897 samples, 0.28%)</title><rect x="72.3048%" y="37" width="0.2830%" height="15" fill="rgb(240,68,47)"/><text x="72.5548%" y="47.50"></text></g><g><title>mir_const (4,800,784 samples, 0.39%)</title><rect x="72.2091%" y="85" width="0.3889%" height="15" fill="rgb(210,16,53)"/><text x="72.4591%" y="95.50"></text></g><g><title>unsafety_check_result (4,233,887 samples, 0.34%)</title><rect x="72.2550%" y="69" width="0.3430%" height="15" fill="rgb(235,124,12)"/><text x="72.5050%" y="79.50"></text></g><g><title>mir_promoted (4,859,364 samples, 0.39%)</title><rect x="72.2048%" y="101" width="0.3937%" height="15" fill="rgb(224,169,11)"/><text x="72.4548%" y="111.50"></text></g><g><title>type_of (7,178,149 samples, 0.58%)</title><rect x="72.0608%" y="133" width="0.5815%" height="15" fill="rgb(250,166,2)"/><text x="72.3108%" y="143.50"></text></g><g><title>mir_borrowck (7,063,557 samples, 0.57%)</title><rect x="72.0701%" y="117" width="0.5722%" height="15" fill="rgb(242,216,29)"/><text x="72.3201%" y="127.50"></text></g><g><title>evaluate_obligation (2,587,888 samples, 0.21%)</title><rect x="72.8659%" y="117" width="0.2096%" height="15" fill="rgb(230,116,27)"/><text x="73.1159%" y="127.50"></text></g><g><title>item_types_checking (31,164,306 samples, 2.52%)</title><rect x="70.5868%" y="165" width="2.5246%" height="15" fill="rgb(228,99,48)"/><text x="70.8368%" y="175.50">it..</text></g><g><title>check_mod_item_types (31,131,906 samples, 2.52%)</title><rect x="70.5895%" y="149" width="2.5220%" height="15" fill="rgb(253,11,6)"/><text x="70.8395%" y="159.50">ch..</text></g><g><title>typeck (5,791,545 samples, 0.47%)</title><rect x="72.6423%" y="133" width="0.4692%" height="15" fill="rgb(247,143,39)"/><text x="72.8923%" y="143.50"></text></g><g><title>fn_sig (3,288,586 samples, 0.27%)</title><rect x="73.3757%" y="133" width="0.2664%" height="15" fill="rgb(236,97,10)"/><text x="73.6257%" y="143.50"></text></g><g><title>resolve_lifetimes (1,351,658 samples, 0.11%)</title><rect x="73.7498%" y="101" width="0.1095%" height="15" fill="rgb(233,208,19)"/><text x="73.9998%" y="111.50"></text></g><g><title>is_late_bound_map (1,445,950 samples, 0.12%)</title><rect x="73.7427%" y="117" width="0.1171%" height="15" fill="rgb(216,164,2)"/><text x="73.9927%" y="127.50"></text></g><g><title>named_region_map (1,369,238 samples, 0.11%)</title><rect x="73.8599%" y="117" width="0.1109%" height="15" fill="rgb(220,129,5)"/><text x="74.1099%" y="127.50"></text></g><g><title>generics_of (4,199,629 samples, 0.34%)</title><rect x="73.6421%" y="133" width="0.3402%" height="15" fill="rgb(242,17,10)"/><text x="73.8921%" y="143.50"></text></g><g><title>late_bound_vars_map (2,398,097 samples, 0.19%)</title><rect x="74.3382%" y="85" width="0.1943%" height="15" fill="rgb(242,107,0)"/><text x="74.5882%" y="95.50"></text></g><g><title>resolve_lifetimes (2,301,267 samples, 0.19%)</title><rect x="74.3460%" y="69" width="0.1864%" height="15" fill="rgb(251,28,31)"/><text x="74.5960%" y="79.50"></text></g><g><title>explicit_predicates_of (5,141,340 samples, 0.42%)</title><rect x="74.1415%" y="101" width="0.4165%" height="15" fill="rgb(233,223,10)"/><text x="74.3915%" y="111.50"></text></g><g><title>predicates_of (8,729,562 samples, 0.71%)</title><rect x="74.0192%" y="133" width="0.7072%" height="15" fill="rgb(215,21,27)"/><text x="74.2692%" y="143.50"></text></g><g><title>predicates_defined_on (8,131,482 samples, 0.66%)</title><rect x="74.0677%" y="117" width="0.6587%" height="15" fill="rgb(232,23,21)"/><text x="74.3177%" y="127.50"></text></g><g><title>inferred_outlives_of (2,078,695 samples, 0.17%)</title><rect x="74.5580%" y="101" width="0.1684%" height="15" fill="rgb(244,5,23)"/><text x="74.8080%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,868,731 samples, 0.15%)</title><rect x="74.5750%" y="85" width="0.1514%" height="15" fill="rgb(226,81,46)"/><text x="74.8250%" y="95.50"></text></g><g><title>type_collecting (21,612,181 samples, 1.75%)</title><rect x="73.1135%" y="165" width="1.7508%" height="15" fill="rgb(247,70,30)"/><text x="73.3635%" y="175.50"></text></g><g><title>collect_mod_item_types (21,575,560 samples, 1.75%)</title><rect x="73.1165%" y="149" width="1.7478%" height="15" fill="rgb(212,68,19)"/><text x="73.3665%" y="159.50"></text></g><g><title>type_of (1,459,754 samples, 0.12%)</title><rect x="74.7460%" y="133" width="0.1183%" height="15" fill="rgb(240,187,13)"/><text x="74.9960%" y="143.50"></text></g><g><title>evaluate_obligation (5,399,994 samples, 0.44%)</title><rect x="77.9629%" y="133" width="0.4374%" height="15" fill="rgb(223,113,26)"/><text x="78.2129%" y="143.50"></text></g><g><title>implied_outlives_bounds (4,485,425 samples, 0.36%)</title><rect x="78.4163%" y="133" width="0.3634%" height="15" fill="rgb(206,192,2)"/><text x="78.6663%" y="143.50"></text></g><g><title>param_env (5,418,457 samples, 0.44%)</title><rect x="78.8203%" y="133" width="0.4389%" height="15" fill="rgb(241,108,4)"/><text x="79.0703%" y="143.50"></text></g><g><title>region_scope_tree (4,680,345 samples, 0.38%)</title><rect x="79.2805%" y="133" width="0.3791%" height="15" fill="rgb(247,173,49)"/><text x="79.5305%" y="143.50"></text></g><g><title>check_impl_item_well_formed (56,285,897 samples, 4.56%)</title><rect x="75.1033%" y="149" width="4.5597%" height="15" fill="rgb(224,114,35)"/><text x="75.3533%" y="159.50">check..</text></g><g><title>evaluate_obligation (3,044,291 samples, 0.25%)</title><rect x="81.5121%" y="133" width="0.2466%" height="15" fill="rgb(245,159,27)"/><text x="81.7621%" y="143.50"></text></g><g><title>param_env (3,469,833 samples, 0.28%)</title><rect x="81.9341%" y="133" width="0.2811%" height="15" fill="rgb(245,172,44)"/><text x="82.1841%" y="143.50"></text></g><g><title>check_item_well_formed (33,089,237 samples, 2.68%)</title><rect x="79.6629%" y="149" width="2.6805%" height="15" fill="rgb(236,23,11)"/><text x="79.9129%" y="159.50">ch..</text></g><g><title>analysis (1,020,644,800 samples, 82.68%)</title><rect x="0.0888%" y="197" width="82.6813%" height="15" fill="rgb(205,117,38)"/><text x="0.3388%" y="207.50">analysis</text></g><g><title>type_check_crate (566,729,111 samples, 45.91%)</title><rect x="36.8600%" y="181" width="45.9101%" height="15" fill="rgb(237,72,25)"/><text x="37.1100%" y="191.50">type_check_crate</text></g><g><title>wf_checking (97,526,293 samples, 7.90%)</title><rect x="74.8696%" y="165" width="7.9005%" height="15" fill="rgb(244,70,9)"/><text x="75.1196%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (5,266,728 samples, 0.43%)</title><rect x="82.3434%" y="149" width="0.4267%" height="15" fill="rgb(217,125,39)"/><text x="82.5934%" y="159.50"></text></g><g><title>AST_validation (2,009,343 samples, 0.16%)</title><rect x="82.8199%" y="181" width="0.1628%" height="15" fill="rgb(235,36,10)"/><text x="83.0699%" y="191.50"></text></g><g><title>metadata_register_crate (3,096,904 samples, 0.25%)</title><rect x="91.4737%" y="149" width="0.2509%" height="15" fill="rgb(251,123,47)"/><text x="91.7237%" y="159.50"></text></g><g><title>macro_expand_crate (109,489,855 samples, 8.87%)</title><rect x="83.0718%" y="181" width="8.8696%" height="15" fill="rgb(221,13,13)"/><text x="83.3218%" y="191.50">macro_expand_..</text></g><g><title>expand_crate (109,475,695 samples, 8.87%)</title><rect x="83.0730%" y="165" width="8.8685%" height="15" fill="rgb(238,131,9)"/><text x="83.3230%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,677,390 samples, 0.22%)</title><rect x="91.7246%" y="149" width="0.2169%" height="15" fill="rgb(211,50,8)"/><text x="91.9746%" y="159.50"></text></g><g><title>late_resolve_crate (16,142,290 samples, 1.31%)</title><rect x="92.0688%" y="165" width="1.3077%" height="15" fill="rgb(245,182,24)"/><text x="92.3188%" y="175.50"></text></g><g><title>resolve_check_unused (1,348,005 samples, 0.11%)</title><rect x="93.3866%" y="165" width="0.1092%" height="15" fill="rgb(242,14,37)"/><text x="93.6366%" y="175.50"></text></g><g><title>configure_and_expand (132,885,135 samples, 10.76%)</title><rect x="82.8045%" y="197" width="10.7649%" height="15" fill="rgb(246,228,12)"/><text x="83.0545%" y="207.50">configure_and_ex..</text></g><g><title>resolve_crate (19,935,871 samples, 1.61%)</title><rect x="91.9544%" y="181" width="1.6150%" height="15" fill="rgb(213,55,15)"/><text x="92.2044%" y="191.50"></text></g><g><title>drop_ast (4,482,910 samples, 0.36%)</title><rect x="93.5694%" y="197" width="0.3632%" height="15" fill="rgb(209,9,3)"/><text x="93.8194%" y="207.50"></text></g><g><title>early_lint_checks (4,815,443 samples, 0.39%)</title><rect x="93.9346%" y="197" width="0.3901%" height="15" fill="rgb(230,59,30)"/><text x="94.1846%" y="207.50"></text></g><g><title>free_global_ctxt (12,595,360 samples, 1.02%)</title><rect x="94.3247%" y="197" width="1.0203%" height="15" fill="rgb(209,121,21)"/><text x="94.5747%" y="207.50"></text></g><g><title>generate_crate_metadata (14,096,657 samples, 1.14%)</title><rect x="95.3450%" y="197" width="1.1420%" height="15" fill="rgb(220,109,13)"/><text x="95.5950%" y="207.50"></text></g><g><title>hir_lowering (37,207,843 samples, 3.01%)</title><rect x="96.4870%" y="197" width="3.0142%" height="15" fill="rgb(232,18,1)"/><text x="96.7370%" y="207.50">hir..</text></g><g><title>self_profile_alloc_query_strings (3,694,981 samples, 0.30%)</title><rect x="99.5952%" y="197" width="0.2993%" height="15" fill="rgb(215,41,42)"/><text x="99.8452%" y="207.50"></text></g><g><title>all (1,234,433,093 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,234,433,093 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>