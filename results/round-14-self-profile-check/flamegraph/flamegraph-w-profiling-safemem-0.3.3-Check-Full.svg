<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (144,941 samples, 0.29%)</title><rect x="10.2450%" y="165" width="0.2946%" height="15" fill="rgb(227,0,7)"/><text x="10.4950%" y="175.50"></text></g><g><title>item_attrs (214,142 samples, 0.44%)</title><rect x="11.0312%" y="133" width="0.4353%" height="15" fill="rgb(217,0,24)"/><text x="11.2812%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (207,572 samples, 0.42%)</title><rect x="11.0446%" y="117" width="0.4219%" height="15" fill="rgb(221,193,54)"/><text x="11.2946%" y="127.50"></text></g><g><title>codegen_fn_attrs (285,203 samples, 0.58%)</title><rect x="10.9005%" y="149" width="0.5797%" height="15" fill="rgb(248,212,6)"/><text x="11.1505%" y="159.50"></text></g><g><title>is_copy_raw (156,773 samples, 0.32%)</title><rect x="12.9196%" y="133" width="0.3186%" height="15" fill="rgb(208,68,35)"/><text x="13.1696%" y="143.50"></text></g><g><title>evaluate_obligation (136,552 samples, 0.28%)</title><rect x="12.9607%" y="117" width="0.2775%" height="15" fill="rgb(232,128,0)"/><text x="13.2107%" y="127.50"></text></g><g><title>explicit_predicates_of (92,821 samples, 0.19%)</title><rect x="13.5359%" y="53" width="0.1887%" height="15" fill="rgb(207,160,47)"/><text x="13.7859%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (91,071 samples, 0.19%)</title><rect x="13.5395%" y="37" width="0.1851%" height="15" fill="rgb(228,23,34)"/><text x="13.7895%" y="47.50"></text></g><g><title>needs_drop_raw (241,793 samples, 0.49%)</title><rect x="13.2382%" y="133" width="0.4915%" height="15" fill="rgb(218,30,26)"/><text x="13.4882%" y="143.50"></text></g><g><title>is_copy_raw (232,453 samples, 0.47%)</title><rect x="13.2572%" y="117" width="0.4725%" height="15" fill="rgb(220,122,19)"/><text x="13.5072%" y="127.50"></text></g><g><title>evaluate_obligation (220,963 samples, 0.45%)</title><rect x="13.2805%" y="101" width="0.4491%" height="15" fill="rgb(250,228,42)"/><text x="13.5305%" y="111.50"></text></g><g><title>predicates_of (107,871 samples, 0.22%)</title><rect x="13.5104%" y="85" width="0.2193%" height="15" fill="rgb(240,193,28)"/><text x="13.7604%" y="95.50"></text></g><g><title>predicates_defined_on (100,021 samples, 0.20%)</title><rect x="13.5264%" y="69" width="0.2033%" height="15" fill="rgb(216,20,37)"/><text x="13.7764%" y="79.50"></text></g><g><title>thir_body (336,804 samples, 0.68%)</title><rect x="13.8031%" y="133" width="0.6846%" height="15" fill="rgb(206,188,39)"/><text x="14.0531%" y="143.50"></text></g><g><title>mir_const (2,379,026 samples, 4.84%)</title><rect x="9.6677%" y="181" width="4.8355%" height="15" fill="rgb(217,207,13)"/><text x="9.9177%" y="191.50">mir_co..</text></g><g><title>unsafety_check_result (1,950,042 samples, 3.96%)</title><rect x="10.5396%" y="165" width="3.9635%" height="15" fill="rgb(231,73,38)"/><text x="10.7896%" y="175.50">unsa..</text></g><g><title>mir_built (1,487,307 samples, 3.02%)</title><rect x="11.4801%" y="149" width="3.0230%" height="15" fill="rgb(225,20,46)"/><text x="11.7301%" y="159.50">mir..</text></g><g><title>mir_promoted (2,682,010 samples, 5.45%)</title><rect x="9.0727%" y="197" width="5.4513%" height="15" fill="rgb(210,31,41)"/><text x="9.3227%" y="207.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (104,512 samples, 0.21%)</title><rect x="14.5240%" y="197" width="0.2124%" height="15" fill="rgb(221,200,47)"/><text x="14.7740%" y="207.50"></text></g><g><title>type_op_prove_predicate (576,776 samples, 1.17%)</title><rect x="14.7364%" y="197" width="1.1723%" height="15" fill="rgb(226,26,5)"/><text x="14.9864%" y="207.50"></text></g><g><title>MIR_borrow_checking (6,998,289 samples, 14.22%)</title><rect x="1.7053%" y="229" width="14.2243%" height="15" fill="rgb(249,33,26)"/><text x="1.9553%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,985,419 samples, 14.20%)</title><rect x="1.7315%" y="213" width="14.1981%" height="15" fill="rgb(235,183,28)"/><text x="1.9815%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (99,491 samples, 0.20%)</title><rect x="15.9433%" y="229" width="0.2022%" height="15" fill="rgb(221,5,38)"/><text x="16.1933%" y="239.50"></text></g><g><title>codegen_fn_attrs (140,522 samples, 0.29%)</title><rect x="16.3456%" y="197" width="0.2856%" height="15" fill="rgb(247,18,42)"/><text x="16.5956%" y="207.50"></text></g><g><title>check_mod_attrs (221,372 samples, 0.45%)</title><rect x="16.1818%" y="213" width="0.4499%" height="15" fill="rgb(241,131,45)"/><text x="16.4318%" y="223.50"></text></g><g><title>lookup_deprecation_entry (62,141 samples, 0.13%)</title><rect x="16.9360%" y="197" width="0.1263%" height="15" fill="rgb(249,31,29)"/><text x="17.1860%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (215,533 samples, 0.44%)</title><rect x="16.7597%" y="213" width="0.4381%" height="15" fill="rgb(225,111,53)"/><text x="17.0097%" y="223.50"></text></g><g><title>misc_checking_1 (560,326 samples, 1.14%)</title><rect x="16.1468%" y="229" width="1.1389%" height="15" fill="rgb(238,160,17)"/><text x="16.3968%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (163,272 samples, 0.33%)</title><rect x="17.2905%" y="213" width="0.3319%" height="15" fill="rgb(214,148,48)"/><text x="17.5405%" y="223.50"></text></g><g><title>check_mod_liveness (127,342 samples, 0.26%)</title><rect x="17.3635%" y="197" width="0.2588%" height="15" fill="rgb(232,36,49)"/><text x="17.6135%" y="207.50"></text></g><g><title>misc_checking_2 (285,163 samples, 0.58%)</title><rect x="17.2857%" y="229" width="0.5796%" height="15" fill="rgb(209,103,24)"/><text x="17.5357%" y="239.50"></text></g><g><title>match_checking (119,561 samples, 0.24%)</title><rect x="17.6223%" y="213" width="0.2430%" height="15" fill="rgb(229,88,8)"/><text x="17.8723%" y="223.50"></text></g><g><title>check_match (114,501 samples, 0.23%)</title><rect x="17.6326%" y="197" width="0.2327%" height="15" fill="rgb(213,181,19)"/><text x="17.8826%" y="207.50"></text></g><g><title>death_checking (121,301 samples, 0.25%)</title><rect x="17.9708%" y="213" width="0.2465%" height="15" fill="rgb(254,191,54)"/><text x="18.2208%" y="223.50"></text></g><g><title>param_env (76,921 samples, 0.16%)</title><rect x="18.4637%" y="181" width="0.1563%" height="15" fill="rgb(241,83,37)"/><text x="18.7137%" y="191.50"></text></g><g><title>crate_lints (205,782 samples, 0.42%)</title><rect x="18.2230%" y="197" width="0.4183%" height="15" fill="rgb(233,36,39)"/><text x="18.4730%" y="207.50"></text></g><g><title>lint_checking (347,903 samples, 0.71%)</title><rect x="18.2174%" y="213" width="0.7071%" height="15" fill="rgb(226,3,54)"/><text x="18.4674%" y="223.50"></text></g><g><title>module_lints (139,341 samples, 0.28%)</title><rect x="18.6413%" y="197" width="0.2832%" height="15" fill="rgb(245,192,40)"/><text x="18.8913%" y="207.50"></text></g><g><title>lint_mod (135,941 samples, 0.28%)</title><rect x="18.6482%" y="181" width="0.2763%" height="15" fill="rgb(238,167,29)"/><text x="18.8982%" y="191.50"></text></g><g><title>privacy_access_levels (68,751 samples, 0.14%)</title><rect x="18.9245%" y="213" width="0.1397%" height="15" fill="rgb(232,182,51)"/><text x="19.1745%" y="223.50"></text></g><g><title>privacy_checking_modules (247,953 samples, 0.50%)</title><rect x="19.0642%" y="213" width="0.5040%" height="15" fill="rgb(231,60,39)"/><text x="19.3142%" y="223.50"></text></g><g><title>check_mod_privacy (245,712 samples, 0.50%)</title><rect x="19.0688%" y="197" width="0.4994%" height="15" fill="rgb(208,69,12)"/><text x="19.3188%" y="207.50"></text></g><g><title>misc_checking_3 (846,759 samples, 1.72%)</title><rect x="17.8653%" y="229" width="1.7211%" height="15" fill="rgb(235,93,37)"/><text x="18.1153%" y="239.50"></text></g><g><title>adt_def (63,970 samples, 0.13%)</title><rect x="40.1618%" y="149" width="0.1300%" height="15" fill="rgb(213,116,39)"/><text x="40.4118%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (62,160 samples, 0.13%)</title><rect x="40.1655%" y="133" width="0.1263%" height="15" fill="rgb(222,207,29)"/><text x="40.4155%" y="143.50"></text></g><g><title>adt_sized_constraint (78,150 samples, 0.16%)</title><rect x="40.1473%" y="165" width="0.1588%" height="15" fill="rgb(206,96,30)"/><text x="40.3973%" y="175.50"></text></g><g><title>associated_item (631,987 samples, 1.28%)</title><rect x="40.8291%" y="149" width="1.2845%" height="15" fill="rgb(218,138,4)"/><text x="41.0791%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (464,115 samples, 0.94%)</title><rect x="41.1704%" y="133" width="0.9433%" height="15" fill="rgb(250,191,14)"/><text x="41.4204%" y="143.50"></text></g><g><title>associated_items (939,289 samples, 1.91%)</title><rect x="40.3112%" y="165" width="1.9091%" height="15" fill="rgb(239,60,40)"/><text x="40.5612%" y="175.50">a..</text></g><g><title>associated_item_def_ids (52,471 samples, 0.11%)</title><rect x="42.1137%" y="149" width="0.1066%" height="15" fill="rgb(206,27,48)"/><text x="42.3637%" y="159.50"></text></g><g><title>impl_parent (165,062 samples, 0.34%)</title><rect x="43.0726%" y="53" width="0.3355%" height="15" fill="rgb(225,35,8)"/><text x="43.3226%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (106,761 samples, 0.22%)</title><rect x="43.1911%" y="37" width="0.2170%" height="15" fill="rgb(250,213,24)"/><text x="43.4411%" y="47.50"></text></g><g><title>impl_trait_ref (546,884 samples, 1.11%)</title><rect x="43.4081%" y="53" width="1.1116%" height="15" fill="rgb(247,123,22)"/><text x="43.6581%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (504,654 samples, 1.03%)</title><rect x="43.4939%" y="37" width="1.0257%" height="15" fill="rgb(231,138,38)"/><text x="43.7439%" y="47.50"></text></g><g><title>coherent_trait (1,009,952 samples, 2.05%)</title><rect x="42.6027%" y="85" width="2.0528%" height="15" fill="rgb(231,145,46)"/><text x="42.8527%" y="95.50">c..</text></g><g><title>specialization_graph_of (1,001,612 samples, 2.04%)</title><rect x="42.6196%" y="69" width="2.0358%" height="15" fill="rgb(251,118,11)"/><text x="42.8696%" y="79.50">s..</text></g><g><title>trait_impls_of (66,821 samples, 0.14%)</title><rect x="44.5196%" y="53" width="0.1358%" height="15" fill="rgb(217,147,25)"/><text x="44.7696%" y="63.50"></text></g><g><title>adt_destructor (1,019,022 samples, 2.07%)</title><rect x="42.5869%" y="117" width="2.0712%" height="15" fill="rgb(247,81,37)"/><text x="42.8369%" y="127.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (1,017,592 samples, 2.07%)</title><rect x="42.5898%" y="101" width="2.0683%" height="15" fill="rgb(209,12,38)"/><text x="42.8398%" y="111.50">m..</text></g><g><title>adt_dtorck_constraint (1,044,442 samples, 2.12%)</title><rect x="42.5388%" y="133" width="2.1229%" height="15" fill="rgb(227,1,9)"/><text x="42.7888%" y="143.50">a..</text></g><g><title>dropck_outlives (1,142,693 samples, 2.32%)</title><rect x="42.3730%" y="165" width="2.3226%" height="15" fill="rgb(248,47,43)"/><text x="42.6230%" y="175.50">d..</text></g><g><title>adt_dtorck_constraint (1,084,273 samples, 2.20%)</title><rect x="42.4917%" y="149" width="2.2038%" height="15" fill="rgb(221,10,30)"/><text x="42.7417%" y="159.50">a..</text></g><g><title>adt_def (52,131 samples, 0.11%)</title><rect x="45.7608%" y="133" width="0.1060%" height="15" fill="rgb(210,229,1)"/><text x="46.0108%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (50,941 samples, 0.10%)</title><rect x="45.7632%" y="117" width="0.1035%" height="15" fill="rgb(222,148,37)"/><text x="46.0132%" y="127.50"></text></g><g><title>adt_sized_constraint (60,381 samples, 0.12%)</title><rect x="45.7480%" y="149" width="0.1227%" height="15" fill="rgb(234,67,33)"/><text x="45.9980%" y="159.50"></text></g><g><title>impl_trait_ref (53,970 samples, 0.11%)</title><rect x="45.9934%" y="149" width="0.1097%" height="15" fill="rgb(247,98,35)"/><text x="46.2434%" y="159.50"></text></g><g><title>predicates_of (80,591 samples, 0.16%)</title><rect x="46.1214%" y="149" width="0.1638%" height="15" fill="rgb(247,138,52)"/><text x="46.3714%" y="159.50"></text></g><g><title>predicates_defined_on (55,371 samples, 0.11%)</title><rect x="46.1727%" y="133" width="0.1125%" height="15" fill="rgb(213,79,30)"/><text x="46.4227%" y="143.50"></text></g><g><title>specializes (68,491 samples, 0.14%)</title><rect x="46.2852%" y="149" width="0.1392%" height="15" fill="rgb(246,177,23)"/><text x="46.5352%" y="159.50"></text></g><g><title>param_env (50,850 samples, 0.10%)</title><rect x="46.3211%" y="133" width="0.1034%" height="15" fill="rgb(230,62,27)"/><text x="46.5711%" y="143.50"></text></g><g><title>trait_impls_of (598,866 samples, 1.22%)</title><rect x="46.4387%" y="149" width="1.2172%" height="15" fill="rgb(216,154,8)"/><text x="46.6887%" y="159.50"></text></g><g><title>implementations_of_trait (173,833 samples, 0.35%)</title><rect x="47.3026%" y="133" width="0.3533%" height="15" fill="rgb(244,35,45)"/><text x="47.5526%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (119,372 samples, 0.24%)</title><rect x="47.4133%" y="117" width="0.2426%" height="15" fill="rgb(251,115,12)"/><text x="47.6633%" y="127.50"></text></g><g><title>evaluate_obligation (1,458,268 samples, 2.96%)</title><rect x="44.6956%" y="165" width="2.9640%" height="15" fill="rgb(240,54,50)"/><text x="44.9456%" y="175.50">eva..</text></g><g><title>fn_sig (178,300 samples, 0.36%)</title><rect x="47.6974%" y="165" width="0.3624%" height="15" fill="rgb(233,84,52)"/><text x="47.9474%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (161,040 samples, 0.33%)</title><rect x="47.7325%" y="149" width="0.3273%" height="15" fill="rgb(207,117,47)"/><text x="47.9825%" y="159.50"></text></g><g><title>generics_of (93,932 samples, 0.19%)</title><rect x="48.0598%" y="165" width="0.1909%" height="15" fill="rgb(249,43,39)"/><text x="48.3098%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (63,542 samples, 0.13%)</title><rect x="48.1216%" y="149" width="0.1292%" height="15" fill="rgb(209,38,44)"/><text x="48.3716%" y="159.50"></text></g><g><title>associated_item (107,072 samples, 0.22%)</title><rect x="48.2623%" y="133" width="0.2176%" height="15" fill="rgb(236,212,23)"/><text x="48.5123%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (106,082 samples, 0.22%)</title><rect x="48.2643%" y="117" width="0.2156%" height="15" fill="rgb(242,79,21)"/><text x="48.5143%" y="127.50"></text></g><g><title>impl_item_implementor_ids (120,932 samples, 0.25%)</title><rect x="48.2507%" y="165" width="0.2458%" height="15" fill="rgb(211,96,35)"/><text x="48.5007%" y="175.50"></text></g><g><title>associated_items (117,792 samples, 0.24%)</title><rect x="48.2571%" y="149" width="0.2394%" height="15" fill="rgb(253,215,40)"/><text x="48.5071%" y="159.50"></text></g><g><title>item_attrs (159,263 samples, 0.32%)</title><rect x="48.6666%" y="165" width="0.3237%" height="15" fill="rgb(211,81,21)"/><text x="48.9166%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (154,183 samples, 0.31%)</title><rect x="48.6770%" y="149" width="0.3134%" height="15" fill="rgb(208,190,38)"/><text x="48.9270%" y="159.50"></text></g><g><title>evaluate_obligation (189,004 samples, 0.38%)</title><rect x="49.4246%" y="149" width="0.3842%" height="15" fill="rgb(235,213,38)"/><text x="49.6746%" y="159.50"></text></g><g><title>method_autoderef_steps (340,635 samples, 0.69%)</title><rect x="49.1603%" y="165" width="0.6924%" height="15" fill="rgb(237,122,38)"/><text x="49.4103%" y="175.50"></text></g><g><title>explicit_predicates_of (115,100 samples, 0.23%)</title><rect x="50.2842%" y="133" width="0.2339%" height="15" fill="rgb(244,218,35)"/><text x="50.5342%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (88,300 samples, 0.18%)</title><rect x="50.3386%" y="117" width="0.1795%" height="15" fill="rgb(240,68,47)"/><text x="50.5886%" y="127.50"></text></g><g><title>predicates_of (365,091 samples, 0.74%)</title><rect x="49.8919%" y="165" width="0.7421%" height="15" fill="rgb(210,16,53)"/><text x="50.1419%" y="175.50"></text></g><g><title>predicates_defined_on (255,911 samples, 0.52%)</title><rect x="50.1138%" y="149" width="0.5201%" height="15" fill="rgb(235,124,12)"/><text x="50.3638%" y="159.50"></text></g><g><title>inferred_outlives_of (56,981 samples, 0.12%)</title><rect x="50.5181%" y="133" width="0.1158%" height="15" fill="rgb(224,169,11)"/><text x="50.7681%" y="143.50"></text></g><g><title>type_of (82,641 samples, 0.17%)</title><rect x="50.7416%" y="165" width="0.1680%" height="15" fill="rgb(250,166,2)"/><text x="50.9916%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (70,481 samples, 0.14%)</title><rect x="50.7663%" y="149" width="0.1433%" height="15" fill="rgb(242,216,29)"/><text x="51.0163%" y="159.50"></text></g><g><title>item_bodies_checking (15,370,252 samples, 31.24%)</title><rect x="19.7319%" y="213" width="31.2406%" height="15" fill="rgb(230,116,27)"/><text x="19.9819%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,366,842 samples, 31.23%)</title><rect x="19.7388%" y="197" width="31.2336%" height="15" fill="rgb(228,99,48)"/><text x="19.9888%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (15,356,191 samples, 31.21%)</title><rect x="19.7605%" y="181" width="31.2120%" height="15" fill="rgb(253,11,6)"/><text x="20.0105%" y="191.50">typeck</text></g><g><title>fn_sig (84,821 samples, 0.17%)</title><rect x="51.1142%" y="181" width="0.1724%" height="15" fill="rgb(247,143,39)"/><text x="51.3642%" y="191.50"></text></g><g><title>named_region_map (117,912 samples, 0.24%)</title><rect x="51.3868%" y="165" width="0.2397%" height="15" fill="rgb(236,97,10)"/><text x="51.6368%" y="175.50"></text></g><g><title>resolve_lifetimes (106,362 samples, 0.22%)</title><rect x="51.4102%" y="149" width="0.2162%" height="15" fill="rgb(233,208,19)"/><text x="51.6602%" y="159.50"></text></g><g><title>generics_of (173,902 samples, 0.35%)</title><rect x="51.2866%" y="181" width="0.3535%" height="15" fill="rgb(216,164,2)"/><text x="51.5366%" y="191.50"></text></g><g><title>explicit_predicates_of (92,161 samples, 0.19%)</title><rect x="51.6813%" y="149" width="0.1873%" height="15" fill="rgb(220,129,5)"/><text x="51.9313%" y="159.50"></text></g><g><title>predicates_of (119,281 samples, 0.24%)</title><rect x="51.6401%" y="181" width="0.2424%" height="15" fill="rgb(242,17,10)"/><text x="51.8901%" y="191.50"></text></g><g><title>predicates_defined_on (114,451 samples, 0.23%)</title><rect x="51.6499%" y="165" width="0.2326%" height="15" fill="rgb(242,107,0)"/><text x="51.8999%" y="175.50"></text></g><g><title>type_collecting (468,195 samples, 0.95%)</title><rect x="50.9850%" y="213" width="0.9516%" height="15" fill="rgb(251,28,31)"/><text x="51.2350%" y="223.50"></text></g><g><title>collect_mod_item_types (458,935 samples, 0.93%)</title><rect x="51.0038%" y="197" width="0.9328%" height="15" fill="rgb(233,223,10)"/><text x="51.2538%" y="207.50"></text></g><g><title>evaluate_obligation (154,681 samples, 0.31%)</title><rect x="53.0775%" y="181" width="0.3144%" height="15" fill="rgb(215,21,27)"/><text x="53.3275%" y="191.50"></text></g><g><title>implied_outlives_bounds (161,981 samples, 0.33%)</title><rect x="53.3919%" y="181" width="0.3292%" height="15" fill="rgb(232,23,21)"/><text x="53.6419%" y="191.50"></text></g><g><title>param_env (264,613 samples, 0.54%)</title><rect x="53.7236%" y="181" width="0.5378%" height="15" fill="rgb(244,5,23)"/><text x="53.9736%" y="191.50"></text></g><g><title>predicates_of (56,090 samples, 0.11%)</title><rect x="54.2614%" y="181" width="0.1140%" height="15" fill="rgb(226,81,46)"/><text x="54.5114%" y="191.50"></text></g><g><title>region_scope_tree (93,622 samples, 0.19%)</title><rect x="54.3754%" y="181" width="0.1903%" height="15" fill="rgb(247,70,30)"/><text x="54.6254%" y="191.50"></text></g><g><title>analysis (26,767,369 samples, 54.41%)</title><rect x="1.3627%" y="245" width="54.4056%" height="15" fill="rgb(212,68,19)"/><text x="1.6127%" y="255.50">analysis</text></g><g><title>type_check_crate (17,801,389 samples, 36.18%)</title><rect x="19.5864%" y="229" width="36.1819%" height="15" fill="rgb(240,187,13)"/><text x="19.8364%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,884,261 samples, 3.83%)</title><rect x="51.9385%" y="213" width="3.8298%" height="15" fill="rgb(223,113,26)"/><text x="52.1885%" y="223.50">wf_c..</text></g><g><title>check_item_well_formed (1,849,521 samples, 3.76%)</title><rect x="52.0091%" y="197" width="3.7592%" height="15" fill="rgb(206,192,2)"/><text x="52.2591%" y="207.50">chec..</text></g><g><title>trait_impls_of (591,677 samples, 1.20%)</title><rect x="54.5657%" y="181" width="1.2026%" height="15" fill="rgb(241,108,4)"/><text x="54.8157%" y="191.50"></text></g><g><title>implementations_of_trait (119,731 samples, 0.24%)</title><rect x="55.5250%" y="165" width="0.2434%" height="15" fill="rgb(247,173,49)"/><text x="55.7750%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (101,841 samples, 0.21%)</title><rect x="55.5613%" y="149" width="0.2070%" height="15" fill="rgb(224,114,35)"/><text x="55.8113%" y="159.50"></text></g><g><title>codegen_crate (542,846 samples, 1.10%)</title><rect x="55.7886%" y="245" width="1.1034%" height="15" fill="rgb(245,159,27)"/><text x="56.0386%" y="255.50"></text></g><g><title>AST_validation (68,590 samples, 0.14%)</title><rect x="57.2873%" y="229" width="0.1394%" height="15" fill="rgb(245,172,44)"/><text x="57.5373%" y="239.50"></text></g><g><title>crate_injection (87,421 samples, 0.18%)</title><rect x="57.4845%" y="229" width="0.1777%" height="15" fill="rgb(236,23,11)"/><text x="57.7345%" y="239.50"></text></g><g><title>metadata_load_macro (209,130 samples, 0.43%)</title><rect x="77.7882%" y="197" width="0.4251%" height="15" fill="rgb(205,117,38)"/><text x="78.0382%" y="207.50"></text></g><g><title>macro_expand_crate (12,428,539 samples, 25.26%)</title><rect x="57.6622%" y="229" width="25.2614%" height="15" fill="rgb(237,72,25)"/><text x="57.9122%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,414,309 samples, 25.23%)</title><rect x="57.6911%" y="213" width="25.2325%" height="15" fill="rgb(244,70,9)"/><text x="57.9411%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,317,456 samples, 4.71%)</title><rect x="78.2133%" y="197" width="4.7103%" height="15" fill="rgb(217,125,39)"/><text x="78.4633%" y="207.50">metad..</text></g><g><title>metadata_register_crate (838,430 samples, 1.70%)</title><rect x="81.2195%" y="181" width="1.7041%" height="15" fill="rgb(235,36,10)"/><text x="81.4695%" y="191.50"></text></g><g><title>metadata_register_crate (74,111 samples, 0.15%)</title><rect x="82.7730%" y="165" width="0.1506%" height="15" fill="rgb(251,123,47)"/><text x="83.0230%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (92,211 samples, 0.19%)</title><rect x="82.9308%" y="229" width="0.1874%" height="15" fill="rgb(221,13,13)"/><text x="83.1808%" y="239.50"></text></g><g><title>finalize_macro_resolutions (286,653 samples, 0.58%)</title><rect x="83.1831%" y="213" width="0.5826%" height="15" fill="rgb(238,131,9)"/><text x="83.4331%" y="223.50"></text></g><g><title>late_resolve_crate (1,658,079 samples, 3.37%)</title><rect x="83.7658%" y="213" width="3.3701%" height="15" fill="rgb(211,50,8)"/><text x="84.0158%" y="223.50">lat..</text></g><g><title>configure_and_expand (14,922,147 samples, 30.33%)</title><rect x="56.8920%" y="245" width="30.3298%" height="15" fill="rgb(245,182,24)"/><text x="57.1420%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,018,932 samples, 4.10%)</title><rect x="83.1182%" y="229" width="4.1035%" height="15" fill="rgb(242,14,37)"/><text x="83.3682%" y="239.50">reso..</text></g><g><title>drop_ast (67,321 samples, 0.14%)</title><rect x="87.2218%" y="245" width="0.1368%" height="15" fill="rgb(246,228,12)"/><text x="87.4718%" y="255.50"></text></g><g><title>early_lint_checks (153,132 samples, 0.31%)</title><rect x="87.3864%" y="245" width="0.3112%" height="15" fill="rgb(213,55,15)"/><text x="87.6364%" y="255.50"></text></g><g><title>free_global_ctxt (1,931,422 samples, 3.93%)</title><rect x="87.6977%" y="245" width="3.9257%" height="15" fill="rgb(209,9,3)"/><text x="87.9477%" y="255.50">free..</text></g><g><title>crate_hash (126,521 samples, 0.26%)</title><rect x="92.2787%" y="229" width="0.2572%" height="15" fill="rgb(230,59,30)"/><text x="92.5287%" y="239.50"></text></g><g><title>generate_crate_metadata (563,687 samples, 1.15%)</title><rect x="91.6234%" y="245" width="1.1457%" height="15" fill="rgb(209,121,21)"/><text x="91.8734%" y="255.50"></text></g><g><title>hir_lowering (1,035,371 samples, 2.10%)</title><rect x="92.7691%" y="245" width="2.1044%" height="15" fill="rgb(220,109,13)"/><text x="93.0191%" y="255.50">h..</text></g><g><title>parse_crate (1,263,744 samples, 2.57%)</title><rect x="94.9687%" y="245" width="2.5686%" height="15" fill="rgb(232,18,1)"/><text x="95.2187%" y="255.50">pa..</text></g><g><title>prepare_outputs (278,223 samples, 0.57%)</title><rect x="97.5504%" y="245" width="0.5655%" height="15" fill="rgb(215,41,42)"/><text x="97.8004%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (377,904 samples, 0.77%)</title><rect x="98.1159%" y="245" width="0.7681%" height="15" fill="rgb(224,123,36)"/><text x="98.3659%" y="255.50"></text></g><g><title>setup_global_ctxt (121,132 samples, 0.25%)</title><rect x="98.9068%" y="245" width="0.2462%" height="15" fill="rgb(240,125,3)"/><text x="99.1568%" y="255.50"></text></g><g><title>all (49,199,669 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (49,199,669 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (416,734 samples, 0.85%)</title><rect x="99.1530%" y="245" width="0.8470%" height="15" fill="rgb(238,207,15)"/><text x="99.4030%" y="255.50"></text></g></svg></svg>