<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>resolve_instance (30,861 samples, 0.12%)</title><rect x="8.1382%" y="37" width="0.1210%" height="15" fill="rgb(227,0,7)"/><text x="8.3882%" y="47.50"></text></g><g><title>thir_body (31,730 samples, 0.12%)</title><rect x="8.2706%" y="37" width="0.1244%" height="15" fill="rgb(217,0,24)"/><text x="8.5206%" y="47.50"></text></g><g><title>mir_const (435,295 samples, 1.71%)</title><rect x="6.7204%" y="85" width="1.7065%" height="15" fill="rgb(221,193,54)"/><text x="6.9704%" y="95.50"></text></g><g><title>unsafety_check_result (308,243 samples, 1.21%)</title><rect x="7.2185%" y="69" width="1.2084%" height="15" fill="rgb(248,212,6)"/><text x="7.4685%" y="79.50"></text></g><g><title>mir_built (243,093 samples, 0.95%)</title><rect x="7.4739%" y="53" width="0.9530%" height="15" fill="rgb(208,68,35)"/><text x="7.7239%" y="63.50"></text></g><g><title>mir_promoted (557,287 samples, 2.18%)</title><rect x="6.2785%" y="101" width="2.1847%" height="15" fill="rgb(232,128,0)"/><text x="6.5285%" y="111.50">m..</text></g><g><title>MIR_borrow_checking (1,420,986 samples, 5.57%)</title><rect x="3.0728%" y="133" width="5.5707%" height="15" fill="rgb(207,160,47)"/><text x="3.3228%" y="143.50">MIR_bor..</text></g><g><title>mir_borrowck (1,412,226 samples, 5.54%)</title><rect x="3.1071%" y="117" width="5.5363%" height="15" fill="rgb(228,23,34)"/><text x="3.3571%" y="127.50">mir_bor..</text></g><g><title>type_op_prove_predicate (45,980 samples, 0.18%)</title><rect x="8.4632%" y="101" width="0.1803%" height="15" fill="rgb(218,30,26)"/><text x="8.7132%" y="111.50"></text></g><g><title>hir_owner (26,130 samples, 0.10%)</title><rect x="8.9352%" y="117" width="0.1024%" height="15" fill="rgb(220,122,19)"/><text x="9.1852%" y="127.50"></text></g><g><title>hir_module_items (96,171 samples, 0.38%)</title><rect x="8.6624%" y="133" width="0.3770%" height="15" fill="rgb(250,228,42)"/><text x="8.9124%" y="143.50"></text></g><g><title>get_lang_items (78,451 samples, 0.31%)</title><rect x="9.5890%" y="85" width="0.3076%" height="15" fill="rgb(240,193,28)"/><text x="9.8390%" y="95.50"></text></g><g><title>associated_item (53,750 samples, 0.21%)</title><rect x="9.9507%" y="69" width="0.2107%" height="15" fill="rgb(216,20,37)"/><text x="10.2007%" y="79.50"></text></g><g><title>should_inherit_track_caller (69,910 samples, 0.27%)</title><rect x="9.8965%" y="85" width="0.2741%" height="15" fill="rgb(206,188,39)"/><text x="10.1465%" y="95.50"></text></g><g><title>codegen_fn_attrs (240,792 samples, 0.94%)</title><rect x="9.3700%" y="101" width="0.9440%" height="15" fill="rgb(217,207,13)"/><text x="9.6200%" y="111.50"></text></g><g><title>supported_target_features (36,580 samples, 0.14%)</title><rect x="10.1706%" y="85" width="0.1434%" height="15" fill="rgb(231,73,38)"/><text x="10.4206%" y="95.50"></text></g><g><title>check_mod_attrs (298,363 samples, 1.17%)</title><rect x="9.1458%" y="117" width="1.1697%" height="15" fill="rgb(225,20,46)"/><text x="9.3958%" y="127.50"></text></g><g><title>check_mod_const_bodies (33,480 samples, 0.13%)</title><rect x="10.3155%" y="117" width="0.1313%" height="15" fill="rgb(210,31,41)"/><text x="10.5655%" y="127.50"></text></g><g><title>lookup_stability (39,350 samples, 0.15%)</title><rect x="10.7145%" y="101" width="0.1543%" height="15" fill="rgb(221,200,47)"/><text x="10.9645%" y="111.50"></text></g><g><title>check_mod_unstable_api_usage (97,742 samples, 0.38%)</title><rect x="10.5007%" y="117" width="0.3832%" height="15" fill="rgb(226,26,5)"/><text x="10.7507%" y="127.50"></text></g><g><title>looking_for_derive_registrar (38,101 samples, 0.15%)</title><rect x="10.8890%" y="117" width="0.1494%" height="15" fill="rgb(249,33,26)"/><text x="11.1390%" y="127.50"></text></g><g><title>misc_checking_1 (513,966 samples, 2.01%)</title><rect x="9.0424%" y="133" width="2.0149%" height="15" fill="rgb(235,183,28)"/><text x="9.2924%" y="143.50">m..</text></g><g><title>liveness_and_intrinsic_checking (58,260 samples, 0.23%)</title><rect x="11.0893%" y="117" width="0.2284%" height="15" fill="rgb(221,5,38)"/><text x="11.3393%" y="127.50"></text></g><g><title>check_mod_liveness (45,500 samples, 0.18%)</title><rect x="11.1394%" y="101" width="0.1784%" height="15" fill="rgb(247,18,42)"/><text x="11.3894%" y="111.50"></text></g><g><title>misc_checking_2 (154,872 samples, 0.61%)</title><rect x="11.0573%" y="133" width="0.6071%" height="15" fill="rgb(241,131,45)"/><text x="11.3073%" y="143.50"></text></g><g><title>match_checking (88,441 samples, 0.35%)</title><rect x="11.3177%" y="117" width="0.3467%" height="15" fill="rgb(249,31,29)"/><text x="11.5677%" y="127.50"></text></g><g><title>check_match (83,710 samples, 0.33%)</title><rect x="11.3363%" y="101" width="0.3282%" height="15" fill="rgb(225,111,53)"/><text x="11.5863%" y="111.50"></text></g><g><title>check_private_in_public (36,891 samples, 0.14%)</title><rect x="11.7116%" y="117" width="0.1446%" height="15" fill="rgb(238,160,17)"/><text x="11.9616%" y="127.50"></text></g><g><title>death_checking (57,210 samples, 0.22%)</title><rect x="11.8563%" y="117" width="0.2243%" height="15" fill="rgb(214,148,48)"/><text x="12.1063%" y="127.50"></text></g><g><title>crate_lints (97,291 samples, 0.38%)</title><rect x="12.0896%" y="101" width="0.3814%" height="15" fill="rgb(232,36,49)"/><text x="12.3396%" y="111.50"></text></g><g><title>param_env (44,290 samples, 0.17%)</title><rect x="12.2974%" y="85" width="0.1736%" height="15" fill="rgb(209,103,24)"/><text x="12.5474%" y="95.50"></text></g><g><title>lint_checking (136,361 samples, 0.53%)</title><rect x="12.0806%" y="117" width="0.5346%" height="15" fill="rgb(229,88,8)"/><text x="12.3306%" y="127.50"></text></g><g><title>module_lints (36,760 samples, 0.14%)</title><rect x="12.4710%" y="101" width="0.1441%" height="15" fill="rgb(213,181,19)"/><text x="12.7210%" y="111.50"></text></g><g><title>lint_mod (33,650 samples, 0.13%)</title><rect x="12.4832%" y="85" width="0.1319%" height="15" fill="rgb(254,191,54)"/><text x="12.7332%" y="95.50"></text></g><g><title>privacy_access_levels (74,451 samples, 0.29%)</title><rect x="12.6151%" y="117" width="0.2919%" height="15" fill="rgb(241,83,37)"/><text x="12.8651%" y="127.50"></text></g><g><title>privacy_checking_modules (45,011 samples, 0.18%)</title><rect x="12.9070%" y="117" width="0.1765%" height="15" fill="rgb(233,36,39)"/><text x="13.1570%" y="127.50"></text></g><g><title>check_mod_privacy (43,101 samples, 0.17%)</title><rect x="12.9145%" y="101" width="0.1690%" height="15" fill="rgb(226,3,54)"/><text x="13.1645%" y="111.50"></text></g><g><title>misc_checking_3 (386,425 samples, 1.51%)</title><rect x="11.6644%" y="133" width="1.5149%" height="15" fill="rgb(245,192,40)"/><text x="11.9144%" y="143.50"></text></g><g><title>coherent_trait (92,211 samples, 0.36%)</title><rect x="13.3890%" y="101" width="0.3615%" height="15" fill="rgb(238,167,29)"/><text x="13.6390%" y="111.50"></text></g><g><title>specialization_graph_of (78,481 samples, 0.31%)</title><rect x="13.4428%" y="85" width="0.3077%" height="15" fill="rgb(232,182,51)"/><text x="13.6928%" y="95.50"></text></g><g><title>orphan_check_crate (33,461 samples, 0.13%)</title><rect x="13.7799%" y="101" width="0.1312%" height="15" fill="rgb(231,60,39)"/><text x="14.0299%" y="111.50"></text></g><g><title>coherence_checking (158,262 samples, 0.62%)</title><rect x="13.2992%" y="117" width="0.6204%" height="15" fill="rgb(208,69,12)"/><text x="13.5492%" y="127.50"></text></g><g><title>method_autoderef_steps (97,561 samples, 0.38%)</title><rect x="16.3682%" y="69" width="0.3825%" height="15" fill="rgb(235,93,37)"/><text x="16.6182%" y="79.50"></text></g><g><title>evaluate_obligation (84,941 samples, 0.33%)</title><rect x="16.4177%" y="53" width="0.3330%" height="15" fill="rgb(213,116,39)"/><text x="16.6677%" y="63.50"></text></g><g><title>trait_impls_of (45,320 samples, 0.18%)</title><rect x="16.5730%" y="37" width="0.1777%" height="15" fill="rgb(222,207,29)"/><text x="16.8230%" y="47.50"></text></g><g><title>trait_impls_of (37,870 samples, 0.15%)</title><rect x="16.8191%" y="69" width="0.1485%" height="15" fill="rgb(206,96,30)"/><text x="17.0691%" y="79.50"></text></g><g><title>item_bodies_checking (760,148 samples, 2.98%)</title><rect x="13.9968%" y="117" width="2.9800%" height="15" fill="rgb(218,138,4)"/><text x="14.2468%" y="127.50">ite..</text></g><g><title>typeck_item_bodies (756,998 samples, 2.97%)</title><rect x="14.0091%" y="101" width="2.9677%" height="15" fill="rgb(250,191,14)"/><text x="14.2591%" y="111.50">typ..</text></g><g><title>typeck (749,068 samples, 2.94%)</title><rect x="14.0402%" y="85" width="2.9366%" height="15" fill="rgb(239,60,40)"/><text x="14.2902%" y="95.50">ty..</text></g><g><title>item_types_checking (173,452 samples, 0.68%)</title><rect x="16.9768%" y="117" width="0.6800%" height="15" fill="rgb(206,27,48)"/><text x="17.2268%" y="127.50"></text></g><g><title>check_mod_item_types (169,432 samples, 0.66%)</title><rect x="16.9925%" y="101" width="0.6642%" height="15" fill="rgb(225,35,8)"/><text x="17.2425%" y="111.50"></text></g><g><title>fn_sig (31,881 samples, 0.12%)</title><rect x="18.0900%" y="85" width="0.1250%" height="15" fill="rgb(250,213,24)"/><text x="18.3400%" y="95.50"></text></g><g><title>is_late_bound_map (143,142 samples, 0.56%)</title><rect x="18.4108%" y="69" width="0.5612%" height="15" fill="rgb(247,123,22)"/><text x="18.6608%" y="79.50"></text></g><g><title>resolve_lifetimes (132,992 samples, 0.52%)</title><rect x="18.4506%" y="53" width="0.5214%" height="15" fill="rgb(231,138,38)"/><text x="18.7006%" y="63.50"></text></g><g><title>generics_of (217,603 samples, 0.85%)</title><rect x="18.2149%" y="85" width="0.8531%" height="15" fill="rgb(231,145,46)"/><text x="18.4649%" y="95.50"></text></g><g><title>explicit_predicates_of (107,750 samples, 0.42%)</title><rect x="19.2518%" y="53" width="0.4224%" height="15" fill="rgb(251,118,11)"/><text x="19.5018%" y="63.50"></text></g><g><title>trait_explicit_predicates_and_bounds (30,170 samples, 0.12%)</title><rect x="19.5559%" y="37" width="0.1183%" height="15" fill="rgb(217,147,25)"/><text x="19.8059%" y="47.50"></text></g><g><title>predicates_of (146,601 samples, 0.57%)</title><rect x="19.1342%" y="85" width="0.5747%" height="15" fill="rgb(247,81,37)"/><text x="19.3842%" y="95.50"></text></g><g><title>predicates_defined_on (130,370 samples, 0.51%)</title><rect x="19.1978%" y="69" width="0.5111%" height="15" fill="rgb(209,12,38)"/><text x="19.4478%" y="79.50"></text></g><g><title>super_predicates_of (59,641 samples, 0.23%)</title><rect x="19.7089%" y="85" width="0.2338%" height="15" fill="rgb(227,1,9)"/><text x="19.9589%" y="95.50"></text></g><g><title>super_predicates_that_define_assoc_type (52,561 samples, 0.21%)</title><rect x="19.7367%" y="69" width="0.2061%" height="15" fill="rgb(248,47,43)"/><text x="19.9867%" y="79.50"></text></g><g><title>type_collecting (622,917 samples, 2.44%)</title><rect x="17.6605%" y="117" width="2.4420%" height="15" fill="rgb(221,10,30)"/><text x="17.9105%" y="127.50">ty..</text></g><g><title>collect_mod_item_types (612,667 samples, 2.40%)</title><rect x="17.7007%" y="101" width="2.4018%" height="15" fill="rgb(210,229,1)"/><text x="17.9507%" y="111.50">co..</text></g><g><title>type_of (38,380 samples, 0.15%)</title><rect x="19.9521%" y="85" width="0.1505%" height="15" fill="rgb(222,148,37)"/><text x="20.2021%" y="95.50"></text></g><g><title>evaluate_obligation (94,462 samples, 0.37%)</title><rect x="21.1661%" y="85" width="0.3703%" height="15" fill="rgb(234,67,33)"/><text x="21.4161%" y="95.50"></text></g><g><title>implied_outlives_bounds (38,440 samples, 0.15%)</title><rect x="21.5364%" y="85" width="0.1507%" height="15" fill="rgb(247,98,35)"/><text x="21.7864%" y="95.50"></text></g><g><title>param_env (33,370 samples, 0.13%)</title><rect x="21.6871%" y="85" width="0.1308%" height="15" fill="rgb(247,138,52)"/><text x="21.9371%" y="95.50"></text></g><g><title>check_impl_item_well_formed (428,836 samples, 1.68%)</title><rect x="20.2194%" y="101" width="1.6812%" height="15" fill="rgb(213,79,30)"/><text x="20.4694%" y="111.50"></text></g><g><title>implied_outlives_bounds (27,510 samples, 0.11%)</title><rect x="23.7477%" y="85" width="0.1078%" height="15" fill="rgb(246,177,23)"/><text x="23.9977%" y="95.50"></text></g><g><title>param_env (274,262 samples, 1.08%)</title><rect x="23.8556%" y="85" width="1.0752%" height="15" fill="rgb(230,62,27)"/><text x="24.1056%" y="95.50"></text></g><g><title>check_item_well_formed (796,688 samples, 3.12%)</title><rect x="21.9006%" y="101" width="3.1232%" height="15" fill="rgb(216,154,8)"/><text x="22.1506%" y="111.50">che..</text></g><g><title>predicates_of (26,040 samples, 0.10%)</title><rect x="26.6091%" y="69" width="0.1021%" height="15" fill="rgb(244,35,45)"/><text x="26.8591%" y="79.50"></text></g><g><title>evaluate_obligation (275,613 samples, 1.08%)</title><rect x="25.8121%" y="85" width="1.0805%" height="15" fill="rgb(251,115,12)"/><text x="26.0621%" y="95.50"></text></g><g><title>trait_impls_of (46,281 samples, 0.18%)</title><rect x="26.7112%" y="69" width="0.1814%" height="15" fill="rgb(240,54,50)"/><text x="26.9612%" y="79.50"></text></g><g><title>implied_outlives_bounds (95,051 samples, 0.37%)</title><rect x="26.8926%" y="85" width="0.3726%" height="15" fill="rgb(233,84,52)"/><text x="27.1426%" y="95.50"></text></g><g><title>analysis (6,324,631 samples, 24.79%)</title><rect x="2.5217%" y="149" width="24.7944%" height="15" fill="rgb(207,117,47)"/><text x="2.7717%" y="159.50">analysis</text></g><g><title>type_check_crate (3,606,050 samples, 14.14%)</title><rect x="13.1793%" y="133" width="14.1368%" height="15" fill="rgb(249,43,39)"/><text x="13.4293%" y="143.50">type_check_crate</text></g><g><title>wf_checking (1,839,341 samples, 7.21%)</title><rect x="20.1054%" y="117" width="7.2108%" height="15" fill="rgb(209,38,44)"/><text x="20.3554%" y="127.50">wf_checking</text></g><g><title>check_trait_item_well_formed (584,717 samples, 2.29%)</title><rect x="25.0239%" y="101" width="2.2923%" height="15" fill="rgb(236,212,23)"/><text x="25.2739%" y="111.50">c..</text></g><g><title>native_libraries (50,200 samples, 0.20%)</title><rect x="29.4504%" y="133" width="0.1968%" height="15" fill="rgb(242,79,21)"/><text x="29.7004%" y="143.50"></text></g><g><title>metadata_decode_entry_native_libraries (38,950 samples, 0.15%)</title><rect x="29.4945%" y="117" width="0.1527%" height="15" fill="rgb(211,96,35)"/><text x="29.7445%" y="127.50"></text></g><g><title>codegen_crate (615,087 samples, 2.41%)</title><rect x="27.3602%" y="149" width="2.4113%" height="15" fill="rgb(253,215,40)"/><text x="27.6102%" y="159.50">co..</text></g><g><title>AST_validation (55,350 samples, 0.22%)</title><rect x="30.7261%" y="133" width="0.2170%" height="15" fill="rgb(211,81,21)"/><text x="30.9761%" y="143.50"></text></g><g><title>crate_injection (103,731 samples, 0.41%)</title><rect x="31.0199%" y="133" width="0.4067%" height="15" fill="rgb(208,190,38)"/><text x="31.2699%" y="143.50"></text></g><g><title>metadata_load_macro (44,740 samples, 0.18%)</title><rect x="64.8368%" y="101" width="0.1754%" height="15" fill="rgb(235,213,38)"/><text x="65.0868%" y="111.50"></text></g><g><title>macro_expand_crate (11,237,416 samples, 44.05%)</title><rect x="31.4265%" y="133" width="44.0540%" height="15" fill="rgb(237,122,38)"/><text x="31.6765%" y="143.50">macro_expand_crate</text></g><g><title>expand_crate (11,214,106 samples, 43.96%)</title><rect x="31.5179%" y="117" width="43.9626%" height="15" fill="rgb(244,218,35)"/><text x="31.7679%" y="127.50">expand_crate</text></g><g><title>metadata_register_crate (2,670,270 samples, 10.47%)</title><rect x="65.0122%" y="101" width="10.4682%" height="15" fill="rgb(240,68,47)"/><text x="65.2622%" y="111.50">metadata_regist..</text></g><g><title>metadata_register_crate (967,710 samples, 3.79%)</title><rect x="71.6868%" y="85" width="3.7937%" height="15" fill="rgb(210,16,53)"/><text x="71.9368%" y="95.50">meta..</text></g><g><title>metadata_register_crate (74,991 samples, 0.29%)</title><rect x="75.1865%" y="69" width="0.2940%" height="15" fill="rgb(235,124,12)"/><text x="75.4365%" y="79.50"></text></g><g><title>pre_AST_expansion_lint_checks (66,651 samples, 0.26%)</title><rect x="75.4972%" y="133" width="0.2613%" height="15" fill="rgb(224,169,11)"/><text x="75.7472%" y="143.50"></text></g><g><title>finalize_macro_resolutions (355,134 samples, 1.39%)</title><rect x="75.8355%" y="117" width="1.3922%" height="15" fill="rgb(250,166,2)"/><text x="76.0855%" y="127.50"></text></g><g><title>late_resolve_crate (412,334 samples, 1.62%)</title><rect x="77.2277%" y="117" width="1.6165%" height="15" fill="rgb(242,216,29)"/><text x="77.4777%" y="127.50"></text></g><g><title>configure_and_expand (12,554,911 samples, 49.22%)</title><rect x="29.7715%" y="149" width="49.2189%" height="15" fill="rgb(230,116,27)"/><text x="30.0215%" y="159.50">configure_and_expand</text></g><g><title>resolve_crate (824,400 samples, 3.23%)</title><rect x="75.7585%" y="133" width="3.2319%" height="15" fill="rgb(228,99,48)"/><text x="76.0085%" y="143.50">res..</text></g><g><title>drop_ast (25,600 samples, 0.10%)</title><rect x="78.9904%" y="149" width="0.1004%" height="15" fill="rgb(253,11,6)"/><text x="79.2404%" y="159.50"></text></g><g><title>early_lint_checks (74,471 samples, 0.29%)</title><rect x="79.1864%" y="149" width="0.2919%" height="15" fill="rgb(247,143,39)"/><text x="79.4364%" y="159.50"></text></g><g><title>free_global_ctxt (2,101,103 samples, 8.24%)</title><rect x="79.4783%" y="149" width="8.2369%" height="15" fill="rgb(236,97,10)"/><text x="79.7283%" y="159.50">free_global..</text></g><g><title>crate_hash (156,542 samples, 0.61%)</title><rect x="89.2213%" y="133" width="0.6137%" height="15" fill="rgb(233,208,19)"/><text x="89.4713%" y="143.50"></text></g><g><title>variances_of (35,881 samples, 0.14%)</title><rect x="90.2601%" y="133" width="0.1407%" height="15" fill="rgb(216,164,2)"/><text x="90.5101%" y="143.50"></text></g><g><title>crate_variances (30,861 samples, 0.12%)</title><rect x="90.2798%" y="117" width="0.1210%" height="15" fill="rgb(220,129,5)"/><text x="90.5298%" y="127.50"></text></g><g><title>generate_crate_metadata (685,387 samples, 2.69%)</title><rect x="87.7152%" y="149" width="2.6869%" height="15" fill="rgb(242,17,10)"/><text x="87.9652%" y="159.50">ge..</text></g><g><title>hir_lowering (361,134 samples, 1.42%)</title><rect x="90.4022%" y="149" width="1.4158%" height="15" fill="rgb(242,107,0)"/><text x="90.6522%" y="159.50"></text></g><g><title>finish_ongoing_codegen (25,540 samples, 0.10%)</title><rect x="91.8973%" y="133" width="0.1001%" height="15" fill="rgb(251,28,31)"/><text x="92.1473%" y="143.50"></text></g><g><title>link_crate (30,531 samples, 0.12%)</title><rect x="91.9975%" y="133" width="0.1197%" height="15" fill="rgb(233,223,10)"/><text x="92.2475%" y="143.50"></text></g><g><title>link (84,881 samples, 0.33%)</title><rect x="91.8179%" y="149" width="0.3328%" height="15" fill="rgb(215,21,27)"/><text x="92.0679%" y="159.50"></text></g><g><title>parse_crate (494,856 samples, 1.94%)</title><rect x="92.1507%" y="149" width="1.9400%" height="15" fill="rgb(232,23,21)"/><text x="92.4007%" y="159.50">p..</text></g><g><title>prepare_outputs (334,944 samples, 1.31%)</title><rect x="94.1222%" y="149" width="1.3131%" height="15" fill="rgb(244,5,23)"/><text x="94.3722%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (548,576 samples, 2.15%)</title><rect x="95.4353%" y="149" width="2.1506%" height="15" fill="rgb(226,81,46)"/><text x="95.6853%" y="159.50">s..</text></g><g><title>setup_global_ctxt (135,971 samples, 0.53%)</title><rect x="97.6575%" y="149" width="0.5330%" height="15" fill="rgb(247,70,30)"/><text x="97.9075%" y="159.50"></text></g><g><title>all (25,508,305 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (25,508,305 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="175.50">rustc</text></g><g><title>write_crate_metadata (461,555 samples, 1.81%)</title><rect x="98.1906%" y="149" width="1.8094%" height="15" fill="rgb(223,113,26)"/><text x="98.4406%" y="159.50">w..</text></g></svg></svg>