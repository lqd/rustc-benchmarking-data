<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (275,034 samples, 0.26%)</title><rect x="11.4639%" y="181" width="0.2588%" height="15" fill="rgb(227,0,7)"/><text x="11.7139%" y="191.50"></text></g><g><title>item_attrs (295,385 samples, 0.28%)</title><rect x="12.1906%" y="149" width="0.2779%" height="15" fill="rgb(217,0,24)"/><text x="12.4406%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (286,814 samples, 0.27%)</title><rect x="12.1987%" y="133" width="0.2698%" height="15" fill="rgb(221,193,54)"/><text x="12.4487%" y="143.50"></text></g><g><title>codegen_fn_attrs (410,455 samples, 0.39%)</title><rect x="12.1011%" y="165" width="0.3862%" height="15" fill="rgb(248,212,6)"/><text x="12.3511%" y="175.50"></text></g><g><title>is_copy_raw (123,661 samples, 0.12%)</title><rect x="14.8328%" y="149" width="0.1163%" height="15" fill="rgb(208,68,35)"/><text x="15.0828%" y="159.50"></text></g><g><title>adt_drop_tys (180,901 samples, 0.17%)</title><rect x="15.0063%" y="133" width="0.1702%" height="15" fill="rgb(232,128,0)"/><text x="15.2563%" y="143.50"></text></g><g><title>is_copy_raw (493,564 samples, 0.46%)</title><rect x="15.1765%" y="133" width="0.4644%" height="15" fill="rgb(207,160,47)"/><text x="15.4265%" y="143.50"></text></g><g><title>evaluate_obligation (413,523 samples, 0.39%)</title><rect x="15.2518%" y="117" width="0.3890%" height="15" fill="rgb(228,23,34)"/><text x="15.5018%" y="127.50"></text></g><g><title>needs_drop_raw (735,785 samples, 0.69%)</title><rect x="14.9519%" y="149" width="0.6922%" height="15" fill="rgb(218,30,26)"/><text x="15.2019%" y="159.50"></text></g><g><title>resolve_instance (296,532 samples, 0.28%)</title><rect x="15.6441%" y="149" width="0.2790%" height="15" fill="rgb(220,122,19)"/><text x="15.8941%" y="159.50"></text></g><g><title>thir_body (1,040,815 samples, 0.98%)</title><rect x="15.9409%" y="149" width="0.9792%" height="15" fill="rgb(250,228,42)"/><text x="16.1909%" y="159.50"></text></g><g><title>mir_const (6,526,623 samples, 6.14%)</title><rect x="10.7966%" y="197" width="6.1403%" height="15" fill="rgb(240,193,28)"/><text x="11.0466%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (5,542,274 samples, 5.21%)</title><rect x="11.7227%" y="181" width="5.2143%" height="15" fill="rgb(216,20,37)"/><text x="11.9727%" y="191.50">unsafe..</text></g><g><title>mir_built (4,729,624 samples, 4.45%)</title><rect x="12.4872%" y="165" width="4.4497%" height="15" fill="rgb(206,188,39)"/><text x="12.7372%" y="175.50">mir_b..</text></g><g><title>is_freeze_raw (116,212 samples, 0.11%)</title><rect x="17.0102%" y="181" width="0.1093%" height="15" fill="rgb(217,207,13)"/><text x="17.2602%" y="191.50"></text></g><g><title>evaluate_obligation (114,472 samples, 0.11%)</title><rect x="17.0119%" y="165" width="0.1077%" height="15" fill="rgb(231,73,38)"/><text x="17.2619%" y="175.50"></text></g><g><title>mir_promoted (7,497,776 samples, 7.05%)</title><rect x="10.0972%" y="213" width="7.0540%" height="15" fill="rgb(225,20,46)"/><text x="10.3472%" y="223.50">mir_promo..</text></g><g><title>mir_const_qualif (227,774 samples, 0.21%)</title><rect x="16.9369%" y="197" width="0.2143%" height="15" fill="rgb(210,31,41)"/><text x="17.1869%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (220,222 samples, 0.21%)</title><rect x="17.1512%" y="213" width="0.2072%" height="15" fill="rgb(221,200,47)"/><text x="17.4012%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (313,804 samples, 0.30%)</title><rect x="17.3584%" y="213" width="0.2952%" height="15" fill="rgb(226,26,5)"/><text x="17.6084%" y="223.50"></text></g><g><title>normalize_projection_ty (199,752 samples, 0.19%)</title><rect x="17.4657%" y="197" width="0.1879%" height="15" fill="rgb(249,33,26)"/><text x="17.7157%" y="207.50"></text></g><g><title>type_op_normalize_predicate (115,860 samples, 0.11%)</title><rect x="17.6537%" y="213" width="0.1090%" height="15" fill="rgb(235,183,28)"/><text x="17.9037%" y="223.50"></text></g><g><title>type_op_prove_predicate (924,699 samples, 0.87%)</title><rect x="17.7781%" y="213" width="0.8700%" height="15" fill="rgb(221,5,38)"/><text x="18.0281%" y="223.50"></text></g><g><title>MIR_borrow_checking (18,947,283 samples, 17.83%)</title><rect x="0.8273%" y="245" width="17.8259%" height="15" fill="rgb(247,18,42)"/><text x="1.0773%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,859,503 samples, 17.74%)</title><rect x="0.9099%" y="229" width="17.7433%" height="15" fill="rgb(241,131,45)"/><text x="1.1599%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (149,263 samples, 0.14%)</title><rect x="18.7416%" y="245" width="0.1404%" height="15" fill="rgb(249,31,29)"/><text x="18.9916%" y="255.50"></text></g><g><title>should_inherit_track_caller (163,123 samples, 0.15%)</title><rect x="19.2356%" y="197" width="0.1535%" height="15" fill="rgb(225,111,53)"/><text x="19.4856%" y="207.50"></text></g><g><title>codegen_fn_attrs (330,375 samples, 0.31%)</title><rect x="19.0934%" y="213" width="0.3108%" height="15" fill="rgb(238,160,17)"/><text x="19.3434%" y="223.50"></text></g><g><title>check_mod_attrs (536,055 samples, 0.50%)</title><rect x="18.9000%" y="229" width="0.5043%" height="15" fill="rgb(214,148,48)"/><text x="19.1500%" y="239.50"></text></g><g><title>lookup_deprecation_entry (111,821 samples, 0.11%)</title><rect x="19.6704%" y="213" width="0.1052%" height="15" fill="rgb(232,36,49)"/><text x="19.9204%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (334,814 samples, 0.31%)</title><rect x="19.5457%" y="229" width="0.3150%" height="15" fill="rgb(209,103,24)"/><text x="19.7957%" y="239.50"></text></g><g><title>misc_checking_1 (1,080,422 samples, 1.02%)</title><rect x="18.8826%" y="245" width="1.0165%" height="15" fill="rgb(229,88,8)"/><text x="19.1326%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (343,264 samples, 0.32%)</title><rect x="19.9006%" y="229" width="0.3229%" height="15" fill="rgb(213,181,19)"/><text x="20.1506%" y="239.50"></text></g><g><title>check_mod_liveness (260,333 samples, 0.24%)</title><rect x="19.9786%" y="213" width="0.2449%" height="15" fill="rgb(254,191,54)"/><text x="20.2286%" y="223.50"></text></g><g><title>misc_checking_2 (1,031,452 samples, 0.97%)</title><rect x="19.8991%" y="245" width="0.9704%" height="15" fill="rgb(241,83,37)"/><text x="20.1491%" y="255.50"></text></g><g><title>match_checking (686,528 samples, 0.65%)</title><rect x="20.2236%" y="229" width="0.6459%" height="15" fill="rgb(233,36,39)"/><text x="20.4736%" y="239.50"></text></g><g><title>check_match (663,918 samples, 0.62%)</title><rect x="20.2448%" y="213" width="0.6246%" height="15" fill="rgb(226,3,54)"/><text x="20.4948%" y="223.50"></text></g><g><title>check_private_in_public (136,172 samples, 0.13%)</title><rect x="20.8784%" y="229" width="0.1281%" height="15" fill="rgb(245,192,40)"/><text x="21.1284%" y="239.50"></text></g><g><title>death_checking (325,643 samples, 0.31%)</title><rect x="21.0065%" y="229" width="0.3064%" height="15" fill="rgb(238,167,29)"/><text x="21.2565%" y="239.50"></text></g><g><title>item_attrs (107,271 samples, 0.10%)</title><rect x="21.2120%" y="213" width="0.1009%" height="15" fill="rgb(232,182,51)"/><text x="21.4620%" y="223.50"></text></g><g><title>crate_lints (2,130,584 samples, 2.00%)</title><rect x="21.3145%" y="213" width="2.0045%" height="15" fill="rgb(231,60,39)"/><text x="21.5645%" y="223.50">c..</text></g><g><title>type_of (1,298,357 samples, 1.22%)</title><rect x="22.0975%" y="197" width="1.2215%" height="15" fill="rgb(208,69,12)"/><text x="22.3475%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (844,281 samples, 0.79%)</title><rect x="22.5247%" y="181" width="0.7943%" height="15" fill="rgb(235,93,37)"/><text x="22.7747%" y="191.50"></text></g><g><title>lint_checking (2,634,830 samples, 2.48%)</title><rect x="21.3129%" y="229" width="2.4789%" height="15" fill="rgb(213,116,39)"/><text x="21.5629%" y="239.50">li..</text></g><g><title>module_lints (502,506 samples, 0.47%)</title><rect x="23.3190%" y="213" width="0.4728%" height="15" fill="rgb(222,207,29)"/><text x="23.5690%" y="223.50"></text></g><g><title>lint_mod (498,516 samples, 0.47%)</title><rect x="23.3228%" y="197" width="0.4690%" height="15" fill="rgb(206,96,30)"/><text x="23.5728%" y="207.50"></text></g><g><title>layout_of (122,962 samples, 0.12%)</title><rect x="23.6761%" y="181" width="0.1157%" height="15" fill="rgb(218,138,4)"/><text x="23.9261%" y="191.50"></text></g><g><title>privacy_access_levels (231,913 samples, 0.22%)</title><rect x="23.7918%" y="229" width="0.2182%" height="15" fill="rgb(250,191,14)"/><text x="24.0418%" y="239.50"></text></g><g><title>privacy_checking_modules (622,727 samples, 0.59%)</title><rect x="24.0100%" y="229" width="0.5859%" height="15" fill="rgb(239,60,40)"/><text x="24.2600%" y="239.50"></text></g><g><title>check_mod_privacy (620,447 samples, 0.58%)</title><rect x="24.0121%" y="213" width="0.5837%" height="15" fill="rgb(206,27,48)"/><text x="24.2621%" y="223.50"></text></g><g><title>misc_checking_3 (3,979,145 samples, 3.74%)</title><rect x="20.8695%" y="245" width="3.7436%" height="15" fill="rgb(225,35,8)"/><text x="21.1195%" y="255.50">misc..</text></g><g><title>impl_parent (2,181,217 samples, 2.05%)</title><rect x="27.9685%" y="181" width="2.0521%" height="15" fill="rgb(250,213,24)"/><text x="28.2185%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,324,474 samples, 1.25%)</title><rect x="28.7746%" y="165" width="1.2461%" height="15" fill="rgb(247,123,22)"/><text x="29.0246%" y="175.50"></text></g><g><title>impl_trait_ref (4,949,183 samples, 4.66%)</title><rect x="30.0207%" y="181" width="4.6563%" height="15" fill="rgb(231,138,38)"/><text x="30.2707%" y="191.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,108,283 samples, 3.87%)</title><rect x="30.8118%" y="165" width="3.8651%" height="15" fill="rgb(231,145,46)"/><text x="31.0618%" y="175.50">meta..</text></g><g><title>coherent_trait (11,351,238 samples, 10.68%)</title><rect x="24.6727%" y="213" width="10.6794%" height="15" fill="rgb(251,118,11)"/><text x="24.9227%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (11,329,497 samples, 10.66%)</title><rect x="24.6931%" y="197" width="10.6590%" height="15" fill="rgb(217,147,25)"/><text x="24.9431%" y="207.50">specialization_g..</text></g><g><title>trait_impls_of (715,738 samples, 0.67%)</title><rect x="34.6787%" y="181" width="0.6734%" height="15" fill="rgb(247,81,37)"/><text x="34.9287%" y="191.50"></text></g><g><title>implementations_of_trait (174,733 samples, 0.16%)</title><rect x="35.1877%" y="165" width="0.1644%" height="15" fill="rgb(209,12,38)"/><text x="35.4377%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (141,473 samples, 0.13%)</title><rect x="35.2190%" y="149" width="0.1331%" height="15" fill="rgb(227,1,9)"/><text x="35.4690%" y="159.50"></text></g><g><title>coherence_checking (11,410,308 samples, 10.73%)</title><rect x="24.6568%" y="229" width="10.7350%" height="15" fill="rgb(248,47,43)"/><text x="24.9068%" y="239.50">coherence_checki..</text></g><g><title>associated_item (478,836 samples, 0.45%)</title><rect x="50.7958%" y="165" width="0.4505%" height="15" fill="rgb(221,10,30)"/><text x="51.0458%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (383,704 samples, 0.36%)</title><rect x="50.8853%" y="149" width="0.3610%" height="15" fill="rgb(210,229,1)"/><text x="51.1353%" y="159.50"></text></g><g><title>associated_items (661,249 samples, 0.62%)</title><rect x="50.6510%" y="181" width="0.6221%" height="15" fill="rgb(222,148,37)"/><text x="50.9010%" y="191.50"></text></g><g><title>adt_dtorck_constraint (200,932 samples, 0.19%)</title><rect x="51.4433%" y="165" width="0.1890%" height="15" fill="rgb(234,67,33)"/><text x="51.6933%" y="175.50"></text></g><g><title>dropck_outlives (330,582 samples, 0.31%)</title><rect x="51.3299%" y="181" width="0.3110%" height="15" fill="rgb(247,98,35)"/><text x="51.5799%" y="191.50"></text></g><g><title>mir_borrowck (130,521 samples, 0.12%)</title><rect x="51.8955%" y="101" width="0.1228%" height="15" fill="rgb(247,138,52)"/><text x="52.1455%" y="111.50"></text></g><g><title>mir_for_ctfe (255,433 samples, 0.24%)</title><rect x="51.7783%" y="133" width="0.2403%" height="15" fill="rgb(213,79,30)"/><text x="52.0283%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (211,812 samples, 0.20%)</title><rect x="51.8193%" y="117" width="0.1993%" height="15" fill="rgb(246,177,23)"/><text x="52.0693%" y="127.50"></text></g><g><title>eval_to_const_value_raw (166,082 samples, 0.16%)</title><rect x="52.0248%" y="117" width="0.1563%" height="15" fill="rgb(230,62,27)"/><text x="52.2748%" y="127.50"></text></g><g><title>eval_to_const_value_raw (164,452 samples, 0.15%)</title><rect x="52.0263%" y="101" width="0.1547%" height="15" fill="rgb(216,154,8)"/><text x="52.2763%" y="111.50"></text></g><g><title>eval_to_allocation_raw (160,002 samples, 0.15%)</title><rect x="52.0305%" y="85" width="0.1505%" height="15" fill="rgb(244,35,45)"/><text x="52.2805%" y="95.50"></text></g><g><title>eval_to_const_value_raw (575,377 samples, 0.54%)</title><rect x="51.6409%" y="181" width="0.5413%" height="15" fill="rgb(251,115,12)"/><text x="51.8909%" y="191.50"></text></g><g><title>eval_to_const_value_raw (573,557 samples, 0.54%)</title><rect x="51.6427%" y="165" width="0.5396%" height="15" fill="rgb(240,54,50)"/><text x="51.8927%" y="175.50"></text></g><g><title>eval_to_allocation_raw (571,737 samples, 0.54%)</title><rect x="51.6444%" y="149" width="0.5379%" height="15" fill="rgb(233,84,52)"/><text x="51.8944%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (173,492 samples, 0.16%)</title><rect x="52.0190%" y="133" width="0.1632%" height="15" fill="rgb(207,117,47)"/><text x="52.2690%" y="143.50"></text></g><g><title>adt_def (470,855 samples, 0.44%)</title><rect x="53.0000%" y="149" width="0.4430%" height="15" fill="rgb(249,43,39)"/><text x="53.2500%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (468,995 samples, 0.44%)</title><rect x="53.0017%" y="133" width="0.4412%" height="15" fill="rgb(209,38,44)"/><text x="53.2517%" y="143.50"></text></g><g><title>item_attrs (445,995 samples, 0.42%)</title><rect x="53.0233%" y="117" width="0.4196%" height="15" fill="rgb(236,212,23)"/><text x="53.2733%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (443,775 samples, 0.42%)</title><rect x="53.0254%" y="101" width="0.4175%" height="15" fill="rgb(242,79,21)"/><text x="53.2754%" y="111.50"></text></g><g><title>adt_sized_constraint (564,177 samples, 0.53%)</title><rect x="52.9902%" y="165" width="0.5308%" height="15" fill="rgb(211,96,35)"/><text x="53.2402%" y="175.50"></text></g><g><title>generics_of (182,491 samples, 0.17%)</title><rect x="53.5210%" y="165" width="0.1717%" height="15" fill="rgb(253,215,40)"/><text x="53.7710%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (149,191 samples, 0.14%)</title><rect x="53.5523%" y="149" width="0.1404%" height="15" fill="rgb(211,81,21)"/><text x="53.8023%" y="159.50"></text></g><g><title>impl_trait_ref (176,030 samples, 0.17%)</title><rect x="53.7260%" y="165" width="0.1656%" height="15" fill="rgb(208,190,38)"/><text x="53.9760%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (148,910 samples, 0.14%)</title><rect x="53.7515%" y="149" width="0.1401%" height="15" fill="rgb(235,213,38)"/><text x="54.0015%" y="159.50"></text></g><g><title>predicates_of (197,634 samples, 0.19%)</title><rect x="53.9016%" y="165" width="0.1859%" height="15" fill="rgb(237,122,38)"/><text x="54.1516%" y="175.50"></text></g><g><title>predicates_defined_on (120,954 samples, 0.11%)</title><rect x="53.9737%" y="149" width="0.1138%" height="15" fill="rgb(244,218,35)"/><text x="54.2237%" y="159.50"></text></g><g><title>specializes (247,114 samples, 0.23%)</title><rect x="54.0875%" y="165" width="0.2325%" height="15" fill="rgb(240,68,47)"/><text x="54.3375%" y="175.50"></text></g><g><title>param_env (138,263 samples, 0.13%)</title><rect x="54.1899%" y="149" width="0.1301%" height="15" fill="rgb(210,16,53)"/><text x="54.4399%" y="159.50"></text></g><g><title>trait_impls_of (232,884 samples, 0.22%)</title><rect x="54.3264%" y="165" width="0.2191%" height="15" fill="rgb(235,124,12)"/><text x="54.5764%" y="175.50"></text></g><g><title>evaluate_obligation (2,512,648 samples, 2.36%)</title><rect x="52.1823%" y="181" width="2.3639%" height="15" fill="rgb(224,169,11)"/><text x="52.4323%" y="191.50">ev..</text></g><g><title>fn_sig (115,551 samples, 0.11%)</title><rect x="54.5648%" y="181" width="0.1087%" height="15" fill="rgb(250,166,2)"/><text x="54.8148%" y="191.50"></text></g><g><title>item_attrs (202,524 samples, 0.19%)</title><rect x="54.8943%" y="181" width="0.1905%" height="15" fill="rgb(242,216,29)"/><text x="55.1443%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (194,913 samples, 0.18%)</title><rect x="54.9015%" y="165" width="0.1834%" height="15" fill="rgb(230,116,27)"/><text x="55.1515%" y="175.50"></text></g><g><title>evaluate_obligation (151,871 samples, 0.14%)</title><rect x="55.2771%" y="165" width="0.1429%" height="15" fill="rgb(228,99,48)"/><text x="55.5271%" y="175.50"></text></g><g><title>method_autoderef_steps (305,002 samples, 0.29%)</title><rect x="55.1479%" y="181" width="0.2870%" height="15" fill="rgb(253,11,6)"/><text x="55.3979%" y="191.50"></text></g><g><title>object_safety_violations (130,802 samples, 0.12%)</title><rect x="55.4348%" y="181" width="0.1231%" height="15" fill="rgb(247,143,39)"/><text x="55.6848%" y="191.50"></text></g><g><title>explicit_predicates_of (106,991 samples, 0.10%)</title><rect x="55.7805%" y="149" width="0.1007%" height="15" fill="rgb(236,97,10)"/><text x="56.0305%" y="159.50"></text></g><g><title>predicates_of (337,344 samples, 0.32%)</title><rect x="55.6103%" y="181" width="0.3174%" height="15" fill="rgb(233,208,19)"/><text x="55.8603%" y="191.50"></text></g><g><title>predicates_defined_on (227,001 samples, 0.21%)</title><rect x="55.7141%" y="165" width="0.2136%" height="15" fill="rgb(216,164,2)"/><text x="55.9641%" y="175.50"></text></g><g><title>type_of (107,350 samples, 0.10%)</title><rect x="55.9553%" y="181" width="0.1010%" height="15" fill="rgb(220,129,5)"/><text x="56.2053%" y="191.50"></text></g><g><title>evaluate_obligation (156,853 samples, 0.15%)</title><rect x="58.1513%" y="165" width="0.1476%" height="15" fill="rgb(242,17,10)"/><text x="58.4013%" y="175.50"></text></g><g><title>typeck (2,555,509 samples, 2.40%)</title><rect x="56.0563%" y="181" width="2.4043%" height="15" fill="rgb(242,107,0)"/><text x="56.3063%" y="191.50">ty..</text></g><g><title>item_bodies_checking (24,574,477 samples, 23.12%)</title><rect x="35.4085%" y="229" width="23.1200%" height="15" fill="rgb(251,28,31)"/><text x="35.6585%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (24,570,727 samples, 23.12%)</title><rect x="35.4121%" y="213" width="23.1165%" height="15" fill="rgb(233,223,10)"/><text x="35.6621%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (24,512,707 samples, 23.06%)</title><rect x="35.4667%" y="197" width="23.0619%" height="15" fill="rgb(215,21,27)"/><text x="35.7167%" y="207.50">typeck</text></g><g><title>impl_trait_ref (245,014 samples, 0.23%)</title><rect x="59.0788%" y="149" width="0.2305%" height="15" fill="rgb(232,23,21)"/><text x="59.3288%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (224,644 samples, 0.21%)</title><rect x="59.0980%" y="133" width="0.2113%" height="15" fill="rgb(244,5,23)"/><text x="59.3480%" y="143.50"></text></g><g><title>adt_destructor (432,685 samples, 0.41%)</title><rect x="58.9412%" y="197" width="0.4071%" height="15" fill="rgb(226,81,46)"/><text x="59.1912%" y="207.50"></text></g><g><title>coherent_trait (427,515 samples, 0.40%)</title><rect x="58.9461%" y="181" width="0.4022%" height="15" fill="rgb(247,70,30)"/><text x="59.1961%" y="191.50"></text></g><g><title>specialization_graph_of (425,525 samples, 0.40%)</title><rect x="58.9479%" y="165" width="0.4003%" height="15" fill="rgb(212,68,19)"/><text x="59.1979%" y="175.50"></text></g><g><title>adt_drop_tys (146,512 samples, 0.14%)</title><rect x="60.7826%" y="85" width="0.1378%" height="15" fill="rgb(240,187,13)"/><text x="61.0326%" y="95.50"></text></g><g><title>is_copy_raw (260,862 samples, 0.25%)</title><rect x="60.9204%" y="85" width="0.2454%" height="15" fill="rgb(223,113,26)"/><text x="61.1704%" y="95.50"></text></g><g><title>evaluate_obligation (249,732 samples, 0.23%)</title><rect x="60.9309%" y="69" width="0.2350%" height="15" fill="rgb(206,192,2)"/><text x="61.1809%" y="79.50"></text></g><g><title>trait_impls_of (127,631 samples, 0.12%)</title><rect x="61.0458%" y="53" width="0.1201%" height="15" fill="rgb(241,108,4)"/><text x="61.2958%" y="63.50"></text></g><g><title>needs_drop_raw (440,824 samples, 0.41%)</title><rect x="60.7670%" y="101" width="0.4147%" height="15" fill="rgb(247,173,49)"/><text x="61.0170%" y="111.50"></text></g><g><title>resolve_instance (183,852 samples, 0.17%)</title><rect x="61.1817%" y="101" width="0.1730%" height="15" fill="rgb(224,114,35)"/><text x="61.4317%" y="111.50"></text></g><g><title>associated_item (188,333 samples, 0.18%)</title><rect x="62.4932%" y="69" width="0.1772%" height="15" fill="rgb(245,159,27)"/><text x="62.7432%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (150,543 samples, 0.14%)</title><rect x="62.5287%" y="53" width="0.1416%" height="15" fill="rgb(245,172,44)"/><text x="62.7787%" y="63.50"></text></g><g><title>associated_items (272,315 samples, 0.26%)</title><rect x="62.4282%" y="85" width="0.2562%" height="15" fill="rgb(236,23,11)"/><text x="62.6782%" y="95.50"></text></g><g><title>adt_dtorck_constraint (111,821 samples, 0.11%)</title><rect x="62.8078%" y="37" width="0.1052%" height="15" fill="rgb(205,117,38)"/><text x="63.0578%" y="47.50"></text></g><g><title>adt_dtorck_constraint (133,631 samples, 0.13%)</title><rect x="62.7924%" y="53" width="0.1257%" height="15" fill="rgb(237,72,25)"/><text x="63.0424%" y="63.50"></text></g><g><title>adt_dtorck_constraint (188,963 samples, 0.18%)</title><rect x="62.7502%" y="69" width="0.1778%" height="15" fill="rgb(244,70,9)"/><text x="63.0002%" y="79.50"></text></g><g><title>dropck_outlives (297,683 samples, 0.28%)</title><rect x="62.6946%" y="85" width="0.2801%" height="15" fill="rgb(217,125,39)"/><text x="62.9446%" y="95.50"></text></g><g><title>evaluate_obligation (438,035 samples, 0.41%)</title><rect x="62.9747%" y="85" width="0.4121%" height="15" fill="rgb(235,36,10)"/><text x="63.2247%" y="95.50"></text></g><g><title>trait_impls_of (113,101 samples, 0.11%)</title><rect x="63.2804%" y="69" width="0.1064%" height="15" fill="rgb(251,123,47)"/><text x="63.5304%" y="79.50"></text></g><g><title>evaluate_obligation (274,384 samples, 0.26%)</title><rect x="63.6076%" y="69" width="0.2581%" height="15" fill="rgb(221,13,13)"/><text x="63.8576%" y="79.50"></text></g><g><title>trait_impls_of (233,203 samples, 0.22%)</title><rect x="63.6463%" y="53" width="0.2194%" height="15" fill="rgb(238,131,9)"/><text x="63.8963%" y="63.50"></text></g><g><title>implementations_of_trait (222,313 samples, 0.21%)</title><rect x="63.6565%" y="37" width="0.2092%" height="15" fill="rgb(211,50,8)"/><text x="63.9065%" y="47.50"></text></g><g><title>method_autoderef_steps (339,654 samples, 0.32%)</title><rect x="63.5559%" y="85" width="0.3196%" height="15" fill="rgb(245,182,24)"/><text x="63.8059%" y="95.50"></text></g><g><title>predicates_of (127,922 samples, 0.12%)</title><rect x="63.8807%" y="85" width="0.1204%" height="15" fill="rgb(242,14,37)"/><text x="64.1307%" y="95.50"></text></g><g><title>mir_const (4,001,744 samples, 3.76%)</title><rect x="60.3110%" y="149" width="3.7649%" height="15" fill="rgb(246,228,12)"/><text x="60.5610%" y="159.50">mir_..</text></g><g><title>unsafety_check_result (3,841,292 samples, 3.61%)</title><rect x="60.4620%" y="133" width="3.6139%" height="15" fill="rgb(213,55,15)"/><text x="60.7120%" y="143.50">unsa..</text></g><g><title>mir_built (3,700,091 samples, 3.48%)</title><rect x="60.5948%" y="117" width="3.4811%" height="15" fill="rgb(209,9,3)"/><text x="60.8448%" y="127.50">mir..</text></g><g><title>typeck (2,807,542 samples, 2.64%)</title><rect x="61.4346%" y="101" width="2.6414%" height="15" fill="rgb(230,59,30)"/><text x="61.6846%" y="111.50">ty..</text></g><g><title>mir_promoted (4,125,465 samples, 3.88%)</title><rect x="60.2007%" y="165" width="3.8813%" height="15" fill="rgb(209,121,21)"/><text x="60.4507%" y="175.50">mir_..</text></g><g><title>type_op_prove_predicate (124,594 samples, 0.12%)</title><rect x="64.1477%" y="165" width="0.1172%" height="15" fill="rgb(220,109,13)"/><text x="64.3977%" y="175.50"></text></g><g><title>type_of (5,114,308 samples, 4.81%)</title><rect x="59.4596%" y="197" width="4.8116%" height="15" fill="rgb(232,18,1)"/><text x="59.7096%" y="207.50">type_of</text></g><g><title>mir_borrowck (5,103,058 samples, 4.80%)</title><rect x="59.4701%" y="181" width="4.8010%" height="15" fill="rgb(215,41,42)"/><text x="59.7201%" y="191.50">mir_bo..</text></g><g><title>item_types_checking (6,135,889 samples, 5.77%)</title><rect x="58.5286%" y="229" width="5.7727%" height="15" fill="rgb(224,123,36)"/><text x="58.7786%" y="239.50">item_ty..</text></g><g><title>check_mod_item_types (6,130,289 samples, 5.77%)</title><rect x="58.5338%" y="213" width="5.7675%" height="15" fill="rgb(240,125,3)"/><text x="58.7838%" y="223.50">check_m..</text></g><g><title>late_bound_vars_map (237,233 samples, 0.22%)</title><rect x="64.6607%" y="181" width="0.2232%" height="15" fill="rgb(205,98,50)"/><text x="64.9107%" y="191.50"></text></g><g><title>resolve_lifetimes (213,263 samples, 0.20%)</title><rect x="64.6833%" y="165" width="0.2006%" height="15" fill="rgb(205,185,37)"/><text x="64.9333%" y="175.50"></text></g><g><title>fn_sig (433,335 samples, 0.41%)</title><rect x="64.5052%" y="197" width="0.4077%" height="15" fill="rgb(238,207,15)"/><text x="64.7552%" y="207.50"></text></g><g><title>named_region_map (274,184 samples, 0.26%)</title><rect x="64.9772%" y="181" width="0.2580%" height="15" fill="rgb(213,199,42)"/><text x="65.2272%" y="191.50"></text></g><g><title>resolve_lifetimes (263,953 samples, 0.25%)</title><rect x="64.9869%" y="165" width="0.2483%" height="15" fill="rgb(235,201,11)"/><text x="65.2369%" y="175.50"></text></g><g><title>lint_levels (144,942 samples, 0.14%)</title><rect x="65.0988%" y="149" width="0.1364%" height="15" fill="rgb(207,46,11)"/><text x="65.3488%" y="159.50"></text></g><g><title>generics_of (358,904 samples, 0.34%)</title><rect x="64.9129%" y="197" width="0.3377%" height="15" fill="rgb(241,35,35)"/><text x="65.1629%" y="207.50"></text></g><g><title>predicates_of (364,273 samples, 0.34%)</title><rect x="65.2859%" y="197" width="0.3427%" height="15" fill="rgb(243,32,47)"/><text x="65.5359%" y="207.50"></text></g><g><title>predicates_defined_on (324,633 samples, 0.31%)</title><rect x="65.3232%" y="181" width="0.3054%" height="15" fill="rgb(247,202,23)"/><text x="65.5732%" y="191.50"></text></g><g><title>inferred_outlives_of (190,902 samples, 0.18%)</title><rect x="65.4490%" y="165" width="0.1796%" height="15" fill="rgb(219,102,11)"/><text x="65.6990%" y="175.50"></text></g><g><title>inferred_outlives_crate (171,802 samples, 0.16%)</title><rect x="65.4670%" y="149" width="0.1616%" height="15" fill="rgb(243,110,44)"/><text x="65.7170%" y="159.50"></text></g><g><title>type_collecting (1,493,117 samples, 1.40%)</title><rect x="64.3026%" y="229" width="1.4047%" height="15" fill="rgb(222,74,54)"/><text x="64.5526%" y="239.50"></text></g><g><title>collect_mod_item_types (1,484,137 samples, 1.40%)</title><rect x="64.3110%" y="213" width="1.3963%" height="15" fill="rgb(216,99,12)"/><text x="64.5610%" y="223.50"></text></g><g><title>evaluate_obligation (164,952 samples, 0.16%)</title><rect x="66.2728%" y="197" width="0.1552%" height="15" fill="rgb(226,22,26)"/><text x="66.5228%" y="207.50"></text></g><g><title>check_impl_item_well_formed (974,251 samples, 0.92%)</title><rect x="65.8120%" y="213" width="0.9166%" height="15" fill="rgb(217,163,10)"/><text x="66.0620%" y="223.50"></text></g><g><title>region_scope_tree (201,091 samples, 0.19%)</title><rect x="66.5394%" y="197" width="0.1892%" height="15" fill="rgb(213,25,53)"/><text x="66.7894%" y="207.50"></text></g><g><title>evaluate_obligation (407,096 samples, 0.38%)</title><rect x="67.3917%" y="197" width="0.3830%" height="15" fill="rgb(252,105,26)"/><text x="67.6417%" y="207.50"></text></g><g><title>adt_sized_constraint (189,073 samples, 0.18%)</title><rect x="67.5968%" y="181" width="0.1779%" height="15" fill="rgb(220,39,43)"/><text x="67.8468%" y="191.50"></text></g><g><title>param_env (246,387 samples, 0.23%)</title><rect x="67.8591%" y="197" width="0.2318%" height="15" fill="rgb(229,68,48)"/><text x="68.1091%" y="207.50"></text></g><g><title>region_scope_tree (183,660 samples, 0.17%)</title><rect x="68.1394%" y="197" width="0.1728%" height="15" fill="rgb(252,8,32)"/><text x="68.3894%" y="207.50"></text></g><g><title>analysis (72,023,651 samples, 67.76%)</title><rect x="0.5751%" y="261" width="67.7609%" height="15" fill="rgb(223,20,43)"/><text x="0.8251%" y="271.50">analysis</text></g><g><title>type_check_crate (46,473,463 samples, 43.72%)</title><rect x="24.6131%" y="245" width="43.7229%" height="15" fill="rgb(229,81,49)"/><text x="24.8631%" y="255.50">type_check_crate</text></g><g><title>wf_checking (2,789,082 samples, 2.62%)</title><rect x="65.7120%" y="229" width="2.6240%" height="15" fill="rgb(236,28,36)"/><text x="65.9620%" y="239.50">wf..</text></g><g><title>check_item_well_formed (1,708,571 samples, 1.61%)</title><rect x="66.7286%" y="213" width="1.6074%" height="15" fill="rgb(249,185,26)"/><text x="66.9786%" y="223.50"></text></g><g><title>codegen_crate (379,505 samples, 0.36%)</title><rect x="68.3471%" y="261" width="0.3570%" height="15" fill="rgb(249,174,33)"/><text x="68.5971%" y="271.50"></text></g><g><title>AST_validation (160,382 samples, 0.15%)</title><rect x="68.9142%" y="245" width="0.1509%" height="15" fill="rgb(233,201,37)"/><text x="69.1642%" y="255.50"></text></g><g><title>metadata_load_macro (196,613 samples, 0.18%)</title><rect x="85.1628%" y="213" width="0.1850%" height="15" fill="rgb(221,78,26)"/><text x="85.4128%" y="223.50"></text></g><g><title>metadata_register_crate (2,673,440 samples, 2.52%)</title><rect x="85.3478%" y="213" width="2.5152%" height="15" fill="rgb(250,127,30)"/><text x="85.5978%" y="223.50">me..</text></g><g><title>metadata_register_crate (988,981 samples, 0.93%)</title><rect x="86.9325%" y="197" width="0.9304%" height="15" fill="rgb(230,49,44)"/><text x="87.1825%" y="207.50"></text></g><g><title>macro_expand_crate (20,044,266 samples, 18.86%)</title><rect x="69.2073%" y="245" width="18.8579%" height="15" fill="rgb(229,67,23)"/><text x="69.4573%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (20,030,166 samples, 18.84%)</title><rect x="69.2206%" y="229" width="18.8447%" height="15" fill="rgb(249,83,47)"/><text x="69.4706%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (214,992 samples, 0.20%)</title><rect x="87.8630%" y="213" width="0.2023%" height="15" fill="rgb(215,43,3)"/><text x="88.1130%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (171,172 samples, 0.16%)</title><rect x="88.0689%" y="245" width="0.1610%" height="15" fill="rgb(238,154,13)"/><text x="88.3189%" y="255.50"></text></g><g><title>finalize_macro_resolutions (131,922 samples, 0.12%)</title><rect x="88.2564%" y="229" width="0.1241%" height="15" fill="rgb(219,56,2)"/><text x="88.5064%" y="239.50"></text></g><g><title>late_resolve_crate (1,824,720 samples, 1.72%)</title><rect x="88.3805%" y="229" width="1.7167%" height="15" fill="rgb(233,0,4)"/><text x="88.6305%" y="239.50"></text></g><g><title>configure_and_expand (22,822,398 samples, 21.47%)</title><rect x="68.7041%" y="261" width="21.4717%" height="15" fill="rgb(235,30,7)"/><text x="68.9541%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (2,068,213 samples, 1.95%)</title><rect x="88.2300%" y="245" width="1.9458%" height="15" fill="rgb(250,79,13)"/><text x="88.4800%" y="255.50">r..</text></g><g><title>drop_ast (144,902 samples, 0.14%)</title><rect x="90.1758%" y="261" width="0.1363%" height="15" fill="rgb(211,146,34)"/><text x="90.4258%" y="271.50"></text></g><g><title>early_lint_checks (335,684 samples, 0.32%)</title><rect x="90.3259%" y="261" width="0.3158%" height="15" fill="rgb(228,22,38)"/><text x="90.5759%" y="271.50"></text></g><g><title>free_global_ctxt (3,691,272 samples, 3.47%)</title><rect x="90.6417%" y="261" width="3.4728%" height="15" fill="rgb(235,168,5)"/><text x="90.8917%" y="271.50">fre..</text></g><g><title>generate_crate_metadata (976,661 samples, 0.92%)</title><rect x="94.1145%" y="261" width="0.9189%" height="15" fill="rgb(221,155,16)"/><text x="94.3645%" y="271.50"></text></g><g><title>hir_lowering (2,223,995 samples, 2.09%)</title><rect x="95.0333%" y="261" width="2.0924%" height="15" fill="rgb(215,215,53)"/><text x="95.2833%" y="271.50">h..</text></g><g><title>parse_crate (1,585,127 samples, 1.49%)</title><rect x="97.1740%" y="261" width="1.4913%" height="15" fill="rgb(223,4,10)"/><text x="97.4240%" y="271.50"></text></g><g><title>prepare_outputs (183,592 samples, 0.17%)</title><rect x="98.6740%" y="261" width="0.1727%" height="15" fill="rgb(234,103,6)"/><text x="98.9240%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (834,329 samples, 0.78%)</title><rect x="98.8468%" y="261" width="0.7849%" height="15" fill="rgb(227,97,0)"/><text x="99.0968%" y="271.50"></text></g><g><title>all (106,290,827 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (106,290,827 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (298,343 samples, 0.28%)</title><rect x="99.7193%" y="261" width="0.2807%" height="15" fill="rgb(222,22,37)"/><text x="99.9693%" y="271.50"></text></g></svg></svg>