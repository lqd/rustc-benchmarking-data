<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_promoted (1,542,220 samples, 0.30%)</title><rect x="12.8981%" y="133" width="0.3037%" height="15" fill="rgb(227,0,7)"/><text x="13.1481%" y="143.50"></text></g><g><title>mir_const_qualif_const_arg (1,297,048 samples, 0.26%)</title><rect x="12.9464%" y="117" width="0.2554%" height="15" fill="rgb(217,0,24)"/><text x="13.1964%" y="127.50"></text></g><g><title>mir_const (1,091,477 samples, 0.21%)</title><rect x="12.9869%" y="101" width="0.2149%" height="15" fill="rgb(221,193,54)"/><text x="13.2369%" y="111.50"></text></g><g><title>unsafety_check_result_for_const_arg (743,392 samples, 0.15%)</title><rect x="13.0555%" y="85" width="0.1464%" height="15" fill="rgb(248,212,6)"/><text x="13.3055%" y="95.50"></text></g><g><title>mir_built (643,139 samples, 0.13%)</title><rect x="13.0752%" y="69" width="0.1267%" height="15" fill="rgb(208,68,35)"/><text x="13.3252%" y="79.50"></text></g><g><title>mir_borrowck_const_arg (3,834,267 samples, 0.76%)</title><rect x="12.4489%" y="149" width="0.7551%" height="15" fill="rgb(232,128,0)"/><text x="12.6989%" y="159.50"></text></g><g><title>param_env (814,095 samples, 0.16%)</title><rect x="14.9002%" y="117" width="0.1603%" height="15" fill="rgb(207,160,47)"/><text x="15.1502%" y="127.50"></text></g><g><title>item_attrs (688,616 samples, 0.14%)</title><rect x="15.5272%" y="85" width="0.1356%" height="15" fill="rgb(228,23,34)"/><text x="15.7772%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (662,915 samples, 0.13%)</title><rect x="15.5322%" y="69" width="0.1305%" height="15" fill="rgb(218,30,26)"/><text x="15.7822%" y="79.50"></text></g><g><title>codegen_fn_attrs (988,449 samples, 0.19%)</title><rect x="15.4776%" y="101" width="0.1947%" height="15" fill="rgb(220,122,19)"/><text x="15.7276%" y="111.50"></text></g><g><title>is_copy_raw (1,327,411 samples, 0.26%)</title><rect x="19.0190%" y="69" width="0.2614%" height="15" fill="rgb(250,228,42)"/><text x="19.2690%" y="79.50"></text></g><g><title>evaluate_obligation (1,078,551 samples, 0.21%)</title><rect x="19.0680%" y="53" width="0.2124%" height="15" fill="rgb(240,193,28)"/><text x="19.3180%" y="63.50"></text></g><g><title>needs_drop_raw (2,028,150 samples, 0.40%)</title><rect x="18.8939%" y="85" width="0.3994%" height="15" fill="rgb(216,20,37)"/><text x="19.1439%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (649,887 samples, 0.13%)</title><rect x="19.4206%" y="69" width="0.1280%" height="15" fill="rgb(206,188,39)"/><text x="19.6706%" y="79.50"></text></g><g><title>specialization_graph_of (1,496,827 samples, 0.29%)</title><rect x="19.5750%" y="69" width="0.2948%" height="15" fill="rgb(217,207,13)"/><text x="19.8250%" y="79.50"></text></g><g><title>impl_trait_ref (616,667 samples, 0.12%)</title><rect x="19.7483%" y="53" width="0.1214%" height="15" fill="rgb(231,73,38)"/><text x="19.9983%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (530,086 samples, 0.10%)</title><rect x="19.7654%" y="37" width="0.1044%" height="15" fill="rgb(225,20,46)"/><text x="20.0154%" y="47.50"></text></g><g><title>resolve_instance (3,141,602 samples, 0.62%)</title><rect x="19.2989%" y="85" width="0.6187%" height="15" fill="rgb(210,31,41)"/><text x="19.5489%" y="95.50"></text></g><g><title>thir_body (6,855,218 samples, 1.35%)</title><rect x="19.9375%" y="85" width="1.3500%" height="15" fill="rgb(221,200,47)"/><text x="20.1875%" y="95.50"></text></g><g><title>mir_const (36,652,305 samples, 7.22%)</title><rect x="14.0814%" y="133" width="7.2181%" height="15" fill="rgb(226,26,5)"/><text x="14.3314%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (31,680,901 samples, 6.24%)</title><rect x="15.0605%" y="117" width="6.2390%" height="15" fill="rgb(249,33,26)"/><text x="15.3105%" y="127.50">unsafety..</text></g><g><title>mir_built (28,574,358 samples, 5.63%)</title><rect x="15.6723%" y="101" width="5.6272%" height="15" fill="rgb(235,183,28)"/><text x="15.9223%" y="111.50">mir_bui..</text></g><g><title>thir_body (798,548 samples, 0.16%)</title><rect x="22.1364%" y="69" width="0.1573%" height="15" fill="rgb(221,5,38)"/><text x="22.3864%" y="79.50"></text></g><g><title>mir_const (3,716,523 samples, 0.73%)</title><rect x="21.5661%" y="117" width="0.7319%" height="15" fill="rgb(247,18,42)"/><text x="21.8161%" y="127.50"></text></g><g><title>unsafety_check_result (2,996,517 samples, 0.59%)</title><rect x="21.7079%" y="101" width="0.5901%" height="15" fill="rgb(241,131,45)"/><text x="21.9579%" y="111.50"></text></g><g><title>mir_built (2,675,114 samples, 0.53%)</title><rect x="21.7712%" y="85" width="0.5268%" height="15" fill="rgb(249,31,29)"/><text x="22.0212%" y="95.50"></text></g><g><title>mir_const_qualif (5,114,461 samples, 1.01%)</title><rect x="21.2995%" y="133" width="1.0072%" height="15" fill="rgb(225,111,53)"/><text x="21.5495%" y="143.50"></text></g><g><title>mir_promoted (46,223,210 samples, 9.10%)</title><rect x="13.2040%" y="149" width="9.1029%" height="15" fill="rgb(238,160,17)"/><text x="13.4540%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,059,487 samples, 0.21%)</title><rect x="22.3082%" y="149" width="0.2086%" height="15" fill="rgb(214,148,48)"/><text x="22.5582%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,601,152 samples, 0.32%)</title><rect x="22.5169%" y="149" width="0.3153%" height="15" fill="rgb(232,36,49)"/><text x="22.7669%" y="159.50"></text></g><g><title>normalize_projection_ty (1,003,898 samples, 0.20%)</title><rect x="22.6345%" y="133" width="0.1977%" height="15" fill="rgb(209,103,24)"/><text x="22.8845%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,834,499 samples, 0.76%)</title><rect x="22.8946%" y="149" width="0.7551%" height="15" fill="rgb(229,88,8)"/><text x="23.1446%" y="159.50"></text></g><g><title>MIR_borrow_checking (117,660,193 samples, 23.17%)</title><rect x="0.4829%" y="181" width="23.1712%" height="15" fill="rgb(213,181,19)"/><text x="0.7329%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (116,918,122 samples, 23.03%)</title><rect x="0.6290%" y="165" width="23.0251%" height="15" fill="rgb(254,191,54)"/><text x="0.8790%" y="175.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (589,748 samples, 0.12%)</title><rect x="24.0940%" y="149" width="0.1161%" height="15" fill="rgb(241,83,37)"/><text x="24.3440%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,477,309 samples, 0.49%)</title><rect x="23.7272%" y="165" width="0.4879%" height="15" fill="rgb(233,36,39)"/><text x="23.9772%" y="175.50"></text></g><g><title>MIR_effect_checking (2,865,972 samples, 0.56%)</title><rect x="23.6541%" y="181" width="0.5644%" height="15" fill="rgb(226,3,54)"/><text x="23.9041%" y="191.50"></text></g><g><title>hir_module_items (922,730 samples, 0.18%)</title><rect x="24.2185%" y="181" width="0.1817%" height="15" fill="rgb(245,192,40)"/><text x="24.4685%" y="191.50"></text></g><g><title>should_inherit_track_caller (730,529 samples, 0.14%)</title><rect x="24.6965%" y="133" width="0.1439%" height="15" fill="rgb(238,167,29)"/><text x="24.9465%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,072,973 samples, 0.21%)</title><rect x="24.6322%" y="149" width="0.2113%" height="15" fill="rgb(232,182,51)"/><text x="24.8822%" y="159.50"></text></g><g><title>check_mod_attrs (2,205,653 samples, 0.43%)</title><rect x="24.4091%" y="165" width="0.4344%" height="15" fill="rgb(231,60,39)"/><text x="24.6591%" y="175.50"></text></g><g><title>check_mod_const_bodies (556,134 samples, 0.11%)</title><rect x="24.8435%" y="165" width="0.1095%" height="15" fill="rgb(208,69,12)"/><text x="25.0935%" y="175.50"></text></g><g><title>lint_levels (688,128 samples, 0.14%)</title><rect x="25.1422%" y="149" width="0.1355%" height="15" fill="rgb(235,93,37)"/><text x="25.3922%" y="159.50"></text></g><g><title>lookup_deprecation_entry (549,316 samples, 0.11%)</title><rect x="25.2777%" y="149" width="0.1082%" height="15" fill="rgb(213,116,39)"/><text x="25.5277%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,950,333 samples, 0.38%)</title><rect x="25.0288%" y="165" width="0.3841%" height="15" fill="rgb(222,207,29)"/><text x="25.2788%" y="175.50"></text></g><g><title>misc_checking_1 (5,289,459 samples, 1.04%)</title><rect x="24.4003%" y="181" width="1.0417%" height="15" fill="rgb(206,96,30)"/><text x="24.6503%" y="191.50"></text></g><g><title>check_mod_intrinsics (556,357 samples, 0.11%)</title><rect x="25.4463%" y="149" width="0.1096%" height="15" fill="rgb(218,138,4)"/><text x="25.6963%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (2,645,520 samples, 0.52%)</title><rect x="25.4425%" y="165" width="0.5210%" height="15" fill="rgb(250,191,14)"/><text x="25.6925%" y="175.50"></text></g><g><title>check_mod_liveness (2,069,572 samples, 0.41%)</title><rect x="25.5559%" y="149" width="0.4076%" height="15" fill="rgb(239,60,40)"/><text x="25.8059%" y="159.50"></text></g><g><title>misc_checking_2 (5,451,541 samples, 1.07%)</title><rect x="25.4420%" y="181" width="1.0736%" height="15" fill="rgb(206,27,48)"/><text x="25.6920%" y="191.50"></text></g><g><title>match_checking (2,803,741 samples, 0.55%)</title><rect x="25.9634%" y="165" width="0.5521%" height="15" fill="rgb(225,35,8)"/><text x="26.2134%" y="175.50"></text></g><g><title>check_match (2,627,769 samples, 0.52%)</title><rect x="25.9981%" y="149" width="0.5175%" height="15" fill="rgb(250,213,24)"/><text x="26.2481%" y="159.50"></text></g><g><title>check_private_in_public (856,149 samples, 0.17%)</title><rect x="26.5180%" y="165" width="0.1686%" height="15" fill="rgb(247,123,22)"/><text x="26.7680%" y="175.50"></text></g><g><title>death_checking (1,731,779 samples, 0.34%)</title><rect x="26.6866%" y="165" width="0.3410%" height="15" fill="rgb(231,138,38)"/><text x="26.9366%" y="175.50"></text></g><g><title>eval_to_const_value_raw (789,331 samples, 0.16%)</title><rect x="27.5589%" y="133" width="0.1554%" height="15" fill="rgb(231,145,46)"/><text x="27.8089%" y="143.50"></text></g><g><title>eval_to_const_value_raw (763,031 samples, 0.15%)</title><rect x="27.5640%" y="117" width="0.1503%" height="15" fill="rgb(251,118,11)"/><text x="27.8140%" y="127.50"></text></g><g><title>eval_to_allocation_raw (723,540 samples, 0.14%)</title><rect x="27.5718%" y="101" width="0.1425%" height="15" fill="rgb(217,147,25)"/><text x="27.8218%" y="111.50"></text></g><g><title>param_env (1,049,578 samples, 0.21%)</title><rect x="27.7143%" y="133" width="0.2067%" height="15" fill="rgb(247,81,37)"/><text x="27.9643%" y="143.50"></text></g><g><title>predicates_of (515,327 samples, 0.10%)</title><rect x="27.8195%" y="117" width="0.1015%" height="15" fill="rgb(209,12,38)"/><text x="28.0695%" y="127.50"></text></g><g><title>crate_lints (5,811,405 samples, 1.14%)</title><rect x="27.0282%" y="149" width="1.1445%" height="15" fill="rgb(227,1,9)"/><text x="27.2782%" y="159.50"></text></g><g><title>type_of (1,250,796 samples, 0.25%)</title><rect x="27.9263%" y="133" width="0.2463%" height="15" fill="rgb(248,47,43)"/><text x="28.1763%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,008,574 samples, 0.20%)</title><rect x="27.9740%" y="117" width="0.1986%" height="15" fill="rgb(221,10,30)"/><text x="28.2240%" y="127.50"></text></g><g><title>lint_checking (8,569,746 samples, 1.69%)</title><rect x="27.0276%" y="165" width="1.6877%" height="15" fill="rgb(210,229,1)"/><text x="27.2776%" y="175.50"></text></g><g><title>module_lints (2,755,361 samples, 0.54%)</title><rect x="28.1726%" y="149" width="0.5426%" height="15" fill="rgb(222,148,37)"/><text x="28.4226%" y="159.50"></text></g><g><title>lint_mod (2,740,590 samples, 0.54%)</title><rect x="28.1756%" y="133" width="0.5397%" height="15" fill="rgb(234,67,33)"/><text x="28.4256%" y="143.50"></text></g><g><title>privacy_access_levels (1,535,267 samples, 0.30%)</title><rect x="28.7153%" y="165" width="0.3023%" height="15" fill="rgb(247,98,35)"/><text x="28.9653%" y="175.50"></text></g><g><title>privacy_checking_modules (3,587,731 samples, 0.71%)</title><rect x="29.0176%" y="165" width="0.7065%" height="15" fill="rgb(247,138,52)"/><text x="29.2676%" y="175.50"></text></g><g><title>check_mod_privacy (3,577,031 samples, 0.70%)</title><rect x="29.0197%" y="149" width="0.7044%" height="15" fill="rgb(213,79,30)"/><text x="29.2697%" y="159.50"></text></g><g><title>misc_checking_3 (16,327,773 samples, 3.22%)</title><rect x="26.5156%" y="181" width="3.2155%" height="15" fill="rgb(246,177,23)"/><text x="26.7656%" y="191.50">mis..</text></g><g><title>impl_parent (4,285,823 samples, 0.84%)</title><rect x="31.8001%" y="117" width="0.8440%" height="15" fill="rgb(230,62,27)"/><text x="32.0501%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,298,904 samples, 0.45%)</title><rect x="32.1914%" y="101" width="0.4527%" height="15" fill="rgb(216,154,8)"/><text x="32.4414%" y="111.50"></text></g><g><title>impl_trait_ref (8,066,757 samples, 1.59%)</title><rect x="32.6447%" y="117" width="1.5886%" height="15" fill="rgb(244,35,45)"/><text x="32.8947%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,252,116 samples, 1.23%)</title><rect x="33.0020%" y="101" width="1.2312%" height="15" fill="rgb(251,115,12)"/><text x="33.2520%" y="111.50"></text></g><g><title>item_attrs (1,146,914 samples, 0.23%)</title><rect x="34.2333%" y="117" width="0.2259%" height="15" fill="rgb(240,54,50)"/><text x="34.4833%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,069,541 samples, 0.21%)</title><rect x="34.2485%" y="101" width="0.2106%" height="15" fill="rgb(233,84,52)"/><text x="34.4985%" y="111.50"></text></g><g><title>predicates_of (1,092,980 samples, 0.22%)</title><rect x="34.4592%" y="117" width="0.2152%" height="15" fill="rgb(207,117,47)"/><text x="34.7092%" y="127.50"></text></g><g><title>predicates_defined_on (584,646 samples, 0.12%)</title><rect x="34.5593%" y="101" width="0.1151%" height="15" fill="rgb(249,43,39)"/><text x="34.8093%" y="111.50"></text></g><g><title>trait_impls_of (1,658,209 samples, 0.33%)</title><rect x="34.6753%" y="117" width="0.3266%" height="15" fill="rgb(209,38,44)"/><text x="34.9253%" y="127.50"></text></g><g><title>implementations_of_trait (590,337 samples, 0.12%)</title><rect x="34.8856%" y="101" width="0.1163%" height="15" fill="rgb(236,212,23)"/><text x="35.1356%" y="111.50"></text></g><g><title>coherent_trait (26,576,227 samples, 5.23%)</title><rect x="29.8033%" y="149" width="5.2337%" height="15" fill="rgb(242,79,21)"/><text x="30.0533%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (26,067,001 samples, 5.13%)</title><rect x="29.9036%" y="133" width="5.1335%" height="15" fill="rgb(211,96,35)"/><text x="30.1536%" y="143.50">specia..</text></g><g><title>coherence_checking (26,793,028 samples, 5.28%)</title><rect x="29.7949%" y="165" width="5.2764%" height="15" fill="rgb(253,215,40)"/><text x="30.0449%" y="175.50">cohere..</text></g><g><title>associated_item (751,107 samples, 0.15%)</title><rect x="61.7432%" y="101" width="0.1479%" height="15" fill="rgb(211,81,21)"/><text x="61.9932%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (597,696 samples, 0.12%)</title><rect x="61.7734%" y="85" width="0.1177%" height="15" fill="rgb(208,190,38)"/><text x="62.0234%" y="95.50"></text></g><g><title>associated_items (1,121,561 samples, 0.22%)</title><rect x="61.6776%" y="117" width="0.2209%" height="15" fill="rgb(235,213,38)"/><text x="61.9276%" y="127.50"></text></g><g><title>dropck_outlives (644,648 samples, 0.13%)</title><rect x="61.9295%" y="117" width="0.1270%" height="15" fill="rgb(237,122,38)"/><text x="62.1795%" y="127.50"></text></g><g><title>generics_of (1,437,174 samples, 0.28%)</title><rect x="64.4116%" y="101" width="0.2830%" height="15" fill="rgb(244,218,35)"/><text x="64.6616%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,023,111 samples, 0.20%)</title><rect x="64.4932%" y="85" width="0.2015%" height="15" fill="rgb(240,68,47)"/><text x="64.7432%" y="95.50"></text></g><g><title>impl_trait_ref (1,341,252 samples, 0.26%)</title><rect x="64.8096%" y="101" width="0.2641%" height="15" fill="rgb(210,16,53)"/><text x="65.0596%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,078,140 samples, 0.21%)</title><rect x="64.8614%" y="85" width="0.2123%" height="15" fill="rgb(235,124,12)"/><text x="65.1114%" y="95.50"></text></g><g><title>predicates_of (2,033,883 samples, 0.40%)</title><rect x="65.0952%" y="101" width="0.4005%" height="15" fill="rgb(224,169,11)"/><text x="65.3452%" y="111.50"></text></g><g><title>predicates_defined_on (1,135,153 samples, 0.22%)</title><rect x="65.2722%" y="85" width="0.2235%" height="15" fill="rgb(250,166,2)"/><text x="65.5222%" y="95.50"></text></g><g><title>specializes (5,242,274 samples, 1.03%)</title><rect x="65.4958%" y="101" width="1.0324%" height="15" fill="rgb(242,216,29)"/><text x="65.7458%" y="111.50"></text></g><g><title>param_env (2,883,314 samples, 0.57%)</title><rect x="65.9603%" y="85" width="0.5678%" height="15" fill="rgb(230,116,27)"/><text x="66.2103%" y="95.50"></text></g><g><title>def_span (1,268,073 samples, 0.25%)</title><rect x="66.2784%" y="69" width="0.2497%" height="15" fill="rgb(228,99,48)"/><text x="66.5284%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (1,120,973 samples, 0.22%)</title><rect x="66.3074%" y="53" width="0.2208%" height="15" fill="rgb(253,11,6)"/><text x="66.5574%" y="63.50"></text></g><g><title>trait_impls_of (526,248 samples, 0.10%)</title><rect x="66.5313%" y="101" width="0.1036%" height="15" fill="rgb(247,143,39)"/><text x="66.7813%" y="111.50"></text></g><g><title>evaluate_obligation (22,975,082 samples, 4.52%)</title><rect x="62.1231%" y="117" width="4.5246%" height="15" fill="rgb(236,97,10)"/><text x="62.3731%" y="127.50">evalu..</text></g><g><title>method_autoderef_steps (706,128 samples, 0.14%)</title><rect x="66.8847%" y="117" width="0.1391%" height="15" fill="rgb(233,208,19)"/><text x="67.1347%" y="127.50"></text></g><g><title>opt_const_param_of (3,835,912 samples, 0.76%)</title><rect x="67.0697%" y="117" width="0.7554%" height="15" fill="rgb(216,164,2)"/><text x="67.3197%" y="127.50"></text></g><g><title>typeck (3,692,501 samples, 0.73%)</title><rect x="67.0980%" y="101" width="0.7272%" height="15" fill="rgb(220,129,5)"/><text x="67.3480%" y="111.50"></text></g><g><title>predicates_of (581,336 samples, 0.11%)</title><rect x="67.8990%" y="117" width="0.1145%" height="15" fill="rgb(242,17,10)"/><text x="68.1490%" y="127.50"></text></g><g><title>associated_items (606,317 samples, 0.12%)</title><rect x="70.5811%" y="101" width="0.1194%" height="15" fill="rgb(242,107,0)"/><text x="70.8311%" y="111.50"></text></g><g><title>dropck_outlives (537,078 samples, 0.11%)</title><rect x="70.7150%" y="101" width="0.1058%" height="15" fill="rgb(251,28,31)"/><text x="70.9650%" y="111.50"></text></g><g><title>evaluate_obligation (2,018,556 samples, 0.40%)</title><rect x="70.8207%" y="101" width="0.3975%" height="15" fill="rgb(233,223,10)"/><text x="71.0707%" y="111.50"></text></g><g><title>typeck (17,090,162 samples, 3.37%)</title><rect x="68.1614%" y="117" width="3.3656%" height="15" fill="rgb(215,21,27)"/><text x="68.4114%" y="127.50">typ..</text></g><g><title>param_env (574,334 samples, 0.11%)</title><rect x="71.7592%" y="101" width="0.1131%" height="15" fill="rgb(232,23,21)"/><text x="72.0092%" y="111.50"></text></g><g><title>typeck_const_arg (1,919,359 samples, 0.38%)</title><rect x="71.5270%" y="117" width="0.3780%" height="15" fill="rgb(244,5,23)"/><text x="71.7770%" y="127.50"></text></g><g><title>item_bodies_checking (187,056,089 samples, 36.84%)</title><rect x="35.0942%" y="165" width="36.8376%" height="15" fill="rgb(226,81,46)"/><text x="35.3442%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (187,052,099 samples, 36.84%)</title><rect x="35.0950%" y="149" width="36.8368%" height="15" fill="rgb(247,70,30)"/><text x="35.3450%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (186,583,252 samples, 36.74%)</title><rect x="35.1873%" y="133" width="36.7444%" height="15" fill="rgb(212,68,19)"/><text x="35.4373%" y="143.50">typeck</text></g><g><title>evaluate_obligation (869,719 samples, 0.17%)</title><rect x="73.1131%" y="117" width="0.1713%" height="15" fill="rgb(240,187,13)"/><text x="73.3631%" y="127.50"></text></g><g><title>item_types_checking (7,002,897 samples, 1.38%)</title><rect x="71.9317%" y="165" width="1.3791%" height="15" fill="rgb(223,113,26)"/><text x="72.1817%" y="175.50"></text></g><g><title>check_mod_item_types (6,990,377 samples, 1.38%)</title><rect x="71.9342%" y="149" width="1.3766%" height="15" fill="rgb(206,192,2)"/><text x="72.1842%" y="159.50"></text></g><g><title>typeck (2,622,438 samples, 0.52%)</title><rect x="72.7944%" y="133" width="0.5164%" height="15" fill="rgb(241,108,4)"/><text x="73.0444%" y="143.50"></text></g><g><title>fn_sig (1,457,715 samples, 0.29%)</title><rect x="73.5622%" y="133" width="0.2871%" height="15" fill="rgb(247,173,49)"/><text x="73.8122%" y="143.50"></text></g><g><title>named_region_map (848,310 samples, 0.17%)</title><rect x="74.0150%" y="117" width="0.1671%" height="15" fill="rgb(224,114,35)"/><text x="74.2650%" y="127.50"></text></g><g><title>resolve_lifetimes (772,319 samples, 0.15%)</title><rect x="74.0299%" y="101" width="0.1521%" height="15" fill="rgb(245,159,27)"/><text x="74.2799%" y="111.50"></text></g><g><title>generics_of (1,740,960 samples, 0.34%)</title><rect x="73.8493%" y="133" width="0.3429%" height="15" fill="rgb(245,172,44)"/><text x="74.0993%" y="143.50"></text></g><g><title>predicates_of (988,697 samples, 0.19%)</title><rect x="74.2409%" y="133" width="0.1947%" height="15" fill="rgb(236,23,11)"/><text x="74.4909%" y="143.50"></text></g><g><title>predicates_defined_on (806,995 samples, 0.16%)</title><rect x="74.2767%" y="117" width="0.1589%" height="15" fill="rgb(205,117,38)"/><text x="74.5267%" y="127.50"></text></g><g><title>type_collecting (6,123,409 samples, 1.21%)</title><rect x="73.3131%" y="165" width="1.2059%" height="15" fill="rgb(237,72,25)"/><text x="73.5631%" y="175.50"></text></g><g><title>collect_mod_item_types (6,104,729 samples, 1.20%)</title><rect x="73.3168%" y="149" width="1.2022%" height="15" fill="rgb(244,70,9)"/><text x="73.5668%" y="159.50"></text></g><g><title>param_env (905,903 samples, 0.18%)</title><rect x="75.7242%" y="133" width="0.1784%" height="15" fill="rgb(217,125,39)"/><text x="75.9742%" y="143.50"></text></g><g><title>region_scope_tree (1,311,517 samples, 0.26%)</title><rect x="75.9178%" y="133" width="0.2583%" height="15" fill="rgb(235,36,10)"/><text x="76.1678%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,748,223 samples, 1.53%)</title><rect x="74.6743%" y="149" width="1.5259%" height="15" fill="rgb(251,123,47)"/><text x="74.9243%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,219,554 samples, 0.24%)</title><rect x="77.0728%" y="133" width="0.2402%" height="15" fill="rgb(221,13,13)"/><text x="77.3228%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,199,284 samples, 0.24%)</title><rect x="77.0768%" y="117" width="0.2362%" height="15" fill="rgb(238,131,9)"/><text x="77.3268%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,197,204 samples, 0.24%)</title><rect x="77.0772%" y="101" width="0.2358%" height="15" fill="rgb(211,50,8)"/><text x="77.3272%" y="111.50"></text></g><g><title>evaluate_obligation (1,003,381 samples, 0.20%)</title><rect x="77.3130%" y="133" width="0.1976%" height="15" fill="rgb(245,182,24)"/><text x="77.5630%" y="143.50"></text></g><g><title>param_env (696,179 samples, 0.14%)</title><rect x="77.5458%" y="133" width="0.1371%" height="15" fill="rgb(242,14,37)"/><text x="77.7958%" y="143.50"></text></g><g><title>region_scope_tree (1,291,257 samples, 0.25%)</title><rect x="77.7365%" y="133" width="0.2543%" height="15" fill="rgb(246,228,12)"/><text x="77.9865%" y="143.50"></text></g><g><title>analysis (395,083,061 samples, 77.80%)</title><rect x="0.2191%" y="197" width="77.8050%" height="15" fill="rgb(213,55,15)"/><text x="0.4691%" y="207.50">analysis</text></g><g><title>type_check_crate (245,225,258 samples, 48.29%)</title><rect x="29.7311%" y="181" width="48.2930%" height="15" fill="rgb(209,9,3)"/><text x="29.9811%" y="191.50">type_check_crate</text></g><g><title>wf_checking (17,762,269 samples, 3.50%)</title><rect x="74.5261%" y="165" width="3.4980%" height="15" fill="rgb(230,59,30)"/><text x="74.7761%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (9,261,716 samples, 1.82%)</title><rect x="76.2001%" y="149" width="1.8239%" height="15" fill="rgb(209,121,21)"/><text x="76.4501%" y="159.50">c..</text></g><g><title>AST_validation (589,887 samples, 0.12%)</title><rect x="78.1494%" y="181" width="0.1162%" height="15" fill="rgb(220,109,13)"/><text x="78.3994%" y="191.50"></text></g><g><title>metadata_register_crate (5,674,493 samples, 1.12%)</title><rect x="90.3022%" y="149" width="1.1175%" height="15" fill="rgb(232,18,1)"/><text x="90.5522%" y="159.50"></text></g><g><title>metadata_register_crate (4,365,279 samples, 0.86%)</title><rect x="90.5600%" y="133" width="0.8597%" height="15" fill="rgb(215,41,42)"/><text x="90.8100%" y="143.50"></text></g><g><title>macro_expand_crate (68,912,908 samples, 13.57%)</title><rect x="78.3418%" y="181" width="13.5712%" height="15" fill="rgb(224,123,36)"/><text x="78.5918%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (68,897,248 samples, 13.57%)</title><rect x="78.3449%" y="165" width="13.5682%" height="15" fill="rgb(240,125,3)"/><text x="78.5949%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,504,988 samples, 0.49%)</title><rect x="91.4197%" y="149" width="0.4933%" height="15" fill="rgb(205,98,50)"/><text x="91.6697%" y="159.50"></text></g><g><title>late_resolve_crate (6,920,158 samples, 1.36%)</title><rect x="92.0122%" y="165" width="1.3628%" height="15" fill="rgb(205,185,37)"/><text x="92.2622%" y="175.50"></text></g><g><title>configure_and_expand (78,138,312 samples, 15.39%)</title><rect x="78.1050%" y="197" width="15.3880%" height="15" fill="rgb(238,207,15)"/><text x="78.3550%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,941,009 samples, 1.56%)</title><rect x="91.9291%" y="181" width="1.5638%" height="15" fill="rgb(213,199,42)"/><text x="92.1791%" y="191.50"></text></g><g><title>drop_ast (1,261,684 samples, 0.25%)</title><rect x="93.4930%" y="197" width="0.2485%" height="15" fill="rgb(235,201,11)"/><text x="93.7430%" y="207.50"></text></g><g><title>early_lint_checks (2,150,644 samples, 0.42%)</title><rect x="93.7457%" y="197" width="0.4235%" height="15" fill="rgb(207,46,11)"/><text x="93.9957%" y="207.50"></text></g><g><title>free_global_ctxt (7,004,699 samples, 1.38%)</title><rect x="94.1692%" y="197" width="1.3795%" height="15" fill="rgb(241,35,35)"/><text x="94.4192%" y="207.50"></text></g><g><title>mir_for_ctfe (792,619 samples, 0.16%)</title><rect x="96.3620%" y="181" width="0.1561%" height="15" fill="rgb(243,32,47)"/><text x="96.6120%" y="191.50"></text></g><g><title>generate_crate_metadata (5,238,977 samples, 1.03%)</title><rect x="95.5487%" y="197" width="1.0317%" height="15" fill="rgb(247,202,23)"/><text x="95.7987%" y="207.50"></text></g><g><title>hir_lowering (13,746,154 samples, 2.71%)</title><rect x="96.5804%" y="197" width="2.7071%" height="15" fill="rgb(219,102,11)"/><text x="96.8304%" y="207.50">hi..</text></g><g><title>parse_crate (719,968 samples, 0.14%)</title><rect x="99.3004%" y="197" width="0.1418%" height="15" fill="rgb(243,110,44)"/><text x="99.5504%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,937,842 samples, 0.38%)</title><rect x="99.4933%" y="197" width="0.3816%" height="15" fill="rgb(222,74,54)"/><text x="99.7433%" y="207.50"></text></g><g><title>all (507,786,298 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (507,786,298 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (544,867 samples, 0.11%)</title><rect x="99.8927%" y="197" width="0.1073%" height="15" fill="rgb(217,163,10)"/><text x="100.1427%" y="207.50"></text></g></svg></svg>