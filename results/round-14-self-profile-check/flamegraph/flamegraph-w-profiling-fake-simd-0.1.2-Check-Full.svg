<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (68,691 samples, 0.14%)</title><rect x="6.2958%" y="85" width="0.1409%" height="15" fill="rgb(227,0,7)"/><text x="6.5458%" y="95.50"></text></g><g><title>thir_body (223,133 samples, 0.46%)</title><rect x="7.6935%" y="69" width="0.4578%" height="15" fill="rgb(217,0,24)"/><text x="7.9435%" y="79.50"></text></g><g><title>mir_const (1,236,406 samples, 2.54%)</title><rect x="5.6297%" y="117" width="2.5365%" height="15" fill="rgb(221,193,54)"/><text x="5.8797%" y="127.50">mi..</text></g><g><title>unsafety_check_result (1,008,602 samples, 2.07%)</title><rect x="6.0971%" y="101" width="2.0692%" height="15" fill="rgb(248,212,6)"/><text x="6.3471%" y="111.50">u..</text></g><g><title>mir_built (843,020 samples, 1.73%)</title><rect x="6.4368%" y="85" width="1.7295%" height="15" fill="rgb(208,68,35)"/><text x="6.6868%" y="95.50"></text></g><g><title>mir_promoted (1,425,147 samples, 2.92%)</title><rect x="5.2690%" y="133" width="2.9237%" height="15" fill="rgb(232,128,0)"/><text x="5.5190%" y="143.50">mi..</text></g><g><title>MIR_borrow_checking (3,121,055 samples, 6.40%)</title><rect x="1.9044%" y="165" width="6.4029%" height="15" fill="rgb(207,160,47)"/><text x="2.1544%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (3,097,675 samples, 6.35%)</title><rect x="1.9524%" y="149" width="6.3549%" height="15" fill="rgb(228,23,34)"/><text x="2.2024%" y="159.50">mir_borr..</text></g><g><title>type_op_prove_predicate (55,891 samples, 0.11%)</title><rect x="8.1927%" y="133" width="0.1147%" height="15" fill="rgb(218,30,26)"/><text x="8.4427%" y="143.50"></text></g><g><title>hir_module_items (175,742 samples, 0.36%)</title><rect x="8.3203%" y="165" width="0.3605%" height="15" fill="rgb(220,122,19)"/><text x="8.5703%" y="175.50"></text></g><g><title>associated_item (71,771 samples, 0.15%)</title><rect x="9.3577%" y="101" width="0.1472%" height="15" fill="rgb(250,228,42)"/><text x="9.6077%" y="111.50"></text></g><g><title>get_lang_items (81,901 samples, 0.17%)</title><rect x="9.6451%" y="85" width="0.1680%" height="15" fill="rgb(240,193,28)"/><text x="9.8951%" y="95.50"></text></g><g><title>item_attrs (107,182 samples, 0.22%)</title><rect x="9.8131%" y="85" width="0.2199%" height="15" fill="rgb(216,20,37)"/><text x="10.0631%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (93,652 samples, 0.19%)</title><rect x="9.8409%" y="69" width="0.1921%" height="15" fill="rgb(206,188,39)"/><text x="10.0909%" y="79.50"></text></g><g><title>should_inherit_track_caller (51,081 samples, 0.10%)</title><rect x="10.0330%" y="85" width="0.1048%" height="15" fill="rgb(217,207,13)"/><text x="10.2830%" y="95.50"></text></g><g><title>codegen_fn_attrs (345,534 samples, 0.71%)</title><rect x="9.5049%" y="101" width="0.7089%" height="15" fill="rgb(231,73,38)"/><text x="9.7549%" y="111.50"></text></g><g><title>codegen_fn_attrs (545,756 samples, 1.12%)</title><rect x="9.1053%" y="133" width="1.1196%" height="15" fill="rgb(225,20,46)"/><text x="9.3553%" y="143.50"></text></g><g><title>should_inherit_track_caller (467,596 samples, 0.96%)</title><rect x="9.2656%" y="117" width="0.9593%" height="15" fill="rgb(210,31,41)"/><text x="9.5156%" y="127.50"></text></g><g><title>check_mod_attrs (723,608 samples, 1.48%)</title><rect x="8.7413%" y="149" width="1.4845%" height="15" fill="rgb(221,200,47)"/><text x="8.9913%" y="159.50"></text></g><g><title>check_mod_const_bodies (77,981 samples, 0.16%)</title><rect x="10.2258%" y="149" width="0.1600%" height="15" fill="rgb(226,26,5)"/><text x="10.4758%" y="159.50"></text></g><g><title>lookup_deprecation_entry (73,551 samples, 0.15%)</title><rect x="10.7946%" y="133" width="0.1509%" height="15" fill="rgb(249,33,26)"/><text x="11.0446%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (310,634 samples, 0.64%)</title><rect x="10.4650%" y="149" width="0.6373%" height="15" fill="rgb(235,183,28)"/><text x="10.7150%" y="159.50"></text></g><g><title>looking_for_derive_registrar (56,661 samples, 0.12%)</title><rect x="11.1048%" y="149" width="0.1162%" height="15" fill="rgb(221,5,38)"/><text x="11.3548%" y="159.50"></text></g><g><title>misc_checking_1 (1,248,764 samples, 2.56%)</title><rect x="8.6816%" y="165" width="2.5619%" height="15" fill="rgb(247,18,42)"/><text x="8.9316%" y="175.50">mi..</text></g><g><title>liveness_and_intrinsic_checking (86,321 samples, 0.18%)</title><rect x="11.2466%" y="149" width="0.1771%" height="15" fill="rgb(241,131,45)"/><text x="11.4966%" y="159.50"></text></g><g><title>check_mod_liveness (64,070 samples, 0.13%)</title><rect x="11.2923%" y="133" width="0.1314%" height="15" fill="rgb(249,31,29)"/><text x="11.5423%" y="143.50"></text></g><g><title>misc_checking_2 (236,363 samples, 0.48%)</title><rect x="11.2435%" y="165" width="0.4849%" height="15" fill="rgb(225,111,53)"/><text x="11.4935%" y="175.50"></text></g><g><title>match_checking (148,512 samples, 0.30%)</title><rect x="11.4237%" y="149" width="0.3047%" height="15" fill="rgb(238,160,17)"/><text x="11.6737%" y="159.50"></text></g><g><title>check_match (140,782 samples, 0.29%)</title><rect x="11.4396%" y="133" width="0.2888%" height="15" fill="rgb(214,148,48)"/><text x="11.6896%" y="143.50"></text></g><g><title>check_private_in_public (56,050 samples, 0.11%)</title><rect x="11.7438%" y="149" width="0.1150%" height="15" fill="rgb(232,36,49)"/><text x="11.9938%" y="159.50"></text></g><g><title>item_attrs (80,451 samples, 0.17%)</title><rect x="12.0874%" y="133" width="0.1650%" height="15" fill="rgb(209,103,24)"/><text x="12.3374%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (79,421 samples, 0.16%)</title><rect x="12.0896%" y="117" width="0.1629%" height="15" fill="rgb(229,88,8)"/><text x="12.3396%" y="127.50"></text></g><g><title>death_checking (251,373 samples, 0.52%)</title><rect x="11.8588%" y="149" width="0.5157%" height="15" fill="rgb(213,181,19)"/><text x="12.1088%" y="159.50"></text></g><g><title>lint_levels (59,450 samples, 0.12%)</title><rect x="12.2525%" y="133" width="0.1220%" height="15" fill="rgb(254,191,54)"/><text x="12.5025%" y="143.50"></text></g><g><title>param_env (61,981 samples, 0.13%)</title><rect x="12.8306%" y="117" width="0.1272%" height="15" fill="rgb(241,83,37)"/><text x="13.0806%" y="127.50"></text></g><g><title>trait_impls_of (77,330 samples, 0.16%)</title><rect x="12.9578%" y="117" width="0.1586%" height="15" fill="rgb(233,36,39)"/><text x="13.2078%" y="127.50"></text></g><g><title>crate_lints (825,210 samples, 1.69%)</title><rect x="12.3775%" y="133" width="1.6929%" height="15" fill="rgb(226,3,54)"/><text x="12.6275%" y="143.50"></text></g><g><title>type_of (465,046 samples, 0.95%)</title><rect x="13.1164%" y="117" width="0.9540%" height="15" fill="rgb(245,192,40)"/><text x="13.3664%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (384,745 samples, 0.79%)</title><rect x="13.2812%" y="101" width="0.7893%" height="15" fill="rgb(238,167,29)"/><text x="13.5312%" y="111.50"></text></g><g><title>lint_checking (901,770 samples, 1.85%)</title><rect x="12.3745%" y="149" width="1.8500%" height="15" fill="rgb(232,182,51)"/><text x="12.6245%" y="159.50">l..</text></g><g><title>module_lints (75,050 samples, 0.15%)</title><rect x="14.0705%" y="133" width="0.1540%" height="15" fill="rgb(231,60,39)"/><text x="14.3205%" y="143.50"></text></g><g><title>lint_mod (73,210 samples, 0.15%)</title><rect x="14.0743%" y="117" width="0.1502%" height="15" fill="rgb(208,69,12)"/><text x="14.3243%" y="127.50"></text></g><g><title>privacy_access_levels (91,121 samples, 0.19%)</title><rect x="14.2244%" y="149" width="0.1869%" height="15" fill="rgb(235,93,37)"/><text x="14.4744%" y="159.50"></text></g><g><title>privacy_checking_modules (133,892 samples, 0.27%)</title><rect x="14.4114%" y="149" width="0.2747%" height="15" fill="rgb(213,116,39)"/><text x="14.6614%" y="159.50"></text></g><g><title>check_mod_privacy (132,632 samples, 0.27%)</title><rect x="14.4140%" y="133" width="0.2721%" height="15" fill="rgb(222,207,29)"/><text x="14.6640%" y="143.50"></text></g><g><title>misc_checking_3 (1,450,356 samples, 2.98%)</title><rect x="11.7284%" y="165" width="2.9754%" height="15" fill="rgb(206,96,30)"/><text x="11.9784%" y="175.50">mis..</text></g><g><title>adt_destructor (89,981 samples, 0.18%)</title><rect x="15.0638%" y="117" width="0.1846%" height="15" fill="rgb(218,138,4)"/><text x="15.3138%" y="127.50"></text></g><g><title>coherent_trait (78,171 samples, 0.16%)</title><rect x="15.0880%" y="101" width="0.1604%" height="15" fill="rgb(250,191,14)"/><text x="15.3380%" y="111.50"></text></g><g><title>specialization_graph_of (75,801 samples, 0.16%)</title><rect x="15.0929%" y="85" width="0.1555%" height="15" fill="rgb(239,60,40)"/><text x="15.3429%" y="95.50"></text></g><g><title>is_copy_raw (244,172 samples, 0.50%)</title><rect x="15.2484%" y="117" width="0.5009%" height="15" fill="rgb(206,27,48)"/><text x="15.4984%" y="127.50"></text></g><g><title>evaluate_obligation (205,312 samples, 0.42%)</title><rect x="15.3281%" y="101" width="0.4212%" height="15" fill="rgb(225,35,8)"/><text x="15.5781%" y="111.50"></text></g><g><title>param_env (201,153 samples, 0.41%)</title><rect x="15.7493%" y="117" width="0.4127%" height="15" fill="rgb(250,213,24)"/><text x="15.9993%" y="127.50"></text></g><g><title>impl_parent (2,670,573 samples, 5.48%)</title><rect x="27.4211%" y="101" width="5.4787%" height="15" fill="rgb(247,123,22)"/><text x="27.6711%" y="111.50">impl_pa..</text></g><g><title>metadata_decode_entry_impl_parent (1,287,623 samples, 2.64%)</title><rect x="30.2582%" y="85" width="2.6416%" height="15" fill="rgb(231,138,38)"/><text x="30.5082%" y="95.50">me..</text></g><g><title>impl_trait_ref (6,118,672 samples, 12.55%)</title><rect x="32.8998%" y="101" width="12.5526%" height="15" fill="rgb(231,145,46)"/><text x="33.1498%" y="111.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,717,461 samples, 9.68%)</title><rect x="35.7744%" y="85" width="9.6779%" height="15" fill="rgb(251,118,11)"/><text x="36.0244%" y="95.50">metadata_decod..</text></g><g><title>coherent_trait (15,848,897 samples, 32.51%)</title><rect x="14.8646%" y="133" width="32.5143%" height="15" fill="rgb(217,147,25)"/><text x="15.1146%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (15,216,530 samples, 31.22%)</title><rect x="16.1620%" y="117" width="31.2170%" height="15" fill="rgb(247,81,37)"/><text x="16.4120%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (939,102 samples, 1.93%)</title><rect x="45.4523%" y="101" width="1.9266%" height="15" fill="rgb(209,12,38)"/><text x="45.7023%" y="111.50">t..</text></g><g><title>implementations_of_trait (293,896 samples, 0.60%)</title><rect x="46.7760%" y="85" width="0.6029%" height="15" fill="rgb(227,1,9)"/><text x="47.0260%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (271,476 samples, 0.56%)</title><rect x="46.8220%" y="69" width="0.5569%" height="15" fill="rgb(248,47,43)"/><text x="47.0720%" y="79.50"></text></g><g><title>orphan_check_crate (54,071 samples, 0.11%)</title><rect x="47.3934%" y="133" width="0.1109%" height="15" fill="rgb(221,10,30)"/><text x="47.6434%" y="143.50"></text></g><g><title>coherence_checking (15,959,418 samples, 32.74%)</title><rect x="14.7882%" y="149" width="32.7410%" height="15" fill="rgb(210,229,1)"/><text x="15.0382%" y="159.50">coherence_checking</text></g><g><title>associated_item (242,882 samples, 0.50%)</title><rect x="52.5407%" y="85" width="0.4983%" height="15" fill="rgb(222,148,37)"/><text x="52.7907%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (206,701 samples, 0.42%)</title><rect x="52.6149%" y="69" width="0.4241%" height="15" fill="rgb(234,67,33)"/><text x="52.8649%" y="79.50"></text></g><g><title>associated_items (307,233 samples, 0.63%)</title><rect x="52.4187%" y="101" width="0.6303%" height="15" fill="rgb(247,98,35)"/><text x="52.6687%" y="111.50"></text></g><g><title>generics_of (88,173 samples, 0.18%)</title><rect x="54.2006%" y="85" width="0.1809%" height="15" fill="rgb(247,138,52)"/><text x="54.4506%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (71,463 samples, 0.15%)</title><rect x="54.2349%" y="69" width="0.1466%" height="15" fill="rgb(213,79,30)"/><text x="54.4849%" y="79.50"></text></g><g><title>impl_item_implementor_ids (60,280 samples, 0.12%)</title><rect x="54.3815%" y="85" width="0.1237%" height="15" fill="rgb(246,177,23)"/><text x="54.6315%" y="95.50"></text></g><g><title>associated_items (53,120 samples, 0.11%)</title><rect x="54.3962%" y="69" width="0.1090%" height="15" fill="rgb(230,62,27)"/><text x="54.6462%" y="79.50"></text></g><g><title>predicates_of (166,342 samples, 0.34%)</title><rect x="54.5791%" y="85" width="0.3413%" height="15" fill="rgb(216,154,8)"/><text x="54.8291%" y="95.50"></text></g><g><title>predicates_defined_on (89,771 samples, 0.18%)</title><rect x="54.7362%" y="69" width="0.1842%" height="15" fill="rgb(244,35,45)"/><text x="54.9862%" y="79.50"></text></g><g><title>specializes (499,393 samples, 1.02%)</title><rect x="54.9203%" y="85" width="1.0245%" height="15" fill="rgb(251,115,12)"/><text x="55.1703%" y="95.50"></text></g><g><title>param_env (314,403 samples, 0.65%)</title><rect x="55.2998%" y="69" width="0.6450%" height="15" fill="rgb(240,54,50)"/><text x="55.5498%" y="79.50"></text></g><g><title>def_span (179,972 samples, 0.37%)</title><rect x="55.5756%" y="53" width="0.3692%" height="15" fill="rgb(233,84,52)"/><text x="55.8256%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (166,942 samples, 0.34%)</title><rect x="55.6023%" y="37" width="0.3425%" height="15" fill="rgb(207,117,47)"/><text x="55.8523%" y="47.50"></text></g><g><title>evaluate_obligation (1,383,532 samples, 2.84%)</title><rect x="53.1342%" y="101" width="2.8383%" height="15" fill="rgb(249,43,39)"/><text x="53.3842%" y="111.50">ev..</text></g><g><title>item_bodies_checking (4,212,277 samples, 8.64%)</title><rect x="47.6109%" y="149" width="8.6416%" height="15" fill="rgb(209,38,44)"/><text x="47.8609%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (4,210,337 samples, 8.64%)</title><rect x="47.6149%" y="133" width="8.6376%" height="15" fill="rgb(236,212,23)"/><text x="47.8649%" y="143.50">typeck_item_..</text></g><g><title>typeck (4,191,697 samples, 8.60%)</title><rect x="47.6531%" y="117" width="8.5993%" height="15" fill="rgb(242,79,21)"/><text x="47.9031%" y="127.50">typeck</text></g><g><title>item_types_checking (697,697 samples, 1.43%)</title><rect x="56.2524%" y="149" width="1.4313%" height="15" fill="rgb(211,96,35)"/><text x="56.5024%" y="159.50"></text></g><g><title>check_mod_item_types (695,097 samples, 1.43%)</title><rect x="56.2578%" y="133" width="1.4260%" height="15" fill="rgb(253,215,40)"/><text x="56.5078%" y="143.50"></text></g><g><title>fn_sig (206,694 samples, 0.42%)</title><rect x="58.1858%" y="117" width="0.4240%" height="15" fill="rgb(211,81,21)"/><text x="58.4358%" y="127.50"></text></g><g><title>late_bound_vars_map (107,733 samples, 0.22%)</title><rect x="58.3889%" y="101" width="0.2210%" height="15" fill="rgb(208,190,38)"/><text x="58.6389%" y="111.50"></text></g><g><title>resolve_lifetimes (92,712 samples, 0.19%)</title><rect x="58.4197%" y="85" width="0.1902%" height="15" fill="rgb(235,213,38)"/><text x="58.6697%" y="95.50"></text></g><g><title>named_region_map (149,572 samples, 0.31%)</title><rect x="58.7776%" y="101" width="0.3068%" height="15" fill="rgb(237,122,38)"/><text x="59.0276%" y="111.50"></text></g><g><title>resolve_lifetimes (130,952 samples, 0.27%)</title><rect x="58.8158%" y="85" width="0.2687%" height="15" fill="rgb(244,218,35)"/><text x="59.0658%" y="95.50"></text></g><g><title>generics_of (248,763 samples, 0.51%)</title><rect x="58.6099%" y="117" width="0.5103%" height="15" fill="rgb(240,68,47)"/><text x="58.8599%" y="127.50"></text></g><g><title>impl_trait_ref (146,672 samples, 0.30%)</title><rect x="59.1202%" y="117" width="0.3009%" height="15" fill="rgb(210,16,53)"/><text x="59.3702%" y="127.50"></text></g><g><title>explicit_predicates_of (103,731 samples, 0.21%)</title><rect x="59.6913%" y="85" width="0.2128%" height="15" fill="rgb(235,124,12)"/><text x="59.9413%" y="95.50"></text></g><g><title>predicates_of (324,914 samples, 0.67%)</title><rect x="59.4211%" y="117" width="0.6666%" height="15" fill="rgb(224,169,11)"/><text x="59.6711%" y="127.50"></text></g><g><title>predicates_defined_on (268,974 samples, 0.55%)</title><rect x="59.5359%" y="101" width="0.5518%" height="15" fill="rgb(250,166,2)"/><text x="59.7859%" y="111.50"></text></g><g><title>inferred_outlives_of (89,472 samples, 0.18%)</title><rect x="59.9041%" y="85" width="0.1836%" height="15" fill="rgb(242,216,29)"/><text x="60.1541%" y="95.50"></text></g><g><title>inferred_outlives_crate (64,751 samples, 0.13%)</title><rect x="59.9549%" y="69" width="0.1328%" height="15" fill="rgb(230,116,27)"/><text x="60.2049%" y="79.50"></text></g><g><title>type_collecting (1,301,515 samples, 2.67%)</title><rect x="57.6866%" y="149" width="2.6701%" height="15" fill="rgb(228,99,48)"/><text x="57.9366%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (1,290,275 samples, 2.65%)</title><rect x="57.7097%" y="133" width="2.6470%" height="15" fill="rgb(253,11,6)"/><text x="57.9597%" y="143.50">co..</text></g><g><title>type_of (131,121 samples, 0.27%)</title><rect x="60.0877%" y="117" width="0.2690%" height="15" fill="rgb(247,143,39)"/><text x="60.3377%" y="127.50"></text></g><g><title>adt_def (50,620 samples, 0.10%)</title><rect x="60.2528%" y="101" width="0.1038%" height="15" fill="rgb(236,97,10)"/><text x="60.5028%" y="111.50"></text></g><g><title>evaluate_obligation (75,291 samples, 0.15%)</title><rect x="61.1835%" y="117" width="0.1545%" height="15" fill="rgb(233,208,19)"/><text x="61.4335%" y="127.50"></text></g><g><title>param_env (85,220 samples, 0.17%)</title><rect x="61.3887%" y="117" width="0.1748%" height="15" fill="rgb(216,164,2)"/><text x="61.6387%" y="127.50"></text></g><g><title>check_impl_item_well_formed (626,646 samples, 1.29%)</title><rect x="60.4753%" y="133" width="1.2856%" height="15" fill="rgb(220,129,5)"/><text x="60.7253%" y="143.50"></text></g><g><title>region_scope_tree (96,232 samples, 0.20%)</title><rect x="61.5635%" y="117" width="0.1974%" height="15" fill="rgb(242,17,10)"/><text x="61.8135%" y="127.50"></text></g><g><title>evaluate_obligation (171,144 samples, 0.35%)</title><rect x="62.5698%" y="117" width="0.3511%" height="15" fill="rgb(242,107,0)"/><text x="62.8198%" y="127.50"></text></g><g><title>param_env (59,612 samples, 0.12%)</title><rect x="63.0076%" y="117" width="0.1223%" height="15" fill="rgb(251,28,31)"/><text x="63.2576%" y="127.50"></text></g><g><title>predicates_of (82,991 samples, 0.17%)</title><rect x="63.1299%" y="117" width="0.1703%" height="15" fill="rgb(233,223,10)"/><text x="63.3799%" y="127.50"></text></g><g><title>predicates_defined_on (57,711 samples, 0.12%)</title><rect x="63.1818%" y="101" width="0.1184%" height="15" fill="rgb(215,21,27)"/><text x="63.4318%" y="111.50"></text></g><g><title>analysis (30,213,847 samples, 61.98%)</title><rect x="1.3986%" y="181" width="61.9842%" height="15" fill="rgb(232,23,21)"/><text x="1.6486%" y="191.50">analysis</text></g><g><title>type_check_crate (23,728,284 samples, 48.68%)</title><rect x="14.7038%" y="165" width="48.6790%" height="15" fill="rgb(244,5,23)"/><text x="14.9538%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,473,867 samples, 3.02%)</title><rect x="60.3591%" y="149" width="3.0237%" height="15" fill="rgb(226,81,46)"/><text x="60.6091%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (790,571 samples, 1.62%)</title><rect x="61.7609%" y="133" width="1.6219%" height="15" fill="rgb(247,70,30)"/><text x="62.0109%" y="143.50"></text></g><g><title>codegen_crate (440,855 samples, 0.90%)</title><rect x="63.4062%" y="181" width="0.9044%" height="15" fill="rgb(212,68,19)"/><text x="63.6562%" y="191.50"></text></g><g><title>AST_validation (132,652 samples, 0.27%)</title><rect x="64.7738%" y="165" width="0.2721%" height="15" fill="rgb(240,187,13)"/><text x="65.0238%" y="175.50"></text></g><g><title>complete_gated_feature_checking (55,571 samples, 0.11%)</title><rect x="65.0460%" y="165" width="0.1140%" height="15" fill="rgb(223,113,26)"/><text x="65.2960%" y="175.50"></text></g><g><title>crate_injection (91,911 samples, 0.19%)</title><rect x="65.1600%" y="165" width="0.1886%" height="15" fill="rgb(206,192,2)"/><text x="65.4100%" y="175.50"></text></g><g><title>metadata_load_macro (90,160 samples, 0.18%)</title><rect x="81.7940%" y="133" width="0.1850%" height="15" fill="rgb(241,108,4)"/><text x="82.0440%" y="143.50"></text></g><g><title>macro_expand_crate (8,317,962 samples, 17.06%)</title><rect x="65.3485%" y="165" width="17.0644%" height="15" fill="rgb(247,173,49)"/><text x="65.5985%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (8,293,602 samples, 17.01%)</title><rect x="65.3985%" y="149" width="17.0145%" height="15" fill="rgb(224,114,35)"/><text x="65.6485%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (211,533 samples, 0.43%)</title><rect x="81.9790%" y="133" width="0.4340%" height="15" fill="rgb(245,159,27)"/><text x="82.2290%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (192,282 samples, 0.39%)</title><rect x="82.4220%" y="165" width="0.3945%" height="15" fill="rgb(245,172,44)"/><text x="82.6720%" y="175.50"></text></g><g><title>finalize_macro_resolutions (308,433 samples, 0.63%)</title><rect x="82.9254%" y="149" width="0.6328%" height="15" fill="rgb(236,23,11)"/><text x="83.1754%" y="159.50"></text></g><g><title>late_resolve_crate (1,006,281 samples, 2.06%)</title><rect x="83.5581%" y="149" width="2.0644%" height="15" fill="rgb(205,117,38)"/><text x="83.8081%" y="159.50">l..</text></g><g><title>configure_and_expand (10,462,387 samples, 21.46%)</title><rect x="64.3106%" y="181" width="21.4638%" height="15" fill="rgb(237,72,25)"/><text x="64.5606%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,441,796 samples, 2.96%)</title><rect x="82.8165%" y="165" width="2.9579%" height="15" fill="rgb(244,70,9)"/><text x="83.0665%" y="175.50">res..</text></g><g><title>drop_ast (106,771 samples, 0.22%)</title><rect x="85.7743%" y="181" width="0.2190%" height="15" fill="rgb(217,125,39)"/><text x="86.0243%" y="191.50"></text></g><g><title>early_lint_checks (239,473 samples, 0.49%)</title><rect x="86.0221%" y="181" width="0.4913%" height="15" fill="rgb(235,36,10)"/><text x="86.2721%" y="191.50"></text></g><g><title>free_global_ctxt (1,598,448 samples, 3.28%)</title><rect x="86.5133%" y="181" width="3.2792%" height="15" fill="rgb(251,123,47)"/><text x="86.7633%" y="191.50">fre..</text></g><g><title>crate_hash (62,910 samples, 0.13%)</title><rect x="90.4511%" y="165" width="0.1291%" height="15" fill="rgb(221,13,13)"/><text x="90.7011%" y="175.50"></text></g><g><title>generate_crate_metadata (470,995 samples, 0.97%)</title><rect x="89.7926%" y="181" width="0.9663%" height="15" fill="rgb(238,131,9)"/><text x="90.0426%" y="191.50"></text></g><g><title>hir_lowering (1,673,359 samples, 3.43%)</title><rect x="90.7588%" y="181" width="3.4329%" height="15" fill="rgb(211,50,8)"/><text x="91.0088%" y="191.50">hir..</text></g><g><title>link_crate (53,991 samples, 0.11%)</title><rect x="94.2339%" y="165" width="0.1108%" height="15" fill="rgb(245,182,24)"/><text x="94.4839%" y="175.50"></text></g><g><title>link (79,581 samples, 0.16%)</title><rect x="94.1918%" y="181" width="0.1633%" height="15" fill="rgb(242,14,37)"/><text x="94.4418%" y="191.50"></text></g><g><title>parse_crate (1,489,267 samples, 3.06%)</title><rect x="94.3550%" y="181" width="3.0553%" height="15" fill="rgb(246,228,12)"/><text x="94.6050%" y="191.50">par..</text></g><g><title>prepare_outputs (316,473 samples, 0.65%)</title><rect x="97.4304%" y="181" width="0.6492%" height="15" fill="rgb(213,55,15)"/><text x="97.6804%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (487,685 samples, 1.00%)</title><rect x="98.0797%" y="181" width="1.0005%" height="15" fill="rgb(209,9,3)"/><text x="98.3297%" y="191.50"></text></g><g><title>setup_global_ctxt (148,572 samples, 0.30%)</title><rect x="99.1047%" y="181" width="0.3048%" height="15" fill="rgb(230,59,30)"/><text x="99.3547%" y="191.50"></text></g><g><title>all (48,744,433 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (48,744,433 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (287,854 samples, 0.59%)</title><rect x="99.4095%" y="181" width="0.5905%" height="15" fill="rgb(232,18,1)"/><text x="99.6595%" y="191.50"></text></g></svg></svg>