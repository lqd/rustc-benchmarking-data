<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (134,331 samples, 0.11%)</title><rect x="7.3422%" y="181" width="0.1127%" height="15" fill="rgb(227,0,7)"/><text x="7.5922%" y="191.50"></text></g><g><title>codegen_fn_attrs (166,550 samples, 0.14%)</title><rect x="7.6387%" y="165" width="0.1397%" height="15" fill="rgb(217,0,24)"/><text x="7.8887%" y="175.50"></text></g><g><title>adt_drop_tys (247,984 samples, 0.21%)</title><rect x="9.2858%" y="133" width="0.2080%" height="15" fill="rgb(221,193,54)"/><text x="9.5358%" y="143.50"></text></g><g><title>needs_drop_raw (627,125 samples, 0.53%)</title><rect x="9.2434%" y="149" width="0.5260%" height="15" fill="rgb(248,212,6)"/><text x="9.4934%" y="159.50"></text></g><g><title>is_copy_raw (328,661 samples, 0.28%)</title><rect x="9.4938%" y="133" width="0.2757%" height="15" fill="rgb(208,68,35)"/><text x="9.7438%" y="143.50"></text></g><g><title>evaluate_obligation (284,770 samples, 0.24%)</title><rect x="9.5306%" y="117" width="0.2389%" height="15" fill="rgb(232,128,0)"/><text x="9.7806%" y="127.50"></text></g><g><title>resolve_instance (170,572 samples, 0.14%)</title><rect x="9.7694%" y="149" width="0.1431%" height="15" fill="rgb(207,160,47)"/><text x="10.0194%" y="159.50"></text></g><g><title>thir_body (721,280 samples, 0.60%)</title><rect x="9.9190%" y="149" width="0.6050%" height="15" fill="rgb(228,23,34)"/><text x="10.1690%" y="159.50"></text></g><g><title>mir_const (4,146,626 samples, 3.48%)</title><rect x="7.0497%" y="197" width="3.4780%" height="15" fill="rgb(218,30,26)"/><text x="7.2997%" y="207.50">mir..</text></g><g><title>unsafety_check_result (3,663,541 samples, 3.07%)</title><rect x="7.4549%" y="181" width="3.0729%" height="15" fill="rgb(220,122,19)"/><text x="7.7049%" y="191.50">uns..</text></g><g><title>mir_built (3,277,748 samples, 2.75%)</title><rect x="7.7784%" y="165" width="2.7493%" height="15" fill="rgb(250,228,42)"/><text x="8.0284%" y="175.50">mi..</text></g><g><title>has_structural_eq_impls (138,611 samples, 0.12%)</title><rect x="10.5836%" y="181" width="0.1163%" height="15" fill="rgb(240,193,28)"/><text x="10.8336%" y="191.50"></text></g><g><title>evaluate_obligation (128,870 samples, 0.11%)</title><rect x="10.5918%" y="165" width="0.1081%" height="15" fill="rgb(216,20,37)"/><text x="10.8418%" y="175.50"></text></g><g><title>mir_promoted (4,945,597 samples, 4.15%)</title><rect x="6.7339%" y="213" width="4.1482%" height="15" fill="rgb(206,188,39)"/><text x="6.9839%" y="223.50">mir_p..</text></g><g><title>mir_const_qualif (422,536 samples, 0.35%)</title><rect x="10.5277%" y="197" width="0.3544%" height="15" fill="rgb(217,207,13)"/><text x="10.7777%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (339,415 samples, 0.28%)</title><rect x="10.8821%" y="213" width="0.2847%" height="15" fill="rgb(231,73,38)"/><text x="11.1321%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (156,152 samples, 0.13%)</title><rect x="11.1668%" y="213" width="0.1310%" height="15" fill="rgb(225,20,46)"/><text x="11.4168%" y="223.50"></text></g><g><title>type_op_prove_predicate (713,489 samples, 0.60%)</title><rect x="11.3890%" y="213" width="0.5985%" height="15" fill="rgb(210,31,41)"/><text x="11.6390%" y="223.50"></text></g><g><title>MIR_borrow_checking (13,531,301 samples, 11.35%)</title><rect x="0.6418%" y="245" width="11.3496%" height="15" fill="rgb(221,200,47)"/><text x="0.8918%" y="255.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (13,511,681 samples, 11.33%)</title><rect x="0.6583%" y="229" width="11.3331%" height="15" fill="rgb(226,26,5)"/><text x="0.9083%" y="239.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (211,672 samples, 0.18%)</title><rect x="12.2871%" y="213" width="0.1775%" height="15" fill="rgb(249,33,26)"/><text x="12.5371%" y="223.50"></text></g><g><title>check_mod_attrs (338,684 samples, 0.28%)</title><rect x="12.1806%" y="229" width="0.2841%" height="15" fill="rgb(235,183,28)"/><text x="12.4306%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (208,542 samples, 0.17%)</title><rect x="12.5293%" y="229" width="0.1749%" height="15" fill="rgb(221,5,38)"/><text x="12.7793%" y="239.50"></text></g><g><title>misc_checking_1 (669,458 samples, 0.56%)</title><rect x="12.1699%" y="245" width="0.5615%" height="15" fill="rgb(247,18,42)"/><text x="12.4199%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (325,034 samples, 0.27%)</title><rect x="12.7326%" y="229" width="0.2726%" height="15" fill="rgb(241,131,45)"/><text x="12.9826%" y="239.50"></text></g><g><title>check_mod_liveness (268,753 samples, 0.23%)</title><rect x="12.7798%" y="213" width="0.2254%" height="15" fill="rgb(249,31,29)"/><text x="13.0298%" y="223.50"></text></g><g><title>misc_checking_2 (551,986 samples, 0.46%)</title><rect x="12.7315%" y="245" width="0.4630%" height="15" fill="rgb(225,111,53)"/><text x="12.9815%" y="255.50"></text></g><g><title>match_checking (225,572 samples, 0.19%)</title><rect x="13.0052%" y="229" width="0.1892%" height="15" fill="rgb(238,160,17)"/><text x="13.2552%" y="239.50"></text></g><g><title>check_match (218,312 samples, 0.18%)</title><rect x="13.0113%" y="213" width="0.1831%" height="15" fill="rgb(214,148,48)"/><text x="13.2613%" y="223.50"></text></g><g><title>death_checking (168,002 samples, 0.14%)</title><rect x="13.2533%" y="229" width="0.1409%" height="15" fill="rgb(232,36,49)"/><text x="13.5033%" y="239.50"></text></g><g><title>eval_to_const_value_raw (367,104 samples, 0.31%)</title><rect x="13.6138%" y="149" width="0.3079%" height="15" fill="rgb(209,103,24)"/><text x="13.8638%" y="159.50"></text></g><g><title>eval_to_const_value_raw (366,464 samples, 0.31%)</title><rect x="13.6144%" y="133" width="0.3074%" height="15" fill="rgb(229,88,8)"/><text x="13.8644%" y="143.50"></text></g><g><title>eval_to_allocation_raw (364,814 samples, 0.31%)</title><rect x="13.6158%" y="117" width="0.3060%" height="15" fill="rgb(213,181,19)"/><text x="13.8658%" y="127.50"></text></g><g><title>eval_to_allocation_raw (408,625 samples, 0.34%)</title><rect x="13.5809%" y="197" width="0.3427%" height="15" fill="rgb(254,191,54)"/><text x="13.8309%" y="207.50"></text></g><g><title>eval_to_allocation_raw (408,005 samples, 0.34%)</title><rect x="13.5814%" y="181" width="0.3422%" height="15" fill="rgb(241,83,37)"/><text x="13.8314%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (378,174 samples, 0.32%)</title><rect x="13.6064%" y="165" width="0.3172%" height="15" fill="rgb(233,36,39)"/><text x="13.8564%" y="175.50"></text></g><g><title>crate_lints (849,589 samples, 0.71%)</title><rect x="13.3956%" y="213" width="0.7126%" height="15" fill="rgb(226,3,54)"/><text x="13.6456%" y="223.50"></text></g><g><title>lint_checking (1,136,812 samples, 0.95%)</title><rect x="13.3942%" y="229" width="0.9535%" height="15" fill="rgb(245,192,40)"/><text x="13.6442%" y="239.50"></text></g><g><title>module_lints (285,603 samples, 0.24%)</title><rect x="14.1082%" y="213" width="0.2396%" height="15" fill="rgb(238,167,29)"/><text x="14.3582%" y="223.50"></text></g><g><title>lint_mod (283,203 samples, 0.24%)</title><rect x="14.1102%" y="197" width="0.2375%" height="15" fill="rgb(232,182,51)"/><text x="14.3602%" y="207.50"></text></g><g><title>privacy_checking_modules (407,895 samples, 0.34%)</title><rect x="14.4012%" y="229" width="0.3421%" height="15" fill="rgb(231,60,39)"/><text x="14.6512%" y="239.50"></text></g><g><title>check_mod_privacy (406,585 samples, 0.34%)</title><rect x="14.4023%" y="213" width="0.3410%" height="15" fill="rgb(208,69,12)"/><text x="14.6523%" y="223.50"></text></g><g><title>misc_checking_3 (1,861,431 samples, 1.56%)</title><rect x="13.1944%" y="245" width="1.5613%" height="15" fill="rgb(235,93,37)"/><text x="13.4444%" y="255.50"></text></g><g><title>impl_parent (887,089 samples, 0.74%)</title><rect x="15.7465%" y="181" width="0.7441%" height="15" fill="rgb(213,116,39)"/><text x="15.9965%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (595,867 samples, 0.50%)</title><rect x="15.9907%" y="165" width="0.4998%" height="15" fill="rgb(222,207,29)"/><text x="16.2407%" y="175.50"></text></g><g><title>impl_trait_ref (2,927,006 samples, 2.46%)</title><rect x="16.4905%" y="181" width="2.4551%" height="15" fill="rgb(206,96,30)"/><text x="16.7405%" y="191.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,633,024 samples, 2.21%)</title><rect x="16.7371%" y="165" width="2.2085%" height="15" fill="rgb(218,138,4)"/><text x="16.9871%" y="175.50">m..</text></g><g><title>coherent_trait (5,188,368 samples, 4.35%)</title><rect x="14.7986%" y="213" width="4.3518%" height="15" fill="rgb(250,191,14)"/><text x="15.0486%" y="223.50">coher..</text></g><g><title>specialization_graph_of (5,181,848 samples, 4.35%)</title><rect x="14.8041%" y="197" width="4.3464%" height="15" fill="rgb(239,60,40)"/><text x="15.0541%" y="207.50">speci..</text></g><g><title>trait_impls_of (242,774 samples, 0.20%)</title><rect x="18.9468%" y="181" width="0.2036%" height="15" fill="rgb(206,27,48)"/><text x="19.1968%" y="191.50"></text></g><g><title>coherence_checking (5,235,879 samples, 4.39%)</title><rect x="14.7887%" y="229" width="4.3917%" height="15" fill="rgb(225,35,8)"/><text x="15.0387%" y="239.50">coher..</text></g><g><title>adt_sized_constraint (120,200 samples, 0.10%)</title><rect x="30.3416%" y="165" width="0.1008%" height="15" fill="rgb(250,213,24)"/><text x="30.5916%" y="175.50"></text></g><g><title>associated_item (324,464 samples, 0.27%)</title><rect x="30.5448%" y="149" width="0.2721%" height="15" fill="rgb(247,123,22)"/><text x="30.7948%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (252,753 samples, 0.21%)</title><rect x="30.6050%" y="133" width="0.2120%" height="15" fill="rgb(231,138,38)"/><text x="30.8550%" y="143.50"></text></g><g><title>associated_items (462,255 samples, 0.39%)</title><rect x="30.4498%" y="165" width="0.3877%" height="15" fill="rgb(231,145,46)"/><text x="30.6998%" y="175.50"></text></g><g><title>adt_def (317,644 samples, 0.27%)</title><rect x="31.2290%" y="133" width="0.2664%" height="15" fill="rgb(251,118,11)"/><text x="31.4790%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (310,694 samples, 0.26%)</title><rect x="31.2349%" y="117" width="0.2606%" height="15" fill="rgb(217,147,25)"/><text x="31.4849%" y="127.50"></text></g><g><title>item_attrs (204,943 samples, 0.17%)</title><rect x="31.3236%" y="101" width="0.1719%" height="15" fill="rgb(247,81,37)"/><text x="31.5736%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (197,633 samples, 0.17%)</title><rect x="31.3297%" y="85" width="0.1658%" height="15" fill="rgb(209,12,38)"/><text x="31.5797%" y="95.50"></text></g><g><title>adt_def (388,791 samples, 0.33%)</title><rect x="31.7131%" y="117" width="0.3261%" height="15" fill="rgb(227,1,9)"/><text x="31.9631%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (372,971 samples, 0.31%)</title><rect x="31.7264%" y="101" width="0.3128%" height="15" fill="rgb(248,47,43)"/><text x="31.9764%" y="111.50"></text></g><g><title>item_attrs (252,540 samples, 0.21%)</title><rect x="31.8274%" y="85" width="0.2118%" height="15" fill="rgb(221,10,30)"/><text x="32.0774%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (235,540 samples, 0.20%)</title><rect x="31.8416%" y="69" width="0.1976%" height="15" fill="rgb(210,229,1)"/><text x="32.0916%" y="79.50"></text></g><g><title>adt_def (200,862 samples, 0.17%)</title><rect x="32.1898%" y="101" width="0.1685%" height="15" fill="rgb(222,148,37)"/><text x="32.4398%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (194,722 samples, 0.16%)</title><rect x="32.1949%" y="85" width="0.1633%" height="15" fill="rgb(234,67,33)"/><text x="32.4449%" y="95.50"></text></g><g><title>adt_def (289,065 samples, 0.24%)</title><rect x="32.4771%" y="85" width="0.2425%" height="15" fill="rgb(247,98,35)"/><text x="32.7271%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (278,275 samples, 0.23%)</title><rect x="32.4861%" y="69" width="0.2334%" height="15" fill="rgb(247,138,52)"/><text x="32.7361%" y="79.50"></text></g><g><title>item_attrs (132,943 samples, 0.11%)</title><rect x="32.6080%" y="53" width="0.1115%" height="15" fill="rgb(213,79,30)"/><text x="32.8580%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (121,563 samples, 0.10%)</title><rect x="32.6176%" y="37" width="0.1020%" height="15" fill="rgb(246,177,23)"/><text x="32.8676%" y="47.50"></text></g><g><title>adt_dtorck_constraint (255,873 samples, 0.21%)</title><rect x="32.7668%" y="85" width="0.2146%" height="15" fill="rgb(230,62,27)"/><text x="33.0168%" y="95.50"></text></g><g><title>adt_dtorck_constraint (787,171 samples, 0.66%)</title><rect x="32.3873%" y="101" width="0.6603%" height="15" fill="rgb(216,154,8)"/><text x="32.6373%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,223,417 samples, 1.03%)</title><rect x="32.1014%" y="117" width="1.0262%" height="15" fill="rgb(244,35,45)"/><text x="32.3514%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,041,562 samples, 1.71%)</title><rect x="31.5356%" y="133" width="1.7124%" height="15" fill="rgb(251,115,12)"/><text x="31.7856%" y="143.50"></text></g><g><title>dropck_outlives (2,986,674 samples, 2.51%)</title><rect x="30.8676%" y="165" width="2.5051%" height="15" fill="rgb(240,54,50)"/><text x="31.1176%" y="175.50">dr..</text></g><g><title>adt_dtorck_constraint (2,768,772 samples, 2.32%)</title><rect x="31.0504%" y="149" width="2.3224%" height="15" fill="rgb(233,84,52)"/><text x="31.3004%" y="159.50">a..</text></g><g><title>type_of (122,571 samples, 0.10%)</title><rect x="33.2699%" y="133" width="0.1028%" height="15" fill="rgb(207,117,47)"/><text x="33.5199%" y="143.50"></text></g><g><title>adt_sized_constraint (241,323 samples, 0.20%)</title><rect x="33.9610%" y="149" width="0.2024%" height="15" fill="rgb(249,43,39)"/><text x="34.2110%" y="159.50"></text></g><g><title>predicates_of (122,920 samples, 0.10%)</title><rect x="34.2565%" y="149" width="0.1031%" height="15" fill="rgb(209,38,44)"/><text x="34.5065%" y="159.50"></text></g><g><title>evaluate_obligation (1,626,998 samples, 1.36%)</title><rect x="33.3727%" y="165" width="1.3647%" height="15" fill="rgb(236,212,23)"/><text x="33.6227%" y="175.50"></text></g><g><title>trait_impls_of (422,637 samples, 0.35%)</title><rect x="34.3829%" y="149" width="0.3545%" height="15" fill="rgb(242,79,21)"/><text x="34.6329%" y="159.50"></text></g><g><title>implementations_of_trait (178,284 samples, 0.15%)</title><rect x="34.5879%" y="133" width="0.1495%" height="15" fill="rgb(211,96,35)"/><text x="34.8379%" y="143.50"></text></g><g><title>fn_sig (120,913 samples, 0.10%)</title><rect x="34.7606%" y="165" width="0.1014%" height="15" fill="rgb(253,215,40)"/><text x="35.0106%" y="175.50"></text></g><g><title>is_copy_raw (264,353 samples, 0.22%)</title><rect x="35.1074%" y="165" width="0.2217%" height="15" fill="rgb(211,81,21)"/><text x="35.3574%" y="175.50"></text></g><g><title>evaluate_obligation (243,863 samples, 0.20%)</title><rect x="35.1246%" y="149" width="0.2045%" height="15" fill="rgb(208,190,38)"/><text x="35.3746%" y="159.50"></text></g><g><title>trait_impls_of (165,662 samples, 0.14%)</title><rect x="35.1902%" y="133" width="0.1390%" height="15" fill="rgb(235,213,38)"/><text x="35.4402%" y="143.50"></text></g><g><title>evaluate_obligation (120,040 samples, 0.10%)</title><rect x="35.5113%" y="149" width="0.1007%" height="15" fill="rgb(237,122,38)"/><text x="35.7613%" y="159.50"></text></g><g><title>method_autoderef_steps (217,073 samples, 0.18%)</title><rect x="35.4373%" y="165" width="0.1821%" height="15" fill="rgb(244,218,35)"/><text x="35.6873%" y="175.50"></text></g><g><title>explicit_predicates_of (155,601 samples, 0.13%)</title><rect x="35.8187%" y="133" width="0.1305%" height="15" fill="rgb(240,68,47)"/><text x="36.0687%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (126,151 samples, 0.11%)</title><rect x="35.8434%" y="117" width="0.1058%" height="15" fill="rgb(210,16,53)"/><text x="36.0934%" y="127.50"></text></g><g><title>predicates_of (439,095 samples, 0.37%)</title><rect x="35.6316%" y="165" width="0.3683%" height="15" fill="rgb(235,124,12)"/><text x="35.8816%" y="175.50"></text></g><g><title>predicates_defined_on (298,364 samples, 0.25%)</title><rect x="35.7496%" y="149" width="0.2503%" height="15" fill="rgb(224,169,11)"/><text x="35.9996%" y="159.50"></text></g><g><title>typeck (19,254,794 samples, 16.15%)</title><rect x="20.0115%" y="181" width="16.1503%" height="15" fill="rgb(250,166,2)"/><text x="20.2615%" y="191.50">typeck</text></g><g><title>item_bodies_checking (20,240,295 samples, 16.98%)</title><rect x="19.1873%" y="229" width="16.9769%" height="15" fill="rgb(242,216,29)"/><text x="19.4373%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,236,815 samples, 16.97%)</title><rect x="19.1902%" y="213" width="16.9739%" height="15" fill="rgb(230,116,27)"/><text x="19.4402%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (20,226,325 samples, 16.97%)</title><rect x="19.1990%" y="197" width="16.9652%" height="15" fill="rgb(228,99,48)"/><text x="19.4490%" y="207.50">typeck</text></g><g><title>impl_trait_ref (168,282 samples, 0.14%)</title><rect x="36.3818%" y="149" width="0.1411%" height="15" fill="rgb(253,11,6)"/><text x="36.6318%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (147,012 samples, 0.12%)</title><rect x="36.3996%" y="133" width="0.1233%" height="15" fill="rgb(247,143,39)"/><text x="36.6496%" y="143.50"></text></g><g><title>adt_destructor (354,574 samples, 0.30%)</title><rect x="36.2505%" y="197" width="0.2974%" height="15" fill="rgb(236,97,10)"/><text x="36.5005%" y="207.50"></text></g><g><title>coherent_trait (351,744 samples, 0.30%)</title><rect x="36.2528%" y="181" width="0.2950%" height="15" fill="rgb(233,208,19)"/><text x="36.5028%" y="191.50"></text></g><g><title>specialization_graph_of (350,314 samples, 0.29%)</title><rect x="36.2540%" y="165" width="0.2938%" height="15" fill="rgb(216,164,2)"/><text x="36.5040%" y="175.50"></text></g><g><title>item_types_checking (1,059,812 samples, 0.89%)</title><rect x="36.1641%" y="229" width="0.8889%" height="15" fill="rgb(220,129,5)"/><text x="36.4141%" y="239.50"></text></g><g><title>check_mod_item_types (1,057,701 samples, 0.89%)</title><rect x="36.1659%" y="213" width="0.8872%" height="15" fill="rgb(242,17,10)"/><text x="36.4159%" y="223.50"></text></g><g><title>typeck (542,866 samples, 0.46%)</title><rect x="36.5977%" y="197" width="0.4553%" height="15" fill="rgb(242,107,0)"/><text x="36.8477%" y="207.50"></text></g><g><title>fn_sig (199,842 samples, 0.17%)</title><rect x="37.1249%" y="197" width="0.1676%" height="15" fill="rgb(251,28,31)"/><text x="37.3749%" y="207.50"></text></g><g><title>generics_of (164,932 samples, 0.14%)</title><rect x="37.2925%" y="197" width="0.1383%" height="15" fill="rgb(233,223,10)"/><text x="37.5425%" y="207.50"></text></g><g><title>type_collecting (604,727 samples, 0.51%)</title><rect x="37.0546%" y="229" width="0.5072%" height="15" fill="rgb(215,21,27)"/><text x="37.3046%" y="239.50"></text></g><g><title>collect_mod_item_types (598,217 samples, 0.50%)</title><rect x="37.0600%" y="213" width="0.5018%" height="15" fill="rgb(232,23,21)"/><text x="37.3100%" y="223.50"></text></g><g><title>check_impl_item_well_formed (449,645 samples, 0.38%)</title><rect x="37.6008%" y="213" width="0.3771%" height="15" fill="rgb(244,5,23)"/><text x="37.8508%" y="223.50"></text></g><g><title>adt_sized_constraint (145,241 samples, 0.12%)</title><rect x="38.3014%" y="181" width="0.1218%" height="15" fill="rgb(226,81,46)"/><text x="38.5514%" y="191.50"></text></g><g><title>evaluate_obligation (324,352 samples, 0.27%)</title><rect x="38.1968%" y="197" width="0.2721%" height="15" fill="rgb(247,70,30)"/><text x="38.4468%" y="207.50"></text></g><g><title>region_scope_tree (189,494 samples, 0.16%)</title><rect x="38.6617%" y="197" width="0.1589%" height="15" fill="rgb(212,68,19)"/><text x="38.9117%" y="207.50"></text></g><g><title>analysis (45,730,081 samples, 38.36%)</title><rect x="0.4771%" y="261" width="38.3568%" height="15" fill="rgb(240,187,13)"/><text x="0.7271%" y="271.50">analysis</text></g><g><title>type_check_crate (28,706,701 samples, 24.08%)</title><rect x="14.7557%" y="245" width="24.0782%" height="15" fill="rgb(223,113,26)"/><text x="15.0057%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,515,547 samples, 1.27%)</title><rect x="37.5628%" y="229" width="1.2712%" height="15" fill="rgb(206,192,2)"/><text x="37.8128%" y="239.50"></text></g><g><title>check_item_well_formed (1,020,521 samples, 0.86%)</title><rect x="37.9780%" y="213" width="0.8560%" height="15" fill="rgb(241,108,4)"/><text x="38.2280%" y="223.50"></text></g><g><title>codegen_crate (395,605 samples, 0.33%)</title><rect x="38.8412%" y="261" width="0.3318%" height="15" fill="rgb(247,173,49)"/><text x="39.0912%" y="271.50"></text></g><g><title>metadata_load_macro (794,222 samples, 0.67%)</title><rect x="89.1015%" y="213" width="0.6662%" height="15" fill="rgb(224,114,35)"/><text x="89.3515%" y="223.50"></text></g><g><title>macro_expand_crate (62,513,118 samples, 52.43%)</title><rect x="39.4708%" y="245" width="52.4339%" height="15" fill="rgb(245,159,27)"/><text x="39.7208%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (62,495,317 samples, 52.42%)</title><rect x="39.4857%" y="229" width="52.4189%" height="15" fill="rgb(245,172,44)"/><text x="39.7357%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (2,547,749 samples, 2.14%)</title><rect x="89.7677%" y="213" width="2.1370%" height="15" fill="rgb(236,23,11)"/><text x="90.0177%" y="223.50">m..</text></g><g><title>metadata_register_crate (874,309 samples, 0.73%)</title><rect x="91.1713%" y="197" width="0.7333%" height="15" fill="rgb(205,117,38)"/><text x="91.4213%" y="207.50"></text></g><g><title>maybe_create_a_macro_crate (363,264 samples, 0.30%)</title><rect x="91.9057%" y="245" width="0.3047%" height="15" fill="rgb(237,72,25)"/><text x="92.1557%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (148,671 samples, 0.12%)</title><rect x="92.2104%" y="245" width="0.1247%" height="15" fill="rgb(244,70,9)"/><text x="92.4604%" y="255.50"></text></g><g><title>finalize_macro_resolutions (277,363 samples, 0.23%)</title><rect x="92.3691%" y="229" width="0.2326%" height="15" fill="rgb(217,125,39)"/><text x="92.6191%" y="239.50"></text></g><g><title>late_resolve_crate (1,350,185 samples, 1.13%)</title><rect x="92.6018%" y="229" width="1.1325%" height="15" fill="rgb(235,36,10)"/><text x="92.8518%" y="239.50"></text></g><g><title>configure_and_expand (65,117,766 samples, 54.62%)</title><rect x="39.1730%" y="261" width="54.6186%" height="15" fill="rgb(251,123,47)"/><text x="39.4230%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,736,459 samples, 1.46%)</title><rect x="92.3351%" y="245" width="1.4565%" height="15" fill="rgb(221,13,13)"/><text x="92.5851%" y="255.50"></text></g><g><title>early_lint_checks (273,953 samples, 0.23%)</title><rect x="93.8785%" y="261" width="0.2298%" height="15" fill="rgb(238,131,9)"/><text x="94.1285%" y="271.50"></text></g><g><title>free_global_ctxt (3,081,484 samples, 2.58%)</title><rect x="94.1083%" y="261" width="2.5846%" height="15" fill="rgb(211,50,8)"/><text x="94.3583%" y="271.50">fr..</text></g><g><title>generate_crate_metadata (169,272 samples, 0.14%)</title><rect x="96.6930%" y="261" width="0.1420%" height="15" fill="rgb(245,182,24)"/><text x="96.9430%" y="271.50"></text></g><g><title>hir_lowering (1,373,325 samples, 1.15%)</title><rect x="96.8349%" y="261" width="1.1519%" height="15" fill="rgb(242,14,37)"/><text x="97.0849%" y="271.50"></text></g><g><title>parse_crate (1,279,534 samples, 1.07%)</title><rect x="98.0319%" y="261" width="1.0732%" height="15" fill="rgb(246,228,12)"/><text x="98.2819%" y="271.50"></text></g><g><title>prepare_outputs (164,932 samples, 0.14%)</title><rect x="99.1117%" y="261" width="0.1383%" height="15" fill="rgb(213,55,15)"/><text x="99.3617%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (486,125 samples, 0.41%)</title><rect x="99.2501%" y="261" width="0.4077%" height="15" fill="rgb(209,9,3)"/><text x="99.5001%" y="271.50"></text></g><g><title>all (119,222,780 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (119,222,780 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (312,543 samples, 0.26%)</title><rect x="99.7378%" y="261" width="0.2622%" height="15" fill="rgb(220,109,13)"/><text x="99.9878%" y="271.50"></text></g></svg></svg>