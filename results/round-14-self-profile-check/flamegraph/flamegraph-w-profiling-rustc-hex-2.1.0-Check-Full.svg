<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (117,981 samples, 0.18%)</title><rect x="7.0448%" y="117" width="0.1798%" height="15" fill="rgb(227,0,7)"/><text x="7.2948%" y="127.50"></text></g><g><title>item_attrs (156,243 samples, 0.24%)</title><rect x="7.4676%" y="85" width="0.2381%" height="15" fill="rgb(217,0,24)"/><text x="7.7176%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (151,903 samples, 0.23%)</title><rect x="7.4742%" y="69" width="0.2315%" height="15" fill="rgb(221,193,54)"/><text x="7.7242%" y="79.50"></text></g><g><title>codegen_fn_attrs (201,274 samples, 0.31%)</title><rect x="7.4111%" y="101" width="0.3067%" height="15" fill="rgb(248,212,6)"/><text x="7.6611%" y="111.50"></text></g><g><title>is_copy_raw (69,990 samples, 0.11%)</title><rect x="8.9272%" y="85" width="0.1067%" height="15" fill="rgb(208,68,35)"/><text x="9.1772%" y="95.50"></text></g><g><title>is_copy_raw (101,430 samples, 0.15%)</title><rect x="9.1380%" y="53" width="0.1546%" height="15" fill="rgb(232,128,0)"/><text x="9.3880%" y="63.50"></text></g><g><title>evaluate_obligation (83,120 samples, 0.13%)</title><rect x="9.1659%" y="37" width="0.1267%" height="15" fill="rgb(207,160,47)"/><text x="9.4159%" y="47.50"></text></g><g><title>adt_drop_tys (175,102 samples, 0.27%)</title><rect x="9.1031%" y="69" width="0.2669%" height="15" fill="rgb(228,23,34)"/><text x="9.3531%" y="79.50"></text></g><g><title>needs_drop_raw (559,718 samples, 0.85%)</title><rect x="9.0338%" y="85" width="0.8530%" height="15" fill="rgb(218,30,26)"/><text x="9.2838%" y="95.50"></text></g><g><title>is_copy_raw (339,136 samples, 0.52%)</title><rect x="9.3700%" y="69" width="0.5168%" height="15" fill="rgb(220,122,19)"/><text x="9.6200%" y="79.50"></text></g><g><title>evaluate_obligation (280,284 samples, 0.43%)</title><rect x="9.4597%" y="53" width="0.4272%" height="15" fill="rgb(250,228,42)"/><text x="9.7097%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (118,211 samples, 0.18%)</title><rect x="10.0022%" y="69" width="0.1802%" height="15" fill="rgb(240,193,28)"/><text x="10.2522%" y="79.50"></text></g><g><title>resolve_instance (236,943 samples, 0.36%)</title><rect x="9.8868%" y="85" width="0.3611%" height="15" fill="rgb(216,20,37)"/><text x="10.1368%" y="95.50"></text></g><g><title>thir_body (287,865 samples, 0.44%)</title><rect x="10.2645%" y="85" width="0.4387%" height="15" fill="rgb(206,188,39)"/><text x="10.5145%" y="95.50"></text></g><g><title>mir_const (2,657,652 samples, 4.05%)</title><rect x="6.6619%" y="133" width="4.0503%" height="15" fill="rgb(217,207,13)"/><text x="6.9119%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (2,288,477 samples, 3.49%)</title><rect x="7.2246%" y="117" width="3.4877%" height="15" fill="rgb(231,73,38)"/><text x="7.4746%" y="127.50">uns..</text></g><g><title>mir_built (1,964,792 samples, 2.99%)</title><rect x="7.7179%" y="101" width="2.9944%" height="15" fill="rgb(225,20,46)"/><text x="7.9679%" y="111.50">mir..</text></g><g><title>mir_promoted (3,127,726 samples, 4.77%)</title><rect x="6.2376%" y="149" width="4.7667%" height="15" fill="rgb(210,31,41)"/><text x="6.4876%" y="159.50">mir_pr..</text></g><g><title>mir_const_qualif (191,653 samples, 0.29%)</title><rect x="10.7122%" y="133" width="0.2921%" height="15" fill="rgb(221,200,47)"/><text x="10.9622%" y="143.50"></text></g><g><title>mir_const (153,362 samples, 0.23%)</title><rect x="10.7706%" y="117" width="0.2337%" height="15" fill="rgb(226,26,5)"/><text x="11.0206%" y="127.50"></text></g><g><title>unsafety_check_result (98,111 samples, 0.15%)</title><rect x="10.8548%" y="101" width="0.1495%" height="15" fill="rgb(249,33,26)"/><text x="11.1048%" y="111.50"></text></g><g><title>mir_built (65,671 samples, 0.10%)</title><rect x="10.9042%" y="85" width="0.1001%" height="15" fill="rgb(235,183,28)"/><text x="11.1542%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (120,311 samples, 0.18%)</title><rect x="11.0043%" y="149" width="0.1834%" height="15" fill="rgb(221,5,38)"/><text x="11.2543%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (181,790 samples, 0.28%)</title><rect x="11.1877%" y="149" width="0.2770%" height="15" fill="rgb(247,18,42)"/><text x="11.4377%" y="159.50"></text></g><g><title>normalize_projection_ty (119,150 samples, 0.18%)</title><rect x="11.2831%" y="133" width="0.1816%" height="15" fill="rgb(241,131,45)"/><text x="11.5331%" y="143.50"></text></g><g><title>type_op_normalize_predicate (75,580 samples, 0.12%)</title><rect x="11.4647%" y="149" width="0.1152%" height="15" fill="rgb(249,31,29)"/><text x="11.7147%" y="159.50"></text></g><g><title>type_op_prove_predicate (939,390 samples, 1.43%)</title><rect x="11.5799%" y="149" width="1.4316%" height="15" fill="rgb(225,111,53)"/><text x="11.8299%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,966,949 samples, 12.14%)</title><rect x="0.8794%" y="181" width="12.1417%" height="15" fill="rgb(238,160,17)"/><text x="1.1294%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,933,009 samples, 12.09%)</title><rect x="0.9311%" y="165" width="12.0900%" height="15" fill="rgb(214,148,48)"/><text x="1.1811%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (98,321 samples, 0.15%)</title><rect x="13.0211%" y="181" width="0.1498%" height="15" fill="rgb(232,36,49)"/><text x="13.2711%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (80,551 samples, 0.12%)</title><rect x="13.0482%" y="165" width="0.1228%" height="15" fill="rgb(209,103,24)"/><text x="13.2982%" y="175.50"></text></g><g><title>hir_module_items (85,771 samples, 0.13%)</title><rect x="13.1710%" y="181" width="0.1307%" height="15" fill="rgb(229,88,8)"/><text x="13.4210%" y="191.50"></text></g><g><title>codegen_fn_attrs (101,910 samples, 0.16%)</title><rect x="13.6932%" y="117" width="0.1553%" height="15" fill="rgb(213,181,19)"/><text x="13.9432%" y="127.50"></text></g><g><title>should_inherit_track_caller (167,440 samples, 0.26%)</title><rect x="13.5977%" y="133" width="0.2552%" height="15" fill="rgb(254,191,54)"/><text x="13.8477%" y="143.50"></text></g><g><title>codegen_fn_attrs (282,071 samples, 0.43%)</title><rect x="13.4534%" y="149" width="0.4299%" height="15" fill="rgb(241,83,37)"/><text x="13.7034%" y="159.50"></text></g><g><title>check_mod_attrs (365,054 samples, 0.56%)</title><rect x="13.3272%" y="165" width="0.5563%" height="15" fill="rgb(233,36,39)"/><text x="13.5772%" y="175.50"></text></g><g><title>lookup_deprecation_entry (71,831 samples, 0.11%)</title><rect x="14.1081%" y="149" width="0.1095%" height="15" fill="rgb(226,3,54)"/><text x="14.3581%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (200,442 samples, 0.31%)</title><rect x="13.9945%" y="165" width="0.3055%" height="15" fill="rgb(245,192,40)"/><text x="14.2445%" y="175.50"></text></g><g><title>misc_checking_1 (686,718 samples, 1.05%)</title><rect x="13.3024%" y="181" width="1.0466%" height="15" fill="rgb(238,167,29)"/><text x="13.5524%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (189,683 samples, 0.29%)</title><rect x="14.3514%" y="165" width="0.2891%" height="15" fill="rgb(232,182,51)"/><text x="14.6014%" y="175.50"></text></g><g><title>check_mod_liveness (153,152 samples, 0.23%)</title><rect x="14.4071%" y="149" width="0.2334%" height="15" fill="rgb(231,60,39)"/><text x="14.6571%" y="159.50"></text></g><g><title>misc_checking_2 (518,056 samples, 0.79%)</title><rect x="14.3489%" y="181" width="0.7895%" height="15" fill="rgb(208,69,12)"/><text x="14.5989%" y="191.50"></text></g><g><title>match_checking (326,743 samples, 0.50%)</title><rect x="14.6405%" y="165" width="0.4980%" height="15" fill="rgb(235,93,37)"/><text x="14.8905%" y="175.50"></text></g><g><title>check_match (314,273 samples, 0.48%)</title><rect x="14.6595%" y="149" width="0.4790%" height="15" fill="rgb(213,116,39)"/><text x="14.9095%" y="159.50"></text></g><g><title>check_private_in_public (76,531 samples, 0.12%)</title><rect x="15.1532%" y="165" width="0.1166%" height="15" fill="rgb(222,207,29)"/><text x="15.4032%" y="175.50"></text></g><g><title>death_checking (144,682 samples, 0.22%)</title><rect x="15.2698%" y="165" width="0.2205%" height="15" fill="rgb(206,96,30)"/><text x="15.5198%" y="175.50"></text></g><g><title>eval_to_allocation_raw (121,571 samples, 0.19%)</title><rect x="16.2725%" y="133" width="0.1853%" height="15" fill="rgb(218,138,4)"/><text x="16.5225%" y="143.50"></text></g><g><title>eval_to_allocation_raw (118,011 samples, 0.18%)</title><rect x="16.2779%" y="117" width="0.1798%" height="15" fill="rgb(250,191,14)"/><text x="16.5279%" y="127.50"></text></g><g><title>crate_lints (1,730,169 samples, 2.64%)</title><rect x="15.4926%" y="149" width="2.6368%" height="15" fill="rgb(239,60,40)"/><text x="15.7426%" y="159.50">cr..</text></g><g><title>type_of (1,051,123 samples, 1.60%)</title><rect x="16.5275%" y="133" width="1.6019%" height="15" fill="rgb(206,27,48)"/><text x="16.7775%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (818,989 samples, 1.25%)</title><rect x="16.8813%" y="117" width="1.2481%" height="15" fill="rgb(225,35,8)"/><text x="17.1313%" y="127.50"></text></g><g><title>lint_checking (1,859,971 samples, 2.83%)</title><rect x="15.4903%" y="165" width="2.8346%" height="15" fill="rgb(250,213,24)"/><text x="15.7403%" y="175.50">li..</text></g><g><title>module_lints (128,272 samples, 0.20%)</title><rect x="18.1294%" y="149" width="0.1955%" height="15" fill="rgb(247,123,22)"/><text x="18.3794%" y="159.50"></text></g><g><title>lint_mod (126,232 samples, 0.19%)</title><rect x="18.1325%" y="133" width="0.1924%" height="15" fill="rgb(231,138,38)"/><text x="18.3825%" y="143.50"></text></g><g><title>privacy_access_levels (102,891 samples, 0.16%)</title><rect x="18.3249%" y="165" width="0.1568%" height="15" fill="rgb(231,145,46)"/><text x="18.5749%" y="175.50"></text></g><g><title>privacy_checking_modules (248,102 samples, 0.38%)</title><rect x="18.4817%" y="165" width="0.3781%" height="15" fill="rgb(251,118,11)"/><text x="18.7317%" y="175.50"></text></g><g><title>check_mod_privacy (246,302 samples, 0.38%)</title><rect x="18.4845%" y="149" width="0.3754%" height="15" fill="rgb(217,147,25)"/><text x="18.7345%" y="159.50"></text></g><g><title>misc_checking_3 (2,456,997 samples, 3.74%)</title><rect x="15.1384%" y="181" width="3.7445%" height="15" fill="rgb(247,81,37)"/><text x="15.3884%" y="191.50">misc..</text></g><g><title>impl_trait_ref (152,453 samples, 0.23%)</title><rect x="19.2406%" y="85" width="0.2323%" height="15" fill="rgb(209,12,38)"/><text x="19.4906%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (132,361 samples, 0.20%)</title><rect x="19.2712%" y="69" width="0.2017%" height="15" fill="rgb(227,1,9)"/><text x="19.5212%" y="79.50"></text></g><g><title>adt_destructor (312,684 samples, 0.48%)</title><rect x="19.0345%" y="133" width="0.4765%" height="15" fill="rgb(248,47,43)"/><text x="19.2845%" y="143.50"></text></g><g><title>coherent_trait (302,323 samples, 0.46%)</title><rect x="19.0503%" y="117" width="0.4607%" height="15" fill="rgb(221,10,30)"/><text x="19.3003%" y="127.50"></text></g><g><title>specialization_graph_of (301,093 samples, 0.46%)</title><rect x="19.0521%" y="101" width="0.4589%" height="15" fill="rgb(210,229,1)"/><text x="19.3021%" y="111.50"></text></g><g><title>is_copy_raw (125,601 samples, 0.19%)</title><rect x="19.5110%" y="133" width="0.1914%" height="15" fill="rgb(222,148,37)"/><text x="19.7610%" y="143.50"></text></g><g><title>evaluate_obligation (110,601 samples, 0.17%)</title><rect x="19.5339%" y="117" width="0.1686%" height="15" fill="rgb(234,67,33)"/><text x="19.7839%" y="127.50"></text></g><g><title>param_env (114,551 samples, 0.17%)</title><rect x="19.7024%" y="133" width="0.1746%" height="15" fill="rgb(247,98,35)"/><text x="19.9524%" y="143.50"></text></g><g><title>impl_parent (1,838,663 samples, 2.80%)</title><rect x="24.6572%" y="117" width="2.8021%" height="15" fill="rgb(247,138,52)"/><text x="24.9072%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,109,335 samples, 1.69%)</title><rect x="25.7687%" y="101" width="1.6906%" height="15" fill="rgb(213,79,30)"/><text x="26.0187%" y="111.50"></text></g><g><title>impl_trait_ref (4,627,239 samples, 7.05%)</title><rect x="27.4593%" y="117" width="7.0520%" height="15" fill="rgb(246,177,23)"/><text x="27.7093%" y="127.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,893,799 samples, 5.93%)</title><rect x="28.5771%" y="101" width="5.9342%" height="15" fill="rgb(230,62,27)"/><text x="28.8271%" y="111.50">metadata..</text></g><g><title>coherent_trait (10,837,222 samples, 16.52%)</title><rect x="18.9722%" y="149" width="16.5160%" height="15" fill="rgb(216,154,8)"/><text x="19.2222%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (10,243,494 samples, 15.61%)</title><rect x="19.8770%" y="133" width="15.6112%" height="15" fill="rgb(244,35,45)"/><text x="20.1270%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (639,337 samples, 0.97%)</title><rect x="34.5138%" y="117" width="0.9744%" height="15" fill="rgb(251,115,12)"/><text x="34.7638%" y="127.50"></text></g><g><title>implementations_of_trait (156,501 samples, 0.24%)</title><rect x="35.2497%" y="101" width="0.2385%" height="15" fill="rgb(240,54,50)"/><text x="35.4997%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (129,510 samples, 0.20%)</title><rect x="35.2908%" y="85" width="0.1974%" height="15" fill="rgb(233,84,52)"/><text x="35.5408%" y="95.50"></text></g><g><title>coherence_checking (10,899,522 samples, 16.61%)</title><rect x="18.9372%" y="165" width="16.6110%" height="15" fill="rgb(207,117,47)"/><text x="19.1872%" y="175.50">coherence_checking</text></g><g><title>adt_def (81,442 samples, 0.12%)</title><rect x="44.5165%" y="101" width="0.1241%" height="15" fill="rgb(249,43,39)"/><text x="44.7665%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (80,182 samples, 0.12%)</title><rect x="44.5185%" y="85" width="0.1222%" height="15" fill="rgb(209,38,44)"/><text x="44.7685%" y="95.50"></text></g><g><title>item_attrs (67,802 samples, 0.10%)</title><rect x="44.5373%" y="69" width="0.1033%" height="15" fill="rgb(236,212,23)"/><text x="44.7873%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (66,311 samples, 0.10%)</title><rect x="44.5396%" y="53" width="0.1011%" height="15" fill="rgb(242,79,21)"/><text x="44.7896%" y="63.50"></text></g><g><title>adt_sized_constraint (138,422 samples, 0.21%)</title><rect x="44.5049%" y="117" width="0.2110%" height="15" fill="rgb(211,96,35)"/><text x="44.7549%" y="127.50"></text></g><g><title>associated_item (241,532 samples, 0.37%)</title><rect x="44.8411%" y="101" width="0.3681%" height="15" fill="rgb(253,215,40)"/><text x="45.0911%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (196,052 samples, 0.30%)</title><rect x="44.9104%" y="85" width="0.2988%" height="15" fill="rgb(211,81,21)"/><text x="45.1604%" y="95.50"></text></g><g><title>associated_items (334,423 samples, 0.51%)</title><rect x="44.7180%" y="117" width="0.5097%" height="15" fill="rgb(208,190,38)"/><text x="44.9680%" y="127.50"></text></g><g><title>dropck_outlives (207,053 samples, 0.32%)</title><rect x="45.2718%" y="117" width="0.3156%" height="15" fill="rgb(235,213,38)"/><text x="45.5218%" y="127.50"></text></g><g><title>adt_dtorck_constraint (99,352 samples, 0.15%)</title><rect x="45.4360%" y="101" width="0.1514%" height="15" fill="rgb(237,122,38)"/><text x="45.6860%" y="111.50"></text></g><g><title>generics_of (1,226,415 samples, 1.87%)</title><rect x="51.3789%" y="101" width="1.8691%" height="15" fill="rgb(244,218,35)"/><text x="51.6289%" y="111.50">g..</text></g><g><title>metadata_decode_entry_generics_of (984,762 samples, 1.50%)</title><rect x="51.7471%" y="85" width="1.5008%" height="15" fill="rgb(240,68,47)"/><text x="51.9971%" y="95.50"></text></g><g><title>impl_polarity (142,481 samples, 0.22%)</title><rect x="53.2952%" y="101" width="0.2171%" height="15" fill="rgb(210,16,53)"/><text x="53.5452%" y="111.50"></text></g><g><title>impl_trait_ref (1,071,738 samples, 1.63%)</title><rect x="53.5123%" y="101" width="1.6333%" height="15" fill="rgb(235,124,12)"/><text x="53.7623%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (828,524 samples, 1.26%)</title><rect x="53.8830%" y="85" width="1.2627%" height="15" fill="rgb(224,169,11)"/><text x="54.1330%" y="95.50"></text></g><g><title>opt_def_kind (347,894 samples, 0.53%)</title><rect x="55.5991%" y="85" width="0.5302%" height="15" fill="rgb(250,166,2)"/><text x="55.8491%" y="95.50"></text></g><g><title>metadata_decode_entry_opt_def_kind (81,751 samples, 0.12%)</title><rect x="56.0047%" y="69" width="0.1246%" height="15" fill="rgb(242,216,29)"/><text x="56.2547%" y="79.50"></text></g><g><title>explicit_predicates_of (143,200 samples, 0.22%)</title><rect x="56.4916%" y="69" width="0.2182%" height="15" fill="rgb(230,116,27)"/><text x="56.7416%" y="79.50"></text></g><g><title>predicates_of (1,079,870 samples, 1.65%)</title><rect x="55.2342%" y="101" width="1.6457%" height="15" fill="rgb(228,99,48)"/><text x="55.4842%" y="111.50"></text></g><g><title>predicates_defined_on (492,564 samples, 0.75%)</title><rect x="56.1293%" y="85" width="0.7507%" height="15" fill="rgb(253,11,6)"/><text x="56.3793%" y="95.50"></text></g><g><title>inferred_outlives_of (111,591 samples, 0.17%)</title><rect x="56.7099%" y="69" width="0.1701%" height="15" fill="rgb(247,143,39)"/><text x="56.9599%" y="79.50"></text></g><g><title>specializes (2,496,496 samples, 3.80%)</title><rect x="56.8799%" y="101" width="3.8047%" height="15" fill="rgb(236,97,10)"/><text x="57.1299%" y="111.50">spec..</text></g><g><title>param_env (1,450,257 samples, 2.21%)</title><rect x="58.4744%" y="85" width="2.2102%" height="15" fill="rgb(233,208,19)"/><text x="58.7244%" y="95.50">p..</text></g><g><title>def_span (622,927 samples, 0.95%)</title><rect x="59.7353%" y="69" width="0.9493%" height="15" fill="rgb(216,164,2)"/><text x="59.9853%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (546,035 samples, 0.83%)</title><rect x="59.8525%" y="53" width="0.8322%" height="15" fill="rgb(220,129,5)"/><text x="60.1025%" y="63.50"></text></g><g><title>trait_impls_of (347,713 samples, 0.53%)</title><rect x="60.7060%" y="101" width="0.5299%" height="15" fill="rgb(242,17,10)"/><text x="60.9560%" y="111.50"></text></g><g><title>implementations_of_trait (137,662 samples, 0.21%)</title><rect x="61.0262%" y="85" width="0.2098%" height="15" fill="rgb(242,107,0)"/><text x="61.2762%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (104,612 samples, 0.16%)</title><rect x="61.0765%" y="69" width="0.1594%" height="15" fill="rgb(251,28,31)"/><text x="61.3265%" y="79.50"></text></g><g><title>evaluate_obligation (10,291,859 samples, 15.68%)</title><rect x="45.5874%" y="117" width="15.6849%" height="15" fill="rgb(233,223,10)"/><text x="45.8374%" y="127.50">evaluate_obligation</text></g><g><title>generics_of (94,580 samples, 0.14%)</title><rect x="61.3859%" y="117" width="0.1441%" height="15" fill="rgb(215,21,27)"/><text x="61.6359%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (76,060 samples, 0.12%)</title><rect x="61.4141%" y="101" width="0.1159%" height="15" fill="rgb(232,23,21)"/><text x="61.6641%" y="111.50"></text></g><g><title>impl_item_implementor_ids (79,780 samples, 0.12%)</title><rect x="61.5300%" y="117" width="0.1216%" height="15" fill="rgb(244,5,23)"/><text x="61.7800%" y="127.50"></text></g><g><title>associated_items (68,260 samples, 0.10%)</title><rect x="61.5476%" y="101" width="0.1040%" height="15" fill="rgb(226,81,46)"/><text x="61.7976%" y="111.50"></text></g><g><title>method_autoderef_steps (189,503 samples, 0.29%)</title><rect x="61.8277%" y="117" width="0.2888%" height="15" fill="rgb(247,70,30)"/><text x="62.0777%" y="127.50"></text></g><g><title>evaluate_obligation (103,172 samples, 0.16%)</title><rect x="61.9593%" y="101" width="0.1572%" height="15" fill="rgb(212,68,19)"/><text x="62.2093%" y="111.50"></text></g><g><title>predicates_of (184,452 samples, 0.28%)</title><rect x="62.1425%" y="117" width="0.2811%" height="15" fill="rgb(240,187,13)"/><text x="62.3925%" y="127.50"></text></g><g><title>predicates_defined_on (126,570 samples, 0.19%)</title><rect x="62.2308%" y="101" width="0.1929%" height="15" fill="rgb(223,113,26)"/><text x="62.4808%" y="111.50"></text></g><g><title>specializes (196,801 samples, 0.30%)</title><rect x="62.4237%" y="117" width="0.2999%" height="15" fill="rgb(206,192,2)"/><text x="62.6737%" y="127.50"></text></g><g><title>associated_item (152,771 samples, 0.23%)</title><rect x="65.8237%" y="85" width="0.2328%" height="15" fill="rgb(241,108,4)"/><text x="66.0737%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (124,251 samples, 0.19%)</title><rect x="65.8672%" y="69" width="0.1894%" height="15" fill="rgb(247,173,49)"/><text x="66.1172%" y="79.50"></text></g><g><title>associated_items (207,371 samples, 0.32%)</title><rect x="65.7597%" y="101" width="0.3160%" height="15" fill="rgb(224,114,35)"/><text x="66.0097%" y="111.50"></text></g><g><title>predicates_of (88,991 samples, 0.14%)</title><rect x="66.9194%" y="85" width="0.1356%" height="15" fill="rgb(245,159,27)"/><text x="67.1694%" y="95.50"></text></g><g><title>specializes (290,743 samples, 0.44%)</title><rect x="67.0550%" y="85" width="0.4431%" height="15" fill="rgb(245,172,44)"/><text x="67.3050%" y="95.50"></text></g><g><title>param_env (175,721 samples, 0.27%)</title><rect x="67.2303%" y="69" width="0.2678%" height="15" fill="rgb(236,23,11)"/><text x="67.4803%" y="79.50"></text></g><g><title>def_span (96,621 samples, 0.15%)</title><rect x="67.3509%" y="53" width="0.1473%" height="15" fill="rgb(205,117,38)"/><text x="67.6009%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (89,371 samples, 0.14%)</title><rect x="67.3619%" y="37" width="0.1362%" height="15" fill="rgb(237,72,25)"/><text x="67.6119%" y="47.50"></text></g><g><title>trait_impls_of (163,312 samples, 0.25%)</title><rect x="67.5111%" y="85" width="0.2489%" height="15" fill="rgb(244,70,9)"/><text x="67.7611%" y="95.50"></text></g><g><title>implementations_of_trait (74,650 samples, 0.11%)</title><rect x="67.6462%" y="69" width="0.1138%" height="15" fill="rgb(217,125,39)"/><text x="67.8962%" y="79.50"></text></g><g><title>evaluate_obligation (1,068,383 samples, 1.63%)</title><rect x="66.1331%" y="101" width="1.6282%" height="15" fill="rgb(235,36,10)"/><text x="66.3831%" y="111.50"></text></g><g><title>is_copy_raw (86,331 samples, 0.13%)</title><rect x="67.9470%" y="101" width="0.1316%" height="15" fill="rgb(251,123,47)"/><text x="68.1970%" y="111.50"></text></g><g><title>evaluate_obligation (67,221 samples, 0.10%)</title><rect x="67.9761%" y="85" width="0.1024%" height="15" fill="rgb(221,13,13)"/><text x="68.2261%" y="95.50"></text></g><g><title>method_autoderef_steps (83,462 samples, 0.13%)</title><rect x="68.1046%" y="101" width="0.1272%" height="15" fill="rgb(238,131,9)"/><text x="68.3546%" y="111.50"></text></g><g><title>predicates_of (88,653 samples, 0.14%)</title><rect x="68.2383%" y="101" width="0.1351%" height="15" fill="rgb(211,50,8)"/><text x="68.4883%" y="111.50"></text></g><g><title>typeck (3,711,271 samples, 5.66%)</title><rect x="62.8032%" y="117" width="5.6560%" height="15" fill="rgb(245,182,24)"/><text x="63.0532%" y="127.50">typeck</text></g><g><title>item_bodies_checking (21,594,900 samples, 32.91%)</title><rect x="35.5781%" y="165" width="32.9108%" height="15" fill="rgb(242,14,37)"/><text x="35.8281%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,591,920 samples, 32.91%)</title><rect x="35.5826%" y="149" width="32.9063%" height="15" fill="rgb(246,228,12)"/><text x="35.8326%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (21,570,100 samples, 32.87%)</title><rect x="35.6159%" y="133" width="32.8730%" height="15" fill="rgb(213,55,15)"/><text x="35.8659%" y="143.50">typeck</text></g><g><title>item_types_checking (789,239 samples, 1.20%)</title><rect x="68.4889%" y="165" width="1.2028%" height="15" fill="rgb(209,9,3)"/><text x="68.7389%" y="175.50"></text></g><g><title>check_mod_item_types (786,839 samples, 1.20%)</title><rect x="68.4926%" y="149" width="1.1992%" height="15" fill="rgb(230,59,30)"/><text x="68.7426%" y="159.50"></text></g><g><title>typeck (147,422 samples, 0.22%)</title><rect x="69.4670%" y="133" width="0.2247%" height="15" fill="rgb(209,121,21)"/><text x="69.7170%" y="143.50"></text></g><g><title>fn_sig (78,690 samples, 0.12%)</title><rect x="69.9042%" y="133" width="0.1199%" height="15" fill="rgb(220,109,13)"/><text x="70.1542%" y="143.50"></text></g><g><title>is_late_bound_map (246,652 samples, 0.38%)</title><rect x="70.1243%" y="117" width="0.3759%" height="15" fill="rgb(232,18,1)"/><text x="70.3743%" y="127.50"></text></g><g><title>resolve_lifetimes (237,992 samples, 0.36%)</title><rect x="70.1375%" y="101" width="0.3627%" height="15" fill="rgb(215,41,42)"/><text x="70.3875%" y="111.50"></text></g><g><title>named_region_map (69,561 samples, 0.11%)</title><rect x="70.5002%" y="117" width="0.1060%" height="15" fill="rgb(224,123,36)"/><text x="70.7502%" y="127.50"></text></g><g><title>generics_of (392,363 samples, 0.60%)</title><rect x="70.0241%" y="133" width="0.5980%" height="15" fill="rgb(240,125,3)"/><text x="70.2741%" y="143.50"></text></g><g><title>explicit_predicates_of (134,252 samples, 0.20%)</title><rect x="70.7551%" y="101" width="0.2046%" height="15" fill="rgb(205,98,50)"/><text x="71.0051%" y="111.50"></text></g><g><title>predicates_of (327,434 samples, 0.50%)</title><rect x="70.6762%" y="133" width="0.4990%" height="15" fill="rgb(205,185,37)"/><text x="70.9262%" y="143.50"></text></g><g><title>predicates_defined_on (305,844 samples, 0.47%)</title><rect x="70.7091%" y="117" width="0.4661%" height="15" fill="rgb(238,207,15)"/><text x="70.9591%" y="127.50"></text></g><g><title>inferred_outlives_of (141,381 samples, 0.22%)</title><rect x="70.9597%" y="101" width="0.2155%" height="15" fill="rgb(213,199,42)"/><text x="71.2097%" y="111.50"></text></g><g><title>inferred_outlives_crate (129,441 samples, 0.20%)</title><rect x="70.9779%" y="85" width="0.1973%" height="15" fill="rgb(235,201,11)"/><text x="71.2279%" y="95.50"></text></g><g><title>type_collecting (1,097,772 samples, 1.67%)</title><rect x="69.6934%" y="165" width="1.6730%" height="15" fill="rgb(207,46,11)"/><text x="69.9434%" y="175.50"></text></g><g><title>collect_mod_item_types (1,091,552 samples, 1.66%)</title><rect x="69.7029%" y="149" width="1.6635%" height="15" fill="rgb(241,35,35)"/><text x="69.9529%" y="159.50"></text></g><g><title>type_of (86,032 samples, 0.13%)</title><rect x="71.2353%" y="133" width="0.1311%" height="15" fill="rgb(243,32,47)"/><text x="71.4853%" y="143.50"></text></g><g><title>evaluate_obligation (291,042 samples, 0.44%)</title><rect x="72.4370%" y="133" width="0.4436%" height="15" fill="rgb(247,202,23)"/><text x="72.6870%" y="143.50"></text></g><g><title>implied_outlives_bounds (120,790 samples, 0.18%)</title><rect x="72.8805%" y="133" width="0.1841%" height="15" fill="rgb(219,102,11)"/><text x="73.1305%" y="143.50"></text></g><g><title>param_env (96,222 samples, 0.15%)</title><rect x="73.0646%" y="133" width="0.1466%" height="15" fill="rgb(243,110,44)"/><text x="73.3146%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,251,645 samples, 1.91%)</title><rect x="71.4819%" y="149" width="1.9075%" height="15" fill="rgb(222,74,54)"/><text x="71.7319%" y="159.50">c..</text></g><g><title>region_scope_tree (108,762 samples, 0.17%)</title><rect x="73.2237%" y="133" width="0.1658%" height="15" fill="rgb(216,99,12)"/><text x="73.4737%" y="143.50"></text></g><g><title>evaluate_obligation (161,621 samples, 0.25%)</title><rect x="74.4236%" y="133" width="0.2463%" height="15" fill="rgb(226,22,26)"/><text x="74.6736%" y="143.50"></text></g><g><title>param_env (121,643 samples, 0.19%)</title><rect x="74.7451%" y="133" width="0.1854%" height="15" fill="rgb(217,163,10)"/><text x="74.9951%" y="143.50"></text></g><g><title>check_item_well_formed (1,139,592 samples, 1.74%)</title><rect x="73.3894%" y="149" width="1.7367%" height="15" fill="rgb(213,25,53)"/><text x="73.6394%" y="159.50"></text></g><g><title>evaluate_obligation (105,681 samples, 0.16%)</title><rect x="75.3878%" y="133" width="0.1611%" height="15" fill="rgb(252,105,26)"/><text x="75.6378%" y="143.50"></text></g><g><title>analysis (49,252,241 samples, 75.06%)</title><rect x="0.6748%" y="197" width="75.0609%" height="15" fill="rgb(220,39,43)"/><text x="0.9248%" y="207.50">analysis</text></g><g><title>type_check_crate (37,304,726 samples, 56.85%)</title><rect x="18.8829%" y="181" width="56.8528%" height="15" fill="rgb(229,68,48)"/><text x="19.1329%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,865,072 samples, 4.37%)</title><rect x="71.3693%" y="165" width="4.3664%" height="15" fill="rgb(252,8,32)"/><text x="71.6193%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (399,934 samples, 0.61%)</title><rect x="75.1262%" y="149" width="0.6095%" height="15" fill="rgb(223,20,43)"/><text x="75.3762%" y="159.50"></text></g><g><title>codegen_crate (465,266 samples, 0.71%)</title><rect x="75.7463%" y="197" width="0.7091%" height="15" fill="rgb(229,81,49)"/><text x="75.9963%" y="207.50"></text></g><g><title>metadata_load_macro (76,212 samples, 0.12%)</title><rect x="84.6112%" y="149" width="0.1161%" height="15" fill="rgb(236,28,36)"/><text x="84.8612%" y="159.50"></text></g><g><title>macro_expand_crate (6,449,271 samples, 9.83%)</title><rect x="76.8810%" y="181" width="9.8287%" height="15" fill="rgb(249,185,26)"/><text x="77.1310%" y="191.50">macro_expand_c..</text></g><g><title>expand_crate (6,439,771 samples, 9.81%)</title><rect x="76.8955%" y="165" width="9.8143%" height="15" fill="rgb(249,174,33)"/><text x="77.1455%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,300,805 samples, 1.98%)</title><rect x="84.7273%" y="149" width="1.9824%" height="15" fill="rgb(233,201,37)"/><text x="84.9773%" y="159.50">m..</text></g><g><title>metadata_register_crate (469,824 samples, 0.72%)</title><rect x="85.9937%" y="133" width="0.7160%" height="15" fill="rgb(221,78,26)"/><text x="86.2437%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (106,651 samples, 0.16%)</title><rect x="86.7140%" y="181" width="0.1625%" height="15" fill="rgb(250,127,30)"/><text x="86.9640%" y="191.50"></text></g><g><title>finalize_macro_resolutions (83,571 samples, 0.13%)</title><rect x="86.9154%" y="165" width="0.1274%" height="15" fill="rgb(230,49,44)"/><text x="87.1654%" y="175.50"></text></g><g><title>late_resolve_crate (856,960 samples, 1.31%)</title><rect x="87.0428%" y="165" width="1.3060%" height="15" fill="rgb(229,67,23)"/><text x="87.2928%" y="175.50"></text></g><g><title>configure_and_expand (7,849,097 samples, 11.96%)</title><rect x="76.4554%" y="197" width="11.9621%" height="15" fill="rgb(249,83,47)"/><text x="76.7054%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (1,011,091 samples, 1.54%)</title><rect x="86.8765%" y="181" width="1.5409%" height="15" fill="rgb(215,43,3)"/><text x="87.1265%" y="191.50"></text></g><g><title>drop_ast (66,451 samples, 0.10%)</title><rect x="88.4175%" y="197" width="0.1013%" height="15" fill="rgb(238,154,13)"/><text x="88.6675%" y="207.50"></text></g><g><title>early_lint_checks (142,672 samples, 0.22%)</title><rect x="88.5394%" y="197" width="0.2174%" height="15" fill="rgb(219,56,2)"/><text x="88.7894%" y="207.50"></text></g><g><title>free_global_ctxt (3,242,116 samples, 4.94%)</title><rect x="88.7569%" y="197" width="4.9410%" height="15" fill="rgb(233,0,4)"/><text x="89.0069%" y="207.50">free_g..</text></g><g><title>crate_hash (67,140 samples, 0.10%)</title><rect x="94.3604%" y="181" width="0.1023%" height="15" fill="rgb(235,30,7)"/><text x="94.6104%" y="191.50"></text></g><g><title>generate_crate_metadata (602,666 samples, 0.92%)</title><rect x="93.6979%" y="197" width="0.9185%" height="15" fill="rgb(250,79,13)"/><text x="93.9479%" y="207.50"></text></g><g><title>hir_lowering (891,990 samples, 1.36%)</title><rect x="94.6163%" y="197" width="1.3594%" height="15" fill="rgb(211,146,34)"/><text x="94.8663%" y="207.50"></text></g><g><title>parse_crate (1,217,953 samples, 1.86%)</title><rect x="96.0535%" y="197" width="1.8562%" height="15" fill="rgb(228,22,38)"/><text x="96.3035%" y="207.50">p..</text></g><g><title>prepare_outputs (191,412 samples, 0.29%)</title><rect x="97.9173%" y="197" width="0.2917%" height="15" fill="rgb(235,168,5)"/><text x="98.1673%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (814,879 samples, 1.24%)</title><rect x="98.2090%" y="197" width="1.2419%" height="15" fill="rgb(221,155,16)"/><text x="98.4590%" y="207.50"></text></g><g><title>setup_global_ctxt (80,021 samples, 0.12%)</title><rect x="99.4672%" y="197" width="0.1220%" height="15" fill="rgb(215,215,53)"/><text x="99.7172%" y="207.50"></text></g><g><title>all (65,616,392 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (65,616,392 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (269,573 samples, 0.41%)</title><rect x="99.5892%" y="197" width="0.4108%" height="15" fill="rgb(227,97,0)"/><text x="99.8392%" y="207.50"></text></g></svg></svg>