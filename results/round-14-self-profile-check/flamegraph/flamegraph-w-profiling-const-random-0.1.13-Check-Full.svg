<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>hir_owner (15,520 samples, 0.13%)</title><rect x="3.9427%" y="213" width="0.1289%" height="15" fill="rgb(227,0,7)"/><text x="4.1927%" y="223.50"></text></g><g><title>hir_module_items (61,111 samples, 0.51%)</title><rect x="3.5679%" y="229" width="0.5074%" height="15" fill="rgb(217,0,24)"/><text x="3.8179%" y="239.50"></text></g><g><title>check_mod_attrs (37,780 samples, 0.31%)</title><rect x="4.2420%" y="213" width="0.3137%" height="15" fill="rgb(221,193,54)"/><text x="4.4920%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (33,520 samples, 0.28%)</title><rect x="4.6394%" y="213" width="0.2783%" height="15" fill="rgb(248,212,6)"/><text x="4.8894%" y="223.50"></text></g><g><title>looking_for_derive_registrar (15,200 samples, 0.13%)</title><rect x="4.9278%" y="213" width="0.1262%" height="15" fill="rgb(208,68,35)"/><text x="5.1778%" y="223.50"></text></g><g><title>misc_checking_1 (120,692 samples, 1.00%)</title><rect x="4.0783%" y="229" width="1.0021%" height="15" fill="rgb(232,128,0)"/><text x="4.3283%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (17,760 samples, 0.15%)</title><rect x="5.0898%" y="213" width="0.1475%" height="15" fill="rgb(207,160,47)"/><text x="5.3398%" y="223.50"></text></g><g><title>misc_checking_2 (26,370 samples, 0.22%)</title><rect x="5.0804%" y="229" width="0.2190%" height="15" fill="rgb(228,23,34)"/><text x="5.3304%" y="239.50"></text></g><g><title>codegen_fn_attrs (31,450 samples, 0.26%)</title><rect x="5.6644%" y="197" width="0.2611%" height="15" fill="rgb(218,30,26)"/><text x="5.9144%" y="207.50"></text></g><g><title>supported_target_features (16,500 samples, 0.14%)</title><rect x="5.7885%" y="181" width="0.1370%" height="15" fill="rgb(220,122,19)"/><text x="6.0385%" y="191.50"></text></g><g><title>death_checking (70,891 samples, 0.59%)</title><rect x="5.4342%" y="213" width="0.5886%" height="15" fill="rgb(250,228,42)"/><text x="5.6842%" y="223.50"></text></g><g><title>crate_lints (82,161 samples, 0.68%)</title><rect x="6.0328%" y="197" width="0.6822%" height="15" fill="rgb(240,193,28)"/><text x="6.2828%" y="207.50"></text></g><g><title>param_env (40,710 samples, 0.34%)</title><rect x="6.3770%" y="181" width="0.3380%" height="15" fill="rgb(216,20,37)"/><text x="6.6270%" y="191.50"></text></g><g><title>predicates_of (17,620 samples, 0.15%)</title><rect x="6.5687%" y="165" width="0.1463%" height="15" fill="rgb(206,188,39)"/><text x="6.8187%" y="175.50"></text></g><g><title>predicates_defined_on (14,750 samples, 0.12%)</title><rect x="6.5925%" y="149" width="0.1225%" height="15" fill="rgb(217,207,13)"/><text x="6.8425%" y="159.50"></text></g><g><title>lint_checking (109,341 samples, 0.91%)</title><rect x="6.0228%" y="213" width="0.9079%" height="15" fill="rgb(231,73,38)"/><text x="6.2728%" y="223.50"></text></g><g><title>module_lints (25,980 samples, 0.22%)</title><rect x="6.7150%" y="197" width="0.2157%" height="15" fill="rgb(225,20,46)"/><text x="6.9650%" y="207.50"></text></g><g><title>lint_mod (24,450 samples, 0.20%)</title><rect x="6.7277%" y="181" width="0.2030%" height="15" fill="rgb(210,31,41)"/><text x="6.9777%" y="191.50"></text></g><g><title>privacy_access_levels (23,850 samples, 0.20%)</title><rect x="6.9307%" y="213" width="0.1980%" height="15" fill="rgb(221,200,47)"/><text x="7.1807%" y="223.50"></text></g><g><title>misc_checking_3 (247,592 samples, 2.06%)</title><rect x="5.2994%" y="229" width="2.0558%" height="15" fill="rgb(226,26,5)"/><text x="5.5494%" y="239.50">m..</text></g><g><title>unused_lib_feature_checking (20,830 samples, 0.17%)</title><rect x="7.1822%" y="213" width="0.1730%" height="15" fill="rgb(249,33,26)"/><text x="7.4322%" y="223.50"></text></g><g><title>coherence_checking (18,250 samples, 0.15%)</title><rect x="7.4614%" y="213" width="0.1515%" height="15" fill="rgb(235,183,28)"/><text x="7.7114%" y="223.50"></text></g><g><title>impl_trait_ref (27,071 samples, 0.22%)</title><rect x="8.0399%" y="133" width="0.2248%" height="15" fill="rgb(221,5,38)"/><text x="8.2899%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (25,401 samples, 0.21%)</title><rect x="8.0538%" y="117" width="0.2109%" height="15" fill="rgb(247,18,42)"/><text x="8.3038%" y="127.50"></text></g><g><title>item_types_checking (81,031 samples, 0.67%)</title><rect x="7.6490%" y="213" width="0.6728%" height="15" fill="rgb(241,131,45)"/><text x="7.8990%" y="223.50"></text></g><g><title>check_mod_item_types (79,921 samples, 0.66%)</title><rect x="7.6582%" y="197" width="0.6636%" height="15" fill="rgb(249,31,29)"/><text x="7.9082%" y="207.50"></text></g><g><title>adt_destructor (67,601 samples, 0.56%)</title><rect x="7.7605%" y="181" width="0.5613%" height="15" fill="rgb(225,111,53)"/><text x="8.0105%" y="191.50"></text></g><g><title>coherent_trait (63,881 samples, 0.53%)</title><rect x="7.7914%" y="165" width="0.5304%" height="15" fill="rgb(238,160,17)"/><text x="8.0414%" y="175.50"></text></g><g><title>specialization_graph_of (60,481 samples, 0.50%)</title><rect x="7.8196%" y="149" width="0.5022%" height="15" fill="rgb(214,148,48)"/><text x="8.0696%" y="159.50"></text></g><g><title>is_mir_available (43,120 samples, 0.36%)</title><rect x="9.9862%" y="133" width="0.3580%" height="15" fill="rgb(232,36,49)"/><text x="10.2362%" y="143.50"></text></g><g><title>mir_keys (36,370 samples, 0.30%)</title><rect x="10.0422%" y="117" width="0.3020%" height="15" fill="rgb(209,103,24)"/><text x="10.2922%" y="127.50"></text></g><g><title>layout_of (27,800 samples, 0.23%)</title><rect x="10.3442%" y="133" width="0.2308%" height="15" fill="rgb(229,88,8)"/><text x="10.5942%" y="143.50"></text></g><g><title>layout_of (18,450 samples, 0.15%)</title><rect x="10.4218%" y="117" width="0.1532%" height="15" fill="rgb(213,181,19)"/><text x="10.6718%" y="127.50"></text></g><g><title>is_sized_raw (12,770 samples, 0.11%)</title><rect x="10.4690%" y="101" width="0.1060%" height="15" fill="rgb(254,191,54)"/><text x="10.7190%" y="111.50"></text></g><g><title>predicates_of (16,800 samples, 0.14%)</title><rect x="12.2424%" y="37" width="0.1395%" height="15" fill="rgb(241,83,37)"/><text x="12.4924%" y="47.50"></text></g><g><title>is_copy_raw (101,331 samples, 0.84%)</title><rect x="11.7639%" y="69" width="0.8414%" height="15" fill="rgb(233,36,39)"/><text x="12.0139%" y="79.50"></text></g><g><title>evaluate_obligation (95,721 samples, 0.79%)</title><rect x="11.8104%" y="53" width="0.7948%" height="15" fill="rgb(226,3,54)"/><text x="12.0604%" y="63.50"></text></g><g><title>trait_impls_of (26,901 samples, 0.22%)</title><rect x="12.3819%" y="37" width="0.2234%" height="15" fill="rgb(245,192,40)"/><text x="12.6319%" y="47.50"></text></g><g><title>thir_body (46,650 samples, 0.39%)</title><rect x="12.6168%" y="69" width="0.3873%" height="15" fill="rgb(238,167,29)"/><text x="12.8668%" y="79.50"></text></g><g><title>lit_to_const (22,920 samples, 0.19%)</title><rect x="12.8138%" y="53" width="0.1903%" height="15" fill="rgb(232,182,51)"/><text x="13.0638%" y="63.50"></text></g><g><title>mir_const_qualif (297,463 samples, 2.47%)</title><rect x="10.5750%" y="133" width="2.4698%" height="15" fill="rgb(231,60,39)"/><text x="10.8250%" y="143.50">mi..</text></g><g><title>mir_const (277,173 samples, 2.30%)</title><rect x="10.7435%" y="117" width="2.3014%" height="15" fill="rgb(208,69,12)"/><text x="10.9935%" y="127.50">m..</text></g><g><title>unsafety_check_result (233,133 samples, 1.94%)</title><rect x="11.1092%" y="101" width="1.9357%" height="15" fill="rgb(235,93,37)"/><text x="11.3592%" y="111.50">u..</text></g><g><title>mir_built (214,053 samples, 1.78%)</title><rect x="11.2676%" y="85" width="1.7773%" height="15" fill="rgb(213,116,39)"/><text x="11.5176%" y="95.50">m..</text></g><g><title>implied_outlives_bounds (30,361 samples, 0.25%)</title><rect x="16.9570%" y="85" width="0.2521%" height="15" fill="rgb(222,207,29)"/><text x="17.2070%" y="95.50"></text></g><g><title>is_late_bound_map (22,770 samples, 0.19%)</title><rect x="17.2317%" y="69" width="0.1891%" height="15" fill="rgb(206,96,30)"/><text x="17.4817%" y="79.50"></text></g><g><title>resolve_lifetimes (18,890 samples, 0.16%)</title><rect x="17.2639%" y="53" width="0.1568%" height="15" fill="rgb(218,138,4)"/><text x="17.5139%" y="63.50"></text></g><g><title>is_late_bound_map (25,720 samples, 0.21%)</title><rect x="17.2091%" y="85" width="0.2136%" height="15" fill="rgb(250,191,14)"/><text x="17.4591%" y="95.50"></text></g><g><title>mir_promoted (22,920 samples, 0.19%)</title><rect x="17.4227%" y="85" width="0.1903%" height="15" fill="rgb(239,60,40)"/><text x="17.6727%" y="95.50"></text></g><g><title>mir_borrowck (428,624 samples, 3.56%)</title><rect x="14.1450%" y="101" width="3.5589%" height="15" fill="rgb(206,27,48)"/><text x="14.3950%" y="111.50">mir_..</text></g><g><title>mir_for_ctfe (561,976 samples, 4.67%)</title><rect x="13.0449%" y="133" width="4.6661%" height="15" fill="rgb(225,35,8)"/><text x="13.2949%" y="143.50">mir_f..</text></g><g><title>mir_drops_elaborated_and_const_checked (521,375 samples, 4.33%)</title><rect x="13.3820%" y="117" width="4.3290%" height="15" fill="rgb(250,213,24)"/><text x="13.6320%" y="127.50">mir_d..</text></g><g><title>evaluate_obligation (58,591 samples, 0.49%)</title><rect x="19.9360%" y="117" width="0.4865%" height="15" fill="rgb(247,123,22)"/><text x="20.1860%" y="127.50"></text></g><g><title>impl_trait_ref (80,841 samples, 0.67%)</title><rect x="20.4225%" y="117" width="0.6712%" height="15" fill="rgb(231,138,38)"/><text x="20.6725%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (76,731 samples, 0.64%)</title><rect x="20.4566%" y="101" width="0.6371%" height="15" fill="rgb(231,145,46)"/><text x="20.7066%" y="111.50"></text></g><g><title>trait_impls_of (21,460 samples, 0.18%)</title><rect x="21.2239%" y="117" width="0.1782%" height="15" fill="rgb(251,118,11)"/><text x="21.4739%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,492,706 samples, 12.39%)</title><rect x="9.0549%" y="181" width="12.3940%" height="15" fill="rgb(217,147,25)"/><text x="9.3049%" y="191.50">eval_to_const_value..</text></g><g><title>eval_to_const_value_raw (1,478,796 samples, 12.28%)</title><rect x="9.1704%" y="165" width="12.2785%" height="15" fill="rgb(247,81,37)"/><text x="9.4204%" y="175.50">eval_to_const_valu..</text></g><g><title>eval_to_allocation_raw (1,474,276 samples, 12.24%)</title><rect x="9.2079%" y="149" width="12.2410%" height="15" fill="rgb(209,12,38)"/><text x="9.4579%" y="159.50">eval_to_allocation..</text></g><g><title>typeck (449,795 samples, 3.73%)</title><rect x="17.7142%" y="133" width="3.7347%" height="15" fill="rgb(227,1,9)"/><text x="17.9642%" y="143.50">type..</text></g><g><title>generics_of (22,400 samples, 0.19%)</title><rect x="21.4489%" y="181" width="0.1860%" height="15" fill="rgb(248,47,43)"/><text x="21.6989%" y="191.50"></text></g><g><title>param_env (131,531 samples, 1.09%)</title><rect x="21.6728%" y="181" width="1.0921%" height="15" fill="rgb(221,10,30)"/><text x="21.9228%" y="191.50"></text></g><g><title>explicit_predicates_of (18,320 samples, 0.15%)</title><rect x="22.8532%" y="149" width="0.1521%" height="15" fill="rgb(210,229,1)"/><text x="23.1032%" y="159.50"></text></g><g><title>predicates_of (50,341 samples, 0.42%)</title><rect x="22.7649%" y="181" width="0.4180%" height="15" fill="rgb(222,148,37)"/><text x="23.0149%" y="191.50"></text></g><g><title>predicates_defined_on (47,001 samples, 0.39%)</title><rect x="22.7926%" y="165" width="0.3903%" height="15" fill="rgb(234,67,33)"/><text x="23.0426%" y="175.50"></text></g><g><title>inferred_outlives_of (21,381 samples, 0.18%)</title><rect x="23.0054%" y="149" width="0.1775%" height="15" fill="rgb(247,98,35)"/><text x="23.2554%" y="159.50"></text></g><g><title>inferred_outlives_crate (13,601 samples, 0.11%)</title><rect x="23.0700%" y="133" width="0.1129%" height="15" fill="rgb(247,138,52)"/><text x="23.3200%" y="143.50"></text></g><g><title>type_collecting (1,871,530 samples, 15.54%)</title><rect x="8.3302%" y="213" width="15.5394%" height="15" fill="rgb(213,79,30)"/><text x="8.5802%" y="223.50">type_collecting</text></g><g><title>collect_mod_item_types (1,857,970 samples, 15.43%)</title><rect x="8.4428%" y="197" width="15.4268%" height="15" fill="rgb(246,177,23)"/><text x="8.6928%" y="207.50">collect_mod_item_types</text></g><g><title>type_of (82,701 samples, 0.69%)</title><rect x="23.1829%" y="181" width="0.6867%" height="15" fill="rgb(230,62,27)"/><text x="23.4329%" y="191.50"></text></g><g><title>adt_def (63,461 samples, 0.53%)</title><rect x="23.3426%" y="165" width="0.5269%" height="15" fill="rgb(216,154,8)"/><text x="23.5926%" y="175.50"></text></g><g><title>get_lang_items (30,430 samples, 0.25%)</title><rect x="23.6169%" y="149" width="0.2527%" height="15" fill="rgb(244,35,45)"/><text x="23.8669%" y="159.50"></text></g><g><title>analysis (2,588,268 samples, 21.49%)</title><rect x="2.9225%" y="245" width="21.4905%" height="15" fill="rgb(251,115,12)"/><text x="3.1725%" y="255.50">analysis</text></g><g><title>type_check_crate (2,054,402 samples, 17.06%)</title><rect x="7.3552%" y="229" width="17.0578%" height="15" fill="rgb(240,54,50)"/><text x="7.6052%" y="239.50">type_check_crate</text></g><g><title>wf_checking (65,251 samples, 0.54%)</title><rect x="23.8711%" y="213" width="0.5418%" height="15" fill="rgb(233,84,52)"/><text x="24.1211%" y="223.50"></text></g><g><title>check_item_well_formed (55,961 samples, 0.46%)</title><rect x="23.9483%" y="197" width="0.4646%" height="15" fill="rgb(207,117,47)"/><text x="24.1983%" y="207.50"></text></g><g><title>codegen_crate (275,463 samples, 2.29%)</title><rect x="24.4621%" y="245" width="2.2872%" height="15" fill="rgb(249,43,39)"/><text x="24.7121%" y="255.50">c..</text></g><g><title>AST_validation (31,221 samples, 0.26%)</title><rect x="27.7924%" y="229" width="0.2592%" height="15" fill="rgb(209,38,44)"/><text x="28.0424%" y="239.50"></text></g><g><title>complete_gated_feature_checking (16,990 samples, 0.14%)</title><rect x="28.0516%" y="229" width="0.1411%" height="15" fill="rgb(236,212,23)"/><text x="28.3016%" y="239.50"></text></g><g><title>crate_injection (59,341 samples, 0.49%)</title><rect x="28.1927%" y="229" width="0.4927%" height="15" fill="rgb(242,79,21)"/><text x="28.4427%" y="239.50"></text></g><g><title>metadata_load_macro (45,052 samples, 0.37%)</title><rect x="72.3959%" y="197" width="0.3741%" height="15" fill="rgb(211,96,35)"/><text x="72.6459%" y="207.50"></text></g><g><title>macro_expand_crate (6,149,378 samples, 51.06%)</title><rect x="28.6854%" y="229" width="51.0584%" height="15" fill="rgb(253,215,40)"/><text x="28.9354%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (6,134,598 samples, 50.94%)</title><rect x="28.8081%" y="213" width="50.9357%" height="15" fill="rgb(211,81,21)"/><text x="29.0581%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (839,918 samples, 6.97%)</title><rect x="72.7699%" y="197" width="6.9739%" height="15" fill="rgb(208,190,38)"/><text x="73.0199%" y="207.50">metadata_..</text></g><g><title>pre_AST_expansion_lint_checks (32,280 samples, 0.27%)</title><rect x="79.7699%" y="229" width="0.2680%" height="15" fill="rgb(235,213,38)"/><text x="80.0199%" y="239.50"></text></g><g><title>finalize_imports (16,170 samples, 0.13%)</title><rect x="80.0646%" y="213" width="0.1343%" height="15" fill="rgb(237,122,38)"/><text x="80.3146%" y="223.50"></text></g><g><title>finalize_macro_resolutions (13,090 samples, 0.11%)</title><rect x="80.1989%" y="213" width="0.1087%" height="15" fill="rgb(244,218,35)"/><text x="80.4489%" y="223.50"></text></g><g><title>late_resolve_crate (130,912 samples, 1.09%)</title><rect x="80.3076%" y="213" width="1.0870%" height="15" fill="rgb(240,68,47)"/><text x="80.5576%" y="223.50"></text></g><g><title>configure_and_expand (6,601,453 samples, 54.81%)</title><rect x="26.7493%" y="245" width="54.8120%" height="15" fill="rgb(210,16,53)"/><text x="26.9993%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (183,482 samples, 1.52%)</title><rect x="80.0379%" y="229" width="1.5235%" height="15" fill="rgb(235,124,12)"/><text x="80.2879%" y="239.50"></text></g><g><title>drop_ast (17,040 samples, 0.14%)</title><rect x="81.5614%" y="245" width="0.1415%" height="15" fill="rgb(224,169,11)"/><text x="81.8114%" y="255.50"></text></g><g><title>drop_compiler (21,160 samples, 0.18%)</title><rect x="81.7028%" y="245" width="0.1757%" height="15" fill="rgb(250,166,2)"/><text x="81.9528%" y="255.50"></text></g><g><title>early_lint_checks (48,950 samples, 0.41%)</title><rect x="81.8785%" y="245" width="0.4064%" height="15" fill="rgb(242,216,29)"/><text x="82.1285%" y="255.50"></text></g><g><title>free_global_ctxt (698,988 samples, 5.80%)</title><rect x="82.2850%" y="245" width="5.8037%" height="15" fill="rgb(230,116,27)"/><text x="82.5350%" y="255.50">free_gl..</text></g><g><title>crate_hash (61,992 samples, 0.51%)</title><rect x="89.8469%" y="229" width="0.5147%" height="15" fill="rgb(228,99,48)"/><text x="90.0969%" y="239.50"></text></g><g><title>generate_crate_metadata (305,894 samples, 2.54%)</title><rect x="88.0887%" y="245" width="2.5398%" height="15" fill="rgb(253,11,6)"/><text x="88.3387%" y="255.50">ge..</text></g><g><title>hir_lowering (176,652 samples, 1.47%)</title><rect x="90.6285%" y="245" width="1.4667%" height="15" fill="rgb(247,143,39)"/><text x="90.8785%" y="255.50"></text></g><g><title>finish_ongoing_codegen (15,380 samples, 0.13%)</title><rect x="92.1634%" y="229" width="0.1277%" height="15" fill="rgb(236,97,10)"/><text x="92.4134%" y="239.50"></text></g><g><title>link (39,001 samples, 0.32%)</title><rect x="92.0953%" y="245" width="0.3238%" height="15" fill="rgb(233,208,19)"/><text x="92.3453%" y="255.50"></text></g><g><title>parse_crate (184,402 samples, 1.53%)</title><rect x="92.4191%" y="245" width="1.5311%" height="15" fill="rgb(216,164,2)"/><text x="92.6691%" y="255.50"></text></g><g><title>prepare_outputs (140,492 samples, 1.17%)</title><rect x="93.9950%" y="245" width="1.1665%" height="15" fill="rgb(220,129,5)"/><text x="94.2450%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (279,773 samples, 2.32%)</title><rect x="95.1615%" y="245" width="2.3230%" height="15" fill="rgb(242,17,10)"/><text x="95.4115%" y="255.50">s..</text></g><g><title>setup_global_ctxt (69,100 samples, 0.57%)</title><rect x="97.5718%" y="245" width="0.5737%" height="15" fill="rgb(242,107,0)"/><text x="97.8218%" y="255.50"></text></g><g><title>all (12,043,803 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (12,043,803 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (223,352 samples, 1.85%)</title><rect x="98.1455%" y="245" width="1.8545%" height="15" fill="rgb(215,21,27)"/><text x="98.3955%" y="255.50">w..</text></g></svg></svg>