<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,449,128 samples, 0.10%)</title><rect x="14.5865%" y="133" width="0.1008%" height="15" fill="rgb(227,0,7)"/><text x="14.8365%" y="143.50"></text></g><g><title>adt_drop_tys (1,836,242 samples, 0.13%)</title><rect x="20.4129%" y="53" width="0.1277%" height="15" fill="rgb(217,0,24)"/><text x="20.6629%" y="63.50"></text></g><g><title>is_copy_raw (8,926,884 samples, 0.62%)</title><rect x="20.5405%" y="53" width="0.6207%" height="15" fill="rgb(221,193,54)"/><text x="20.7905%" y="63.50"></text></g><g><title>evaluate_obligation (7,109,353 samples, 0.49%)</title><rect x="20.6669%" y="37" width="0.4943%" height="15" fill="rgb(248,212,6)"/><text x="20.9169%" y="47.50"></text></g><g><title>needs_drop_raw (12,228,920 samples, 0.85%)</title><rect x="20.3115%" y="69" width="0.8503%" height="15" fill="rgb(208,68,35)"/><text x="20.5615%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (6,248,010 samples, 0.43%)</title><rect x="21.3423%" y="53" width="0.4345%" height="15" fill="rgb(232,128,0)"/><text x="21.5923%" y="63.50"></text></g><g><title>resolve_instance (10,535,574 samples, 0.73%)</title><rect x="21.1645%" y="69" width="0.7326%" height="15" fill="rgb(207,160,47)"/><text x="21.4145%" y="79.50"></text></g><g><title>thir_body (19,443,460 samples, 1.35%)</title><rect x="21.9277%" y="69" width="1.3520%" height="15" fill="rgb(228,23,34)"/><text x="22.1777%" y="79.50"></text></g><g><title>mir_const (111,139,905 samples, 7.73%)</title><rect x="15.5715%" y="117" width="7.7281%" height="15" fill="rgb(218,30,26)"/><text x="15.8215%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (99,185,627 samples, 6.90%)</title><rect x="16.4028%" y="101" width="6.8968%" height="15" fill="rgb(220,122,19)"/><text x="16.6528%" y="111.50">unsafety_..</text></g><g><title>mir_built (90,764,700 samples, 6.31%)</title><rect x="16.9883%" y="85" width="6.3113%" height="15" fill="rgb(250,228,42)"/><text x="17.2383%" y="95.50">mir_built</text></g><g><title>mir_promoted (123,227,867 samples, 8.57%)</title><rect x="14.7786%" y="133" width="8.5686%" height="15" fill="rgb(240,193,28)"/><text x="15.0286%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (4,791,083 samples, 0.33%)</title><rect x="23.3478%" y="133" width="0.3331%" height="15" fill="rgb(216,20,37)"/><text x="23.5978%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,619,096 samples, 0.32%)</title><rect x="23.6810%" y="133" width="0.3212%" height="15" fill="rgb(206,188,39)"/><text x="23.9310%" y="143.50"></text></g><g><title>normalize_projection_ty (3,080,698 samples, 0.21%)</title><rect x="23.7879%" y="117" width="0.2142%" height="15" fill="rgb(217,207,13)"/><text x="24.0379%" y="127.50"></text></g><g><title>type_op_normalize_predicate (3,400,398 samples, 0.24%)</title><rect x="24.0022%" y="133" width="0.2364%" height="15" fill="rgb(231,73,38)"/><text x="24.2522%" y="143.50"></text></g><g><title>normalize_projection_ty (1,859,253 samples, 0.13%)</title><rect x="24.1093%" y="117" width="0.1293%" height="15" fill="rgb(225,20,46)"/><text x="24.3593%" y="127.50"></text></g><g><title>type_op_prove_predicate (29,176,954 samples, 2.03%)</title><rect x="24.2572%" y="133" width="2.0288%" height="15" fill="rgb(210,31,41)"/><text x="24.5072%" y="143.50">t..</text></g><g><title>evaluate_obligation (1,447,616 samples, 0.10%)</title><rect x="26.1854%" y="117" width="0.1007%" height="15" fill="rgb(221,200,47)"/><text x="26.4354%" y="127.50"></text></g><g><title>MIR_borrow_checking (370,406,246 samples, 25.76%)</title><rect x="0.5319%" y="165" width="25.7560%" height="15" fill="rgb(226,26,5)"/><text x="0.7819%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (367,374,792 samples, 25.55%)</title><rect x="0.7427%" y="149" width="25.5452%" height="15" fill="rgb(249,33,26)"/><text x="0.9927%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (2,303,284 samples, 0.16%)</title><rect x="26.3345%" y="165" width="0.1602%" height="15" fill="rgb(235,183,28)"/><text x="26.5845%" y="175.50"></text></g><g><title>codegen_fn_attrs (2,042,381 samples, 0.14%)</title><rect x="26.7168%" y="133" width="0.1420%" height="15" fill="rgb(221,5,38)"/><text x="26.9668%" y="143.50"></text></g><g><title>check_mod_attrs (5,110,400 samples, 0.36%)</title><rect x="26.5035%" y="149" width="0.3553%" height="15" fill="rgb(247,18,42)"/><text x="26.7535%" y="159.50"></text></g><g><title>lookup_deprecation_entry (1,709,979 samples, 0.12%)</title><rect x="27.1359%" y="133" width="0.1189%" height="15" fill="rgb(241,131,45)"/><text x="27.3859%" y="143.50"></text></g><g><title>stability_index (1,542,128 samples, 0.11%)</title><rect x="27.1475%" y="117" width="0.1072%" height="15" fill="rgb(249,31,29)"/><text x="27.3975%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (3,180,741 samples, 0.22%)</title><rect x="27.0454%" y="149" width="0.2212%" height="15" fill="rgb(225,111,53)"/><text x="27.2954%" y="159.50"></text></g><g><title>misc_checking_1 (11,571,859 samples, 0.80%)</title><rect x="26.4947%" y="165" width="0.8046%" height="15" fill="rgb(238,160,17)"/><text x="26.7447%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (8,302,822 samples, 0.58%)</title><rect x="27.2996%" y="149" width="0.5773%" height="15" fill="rgb(214,148,48)"/><text x="27.5496%" y="159.50"></text></g><g><title>check_mod_liveness (6,963,829 samples, 0.48%)</title><rect x="27.3927%" y="133" width="0.4842%" height="15" fill="rgb(232,36,49)"/><text x="27.6427%" y="143.50"></text></g><g><title>type_uninhabited_from (1,749,041 samples, 0.12%)</title><rect x="27.7553%" y="117" width="0.1216%" height="15" fill="rgb(209,103,24)"/><text x="28.0053%" y="127.50"></text></g><g><title>misc_checking_2 (16,908,239 samples, 1.18%)</title><rect x="27.2993%" y="165" width="1.1757%" height="15" fill="rgb(229,88,8)"/><text x="27.5493%" y="175.50"></text></g><g><title>match_checking (8,601,817 samples, 0.60%)</title><rect x="27.8769%" y="149" width="0.5981%" height="15" fill="rgb(213,181,19)"/><text x="28.1269%" y="159.50"></text></g><g><title>check_match (8,108,852 samples, 0.56%)</title><rect x="27.9112%" y="133" width="0.5638%" height="15" fill="rgb(254,191,54)"/><text x="28.1612%" y="143.50"></text></g><g><title>check_private_in_public (3,307,086 samples, 0.23%)</title><rect x="28.4766%" y="149" width="0.2300%" height="15" fill="rgb(241,83,37)"/><text x="28.7266%" y="159.50"></text></g><g><title>death_checking (5,338,630 samples, 0.37%)</title><rect x="28.7065%" y="149" width="0.3712%" height="15" fill="rgb(233,36,39)"/><text x="28.9565%" y="159.50"></text></g><g><title>param_env (3,332,860 samples, 0.23%)</title><rect x="29.6121%" y="117" width="0.2317%" height="15" fill="rgb(226,3,54)"/><text x="29.8621%" y="127.50"></text></g><g><title>predicates_of (1,502,224 samples, 0.10%)</title><rect x="29.7394%" y="101" width="0.1045%" height="15" fill="rgb(245,192,40)"/><text x="29.9894%" y="111.50"></text></g><g><title>crate_lints (13,153,178 samples, 0.91%)</title><rect x="29.0780%" y="133" width="0.9146%" height="15" fill="rgb(238,167,29)"/><text x="29.3280%" y="143.50"></text></g><g><title>type_of (1,442,965 samples, 0.10%)</title><rect x="29.8922%" y="117" width="0.1003%" height="15" fill="rgb(232,182,51)"/><text x="30.1422%" y="127.50"></text></g><g><title>lint_checking (21,593,761 samples, 1.50%)</title><rect x="29.0777%" y="149" width="1.5015%" height="15" fill="rgb(231,60,39)"/><text x="29.3277%" y="159.50"></text></g><g><title>module_lints (8,437,323 samples, 0.59%)</title><rect x="29.9926%" y="133" width="0.5867%" height="15" fill="rgb(208,69,12)"/><text x="30.2426%" y="143.50"></text></g><g><title>lint_mod (8,386,052 samples, 0.58%)</title><rect x="29.9961%" y="117" width="0.5831%" height="15" fill="rgb(235,93,37)"/><text x="30.2461%" y="127.50"></text></g><g><title>privacy_access_levels (3,688,411 samples, 0.26%)</title><rect x="30.5792%" y="149" width="0.2565%" height="15" fill="rgb(213,116,39)"/><text x="30.8292%" y="159.50"></text></g><g><title>privacy_checking_modules (14,255,920 samples, 0.99%)</title><rect x="30.8357%" y="149" width="0.9913%" height="15" fill="rgb(222,207,29)"/><text x="31.0857%" y="159.50"></text></g><g><title>check_mod_privacy (14,214,999 samples, 0.99%)</title><rect x="30.8386%" y="133" width="0.9884%" height="15" fill="rgb(206,96,30)"/><text x="31.0886%" y="143.50"></text></g><g><title>misc_checking_3 (48,300,109 samples, 3.36%)</title><rect x="28.4750%" y="165" width="3.3585%" height="15" fill="rgb(218,138,4)"/><text x="28.7250%" y="175.50">mis..</text></g><g><title>impl_parent (4,910,499 samples, 0.34%)</title><rect x="32.4974%" y="101" width="0.3414%" height="15" fill="rgb(250,191,14)"/><text x="32.7474%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,600,132 samples, 0.18%)</title><rect x="32.6580%" y="85" width="0.1808%" height="15" fill="rgb(239,60,40)"/><text x="32.9080%" y="95.50"></text></g><g><title>impl_trait_ref (8,593,292 samples, 0.60%)</title><rect x="32.8391%" y="101" width="0.5975%" height="15" fill="rgb(206,27,48)"/><text x="33.0891%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,497,865 samples, 0.45%)</title><rect x="32.9848%" y="85" width="0.4518%" height="15" fill="rgb(225,35,8)"/><text x="33.2348%" y="95.50"></text></g><g><title>trait_impls_of (1,772,219 samples, 0.12%)</title><rect x="33.4436%" y="101" width="0.1232%" height="15" fill="rgb(250,213,24)"/><text x="33.6936%" y="111.50"></text></g><g><title>coherent_trait (28,136,345 samples, 1.96%)</title><rect x="31.8946%" y="133" width="1.9564%" height="15" fill="rgb(247,123,22)"/><text x="32.1446%" y="143.50">c..</text></g><g><title>specialization_graph_of (27,249,685 samples, 1.89%)</title><rect x="31.9563%" y="117" width="1.8948%" height="15" fill="rgb(231,138,38)"/><text x="32.2063%" y="127.50">s..</text></g><g><title>visible_parent_map (4,084,976 samples, 0.28%)</title><rect x="33.5670%" y="101" width="0.2840%" height="15" fill="rgb(231,145,46)"/><text x="33.8170%" y="111.50"></text></g><g><title>module_children (3,605,508 samples, 0.25%)</title><rect x="33.6004%" y="85" width="0.2507%" height="15" fill="rgb(251,118,11)"/><text x="33.8504%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (3,528,257 samples, 0.25%)</title><rect x="33.6058%" y="69" width="0.2453%" height="15" fill="rgb(217,147,25)"/><text x="33.8558%" y="79.50"></text></g><g><title>coherence_checking (28,710,731 samples, 2.00%)</title><rect x="31.8912%" y="149" width="1.9964%" height="15" fill="rgb(247,81,37)"/><text x="32.1412%" y="159.50">c..</text></g><g><title>adt_dtorck_constraint (1,797,009 samples, 0.12%)</title><rect x="52.7735%" y="53" width="0.1250%" height="15" fill="rgb(209,12,38)"/><text x="53.0235%" y="63.50"></text></g><g><title>adt_dtorck_constraint (2,394,268 samples, 0.17%)</title><rect x="52.7380%" y="69" width="0.1665%" height="15" fill="rgb(227,1,9)"/><text x="52.9880%" y="79.50"></text></g><g><title>adt_dtorck_constraint (3,239,304 samples, 0.23%)</title><rect x="52.6880%" y="85" width="0.2252%" height="15" fill="rgb(248,47,43)"/><text x="52.9380%" y="95.50"></text></g><g><title>dropck_outlives (13,566,564 samples, 0.94%)</title><rect x="51.9720%" y="101" width="0.9433%" height="15" fill="rgb(221,10,30)"/><text x="52.2220%" y="111.50"></text></g><g><title>evaluate_obligation (13,099,029 samples, 0.91%)</title><rect x="52.9154%" y="101" width="0.9108%" height="15" fill="rgb(210,229,1)"/><text x="53.1654%" y="111.50"></text></g><g><title>evaluate_obligation (1,901,207 samples, 0.13%)</title><rect x="54.1181%" y="85" width="0.1322%" height="15" fill="rgb(222,148,37)"/><text x="54.3681%" y="95.50"></text></g><g><title>method_autoderef_steps (4,059,656 samples, 0.28%)</title><rect x="53.9685%" y="101" width="0.2823%" height="15" fill="rgb(234,67,33)"/><text x="54.2185%" y="111.50"></text></g><g><title>associated_items (1,564,449 samples, 0.11%)</title><rect x="61.2543%" y="85" width="0.1088%" height="15" fill="rgb(247,98,35)"/><text x="61.5043%" y="95.50"></text></g><g><title>dropck_outlives (3,089,063 samples, 0.21%)</title><rect x="61.3723%" y="85" width="0.2148%" height="15" fill="rgb(247,138,52)"/><text x="61.6223%" y="95.50"></text></g><g><title>evaluate_obligation (6,371,700 samples, 0.44%)</title><rect x="61.5871%" y="85" width="0.4431%" height="15" fill="rgb(213,79,30)"/><text x="61.8371%" y="95.50"></text></g><g><title>method_autoderef_steps (2,243,940 samples, 0.16%)</title><rect x="62.1584%" y="85" width="0.1560%" height="15" fill="rgb(246,177,23)"/><text x="62.4084%" y="95.50"></text></g><g><title>typeck (115,000,043 samples, 8.00%)</title><rect x="54.3945%" y="101" width="7.9965%" height="15" fill="rgb(230,62,27)"/><text x="54.6445%" y="111.50">typeck</text></g><g><title>item_bodies_checking (409,823,206 samples, 28.50%)</title><rect x="33.9187%" y="149" width="28.4969%" height="15" fill="rgb(216,154,8)"/><text x="34.1687%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (409,819,566 samples, 28.50%)</title><rect x="33.9189%" y="133" width="28.4966%" height="15" fill="rgb(244,35,45)"/><text x="34.1689%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (408,745,031 samples, 28.42%)</title><rect x="33.9936%" y="117" width="28.4219%" height="15" fill="rgb(251,115,12)"/><text x="34.2436%" y="127.50">typeck</text></g><g><title>item_types_checking (12,561,120 samples, 0.87%)</title><rect x="62.4155%" y="149" width="0.8734%" height="15" fill="rgb(240,54,50)"/><text x="62.6655%" y="159.50"></text></g><g><title>check_mod_item_types (12,514,889 samples, 0.87%)</title><rect x="62.4187%" y="133" width="0.8702%" height="15" fill="rgb(233,84,52)"/><text x="62.6687%" y="143.50"></text></g><g><title>fn_sig (2,901,419 samples, 0.20%)</title><rect x="63.5142%" y="117" width="0.2017%" height="15" fill="rgb(207,117,47)"/><text x="63.7642%" y="127.50"></text></g><g><title>is_late_bound_map (2,207,838 samples, 0.15%)</title><rect x="63.8040%" y="101" width="0.1535%" height="15" fill="rgb(249,43,39)"/><text x="64.0540%" y="111.50"></text></g><g><title>resolve_lifetimes (2,062,727 samples, 0.14%)</title><rect x="63.8141%" y="85" width="0.1434%" height="15" fill="rgb(209,38,44)"/><text x="64.0641%" y="95.50"></text></g><g><title>named_region_map (4,991,484 samples, 0.35%)</title><rect x="63.9576%" y="101" width="0.3471%" height="15" fill="rgb(236,212,23)"/><text x="64.2076%" y="111.50"></text></g><g><title>resolve_lifetimes (4,767,631 samples, 0.33%)</title><rect x="63.9731%" y="85" width="0.3315%" height="15" fill="rgb(242,79,21)"/><text x="64.2231%" y="95.50"></text></g><g><title>lint_levels (2,637,140 samples, 0.18%)</title><rect x="64.1213%" y="69" width="0.1834%" height="15" fill="rgb(211,96,35)"/><text x="64.3713%" y="79.50"></text></g><g><title>generics_of (8,595,320 samples, 0.60%)</title><rect x="63.7160%" y="117" width="0.5977%" height="15" fill="rgb(253,215,40)"/><text x="63.9660%" y="127.50"></text></g><g><title>explicit_predicates_of (2,168,991 samples, 0.15%)</title><rect x="64.4408%" y="85" width="0.1508%" height="15" fill="rgb(211,81,21)"/><text x="64.6908%" y="95.50"></text></g><g><title>predicates_of (4,909,055 samples, 0.34%)</title><rect x="64.3429%" y="117" width="0.3413%" height="15" fill="rgb(208,190,38)"/><text x="64.5929%" y="127.50"></text></g><g><title>predicates_defined_on (4,362,861 samples, 0.30%)</title><rect x="64.3809%" y="101" width="0.3034%" height="15" fill="rgb(235,213,38)"/><text x="64.6309%" y="111.50"></text></g><g><title>type_collecting (21,184,677 samples, 1.47%)</title><rect x="63.2914%" y="149" width="1.4731%" height="15" fill="rgb(237,122,38)"/><text x="63.5414%" y="159.50"></text></g><g><title>collect_mod_item_types (21,119,576 samples, 1.47%)</title><rect x="63.2959%" y="133" width="1.4685%" height="15" fill="rgb(244,218,35)"/><text x="63.5459%" y="143.50"></text></g><g><title>evaluate_obligation (4,317,786 samples, 0.30%)</title><rect x="66.3397%" y="117" width="0.3002%" height="15" fill="rgb(240,68,47)"/><text x="66.5897%" y="127.50"></text></g><g><title>implied_outlives_bounds (2,079,922 samples, 0.14%)</title><rect x="66.6423%" y="117" width="0.1446%" height="15" fill="rgb(210,16,53)"/><text x="66.8923%" y="127.50"></text></g><g><title>param_env (2,822,414 samples, 0.20%)</title><rect x="66.8178%" y="117" width="0.1963%" height="15" fill="rgb(235,124,12)"/><text x="67.0678%" y="127.50"></text></g><g><title>region_scope_tree (5,536,402 samples, 0.38%)</title><rect x="67.0251%" y="117" width="0.3850%" height="15" fill="rgb(224,169,11)"/><text x="67.2751%" y="127.50"></text></g><g><title>check_impl_item_well_formed (35,573,905 samples, 2.47%)</title><rect x="64.9426%" y="133" width="2.4736%" height="15" fill="rgb(250,166,2)"/><text x="65.1926%" y="143.50">ch..</text></g><g><title>adt_sized_constraint (1,540,496 samples, 0.11%)</title><rect x="68.5696%" y="101" width="0.1071%" height="15" fill="rgb(242,216,29)"/><text x="68.8196%" y="111.50"></text></g><g><title>evaluate_obligation (4,404,871 samples, 0.31%)</title><rect x="68.3712%" y="117" width="0.3063%" height="15" fill="rgb(230,116,27)"/><text x="68.6212%" y="127.50"></text></g><g><title>param_env (2,628,729 samples, 0.18%)</title><rect x="68.7469%" y="117" width="0.1828%" height="15" fill="rgb(228,99,48)"/><text x="68.9969%" y="127.50"></text></g><g><title>check_item_well_formed (23,445,386 samples, 1.63%)</title><rect x="67.4162%" y="133" width="1.6303%" height="15" fill="rgb(253,11,6)"/><text x="67.6662%" y="143.50"></text></g><g><title>analysis (992,008,026 samples, 68.98%)</title><rect x="0.2849%" y="181" width="68.9788%" height="15" fill="rgb(247,143,39)"/><text x="0.5349%" y="191.50">analysis</text></g><g><title>type_check_crate (538,295,270 samples, 37.43%)</title><rect x="31.8336%" y="165" width="37.4301%" height="15" fill="rgb(236,97,10)"/><text x="32.0836%" y="175.50">type_check_crate</text></g><g><title>wf_checking (64,640,381 samples, 4.49%)</title><rect x="64.7689%" y="149" width="4.4947%" height="15" fill="rgb(233,208,19)"/><text x="65.0189%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (3,123,235 samples, 0.22%)</title><rect x="69.0465%" y="133" width="0.2172%" height="15" fill="rgb(216,164,2)"/><text x="69.2965%" y="143.50"></text></g><g><title>AST_validation (2,062,622 samples, 0.14%)</title><rect x="69.3111%" y="165" width="0.1434%" height="15" fill="rgb(220,129,5)"/><text x="69.5611%" y="175.50"></text></g><g><title>complete_gated_feature_checking (1,771,680 samples, 0.12%)</title><rect x="69.4545%" y="165" width="0.1232%" height="15" fill="rgb(242,17,10)"/><text x="69.7045%" y="175.50"></text></g><g><title>metadata_register_crate (1,452,695 samples, 0.10%)</title><rect x="91.7837%" y="133" width="0.1010%" height="15" fill="rgb(242,107,0)"/><text x="92.0337%" y="143.50"></text></g><g><title>macro_expand_crate (323,149,339 samples, 22.47%)</title><rect x="69.5843%" y="165" width="22.4700%" height="15" fill="rgb(251,28,31)"/><text x="69.8343%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (323,120,858 samples, 22.47%)</title><rect x="69.5863%" y="149" width="22.4681%" height="15" fill="rgb(233,223,10)"/><text x="69.8363%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,439,189 samples, 0.17%)</title><rect x="91.8848%" y="133" width="0.1696%" height="15" fill="rgb(215,21,27)"/><text x="92.1348%" y="143.50"></text></g><g><title>finalize_macro_resolutions (4,566,192 samples, 0.32%)</title><rect x="92.1057%" y="149" width="0.3175%" height="15" fill="rgb(232,23,21)"/><text x="92.3557%" y="159.50"></text></g><g><title>late_resolve_crate (21,416,399 samples, 1.49%)</title><rect x="92.4232%" y="149" width="1.4892%" height="15" fill="rgb(244,5,23)"/><text x="92.6732%" y="159.50"></text></g><g><title>resolve_check_unused (1,830,590 samples, 0.13%)</title><rect x="93.9234%" y="149" width="0.1273%" height="15" fill="rgb(226,81,46)"/><text x="94.1734%" y="159.50"></text></g><g><title>resolve_postprocess (1,506,487 samples, 0.10%)</title><rect x="94.0508%" y="149" width="0.1048%" height="15" fill="rgb(247,70,30)"/><text x="94.3008%" y="159.50"></text></g><g><title>configure_and_expand (357,535,542 samples, 24.86%)</title><rect x="69.2945%" y="181" width="24.8611%" height="15" fill="rgb(212,68,19)"/><text x="69.5445%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (30,154,767 samples, 2.10%)</title><rect x="92.0588%" y="165" width="2.0968%" height="15" fill="rgb(240,187,13)"/><text x="92.3088%" y="175.50">r..</text></g><g><title>drop_ast (3,731,182 samples, 0.26%)</title><rect x="94.1556%" y="181" width="0.2594%" height="15" fill="rgb(223,113,26)"/><text x="94.4056%" y="191.50"></text></g><g><title>early_lint_checks (6,692,505 samples, 0.47%)</title><rect x="94.4168%" y="181" width="0.4654%" height="15" fill="rgb(206,192,2)"/><text x="94.6668%" y="191.50"></text></g><g><title>free_global_ctxt (11,937,394 samples, 0.83%)</title><rect x="94.8821%" y="181" width="0.8301%" height="15" fill="rgb(241,108,4)"/><text x="95.1321%" y="191.50"></text></g><g><title>generate_crate_metadata (11,546,289 samples, 0.80%)</title><rect x="95.7122%" y="181" width="0.8029%" height="15" fill="rgb(247,173,49)"/><text x="95.9622%" y="191.50"></text></g><g><title>hir_lowering (44,755,060 samples, 3.11%)</title><rect x="96.5151%" y="181" width="3.1120%" height="15" fill="rgb(224,114,35)"/><text x="96.7651%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (3,112,205 samples, 0.22%)</title><rect x="99.6977%" y="181" width="0.2164%" height="15" fill="rgb(245,159,27)"/><text x="99.9477%" y="191.50"></text></g><g><title>all (1,438,134,117 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,438,134,117 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>