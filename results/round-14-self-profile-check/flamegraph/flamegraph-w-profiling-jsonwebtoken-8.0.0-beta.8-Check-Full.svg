<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,890,180 samples, 0.20%)</title><rect x="12.7483%" y="133" width="0.2039%" height="15" fill="rgb(227,0,7)"/><text x="12.9983%" y="143.50"></text></g><g><title>adt_drop_tys (1,362,737 samples, 0.15%)</title><rect x="18.0678%" y="53" width="0.1470%" height="15" fill="rgb(217,0,24)"/><text x="18.3178%" y="63.50"></text></g><g><title>is_copy_raw (9,499,356 samples, 1.02%)</title><rect x="18.2148%" y="53" width="1.0246%" height="15" fill="rgb(221,193,54)"/><text x="18.4648%" y="63.50"></text></g><g><title>evaluate_obligation (7,568,060 samples, 0.82%)</title><rect x="18.4231%" y="37" width="0.8163%" height="15" fill="rgb(248,212,6)"/><text x="18.6731%" y="47.50"></text></g><g><title>needs_drop_raw (12,225,859 samples, 1.32%)</title><rect x="17.9270%" y="69" width="1.3187%" height="15" fill="rgb(208,68,35)"/><text x="18.1770%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,469,149 samples, 0.16%)</title><rect x="19.3472%" y="53" width="0.1585%" height="15" fill="rgb(232,128,0)"/><text x="19.5972%" y="63.50"></text></g><g><title>specialization_graph_of (1,152,212 samples, 0.12%)</title><rect x="19.5405%" y="53" width="0.1243%" height="15" fill="rgb(207,160,47)"/><text x="19.7905%" y="63.50"></text></g><g><title>resolve_instance (4,147,603 samples, 0.45%)</title><rect x="19.2457%" y="69" width="0.4474%" height="15" fill="rgb(228,23,34)"/><text x="19.4957%" y="79.50"></text></g><g><title>thir_body (9,412,307 samples, 1.02%)</title><rect x="19.7097%" y="69" width="1.0152%" height="15" fill="rgb(218,30,26)"/><text x="19.9597%" y="79.50"></text></g><g><title>mir_const (64,346,417 samples, 6.94%)</title><rect x="13.8616%" y="117" width="6.9406%" height="15" fill="rgb(220,122,19)"/><text x="14.1116%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (57,092,176 samples, 6.16%)</title><rect x="14.6440%" y="101" width="6.1582%" height="15" fill="rgb(250,228,42)"/><text x="14.8940%" y="111.50">unsafety..</text></g><g><title>mir_built (52,696,493 samples, 5.68%)</title><rect x="15.1182%" y="85" width="5.6840%" height="15" fill="rgb(240,193,28)"/><text x="15.3682%" y="95.50">mir_bui..</text></g><g><title>mir_promoted (73,066,852 samples, 7.88%)</title><rect x="13.1134%" y="133" width="7.8812%" height="15" fill="rgb(216,20,37)"/><text x="13.3634%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (1,784,148 samples, 0.19%)</title><rect x="20.8022%" y="117" width="0.1924%" height="15" fill="rgb(206,188,39)"/><text x="21.0522%" y="127.50"></text></g><g><title>mir_const (1,231,681 samples, 0.13%)</title><rect x="20.8618%" y="101" width="0.1329%" height="15" fill="rgb(217,207,13)"/><text x="21.1118%" y="111.50"></text></g><g><title>unsafety_check_result (929,769 samples, 0.10%)</title><rect x="20.8944%" y="85" width="0.1003%" height="15" fill="rgb(231,73,38)"/><text x="21.1444%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (6,169,161 samples, 0.67%)</title><rect x="20.9951%" y="133" width="0.6654%" height="15" fill="rgb(225,20,46)"/><text x="21.2451%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,032,084 samples, 0.43%)</title><rect x="21.6605%" y="133" width="0.4349%" height="15" fill="rgb(210,31,41)"/><text x="21.9105%" y="143.50"></text></g><g><title>normalize_projection_ty (1,710,973 samples, 0.18%)</title><rect x="21.9108%" y="117" width="0.1846%" height="15" fill="rgb(221,200,47)"/><text x="22.1608%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,256,652 samples, 0.14%)</title><rect x="22.0954%" y="133" width="0.1355%" height="15" fill="rgb(226,26,5)"/><text x="22.3454%" y="143.50"></text></g><g><title>type_op_normalize_ty (3,103,843 samples, 0.33%)</title><rect x="22.2309%" y="133" width="0.3348%" height="15" fill="rgb(249,33,26)"/><text x="22.4809%" y="143.50"></text></g><g><title>normalize_projection_ty (955,531 samples, 0.10%)</title><rect x="22.4627%" y="117" width="0.1031%" height="15" fill="rgb(235,183,28)"/><text x="22.7127%" y="127.50"></text></g><g><title>type_op_prove_predicate (15,830,123 samples, 1.71%)</title><rect x="22.5657%" y="133" width="1.7075%" height="15" fill="rgb(221,5,38)"/><text x="22.8157%" y="143.50"></text></g><g><title>MIR_borrow_checking (221,007,636 samples, 23.84%)</title><rect x="0.4380%" y="165" width="23.8386%" height="15" fill="rgb(247,18,42)"/><text x="0.6880%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (220,074,188 samples, 23.74%)</title><rect x="0.5387%" y="149" width="23.7379%" height="15" fill="rgb(241,131,45)"/><text x="0.7887%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (953,370 samples, 0.10%)</title><rect x="24.2766%" y="165" width="0.1028%" height="15" fill="rgb(249,31,29)"/><text x="24.5266%" y="175.50"></text></g><g><title>hir_module_items (1,498,088 samples, 0.16%)</title><rect x="24.3794%" y="165" width="0.1616%" height="15" fill="rgb(225,111,53)"/><text x="24.6294%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,266,539 samples, 0.14%)</title><rect x="24.7263%" y="133" width="0.1366%" height="15" fill="rgb(238,160,17)"/><text x="24.9763%" y="143.50"></text></g><g><title>should_inherit_track_caller (1,054,757 samples, 0.11%)</title><rect x="24.7491%" y="117" width="0.1138%" height="15" fill="rgb(214,148,48)"/><text x="24.9991%" y="127.50"></text></g><g><title>check_mod_attrs (2,929,712 samples, 0.32%)</title><rect x="24.5469%" y="149" width="0.3160%" height="15" fill="rgb(232,36,49)"/><text x="24.7969%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,023,762 samples, 0.22%)</title><rect x="25.0090%" y="149" width="0.2183%" height="15" fill="rgb(209,103,24)"/><text x="25.2590%" y="159.50"></text></g><g><title>misc_checking_1 (6,629,644 samples, 0.72%)</title><rect x="24.5411%" y="165" width="0.7151%" height="15" fill="rgb(229,88,8)"/><text x="24.7911%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,243,757 samples, 0.46%)</title><rect x="25.2565%" y="149" width="0.4577%" height="15" fill="rgb(213,181,19)"/><text x="25.5065%" y="159.50"></text></g><g><title>check_mod_liveness (3,477,807 samples, 0.38%)</title><rect x="25.3391%" y="133" width="0.3751%" height="15" fill="rgb(254,191,54)"/><text x="25.5891%" y="143.50"></text></g><g><title>type_uninhabited_from (1,372,354 samples, 0.15%)</title><rect x="25.5662%" y="117" width="0.1480%" height="15" fill="rgb(241,83,37)"/><text x="25.8162%" y="127.50"></text></g><g><title>type_uninhabited_from (1,181,103 samples, 0.13%)</title><rect x="25.5869%" y="101" width="0.1274%" height="15" fill="rgb(233,36,39)"/><text x="25.8369%" y="111.50"></text></g><g><title>type_uninhabited_from (1,040,363 samples, 0.11%)</title><rect x="25.6020%" y="85" width="0.1122%" height="15" fill="rgb(226,3,54)"/><text x="25.8520%" y="95.50"></text></g><g><title>misc_checking_2 (11,533,948 samples, 1.24%)</title><rect x="25.2562%" y="165" width="1.2441%" height="15" fill="rgb(245,192,40)"/><text x="25.5062%" y="175.50"></text></g><g><title>match_checking (7,287,301 samples, 0.79%)</title><rect x="25.7143%" y="149" width="0.7860%" height="15" fill="rgb(238,167,29)"/><text x="25.9643%" y="159.50"></text></g><g><title>check_match (7,022,309 samples, 0.76%)</title><rect x="25.7428%" y="133" width="0.7574%" height="15" fill="rgb(232,182,51)"/><text x="25.9928%" y="143.50"></text></g><g><title>check_private_in_public (1,497,046 samples, 0.16%)</title><rect x="26.5022%" y="149" width="0.1615%" height="15" fill="rgb(231,60,39)"/><text x="26.7522%" y="159.50"></text></g><g><title>death_checking (2,585,429 samples, 0.28%)</title><rect x="26.6637%" y="149" width="0.2789%" height="15" fill="rgb(208,69,12)"/><text x="26.9137%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,140,055 samples, 0.23%)</title><rect x="27.3574%" y="117" width="0.2308%" height="15" fill="rgb(235,93,37)"/><text x="27.6074%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,106,554 samples, 0.23%)</title><rect x="27.3610%" y="101" width="0.2272%" height="15" fill="rgb(213,116,39)"/><text x="27.6110%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,055,244 samples, 0.22%)</title><rect x="27.3666%" y="85" width="0.2217%" height="15" fill="rgb(222,207,29)"/><text x="27.6166%" y="95.50"></text></g><g><title>param_env (1,591,892 samples, 0.17%)</title><rect x="27.5883%" y="117" width="0.1717%" height="15" fill="rgb(206,96,30)"/><text x="27.8383%" y="127.50"></text></g><g><title>crate_lints (9,051,851 samples, 0.98%)</title><rect x="26.9429%" y="133" width="0.9764%" height="15" fill="rgb(218,138,4)"/><text x="27.1929%" y="143.50"></text></g><g><title>type_of (1,399,476 samples, 0.15%)</title><rect x="27.7683%" y="117" width="0.1510%" height="15" fill="rgb(250,191,14)"/><text x="28.0183%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,125,823 samples, 0.12%)</title><rect x="27.7979%" y="101" width="0.1214%" height="15" fill="rgb(239,60,40)"/><text x="28.0479%" y="111.50"></text></g><g><title>lint_checking (13,869,525 samples, 1.50%)</title><rect x="26.9426%" y="149" width="1.4960%" height="15" fill="rgb(206,27,48)"/><text x="27.1926%" y="159.50"></text></g><g><title>module_lints (4,814,234 samples, 0.52%)</title><rect x="27.9193%" y="133" width="0.5193%" height="15" fill="rgb(225,35,8)"/><text x="28.1693%" y="143.50"></text></g><g><title>lint_mod (4,797,824 samples, 0.52%)</title><rect x="27.9211%" y="117" width="0.5175%" height="15" fill="rgb(250,213,24)"/><text x="28.1711%" y="127.50"></text></g><g><title>privacy_access_levels (1,920,602 samples, 0.21%)</title><rect x="28.4386%" y="149" width="0.2072%" height="15" fill="rgb(247,123,22)"/><text x="28.6886%" y="159.50"></text></g><g><title>privacy_checking_modules (8,806,868 samples, 0.95%)</title><rect x="28.6457%" y="149" width="0.9499%" height="15" fill="rgb(231,138,38)"/><text x="28.8957%" y="159.50"></text></g><g><title>check_mod_privacy (8,792,828 samples, 0.95%)</title><rect x="28.6472%" y="133" width="0.9484%" height="15" fill="rgb(231,145,46)"/><text x="28.8972%" y="143.50"></text></g><g><title>misc_checking_3 (28,745,420 samples, 3.10%)</title><rect x="26.5003%" y="165" width="3.1006%" height="15" fill="rgb(251,118,11)"/><text x="26.7503%" y="175.50">mis..</text></g><g><title>impl_parent (3,687,666 samples, 0.40%)</title><rect x="30.3973%" y="101" width="0.3978%" height="15" fill="rgb(217,147,25)"/><text x="30.6473%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,156,747 samples, 0.23%)</title><rect x="30.5625%" y="85" width="0.2326%" height="15" fill="rgb(247,81,37)"/><text x="30.8125%" y="95.50"></text></g><g><title>impl_trait_ref (7,769,002 samples, 0.84%)</title><rect x="30.7951%" y="101" width="0.8380%" height="15" fill="rgb(209,12,38)"/><text x="31.0451%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,070,161 samples, 0.65%)</title><rect x="30.9783%" y="85" width="0.6547%" height="15" fill="rgb(227,1,9)"/><text x="31.2283%" y="95.50"></text></g><g><title>trait_impls_of (1,503,757 samples, 0.16%)</title><rect x="31.6368%" y="101" width="0.1622%" height="15" fill="rgb(248,47,43)"/><text x="31.8868%" y="111.50"></text></g><g><title>coherent_trait (19,953,103 samples, 2.15%)</title><rect x="29.6470%" y="133" width="2.1522%" height="15" fill="rgb(221,10,30)"/><text x="29.8970%" y="143.50">c..</text></g><g><title>specialization_graph_of (19,520,658 samples, 2.11%)</title><rect x="29.6936%" y="117" width="2.1056%" height="15" fill="rgb(210,229,1)"/><text x="29.9436%" y="127.50">s..</text></g><g><title>coherence_checking (20,230,765 samples, 2.18%)</title><rect x="29.6437%" y="149" width="2.1822%" height="15" fill="rgb(222,148,37)"/><text x="29.8937%" y="159.50">c..</text></g><g><title>associated_items (1,092,352 samples, 0.12%)</title><rect x="52.6124%" y="101" width="0.1178%" height="15" fill="rgb(234,67,33)"/><text x="52.8624%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,005,384 samples, 0.11%)</title><rect x="53.1317%" y="85" width="0.1084%" height="15" fill="rgb(247,98,35)"/><text x="53.3817%" y="95.50"></text></g><g><title>dropck_outlives (4,857,175 samples, 0.52%)</title><rect x="52.7509%" y="101" width="0.5239%" height="15" fill="rgb(247,138,52)"/><text x="53.0009%" y="111.50"></text></g><g><title>evaluate_obligation (9,421,509 samples, 1.02%)</title><rect x="53.2748%" y="101" width="1.0162%" height="15" fill="rgb(213,79,30)"/><text x="53.5248%" y="111.50"></text></g><g><title>predicates_of (1,131,624 samples, 0.12%)</title><rect x="54.6488%" y="101" width="0.1221%" height="15" fill="rgb(246,177,23)"/><text x="54.8988%" y="111.50"></text></g><g><title>evaluate_obligation (1,668,718 samples, 0.18%)</title><rect x="56.2494%" y="85" width="0.1800%" height="15" fill="rgb(230,62,27)"/><text x="56.4994%" y="95.50"></text></g><g><title>generics_of (1,409,136 samples, 0.15%)</title><rect x="56.4374%" y="85" width="0.1520%" height="15" fill="rgb(216,154,8)"/><text x="56.6874%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,100,684 samples, 0.12%)</title><rect x="56.4707%" y="69" width="0.1187%" height="15" fill="rgb(244,35,45)"/><text x="56.7207%" y="79.50"></text></g><g><title>typeck (17,540,115 samples, 1.89%)</title><rect x="54.8207%" y="101" width="1.8919%" height="15" fill="rgb(251,115,12)"/><text x="55.0707%" y="111.50">t..</text></g><g><title>item_bodies_checking (230,728,054 samples, 24.89%)</title><rect x="31.8504%" y="149" width="24.8871%" height="15" fill="rgb(240,54,50)"/><text x="32.1004%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (230,723,874 samples, 24.89%)</title><rect x="31.8508%" y="133" width="24.8867%" height="15" fill="rgb(233,84,52)"/><text x="32.1008%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (230,112,488 samples, 24.82%)</title><rect x="31.9168%" y="117" width="24.8207%" height="15" fill="rgb(207,117,47)"/><text x="32.1668%" y="127.50">typeck</text></g><g><title>typeck (1,875,520 samples, 0.20%)</title><rect x="57.9143%" y="117" width="0.2023%" height="15" fill="rgb(249,43,39)"/><text x="58.1643%" y="127.50"></text></g><g><title>item_types_checking (12,787,421 samples, 1.38%)</title><rect x="56.7375%" y="149" width="1.3793%" height="15" fill="rgb(209,38,44)"/><text x="56.9875%" y="159.50"></text></g><g><title>check_mod_item_types (12,773,801 samples, 1.38%)</title><rect x="56.7390%" y="133" width="1.3778%" height="15" fill="rgb(236,212,23)"/><text x="56.9890%" y="143.50"></text></g><g><title>fn_sig (2,766,070 samples, 0.30%)</title><rect x="58.3589%" y="117" width="0.2984%" height="15" fill="rgb(242,79,21)"/><text x="58.6089%" y="127.50"></text></g><g><title>lint_levels (1,601,258 samples, 0.17%)</title><rect x="58.9438%" y="69" width="0.1727%" height="15" fill="rgb(211,96,35)"/><text x="59.1938%" y="79.50"></text></g><g><title>is_late_bound_map (3,449,311 samples, 0.37%)</title><rect x="58.7457%" y="101" width="0.3721%" height="15" fill="rgb(253,215,40)"/><text x="58.9957%" y="111.50"></text></g><g><title>resolve_lifetimes (3,341,499 samples, 0.36%)</title><rect x="58.7574%" y="85" width="0.3604%" height="15" fill="rgb(211,81,21)"/><text x="59.0074%" y="95.50"></text></g><g><title>named_region_map (1,319,633 samples, 0.14%)</title><rect x="59.1178%" y="101" width="0.1423%" height="15" fill="rgb(208,190,38)"/><text x="59.3678%" y="111.50"></text></g><g><title>resolve_lifetimes (1,209,221 samples, 0.13%)</title><rect x="59.1297%" y="85" width="0.1304%" height="15" fill="rgb(235,213,38)"/><text x="59.3797%" y="95.50"></text></g><g><title>generics_of (5,674,351 samples, 0.61%)</title><rect x="58.6573%" y="117" width="0.6121%" height="15" fill="rgb(237,122,38)"/><text x="58.9073%" y="127.50"></text></g><g><title>explicit_predicates_of (1,237,471 samples, 0.13%)</title><rect x="59.4146%" y="85" width="0.1335%" height="15" fill="rgb(244,218,35)"/><text x="59.6646%" y="95.50"></text></g><g><title>predicates_of (3,570,369 samples, 0.39%)</title><rect x="59.3001%" y="117" width="0.3851%" height="15" fill="rgb(240,68,47)"/><text x="59.5501%" y="127.50"></text></g><g><title>predicates_defined_on (3,163,111 samples, 0.34%)</title><rect x="59.3440%" y="101" width="0.3412%" height="15" fill="rgb(210,16,53)"/><text x="59.5940%" y="111.50"></text></g><g><title>inferred_outlives_of (1,270,845 samples, 0.14%)</title><rect x="59.5481%" y="85" width="0.1371%" height="15" fill="rgb(235,124,12)"/><text x="59.7981%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,133,603 samples, 0.12%)</title><rect x="59.5629%" y="69" width="0.1223%" height="15" fill="rgb(224,169,11)"/><text x="59.8129%" y="79.50"></text></g><g><title>type_collecting (15,117,747 samples, 1.63%)</title><rect x="58.1176%" y="149" width="1.6307%" height="15" fill="rgb(250,166,2)"/><text x="58.3676%" y="159.50"></text></g><g><title>collect_mod_item_types (15,083,187 samples, 1.63%)</title><rect x="58.1213%" y="133" width="1.6269%" height="15" fill="rgb(242,216,29)"/><text x="58.3713%" y="143.50"></text></g><g><title>evaluate_obligation (2,227,088 samples, 0.24%)</title><rect x="61.5353%" y="117" width="0.2402%" height="15" fill="rgb(230,116,27)"/><text x="61.7853%" y="127.50"></text></g><g><title>implied_outlives_bounds (2,121,886 samples, 0.23%)</title><rect x="61.7874%" y="117" width="0.2289%" height="15" fill="rgb(228,99,48)"/><text x="62.0374%" y="127.50"></text></g><g><title>param_env (2,144,650 samples, 0.23%)</title><rect x="62.0523%" y="117" width="0.2313%" height="15" fill="rgb(253,11,6)"/><text x="62.3023%" y="127.50"></text></g><g><title>region_scope_tree (3,247,014 samples, 0.35%)</title><rect x="62.2922%" y="117" width="0.3502%" height="15" fill="rgb(247,143,39)"/><text x="62.5422%" y="127.50"></text></g><g><title>check_impl_item_well_formed (25,542,888 samples, 2.76%)</title><rect x="59.9128%" y="133" width="2.7551%" height="15" fill="rgb(236,97,10)"/><text x="60.1628%" y="143.50">ch..</text></g><g><title>evaluate_obligation (2,416,536 samples, 0.26%)</title><rect x="63.5645%" y="117" width="0.2607%" height="15" fill="rgb(233,208,19)"/><text x="63.8145%" y="127.50"></text></g><g><title>param_env (1,629,879 samples, 0.18%)</title><rect x="63.9490%" y="117" width="0.1758%" height="15" fill="rgb(216,164,2)"/><text x="64.1990%" y="127.50"></text></g><g><title>analysis (593,797,618 samples, 64.05%)</title><rect x="0.2123%" y="181" width="64.0490%" height="15" fill="rgb(220,129,5)"/><text x="0.4623%" y="191.50">analysis</text></g><g><title>type_check_crate (321,336,830 samples, 34.66%)</title><rect x="29.6009%" y="165" width="34.6605%" height="15" fill="rgb(242,17,10)"/><text x="29.8509%" y="175.50">type_check_crate</text></g><g><title>wf_checking (41,800,935 samples, 4.51%)</title><rect x="59.7525%" y="149" width="4.5088%" height="15" fill="rgb(242,107,0)"/><text x="60.0025%" y="159.50">wf_ch..</text></g><g><title>check_item_well_formed (14,772,429 samples, 1.59%)</title><rect x="62.6679%" y="133" width="1.5934%" height="15" fill="rgb(251,28,31)"/><text x="62.9179%" y="143.50"></text></g><g><title>AST_validation (1,246,463 samples, 0.13%)</title><rect x="64.3440%" y="165" width="0.1344%" height="15" fill="rgb(233,223,10)"/><text x="64.5940%" y="175.50"></text></g><g><title>metadata_register_crate (12,401,589 samples, 1.34%)</title><rect x="89.7536%" y="133" width="1.3377%" height="15" fill="rgb(215,21,27)"/><text x="90.0036%" y="143.50"></text></g><g><title>metadata_register_crate (9,658,957 samples, 1.04%)</title><rect x="90.0494%" y="117" width="1.0418%" height="15" fill="rgb(232,23,21)"/><text x="90.2994%" y="127.50"></text></g><g><title>metadata_register_crate (3,473,498 samples, 0.37%)</title><rect x="90.7166%" y="101" width="0.3747%" height="15" fill="rgb(244,5,23)"/><text x="90.9666%" y="111.50"></text></g><g><title>macro_expand_crate (247,026,995 samples, 26.65%)</title><rect x="64.5479%" y="165" width="26.6452%" height="15" fill="rgb(226,81,46)"/><text x="64.7979%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (247,005,454 samples, 26.64%)</title><rect x="64.5502%" y="149" width="26.6428%" height="15" fill="rgb(247,70,30)"/><text x="64.8002%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (944,051 samples, 0.10%)</title><rect x="91.0912%" y="133" width="0.1018%" height="15" fill="rgb(212,68,19)"/><text x="91.3412%" y="143.50"></text></g><g><title>late_resolve_crate (17,389,903 samples, 1.88%)</title><rect x="91.3064%" y="149" width="1.8757%" height="15" fill="rgb(240,187,13)"/><text x="91.5564%" y="159.50">l..</text></g><g><title>configure_and_expand (268,971,258 samples, 29.01%)</title><rect x="64.3218%" y="181" width="29.0121%" height="15" fill="rgb(223,113,26)"/><text x="64.5718%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (19,758,570 samples, 2.13%)</title><rect x="91.2027%" y="165" width="2.1312%" height="15" fill="rgb(206,192,2)"/><text x="91.4527%" y="175.50">r..</text></g><g><title>drop_ast (1,872,620 samples, 0.20%)</title><rect x="93.3339%" y="181" width="0.2020%" height="15" fill="rgb(241,108,4)"/><text x="93.5839%" y="191.50"></text></g><g><title>early_lint_checks (4,815,334 samples, 0.52%)</title><rect x="93.5391%" y="181" width="0.5194%" height="15" fill="rgb(247,173,49)"/><text x="93.7891%" y="191.50"></text></g><g><title>free_global_ctxt (8,401,953 samples, 0.91%)</title><rect x="94.0585%" y="181" width="0.9063%" height="15" fill="rgb(224,114,35)"/><text x="94.3085%" y="191.50"></text></g><g><title>generate_crate_metadata (16,724,515 samples, 1.80%)</title><rect x="94.9647%" y="181" width="1.8040%" height="15" fill="rgb(245,159,27)"/><text x="95.2147%" y="191.50">g..</text></g><g><title>hir_lowering (25,574,724 samples, 2.76%)</title><rect x="96.7687%" y="181" width="2.7586%" height="15" fill="rgb(245,172,44)"/><text x="97.0187%" y="191.50">hi..</text></g><g><title>self_profile_alloc_query_strings (2,380,897 samples, 0.26%)</title><rect x="99.5988%" y="181" width="0.2568%" height="15" fill="rgb(236,23,11)"/><text x="99.8488%" y="191.50"></text></g><g><title>all (927,098,910 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (927,098,910 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,182,114 samples, 0.13%)</title><rect x="99.8725%" y="181" width="0.1275%" height="15" fill="rgb(244,70,9)"/><text x="100.1225%" y="191.50"></text></g></svg></svg>