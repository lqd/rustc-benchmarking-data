<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (643,751 samples, 0.35%)</title><rect x="13.2606%" y="133" width="0.3542%" height="15" fill="rgb(227,0,7)"/><text x="13.5106%" y="143.50"></text></g><g><title>item_attrs (564,237 samples, 0.31%)</title><rect x="14.1960%" y="101" width="0.3105%" height="15" fill="rgb(217,0,24)"/><text x="14.4460%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (544,967 samples, 0.30%)</title><rect x="14.2066%" y="85" width="0.2999%" height="15" fill="rgb(221,193,54)"/><text x="14.4566%" y="95.50"></text></g><g><title>codegen_fn_attrs (806,031 samples, 0.44%)</title><rect x="14.0849%" y="117" width="0.4435%" height="15" fill="rgb(248,212,6)"/><text x="14.3349%" y="127.50"></text></g><g><title>adt_drop_tys (354,053 samples, 0.19%)</title><rect x="17.2603%" y="85" width="0.1948%" height="15" fill="rgb(208,68,35)"/><text x="17.5103%" y="95.50"></text></g><g><title>is_copy_raw (1,531,331 samples, 0.84%)</title><rect x="17.4555%" y="85" width="0.8427%" height="15" fill="rgb(232,128,0)"/><text x="17.7055%" y="95.50"></text></g><g><title>evaluate_obligation (1,283,898 samples, 0.71%)</title><rect x="17.5916%" y="69" width="0.7065%" height="15" fill="rgb(207,160,47)"/><text x="17.8416%" y="79.50"></text></g><g><title>needs_drop_raw (2,112,209 samples, 1.16%)</title><rect x="17.1386%" y="101" width="1.1623%" height="15" fill="rgb(228,23,34)"/><text x="17.3886%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (445,716 samples, 0.25%)</title><rect x="18.5187%" y="85" width="0.2453%" height="15" fill="rgb(218,30,26)"/><text x="18.7687%" y="95.50"></text></g><g><title>specialization_graph_of (659,578 samples, 0.36%)</title><rect x="18.8208%" y="85" width="0.3630%" height="15" fill="rgb(220,122,19)"/><text x="19.0708%" y="95.50"></text></g><g><title>impl_trait_ref (281,212 samples, 0.15%)</title><rect x="19.0290%" y="69" width="0.1547%" height="15" fill="rgb(250,228,42)"/><text x="19.2790%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (222,542 samples, 0.12%)</title><rect x="19.0613%" y="53" width="0.1225%" height="15" fill="rgb(240,193,28)"/><text x="19.3113%" y="63.50"></text></g><g><title>resolve_instance (1,754,671 samples, 0.97%)</title><rect x="18.3009%" y="101" width="0.9656%" height="15" fill="rgb(216,20,37)"/><text x="18.5509%" y="111.50"></text></g><g><title>thir_body (1,956,552 samples, 1.08%)</title><rect x="19.2887%" y="101" width="1.0766%" height="15" fill="rgb(206,188,39)"/><text x="19.5387%" y="111.50"></text></g><g><title>mir_const (14,609,969 samples, 8.04%)</title><rect x="12.3510%" y="149" width="8.0395%" height="15" fill="rgb(217,207,13)"/><text x="12.6010%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (12,313,090 samples, 6.78%)</title><rect x="13.6149%" y="133" width="6.7756%" height="15" fill="rgb(231,73,38)"/><text x="13.8649%" y="143.50">unsafety_..</text></g><g><title>mir_built (10,652,999 samples, 5.86%)</title><rect x="14.5284%" y="117" width="5.8621%" height="15" fill="rgb(225,20,46)"/><text x="14.7784%" y="127.50">mir_bui..</text></g><g><title>has_structural_eq_impls (214,343 samples, 0.12%)</title><rect x="20.4943%" y="133" width="0.1179%" height="15" fill="rgb(210,31,41)"/><text x="20.7443%" y="143.50"></text></g><g><title>evaluate_obligation (193,813 samples, 0.11%)</title><rect x="20.5056%" y="117" width="0.1067%" height="15" fill="rgb(221,200,47)"/><text x="20.7556%" y="127.50"></text></g><g><title>mir_promoted (16,531,858 samples, 9.10%)</title><rect x="11.6118%" y="165" width="9.0971%" height="15" fill="rgb(226,26,5)"/><text x="11.8618%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (578,677 samples, 0.32%)</title><rect x="20.3905%" y="149" width="0.3184%" height="15" fill="rgb(249,33,26)"/><text x="20.6405%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (1,298,243 samples, 0.71%)</title><rect x="20.7089%" y="165" width="0.7144%" height="15" fill="rgb(235,183,28)"/><text x="20.9589%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,023,209 samples, 0.56%)</title><rect x="21.4233%" y="165" width="0.5630%" height="15" fill="rgb(221,5,38)"/><text x="21.6733%" y="175.50"></text></g><g><title>normalize_projection_ty (627,285 samples, 0.35%)</title><rect x="21.6412%" y="149" width="0.3452%" height="15" fill="rgb(247,18,42)"/><text x="21.8912%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,444,750 samples, 1.90%)</title><rect x="22.1300%" y="165" width="1.8956%" height="15" fill="rgb(241,131,45)"/><text x="22.3800%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (42,754,092 samples, 23.53%)</title><rect x="0.5064%" y="197" width="23.5266%" height="15" fill="rgb(249,31,29)"/><text x="0.7564%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,575,891 samples, 23.43%)</title><rect x="0.6044%" y="181" width="23.4285%" height="15" fill="rgb(225,111,53)"/><text x="0.8544%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (238,082 samples, 0.13%)</title><rect x="24.1325%" y="197" width="0.1310%" height="15" fill="rgb(238,160,17)"/><text x="24.3825%" y="207.50"></text></g><g><title>codegen_fn_attrs (236,003 samples, 0.13%)</title><rect x="24.5294%" y="133" width="0.1299%" height="15" fill="rgb(214,148,48)"/><text x="24.7794%" y="143.50"></text></g><g><title>codegen_fn_attrs (409,495 samples, 0.23%)</title><rect x="24.4393%" y="165" width="0.2253%" height="15" fill="rgb(232,36,49)"/><text x="24.6893%" y="175.50"></text></g><g><title>should_inherit_track_caller (354,194 samples, 0.19%)</title><rect x="24.4697%" y="149" width="0.1949%" height="15" fill="rgb(209,103,24)"/><text x="24.7197%" y="159.50"></text></g><g><title>check_mod_attrs (696,386 samples, 0.38%)</title><rect x="24.2815%" y="181" width="0.3832%" height="15" fill="rgb(229,88,8)"/><text x="24.5315%" y="191.50"></text></g><g><title>lookup_deprecation_entry (217,981 samples, 0.12%)</title><rect x="24.9711%" y="165" width="0.1199%" height="15" fill="rgb(213,181,19)"/><text x="25.2211%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (638,328 samples, 0.35%)</title><rect x="24.8243%" y="181" width="0.3513%" height="15" fill="rgb(254,191,54)"/><text x="25.0743%" y="191.50"></text></g><g><title>misc_checking_1 (1,741,249 samples, 0.96%)</title><rect x="24.2638%" y="197" width="0.9582%" height="15" fill="rgb(241,83,37)"/><text x="24.5138%" y="207.50"></text></g><g><title>check_mod_intrinsics (221,091 samples, 0.12%)</title><rect x="25.2293%" y="165" width="0.1217%" height="15" fill="rgb(233,36,39)"/><text x="25.4793%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (887,150 samples, 0.49%)</title><rect x="25.2228%" y="181" width="0.4882%" height="15" fill="rgb(226,3,54)"/><text x="25.4728%" y="191.50"></text></g><g><title>check_mod_liveness (654,349 samples, 0.36%)</title><rect x="25.3509%" y="165" width="0.3601%" height="15" fill="rgb(245,192,40)"/><text x="25.6009%" y="175.50"></text></g><g><title>misc_checking_2 (1,681,829 samples, 0.93%)</title><rect x="25.2219%" y="197" width="0.9255%" height="15" fill="rgb(238,167,29)"/><text x="25.4719%" y="207.50"></text></g><g><title>match_checking (793,089 samples, 0.44%)</title><rect x="25.7110%" y="181" width="0.4364%" height="15" fill="rgb(232,182,51)"/><text x="25.9610%" y="191.50"></text></g><g><title>check_match (750,119 samples, 0.41%)</title><rect x="25.7346%" y="165" width="0.4128%" height="15" fill="rgb(231,60,39)"/><text x="25.9846%" y="175.50"></text></g><g><title>check_private_in_public (334,233 samples, 0.18%)</title><rect x="26.1531%" y="181" width="0.1839%" height="15" fill="rgb(208,69,12)"/><text x="26.4031%" y="191.50"></text></g><g><title>death_checking (648,247 samples, 0.36%)</title><rect x="26.3370%" y="181" width="0.3567%" height="15" fill="rgb(235,93,37)"/><text x="26.5870%" y="191.50"></text></g><g><title>eval_to_allocation_raw (361,914 samples, 0.20%)</title><rect x="27.2779%" y="149" width="0.1992%" height="15" fill="rgb(213,116,39)"/><text x="27.5279%" y="159.50"></text></g><g><title>eval_to_allocation_raw (357,574 samples, 0.20%)</title><rect x="27.2803%" y="133" width="0.1968%" height="15" fill="rgb(222,207,29)"/><text x="27.5303%" y="143.50"></text></g><g><title>param_env (578,358 samples, 0.32%)</title><rect x="27.4770%" y="149" width="0.3183%" height="15" fill="rgb(206,96,30)"/><text x="27.7270%" y="159.50"></text></g><g><title>predicates_of (262,903 samples, 0.14%)</title><rect x="27.6506%" y="133" width="0.1447%" height="15" fill="rgb(218,138,4)"/><text x="27.9006%" y="143.50"></text></g><g><title>predicates_defined_on (211,183 samples, 0.12%)</title><rect x="27.6791%" y="117" width="0.1162%" height="15" fill="rgb(250,191,14)"/><text x="27.9291%" y="127.50"></text></g><g><title>crate_lints (3,446,569 samples, 1.90%)</title><rect x="26.6947%" y="165" width="1.8966%" height="15" fill="rgb(239,60,40)"/><text x="26.9447%" y="175.50">c..</text></g><g><title>type_of (1,329,785 samples, 0.73%)</title><rect x="27.8595%" y="149" width="0.7317%" height="15" fill="rgb(206,27,48)"/><text x="28.1095%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,040,992 samples, 0.57%)</title><rect x="28.0184%" y="133" width="0.5728%" height="15" fill="rgb(225,35,8)"/><text x="28.2684%" y="143.50"></text></g><g><title>lint_checking (4,121,226 samples, 2.27%)</title><rect x="26.6937%" y="181" width="2.2678%" height="15" fill="rgb(250,213,24)"/><text x="26.9437%" y="191.50">l..</text></g><g><title>module_lints (672,897 samples, 0.37%)</title><rect x="28.5912%" y="165" width="0.3703%" height="15" fill="rgb(247,123,22)"/><text x="28.8412%" y="175.50"></text></g><g><title>lint_mod (664,407 samples, 0.37%)</title><rect x="28.5959%" y="149" width="0.3656%" height="15" fill="rgb(231,138,38)"/><text x="28.8459%" y="159.50"></text></g><g><title>privacy_access_levels (328,524 samples, 0.18%)</title><rect x="28.9615%" y="181" width="0.1808%" height="15" fill="rgb(231,145,46)"/><text x="29.2115%" y="191.50"></text></g><g><title>privacy_checking_modules (1,307,555 samples, 0.72%)</title><rect x="29.1423%" y="181" width="0.7195%" height="15" fill="rgb(251,118,11)"/><text x="29.3923%" y="191.50"></text></g><g><title>check_mod_privacy (1,301,325 samples, 0.72%)</title><rect x="29.1457%" y="165" width="0.7161%" height="15" fill="rgb(217,147,25)"/><text x="29.3957%" y="175.50"></text></g><g><title>misc_checking_3 (6,765,756 samples, 3.72%)</title><rect x="26.1474%" y="197" width="3.7230%" height="15" fill="rgb(247,81,37)"/><text x="26.3974%" y="207.50">misc..</text></g><g><title>impl_parent (2,447,026 samples, 1.35%)</title><rect x="32.0860%" y="133" width="1.3465%" height="15" fill="rgb(209,12,38)"/><text x="32.3360%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,478,921 samples, 0.81%)</title><rect x="32.6187%" y="117" width="0.8138%" height="15" fill="rgb(227,1,9)"/><text x="32.8687%" y="127.50"></text></g><g><title>impl_trait_ref (5,554,602 samples, 3.06%)</title><rect x="33.4325%" y="133" width="3.0566%" height="15" fill="rgb(248,47,43)"/><text x="33.6825%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,459,666 samples, 2.45%)</title><rect x="34.0350%" y="117" width="2.4540%" height="15" fill="rgb(221,10,30)"/><text x="34.2850%" y="127.50">me..</text></g><g><title>coherent_trait (12,733,384 samples, 7.01%)</title><rect x="29.9456%" y="165" width="7.0069%" height="15" fill="rgb(210,229,1)"/><text x="30.1956%" y="175.50">coherent_..</text></g><g><title>specialization_graph_of (12,711,553 samples, 6.99%)</title><rect x="29.9576%" y="149" width="6.9949%" height="15" fill="rgb(222,148,37)"/><text x="30.2076%" y="159.50">specializ..</text></g><g><title>trait_impls_of (840,250 samples, 0.46%)</title><rect x="36.4901%" y="133" width="0.4624%" height="15" fill="rgb(234,67,33)"/><text x="36.7401%" y="143.50"></text></g><g><title>implementations_of_trait (262,265 samples, 0.14%)</title><rect x="36.8082%" y="117" width="0.1443%" height="15" fill="rgb(247,98,35)"/><text x="37.0582%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (184,582 samples, 0.10%)</title><rect x="36.8509%" y="101" width="0.1016%" height="15" fill="rgb(247,138,52)"/><text x="37.1009%" y="111.50"></text></g><g><title>coherence_checking (12,833,185 samples, 7.06%)</title><rect x="29.9321%" y="181" width="7.0618%" height="15" fill="rgb(213,79,30)"/><text x="30.1821%" y="191.50">coherence..</text></g><g><title>associated_item (600,628 samples, 0.33%)</title><rect x="54.7644%" y="117" width="0.3305%" height="15" fill="rgb(246,177,23)"/><text x="55.0144%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (474,046 samples, 0.26%)</title><rect x="54.8341%" y="101" width="0.2609%" height="15" fill="rgb(230,62,27)"/><text x="55.0841%" y="111.50"></text></g><g><title>associated_items (896,582 samples, 0.49%)</title><rect x="54.6382%" y="133" width="0.4934%" height="15" fill="rgb(216,154,8)"/><text x="54.8882%" y="143.50"></text></g><g><title>dropck_outlives (605,725 samples, 0.33%)</title><rect x="55.2021%" y="133" width="0.3333%" height="15" fill="rgb(244,35,45)"/><text x="55.4521%" y="143.50"></text></g><g><title>generics_of (853,331 samples, 0.47%)</title><rect x="58.5258%" y="117" width="0.4696%" height="15" fill="rgb(251,115,12)"/><text x="58.7758%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (625,698 samples, 0.34%)</title><rect x="58.6510%" y="101" width="0.3443%" height="15" fill="rgb(240,54,50)"/><text x="58.9010%" y="111.50"></text></g><g><title>impl_trait_ref (1,348,465 samples, 0.74%)</title><rect x="59.1136%" y="117" width="0.7420%" height="15" fill="rgb(233,84,52)"/><text x="59.3636%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,114,482 samples, 0.61%)</title><rect x="59.2424%" y="101" width="0.6133%" height="15" fill="rgb(207,117,47)"/><text x="59.4924%" y="111.50"></text></g><g><title>opt_def_kind (189,530 samples, 0.10%)</title><rect x="60.0737%" y="101" width="0.1043%" height="15" fill="rgb(249,43,39)"/><text x="60.3237%" y="111.50"></text></g><g><title>explicit_predicates_of (206,824 samples, 0.11%)</title><rect x="60.4587%" y="85" width="0.1138%" height="15" fill="rgb(209,38,44)"/><text x="60.7087%" y="95.50"></text></g><g><title>predicates_of (1,389,485 samples, 0.76%)</title><rect x="59.8924%" y="117" width="0.7646%" height="15" fill="rgb(236,212,23)"/><text x="60.1424%" y="127.50"></text></g><g><title>predicates_defined_on (870,391 samples, 0.48%)</title><rect x="60.1780%" y="101" width="0.4790%" height="15" fill="rgb(242,79,21)"/><text x="60.4280%" y="111.50"></text></g><g><title>specializes (2,608,867 samples, 1.44%)</title><rect x="60.6570%" y="117" width="1.4356%" height="15" fill="rgb(211,96,35)"/><text x="60.9070%" y="127.50"></text></g><g><title>param_env (1,525,063 samples, 0.84%)</title><rect x="61.2534%" y="101" width="0.8392%" height="15" fill="rgb(253,215,40)"/><text x="61.5034%" y="111.50"></text></g><g><title>def_span (668,463 samples, 0.37%)</title><rect x="61.7247%" y="85" width="0.3678%" height="15" fill="rgb(211,81,21)"/><text x="61.9747%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (590,803 samples, 0.33%)</title><rect x="61.7675%" y="69" width="0.3251%" height="15" fill="rgb(208,190,38)"/><text x="62.0175%" y="79.50"></text></g><g><title>trait_impls_of (1,068,971 samples, 0.59%)</title><rect x="62.1063%" y="117" width="0.5882%" height="15" fill="rgb(235,213,38)"/><text x="62.3563%" y="127.50"></text></g><g><title>implementations_of_trait (583,556 samples, 0.32%)</title><rect x="62.3734%" y="101" width="0.3211%" height="15" fill="rgb(237,122,38)"/><text x="62.6234%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (222,142 samples, 0.12%)</title><rect x="62.5723%" y="85" width="0.1222%" height="15" fill="rgb(244,218,35)"/><text x="62.8223%" y="95.50"></text></g><g><title>evaluate_obligation (13,034,374 samples, 7.17%)</title><rect x="55.5354%" y="133" width="7.1725%" height="15" fill="rgb(240,68,47)"/><text x="55.7854%" y="143.50">evaluate_o..</text></g><g><title>fn_sig (235,022 samples, 0.13%)</title><rect x="62.7369%" y="133" width="0.1293%" height="15" fill="rgb(210,16,53)"/><text x="62.9869%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (201,162 samples, 0.11%)</title><rect x="62.7555%" y="117" width="0.1107%" height="15" fill="rgb(235,124,12)"/><text x="63.0055%" y="127.50"></text></g><g><title>generics_of (197,022 samples, 0.11%)</title><rect x="62.8662%" y="133" width="0.1084%" height="15" fill="rgb(224,169,11)"/><text x="63.1162%" y="143.50"></text></g><g><title>item_attrs (432,226 samples, 0.24%)</title><rect x="63.1100%" y="133" width="0.2378%" height="15" fill="rgb(250,166,2)"/><text x="63.3600%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (418,176 samples, 0.23%)</title><rect x="63.1177%" y="117" width="0.2301%" height="15" fill="rgb(242,216,29)"/><text x="63.3677%" y="127.50"></text></g><g><title>evaluate_obligation (412,601 samples, 0.23%)</title><rect x="63.7219%" y="117" width="0.2270%" height="15" fill="rgb(230,116,27)"/><text x="63.9719%" y="127.50"></text></g><g><title>method_autoderef_steps (983,949 samples, 0.54%)</title><rect x="63.4153%" y="133" width="0.5414%" height="15" fill="rgb(228,99,48)"/><text x="63.6653%" y="143.50"></text></g><g><title>object_safety_violations (261,773 samples, 0.14%)</title><rect x="63.9592%" y="133" width="0.1440%" height="15" fill="rgb(253,11,6)"/><text x="64.2092%" y="143.50"></text></g><g><title>predicates_of (604,913 samples, 0.33%)</title><rect x="64.1430%" y="133" width="0.3329%" height="15" fill="rgb(247,143,39)"/><text x="64.3930%" y="143.50"></text></g><g><title>predicates_defined_on (413,851 samples, 0.23%)</title><rect x="64.2481%" y="117" width="0.2277%" height="15" fill="rgb(236,97,10)"/><text x="64.4981%" y="127.50"></text></g><g><title>associated_item (219,184 samples, 0.12%)</title><rect x="69.3400%" y="101" width="0.1206%" height="15" fill="rgb(233,208,19)"/><text x="69.5900%" y="111.50"></text></g><g><title>associated_items (324,735 samples, 0.18%)</title><rect x="69.2896%" y="117" width="0.1787%" height="15" fill="rgb(216,164,2)"/><text x="69.5396%" y="127.50"></text></g><g><title>adt_dtorck_constraint (227,914 samples, 0.13%)</title><rect x="69.7067%" y="85" width="0.1254%" height="15" fill="rgb(220,129,5)"/><text x="69.9567%" y="95.50"></text></g><g><title>dropck_outlives (664,048 samples, 0.37%)</title><rect x="69.4986%" y="117" width="0.3654%" height="15" fill="rgb(242,17,10)"/><text x="69.7486%" y="127.50"></text></g><g><title>adt_dtorck_constraint (530,367 samples, 0.29%)</title><rect x="69.5722%" y="101" width="0.2918%" height="15" fill="rgb(242,107,0)"/><text x="69.8222%" y="111.50"></text></g><g><title>evaluate_obligation (1,277,394 samples, 0.70%)</title><rect x="69.8640%" y="117" width="0.7029%" height="15" fill="rgb(251,28,31)"/><text x="70.1140%" y="127.50"></text></g><g><title>trait_impls_of (195,814 samples, 0.11%)</title><rect x="70.4592%" y="101" width="0.1078%" height="15" fill="rgb(233,223,10)"/><text x="70.7092%" y="111.50"></text></g><g><title>is_copy_raw (352,874 samples, 0.19%)</title><rect x="70.7605%" y="117" width="0.1942%" height="15" fill="rgb(215,21,27)"/><text x="71.0105%" y="127.50"></text></g><g><title>evaluate_obligation (297,544 samples, 0.16%)</title><rect x="70.7909%" y="101" width="0.1637%" height="15" fill="rgb(232,23,21)"/><text x="71.0409%" y="111.50"></text></g><g><title>predicates_of (199,660 samples, 0.11%)</title><rect x="71.1262%" y="117" width="0.1099%" height="15" fill="rgb(244,5,23)"/><text x="71.3762%" y="127.50"></text></g><g><title>typeck (12,081,825 samples, 6.65%)</title><rect x="64.6514%" y="133" width="6.6483%" height="15" fill="rgb(226,81,46)"/><text x="64.9014%" y="143.50">typeck</text></g><g><title>item_bodies_checking (62,374,103 samples, 34.32%)</title><rect x="37.0165%" y="181" width="34.3230%" height="15" fill="rgb(247,70,30)"/><text x="37.2665%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (62,370,773 samples, 34.32%)</title><rect x="37.0183%" y="165" width="34.3212%" height="15" fill="rgb(212,68,19)"/><text x="37.2683%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (62,255,102 samples, 34.26%)</title><rect x="37.0820%" y="149" width="34.2575%" height="15" fill="rgb(240,187,13)"/><text x="37.3320%" y="159.50">typeck</text></g><g><title>item_types_checking (1,812,371 samples, 1.00%)</title><rect x="71.3395%" y="181" width="0.9973%" height="15" fill="rgb(223,113,26)"/><text x="71.5895%" y="191.50"></text></g><g><title>check_mod_item_types (1,803,721 samples, 0.99%)</title><rect x="71.3443%" y="165" width="0.9925%" height="15" fill="rgb(206,192,2)"/><text x="71.5943%" y="175.50"></text></g><g><title>typeck (471,715 samples, 0.26%)</title><rect x="72.0772%" y="149" width="0.2596%" height="15" fill="rgb(241,108,4)"/><text x="72.3272%" y="159.50"></text></g><g><title>fn_sig (544,476 samples, 0.30%)</title><rect x="72.5460%" y="149" width="0.2996%" height="15" fill="rgb(247,173,49)"/><text x="72.7960%" y="159.50"></text></g><g><title>named_region_map (381,956 samples, 0.21%)</title><rect x="72.9313%" y="133" width="0.2102%" height="15" fill="rgb(224,114,35)"/><text x="73.1813%" y="143.50"></text></g><g><title>resolve_lifetimes (361,666 samples, 0.20%)</title><rect x="72.9424%" y="117" width="0.1990%" height="15" fill="rgb(245,159,27)"/><text x="73.1924%" y="127.50"></text></g><g><title>generics_of (555,259 samples, 0.31%)</title><rect x="72.8456%" y="149" width="0.3055%" height="15" fill="rgb(245,172,44)"/><text x="73.0956%" y="159.50"></text></g><g><title>explicit_predicates_of (523,726 samples, 0.29%)</title><rect x="73.2724%" y="117" width="0.2882%" height="15" fill="rgb(236,23,11)"/><text x="73.5224%" y="127.50"></text></g><g><title>predicates_of (1,121,041 samples, 0.62%)</title><rect x="73.1783%" y="149" width="0.6169%" height="15" fill="rgb(205,117,38)"/><text x="73.4283%" y="159.50"></text></g><g><title>predicates_defined_on (1,055,071 samples, 0.58%)</title><rect x="73.2146%" y="133" width="0.5806%" height="15" fill="rgb(237,72,25)"/><text x="73.4646%" y="143.50"></text></g><g><title>inferred_outlives_of (426,294 samples, 0.23%)</title><rect x="73.5606%" y="117" width="0.2346%" height="15" fill="rgb(244,70,9)"/><text x="73.8106%" y="127.50"></text></g><g><title>inferred_outlives_crate (396,244 samples, 0.22%)</title><rect x="73.5771%" y="101" width="0.2180%" height="15" fill="rgb(217,125,39)"/><text x="73.8271%" y="111.50"></text></g><g><title>type_of (222,952 samples, 0.12%)</title><rect x="73.6725%" y="85" width="0.1227%" height="15" fill="rgb(235,36,10)"/><text x="73.9225%" y="95.50"></text></g><g><title>type_collecting (2,857,592 samples, 1.57%)</title><rect x="72.3405%" y="181" width="1.5725%" height="15" fill="rgb(251,123,47)"/><text x="72.5905%" y="191.50"></text></g><g><title>collect_mod_item_types (2,840,661 samples, 1.56%)</title><rect x="72.3499%" y="165" width="1.5631%" height="15" fill="rgb(221,13,13)"/><text x="72.5999%" y="175.50"></text></g><g><title>adt_def (346,983 samples, 0.19%)</title><rect x="75.9065%" y="85" width="0.1909%" height="15" fill="rgb(238,131,9)"/><text x="76.1565%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (346,473 samples, 0.19%)</title><rect x="75.9068%" y="69" width="0.1907%" height="15" fill="rgb(211,50,8)"/><text x="76.1568%" y="79.50"></text></g><g><title>item_attrs (329,873 samples, 0.18%)</title><rect x="75.9159%" y="53" width="0.1815%" height="15" fill="rgb(245,182,24)"/><text x="76.1659%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (329,083 samples, 0.18%)</title><rect x="75.9163%" y="37" width="0.1811%" height="15" fill="rgb(242,14,37)"/><text x="76.1663%" y="47.50"></text></g><g><title>adt_sized_constraint (356,153 samples, 0.20%)</title><rect x="75.9045%" y="101" width="0.1960%" height="15" fill="rgb(246,228,12)"/><text x="76.1545%" y="111.50"></text></g><g><title>adt_sized_constraint (370,464 samples, 0.20%)</title><rect x="75.8998%" y="117" width="0.2039%" height="15" fill="rgb(213,55,15)"/><text x="76.1498%" y="127.50"></text></g><g><title>adt_sized_constraint (417,116 samples, 0.23%)</title><rect x="75.8744%" y="133" width="0.2295%" height="15" fill="rgb(209,9,3)"/><text x="76.1244%" y="143.50"></text></g><g><title>evaluate_obligation (1,107,263 samples, 0.61%)</title><rect x="75.5303%" y="149" width="0.6093%" height="15" fill="rgb(230,59,30)"/><text x="75.7803%" y="159.50"></text></g><g><title>implied_outlives_bounds (338,323 samples, 0.19%)</title><rect x="76.1560%" y="149" width="0.1862%" height="15" fill="rgb(209,121,21)"/><text x="76.4060%" y="159.50"></text></g><g><title>param_env (391,527 samples, 0.22%)</title><rect x="76.3467%" y="149" width="0.2154%" height="15" fill="rgb(220,109,13)"/><text x="76.5967%" y="159.50"></text></g><g><title>region_scope_tree (552,010 samples, 0.30%)</title><rect x="76.5919%" y="149" width="0.3038%" height="15" fill="rgb(232,18,1)"/><text x="76.8419%" y="159.50"></text></g><g><title>check_impl_item_well_formed (5,137,640 samples, 2.83%)</title><rect x="74.0697%" y="165" width="2.8271%" height="15" fill="rgb(215,41,42)"/><text x="74.3197%" y="175.50">ch..</text></g><g><title>adt_sized_constraint (385,523 samples, 0.21%)</title><rect x="78.0811%" y="133" width="0.2121%" height="15" fill="rgb(224,123,36)"/><text x="78.3311%" y="143.50"></text></g><g><title>evaluate_obligation (830,258 samples, 0.46%)</title><rect x="77.8793%" y="149" width="0.4569%" height="15" fill="rgb(240,125,3)"/><text x="78.1293%" y="159.50"></text></g><g><title>param_env (529,978 samples, 0.29%)</title><rect x="78.4129%" y="149" width="0.2916%" height="15" fill="rgb(205,98,50)"/><text x="78.6629%" y="159.50"></text></g><g><title>check_item_well_formed (3,671,796 samples, 2.02%)</title><rect x="76.8968%" y="165" width="2.0205%" height="15" fill="rgb(205,185,37)"/><text x="77.1468%" y="175.50">c..</text></g><g><title>analysis (143,364,515 samples, 78.89%)</title><rect x="0.2902%" y="213" width="78.8901%" height="15" fill="rgb(238,207,15)"/><text x="0.5402%" y="223.50">analysis</text></g><g><title>type_check_crate (89,609,260 samples, 49.31%)</title><rect x="29.8704%" y="197" width="49.3098%" height="15" fill="rgb(213,199,42)"/><text x="30.1204%" y="207.50">type_check_crate</text></g><g><title>wf_checking (9,564,967 samples, 5.26%)</title><rect x="73.9169%" y="181" width="5.2634%" height="15" fill="rgb(235,201,11)"/><text x="74.1669%" y="191.50">wf_che..</text></g><g><title>check_trait_item_well_formed (477,925 samples, 0.26%)</title><rect x="78.9173%" y="165" width="0.2630%" height="15" fill="rgb(207,46,11)"/><text x="79.1673%" y="175.50"></text></g><g><title>codegen_crate (669,647 samples, 0.37%)</title><rect x="79.1837%" y="213" width="0.3685%" height="15" fill="rgb(241,35,35)"/><text x="79.4337%" y="223.50"></text></g><g><title>metadata_register_crate (5,393,431 samples, 2.97%)</title><rect x="87.9167%" y="165" width="2.9679%" height="15" fill="rgb(243,32,47)"/><text x="88.1667%" y="175.50">met..</text></g><g><title>metadata_register_crate (4,424,413 samples, 2.43%)</title><rect x="88.4499%" y="149" width="2.4346%" height="15" fill="rgb(247,202,23)"/><text x="88.6999%" y="159.50">me..</text></g><g><title>metadata_register_crate (3,480,469 samples, 1.92%)</title><rect x="88.9693%" y="133" width="1.9152%" height="15" fill="rgb(219,102,11)"/><text x="89.2193%" y="143.50">m..</text></g><g><title>macro_expand_crate (20,445,580 samples, 11.25%)</title><rect x="79.7993%" y="197" width="11.2507%" height="15" fill="rgb(243,110,44)"/><text x="80.0493%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (20,430,450 samples, 11.24%)</title><rect x="79.8077%" y="181" width="11.2424%" height="15" fill="rgb(222,74,54)"/><text x="80.0577%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (300,755 samples, 0.17%)</title><rect x="90.8846%" y="165" width="0.1655%" height="15" fill="rgb(216,99,12)"/><text x="91.1346%" y="175.50"></text></g><g><title>late_resolve_crate (2,557,868 samples, 1.41%)</title><rect x="91.1934%" y="181" width="1.4075%" height="15" fill="rgb(226,22,26)"/><text x="91.4434%" y="191.50"></text></g><g><title>configure_and_expand (23,887,798 samples, 13.14%)</title><rect x="79.5522%" y="213" width="13.1449%" height="15" fill="rgb(217,163,10)"/><text x="79.8022%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,956,333 samples, 1.63%)</title><rect x="91.0703%" y="197" width="1.6268%" height="15" fill="rgb(213,25,53)"/><text x="91.3203%" y="207.50"></text></g><g><title>drop_ast (241,853 samples, 0.13%)</title><rect x="92.6971%" y="213" width="0.1331%" height="15" fill="rgb(252,105,26)"/><text x="92.9471%" y="223.50"></text></g><g><title>early_lint_checks (493,525 samples, 0.27%)</title><rect x="92.8420%" y="213" width="0.2716%" height="15" fill="rgb(220,39,43)"/><text x="93.0920%" y="223.50"></text></g><g><title>free_global_ctxt (4,750,034 samples, 2.61%)</title><rect x="93.1136%" y="213" width="2.6138%" height="15" fill="rgb(229,68,48)"/><text x="93.3636%" y="223.50">fr..</text></g><g><title>generate_crate_metadata (1,392,646 samples, 0.77%)</title><rect x="95.7274%" y="213" width="0.7663%" height="15" fill="rgb(252,8,32)"/><text x="95.9774%" y="223.50"></text></g><g><title>hir_lowering (4,029,836 samples, 2.22%)</title><rect x="96.4937%" y="213" width="2.2175%" height="15" fill="rgb(223,20,43)"/><text x="96.7437%" y="223.50">h..</text></g><g><title>parse_crate (308,574 samples, 0.17%)</title><rect x="98.7542%" y="213" width="0.1698%" height="15" fill="rgb(229,81,49)"/><text x="99.0042%" y="223.50"></text></g><g><title>prepare_outputs (219,833 samples, 0.12%)</title><rect x="98.9265%" y="213" width="0.1210%" height="15" fill="rgb(236,28,36)"/><text x="99.1765%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,278,415 samples, 0.70%)</title><rect x="99.0475%" y="213" width="0.7035%" height="15" fill="rgb(249,185,26)"/><text x="99.2975%" y="223.50"></text></g><g><title>all (181,726,898 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (181,726,898 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (359,284 samples, 0.20%)</title><rect x="99.8023%" y="213" width="0.1977%" height="15" fill="rgb(221,78,26)"/><text x="100.0523%" y="223.50"></text></g></svg></svg>