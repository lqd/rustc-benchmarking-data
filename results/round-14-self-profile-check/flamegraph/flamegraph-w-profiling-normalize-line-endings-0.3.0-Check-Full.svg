<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (34,690 samples, 0.12%)</title><rect x="4.4583%" y="197" width="0.1178%" height="15" fill="rgb(227,0,7)"/><text x="4.7083%" y="207.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (32,840 samples, 0.11%)</title><rect x="4.4646%" y="181" width="0.1115%" height="15" fill="rgb(217,0,24)"/><text x="4.7146%" y="191.50"></text></g><g><title>is_copy_raw (44,460 samples, 0.15%)</title><rect x="5.4519%" y="165" width="0.1510%" height="15" fill="rgb(221,193,54)"/><text x="5.7019%" y="175.50"></text></g><g><title>evaluate_obligation (38,990 samples, 0.13%)</title><rect x="5.4705%" y="149" width="0.1324%" height="15" fill="rgb(248,212,6)"/><text x="5.7205%" y="159.50"></text></g><g><title>explicit_predicates_of (119,591 samples, 0.41%)</title><rect x="6.0819%" y="85" width="0.4061%" height="15" fill="rgb(208,68,35)"/><text x="6.3319%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (118,381 samples, 0.40%)</title><rect x="6.0860%" y="69" width="0.4020%" height="15" fill="rgb(232,128,0)"/><text x="6.3360%" y="79.50"></text></g><g><title>needs_drop_raw (255,113 samples, 0.87%)</title><rect x="5.6488%" y="165" width="0.8663%" height="15" fill="rgb(207,160,47)"/><text x="5.8988%" y="175.50"></text></g><g><title>is_copy_raw (251,503 samples, 0.85%)</title><rect x="5.6611%" y="149" width="0.8541%" height="15" fill="rgb(228,23,34)"/><text x="5.9111%" y="159.50"></text></g><g><title>evaluate_obligation (244,093 samples, 0.83%)</title><rect x="5.6863%" y="133" width="0.8289%" height="15" fill="rgb(218,30,26)"/><text x="5.9363%" y="143.50"></text></g><g><title>predicates_of (149,931 samples, 0.51%)</title><rect x="6.0060%" y="117" width="0.5091%" height="15" fill="rgb(220,122,19)"/><text x="6.2560%" y="127.50"></text></g><g><title>predicates_defined_on (134,581 samples, 0.46%)</title><rect x="6.0581%" y="101" width="0.4570%" height="15" fill="rgb(250,228,42)"/><text x="6.3081%" y="111.50"></text></g><g><title>thir_body (72,891 samples, 0.25%)</title><rect x="6.6146%" y="165" width="0.2475%" height="15" fill="rgb(240,193,28)"/><text x="6.8646%" y="175.50"></text></g><g><title>mir_const (769,459 samples, 2.61%)</title><rect x="4.2517%" y="213" width="2.6129%" height="15" fill="rgb(216,20,37)"/><text x="4.5017%" y="223.50">mi..</text></g><g><title>unsafety_check_result (650,237 samples, 2.21%)</title><rect x="4.6566%" y="197" width="2.2081%" height="15" fill="rgb(206,188,39)"/><text x="4.9066%" y="207.50">u..</text></g><g><title>mir_built (627,277 samples, 2.13%)</title><rect x="4.7345%" y="181" width="2.1301%" height="15" fill="rgb(217,207,13)"/><text x="4.9845%" y="191.50">m..</text></g><g><title>mir_promoted (825,909 samples, 2.80%)</title><rect x="4.0652%" y="229" width="2.8046%" height="15" fill="rgb(231,73,38)"/><text x="4.3152%" y="239.50">mi..</text></g><g><title>type_op_normalize_fn_sig (58,361 samples, 0.20%)</title><rect x="6.8698%" y="229" width="0.1982%" height="15" fill="rgb(225,20,46)"/><text x="7.1198%" y="239.50"></text></g><g><title>MIR_borrow_checking (1,455,156 samples, 4.94%)</title><rect x="2.3373%" y="261" width="4.9414%" height="15" fill="rgb(210,31,41)"/><text x="2.5873%" y="271.50">MIR_bo..</text></g><g><title>mir_borrowck (1,451,476 samples, 4.93%)</title><rect x="2.3498%" y="245" width="4.9289%" height="15" fill="rgb(221,200,47)"/><text x="2.5998%" y="255.50">mir_bo..</text></g><g><title>type_op_prove_predicate (62,041 samples, 0.21%)</title><rect x="7.0680%" y="229" width="0.2107%" height="15" fill="rgb(226,26,5)"/><text x="7.3180%" y="239.50"></text></g><g><title>hir_module_items (109,961 samples, 0.37%)</title><rect x="7.2950%" y="261" width="0.3734%" height="15" fill="rgb(249,33,26)"/><text x="7.5450%" y="271.50"></text></g><g><title>get_lang_items (76,221 samples, 0.26%)</title><rect x="8.2154%" y="213" width="0.2588%" height="15" fill="rgb(235,183,28)"/><text x="8.4654%" y="223.50"></text></g><g><title>associated_item (33,021 samples, 0.11%)</title><rect x="8.5500%" y="197" width="0.1121%" height="15" fill="rgb(221,5,38)"/><text x="8.8000%" y="207.50"></text></g><g><title>item_attrs (30,930 samples, 0.11%)</title><rect x="8.6864%" y="181" width="0.1050%" height="15" fill="rgb(247,18,42)"/><text x="8.9364%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (29,460 samples, 0.10%)</title><rect x="8.6914%" y="165" width="0.1000%" height="15" fill="rgb(241,131,45)"/><text x="8.9414%" y="175.50"></text></g><g><title>codegen_fn_attrs (51,130 samples, 0.17%)</title><rect x="8.6622%" y="197" width="0.1736%" height="15" fill="rgb(249,31,29)"/><text x="8.9122%" y="207.50"></text></g><g><title>should_inherit_track_caller (108,312 samples, 0.37%)</title><rect x="8.4742%" y="213" width="0.3678%" height="15" fill="rgb(225,111,53)"/><text x="8.7242%" y="223.50"></text></g><g><title>codegen_fn_attrs (274,843 samples, 0.93%)</title><rect x="8.0021%" y="229" width="0.9333%" height="15" fill="rgb(238,160,17)"/><text x="8.2521%" y="239.50"></text></g><g><title>check_mod_attrs (348,844 samples, 1.18%)</title><rect x="7.7515%" y="245" width="1.1846%" height="15" fill="rgb(214,148,48)"/><text x="8.0015%" y="255.50"></text></g><g><title>lookup_deprecation_entry (54,251 samples, 0.18%)</title><rect x="9.2683%" y="229" width="0.1842%" height="15" fill="rgb(232,36,49)"/><text x="9.5183%" y="239.50"></text></g><g><title>lookup_stability (30,600 samples, 0.10%)</title><rect x="9.4525%" y="229" width="0.1039%" height="15" fill="rgb(209,103,24)"/><text x="9.7025%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (150,911 samples, 0.51%)</title><rect x="9.0884%" y="245" width="0.5125%" height="15" fill="rgb(229,88,8)"/><text x="9.3384%" y="255.50"></text></g><g><title>misc_checking_1 (603,127 samples, 2.05%)</title><rect x="7.6705%" y="261" width="2.0481%" height="15" fill="rgb(213,181,19)"/><text x="7.9205%" y="271.50">m..</text></g><g><title>liveness_and_intrinsic_checking (86,861 samples, 0.29%)</title><rect x="9.7265%" y="245" width="0.2950%" height="15" fill="rgb(254,191,54)"/><text x="9.9765%" y="255.50"></text></g><g><title>check_mod_liveness (69,241 samples, 0.24%)</title><rect x="9.7863%" y="229" width="0.2351%" height="15" fill="rgb(241,83,37)"/><text x="10.0363%" y="239.50"></text></g><g><title>misc_checking_2 (175,142 samples, 0.59%)</title><rect x="9.7186%" y="261" width="0.5947%" height="15" fill="rgb(233,36,39)"/><text x="9.9686%" y="271.50"></text></g><g><title>match_checking (85,961 samples, 0.29%)</title><rect x="10.0215%" y="245" width="0.2919%" height="15" fill="rgb(226,3,54)"/><text x="10.2715%" y="255.50"></text></g><g><title>check_match (81,481 samples, 0.28%)</title><rect x="10.0367%" y="229" width="0.2767%" height="15" fill="rgb(245,192,40)"/><text x="10.2867%" y="239.50"></text></g><g><title>check_private_in_public (43,371 samples, 0.15%)</title><rect x="10.3500%" y="245" width="0.1473%" height="15" fill="rgb(238,167,29)"/><text x="10.6000%" y="255.50"></text></g><g><title>death_checking (132,061 samples, 0.45%)</title><rect x="10.4973%" y="245" width="0.4485%" height="15" fill="rgb(232,182,51)"/><text x="10.7473%" y="255.50"></text></g><g><title>lint_levels (52,101 samples, 0.18%)</title><rect x="10.7688%" y="229" width="0.1769%" height="15" fill="rgb(231,60,39)"/><text x="11.0188%" y="239.50"></text></g><g><title>crate_lints (108,951 samples, 0.37%)</title><rect x="10.9532%" y="229" width="0.3700%" height="15" fill="rgb(208,69,12)"/><text x="11.2032%" y="239.50"></text></g><g><title>param_env (52,310 samples, 0.18%)</title><rect x="11.1455%" y="213" width="0.1776%" height="15" fill="rgb(235,93,37)"/><text x="11.3955%" y="223.50"></text></g><g><title>lint_checking (194,312 samples, 0.66%)</title><rect x="10.9457%" y="245" width="0.6598%" height="15" fill="rgb(213,116,39)"/><text x="11.1957%" y="255.50"></text></g><g><title>module_lints (83,171 samples, 0.28%)</title><rect x="11.3231%" y="229" width="0.2824%" height="15" fill="rgb(222,207,29)"/><text x="11.5731%" y="239.50"></text></g><g><title>lint_mod (79,831 samples, 0.27%)</title><rect x="11.3345%" y="213" width="0.2711%" height="15" fill="rgb(206,96,30)"/><text x="11.5845%" y="223.50"></text></g><g><title>privacy_access_levels (85,501 samples, 0.29%)</title><rect x="11.6056%" y="245" width="0.2903%" height="15" fill="rgb(218,138,4)"/><text x="11.8556%" y="255.50"></text></g><g><title>privacy_checking_modules (101,461 samples, 0.34%)</title><rect x="11.8959%" y="245" width="0.3445%" height="15" fill="rgb(250,191,14)"/><text x="12.1459%" y="255.50"></text></g><g><title>check_mod_privacy (99,451 samples, 0.34%)</title><rect x="11.9027%" y="229" width="0.3377%" height="15" fill="rgb(239,60,40)"/><text x="12.1527%" y="239.50"></text></g><g><title>misc_checking_3 (587,207 samples, 1.99%)</title><rect x="10.3134%" y="261" width="1.9940%" height="15" fill="rgb(206,27,48)"/><text x="10.5634%" y="271.50">m..</text></g><g><title>impl_parent (380,305 samples, 1.29%)</title><rect x="14.3448%" y="197" width="1.2914%" height="15" fill="rgb(225,35,8)"/><text x="14.5948%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (266,955 samples, 0.91%)</title><rect x="14.7297%" y="181" width="0.9065%" height="15" fill="rgb(250,213,24)"/><text x="14.9797%" y="191.50"></text></g><g><title>impl_trait_ref (1,401,606 samples, 4.76%)</title><rect x="15.6362%" y="197" width="4.7596%" height="15" fill="rgb(247,123,22)"/><text x="15.8862%" y="207.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,287,194 samples, 4.37%)</title><rect x="16.0247%" y="181" width="4.3711%" height="15" fill="rgb(231,138,38)"/><text x="16.2747%" y="191.50">metad..</text></g><g><title>coherent_trait (2,473,098 samples, 8.40%)</title><rect x="12.4396%" y="229" width="8.3982%" height="15" fill="rgb(231,145,46)"/><text x="12.6896%" y="239.50">coherent_tra..</text></g><g><title>specialization_graph_of (2,465,408 samples, 8.37%)</title><rect x="12.4657%" y="213" width="8.3720%" height="15" fill="rgb(251,118,11)"/><text x="12.7157%" y="223.50">specializati..</text></g><g><title>trait_impls_of (130,152 samples, 0.44%)</title><rect x="20.3958%" y="197" width="0.4420%" height="15" fill="rgb(217,147,25)"/><text x="20.6458%" y="207.50"></text></g><g><title>implementations_of_trait (30,720 samples, 0.10%)</title><rect x="20.7334%" y="181" width="0.1043%" height="15" fill="rgb(247,81,37)"/><text x="20.9834%" y="191.50"></text></g><g><title>orphan_check_crate (30,120 samples, 0.10%)</title><rect x="20.8553%" y="229" width="0.1023%" height="15" fill="rgb(209,12,38)"/><text x="21.1053%" y="239.50"></text></g><g><title>coherence_checking (2,531,278 samples, 8.60%)</title><rect x="12.3876%" y="245" width="8.5957%" height="15" fill="rgb(227,1,9)"/><text x="12.6376%" y="255.50">coherence_ch..</text></g><g><title>adt_def (46,761 samples, 0.16%)</title><rect x="24.0739%" y="165" width="0.1588%" height="15" fill="rgb(248,47,43)"/><text x="24.3239%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (45,261 samples, 0.15%)</title><rect x="24.0790%" y="149" width="0.1537%" height="15" fill="rgb(221,10,30)"/><text x="24.3290%" y="159.50"></text></g><g><title>evaluate_obligation (80,742 samples, 0.27%)</title><rect x="23.9642%" y="197" width="0.2742%" height="15" fill="rgb(210,229,1)"/><text x="24.2142%" y="207.50"></text></g><g><title>adt_sized_constraint (53,951 samples, 0.18%)</title><rect x="24.0552%" y="181" width="0.1832%" height="15" fill="rgb(222,148,37)"/><text x="24.3052%" y="191.50"></text></g><g><title>method_autoderef_steps (98,942 samples, 0.34%)</title><rect x="24.3066%" y="197" width="0.3360%" height="15" fill="rgb(234,67,33)"/><text x="24.5566%" y="207.50"></text></g><g><title>evaluate_obligation (83,740 samples, 0.28%)</title><rect x="24.3583%" y="181" width="0.2844%" height="15" fill="rgb(247,98,35)"/><text x="24.6083%" y="191.50"></text></g><g><title>trait_impls_of (59,420 samples, 0.20%)</title><rect x="24.4408%" y="165" width="0.2018%" height="15" fill="rgb(247,138,52)"/><text x="24.6908%" y="175.50"></text></g><g><title>item_bodies_checking (1,073,652 samples, 3.65%)</title><rect x="21.0413%" y="245" width="3.6459%" height="15" fill="rgb(213,79,30)"/><text x="21.2913%" y="255.50">item..</text></g><g><title>typeck_item_bodies (1,070,542 samples, 3.64%)</title><rect x="21.0519%" y="229" width="3.6354%" height="15" fill="rgb(246,177,23)"/><text x="21.3019%" y="239.50">type..</text></g><g><title>typeck (1,066,192 samples, 3.62%)</title><rect x="21.0666%" y="213" width="3.6206%" height="15" fill="rgb(230,62,27)"/><text x="21.3166%" y="223.50">type..</text></g><g><title>impl_parent (98,891 samples, 0.34%)</title><rect x="26.3772%" y="165" width="0.3358%" height="15" fill="rgb(216,154,8)"/><text x="26.6272%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (57,801 samples, 0.20%)</title><rect x="26.5167%" y="149" width="0.1963%" height="15" fill="rgb(244,35,45)"/><text x="26.7667%" y="159.50"></text></g><g><title>impl_trait_ref (409,766 samples, 1.39%)</title><rect x="26.7130%" y="165" width="1.3915%" height="15" fill="rgb(251,115,12)"/><text x="26.9630%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (365,576 samples, 1.24%)</title><rect x="26.8631%" y="149" width="1.2414%" height="15" fill="rgb(240,54,50)"/><text x="27.1131%" y="159.50"></text></g><g><title>adt_destructor (771,228 samples, 2.62%)</title><rect x="25.7253%" y="213" width="2.6189%" height="15" fill="rgb(233,84,52)"/><text x="25.9753%" y="223.50">ad..</text></g><g><title>coherent_trait (760,938 samples, 2.58%)</title><rect x="25.7602%" y="197" width="2.5840%" height="15" fill="rgb(207,117,47)"/><text x="26.0102%" y="207.50">co..</text></g><g><title>specialization_graph_of (757,988 samples, 2.57%)</title><rect x="25.7702%" y="181" width="2.5740%" height="15" fill="rgb(249,43,39)"/><text x="26.0202%" y="191.50">sp..</text></g><g><title>trait_impls_of (70,591 samples, 0.24%)</title><rect x="28.1045%" y="165" width="0.2397%" height="15" fill="rgb(209,38,44)"/><text x="28.3545%" y="175.50"></text></g><g><title>explicit_item_bounds (58,671 samples, 0.20%)</title><rect x="28.3442%" y="213" width="0.1992%" height="15" fill="rgb(236,212,23)"/><text x="28.5942%" y="223.50"></text></g><g><title>needs_drop_raw (315,253 samples, 1.07%)</title><rect x="31.8129%" y="117" width="1.0705%" height="15" fill="rgb(242,79,21)"/><text x="32.0629%" y="127.50"></text></g><g><title>is_copy_raw (309,173 samples, 1.05%)</title><rect x="31.8336%" y="101" width="1.0499%" height="15" fill="rgb(211,96,35)"/><text x="32.0836%" y="111.50"></text></g><g><title>evaluate_obligation (300,753 samples, 1.02%)</title><rect x="31.8622%" y="85" width="1.0213%" height="15" fill="rgb(253,215,40)"/><text x="32.1122%" y="95.50"></text></g><g><title>trait_impls_of (277,043 samples, 0.94%)</title><rect x="31.9427%" y="69" width="0.9408%" height="15" fill="rgb(211,81,21)"/><text x="32.1927%" y="79.50"></text></g><g><title>implementations_of_trait (60,240 samples, 0.20%)</title><rect x="32.6789%" y="53" width="0.2046%" height="15" fill="rgb(208,190,38)"/><text x="32.9289%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (49,130 samples, 0.17%)</title><rect x="32.7166%" y="37" width="0.1668%" height="15" fill="rgb(235,213,38)"/><text x="32.9666%" y="47.50"></text></g><g><title>thir_body (65,881 samples, 0.22%)</title><rect x="32.8894%" y="117" width="0.2237%" height="15" fill="rgb(237,122,38)"/><text x="33.1394%" y="127.50"></text></g><g><title>dropck_outlives (39,741 samples, 0.13%)</title><rect x="34.6958%" y="101" width="0.1350%" height="15" fill="rgb(244,218,35)"/><text x="34.9458%" y="111.50"></text></g><g><title>trait_impls_of (38,910 samples, 0.13%)</title><rect x="35.0337%" y="101" width="0.1321%" height="15" fill="rgb(240,68,47)"/><text x="35.2837%" y="111.50"></text></g><g><title>mir_const (1,207,844 samples, 4.10%)</title><rect x="31.0672%" y="165" width="4.1016%" height="15" fill="rgb(210,16,53)"/><text x="31.3172%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (1,154,643 samples, 3.92%)</title><rect x="31.2479%" y="149" width="3.9209%" height="15" fill="rgb(235,124,12)"/><text x="31.4979%" y="159.50">unsa..</text></g><g><title>mir_built (1,103,542 samples, 3.75%)</title><rect x="31.4214%" y="133" width="3.7474%" height="15" fill="rgb(224,169,11)"/><text x="31.6714%" y="143.50">mir_..</text></g><g><title>typeck (598,106 samples, 2.03%)</title><rect x="33.1378%" y="117" width="2.0311%" height="15" fill="rgb(250,166,2)"/><text x="33.3878%" y="127.50">t..</text></g><g><title>mir_promoted (1,316,005 samples, 4.47%)</title><rect x="30.7283%" y="181" width="4.4689%" height="15" fill="rgb(242,216,29)"/><text x="30.9783%" y="191.50">mir_p..</text></g><g><title>item_types_checking (3,131,725 samples, 10.63%)</title><rect x="24.6872%" y="245" width="10.6347%" height="15" fill="rgb(230,116,27)"/><text x="24.9372%" y="255.50">item_types_check..</text></g><g><title>check_mod_item_types (3,127,745 samples, 10.62%)</title><rect x="24.7007%" y="229" width="10.6212%" height="15" fill="rgb(228,99,48)"/><text x="24.9507%" y="239.50">check_mod_item_t..</text></g><g><title>type_of (1,967,852 samples, 6.68%)</title><rect x="28.6395%" y="213" width="6.6824%" height="15" fill="rgb(253,11,6)"/><text x="28.8895%" y="223.50">type_of</text></g><g><title>mir_borrowck (1,962,442 samples, 6.66%)</title><rect x="28.6579%" y="197" width="6.6641%" height="15" fill="rgb(247,143,39)"/><text x="28.9079%" y="207.50">mir_borro..</text></g><g><title>fn_sig (66,560 samples, 0.23%)</title><rect x="35.6034%" y="213" width="0.2260%" height="15" fill="rgb(236,97,10)"/><text x="35.8534%" y="223.50"></text></g><g><title>type_of (30,670 samples, 0.10%)</title><rect x="35.7253%" y="197" width="0.1041%" height="15" fill="rgb(233,208,19)"/><text x="35.9753%" y="207.50"></text></g><g><title>generics_of (59,620 samples, 0.20%)</title><rect x="35.8294%" y="213" width="0.2025%" height="15" fill="rgb(216,164,2)"/><text x="36.0794%" y="223.50"></text></g><g><title>associated_item (71,371 samples, 0.24%)</title><rect x="37.2050%" y="117" width="0.2424%" height="15" fill="rgb(220,129,5)"/><text x="37.4550%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (39,341 samples, 0.13%)</title><rect x="37.3138%" y="101" width="0.1336%" height="15" fill="rgb(242,17,10)"/><text x="37.5638%" y="111.50"></text></g><g><title>associated_items (127,391 samples, 0.43%)</title><rect x="37.0254%" y="133" width="0.4326%" height="15" fill="rgb(242,107,0)"/><text x="37.2754%" y="143.50"></text></g><g><title>late_bound_vars_map (243,132 samples, 0.83%)</title><rect x="36.6571%" y="165" width="0.8256%" height="15" fill="rgb(251,28,31)"/><text x="36.9071%" y="175.50"></text></g><g><title>resolve_lifetimes (236,032 samples, 0.80%)</title><rect x="36.6812%" y="149" width="0.8015%" height="15" fill="rgb(233,223,10)"/><text x="36.9312%" y="159.50"></text></g><g><title>explicit_predicates_of (409,435 samples, 1.39%)</title><rect x="36.1259%" y="181" width="1.3904%" height="15" fill="rgb(215,21,27)"/><text x="36.3759%" y="191.50"></text></g><g><title>predicates_of (486,277 samples, 1.65%)</title><rect x="36.0430%" y="213" width="1.6513%" height="15" fill="rgb(232,23,21)"/><text x="36.2930%" y="223.50"></text></g><g><title>predicates_defined_on (477,387 samples, 1.62%)</title><rect x="36.0732%" y="197" width="1.6211%" height="15" fill="rgb(244,5,23)"/><text x="36.3232%" y="207.50"></text></g><g><title>inferred_outlives_of (52,441 samples, 0.18%)</title><rect x="37.5163%" y="181" width="0.1781%" height="15" fill="rgb(226,81,46)"/><text x="37.7663%" y="191.50"></text></g><g><title>inferred_outlives_crate (39,210 samples, 0.13%)</title><rect x="37.5612%" y="165" width="0.1331%" height="15" fill="rgb(247,70,30)"/><text x="37.8112%" y="175.50"></text></g><g><title>type_collecting (761,948 samples, 2.59%)</title><rect x="35.3245%" y="245" width="2.5874%" height="15" fill="rgb(212,68,19)"/><text x="35.5745%" y="255.50">ty..</text></g><g><title>collect_mod_item_types (751,678 samples, 2.55%)</title><rect x="35.3594%" y="229" width="2.5526%" height="15" fill="rgb(240,187,13)"/><text x="35.6094%" y="239.50">co..</text></g><g><title>type_of (64,070 samples, 0.22%)</title><rect x="37.6943%" y="213" width="0.2176%" height="15" fill="rgb(223,113,26)"/><text x="37.9443%" y="223.50"></text></g><g><title>adt_def (32,890 samples, 0.11%)</title><rect x="37.8002%" y="197" width="0.1117%" height="15" fill="rgb(206,192,2)"/><text x="38.0502%" y="207.50"></text></g><g><title>evaluate_obligation (158,391 samples, 0.54%)</title><rect x="38.5437%" y="213" width="0.5379%" height="15" fill="rgb(241,108,4)"/><text x="38.7937%" y="223.50"></text></g><g><title>trait_impls_of (34,101 samples, 0.12%)</title><rect x="38.9658%" y="197" width="0.1158%" height="15" fill="rgb(247,173,49)"/><text x="39.2158%" y="207.50"></text></g><g><title>implied_outlives_bounds (33,640 samples, 0.11%)</title><rect x="39.0816%" y="213" width="0.1142%" height="15" fill="rgb(224,114,35)"/><text x="39.3316%" y="223.50"></text></g><g><title>check_impl_item_well_formed (435,625 samples, 1.48%)</title><rect x="37.9993%" y="229" width="1.4793%" height="15" fill="rgb(245,159,27)"/><text x="38.2493%" y="239.50"></text></g><g><title>region_scope_tree (30,751 samples, 0.10%)</title><rect x="39.3742%" y="213" width="0.1044%" height="15" fill="rgb(245,172,44)"/><text x="39.6242%" y="223.50"></text></g><g><title>implied_outlives_bounds (94,912 samples, 0.32%)</title><rect x="40.9943%" y="213" width="0.3223%" height="15" fill="rgb(236,23,11)"/><text x="41.2443%" y="223.50"></text></g><g><title>param_env (198,972 samples, 0.68%)</title><rect x="41.3166%" y="213" width="0.6757%" height="15" fill="rgb(205,117,38)"/><text x="41.5666%" y="223.50"></text></g><g><title>predicates_of (50,771 samples, 0.17%)</title><rect x="41.9923%" y="213" width="0.1724%" height="15" fill="rgb(237,72,25)"/><text x="42.2423%" y="223.50"></text></g><g><title>predicates_defined_on (37,081 samples, 0.13%)</title><rect x="42.0388%" y="197" width="0.1259%" height="15" fill="rgb(244,70,9)"/><text x="42.2888%" y="207.50"></text></g><g><title>analysis (11,919,514 samples, 40.48%)</title><rect x="1.9003%" y="277" width="40.4763%" height="15" fill="rgb(217,125,39)"/><text x="2.1503%" y="287.50">analysis</text></g><g><title>type_check_crate (8,854,819 samples, 30.07%)</title><rect x="12.3074%" y="261" width="30.0692%" height="15" fill="rgb(235,36,10)"/><text x="12.5574%" y="271.50">type_check_crate</text></g><g><title>wf_checking (1,313,795 samples, 4.46%)</title><rect x="37.9153%" y="245" width="4.4614%" height="15" fill="rgb(251,123,47)"/><text x="38.1653%" y="255.50">wf_ch..</text></g><g><title>check_item_well_formed (853,429 samples, 2.90%)</title><rect x="39.4786%" y="229" width="2.8981%" height="15" fill="rgb(221,13,13)"/><text x="39.7286%" y="239.50">ch..</text></g><g><title>variances_of (42,791 samples, 0.15%)</title><rect x="42.2313%" y="213" width="0.1453%" height="15" fill="rgb(238,131,9)"/><text x="42.4813%" y="223.50"></text></g><g><title>crate_variances (38,831 samples, 0.13%)</title><rect x="42.2448%" y="197" width="0.1319%" height="15" fill="rgb(211,50,8)"/><text x="42.4948%" y="207.50"></text></g><g><title>native_libraries (49,230 samples, 0.17%)</title><rect x="43.9415%" y="261" width="0.1672%" height="15" fill="rgb(245,182,24)"/><text x="44.1915%" y="271.50"></text></g><g><title>metadata_decode_entry_native_libraries (38,430 samples, 0.13%)</title><rect x="43.9781%" y="245" width="0.1305%" height="15" fill="rgb(242,14,37)"/><text x="44.2281%" y="255.50"></text></g><g><title>codegen_crate (530,426 samples, 1.80%)</title><rect x="42.4116%" y="277" width="1.8012%" height="15" fill="rgb(246,228,12)"/><text x="42.6616%" y="287.50">c..</text></g><g><title>AST_validation (73,671 samples, 0.25%)</title><rect x="44.8332%" y="261" width="0.2502%" height="15" fill="rgb(213,55,15)"/><text x="45.0832%" y="271.50"></text></g><g><title>crate_injection (115,571 samples, 0.39%)</title><rect x="45.1417%" y="261" width="0.3925%" height="15" fill="rgb(209,9,3)"/><text x="45.3917%" y="271.50"></text></g><g><title>metadata_load_macro (50,341 samples, 0.17%)</title><rect x="71.4865%" y="229" width="0.1709%" height="15" fill="rgb(230,59,30)"/><text x="71.7365%" y="239.50"></text></g><g><title>macro_expand_crate (9,994,412 samples, 33.94%)</title><rect x="45.5341%" y="261" width="33.9391%" height="15" fill="rgb(209,121,21)"/><text x="45.7841%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (9,974,592 samples, 33.87%)</title><rect x="45.6014%" y="245" width="33.8718%" height="15" fill="rgb(220,109,13)"/><text x="45.8514%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,301,586 samples, 7.82%)</title><rect x="71.6574%" y="229" width="7.8157%" height="15" fill="rgb(232,18,1)"/><text x="71.9074%" y="239.50">metadata_re..</text></g><g><title>metadata_register_crate (830,230 samples, 2.82%)</title><rect x="76.6539%" y="213" width="2.8193%" height="15" fill="rgb(215,41,42)"/><text x="76.9039%" y="223.50">me..</text></g><g><title>metadata_register_crate (66,700 samples, 0.23%)</title><rect x="79.2467%" y="197" width="0.2265%" height="15" fill="rgb(224,123,36)"/><text x="79.4967%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (96,661 samples, 0.33%)</title><rect x="79.4879%" y="261" width="0.3282%" height="15" fill="rgb(240,125,3)"/><text x="79.7379%" y="271.50"></text></g><g><title>finalize_macro_resolutions (312,603 samples, 1.06%)</title><rect x="79.8773%" y="245" width="1.0615%" height="15" fill="rgb(205,98,50)"/><text x="80.1273%" y="255.50"></text></g><g><title>late_resolve_crate (404,035 samples, 1.37%)</title><rect x="80.9388%" y="245" width="1.3720%" height="15" fill="rgb(205,185,37)"/><text x="81.1888%" y="255.50"></text></g><g><title>configure_and_expand (11,258,106 samples, 38.23%)</title><rect x="44.2129%" y="277" width="38.2303%" height="15" fill="rgb(238,207,15)"/><text x="44.4629%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (773,629 samples, 2.63%)</title><rect x="79.8161%" y="261" width="2.6271%" height="15" fill="rgb(213,199,42)"/><text x="80.0661%" y="271.50">re..</text></g><g><title>drop_ast (39,490 samples, 0.13%)</title><rect x="82.4432%" y="277" width="0.1341%" height="15" fill="rgb(235,201,11)"/><text x="82.6932%" y="287.50"></text></g><g><title>early_lint_checks (94,971 samples, 0.32%)</title><rect x="82.6231%" y="277" width="0.3225%" height="15" fill="rgb(207,46,11)"/><text x="82.8731%" y="287.50"></text></g><g><title>free_global_ctxt (1,874,721 samples, 6.37%)</title><rect x="82.9456%" y="277" width="6.3662%" height="15" fill="rgb(241,35,35)"/><text x="83.1956%" y="287.50">free_glo..</text></g><g><title>crate_hash (127,781 samples, 0.43%)</title><rect x="90.4933%" y="261" width="0.4339%" height="15" fill="rgb(243,32,47)"/><text x="90.7433%" y="271.50"></text></g><g><title>generate_crate_metadata (578,907 samples, 1.97%)</title><rect x="89.3118%" y="277" width="1.9659%" height="15" fill="rgb(247,202,23)"/><text x="89.5618%" y="287.50">g..</text></g><g><title>hir_lowering (480,466 samples, 1.63%)</title><rect x="91.2777%" y="277" width="1.6316%" height="15" fill="rgb(219,102,11)"/><text x="91.5277%" y="287.50"></text></g><g><title>link (40,891 samples, 0.14%)</title><rect x="92.9092%" y="277" width="0.1389%" height="15" fill="rgb(243,110,44)"/><text x="93.1592%" y="287.50"></text></g><g><title>parse_crate (791,439 samples, 2.69%)</title><rect x="93.0481%" y="277" width="2.6876%" height="15" fill="rgb(222,74,54)"/><text x="93.2981%" y="287.50">pa..</text></g><g><title>prepare_outputs (257,923 samples, 0.88%)</title><rect x="95.7636%" y="277" width="0.8759%" height="15" fill="rgb(216,99,12)"/><text x="96.0136%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (448,785 samples, 1.52%)</title><rect x="96.6395%" y="277" width="1.5240%" height="15" fill="rgb(226,22,26)"/><text x="96.8895%" y="287.50"></text></g><g><title>setup_global_ctxt (115,121 samples, 0.39%)</title><rect x="98.2100%" y="277" width="0.3909%" height="15" fill="rgb(217,163,10)"/><text x="98.4600%" y="287.50"></text></g><g><title>all (29,448,100 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (29,448,100 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (411,994 samples, 1.40%)</title><rect x="98.6009%" y="277" width="1.3991%" height="15" fill="rgb(220,39,43)"/><text x="98.8509%" y="287.50"></text></g></svg></svg>