<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (205,294 samples, 0.16%)</title><rect x="9.7609%" y="149" width="0.1616%" height="15" fill="rgb(227,0,7)"/><text x="10.0109%" y="159.50"></text></g><g><title>param_env (243,332 samples, 0.19%)</title><rect x="11.3617%" y="117" width="0.1915%" height="15" fill="rgb(217,0,24)"/><text x="11.6117%" y="127.50"></text></g><g><title>item_attrs (221,921 samples, 0.17%)</title><rect x="11.9994%" y="85" width="0.1747%" height="15" fill="rgb(221,193,54)"/><text x="12.2494%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (214,761 samples, 0.17%)</title><rect x="12.0051%" y="69" width="0.1690%" height="15" fill="rgb(248,212,6)"/><text x="12.2551%" y="79.50"></text></g><g><title>codegen_fn_attrs (341,563 samples, 0.27%)</title><rect x="11.9186%" y="101" width="0.2689%" height="15" fill="rgb(208,68,35)"/><text x="12.1686%" y="111.50"></text></g><g><title>adt_drop_tys (257,212 samples, 0.20%)</title><rect x="14.3358%" y="69" width="0.2025%" height="15" fill="rgb(232,128,0)"/><text x="14.5858%" y="79.50"></text></g><g><title>needs_drop_raw (1,418,324 samples, 1.12%)</title><rect x="14.2186%" y="85" width="1.1164%" height="15" fill="rgb(207,160,47)"/><text x="14.4686%" y="95.50"></text></g><g><title>is_copy_raw (1,003,450 samples, 0.79%)</title><rect x="14.5452%" y="69" width="0.7899%" height="15" fill="rgb(228,23,34)"/><text x="14.7952%" y="79.50"></text></g><g><title>evaluate_obligation (812,559 samples, 0.64%)</title><rect x="14.6955%" y="53" width="0.6396%" height="15" fill="rgb(218,30,26)"/><text x="14.9455%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (180,611 samples, 0.14%)</title><rect x="15.5378%" y="69" width="0.1422%" height="15" fill="rgb(220,122,19)"/><text x="15.7878%" y="79.50"></text></g><g><title>specialization_graph_of (152,191 samples, 0.12%)</title><rect x="15.7317%" y="69" width="0.1198%" height="15" fill="rgb(250,228,42)"/><text x="15.9817%" y="79.50"></text></g><g><title>resolve_instance (723,177 samples, 0.57%)</title><rect x="15.3350%" y="85" width="0.5692%" height="15" fill="rgb(240,193,28)"/><text x="15.5850%" y="95.50"></text></g><g><title>thir_body (936,802 samples, 0.74%)</title><rect x="15.9337%" y="85" width="0.7374%" height="15" fill="rgb(216,20,37)"/><text x="16.1837%" y="95.50"></text></g><g><title>mir_const (7,626,785 samples, 6.00%)</title><rect x="10.7026%" y="133" width="6.0033%" height="15" fill="rgb(206,188,39)"/><text x="10.9526%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (6,546,073 samples, 5.15%)</title><rect x="11.5532%" y="117" width="5.1527%" height="15" fill="rgb(217,207,13)"/><text x="11.8032%" y="127.50">unsafe..</text></g><g><title>mir_built (5,740,356 samples, 4.52%)</title><rect x="12.1874%" y="101" width="4.5185%" height="15" fill="rgb(231,73,38)"/><text x="12.4374%" y="111.50">mir_b..</text></g><g><title>has_structural_eq_impls (281,304 samples, 0.22%)</title><rect x="16.9372%" y="117" width="0.2214%" height="15" fill="rgb(225,20,46)"/><text x="17.1872%" y="127.50"></text></g><g><title>evaluate_obligation (219,463 samples, 0.17%)</title><rect x="16.9858%" y="101" width="0.1727%" height="15" fill="rgb(210,31,41)"/><text x="17.2358%" y="111.50"></text></g><g><title>trait_impls_of (135,260 samples, 0.11%)</title><rect x="17.0521%" y="85" width="0.1065%" height="15" fill="rgb(221,200,47)"/><text x="17.3021%" y="95.50"></text></g><g><title>is_freeze_raw (138,631 samples, 0.11%)</title><rect x="17.1604%" y="117" width="0.1091%" height="15" fill="rgb(226,26,5)"/><text x="17.4104%" y="127.50"></text></g><g><title>evaluate_obligation (127,891 samples, 0.10%)</title><rect x="17.1689%" y="101" width="0.1007%" height="15" fill="rgb(249,33,26)"/><text x="17.4189%" y="111.50"></text></g><g><title>mir_const (234,000 samples, 0.18%)</title><rect x="17.2821%" y="117" width="0.1842%" height="15" fill="rgb(235,183,28)"/><text x="17.5321%" y="127.50"></text></g><g><title>unsafety_check_result (158,270 samples, 0.12%)</title><rect x="17.3418%" y="101" width="0.1246%" height="15" fill="rgb(221,5,38)"/><text x="17.5918%" y="111.50"></text></g><g><title>mir_const_qualif (1,053,520 samples, 0.83%)</title><rect x="16.7059%" y="133" width="0.8293%" height="15" fill="rgb(247,18,42)"/><text x="16.9559%" y="143.50"></text></g><g><title>mir_promoted (9,504,095 samples, 7.48%)</title><rect x="10.0548%" y="149" width="7.4810%" height="15" fill="rgb(241,131,45)"/><text x="10.3048%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (685,767 samples, 0.54%)</title><rect x="17.5358%" y="149" width="0.5398%" height="15" fill="rgb(249,31,29)"/><text x="17.7858%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (255,543 samples, 0.20%)</title><rect x="18.0756%" y="149" width="0.2011%" height="15" fill="rgb(225,111,53)"/><text x="18.3256%" y="159.50"></text></g><g><title>normalize_projection_ty (135,621 samples, 0.11%)</title><rect x="18.1700%" y="133" width="0.1068%" height="15" fill="rgb(238,160,17)"/><text x="18.4200%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,907,587 samples, 2.29%)</title><rect x="18.3564%" y="149" width="2.2887%" height="15" fill="rgb(214,148,48)"/><text x="18.6064%" y="159.50">t..</text></g><g><title>evaluate_obligation (245,046 samples, 0.19%)</title><rect x="20.4522%" y="133" width="0.1929%" height="15" fill="rgb(232,36,49)"/><text x="20.7022%" y="143.50"></text></g><g><title>MIR_borrow_checking (25,273,061 samples, 19.89%)</title><rect x="0.7594%" y="181" width="19.8934%" height="15" fill="rgb(209,103,24)"/><text x="1.0094%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,119,161 samples, 19.77%)</title><rect x="0.8805%" y="165" width="19.7723%" height="15" fill="rgb(229,88,8)"/><text x="1.1305%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (344,224 samples, 0.27%)</title><rect x="20.6528%" y="181" width="0.2710%" height="15" fill="rgb(213,181,19)"/><text x="20.9028%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (132,972 samples, 0.10%)</title><rect x="20.8191%" y="165" width="0.1047%" height="15" fill="rgb(254,191,54)"/><text x="21.0691%" y="175.50"></text></g><g><title>hir_module_items (195,533 samples, 0.15%)</title><rect x="20.9237%" y="181" width="0.1539%" height="15" fill="rgb(241,83,37)"/><text x="21.1737%" y="191.50"></text></g><g><title>should_inherit_track_caller (170,742 samples, 0.13%)</title><rect x="21.3897%" y="133" width="0.1344%" height="15" fill="rgb(233,36,39)"/><text x="21.6397%" y="143.50"></text></g><g><title>codegen_fn_attrs (324,703 samples, 0.26%)</title><rect x="21.2810%" y="149" width="0.2556%" height="15" fill="rgb(226,3,54)"/><text x="21.5310%" y="159.50"></text></g><g><title>check_mod_attrs (553,887 samples, 0.44%)</title><rect x="21.1007%" y="165" width="0.4360%" height="15" fill="rgb(245,192,40)"/><text x="21.3507%" y="175.50"></text></g><g><title>check_mod_const_bodies (131,810 samples, 0.10%)</title><rect x="21.5367%" y="165" width="0.1038%" height="15" fill="rgb(238,167,29)"/><text x="21.7867%" y="175.50"></text></g><g><title>lookup_deprecation_entry (174,371 samples, 0.14%)</title><rect x="21.8519%" y="149" width="0.1373%" height="15" fill="rgb(232,182,51)"/><text x="22.1019%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (462,067 samples, 0.36%)</title><rect x="21.7003%" y="165" width="0.3637%" height="15" fill="rgb(231,60,39)"/><text x="21.9503%" y="175.50"></text></g><g><title>misc_checking_1 (1,317,855 samples, 1.04%)</title><rect x="21.0780%" y="181" width="1.0373%" height="15" fill="rgb(208,69,12)"/><text x="21.3280%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (500,245 samples, 0.39%)</title><rect x="22.1168%" y="165" width="0.3938%" height="15" fill="rgb(235,93,37)"/><text x="22.3668%" y="175.50"></text></g><g><title>check_mod_liveness (399,163 samples, 0.31%)</title><rect x="22.1964%" y="149" width="0.3142%" height="15" fill="rgb(213,116,39)"/><text x="22.4464%" y="159.50"></text></g><g><title>mir_borrowck (438,775 samples, 0.35%)</title><rect x="23.1521%" y="53" width="0.3454%" height="15" fill="rgb(222,207,29)"/><text x="23.4021%" y="63.50"></text></g><g><title>eval_to_const_value_raw (788,329 samples, 0.62%)</title><rect x="22.8777%" y="133" width="0.6205%" height="15" fill="rgb(206,96,30)"/><text x="23.1277%" y="143.50"></text></g><g><title>eval_to_const_value_raw (776,389 samples, 0.61%)</title><rect x="22.8871%" y="117" width="0.6111%" height="15" fill="rgb(218,138,4)"/><text x="23.1371%" y="127.50"></text></g><g><title>eval_to_allocation_raw (767,089 samples, 0.60%)</title><rect x="22.8945%" y="101" width="0.6038%" height="15" fill="rgb(250,191,14)"/><text x="23.1445%" y="111.50"></text></g><g><title>mir_for_ctfe (613,937 samples, 0.48%)</title><rect x="23.0150%" y="85" width="0.4833%" height="15" fill="rgb(239,60,40)"/><text x="23.2650%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (561,297 samples, 0.44%)</title><rect x="23.0564%" y="69" width="0.4418%" height="15" fill="rgb(206,27,48)"/><text x="23.3064%" y="79.50"></text></g><g><title>mir_const_qualif (215,182 samples, 0.17%)</title><rect x="23.5038%" y="133" width="0.1694%" height="15" fill="rgb(225,35,8)"/><text x="23.7538%" y="143.50"></text></g><g><title>mir_const (165,462 samples, 0.13%)</title><rect x="23.5430%" y="117" width="0.1302%" height="15" fill="rgb(250,213,24)"/><text x="23.7930%" y="127.50"></text></g><g><title>misc_checking_2 (2,098,323 samples, 1.65%)</title><rect x="22.1153%" y="181" width="1.6517%" height="15" fill="rgb(247,123,22)"/><text x="22.3653%" y="191.50"></text></g><g><title>match_checking (1,596,208 samples, 1.26%)</title><rect x="22.5106%" y="165" width="1.2564%" height="15" fill="rgb(231,138,38)"/><text x="22.7606%" y="175.50"></text></g><g><title>check_match (1,553,518 samples, 1.22%)</title><rect x="22.5442%" y="149" width="1.2228%" height="15" fill="rgb(231,145,46)"/><text x="22.7942%" y="159.50"></text></g><g><title>check_private_in_public (229,783 samples, 0.18%)</title><rect x="23.7752%" y="165" width="0.1809%" height="15" fill="rgb(251,118,11)"/><text x="24.0252%" y="175.50"></text></g><g><title>death_checking (488,265 samples, 0.38%)</title><rect x="23.9561%" y="165" width="0.3843%" height="15" fill="rgb(217,147,25)"/><text x="24.2061%" y="175.50"></text></g><g><title>layout_of (186,212 samples, 0.15%)</title><rect x="25.5971%" y="37" width="0.1466%" height="15" fill="rgb(247,81,37)"/><text x="25.8471%" y="47.50"></text></g><g><title>layout_of (248,912 samples, 0.20%)</title><rect x="25.5509%" y="69" width="0.1959%" height="15" fill="rgb(209,12,38)"/><text x="25.8009%" y="79.50"></text></g><g><title>layout_of (213,032 samples, 0.17%)</title><rect x="25.5792%" y="53" width="0.1677%" height="15" fill="rgb(227,1,9)"/><text x="25.8292%" y="63.50"></text></g><g><title>layout_of (289,134 samples, 0.23%)</title><rect x="25.5213%" y="85" width="0.2276%" height="15" fill="rgb(248,47,43)"/><text x="25.7713%" y="95.50"></text></g><g><title>fn_abi_of_instance (385,794 samples, 0.30%)</title><rect x="25.4768%" y="101" width="0.3037%" height="15" fill="rgb(221,10,30)"/><text x="25.7268%" y="111.50"></text></g><g><title>eval_to_allocation_raw (754,819 samples, 0.59%)</title><rect x="25.3054%" y="133" width="0.5941%" height="15" fill="rgb(210,229,1)"/><text x="25.5554%" y="143.50"></text></g><g><title>eval_to_allocation_raw (750,509 samples, 0.59%)</title><rect x="25.3088%" y="117" width="0.5908%" height="15" fill="rgb(222,148,37)"/><text x="25.5588%" y="127.50"></text></g><g><title>eval_to_const_value_raw (353,934 samples, 0.28%)</title><rect x="25.8995%" y="133" width="0.2786%" height="15" fill="rgb(234,67,33)"/><text x="26.1495%" y="143.50"></text></g><g><title>eval_to_const_value_raw (350,584 samples, 0.28%)</title><rect x="25.9022%" y="117" width="0.2760%" height="15" fill="rgb(247,98,35)"/><text x="26.1522%" y="127.50"></text></g><g><title>eval_to_allocation_raw (342,014 samples, 0.27%)</title><rect x="25.9089%" y="101" width="0.2692%" height="15" fill="rgb(247,138,52)"/><text x="26.1589%" y="111.50"></text></g><g><title>param_env (394,913 samples, 0.31%)</title><rect x="26.1781%" y="133" width="0.3109%" height="15" fill="rgb(213,79,30)"/><text x="26.4281%" y="143.50"></text></g><g><title>predicates_of (192,140 samples, 0.15%)</title><rect x="26.3377%" y="117" width="0.1512%" height="15" fill="rgb(246,177,23)"/><text x="26.5877%" y="127.50"></text></g><g><title>predicates_defined_on (150,830 samples, 0.12%)</title><rect x="26.3702%" y="101" width="0.1187%" height="15" fill="rgb(230,62,27)"/><text x="26.6202%" y="111.50"></text></g><g><title>crate_lints (3,929,564 samples, 3.09%)</title><rect x="24.3419%" y="149" width="3.0931%" height="15" fill="rgb(216,154,8)"/><text x="24.5919%" y="159.50">cra..</text></g><g><title>type_of (1,158,835 samples, 0.91%)</title><rect x="26.5229%" y="133" width="0.9122%" height="15" fill="rgb(244,35,45)"/><text x="26.7729%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (903,903 samples, 0.71%)</title><rect x="26.7235%" y="117" width="0.7115%" height="15" fill="rgb(251,115,12)"/><text x="26.9735%" y="127.50"></text></g><g><title>lint_checking (4,350,629 samples, 3.42%)</title><rect x="24.3404%" y="165" width="3.4246%" height="15" fill="rgb(240,54,50)"/><text x="24.5904%" y="175.50">lin..</text></g><g><title>module_lints (419,165 samples, 0.33%)</title><rect x="27.4350%" y="149" width="0.3299%" height="15" fill="rgb(233,84,52)"/><text x="27.6850%" y="159.50"></text></g><g><title>lint_mod (410,865 samples, 0.32%)</title><rect x="27.4416%" y="133" width="0.3234%" height="15" fill="rgb(207,117,47)"/><text x="27.6916%" y="143.50"></text></g><g><title>privacy_access_levels (250,643 samples, 0.20%)</title><rect x="27.7650%" y="165" width="0.1973%" height="15" fill="rgb(249,43,39)"/><text x="28.0150%" y="175.50"></text></g><g><title>privacy_checking_modules (937,850 samples, 0.74%)</title><rect x="27.9623%" y="165" width="0.7382%" height="15" fill="rgb(209,38,44)"/><text x="28.2123%" y="175.50"></text></g><g><title>check_mod_privacy (932,420 samples, 0.73%)</title><rect x="27.9665%" y="149" width="0.7339%" height="15" fill="rgb(236,212,23)"/><text x="28.2165%" y="159.50"></text></g><g><title>misc_checking_3 (6,291,330 samples, 4.95%)</title><rect x="23.7670%" y="181" width="4.9522%" height="15" fill="rgb(242,79,21)"/><text x="24.0170%" y="191.50">misc_c..</text></g><g><title>impl_trait_ref (170,992 samples, 0.13%)</title><rect x="28.9374%" y="85" width="0.1346%" height="15" fill="rgb(211,96,35)"/><text x="29.1874%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (149,032 samples, 0.12%)</title><rect x="28.9547%" y="69" width="0.1173%" height="15" fill="rgb(253,215,40)"/><text x="29.2047%" y="79.50"></text></g><g><title>adt_destructor (353,814 samples, 0.28%)</title><rect x="28.8200%" y="133" width="0.2785%" height="15" fill="rgb(211,81,21)"/><text x="29.0700%" y="143.50"></text></g><g><title>coherent_trait (351,064 samples, 0.28%)</title><rect x="28.8221%" y="117" width="0.2763%" height="15" fill="rgb(208,190,38)"/><text x="29.0721%" y="127.50"></text></g><g><title>specialization_graph_of (349,224 samples, 0.27%)</title><rect x="28.8236%" y="101" width="0.2749%" height="15" fill="rgb(235,213,38)"/><text x="29.0736%" y="111.50"></text></g><g><title>is_copy_raw (131,231 samples, 0.10%)</title><rect x="29.0985%" y="133" width="0.1033%" height="15" fill="rgb(237,122,38)"/><text x="29.3485%" y="143.50"></text></g><g><title>impl_parent (1,798,538 samples, 1.42%)</title><rect x="31.6488%" y="117" width="1.4157%" height="15" fill="rgb(244,218,35)"/><text x="31.8988%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,093,168 samples, 0.86%)</title><rect x="32.2040%" y="101" width="0.8605%" height="15" fill="rgb(240,68,47)"/><text x="32.4540%" y="111.50"></text></g><g><title>impl_trait_ref (4,446,111 samples, 3.50%)</title><rect x="33.0645%" y="117" width="3.4997%" height="15" fill="rgb(210,16,53)"/><text x="33.3145%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,705,702 samples, 2.92%)</title><rect x="33.6473%" y="101" width="2.9169%" height="15" fill="rgb(235,124,12)"/><text x="33.8973%" y="111.50">me..</text></g><g><title>coherent_trait (10,457,477 samples, 8.23%)</title><rect x="28.7942%" y="149" width="8.2315%" height="15" fill="rgb(224,169,11)"/><text x="29.0442%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (9,875,001 samples, 7.77%)</title><rect x="29.2527%" y="133" width="7.7730%" height="15" fill="rgb(250,166,2)"/><text x="29.5027%" y="143.50">specializat..</text></g><g><title>trait_impls_of (584,097 samples, 0.46%)</title><rect x="36.5659%" y="117" width="0.4598%" height="15" fill="rgb(242,216,29)"/><text x="36.8159%" y="127.50"></text></g><g><title>implementations_of_trait (162,291 samples, 0.13%)</title><rect x="36.8980%" y="101" width="0.1277%" height="15" fill="rgb(230,116,27)"/><text x="37.1480%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (132,291 samples, 0.10%)</title><rect x="36.9216%" y="85" width="0.1041%" height="15" fill="rgb(228,99,48)"/><text x="37.1716%" y="95.50"></text></g><g><title>coherence_checking (10,528,257 samples, 8.29%)</title><rect x="28.7806%" y="165" width="8.2872%" height="15" fill="rgb(253,11,6)"/><text x="29.0306%" y="175.50">coherence_ch..</text></g><g><title>associated_item (220,981 samples, 0.17%)</title><rect x="47.3340%" y="101" width="0.1739%" height="15" fill="rgb(247,143,39)"/><text x="47.5840%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (176,111 samples, 0.14%)</title><rect x="47.3693%" y="85" width="0.1386%" height="15" fill="rgb(236,97,10)"/><text x="47.6193%" y="95.50"></text></g><g><title>associated_items (344,743 samples, 0.27%)</title><rect x="47.2616%" y="117" width="0.2714%" height="15" fill="rgb(233,208,19)"/><text x="47.5116%" y="127.50"></text></g><g><title>adt_dtorck_constraint (328,014 samples, 0.26%)</title><rect x="47.8181%" y="101" width="0.2582%" height="15" fill="rgb(216,164,2)"/><text x="48.0681%" y="111.50"></text></g><g><title>dropck_outlives (669,239 samples, 0.53%)</title><rect x="47.5694%" y="117" width="0.5268%" height="15" fill="rgb(220,129,5)"/><text x="47.8194%" y="127.50"></text></g><g><title>adt_sized_constraint (189,341 samples, 0.15%)</title><rect x="48.6348%" y="101" width="0.1490%" height="15" fill="rgb(242,17,10)"/><text x="48.8848%" y="111.50"></text></g><g><title>evaluate_obligation (1,104,369 samples, 0.87%)</title><rect x="48.0961%" y="117" width="0.8693%" height="15" fill="rgb(242,107,0)"/><text x="48.3461%" y="127.50"></text></g><g><title>item_attrs (261,146 samples, 0.21%)</title><rect x="49.2350%" y="117" width="0.2056%" height="15" fill="rgb(251,28,31)"/><text x="49.4850%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (252,586 samples, 0.20%)</title><rect x="49.2417%" y="101" width="0.1988%" height="15" fill="rgb(233,223,10)"/><text x="49.4917%" y="111.50"></text></g><g><title>evaluate_obligation (211,633 samples, 0.17%)</title><rect x="49.7154%" y="101" width="0.1666%" height="15" fill="rgb(215,21,27)"/><text x="49.9654%" y="111.50"></text></g><g><title>method_autoderef_steps (505,046 samples, 0.40%)</title><rect x="49.4959%" y="117" width="0.3975%" height="15" fill="rgb(232,23,21)"/><text x="49.7459%" y="127.50"></text></g><g><title>explicit_predicates_of (132,622 samples, 0.10%)</title><rect x="50.1185%" y="85" width="0.1044%" height="15" fill="rgb(244,5,23)"/><text x="50.3685%" y="95.50"></text></g><g><title>predicates_of (339,243 samples, 0.27%)</title><rect x="49.9887%" y="117" width="0.2670%" height="15" fill="rgb(226,81,46)"/><text x="50.2387%" y="127.50"></text></g><g><title>predicates_defined_on (242,732 samples, 0.19%)</title><rect x="50.0646%" y="101" width="0.1911%" height="15" fill="rgb(247,70,30)"/><text x="50.3146%" y="111.50"></text></g><g><title>evaluate_obligation (581,615 samples, 0.46%)</title><rect x="55.2700%" y="101" width="0.4578%" height="15" fill="rgb(212,68,19)"/><text x="55.5200%" y="111.50"></text></g><g><title>is_copy_raw (477,793 samples, 0.38%)</title><rect x="55.8380%" y="101" width="0.3761%" height="15" fill="rgb(240,187,13)"/><text x="56.0880%" y="111.50"></text></g><g><title>evaluate_obligation (381,642 samples, 0.30%)</title><rect x="55.9137%" y="85" width="0.3004%" height="15" fill="rgb(223,113,26)"/><text x="56.1637%" y="95.50"></text></g><g><title>method_autoderef_steps (155,130 samples, 0.12%)</title><rect x="56.2653%" y="101" width="0.1221%" height="15" fill="rgb(206,192,2)"/><text x="56.5153%" y="111.50"></text></g><g><title>typeck (7,838,348 samples, 6.17%)</title><rect x="50.3460%" y="117" width="6.1699%" height="15" fill="rgb(241,108,4)"/><text x="50.5960%" y="127.50">typeck</text></g><g><title>item_bodies_checking (24,748,325 samples, 19.48%)</title><rect x="37.0967%" y="165" width="19.4804%" height="15" fill="rgb(247,173,49)"/><text x="37.3467%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (24,744,925 samples, 19.48%)</title><rect x="37.0994%" y="149" width="19.4777%" height="15" fill="rgb(224,114,35)"/><text x="37.3494%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (24,649,174 samples, 19.40%)</title><rect x="37.1747%" y="133" width="19.4023%" height="15" fill="rgb(245,159,27)"/><text x="37.4247%" y="143.50">typeck</text></g><g><title>layout_of (141,581 samples, 0.11%)</title><rect x="57.3794%" y="53" width="0.1114%" height="15" fill="rgb(245,172,44)"/><text x="57.6294%" y="63.50"></text></g><g><title>layout_of (210,832 samples, 0.17%)</title><rect x="57.3266%" y="101" width="0.1660%" height="15" fill="rgb(236,23,11)"/><text x="57.5766%" y="111.50"></text></g><g><title>layout_of (194,682 samples, 0.15%)</title><rect x="57.3393%" y="85" width="0.1532%" height="15" fill="rgb(205,117,38)"/><text x="57.5893%" y="95.50"></text></g><g><title>layout_of (158,621 samples, 0.12%)</title><rect x="57.3677%" y="69" width="0.1249%" height="15" fill="rgb(237,72,25)"/><text x="57.6177%" y="79.50"></text></g><g><title>layout_of (248,652 samples, 0.20%)</title><rect x="57.3070%" y="117" width="0.1957%" height="15" fill="rgb(244,70,9)"/><text x="57.5570%" y="127.50"></text></g><g><title>layout_of (311,304 samples, 0.25%)</title><rect x="57.2642%" y="133" width="0.2450%" height="15" fill="rgb(217,125,39)"/><text x="57.5142%" y="143.50"></text></g><g><title>adt_destructor (207,803 samples, 0.16%)</title><rect x="58.4757%" y="69" width="0.1636%" height="15" fill="rgb(235,36,10)"/><text x="58.7257%" y="79.50"></text></g><g><title>adt_dtorck_constraint (363,785 samples, 0.29%)</title><rect x="58.4469%" y="85" width="0.2863%" height="15" fill="rgb(251,123,47)"/><text x="58.6969%" y="95.50"></text></g><g><title>adt_dtorck_constraint (854,090 samples, 0.67%)</title><rect x="58.3533%" y="101" width="0.6723%" height="15" fill="rgb(221,13,13)"/><text x="58.6033%" y="111.50"></text></g><g><title>type_of (363,584 samples, 0.29%)</title><rect x="58.7394%" y="85" width="0.2862%" height="15" fill="rgb(238,131,9)"/><text x="58.9894%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (361,674 samples, 0.28%)</title><rect x="58.7409%" y="69" width="0.2847%" height="15" fill="rgb(211,50,8)"/><text x="58.9909%" y="79.50"></text></g><g><title>dropck_outlives (923,020 samples, 0.73%)</title><rect x="58.3097%" y="117" width="0.7265%" height="15" fill="rgb(245,182,24)"/><text x="58.5597%" y="127.50"></text></g><g><title>item_types_checking (3,329,588 samples, 2.62%)</title><rect x="56.5771%" y="165" width="2.6209%" height="15" fill="rgb(242,14,37)"/><text x="56.8271%" y="175.50">it..</text></g><g><title>check_mod_item_types (3,321,978 samples, 2.61%)</title><rect x="56.5831%" y="149" width="2.6149%" height="15" fill="rgb(246,228,12)"/><text x="56.8331%" y="159.50">ch..</text></g><g><title>typeck (2,116,913 samples, 1.67%)</title><rect x="57.5316%" y="133" width="1.6663%" height="15" fill="rgb(213,55,15)"/><text x="57.7816%" y="143.50"></text></g><g><title>late_bound_vars_map (148,250 samples, 0.12%)</title><rect x="59.7249%" y="117" width="0.1167%" height="15" fill="rgb(209,9,3)"/><text x="59.9749%" y="127.50"></text></g><g><title>fn_sig (592,730 samples, 0.47%)</title><rect x="59.4635%" y="133" width="0.4666%" height="15" fill="rgb(230,59,30)"/><text x="59.7135%" y="143.50"></text></g><g><title>named_region_map (403,503 samples, 0.32%)</title><rect x="60.0596%" y="117" width="0.3176%" height="15" fill="rgb(209,121,21)"/><text x="60.3096%" y="127.50"></text></g><g><title>resolve_lifetimes (377,173 samples, 0.30%)</title><rect x="60.0804%" y="101" width="0.2969%" height="15" fill="rgb(220,109,13)"/><text x="60.3304%" y="111.50"></text></g><g><title>lint_levels (147,451 samples, 0.12%)</title><rect x="60.2612%" y="85" width="0.1161%" height="15" fill="rgb(232,18,1)"/><text x="60.5112%" y="95.50"></text></g><g><title>generics_of (592,083 samples, 0.47%)</title><rect x="59.9301%" y="133" width="0.4661%" height="15" fill="rgb(215,41,42)"/><text x="60.1801%" y="143.50"></text></g><g><title>explicit_predicates_of (297,402 samples, 0.23%)</title><rect x="60.5812%" y="101" width="0.2341%" height="15" fill="rgb(224,123,36)"/><text x="60.8312%" y="111.50"></text></g><g><title>predicates_of (856,418 samples, 0.67%)</title><rect x="60.4553%" y="133" width="0.6741%" height="15" fill="rgb(240,125,3)"/><text x="60.7053%" y="143.50"></text></g><g><title>predicates_defined_on (792,438 samples, 0.62%)</title><rect x="60.5056%" y="117" width="0.6238%" height="15" fill="rgb(205,98,50)"/><text x="60.7556%" y="127.50"></text></g><g><title>inferred_outlives_of (399,064 samples, 0.31%)</title><rect x="60.8153%" y="101" width="0.3141%" height="15" fill="rgb(205,185,37)"/><text x="61.0653%" y="111.50"></text></g><g><title>inferred_outlives_crate (373,214 samples, 0.29%)</title><rect x="60.8356%" y="85" width="0.2938%" height="15" fill="rgb(238,207,15)"/><text x="61.0856%" y="95.50"></text></g><g><title>type_of (244,503 samples, 0.19%)</title><rect x="60.9369%" y="69" width="0.1925%" height="15" fill="rgb(213,199,42)"/><text x="61.1869%" y="79.50"></text></g><g><title>type_collecting (2,757,591 samples, 2.17%)</title><rect x="59.2007%" y="165" width="2.1706%" height="15" fill="rgb(235,201,11)"/><text x="59.4507%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,741,381 samples, 2.16%)</title><rect x="59.2135%" y="149" width="2.1578%" height="15" fill="rgb(207,46,11)"/><text x="59.4635%" y="159.50">c..</text></g><g><title>type_of (285,413 samples, 0.22%)</title><rect x="61.1467%" y="133" width="0.2247%" height="15" fill="rgb(241,35,35)"/><text x="61.3967%" y="143.50"></text></g><g><title>evaluate_obligation (617,410 samples, 0.49%)</title><rect x="62.9130%" y="133" width="0.4860%" height="15" fill="rgb(243,32,47)"/><text x="63.1630%" y="143.50"></text></g><g><title>implied_outlives_bounds (260,393 samples, 0.20%)</title><rect x="63.4048%" y="133" width="0.2050%" height="15" fill="rgb(247,202,23)"/><text x="63.6548%" y="143.50"></text></g><g><title>param_env (236,860 samples, 0.19%)</title><rect x="63.6120%" y="133" width="0.1864%" height="15" fill="rgb(219,102,11)"/><text x="63.8620%" y="143.50"></text></g><g><title>region_scope_tree (275,613 samples, 0.22%)</title><rect x="63.8340%" y="133" width="0.2169%" height="15" fill="rgb(243,110,44)"/><text x="64.0840%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,229,017 samples, 2.54%)</title><rect x="61.5565%" y="149" width="2.5417%" height="15" fill="rgb(222,74,54)"/><text x="61.8065%" y="159.50">ch..</text></g><g><title>adt_sized_constraint (236,983 samples, 0.19%)</title><rect x="65.6511%" y="117" width="0.1865%" height="15" fill="rgb(216,99,12)"/><text x="65.9011%" y="127.50"></text></g><g><title>evaluate_obligation (948,953 samples, 0.75%)</title><rect x="65.1866%" y="133" width="0.7470%" height="15" fill="rgb(226,22,26)"/><text x="65.4366%" y="143.50"></text></g><g><title>implied_outlives_bounds (165,660 samples, 0.13%)</title><rect x="65.9465%" y="133" width="0.1304%" height="15" fill="rgb(217,163,10)"/><text x="66.1965%" y="143.50"></text></g><g><title>object_safety_violations (170,653 samples, 0.13%)</title><rect x="66.0775%" y="133" width="0.1343%" height="15" fill="rgb(213,25,53)"/><text x="66.3275%" y="143.50"></text></g><g><title>param_env (316,754 samples, 0.25%)</title><rect x="66.2118%" y="133" width="0.2493%" height="15" fill="rgb(252,105,26)"/><text x="66.4618%" y="143.50"></text></g><g><title>check_item_well_formed (3,301,237 samples, 2.60%)</title><rect x="64.0982%" y="149" width="2.5985%" height="15" fill="rgb(220,39,43)"/><text x="64.3482%" y="159.50">ch..</text></g><g><title>evaluate_obligation (202,830 samples, 0.16%)</title><rect x="67.0336%" y="133" width="0.1597%" height="15" fill="rgb(229,68,48)"/><text x="67.2836%" y="143.50"></text></g><g><title>object_safety_violations (300,624 samples, 0.24%)</title><rect x="67.2478%" y="133" width="0.2366%" height="15" fill="rgb(252,8,32)"/><text x="67.4978%" y="143.50"></text></g><g><title>analysis (85,156,287 samples, 67.03%)</title><rect x="0.5480%" y="197" width="67.0299%" height="15" fill="rgb(223,20,43)"/><text x="0.7980%" y="207.50">analysis</text></g><g><title>type_check_crate (49,367,049 samples, 38.86%)</title><rect x="28.7192%" y="181" width="38.8588%" height="15" fill="rgb(229,81,49)"/><text x="28.9692%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,876,927 samples, 6.20%)</title><rect x="61.3777%" y="165" width="6.2002%" height="15" fill="rgb(236,28,36)"/><text x="61.6277%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (1,119,499 samples, 0.88%)</title><rect x="66.6967%" y="149" width="0.8812%" height="15" fill="rgb(249,185,26)"/><text x="66.9467%" y="159.50"></text></g><g><title>codegen_crate (541,276 samples, 0.43%)</title><rect x="67.5862%" y="197" width="0.4261%" height="15" fill="rgb(249,174,33)"/><text x="67.8362%" y="207.50"></text></g><g><title>AST_validation (166,511 samples, 0.13%)</title><rect x="68.1939%" y="181" width="0.1311%" height="15" fill="rgb(233,201,37)"/><text x="68.4439%" y="191.50"></text></g><g><title>metadata_load_macro (554,676 samples, 0.44%)</title><rect x="87.1089%" y="149" width="0.4366%" height="15" fill="rgb(221,78,26)"/><text x="87.3589%" y="159.50"></text></g><g><title>metadata_register_crate (3,057,525 samples, 2.41%)</title><rect x="87.5455%" y="149" width="2.4067%" height="15" fill="rgb(250,127,30)"/><text x="87.7955%" y="159.50">me..</text></g><g><title>metadata_register_crate (1,025,229 samples, 0.81%)</title><rect x="89.1452%" y="133" width="0.8070%" height="15" fill="rgb(230,49,44)"/><text x="89.3952%" y="143.50"></text></g><g><title>macro_expand_crate (27,693,329 samples, 21.80%)</title><rect x="68.4584%" y="181" width="21.7985%" height="15" fill="rgb(229,67,23)"/><text x="68.7084%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (27,681,478 samples, 21.79%)</title><rect x="68.4677%" y="165" width="21.7892%" height="15" fill="rgb(249,83,47)"/><text x="68.7177%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (387,065 samples, 0.30%)</title><rect x="89.9522%" y="149" width="0.3047%" height="15" fill="rgb(215,43,3)"/><text x="90.2022%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (363,745 samples, 0.29%)</title><rect x="90.2600%" y="181" width="0.2863%" height="15" fill="rgb(238,154,13)"/><text x="90.5100%" y="191.50"></text></g><g><title>late_resolve_crate (1,544,178 samples, 1.22%)</title><rect x="90.6711%" y="165" width="1.2155%" height="15" fill="rgb(219,56,2)"/><text x="90.9211%" y="175.50"></text></g><g><title>configure_and_expand (30,449,890 samples, 23.97%)</title><rect x="68.0123%" y="197" width="23.9683%" height="15" fill="rgb(233,0,4)"/><text x="68.2623%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,822,140 samples, 1.43%)</title><rect x="90.5463%" y="181" width="1.4343%" height="15" fill="rgb(235,30,7)"/><text x="90.7963%" y="191.50"></text></g><g><title>drop_ast (178,332 samples, 0.14%)</title><rect x="91.9806%" y="197" width="0.1404%" height="15" fill="rgb(250,79,13)"/><text x="92.2306%" y="207.50"></text></g><g><title>early_lint_checks (359,654 samples, 0.28%)</title><rect x="92.1326%" y="197" width="0.2831%" height="15" fill="rgb(211,146,34)"/><text x="92.3826%" y="207.50"></text></g><g><title>free_global_ctxt (3,580,939 samples, 2.82%)</title><rect x="92.4157%" y="197" width="2.8187%" height="15" fill="rgb(228,22,38)"/><text x="92.6657%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,332,694 samples, 1.05%)</title><rect x="95.2344%" y="197" width="1.0490%" height="15" fill="rgb(235,168,5)"/><text x="95.4844%" y="207.50"></text></g><g><title>hir_lowering (2,677,349 samples, 2.11%)</title><rect x="96.2834%" y="197" width="2.1074%" height="15" fill="rgb(221,155,16)"/><text x="96.5334%" y="207.50">h..</text></g><g><title>parse_crate (591,287 samples, 0.47%)</title><rect x="98.4300%" y="197" width="0.4654%" height="15" fill="rgb(215,215,53)"/><text x="98.6800%" y="207.50"></text></g><g><title>prepare_outputs (169,692 samples, 0.13%)</title><rect x="98.9031%" y="197" width="0.1336%" height="15" fill="rgb(223,4,10)"/><text x="99.1531%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (828,499 samples, 0.65%)</title><rect x="99.0366%" y="197" width="0.6521%" height="15" fill="rgb(234,103,6)"/><text x="99.2866%" y="207.50"></text></g><g><title>all (127,042,273 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (127,042,273 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (309,724 samples, 0.24%)</title><rect x="99.7562%" y="197" width="0.2438%" height="15" fill="rgb(228,201,54)"/><text x="100.0062%" y="207.50"></text></g></svg></svg>