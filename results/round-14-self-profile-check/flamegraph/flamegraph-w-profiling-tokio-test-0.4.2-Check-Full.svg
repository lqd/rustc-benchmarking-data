<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (465,196 samples, 0.31%)</title><rect x="11.4585%" y="181" width="0.3149%" height="15" fill="rgb(227,0,7)"/><text x="11.7085%" y="191.50"></text></g><g><title>item_attrs (281,673 samples, 0.19%)</title><rect x="12.2362%" y="149" width="0.1907%" height="15" fill="rgb(217,0,24)"/><text x="12.4862%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (269,763 samples, 0.18%)</title><rect x="12.2442%" y="133" width="0.1826%" height="15" fill="rgb(221,193,54)"/><text x="12.4942%" y="143.50"></text></g><g><title>codegen_fn_attrs (441,735 samples, 0.30%)</title><rect x="12.1455%" y="165" width="0.2991%" height="15" fill="rgb(248,212,6)"/><text x="12.3955%" y="175.50"></text></g><g><title>is_copy_raw (154,265 samples, 0.10%)</title><rect x="14.8408%" y="117" width="0.1044%" height="15" fill="rgb(208,68,35)"/><text x="15.0908%" y="127.50"></text></g><g><title>param_env (183,610 samples, 0.12%)</title><rect x="14.9453%" y="117" width="0.1243%" height="15" fill="rgb(232,128,0)"/><text x="15.1953%" y="127.50"></text></g><g><title>adt_drop_tys (456,285 samples, 0.31%)</title><rect x="14.7617%" y="133" width="0.3089%" height="15" fill="rgb(207,160,47)"/><text x="15.0117%" y="143.50"></text></g><g><title>needs_drop_raw (1,469,165 samples, 0.99%)</title><rect x="14.6643%" y="149" width="0.9947%" height="15" fill="rgb(228,23,34)"/><text x="14.9143%" y="159.50"></text></g><g><title>is_copy_raw (867,838 samples, 0.59%)</title><rect x="15.0714%" y="133" width="0.5875%" height="15" fill="rgb(218,30,26)"/><text x="15.3214%" y="143.50"></text></g><g><title>evaluate_obligation (709,388 samples, 0.48%)</title><rect x="15.1787%" y="117" width="0.4803%" height="15" fill="rgb(220,122,19)"/><text x="15.4287%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (365,863 samples, 0.25%)</title><rect x="15.8156%" y="133" width="0.2477%" height="15" fill="rgb(250,228,42)"/><text x="16.0656%" y="143.50"></text></g><g><title>resolve_instance (788,590 samples, 0.53%)</title><rect x="15.6589%" y="149" width="0.5339%" height="15" fill="rgb(240,193,28)"/><text x="15.9089%" y="159.50"></text></g><g><title>thir_body (1,248,476 samples, 0.85%)</title><rect x="16.2142%" y="149" width="0.8452%" height="15" fill="rgb(216,20,37)"/><text x="16.4642%" y="159.50"></text></g><g><title>mir_const (9,247,348 samples, 6.26%)</title><rect x="10.8211%" y="197" width="6.2606%" height="15" fill="rgb(206,188,39)"/><text x="11.0711%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (7,840,689 samples, 5.31%)</title><rect x="11.7735%" y="181" width="5.3083%" height="15" fill="rgb(217,207,13)"/><text x="12.0235%" y="191.50">unsafe..</text></g><g><title>mir_built (6,849,398 samples, 4.64%)</title><rect x="12.4446%" y="165" width="4.6372%" height="15" fill="rgb(231,73,38)"/><text x="12.6946%" y="175.50">mir_b..</text></g><g><title>has_structural_eq_impls (307,813 samples, 0.21%)</title><rect x="17.1332%" y="181" width="0.2084%" height="15" fill="rgb(225,20,46)"/><text x="17.3832%" y="191.50"></text></g><g><title>evaluate_obligation (296,963 samples, 0.20%)</title><rect x="17.1406%" y="165" width="0.2010%" height="15" fill="rgb(210,31,41)"/><text x="17.3906%" y="175.50"></text></g><g><title>trait_impls_of (165,762 samples, 0.11%)</title><rect x="17.2294%" y="149" width="0.1122%" height="15" fill="rgb(221,200,47)"/><text x="17.4794%" y="159.50"></text></g><g><title>mir_const_qualif (524,996 samples, 0.36%)</title><rect x="17.0818%" y="197" width="0.3554%" height="15" fill="rgb(226,26,5)"/><text x="17.3318%" y="207.50"></text></g><g><title>mir_promoted (10,656,434 samples, 7.21%)</title><rect x="10.2228%" y="213" width="7.2146%" height="15" fill="rgb(249,33,26)"/><text x="10.4728%" y="223.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (535,652 samples, 0.36%)</title><rect x="17.4374%" y="213" width="0.3626%" height="15" fill="rgb(235,183,28)"/><text x="17.6874%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (687,794 samples, 0.47%)</title><rect x="17.8000%" y="213" width="0.4657%" height="15" fill="rgb(221,5,38)"/><text x="18.0500%" y="223.50"></text></g><g><title>normalize_projection_ty (418,030 samples, 0.28%)</title><rect x="17.9827%" y="197" width="0.2830%" height="15" fill="rgb(247,18,42)"/><text x="18.2327%" y="207.50"></text></g><g><title>type_op_prove_predicate (2,491,677 samples, 1.69%)</title><rect x="18.3751%" y="213" width="1.6869%" height="15" fill="rgb(241,131,45)"/><text x="18.6251%" y="223.50"></text></g><g><title>MIR_borrow_checking (28,817,470 samples, 19.51%)</title><rect x="0.5586%" y="245" width="19.5100%" height="15" fill="rgb(249,31,29)"/><text x="0.8086%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (28,680,890 samples, 19.42%)</title><rect x="0.6510%" y="229" width="19.4175%" height="15" fill="rgb(225,111,53)"/><text x="0.9010%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (163,373 samples, 0.11%)</title><rect x="20.1413%" y="245" width="0.1106%" height="15" fill="rgb(238,160,17)"/><text x="20.3913%" y="255.50"></text></g><g><title>should_inherit_track_caller (226,021 samples, 0.15%)</title><rect x="20.5049%" y="197" width="0.1530%" height="15" fill="rgb(214,148,48)"/><text x="20.7549%" y="207.50"></text></g><g><title>codegen_fn_attrs (385,243 samples, 0.26%)</title><rect x="20.4071%" y="213" width="0.2608%" height="15" fill="rgb(232,36,49)"/><text x="20.6571%" y="223.50"></text></g><g><title>check_mod_attrs (593,126 samples, 0.40%)</title><rect x="20.2664%" y="229" width="0.4016%" height="15" fill="rgb(209,103,24)"/><text x="20.5164%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (405,716 samples, 0.27%)</title><rect x="20.8007%" y="229" width="0.2747%" height="15" fill="rgb(229,88,8)"/><text x="21.0507%" y="239.50"></text></g><g><title>misc_checking_1 (1,260,224 samples, 0.85%)</title><rect x="20.2522%" y="245" width="0.8532%" height="15" fill="rgb(213,181,19)"/><text x="20.5022%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (596,636 samples, 0.40%)</title><rect x="21.1065%" y="229" width="0.4039%" height="15" fill="rgb(254,191,54)"/><text x="21.3565%" y="239.50"></text></g><g><title>check_mod_liveness (498,075 samples, 0.34%)</title><rect x="21.1732%" y="213" width="0.3372%" height="15" fill="rgb(241,83,37)"/><text x="21.4232%" y="223.50"></text></g><g><title>type_uninhabited_from (188,053 samples, 0.13%)</title><rect x="21.3831%" y="197" width="0.1273%" height="15" fill="rgb(233,36,39)"/><text x="21.6331%" y="207.50"></text></g><g><title>type_uninhabited_from (151,032 samples, 0.10%)</title><rect x="21.4081%" y="181" width="0.1023%" height="15" fill="rgb(226,3,54)"/><text x="21.6581%" y="191.50"></text></g><g><title>mir_borrowck (263,182 samples, 0.18%)</title><rect x="22.0560%" y="117" width="0.1782%" height="15" fill="rgb(245,192,40)"/><text x="22.3060%" y="127.50"></text></g><g><title>eval_to_const_value_raw (462,946 samples, 0.31%)</title><rect x="21.9212%" y="197" width="0.3134%" height="15" fill="rgb(238,167,29)"/><text x="22.1712%" y="207.50"></text></g><g><title>eval_to_const_value_raw (461,046 samples, 0.31%)</title><rect x="21.9225%" y="181" width="0.3121%" height="15" fill="rgb(232,182,51)"/><text x="22.1725%" y="191.50"></text></g><g><title>eval_to_allocation_raw (456,456 samples, 0.31%)</title><rect x="21.9256%" y="165" width="0.3090%" height="15" fill="rgb(231,60,39)"/><text x="22.1756%" y="175.50"></text></g><g><title>mir_for_ctfe (374,304 samples, 0.25%)</title><rect x="21.9813%" y="149" width="0.2534%" height="15" fill="rgb(208,69,12)"/><text x="22.2313%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (348,794 samples, 0.24%)</title><rect x="21.9985%" y="133" width="0.2361%" height="15" fill="rgb(235,93,37)"/><text x="22.2485%" y="143.50"></text></g><g><title>misc_checking_2 (1,841,880 samples, 1.25%)</title><rect x="21.1054%" y="245" width="1.2470%" height="15" fill="rgb(213,116,39)"/><text x="21.3554%" y="255.50"></text></g><g><title>match_checking (1,243,634 samples, 0.84%)</title><rect x="21.5104%" y="229" width="0.8420%" height="15" fill="rgb(222,207,29)"/><text x="21.7604%" y="239.50"></text></g><g><title>check_match (1,210,554 samples, 0.82%)</title><rect x="21.5328%" y="213" width="0.8196%" height="15" fill="rgb(206,96,30)"/><text x="21.7828%" y="223.50"></text></g><g><title>check_private_in_public (217,303 samples, 0.15%)</title><rect x="22.3579%" y="229" width="0.1471%" height="15" fill="rgb(218,138,4)"/><text x="22.6079%" y="239.50"></text></g><g><title>death_checking (432,845 samples, 0.29%)</title><rect x="22.5050%" y="229" width="0.2930%" height="15" fill="rgb(250,191,14)"/><text x="22.7550%" y="239.50"></text></g><g><title>param_env (281,414 samples, 0.19%)</title><rect x="23.4908%" y="197" width="0.1905%" height="15" fill="rgb(239,60,40)"/><text x="23.7408%" y="207.50"></text></g><g><title>crate_lints (2,787,901 samples, 1.89%)</title><rect x="22.7991%" y="213" width="1.8875%" height="15" fill="rgb(206,27,48)"/><text x="23.0491%" y="223.50">c..</text></g><g><title>type_of (1,358,975 samples, 0.92%)</title><rect x="23.7665%" y="197" width="0.9201%" height="15" fill="rgb(225,35,8)"/><text x="24.0165%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (1,047,401 samples, 0.71%)</title><rect x="23.9774%" y="181" width="0.7091%" height="15" fill="rgb(250,213,24)"/><text x="24.2274%" y="191.50"></text></g><g><title>lint_checking (3,360,128 samples, 2.27%)</title><rect x="22.7981%" y="229" width="2.2749%" height="15" fill="rgb(247,123,22)"/><text x="23.0481%" y="239.50">l..</text></g><g><title>module_lints (570,767 samples, 0.39%)</title><rect x="24.6865%" y="213" width="0.3864%" height="15" fill="rgb(231,138,38)"/><text x="24.9365%" y="223.50"></text></g><g><title>lint_mod (565,887 samples, 0.38%)</title><rect x="24.6898%" y="197" width="0.3831%" height="15" fill="rgb(231,145,46)"/><text x="24.9398%" y="207.50"></text></g><g><title>privacy_access_levels (238,512 samples, 0.16%)</title><rect x="25.0730%" y="229" width="0.1615%" height="15" fill="rgb(251,118,11)"/><text x="25.3230%" y="239.50"></text></g><g><title>privacy_checking_modules (911,450 samples, 0.62%)</title><rect x="25.2344%" y="229" width="0.6171%" height="15" fill="rgb(217,147,25)"/><text x="25.4844%" y="239.50"></text></g><g><title>check_mod_privacy (908,420 samples, 0.62%)</title><rect x="25.2365%" y="213" width="0.6150%" height="15" fill="rgb(247,81,37)"/><text x="25.4865%" y="223.50"></text></g><g><title>misc_checking_3 (5,179,518 samples, 3.51%)</title><rect x="22.3524%" y="245" width="3.5066%" height="15" fill="rgb(209,12,38)"/><text x="22.6024%" y="255.50">mis..</text></g><g><title>impl_parent (2,075,125 samples, 1.40%)</title><rect x="28.0535%" y="181" width="1.4049%" height="15" fill="rgb(227,1,9)"/><text x="28.3035%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,349,771 samples, 0.91%)</title><rect x="28.5446%" y="165" width="0.9138%" height="15" fill="rgb(248,47,43)"/><text x="28.7946%" y="175.50"></text></g><g><title>impl_trait_ref (5,406,915 samples, 3.66%)</title><rect x="29.4584%" y="181" width="3.6606%" height="15" fill="rgb(221,10,30)"/><text x="29.7084%" y="191.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,419,615 samples, 2.99%)</title><rect x="30.1268%" y="165" width="2.9922%" height="15" fill="rgb(210,229,1)"/><text x="30.3768%" y="175.50">met..</text></g><g><title>coherent_trait (11,342,206 samples, 7.68%)</title><rect x="25.9222%" y="213" width="7.6789%" height="15" fill="rgb(222,148,37)"/><text x="26.1722%" y="223.50">coherent_tr..</text></g><g><title>specialization_graph_of (11,325,866 samples, 7.67%)</title><rect x="25.9333%" y="197" width="7.6678%" height="15" fill="rgb(234,67,33)"/><text x="26.1833%" y="207.50">specializa..</text></g><g><title>trait_impls_of (710,243 samples, 0.48%)</title><rect x="33.1203%" y="181" width="0.4808%" height="15" fill="rgb(247,98,35)"/><text x="33.3703%" y="191.50"></text></g><g><title>implementations_of_trait (235,785 samples, 0.16%)</title><rect x="33.4415%" y="165" width="0.1596%" height="15" fill="rgb(247,138,52)"/><text x="33.6915%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (160,175 samples, 0.11%)</title><rect x="33.4927%" y="149" width="0.1084%" height="15" fill="rgb(213,79,30)"/><text x="33.7427%" y="159.50"></text></g><g><title>coherence_checking (11,417,187 samples, 7.73%)</title><rect x="25.9109%" y="229" width="7.7297%" height="15" fill="rgb(246,177,23)"/><text x="26.1609%" y="239.50">coherence_c..</text></g><g><title>associated_item (809,229 samples, 0.55%)</title><rect x="49.6666%" y="165" width="0.5479%" height="15" fill="rgb(230,62,27)"/><text x="49.9166%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (445,295 samples, 0.30%)</title><rect x="49.9130%" y="149" width="0.3015%" height="15" fill="rgb(216,154,8)"/><text x="50.1630%" y="159.50"></text></g><g><title>associated_items (1,131,271 samples, 0.77%)</title><rect x="49.4959%" y="181" width="0.7659%" height="15" fill="rgb(244,35,45)"/><text x="49.7459%" y="191.50"></text></g><g><title>adt_def (748,882 samples, 0.51%)</title><rect x="50.9529%" y="149" width="0.5070%" height="15" fill="rgb(251,115,12)"/><text x="51.2029%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (732,972 samples, 0.50%)</title><rect x="50.9637%" y="133" width="0.4962%" height="15" fill="rgb(240,54,50)"/><text x="51.2137%" y="143.50"></text></g><g><title>item_attrs (326,715 samples, 0.22%)</title><rect x="51.2388%" y="117" width="0.2212%" height="15" fill="rgb(233,84,52)"/><text x="51.4888%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (309,385 samples, 0.21%)</title><rect x="51.2505%" y="101" width="0.2095%" height="15" fill="rgb(207,117,47)"/><text x="51.5005%" y="111.50"></text></g><g><title>adt_destructor (148,903 samples, 0.10%)</title><rect x="51.4599%" y="149" width="0.1008%" height="15" fill="rgb(249,43,39)"/><text x="51.7099%" y="159.50"></text></g><g><title>adt_def (463,642 samples, 0.31%)</title><rect x="51.6640%" y="133" width="0.3139%" height="15" fill="rgb(209,38,44)"/><text x="51.9140%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (453,472 samples, 0.31%)</title><rect x="51.6709%" y="117" width="0.3070%" height="15" fill="rgb(236,212,23)"/><text x="51.9209%" y="127.50"></text></g><g><title>item_attrs (213,120 samples, 0.14%)</title><rect x="51.8336%" y="101" width="0.1443%" height="15" fill="rgb(242,79,21)"/><text x="52.0836%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (202,080 samples, 0.14%)</title><rect x="51.8411%" y="85" width="0.1368%" height="15" fill="rgb(211,96,35)"/><text x="52.0911%" y="95.50"></text></g><g><title>adt_def (350,344 samples, 0.24%)</title><rect x="52.2534%" y="117" width="0.2372%" height="15" fill="rgb(253,215,40)"/><text x="52.5034%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (344,554 samples, 0.23%)</title><rect x="52.2573%" y="101" width="0.2333%" height="15" fill="rgb(211,81,21)"/><text x="52.5073%" y="111.50"></text></g><g><title>item_attrs (156,841 samples, 0.11%)</title><rect x="52.3844%" y="85" width="0.1062%" height="15" fill="rgb(208,190,38)"/><text x="52.6344%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (150,431 samples, 0.10%)</title><rect x="52.3887%" y="69" width="0.1018%" height="15" fill="rgb(235,213,38)"/><text x="52.6387%" y="79.50"></text></g><g><title>adt_def (262,795 samples, 0.18%)</title><rect x="52.5547%" y="101" width="0.1779%" height="15" fill="rgb(237,122,38)"/><text x="52.8047%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (260,205 samples, 0.18%)</title><rect x="52.5565%" y="85" width="0.1762%" height="15" fill="rgb(244,218,35)"/><text x="52.8065%" y="95.50"></text></g><g><title>adt_dtorck_constraint (501,586 samples, 0.34%)</title><rect x="52.5249%" y="117" width="0.3396%" height="15" fill="rgb(240,68,47)"/><text x="52.7749%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,324,124 samples, 0.90%)</title><rect x="52.0311%" y="133" width="0.8965%" height="15" fill="rgb(210,16,53)"/><text x="52.2811%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,171,191 samples, 1.47%)</title><rect x="51.5608%" y="149" width="1.4699%" height="15" fill="rgb(235,124,12)"/><text x="51.8108%" y="159.50"></text></g><g><title>adt_dtorck_constraint (3,723,143 samples, 2.52%)</title><rect x="50.7397%" y="165" width="2.5206%" height="15" fill="rgb(224,169,11)"/><text x="50.9897%" y="175.50">ad..</text></g><g><title>type_of (254,542 samples, 0.17%)</title><rect x="53.0880%" y="149" width="0.1723%" height="15" fill="rgb(250,166,2)"/><text x="53.3380%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (211,192 samples, 0.14%)</title><rect x="53.1173%" y="133" width="0.1430%" height="15" fill="rgb(242,216,29)"/><text x="53.3673%" y="143.50"></text></g><g><title>normalize_projection_ty (751,457 samples, 0.51%)</title><rect x="53.3397%" y="165" width="0.5088%" height="15" fill="rgb(230,116,27)"/><text x="53.5897%" y="175.50"></text></g><g><title>dropck_outlives (5,213,328 samples, 3.53%)</title><rect x="50.3220%" y="181" width="3.5295%" height="15" fill="rgb(228,99,48)"/><text x="50.5720%" y="191.50">dro..</text></g><g><title>adt_sized_constraint (190,132 samples, 0.13%)</title><rect x="55.2577%" y="165" width="0.1287%" height="15" fill="rgb(253,11,6)"/><text x="55.5077%" y="175.50"></text></g><g><title>generics_of (237,282 samples, 0.16%)</title><rect x="55.3864%" y="165" width="0.1606%" height="15" fill="rgb(247,143,39)"/><text x="55.6364%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (185,972 samples, 0.13%)</title><rect x="55.4211%" y="149" width="0.1259%" height="15" fill="rgb(236,97,10)"/><text x="55.6711%" y="159.50"></text></g><g><title>impl_trait_ref (251,211 samples, 0.17%)</title><rect x="55.5879%" y="165" width="0.1701%" height="15" fill="rgb(233,208,19)"/><text x="55.8379%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (207,461 samples, 0.14%)</title><rect x="55.6176%" y="149" width="0.1405%" height="15" fill="rgb(216,164,2)"/><text x="55.8676%" y="159.50"></text></g><g><title>predicates_of (367,112 samples, 0.25%)</title><rect x="55.7713%" y="165" width="0.2485%" height="15" fill="rgb(220,129,5)"/><text x="56.0213%" y="175.50"></text></g><g><title>predicates_defined_on (237,902 samples, 0.16%)</title><rect x="55.8588%" y="149" width="0.1611%" height="15" fill="rgb(242,17,10)"/><text x="56.1088%" y="159.50"></text></g><g><title>specializes (276,784 samples, 0.19%)</title><rect x="56.0199%" y="165" width="0.1874%" height="15" fill="rgb(242,107,0)"/><text x="56.2699%" y="175.50"></text></g><g><title>param_env (165,583 samples, 0.11%)</title><rect x="56.0951%" y="149" width="0.1121%" height="15" fill="rgb(251,28,31)"/><text x="56.3451%" y="159.50"></text></g><g><title>trait_impls_of (756,336 samples, 0.51%)</title><rect x="56.2140%" y="165" width="0.5121%" height="15" fill="rgb(233,223,10)"/><text x="56.4640%" y="175.50"></text></g><g><title>implementations_of_trait (299,973 samples, 0.20%)</title><rect x="56.5230%" y="149" width="0.2031%" height="15" fill="rgb(215,21,27)"/><text x="56.7730%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (173,083 samples, 0.12%)</title><rect x="56.6089%" y="133" width="0.1172%" height="15" fill="rgb(232,23,21)"/><text x="56.8589%" y="143.50"></text></g><g><title>evaluate_obligation (4,247,911 samples, 2.88%)</title><rect x="53.8515%" y="181" width="2.8759%" height="15" fill="rgb(244,5,23)"/><text x="54.1015%" y="191.50">ev..</text></g><g><title>fn_sig (199,292 samples, 0.13%)</title><rect x="56.7582%" y="181" width="0.1349%" height="15" fill="rgb(226,81,46)"/><text x="57.0082%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (167,831 samples, 0.11%)</title><rect x="56.7795%" y="165" width="0.1136%" height="15" fill="rgb(247,70,30)"/><text x="57.0295%" y="175.50"></text></g><g><title>generics_of (152,732 samples, 0.10%)</title><rect x="56.8931%" y="181" width="0.1034%" height="15" fill="rgb(212,68,19)"/><text x="57.1431%" y="191.50"></text></g><g><title>item_attrs (321,184 samples, 0.22%)</title><rect x="57.1649%" y="181" width="0.2174%" height="15" fill="rgb(240,187,13)"/><text x="57.4149%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (305,574 samples, 0.21%)</title><rect x="57.1755%" y="165" width="0.2069%" height="15" fill="rgb(223,113,26)"/><text x="57.4255%" y="175.50"></text></g><g><title>evaluate_obligation (280,812 samples, 0.19%)</title><rect x="57.6448%" y="165" width="0.1901%" height="15" fill="rgb(206,192,2)"/><text x="57.8948%" y="175.50"></text></g><g><title>method_autoderef_steps (588,075 samples, 0.40%)</title><rect x="57.4522%" y="181" width="0.3981%" height="15" fill="rgb(241,108,4)"/><text x="57.7022%" y="191.50"></text></g><g><title>explicit_predicates_of (160,132 samples, 0.11%)</title><rect x="58.1938%" y="149" width="0.1084%" height="15" fill="rgb(247,173,49)"/><text x="58.4438%" y="159.50"></text></g><g><title>predicates_of (528,225 samples, 0.36%)</title><rect x="57.9917%" y="181" width="0.3576%" height="15" fill="rgb(224,114,35)"/><text x="58.2417%" y="191.50"></text></g><g><title>predicates_defined_on (361,922 samples, 0.25%)</title><rect x="58.1043%" y="165" width="0.2450%" height="15" fill="rgb(245,159,27)"/><text x="58.3543%" y="175.50"></text></g><g><title>evaluate_obligation (474,414 samples, 0.32%)</title><rect x="60.0164%" y="165" width="0.3212%" height="15" fill="rgb(245,172,44)"/><text x="60.2664%" y="175.50"></text></g><g><title>trait_impls_of (237,533 samples, 0.16%)</title><rect x="60.1767%" y="149" width="0.1608%" height="15" fill="rgb(236,23,11)"/><text x="60.4267%" y="159.50"></text></g><g><title>is_copy_raw (177,293 samples, 0.12%)</title><rect x="60.3768%" y="165" width="0.1200%" height="15" fill="rgb(205,117,38)"/><text x="60.6268%" y="175.50"></text></g><g><title>evaluate_obligation (150,291 samples, 0.10%)</title><rect x="60.3950%" y="149" width="0.1017%" height="15" fill="rgb(237,72,25)"/><text x="60.6450%" y="159.50"></text></g><g><title>method_autoderef_steps (396,794 samples, 0.27%)</title><rect x="60.5101%" y="165" width="0.2686%" height="15" fill="rgb(244,70,9)"/><text x="60.7601%" y="175.50"></text></g><g><title>evaluate_obligation (221,151 samples, 0.15%)</title><rect x="60.6290%" y="149" width="0.1497%" height="15" fill="rgb(217,125,39)"/><text x="60.8790%" y="159.50"></text></g><g><title>typeck (3,435,219 samples, 2.33%)</title><rect x="58.5089%" y="181" width="2.3257%" height="15" fill="rgb(235,36,10)"/><text x="58.7589%" y="191.50">t..</text></g><g><title>item_bodies_checking (40,230,967 samples, 27.24%)</title><rect x="33.6610%" y="229" width="27.2372%" height="15" fill="rgb(251,123,47)"/><text x="33.9110%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (40,228,547 samples, 27.24%)</title><rect x="33.6626%" y="213" width="27.2355%" height="15" fill="rgb(221,13,13)"/><text x="33.9126%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (40,132,916 samples, 27.17%)</title><rect x="33.7274%" y="197" width="27.1708%" height="15" fill="rgb(238,131,9)"/><text x="33.9774%" y="207.50">typeck</text></g><g><title>item_types_checking (1,363,595 samples, 0.92%)</title><rect x="60.8981%" y="229" width="0.9232%" height="15" fill="rgb(211,50,8)"/><text x="61.1481%" y="239.50"></text></g><g><title>check_mod_item_types (1,359,725 samples, 0.92%)</title><rect x="60.9008%" y="213" width="0.9206%" height="15" fill="rgb(245,182,24)"/><text x="61.1508%" y="223.50"></text></g><g><title>typeck (316,044 samples, 0.21%)</title><rect x="61.6073%" y="197" width="0.2140%" height="15" fill="rgb(242,14,37)"/><text x="61.8573%" y="207.50"></text></g><g><title>fn_sig (468,385 samples, 0.32%)</title><rect x="61.9921%" y="197" width="0.3171%" height="15" fill="rgb(246,228,12)"/><text x="62.2421%" y="207.50"></text></g><g><title>named_region_map (306,643 samples, 0.21%)</title><rect x="62.3838%" y="181" width="0.2076%" height="15" fill="rgb(213,55,15)"/><text x="62.6338%" y="191.50"></text></g><g><title>resolve_lifetimes (289,743 samples, 0.20%)</title><rect x="62.3952%" y="165" width="0.1962%" height="15" fill="rgb(209,9,3)"/><text x="62.6452%" y="175.50"></text></g><g><title>generics_of (429,244 samples, 0.29%)</title><rect x="62.3092%" y="197" width="0.2906%" height="15" fill="rgb(230,59,30)"/><text x="62.5592%" y="207.50"></text></g><g><title>explicit_predicates_of (279,316 samples, 0.19%)</title><rect x="62.7101%" y="165" width="0.1891%" height="15" fill="rgb(209,121,21)"/><text x="62.9601%" y="175.50"></text></g><g><title>predicates_of (759,750 samples, 0.51%)</title><rect x="62.6202%" y="197" width="0.5144%" height="15" fill="rgb(220,109,13)"/><text x="62.8702%" y="207.50"></text></g><g><title>predicates_defined_on (708,940 samples, 0.48%)</title><rect x="62.6546%" y="181" width="0.4800%" height="15" fill="rgb(232,18,1)"/><text x="62.9046%" y="191.50"></text></g><g><title>inferred_outlives_of (347,634 samples, 0.24%)</title><rect x="62.8992%" y="165" width="0.2354%" height="15" fill="rgb(215,41,42)"/><text x="63.1492%" y="175.50"></text></g><g><title>inferred_outlives_crate (331,324 samples, 0.22%)</title><rect x="62.9103%" y="149" width="0.2243%" height="15" fill="rgb(224,123,36)"/><text x="63.1603%" y="159.50"></text></g><g><title>type_of (196,122 samples, 0.13%)</title><rect x="63.0018%" y="133" width="0.1328%" height="15" fill="rgb(240,125,3)"/><text x="63.2518%" y="143.50"></text></g><g><title>type_collecting (2,016,142 samples, 1.36%)</title><rect x="61.8234%" y="229" width="1.3650%" height="15" fill="rgb(205,98,50)"/><text x="62.0734%" y="239.50"></text></g><g><title>collect_mod_item_types (2,009,252 samples, 1.36%)</title><rect x="61.8281%" y="213" width="1.3603%" height="15" fill="rgb(205,185,37)"/><text x="62.0781%" y="223.50"></text></g><g><title>adt_def (382,005 samples, 0.26%)</title><rect x="65.1964%" y="85" width="0.2586%" height="15" fill="rgb(238,207,15)"/><text x="65.4464%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (381,755 samples, 0.26%)</title><rect x="65.1966%" y="69" width="0.2585%" height="15" fill="rgb(213,199,42)"/><text x="65.4466%" y="79.50"></text></g><g><title>item_attrs (378,115 samples, 0.26%)</title><rect x="65.1990%" y="53" width="0.2560%" height="15" fill="rgb(235,201,11)"/><text x="65.4490%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (377,665 samples, 0.26%)</title><rect x="65.1994%" y="37" width="0.2557%" height="15" fill="rgb(207,46,11)"/><text x="65.4494%" y="47.50"></text></g><g><title>adt_sized_constraint (412,995 samples, 0.28%)</title><rect x="65.1949%" y="101" width="0.2796%" height="15" fill="rgb(241,35,35)"/><text x="65.4449%" y="111.50"></text></g><g><title>adt_sized_constraint (419,715 samples, 0.28%)</title><rect x="65.1919%" y="117" width="0.2842%" height="15" fill="rgb(243,32,47)"/><text x="65.4419%" y="127.50"></text></g><g><title>adt_sized_constraint (428,345 samples, 0.29%)</title><rect x="65.1870%" y="133" width="0.2900%" height="15" fill="rgb(247,202,23)"/><text x="65.4370%" y="143.50"></text></g><g><title>adt_sized_constraint (459,485 samples, 0.31%)</title><rect x="65.1695%" y="149" width="0.3111%" height="15" fill="rgb(219,102,11)"/><text x="65.4195%" y="159.50"></text></g><g><title>adt_sized_constraint (473,145 samples, 0.32%)</title><rect x="65.1637%" y="165" width="0.3203%" height="15" fill="rgb(243,110,44)"/><text x="65.4137%" y="175.50"></text></g><g><title>adt_sized_constraint (544,116 samples, 0.37%)</title><rect x="65.1167%" y="181" width="0.3684%" height="15" fill="rgb(222,74,54)"/><text x="65.3667%" y="191.50"></text></g><g><title>evaluate_obligation (1,166,015 samples, 0.79%)</title><rect x="64.7562%" y="197" width="0.7894%" height="15" fill="rgb(216,99,12)"/><text x="65.0062%" y="207.50"></text></g><g><title>implied_outlives_bounds (275,553 samples, 0.19%)</title><rect x="65.5572%" y="197" width="0.1866%" height="15" fill="rgb(226,22,26)"/><text x="65.8072%" y="207.50"></text></g><g><title>param_env (261,012 samples, 0.18%)</title><rect x="65.7552%" y="197" width="0.1767%" height="15" fill="rgb(217,163,10)"/><text x="66.0052%" y="207.50"></text></g><g><title>region_scope_tree (434,788 samples, 0.29%)</title><rect x="65.9683%" y="197" width="0.2944%" height="15" fill="rgb(213,25,53)"/><text x="66.2183%" y="207.50"></text></g><g><title>check_impl_item_well_formed (4,389,548 samples, 2.97%)</title><rect x="63.3239%" y="213" width="2.9718%" height="15" fill="rgb(252,105,26)"/><text x="63.5739%" y="223.50">che..</text></g><g><title>adt_sized_constraint (215,492 samples, 0.15%)</title><rect x="67.2067%" y="165" width="0.1459%" height="15" fill="rgb(220,39,43)"/><text x="67.4567%" y="175.50"></text></g><g><title>adt_sized_constraint (388,264 samples, 0.26%)</title><rect x="67.0969%" y="181" width="0.2629%" height="15" fill="rgb(229,68,48)"/><text x="67.3469%" y="191.50"></text></g><g><title>evaluate_obligation (752,058 samples, 0.51%)</title><rect x="66.9119%" y="197" width="0.5092%" height="15" fill="rgb(252,8,32)"/><text x="67.1619%" y="207.50"></text></g><g><title>param_env (256,802 samples, 0.17%)</title><rect x="67.4688%" y="197" width="0.1739%" height="15" fill="rgb(223,20,43)"/><text x="67.7188%" y="207.50"></text></g><g><title>analysis (99,552,487 samples, 67.40%)</title><rect x="0.3702%" y="261" width="67.3990%" height="15" fill="rgb(229,81,49)"/><text x="0.6202%" y="271.50">analysis</text></g><g><title>type_check_crate (61,903,898 samples, 41.91%)</title><rect x="25.8590%" y="245" width="41.9102%" height="15" fill="rgb(236,28,36)"/><text x="26.1090%" y="255.50">type_check_crate</text></g><g><title>wf_checking (6,759,395 samples, 4.58%)</title><rect x="63.1929%" y="229" width="4.5762%" height="15" fill="rgb(249,185,26)"/><text x="63.4429%" y="239.50">wf_ch..</text></g><g><title>check_item_well_formed (2,176,435 samples, 1.47%)</title><rect x="66.2957%" y="213" width="1.4735%" height="15" fill="rgb(249,174,33)"/><text x="66.5457%" y="223.50"></text></g><g><title>codegen_crate (440,435 samples, 0.30%)</title><rect x="67.7741%" y="261" width="0.2982%" height="15" fill="rgb(233,201,37)"/><text x="68.0241%" y="271.50"></text></g><g><title>metadata_load_macro (218,132 samples, 0.15%)</title><rect x="82.2287%" y="213" width="0.1477%" height="15" fill="rgb(221,78,26)"/><text x="82.4787%" y="223.50"></text></g><g><title>metadata_register_crate (12,339,519 samples, 8.35%)</title><rect x="82.3764%" y="213" width="8.3541%" height="15" fill="rgb(250,127,30)"/><text x="82.6264%" y="223.50">metadata_reg..</text></g><g><title>metadata_register_crate (9,536,650 samples, 6.46%)</title><rect x="84.2740%" y="197" width="6.4565%" height="15" fill="rgb(230,49,44)"/><text x="84.5240%" y="207.50">metadata..</text></g><g><title>metadata_register_crate (429,546 samples, 0.29%)</title><rect x="90.4397%" y="181" width="0.2908%" height="15" fill="rgb(229,67,23)"/><text x="90.6897%" y="191.50"></text></g><g><title>macro_expand_crate (33,410,701 samples, 22.62%)</title><rect x="68.3450%" y="245" width="22.6197%" height="15" fill="rgb(249,83,47)"/><text x="68.5950%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (33,396,141 samples, 22.61%)</title><rect x="68.3549%" y="229" width="22.6098%" height="15" fill="rgb(215,43,3)"/><text x="68.6049%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (345,953 samples, 0.23%)</title><rect x="90.7305%" y="213" width="0.2342%" height="15" fill="rgb(238,154,13)"/><text x="90.9805%" y="223.50"></text></g><g><title>late_resolve_crate (2,100,653 samples, 1.42%)</title><rect x="91.1194%" y="229" width="1.4222%" height="15" fill="rgb(219,56,2)"/><text x="91.3694%" y="239.50"></text></g><g><title>configure_and_expand (36,258,413 samples, 24.55%)</title><rect x="68.0723%" y="261" width="24.5477%" height="15" fill="rgb(233,0,4)"/><text x="68.3223%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (2,368,256 samples, 1.60%)</title><rect x="91.0166%" y="245" width="1.6034%" height="15" fill="rgb(235,30,7)"/><text x="91.2666%" y="255.50"></text></g><g><title>drop_ast (176,832 samples, 0.12%)</title><rect x="92.6200%" y="261" width="0.1197%" height="15" fill="rgb(250,79,13)"/><text x="92.8700%" y="271.50"></text></g><g><title>early_lint_checks (371,234 samples, 0.25%)</title><rect x="92.7528%" y="261" width="0.2513%" height="15" fill="rgb(211,146,34)"/><text x="93.0028%" y="271.50"></text></g><g><title>free_global_ctxt (4,053,965 samples, 2.74%)</title><rect x="93.0041%" y="261" width="2.7446%" height="15" fill="rgb(228,22,38)"/><text x="93.2541%" y="271.50">fr..</text></g><g><title>crate_host_hash (262,043 samples, 0.18%)</title><rect x="96.3977%" y="245" width="0.1774%" height="15" fill="rgb(235,168,5)"/><text x="96.6477%" y="255.50"></text></g><g><title>generate_crate_metadata (1,408,526 samples, 0.95%)</title><rect x="95.7488%" y="261" width="0.9536%" height="15" fill="rgb(221,155,16)"/><text x="95.9988%" y="271.50"></text></g><g><title>hir_lowering (2,916,982 samples, 1.97%)</title><rect x="96.7024%" y="261" width="1.9749%" height="15" fill="rgb(215,215,53)"/><text x="96.9524%" y="271.50">h..</text></g><g><title>parse_crate (403,644 samples, 0.27%)</title><rect x="98.7089%" y="261" width="0.2733%" height="15" fill="rgb(223,4,10)"/><text x="98.9589%" y="271.50"></text></g><g><title>prepare_outputs (205,533 samples, 0.14%)</title><rect x="98.9869%" y="261" width="0.1391%" height="15" fill="rgb(234,103,6)"/><text x="99.2369%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (899,680 samples, 0.61%)</title><rect x="99.1260%" y="261" width="0.6091%" height="15" fill="rgb(227,97,0)"/><text x="99.3760%" y="271.50"></text></g><g><title>all (147,706,202 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (147,706,202 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (320,313 samples, 0.22%)</title><rect x="99.7831%" y="261" width="0.2169%" height="15" fill="rgb(222,22,37)"/><text x="100.0331%" y="271.50"></text></g></svg></svg>