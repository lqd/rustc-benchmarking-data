<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (177,963 samples, 0.14%)</title><rect x="7.3374%" y="85" width="0.1357%" height="15" fill="rgb(227,0,7)"/><text x="7.5874%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (174,243 samples, 0.13%)</title><rect x="7.3402%" y="69" width="0.1328%" height="15" fill="rgb(217,0,24)"/><text x="7.5902%" y="79.50"></text></g><g><title>codegen_fn_attrs (269,774 samples, 0.21%)</title><rect x="7.2786%" y="101" width="0.2056%" height="15" fill="rgb(221,193,54)"/><text x="7.5286%" y="111.50"></text></g><g><title>needs_drop_raw (382,394 samples, 0.29%)</title><rect x="9.0472%" y="85" width="0.2915%" height="15" fill="rgb(248,212,6)"/><text x="9.2972%" y="95.50"></text></g><g><title>is_copy_raw (278,633 samples, 0.21%)</title><rect x="9.1263%" y="69" width="0.2124%" height="15" fill="rgb(208,68,35)"/><text x="9.3763%" y="79.50"></text></g><g><title>evaluate_obligation (244,103 samples, 0.19%)</title><rect x="9.1526%" y="53" width="0.1861%" height="15" fill="rgb(232,128,0)"/><text x="9.4026%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (375,013 samples, 0.29%)</title><rect x="9.4114%" y="69" width="0.2859%" height="15" fill="rgb(207,160,47)"/><text x="9.6614%" y="79.50"></text></g><g><title>impl_parent (190,362 samples, 0.15%)</title><rect x="9.8959%" y="53" width="0.1451%" height="15" fill="rgb(228,23,34)"/><text x="10.1459%" y="63.50"></text></g><g><title>specialization_graph_of (891,430 samples, 0.68%)</title><rect x="9.6992%" y="69" width="0.6795%" height="15" fill="rgb(218,30,26)"/><text x="9.9492%" y="79.50"></text></g><g><title>impl_trait_ref (443,055 samples, 0.34%)</title><rect x="10.0410%" y="53" width="0.3377%" height="15" fill="rgb(220,122,19)"/><text x="10.2910%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (385,552 samples, 0.29%)</title><rect x="10.0849%" y="37" width="0.2939%" height="15" fill="rgb(250,228,42)"/><text x="10.3349%" y="47.50"></text></g><g><title>resolve_instance (1,410,436 samples, 1.08%)</title><rect x="9.3387%" y="85" width="1.0751%" height="15" fill="rgb(240,193,28)"/><text x="9.5887%" y="95.50"></text></g><g><title>thir_body (725,104 samples, 0.55%)</title><rect x="10.4268%" y="85" width="0.5527%" height="15" fill="rgb(216,20,37)"/><text x="10.6768%" y="95.50"></text></g><g><title>mir_const (5,843,058 samples, 4.45%)</title><rect x="6.5331%" y="133" width="4.4539%" height="15" fill="rgb(206,188,39)"/><text x="6.7831%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (5,170,172 samples, 3.94%)</title><rect x="7.0460%" y="117" width="3.9410%" height="15" fill="rgb(217,207,13)"/><text x="7.2960%" y="127.50">unsa..</text></g><g><title>mir_built (4,595,296 samples, 3.50%)</title><rect x="7.4842%" y="101" width="3.5028%" height="15" fill="rgb(231,73,38)"/><text x="7.7342%" y="111.50">mir..</text></g><g><title>mir_promoted (6,491,777 samples, 4.95%)</title><rect x="6.1161%" y="149" width="4.9484%" height="15" fill="rgb(225,20,46)"/><text x="6.3661%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (140,651 samples, 0.11%)</title><rect x="11.0646%" y="149" width="0.1072%" height="15" fill="rgb(210,31,41)"/><text x="11.3146%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (153,482 samples, 0.12%)</title><rect x="11.1718%" y="149" width="0.1170%" height="15" fill="rgb(221,200,47)"/><text x="11.4218%" y="159.50"></text></g><g><title>type_op_prove_predicate (609,416 samples, 0.46%)</title><rect x="11.3625%" y="149" width="0.4645%" height="15" fill="rgb(226,26,5)"/><text x="11.6125%" y="159.50"></text></g><g><title>MIR_borrow_checking (13,909,196 samples, 10.60%)</title><rect x="1.2265%" y="181" width="10.6024%" height="15" fill="rgb(249,33,26)"/><text x="1.4765%" y="191.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (13,838,944 samples, 10.55%)</title><rect x="1.2800%" y="165" width="10.5489%" height="15" fill="rgb(235,183,28)"/><text x="1.5300%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (140,442 samples, 0.11%)</title><rect x="11.8289%" y="181" width="0.1071%" height="15" fill="rgb(221,5,38)"/><text x="12.0789%" y="191.50"></text></g><g><title>hir_module_items (280,984 samples, 0.21%)</title><rect x="11.9360%" y="181" width="0.2142%" height="15" fill="rgb(247,18,42)"/><text x="12.1860%" y="191.50"></text></g><g><title>late_bound_vars_map (183,093 samples, 0.14%)</title><rect x="12.8333%" y="117" width="0.1396%" height="15" fill="rgb(241,131,45)"/><text x="13.0833%" y="127.50"></text></g><g><title>resolve_lifetimes (156,083 samples, 0.12%)</title><rect x="12.8539%" y="101" width="0.1190%" height="15" fill="rgb(249,31,29)"/><text x="13.1039%" y="111.50"></text></g><g><title>fn_sig (446,747 samples, 0.34%)</title><rect x="12.6937%" y="133" width="0.3405%" height="15" fill="rgb(225,111,53)"/><text x="12.9437%" y="143.50"></text></g><g><title>codegen_fn_attrs (206,683 samples, 0.16%)</title><rect x="13.2386%" y="117" width="0.1575%" height="15" fill="rgb(238,160,17)"/><text x="13.4886%" y="127.50"></text></g><g><title>should_inherit_track_caller (359,995 samples, 0.27%)</title><rect x="13.1304%" y="133" width="0.2744%" height="15" fill="rgb(214,148,48)"/><text x="13.3804%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,179,536 samples, 0.90%)</title><rect x="12.5285%" y="149" width="0.8991%" height="15" fill="rgb(232,36,49)"/><text x="12.7785%" y="159.50"></text></g><g><title>check_mod_attrs (1,615,968 samples, 1.23%)</title><rect x="12.1960%" y="165" width="1.2318%" height="15" fill="rgb(209,103,24)"/><text x="12.4460%" y="175.50"></text></g><g><title>check_mod_const_bodies (193,293 samples, 0.15%)</title><rect x="13.4278%" y="165" width="0.1473%" height="15" fill="rgb(229,88,8)"/><text x="13.6778%" y="175.50"></text></g><g><title>lookup_deprecation_entry (194,231 samples, 0.15%)</title><rect x="13.8484%" y="149" width="0.1481%" height="15" fill="rgb(213,181,19)"/><text x="14.0984%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (559,236 samples, 0.43%)</title><rect x="13.6703%" y="165" width="0.4263%" height="15" fill="rgb(254,191,54)"/><text x="13.9203%" y="175.50"></text></g><g><title>misc_checking_1 (2,644,879 samples, 2.02%)</title><rect x="12.1505%" y="181" width="2.0161%" height="15" fill="rgb(241,83,37)"/><text x="12.4005%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (317,873 samples, 0.24%)</title><rect x="14.1677%" y="165" width="0.2423%" height="15" fill="rgb(233,36,39)"/><text x="14.4177%" y="175.50"></text></g><g><title>check_mod_liveness (250,092 samples, 0.19%)</title><rect x="14.2194%" y="149" width="0.1906%" height="15" fill="rgb(226,3,54)"/><text x="14.4694%" y="159.50"></text></g><g><title>misc_checking_2 (688,107 samples, 0.52%)</title><rect x="14.1666%" y="181" width="0.5245%" height="15" fill="rgb(245,192,40)"/><text x="14.4166%" y="191.50"></text></g><g><title>match_checking (368,734 samples, 0.28%)</title><rect x="14.4100%" y="165" width="0.2811%" height="15" fill="rgb(238,167,29)"/><text x="14.6600%" y="175.50"></text></g><g><title>check_match (350,214 samples, 0.27%)</title><rect x="14.4241%" y="149" width="0.2670%" height="15" fill="rgb(232,182,51)"/><text x="14.6741%" y="159.50"></text></g><g><title>death_checking (292,383 samples, 0.22%)</title><rect x="14.7906%" y="165" width="0.2229%" height="15" fill="rgb(231,60,39)"/><text x="15.0406%" y="175.50"></text></g><g><title>eval_to_const_value_raw (141,111 samples, 0.11%)</title><rect x="15.5020%" y="133" width="0.1076%" height="15" fill="rgb(208,69,12)"/><text x="15.7520%" y="143.50"></text></g><g><title>eval_to_const_value_raw (138,431 samples, 0.11%)</title><rect x="15.5040%" y="117" width="0.1055%" height="15" fill="rgb(235,93,37)"/><text x="15.7540%" y="127.50"></text></g><g><title>eval_to_allocation_raw (133,081 samples, 0.10%)</title><rect x="15.5081%" y="101" width="0.1014%" height="15" fill="rgb(213,116,39)"/><text x="15.7581%" y="111.50"></text></g><g><title>param_env (141,942 samples, 0.11%)</title><rect x="15.6096%" y="133" width="0.1082%" height="15" fill="rgb(222,207,29)"/><text x="15.8596%" y="143.50"></text></g><g><title>crate_lints (1,986,072 samples, 1.51%)</title><rect x="15.0147%" y="149" width="1.5139%" height="15" fill="rgb(206,96,30)"/><text x="15.2647%" y="159.50"></text></g><g><title>type_of (1,059,470 samples, 0.81%)</title><rect x="15.7210%" y="133" width="0.8076%" height="15" fill="rgb(218,138,4)"/><text x="15.9710%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (829,228 samples, 0.63%)</title><rect x="15.8965%" y="117" width="0.6321%" height="15" fill="rgb(250,191,14)"/><text x="16.1465%" y="127.50"></text></g><g><title>lint_checking (2,267,305 samples, 1.73%)</title><rect x="15.0135%" y="165" width="1.7283%" height="15" fill="rgb(239,60,40)"/><text x="15.2635%" y="175.50"></text></g><g><title>module_lints (279,653 samples, 0.21%)</title><rect x="16.5286%" y="149" width="0.2132%" height="15" fill="rgb(206,27,48)"/><text x="16.7786%" y="159.50"></text></g><g><title>lint_mod (272,443 samples, 0.21%)</title><rect x="16.5341%" y="133" width="0.2077%" height="15" fill="rgb(225,35,8)"/><text x="16.7841%" y="143.50"></text></g><g><title>privacy_access_levels (190,822 samples, 0.15%)</title><rect x="16.7417%" y="165" width="0.1455%" height="15" fill="rgb(250,213,24)"/><text x="16.9917%" y="175.50"></text></g><g><title>late_bound_vars_map (258,293 samples, 0.20%)</title><rect x="17.2057%" y="133" width="0.1969%" height="15" fill="rgb(247,123,22)"/><text x="17.4557%" y="143.50"></text></g><g><title>privacy_checking_modules (706,678 samples, 0.54%)</title><rect x="16.8872%" y="165" width="0.5387%" height="15" fill="rgb(231,138,38)"/><text x="17.1372%" y="175.50"></text></g><g><title>check_mod_privacy (701,658 samples, 0.53%)</title><rect x="16.8910%" y="149" width="0.5348%" height="15" fill="rgb(231,145,46)"/><text x="17.1410%" y="159.50"></text></g><g><title>misc_checking_3 (3,600,980 samples, 2.74%)</title><rect x="14.6911%" y="181" width="2.7449%" height="15" fill="rgb(251,118,11)"/><text x="14.9411%" y="191.50">mi..</text></g><g><title>impl_trait_ref (179,143 samples, 0.14%)</title><rect x="17.6380%" y="85" width="0.1366%" height="15" fill="rgb(217,147,25)"/><text x="17.8880%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (160,523 samples, 0.12%)</title><rect x="17.6522%" y="69" width="0.1224%" height="15" fill="rgb(247,81,37)"/><text x="17.9022%" y="79.50"></text></g><g><title>adt_destructor (337,464 samples, 0.26%)</title><rect x="17.5372%" y="133" width="0.2572%" height="15" fill="rgb(209,12,38)"/><text x="17.7872%" y="143.50"></text></g><g><title>coherent_trait (328,284 samples, 0.25%)</title><rect x="17.5442%" y="117" width="0.2502%" height="15" fill="rgb(227,1,9)"/><text x="17.7942%" y="127.50"></text></g><g><title>specialization_graph_of (326,794 samples, 0.25%)</title><rect x="17.5454%" y="101" width="0.2491%" height="15" fill="rgb(248,47,43)"/><text x="17.7954%" y="111.50"></text></g><g><title>impl_parent (3,670,617 samples, 2.80%)</title><rect x="22.4241%" y="117" width="2.7980%" height="15" fill="rgb(221,10,30)"/><text x="22.6741%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,813,761 samples, 1.38%)</title><rect x="23.8395%" y="101" width="1.3826%" height="15" fill="rgb(210,229,1)"/><text x="24.0895%" y="111.50"></text></g><g><title>impl_trait_ref (9,456,378 samples, 7.21%)</title><rect x="25.2238%" y="117" width="7.2082%" height="15" fill="rgb(222,148,37)"/><text x="25.4738%" y="127.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,926,564 samples, 6.04%)</title><rect x="26.3899%" y="101" width="6.0421%" height="15" fill="rgb(234,67,33)"/><text x="26.6399%" y="111.50">metadata..</text></g><g><title>trait_impls_of (1,306,116 samples, 1.00%)</title><rect x="32.5438%" y="117" width="0.9956%" height="15" fill="rgb(247,98,35)"/><text x="32.7938%" y="127.50"></text></g><g><title>implementations_of_trait (377,845 samples, 0.29%)</title><rect x="33.2514%" y="101" width="0.2880%" height="15" fill="rgb(247,138,52)"/><text x="33.5014%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (284,715 samples, 0.22%)</title><rect x="33.3224%" y="85" width="0.2170%" height="15" fill="rgb(213,79,30)"/><text x="33.5724%" y="95.50"></text></g><g><title>coherent_trait (21,048,975 samples, 16.04%)</title><rect x="17.4964%" y="149" width="16.0448%" height="15" fill="rgb(246,177,23)"/><text x="17.7464%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (20,577,169 samples, 15.69%)</title><rect x="17.8560%" y="133" width="15.6852%" height="15" fill="rgb(230,62,27)"/><text x="18.1060%" y="143.50">specialization_graph_of</text></g><g><title>coherence_checking (21,183,237 samples, 16.15%)</title><rect x="17.4760%" y="165" width="16.1472%" height="15" fill="rgb(216,154,8)"/><text x="17.7260%" y="175.50">coherence_checking</text></g><g><title>associated_item (490,914 samples, 0.37%)</title><rect x="43.4457%" y="101" width="0.3742%" height="15" fill="rgb(244,35,45)"/><text x="43.6957%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (387,394 samples, 0.30%)</title><rect x="43.5246%" y="85" width="0.2953%" height="15" fill="rgb(251,115,12)"/><text x="43.7746%" y="95.50"></text></g><g><title>associated_items (703,705 samples, 0.54%)</title><rect x="43.3112%" y="117" width="0.5364%" height="15" fill="rgb(240,54,50)"/><text x="43.5612%" y="127.50"></text></g><g><title>adt_dtorck_constraint (134,622 samples, 0.10%)</title><rect x="44.0296%" y="85" width="0.1026%" height="15" fill="rgb(233,84,52)"/><text x="44.2796%" y="95.50"></text></g><g><title>dropck_outlives (335,075 samples, 0.26%)</title><rect x="43.8854%" y="117" width="0.2554%" height="15" fill="rgb(207,117,47)"/><text x="44.1354%" y="127.50"></text></g><g><title>adt_dtorck_constraint (235,365 samples, 0.18%)</title><rect x="43.9614%" y="101" width="0.1794%" height="15" fill="rgb(249,43,39)"/><text x="44.2114%" y="111.50"></text></g><g><title>eval_to_const_value_raw (216,282 samples, 0.16%)</title><rect x="44.1409%" y="117" width="0.1649%" height="15" fill="rgb(209,38,44)"/><text x="44.3909%" y="127.50"></text></g><g><title>eval_to_const_value_raw (205,262 samples, 0.16%)</title><rect x="44.1493%" y="101" width="0.1565%" height="15" fill="rgb(236,212,23)"/><text x="44.3993%" y="111.50"></text></g><g><title>eval_to_allocation_raw (199,502 samples, 0.15%)</title><rect x="44.1536%" y="85" width="0.1521%" height="15" fill="rgb(242,79,21)"/><text x="44.4036%" y="95.50"></text></g><g><title>generics_of (956,744 samples, 0.73%)</title><rect x="46.0427%" y="101" width="0.7293%" height="15" fill="rgb(211,96,35)"/><text x="46.2927%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (809,930 samples, 0.62%)</title><rect x="46.1546%" y="85" width="0.6174%" height="15" fill="rgb(253,215,40)"/><text x="46.4046%" y="95.50"></text></g><g><title>impl_trait_ref (689,194 samples, 0.53%)</title><rect x="46.8169%" y="101" width="0.5253%" height="15" fill="rgb(211,81,21)"/><text x="47.0669%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (538,904 samples, 0.41%)</title><rect x="46.9315%" y="85" width="0.4108%" height="15" fill="rgb(208,190,38)"/><text x="47.1815%" y="95.50"></text></g><g><title>predicates_of (251,503 samples, 0.19%)</title><rect x="47.3601%" y="101" width="0.1917%" height="15" fill="rgb(235,213,38)"/><text x="47.6101%" y="111.50"></text></g><g><title>predicates_defined_on (148,450 samples, 0.11%)</title><rect x="47.4387%" y="85" width="0.1132%" height="15" fill="rgb(237,122,38)"/><text x="47.6887%" y="95.50"></text></g><g><title>specializes (484,195 samples, 0.37%)</title><rect x="47.5518%" y="101" width="0.3691%" height="15" fill="rgb(244,218,35)"/><text x="47.8018%" y="111.50"></text></g><g><title>param_env (293,042 samples, 0.22%)</title><rect x="47.6975%" y="85" width="0.2234%" height="15" fill="rgb(240,68,47)"/><text x="47.9475%" y="95.50"></text></g><g><title>trait_impls_of (676,765 samples, 0.52%)</title><rect x="47.9317%" y="101" width="0.5159%" height="15" fill="rgb(210,16,53)"/><text x="48.1817%" y="111.50"></text></g><g><title>implementations_of_trait (263,661 samples, 0.20%)</title><rect x="48.2466%" y="85" width="0.2010%" height="15" fill="rgb(235,124,12)"/><text x="48.4966%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (180,811 samples, 0.14%)</title><rect x="48.3098%" y="69" width="0.1378%" height="15" fill="rgb(224,169,11)"/><text x="48.5598%" y="79.50"></text></g><g><title>evaluate_obligation (5,444,327 samples, 4.15%)</title><rect x="44.3057%" y="117" width="4.1500%" height="15" fill="rgb(250,166,2)"/><text x="44.5557%" y="127.50">evalu..</text></g><g><title>item_attrs (168,211 samples, 0.13%)</title><rect x="48.7880%" y="117" width="0.1282%" height="15" fill="rgb(242,216,29)"/><text x="49.0380%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (161,271 samples, 0.12%)</title><rect x="48.7933%" y="101" width="0.1229%" height="15" fill="rgb(230,116,27)"/><text x="49.0433%" y="111.50"></text></g><g><title>method_autoderef_steps (190,355 samples, 0.15%)</title><rect x="48.9535%" y="117" width="0.1451%" height="15" fill="rgb(228,99,48)"/><text x="49.2035%" y="127.50"></text></g><g><title>object_safety_violations (405,924 samples, 0.31%)</title><rect x="49.1004%" y="117" width="0.3094%" height="15" fill="rgb(253,11,6)"/><text x="49.3504%" y="127.50"></text></g><g><title>predicates_of (332,006 samples, 0.25%)</title><rect x="49.4376%" y="117" width="0.2531%" height="15" fill="rgb(247,143,39)"/><text x="49.6876%" y="127.50"></text></g><g><title>predicates_defined_on (236,293 samples, 0.18%)</title><rect x="49.5106%" y="101" width="0.1801%" height="15" fill="rgb(236,97,10)"/><text x="49.7606%" y="111.50"></text></g><g><title>type_of (272,592 samples, 0.21%)</title><rect x="49.7327%" y="117" width="0.2078%" height="15" fill="rgb(233,208,19)"/><text x="49.9827%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (255,772 samples, 0.19%)</title><rect x="49.7455%" y="101" width="0.1950%" height="15" fill="rgb(216,164,2)"/><text x="49.9955%" y="111.50"></text></g><g><title>item_bodies_checking (21,405,489 samples, 16.32%)</title><rect x="33.6669%" y="165" width="16.3166%" height="15" fill="rgb(220,129,5)"/><text x="33.9169%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,402,599 samples, 16.31%)</title><rect x="33.6691%" y="149" width="16.3144%" height="15" fill="rgb(242,17,10)"/><text x="33.9191%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (21,349,528 samples, 16.27%)</title><rect x="33.7095%" y="133" width="16.2739%" height="15" fill="rgb(242,107,0)"/><text x="33.9595%" y="143.50">typeck</text></g><g><title>generics_of (465,667 samples, 0.35%)</title><rect x="52.7153%" y="101" width="0.3550%" height="15" fill="rgb(251,28,31)"/><text x="52.9653%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (331,242 samples, 0.25%)</title><rect x="52.8178%" y="85" width="0.2525%" height="15" fill="rgb(233,223,10)"/><text x="53.0678%" y="95.50"></text></g><g><title>impl_trait_ref (823,546 samples, 0.63%)</title><rect x="53.1545%" y="101" width="0.6278%" height="15" fill="rgb(215,21,27)"/><text x="53.4045%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (508,954 samples, 0.39%)</title><rect x="53.3943%" y="85" width="0.3880%" height="15" fill="rgb(232,23,21)"/><text x="53.6443%" y="95.50"></text></g><g><title>predicates_of (599,567 samples, 0.46%)</title><rect x="53.8083%" y="101" width="0.4570%" height="15" fill="rgb(244,5,23)"/><text x="54.0583%" y="111.50"></text></g><g><title>predicates_defined_on (335,522 samples, 0.26%)</title><rect x="54.0096%" y="85" width="0.2558%" height="15" fill="rgb(226,81,46)"/><text x="54.2596%" y="95.50"></text></g><g><title>specializes (1,929,881 samples, 1.47%)</title><rect x="54.2654%" y="101" width="1.4711%" height="15" fill="rgb(247,70,30)"/><text x="54.5154%" y="111.50"></text></g><g><title>param_env (1,162,494 samples, 0.89%)</title><rect x="54.8503%" y="85" width="0.8861%" height="15" fill="rgb(212,68,19)"/><text x="55.1003%" y="95.50"></text></g><g><title>def_span (575,117 samples, 0.44%)</title><rect x="55.2981%" y="69" width="0.4384%" height="15" fill="rgb(240,187,13)"/><text x="55.5481%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (517,127 samples, 0.39%)</title><rect x="55.3423%" y="53" width="0.3942%" height="15" fill="rgb(223,113,26)"/><text x="55.5923%" y="63.50"></text></g><g><title>evaluate_obligation (6,051,067 samples, 4.61%)</title><rect x="51.1878%" y="117" width="4.6125%" height="15" fill="rgb(206,192,2)"/><text x="51.4378%" y="127.50">evalu..</text></g><g><title>specializes (143,731 samples, 0.11%)</title><rect x="55.8409%" y="117" width="0.1096%" height="15" fill="rgb(241,108,4)"/><text x="56.0909%" y="127.50"></text></g><g><title>item_types_checking (7,848,478 samples, 5.98%)</title><rect x="49.9834%" y="165" width="5.9826%" height="15" fill="rgb(247,173,49)"/><text x="50.2334%" y="175.50">item_typ..</text></g><g><title>check_mod_item_types (7,840,688 samples, 5.98%)</title><rect x="49.9894%" y="149" width="5.9767%" height="15" fill="rgb(224,114,35)"/><text x="50.2394%" y="159.50">check_mo..</text></g><g><title>typeck (7,213,010 samples, 5.50%)</title><rect x="50.4678%" y="133" width="5.4982%" height="15" fill="rgb(245,159,27)"/><text x="50.7178%" y="143.50">typeck</text></g><g><title>late_bound_vars_map (147,632 samples, 0.11%)</title><rect x="56.5658%" y="117" width="0.1125%" height="15" fill="rgb(245,172,44)"/><text x="56.8158%" y="127.50"></text></g><g><title>fn_sig (600,478 samples, 0.46%)</title><rect x="56.2675%" y="133" width="0.4577%" height="15" fill="rgb(236,23,11)"/><text x="56.5175%" y="143.50"></text></g><g><title>named_region_map (462,306 samples, 0.35%)</title><rect x="56.9311%" y="117" width="0.3524%" height="15" fill="rgb(205,117,38)"/><text x="57.1811%" y="127.50"></text></g><g><title>resolve_lifetimes (441,076 samples, 0.34%)</title><rect x="56.9473%" y="101" width="0.3362%" height="15" fill="rgb(237,72,25)"/><text x="57.1973%" y="111.50"></text></g><g><title>lint_levels (245,082 samples, 0.19%)</title><rect x="57.0967%" y="85" width="0.1868%" height="15" fill="rgb(244,70,9)"/><text x="57.3467%" y="95.50"></text></g><g><title>generics_of (749,459 samples, 0.57%)</title><rect x="56.7252%" y="133" width="0.5713%" height="15" fill="rgb(217,125,39)"/><text x="56.9752%" y="143.50"></text></g><g><title>predicates_of (378,833 samples, 0.29%)</title><rect x="57.3741%" y="133" width="0.2888%" height="15" fill="rgb(235,36,10)"/><text x="57.6241%" y="143.50"></text></g><g><title>predicates_defined_on (311,272 samples, 0.24%)</title><rect x="57.4256%" y="117" width="0.2373%" height="15" fill="rgb(251,123,47)"/><text x="57.6756%" y="127.50"></text></g><g><title>type_collecting (2,324,046 samples, 1.77%)</title><rect x="55.9669%" y="165" width="1.7715%" height="15" fill="rgb(221,13,13)"/><text x="56.2169%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,302,385 samples, 1.76%)</title><rect x="55.9834%" y="149" width="1.7550%" height="15" fill="rgb(238,131,9)"/><text x="56.2334%" y="159.50"></text></g><g><title>evaluate_obligation (210,743 samples, 0.16%)</title><rect x="58.4448%" y="133" width="0.1606%" height="15" fill="rgb(211,50,8)"/><text x="58.6948%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,402,726 samples, 1.07%)</title><rect x="57.8292%" y="149" width="1.0692%" height="15" fill="rgb(245,182,24)"/><text x="58.0792%" y="159.50"></text></g><g><title>region_scope_tree (155,431 samples, 0.12%)</title><rect x="58.7799%" y="133" width="0.1185%" height="15" fill="rgb(242,14,37)"/><text x="59.0299%" y="143.50"></text></g><g><title>evaluate_obligation (177,011 samples, 0.13%)</title><rect x="59.3993%" y="133" width="0.1349%" height="15" fill="rgb(246,228,12)"/><text x="59.6493%" y="143.50"></text></g><g><title>region_scope_tree (190,924 samples, 0.15%)</title><rect x="59.7210%" y="133" width="0.1455%" height="15" fill="rgb(213,55,15)"/><text x="59.9710%" y="143.50"></text></g><g><title>analysis (77,435,755 samples, 59.03%)</title><rect x="0.8725%" y="197" width="59.0263%" height="15" fill="rgb(209,9,3)"/><text x="1.1225%" y="207.50">analysis</text></g><g><title>type_check_crate (55,706,403 samples, 42.46%)</title><rect x="17.4360%" y="181" width="42.4628%" height="15" fill="rgb(230,59,30)"/><text x="17.6860%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,830,201 samples, 2.16%)</title><rect x="57.7414%" y="165" width="2.1574%" height="15" fill="rgb(209,121,21)"/><text x="57.9914%" y="175.50">w..</text></g><g><title>check_item_well_formed (1,312,383 samples, 1.00%)</title><rect x="58.8984%" y="149" width="1.0004%" height="15" fill="rgb(220,109,13)"/><text x="59.1484%" y="159.50"></text></g><g><title>codegen_crate (447,605 samples, 0.34%)</title><rect x="59.9041%" y="197" width="0.3412%" height="15" fill="rgb(232,18,1)"/><text x="60.1541%" y="207.50"></text></g><g><title>AST_validation (261,333 samples, 0.20%)</title><rect x="60.3447%" y="181" width="0.1992%" height="15" fill="rgb(215,41,42)"/><text x="60.5947%" y="191.50"></text></g><g><title>metadata_load_macro (174,021 samples, 0.13%)</title><rect x="83.7555%" y="149" width="0.1326%" height="15" fill="rgb(224,123,36)"/><text x="84.0055%" y="159.50"></text></g><g><title>metadata_register_crate (2,985,613 samples, 2.28%)</title><rect x="83.8882%" y="149" width="2.2758%" height="15" fill="rgb(240,125,3)"/><text x="84.1382%" y="159.50">m..</text></g><g><title>metadata_register_crate (1,168,604 samples, 0.89%)</title><rect x="85.2732%" y="133" width="0.8908%" height="15" fill="rgb(205,98,50)"/><text x="85.5232%" y="143.50"></text></g><g><title>macro_expand_crate (33,493,884 samples, 25.53%)</title><rect x="60.6908%" y="181" width="25.5311%" height="15" fill="rgb(205,185,37)"/><text x="60.9408%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (33,476,194 samples, 25.52%)</title><rect x="60.7043%" y="165" width="25.5176%" height="15" fill="rgb(238,207,15)"/><text x="60.9543%" y="175.50">expand_crate</text></g><g><title>finalize_imports (388,585 samples, 0.30%)</title><rect x="86.3007%" y="165" width="0.2962%" height="15" fill="rgb(213,199,42)"/><text x="86.5507%" y="175.50"></text></g><g><title>finalize_macro_resolutions (233,523 samples, 0.18%)</title><rect x="86.5969%" y="165" width="0.1780%" height="15" fill="rgb(235,201,11)"/><text x="86.8469%" y="175.50"></text></g><g><title>late_resolve_crate (2,497,468 samples, 1.90%)</title><rect x="86.7749%" y="165" width="1.9037%" height="15" fill="rgb(207,46,11)"/><text x="87.0249%" y="175.50">l..</text></g><g><title>configure_and_expand (37,463,099 samples, 28.56%)</title><rect x="60.2453%" y="197" width="28.5567%" height="15" fill="rgb(241,35,35)"/><text x="60.4953%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,291,267 samples, 2.51%)</title><rect x="86.2932%" y="181" width="2.5088%" height="15" fill="rgb(243,32,47)"/><text x="86.5432%" y="191.50">re..</text></g><g><title>drop_ast (308,433 samples, 0.24%)</title><rect x="88.8020%" y="197" width="0.2351%" height="15" fill="rgb(247,202,23)"/><text x="89.0520%" y="207.50"></text></g><g><title>early_lint_checks (658,287 samples, 0.50%)</title><rect x="89.0497%" y="197" width="0.5018%" height="15" fill="rgb(219,102,11)"/><text x="89.2997%" y="207.50"></text></g><g><title>free_global_ctxt (3,691,072 samples, 2.81%)</title><rect x="89.5515%" y="197" width="2.8136%" height="15" fill="rgb(243,110,44)"/><text x="89.8015%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,676,009 samples, 1.28%)</title><rect x="92.3651%" y="197" width="1.2776%" height="15" fill="rgb(222,74,54)"/><text x="92.6151%" y="207.50"></text></g><g><title>hir_lowering (5,279,849 samples, 4.02%)</title><rect x="93.6426%" y="197" width="4.0246%" height="15" fill="rgb(216,99,12)"/><text x="93.8926%" y="207.50">hir_..</text></g><g><title>parse_crate (1,156,973 samples, 0.88%)</title><rect x="97.7074%" y="197" width="0.8819%" height="15" fill="rgb(226,22,26)"/><text x="97.9574%" y="207.50"></text></g><g><title>prepare_outputs (367,084 samples, 0.28%)</title><rect x="98.5934%" y="197" width="0.2798%" height="15" fill="rgb(217,163,10)"/><text x="98.8434%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (906,020 samples, 0.69%)</title><rect x="98.8732%" y="197" width="0.6906%" height="15" fill="rgb(213,25,53)"/><text x="99.1232%" y="207.50"></text></g><g><title>setup_global_ctxt (159,202 samples, 0.12%)</title><rect x="99.5717%" y="197" width="0.1214%" height="15" fill="rgb(252,105,26)"/><text x="99.8217%" y="207.50"></text></g><g><title>all (131,188,637 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (131,188,637 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (402,735 samples, 0.31%)</title><rect x="99.6930%" y="197" width="0.3070%" height="15" fill="rgb(252,8,32)"/><text x="99.9430%" y="207.50"></text></g></svg></svg>