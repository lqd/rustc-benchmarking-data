<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (126,282 samples, 0.20%)</title><rect x="3.9487%" y="101" width="0.2009%" height="15" fill="rgb(227,0,7)"/><text x="4.1987%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (123,210 samples, 0.20%)</title><rect x="3.9536%" y="85" width="0.1960%" height="15" fill="rgb(217,0,24)"/><text x="4.2036%" y="95.50"></text></g><g><title>codegen_fn_attrs (156,602 samples, 0.25%)</title><rect x="3.9051%" y="117" width="0.2491%" height="15" fill="rgb(221,193,54)"/><text x="4.1551%" y="127.50"></text></g><g><title>is_copy_raw (97,951 samples, 0.16%)</title><rect x="4.7378%" y="101" width="0.1558%" height="15" fill="rgb(248,212,6)"/><text x="4.9878%" y="111.50"></text></g><g><title>evaluate_obligation (94,061 samples, 0.15%)</title><rect x="4.7440%" y="85" width="0.1496%" height="15" fill="rgb(208,68,35)"/><text x="4.9940%" y="95.50"></text></g><g><title>needs_drop_raw (135,211 samples, 0.22%)</title><rect x="4.8936%" y="101" width="0.2151%" height="15" fill="rgb(232,128,0)"/><text x="5.1436%" y="111.50"></text></g><g><title>is_copy_raw (127,521 samples, 0.20%)</title><rect x="4.9059%" y="85" width="0.2028%" height="15" fill="rgb(207,160,47)"/><text x="5.1559%" y="95.50"></text></g><g><title>evaluate_obligation (112,161 samples, 0.18%)</title><rect x="4.9303%" y="69" width="0.1784%" height="15" fill="rgb(228,23,34)"/><text x="5.1803%" y="79.50"></text></g><g><title>thir_body (137,151 samples, 0.22%)</title><rect x="5.1492%" y="101" width="0.2181%" height="15" fill="rgb(218,30,26)"/><text x="5.3992%" y="111.50"></text></g><g><title>mir_const (1,115,483 samples, 1.77%)</title><rect x="3.5951%" y="149" width="1.7742%" height="15" fill="rgb(220,122,19)"/><text x="3.8451%" y="159.50">m..</text></g><g><title>unsafety_check_result (976,201 samples, 1.55%)</title><rect x="3.8166%" y="133" width="1.5527%" height="15" fill="rgb(250,228,42)"/><text x="4.0666%" y="143.50"></text></g><g><title>mir_built (763,978 samples, 1.22%)</title><rect x="4.1542%" y="117" width="1.2151%" height="15" fill="rgb(240,193,28)"/><text x="4.4042%" y="127.50"></text></g><g><title>needs_drop_raw (257,923 samples, 0.41%)</title><rect x="5.8302%" y="85" width="0.4102%" height="15" fill="rgb(216,20,37)"/><text x="6.0802%" y="95.50"></text></g><g><title>is_copy_raw (195,363 samples, 0.31%)</title><rect x="5.9297%" y="69" width="0.3107%" height="15" fill="rgb(206,188,39)"/><text x="6.1797%" y="79.50"></text></g><g><title>evaluate_obligation (187,633 samples, 0.30%)</title><rect x="5.9420%" y="53" width="0.2984%" height="15" fill="rgb(217,207,13)"/><text x="6.1920%" y="63.50"></text></g><g><title>trait_impls_of (137,572 samples, 0.22%)</title><rect x="6.0216%" y="37" width="0.2188%" height="15" fill="rgb(231,73,38)"/><text x="6.2716%" y="47.50"></text></g><g><title>mir_const (404,944 samples, 0.64%)</title><rect x="5.6332%" y="133" width="0.6441%" height="15" fill="rgb(225,20,46)"/><text x="5.8832%" y="143.50"></text></g><g><title>unsafety_check_result (351,553 samples, 0.56%)</title><rect x="5.7181%" y="117" width="0.5592%" height="15" fill="rgb(210,31,41)"/><text x="5.9681%" y="127.50"></text></g><g><title>mir_built (330,443 samples, 0.53%)</title><rect x="5.7517%" y="101" width="0.5256%" height="15" fill="rgb(221,200,47)"/><text x="6.0017%" y="111.50"></text></g><g><title>mir_const_qualif (584,886 samples, 0.93%)</title><rect x="5.3693%" y="149" width="0.9303%" height="15" fill="rgb(226,26,5)"/><text x="5.6193%" y="159.50"></text></g><g><title>mir_promoted (1,813,039 samples, 2.88%)</title><rect x="3.4163%" y="165" width="2.8837%" height="15" fill="rgb(249,33,26)"/><text x="3.6663%" y="175.50">mi..</text></g><g><title>type_op_ascribe_user_type (66,961 samples, 0.11%)</title><rect x="6.3000%" y="165" width="0.1065%" height="15" fill="rgb(235,183,28)"/><text x="6.5500%" y="175.50"></text></g><g><title>type_op_prove_predicate (201,373 samples, 0.32%)</title><rect x="6.4065%" y="165" width="0.3203%" height="15" fill="rgb(221,5,38)"/><text x="6.6565%" y="175.50"></text></g><g><title>MIR_borrow_checking (3,387,717 samples, 5.39%)</title><rect x="1.3413%" y="197" width="5.3883%" height="15" fill="rgb(247,18,42)"/><text x="1.5913%" y="207.50">MIR_bor..</text></g><g><title>mir_borrowck (3,376,127 samples, 5.37%)</title><rect x="1.3597%" y="181" width="5.3698%" height="15" fill="rgb(241,131,45)"/><text x="1.6097%" y="191.50">mir_bor..</text></g><g><title>MIR_effect_checking (129,372 samples, 0.21%)</title><rect x="6.7296%" y="197" width="0.2058%" height="15" fill="rgb(249,31,29)"/><text x="6.9796%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (110,421 samples, 0.18%)</title><rect x="6.7597%" y="181" width="0.1756%" height="15" fill="rgb(225,111,53)"/><text x="7.0097%" y="191.50"></text></g><g><title>hir_module_items (140,682 samples, 0.22%)</title><rect x="6.9353%" y="197" width="0.2238%" height="15" fill="rgb(238,160,17)"/><text x="7.1853%" y="207.50"></text></g><g><title>get_lang_items (87,931 samples, 0.14%)</title><rect x="7.4995%" y="149" width="0.1399%" height="15" fill="rgb(214,148,48)"/><text x="7.7495%" y="159.50"></text></g><g><title>codegen_fn_attrs (75,831 samples, 0.12%)</title><rect x="7.7551%" y="133" width="0.1206%" height="15" fill="rgb(232,36,49)"/><text x="8.0051%" y="143.50"></text></g><g><title>should_inherit_track_caller (151,672 samples, 0.24%)</title><rect x="7.6393%" y="149" width="0.2412%" height="15" fill="rgb(209,103,24)"/><text x="7.8893%" y="159.50"></text></g><g><title>codegen_fn_attrs (344,093 samples, 0.55%)</title><rect x="7.3907%" y="165" width="0.5473%" height="15" fill="rgb(229,88,8)"/><text x="7.6407%" y="175.50"></text></g><g><title>check_mod_attrs (454,475 samples, 0.72%)</title><rect x="7.2157%" y="181" width="0.7229%" height="15" fill="rgb(213,181,19)"/><text x="7.4657%" y="191.50"></text></g><g><title>lookup_deprecation_entry (110,891 samples, 0.18%)</title><rect x="8.2814%" y="165" width="0.1764%" height="15" fill="rgb(254,191,54)"/><text x="8.5314%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (328,993 samples, 0.52%)</title><rect x="8.0892%" y="181" width="0.5233%" height="15" fill="rgb(241,83,37)"/><text x="8.3392%" y="191.50"></text></g><g><title>misc_checking_1 (958,961 samples, 1.53%)</title><rect x="7.1597%" y="197" width="1.5253%" height="15" fill="rgb(233,36,39)"/><text x="7.4097%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (99,441 samples, 0.16%)</title><rect x="8.6877%" y="181" width="0.1582%" height="15" fill="rgb(226,3,54)"/><text x="8.9377%" y="191.50"></text></g><g><title>check_mod_liveness (77,261 samples, 0.12%)</title><rect x="8.7230%" y="165" width="0.1229%" height="15" fill="rgb(245,192,40)"/><text x="8.9730%" y="175.50"></text></g><g><title>mir_borrowck (376,215 samples, 0.60%)</title><rect x="9.5306%" y="69" width="0.5984%" height="15" fill="rgb(238,167,29)"/><text x="9.7806%" y="79.50"></text></g><g><title>eval_to_const_value_raw (648,617 samples, 1.03%)</title><rect x="9.0987%" y="149" width="1.0316%" height="15" fill="rgb(232,182,51)"/><text x="9.3487%" y="159.50"></text></g><g><title>eval_to_const_value_raw (640,957 samples, 1.02%)</title><rect x="9.1109%" y="133" width="1.0195%" height="15" fill="rgb(231,60,39)"/><text x="9.3609%" y="143.50"></text></g><g><title>eval_to_allocation_raw (633,617 samples, 1.01%)</title><rect x="9.1225%" y="117" width="1.0078%" height="15" fill="rgb(208,69,12)"/><text x="9.3725%" y="127.50"></text></g><g><title>mir_for_ctfe (526,326 samples, 0.84%)</title><rect x="9.2932%" y="101" width="0.8371%" height="15" fill="rgb(235,93,37)"/><text x="9.5432%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (482,646 samples, 0.77%)</title><rect x="9.3627%" y="85" width="0.7677%" height="15" fill="rgb(213,116,39)"/><text x="9.6127%" y="95.50"></text></g><g><title>mir_const_qualif (200,232 samples, 0.32%)</title><rect x="10.1398%" y="149" width="0.3185%" height="15" fill="rgb(222,207,29)"/><text x="10.3898%" y="159.50"></text></g><g><title>mir_const (152,361 samples, 0.24%)</title><rect x="10.2160%" y="133" width="0.2423%" height="15" fill="rgb(206,96,30)"/><text x="10.4660%" y="143.50"></text></g><g><title>unsafety_check_result (102,931 samples, 0.16%)</title><rect x="10.2946%" y="117" width="0.1637%" height="15" fill="rgb(218,138,4)"/><text x="10.5446%" y="127.50"></text></g><g><title>mir_built (65,441 samples, 0.10%)</title><rect x="10.3542%" y="101" width="0.1041%" height="15" fill="rgb(250,191,14)"/><text x="10.6042%" y="111.50"></text></g><g><title>misc_checking_2 (1,121,163 samples, 1.78%)</title><rect x="8.6850%" y="197" width="1.7832%" height="15" fill="rgb(239,60,40)"/><text x="8.9350%" y="207.50">m..</text></g><g><title>match_checking (1,019,982 samples, 1.62%)</title><rect x="8.8459%" y="181" width="1.6223%" height="15" fill="rgb(206,27,48)"/><text x="9.0959%" y="191.50"></text></g><g><title>check_match (1,013,551 samples, 1.61%)</title><rect x="8.8561%" y="165" width="1.6121%" height="15" fill="rgb(225,35,8)"/><text x="9.1061%" y="175.50"></text></g><g><title>death_checking (324,634 samples, 0.52%)</title><rect x="10.5595%" y="181" width="0.5163%" height="15" fill="rgb(250,213,24)"/><text x="10.8095%" y="191.50"></text></g><g><title>param_env (86,071 samples, 0.14%)</title><rect x="11.9397%" y="149" width="0.1369%" height="15" fill="rgb(247,123,22)"/><text x="12.1897%" y="159.50"></text></g><g><title>impl_parent (500,655 samples, 0.80%)</title><rect x="13.4290%" y="117" width="0.7963%" height="15" fill="rgb(231,138,38)"/><text x="13.6790%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (299,242 samples, 0.48%)</title><rect x="13.7493%" y="101" width="0.4760%" height="15" fill="rgb(231,145,46)"/><text x="13.9993%" y="111.50"></text></g><g><title>specialization_graph_of (2,276,655 samples, 3.62%)</title><rect x="12.1606%" y="133" width="3.6211%" height="15" fill="rgb(251,118,11)"/><text x="12.4106%" y="143.50">spec..</text></g><g><title>impl_trait_ref (978,551 samples, 1.56%)</title><rect x="14.2253%" y="117" width="1.5564%" height="15" fill="rgb(217,147,25)"/><text x="14.4753%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (776,928 samples, 1.24%)</title><rect x="14.5460%" y="101" width="1.2357%" height="15" fill="rgb(247,81,37)"/><text x="14.7960%" y="111.50"></text></g><g><title>resolve_instance (2,331,535 samples, 3.71%)</title><rect x="12.0766%" y="149" width="3.7084%" height="15" fill="rgb(209,12,38)"/><text x="12.3266%" y="159.50">reso..</text></g><g><title>crate_lints (3,998,404 samples, 6.36%)</title><rect x="11.0794%" y="165" width="6.3596%" height="15" fill="rgb(227,1,9)"/><text x="11.3294%" y="175.50">crate_li..</text></g><g><title>type_of (1,033,783 samples, 1.64%)</title><rect x="15.7947%" y="149" width="1.6443%" height="15" fill="rgb(248,47,43)"/><text x="16.0447%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (801,970 samples, 1.28%)</title><rect x="16.1634%" y="133" width="1.2756%" height="15" fill="rgb(221,10,30)"/><text x="16.4134%" y="143.50"></text></g><g><title>lint_checking (4,083,125 samples, 6.49%)</title><rect x="11.0759%" y="181" width="6.4943%" height="15" fill="rgb(210,229,1)"/><text x="11.3259%" y="191.50">lint_chec..</text></g><g><title>module_lints (82,531 samples, 0.13%)</title><rect x="17.4390%" y="165" width="0.1313%" height="15" fill="rgb(222,148,37)"/><text x="17.6890%" y="175.50"></text></g><g><title>lint_mod (78,831 samples, 0.13%)</title><rect x="17.4448%" y="149" width="0.1254%" height="15" fill="rgb(234,67,33)"/><text x="17.6948%" y="159.50"></text></g><g><title>privacy_checking_modules (143,882 samples, 0.23%)</title><rect x="17.6579%" y="181" width="0.2288%" height="15" fill="rgb(247,98,35)"/><text x="17.9079%" y="191.50"></text></g><g><title>check_mod_privacy (142,252 samples, 0.23%)</title><rect x="17.6605%" y="165" width="0.2263%" height="15" fill="rgb(247,138,52)"/><text x="17.9105%" y="175.50"></text></g><g><title>misc_checking_3 (4,673,102 samples, 7.43%)</title><rect x="10.4682%" y="197" width="7.4327%" height="15" fill="rgb(213,79,30)"/><text x="10.7182%" y="207.50">misc_check..</text></g><g><title>impl_parent (1,982,791 samples, 3.15%)</title><rect x="23.0098%" y="133" width="3.1537%" height="15" fill="rgb(246,177,23)"/><text x="23.2598%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,183,934 samples, 1.88%)</title><rect x="24.2805%" y="117" width="1.8831%" height="15" fill="rgb(230,62,27)"/><text x="24.5305%" y="127.50">m..</text></g><g><title>impl_trait_ref (7,012,405 samples, 11.15%)</title><rect x="26.1635%" y="133" width="11.1535%" height="15" fill="rgb(216,154,8)"/><text x="26.4135%" y="143.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,169,402 samples, 9.81%)</title><rect x="27.5044%" y="117" width="9.8126%" height="15" fill="rgb(244,35,45)"/><text x="27.7544%" y="127.50">metadata_decod..</text></g><g><title>coherent_trait (12,861,972 samples, 20.46%)</title><rect x="18.0116%" y="165" width="20.4574%" height="15" fill="rgb(251,115,12)"/><text x="18.2616%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (12,841,882 samples, 20.43%)</title><rect x="18.0436%" y="149" width="20.4254%" height="15" fill="rgb(240,54,50)"/><text x="18.2936%" y="159.50">specialization_graph_of</text></g><g><title>trait_impls_of (721,148 samples, 1.15%)</title><rect x="37.3220%" y="133" width="1.1470%" height="15" fill="rgb(233,84,52)"/><text x="37.5720%" y="143.50"></text></g><g><title>implementations_of_trait (188,380 samples, 0.30%)</title><rect x="38.1694%" y="117" width="0.2996%" height="15" fill="rgb(207,117,47)"/><text x="38.4194%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (148,470 samples, 0.24%)</title><rect x="38.2328%" y="101" width="0.2361%" height="15" fill="rgb(249,43,39)"/><text x="38.4828%" y="111.50"></text></g><g><title>coherence_checking (12,955,253 samples, 20.61%)</title><rect x="17.9728%" y="181" width="20.6057%" height="15" fill="rgb(209,38,44)"/><text x="18.2228%" y="191.50">coherence_checking</text></g><g><title>associated_item (353,734 samples, 0.56%)</title><rect x="47.1087%" y="117" width="0.5626%" height="15" fill="rgb(236,212,23)"/><text x="47.3587%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (266,933 samples, 0.42%)</title><rect x="47.2468%" y="101" width="0.4246%" height="15" fill="rgb(242,79,21)"/><text x="47.4968%" y="111.50"></text></g><g><title>associated_items (522,805 samples, 0.83%)</title><rect x="46.8740%" y="133" width="0.8315%" height="15" fill="rgb(211,96,35)"/><text x="47.1240%" y="143.50"></text></g><g><title>dropck_outlives (233,592 samples, 0.37%)</title><rect x="47.7796%" y="133" width="0.3715%" height="15" fill="rgb(253,215,40)"/><text x="48.0296%" y="143.50"></text></g><g><title>adt_dtorck_constraint (147,401 samples, 0.23%)</title><rect x="47.9167%" y="117" width="0.2344%" height="15" fill="rgb(211,81,21)"/><text x="48.1667%" y="127.50"></text></g><g><title>predicates_of (103,082 samples, 0.16%)</title><rect x="49.0504%" y="117" width="0.1640%" height="15" fill="rgb(208,190,38)"/><text x="49.3004%" y="127.50"></text></g><g><title>predicates_defined_on (73,222 samples, 0.12%)</title><rect x="49.0979%" y="101" width="0.1165%" height="15" fill="rgb(235,213,38)"/><text x="49.3479%" y="111.50"></text></g><g><title>specializes (103,150 samples, 0.16%)</title><rect x="49.2143%" y="117" width="0.1641%" height="15" fill="rgb(237,122,38)"/><text x="49.4643%" y="127.50"></text></g><g><title>param_env (74,900 samples, 0.12%)</title><rect x="49.2593%" y="101" width="0.1191%" height="15" fill="rgb(244,218,35)"/><text x="49.5093%" y="111.50"></text></g><g><title>trait_impls_of (978,350 samples, 1.56%)</title><rect x="49.3859%" y="117" width="1.5561%" height="15" fill="rgb(240,68,47)"/><text x="49.6359%" y="127.50"></text></g><g><title>implementations_of_trait (259,823 samples, 0.41%)</title><rect x="50.5287%" y="101" width="0.4133%" height="15" fill="rgb(210,16,53)"/><text x="50.7787%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (214,103 samples, 0.34%)</title><rect x="50.6014%" y="85" width="0.3405%" height="15" fill="rgb(235,124,12)"/><text x="50.8514%" y="95.50"></text></g><g><title>evaluate_obligation (1,763,937 samples, 2.81%)</title><rect x="48.1511%" y="133" width="2.8056%" height="15" fill="rgb(224,169,11)"/><text x="48.4011%" y="143.50">ev..</text></g><g><title>fn_sig (146,082 samples, 0.23%)</title><rect x="50.9890%" y="133" width="0.2323%" height="15" fill="rgb(250,166,2)"/><text x="51.2390%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (129,992 samples, 0.21%)</title><rect x="51.0146%" y="117" width="0.2068%" height="15" fill="rgb(242,216,29)"/><text x="51.2646%" y="127.50"></text></g><g><title>generics_of (94,322 samples, 0.15%)</title><rect x="51.2214%" y="133" width="0.1500%" height="15" fill="rgb(230,116,27)"/><text x="51.4714%" y="143.50"></text></g><g><title>item_attrs (92,412 samples, 0.15%)</title><rect x="51.5187%" y="133" width="0.1470%" height="15" fill="rgb(228,99,48)"/><text x="51.7687%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (87,572 samples, 0.14%)</title><rect x="51.5264%" y="117" width="0.1393%" height="15" fill="rgb(253,11,6)"/><text x="51.7764%" y="127.50"></text></g><g><title>lint_levels (73,750 samples, 0.12%)</title><rect x="51.7140%" y="133" width="0.1173%" height="15" fill="rgb(247,143,39)"/><text x="51.9640%" y="143.50"></text></g><g><title>method_autoderef_steps (244,363 samples, 0.39%)</title><rect x="51.9245%" y="133" width="0.3887%" height="15" fill="rgb(236,97,10)"/><text x="52.1745%" y="143.50"></text></g><g><title>evaluate_obligation (169,251 samples, 0.27%)</title><rect x="52.0440%" y="117" width="0.2692%" height="15" fill="rgb(233,208,19)"/><text x="52.2940%" y="127.50"></text></g><g><title>explicit_predicates_of (80,281 samples, 0.13%)</title><rect x="52.6333%" y="101" width="0.1277%" height="15" fill="rgb(216,164,2)"/><text x="52.8833%" y="111.50"></text></g><g><title>predicates_of (293,542 samples, 0.47%)</title><rect x="52.3558%" y="133" width="0.4669%" height="15" fill="rgb(220,129,5)"/><text x="52.6058%" y="143.50"></text></g><g><title>predicates_defined_on (193,592 samples, 0.31%)</title><rect x="52.5148%" y="117" width="0.3079%" height="15" fill="rgb(242,17,10)"/><text x="52.7648%" y="127.50"></text></g><g><title>item_bodies_checking (9,047,860 samples, 14.39%)</title><rect x="38.6171%" y="181" width="14.3909%" height="15" fill="rgb(242,107,0)"/><text x="38.8671%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,045,120 samples, 14.39%)</title><rect x="38.6214%" y="165" width="14.3866%" height="15" fill="rgb(251,28,31)"/><text x="38.8714%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (9,027,980 samples, 14.36%)</title><rect x="38.6487%" y="149" width="14.3593%" height="15" fill="rgb(233,223,10)"/><text x="38.8987%" y="159.50">typeck</text></g><g><title>impl_parent (107,470 samples, 0.17%)</title><rect x="53.7001%" y="101" width="0.1709%" height="15" fill="rgb(215,21,27)"/><text x="53.9501%" y="111.50"></text></g><g><title>impl_trait_ref (306,594 samples, 0.49%)</title><rect x="53.8710%" y="101" width="0.4876%" height="15" fill="rgb(232,23,21)"/><text x="54.1210%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (257,632 samples, 0.41%)</title><rect x="53.9489%" y="85" width="0.4098%" height="15" fill="rgb(244,5,23)"/><text x="54.1989%" y="95.50"></text></g><g><title>adt_destructor (714,308 samples, 1.14%)</title><rect x="53.3783%" y="149" width="1.1361%" height="15" fill="rgb(226,81,46)"/><text x="53.6283%" y="159.50"></text></g><g><title>coherent_trait (709,178 samples, 1.13%)</title><rect x="53.3865%" y="133" width="1.1280%" height="15" fill="rgb(247,70,30)"/><text x="53.6365%" y="143.50"></text></g><g><title>specialization_graph_of (705,888 samples, 1.12%)</title><rect x="53.3917%" y="117" width="1.1227%" height="15" fill="rgb(212,68,19)"/><text x="53.6417%" y="127.50"></text></g><g><title>trait_impls_of (97,931 samples, 0.16%)</title><rect x="54.3587%" y="101" width="0.1558%" height="15" fill="rgb(240,187,13)"/><text x="54.6087%" y="111.50"></text></g><g><title>item_types_checking (1,238,544 samples, 1.97%)</title><rect x="53.0080%" y="181" width="1.9699%" height="15" fill="rgb(223,113,26)"/><text x="53.2580%" y="191.50">i..</text></g><g><title>check_mod_item_types (1,234,404 samples, 1.96%)</title><rect x="53.0146%" y="165" width="1.9634%" height="15" fill="rgb(206,192,2)"/><text x="53.2646%" y="175.50">c..</text></g><g><title>typeck (214,912 samples, 0.34%)</title><rect x="54.6361%" y="149" width="0.3418%" height="15" fill="rgb(241,108,4)"/><text x="54.8861%" y="159.50"></text></g><g><title>late_bound_vars_map (97,020 samples, 0.15%)</title><rect x="55.3154%" y="133" width="0.1543%" height="15" fill="rgb(247,173,49)"/><text x="55.5654%" y="143.50"></text></g><g><title>resolve_lifetimes (87,960 samples, 0.14%)</title><rect x="55.3298%" y="117" width="0.1399%" height="15" fill="rgb(224,114,35)"/><text x="55.5798%" y="127.50"></text></g><g><title>fn_sig (178,353 samples, 0.28%)</title><rect x="55.2208%" y="149" width="0.2837%" height="15" fill="rgb(245,159,27)"/><text x="55.4708%" y="159.50"></text></g><g><title>generics_of (87,091 samples, 0.14%)</title><rect x="55.5045%" y="149" width="0.1385%" height="15" fill="rgb(245,172,44)"/><text x="55.7545%" y="159.50"></text></g><g><title>explicit_predicates_of (74,100 samples, 0.12%)</title><rect x="55.7619%" y="117" width="0.1179%" height="15" fill="rgb(236,23,11)"/><text x="56.0119%" y="127.50"></text></g><g><title>predicates_of (71,511 samples, 0.11%)</title><rect x="55.9665%" y="85" width="0.1137%" height="15" fill="rgb(205,117,38)"/><text x="56.2165%" y="95.50"></text></g><g><title>predicates_defined_on (67,091 samples, 0.11%)</title><rect x="55.9735%" y="69" width="0.1067%" height="15" fill="rgb(237,72,25)"/><text x="56.2235%" y="79.50"></text></g><g><title>predicates_of (387,244 samples, 0.62%)</title><rect x="55.6776%" y="149" width="0.6159%" height="15" fill="rgb(244,70,9)"/><text x="55.9276%" y="159.50"></text></g><g><title>predicates_defined_on (369,334 samples, 0.59%)</title><rect x="55.7061%" y="133" width="0.5874%" height="15" fill="rgb(217,125,39)"/><text x="55.9561%" y="143.50"></text></g><g><title>inferred_outlives_of (260,153 samples, 0.41%)</title><rect x="55.8798%" y="117" width="0.4138%" height="15" fill="rgb(235,36,10)"/><text x="56.1298%" y="127.50"></text></g><g><title>inferred_outlives_crate (248,423 samples, 0.40%)</title><rect x="55.8984%" y="101" width="0.3951%" height="15" fill="rgb(251,123,47)"/><text x="56.1484%" y="111.50"></text></g><g><title>type_of (134,132 samples, 0.21%)</title><rect x="56.0802%" y="85" width="0.2133%" height="15" fill="rgb(221,13,13)"/><text x="56.3302%" y="95.50"></text></g><g><title>type_of (72,422 samples, 0.12%)</title><rect x="56.1783%" y="69" width="0.1152%" height="15" fill="rgb(238,131,9)"/><text x="56.4283%" y="79.50"></text></g><g><title>metadata_decode_entry_type_of (69,282 samples, 0.11%)</title><rect x="56.1833%" y="53" width="0.1102%" height="15" fill="rgb(211,50,8)"/><text x="56.4333%" y="63.50"></text></g><g><title>super_predicates_of (112,371 samples, 0.18%)</title><rect x="56.2935%" y="149" width="0.1787%" height="15" fill="rgb(245,182,24)"/><text x="56.5435%" y="159.50"></text></g><g><title>super_predicates_that_define_assoc_type (98,981 samples, 0.16%)</title><rect x="56.3148%" y="133" width="0.1574%" height="15" fill="rgb(242,14,37)"/><text x="56.5648%" y="143.50"></text></g><g><title>type_collecting (1,034,322 samples, 1.65%)</title><rect x="54.9802%" y="181" width="1.6451%" height="15" fill="rgb(246,228,12)"/><text x="55.2302%" y="191.50"></text></g><g><title>collect_mod_item_types (1,023,112 samples, 1.63%)</title><rect x="54.9980%" y="165" width="1.6273%" height="15" fill="rgb(213,55,15)"/><text x="55.2480%" y="175.50"></text></g><g><title>type_of (93,931 samples, 0.15%)</title><rect x="56.4759%" y="149" width="0.1494%" height="15" fill="rgb(209,9,3)"/><text x="56.7259%" y="159.50"></text></g><g><title>evaluate_obligation (209,072 samples, 0.33%)</title><rect x="57.4045%" y="149" width="0.3325%" height="15" fill="rgb(230,59,30)"/><text x="57.6545%" y="159.50"></text></g><g><title>implied_outlives_bounds (82,871 samples, 0.13%)</title><rect x="57.7370%" y="149" width="0.1318%" height="15" fill="rgb(209,121,21)"/><text x="57.9870%" y="159.50"></text></g><g><title>check_impl_item_well_formed (952,780 samples, 1.52%)</title><rect x="56.7417%" y="165" width="1.5154%" height="15" fill="rgb(220,109,13)"/><text x="56.9917%" y="175.50"></text></g><g><title>region_scope_tree (141,671 samples, 0.23%)</title><rect x="58.0317%" y="149" width="0.2253%" height="15" fill="rgb(232,18,1)"/><text x="58.2817%" y="159.50"></text></g><g><title>adt_def (64,831 samples, 0.10%)</title><rect x="59.6427%" y="117" width="0.1031%" height="15" fill="rgb(215,41,42)"/><text x="59.8927%" y="127.50"></text></g><g><title>adt_def (118,892 samples, 0.19%)</title><rect x="59.7660%" y="101" width="0.1891%" height="15" fill="rgb(224,123,36)"/><text x="60.0160%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (116,732 samples, 0.19%)</title><rect x="59.7695%" y="85" width="0.1857%" height="15" fill="rgb(240,125,3)"/><text x="60.0195%" y="95.50"></text></g><g><title>item_attrs (94,421 samples, 0.15%)</title><rect x="59.8050%" y="69" width="0.1502%" height="15" fill="rgb(205,98,50)"/><text x="60.0550%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (92,251 samples, 0.15%)</title><rect x="59.8084%" y="53" width="0.1467%" height="15" fill="rgb(205,185,37)"/><text x="60.0584%" y="63.50"></text></g><g><title>adt_sized_constraint (137,152 samples, 0.22%)</title><rect x="59.7458%" y="117" width="0.2181%" height="15" fill="rgb(238,207,15)"/><text x="59.9958%" y="127.50"></text></g><g><title>adt_sized_constraint (224,673 samples, 0.36%)</title><rect x="59.6171%" y="133" width="0.3573%" height="15" fill="rgb(213,199,42)"/><text x="59.8671%" y="143.50"></text></g><g><title>evaluate_obligation (508,933 samples, 0.81%)</title><rect x="59.2007%" y="149" width="0.8095%" height="15" fill="rgb(235,201,11)"/><text x="59.4507%" y="159.50"></text></g><g><title>param_env (261,594 samples, 0.42%)</title><rect x="60.0973%" y="149" width="0.4161%" height="15" fill="rgb(207,46,11)"/><text x="60.3473%" y="159.50"></text></g><g><title>analysis (37,512,615 samples, 59.67%)</title><rect x="1.0330%" y="213" width="59.6650%" height="15" fill="rgb(241,35,35)"/><text x="1.2830%" y="223.50">analysis</text></g><g><title>type_check_crate (26,907,407 samples, 42.80%)</title><rect x="17.9009%" y="197" width="42.7971%" height="15" fill="rgb(243,32,47)"/><text x="18.1509%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,559,598 samples, 4.07%)</title><rect x="56.6269%" y="181" width="4.0711%" height="15" fill="rgb(247,202,23)"/><text x="56.8769%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (1,534,668 samples, 2.44%)</title><rect x="58.2571%" y="165" width="2.4409%" height="15" fill="rgb(219,102,11)"/><text x="58.5071%" y="175.50">ch..</text></g><g><title>codegen_crate (378,124 samples, 0.60%)</title><rect x="60.7160%" y="213" width="0.6014%" height="15" fill="rgb(243,110,44)"/><text x="60.9660%" y="223.50"></text></g><g><title>AST_validation (70,700 samples, 0.11%)</title><rect x="61.6607%" y="197" width="0.1125%" height="15" fill="rgb(222,74,54)"/><text x="61.9107%" y="207.50"></text></g><g><title>crate_injection (81,251 samples, 0.13%)</title><rect x="61.8243%" y="197" width="0.1292%" height="15" fill="rgb(216,99,12)"/><text x="62.0743%" y="207.50"></text></g><g><title>metadata_load_macro (306,423 samples, 0.49%)</title><rect x="80.7366%" y="165" width="0.4874%" height="15" fill="rgb(226,22,26)"/><text x="80.9866%" y="175.50"></text></g><g><title>macro_expand_crate (14,822,283 samples, 23.58%)</title><rect x="61.9535%" y="197" width="23.5753%" height="15" fill="rgb(217,163,10)"/><text x="62.2035%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (14,797,303 samples, 23.54%)</title><rect x="61.9933%" y="181" width="23.5356%" height="15" fill="rgb(213,25,53)"/><text x="62.2433%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (2,706,580 samples, 4.30%)</title><rect x="81.2239%" y="165" width="4.3049%" height="15" fill="rgb(252,105,26)"/><text x="81.4739%" y="175.50">metad..</text></g><g><title>metadata_register_crate (1,005,340 samples, 1.60%)</title><rect x="83.9298%" y="149" width="1.5990%" height="15" fill="rgb(220,39,43)"/><text x="84.1798%" y="159.50"></text></g><g><title>metadata_register_crate (84,320 samples, 0.13%)</title><rect x="85.3947%" y="133" width="0.1341%" height="15" fill="rgb(229,68,48)"/><text x="85.6447%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (98,911 samples, 0.16%)</title><rect x="85.5372%" y="197" width="0.1573%" height="15" fill="rgb(252,8,32)"/><text x="85.7872%" y="207.50"></text></g><g><title>finalize_imports (289,983 samples, 0.46%)</title><rect x="85.7107%" y="181" width="0.4612%" height="15" fill="rgb(223,20,43)"/><text x="85.9607%" y="191.50"></text></g><g><title>late_resolve_crate (1,111,202 samples, 1.77%)</title><rect x="86.2053%" y="181" width="1.7674%" height="15" fill="rgb(229,81,49)"/><text x="86.4553%" y="191.50"></text></g><g><title>configure_and_expand (16,822,665 samples, 26.76%)</title><rect x="61.3175%" y="213" width="26.7570%" height="15" fill="rgb(236,28,36)"/><text x="61.5675%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,496,297 samples, 2.38%)</title><rect x="85.6945%" y="197" width="2.3799%" height="15" fill="rgb(249,185,26)"/><text x="85.9445%" y="207.50">re..</text></g><g><title>drop_ast (68,061 samples, 0.11%)</title><rect x="88.0744%" y="213" width="0.1083%" height="15" fill="rgb(249,174,33)"/><text x="88.3244%" y="223.50"></text></g><g><title>early_lint_checks (190,002 samples, 0.30%)</title><rect x="88.2051%" y="213" width="0.3022%" height="15" fill="rgb(233,201,37)"/><text x="88.4551%" y="223.50"></text></g><g><title>free_global_ctxt (2,742,291 samples, 4.36%)</title><rect x="88.5073%" y="213" width="4.3617%" height="15" fill="rgb(221,78,26)"/><text x="88.7573%" y="223.50">free_..</text></g><g><title>crate_hash (66,511 samples, 0.11%)</title><rect x="93.2961%" y="197" width="0.1058%" height="15" fill="rgb(250,127,30)"/><text x="93.5461%" y="207.50"></text></g><g><title>generate_crate_metadata (392,194 samples, 0.62%)</title><rect x="92.8690%" y="213" width="0.6238%" height="15" fill="rgb(230,49,44)"/><text x="93.1190%" y="223.50"></text></g><g><title>hir_lowering (1,167,883 samples, 1.86%)</title><rect x="93.4928%" y="213" width="1.8576%" height="15" fill="rgb(229,67,23)"/><text x="93.7428%" y="223.50">h..</text></g><g><title>parse_crate (1,602,078 samples, 2.55%)</title><rect x="95.4314%" y="213" width="2.5482%" height="15" fill="rgb(249,83,47)"/><text x="95.6814%" y="223.50">pa..</text></g><g><title>prepare_outputs (359,214 samples, 0.57%)</title><rect x="97.9947%" y="213" width="0.5713%" height="15" fill="rgb(215,43,3)"/><text x="98.2447%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (456,115 samples, 0.73%)</title><rect x="98.5660%" y="213" width="0.7255%" height="15" fill="rgb(238,154,13)"/><text x="98.8160%" y="223.50"></text></g><g><title>setup_global_ctxt (150,742 samples, 0.24%)</title><rect x="99.3086%" y="213" width="0.2398%" height="15" fill="rgb(219,56,2)"/><text x="99.5586%" y="223.50"></text></g><g><title>all (62,872,054 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (62,872,054 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (283,983 samples, 0.45%)</title><rect x="99.5483%" y="213" width="0.4517%" height="15" fill="rgb(250,79,13)"/><text x="99.7983%" y="223.50"></text></g></svg></svg>