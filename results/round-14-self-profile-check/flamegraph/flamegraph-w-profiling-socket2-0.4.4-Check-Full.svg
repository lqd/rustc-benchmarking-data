<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (312,454 samples, 0.13%)</title><rect x="12.2088%" y="149" width="0.1268%" height="15" fill="rgb(227,0,7)"/><text x="12.4588%" y="159.50"></text></g><g><title>is_late_bound_map (289,805 samples, 0.12%)</title><rect x="12.3356%" y="149" width="0.1176%" height="15" fill="rgb(217,0,24)"/><text x="12.5856%" y="159.50"></text></g><g><title>param_env (457,340 samples, 0.19%)</title><rect x="14.3387%" y="117" width="0.1857%" height="15" fill="rgb(221,193,54)"/><text x="14.5887%" y="127.50"></text></g><g><title>item_attrs (371,724 samples, 0.15%)</title><rect x="15.1032%" y="85" width="0.1509%" height="15" fill="rgb(248,212,6)"/><text x="15.3532%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (358,814 samples, 0.15%)</title><rect x="15.1085%" y="69" width="0.1457%" height="15" fill="rgb(208,68,35)"/><text x="15.3585%" y="79.50"></text></g><g><title>codegen_fn_attrs (605,428 samples, 0.25%)</title><rect x="15.0224%" y="101" width="0.2458%" height="15" fill="rgb(232,128,0)"/><text x="15.2724%" y="111.50"></text></g><g><title>adt_drop_tys (286,205 samples, 0.12%)</title><rect x="18.3624%" y="69" width="0.1162%" height="15" fill="rgb(207,160,47)"/><text x="18.6124%" y="79.50"></text></g><g><title>needs_drop_raw (2,019,454 samples, 0.82%)</title><rect x="18.2779%" y="85" width="0.8198%" height="15" fill="rgb(228,23,34)"/><text x="18.5279%" y="95.50"></text></g><g><title>is_copy_raw (1,525,006 samples, 0.62%)</title><rect x="18.4786%" y="69" width="0.6191%" height="15" fill="rgb(218,30,26)"/><text x="18.7286%" y="79.50"></text></g><g><title>evaluate_obligation (1,257,364 samples, 0.51%)</title><rect x="18.5873%" y="53" width="0.5104%" height="15" fill="rgb(220,122,19)"/><text x="18.8373%" y="63.50"></text></g><g><title>impl_parent (284,544 samples, 0.12%)</title><rect x="19.6093%" y="53" width="0.1155%" height="15" fill="rgb(250,228,42)"/><text x="19.8593%" y="63.50"></text></g><g><title>specialization_graph_of (1,329,666 samples, 0.54%)</title><rect x="19.4380%" y="69" width="0.5398%" height="15" fill="rgb(240,193,28)"/><text x="19.6880%" y="79.50"></text></g><g><title>impl_trait_ref (623,078 samples, 0.25%)</title><rect x="19.7248%" y="53" width="0.2529%" height="15" fill="rgb(216,20,37)"/><text x="19.9748%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (329,284 samples, 0.13%)</title><rect x="19.8441%" y="37" width="0.1337%" height="15" fill="rgb(206,188,39)"/><text x="20.0941%" y="47.50"></text></g><g><title>resolve_instance (2,351,358 samples, 0.95%)</title><rect x="19.0977%" y="85" width="0.9545%" height="15" fill="rgb(217,207,13)"/><text x="19.3477%" y="95.50"></text></g><g><title>thir_body (2,953,958 samples, 1.20%)</title><rect x="20.0932%" y="85" width="1.1991%" height="15" fill="rgb(231,73,38)"/><text x="20.3432%" y="95.50"></text></g><g><title>mir_const (19,546,670 samples, 7.93%)</title><rect x="13.3898%" y="133" width="7.9347%" height="15" fill="rgb(225,20,46)"/><text x="13.6398%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,751,741 samples, 6.80%)</title><rect x="14.5243%" y="117" width="6.8001%" height="15" fill="rgb(210,31,41)"/><text x="14.7743%" y="127.50">unsafety_..</text></g><g><title>mir_built (14,919,350 samples, 6.06%)</title><rect x="15.2682%" y="101" width="6.0563%" height="15" fill="rgb(221,200,47)"/><text x="15.5182%" y="111.50">mir_built</text></g><g><title>mir_const (846,812 samples, 0.34%)</title><rect x="21.5462%" y="117" width="0.3438%" height="15" fill="rgb(226,26,5)"/><text x="21.7962%" y="127.50"></text></g><g><title>unsafety_check_result (663,660 samples, 0.27%)</title><rect x="21.6205%" y="101" width="0.2694%" height="15" fill="rgb(249,33,26)"/><text x="21.8705%" y="111.50"></text></g><g><title>mir_built (566,786 samples, 0.23%)</title><rect x="21.6599%" y="85" width="0.2301%" height="15" fill="rgb(235,183,28)"/><text x="21.9099%" y="95.50"></text></g><g><title>mir_const_qualif (1,416,107 samples, 0.57%)</title><rect x="21.3244%" y="133" width="0.5748%" height="15" fill="rgb(221,5,38)"/><text x="21.5744%" y="143.50"></text></g><g><title>mir_promoted (23,264,563 samples, 9.44%)</title><rect x="12.4567%" y="149" width="9.4439%" height="15" fill="rgb(247,18,42)"/><text x="12.7067%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,108,891 samples, 0.45%)</title><rect x="21.9015%" y="149" width="0.4501%" height="15" fill="rgb(241,131,45)"/><text x="22.1515%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,052,800 samples, 1.24%)</title><rect x="22.4418%" y="149" width="1.2392%" height="15" fill="rgb(249,31,29)"/><text x="22.6918%" y="159.50"></text></g><g><title>evaluate_obligation (769,111 samples, 0.31%)</title><rect x="23.3688%" y="133" width="0.3122%" height="15" fill="rgb(225,111,53)"/><text x="23.6188%" y="143.50"></text></g><g><title>MIR_borrow_checking (57,013,115 samples, 23.14%)</title><rect x="0.5417%" y="181" width="23.1436%" height="15" fill="rgb(238,160,17)"/><text x="0.7917%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (56,540,450 samples, 22.95%)</title><rect x="0.7335%" y="165" width="22.9518%" height="15" fill="rgb(214,148,48)"/><text x="0.9835%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (591,546 samples, 0.24%)</title><rect x="23.6853%" y="181" width="0.2401%" height="15" fill="rgb(232,36,49)"/><text x="23.9353%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (377,205 samples, 0.15%)</title><rect x="23.7723%" y="165" width="0.1531%" height="15" fill="rgb(209,103,24)"/><text x="24.0223%" y="175.50"></text></g><g><title>hir_module_items (466,115 samples, 0.19%)</title><rect x="23.9254%" y="181" width="0.1892%" height="15" fill="rgb(229,88,8)"/><text x="24.1754%" y="191.50"></text></g><g><title>codegen_fn_attrs (383,375 samples, 0.16%)</title><rect x="24.5090%" y="117" width="0.1556%" height="15" fill="rgb(213,181,19)"/><text x="24.7590%" y="127.50"></text></g><g><title>codegen_fn_attrs (794,079 samples, 0.32%)</title><rect x="24.3534%" y="149" width="0.3223%" height="15" fill="rgb(254,191,54)"/><text x="24.6034%" y="159.50"></text></g><g><title>should_inherit_track_caller (643,378 samples, 0.26%)</title><rect x="24.4146%" y="133" width="0.2612%" height="15" fill="rgb(241,83,37)"/><text x="24.6646%" y="143.50"></text></g><g><title>check_mod_attrs (1,359,204 samples, 0.55%)</title><rect x="24.1241%" y="165" width="0.5517%" height="15" fill="rgb(233,36,39)"/><text x="24.3741%" y="175.50"></text></g><g><title>check_mod_const_bodies (322,263 samples, 0.13%)</title><rect x="24.6759%" y="165" width="0.1308%" height="15" fill="rgb(226,3,54)"/><text x="24.9259%" y="175.50"></text></g><g><title>lookup_deprecation_entry (284,822 samples, 0.12%)</title><rect x="25.0180%" y="149" width="0.1156%" height="15" fill="rgb(245,192,40)"/><text x="25.2680%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (796,359 samples, 0.32%)</title><rect x="24.8748%" y="165" width="0.3233%" height="15" fill="rgb(238,167,29)"/><text x="25.1248%" y="175.50"></text></g><g><title>misc_checking_1 (2,798,161 samples, 1.14%)</title><rect x="24.1149%" y="181" width="1.1359%" height="15" fill="rgb(232,182,51)"/><text x="24.3649%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,144,353 samples, 0.46%)</title><rect x="25.2514%" y="165" width="0.4645%" height="15" fill="rgb(231,60,39)"/><text x="25.5014%" y="175.50"></text></g><g><title>check_mod_liveness (920,400 samples, 0.37%)</title><rect x="25.3423%" y="149" width="0.3736%" height="15" fill="rgb(208,69,12)"/><text x="25.5923%" y="159.50"></text></g><g><title>misc_checking_2 (2,970,373 samples, 1.21%)</title><rect x="25.2507%" y="181" width="1.2058%" height="15" fill="rgb(235,93,37)"/><text x="25.5007%" y="191.50"></text></g><g><title>match_checking (1,824,450 samples, 0.74%)</title><rect x="25.7159%" y="165" width="0.7406%" height="15" fill="rgb(213,116,39)"/><text x="25.9659%" y="175.50"></text></g><g><title>check_match (1,717,779 samples, 0.70%)</title><rect x="25.7592%" y="149" width="0.6973%" height="15" fill="rgb(222,207,29)"/><text x="26.0092%" y="159.50"></text></g><g><title>check_private_in_public (526,836 samples, 0.21%)</title><rect x="26.4605%" y="165" width="0.2139%" height="15" fill="rgb(206,96,30)"/><text x="26.7105%" y="175.50"></text></g><g><title>death_checking (1,080,132 samples, 0.44%)</title><rect x="26.6744%" y="165" width="0.4385%" height="15" fill="rgb(218,138,4)"/><text x="26.9244%" y="175.50"></text></g><g><title>eval_to_const_value_raw (347,253 samples, 0.14%)</title><rect x="27.6520%" y="133" width="0.1410%" height="15" fill="rgb(250,191,14)"/><text x="27.9020%" y="143.50"></text></g><g><title>eval_to_const_value_raw (344,743 samples, 0.14%)</title><rect x="27.6531%" y="117" width="0.1399%" height="15" fill="rgb(239,60,40)"/><text x="27.9031%" y="127.50"></text></g><g><title>eval_to_allocation_raw (338,683 samples, 0.14%)</title><rect x="27.6555%" y="101" width="0.1375%" height="15" fill="rgb(206,27,48)"/><text x="27.9055%" y="111.50"></text></g><g><title>param_env (937,050 samples, 0.38%)</title><rect x="27.7930%" y="133" width="0.3804%" height="15" fill="rgb(225,35,8)"/><text x="28.0430%" y="143.50"></text></g><g><title>predicates_of (437,496 samples, 0.18%)</title><rect x="27.9958%" y="117" width="0.1776%" height="15" fill="rgb(250,213,24)"/><text x="28.2458%" y="127.50"></text></g><g><title>predicates_defined_on (348,026 samples, 0.14%)</title><rect x="28.0321%" y="101" width="0.1413%" height="15" fill="rgb(247,123,22)"/><text x="28.2821%" y="111.50"></text></g><g><title>crate_lints (3,712,892 samples, 1.51%)</title><rect x="27.1136%" y="149" width="1.5072%" height="15" fill="rgb(231,138,38)"/><text x="27.3636%" y="159.50"></text></g><g><title>type_of (1,096,099 samples, 0.44%)</title><rect x="28.1758%" y="133" width="0.4449%" height="15" fill="rgb(231,145,46)"/><text x="28.4258%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (865,716 samples, 0.35%)</title><rect x="28.2693%" y="117" width="0.3514%" height="15" fill="rgb(251,118,11)"/><text x="28.5193%" y="127.50"></text></g><g><title>lint_checking (4,737,603 samples, 1.92%)</title><rect x="27.1129%" y="165" width="1.9232%" height="15" fill="rgb(217,147,25)"/><text x="27.3629%" y="175.50">l..</text></g><g><title>module_lints (1,022,931 samples, 0.42%)</title><rect x="28.6208%" y="149" width="0.4152%" height="15" fill="rgb(247,81,37)"/><text x="28.8708%" y="159.50"></text></g><g><title>lint_mod (1,015,901 samples, 0.41%)</title><rect x="28.6236%" y="133" width="0.4124%" height="15" fill="rgb(209,12,38)"/><text x="28.8736%" y="143.50"></text></g><g><title>privacy_access_levels (657,918 samples, 0.27%)</title><rect x="29.0360%" y="165" width="0.2671%" height="15" fill="rgb(227,1,9)"/><text x="29.2860%" y="175.50"></text></g><g><title>privacy_checking_modules (1,854,341 samples, 0.75%)</title><rect x="29.3031%" y="165" width="0.7527%" height="15" fill="rgb(248,47,43)"/><text x="29.5531%" y="175.50"></text></g><g><title>check_mod_privacy (1,850,111 samples, 0.75%)</title><rect x="29.3048%" y="149" width="0.7510%" height="15" fill="rgb(221,10,30)"/><text x="29.5548%" y="159.50"></text></g><g><title>misc_checking_3 (8,893,590 samples, 3.61%)</title><rect x="26.4565%" y="181" width="3.6102%" height="15" fill="rgb(210,229,1)"/><text x="26.7065%" y="191.50">misc..</text></g><g><title>adt_destructor (284,923 samples, 0.12%)</title><rect x="30.1918%" y="133" width="0.1157%" height="15" fill="rgb(222,148,37)"/><text x="30.4418%" y="143.50"></text></g><g><title>coherent_trait (275,453 samples, 0.11%)</title><rect x="30.1957%" y="117" width="0.1118%" height="15" fill="rgb(234,67,33)"/><text x="30.4457%" y="127.50"></text></g><g><title>specialization_graph_of (274,333 samples, 0.11%)</title><rect x="30.1961%" y="101" width="0.1114%" height="15" fill="rgb(247,98,35)"/><text x="30.4461%" y="111.50"></text></g><g><title>impl_parent (2,621,094 samples, 1.06%)</title><rect x="32.2748%" y="117" width="1.0640%" height="15" fill="rgb(247,138,52)"/><text x="32.5248%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,530,381 samples, 0.62%)</title><rect x="32.7175%" y="101" width="0.6212%" height="15" fill="rgb(213,79,30)"/><text x="32.9675%" y="111.50"></text></g><g><title>impl_trait_ref (5,692,378 samples, 2.31%)</title><rect x="33.3388%" y="117" width="2.3107%" height="15" fill="rgb(246,177,23)"/><text x="33.5888%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,425,206 samples, 1.80%)</title><rect x="33.8531%" y="101" width="1.7963%" height="15" fill="rgb(230,62,27)"/><text x="34.1031%" y="111.50">m..</text></g><g><title>trait_impls_of (913,239 samples, 0.37%)</title><rect x="35.6807%" y="117" width="0.3707%" height="15" fill="rgb(216,154,8)"/><text x="35.9307%" y="127.50"></text></g><g><title>implementations_of_trait (247,074 samples, 0.10%)</title><rect x="35.9512%" y="101" width="0.1003%" height="15" fill="rgb(244,35,45)"/><text x="36.2012%" y="111.50"></text></g><g><title>coherent_trait (14,497,412 samples, 5.89%)</title><rect x="30.1701%" y="149" width="5.8850%" height="15" fill="rgb(251,115,12)"/><text x="30.4201%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (14,015,707 samples, 5.69%)</title><rect x="30.3656%" y="133" width="5.6895%" height="15" fill="rgb(240,54,50)"/><text x="30.6156%" y="143.50">special..</text></g><g><title>coherence_checking (14,681,994 samples, 5.96%)</title><rect x="30.1578%" y="165" width="5.9599%" height="15" fill="rgb(233,84,52)"/><text x="30.4078%" y="175.50">coherenc..</text></g><g><title>associated_item (785,510 samples, 0.32%)</title><rect x="48.6646%" y="101" width="0.3189%" height="15" fill="rgb(207,117,47)"/><text x="48.9146%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (637,567 samples, 0.26%)</title><rect x="48.7246%" y="85" width="0.2588%" height="15" fill="rgb(249,43,39)"/><text x="48.9746%" y="95.50"></text></g><g><title>associated_items (1,085,913 samples, 0.44%)</title><rect x="48.5567%" y="117" width="0.4408%" height="15" fill="rgb(209,38,44)"/><text x="48.8067%" y="127.50"></text></g><g><title>dropck_outlives (504,456 samples, 0.20%)</title><rect x="49.0425%" y="117" width="0.2048%" height="15" fill="rgb(236,212,23)"/><text x="49.2925%" y="127.50"></text></g><g><title>adt_sized_constraint (269,733 samples, 0.11%)</title><rect x="50.0976%" y="101" width="0.1095%" height="15" fill="rgb(242,79,21)"/><text x="50.3476%" y="111.50"></text></g><g><title>mir_for_ctfe (890,423 samples, 0.36%)</title><rect x="50.5627%" y="53" width="0.3615%" height="15" fill="rgb(211,96,35)"/><text x="50.8127%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (880,773 samples, 0.36%)</title><rect x="50.5666%" y="37" width="0.3575%" height="15" fill="rgb(253,215,40)"/><text x="50.8166%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,792,259 samples, 0.73%)</title><rect x="50.2088%" y="101" width="0.7275%" height="15" fill="rgb(211,81,21)"/><text x="50.4588%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,758,099 samples, 0.71%)</title><rect x="50.2227%" y="85" width="0.7137%" height="15" fill="rgb(208,190,38)"/><text x="50.4727%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,708,909 samples, 0.69%)</title><rect x="50.2427%" y="69" width="0.6937%" height="15" fill="rgb(235,213,38)"/><text x="50.4927%" y="79.50"></text></g><g><title>predicates_of (248,232 samples, 0.10%)</title><rect x="51.0642%" y="101" width="0.1008%" height="15" fill="rgb(237,122,38)"/><text x="51.3142%" y="111.50"></text></g><g><title>trait_impls_of (353,854 samples, 0.14%)</title><rect x="51.2699%" y="101" width="0.1436%" height="15" fill="rgb(244,218,35)"/><text x="51.5199%" y="111.50"></text></g><g><title>evaluate_obligation (5,174,380 samples, 2.10%)</title><rect x="49.3142%" y="117" width="2.1005%" height="15" fill="rgb(240,68,47)"/><text x="49.5642%" y="127.50">e..</text></g><g><title>item_attrs (342,425 samples, 0.14%)</title><rect x="51.6400%" y="117" width="0.1390%" height="15" fill="rgb(210,16,53)"/><text x="51.8900%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (328,285 samples, 0.13%)</title><rect x="51.6458%" y="101" width="0.1333%" height="15" fill="rgb(235,124,12)"/><text x="51.8958%" y="111.50"></text></g><g><title>method_autoderef_steps (348,860 samples, 0.14%)</title><rect x="51.8269%" y="117" width="0.1416%" height="15" fill="rgb(224,169,11)"/><text x="52.0769%" y="127.50"></text></g><g><title>predicates_of (625,125 samples, 0.25%)</title><rect x="52.0758%" y="117" width="0.2538%" height="15" fill="rgb(250,166,2)"/><text x="52.3258%" y="127.50"></text></g><g><title>predicates_defined_on (420,132 samples, 0.17%)</title><rect x="52.1590%" y="101" width="0.1705%" height="15" fill="rgb(242,216,29)"/><text x="52.4090%" y="111.50"></text></g><g><title>associated_item (343,983 samples, 0.14%)</title><rect x="59.7007%" y="85" width="0.1396%" height="15" fill="rgb(230,116,27)"/><text x="59.9507%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (264,253 samples, 0.11%)</title><rect x="59.7331%" y="69" width="0.1073%" height="15" fill="rgb(228,99,48)"/><text x="59.9831%" y="79.50"></text></g><g><title>associated_items (469,704 samples, 0.19%)</title><rect x="59.6556%" y="101" width="0.1907%" height="15" fill="rgb(253,11,6)"/><text x="59.9056%" y="111.50"></text></g><g><title>evaluate_obligation (793,293 samples, 0.32%)</title><rect x="59.9533%" y="101" width="0.3220%" height="15" fill="rgb(247,143,39)"/><text x="60.2033%" y="111.50"></text></g><g><title>is_copy_raw (483,469 samples, 0.20%)</title><rect x="60.4011%" y="101" width="0.1963%" height="15" fill="rgb(236,97,10)"/><text x="60.6511%" y="111.50"></text></g><g><title>evaluate_obligation (392,207 samples, 0.16%)</title><rect x="60.4381%" y="85" width="0.1592%" height="15" fill="rgb(233,208,19)"/><text x="60.6881%" y="95.50"></text></g><g><title>predicates_of (258,612 samples, 0.10%)</title><rect x="60.7409%" y="101" width="0.1050%" height="15" fill="rgb(216,164,2)"/><text x="60.9909%" y="111.50"></text></g><g><title>typeck (20,975,966 samples, 8.51%)</title><rect x="52.4082%" y="117" width="8.5149%" height="15" fill="rgb(220,129,5)"/><text x="52.6582%" y="127.50">typeck</text></g><g><title>item_bodies_checking (61,149,031 samples, 24.82%)</title><rect x="36.1474%" y="165" width="24.8226%" height="15" fill="rgb(242,17,10)"/><text x="36.3974%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (61,145,901 samples, 24.82%)</title><rect x="36.1487%" y="149" width="24.8213%" height="15" fill="rgb(242,107,0)"/><text x="36.3987%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (60,844,745 samples, 24.70%)</title><rect x="36.2710%" y="133" width="24.6990%" height="15" fill="rgb(251,28,31)"/><text x="36.5210%" y="143.50">typeck</text></g><g><title>item_types_checking (2,048,103 samples, 0.83%)</title><rect x="60.9700%" y="165" width="0.8314%" height="15" fill="rgb(233,223,10)"/><text x="61.2200%" y="175.50"></text></g><g><title>check_mod_item_types (2,041,463 samples, 0.83%)</title><rect x="60.9727%" y="149" width="0.8287%" height="15" fill="rgb(215,21,27)"/><text x="61.2227%" y="159.50"></text></g><g><title>typeck (499,066 samples, 0.20%)</title><rect x="61.5988%" y="133" width="0.2026%" height="15" fill="rgb(232,23,21)"/><text x="61.8488%" y="143.50"></text></g><g><title>late_bound_vars_map (355,655 samples, 0.14%)</title><rect x="62.2973%" y="117" width="0.1444%" height="15" fill="rgb(244,5,23)"/><text x="62.5473%" y="127.50"></text></g><g><title>resolve_lifetimes (303,923 samples, 0.12%)</title><rect x="62.3183%" y="101" width="0.1234%" height="15" fill="rgb(226,81,46)"/><text x="62.5683%" y="111.50"></text></g><g><title>fn_sig (1,003,751 samples, 0.41%)</title><rect x="62.0549%" y="133" width="0.4075%" height="15" fill="rgb(247,70,30)"/><text x="62.3049%" y="143.50"></text></g><g><title>is_late_bound_map (524,017 samples, 0.21%)</title><rect x="62.5728%" y="117" width="0.2127%" height="15" fill="rgb(212,68,19)"/><text x="62.8228%" y="127.50"></text></g><g><title>resolve_lifetimes (509,637 samples, 0.21%)</title><rect x="62.5786%" y="101" width="0.2069%" height="15" fill="rgb(240,187,13)"/><text x="62.8286%" y="111.50"></text></g><g><title>lint_levels (353,464 samples, 0.14%)</title><rect x="62.6420%" y="85" width="0.1435%" height="15" fill="rgb(223,113,26)"/><text x="62.8920%" y="95.50"></text></g><g><title>named_region_map (456,195 samples, 0.19%)</title><rect x="62.7855%" y="117" width="0.1852%" height="15" fill="rgb(206,192,2)"/><text x="63.0355%" y="127.50"></text></g><g><title>resolve_lifetimes (412,444 samples, 0.17%)</title><rect x="62.8032%" y="101" width="0.1674%" height="15" fill="rgb(241,108,4)"/><text x="63.0532%" y="111.50"></text></g><g><title>generics_of (1,284,506 samples, 0.52%)</title><rect x="62.4624%" y="133" width="0.5214%" height="15" fill="rgb(247,173,49)"/><text x="62.7124%" y="143.50"></text></g><g><title>explicit_predicates_of (253,924 samples, 0.10%)</title><rect x="63.1509%" y="101" width="0.1031%" height="15" fill="rgb(224,114,35)"/><text x="63.4009%" y="111.50"></text></g><g><title>predicates_of (934,982 samples, 0.38%)</title><rect x="63.0281%" y="133" width="0.3795%" height="15" fill="rgb(245,159,27)"/><text x="63.2781%" y="143.50"></text></g><g><title>predicates_defined_on (818,661 samples, 0.33%)</title><rect x="63.0754%" y="117" width="0.3323%" height="15" fill="rgb(245,172,44)"/><text x="63.3254%" y="127.50"></text></g><g><title>inferred_outlives_of (378,544 samples, 0.15%)</title><rect x="63.2540%" y="101" width="0.1537%" height="15" fill="rgb(236,23,11)"/><text x="63.5040%" y="111.50"></text></g><g><title>inferred_outlives_crate (339,494 samples, 0.14%)</title><rect x="63.2699%" y="85" width="0.1378%" height="15" fill="rgb(205,117,38)"/><text x="63.5199%" y="95.50"></text></g><g><title>type_collecting (4,116,426 samples, 1.67%)</title><rect x="61.8058%" y="165" width="1.6710%" height="15" fill="rgb(237,72,25)"/><text x="62.0558%" y="175.50"></text></g><g><title>collect_mod_item_types (4,106,356 samples, 1.67%)</title><rect x="61.8099%" y="149" width="1.6669%" height="15" fill="rgb(244,70,9)"/><text x="62.0599%" y="159.50"></text></g><g><title>adt_sized_constraint (381,336 samples, 0.15%)</title><rect x="65.5089%" y="117" width="0.1548%" height="15" fill="rgb(217,125,39)"/><text x="65.7589%" y="127.50"></text></g><g><title>evaluate_obligation (798,600 samples, 0.32%)</title><rect x="65.3520%" y="133" width="0.3242%" height="15" fill="rgb(235,36,10)"/><text x="65.6020%" y="143.50"></text></g><g><title>implied_outlives_bounds (271,004 samples, 0.11%)</title><rect x="65.6778%" y="133" width="0.1100%" height="15" fill="rgb(251,123,47)"/><text x="65.9278%" y="143.50"></text></g><g><title>param_env (618,854 samples, 0.25%)</title><rect x="65.7878%" y="133" width="0.2512%" height="15" fill="rgb(221,13,13)"/><text x="66.0378%" y="143.50"></text></g><g><title>region_scope_tree (684,908 samples, 0.28%)</title><rect x="66.0638%" y="133" width="0.2780%" height="15" fill="rgb(238,131,9)"/><text x="66.3138%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,585,898 samples, 2.67%)</title><rect x="63.6755%" y="149" width="2.6734%" height="15" fill="rgb(211,50,8)"/><text x="63.9255%" y="159.50">ch..</text></g><g><title>evaluate_obligation (591,094 samples, 0.24%)</title><rect x="67.2263%" y="133" width="0.2399%" height="15" fill="rgb(245,182,24)"/><text x="67.4763%" y="143.50"></text></g><g><title>param_env (455,874 samples, 0.19%)</title><rect x="67.5276%" y="133" width="0.1851%" height="15" fill="rgb(242,14,37)"/><text x="67.7776%" y="143.50"></text></g><g><title>region_scope_tree (339,172 samples, 0.14%)</title><rect x="67.7555%" y="133" width="0.1377%" height="15" fill="rgb(246,228,12)"/><text x="68.0055%" y="143.50"></text></g><g><title>analysis (166,771,588 samples, 67.70%)</title><rect x="0.2893%" y="197" width="67.6985%" height="15" fill="rgb(213,55,15)"/><text x="0.5393%" y="207.50">analysis</text></g><g><title>type_check_crate (93,416,471 samples, 37.92%)</title><rect x="30.0667%" y="181" width="37.9211%" height="15" fill="rgb(209,9,3)"/><text x="30.3167%" y="191.50">type_check_crate</text></g><g><title>wf_checking (11,094,473 samples, 4.50%)</title><rect x="63.4842%" y="165" width="4.5036%" height="15" fill="rgb(230,59,30)"/><text x="63.7342%" y="175.50">wf_ch..</text></g><g><title>check_item_well_formed (4,037,319 samples, 1.64%)</title><rect x="66.3489%" y="149" width="1.6389%" height="15" fill="rgb(209,121,21)"/><text x="66.5989%" y="159.50"></text></g><g><title>codegen_crate (368,784 samples, 0.15%)</title><rect x="67.9917%" y="197" width="0.1497%" height="15" fill="rgb(220,109,13)"/><text x="68.2417%" y="207.50"></text></g><g><title>AST_validation (582,007 samples, 0.24%)</title><rect x="68.2149%" y="181" width="0.2363%" height="15" fill="rgb(232,18,1)"/><text x="68.4649%" y="191.50"></text></g><g><title>metadata_register_crate (2,315,766 samples, 0.94%)</title><rect x="88.3869%" y="149" width="0.9401%" height="15" fill="rgb(215,41,42)"/><text x="88.6369%" y="159.50"></text></g><g><title>metadata_register_crate (852,720 samples, 0.35%)</title><rect x="88.9808%" y="133" width="0.3461%" height="15" fill="rgb(224,123,36)"/><text x="89.2308%" y="143.50"></text></g><g><title>macro_expand_crate (52,254,302 samples, 21.21%)</title><rect x="68.5509%" y="181" width="21.2119%" height="15" fill="rgb(240,125,3)"/><text x="68.8009%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (52,236,532 samples, 21.20%)</title><rect x="68.5581%" y="165" width="21.2047%" height="15" fill="rgb(205,98,50)"/><text x="68.8081%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,073,442 samples, 0.44%)</title><rect x="89.3270%" y="149" width="0.4357%" height="15" fill="rgb(205,185,37)"/><text x="89.5770%" y="159.50"></text></g><g><title>late_resolve_crate (3,723,182 samples, 1.51%)</title><rect x="89.9897%" y="165" width="1.5114%" height="15" fill="rgb(238,207,15)"/><text x="90.2397%" y="175.50"></text></g><g><title>configure_and_expand (57,795,543 samples, 23.46%)</title><rect x="68.1415%" y="197" width="23.4613%" height="15" fill="rgb(213,199,42)"/><text x="68.3915%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,365,139 samples, 1.77%)</title><rect x="89.8307%" y="181" width="1.7720%" height="15" fill="rgb(235,201,11)"/><text x="90.0807%" y="191.50">r..</text></g><g><title>drop_ast (829,929 samples, 0.34%)</title><rect x="91.6027%" y="197" width="0.3369%" height="15" fill="rgb(207,46,11)"/><text x="91.8527%" y="207.50"></text></g><g><title>early_lint_checks (943,090 samples, 0.38%)</title><rect x="91.9469%" y="197" width="0.3828%" height="15" fill="rgb(241,35,35)"/><text x="92.1969%" y="207.50"></text></g><g><title>free_global_ctxt (4,705,233 samples, 1.91%)</title><rect x="92.3298%" y="197" width="1.9100%" height="15" fill="rgb(243,32,47)"/><text x="92.5798%" y="207.50">f..</text></g><g><title>mir_for_ctfe (253,482 samples, 0.10%)</title><rect x="95.2056%" y="181" width="0.1029%" height="15" fill="rgb(247,202,23)"/><text x="95.4556%" y="191.50"></text></g><g><title>generate_crate_metadata (2,781,341 samples, 1.13%)</title><rect x="94.2398%" y="197" width="1.1290%" height="15" fill="rgb(219,102,11)"/><text x="94.4898%" y="207.50"></text></g><g><title>hir_lowering (7,128,330 samples, 2.89%)</title><rect x="95.3688%" y="197" width="2.8936%" height="15" fill="rgb(243,110,44)"/><text x="95.6188%" y="207.50">hi..</text></g><g><title>parse_crate (2,290,146 samples, 0.93%)</title><rect x="98.2919%" y="197" width="0.9297%" height="15" fill="rgb(222,74,54)"/><text x="98.5419%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,224,343 samples, 0.50%)</title><rect x="99.3025%" y="197" width="0.4970%" height="15" fill="rgb(216,99,12)"/><text x="99.5525%" y="207.50"></text></g><g><title>all (246,344,595 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (246,344,595 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (396,905 samples, 0.16%)</title><rect x="99.8389%" y="197" width="0.1611%" height="15" fill="rgb(213,25,53)"/><text x="100.0889%" y="207.50"></text></g></svg></svg>