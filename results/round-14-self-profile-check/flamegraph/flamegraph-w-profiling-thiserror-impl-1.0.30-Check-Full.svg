<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,018,720 samples, 0.21%)</title><rect x="14.6323%" y="133" width="0.2141%" height="15" fill="rgb(227,0,7)"/><text x="14.8823%" y="143.50"></text></g><g><title>item_attrs (751,039 samples, 0.16%)</title><rect x="15.2878%" y="101" width="0.1578%" height="15" fill="rgb(217,0,24)"/><text x="15.5378%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (719,969 samples, 0.15%)</title><rect x="15.2943%" y="85" width="0.1513%" height="15" fill="rgb(221,193,54)"/><text x="15.5443%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,072,204 samples, 0.23%)</title><rect x="15.2314%" y="117" width="0.2253%" height="15" fill="rgb(248,212,6)"/><text x="15.4814%" y="127.50"></text></g><g><title>adt_drop_tys (530,036 samples, 0.11%)</title><rect x="18.4960%" y="69" width="0.1114%" height="15" fill="rgb(208,68,35)"/><text x="18.7460%" y="79.50"></text></g><g><title>adt_drop_tys (1,418,474 samples, 0.30%)</title><rect x="18.4677%" y="85" width="0.2981%" height="15" fill="rgb(232,128,0)"/><text x="18.7177%" y="95.50"></text></g><g><title>is_copy_raw (2,108,818 samples, 0.44%)</title><rect x="18.7657%" y="85" width="0.4431%" height="15" fill="rgb(207,160,47)"/><text x="19.0157%" y="95.50"></text></g><g><title>evaluate_obligation (1,731,454 samples, 0.36%)</title><rect x="18.8450%" y="69" width="0.3638%" height="15" fill="rgb(228,23,34)"/><text x="19.0950%" y="79.50"></text></g><g><title>needs_drop_raw (3,992,027 samples, 0.84%)</title><rect x="18.3905%" y="101" width="0.8389%" height="15" fill="rgb(218,30,26)"/><text x="18.6405%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,129,252 samples, 0.24%)</title><rect x="19.3419%" y="85" width="0.2373%" height="15" fill="rgb(220,122,19)"/><text x="19.5919%" y="95.50"></text></g><g><title>specialization_graph_of (2,103,432 samples, 0.44%)</title><rect x="19.6157%" y="85" width="0.4420%" height="15" fill="rgb(250,228,42)"/><text x="19.8657%" y="95.50"></text></g><g><title>impl_trait_ref (863,852 samples, 0.18%)</title><rect x="19.8762%" y="69" width="0.1815%" height="15" fill="rgb(240,193,28)"/><text x="20.1262%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (722,219 samples, 0.15%)</title><rect x="19.9059%" y="53" width="0.1518%" height="15" fill="rgb(216,20,37)"/><text x="20.1559%" y="63.50"></text></g><g><title>resolve_instance (4,155,375 samples, 0.87%)</title><rect x="19.2294%" y="101" width="0.8732%" height="15" fill="rgb(206,188,39)"/><text x="19.4794%" y="111.50"></text></g><g><title>thir_body (5,726,960 samples, 1.20%)</title><rect x="20.1201%" y="101" width="1.2035%" height="15" fill="rgb(217,207,13)"/><text x="20.3701%" y="111.50"></text></g><g><title>mir_const (34,754,695 samples, 7.30%)</title><rect x="14.0307%" y="149" width="7.3033%" height="15" fill="rgb(231,73,38)"/><text x="14.2807%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (30,873,379 samples, 6.49%)</title><rect x="14.8463%" y="133" width="6.4877%" height="15" fill="rgb(225,20,46)"/><text x="15.0963%" y="143.50">unsafety..</text></g><g><title>mir_built (27,968,768 samples, 5.88%)</title><rect x="15.4567%" y="117" width="5.8773%" height="15" fill="rgb(210,31,41)"/><text x="15.7067%" y="127.50">mir_bui..</text></g><g><title>mir_promoted (38,108,901 samples, 8.01%)</title><rect x="13.4129%" y="165" width="8.0082%" height="15" fill="rgb(221,200,47)"/><text x="13.6629%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,427,365 samples, 0.30%)</title><rect x="21.4211%" y="165" width="0.2999%" height="15" fill="rgb(226,26,5)"/><text x="21.6711%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (2,211,469 samples, 0.46%)</title><rect x="21.7211%" y="165" width="0.4647%" height="15" fill="rgb(249,33,26)"/><text x="21.9711%" y="175.50"></text></g><g><title>normalize_projection_ty (1,468,587 samples, 0.31%)</title><rect x="21.8772%" y="149" width="0.3086%" height="15" fill="rgb(235,183,28)"/><text x="22.1272%" y="159.50"></text></g><g><title>type_op_normalize_predicate (1,353,354 samples, 0.28%)</title><rect x="22.1858%" y="165" width="0.2844%" height="15" fill="rgb(221,5,38)"/><text x="22.4358%" y="175.50"></text></g><g><title>normalize_projection_ty (620,178 samples, 0.13%)</title><rect x="22.3399%" y="149" width="0.1303%" height="15" fill="rgb(247,18,42)"/><text x="22.5899%" y="159.50"></text></g><g><title>type_op_prove_predicate (8,921,966 samples, 1.87%)</title><rect x="22.4702%" y="165" width="1.8749%" height="15" fill="rgb(241,131,45)"/><text x="22.7202%" y="175.50">t..</text></g><g><title>evaluate_obligation (817,191 samples, 0.17%)</title><rect x="24.1733%" y="149" width="0.1717%" height="15" fill="rgb(249,31,29)"/><text x="24.4233%" y="159.50"></text></g><g><title>MIR_borrow_checking (113,608,133 samples, 23.87%)</title><rect x="0.4770%" y="197" width="23.8735%" height="15" fill="rgb(225,111,53)"/><text x="0.7270%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (113,366,732 samples, 23.82%)</title><rect x="0.5277%" y="181" width="23.8228%" height="15" fill="rgb(238,160,17)"/><text x="0.7777%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (497,136 samples, 0.10%)</title><rect x="24.3910%" y="197" width="0.1045%" height="15" fill="rgb(214,148,48)"/><text x="24.6410%" y="207.50"></text></g><g><title>codegen_fn_attrs (592,276 samples, 0.12%)</title><rect x="24.6629%" y="165" width="0.1245%" height="15" fill="rgb(232,36,49)"/><text x="24.9129%" y="175.50"></text></g><g><title>check_mod_attrs (1,355,655 samples, 0.28%)</title><rect x="24.5025%" y="181" width="0.2849%" height="15" fill="rgb(209,103,24)"/><text x="24.7525%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (791,691 samples, 0.17%)</title><rect x="24.8902%" y="181" width="0.1664%" height="15" fill="rgb(229,88,8)"/><text x="25.1402%" y="191.50"></text></g><g><title>misc_checking_1 (2,765,951 samples, 0.58%)</title><rect x="24.4957%" y="197" width="0.5812%" height="15" fill="rgb(213,181,19)"/><text x="24.7457%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (2,276,396 samples, 0.48%)</title><rect x="25.0773%" y="181" width="0.4784%" height="15" fill="rgb(254,191,54)"/><text x="25.3273%" y="191.50"></text></g><g><title>check_mod_liveness (1,892,661 samples, 0.40%)</title><rect x="25.1579%" y="165" width="0.3977%" height="15" fill="rgb(241,83,37)"/><text x="25.4079%" y="175.50"></text></g><g><title>misc_checking_2 (4,570,361 samples, 0.96%)</title><rect x="25.0769%" y="197" width="0.9604%" height="15" fill="rgb(233,36,39)"/><text x="25.3269%" y="207.50"></text></g><g><title>match_checking (2,292,255 samples, 0.48%)</title><rect x="25.5556%" y="181" width="0.4817%" height="15" fill="rgb(226,3,54)"/><text x="25.8056%" y="191.50"></text></g><g><title>check_match (2,230,345 samples, 0.47%)</title><rect x="25.5686%" y="165" width="0.4687%" height="15" fill="rgb(245,192,40)"/><text x="25.8186%" y="175.50"></text></g><g><title>check_private_in_public (477,245 samples, 0.10%)</title><rect x="26.0396%" y="181" width="0.1003%" height="15" fill="rgb(238,167,29)"/><text x="26.2896%" y="191.50"></text></g><g><title>death_checking (1,136,793 samples, 0.24%)</title><rect x="26.1398%" y="181" width="0.2389%" height="15" fill="rgb(232,182,51)"/><text x="26.3898%" y="191.50"></text></g><g><title>param_env (794,679 samples, 0.17%)</title><rect x="26.8128%" y="149" width="0.1670%" height="15" fill="rgb(231,60,39)"/><text x="27.0628%" y="159.50"></text></g><g><title>crate_lints (3,107,975 samples, 0.65%)</title><rect x="26.3791%" y="165" width="0.6531%" height="15" fill="rgb(208,69,12)"/><text x="26.6291%" y="175.50"></text></g><g><title>lint_checking (5,771,744 samples, 1.21%)</title><rect x="26.3787%" y="181" width="1.2129%" height="15" fill="rgb(235,93,37)"/><text x="26.6287%" y="191.50"></text></g><g><title>module_lints (2,661,899 samples, 0.56%)</title><rect x="27.0322%" y="165" width="0.5594%" height="15" fill="rgb(213,116,39)"/><text x="27.2822%" y="175.50"></text></g><g><title>lint_mod (2,653,369 samples, 0.56%)</title><rect x="27.0340%" y="149" width="0.5576%" height="15" fill="rgb(222,207,29)"/><text x="27.2840%" y="159.50"></text></g><g><title>privacy_checking_modules (3,462,029 samples, 0.73%)</title><rect x="27.6722%" y="181" width="0.7275%" height="15" fill="rgb(206,96,30)"/><text x="27.9222%" y="191.50"></text></g><g><title>check_mod_privacy (3,455,979 samples, 0.73%)</title><rect x="27.6735%" y="165" width="0.7262%" height="15" fill="rgb(218,138,4)"/><text x="27.9235%" y="175.50"></text></g><g><title>misc_checking_3 (11,258,515 samples, 2.37%)</title><rect x="26.0373%" y="197" width="2.3659%" height="15" fill="rgb(250,191,14)"/><text x="26.2873%" y="207.50">mi..</text></g><g><title>impl_parent (2,898,881 samples, 0.61%)</title><rect x="29.6185%" y="133" width="0.6092%" height="15" fill="rgb(239,60,40)"/><text x="29.8685%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,676,911 samples, 0.35%)</title><rect x="29.8753%" y="117" width="0.3524%" height="15" fill="rgb(206,27,48)"/><text x="30.1253%" y="127.50"></text></g><g><title>impl_trait_ref (5,685,845 samples, 1.19%)</title><rect x="30.2276%" y="133" width="1.1948%" height="15" fill="rgb(225,35,8)"/><text x="30.4776%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,461,111 samples, 0.94%)</title><rect x="30.4850%" y="117" width="0.9375%" height="15" fill="rgb(250,213,24)"/><text x="30.7350%" y="127.50"></text></g><g><title>coherent_trait (15,245,790 samples, 3.20%)</title><rect x="28.4396%" y="165" width="3.2037%" height="15" fill="rgb(247,123,22)"/><text x="28.6896%" y="175.50">coh..</text></g><g><title>specialization_graph_of (14,539,301 samples, 3.06%)</title><rect x="28.5880%" y="149" width="3.0553%" height="15" fill="rgb(231,138,38)"/><text x="28.8380%" y="159.50">spe..</text></g><g><title>trait_impls_of (1,048,863 samples, 0.22%)</title><rect x="31.4229%" y="133" width="0.2204%" height="15" fill="rgb(231,145,46)"/><text x="31.6729%" y="143.50"></text></g><g><title>coherence_checking (15,366,721 samples, 3.23%)</title><rect x="28.4352%" y="181" width="3.2292%" height="15" fill="rgb(251,118,11)"/><text x="28.6852%" y="191.50">coh..</text></g><g><title>associated_item (598,387 samples, 0.13%)</title><rect x="41.0873%" y="117" width="0.1257%" height="15" fill="rgb(217,147,25)"/><text x="41.3373%" y="127.50"></text></g><g><title>associated_items (884,370 samples, 0.19%)</title><rect x="41.0402%" y="133" width="0.1858%" height="15" fill="rgb(247,81,37)"/><text x="41.2902%" y="143.50"></text></g><g><title>adt_dtorck_constraint (671,265 samples, 0.14%)</title><rect x="41.5238%" y="101" width="0.1411%" height="15" fill="rgb(209,12,38)"/><text x="41.7738%" y="111.50"></text></g><g><title>dropck_outlives (1,813,012 samples, 0.38%)</title><rect x="41.3007%" y="133" width="0.3810%" height="15" fill="rgb(227,1,9)"/><text x="41.5507%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,254,642 samples, 0.26%)</title><rect x="41.4181%" y="117" width="0.2636%" height="15" fill="rgb(248,47,43)"/><text x="41.6681%" y="127.50"></text></g><g><title>impl_trait_ref (588,778 samples, 0.12%)</title><rect x="42.7702%" y="117" width="0.1237%" height="15" fill="rgb(221,10,30)"/><text x="43.0202%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (513,316 samples, 0.11%)</title><rect x="42.7861%" y="101" width="0.1079%" height="15" fill="rgb(210,229,1)"/><text x="43.0361%" y="111.50"></text></g><g><title>predicates_of (784,988 samples, 0.16%)</title><rect x="42.8996%" y="117" width="0.1650%" height="15" fill="rgb(222,148,37)"/><text x="43.1496%" y="127.50"></text></g><g><title>predicates_defined_on (557,636 samples, 0.12%)</title><rect x="42.9474%" y="101" width="0.1172%" height="15" fill="rgb(234,67,33)"/><text x="43.1974%" y="111.50"></text></g><g><title>trait_impls_of (571,515 samples, 0.12%)</title><rect x="43.1346%" y="117" width="0.1201%" height="15" fill="rgb(247,98,35)"/><text x="43.3846%" y="127.50"></text></g><g><title>evaluate_obligation (7,496,114 samples, 1.58%)</title><rect x="41.6817%" y="133" width="1.5752%" height="15" fill="rgb(247,138,52)"/><text x="41.9317%" y="143.50"></text></g><g><title>method_autoderef_steps (1,113,351 samples, 0.23%)</title><rect x="43.5836%" y="133" width="0.2340%" height="15" fill="rgb(213,79,30)"/><text x="43.8336%" y="143.50"></text></g><g><title>predicates_of (1,017,461 samples, 0.21%)</title><rect x="43.8367%" y="133" width="0.2138%" height="15" fill="rgb(246,177,23)"/><text x="44.0867%" y="143.50"></text></g><g><title>predicates_defined_on (668,819 samples, 0.14%)</title><rect x="43.9100%" y="117" width="0.1405%" height="15" fill="rgb(230,62,27)"/><text x="44.1600%" y="127.50"></text></g><g><title>adt_dtorck_constraint (529,516 samples, 0.11%)</title><rect x="59.6262%" y="37" width="0.1113%" height="15" fill="rgb(216,154,8)"/><text x="59.8762%" y="47.50"></text></g><g><title>adt_dtorck_constraint (668,318 samples, 0.14%)</title><rect x="59.6028%" y="53" width="0.1404%" height="15" fill="rgb(244,35,45)"/><text x="59.8528%" y="63.50"></text></g><g><title>adt_dtorck_constraint (813,289 samples, 0.17%)</title><rect x="59.5771%" y="69" width="0.1709%" height="15" fill="rgb(251,115,12)"/><text x="59.8271%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,029,730 samples, 0.22%)</title><rect x="59.5396%" y="85" width="0.2164%" height="15" fill="rgb(240,54,50)"/><text x="59.7896%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,398,336 samples, 0.29%)</title><rect x="59.4751%" y="101" width="0.2938%" height="15" fill="rgb(233,84,52)"/><text x="59.7251%" y="111.50"></text></g><g><title>dropck_outlives (2,146,392 samples, 0.45%)</title><rect x="59.3375%" y="117" width="0.4510%" height="15" fill="rgb(207,117,47)"/><text x="59.5875%" y="127.50"></text></g><g><title>adt_sized_constraint (566,296 samples, 0.12%)</title><rect x="60.4764%" y="69" width="0.1190%" height="15" fill="rgb(249,43,39)"/><text x="60.7264%" y="79.50"></text></g><g><title>adt_sized_constraint (610,046 samples, 0.13%)</title><rect x="60.4685%" y="85" width="0.1282%" height="15" fill="rgb(209,38,44)"/><text x="60.7185%" y="95.50"></text></g><g><title>adt_sized_constraint (737,869 samples, 0.16%)</title><rect x="60.4437%" y="101" width="0.1551%" height="15" fill="rgb(236,212,23)"/><text x="60.6937%" y="111.50"></text></g><g><title>evaluate_obligation (5,133,628 samples, 1.08%)</title><rect x="59.7886%" y="117" width="1.0788%" height="15" fill="rgb(242,79,21)"/><text x="60.0386%" y="127.50"></text></g><g><title>generics_of (546,729 samples, 0.11%)</title><rect x="60.9116%" y="117" width="0.1149%" height="15" fill="rgb(211,96,35)"/><text x="61.1616%" y="127.50"></text></g><g><title>is_copy_raw (505,065 samples, 0.11%)</title><rect x="61.0912%" y="117" width="0.1061%" height="15" fill="rgb(253,215,40)"/><text x="61.3412%" y="127.50"></text></g><g><title>evaluate_obligation (508,496 samples, 0.11%)</title><rect x="61.3224%" y="101" width="0.1069%" height="15" fill="rgb(211,81,21)"/><text x="61.5724%" y="111.50"></text></g><g><title>method_autoderef_steps (993,158 samples, 0.21%)</title><rect x="61.2225%" y="117" width="0.2087%" height="15" fill="rgb(208,190,38)"/><text x="61.4725%" y="127.50"></text></g><g><title>predicates_of (533,946 samples, 0.11%)</title><rect x="61.4373%" y="117" width="0.1122%" height="15" fill="rgb(235,213,38)"/><text x="61.6873%" y="127.50"></text></g><g><title>typeck (83,337,058 samples, 17.51%)</title><rect x="44.1368%" y="133" width="17.5124%" height="15" fill="rgb(237,122,38)"/><text x="44.3868%" y="143.50">typeck</text></g><g><title>item_bodies_checking (142,793,039 samples, 30.01%)</title><rect x="31.6733%" y="181" width="30.0064%" height="15" fill="rgb(244,218,35)"/><text x="31.9233%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (142,789,789 samples, 30.01%)</title><rect x="31.6740%" y="165" width="30.0058%" height="15" fill="rgb(240,68,47)"/><text x="31.9240%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (142,661,277 samples, 29.98%)</title><rect x="31.7010%" y="149" width="29.9787%" height="15" fill="rgb(210,16,53)"/><text x="31.9510%" y="159.50">typeck</text></g><g><title>typeck (564,506 samples, 0.12%)</title><rect x="61.8627%" y="149" width="0.1186%" height="15" fill="rgb(235,124,12)"/><text x="62.1127%" y="159.50"></text></g><g><title>item_types_checking (1,446,336 samples, 0.30%)</title><rect x="61.6798%" y="181" width="0.3039%" height="15" fill="rgb(224,169,11)"/><text x="61.9298%" y="191.50"></text></g><g><title>check_mod_item_types (1,440,136 samples, 0.30%)</title><rect x="61.6811%" y="165" width="0.3026%" height="15" fill="rgb(250,166,2)"/><text x="61.9311%" y="175.50"></text></g><g><title>named_region_map (1,085,282 samples, 0.23%)</title><rect x="62.2816%" y="133" width="0.2281%" height="15" fill="rgb(242,216,29)"/><text x="62.5316%" y="143.50"></text></g><g><title>resolve_lifetimes (1,062,342 samples, 0.22%)</title><rect x="62.2865%" y="117" width="0.2232%" height="15" fill="rgb(230,116,27)"/><text x="62.5365%" y="127.50"></text></g><g><title>lint_levels (649,578 samples, 0.14%)</title><rect x="62.3732%" y="101" width="0.1365%" height="15" fill="rgb(228,99,48)"/><text x="62.6232%" y="111.50"></text></g><g><title>generics_of (1,661,279 samples, 0.35%)</title><rect x="62.1640%" y="149" width="0.3491%" height="15" fill="rgb(253,11,6)"/><text x="62.4140%" y="159.50"></text></g><g><title>predicates_of (811,909 samples, 0.17%)</title><rect x="62.5234%" y="149" width="0.1706%" height="15" fill="rgb(247,143,39)"/><text x="62.7734%" y="159.50"></text></g><g><title>predicates_defined_on (745,099 samples, 0.16%)</title><rect x="62.5374%" y="133" width="0.1566%" height="15" fill="rgb(236,97,10)"/><text x="62.7874%" y="143.50"></text></g><g><title>type_collecting (3,497,559 samples, 0.73%)</title><rect x="61.9858%" y="181" width="0.7350%" height="15" fill="rgb(233,208,19)"/><text x="62.2358%" y="191.50"></text></g><g><title>collect_mod_item_types (3,484,249 samples, 0.73%)</title><rect x="61.9886%" y="165" width="0.7322%" height="15" fill="rgb(216,164,2)"/><text x="62.2386%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,575,532 samples, 0.54%)</title><rect x="62.7981%" y="165" width="0.5412%" height="15" fill="rgb(220,129,5)"/><text x="63.0481%" y="175.50"></text></g><g><title>evaluate_obligation (650,587 samples, 0.14%)</title><rect x="63.7630%" y="149" width="0.1367%" height="15" fill="rgb(242,17,10)"/><text x="64.0130%" y="159.50"></text></g><g><title>param_env (504,014 samples, 0.11%)</title><rect x="63.9355%" y="149" width="0.1059%" height="15" fill="rgb(242,107,0)"/><text x="64.1855%" y="159.50"></text></g><g><title>region_scope_tree (1,267,043 samples, 0.27%)</title><rect x="64.0632%" y="149" width="0.2663%" height="15" fill="rgb(251,28,31)"/><text x="64.3132%" y="159.50"></text></g><g><title>analysis (305,071,764 samples, 64.11%)</title><rect x="0.2503%" y="213" width="64.1076%" height="15" fill="rgb(233,223,10)"/><text x="0.5003%" y="223.50">analysis</text></g><g><title>type_check_crate (171,099,474 samples, 35.95%)</title><rect x="28.4032%" y="197" width="35.9547%" height="15" fill="rgb(215,21,27)"/><text x="28.6532%" y="207.50">type_check_crate</text></g><g><title>wf_checking (7,780,997 samples, 1.64%)</title><rect x="62.7228%" y="181" width="1.6351%" height="15" fill="rgb(232,23,21)"/><text x="62.9728%" y="191.50"></text></g><g><title>check_item_well_formed (4,847,021 samples, 1.02%)</title><rect x="63.3394%" y="165" width="1.0185%" height="15" fill="rgb(244,5,23)"/><text x="63.5894%" y="175.50"></text></g><g><title>metadata_load_macro (1,080,720 samples, 0.23%)</title><rect x="92.5768%" y="165" width="0.2271%" height="15" fill="rgb(226,81,46)"/><text x="92.8268%" y="175.50"></text></g><g><title>metadata_register_crate (2,922,922 samples, 0.61%)</title><rect x="92.8039%" y="165" width="0.6142%" height="15" fill="rgb(247,70,30)"/><text x="93.0539%" y="175.50"></text></g><g><title>metadata_register_crate (987,603 samples, 0.21%)</title><rect x="93.2106%" y="149" width="0.2075%" height="15" fill="rgb(212,68,19)"/><text x="93.4606%" y="159.50"></text></g><g><title>macro_expand_crate (137,844,924 samples, 28.97%)</title><rect x="64.6353%" y="197" width="28.9666%" height="15" fill="rgb(240,187,13)"/><text x="64.8853%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (137,821,923 samples, 28.96%)</title><rect x="64.6402%" y="181" width="28.9618%" height="15" fill="rgb(223,113,26)"/><text x="64.8902%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (874,721 samples, 0.18%)</title><rect x="93.4182%" y="165" width="0.1838%" height="15" fill="rgb(206,192,2)"/><text x="93.6682%" y="175.50"></text></g><g><title>maybe_create_a_macro_crate (673,207 samples, 0.14%)</title><rect x="93.6023%" y="197" width="0.1415%" height="15" fill="rgb(241,108,4)"/><text x="93.8523%" y="207.50"></text></g><g><title>finalize_macro_resolutions (1,848,201 samples, 0.39%)</title><rect x="93.8313%" y="181" width="0.3884%" height="15" fill="rgb(247,173,49)"/><text x="94.0813%" y="191.50"></text></g><g><title>late_resolve_crate (6,080,778 samples, 1.28%)</title><rect x="94.2197%" y="181" width="1.2778%" height="15" fill="rgb(224,114,35)"/><text x="94.4697%" y="191.50"></text></g><g><title>configure_and_expand (148,192,699 samples, 31.14%)</title><rect x="64.4519%" y="213" width="31.1411%" height="15" fill="rgb(245,159,27)"/><text x="64.7019%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (8,622,577 samples, 1.81%)</title><rect x="93.7811%" y="197" width="1.8119%" height="15" fill="rgb(245,172,44)"/><text x="94.0311%" y="207.50">r..</text></g><g><title>drop_ast (538,665 samples, 0.11%)</title><rect x="95.5930%" y="213" width="0.1132%" height="15" fill="rgb(236,23,11)"/><text x="95.8430%" y="223.50"></text></g><g><title>early_lint_checks (1,776,379 samples, 0.37%)</title><rect x="95.7100%" y="213" width="0.3733%" height="15" fill="rgb(205,117,38)"/><text x="95.9600%" y="223.50"></text></g><g><title>free_global_ctxt (5,782,024 samples, 1.22%)</title><rect x="96.0833%" y="213" width="1.2150%" height="15" fill="rgb(237,72,25)"/><text x="96.3333%" y="223.50"></text></g><g><title>hir_lowering (9,959,701 samples, 2.09%)</title><rect x="97.3394%" y="213" width="2.0929%" height="15" fill="rgb(244,70,9)"/><text x="97.5894%" y="223.50">h..</text></g><g><title>parse_crate (584,966 samples, 0.12%)</title><rect x="99.4481%" y="213" width="0.1229%" height="15" fill="rgb(217,125,39)"/><text x="99.6981%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,330,835 samples, 0.28%)</title><rect x="99.6205%" y="213" width="0.2797%" height="15" fill="rgb(235,36,10)"/><text x="99.8705%" y="223.50"></text></g><g><title>all (475,874,704 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (475,874,704 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>