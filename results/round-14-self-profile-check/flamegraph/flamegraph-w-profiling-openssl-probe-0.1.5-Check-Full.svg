<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (190,054 samples, 0.33%)</title><rect x="7.2983%" y="213" width="0.3254%" height="15" fill="rgb(227,0,7)"/><text x="7.5483%" y="223.50"></text></g><g><title>item_attrs (155,222 samples, 0.27%)</title><rect x="7.8823%" y="181" width="0.2658%" height="15" fill="rgb(217,0,24)"/><text x="8.1323%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (149,832 samples, 0.26%)</title><rect x="7.8915%" y="165" width="0.2566%" height="15" fill="rgb(221,193,54)"/><text x="8.1415%" y="175.50"></text></g><g><title>codegen_fn_attrs (205,173 samples, 0.35%)</title><rect x="7.8097%" y="197" width="0.3513%" height="15" fill="rgb(248,212,6)"/><text x="8.0597%" y="207.50"></text></g><g><title>adt_drop_tys (60,810 samples, 0.10%)</title><rect x="9.4745%" y="149" width="0.1041%" height="15" fill="rgb(208,68,35)"/><text x="9.7245%" y="159.50"></text></g><g><title>adt_drop_tys (144,771 samples, 0.25%)</title><rect x="9.4526%" y="165" width="0.2479%" height="15" fill="rgb(232,128,0)"/><text x="9.7026%" y="175.50"></text></g><g><title>needs_drop_raw (277,352 samples, 0.47%)</title><rect x="9.3996%" y="181" width="0.4749%" height="15" fill="rgb(207,160,47)"/><text x="9.6496%" y="191.50"></text></g><g><title>is_copy_raw (101,641 samples, 0.17%)</title><rect x="9.7005%" y="165" width="0.1740%" height="15" fill="rgb(228,23,34)"/><text x="9.9505%" y="175.50"></text></g><g><title>evaluate_obligation (74,281 samples, 0.13%)</title><rect x="9.7473%" y="149" width="0.1272%" height="15" fill="rgb(218,30,26)"/><text x="9.9973%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (119,021 samples, 0.20%)</title><rect x="9.9574%" y="165" width="0.2038%" height="15" fill="rgb(220,122,19)"/><text x="10.2074%" y="175.50"></text></g><g><title>specialization_graph_of (143,001 samples, 0.24%)</title><rect x="10.1640%" y="165" width="0.2449%" height="15" fill="rgb(250,228,42)"/><text x="10.4140%" y="175.50"></text></g><g><title>impl_trait_ref (71,550 samples, 0.12%)</title><rect x="10.2864%" y="149" width="0.1225%" height="15" fill="rgb(240,193,28)"/><text x="10.5364%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (61,360 samples, 0.11%)</title><rect x="10.3038%" y="133" width="0.1051%" height="15" fill="rgb(216,20,37)"/><text x="10.5538%" y="143.50"></text></g><g><title>resolve_instance (326,573 samples, 0.56%)</title><rect x="9.8745%" y="181" width="0.5592%" height="15" fill="rgb(206,188,39)"/><text x="10.1245%" y="191.50"></text></g><g><title>thir_body (232,422 samples, 0.40%)</title><rect x="10.4474%" y="181" width="0.3980%" height="15" fill="rgb(217,207,13)"/><text x="10.6974%" y="191.50"></text></g><g><title>mir_const (2,288,936 samples, 3.92%)</title><rect x="6.9486%" y="229" width="3.9194%" height="15" fill="rgb(231,73,38)"/><text x="7.1986%" y="239.50">mir_..</text></g><g><title>unsafety_check_result (1,894,691 samples, 3.24%)</title><rect x="7.6237%" y="213" width="3.2443%" height="15" fill="rgb(225,20,46)"/><text x="7.8737%" y="223.50">uns..</text></g><g><title>mir_built (1,580,897 samples, 2.71%)</title><rect x="8.1610%" y="197" width="2.7070%" height="15" fill="rgb(210,31,41)"/><text x="8.4110%" y="207.50">mi..</text></g><g><title>mir_const_qualif (127,761 samples, 0.22%)</title><rect x="10.8680%" y="229" width="0.2188%" height="15" fill="rgb(221,200,47)"/><text x="11.1180%" y="239.50"></text></g><g><title>mir_const (98,511 samples, 0.17%)</title><rect x="10.9181%" y="213" width="0.1687%" height="15" fill="rgb(226,26,5)"/><text x="11.1681%" y="223.50"></text></g><g><title>unsafety_check_result (69,651 samples, 0.12%)</title><rect x="10.9675%" y="197" width="0.1193%" height="15" fill="rgb(249,33,26)"/><text x="11.2175%" y="207.50"></text></g><g><title>mir_built (59,491 samples, 0.10%)</title><rect x="10.9849%" y="181" width="0.1019%" height="15" fill="rgb(235,183,28)"/><text x="11.2349%" y="191.50"></text></g><g><title>mir_promoted (2,632,518 samples, 4.51%)</title><rect x="6.5794%" y="245" width="4.5077%" height="15" fill="rgb(221,5,38)"/><text x="6.8294%" y="255.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (60,981 samples, 0.10%)</title><rect x="11.0871%" y="245" width="0.1044%" height="15" fill="rgb(247,18,42)"/><text x="11.3371%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (127,873 samples, 0.22%)</title><rect x="11.1915%" y="245" width="0.2190%" height="15" fill="rgb(241,131,45)"/><text x="11.4415%" y="255.50"></text></g><g><title>type_op_normalize_predicate (271,474 samples, 0.46%)</title><rect x="11.4105%" y="245" width="0.4648%" height="15" fill="rgb(249,31,29)"/><text x="11.6605%" y="255.50"></text></g><g><title>normalize_projection_ty (150,522 samples, 0.26%)</title><rect x="11.6176%" y="229" width="0.2577%" height="15" fill="rgb(225,111,53)"/><text x="11.8676%" y="239.50"></text></g><g><title>MIR_borrow_checking (7,162,870 samples, 12.27%)</title><rect x="1.2171%" y="277" width="12.2651%" height="15" fill="rgb(238,160,17)"/><text x="1.4671%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,128,769 samples, 12.21%)</title><rect x="1.2755%" y="261" width="12.2067%" height="15" fill="rgb(214,148,48)"/><text x="1.5255%" y="271.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (931,429 samples, 1.59%)</title><rect x="11.8873%" y="245" width="1.5949%" height="15" fill="rgb(232,36,49)"/><text x="12.1373%" y="255.50"></text></g><g><title>evaluate_obligation (160,272 samples, 0.27%)</title><rect x="13.2077%" y="229" width="0.2744%" height="15" fill="rgb(209,103,24)"/><text x="13.4577%" y="239.50"></text></g><g><title>MIR_effect_checking (125,342 samples, 0.21%)</title><rect x="13.4822%" y="277" width="0.2146%" height="15" fill="rgb(229,88,8)"/><text x="13.7322%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (102,581 samples, 0.18%)</title><rect x="13.5211%" y="261" width="0.1757%" height="15" fill="rgb(213,181,19)"/><text x="13.7711%" y="271.50"></text></g><g><title>hir_module_items (116,802 samples, 0.20%)</title><rect x="13.6968%" y="277" width="0.2000%" height="15" fill="rgb(254,191,54)"/><text x="13.9468%" y="287.50"></text></g><g><title>get_lang_items (68,360 samples, 0.12%)</title><rect x="14.2366%" y="229" width="0.1171%" height="15" fill="rgb(241,83,37)"/><text x="14.4866%" y="239.50"></text></g><g><title>codegen_fn_attrs (190,093 samples, 0.33%)</title><rect x="14.1179%" y="245" width="0.3255%" height="15" fill="rgb(233,36,39)"/><text x="14.3679%" y="255.50"></text></g><g><title>check_mod_attrs (295,453 samples, 0.51%)</title><rect x="13.9378%" y="261" width="0.5059%" height="15" fill="rgb(226,3,54)"/><text x="14.1878%" y="271.50"></text></g><g><title>lookup_deprecation_entry (63,921 samples, 0.11%)</title><rect x="14.7028%" y="245" width="0.1095%" height="15" fill="rgb(245,192,40)"/><text x="14.9528%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (206,323 samples, 0.35%)</title><rect x="14.5697%" y="261" width="0.3533%" height="15" fill="rgb(238,167,29)"/><text x="14.8197%" y="271.50"></text></g><g><title>misc_checking_1 (640,647 samples, 1.10%)</title><rect x="13.8974%" y="277" width="1.0970%" height="15" fill="rgb(232,182,51)"/><text x="14.1474%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (236,813 samples, 0.41%)</title><rect x="14.9989%" y="261" width="0.4055%" height="15" fill="rgb(231,60,39)"/><text x="15.2489%" y="271.50"></text></g><g><title>check_mod_liveness (198,353 samples, 0.34%)</title><rect x="15.0647%" y="245" width="0.3396%" height="15" fill="rgb(208,69,12)"/><text x="15.3147%" y="255.50"></text></g><g><title>type_uninhabited_from (61,480 samples, 0.11%)</title><rect x="15.2991%" y="229" width="0.1053%" height="15" fill="rgb(235,93,37)"/><text x="15.5491%" y="239.50"></text></g><g><title>misc_checking_2 (469,155 samples, 0.80%)</title><rect x="14.9944%" y="277" width="0.8033%" height="15" fill="rgb(213,116,39)"/><text x="15.2444%" y="287.50"></text></g><g><title>match_checking (229,692 samples, 0.39%)</title><rect x="15.4044%" y="261" width="0.3933%" height="15" fill="rgb(222,207,29)"/><text x="15.6544%" y="271.50"></text></g><g><title>check_match (214,202 samples, 0.37%)</title><rect x="15.4309%" y="245" width="0.3668%" height="15" fill="rgb(206,96,30)"/><text x="15.6809%" y="255.50"></text></g><g><title>death_checking (58,851 samples, 0.10%)</title><rect x="15.8756%" y="261" width="0.1008%" height="15" fill="rgb(218,138,4)"/><text x="16.1256%" y="271.50"></text></g><g><title>eval_to_const_value_raw (172,022 samples, 0.29%)</title><rect x="16.7203%" y="229" width="0.2946%" height="15" fill="rgb(250,191,14)"/><text x="16.9703%" y="239.50"></text></g><g><title>eval_to_const_value_raw (169,202 samples, 0.29%)</title><rect x="16.7252%" y="213" width="0.2897%" height="15" fill="rgb(239,60,40)"/><text x="16.9752%" y="223.50"></text></g><g><title>eval_to_allocation_raw (163,112 samples, 0.28%)</title><rect x="16.7356%" y="197" width="0.2793%" height="15" fill="rgb(206,27,48)"/><text x="16.9856%" y="207.50"></text></g><g><title>trait_impls_of (203,262 samples, 0.35%)</title><rect x="17.1026%" y="229" width="0.3480%" height="15" fill="rgb(225,35,8)"/><text x="17.3526%" y="239.50"></text></g><g><title>crate_lints (3,413,308 samples, 5.84%)</title><rect x="15.9790%" y="245" width="5.8447%" height="15" fill="rgb(250,213,24)"/><text x="16.2290%" y="255.50">crate_l..</text></g><g><title>type_of (2,549,768 samples, 4.37%)</title><rect x="17.4576%" y="229" width="4.3660%" height="15" fill="rgb(247,123,22)"/><text x="17.7076%" y="239.50">type_..</text></g><g><title>metadata_decode_entry_type_of (2,300,956 samples, 3.94%)</title><rect x="17.8837%" y="213" width="3.9400%" height="15" fill="rgb(231,138,38)"/><text x="18.1337%" y="223.50">meta..</text></g><g><title>lint_checking (3,504,449 samples, 6.00%)</title><rect x="15.9764%" y="261" width="6.0007%" height="15" fill="rgb(231,145,46)"/><text x="16.2264%" y="271.50">lint_che..</text></g><g><title>module_lints (89,621 samples, 0.15%)</title><rect x="21.8236%" y="245" width="0.1535%" height="15" fill="rgb(251,118,11)"/><text x="22.0736%" y="255.50"></text></g><g><title>lint_mod (86,911 samples, 0.15%)</title><rect x="21.8283%" y="229" width="0.1488%" height="15" fill="rgb(217,147,25)"/><text x="22.0783%" y="239.50"></text></g><g><title>privacy_access_levels (64,221 samples, 0.11%)</title><rect x="21.9771%" y="261" width="0.1100%" height="15" fill="rgb(247,81,37)"/><text x="22.2271%" y="271.50"></text></g><g><title>privacy_checking_modules (148,172 samples, 0.25%)</title><rect x="22.0871%" y="261" width="0.2537%" height="15" fill="rgb(209,12,38)"/><text x="22.3371%" y="271.50"></text></g><g><title>check_mod_privacy (146,952 samples, 0.25%)</title><rect x="22.0891%" y="245" width="0.2516%" height="15" fill="rgb(227,1,9)"/><text x="22.3391%" y="255.50"></text></g><g><title>misc_checking_3 (3,835,393 samples, 6.57%)</title><rect x="15.7977%" y="277" width="6.5674%" height="15" fill="rgb(248,47,43)"/><text x="16.0477%" y="287.50">misc_chec..</text></g><g><title>associated_item (89,131 samples, 0.15%)</title><rect x="25.7518%" y="197" width="0.1526%" height="15" fill="rgb(221,10,30)"/><text x="26.0018%" y="207.50"></text></g><g><title>associated_items (126,131 samples, 0.22%)</title><rect x="25.6982%" y="213" width="0.2160%" height="15" fill="rgb(210,229,1)"/><text x="25.9482%" y="223.50"></text></g><g><title>adt_dtorck_constraint (107,692 samples, 0.18%)</title><rect x="26.0594%" y="181" width="0.1844%" height="15" fill="rgb(222,148,37)"/><text x="26.3094%" y="191.50"></text></g><g><title>dropck_outlives (199,262 samples, 0.34%)</title><rect x="25.9331%" y="213" width="0.3412%" height="15" fill="rgb(234,67,33)"/><text x="26.1831%" y="223.50"></text></g><g><title>adt_dtorck_constraint (159,262 samples, 0.27%)</title><rect x="26.0016%" y="197" width="0.2727%" height="15" fill="rgb(247,98,35)"/><text x="26.2516%" y="207.50"></text></g><g><title>evaluate_obligation (397,404 samples, 0.68%)</title><rect x="26.2743%" y="213" width="0.6805%" height="15" fill="rgb(247,138,52)"/><text x="26.5243%" y="223.50"></text></g><g><title>associated_items (65,181 samples, 0.11%)</title><rect x="35.6812%" y="197" width="0.1116%" height="15" fill="rgb(213,79,30)"/><text x="35.9312%" y="207.50"></text></g><g><title>predicates_of (75,220 samples, 0.13%)</title><rect x="36.9837%" y="181" width="0.1288%" height="15" fill="rgb(246,177,23)"/><text x="37.2337%" y="191.50"></text></g><g><title>specializes (90,240 samples, 0.15%)</title><rect x="37.1125%" y="181" width="0.1545%" height="15" fill="rgb(230,62,27)"/><text x="37.3625%" y="191.50"></text></g><g><title>evaluate_obligation (1,018,302 samples, 1.74%)</title><rect x="35.9313%" y="197" width="1.7437%" height="15" fill="rgb(216,154,8)"/><text x="36.1813%" y="207.50"></text></g><g><title>trait_impls_of (232,753 samples, 0.40%)</title><rect x="37.2764%" y="181" width="0.3985%" height="15" fill="rgb(244,35,45)"/><text x="37.5264%" y="191.50"></text></g><g><title>implementations_of_trait (92,421 samples, 0.16%)</title><rect x="37.5167%" y="165" width="0.1583%" height="15" fill="rgb(251,115,12)"/><text x="37.7667%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (59,800 samples, 0.10%)</title><rect x="37.5725%" y="149" width="0.1024%" height="15" fill="rgb(240,54,50)"/><text x="37.8225%" y="159.50"></text></g><g><title>fn_sig (62,181 samples, 0.11%)</title><rect x="37.6848%" y="197" width="0.1065%" height="15" fill="rgb(233,84,52)"/><text x="37.9348%" y="207.50"></text></g><g><title>is_copy_raw (207,343 samples, 0.36%)</title><rect x="38.0071%" y="197" width="0.3550%" height="15" fill="rgb(207,117,47)"/><text x="38.2571%" y="207.50"></text></g><g><title>evaluate_obligation (175,863 samples, 0.30%)</title><rect x="38.0610%" y="181" width="0.3011%" height="15" fill="rgb(249,43,39)"/><text x="38.3110%" y="191.50"></text></g><g><title>item_attrs (76,222 samples, 0.13%)</title><rect x="38.3622%" y="197" width="0.1305%" height="15" fill="rgb(209,38,44)"/><text x="38.6122%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (72,132 samples, 0.12%)</title><rect x="38.3692%" y="181" width="0.1235%" height="15" fill="rgb(236,212,23)"/><text x="38.6192%" y="191.50"></text></g><g><title>evaluate_obligation (87,501 samples, 0.15%)</title><rect x="38.7785%" y="181" width="0.1498%" height="15" fill="rgb(242,79,21)"/><text x="39.0285%" y="191.50"></text></g><g><title>method_autoderef_steps (243,052 samples, 0.42%)</title><rect x="38.5454%" y="197" width="0.4162%" height="15" fill="rgb(211,96,35)"/><text x="38.7954%" y="207.50"></text></g><g><title>explicit_predicates_of (70,081 samples, 0.12%)</title><rect x="39.1203%" y="165" width="0.1200%" height="15" fill="rgb(253,215,40)"/><text x="39.3703%" y="175.50"></text></g><g><title>predicates_of (162,581 samples, 0.28%)</title><rect x="38.9906%" y="197" width="0.2784%" height="15" fill="rgb(211,81,21)"/><text x="39.2406%" y="207.50"></text></g><g><title>predicates_defined_on (122,001 samples, 0.21%)</title><rect x="39.0600%" y="181" width="0.2089%" height="15" fill="rgb(208,190,38)"/><text x="39.3100%" y="191.50"></text></g><g><title>typeck (7,041,019 samples, 12.06%)</title><rect x="27.3341%" y="213" width="12.0564%" height="15" fill="rgb(235,213,38)"/><text x="27.5841%" y="223.50">typeck</text></g><g><title>item_bodies_checking (9,893,340 samples, 16.94%)</title><rect x="22.4860%" y="261" width="16.9405%" height="15" fill="rgb(237,122,38)"/><text x="22.7360%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,889,410 samples, 16.93%)</title><rect x="22.4927%" y="245" width="16.9338%" height="15" fill="rgb(244,218,35)"/><text x="22.7427%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (9,867,790 samples, 16.90%)</title><rect x="22.5297%" y="229" width="16.8968%" height="15" fill="rgb(240,68,47)"/><text x="22.7797%" y="239.50">typeck</text></g><g><title>impl_parent (135,800 samples, 0.23%)</title><rect x="40.5150%" y="181" width="0.2325%" height="15" fill="rgb(210,16,53)"/><text x="40.7650%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (90,850 samples, 0.16%)</title><rect x="40.5920%" y="165" width="0.1556%" height="15" fill="rgb(235,124,12)"/><text x="40.8420%" y="175.50"></text></g><g><title>impl_trait_ref (563,618 samples, 0.97%)</title><rect x="40.7475%" y="181" width="0.9651%" height="15" fill="rgb(224,169,11)"/><text x="40.9975%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (521,118 samples, 0.89%)</title><rect x="40.8203%" y="165" width="0.8923%" height="15" fill="rgb(250,166,2)"/><text x="41.0703%" y="175.50"></text></g><g><title>adt_destructor (967,081 samples, 1.66%)</title><rect x="40.1486%" y="229" width="1.6559%" height="15" fill="rgb(242,216,29)"/><text x="40.3986%" y="239.50"></text></g><g><title>coherent_trait (961,011 samples, 1.65%)</title><rect x="40.1590%" y="213" width="1.6456%" height="15" fill="rgb(230,116,27)"/><text x="40.4090%" y="223.50"></text></g><g><title>specialization_graph_of (950,940 samples, 1.63%)</title><rect x="40.1762%" y="197" width="1.6283%" height="15" fill="rgb(228,99,48)"/><text x="40.4262%" y="207.50"></text></g><g><title>evaluate_obligation (530,077 samples, 0.91%)</title><rect x="41.8046%" y="229" width="0.9077%" height="15" fill="rgb(253,11,6)"/><text x="42.0546%" y="239.50"></text></g><g><title>explicit_item_bounds (71,841 samples, 0.12%)</title><rect x="42.7122%" y="229" width="0.1230%" height="15" fill="rgb(247,143,39)"/><text x="42.9622%" y="239.50"></text></g><g><title>mir_promoted (64,581 samples, 0.11%)</title><rect x="46.6116%" y="181" width="0.1106%" height="15" fill="rgb(236,97,10)"/><text x="46.8616%" y="191.50"></text></g><g><title>mir_borrowck (451,155 samples, 0.77%)</title><rect x="45.9876%" y="197" width="0.7725%" height="15" fill="rgb(233,208,19)"/><text x="46.2376%" y="207.50"></text></g><g><title>param_env (87,681 samples, 0.15%)</title><rect x="47.2296%" y="165" width="0.1501%" height="15" fill="rgb(216,164,2)"/><text x="47.4796%" y="175.50"></text></g><g><title>item_attrs (96,082 samples, 0.16%)</title><rect x="47.4789%" y="133" width="0.1645%" height="15" fill="rgb(220,129,5)"/><text x="47.7289%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (94,172 samples, 0.16%)</title><rect x="47.4822%" y="117" width="0.1613%" height="15" fill="rgb(242,17,10)"/><text x="47.7322%" y="127.50"></text></g><g><title>codegen_fn_attrs (111,022 samples, 0.19%)</title><rect x="47.4559%" y="149" width="0.1901%" height="15" fill="rgb(242,107,0)"/><text x="47.7059%" y="159.50"></text></g><g><title>is_copy_raw (106,612 samples, 0.18%)</title><rect x="48.0691%" y="101" width="0.1826%" height="15" fill="rgb(251,28,31)"/><text x="48.3191%" y="111.50"></text></g><g><title>evaluate_obligation (91,641 samples, 0.16%)</title><rect x="48.0947%" y="85" width="0.1569%" height="15" fill="rgb(233,223,10)"/><text x="48.3447%" y="95.50"></text></g><g><title>param_env (60,700 samples, 0.10%)</title><rect x="48.2517%" y="101" width="0.1039%" height="15" fill="rgb(215,21,27)"/><text x="48.5017%" y="111.50"></text></g><g><title>adt_drop_tys (183,643 samples, 0.31%)</title><rect x="48.0432%" y="117" width="0.3145%" height="15" fill="rgb(232,23,21)"/><text x="48.2932%" y="127.50"></text></g><g><title>needs_drop_raw (259,983 samples, 0.45%)</title><rect x="48.0125%" y="133" width="0.4452%" height="15" fill="rgb(244,5,23)"/><text x="48.2625%" y="143.50"></text></g><g><title>is_copy_raw (58,420 samples, 0.10%)</title><rect x="48.3576%" y="117" width="0.1000%" height="15" fill="rgb(226,81,46)"/><text x="48.6076%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (203,932 samples, 0.35%)</title><rect x="48.5258%" y="117" width="0.3492%" height="15" fill="rgb(247,70,30)"/><text x="48.7758%" y="127.50"></text></g><g><title>impl_parent (298,592 samples, 0.51%)</title><rect x="49.6935%" y="101" width="0.5113%" height="15" fill="rgb(212,68,19)"/><text x="49.9435%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (181,112 samples, 0.31%)</title><rect x="49.8947%" y="85" width="0.3101%" height="15" fill="rgb(240,187,13)"/><text x="50.1447%" y="95.50"></text></g><g><title>specialization_graph_of (1,786,290 samples, 3.06%)</title><rect x="48.8750%" y="117" width="3.0587%" height="15" fill="rgb(223,113,26)"/><text x="49.1250%" y="127.50">spe..</text></g><g><title>impl_trait_ref (1,009,702 samples, 1.73%)</title><rect x="50.2048%" y="101" width="1.7289%" height="15" fill="rgb(206,192,2)"/><text x="50.4548%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (898,202 samples, 1.54%)</title><rect x="50.3957%" y="85" width="1.5380%" height="15" fill="rgb(241,108,4)"/><text x="50.6457%" y="95.50"></text></g><g><title>resolve_instance (2,042,843 samples, 3.50%)</title><rect x="48.4577%" y="133" width="3.4980%" height="15" fill="rgb(247,173,49)"/><text x="48.7077%" y="143.50">res..</text></g><g><title>thir_body (124,822 samples, 0.21%)</title><rect x="51.9586%" y="133" width="0.2137%" height="15" fill="rgb(224,114,35)"/><text x="52.2086%" y="143.50"></text></g><g><title>adt_def (129,211 samples, 0.22%)</title><rect x="57.1449%" y="101" width="0.2212%" height="15" fill="rgb(245,159,27)"/><text x="57.3949%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (126,231 samples, 0.22%)</title><rect x="57.1500%" y="85" width="0.2161%" height="15" fill="rgb(245,172,44)"/><text x="57.4000%" y="95.50"></text></g><g><title>item_attrs (86,320 samples, 0.15%)</title><rect x="57.2184%" y="69" width="0.1478%" height="15" fill="rgb(236,23,11)"/><text x="57.4684%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (83,180 samples, 0.14%)</title><rect x="57.2238%" y="53" width="0.1424%" height="15" fill="rgb(205,117,38)"/><text x="57.4738%" y="63.50"></text></g><g><title>adt_sized_constraint (79,781 samples, 0.14%)</title><rect x="57.3662%" y="101" width="0.1366%" height="15" fill="rgb(237,72,25)"/><text x="57.6162%" y="111.50"></text></g><g><title>adt_def (78,551 samples, 0.13%)</title><rect x="57.3683%" y="85" width="0.1345%" height="15" fill="rgb(244,70,9)"/><text x="57.6183%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (78,071 samples, 0.13%)</title><rect x="57.3691%" y="69" width="0.1337%" height="15" fill="rgb(217,125,39)"/><text x="57.6191%" y="79.50"></text></g><g><title>item_attrs (73,461 samples, 0.13%)</title><rect x="57.3770%" y="53" width="0.1258%" height="15" fill="rgb(235,36,10)"/><text x="57.6270%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (72,821 samples, 0.12%)</title><rect x="57.3781%" y="37" width="0.1247%" height="15" fill="rgb(251,123,47)"/><text x="57.6281%" y="47.50"></text></g><g><title>adt_sized_constraint (233,422 samples, 0.40%)</title><rect x="57.1163%" y="117" width="0.3997%" height="15" fill="rgb(221,13,13)"/><text x="57.3663%" y="127.50"></text></g><g><title>associated_item (426,304 samples, 0.73%)</title><rect x="57.7204%" y="101" width="0.7300%" height="15" fill="rgb(238,131,9)"/><text x="57.9704%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (347,042 samples, 0.59%)</title><rect x="57.8561%" y="85" width="0.5942%" height="15" fill="rgb(211,50,8)"/><text x="58.1061%" y="95.50"></text></g><g><title>associated_items (568,587 samples, 0.97%)</title><rect x="57.5207%" y="117" width="0.9736%" height="15" fill="rgb(245,182,24)"/><text x="57.7707%" y="127.50"></text></g><g><title>adt_dtorck_constraint (58,411 samples, 0.10%)</title><rect x="58.7617%" y="85" width="0.1000%" height="15" fill="rgb(242,14,37)"/><text x="59.0117%" y="95.50"></text></g><g><title>dropck_outlives (182,392 samples, 0.31%)</title><rect x="58.5688%" y="117" width="0.3123%" height="15" fill="rgb(246,228,12)"/><text x="58.8188%" y="127.50"></text></g><g><title>adt_dtorck_constraint (111,211 samples, 0.19%)</title><rect x="58.6907%" y="101" width="0.1904%" height="15" fill="rgb(213,55,15)"/><text x="58.9407%" y="111.50"></text></g><g><title>evaluate_obligation (1,085,271 samples, 1.86%)</title><rect x="58.8811%" y="117" width="1.8583%" height="15" fill="rgb(209,9,3)"/><text x="59.1311%" y="127.50">e..</text></g><g><title>trait_impls_of (494,457 samples, 0.85%)</title><rect x="59.8928%" y="101" width="0.8467%" height="15" fill="rgb(230,59,30)"/><text x="60.1428%" y="111.50"></text></g><g><title>implementations_of_trait (108,543 samples, 0.19%)</title><rect x="60.5536%" y="85" width="0.1859%" height="15" fill="rgb(209,121,21)"/><text x="60.8036%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (75,392 samples, 0.13%)</title><rect x="60.6103%" y="69" width="0.1291%" height="15" fill="rgb(220,109,13)"/><text x="60.8603%" y="79.50"></text></g><g><title>impl_item_implementor_ids (95,601 samples, 0.16%)</title><rect x="60.8950%" y="117" width="0.1637%" height="15" fill="rgb(232,18,1)"/><text x="61.1450%" y="127.50"></text></g><g><title>associated_items (84,231 samples, 0.14%)</title><rect x="60.9144%" y="101" width="0.1442%" height="15" fill="rgb(215,41,42)"/><text x="61.1644%" y="111.50"></text></g><g><title>implied_outlives_bounds (68,191 samples, 0.12%)</title><rect x="61.0856%" y="117" width="0.1168%" height="15" fill="rgb(224,123,36)"/><text x="61.3356%" y="127.50"></text></g><g><title>is_copy_raw (60,611 samples, 0.10%)</title><rect x="61.2584%" y="117" width="0.1038%" height="15" fill="rgb(240,125,3)"/><text x="61.5084%" y="127.50"></text></g><g><title>method_autoderef_steps (220,535 samples, 0.38%)</title><rect x="61.5238%" y="117" width="0.3776%" height="15" fill="rgb(205,98,50)"/><text x="61.7738%" y="127.50"></text></g><g><title>evaluate_obligation (145,363 samples, 0.25%)</title><rect x="61.6526%" y="101" width="0.2489%" height="15" fill="rgb(205,185,37)"/><text x="61.9026%" y="111.50"></text></g><g><title>explicit_predicates_of (108,410 samples, 0.19%)</title><rect x="62.0463%" y="85" width="0.1856%" height="15" fill="rgb(238,207,15)"/><text x="62.2963%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (98,400 samples, 0.17%)</title><rect x="62.0635%" y="69" width="0.1685%" height="15" fill="rgb(213,199,42)"/><text x="62.3135%" y="79.50"></text></g><g><title>predicates_of (208,811 samples, 0.36%)</title><rect x="61.9125%" y="117" width="0.3575%" height="15" fill="rgb(235,201,11)"/><text x="62.1625%" y="127.50"></text></g><g><title>predicates_defined_on (169,341 samples, 0.29%)</title><rect x="61.9801%" y="101" width="0.2900%" height="15" fill="rgb(207,46,11)"/><text x="62.2301%" y="111.50"></text></g><g><title>mir_built (8,641,077 samples, 14.80%)</title><rect x="47.6460%" y="149" width="14.7962%" height="15" fill="rgb(241,35,35)"/><text x="47.8960%" y="159.50">mir_built</text></g><g><title>typeck (5,987,997 samples, 10.25%)</title><rect x="52.1889%" y="133" width="10.2533%" height="15" fill="rgb(243,32,47)"/><text x="52.4389%" y="143.50">typeck</text></g><g><title>mir_built (96,261 samples, 0.16%)</title><rect x="62.5526%" y="133" width="0.1648%" height="15" fill="rgb(247,202,23)"/><text x="62.8026%" y="143.50"></text></g><g><title>mir_const (9,165,712 samples, 15.69%)</title><rect x="47.0241%" y="181" width="15.6946%" height="15" fill="rgb(219,102,11)"/><text x="47.2741%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (8,957,980 samples, 15.34%)</title><rect x="47.3798%" y="165" width="15.3389%" height="15" fill="rgb(243,110,44)"/><text x="47.6298%" y="175.50">unsafety_check_result</text></g><g><title>unsafety_check_result (161,451 samples, 0.28%)</title><rect x="62.4422%" y="149" width="0.2765%" height="15" fill="rgb(222,74,54)"/><text x="62.6922%" y="159.50"></text></g><g><title>mir_promoted (9,327,404 samples, 15.97%)</title><rect x="46.7601%" y="197" width="15.9714%" height="15" fill="rgb(216,99,12)"/><text x="47.0101%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (85,161 samples, 0.15%)</title><rect x="62.7323%" y="197" width="0.1458%" height="15" fill="rgb(226,22,26)"/><text x="62.9823%" y="207.50"></text></g><g><title>type_op_normalize_predicate (306,194 samples, 0.52%)</title><rect x="62.8781%" y="197" width="0.5243%" height="15" fill="rgb(217,163,10)"/><text x="63.1281%" y="207.50"></text></g><g><title>normalize_projection_ty (164,042 samples, 0.28%)</title><rect x="63.1215%" y="181" width="0.2809%" height="15" fill="rgb(213,25,53)"/><text x="63.3715%" y="191.50"></text></g><g><title>type_of (12,722,993 samples, 21.79%)</title><rect x="42.8352%" y="229" width="21.7858%" height="15" fill="rgb(252,105,26)"/><text x="43.0852%" y="239.50">type_of</text></g><g><title>mir_borrowck (12,691,232 samples, 21.73%)</title><rect x="42.8896%" y="213" width="21.7314%" height="15" fill="rgb(220,39,43)"/><text x="43.1396%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (695,639 samples, 1.19%)</title><rect x="63.4298%" y="197" width="1.1912%" height="15" fill="rgb(229,68,48)"/><text x="63.6798%" y="207.50"></text></g><g><title>item_types_checking (15,072,379 samples, 25.81%)</title><rect x="39.4265%" y="261" width="25.8086%" height="15" fill="rgb(252,8,32)"/><text x="39.6765%" y="271.50">item_types_checking</text></g><g><title>check_mod_item_types (15,067,988 samples, 25.80%)</title><rect x="39.4340%" y="245" width="25.8011%" height="15" fill="rgb(223,20,43)"/><text x="39.6840%" y="255.50">check_mod_item_types</text></g><g><title>typeck (358,654 samples, 0.61%)</title><rect x="64.6210%" y="229" width="0.6141%" height="15" fill="rgb(229,81,49)"/><text x="64.8710%" y="239.50"></text></g><g><title>associated_item (77,562 samples, 0.13%)</title><rect x="65.7682%" y="165" width="0.1328%" height="15" fill="rgb(236,28,36)"/><text x="66.0182%" y="175.50"></text></g><g><title>associated_items (141,882 samples, 0.24%)</title><rect x="65.6634%" y="181" width="0.2429%" height="15" fill="rgb(249,185,26)"/><text x="65.9134%" y="191.50"></text></g><g><title>late_bound_vars_map (253,453 samples, 0.43%)</title><rect x="65.4867%" y="213" width="0.4340%" height="15" fill="rgb(249,174,33)"/><text x="65.7367%" y="223.50"></text></g><g><title>resolve_lifetimes (245,063 samples, 0.42%)</title><rect x="65.5010%" y="197" width="0.4196%" height="15" fill="rgb(233,201,37)"/><text x="65.7510%" y="207.50"></text></g><g><title>fn_sig (318,483 samples, 0.55%)</title><rect x="65.4149%" y="229" width="0.5453%" height="15" fill="rgb(221,78,26)"/><text x="65.6649%" y="239.50"></text></g><g><title>generics_of (66,150 samples, 0.11%)</title><rect x="65.9602%" y="229" width="0.1133%" height="15" fill="rgb(250,127,30)"/><text x="66.2102%" y="239.50"></text></g><g><title>predicates_of (252,674 samples, 0.43%)</title><rect x="66.0735%" y="229" width="0.4327%" height="15" fill="rgb(230,49,44)"/><text x="66.3235%" y="239.50"></text></g><g><title>predicates_defined_on (241,433 samples, 0.41%)</title><rect x="66.0927%" y="213" width="0.4134%" height="15" fill="rgb(229,67,23)"/><text x="66.3427%" y="223.50"></text></g><g><title>inferred_outlives_of (190,592 samples, 0.33%)</title><rect x="66.1798%" y="197" width="0.3264%" height="15" fill="rgb(249,83,47)"/><text x="66.4298%" y="207.50"></text></g><g><title>inferred_outlives_crate (176,892 samples, 0.30%)</title><rect x="66.2032%" y="181" width="0.3029%" height="15" fill="rgb(215,43,3)"/><text x="66.4532%" y="191.50"></text></g><g><title>type_of (93,041 samples, 0.16%)</title><rect x="66.3468%" y="165" width="0.1593%" height="15" fill="rgb(238,154,13)"/><text x="66.5968%" y="175.50"></text></g><g><title>type_collecting (854,610 samples, 1.46%)</title><rect x="65.2379%" y="261" width="1.4634%" height="15" fill="rgb(219,56,2)"/><text x="65.4879%" y="271.50"></text></g><g><title>collect_mod_item_types (845,250 samples, 1.45%)</title><rect x="65.2539%" y="245" width="1.4473%" height="15" fill="rgb(233,0,4)"/><text x="65.5039%" y="255.50"></text></g><g><title>type_of (113,941 samples, 0.20%)</title><rect x="66.5061%" y="229" width="0.1951%" height="15" fill="rgb(235,30,7)"/><text x="66.7561%" y="239.50"></text></g><g><title>adt_def (92,330 samples, 0.16%)</title><rect x="67.8464%" y="197" width="0.1581%" height="15" fill="rgb(250,79,13)"/><text x="68.0964%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (89,180 samples, 0.15%)</title><rect x="67.8518%" y="181" width="0.1527%" height="15" fill="rgb(211,146,34)"/><text x="68.1018%" y="191.50"></text></g><g><title>adt_def (100,311 samples, 0.17%)</title><rect x="68.0934%" y="149" width="0.1718%" height="15" fill="rgb(228,22,38)"/><text x="68.3434%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (99,821 samples, 0.17%)</title><rect x="68.0942%" y="133" width="0.1709%" height="15" fill="rgb(235,168,5)"/><text x="68.3442%" y="143.50"></text></g><g><title>item_attrs (95,671 samples, 0.16%)</title><rect x="68.1013%" y="117" width="0.1638%" height="15" fill="rgb(221,155,16)"/><text x="68.3513%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,131 samples, 0.16%)</title><rect x="68.1022%" y="101" width="0.1629%" height="15" fill="rgb(215,215,53)"/><text x="68.3522%" y="111.50"></text></g><g><title>adt_sized_constraint (102,941 samples, 0.18%)</title><rect x="68.0905%" y="165" width="0.1763%" height="15" fill="rgb(223,4,10)"/><text x="68.3405%" y="175.50"></text></g><g><title>adt_sized_constraint (124,591 samples, 0.21%)</title><rect x="68.0716%" y="181" width="0.2133%" height="15" fill="rgb(234,103,6)"/><text x="68.3216%" y="191.50"></text></g><g><title>adt_sized_constraint (171,582 samples, 0.29%)</title><rect x="68.0045%" y="197" width="0.2938%" height="15" fill="rgb(227,97,0)"/><text x="68.2545%" y="207.50"></text></g><g><title>adt_sized_constraint (286,843 samples, 0.49%)</title><rect x="67.8276%" y="213" width="0.4912%" height="15" fill="rgb(234,150,53)"/><text x="68.0776%" y="223.50"></text></g><g><title>evaluate_obligation (497,904 samples, 0.85%)</title><rect x="67.5834%" y="229" width="0.8526%" height="15" fill="rgb(228,201,54)"/><text x="67.8334%" y="239.50"></text></g><g><title>implied_outlives_bounds (89,550 samples, 0.15%)</title><rect x="68.4360%" y="229" width="0.1533%" height="15" fill="rgb(222,22,37)"/><text x="68.6860%" y="239.50"></text></g><g><title>param_env (212,131 samples, 0.36%)</title><rect x="68.5893%" y="229" width="0.3632%" height="15" fill="rgb(237,53,32)"/><text x="68.8393%" y="239.50"></text></g><g><title>region_scope_tree (108,282 samples, 0.19%)</title><rect x="68.9972%" y="229" width="0.1854%" height="15" fill="rgb(233,25,53)"/><text x="69.2472%" y="239.50"></text></g><g><title>analysis (39,866,487 samples, 68.26%)</title><rect x="0.9433%" y="293" width="68.2639%" height="15" fill="rgb(210,40,34)"/><text x="1.1933%" y="303.50">analysis</text></g><g><title>type_check_crate (27,356,077 samples, 46.84%)</title><rect x="22.3651%" y="277" width="46.8422%" height="15" fill="rgb(241,220,44)"/><text x="22.6151%" y="287.50">type_check_crate</text></g><g><title>wf_checking (1,460,857 samples, 2.50%)</title><rect x="66.7058%" y="261" width="2.5014%" height="15" fill="rgb(235,28,35)"/><text x="66.9558%" y="271.50">wf..</text></g><g><title>check_item_well_formed (1,411,536 samples, 2.42%)</title><rect x="66.7903%" y="245" width="2.4170%" height="15" fill="rgb(210,56,17)"/><text x="67.0403%" y="255.50">ch..</text></g><g><title>codegen_crate (344,473 samples, 0.59%)</title><rect x="69.2229%" y="293" width="0.5898%" height="15" fill="rgb(224,130,29)"/><text x="69.4729%" y="303.50"></text></g><g><title>crate_injection (68,251 samples, 0.12%)</title><rect x="70.2482%" y="277" width="0.1169%" height="15" fill="rgb(235,212,8)"/><text x="70.4982%" y="287.50"></text></g><g><title>macro_expand_crate (10,145,754 samples, 17.37%)</title><rect x="70.3650%" y="277" width="17.3727%" height="15" fill="rgb(223,33,50)"/><text x="70.6150%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (10,126,194 samples, 17.34%)</title><rect x="70.3985%" y="261" width="17.3392%" height="15" fill="rgb(219,149,13)"/><text x="70.6485%" y="271.50">expand_crate</text></g><g><title>metadata_register_crate (2,261,925 samples, 3.87%)</title><rect x="83.8646%" y="245" width="3.8731%" height="15" fill="rgb(250,156,29)"/><text x="84.1146%" y="255.50">meta..</text></g><g><title>metadata_register_crate (837,230 samples, 1.43%)</title><rect x="86.3042%" y="229" width="1.4336%" height="15" fill="rgb(216,193,19)"/><text x="86.5542%" y="239.50"></text></g><g><title>metadata_register_crate (59,170 samples, 0.10%)</title><rect x="87.6364%" y="213" width="0.1013%" height="15" fill="rgb(216,135,14)"/><text x="87.8864%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (91,461 samples, 0.16%)</title><rect x="87.7444%" y="277" width="0.1566%" height="15" fill="rgb(241,47,5)"/><text x="87.9944%" y="287.50"></text></g><g><title>finalize_macro_resolutions (257,993 samples, 0.44%)</title><rect x="87.9538%" y="261" width="0.4418%" height="15" fill="rgb(233,42,35)"/><text x="88.2038%" y="271.50"></text></g><g><title>late_resolve_crate (800,999 samples, 1.37%)</title><rect x="88.3955%" y="261" width="1.3716%" height="15" fill="rgb(231,13,6)"/><text x="88.6455%" y="271.50"></text></g><g><title>configure_and_expand (11,707,311 samples, 20.05%)</title><rect x="69.8127%" y="293" width="20.0466%" height="15" fill="rgb(207,181,40)"/><text x="70.0627%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (1,143,662 samples, 1.96%)</title><rect x="87.9010%" y="277" width="1.9583%" height="15" fill="rgb(254,173,49)"/><text x="88.1510%" y="287.50">r..</text></g><g><title>early_lint_checks (134,902 samples, 0.23%)</title><rect x="89.9643%" y="293" width="0.2310%" height="15" fill="rgb(221,1,38)"/><text x="90.2143%" y="303.50"></text></g><g><title>free_global_ctxt (2,247,446 samples, 3.85%)</title><rect x="90.1953%" y="293" width="3.8483%" height="15" fill="rgb(206,124,46)"/><text x="90.4453%" y="303.50">free..</text></g><g><title>crate_hash (67,381 samples, 0.12%)</title><rect x="94.5019%" y="277" width="0.1154%" height="15" fill="rgb(249,21,11)"/><text x="94.7519%" y="287.50"></text></g><g><title>generate_crate_metadata (384,894 samples, 0.66%)</title><rect x="94.0436%" y="293" width="0.6591%" height="15" fill="rgb(222,201,40)"/><text x="94.2936%" y="303.50"></text></g><g><title>hir_lowering (789,969 samples, 1.35%)</title><rect x="94.7027%" y="293" width="1.3527%" height="15" fill="rgb(235,61,29)"/><text x="94.9527%" y="303.50"></text></g><g><title>parse_crate (1,125,893 samples, 1.93%)</title><rect x="96.1398%" y="293" width="1.9279%" height="15" fill="rgb(219,207,3)"/><text x="96.3898%" y="303.50">p..</text></g><g><title>prepare_outputs (282,143 samples, 0.48%)</title><rect x="98.0806%" y="293" width="0.4831%" height="15" fill="rgb(222,56,46)"/><text x="98.3306%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (421,894 samples, 0.72%)</title><rect x="98.5637%" y="293" width="0.7224%" height="15" fill="rgb(239,76,54)"/><text x="98.8137%" y="303.50"></text></g><g><title>setup_global_ctxt (105,122 samples, 0.18%)</title><rect x="99.3048%" y="293" width="0.1800%" height="15" fill="rgb(231,124,27)"/><text x="99.5548%" y="303.50"></text></g><g><title>all (58,400,504 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(249,195,6)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (58,400,504 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(237,174,47)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (300,874 samples, 0.52%)</title><rect x="99.4848%" y="293" width="0.5152%" height="15" fill="rgb(206,201,31)"/><text x="99.7348%" y="303.50"></text></g></svg></svg>