<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (342,042 samples, 0.51%)</title><rect x="11.4650%" y="149" width="0.5099%" height="15" fill="rgb(227,0,7)"/><text x="11.7150%" y="159.50"></text></g><g><title>param_env (198,273 samples, 0.30%)</title><rect x="13.4396%" y="117" width="0.2956%" height="15" fill="rgb(217,0,24)"/><text x="13.6896%" y="127.50"></text></g><g><title>item_attrs (181,802 samples, 0.27%)</title><rect x="14.2548%" y="85" width="0.2710%" height="15" fill="rgb(221,193,54)"/><text x="14.5048%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (176,231 samples, 0.26%)</title><rect x="14.2631%" y="69" width="0.2627%" height="15" fill="rgb(248,212,6)"/><text x="14.5131%" y="79.50"></text></g><g><title>codegen_fn_attrs (258,202 samples, 0.38%)</title><rect x="14.1571%" y="101" width="0.3849%" height="15" fill="rgb(208,68,35)"/><text x="14.4071%" y="111.50"></text></g><g><title>is_copy_raw (282,983 samples, 0.42%)</title><rect x="16.8771%" y="85" width="0.4218%" height="15" fill="rgb(232,128,0)"/><text x="17.1271%" y="95.50"></text></g><g><title>evaluate_obligation (220,393 samples, 0.33%)</title><rect x="16.9704%" y="69" width="0.3285%" height="15" fill="rgb(207,160,47)"/><text x="17.2204%" y="79.50"></text></g><g><title>is_copy_raw (73,290 samples, 0.11%)</title><rect x="17.3948%" y="53" width="0.1093%" height="15" fill="rgb(228,23,34)"/><text x="17.6448%" y="63.50"></text></g><g><title>adt_drop_tys (107,350 samples, 0.16%)</title><rect x="17.3809%" y="69" width="0.1600%" height="15" fill="rgb(218,30,26)"/><text x="17.6309%" y="79.50"></text></g><g><title>is_copy_raw (360,673 samples, 0.54%)</title><rect x="17.5410%" y="69" width="0.5376%" height="15" fill="rgb(220,122,19)"/><text x="17.7910%" y="79.50"></text></g><g><title>evaluate_obligation (290,423 samples, 0.43%)</title><rect x="17.6457%" y="53" width="0.4329%" height="15" fill="rgb(250,228,42)"/><text x="17.8957%" y="63.50"></text></g><g><title>needs_drop_raw (553,483 samples, 0.83%)</title><rect x="17.3016%" y="85" width="0.8251%" height="15" fill="rgb(240,193,28)"/><text x="17.5516%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (357,694 samples, 0.53%)</title><rect x="18.3481%" y="69" width="0.5332%" height="15" fill="rgb(216,20,37)"/><text x="18.5981%" y="79.50"></text></g><g><title>evaluate_obligation (96,620 samples, 0.14%)</title><rect x="18.7373%" y="53" width="0.1440%" height="15" fill="rgb(206,188,39)"/><text x="18.9873%" y="63.50"></text></g><g><title>impl_parent (76,070 samples, 0.11%)</title><rect x="19.1049%" y="53" width="0.1134%" height="15" fill="rgb(217,207,13)"/><text x="19.3549%" y="63.50"></text></g><g><title>specialization_graph_of (371,334 samples, 0.55%)</title><rect x="18.9303%" y="69" width="0.5535%" height="15" fill="rgb(231,73,38)"/><text x="19.1803%" y="79.50"></text></g><g><title>impl_trait_ref (178,163 samples, 0.27%)</title><rect x="19.2182%" y="53" width="0.2656%" height="15" fill="rgb(225,20,46)"/><text x="19.4682%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (153,063 samples, 0.23%)</title><rect x="19.2557%" y="37" width="0.2282%" height="15" fill="rgb(210,31,41)"/><text x="19.5057%" y="47.50"></text></g><g><title>resolve_instance (971,719 samples, 1.45%)</title><rect x="18.1266%" y="85" width="1.4485%" height="15" fill="rgb(221,200,47)"/><text x="18.3766%" y="95.50"></text></g><g><title>thir_body (565,106 samples, 0.84%)</title><rect x="19.5930%" y="85" width="0.8424%" height="15" fill="rgb(226,26,5)"/><text x="19.8430%" y="95.50"></text></g><g><title>mir_const (5,187,489 samples, 7.73%)</title><rect x="12.7151%" y="133" width="7.7328%" height="15" fill="rgb(249,33,26)"/><text x="12.9651%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (4,503,188 samples, 6.71%)</title><rect x="13.7352%" y="117" width="6.7128%" height="15" fill="rgb(235,183,28)"/><text x="13.9852%" y="127.50">unsafety_..</text></g><g><title>mir_built (3,961,944 samples, 5.91%)</title><rect x="14.5420%" y="101" width="5.9060%" height="15" fill="rgb(221,5,38)"/><text x="14.7920%" y="111.50">mir_built</text></g><g><title>mir_promoted (5,635,412 samples, 8.40%)</title><rect x="12.0813%" y="149" width="8.4005%" height="15" fill="rgb(247,18,42)"/><text x="12.3313%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (150,642 samples, 0.22%)</title><rect x="20.4819%" y="149" width="0.2246%" height="15" fill="rgb(241,131,45)"/><text x="20.7319%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (540,084 samples, 0.81%)</title><rect x="20.7064%" y="149" width="0.8051%" height="15" fill="rgb(249,31,29)"/><text x="20.9564%" y="159.50"></text></g><g><title>normalize_projection_ty (329,763 samples, 0.49%)</title><rect x="21.0199%" y="133" width="0.4916%" height="15" fill="rgb(225,111,53)"/><text x="21.2699%" y="143.50"></text></g><g><title>type_op_normalize_predicate (89,661 samples, 0.13%)</title><rect x="21.5115%" y="149" width="0.1337%" height="15" fill="rgb(238,160,17)"/><text x="21.7615%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,619,658 samples, 2.41%)</title><rect x="21.6452%" y="149" width="2.4144%" height="15" fill="rgb(214,148,48)"/><text x="21.8952%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (15,497,041 samples, 23.10%)</title><rect x="0.9632%" y="181" width="23.1010%" height="15" fill="rgb(232,36,49)"/><text x="1.2132%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,445,651 samples, 23.02%)</title><rect x="1.0398%" y="165" width="23.0244%" height="15" fill="rgb(209,103,24)"/><text x="1.2898%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (117,511 samples, 0.18%)</title><rect x="24.0855%" y="181" width="0.1752%" height="15" fill="rgb(229,88,8)"/><text x="24.3355%" y="191.50"></text></g><g><title>should_inherit_track_caller (113,751 samples, 0.17%)</title><rect x="24.6872%" y="133" width="0.1696%" height="15" fill="rgb(213,181,19)"/><text x="24.9372%" y="143.50"></text></g><g><title>codegen_fn_attrs (266,763 samples, 0.40%)</title><rect x="24.4883%" y="149" width="0.3977%" height="15" fill="rgb(254,191,54)"/><text x="24.7383%" y="159.50"></text></g><g><title>check_mod_attrs (400,895 samples, 0.60%)</title><rect x="24.2885%" y="165" width="0.5976%" height="15" fill="rgb(241,83,37)"/><text x="24.5385%" y="175.50"></text></g><g><title>lookup_deprecation_entry (69,831 samples, 0.10%)</title><rect x="25.1729%" y="149" width="0.1041%" height="15" fill="rgb(233,36,39)"/><text x="25.4229%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (185,732 samples, 0.28%)</title><rect x="25.0488%" y="165" width="0.2769%" height="15" fill="rgb(226,3,54)"/><text x="25.2988%" y="175.50"></text></g><g><title>misc_checking_1 (746,098 samples, 1.11%)</title><rect x="24.2615%" y="181" width="1.1122%" height="15" fill="rgb(245,192,40)"/><text x="24.5115%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (240,743 samples, 0.36%)</title><rect x="25.3762%" y="165" width="0.3589%" height="15" fill="rgb(238,167,29)"/><text x="25.6262%" y="175.50"></text></g><g><title>check_mod_liveness (186,233 samples, 0.28%)</title><rect x="25.4575%" y="149" width="0.2776%" height="15" fill="rgb(232,182,51)"/><text x="25.7075%" y="159.50"></text></g><g><title>misc_checking_2 (512,356 samples, 0.76%)</title><rect x="25.3737%" y="181" width="0.7638%" height="15" fill="rgb(231,60,39)"/><text x="25.6237%" y="191.50"></text></g><g><title>match_checking (269,913 samples, 0.40%)</title><rect x="25.7351%" y="165" width="0.4024%" height="15" fill="rgb(208,69,12)"/><text x="25.9851%" y="175.50"></text></g><g><title>check_match (255,673 samples, 0.38%)</title><rect x="25.7563%" y="149" width="0.3811%" height="15" fill="rgb(235,93,37)"/><text x="26.0063%" y="159.50"></text></g><g><title>check_private_in_public (124,491 samples, 0.19%)</title><rect x="26.1509%" y="165" width="0.1856%" height="15" fill="rgb(213,116,39)"/><text x="26.4009%" y="175.50"></text></g><g><title>death_checking (251,733 samples, 0.38%)</title><rect x="26.3365%" y="165" width="0.3753%" height="15" fill="rgb(222,207,29)"/><text x="26.5865%" y="175.50"></text></g><g><title>item_attrs (75,180 samples, 0.11%)</title><rect x="26.5997%" y="149" width="0.1121%" height="15" fill="rgb(206,96,30)"/><text x="26.8497%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (74,230 samples, 0.11%)</title><rect x="26.6011%" y="133" width="0.1107%" height="15" fill="rgb(218,138,4)"/><text x="26.8511%" y="143.50"></text></g><g><title>param_env (141,553 samples, 0.21%)</title><rect x="27.1337%" y="133" width="0.2110%" height="15" fill="rgb(250,191,14)"/><text x="27.3837%" y="143.50"></text></g><g><title>crate_lints (748,909 samples, 1.12%)</title><rect x="26.7139%" y="149" width="1.1164%" height="15" fill="rgb(239,60,40)"/><text x="26.9639%" y="159.50"></text></g><g><title>type_of (324,443 samples, 0.48%)</title><rect x="27.3467%" y="133" width="0.4836%" height="15" fill="rgb(206,27,48)"/><text x="27.5967%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (243,432 samples, 0.36%)</title><rect x="27.4674%" y="117" width="0.3629%" height="15" fill="rgb(225,35,8)"/><text x="27.7174%" y="127.50"></text></g><g><title>lint_checking (950,471 samples, 1.42%)</title><rect x="26.7118%" y="165" width="1.4168%" height="15" fill="rgb(250,213,24)"/><text x="26.9618%" y="175.50"></text></g><g><title>module_lints (200,092 samples, 0.30%)</title><rect x="27.8303%" y="149" width="0.2983%" height="15" fill="rgb(247,123,22)"/><text x="28.0803%" y="159.50"></text></g><g><title>lint_mod (197,472 samples, 0.29%)</title><rect x="27.8342%" y="133" width="0.2944%" height="15" fill="rgb(231,138,38)"/><text x="28.0842%" y="143.50"></text></g><g><title>privacy_access_levels (213,883 samples, 0.32%)</title><rect x="28.1286%" y="165" width="0.3188%" height="15" fill="rgb(231,145,46)"/><text x="28.3786%" y="175.50"></text></g><g><title>privacy_checking_modules (500,975 samples, 0.75%)</title><rect x="28.4474%" y="165" width="0.7468%" height="15" fill="rgb(251,118,11)"/><text x="28.6974%" y="175.50"></text></g><g><title>check_mod_privacy (499,085 samples, 0.74%)</title><rect x="28.4502%" y="149" width="0.7440%" height="15" fill="rgb(217,147,25)"/><text x="28.7002%" y="159.50"></text></g><g><title>misc_checking_3 (2,066,463 samples, 3.08%)</title><rect x="26.1374%" y="181" width="3.0804%" height="15" fill="rgb(247,81,37)"/><text x="26.3874%" y="191.50">mis..</text></g><g><title>param_env (79,531 samples, 0.12%)</title><rect x="29.3937%" y="133" width="0.1186%" height="15" fill="rgb(209,12,38)"/><text x="29.6437%" y="143.50"></text></g><g><title>impl_parent (517,197 samples, 0.77%)</title><rect x="30.6827%" y="117" width="0.7710%" height="15" fill="rgb(227,1,9)"/><text x="30.9327%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (311,615 samples, 0.46%)</title><rect x="30.9891%" y="101" width="0.4645%" height="15" fill="rgb(248,47,43)"/><text x="31.2391%" y="111.50"></text></g><g><title>impl_trait_ref (1,244,911 samples, 1.86%)</title><rect x="31.4536%" y="117" width="1.8558%" height="15" fill="rgb(221,10,30)"/><text x="31.7036%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,037,789 samples, 1.55%)</title><rect x="31.7624%" y="101" width="1.5470%" height="15" fill="rgb(210,229,1)"/><text x="32.0124%" y="111.50"></text></g><g><title>coherent_trait (2,869,322 samples, 4.28%)</title><rect x="29.2940%" y="149" width="4.2772%" height="15" fill="rgb(222,148,37)"/><text x="29.5440%" y="159.50">coher..</text></g><g><title>specialization_graph_of (2,722,931 samples, 4.06%)</title><rect x="29.5123%" y="133" width="4.0590%" height="15" fill="rgb(234,67,33)"/><text x="29.7623%" y="143.50">spec..</text></g><g><title>trait_impls_of (174,363 samples, 0.26%)</title><rect x="33.3113%" y="117" width="0.2599%" height="15" fill="rgb(247,98,35)"/><text x="33.5613%" y="127.50"></text></g><g><title>coherence_checking (2,926,753 samples, 4.36%)</title><rect x="29.2751%" y="165" width="4.3628%" height="15" fill="rgb(247,138,52)"/><text x="29.5251%" y="175.50">coher..</text></g><g><title>associated_item (521,766 samples, 0.78%)</title><rect x="55.4006%" y="101" width="0.7778%" height="15" fill="rgb(213,79,30)"/><text x="55.6506%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (421,645 samples, 0.63%)</title><rect x="55.5498%" y="85" width="0.6285%" height="15" fill="rgb(246,177,23)"/><text x="55.7998%" y="95.50"></text></g><g><title>associated_items (703,289 samples, 1.05%)</title><rect x="55.1681%" y="117" width="1.0484%" height="15" fill="rgb(230,62,27)"/><text x="55.4181%" y="127.50"></text></g><g><title>dropck_outlives (222,410 samples, 0.33%)</title><rect x="56.2862%" y="117" width="0.3315%" height="15" fill="rgb(216,154,8)"/><text x="56.5362%" y="127.50"></text></g><g><title>fn_abi_of_instance (85,681 samples, 0.13%)</title><rect x="56.8788%" y="69" width="0.1277%" height="15" fill="rgb(244,35,45)"/><text x="57.1288%" y="79.50"></text></g><g><title>eval_to_const_value_raw (323,813 samples, 0.48%)</title><rect x="56.6275%" y="117" width="0.4827%" height="15" fill="rgb(251,115,12)"/><text x="56.8775%" y="127.50"></text></g><g><title>eval_to_const_value_raw (307,643 samples, 0.46%)</title><rect x="56.6516%" y="101" width="0.4586%" height="15" fill="rgb(240,54,50)"/><text x="56.9016%" y="111.50"></text></g><g><title>eval_to_allocation_raw (299,023 samples, 0.45%)</title><rect x="56.6645%" y="85" width="0.4457%" height="15" fill="rgb(233,84,52)"/><text x="56.9145%" y="95.50"></text></g><g><title>predicates_of (129,181 samples, 0.19%)</title><rect x="59.6885%" y="101" width="0.1926%" height="15" fill="rgb(207,117,47)"/><text x="59.9385%" y="111.50"></text></g><g><title>predicates_defined_on (81,631 samples, 0.12%)</title><rect x="59.7594%" y="85" width="0.1217%" height="15" fill="rgb(249,43,39)"/><text x="60.0094%" y="95.50"></text></g><g><title>specializes (201,954 samples, 0.30%)</title><rect x="59.8811%" y="101" width="0.3010%" height="15" fill="rgb(209,38,44)"/><text x="60.1311%" y="111.50"></text></g><g><title>param_env (164,834 samples, 0.25%)</title><rect x="59.9364%" y="85" width="0.2457%" height="15" fill="rgb(236,212,23)"/><text x="60.1864%" y="95.50"></text></g><g><title>def_span (116,773 samples, 0.17%)</title><rect x="60.0081%" y="69" width="0.1741%" height="15" fill="rgb(242,79,21)"/><text x="60.2581%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (113,273 samples, 0.17%)</title><rect x="60.0133%" y="53" width="0.1689%" height="15" fill="rgb(211,96,35)"/><text x="60.2633%" y="63.50"></text></g><g><title>trait_impls_of (240,274 samples, 0.36%)</title><rect x="60.1992%" y="101" width="0.3582%" height="15" fill="rgb(253,215,40)"/><text x="60.4492%" y="111.50"></text></g><g><title>implementations_of_trait (85,831 samples, 0.13%)</title><rect x="60.4294%" y="85" width="0.1279%" height="15" fill="rgb(211,81,21)"/><text x="60.6794%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (69,671 samples, 0.10%)</title><rect x="60.4535%" y="69" width="0.1039%" height="15" fill="rgb(208,190,38)"/><text x="60.7035%" y="79.50"></text></g><g><title>evaluate_obligation (2,320,707 samples, 3.46%)</title><rect x="57.1102%" y="117" width="3.4594%" height="15" fill="rgb(235,213,38)"/><text x="57.3602%" y="127.50">eva..</text></g><g><title>fn_sig (112,822 samples, 0.17%)</title><rect x="60.6034%" y="117" width="0.1682%" height="15" fill="rgb(237,122,38)"/><text x="60.8534%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (100,012 samples, 0.15%)</title><rect x="60.6225%" y="101" width="0.1491%" height="15" fill="rgb(244,218,35)"/><text x="60.8725%" y="111.50"></text></g><g><title>generics_of (97,932 samples, 0.15%)</title><rect x="60.7716%" y="117" width="0.1460%" height="15" fill="rgb(240,68,47)"/><text x="61.0216%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (70,311 samples, 0.10%)</title><rect x="60.8127%" y="101" width="0.1048%" height="15" fill="rgb(210,16,53)"/><text x="61.0627%" y="111.50"></text></g><g><title>item_attrs (127,571 samples, 0.19%)</title><rect x="61.0831%" y="117" width="0.1902%" height="15" fill="rgb(235,124,12)"/><text x="61.3331%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (123,231 samples, 0.18%)</title><rect x="61.0896%" y="101" width="0.1837%" height="15" fill="rgb(224,169,11)"/><text x="61.3396%" y="111.50"></text></g><g><title>evaluate_obligation (156,731 samples, 0.23%)</title><rect x="61.6422%" y="101" width="0.2336%" height="15" fill="rgb(250,166,2)"/><text x="61.8922%" y="111.50"></text></g><g><title>method_autoderef_steps (363,312 samples, 0.54%)</title><rect x="61.3503%" y="117" width="0.5416%" height="15" fill="rgb(242,216,29)"/><text x="61.6003%" y="127.50"></text></g><g><title>object_safety_violations (319,103 samples, 0.48%)</title><rect x="61.8944%" y="117" width="0.4757%" height="15" fill="rgb(230,116,27)"/><text x="62.1444%" y="127.50"></text></g><g><title>explicit_predicates_of (80,800 samples, 0.12%)</title><rect x="62.6558%" y="85" width="0.1204%" height="15" fill="rgb(228,99,48)"/><text x="62.9058%" y="95.50"></text></g><g><title>predicates_of (281,873 samples, 0.42%)</title><rect x="62.4135%" y="117" width="0.4202%" height="15" fill="rgb(253,11,6)"/><text x="62.6635%" y="127.50"></text></g><g><title>predicates_defined_on (180,562 samples, 0.27%)</title><rect x="62.5645%" y="101" width="0.2692%" height="15" fill="rgb(247,143,39)"/><text x="62.8145%" y="111.50"></text></g><g><title>associated_items (105,972 samples, 0.16%)</title><rect x="64.3286%" y="101" width="0.1580%" height="15" fill="rgb(236,97,10)"/><text x="64.5786%" y="111.50"></text></g><g><title>evaluate_obligation (126,991 samples, 0.19%)</title><rect x="64.5609%" y="101" width="0.1893%" height="15" fill="rgb(233,208,19)"/><text x="64.8109%" y="111.50"></text></g><g><title>typeck (1,280,544 samples, 1.91%)</title><rect x="63.0231%" y="117" width="1.9089%" height="15" fill="rgb(216,164,2)"/><text x="63.2731%" y="127.50">t..</text></g><g><title>item_bodies_checking (20,999,663 samples, 31.30%)</title><rect x="33.6618%" y="165" width="31.3036%" height="15" fill="rgb(220,129,5)"/><text x="33.9118%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,997,183 samples, 31.30%)</title><rect x="33.6655%" y="149" width="31.2999%" height="15" fill="rgb(242,17,10)"/><text x="33.9155%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (20,958,623 samples, 31.24%)</title><rect x="33.7230%" y="133" width="31.2424%" height="15" fill="rgb(242,107,0)"/><text x="33.9730%" y="143.50">typeck</text></g><g><title>item_types_checking (381,924 samples, 0.57%)</title><rect x="64.9654%" y="165" width="0.5693%" height="15" fill="rgb(251,28,31)"/><text x="65.2154%" y="175.50"></text></g><g><title>check_mod_item_types (379,254 samples, 0.57%)</title><rect x="64.9694%" y="149" width="0.5653%" height="15" fill="rgb(233,223,10)"/><text x="65.2194%" y="159.50"></text></g><g><title>fn_sig (154,621 samples, 0.23%)</title><rect x="65.7783%" y="133" width="0.2305%" height="15" fill="rgb(215,21,27)"/><text x="66.0283%" y="143.50"></text></g><g><title>generics_of (128,852 samples, 0.19%)</title><rect x="66.0088%" y="133" width="0.1921%" height="15" fill="rgb(232,23,21)"/><text x="66.2588%" y="143.50"></text></g><g><title>late_bound_vars_map (231,953 samples, 0.35%)</title><rect x="66.7625%" y="85" width="0.3458%" height="15" fill="rgb(244,5,23)"/><text x="67.0125%" y="95.50"></text></g><g><title>resolve_lifetimes (224,473 samples, 0.33%)</title><rect x="66.7737%" y="69" width="0.3346%" height="15" fill="rgb(226,81,46)"/><text x="67.0237%" y="79.50"></text></g><g><title>lint_levels (75,620 samples, 0.11%)</title><rect x="66.9956%" y="53" width="0.1127%" height="15" fill="rgb(247,70,30)"/><text x="67.2456%" y="63.50"></text></g><g><title>explicit_predicates_of (567,908 samples, 0.85%)</title><rect x="66.3313%" y="101" width="0.8466%" height="15" fill="rgb(212,68,19)"/><text x="66.5813%" y="111.50"></text></g><g><title>predicates_of (731,730 samples, 1.09%)</title><rect x="66.2282%" y="133" width="1.0908%" height="15" fill="rgb(240,187,13)"/><text x="66.4782%" y="143.50"></text></g><g><title>predicates_defined_on (706,680 samples, 1.05%)</title><rect x="66.2655%" y="117" width="1.0534%" height="15" fill="rgb(223,113,26)"/><text x="66.5155%" y="127.50"></text></g><g><title>inferred_outlives_of (94,671 samples, 0.14%)</title><rect x="67.1778%" y="101" width="0.1411%" height="15" fill="rgb(206,192,2)"/><text x="67.4278%" y="111.50"></text></g><g><title>inferred_outlives_crate (80,151 samples, 0.12%)</title><rect x="67.1995%" y="85" width="0.1195%" height="15" fill="rgb(241,108,4)"/><text x="67.4495%" y="95.50"></text></g><g><title>type_collecting (1,347,215 samples, 2.01%)</title><rect x="65.5373%" y="165" width="2.0083%" height="15" fill="rgb(247,173,49)"/><text x="65.7873%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,339,115 samples, 2.00%)</title><rect x="65.5494%" y="149" width="1.9962%" height="15" fill="rgb(224,114,35)"/><text x="65.7994%" y="159.50">c..</text></g><g><title>type_of (106,662 samples, 0.16%)</title><rect x="67.3866%" y="133" width="0.1590%" height="15" fill="rgb(245,159,27)"/><text x="67.6366%" y="143.50"></text></g><g><title>evaluate_obligation (311,145 samples, 0.46%)</title><rect x="70.8923%" y="133" width="0.4638%" height="15" fill="rgb(245,172,44)"/><text x="71.1423%" y="143.50"></text></g><g><title>implied_outlives_bounds (510,926 samples, 0.76%)</title><rect x="71.3561%" y="133" width="0.7616%" height="15" fill="rgb(236,23,11)"/><text x="71.6061%" y="143.50"></text></g><g><title>param_env (467,656 samples, 0.70%)</title><rect x="72.1177%" y="133" width="0.6971%" height="15" fill="rgb(205,117,38)"/><text x="72.3677%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,653,000 samples, 5.45%)</title><rect x="67.7072%" y="149" width="5.4454%" height="15" fill="rgb(237,72,25)"/><text x="67.9572%" y="159.50">check_i..</text></g><g><title>region_scope_tree (193,000 samples, 0.29%)</title><rect x="72.8649%" y="133" width="0.2877%" height="15" fill="rgb(244,70,9)"/><text x="73.1149%" y="143.50"></text></g><g><title>evaluate_obligation (203,661 samples, 0.30%)</title><rect x="74.7943%" y="133" width="0.3036%" height="15" fill="rgb(217,125,39)"/><text x="75.0443%" y="143.50"></text></g><g><title>implied_outlives_bounds (154,483 samples, 0.23%)</title><rect x="75.1064%" y="133" width="0.2303%" height="15" fill="rgb(235,36,10)"/><text x="75.3564%" y="143.50"></text></g><g><title>param_env (366,245 samples, 0.55%)</title><rect x="75.3537%" y="133" width="0.5460%" height="15" fill="rgb(251,123,47)"/><text x="75.6037%" y="143.50"></text></g><g><title>check_item_well_formed (1,973,623 samples, 2.94%)</title><rect x="73.1526%" y="149" width="2.9420%" height="15" fill="rgb(221,13,13)"/><text x="73.4026%" y="159.50">ch..</text></g><g><title>implied_outlives_bounds (104,101 samples, 0.16%)</title><rect x="76.4222%" y="133" width="0.1552%" height="15" fill="rgb(238,131,9)"/><text x="76.6722%" y="143.50"></text></g><g><title>analysis (50,976,993 samples, 75.99%)</title><rect x="0.6847%" y="197" width="75.9899%" height="15" fill="rgb(211,50,8)"/><text x="0.9347%" y="207.50">analysis</text></g><g><title>type_check_crate (31,835,872 samples, 47.46%)</title><rect x="29.2178%" y="181" width="47.4568%" height="15" fill="rgb(245,182,24)"/><text x="29.4678%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,121,417 samples, 9.13%)</title><rect x="67.5496%" y="165" width="9.1250%" height="15" fill="rgb(242,14,37)"/><text x="67.7996%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (389,114 samples, 0.58%)</title><rect x="76.0946%" y="149" width="0.5800%" height="15" fill="rgb(246,228,12)"/><text x="76.3446%" y="159.50"></text></g><g><title>codegen_crate (342,973 samples, 0.51%)</title><rect x="76.6845%" y="197" width="0.5113%" height="15" fill="rgb(213,55,15)"/><text x="76.9345%" y="207.50"></text></g><g><title>AST_validation (102,231 samples, 0.15%)</title><rect x="77.3849%" y="181" width="0.1524%" height="15" fill="rgb(209,9,3)"/><text x="77.6349%" y="191.50"></text></g><g><title>metadata_load_macro (113,744 samples, 0.17%)</title><rect x="87.3397%" y="149" width="0.1696%" height="15" fill="rgb(230,59,30)"/><text x="87.5897%" y="159.50"></text></g><g><title>metadata_register_crate (169,502 samples, 0.25%)</title><rect x="87.5092%" y="149" width="0.2527%" height="15" fill="rgb(209,121,21)"/><text x="87.7592%" y="159.50"></text></g><g><title>macro_expand_crate (6,787,905 samples, 10.12%)</title><rect x="77.6714%" y="181" width="10.1185%" height="15" fill="rgb(220,109,13)"/><text x="77.9214%" y="191.50">macro_expand_cr..</text></g><g><title>expand_crate (6,772,935 samples, 10.10%)</title><rect x="77.6937%" y="165" width="10.0962%" height="15" fill="rgb(232,18,1)"/><text x="77.9437%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (116,861 samples, 0.17%)</title><rect x="87.7940%" y="181" width="0.1742%" height="15" fill="rgb(215,41,42)"/><text x="88.0440%" y="191.50"></text></g><g><title>late_resolve_crate (1,080,131 samples, 1.61%)</title><rect x="88.1090%" y="165" width="1.6101%" height="15" fill="rgb(224,123,36)"/><text x="88.3590%" y="175.50"></text></g><g><title>configure_and_expand (8,469,674 samples, 12.63%)</title><rect x="77.1957%" y="197" width="12.6255%" height="15" fill="rgb(240,125,3)"/><text x="77.4457%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,243,094 samples, 1.85%)</title><rect x="87.9682%" y="181" width="1.8530%" height="15" fill="rgb(205,98,50)"/><text x="88.2182%" y="191.50">r..</text></g><g><title>drop_ast (103,951 samples, 0.15%)</title><rect x="89.8212%" y="197" width="0.1550%" height="15" fill="rgb(205,185,37)"/><text x="90.0712%" y="207.50"></text></g><g><title>early_lint_checks (207,723 samples, 0.31%)</title><rect x="89.9980%" y="197" width="0.3096%" height="15" fill="rgb(238,207,15)"/><text x="90.2480%" y="207.50"></text></g><g><title>free_global_ctxt (1,777,690 samples, 2.65%)</title><rect x="90.3077%" y="197" width="2.6500%" height="15" fill="rgb(213,199,42)"/><text x="90.5577%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (597,926 samples, 0.89%)</title><rect x="92.9576%" y="197" width="0.8913%" height="15" fill="rgb(235,201,11)"/><text x="93.2076%" y="207.50"></text></g><g><title>hir_lowering (1,545,766 samples, 2.30%)</title><rect x="93.8489%" y="197" width="2.3042%" height="15" fill="rgb(207,46,11)"/><text x="94.0989%" y="207.50">h..</text></g><g><title>parse_crate (1,461,416 samples, 2.18%)</title><rect x="96.2212%" y="197" width="2.1785%" height="15" fill="rgb(241,35,35)"/><text x="96.4712%" y="207.50">p..</text></g><g><title>prepare_outputs (162,831 samples, 0.24%)</title><rect x="98.4076%" y="197" width="0.2427%" height="15" fill="rgb(243,32,47)"/><text x="98.6576%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (507,396 samples, 0.76%)</title><rect x="98.6503%" y="197" width="0.7564%" height="15" fill="rgb(247,202,23)"/><text x="98.9003%" y="207.50"></text></g><g><title>setup_global_ctxt (78,911 samples, 0.12%)</title><rect x="99.4231%" y="197" width="0.1176%" height="15" fill="rgb(219,102,11)"/><text x="99.6731%" y="207.50"></text></g><g><title>all (67,083,881 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (67,083,881 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (308,064 samples, 0.46%)</title><rect x="99.5408%" y="197" width="0.4592%" height="15" fill="rgb(216,99,12)"/><text x="99.7908%" y="207.50"></text></g></svg></svg>