<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (78,470 samples, 0.11%)</title><rect x="5.2811%" y="133" width="0.1135%" height="15" fill="rgb(227,0,7)"/><text x="5.5311%" y="143.50"></text></g><g><title>item_attrs (112,920 samples, 0.16%)</title><rect x="5.6198%" y="101" width="0.1633%" height="15" fill="rgb(217,0,24)"/><text x="5.8698%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (109,090 samples, 0.16%)</title><rect x="5.6254%" y="85" width="0.1578%" height="15" fill="rgb(221,193,54)"/><text x="5.8754%" y="95.50"></text></g><g><title>codegen_fn_attrs (155,100 samples, 0.22%)</title><rect x="5.5716%" y="117" width="0.2243%" height="15" fill="rgb(248,212,6)"/><text x="5.8216%" y="127.50"></text></g><g><title>is_copy_raw (73,851 samples, 0.11%)</title><rect x="6.6993%" y="101" width="0.1068%" height="15" fill="rgb(208,68,35)"/><text x="6.9493%" y="111.50"></text></g><g><title>adt_drop_tys (84,961 samples, 0.12%)</title><rect x="6.8546%" y="69" width="0.1229%" height="15" fill="rgb(232,128,0)"/><text x="7.1046%" y="79.50"></text></g><g><title>adt_drop_tys (132,591 samples, 0.19%)</title><rect x="6.8457%" y="85" width="0.1918%" height="15" fill="rgb(207,160,47)"/><text x="7.0957%" y="95.50"></text></g><g><title>needs_drop_raw (324,363 samples, 0.47%)</title><rect x="6.8150%" y="101" width="0.4692%" height="15" fill="rgb(228,23,34)"/><text x="7.0650%" y="111.50"></text></g><g><title>is_copy_raw (170,522 samples, 0.25%)</title><rect x="7.0375%" y="85" width="0.2466%" height="15" fill="rgb(218,30,26)"/><text x="7.2875%" y="95.50"></text></g><g><title>evaluate_obligation (147,221 samples, 0.21%)</title><rect x="7.0712%" y="69" width="0.2129%" height="15" fill="rgb(220,122,19)"/><text x="7.3212%" y="79.50"></text></g><g><title>resolve_instance (69,232 samples, 0.10%)</title><rect x="7.2842%" y="101" width="0.1001%" height="15" fill="rgb(250,228,42)"/><text x="7.5342%" y="111.50"></text></g><g><title>thir_body (226,204 samples, 0.33%)</title><rect x="7.3916%" y="101" width="0.3272%" height="15" fill="rgb(240,193,28)"/><text x="7.6416%" y="111.50"></text></g><g><title>mir_const (1,915,702 samples, 2.77%)</title><rect x="4.9576%" y="149" width="2.7708%" height="15" fill="rgb(216,20,37)"/><text x="5.2076%" y="159.50">mi..</text></g><g><title>unsafety_check_result (1,613,548 samples, 2.33%)</title><rect x="5.3946%" y="133" width="2.3338%" height="15" fill="rgb(206,188,39)"/><text x="5.6446%" y="143.50">u..</text></g><g><title>mir_built (1,336,086 samples, 1.93%)</title><rect x="5.7960%" y="117" width="1.9325%" height="15" fill="rgb(217,207,13)"/><text x="6.0460%" y="127.50">m..</text></g><g><title>mir_promoted (2,165,475 samples, 3.13%)</title><rect x="4.6104%" y="165" width="3.1321%" height="15" fill="rgb(231,73,38)"/><text x="4.8604%" y="175.50">mir..</text></g><g><title>type_op_normalize_fn_sig (285,564 samples, 0.41%)</title><rect x="7.7756%" y="165" width="0.4130%" height="15" fill="rgb(225,20,46)"/><text x="8.0256%" y="175.50"></text></g><g><title>normalize_projection_ty (165,862 samples, 0.24%)</title><rect x="7.9488%" y="149" width="0.2399%" height="15" fill="rgb(210,31,41)"/><text x="8.1988%" y="159.50"></text></g><g><title>type_op_prove_predicate (309,683 samples, 0.45%)</title><rect x="8.2132%" y="165" width="0.4479%" height="15" fill="rgb(221,200,47)"/><text x="8.4632%" y="175.50"></text></g><g><title>MIR_borrow_checking (5,180,878 samples, 7.49%)</title><rect x="1.1700%" y="197" width="7.4936%" height="15" fill="rgb(226,26,5)"/><text x="1.4200%" y="207.50">MIR_borrow..</text></g><g><title>mir_borrowck (5,165,978 samples, 7.47%)</title><rect x="1.1916%" y="181" width="7.4720%" height="15" fill="rgb(249,33,26)"/><text x="1.4416%" y="191.50">mir_borrow..</text></g><g><title>hir_module_items (128,531 samples, 0.19%)</title><rect x="8.6703%" y="197" width="0.1859%" height="15" fill="rgb(235,183,28)"/><text x="8.9203%" y="207.50"></text></g><g><title>get_lang_items (78,370 samples, 0.11%)</title><rect x="9.3266%" y="117" width="0.1134%" height="15" fill="rgb(221,5,38)"/><text x="9.5766%" y="127.50"></text></g><g><title>item_attrs (70,832 samples, 0.10%)</title><rect x="9.4399%" y="117" width="0.1025%" height="15" fill="rgb(247,18,42)"/><text x="9.6899%" y="127.50"></text></g><g><title>codegen_fn_attrs (246,444 samples, 0.36%)</title><rect x="9.2724%" y="133" width="0.3565%" height="15" fill="rgb(241,131,45)"/><text x="9.5224%" y="143.50"></text></g><g><title>codegen_fn_attrs (372,485 samples, 0.54%)</title><rect x="9.0943%" y="165" width="0.5388%" height="15" fill="rgb(249,31,29)"/><text x="9.3443%" y="175.50"></text></g><g><title>should_inherit_track_caller (331,775 samples, 0.48%)</title><rect x="9.1532%" y="149" width="0.4799%" height="15" fill="rgb(225,111,53)"/><text x="9.4032%" y="159.50"></text></g><g><title>check_mod_attrs (512,856 samples, 0.74%)</title><rect x="8.8920%" y="181" width="0.7418%" height="15" fill="rgb(238,160,17)"/><text x="9.1420%" y="191.50"></text></g><g><title>lint_levels (72,811 samples, 0.11%)</title><rect x="9.9461%" y="165" width="0.1053%" height="15" fill="rgb(214,148,48)"/><text x="10.1961%" y="175.50"></text></g><g><title>lookup_deprecation_entry (90,971 samples, 0.13%)</title><rect x="10.0514%" y="165" width="0.1316%" height="15" fill="rgb(232,36,49)"/><text x="10.3014%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (376,654 samples, 0.54%)</title><rect x="9.7619%" y="181" width="0.5448%" height="15" fill="rgb(209,103,24)"/><text x="10.0119%" y="191.50"></text></g><g><title>misc_checking_1 (1,037,532 samples, 1.50%)</title><rect x="8.8568%" y="197" width="1.5007%" height="15" fill="rgb(229,88,8)"/><text x="9.1068%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (128,931 samples, 0.19%)</title><rect x="10.3597%" y="181" width="0.1865%" height="15" fill="rgb(213,181,19)"/><text x="10.6097%" y="191.50"></text></g><g><title>check_mod_liveness (100,251 samples, 0.15%)</title><rect x="10.4012%" y="165" width="0.1450%" height="15" fill="rgb(254,191,54)"/><text x="10.6512%" y="175.50"></text></g><g><title>misc_checking_2 (354,264 samples, 0.51%)</title><rect x="10.3574%" y="197" width="0.5124%" height="15" fill="rgb(241,83,37)"/><text x="10.6074%" y="207.50"></text></g><g><title>match_checking (223,783 samples, 0.32%)</title><rect x="10.5462%" y="181" width="0.3237%" height="15" fill="rgb(233,36,39)"/><text x="10.7962%" y="191.50"></text></g><g><title>check_match (216,813 samples, 0.31%)</title><rect x="10.5563%" y="165" width="0.3136%" height="15" fill="rgb(226,3,54)"/><text x="10.8063%" y="175.50"></text></g><g><title>death_checking (186,512 samples, 0.27%)</title><rect x="10.9544%" y="181" width="0.2698%" height="15" fill="rgb(245,192,40)"/><text x="11.2044%" y="191.50"></text></g><g><title>item_attrs (103,822 samples, 0.15%)</title><rect x="11.0740%" y="165" width="0.1502%" height="15" fill="rgb(238,167,29)"/><text x="11.3240%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (102,722 samples, 0.15%)</title><rect x="11.0756%" y="149" width="0.1486%" height="15" fill="rgb(232,182,51)"/><text x="11.3256%" y="159.50"></text></g><g><title>crate_lints (1,557,688 samples, 2.25%)</title><rect x="11.2263%" y="165" width="2.2530%" height="15" fill="rgb(231,60,39)"/><text x="11.4763%" y="175.50">c..</text></g><g><title>type_of (1,035,983 samples, 1.50%)</title><rect x="11.9809%" y="149" width="1.4984%" height="15" fill="rgb(208,69,12)"/><text x="12.2309%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (802,310 samples, 1.16%)</title><rect x="12.3188%" y="133" width="1.1605%" height="15" fill="rgb(235,93,37)"/><text x="12.5688%" y="143.50"></text></g><g><title>lint_checking (1,660,069 samples, 2.40%)</title><rect x="11.2242%" y="181" width="2.4011%" height="15" fill="rgb(213,116,39)"/><text x="11.4742%" y="191.50">li..</text></g><g><title>module_lints (100,941 samples, 0.15%)</title><rect x="13.4793%" y="165" width="0.1460%" height="15" fill="rgb(222,207,29)"/><text x="13.7293%" y="175.50"></text></g><g><title>lint_mod (99,091 samples, 0.14%)</title><rect x="13.4820%" y="149" width="0.1433%" height="15" fill="rgb(206,96,30)"/><text x="13.7320%" y="159.50"></text></g><g><title>privacy_access_levels (72,390 samples, 0.10%)</title><rect x="13.6253%" y="181" width="0.1047%" height="15" fill="rgb(218,138,4)"/><text x="13.8753%" y="191.50"></text></g><g><title>privacy_checking_modules (191,832 samples, 0.28%)</title><rect x="13.7300%" y="181" width="0.2775%" height="15" fill="rgb(250,191,14)"/><text x="13.9800%" y="191.50"></text></g><g><title>check_mod_privacy (190,582 samples, 0.28%)</title><rect x="13.7318%" y="165" width="0.2757%" height="15" fill="rgb(239,60,40)"/><text x="13.9818%" y="175.50"></text></g><g><title>misc_checking_3 (2,178,434 samples, 3.15%)</title><rect x="10.8698%" y="197" width="3.1509%" height="15" fill="rgb(206,27,48)"/><text x="11.1198%" y="207.50">mis..</text></g><g><title>impl_parent (85,772 samples, 0.12%)</title><rect x="14.5756%" y="101" width="0.1241%" height="15" fill="rgb(225,35,8)"/><text x="14.8256%" y="111.50"></text></g><g><title>impl_trait_ref (315,062 samples, 0.46%)</title><rect x="14.6996%" y="101" width="0.4557%" height="15" fill="rgb(250,213,24)"/><text x="14.9496%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (273,232 samples, 0.40%)</title><rect x="14.7601%" y="85" width="0.3952%" height="15" fill="rgb(247,123,22)"/><text x="15.0101%" y="95.50"></text></g><g><title>adt_destructor (611,177 samples, 0.88%)</title><rect x="14.3478%" y="149" width="0.8840%" height="15" fill="rgb(231,138,38)"/><text x="14.5978%" y="159.50"></text></g><g><title>coherent_trait (606,517 samples, 0.88%)</title><rect x="14.3546%" y="133" width="0.8773%" height="15" fill="rgb(231,145,46)"/><text x="14.6046%" y="143.50"></text></g><g><title>specialization_graph_of (603,717 samples, 0.87%)</title><rect x="14.3586%" y="117" width="0.8732%" height="15" fill="rgb(251,118,11)"/><text x="14.6086%" y="127.50"></text></g><g><title>param_env (133,241 samples, 0.19%)</title><rect x="15.2318%" y="149" width="0.1927%" height="15" fill="rgb(217,147,25)"/><text x="15.4818%" y="159.50"></text></g><g><title>impl_parent (4,290,475 samples, 6.21%)</title><rect x="27.9370%" y="133" width="6.2057%" height="15" fill="rgb(247,81,37)"/><text x="28.1870%" y="143.50">impl_par..</text></g><g><title>metadata_decode_entry_impl_parent (2,142,545 samples, 3.10%)</title><rect x="31.0437%" y="117" width="3.0990%" height="15" fill="rgb(209,12,38)"/><text x="31.2937%" y="127.50">met..</text></g><g><title>impl_trait_ref (10,136,690 samples, 14.66%)</title><rect x="34.1427%" y="133" width="14.6616%" height="15" fill="rgb(227,1,9)"/><text x="34.3927%" y="143.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,990,595 samples, 11.56%)</title><rect x="37.2467%" y="117" width="11.5575%" height="15" fill="rgb(248,47,43)"/><text x="37.4967%" y="127.50">metadata_decode_e..</text></g><g><title>coherent_trait (25,658,605 samples, 37.11%)</title><rect x="14.2856%" y="165" width="37.1123%" height="15" fill="rgb(221,10,30)"/><text x="14.5356%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (24,871,177 samples, 35.97%)</title><rect x="15.4245%" y="149" width="35.9734%" height="15" fill="rgb(210,229,1)"/><text x="15.6745%" y="159.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,790,211 samples, 2.59%)</title><rect x="48.8086%" y="133" width="2.5893%" height="15" fill="rgb(222,148,37)"/><text x="49.0586%" y="143.50">tr..</text></g><g><title>implementations_of_trait (438,005 samples, 0.63%)</title><rect x="50.7644%" y="117" width="0.6335%" height="15" fill="rgb(234,67,33)"/><text x="51.0144%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (357,474 samples, 0.52%)</title><rect x="50.8809%" y="101" width="0.5170%" height="15" fill="rgb(247,98,35)"/><text x="51.1309%" y="111.50"></text></g><g><title>coherence_checking (25,742,676 samples, 37.23%)</title><rect x="14.2427%" y="181" width="37.2339%" height="15" fill="rgb(247,138,52)"/><text x="14.4927%" y="191.50">coherence_checking</text></g><g><title>adt_sized_constraint (119,881 samples, 0.17%)</title><rect x="57.7275%" y="133" width="0.1734%" height="15" fill="rgb(213,79,30)"/><text x="57.9775%" y="143.50"></text></g><g><title>associated_item (184,500 samples, 0.27%)</title><rect x="58.0052%" y="117" width="0.2669%" height="15" fill="rgb(246,177,23)"/><text x="58.2552%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (143,840 samples, 0.21%)</title><rect x="58.0640%" y="101" width="0.2080%" height="15" fill="rgb(230,62,27)"/><text x="58.3140%" y="111.50"></text></g><g><title>associated_items (261,411 samples, 0.38%)</title><rect x="57.9109%" y="133" width="0.3781%" height="15" fill="rgb(216,154,8)"/><text x="58.1609%" y="143.50"></text></g><g><title>adt_dtorck_constraint (98,881 samples, 0.14%)</title><rect x="58.5254%" y="85" width="0.1430%" height="15" fill="rgb(244,35,45)"/><text x="58.7754%" y="95.50"></text></g><g><title>adt_dtorck_constraint (120,361 samples, 0.17%)</title><rect x="58.5102%" y="101" width="0.1741%" height="15" fill="rgb(251,115,12)"/><text x="58.7602%" y="111.50"></text></g><g><title>dropck_outlives (221,653 samples, 0.32%)</title><rect x="58.3752%" y="133" width="0.3206%" height="15" fill="rgb(240,54,50)"/><text x="58.6252%" y="143.50"></text></g><g><title>adt_dtorck_constraint (168,091 samples, 0.24%)</title><rect x="58.4527%" y="117" width="0.2431%" height="15" fill="rgb(233,84,52)"/><text x="58.7027%" y="127.50"></text></g><g><title>adt_def (74,152 samples, 0.11%)</title><rect x="59.2257%" y="101" width="0.1073%" height="15" fill="rgb(207,117,47)"/><text x="59.4757%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (73,322 samples, 0.11%)</title><rect x="59.2269%" y="85" width="0.1061%" height="15" fill="rgb(249,43,39)"/><text x="59.4769%" y="95.50"></text></g><g><title>adt_def (86,541 samples, 0.13%)</title><rect x="59.3351%" y="85" width="0.1252%" height="15" fill="rgb(209,38,44)"/><text x="59.5851%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (86,271 samples, 0.12%)</title><rect x="59.3355%" y="69" width="0.1248%" height="15" fill="rgb(236,212,23)"/><text x="59.5855%" y="79.50"></text></g><g><title>item_attrs (82,701 samples, 0.12%)</title><rect x="59.3407%" y="53" width="0.1196%" height="15" fill="rgb(242,79,21)"/><text x="59.5907%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (82,251 samples, 0.12%)</title><rect x="59.3413%" y="37" width="0.1190%" height="15" fill="rgb(211,96,35)"/><text x="59.5913%" y="47.50"></text></g><g><title>adt_sized_constraint (88,661 samples, 0.13%)</title><rect x="59.3330%" y="101" width="0.1282%" height="15" fill="rgb(253,215,40)"/><text x="59.5830%" y="111.50"></text></g><g><title>adt_sized_constraint (173,103 samples, 0.25%)</title><rect x="59.2169%" y="117" width="0.2504%" height="15" fill="rgb(211,81,21)"/><text x="59.4669%" y="127.50"></text></g><g><title>predicates_of (70,020 samples, 0.10%)</title><rect x="59.5546%" y="117" width="0.1013%" height="15" fill="rgb(208,190,38)"/><text x="59.8046%" y="127.50"></text></g><g><title>evaluate_obligation (966,462 samples, 1.40%)</title><rect x="58.6958%" y="133" width="1.3979%" height="15" fill="rgb(235,213,38)"/><text x="58.9458%" y="143.50"></text></g><g><title>trait_impls_of (257,714 samples, 0.37%)</title><rect x="59.7209%" y="117" width="0.3728%" height="15" fill="rgb(237,122,38)"/><text x="59.9709%" y="127.50"></text></g><g><title>implementations_of_trait (98,001 samples, 0.14%)</title><rect x="59.9519%" y="101" width="0.1417%" height="15" fill="rgb(244,218,35)"/><text x="60.2019%" y="111.50"></text></g><g><title>fn_sig (69,850 samples, 0.10%)</title><rect x="60.1203%" y="133" width="0.1010%" height="15" fill="rgb(240,68,47)"/><text x="60.3703%" y="143.50"></text></g><g><title>impl_item_implementor_ids (77,850 samples, 0.11%)</title><rect x="60.3129%" y="133" width="0.1126%" height="15" fill="rgb(210,16,53)"/><text x="60.5629%" y="143.50"></text></g><g><title>evaluate_obligation (72,281 samples, 0.10%)</title><rect x="60.6874%" y="117" width="0.1045%" height="15" fill="rgb(235,124,12)"/><text x="60.9374%" y="127.50"></text></g><g><title>method_autoderef_steps (124,722 samples, 0.18%)</title><rect x="60.6298%" y="133" width="0.1804%" height="15" fill="rgb(224,169,11)"/><text x="60.8798%" y="143.50"></text></g><g><title>predicates_of (174,202 samples, 0.25%)</title><rect x="60.8536%" y="133" width="0.2520%" height="15" fill="rgb(250,166,2)"/><text x="61.1036%" y="143.50"></text></g><g><title>predicates_defined_on (114,021 samples, 0.16%)</title><rect x="60.9407%" y="117" width="0.1649%" height="15" fill="rgb(242,216,29)"/><text x="61.1907%" y="127.50"></text></g><g><title>item_bodies_checking (6,719,155 samples, 9.72%)</title><rect x="51.5230%" y="181" width="9.7185%" height="15" fill="rgb(230,116,27)"/><text x="51.7730%" y="191.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (6,716,415 samples, 9.71%)</title><rect x="51.5269%" y="165" width="9.7145%" height="15" fill="rgb(228,99,48)"/><text x="51.7769%" y="175.50">typeck_item_bo..</text></g><g><title>typeck (6,703,985 samples, 9.70%)</title><rect x="51.5449%" y="149" width="9.6966%" height="15" fill="rgb(253,11,6)"/><text x="51.7949%" y="159.50">typeck</text></g><g><title>item_types_checking (280,644 samples, 0.41%)</title><rect x="61.2415%" y="181" width="0.4059%" height="15" fill="rgb(247,143,39)"/><text x="61.4915%" y="191.50"></text></g><g><title>check_mod_item_types (278,484 samples, 0.40%)</title><rect x="61.2446%" y="165" width="0.4028%" height="15" fill="rgb(236,97,10)"/><text x="61.4946%" y="175.50"></text></g><g><title>fn_sig (327,134 samples, 0.47%)</title><rect x="61.9159%" y="149" width="0.4732%" height="15" fill="rgb(233,208,19)"/><text x="62.1659%" y="159.50"></text></g><g><title>type_of (73,221 samples, 0.11%)</title><rect x="62.2832%" y="133" width="0.1059%" height="15" fill="rgb(216,164,2)"/><text x="62.5332%" y="143.50"></text></g><g><title>named_region_map (182,443 samples, 0.26%)</title><rect x="62.4785%" y="133" width="0.2639%" height="15" fill="rgb(220,129,5)"/><text x="62.7285%" y="143.50"></text></g><g><title>resolve_lifetimes (163,502 samples, 0.24%)</title><rect x="62.5059%" y="117" width="0.2365%" height="15" fill="rgb(242,17,10)"/><text x="62.7559%" y="127.50"></text></g><g><title>generics_of (255,194 samples, 0.37%)</title><rect x="62.3891%" y="149" width="0.3691%" height="15" fill="rgb(242,107,0)"/><text x="62.6391%" y="159.50"></text></g><g><title>impl_trait_ref (78,320 samples, 0.11%)</title><rect x="62.7582%" y="149" width="0.1133%" height="15" fill="rgb(251,28,31)"/><text x="63.0082%" y="159.50"></text></g><g><title>explicit_predicates_of (109,460 samples, 0.16%)</title><rect x="62.9647%" y="117" width="0.1583%" height="15" fill="rgb(233,223,10)"/><text x="63.2147%" y="127.50"></text></g><g><title>predicates_of (211,901 samples, 0.31%)</title><rect x="62.8714%" y="149" width="0.3065%" height="15" fill="rgb(215,21,27)"/><text x="63.1214%" y="159.50"></text></g><g><title>predicates_defined_on (188,301 samples, 0.27%)</title><rect x="62.9056%" y="133" width="0.2724%" height="15" fill="rgb(232,23,21)"/><text x="63.1556%" y="143.50"></text></g><g><title>type_collecting (1,152,783 samples, 1.67%)</title><rect x="61.6494%" y="181" width="1.6674%" height="15" fill="rgb(244,5,23)"/><text x="61.8994%" y="191.50"></text></g><g><title>collect_mod_item_types (1,142,843 samples, 1.65%)</title><rect x="61.6638%" y="165" width="1.6530%" height="15" fill="rgb(226,81,46)"/><text x="61.9138%" y="175.50"></text></g><g><title>type_of (95,981 samples, 0.14%)</title><rect x="63.1779%" y="149" width="0.1388%" height="15" fill="rgb(247,70,30)"/><text x="63.4279%" y="159.50"></text></g><g><title>evaluate_obligation (250,102 samples, 0.36%)</title><rect x="64.2487%" y="149" width="0.3617%" height="15" fill="rgb(212,68,19)"/><text x="64.4987%" y="159.50"></text></g><g><title>implied_outlives_bounds (85,260 samples, 0.12%)</title><rect x="64.6236%" y="149" width="0.1233%" height="15" fill="rgb(240,187,13)"/><text x="64.8736%" y="159.50"></text></g><g><title>param_env (84,850 samples, 0.12%)</title><rect x="64.7469%" y="149" width="0.1227%" height="15" fill="rgb(223,113,26)"/><text x="64.9969%" y="159.50"></text></g><g><title>predicates_of (450,665 samples, 0.65%)</title><rect x="64.8696%" y="149" width="0.6518%" height="15" fill="rgb(206,192,2)"/><text x="65.1196%" y="159.50"></text></g><g><title>predicates_defined_on (423,465 samples, 0.61%)</title><rect x="64.9090%" y="133" width="0.6125%" height="15" fill="rgb(241,108,4)"/><text x="65.1590%" y="143.50"></text></g><g><title>region_scope_tree (151,805 samples, 0.22%)</title><rect x="65.5215%" y="149" width="0.2196%" height="15" fill="rgb(247,173,49)"/><text x="65.7715%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,665,877 samples, 2.41%)</title><rect x="63.4124%" y="165" width="2.4095%" height="15" fill="rgb(224,114,35)"/><text x="63.6624%" y="175.50">ch..</text></g><g><title>evaluate_obligation (137,541 samples, 0.20%)</title><rect x="66.3796%" y="149" width="0.1989%" height="15" fill="rgb(245,159,27)"/><text x="66.6296%" y="159.50"></text></g><g><title>predicates_of (104,604 samples, 0.15%)</title><rect x="66.7869%" y="149" width="0.1513%" height="15" fill="rgb(245,172,44)"/><text x="67.0369%" y="159.50"></text></g><g><title>analysis (45,708,258 samples, 66.11%)</title><rect x="0.8984%" y="213" width="66.1119%" height="15" fill="rgb(236,23,11)"/><text x="1.1484%" y="223.50">analysis</text></g><g><title>type_check_crate (36,635,807 samples, 52.99%)</title><rect x="14.0207%" y="197" width="52.9896%" height="15" fill="rgb(205,117,38)"/><text x="14.2707%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,552,558 samples, 3.69%)</title><rect x="63.3183%" y="181" width="3.6920%" height="15" fill="rgb(237,72,25)"/><text x="63.5683%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (821,649 samples, 1.19%)</title><rect x="65.8219%" y="165" width="1.1884%" height="15" fill="rgb(244,70,9)"/><text x="66.0719%" y="175.50"></text></g><g><title>codegen_crate (381,225 samples, 0.55%)</title><rect x="67.0258%" y="213" width="0.5514%" height="15" fill="rgb(217,125,39)"/><text x="67.2758%" y="223.50"></text></g><g><title>AST_validation (76,441 samples, 0.11%)</title><rect x="67.8472%" y="197" width="0.1106%" height="15" fill="rgb(235,36,10)"/><text x="68.0972%" y="207.50"></text></g><g><title>crate_injection (85,771 samples, 0.12%)</title><rect x="68.0167%" y="197" width="0.1241%" height="15" fill="rgb(251,123,47)"/><text x="68.2667%" y="207.50"></text></g><g><title>metadata_load_macro (118,203 samples, 0.17%)</title><rect x="82.2609%" y="165" width="0.1710%" height="15" fill="rgb(221,13,13)"/><text x="82.5109%" y="175.50"></text></g><g><title>macro_expand_crate (12,161,796 samples, 17.59%)</title><rect x="68.1408%" y="197" width="17.5907%" height="15" fill="rgb(238,131,9)"/><text x="68.3908%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (12,139,535 samples, 17.56%)</title><rect x="68.1730%" y="181" width="17.5585%" height="15" fill="rgb(211,50,8)"/><text x="68.4230%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (2,281,296 samples, 3.30%)</title><rect x="82.4318%" y="165" width="3.2996%" height="15" fill="rgb(245,182,24)"/><text x="82.6818%" y="175.50">met..</text></g><g><title>metadata_register_crate (852,200 samples, 1.23%)</title><rect x="84.4989%" y="149" width="1.2326%" height="15" fill="rgb(242,14,37)"/><text x="84.7489%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (120,711 samples, 0.17%)</title><rect x="85.7387%" y="197" width="0.1746%" height="15" fill="rgb(246,228,12)"/><text x="85.9887%" y="207.50"></text></g><g><title>finalize_macro_resolutions (395,505 samples, 0.57%)</title><rect x="85.9600%" y="181" width="0.5721%" height="15" fill="rgb(213,55,15)"/><text x="86.2100%" y="191.50"></text></g><g><title>late_resolve_crate (1,518,587 samples, 2.20%)</title><rect x="86.5320%" y="181" width="2.1965%" height="15" fill="rgb(209,9,3)"/><text x="86.7820%" y="191.50">l..</text></g><g><title>configure_and_expand (14,687,694 samples, 21.24%)</title><rect x="67.5772%" y="213" width="21.2441%" height="15" fill="rgb(230,59,30)"/><text x="67.8272%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,010,562 samples, 2.91%)</title><rect x="85.9133%" y="197" width="2.9081%" height="15" fill="rgb(209,121,21)"/><text x="86.1633%" y="207.50">re..</text></g><g><title>drop_ast (92,871 samples, 0.13%)</title><rect x="88.8213%" y="213" width="0.1343%" height="15" fill="rgb(220,109,13)"/><text x="89.0713%" y="223.50"></text></g><g><title>early_lint_checks (227,172 samples, 0.33%)</title><rect x="88.9743%" y="213" width="0.3286%" height="15" fill="rgb(232,18,1)"/><text x="89.2243%" y="223.50"></text></g><g><title>free_global_ctxt (2,740,440 samples, 3.96%)</title><rect x="89.3029%" y="213" width="3.9637%" height="15" fill="rgb(215,41,42)"/><text x="89.5529%" y="223.50">free..</text></g><g><title>generate_crate_metadata (464,565 samples, 0.67%)</title><rect x="93.2667%" y="213" width="0.6719%" height="15" fill="rgb(224,123,36)"/><text x="93.5167%" y="223.50"></text></g><g><title>hir_lowering (1,303,965 samples, 1.89%)</title><rect x="93.9386%" y="213" width="1.8860%" height="15" fill="rgb(240,125,3)"/><text x="94.1886%" y="223.50">h..</text></g><g><title>parse_crate (1,645,828 samples, 2.38%)</title><rect x="95.8905%" y="213" width="2.3805%" height="15" fill="rgb(205,98,50)"/><text x="96.1405%" y="223.50">pa..</text></g><g><title>prepare_outputs (268,343 samples, 0.39%)</title><rect x="98.2836%" y="213" width="0.3881%" height="15" fill="rgb(205,185,37)"/><text x="98.5336%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (511,396 samples, 0.74%)</title><rect x="98.6717%" y="213" width="0.7397%" height="15" fill="rgb(238,207,15)"/><text x="98.9217%" y="223.50"></text></g><g><title>setup_global_ctxt (117,561 samples, 0.17%)</title><rect x="99.4265%" y="213" width="0.1700%" height="15" fill="rgb(213,199,42)"/><text x="99.6765%" y="223.50"></text></g><g><title>all (69,137,720 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (69,137,720 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (278,973 samples, 0.40%)</title><rect x="99.5965%" y="213" width="0.4035%" height="15" fill="rgb(241,35,35)"/><text x="99.8465%" y="223.50"></text></g></svg></svg>