<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (441,935 samples, 0.12%)</title><rect x="13.0914%" y="133" width="0.1170%" height="15" fill="rgb(227,0,7)"/><text x="13.3414%" y="143.50"></text></g><g><title>param_env (711,554 samples, 0.19%)</title><rect x="15.0323%" y="101" width="0.1883%" height="15" fill="rgb(217,0,24)"/><text x="15.2823%" y="111.50"></text></g><g><title>item_attrs (505,493 samples, 0.13%)</title><rect x="15.7583%" y="69" width="0.1338%" height="15" fill="rgb(221,193,54)"/><text x="16.0083%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (488,263 samples, 0.13%)</title><rect x="15.7628%" y="53" width="0.1292%" height="15" fill="rgb(248,212,6)"/><text x="16.0128%" y="63.50"></text></g><g><title>codegen_fn_attrs (701,986 samples, 0.19%)</title><rect x="15.7127%" y="85" width="0.1858%" height="15" fill="rgb(208,68,35)"/><text x="15.9627%" y="95.50"></text></g><g><title>is_copy_raw (448,275 samples, 0.12%)</title><rect x="18.6777%" y="69" width="0.1186%" height="15" fill="rgb(232,128,0)"/><text x="18.9277%" y="79.50"></text></g><g><title>adt_drop_tys (518,018 samples, 0.14%)</title><rect x="18.9535%" y="53" width="0.1371%" height="15" fill="rgb(207,160,47)"/><text x="19.2035%" y="63.50"></text></g><g><title>needs_drop_raw (4,403,033 samples, 1.17%)</title><rect x="18.7978%" y="69" width="1.1654%" height="15" fill="rgb(228,23,34)"/><text x="19.0478%" y="79.50"></text></g><g><title>is_copy_raw (3,296,565 samples, 0.87%)</title><rect x="19.0906%" y="53" width="0.8725%" height="15" fill="rgb(218,30,26)"/><text x="19.3406%" y="63.50"></text></g><g><title>evaluate_obligation (2,551,798 samples, 0.68%)</title><rect x="19.2877%" y="37" width="0.6754%" height="15" fill="rgb(220,122,19)"/><text x="19.5377%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (3,031,599 samples, 0.80%)</title><rect x="20.2805%" y="53" width="0.8024%" height="15" fill="rgb(250,228,42)"/><text x="20.5305%" y="63.50"></text></g><g><title>resolve_instance (4,850,790 samples, 1.28%)</title><rect x="19.9631%" y="69" width="1.2839%" height="15" fill="rgb(240,193,28)"/><text x="20.2131%" y="79.50"></text></g><g><title>thir_body (3,676,581 samples, 0.97%)</title><rect x="21.2850%" y="69" width="0.9731%" height="15" fill="rgb(216,20,37)"/><text x="21.5350%" y="79.50"></text></g><g><title>mir_const (30,714,587 samples, 8.13%)</title><rect x="14.1625%" y="117" width="8.1294%" height="15" fill="rgb(206,188,39)"/><text x="14.4125%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (26,716,975 samples, 7.07%)</title><rect x="15.2206%" y="101" width="7.0713%" height="15" fill="rgb(217,207,13)"/><text x="15.4706%" y="111.50">unsafety_..</text></g><g><title>mir_built (24,155,818 samples, 6.39%)</title><rect x="15.8985%" y="85" width="6.3935%" height="15" fill="rgb(231,73,38)"/><text x="16.1485%" y="95.50">mir_built</text></g><g><title>mir_promoted (33,892,652 samples, 8.97%)</title><rect x="13.3741%" y="133" width="8.9706%" height="15" fill="rgb(225,20,46)"/><text x="13.6241%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,469,479 samples, 0.65%)</title><rect x="22.3447%" y="133" width="0.6536%" height="15" fill="rgb(210,31,41)"/><text x="22.5947%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,578,429 samples, 0.68%)</title><rect x="22.9983%" y="133" width="0.6824%" height="15" fill="rgb(221,200,47)"/><text x="23.2483%" y="143.50"></text></g><g><title>normalize_projection_ty (1,460,855 samples, 0.39%)</title><rect x="23.2941%" y="117" width="0.3867%" height="15" fill="rgb(226,26,5)"/><text x="23.5441%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,348,753 samples, 0.62%)</title><rect x="23.6808%" y="133" width="0.6217%" height="15" fill="rgb(249,33,26)"/><text x="23.9308%" y="143.50"></text></g><g><title>normalize_projection_ty (1,438,358 samples, 0.38%)</title><rect x="23.9217%" y="117" width="0.3807%" height="15" fill="rgb(235,183,28)"/><text x="24.1717%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,056,139 samples, 0.28%)</title><rect x="24.3024%" y="133" width="0.2795%" height="15" fill="rgb(221,5,38)"/><text x="24.5524%" y="143.50"></text></g><g><title>normalize_projection_ty (707,516 samples, 0.19%)</title><rect x="24.3947%" y="117" width="0.1873%" height="15" fill="rgb(247,18,42)"/><text x="24.6447%" y="127.50"></text></g><g><title>type_op_prove_predicate (15,438,429 samples, 4.09%)</title><rect x="24.5820%" y="133" width="4.0862%" height="15" fill="rgb(241,131,45)"/><text x="24.8320%" y="143.50">type..</text></g><g><title>MIR_borrow_checking (106,935,648 samples, 28.30%)</title><rect x="0.3688%" y="165" width="28.3033%" height="15" fill="rgb(249,31,29)"/><text x="0.6188%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (106,339,524 samples, 28.15%)</title><rect x="0.5266%" y="149" width="28.1455%" height="15" fill="rgb(225,111,53)"/><text x="0.7766%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (632,648 samples, 0.17%)</title><rect x="28.7157%" y="165" width="0.1674%" height="15" fill="rgb(238,160,17)"/><text x="28.9657%" y="175.50"></text></g><g><title>codegen_fn_attrs (576,936 samples, 0.15%)</title><rect x="29.2013%" y="101" width="0.1527%" height="15" fill="rgb(214,148,48)"/><text x="29.4513%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,153,933 samples, 0.31%)</title><rect x="29.0566%" y="133" width="0.3054%" height="15" fill="rgb(232,36,49)"/><text x="29.3066%" y="143.50"></text></g><g><title>should_inherit_track_caller (976,962 samples, 0.26%)</title><rect x="29.1035%" y="117" width="0.2586%" height="15" fill="rgb(209,103,24)"/><text x="29.3535%" y="127.50"></text></g><g><title>check_mod_attrs (1,779,220 samples, 0.47%)</title><rect x="28.8912%" y="149" width="0.4709%" height="15" fill="rgb(229,88,8)"/><text x="29.1412%" y="159.50"></text></g><g><title>check_mod_const_bodies (423,984 samples, 0.11%)</title><rect x="29.3621%" y="149" width="0.1122%" height="15" fill="rgb(213,181,19)"/><text x="29.6121%" y="159.50"></text></g><g><title>lookup_deprecation_entry (396,164 samples, 0.10%)</title><rect x="29.7758%" y="133" width="0.1049%" height="15" fill="rgb(254,191,54)"/><text x="30.0258%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,446,378 samples, 0.38%)</title><rect x="29.5389%" y="149" width="0.3828%" height="15" fill="rgb(241,83,37)"/><text x="29.7889%" y="159.50"></text></g><g><title>misc_checking_1 (4,022,805 samples, 1.06%)</title><rect x="28.8832%" y="165" width="1.0647%" height="15" fill="rgb(233,36,39)"/><text x="29.1332%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,754,080 samples, 0.46%)</title><rect x="29.9484%" y="149" width="0.4643%" height="15" fill="rgb(226,3,54)"/><text x="30.1984%" y="159.50"></text></g><g><title>check_mod_liveness (1,471,375 samples, 0.39%)</title><rect x="30.0233%" y="133" width="0.3894%" height="15" fill="rgb(245,192,40)"/><text x="30.2733%" y="143.50"></text></g><g><title>misc_checking_2 (3,521,810 samples, 0.93%)</title><rect x="29.9480%" y="165" width="0.9321%" height="15" fill="rgb(238,167,29)"/><text x="30.1980%" y="175.50"></text></g><g><title>match_checking (1,766,000 samples, 0.47%)</title><rect x="30.4127%" y="149" width="0.4674%" height="15" fill="rgb(232,182,51)"/><text x="30.6627%" y="159.50"></text></g><g><title>check_match (1,631,849 samples, 0.43%)</title><rect x="30.4482%" y="133" width="0.4319%" height="15" fill="rgb(231,60,39)"/><text x="30.6982%" y="143.50"></text></g><g><title>check_private_in_public (748,829 samples, 0.20%)</title><rect x="30.8831%" y="149" width="0.1982%" height="15" fill="rgb(208,69,12)"/><text x="31.1331%" y="159.50"></text></g><g><title>death_checking (1,162,843 samples, 0.31%)</title><rect x="31.0813%" y="149" width="0.3078%" height="15" fill="rgb(235,93,37)"/><text x="31.3313%" y="159.50"></text></g><g><title>param_env (433,783 samples, 0.11%)</title><rect x="31.7484%" y="117" width="0.1148%" height="15" fill="rgb(213,116,39)"/><text x="31.9984%" y="127.50"></text></g><g><title>crate_lints (2,931,763 samples, 0.78%)</title><rect x="31.3896%" y="133" width="0.7760%" height="15" fill="rgb(222,207,29)"/><text x="31.6396%" y="143.50"></text></g><g><title>type_of (1,132,111 samples, 0.30%)</title><rect x="31.8659%" y="117" width="0.2996%" height="15" fill="rgb(206,96,30)"/><text x="32.1159%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (900,330 samples, 0.24%)</title><rect x="31.9272%" y="101" width="0.2383%" height="15" fill="rgb(218,138,4)"/><text x="32.1772%" y="111.50"></text></g><g><title>lint_checking (4,285,798 samples, 1.13%)</title><rect x="31.3891%" y="149" width="1.1343%" height="15" fill="rgb(250,191,14)"/><text x="31.6391%" y="159.50"></text></g><g><title>module_lints (1,352,335 samples, 0.36%)</title><rect x="32.1655%" y="133" width="0.3579%" height="15" fill="rgb(239,60,40)"/><text x="32.4155%" y="143.50"></text></g><g><title>lint_mod (1,345,205 samples, 0.36%)</title><rect x="32.1674%" y="117" width="0.3560%" height="15" fill="rgb(206,27,48)"/><text x="32.4174%" y="127.50"></text></g><g><title>privacy_access_levels (1,024,521 samples, 0.27%)</title><rect x="32.5235%" y="149" width="0.2712%" height="15" fill="rgb(225,35,8)"/><text x="32.7735%" y="159.50"></text></g><g><title>privacy_checking_modules (3,305,607 samples, 0.87%)</title><rect x="32.7946%" y="149" width="0.8749%" height="15" fill="rgb(250,213,24)"/><text x="33.0446%" y="159.50"></text></g><g><title>check_mod_privacy (3,299,907 samples, 0.87%)</title><rect x="32.7961%" y="133" width="0.8734%" height="15" fill="rgb(247,123,22)"/><text x="33.0461%" y="143.50"></text></g><g><title>misc_checking_3 (10,565,258 samples, 2.80%)</title><rect x="30.8801%" y="165" width="2.7964%" height="15" fill="rgb(231,138,38)"/><text x="31.1301%" y="175.50">mi..</text></g><g><title>impl_parent (2,919,874 samples, 0.77%)</title><rect x="35.7745%" y="101" width="0.7728%" height="15" fill="rgb(231,145,46)"/><text x="36.0245%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,751,575 samples, 0.46%)</title><rect x="36.0837%" y="85" width="0.4636%" height="15" fill="rgb(251,118,11)"/><text x="36.3337%" y="95.50"></text></g><g><title>impl_trait_ref (6,400,047 samples, 1.69%)</title><rect x="36.5475%" y="101" width="1.6939%" height="15" fill="rgb(217,147,25)"/><text x="36.7975%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,238,353 samples, 1.39%)</title><rect x="36.8550%" y="85" width="1.3865%" height="15" fill="rgb(247,81,37)"/><text x="37.1050%" y="95.50"></text></g><g><title>item_attrs (1,207,866 samples, 0.32%)</title><rect x="38.2415%" y="101" width="0.3197%" height="15" fill="rgb(209,12,38)"/><text x="38.4915%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (963,944 samples, 0.26%)</title><rect x="38.3060%" y="85" width="0.2551%" height="15" fill="rgb(227,1,9)"/><text x="38.5560%" y="95.50"></text></g><g><title>predicates_of (765,795 samples, 0.20%)</title><rect x="38.5612%" y="101" width="0.2027%" height="15" fill="rgb(248,47,43)"/><text x="38.8112%" y="111.50"></text></g><g><title>predicates_defined_on (517,064 samples, 0.14%)</title><rect x="38.6270%" y="85" width="0.1369%" height="15" fill="rgb(221,10,30)"/><text x="38.8770%" y="95.50"></text></g><g><title>trait_impls_of (1,011,530 samples, 0.27%)</title><rect x="38.7643%" y="101" width="0.2677%" height="15" fill="rgb(210,229,1)"/><text x="39.0143%" y="111.50"></text></g><g><title>coherent_trait (20,130,636 samples, 5.33%)</title><rect x="33.7455%" y="133" width="5.3281%" height="15" fill="rgb(222,148,37)"/><text x="33.9955%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (19,456,648 samples, 5.15%)</title><rect x="33.9239%" y="117" width="5.1497%" height="15" fill="rgb(234,67,33)"/><text x="34.1739%" y="127.50">specia..</text></g><g><title>coherence_checking (20,324,118 samples, 5.38%)</title><rect x="33.7378%" y="149" width="5.3793%" height="15" fill="rgb(247,98,35)"/><text x="33.9878%" y="159.50">coheren..</text></g><g><title>associated_item (573,774 samples, 0.15%)</title><rect x="61.4325%" y="85" width="0.1519%" height="15" fill="rgb(247,138,52)"/><text x="61.6825%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (464,714 samples, 0.12%)</title><rect x="61.4613%" y="69" width="0.1230%" height="15" fill="rgb(213,79,30)"/><text x="61.7113%" y="79.50"></text></g><g><title>associated_items (845,372 samples, 0.22%)</title><rect x="61.3721%" y="101" width="0.2237%" height="15" fill="rgb(246,177,23)"/><text x="61.6221%" y="111.50"></text></g><g><title>dropck_outlives (1,428,906 samples, 0.38%)</title><rect x="61.6399%" y="101" width="0.3782%" height="15" fill="rgb(230,62,27)"/><text x="61.8899%" y="111.50"></text></g><g><title>generics_of (1,274,604 samples, 0.34%)</title><rect x="64.5102%" y="85" width="0.3374%" height="15" fill="rgb(216,154,8)"/><text x="64.7602%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,023,210 samples, 0.27%)</title><rect x="64.5767%" y="69" width="0.2708%" height="15" fill="rgb(244,35,45)"/><text x="64.8267%" y="79.50"></text></g><g><title>impl_trait_ref (445,644 samples, 0.12%)</title><rect x="64.8875%" y="85" width="0.1180%" height="15" fill="rgb(251,115,12)"/><text x="65.1375%" y="95.50"></text></g><g><title>predicates_of (574,078 samples, 0.15%)</title><rect x="65.0150%" y="85" width="0.1519%" height="15" fill="rgb(240,54,50)"/><text x="65.2650%" y="95.50"></text></g><g><title>specializes (786,136 samples, 0.21%)</title><rect x="65.1669%" y="85" width="0.2081%" height="15" fill="rgb(233,84,52)"/><text x="65.4169%" y="95.50"></text></g><g><title>param_env (491,745 samples, 0.13%)</title><rect x="65.2448%" y="69" width="0.1302%" height="15" fill="rgb(207,117,47)"/><text x="65.4948%" y="79.50"></text></g><g><title>trait_impls_of (517,086 samples, 0.14%)</title><rect x="65.3810%" y="85" width="0.1369%" height="15" fill="rgb(249,43,39)"/><text x="65.6310%" y="95.50"></text></g><g><title>evaluate_obligation (13,241,870 samples, 3.50%)</title><rect x="62.0181%" y="101" width="3.5048%" height="15" fill="rgb(209,38,44)"/><text x="62.2681%" y="111.50">eva..</text></g><g><title>impl_item_implementor_ids (471,187 samples, 0.12%)</title><rect x="65.6523%" y="101" width="0.1247%" height="15" fill="rgb(236,212,23)"/><text x="65.9023%" y="111.50"></text></g><g><title>associated_items (440,417 samples, 0.12%)</title><rect x="65.6604%" y="85" width="0.1166%" height="15" fill="rgb(242,79,21)"/><text x="65.9104%" y="95.50"></text></g><g><title>item_attrs (588,027 samples, 0.16%)</title><rect x="65.8214%" y="101" width="0.1556%" height="15" fill="rgb(211,96,35)"/><text x="66.0714%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (577,557 samples, 0.15%)</title><rect x="65.8242%" y="85" width="0.1529%" height="15" fill="rgb(253,215,40)"/><text x="66.0742%" y="95.50"></text></g><g><title>evaluate_obligation (1,215,083 samples, 0.32%)</title><rect x="66.3388%" y="85" width="0.3216%" height="15" fill="rgb(211,81,21)"/><text x="66.5888%" y="95.50"></text></g><g><title>method_autoderef_steps (2,440,852 samples, 0.65%)</title><rect x="66.0174%" y="101" width="0.6460%" height="15" fill="rgb(208,190,38)"/><text x="66.2674%" y="111.50"></text></g><g><title>predicates_of (501,043 samples, 0.13%)</title><rect x="66.7493%" y="101" width="0.1326%" height="15" fill="rgb(235,213,38)"/><text x="66.9993%" y="111.50"></text></g><g><title>evaluate_obligation (1,693,170 samples, 0.45%)</title><rect x="70.9162%" y="85" width="0.4481%" height="15" fill="rgb(237,122,38)"/><text x="71.1662%" y="95.50"></text></g><g><title>is_copy_raw (399,496 samples, 0.11%)</title><rect x="71.4347%" y="85" width="0.1057%" height="15" fill="rgb(244,218,35)"/><text x="71.6847%" y="95.50"></text></g><g><title>method_autoderef_steps (481,906 samples, 0.13%)</title><rect x="71.5455%" y="85" width="0.1275%" height="15" fill="rgb(240,68,47)"/><text x="71.7955%" y="95.50"></text></g><g><title>typeck (18,121,363 samples, 4.80%)</title><rect x="66.9296%" y="101" width="4.7963%" height="15" fill="rgb(210,16,53)"/><text x="67.1796%" y="111.50">typeck</text></g><g><title>item_bodies_checking (123,245,021 samples, 32.62%)</title><rect x="39.1497%" y="149" width="32.6200%" height="15" fill="rgb(235,124,12)"/><text x="39.3997%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (123,241,191 samples, 32.62%)</title><rect x="39.1508%" y="133" width="32.6190%" height="15" fill="rgb(224,169,11)"/><text x="39.4008%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (122,834,096 samples, 32.51%)</title><rect x="39.2585%" y="117" width="32.5112%" height="15" fill="rgb(250,166,2)"/><text x="39.5085%" y="127.50">typeck</text></g><g><title>implied_outlives_bounds (382,073 samples, 0.10%)</title><rect x="73.8738%" y="117" width="0.1011%" height="15" fill="rgb(242,216,29)"/><text x="74.1238%" y="127.50"></text></g><g><title>item_types_checking (8,437,134 samples, 2.23%)</title><rect x="71.7697%" y="149" width="2.2331%" height="15" fill="rgb(230,116,27)"/><text x="72.0197%" y="159.50">i..</text></g><g><title>check_mod_item_types (8,430,344 samples, 2.23%)</title><rect x="71.7715%" y="133" width="2.2313%" height="15" fill="rgb(228,99,48)"/><text x="72.0215%" y="143.50">c..</text></g><g><title>fn_sig (1,145,262 samples, 0.30%)</title><rect x="74.2551%" y="117" width="0.3031%" height="15" fill="rgb(253,11,6)"/><text x="74.5051%" y="127.50"></text></g><g><title>is_late_bound_map (634,496 samples, 0.17%)</title><rect x="74.6841%" y="101" width="0.1679%" height="15" fill="rgb(247,143,39)"/><text x="74.9341%" y="111.50"></text></g><g><title>resolve_lifetimes (588,856 samples, 0.16%)</title><rect x="74.6962%" y="85" width="0.1559%" height="15" fill="rgb(236,97,10)"/><text x="74.9462%" y="95.50"></text></g><g><title>named_region_map (394,453 samples, 0.10%)</title><rect x="74.8520%" y="101" width="0.1044%" height="15" fill="rgb(233,208,19)"/><text x="75.1020%" y="111.50"></text></g><g><title>generics_of (1,550,442 samples, 0.41%)</title><rect x="74.5582%" y="117" width="0.4104%" height="15" fill="rgb(216,164,2)"/><text x="74.8082%" y="127.50"></text></g><g><title>late_bound_vars_map (617,537 samples, 0.16%)</title><rect x="75.4959%" y="69" width="0.1634%" height="15" fill="rgb(220,129,5)"/><text x="75.7459%" y="79.50"></text></g><g><title>resolve_lifetimes (576,057 samples, 0.15%)</title><rect x="75.5068%" y="53" width="0.1525%" height="15" fill="rgb(242,17,10)"/><text x="75.7568%" y="63.50"></text></g><g><title>explicit_predicates_of (1,733,338 samples, 0.46%)</title><rect x="75.2186%" y="85" width="0.4588%" height="15" fill="rgb(242,107,0)"/><text x="75.4686%" y="95.50"></text></g><g><title>predicates_of (3,304,624 samples, 0.87%)</title><rect x="75.0205%" y="117" width="0.8747%" height="15" fill="rgb(251,28,31)"/><text x="75.2705%" y="127.50"></text></g><g><title>predicates_defined_on (3,116,260 samples, 0.82%)</title><rect x="75.0703%" y="101" width="0.8248%" height="15" fill="rgb(233,223,10)"/><text x="75.3203%" y="111.50"></text></g><g><title>inferred_outlives_of (822,708 samples, 0.22%)</title><rect x="75.6774%" y="85" width="0.2178%" height="15" fill="rgb(215,21,27)"/><text x="75.9274%" y="95.50"></text></g><g><title>inferred_outlives_crate (756,368 samples, 0.20%)</title><rect x="75.6949%" y="69" width="0.2002%" height="15" fill="rgb(232,23,21)"/><text x="75.9449%" y="79.50"></text></g><g><title>type_of (419,385 samples, 0.11%)</title><rect x="75.7841%" y="53" width="0.1110%" height="15" fill="rgb(244,5,23)"/><text x="76.0341%" y="63.50"></text></g><g><title>type_collecting (7,615,296 samples, 2.02%)</title><rect x="74.0041%" y="149" width="2.0156%" height="15" fill="rgb(226,81,46)"/><text x="74.2541%" y="159.50">t..</text></g><g><title>collect_mod_item_types (7,602,636 samples, 2.01%)</title><rect x="74.0074%" y="133" width="2.0122%" height="15" fill="rgb(247,70,30)"/><text x="74.2574%" y="143.50">c..</text></g><g><title>type_of (462,350 samples, 0.12%)</title><rect x="75.8973%" y="117" width="0.1224%" height="15" fill="rgb(212,68,19)"/><text x="76.1473%" y="127.50"></text></g><g><title>evaluate_obligation (1,895,277 samples, 0.50%)</title><rect x="80.0828%" y="117" width="0.5016%" height="15" fill="rgb(240,187,13)"/><text x="80.3328%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,715,478 samples, 0.45%)</title><rect x="80.6014%" y="117" width="0.4540%" height="15" fill="rgb(223,113,26)"/><text x="80.8514%" y="127.50"></text></g><g><title>param_env (2,839,878 samples, 0.75%)</title><rect x="81.0558%" y="117" width="0.7516%" height="15" fill="rgb(206,192,2)"/><text x="81.3058%" y="127.50"></text></g><g><title>region_scope_tree (1,544,947 samples, 0.41%)</title><rect x="81.8270%" y="117" width="0.4089%" height="15" fill="rgb(241,108,4)"/><text x="82.0770%" y="127.50"></text></g><g><title>check_impl_item_well_formed (22,721,024 samples, 6.01%)</title><rect x="76.2540%" y="133" width="6.0137%" height="15" fill="rgb(247,173,49)"/><text x="76.5040%" y="143.50">check_im..</text></g><g><title>implied_outlives_bounds (448,474 samples, 0.12%)</title><rect x="84.1583%" y="117" width="0.1187%" height="15" fill="rgb(224,114,35)"/><text x="84.4083%" y="127.50"></text></g><g><title>param_env (1,014,787 samples, 0.27%)</title><rect x="84.2803%" y="117" width="0.2686%" height="15" fill="rgb(245,159,27)"/><text x="84.5303%" y="127.50"></text></g><g><title>check_item_well_formed (9,371,373 samples, 2.48%)</title><rect x="82.2677%" y="133" width="2.4804%" height="15" fill="rgb(245,172,44)"/><text x="82.5177%" y="143.50">ch..</text></g><g><title>variances_of (460,095 samples, 0.12%)</title><rect x="84.6263%" y="117" width="0.1218%" height="15" fill="rgb(236,23,11)"/><text x="84.8763%" y="127.50"></text></g><g><title>crate_variances (449,065 samples, 0.12%)</title><rect x="84.6292%" y="101" width="0.1189%" height="15" fill="rgb(205,117,38)"/><text x="84.8792%" y="111.50"></text></g><g><title>analysis (320,289,189 samples, 84.77%)</title><rect x="0.1516%" y="181" width="84.7728%" height="15" fill="rgb(237,72,25)"/><text x="0.4016%" y="191.50">analysis</text></g><g><title>type_check_crate (193,625,290 samples, 51.25%)</title><rect x="33.6765%" y="165" width="51.2479%" height="15" fill="rgb(244,70,9)"/><text x="33.9265%" y="175.50">type_check_crate</text></g><g><title>wf_checking (33,619,127 samples, 8.90%)</title><rect x="76.0263%" y="149" width="8.8982%" height="15" fill="rgb(217,125,39)"/><text x="76.2763%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (666,237 samples, 0.18%)</title><rect x="84.7481%" y="133" width="0.1763%" height="15" fill="rgb(235,36,10)"/><text x="84.9981%" y="143.50"></text></g><g><title>codegen_crate (403,924 samples, 0.11%)</title><rect x="84.9265%" y="181" width="0.1069%" height="15" fill="rgb(251,123,47)"/><text x="85.1765%" y="191.50"></text></g><g><title>metadata_register_crate (1,348,535 samples, 0.36%)</title><rect x="91.8096%" y="133" width="0.3569%" height="15" fill="rgb(221,13,13)"/><text x="92.0596%" y="143.50"></text></g><g><title>metadata_register_crate (507,676 samples, 0.13%)</title><rect x="92.0321%" y="117" width="0.1344%" height="15" fill="rgb(238,131,9)"/><text x="92.2821%" y="127.50"></text></g><g><title>macro_expand_crate (26,765,080 samples, 7.08%)</title><rect x="85.2380%" y="165" width="7.0841%" height="15" fill="rgb(211,50,8)"/><text x="85.4880%" y="175.50">macro_expa..</text></g><g><title>expand_crate (26,746,620 samples, 7.08%)</title><rect x="85.2429%" y="149" width="7.0792%" height="15" fill="rgb(245,182,24)"/><text x="85.4929%" y="159.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (587,627 samples, 0.16%)</title><rect x="92.1665%" y="133" width="0.1555%" height="15" fill="rgb(242,14,37)"/><text x="92.4165%" y="143.50"></text></g><g><title>late_resolve_crate (4,387,339 samples, 1.16%)</title><rect x="92.3962%" y="149" width="1.1612%" height="15" fill="rgb(246,228,12)"/><text x="92.6462%" y="159.50"></text></g><g><title>configure_and_expand (32,530,854 samples, 8.61%)</title><rect x="85.0334%" y="181" width="8.6101%" height="15" fill="rgb(213,55,15)"/><text x="85.2834%" y="191.50">configure_an..</text></g><g><title>resolve_crate (4,910,025 samples, 1.30%)</title><rect x="92.3440%" y="165" width="1.2996%" height="15" fill="rgb(209,9,3)"/><text x="92.5940%" y="175.50"></text></g><g><title>drop_ast (841,769 samples, 0.22%)</title><rect x="93.6436%" y="181" width="0.2228%" height="15" fill="rgb(230,59,30)"/><text x="93.8936%" y="191.50"></text></g><g><title>early_lint_checks (1,026,462 samples, 0.27%)</title><rect x="93.8707%" y="181" width="0.2717%" height="15" fill="rgb(209,121,21)"/><text x="94.1207%" y="191.50"></text></g><g><title>free_global_ctxt (5,565,253 samples, 1.47%)</title><rect x="94.1424%" y="181" width="1.4730%" height="15" fill="rgb(220,109,13)"/><text x="94.3924%" y="191.50"></text></g><g><title>generate_crate_metadata (4,025,335 samples, 1.07%)</title><rect x="95.6154%" y="181" width="1.0654%" height="15" fill="rgb(232,18,1)"/><text x="95.8654%" y="191.50"></text></g><g><title>hir_lowering (9,637,048 samples, 2.55%)</title><rect x="96.6808%" y="181" width="2.5507%" height="15" fill="rgb(215,41,42)"/><text x="96.9308%" y="191.50">hi..</text></g><g><title>parse_crate (506,346 samples, 0.13%)</title><rect x="99.2503%" y="181" width="0.1340%" height="15" fill="rgb(224,123,36)"/><text x="99.5003%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,514,987 samples, 0.40%)</title><rect x="99.4451%" y="181" width="0.4010%" height="15" fill="rgb(240,125,3)"/><text x="99.6951%" y="191.50"></text></g><g><title>all (377,820,574 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (377,820,574 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (463,156 samples, 0.12%)</title><rect x="99.8774%" y="181" width="0.1226%" height="15" fill="rgb(238,207,15)"/><text x="100.1274%" y="191.50"></text></g></svg></svg>