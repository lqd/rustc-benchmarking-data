<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (925,343 samples, 0.20%)</title><rect x="12.3817%" y="197" width="0.2006%" height="15" fill="rgb(227,0,7)"/><text x="12.6317%" y="207.50"></text></g><g><title>param_env (1,155,432 samples, 0.25%)</title><rect x="14.0254%" y="165" width="0.2505%" height="15" fill="rgb(217,0,24)"/><text x="14.2754%" y="175.50"></text></g><g><title>item_attrs (956,728 samples, 0.21%)</title><rect x="14.7495%" y="133" width="0.2074%" height="15" fill="rgb(221,193,54)"/><text x="14.9995%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (921,398 samples, 0.20%)</title><rect x="14.7571%" y="117" width="0.1998%" height="15" fill="rgb(248,212,6)"/><text x="15.0071%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,347,215 samples, 0.29%)</title><rect x="14.6780%" y="149" width="0.2921%" height="15" fill="rgb(208,68,35)"/><text x="14.9280%" y="159.50"></text></g><g><title>adt_drop_tys (1,028,834 samples, 0.22%)</title><rect x="17.7202%" y="117" width="0.2231%" height="15" fill="rgb(232,128,0)"/><text x="17.9702%" y="127.50"></text></g><g><title>is_copy_raw (3,498,815 samples, 0.76%)</title><rect x="17.9433%" y="117" width="0.7586%" height="15" fill="rgb(207,160,47)"/><text x="18.1933%" y="127.50"></text></g><g><title>evaluate_obligation (2,812,968 samples, 0.61%)</title><rect x="18.0920%" y="101" width="0.6099%" height="15" fill="rgb(228,23,34)"/><text x="18.3420%" y="111.50"></text></g><g><title>needs_drop_raw (5,217,377 samples, 1.13%)</title><rect x="17.5716%" y="133" width="1.1313%" height="15" fill="rgb(218,30,26)"/><text x="17.8216%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (2,017,881 samples, 0.44%)</title><rect x="18.8745%" y="117" width="0.4375%" height="15" fill="rgb(220,122,19)"/><text x="19.1245%" y="127.50"></text></g><g><title>specialization_graph_of (1,883,790 samples, 0.41%)</title><rect x="19.3584%" y="117" width="0.4085%" height="15" fill="rgb(250,228,42)"/><text x="19.6084%" y="127.50"></text></g><g><title>impl_trait_ref (828,109 samples, 0.18%)</title><rect x="19.5873%" y="101" width="0.1796%" height="15" fill="rgb(240,193,28)"/><text x="19.8373%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (677,199 samples, 0.15%)</title><rect x="19.6200%" y="85" width="0.1468%" height="15" fill="rgb(216,20,37)"/><text x="19.8700%" y="95.50"></text></g><g><title>resolve_instance (5,210,424 samples, 1.13%)</title><rect x="18.7028%" y="133" width="1.1298%" height="15" fill="rgb(206,188,39)"/><text x="18.9528%" y="143.50"></text></g><g><title>thir_body (4,390,934 samples, 0.95%)</title><rect x="19.8641%" y="133" width="0.9521%" height="15" fill="rgb(217,207,13)"/><text x="20.1141%" y="143.50"></text></g><g><title>mir_const (34,448,857 samples, 7.47%)</title><rect x="13.3814%" y="181" width="7.4695%" height="15" fill="rgb(231,73,38)"/><text x="13.6314%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (30,323,170 samples, 6.57%)</title><rect x="14.2760%" y="165" width="6.5749%" height="15" fill="rgb(225,20,46)"/><text x="14.5260%" y="175.50">unsafety_..</text></g><g><title>mir_built (27,121,811 samples, 5.88%)</title><rect x="14.9701%" y="149" width="5.8808%" height="15" fill="rgb(210,31,41)"/><text x="15.2201%" y="159.50">mir_bui..</text></g><g><title>mir_promoted (38,083,198 samples, 8.26%)</title><rect x="12.6620%" y="197" width="8.2575%" height="15" fill="rgb(221,200,47)"/><text x="12.9120%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,931,921 samples, 0.64%)</title><rect x="20.9196%" y="197" width="0.6357%" height="15" fill="rgb(226,26,5)"/><text x="21.1696%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (2,601,342 samples, 0.56%)</title><rect x="21.5553%" y="197" width="0.5640%" height="15" fill="rgb(249,33,26)"/><text x="21.8053%" y="207.50"></text></g><g><title>normalize_projection_ty (1,651,657 samples, 0.36%)</title><rect x="21.7612%" y="181" width="0.3581%" height="15" fill="rgb(235,183,28)"/><text x="22.0112%" y="191.50"></text></g><g><title>type_op_normalize_predicate (1,859,612 samples, 0.40%)</title><rect x="22.1194%" y="197" width="0.4032%" height="15" fill="rgb(221,5,38)"/><text x="22.3694%" y="207.50"></text></g><g><title>normalize_projection_ty (938,461 samples, 0.20%)</title><rect x="22.3191%" y="181" width="0.2035%" height="15" fill="rgb(247,18,42)"/><text x="22.5691%" y="191.50"></text></g><g><title>type_op_prove_predicate (11,486,544 samples, 2.49%)</title><rect x="22.5964%" y="197" width="2.4906%" height="15" fill="rgb(241,131,45)"/><text x="22.8464%" y="207.50">ty..</text></g><g><title>MIR_borrow_checking (113,929,300 samples, 24.70%)</title><rect x="0.3870%" y="229" width="24.7031%" height="15" fill="rgb(249,31,29)"/><text x="0.6370%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (113,547,925 samples, 24.62%)</title><rect x="0.4697%" y="213" width="24.6204%" height="15" fill="rgb(225,111,53)"/><text x="0.7197%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (583,119 samples, 0.13%)</title><rect x="25.1371%" y="229" width="0.1264%" height="15" fill="rgb(238,160,17)"/><text x="25.3871%" y="239.50"></text></g><g><title>codegen_fn_attrs (786,793 samples, 0.17%)</title><rect x="25.4235%" y="197" width="0.1706%" height="15" fill="rgb(214,148,48)"/><text x="25.6735%" y="207.50"></text></g><g><title>check_mod_attrs (1,478,708 samples, 0.32%)</title><rect x="25.2735%" y="213" width="0.3206%" height="15" fill="rgb(232,36,49)"/><text x="25.5235%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (1,007,670 samples, 0.22%)</title><rect x="25.7262%" y="213" width="0.2185%" height="15" fill="rgb(209,103,24)"/><text x="25.9762%" y="223.50"></text></g><g><title>misc_checking_1 (3,279,746 samples, 0.71%)</title><rect x="25.2636%" y="229" width="0.7111%" height="15" fill="rgb(229,88,8)"/><text x="25.5136%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (2,497,538 samples, 0.54%)</title><rect x="25.9753%" y="213" width="0.5415%" height="15" fill="rgb(213,181,19)"/><text x="26.2253%" y="223.50"></text></g><g><title>check_mod_liveness (2,130,896 samples, 0.46%)</title><rect x="26.0548%" y="197" width="0.4620%" height="15" fill="rgb(254,191,54)"/><text x="26.3048%" y="207.50"></text></g><g><title>type_uninhabited_from (751,281 samples, 0.16%)</title><rect x="26.3540%" y="181" width="0.1629%" height="15" fill="rgb(241,83,37)"/><text x="26.6040%" y="191.50"></text></g><g><title>type_uninhabited_from (553,059 samples, 0.12%)</title><rect x="26.3970%" y="165" width="0.1199%" height="15" fill="rgb(233,36,39)"/><text x="26.6470%" y="175.50"></text></g><g><title>eval_to_const_value_raw (574,626 samples, 0.12%)</title><rect x="26.9646%" y="181" width="0.1246%" height="15" fill="rgb(226,3,54)"/><text x="27.2146%" y="191.50"></text></g><g><title>eval_to_const_value_raw (573,326 samples, 0.12%)</title><rect x="26.9648%" y="165" width="0.1243%" height="15" fill="rgb(245,192,40)"/><text x="27.2148%" y="175.50"></text></g><g><title>eval_to_allocation_raw (571,656 samples, 0.12%)</title><rect x="26.9652%" y="149" width="0.1240%" height="15" fill="rgb(238,167,29)"/><text x="27.2152%" y="159.50"></text></g><g><title>misc_checking_2 (5,787,594 samples, 1.25%)</title><rect x="25.9748%" y="229" width="1.2549%" height="15" fill="rgb(232,182,51)"/><text x="26.2248%" y="239.50"></text></g><g><title>match_checking (3,287,526 samples, 0.71%)</title><rect x="26.5169%" y="213" width="0.7128%" height="15" fill="rgb(231,60,39)"/><text x="26.7669%" y="223.50"></text></g><g><title>check_match (3,187,456 samples, 0.69%)</title><rect x="26.5386%" y="197" width="0.6911%" height="15" fill="rgb(208,69,12)"/><text x="26.7886%" y="207.50"></text></g><g><title>check_private_in_public (772,078 samples, 0.17%)</title><rect x="27.2322%" y="213" width="0.1674%" height="15" fill="rgb(235,93,37)"/><text x="27.4822%" y="223.50"></text></g><g><title>death_checking (1,675,849 samples, 0.36%)</title><rect x="27.3997%" y="213" width="0.3634%" height="15" fill="rgb(213,116,39)"/><text x="27.6497%" y="223.50"></text></g><g><title>param_env (1,452,536 samples, 0.31%)</title><rect x="28.2341%" y="181" width="0.3150%" height="15" fill="rgb(222,207,29)"/><text x="28.4841%" y="191.50"></text></g><g><title>predicates_of (728,356 samples, 0.16%)</title><rect x="28.3911%" y="165" width="0.1579%" height="15" fill="rgb(206,96,30)"/><text x="28.6411%" y="175.50"></text></g><g><title>predicates_defined_on (564,245 samples, 0.12%)</title><rect x="28.4267%" y="149" width="0.1223%" height="15" fill="rgb(218,138,4)"/><text x="28.6767%" y="159.50"></text></g><g><title>crate_lints (5,381,700 samples, 1.17%)</title><rect x="27.7636%" y="197" width="1.1669%" height="15" fill="rgb(250,191,14)"/><text x="28.0136%" y="207.50"></text></g><g><title>type_of (1,527,255 samples, 0.33%)</title><rect x="28.5994%" y="181" width="0.3312%" height="15" fill="rgb(239,60,40)"/><text x="28.8494%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,198,294 samples, 0.26%)</title><rect x="28.6707%" y="165" width="0.2598%" height="15" fill="rgb(206,27,48)"/><text x="28.9207%" y="175.50"></text></g><g><title>lint_checking (8,118,230 samples, 1.76%)</title><rect x="27.7630%" y="213" width="1.7603%" height="15" fill="rgb(225,35,8)"/><text x="28.0130%" y="223.50"></text></g><g><title>module_lints (2,733,820 samples, 0.59%)</title><rect x="28.9305%" y="197" width="0.5928%" height="15" fill="rgb(250,213,24)"/><text x="29.1805%" y="207.50"></text></g><g><title>lint_mod (2,717,029 samples, 0.59%)</title><rect x="28.9342%" y="181" width="0.5891%" height="15" fill="rgb(247,123,22)"/><text x="29.1842%" y="191.50"></text></g><g><title>layout_of (503,696 samples, 0.11%)</title><rect x="29.4141%" y="165" width="0.1092%" height="15" fill="rgb(231,138,38)"/><text x="29.6641%" y="175.50"></text></g><g><title>privacy_access_levels (905,970 samples, 0.20%)</title><rect x="29.5233%" y="213" width="0.1964%" height="15" fill="rgb(231,145,46)"/><text x="29.7733%" y="223.50"></text></g><g><title>privacy_checking_modules (3,916,323 samples, 0.85%)</title><rect x="29.7197%" y="213" width="0.8492%" height="15" fill="rgb(251,118,11)"/><text x="29.9697%" y="223.50"></text></g><g><title>check_mod_privacy (3,905,613 samples, 0.85%)</title><rect x="29.7220%" y="197" width="0.8468%" height="15" fill="rgb(217,147,25)"/><text x="29.9720%" y="207.50"></text></g><g><title>misc_checking_3 (15,434,700 samples, 3.35%)</title><rect x="27.2297%" y="229" width="3.3467%" height="15" fill="rgb(247,81,37)"/><text x="27.4797%" y="239.50">mis..</text></g><g><title>adt_destructor (528,226 samples, 0.11%)</title><rect x="30.6479%" y="181" width="0.1145%" height="15" fill="rgb(209,12,38)"/><text x="30.8979%" y="191.50"></text></g><g><title>coherent_trait (525,026 samples, 0.11%)</title><rect x="30.6486%" y="165" width="0.1138%" height="15" fill="rgb(227,1,9)"/><text x="30.8986%" y="175.50"></text></g><g><title>specialization_graph_of (523,046 samples, 0.11%)</title><rect x="30.6490%" y="149" width="0.1134%" height="15" fill="rgb(248,47,43)"/><text x="30.8990%" y="159.50"></text></g><g><title>impl_parent (3,664,537 samples, 0.79%)</title><rect x="32.0412%" y="165" width="0.7946%" height="15" fill="rgb(221,10,30)"/><text x="32.2912%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,014,269 samples, 0.44%)</title><rect x="32.3990%" y="149" width="0.4367%" height="15" fill="rgb(210,229,1)"/><text x="32.6490%" y="159.50"></text></g><g><title>impl_trait_ref (7,635,599 samples, 1.66%)</title><rect x="32.8357%" y="165" width="1.6556%" height="15" fill="rgb(222,148,37)"/><text x="33.0857%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,024,471 samples, 1.31%)</title><rect x="33.1851%" y="149" width="1.3063%" height="15" fill="rgb(234,67,33)"/><text x="33.4351%" y="159.50"></text></g><g><title>trait_impls_of (1,560,939 samples, 0.34%)</title><rect x="34.4965%" y="165" width="0.3385%" height="15" fill="rgb(247,98,35)"/><text x="34.7465%" y="175.50"></text></g><g><title>implementations_of_trait (463,775 samples, 0.10%)</title><rect x="34.7344%" y="149" width="0.1006%" height="15" fill="rgb(247,138,52)"/><text x="34.9844%" y="159.50"></text></g><g><title>coherent_trait (19,362,473 samples, 4.20%)</title><rect x="30.6369%" y="197" width="4.1983%" height="15" fill="rgb(213,79,30)"/><text x="30.8869%" y="207.50">coher..</text></g><g><title>specialization_graph_of (18,633,695 samples, 4.04%)</title><rect x="30.7949%" y="181" width="4.0403%" height="15" fill="rgb(246,177,23)"/><text x="31.0449%" y="191.50">spec..</text></g><g><title>coherence_checking (19,515,026 samples, 4.23%)</title><rect x="30.6307%" y="213" width="4.2314%" height="15" fill="rgb(230,62,27)"/><text x="30.8807%" y="223.50">coher..</text></g><g><title>associated_item (468,184 samples, 0.10%)</title><rect x="45.7075%" y="149" width="0.1015%" height="15" fill="rgb(216,154,8)"/><text x="45.9575%" y="159.50"></text></g><g><title>associated_items (724,378 samples, 0.16%)</title><rect x="45.6626%" y="165" width="0.1571%" height="15" fill="rgb(244,35,45)"/><text x="45.9126%" y="175.50"></text></g><g><title>dropck_outlives (1,376,003 samples, 0.30%)</title><rect x="45.8509%" y="165" width="0.2984%" height="15" fill="rgb(251,115,12)"/><text x="46.1009%" y="175.50"></text></g><g><title>mir_for_ctfe (843,316 samples, 0.18%)</title><rect x="47.9031%" y="101" width="0.1829%" height="15" fill="rgb(240,54,50)"/><text x="48.1531%" y="111.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (833,466 samples, 0.18%)</title><rect x="47.9052%" y="85" width="0.1807%" height="15" fill="rgb(233,84,52)"/><text x="48.1552%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,629,266 samples, 0.35%)</title><rect x="47.7391%" y="149" width="0.3533%" height="15" fill="rgb(207,117,47)"/><text x="47.9891%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,604,756 samples, 0.35%)</title><rect x="47.7444%" y="133" width="0.3480%" height="15" fill="rgb(249,43,39)"/><text x="47.9944%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,554,836 samples, 0.34%)</title><rect x="47.7552%" y="117" width="0.3371%" height="15" fill="rgb(209,38,44)"/><text x="48.0052%" y="127.50"></text></g><g><title>generics_of (1,002,286 samples, 0.22%)</title><rect x="48.0924%" y="149" width="0.2173%" height="15" fill="rgb(236,212,23)"/><text x="48.3424%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (727,243 samples, 0.16%)</title><rect x="48.1520%" y="133" width="0.1577%" height="15" fill="rgb(242,79,21)"/><text x="48.4020%" y="143.50"></text></g><g><title>impl_trait_ref (1,219,605 samples, 0.26%)</title><rect x="48.3587%" y="149" width="0.2644%" height="15" fill="rgb(211,96,35)"/><text x="48.6087%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (958,943 samples, 0.21%)</title><rect x="48.4152%" y="133" width="0.2079%" height="15" fill="rgb(253,215,40)"/><text x="48.6652%" y="143.50"></text></g><g><title>predicates_of (1,223,133 samples, 0.27%)</title><rect x="48.6382%" y="149" width="0.2652%" height="15" fill="rgb(211,81,21)"/><text x="48.8882%" y="159.50"></text></g><g><title>predicates_defined_on (718,705 samples, 0.16%)</title><rect x="48.7476%" y="133" width="0.1558%" height="15" fill="rgb(208,190,38)"/><text x="48.9976%" y="143.50"></text></g><g><title>specializes (2,908,233 samples, 0.63%)</title><rect x="48.9189%" y="149" width="0.6306%" height="15" fill="rgb(235,213,38)"/><text x="49.1689%" y="159.50"></text></g><g><title>param_env (1,872,280 samples, 0.41%)</title><rect x="49.1435%" y="133" width="0.4060%" height="15" fill="rgb(237,122,38)"/><text x="49.3935%" y="143.50"></text></g><g><title>def_span (1,022,324 samples, 0.22%)</title><rect x="49.3278%" y="117" width="0.2217%" height="15" fill="rgb(244,218,35)"/><text x="49.5778%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (720,301 samples, 0.16%)</title><rect x="49.3933%" y="101" width="0.1562%" height="15" fill="rgb(240,68,47)"/><text x="49.6433%" y="111.50"></text></g><g><title>trait_impls_of (772,628 samples, 0.17%)</title><rect x="49.5540%" y="149" width="0.1675%" height="15" fill="rgb(210,16,53)"/><text x="49.8040%" y="159.50"></text></g><g><title>evaluate_obligation (16,517,952 samples, 3.58%)</title><rect x="46.1501%" y="165" width="3.5816%" height="15" fill="rgb(235,124,12)"/><text x="46.4001%" y="175.50">eval..</text></g><g><title>item_attrs (476,089 samples, 0.10%)</title><rect x="49.8997%" y="165" width="0.1032%" height="15" fill="rgb(224,169,11)"/><text x="50.1497%" y="175.50"></text></g><g><title>evaluate_obligation (1,007,408 samples, 0.22%)</title><rect x="50.2506%" y="149" width="0.2184%" height="15" fill="rgb(250,166,2)"/><text x="50.5006%" y="159.50"></text></g><g><title>method_autoderef_steps (2,041,969 samples, 0.44%)</title><rect x="50.0318%" y="165" width="0.4428%" height="15" fill="rgb(242,216,29)"/><text x="50.2818%" y="175.50"></text></g><g><title>predicates_of (670,549 samples, 0.15%)</title><rect x="50.5507%" y="165" width="0.1454%" height="15" fill="rgb(230,116,27)"/><text x="50.8007%" y="175.50"></text></g><g><title>associated_items (803,998 samples, 0.17%)</title><rect x="61.1156%" y="149" width="0.1743%" height="15" fill="rgb(228,99,48)"/><text x="61.3656%" y="159.50"></text></g><g><title>adt_dtorck_constraint (606,156 samples, 0.13%)</title><rect x="61.8606%" y="101" width="0.1314%" height="15" fill="rgb(253,11,6)"/><text x="62.1106%" y="111.50"></text></g><g><title>adt_dtorck_constraint (980,988 samples, 0.21%)</title><rect x="61.7930%" y="117" width="0.2127%" height="15" fill="rgb(247,143,39)"/><text x="62.0430%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,726,941 samples, 0.37%)</title><rect x="61.6798%" y="133" width="0.3744%" height="15" fill="rgb(236,97,10)"/><text x="61.9298%" y="143.50"></text></g><g><title>dropck_outlives (4,314,115 samples, 0.94%)</title><rect x="61.3154%" y="149" width="0.9354%" height="15" fill="rgb(233,208,19)"/><text x="61.5654%" y="159.50"></text></g><g><title>normalize_projection_ty (906,291 samples, 0.20%)</title><rect x="62.0543%" y="133" width="0.1965%" height="15" fill="rgb(216,164,2)"/><text x="62.3043%" y="143.50"></text></g><g><title>evaluate_obligation (7,705,715 samples, 1.67%)</title><rect x="62.2526%" y="149" width="1.6708%" height="15" fill="rgb(220,129,5)"/><text x="62.5026%" y="159.50"></text></g><g><title>is_copy_raw (887,230 samples, 0.19%)</title><rect x="64.1263%" y="149" width="0.1924%" height="15" fill="rgb(242,17,10)"/><text x="64.3763%" y="159.50"></text></g><g><title>evaluate_obligation (672,907 samples, 0.15%)</title><rect x="64.1728%" y="133" width="0.1459%" height="15" fill="rgb(242,107,0)"/><text x="64.4228%" y="143.50"></text></g><g><title>evaluate_obligation (912,801 samples, 0.20%)</title><rect x="64.6271%" y="133" width="0.1979%" height="15" fill="rgb(251,28,31)"/><text x="64.8771%" y="143.50"></text></g><g><title>method_autoderef_steps (1,940,968 samples, 0.42%)</title><rect x="64.4059%" y="149" width="0.4209%" height="15" fill="rgb(233,223,10)"/><text x="64.6559%" y="159.50"></text></g><g><title>predicates_of (575,330 samples, 0.12%)</title><rect x="64.8509%" y="149" width="0.1247%" height="15" fill="rgb(215,21,27)"/><text x="65.1009%" y="159.50"></text></g><g><title>typeck (66,233,107 samples, 14.36%)</title><rect x="50.7505%" y="165" width="14.3612%" height="15" fill="rgb(232,23,21)"/><text x="51.0005%" y="175.50">typeck</text></g><g><title>item_bodies_checking (139,528,784 samples, 30.25%)</title><rect x="34.8779%" y="213" width="30.2537%" height="15" fill="rgb(244,5,23)"/><text x="35.1279%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (139,524,404 samples, 30.25%)</title><rect x="34.8788%" y="197" width="30.2528%" height="15" fill="rgb(226,81,46)"/><text x="35.1288%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (139,285,424 samples, 30.20%)</title><rect x="34.9306%" y="181" width="30.2010%" height="15" fill="rgb(247,70,30)"/><text x="35.1806%" y="191.50">typeck</text></g><g><title>mir_borrowck (597,496 samples, 0.13%)</title><rect x="67.1570%" y="133" width="0.1296%" height="15" fill="rgb(212,68,19)"/><text x="67.4070%" y="143.50"></text></g><g><title>mir_const (462,485 samples, 0.10%)</title><rect x="67.3509%" y="117" width="0.1003%" height="15" fill="rgb(240,187,13)"/><text x="67.6009%" y="127.50"></text></g><g><title>mir_promoted (767,447 samples, 0.17%)</title><rect x="67.2866%" y="133" width="0.1664%" height="15" fill="rgb(223,113,26)"/><text x="67.5366%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,149,702 samples, 0.25%)</title><rect x="67.6462%" y="133" width="0.2493%" height="15" fill="rgb(206,192,2)"/><text x="67.8962%" y="143.50"></text></g><g><title>mir_borrowck (8,291,322 samples, 1.80%)</title><rect x="66.0987%" y="149" width="1.7978%" height="15" fill="rgb(241,108,4)"/><text x="66.3487%" y="159.50">m..</text></g><g><title>associated_items (557,374 samples, 0.12%)</title><rect x="70.5270%" y="69" width="0.1209%" height="15" fill="rgb(247,173,49)"/><text x="70.7770%" y="79.50"></text></g><g><title>adt_dtorck_constraint (579,165 samples, 0.13%)</title><rect x="70.8628%" y="37" width="0.1256%" height="15" fill="rgb(224,114,35)"/><text x="71.1128%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,262,174 samples, 0.27%)</title><rect x="70.7383%" y="53" width="0.2737%" height="15" fill="rgb(245,159,27)"/><text x="70.9883%" y="63.50"></text></g><g><title>dropck_outlives (1,700,569 samples, 0.37%)</title><rect x="70.6582%" y="69" width="0.3687%" height="15" fill="rgb(245,172,44)"/><text x="70.9082%" y="79.50"></text></g><g><title>evaluate_obligation (2,423,416 samples, 0.53%)</title><rect x="71.0271%" y="69" width="0.5255%" height="15" fill="rgb(236,23,11)"/><text x="71.2771%" y="79.50"></text></g><g><title>trait_impls_of (487,035 samples, 0.11%)</title><rect x="71.4470%" y="53" width="0.1056%" height="15" fill="rgb(205,117,38)"/><text x="71.6970%" y="63.50"></text></g><g><title>mir_built (18,781,158 samples, 4.07%)</title><rect x="67.9765%" y="101" width="4.0723%" height="15" fill="rgb(237,72,25)"/><text x="68.2265%" y="111.50">mir_..</text></g><g><title>typeck (17,938,720 samples, 3.89%)</title><rect x="68.1591%" y="85" width="3.8896%" height="15" fill="rgb(244,70,9)"/><text x="68.4091%" y="95.50">type..</text></g><g><title>needs_drop_raw (515,005 samples, 0.11%)</title><rect x="72.3480%" y="69" width="0.1117%" height="15" fill="rgb(217,125,39)"/><text x="72.5980%" y="79.50"></text></g><g><title>mir_built (1,853,341 samples, 0.40%)</title><rect x="72.1329%" y="85" width="0.4019%" height="15" fill="rgb(235,36,10)"/><text x="72.3829%" y="95.50"></text></g><g><title>mir_const (21,395,327 samples, 4.64%)</title><rect x="67.9273%" y="133" width="4.6391%" height="15" fill="rgb(251,123,47)"/><text x="68.1773%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (21,233,505 samples, 4.60%)</title><rect x="67.9624%" y="117" width="4.6040%" height="15" fill="rgb(221,13,13)"/><text x="68.2124%" y="127.50">unsaf..</text></g><g><title>unsafety_check_result (2,387,246 samples, 0.52%)</title><rect x="72.0488%" y="101" width="0.5176%" height="15" fill="rgb(238,131,9)"/><text x="72.2988%" y="111.50"></text></g><g><title>mir_promoted (21,546,569 samples, 4.67%)</title><rect x="67.8965%" y="149" width="4.6719%" height="15" fill="rgb(211,50,8)"/><text x="68.1465%" y="159.50">mir_p..</text></g><g><title>type_of (31,645,240 samples, 6.86%)</title><rect x="65.7779%" y="181" width="6.8616%" height="15" fill="rgb(245,182,24)"/><text x="66.0279%" y="191.50">type_of</text></g><g><title>mir_borrowck (31,578,530 samples, 6.85%)</title><rect x="65.7924%" y="165" width="6.8471%" height="15" fill="rgb(242,14,37)"/><text x="66.0424%" y="175.50">mir_borro..</text></g><g><title>item_types_checking (35,359,411 samples, 7.67%)</title><rect x="65.1316%" y="213" width="7.6669%" height="15" fill="rgb(246,228,12)"/><text x="65.3816%" y="223.50">item_types..</text></g><g><title>check_mod_item_types (35,341,681 samples, 7.66%)</title><rect x="65.1355%" y="197" width="7.6631%" height="15" fill="rgb(213,55,15)"/><text x="65.3855%" y="207.50">check_mod_..</text></g><g><title>typeck (733,309 samples, 0.16%)</title><rect x="72.6395%" y="181" width="0.1590%" height="15" fill="rgb(209,9,3)"/><text x="72.8895%" y="191.50"></text></g><g><title>fn_sig (968,165 samples, 0.21%)</title><rect x="72.9623%" y="181" width="0.2099%" height="15" fill="rgb(230,59,30)"/><text x="73.2123%" y="191.50"></text></g><g><title>named_region_map (1,111,132 samples, 0.24%)</title><rect x="73.2331%" y="165" width="0.2409%" height="15" fill="rgb(209,121,21)"/><text x="73.4831%" y="175.50"></text></g><g><title>resolve_lifetimes (1,067,392 samples, 0.23%)</title><rect x="73.2426%" y="149" width="0.2314%" height="15" fill="rgb(220,109,13)"/><text x="73.4926%" y="159.50"></text></g><g><title>lint_levels (497,626 samples, 0.11%)</title><rect x="73.3662%" y="133" width="0.1079%" height="15" fill="rgb(232,18,1)"/><text x="73.6162%" y="143.50"></text></g><g><title>generics_of (1,426,835 samples, 0.31%)</title><rect x="73.1723%" y="181" width="0.3094%" height="15" fill="rgb(215,41,42)"/><text x="73.4223%" y="191.50"></text></g><g><title>explicit_predicates_of (572,984 samples, 0.12%)</title><rect x="73.5865%" y="149" width="0.1242%" height="15" fill="rgb(224,123,36)"/><text x="73.8365%" y="159.50"></text></g><g><title>predicates_of (2,173,692 samples, 0.47%)</title><rect x="73.5048%" y="181" width="0.4713%" height="15" fill="rgb(240,125,3)"/><text x="73.7548%" y="191.50"></text></g><g><title>predicates_defined_on (2,030,721 samples, 0.44%)</title><rect x="73.5358%" y="165" width="0.4403%" height="15" fill="rgb(205,98,50)"/><text x="73.7858%" y="175.50"></text></g><g><title>inferred_outlives_of (1,224,124 samples, 0.27%)</title><rect x="73.7107%" y="149" width="0.2654%" height="15" fill="rgb(205,185,37)"/><text x="73.9607%" y="159.50"></text></g><g><title>inferred_outlives_crate (1,168,543 samples, 0.25%)</title><rect x="73.7227%" y="133" width="0.2534%" height="15" fill="rgb(238,207,15)"/><text x="73.9727%" y="143.50"></text></g><g><title>type_of (782,438 samples, 0.17%)</title><rect x="73.8065%" y="117" width="0.1697%" height="15" fill="rgb(213,199,42)"/><text x="74.0565%" y="127.50"></text></g><g><title>type_collecting (5,584,683 samples, 1.21%)</title><rect x="72.8017%" y="213" width="1.2109%" height="15" fill="rgb(235,201,11)"/><text x="73.0517%" y="223.50"></text></g><g><title>collect_mod_item_types (5,559,123 samples, 1.21%)</title><rect x="72.8073%" y="197" width="1.2054%" height="15" fill="rgb(207,46,11)"/><text x="73.0573%" y="207.50"></text></g><g><title>evaluate_obligation (1,231,370 samples, 0.27%)</title><rect x="75.0678%" y="181" width="0.2670%" height="15" fill="rgb(241,35,35)"/><text x="75.3178%" y="191.50"></text></g><g><title>implied_outlives_bounds (561,356 samples, 0.12%)</title><rect x="75.3420%" y="181" width="0.1217%" height="15" fill="rgb(243,32,47)"/><text x="75.5920%" y="191.50"></text></g><g><title>param_env (683,565 samples, 0.15%)</title><rect x="75.4639%" y="181" width="0.1482%" height="15" fill="rgb(247,202,23)"/><text x="75.7139%" y="191.50"></text></g><g><title>region_scope_tree (1,330,321 samples, 0.29%)</title><rect x="75.6276%" y="181" width="0.2885%" height="15" fill="rgb(219,102,11)"/><text x="75.8776%" y="191.50"></text></g><g><title>check_impl_item_well_formed (8,308,336 samples, 1.80%)</title><rect x="74.1409%" y="197" width="1.8015%" height="15" fill="rgb(243,110,44)"/><text x="74.3909%" y="207.50">c..</text></g><g><title>adt_sized_constraint (545,946 samples, 0.12%)</title><rect x="76.8014%" y="149" width="0.1184%" height="15" fill="rgb(222,74,54)"/><text x="77.0514%" y="159.50"></text></g><g><title>adt_sized_constraint (993,003 samples, 0.22%)</title><rect x="76.7083%" y="165" width="0.2153%" height="15" fill="rgb(216,99,12)"/><text x="76.9583%" y="175.50"></text></g><g><title>evaluate_obligation (2,035,893 samples, 0.44%)</title><rect x="76.4934%" y="181" width="0.4414%" height="15" fill="rgb(226,22,26)"/><text x="76.7434%" y="191.50"></text></g><g><title>param_env (510,486 samples, 0.11%)</title><rect x="77.0789%" y="181" width="0.1107%" height="15" fill="rgb(217,163,10)"/><text x="77.3289%" y="191.50"></text></g><g><title>check_item_well_formed (6,192,105 samples, 1.34%)</title><rect x="75.9424%" y="197" width="1.3426%" height="15" fill="rgb(213,25,53)"/><text x="76.1924%" y="207.50"></text></g><g><title>analysis (356,128,279 samples, 77.22%)</title><rect x="0.2059%" y="245" width="77.2186%" height="15" fill="rgb(252,105,26)"/><text x="0.4559%" y="255.50">analysis</text></g><g><title>type_check_crate (216,061,121 samples, 46.85%)</title><rect x="30.5764%" y="229" width="46.8481%" height="15" fill="rgb(220,39,43)"/><text x="30.8264%" y="239.50">type_check_crate</text></g><g><title>wf_checking (15,718,294 samples, 3.41%)</title><rect x="74.0163%" y="213" width="3.4082%" height="15" fill="rgb(229,68,48)"/><text x="74.2663%" y="223.50">wf_..</text></g><g><title>check_trait_item_well_formed (643,377 samples, 0.14%)</title><rect x="77.2850%" y="197" width="0.1395%" height="15" fill="rgb(252,8,32)"/><text x="77.5350%" y="207.50"></text></g><g><title>codegen_crate (502,366 samples, 0.11%)</title><rect x="77.4265%" y="245" width="0.1089%" height="15" fill="rgb(223,20,43)"/><text x="77.6765%" y="255.50"></text></g><g><title>metadata_load_macro (484,978 samples, 0.11%)</title><rect x="88.8640%" y="197" width="0.1052%" height="15" fill="rgb(229,81,49)"/><text x="89.1140%" y="207.50"></text></g><g><title>metadata_register_crate (5,082,756 samples, 1.10%)</title><rect x="88.9692%" y="197" width="1.1021%" height="15" fill="rgb(236,28,36)"/><text x="89.2192%" y="207.50"></text></g><g><title>metadata_register_crate (2,604,459 samples, 0.56%)</title><rect x="89.5065%" y="181" width="0.5647%" height="15" fill="rgb(249,185,26)"/><text x="89.7565%" y="191.50"></text></g><g><title>metadata_register_crate (731,679 samples, 0.16%)</title><rect x="89.9126%" y="165" width="0.1586%" height="15" fill="rgb(249,174,33)"/><text x="90.1626%" y="175.50"></text></g><g><title>macro_expand_crate (58,084,573 samples, 12.59%)</title><rect x="77.7178%" y="229" width="12.5944%" height="15" fill="rgb(233,201,37)"/><text x="77.9678%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (58,071,363 samples, 12.59%)</title><rect x="77.7206%" y="213" width="12.5915%" height="15" fill="rgb(221,78,26)"/><text x="77.9706%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,110,852 samples, 0.24%)</title><rect x="90.0713%" y="197" width="0.2409%" height="15" fill="rgb(250,127,30)"/><text x="90.3213%" y="207.50"></text></g><g><title>late_resolve_crate (5,641,612 samples, 1.22%)</title><rect x="90.4863%" y="213" width="1.2233%" height="15" fill="rgb(230,49,44)"/><text x="90.7363%" y="223.50"></text></g><g><title>configure_and_expand (65,715,307 samples, 14.25%)</title><rect x="77.5354%" y="245" width="14.2489%" height="15" fill="rgb(229,67,23)"/><text x="77.7854%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (6,686,994 samples, 1.45%)</title><rect x="90.3344%" y="229" width="1.4499%" height="15" fill="rgb(249,83,47)"/><text x="90.5844%" y="239.50"></text></g><g><title>drop_ast (555,237 samples, 0.12%)</title><rect x="91.7844%" y="245" width="0.1204%" height="15" fill="rgb(215,43,3)"/><text x="92.0344%" y="255.50"></text></g><g><title>early_lint_checks (1,074,082 samples, 0.23%)</title><rect x="91.9098%" y="245" width="0.2329%" height="15" fill="rgb(238,154,13)"/><text x="92.1598%" y="255.50"></text></g><g><title>free_global_ctxt (7,200,760 samples, 1.56%)</title><rect x="92.1427%" y="245" width="1.5613%" height="15" fill="rgb(219,56,2)"/><text x="92.3927%" y="255.50"></text></g><g><title>is_copy_raw (772,110 samples, 0.17%)</title><rect x="96.9904%" y="181" width="0.1674%" height="15" fill="rgb(233,0,4)"/><text x="97.2404%" y="191.50"></text></g><g><title>evaluate_obligation (627,257 samples, 0.14%)</title><rect x="97.0218%" y="165" width="0.1360%" height="15" fill="rgb(235,30,7)"/><text x="97.2718%" y="175.50"></text></g><g><title>needs_drop_raw (974,521 samples, 0.21%)</title><rect x="96.9483%" y="197" width="0.2113%" height="15" fill="rgb(250,79,13)"/><text x="97.1983%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,126,737 samples, 1.33%)</title><rect x="95.8672%" y="213" width="1.3284%" height="15" fill="rgb(211,146,34)"/><text x="96.1172%" y="223.50"></text></g><g><title>optimized_mir (11,583,546 samples, 2.51%)</title><rect x="94.6854%" y="229" width="2.5116%" height="15" fill="rgb(228,22,38)"/><text x="94.9354%" y="239.50">op..</text></g><g><title>generate_crate_metadata (16,374,612 samples, 3.55%)</title><rect x="93.7040%" y="245" width="3.5505%" height="15" fill="rgb(235,168,5)"/><text x="93.9540%" y="255.50">gene..</text></g><g><title>hir_lowering (9,331,683 samples, 2.02%)</title><rect x="97.2545%" y="245" width="2.0234%" height="15" fill="rgb(221,155,16)"/><text x="97.5045%" y="255.50">h..</text></g><g><title>self_profile_alloc_query_strings (2,055,292 samples, 0.45%)</title><rect x="99.4182%" y="245" width="0.4456%" height="15" fill="rgb(215,215,53)"/><text x="99.6682%" y="255.50"></text></g><g><title>all (461,195,042 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (461,195,042 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (508,025 samples, 0.11%)</title><rect x="99.8898%" y="245" width="0.1102%" height="15" fill="rgb(227,97,0)"/><text x="100.1398%" y="255.50"></text></g></svg></svg>