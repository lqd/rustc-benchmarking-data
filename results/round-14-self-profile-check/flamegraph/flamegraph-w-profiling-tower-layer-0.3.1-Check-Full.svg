<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (61,300 samples, 0.13%)</title><rect x="6.6888%" y="149" width="0.1282%" height="15" fill="rgb(227,0,7)"/><text x="6.9388%" y="159.50"></text></g><g><title>param_env (49,060 samples, 0.10%)</title><rect x="7.7908%" y="117" width="0.1026%" height="15" fill="rgb(217,0,24)"/><text x="8.0408%" y="127.50"></text></g><g><title>item_attrs (56,961 samples, 0.12%)</title><rect x="8.1793%" y="85" width="0.1191%" height="15" fill="rgb(221,193,54)"/><text x="8.4293%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (55,021 samples, 0.12%)</title><rect x="8.1834%" y="69" width="0.1151%" height="15" fill="rgb(248,212,6)"/><text x="8.4334%" y="79.50"></text></g><g><title>codegen_fn_attrs (82,681 samples, 0.17%)</title><rect x="8.1299%" y="101" width="0.1729%" height="15" fill="rgb(208,68,35)"/><text x="8.3799%" y="111.50"></text></g><g><title>is_copy_raw (55,561 samples, 0.12%)</title><rect x="9.4503%" y="53" width="0.1162%" height="15" fill="rgb(232,128,0)"/><text x="9.7003%" y="63.50"></text></g><g><title>evaluate_obligation (51,801 samples, 0.11%)</title><rect x="9.4581%" y="37" width="0.1083%" height="15" fill="rgb(207,160,47)"/><text x="9.7081%" y="47.50"></text></g><g><title>adt_drop_tys (71,611 samples, 0.15%)</title><rect x="9.4387%" y="69" width="0.1498%" height="15" fill="rgb(228,23,34)"/><text x="9.6887%" y="79.50"></text></g><g><title>needs_drop_raw (372,514 samples, 0.78%)</title><rect x="9.3620%" y="85" width="0.7790%" height="15" fill="rgb(218,30,26)"/><text x="9.6120%" y="95.50"></text></g><g><title>is_copy_raw (264,232 samples, 0.55%)</title><rect x="9.5885%" y="69" width="0.5526%" height="15" fill="rgb(220,122,19)"/><text x="9.8385%" y="79.50"></text></g><g><title>evaluate_obligation (216,672 samples, 0.45%)</title><rect x="9.6879%" y="53" width="0.4531%" height="15" fill="rgb(250,228,42)"/><text x="9.9379%" y="63.50"></text></g><g><title>resolve_instance (148,542 samples, 0.31%)</title><rect x="10.1410%" y="85" width="0.3106%" height="15" fill="rgb(240,193,28)"/><text x="10.3910%" y="95.50"></text></g><g><title>thir_body (190,741 samples, 0.40%)</title><rect x="10.4647%" y="85" width="0.3989%" height="15" fill="rgb(216,20,37)"/><text x="10.7147%" y="95.50"></text></g><g><title>mir_const (1,690,480 samples, 3.54%)</title><rect x="7.3451%" y="133" width="3.5351%" height="15" fill="rgb(206,188,39)"/><text x="7.5951%" y="143.50">mir..</text></g><g><title>unsafety_check_result (1,428,288 samples, 2.99%)</title><rect x="7.8934%" y="117" width="2.9868%" height="15" fill="rgb(217,207,13)"/><text x="8.1434%" y="127.50">uns..</text></g><g><title>mir_built (1,232,535 samples, 2.58%)</title><rect x="8.3028%" y="101" width="2.5775%" height="15" fill="rgb(231,73,38)"/><text x="8.5528%" y="111.50">mi..</text></g><g><title>mir_promoted (1,955,553 samples, 4.09%)</title><rect x="6.8170%" y="149" width="4.0895%" height="15" fill="rgb(225,20,46)"/><text x="7.0670%" y="159.50">mir_..</text></g><g><title>type_op_ascribe_user_type (115,301 samples, 0.24%)</title><rect x="10.9065%" y="149" width="0.2411%" height="15" fill="rgb(210,31,41)"/><text x="11.1565%" y="159.50"></text></g><g><title>type_op_normalize_ty (165,253 samples, 0.35%)</title><rect x="11.2416%" y="149" width="0.3456%" height="15" fill="rgb(221,200,47)"/><text x="11.4916%" y="159.50"></text></g><g><title>normalize_projection_ty (125,442 samples, 0.26%)</title><rect x="11.3249%" y="133" width="0.2623%" height="15" fill="rgb(226,26,5)"/><text x="11.5749%" y="143.50"></text></g><g><title>type_op_prove_predicate (593,698 samples, 1.24%)</title><rect x="11.5872%" y="149" width="1.2415%" height="15" fill="rgb(249,33,26)"/><text x="11.8372%" y="159.50"></text></g><g><title>MIR_borrow_checking (5,534,101 samples, 11.57%)</title><rect x="1.2628%" y="181" width="11.5729%" height="15" fill="rgb(235,183,28)"/><text x="1.5128%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (5,510,421 samples, 11.52%)</title><rect x="1.3123%" y="165" width="11.5234%" height="15" fill="rgb(221,5,38)"/><text x="1.5623%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (101,482 samples, 0.21%)</title><rect x="12.8506%" y="181" width="0.2122%" height="15" fill="rgb(247,18,42)"/><text x="13.1006%" y="191.50"></text></g><g><title>get_lang_items (63,911 samples, 0.13%)</title><rect x="13.4113%" y="133" width="0.1337%" height="15" fill="rgb(241,131,45)"/><text x="13.6613%" y="143.50"></text></g><g><title>codegen_fn_attrs (48,961 samples, 0.10%)</title><rect x="13.6570%" y="117" width="0.1024%" height="15" fill="rgb(249,31,29)"/><text x="13.9070%" y="127.50"></text></g><g><title>should_inherit_track_caller (105,332 samples, 0.22%)</title><rect x="13.5450%" y="133" width="0.2203%" height="15" fill="rgb(225,111,53)"/><text x="13.7950%" y="143.50"></text></g><g><title>codegen_fn_attrs (234,453 samples, 0.49%)</title><rect x="13.3157%" y="149" width="0.4903%" height="15" fill="rgb(238,160,17)"/><text x="13.5657%" y="159.50"></text></g><g><title>check_mod_attrs (329,213 samples, 0.69%)</title><rect x="13.1179%" y="165" width="0.6885%" height="15" fill="rgb(214,148,48)"/><text x="13.3679%" y="175.50"></text></g><g><title>lookup_deprecation_entry (69,121 samples, 0.14%)</title><rect x="14.1070%" y="149" width="0.1445%" height="15" fill="rgb(232,36,49)"/><text x="14.3570%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (185,852 samples, 0.39%)</title><rect x="13.9601%" y="165" width="0.3887%" height="15" fill="rgb(209,103,24)"/><text x="14.2101%" y="175.50"></text></g><g><title>misc_checking_1 (646,517 samples, 1.35%)</title><rect x="13.0636%" y="181" width="1.3520%" height="15" fill="rgb(229,88,8)"/><text x="13.3136%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (110,422 samples, 0.23%)</title><rect x="14.4182%" y="165" width="0.2309%" height="15" fill="rgb(213,181,19)"/><text x="14.6682%" y="175.50"></text></g><g><title>check_mod_liveness (80,611 samples, 0.17%)</title><rect x="14.4805%" y="149" width="0.1686%" height="15" fill="rgb(254,191,54)"/><text x="14.7305%" y="159.50"></text></g><g><title>misc_checking_2 (223,513 samples, 0.47%)</title><rect x="14.4156%" y="181" width="0.4674%" height="15" fill="rgb(241,83,37)"/><text x="14.6656%" y="191.50"></text></g><g><title>match_checking (111,861 samples, 0.23%)</title><rect x="14.6491%" y="165" width="0.2339%" height="15" fill="rgb(233,36,39)"/><text x="14.8991%" y="175.50"></text></g><g><title>check_match (104,261 samples, 0.22%)</title><rect x="14.6650%" y="149" width="0.2180%" height="15" fill="rgb(226,3,54)"/><text x="14.9150%" y="159.50"></text></g><g><title>check_private_in_public (70,051 samples, 0.15%)</title><rect x="14.9004%" y="165" width="0.1465%" height="15" fill="rgb(245,192,40)"/><text x="15.1504%" y="175.50"></text></g><g><title>death_checking (198,382 samples, 0.41%)</title><rect x="15.0468%" y="165" width="0.4149%" height="15" fill="rgb(238,167,29)"/><text x="15.2968%" y="175.50"></text></g><g><title>item_attrs (73,020 samples, 0.15%)</title><rect x="15.3090%" y="149" width="0.1527%" height="15" fill="rgb(232,182,51)"/><text x="15.5590%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (72,220 samples, 0.15%)</title><rect x="15.3107%" y="133" width="0.1510%" height="15" fill="rgb(231,60,39)"/><text x="15.5607%" y="143.50"></text></g><g><title>param_env (115,661 samples, 0.24%)</title><rect x="16.4970%" y="133" width="0.2419%" height="15" fill="rgb(208,69,12)"/><text x="16.7470%" y="143.50"></text></g><g><title>predicates_of (57,760 samples, 0.12%)</title><rect x="16.6180%" y="117" width="0.1208%" height="15" fill="rgb(235,93,37)"/><text x="16.8680%" y="127.50"></text></g><g><title>crate_lints (1,645,998 samples, 3.44%)</title><rect x="15.4644%" y="149" width="3.4421%" height="15" fill="rgb(213,116,39)"/><text x="15.7144%" y="159.50">cra..</text></g><g><title>type_of (1,036,552 samples, 2.17%)</title><rect x="16.7388%" y="133" width="2.1676%" height="15" fill="rgb(222,207,29)"/><text x="16.9888%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (807,859 samples, 1.69%)</title><rect x="17.2171%" y="117" width="1.6894%" height="15" fill="rgb(206,96,30)"/><text x="17.4671%" y="127.50"></text></g><g><title>lint_checking (1,750,570 samples, 3.66%)</title><rect x="15.4617%" y="165" width="3.6608%" height="15" fill="rgb(218,138,4)"/><text x="15.7117%" y="175.50">lint..</text></g><g><title>module_lints (103,302 samples, 0.22%)</title><rect x="18.9065%" y="149" width="0.2160%" height="15" fill="rgb(250,191,14)"/><text x="19.1565%" y="159.50"></text></g><g><title>lint_mod (99,322 samples, 0.21%)</title><rect x="18.9148%" y="133" width="0.2077%" height="15" fill="rgb(239,60,40)"/><text x="19.1648%" y="143.50"></text></g><g><title>privacy_access_levels (94,861 samples, 0.20%)</title><rect x="19.1225%" y="165" width="0.1984%" height="15" fill="rgb(206,27,48)"/><text x="19.3725%" y="175.50"></text></g><g><title>privacy_checking_modules (206,852 samples, 0.43%)</title><rect x="19.3209%" y="165" width="0.4326%" height="15" fill="rgb(225,35,8)"/><text x="19.5709%" y="175.50"></text></g><g><title>check_mod_privacy (203,032 samples, 0.42%)</title><rect x="19.3289%" y="149" width="0.4246%" height="15" fill="rgb(250,213,24)"/><text x="19.5789%" y="159.50"></text></g><g><title>misc_checking_3 (2,338,876 samples, 4.89%)</title><rect x="14.8830%" y="181" width="4.8911%" height="15" fill="rgb(247,123,22)"/><text x="15.1330%" y="191.50">misc_c..</text></g><g><title>impl_parent (54,341 samples, 0.11%)</title><rect x="20.0554%" y="85" width="0.1136%" height="15" fill="rgb(231,138,38)"/><text x="20.3054%" y="95.50"></text></g><g><title>impl_trait_ref (151,822 samples, 0.32%)</title><rect x="20.1691%" y="85" width="0.3175%" height="15" fill="rgb(231,145,46)"/><text x="20.4191%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (132,031 samples, 0.28%)</title><rect x="20.2105%" y="69" width="0.2761%" height="15" fill="rgb(251,118,11)"/><text x="20.4605%" y="79.50"></text></g><g><title>adt_destructor (300,154 samples, 0.63%)</title><rect x="19.9071%" y="133" width="0.6277%" height="15" fill="rgb(217,147,25)"/><text x="20.1571%" y="143.50"></text></g><g><title>coherent_trait (296,913 samples, 0.62%)</title><rect x="19.9138%" y="117" width="0.6209%" height="15" fill="rgb(247,81,37)"/><text x="20.1638%" y="127.50"></text></g><g><title>specialization_graph_of (295,683 samples, 0.62%)</title><rect x="19.9164%" y="101" width="0.6183%" height="15" fill="rgb(209,12,38)"/><text x="20.1664%" y="111.50"></text></g><g><title>is_copy_raw (80,590 samples, 0.17%)</title><rect x="20.5347%" y="133" width="0.1685%" height="15" fill="rgb(227,1,9)"/><text x="20.7847%" y="143.50"></text></g><g><title>evaluate_obligation (57,490 samples, 0.12%)</title><rect x="20.5831%" y="117" width="0.1202%" height="15" fill="rgb(248,47,43)"/><text x="20.8331%" y="127.50"></text></g><g><title>param_env (106,501 samples, 0.22%)</title><rect x="20.7033%" y="133" width="0.2227%" height="15" fill="rgb(221,10,30)"/><text x="20.9533%" y="143.50"></text></g><g><title>impl_parent (1,606,314 samples, 3.36%)</title><rect x="26.1524%" y="117" width="3.3591%" height="15" fill="rgb(210,229,1)"/><text x="26.4024%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (984,728 samples, 2.06%)</title><rect x="27.4522%" y="101" width="2.0593%" height="15" fill="rgb(222,148,37)"/><text x="27.7022%" y="111.50">m..</text></g><g><title>impl_trait_ref (4,458,386 samples, 9.32%)</title><rect x="29.5115%" y="117" width="9.3234%" height="15" fill="rgb(234,67,33)"/><text x="29.7615%" y="127.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,593,457 samples, 7.51%)</title><rect x="31.3202%" y="101" width="7.5146%" height="15" fill="rgb(247,98,35)"/><text x="31.5702%" y="111.50">metadata_d..</text></g><g><title>coherent_trait (9,594,946 samples, 20.06%)</title><rect x="19.8591%" y="149" width="20.0650%" height="15" fill="rgb(247,138,52)"/><text x="20.1091%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (9,084,760 samples, 19.00%)</title><rect x="20.9260%" y="133" width="18.9981%" height="15" fill="rgb(213,79,30)"/><text x="21.1760%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (518,775 samples, 1.08%)</title><rect x="38.8392%" y="117" width="1.0849%" height="15" fill="rgb(246,177,23)"/><text x="39.0892%" y="127.50"></text></g><g><title>implementations_of_trait (138,101 samples, 0.29%)</title><rect x="39.6353%" y="101" width="0.2888%" height="15" fill="rgb(230,62,27)"/><text x="39.8853%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (120,881 samples, 0.25%)</title><rect x="39.6713%" y="85" width="0.2528%" height="15" fill="rgb(216,154,8)"/><text x="39.9213%" y="95.50"></text></g><g><title>coherence_checking (9,648,417 samples, 20.18%)</title><rect x="19.8299%" y="165" width="20.1768%" height="15" fill="rgb(244,35,45)"/><text x="20.0799%" y="175.50">coherence_checking</text></g><g><title>associated_items (60,980 samples, 0.13%)</title><rect x="48.3608%" y="117" width="0.1275%" height="15" fill="rgb(251,115,12)"/><text x="48.6108%" y="127.50"></text></g><g><title>adt_dtorck_constraint (104,180 samples, 0.22%)</title><rect x="48.7774%" y="101" width="0.2179%" height="15" fill="rgb(240,54,50)"/><text x="49.0274%" y="111.50"></text></g><g><title>dropck_outlives (230,672 samples, 0.48%)</title><rect x="48.5449%" y="117" width="0.4824%" height="15" fill="rgb(233,84,52)"/><text x="48.7949%" y="127.50"></text></g><g><title>adt_sized_constraint (58,761 samples, 0.12%)</title><rect x="49.2776%" y="101" width="0.1229%" height="15" fill="rgb(207,117,47)"/><text x="49.5276%" y="111.50"></text></g><g><title>evaluate_obligation (244,841 samples, 0.51%)</title><rect x="49.0273%" y="117" width="0.5120%" height="15" fill="rgb(249,43,39)"/><text x="49.2773%" y="127.50"></text></g><g><title>method_autoderef_steps (136,822 samples, 0.29%)</title><rect x="49.9512%" y="117" width="0.2861%" height="15" fill="rgb(209,38,44)"/><text x="50.2012%" y="127.50"></text></g><g><title>evaluate_obligation (71,531 samples, 0.15%)</title><rect x="50.0877%" y="101" width="0.1496%" height="15" fill="rgb(236,212,23)"/><text x="50.3377%" y="111.50"></text></g><g><title>evaluate_obligation (67,221 samples, 0.14%)</title><rect x="50.3100%" y="101" width="0.1406%" height="15" fill="rgb(242,79,21)"/><text x="50.5600%" y="111.50"></text></g><g><title>object_safety_violations (141,262 samples, 0.30%)</title><rect x="50.2373%" y="117" width="0.2954%" height="15" fill="rgb(211,96,35)"/><text x="50.4873%" y="127.50"></text></g><g><title>explicit_predicates_of (81,111 samples, 0.17%)</title><rect x="50.6651%" y="85" width="0.1696%" height="15" fill="rgb(253,215,40)"/><text x="50.9151%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (72,561 samples, 0.15%)</title><rect x="50.6829%" y="69" width="0.1517%" height="15" fill="rgb(211,81,21)"/><text x="50.9329%" y="79.50"></text></g><g><title>predicates_of (147,072 samples, 0.31%)</title><rect x="50.5583%" y="117" width="0.3076%" height="15" fill="rgb(208,190,38)"/><text x="50.8083%" y="127.50"></text></g><g><title>predicates_defined_on (119,201 samples, 0.25%)</title><rect x="50.6166%" y="101" width="0.2493%" height="15" fill="rgb(235,213,38)"/><text x="50.8666%" y="111.50"></text></g><g><title>item_bodies_checking (5,237,979 samples, 10.95%)</title><rect x="40.0581%" y="165" width="10.9537%" height="15" fill="rgb(237,122,38)"/><text x="40.3081%" y="175.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (5,235,919 samples, 10.95%)</title><rect x="40.0624%" y="149" width="10.9494%" height="15" fill="rgb(244,218,35)"/><text x="40.3124%" y="159.50">typeck_item_bodi..</text></g><g><title>typeck (5,217,168 samples, 10.91%)</title><rect x="40.1016%" y="133" width="10.9102%" height="15" fill="rgb(240,68,47)"/><text x="40.3516%" y="143.50">typeck</text></g><g><title>item_types_checking (635,257 samples, 1.33%)</title><rect x="51.0118%" y="165" width="1.3285%" height="15" fill="rgb(210,16,53)"/><text x="51.2618%" y="175.50"></text></g><g><title>check_mod_item_types (629,957 samples, 1.32%)</title><rect x="51.0229%" y="149" width="1.3174%" height="15" fill="rgb(235,124,12)"/><text x="51.2729%" y="159.50"></text></g><g><title>fn_sig (153,092 samples, 0.32%)</title><rect x="52.6202%" y="133" width="0.3201%" height="15" fill="rgb(224,169,11)"/><text x="52.8702%" y="143.50"></text></g><g><title>is_late_bound_map (103,471 samples, 0.22%)</title><rect x="53.0662%" y="117" width="0.2164%" height="15" fill="rgb(250,166,2)"/><text x="53.3162%" y="127.50"></text></g><g><title>resolve_lifetimes (95,581 samples, 0.20%)</title><rect x="53.0827%" y="101" width="0.1999%" height="15" fill="rgb(242,216,29)"/><text x="53.3327%" y="111.50"></text></g><g><title>lint_levels (49,910 samples, 0.10%)</title><rect x="53.1782%" y="85" width="0.1044%" height="15" fill="rgb(230,116,27)"/><text x="53.4282%" y="95.50"></text></g><g><title>named_region_map (49,030 samples, 0.10%)</title><rect x="53.2826%" y="117" width="0.1025%" height="15" fill="rgb(228,99,48)"/><text x="53.5326%" y="127.50"></text></g><g><title>generics_of (222,481 samples, 0.47%)</title><rect x="52.9403%" y="133" width="0.4653%" height="15" fill="rgb(253,11,6)"/><text x="53.1903%" y="143.50"></text></g><g><title>item_bounds (63,421 samples, 0.13%)</title><rect x="53.4631%" y="133" width="0.1326%" height="15" fill="rgb(247,143,39)"/><text x="53.7131%" y="143.50"></text></g><g><title>late_bound_vars_map (53,621 samples, 0.11%)</title><rect x="53.9702%" y="85" width="0.1121%" height="15" fill="rgb(236,97,10)"/><text x="54.2202%" y="95.50"></text></g><g><title>resolve_lifetimes (49,541 samples, 0.10%)</title><rect x="53.9787%" y="69" width="0.1036%" height="15" fill="rgb(233,208,19)"/><text x="54.2287%" y="79.50"></text></g><g><title>trait_explicit_predicates_and_bounds (48,751 samples, 0.10%)</title><rect x="54.1184%" y="85" width="0.1019%" height="15" fill="rgb(216,164,2)"/><text x="54.3684%" y="95.50"></text></g><g><title>explicit_predicates_of (252,893 samples, 0.53%)</title><rect x="53.7026%" y="101" width="0.5289%" height="15" fill="rgb(220,129,5)"/><text x="53.9526%" y="111.50"></text></g><g><title>predicates_of (343,174 samples, 0.72%)</title><rect x="53.5957%" y="133" width="0.7176%" height="15" fill="rgb(242,17,10)"/><text x="53.8457%" y="143.50"></text></g><g><title>predicates_defined_on (325,374 samples, 0.68%)</title><rect x="53.6329%" y="117" width="0.6804%" height="15" fill="rgb(242,107,0)"/><text x="53.8829%" y="127.50"></text></g><g><title>type_collecting (1,055,352 samples, 2.21%)</title><rect x="52.3428%" y="165" width="2.2070%" height="15" fill="rgb(251,28,31)"/><text x="52.5928%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,045,342 samples, 2.19%)</title><rect x="52.3637%" y="149" width="2.1860%" height="15" fill="rgb(233,223,10)"/><text x="52.6137%" y="159.50">c..</text></g><g><title>type_of (83,451 samples, 0.17%)</title><rect x="54.3752%" y="133" width="0.1745%" height="15" fill="rgb(215,21,27)"/><text x="54.6252%" y="143.50"></text></g><g><title>evaluate_obligation (261,223 samples, 0.55%)</title><rect x="56.1367%" y="133" width="0.5463%" height="15" fill="rgb(232,23,21)"/><text x="56.3867%" y="143.50"></text></g><g><title>implied_outlives_bounds (119,631 samples, 0.25%)</title><rect x="56.7119%" y="133" width="0.2502%" height="15" fill="rgb(244,5,23)"/><text x="56.9619%" y="143.50"></text></g><g><title>param_env (103,944 samples, 0.22%)</title><rect x="56.9621%" y="133" width="0.2174%" height="15" fill="rgb(226,81,46)"/><text x="57.2121%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,280,197 samples, 2.68%)</title><rect x="54.6979%" y="149" width="2.6772%" height="15" fill="rgb(247,70,30)"/><text x="54.9479%" y="159.50">ch..</text></g><g><title>region_scope_tree (69,540 samples, 0.15%)</title><rect x="57.2297%" y="133" width="0.1454%" height="15" fill="rgb(212,68,19)"/><text x="57.4797%" y="143.50"></text></g><g><title>implied_outlives_bounds (82,792 samples, 0.17%)</title><rect x="59.0251%" y="133" width="0.1731%" height="15" fill="rgb(240,187,13)"/><text x="59.2751%" y="143.50"></text></g><g><title>param_env (118,351 samples, 0.25%)</title><rect x="59.1993%" y="133" width="0.2475%" height="15" fill="rgb(223,113,26)"/><text x="59.4493%" y="143.50"></text></g><g><title>predicates_of (59,091 samples, 0.12%)</title><rect x="59.4468%" y="133" width="0.1236%" height="15" fill="rgb(206,192,2)"/><text x="59.6968%" y="143.50"></text></g><g><title>check_item_well_formed (1,144,190 samples, 2.39%)</title><rect x="57.3751%" y="149" width="2.3927%" height="15" fill="rgb(241,108,4)"/><text x="57.6251%" y="159.50">ch..</text></g><g><title>analysis (28,218,813 samples, 59.01%)</title><rect x="0.9889%" y="197" width="59.0112%" height="15" fill="rgb(247,173,49)"/><text x="1.2389%" y="207.50">analysis</text></g><g><title>type_check_crate (19,235,844 samples, 40.23%)</title><rect x="19.7741%" y="181" width="40.2260%" height="15" fill="rgb(224,114,35)"/><text x="20.0241%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,604,899 samples, 5.45%)</title><rect x="54.5527%" y="165" width="5.4474%" height="15" fill="rgb(245,159,27)"/><text x="54.8027%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (111,081 samples, 0.23%)</title><rect x="59.7678%" y="149" width="0.2323%" height="15" fill="rgb(245,172,44)"/><text x="60.0178%" y="159.50"></text></g><g><title>codegen_crate (374,514 samples, 0.78%)</title><rect x="60.0169%" y="197" width="0.7832%" height="15" fill="rgb(236,23,11)"/><text x="60.2669%" y="207.50"></text></g><g><title>AST_validation (58,780 samples, 0.12%)</title><rect x="61.1577%" y="181" width="0.1229%" height="15" fill="rgb(205,117,38)"/><text x="61.4077%" y="191.50"></text></g><g><title>crate_injection (72,801 samples, 0.15%)</title><rect x="61.3296%" y="181" width="0.1522%" height="15" fill="rgb(237,72,25)"/><text x="61.5796%" y="191.50"></text></g><g><title>metadata_load_macro (186,462 samples, 0.39%)</title><rect x="80.3927%" y="149" width="0.3899%" height="15" fill="rgb(244,70,9)"/><text x="80.6427%" y="159.50"></text></g><g><title>metadata_register_crate (2,094,423 samples, 4.38%)</title><rect x="80.7826%" y="149" width="4.3799%" height="15" fill="rgb(217,125,39)"/><text x="81.0326%" y="159.50">metad..</text></g><g><title>metadata_register_crate (774,219 samples, 1.62%)</title><rect x="83.5435%" y="133" width="1.6190%" height="15" fill="rgb(235,36,10)"/><text x="83.7935%" y="143.50"></text></g><g><title>metadata_register_crate (62,921 samples, 0.13%)</title><rect x="85.0309%" y="117" width="0.1316%" height="15" fill="rgb(251,123,47)"/><text x="85.2809%" y="127.50"></text></g><g><title>macro_expand_crate (11,403,857 samples, 23.85%)</title><rect x="61.4819%" y="181" width="23.8478%" height="15" fill="rgb(221,13,13)"/><text x="61.7319%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (11,386,577 samples, 23.81%)</title><rect x="61.5180%" y="165" width="23.8116%" height="15" fill="rgb(238,131,9)"/><text x="61.7680%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (79,930 samples, 0.17%)</title><rect x="85.1625%" y="149" width="0.1671%" height="15" fill="rgb(211,50,8)"/><text x="85.4125%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (93,021 samples, 0.19%)</title><rect x="85.3357%" y="181" width="0.1945%" height="15" fill="rgb(245,182,24)"/><text x="85.5857%" y="191.50"></text></g><g><title>finalize_macro_resolutions (114,061 samples, 0.24%)</title><rect x="85.5880%" y="165" width="0.2385%" height="15" fill="rgb(242,14,37)"/><text x="85.8380%" y="175.50"></text></g><g><title>late_resolve_crate (604,007 samples, 1.26%)</title><rect x="85.8265%" y="165" width="1.2631%" height="15" fill="rgb(246,228,12)"/><text x="86.0765%" y="175.50"></text></g><g><title>configure_and_expand (12,612,441 samples, 26.38%)</title><rect x="60.8000%" y="197" width="26.3752%" height="15" fill="rgb(213,55,15)"/><text x="61.0500%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (786,609 samples, 1.64%)</title><rect x="85.5302%" y="181" width="1.6450%" height="15" fill="rgb(209,9,3)"/><text x="85.7802%" y="191.50"></text></g><g><title>drop_ast (55,901 samples, 0.12%)</title><rect x="87.1752%" y="197" width="0.1169%" height="15" fill="rgb(230,59,30)"/><text x="87.4252%" y="207.50"></text></g><g><title>early_lint_checks (129,162 samples, 0.27%)</title><rect x="87.3210%" y="197" width="0.2701%" height="15" fill="rgb(209,121,21)"/><text x="87.5710%" y="207.50"></text></g><g><title>free_global_ctxt (2,815,231 samples, 5.89%)</title><rect x="87.5911%" y="197" width="5.8872%" height="15" fill="rgb(220,109,13)"/><text x="87.8411%" y="207.50">free_gl..</text></g><g><title>crate_hash (68,030 samples, 0.14%)</title><rect x="94.3423%" y="181" width="0.1423%" height="15" fill="rgb(232,18,1)"/><text x="94.5923%" y="191.50"></text></g><g><title>generate_crate_metadata (577,466 samples, 1.21%)</title><rect x="93.4783%" y="197" width="1.2076%" height="15" fill="rgb(215,41,42)"/><text x="93.7283%" y="207.50"></text></g><g><title>hir_lowering (864,739 samples, 1.81%)</title><rect x="94.6859%" y="197" width="1.8083%" height="15" fill="rgb(224,123,36)"/><text x="94.9359%" y="207.50">h..</text></g><g><title>link (49,020 samples, 0.10%)</title><rect x="96.4943%" y="197" width="0.1025%" height="15" fill="rgb(240,125,3)"/><text x="96.7443%" y="207.50"></text></g><g><title>parse_crate (555,517 samples, 1.16%)</title><rect x="96.5968%" y="197" width="1.1617%" height="15" fill="rgb(205,98,50)"/><text x="96.8468%" y="207.50"></text></g><g><title>prepare_outputs (185,932 samples, 0.39%)</title><rect x="97.7760%" y="197" width="0.3888%" height="15" fill="rgb(205,185,37)"/><text x="98.0260%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (474,156 samples, 0.99%)</title><rect x="98.1648%" y="197" width="0.9916%" height="15" fill="rgb(238,207,15)"/><text x="98.4148%" y="207.50"></text></g><g><title>setup_global_ctxt (79,231 samples, 0.17%)</title><rect x="99.1790%" y="197" width="0.1657%" height="15" fill="rgb(213,199,42)"/><text x="99.4290%" y="207.50"></text></g><g><title>all (47,819,382 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (47,819,382 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (313,364 samples, 0.66%)</title><rect x="99.3447%" y="197" width="0.6553%" height="15" fill="rgb(241,35,35)"/><text x="99.5947%" y="207.50"></text></g></svg></svg>