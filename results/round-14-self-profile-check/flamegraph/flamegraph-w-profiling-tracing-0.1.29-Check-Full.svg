<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (174,380 samples, 0.11%)</title><rect x="10.5812%" y="133" width="0.1111%" height="15" fill="rgb(227,0,7)"/><text x="10.8312%" y="143.50"></text></g><g><title>param_env (404,553 samples, 0.26%)</title><rect x="12.1351%" y="101" width="0.2577%" height="15" fill="rgb(217,0,24)"/><text x="12.3851%" y="111.50"></text></g><g><title>item_attrs (189,412 samples, 0.12%)</title><rect x="12.8541%" y="69" width="0.1207%" height="15" fill="rgb(221,193,54)"/><text x="13.1041%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (177,452 samples, 0.11%)</title><rect x="12.8617%" y="53" width="0.1130%" height="15" fill="rgb(248,212,6)"/><text x="13.1117%" y="63.50"></text></g><g><title>codegen_fn_attrs (316,474 samples, 0.20%)</title><rect x="12.7833%" y="85" width="0.2016%" height="15" fill="rgb(208,68,35)"/><text x="13.0333%" y="95.50"></text></g><g><title>is_copy_raw (160,651 samples, 0.10%)</title><rect x="14.9844%" y="69" width="0.1023%" height="15" fill="rgb(232,128,0)"/><text x="15.2344%" y="79.50"></text></g><g><title>adt_drop_tys (282,894 samples, 0.18%)</title><rect x="15.1891%" y="53" width="0.1802%" height="15" fill="rgb(207,160,47)"/><text x="15.4391%" y="63.50"></text></g><g><title>needs_drop_raw (1,230,214 samples, 0.78%)</title><rect x="15.0899%" y="69" width="0.7837%" height="15" fill="rgb(228,23,34)"/><text x="15.3399%" y="79.50"></text></g><g><title>is_copy_raw (791,159 samples, 0.50%)</title><rect x="15.3696%" y="53" width="0.5040%" height="15" fill="rgb(218,30,26)"/><text x="15.6196%" y="63.50"></text></g><g><title>evaluate_obligation (619,306 samples, 0.39%)</title><rect x="15.4791%" y="37" width="0.3945%" height="15" fill="rgb(220,122,19)"/><text x="15.7291%" y="47.50"></text></g><g><title>resolve_instance (565,639 samples, 0.36%)</title><rect x="15.8736%" y="69" width="0.3603%" height="15" fill="rgb(250,228,42)"/><text x="16.1236%" y="79.50"></text></g><g><title>thir_body (1,104,303 samples, 0.70%)</title><rect x="16.2657%" y="69" width="0.7035%" height="15" fill="rgb(240,193,28)"/><text x="16.5157%" y="79.50"></text></g><g><title>mir_const (8,686,525 samples, 5.53%)</title><rect x="11.4561%" y="117" width="5.5335%" height="15" fill="rgb(216,20,37)"/><text x="11.7061%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (7,216,047 samples, 4.60%)</title><rect x="12.3928%" y="101" width="4.5968%" height="15" fill="rgb(206,188,39)"/><text x="12.6428%" y="111.50">unsaf..</text></g><g><title>mir_built (6,286,487 samples, 4.00%)</title><rect x="12.9849%" y="85" width="4.0046%" height="15" fill="rgb(217,207,13)"/><text x="13.2349%" y="95.50">mir_..</text></g><g><title>has_structural_eq_impls (337,324 samples, 0.21%)</title><rect x="17.2399%" y="101" width="0.2149%" height="15" fill="rgb(231,73,38)"/><text x="17.4899%" y="111.50"></text></g><g><title>evaluate_obligation (303,184 samples, 0.19%)</title><rect x="17.2616%" y="85" width="0.1931%" height="15" fill="rgb(225,20,46)"/><text x="17.5116%" y="95.50"></text></g><g><title>is_freeze_raw (197,002 samples, 0.13%)</title><rect x="17.4555%" y="101" width="0.1255%" height="15" fill="rgb(210,31,41)"/><text x="17.7055%" y="111.50"></text></g><g><title>evaluate_obligation (188,032 samples, 0.12%)</title><rect x="17.4613%" y="85" width="0.1198%" height="15" fill="rgb(221,200,47)"/><text x="17.7113%" y="95.50"></text></g><g><title>mir_const (270,584 samples, 0.17%)</title><rect x="17.5844%" y="101" width="0.1724%" height="15" fill="rgb(226,26,5)"/><text x="17.8344%" y="111.50"></text></g><g><title>unsafety_check_result (208,003 samples, 0.13%)</title><rect x="17.6243%" y="85" width="0.1325%" height="15" fill="rgb(249,33,26)"/><text x="17.8743%" y="95.50"></text></g><g><title>mir_built (185,733 samples, 0.12%)</title><rect x="17.6385%" y="69" width="0.1183%" height="15" fill="rgb(235,183,28)"/><text x="17.8885%" y="79.50"></text></g><g><title>mir_promoted (10,958,717 samples, 6.98%)</title><rect x="10.8021%" y="133" width="6.9809%" height="15" fill="rgb(221,5,38)"/><text x="11.0521%" y="143.50">mir_promo..</text></g><g><title>mir_const_qualif (1,245,487 samples, 0.79%)</title><rect x="16.9896%" y="117" width="0.7934%" height="15" fill="rgb(247,18,42)"/><text x="17.2396%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (379,134 samples, 0.24%)</title><rect x="17.7830%" y="133" width="0.2415%" height="15" fill="rgb(241,131,45)"/><text x="18.0330%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,056,107 samples, 1.95%)</title><rect x="18.1445%" y="133" width="1.9468%" height="15" fill="rgb(249,31,29)"/><text x="18.3945%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (30,256,066 samples, 19.27%)</title><rect x="0.8229%" y="165" width="19.2737%" height="15" fill="rgb(225,111,53)"/><text x="1.0729%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (30,051,624 samples, 19.14%)</title><rect x="0.9531%" y="149" width="19.1434%" height="15" fill="rgb(238,160,17)"/><text x="1.2031%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (307,563 samples, 0.20%)</title><rect x="20.0966%" y="165" width="0.1959%" height="15" fill="rgb(214,148,48)"/><text x="20.3466%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (219,333 samples, 0.14%)</title><rect x="20.1528%" y="149" width="0.1397%" height="15" fill="rgb(232,36,49)"/><text x="20.4028%" y="159.50"></text></g><g><title>hir_module_items (264,442 samples, 0.17%)</title><rect x="20.2925%" y="165" width="0.1685%" height="15" fill="rgb(209,103,24)"/><text x="20.5425%" y="175.50"></text></g><g><title>should_inherit_track_caller (260,663 samples, 0.17%)</title><rect x="20.8325%" y="117" width="0.1660%" height="15" fill="rgb(229,88,8)"/><text x="21.0825%" y="127.50"></text></g><g><title>codegen_fn_attrs (461,536 samples, 0.29%)</title><rect x="20.7120%" y="133" width="0.2940%" height="15" fill="rgb(213,181,19)"/><text x="20.9620%" y="143.50"></text></g><g><title>check_mod_attrs (819,938 samples, 0.52%)</title><rect x="20.4837%" y="149" width="0.5223%" height="15" fill="rgb(254,191,54)"/><text x="20.7337%" y="159.50"></text></g><g><title>check_mod_const_bodies (165,142 samples, 0.11%)</title><rect x="21.0061%" y="149" width="0.1052%" height="15" fill="rgb(241,83,37)"/><text x="21.2561%" y="159.50"></text></g><g><title>lookup_deprecation_entry (229,102 samples, 0.15%)</title><rect x="21.3172%" y="133" width="0.1459%" height="15" fill="rgb(233,36,39)"/><text x="21.5672%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (549,896 samples, 0.35%)</title><rect x="21.1723%" y="149" width="0.3503%" height="15" fill="rgb(226,3,54)"/><text x="21.4223%" y="159.50"></text></g><g><title>misc_checking_1 (1,755,930 samples, 1.12%)</title><rect x="20.4612%" y="165" width="1.1186%" height="15" fill="rgb(245,192,40)"/><text x="20.7112%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (533,666 samples, 0.34%)</title><rect x="21.5808%" y="149" width="0.3400%" height="15" fill="rgb(238,167,29)"/><text x="21.8308%" y="159.50"></text></g><g><title>check_mod_liveness (425,066 samples, 0.27%)</title><rect x="21.6500%" y="133" width="0.2708%" height="15" fill="rgb(232,182,51)"/><text x="21.9000%" y="143.50"></text></g><g><title>misc_checking_2 (1,195,713 samples, 0.76%)</title><rect x="21.5797%" y="165" width="0.7617%" height="15" fill="rgb(231,60,39)"/><text x="21.8297%" y="175.50"></text></g><g><title>match_checking (660,387 samples, 0.42%)</title><rect x="21.9207%" y="149" width="0.4207%" height="15" fill="rgb(208,69,12)"/><text x="22.1707%" y="159.50"></text></g><g><title>check_match (611,226 samples, 0.39%)</title><rect x="21.9521%" y="133" width="0.3894%" height="15" fill="rgb(235,93,37)"/><text x="22.2021%" y="143.50"></text></g><g><title>check_private_in_public (311,334 samples, 0.20%)</title><rect x="22.3479%" y="149" width="0.1983%" height="15" fill="rgb(213,116,39)"/><text x="22.5979%" y="159.50"></text></g><g><title>death_checking (871,769 samples, 0.56%)</title><rect x="22.5462%" y="149" width="0.5553%" height="15" fill="rgb(222,207,29)"/><text x="22.7962%" y="159.50"></text></g><g><title>layout_of (158,042 samples, 0.10%)</title><rect x="24.8517%" y="53" width="0.1007%" height="15" fill="rgb(206,96,30)"/><text x="25.1017%" y="63.50"></text></g><g><title>layout_of (179,002 samples, 0.11%)</title><rect x="24.8398%" y="69" width="0.1140%" height="15" fill="rgb(218,138,4)"/><text x="25.0898%" y="79.50"></text></g><g><title>eval_to_const_value_raw (507,366 samples, 0.32%)</title><rect x="24.7434%" y="117" width="0.3232%" height="15" fill="rgb(250,191,14)"/><text x="24.9934%" y="127.50"></text></g><g><title>eval_to_const_value_raw (503,326 samples, 0.32%)</title><rect x="24.7460%" y="101" width="0.3206%" height="15" fill="rgb(239,60,40)"/><text x="24.9960%" y="111.50"></text></g><g><title>eval_to_allocation_raw (494,136 samples, 0.31%)</title><rect x="24.7518%" y="85" width="0.3148%" height="15" fill="rgb(206,27,48)"/><text x="25.0018%" y="95.50"></text></g><g><title>param_env (599,776 samples, 0.38%)</title><rect x="25.0666%" y="117" width="0.3821%" height="15" fill="rgb(225,35,8)"/><text x="25.3166%" y="127.50"></text></g><g><title>predicates_of (266,081 samples, 0.17%)</title><rect x="25.2792%" y="101" width="0.1695%" height="15" fill="rgb(250,213,24)"/><text x="25.5292%" y="111.50"></text></g><g><title>predicates_defined_on (211,900 samples, 0.13%)</title><rect x="25.3137%" y="85" width="0.1350%" height="15" fill="rgb(247,123,22)"/><text x="25.5637%" y="95.50"></text></g><g><title>crate_lints (4,870,374 samples, 3.10%)</title><rect x="23.1027%" y="133" width="3.1025%" height="15" fill="rgb(231,138,38)"/><text x="23.3527%" y="143.50">cra..</text></g><g><title>type_of (1,121,533 samples, 0.71%)</title><rect x="25.4908%" y="117" width="0.7144%" height="15" fill="rgb(231,145,46)"/><text x="25.7408%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (880,490 samples, 0.56%)</title><rect x="25.6443%" y="101" width="0.5609%" height="15" fill="rgb(251,118,11)"/><text x="25.8943%" y="111.50"></text></g><g><title>lint_checking (5,319,909 samples, 3.39%)</title><rect x="23.1016%" y="149" width="3.3889%" height="15" fill="rgb(217,147,25)"/><text x="23.3516%" y="159.50">lin..</text></g><g><title>module_lints (447,755 samples, 0.29%)</title><rect x="26.2052%" y="133" width="0.2852%" height="15" fill="rgb(247,81,37)"/><text x="26.4552%" y="143.50"></text></g><g><title>lint_mod (437,115 samples, 0.28%)</title><rect x="26.2120%" y="117" width="0.2785%" height="15" fill="rgb(209,12,38)"/><text x="26.4620%" y="127.50"></text></g><g><title>privacy_access_levels (366,884 samples, 0.23%)</title><rect x="26.4904%" y="149" width="0.2337%" height="15" fill="rgb(227,1,9)"/><text x="26.7404%" y="159.50"></text></g><g><title>privacy_checking_modules (1,022,141 samples, 0.65%)</title><rect x="26.7242%" y="149" width="0.6511%" height="15" fill="rgb(248,47,43)"/><text x="26.9742%" y="159.50"></text></g><g><title>check_mod_privacy (1,015,841 samples, 0.65%)</title><rect x="26.7282%" y="133" width="0.6471%" height="15" fill="rgb(221,10,30)"/><text x="26.9782%" y="143.50"></text></g><g><title>misc_checking_3 (7,939,468 samples, 5.06%)</title><rect x="22.3414%" y="165" width="5.0576%" height="15" fill="rgb(210,229,1)"/><text x="22.5914%" y="175.50">misc_c..</text></g><g><title>impl_parent (2,012,891 samples, 1.28%)</title><rect x="29.8659%" y="101" width="1.2822%" height="15" fill="rgb(222,148,37)"/><text x="30.1159%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,228,362 samples, 0.78%)</title><rect x="30.3657%" y="85" width="0.7825%" height="15" fill="rgb(234,67,33)"/><text x="30.6157%" y="95.50"></text></g><g><title>impl_trait_ref (5,162,141 samples, 3.29%)</title><rect x="31.1482%" y="101" width="3.2884%" height="15" fill="rgb(247,98,35)"/><text x="31.3982%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,381,339 samples, 2.79%)</title><rect x="31.6456%" y="85" width="2.7910%" height="15" fill="rgb(247,138,52)"/><text x="31.8956%" y="95.50">me..</text></g><g><title>trait_impls_of (680,508 samples, 0.43%)</title><rect x="34.4983%" y="101" width="0.4335%" height="15" fill="rgb(213,79,30)"/><text x="34.7483%" y="111.50"></text></g><g><title>implementations_of_trait (201,002 samples, 0.13%)</title><rect x="34.8038%" y="85" width="0.1280%" height="15" fill="rgb(246,177,23)"/><text x="35.0538%" y="95.50"></text></g><g><title>coherent_trait (11,709,490 samples, 7.46%)</title><rect x="27.4764%" y="133" width="7.4592%" height="15" fill="rgb(230,62,27)"/><text x="27.7264%" y="143.50">coherent_t..</text></g><g><title>specialization_graph_of (11,682,090 samples, 7.44%)</title><rect x="27.4938%" y="117" width="7.4417%" height="15" fill="rgb(216,154,8)"/><text x="27.7438%" y="127.50">specializa..</text></g><g><title>orphan_check_crate (218,923 samples, 0.14%)</title><rect x="34.9641%" y="133" width="0.1395%" height="15" fill="rgb(244,35,45)"/><text x="35.2141%" y="143.50"></text></g><g><title>coherence_checking (12,005,134 samples, 7.65%)</title><rect x="27.4611%" y="149" width="7.6475%" height="15" fill="rgb(251,115,12)"/><text x="27.7111%" y="159.50">coherence_..</text></g><g><title>associated_items (210,352 samples, 0.13%)</title><rect x="47.2322%" y="101" width="0.1340%" height="15" fill="rgb(240,54,50)"/><text x="47.4822%" y="111.50"></text></g><g><title>adt_dtorck_constraint (180,382 samples, 0.11%)</title><rect x="47.5697%" y="85" width="0.1149%" height="15" fill="rgb(233,84,52)"/><text x="47.8197%" y="95.50"></text></g><g><title>dropck_outlives (442,386 samples, 0.28%)</title><rect x="47.4075%" y="101" width="0.2818%" height="15" fill="rgb(207,117,47)"/><text x="47.6575%" y="111.50"></text></g><g><title>evaluate_obligation (845,469 samples, 0.54%)</title><rect x="47.6893%" y="101" width="0.5386%" height="15" fill="rgb(249,43,39)"/><text x="47.9393%" y="111.50"></text></g><g><title>method_autoderef_steps (571,575 samples, 0.36%)</title><rect x="48.6266%" y="101" width="0.3641%" height="15" fill="rgb(209,38,44)"/><text x="48.8766%" y="111.50"></text></g><g><title>evaluate_obligation (187,881 samples, 0.12%)</title><rect x="48.8711%" y="85" width="0.1197%" height="15" fill="rgb(236,212,23)"/><text x="49.1211%" y="95.50"></text></g><g><title>object_safety_violations (215,533 samples, 0.14%)</title><rect x="48.9908%" y="101" width="0.1373%" height="15" fill="rgb(242,79,21)"/><text x="49.2408%" y="111.50"></text></g><g><title>predicates_of (240,412 samples, 0.15%)</title><rect x="49.1659%" y="101" width="0.1531%" height="15" fill="rgb(211,96,35)"/><text x="49.4159%" y="111.50"></text></g><g><title>associated_items (165,753 samples, 0.11%)</title><rect x="52.0661%" y="85" width="0.1056%" height="15" fill="rgb(253,215,40)"/><text x="52.3161%" y="95.50"></text></g><g><title>dropck_outlives (304,393 samples, 0.19%)</title><rect x="52.1843%" y="85" width="0.1939%" height="15" fill="rgb(211,81,21)"/><text x="52.4343%" y="95.50"></text></g><g><title>evaluate_obligation (407,843 samples, 0.26%)</title><rect x="52.3782%" y="85" width="0.2598%" height="15" fill="rgb(208,190,38)"/><text x="52.6282%" y="95.50"></text></g><g><title>is_copy_raw (390,904 samples, 0.25%)</title><rect x="52.6964%" y="85" width="0.2490%" height="15" fill="rgb(235,213,38)"/><text x="52.9464%" y="95.50"></text></g><g><title>evaluate_obligation (326,933 samples, 0.21%)</title><rect x="52.7371%" y="69" width="0.2083%" height="15" fill="rgb(237,122,38)"/><text x="52.9871%" y="79.50"></text></g><g><title>typeck (6,009,926 samples, 3.83%)</title><rect x="49.3672%" y="101" width="3.8284%" height="15" fill="rgb(244,218,35)"/><text x="49.6172%" y="111.50">type..</text></g><g><title>item_bodies_checking (28,391,236 samples, 18.09%)</title><rect x="35.1420%" y="149" width="18.0857%" height="15" fill="rgb(240,68,47)"/><text x="35.3920%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,387,926 samples, 18.08%)</title><rect x="35.1441%" y="133" width="18.0836%" height="15" fill="rgb(210,16,53)"/><text x="35.3941%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (28,256,474 samples, 18.00%)</title><rect x="35.2279%" y="117" width="17.9999%" height="15" fill="rgb(235,124,12)"/><text x="35.4779%" y="127.50">typeck</text></g><g><title>item_types_checking (1,557,267 samples, 0.99%)</title><rect x="53.2278%" y="149" width="0.9920%" height="15" fill="rgb(224,169,11)"/><text x="53.4778%" y="159.50"></text></g><g><title>check_mod_item_types (1,548,497 samples, 0.99%)</title><rect x="53.2334%" y="133" width="0.9864%" height="15" fill="rgb(250,166,2)"/><text x="53.4834%" y="143.50"></text></g><g><title>typeck (418,644 samples, 0.27%)</title><rect x="53.9531%" y="117" width="0.2667%" height="15" fill="rgb(242,216,29)"/><text x="54.2031%" y="127.50"></text></g><g><title>fn_sig (450,326 samples, 0.29%)</title><rect x="54.4802%" y="117" width="0.2869%" height="15" fill="rgb(230,116,27)"/><text x="54.7302%" y="127.50"></text></g><g><title>is_late_bound_map (470,284 samples, 0.30%)</title><rect x="54.8831%" y="101" width="0.2996%" height="15" fill="rgb(228,99,48)"/><text x="55.1331%" y="111.50"></text></g><g><title>resolve_lifetimes (456,374 samples, 0.29%)</title><rect x="54.8919%" y="85" width="0.2907%" height="15" fill="rgb(253,11,6)"/><text x="55.1419%" y="95.50"></text></g><g><title>lint_levels (294,793 samples, 0.19%)</title><rect x="54.9949%" y="69" width="0.1878%" height="15" fill="rgb(247,143,39)"/><text x="55.2449%" y="79.50"></text></g><g><title>named_region_map (332,915 samples, 0.21%)</title><rect x="55.1827%" y="101" width="0.2121%" height="15" fill="rgb(236,97,10)"/><text x="55.4327%" y="111.50"></text></g><g><title>resolve_lifetimes (305,165 samples, 0.19%)</title><rect x="55.2003%" y="85" width="0.1944%" height="15" fill="rgb(233,208,19)"/><text x="55.4503%" y="95.50"></text></g><g><title>generics_of (1,011,391 samples, 0.64%)</title><rect x="54.7671%" y="117" width="0.6443%" height="15" fill="rgb(216,164,2)"/><text x="55.0171%" y="127.50"></text></g><g><title>explicit_predicates_of (416,544 samples, 0.27%)</title><rect x="55.5925%" y="85" width="0.2653%" height="15" fill="rgb(220,129,5)"/><text x="55.8425%" y="95.50"></text></g><g><title>predicates_of (1,008,119 samples, 0.64%)</title><rect x="55.4548%" y="117" width="0.6422%" height="15" fill="rgb(242,17,10)"/><text x="55.7048%" y="127.50"></text></g><g><title>predicates_defined_on (923,149 samples, 0.59%)</title><rect x="55.5089%" y="101" width="0.5881%" height="15" fill="rgb(242,107,0)"/><text x="55.7589%" y="111.50"></text></g><g><title>inferred_outlives_of (375,484 samples, 0.24%)</title><rect x="55.8578%" y="85" width="0.2392%" height="15" fill="rgb(251,28,31)"/><text x="56.1078%" y="95.50"></text></g><g><title>inferred_outlives_crate (344,113 samples, 0.22%)</title><rect x="55.8778%" y="69" width="0.2192%" height="15" fill="rgb(233,223,10)"/><text x="56.1278%" y="79.50"></text></g><g><title>type_of (163,402 samples, 0.10%)</title><rect x="55.9929%" y="53" width="0.1041%" height="15" fill="rgb(215,21,27)"/><text x="56.2429%" y="63.50"></text></g><g><title>type_collecting (3,267,026 samples, 2.08%)</title><rect x="54.2220%" y="149" width="2.0812%" height="15" fill="rgb(232,23,21)"/><text x="54.4720%" y="159.50">t..</text></g><g><title>collect_mod_item_types (3,245,036 samples, 2.07%)</title><rect x="54.2360%" y="133" width="2.0671%" height="15" fill="rgb(244,5,23)"/><text x="54.4860%" y="143.50">c..</text></g><g><title>type_of (204,152 samples, 0.13%)</title><rect x="56.1731%" y="117" width="0.1300%" height="15" fill="rgb(226,81,46)"/><text x="56.4231%" y="127.50"></text></g><g><title>opt_def_kind (206,542 samples, 0.13%)</title><rect x="58.9316%" y="85" width="0.1316%" height="15" fill="rgb(247,70,30)"/><text x="59.1816%" y="95.50"></text></g><g><title>evaluate_obligation (1,060,645 samples, 0.68%)</title><rect x="58.3954%" y="117" width="0.6757%" height="15" fill="rgb(212,68,19)"/><text x="58.6454%" y="127.50"></text></g><g><title>predicates_of (224,013 samples, 0.14%)</title><rect x="58.9284%" y="101" width="0.1427%" height="15" fill="rgb(240,187,13)"/><text x="59.1784%" y="111.50"></text></g><g><title>implied_outlives_bounds (387,795 samples, 0.25%)</title><rect x="59.0893%" y="117" width="0.2470%" height="15" fill="rgb(223,113,26)"/><text x="59.3393%" y="127.50"></text></g><g><title>param_env (435,894 samples, 0.28%)</title><rect x="59.3447%" y="117" width="0.2777%" height="15" fill="rgb(206,192,2)"/><text x="59.5947%" y="127.50"></text></g><g><title>region_scope_tree (423,056 samples, 0.27%)</title><rect x="59.6603%" y="117" width="0.2695%" height="15" fill="rgb(241,108,4)"/><text x="59.9103%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,455,502 samples, 3.48%)</title><rect x="56.5042%" y="133" width="3.4753%" height="15" fill="rgb(247,173,49)"/><text x="56.7542%" y="143.50">che..</text></g><g><title>evaluate_obligation (420,254 samples, 0.27%)</title><rect x="61.2804%" y="117" width="0.2677%" height="15" fill="rgb(224,114,35)"/><text x="61.5304%" y="127.50"></text></g><g><title>param_env (422,726 samples, 0.27%)</title><rect x="61.6222%" y="117" width="0.2693%" height="15" fill="rgb(245,159,27)"/><text x="61.8722%" y="127.50"></text></g><g><title>check_item_well_formed (3,310,236 samples, 2.11%)</title><rect x="59.9794%" y="133" width="2.1087%" height="15" fill="rgb(245,172,44)"/><text x="60.2294%" y="143.50">c..</text></g><g><title>analysis (97,174,148 samples, 61.90%)</title><rect x="0.6136%" y="181" width="61.9017%" height="15" fill="rgb(236,23,11)"/><text x="0.8636%" y="191.50">analysis</text></g><g><title>type_check_crate (55,126,012 samples, 35.12%)</title><rect x="27.3990%" y="165" width="35.1163%" height="15" fill="rgb(205,117,38)"/><text x="27.6490%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,743,968 samples, 6.21%)</title><rect x="56.3082%" y="149" width="6.2071%" height="15" fill="rgb(237,72,25)"/><text x="56.5582%" y="159.50">wf_check..</text></g><g><title>check_trait_item_well_formed (670,598 samples, 0.43%)</title><rect x="62.0881%" y="133" width="0.4272%" height="15" fill="rgb(244,70,9)"/><text x="62.3381%" y="143.50"></text></g><g><title>codegen_crate (389,474 samples, 0.25%)</title><rect x="62.5194%" y="181" width="0.2481%" height="15" fill="rgb(217,125,39)"/><text x="62.7694%" y="191.50"></text></g><g><title>AST_validation (326,674 samples, 0.21%)</title><rect x="62.8539%" y="165" width="0.2081%" height="15" fill="rgb(235,36,10)"/><text x="63.1039%" y="175.50"></text></g><g><title>metadata_load_macro (647,327 samples, 0.41%)</title><rect x="82.1783%" y="133" width="0.4124%" height="15" fill="rgb(251,123,47)"/><text x="82.4283%" y="143.50"></text></g><g><title>metadata_register_crate (5,404,991 samples, 3.44%)</title><rect x="82.5906%" y="133" width="3.4431%" height="15" fill="rgb(221,13,13)"/><text x="82.8406%" y="143.50">met..</text></g><g><title>metadata_register_crate (497,403 samples, 0.32%)</title><rect x="85.7168%" y="117" width="0.3169%" height="15" fill="rgb(238,131,9)"/><text x="85.9668%" y="127.50"></text></g><g><title>macro_expand_crate (36,563,046 samples, 23.29%)</title><rect x="63.1521%" y="165" width="23.2913%" height="15" fill="rgb(211,50,8)"/><text x="63.4021%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (36,551,526 samples, 23.28%)</title><rect x="63.1594%" y="149" width="23.2840%" height="15" fill="rgb(245,182,24)"/><text x="63.4094%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (643,208 samples, 0.41%)</title><rect x="86.0337%" y="133" width="0.4097%" height="15" fill="rgb(242,14,37)"/><text x="86.2837%" y="143.50"></text></g><g><title>finalize_macro_resolutions (169,992 samples, 0.11%)</title><rect x="86.5921%" y="149" width="0.1083%" height="15" fill="rgb(246,228,12)"/><text x="86.8421%" y="159.50"></text></g><g><title>late_resolve_crate (1,807,769 samples, 1.15%)</title><rect x="86.7004%" y="149" width="1.1516%" height="15" fill="rgb(213,55,15)"/><text x="86.9504%" y="159.50"></text></g><g><title>configure_and_expand (39,610,100 samples, 25.23%)</title><rect x="62.7675%" y="181" width="25.2324%" height="15" fill="rgb(209,9,3)"/><text x="63.0175%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,336,446 samples, 1.49%)</title><rect x="86.5115%" y="165" width="1.4884%" height="15" fill="rgb(230,59,30)"/><text x="86.7615%" y="175.50"></text></g><g><title>drop_ast (465,295 samples, 0.30%)</title><rect x="87.9999%" y="181" width="0.2964%" height="15" fill="rgb(209,121,21)"/><text x="88.2499%" y="191.50"></text></g><g><title>early_lint_checks (816,160 samples, 0.52%)</title><rect x="88.3211%" y="181" width="0.5199%" height="15" fill="rgb(220,109,13)"/><text x="88.5711%" y="191.50"></text></g><g><title>free_global_ctxt (3,947,144 samples, 2.51%)</title><rect x="88.8410%" y="181" width="2.5144%" height="15" fill="rgb(232,18,1)"/><text x="89.0910%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (3,053,404 samples, 1.95%)</title><rect x="91.3554%" y="181" width="1.9451%" height="15" fill="rgb(215,41,42)"/><text x="91.6054%" y="191.50">g..</text></g><g><title>hir_lowering (7,529,993 samples, 4.80%)</title><rect x="93.3005%" y="181" width="4.7967%" height="15" fill="rgb(224,123,36)"/><text x="93.5505%" y="191.50">hir_lo..</text></g><g><title>parse_crate (1,221,863 samples, 0.78%)</title><rect x="98.1486%" y="181" width="0.7783%" height="15" fill="rgb(240,125,3)"/><text x="98.3986%" y="191.50"></text></g><g><title>prepare_outputs (200,272 samples, 0.13%)</title><rect x="98.9307%" y="181" width="0.1276%" height="15" fill="rgb(205,98,50)"/><text x="99.1807%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (837,799 samples, 0.53%)</title><rect x="99.0583%" y="181" width="0.5337%" height="15" fill="rgb(205,185,37)"/><text x="99.3083%" y="191.50"></text></g><g><title>all (156,981,313 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (156,981,313 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (555,467 samples, 0.35%)</title><rect x="99.6462%" y="181" width="0.3538%" height="15" fill="rgb(235,201,11)"/><text x="99.8962%" y="191.50"></text></g></svg></svg>