<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (465,144 samples, 0.33%)</title><rect x="14.3494%" y="117" width="0.3348%" height="15" fill="rgb(227,0,7)"/><text x="14.5994%" y="127.50"></text></g><g><title>item_attrs (326,736 samples, 0.24%)</title><rect x="15.3056%" y="85" width="0.2352%" height="15" fill="rgb(217,0,24)"/><text x="15.5556%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (315,686 samples, 0.23%)</title><rect x="15.3135%" y="69" width="0.2272%" height="15" fill="rgb(221,193,54)"/><text x="15.5635%" y="79.50"></text></g><g><title>codegen_fn_attrs (478,158 samples, 0.34%)</title><rect x="15.2139%" y="101" width="0.3442%" height="15" fill="rgb(248,212,6)"/><text x="15.4639%" y="111.50"></text></g><g><title>is_copy_raw (253,601 samples, 0.18%)</title><rect x="18.5762%" y="85" width="0.1825%" height="15" fill="rgb(208,68,35)"/><text x="18.8262%" y="95.50"></text></g><g><title>evaluate_obligation (219,041 samples, 0.16%)</title><rect x="18.6011%" y="69" width="0.1577%" height="15" fill="rgb(232,128,0)"/><text x="18.8511%" y="79.50"></text></g><g><title>adt_drop_tys (160,061 samples, 0.12%)</title><rect x="18.8488%" y="69" width="0.1152%" height="15" fill="rgb(207,160,47)"/><text x="19.0988%" y="79.50"></text></g><g><title>needs_drop_raw (1,172,292 samples, 0.84%)</title><rect x="18.7588%" y="85" width="0.8438%" height="15" fill="rgb(228,23,34)"/><text x="19.0088%" y="95.50"></text></g><g><title>is_copy_raw (887,187 samples, 0.64%)</title><rect x="18.9640%" y="69" width="0.6386%" height="15" fill="rgb(218,30,26)"/><text x="19.2140%" y="79.50"></text></g><g><title>evaluate_obligation (741,854 samples, 0.53%)</title><rect x="19.0686%" y="53" width="0.5340%" height="15" fill="rgb(220,122,19)"/><text x="19.3186%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (142,283 samples, 0.10%)</title><rect x="19.7907%" y="69" width="0.1024%" height="15" fill="rgb(250,228,42)"/><text x="20.0407%" y="79.50"></text></g><g><title>specialization_graph_of (143,131 samples, 0.10%)</title><rect x="19.9070%" y="69" width="0.1030%" height="15" fill="rgb(240,193,28)"/><text x="20.1570%" y="79.50"></text></g><g><title>resolve_instance (696,690 samples, 0.50%)</title><rect x="19.6026%" y="85" width="0.5015%" height="15" fill="rgb(216,20,37)"/><text x="19.8526%" y="95.50"></text></g><g><title>thir_body (1,652,528 samples, 1.19%)</title><rect x="20.1356%" y="85" width="1.1895%" height="15" fill="rgb(206,188,39)"/><text x="20.3856%" y="95.50"></text></g><g><title>mir_const (11,131,741 samples, 8.01%)</title><rect x="13.3350%" y="133" width="8.0128%" height="15" fill="rgb(217,207,13)"/><text x="13.5850%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (9,257,281 samples, 6.66%)</title><rect x="14.6842%" y="117" width="6.6635%" height="15" fill="rgb(231,73,38)"/><text x="14.9342%" y="127.50">unsafety_..</text></g><g><title>mir_built (8,043,258 samples, 5.79%)</title><rect x="15.5581%" y="101" width="5.7896%" height="15" fill="rgb(225,20,46)"/><text x="15.8081%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (12,679,076 samples, 9.13%)</title><rect x="12.3751%" y="149" width="9.1265%" height="15" fill="rgb(210,31,41)"/><text x="12.6251%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (213,923 samples, 0.15%)</title><rect x="21.3477%" y="133" width="0.1540%" height="15" fill="rgb(221,200,47)"/><text x="21.5977%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (661,826 samples, 0.48%)</title><rect x="21.5042%" y="149" width="0.4764%" height="15" fill="rgb(226,26,5)"/><text x="21.7542%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (196,804 samples, 0.14%)</title><rect x="21.9806%" y="149" width="0.1417%" height="15" fill="rgb(249,33,26)"/><text x="22.2306%" y="159.50"></text></g><g><title>type_op_normalize_predicate (170,922 samples, 0.12%)</title><rect x="22.1223%" y="149" width="0.1230%" height="15" fill="rgb(235,183,28)"/><text x="22.3723%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,420,562 samples, 1.02%)</title><rect x="22.2453%" y="149" width="1.0225%" height="15" fill="rgb(221,5,38)"/><text x="22.4953%" y="159.50"></text></g><g><title>MIR_borrow_checking (31,395,363 samples, 22.60%)</title><rect x="0.6793%" y="181" width="22.5987%" height="15" fill="rgb(247,18,42)"/><text x="0.9293%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,161,679 samples, 22.43%)</title><rect x="0.8475%" y="165" width="22.4305%" height="15" fill="rgb(241,131,45)"/><text x="1.0975%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (172,592 samples, 0.12%)</title><rect x="23.2781%" y="181" width="0.1242%" height="15" fill="rgb(249,31,29)"/><text x="23.5281%" y="191.50"></text></g><g><title>hir_module_items (233,343 samples, 0.17%)</title><rect x="23.4023%" y="181" width="0.1680%" height="15" fill="rgb(225,111,53)"/><text x="23.6523%" y="191.50"></text></g><g><title>codegen_fn_attrs (141,462 samples, 0.10%)</title><rect x="24.0672%" y="117" width="0.1018%" height="15" fill="rgb(238,160,17)"/><text x="24.3172%" y="127.50"></text></g><g><title>should_inherit_track_caller (302,314 samples, 0.22%)</title><rect x="23.9594%" y="133" width="0.2176%" height="15" fill="rgb(214,148,48)"/><text x="24.2094%" y="143.50"></text></g><g><title>codegen_fn_attrs (525,996 samples, 0.38%)</title><rect x="23.8188%" y="149" width="0.3786%" height="15" fill="rgb(232,36,49)"/><text x="24.0688%" y="159.50"></text></g><g><title>check_mod_attrs (850,580 samples, 0.61%)</title><rect x="23.5853%" y="165" width="0.6123%" height="15" fill="rgb(209,103,24)"/><text x="23.8353%" y="175.50"></text></g><g><title>check_mod_const_bodies (185,802 samples, 0.13%)</title><rect x="24.1975%" y="165" width="0.1337%" height="15" fill="rgb(229,88,8)"/><text x="24.4475%" y="175.50"></text></g><g><title>lint_levels (215,173 samples, 0.15%)</title><rect x="24.5605%" y="149" width="0.1549%" height="15" fill="rgb(213,181,19)"/><text x="24.8105%" y="159.50"></text></g><g><title>lookup_deprecation_entry (197,333 samples, 0.14%)</title><rect x="24.7154%" y="149" width="0.1420%" height="15" fill="rgb(254,191,54)"/><text x="24.9654%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (727,338 samples, 0.52%)</title><rect x="24.3979%" y="165" width="0.5235%" height="15" fill="rgb(241,83,37)"/><text x="24.6479%" y="175.50"></text></g><g><title>misc_checking_1 (1,950,542 samples, 1.40%)</title><rect x="23.5707%" y="181" width="1.4040%" height="15" fill="rgb(233,36,39)"/><text x="23.8207%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (678,998 samples, 0.49%)</title><rect x="24.9758%" y="165" width="0.4888%" height="15" fill="rgb(226,3,54)"/><text x="25.2258%" y="175.50"></text></g><g><title>check_mod_liveness (558,486 samples, 0.40%)</title><rect x="25.0626%" y="149" width="0.4020%" height="15" fill="rgb(245,192,40)"/><text x="25.3126%" y="159.50"></text></g><g><title>eval_to_const_value_raw (143,351 samples, 0.10%)</title><rect x="26.0058%" y="133" width="0.1032%" height="15" fill="rgb(238,167,29)"/><text x="26.2558%" y="143.50"></text></g><g><title>misc_checking_2 (1,612,789 samples, 1.16%)</title><rect x="24.9747%" y="181" width="1.1609%" height="15" fill="rgb(232,182,51)"/><text x="25.2247%" y="191.50"></text></g><g><title>match_checking (932,281 samples, 0.67%)</title><rect x="25.4646%" y="165" width="0.6711%" height="15" fill="rgb(231,60,39)"/><text x="25.7146%" y="175.50"></text></g><g><title>check_match (875,910 samples, 0.63%)</title><rect x="25.5052%" y="149" width="0.6305%" height="15" fill="rgb(208,69,12)"/><text x="25.7552%" y="159.50"></text></g><g><title>check_private_in_public (282,663 samples, 0.20%)</title><rect x="26.1429%" y="165" width="0.2035%" height="15" fill="rgb(235,93,37)"/><text x="26.3929%" y="175.50"></text></g><g><title>death_checking (571,906 samples, 0.41%)</title><rect x="26.3464%" y="165" width="0.4117%" height="15" fill="rgb(213,116,39)"/><text x="26.5964%" y="175.50"></text></g><g><title>eval_to_const_value_raw (193,171 samples, 0.14%)</title><rect x="27.4117%" y="133" width="0.1390%" height="15" fill="rgb(222,207,29)"/><text x="27.6617%" y="143.50"></text></g><g><title>eval_to_const_value_raw (189,691 samples, 0.14%)</title><rect x="27.4142%" y="117" width="0.1365%" height="15" fill="rgb(206,96,30)"/><text x="27.6642%" y="127.50"></text></g><g><title>eval_to_allocation_raw (184,621 samples, 0.13%)</title><rect x="27.4178%" y="101" width="0.1329%" height="15" fill="rgb(218,138,4)"/><text x="27.6678%" y="111.50"></text></g><g><title>param_env (188,410 samples, 0.14%)</title><rect x="27.5507%" y="133" width="0.1356%" height="15" fill="rgb(250,191,14)"/><text x="27.8007%" y="143.50"></text></g><g><title>crate_lints (2,599,059 samples, 1.87%)</title><rect x="26.7593%" y="149" width="1.8708%" height="15" fill="rgb(239,60,40)"/><text x="27.0093%" y="159.50">c..</text></g><g><title>type_of (1,305,907 samples, 0.94%)</title><rect x="27.6901%" y="133" width="0.9400%" height="15" fill="rgb(206,27,48)"/><text x="27.9401%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (856,420 samples, 0.62%)</title><rect x="28.0137%" y="117" width="0.6165%" height="15" fill="rgb(225,35,8)"/><text x="28.2637%" y="127.50"></text></g><g><title>lint_checking (3,234,056 samples, 2.33%)</title><rect x="26.7581%" y="165" width="2.3279%" height="15" fill="rgb(250,213,24)"/><text x="27.0081%" y="175.50">l..</text></g><g><title>module_lints (633,267 samples, 0.46%)</title><rect x="28.6301%" y="149" width="0.4558%" height="15" fill="rgb(247,123,22)"/><text x="28.8801%" y="159.50"></text></g><g><title>lint_mod (626,957 samples, 0.45%)</title><rect x="28.6347%" y="133" width="0.4513%" height="15" fill="rgb(231,138,38)"/><text x="28.8847%" y="143.50"></text></g><g><title>privacy_access_levels (401,975 samples, 0.29%)</title><rect x="29.0860%" y="165" width="0.2893%" height="15" fill="rgb(231,145,46)"/><text x="29.3360%" y="175.50"></text></g><g><title>privacy_checking_modules (1,021,252 samples, 0.74%)</title><rect x="29.3753%" y="165" width="0.7351%" height="15" fill="rgb(251,118,11)"/><text x="29.6253%" y="175.50"></text></g><g><title>check_mod_privacy (1,016,532 samples, 0.73%)</title><rect x="29.3787%" y="149" width="0.7317%" height="15" fill="rgb(217,147,25)"/><text x="29.6287%" y="159.50"></text></g><g><title>misc_checking_3 (5,541,923 samples, 3.99%)</title><rect x="26.1356%" y="181" width="3.9891%" height="15" fill="rgb(247,81,37)"/><text x="26.3856%" y="191.50">misc..</text></g><g><title>adt_destructor (283,453 samples, 0.20%)</title><rect x="30.2476%" y="133" width="0.2040%" height="15" fill="rgb(209,12,38)"/><text x="30.4976%" y="143.50"></text></g><g><title>coherent_trait (280,093 samples, 0.20%)</title><rect x="30.2501%" y="117" width="0.2016%" height="15" fill="rgb(227,1,9)"/><text x="30.5001%" y="127.50"></text></g><g><title>specialization_graph_of (278,183 samples, 0.20%)</title><rect x="30.2514%" y="101" width="0.2002%" height="15" fill="rgb(248,47,43)"/><text x="30.5014%" y="111.50"></text></g><g><title>impl_parent (2,466,424 samples, 1.78%)</title><rect x="33.5825%" y="117" width="1.7754%" height="15" fill="rgb(221,10,30)"/><text x="33.8325%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,450,500 samples, 1.04%)</title><rect x="34.3138%" y="101" width="1.0441%" height="15" fill="rgb(210,229,1)"/><text x="34.5638%" y="111.50"></text></g><g><title>impl_trait_ref (5,609,615 samples, 4.04%)</title><rect x="35.3579%" y="117" width="4.0379%" height="15" fill="rgb(222,148,37)"/><text x="35.6079%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,608,814 samples, 3.32%)</title><rect x="36.0782%" y="101" width="3.3175%" height="15" fill="rgb(234,67,33)"/><text x="36.3282%" y="111.50">met..</text></g><g><title>trait_impls_of (863,609 samples, 0.62%)</title><rect x="39.4149%" y="117" width="0.6216%" height="15" fill="rgb(247,98,35)"/><text x="39.6649%" y="127.50"></text></g><g><title>implementations_of_trait (233,251 samples, 0.17%)</title><rect x="39.8687%" y="101" width="0.1679%" height="15" fill="rgb(247,138,52)"/><text x="40.1187%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (183,771 samples, 0.13%)</title><rect x="39.9043%" y="85" width="0.1323%" height="15" fill="rgb(213,79,30)"/><text x="40.1543%" y="95.50"></text></g><g><title>coherent_trait (13,638,994 samples, 9.82%)</title><rect x="30.2198%" y="149" width="9.8175%" height="15" fill="rgb(246,177,23)"/><text x="30.4698%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,285,029 samples, 9.56%)</title><rect x="30.4746%" y="133" width="9.5627%" height="15" fill="rgb(230,62,27)"/><text x="30.7246%" y="143.50">specialization..</text></g><g><title>coherence_checking (13,757,755 samples, 9.90%)</title><rect x="30.1989%" y="165" width="9.9030%" height="15" fill="rgb(216,154,8)"/><text x="30.4489%" y="175.50">coherence_chec..</text></g><g><title>associated_item (929,922 samples, 0.67%)</title><rect x="60.3919%" y="101" width="0.6694%" height="15" fill="rgb(244,35,45)"/><text x="60.6419%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (807,318 samples, 0.58%)</title><rect x="60.4802%" y="85" width="0.5811%" height="15" fill="rgb(251,115,12)"/><text x="60.7302%" y="95.50"></text></g><g><title>associated_items (1,214,516 samples, 0.87%)</title><rect x="60.2165%" y="117" width="0.8742%" height="15" fill="rgb(240,54,50)"/><text x="60.4665%" y="127.50"></text></g><g><title>adt_def (146,343 samples, 0.11%)</title><rect x="61.4311%" y="85" width="0.1053%" height="15" fill="rgb(233,84,52)"/><text x="61.6811%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (144,502 samples, 0.10%)</title><rect x="61.4324%" y="69" width="0.1040%" height="15" fill="rgb(207,117,47)"/><text x="61.6824%" y="79.50"></text></g><g><title>dropck_outlives (674,609 samples, 0.49%)</title><rect x="61.1702%" y="117" width="0.4856%" height="15" fill="rgb(249,43,39)"/><text x="61.4202%" y="127.50"></text></g><g><title>adt_dtorck_constraint (380,915 samples, 0.27%)</title><rect x="61.3817%" y="101" width="0.2742%" height="15" fill="rgb(209,38,44)"/><text x="61.6317%" y="111.50"></text></g><g><title>generics_of (267,111 samples, 0.19%)</title><rect x="63.0372%" y="101" width="0.1923%" height="15" fill="rgb(236,212,23)"/><text x="63.2872%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (215,611 samples, 0.16%)</title><rect x="63.0743%" y="85" width="0.1552%" height="15" fill="rgb(242,79,21)"/><text x="63.3243%" y="95.50"></text></g><g><title>impl_trait_ref (300,714 samples, 0.22%)</title><rect x="63.2710%" y="101" width="0.2165%" height="15" fill="rgb(211,96,35)"/><text x="63.5210%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (253,144 samples, 0.18%)</title><rect x="63.3052%" y="85" width="0.1822%" height="15" fill="rgb(253,215,40)"/><text x="63.5552%" y="95.50"></text></g><g><title>predicates_of (144,032 samples, 0.10%)</title><rect x="63.4973%" y="101" width="0.1037%" height="15" fill="rgb(211,81,21)"/><text x="63.7473%" y="111.50"></text></g><g><title>specializes (281,454 samples, 0.20%)</title><rect x="63.6010%" y="101" width="0.2026%" height="15" fill="rgb(208,190,38)"/><text x="63.8510%" y="111.50"></text></g><g><title>param_env (181,993 samples, 0.13%)</title><rect x="63.6726%" y="85" width="0.1310%" height="15" fill="rgb(235,213,38)"/><text x="63.9226%" y="95.50"></text></g><g><title>trait_impls_of (333,214 samples, 0.24%)</title><rect x="63.8174%" y="101" width="0.2399%" height="15" fill="rgb(237,122,38)"/><text x="64.0674%" y="111.50"></text></g><g><title>evaluate_obligation (3,346,913 samples, 2.41%)</title><rect x="61.6558%" y="117" width="2.4091%" height="15" fill="rgb(244,218,35)"/><text x="61.9058%" y="127.50">ev..</text></g><g><title>fn_sig (201,434 samples, 0.14%)</title><rect x="64.0957%" y="117" width="0.1450%" height="15" fill="rgb(240,68,47)"/><text x="64.3457%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (178,144 samples, 0.13%)</title><rect x="64.1125%" y="101" width="0.1282%" height="15" fill="rgb(210,16,53)"/><text x="64.3625%" y="111.50"></text></g><g><title>generics_of (160,760 samples, 0.12%)</title><rect x="64.2407%" y="117" width="0.1157%" height="15" fill="rgb(235,124,12)"/><text x="64.4907%" y="127.50"></text></g><g><title>item_attrs (164,842 samples, 0.12%)</title><rect x="64.4437%" y="117" width="0.1187%" height="15" fill="rgb(224,169,11)"/><text x="64.6937%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (153,702 samples, 0.11%)</title><rect x="64.4517%" y="101" width="0.1106%" height="15" fill="rgb(250,166,2)"/><text x="64.7017%" y="111.50"></text></g><g><title>evaluate_obligation (260,214 samples, 0.19%)</title><rect x="64.8310%" y="101" width="0.1873%" height="15" fill="rgb(242,216,29)"/><text x="65.0810%" y="111.50"></text></g><g><title>method_autoderef_steps (540,766 samples, 0.39%)</title><rect x="64.6374%" y="117" width="0.3892%" height="15" fill="rgb(230,116,27)"/><text x="64.8874%" y="127.50"></text></g><g><title>predicates_of (532,090 samples, 0.38%)</title><rect x="65.0993%" y="117" width="0.3830%" height="15" fill="rgb(228,99,48)"/><text x="65.3493%" y="127.50"></text></g><g><title>predicates_defined_on (349,893 samples, 0.25%)</title><rect x="65.2305%" y="101" width="0.2519%" height="15" fill="rgb(253,11,6)"/><text x="65.4805%" y="111.50"></text></g><g><title>associated_item (278,243 samples, 0.20%)</title><rect x="65.8175%" y="85" width="0.2003%" height="15" fill="rgb(247,143,39)"/><text x="66.0675%" y="95.50"></text></g><g><title>associated_items (316,214 samples, 0.23%)</title><rect x="65.7948%" y="101" width="0.2276%" height="15" fill="rgb(236,97,10)"/><text x="66.0448%" y="111.50"></text></g><g><title>typeck (756,959 samples, 0.54%)</title><rect x="65.5764%" y="117" width="0.5449%" height="15" fill="rgb(233,208,19)"/><text x="65.8264%" y="127.50"></text></g><g><title>item_bodies_checking (36,187,447 samples, 26.05%)</title><rect x="40.1379%" y="165" width="26.0481%" height="15" fill="rgb(216,164,2)"/><text x="40.3879%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (36,184,047 samples, 26.05%)</title><rect x="40.1404%" y="149" width="26.0457%" height="15" fill="rgb(220,129,5)"/><text x="40.3904%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (36,012,296 samples, 25.92%)</title><rect x="40.2640%" y="133" width="25.9221%" height="15" fill="rgb(242,17,10)"/><text x="40.5140%" y="143.50">typeck</text></g><g><title>item_types_checking (1,185,743 samples, 0.85%)</title><rect x="66.1861%" y="165" width="0.8535%" height="15" fill="rgb(242,107,0)"/><text x="66.4361%" y="175.50"></text></g><g><title>check_mod_item_types (1,180,353 samples, 0.85%)</title><rect x="66.1900%" y="149" width="0.8496%" height="15" fill="rgb(251,28,31)"/><text x="66.4400%" y="159.50"></text></g><g><title>mir_const_qualif (534,938 samples, 0.39%)</title><rect x="67.6795%" y="85" width="0.3851%" height="15" fill="rgb(233,223,10)"/><text x="67.9295%" y="95.50"></text></g><g><title>mir_const (444,016 samples, 0.32%)</title><rect x="67.7450%" y="69" width="0.3196%" height="15" fill="rgb(215,21,27)"/><text x="67.9950%" y="79.50"></text></g><g><title>unsafety_check_result (300,244 samples, 0.22%)</title><rect x="67.8485%" y="53" width="0.2161%" height="15" fill="rgb(232,23,21)"/><text x="68.0985%" y="63.50"></text></g><g><title>mir_built (254,543 samples, 0.18%)</title><rect x="67.8814%" y="37" width="0.1832%" height="15" fill="rgb(244,5,23)"/><text x="68.1314%" y="47.50"></text></g><g><title>mir_borrowck (1,342,105 samples, 0.97%)</title><rect x="68.4597%" y="53" width="0.9661%" height="15" fill="rgb(226,81,46)"/><text x="68.7097%" y="63.50"></text></g><g><title>mir_for_ctfe (1,897,342 samples, 1.37%)</title><rect x="68.0646%" y="85" width="1.3657%" height="15" fill="rgb(247,70,30)"/><text x="68.3146%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,754,299 samples, 1.26%)</title><rect x="68.1676%" y="69" width="1.2628%" height="15" fill="rgb(212,68,19)"/><text x="68.4176%" y="79.50"></text></g><g><title>eval_to_const_value_raw (312,156 samples, 0.22%)</title><rect x="69.4948%" y="69" width="0.2247%" height="15" fill="rgb(240,187,13)"/><text x="69.7448%" y="79.50"></text></g><g><title>eval_to_const_value_raw (296,495 samples, 0.21%)</title><rect x="69.5061%" y="53" width="0.2134%" height="15" fill="rgb(223,113,26)"/><text x="69.7561%" y="63.50"></text></g><g><title>eval_to_allocation_raw (266,205 samples, 0.19%)</title><rect x="69.5279%" y="37" width="0.1916%" height="15" fill="rgb(206,192,2)"/><text x="69.7779%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (437,827 samples, 0.32%)</title><rect x="69.4328%" y="85" width="0.3152%" height="15" fill="rgb(241,108,4)"/><text x="69.6828%" y="95.50"></text></g><g><title>eval_to_const_value_raw (4,252,859 samples, 3.06%)</title><rect x="67.4250%" y="133" width="3.0613%" height="15" fill="rgb(247,173,49)"/><text x="67.6750%" y="143.50">eva..</text></g><g><title>eval_to_const_value_raw (4,232,549 samples, 3.05%)</title><rect x="67.4396%" y="117" width="3.0466%" height="15" fill="rgb(224,114,35)"/><text x="67.6896%" y="127.50">eva..</text></g><g><title>eval_to_allocation_raw (4,218,489 samples, 3.04%)</title><rect x="67.4497%" y="101" width="3.0365%" height="15" fill="rgb(245,159,27)"/><text x="67.6997%" y="111.50">eva..</text></g><g><title>typeck (1,025,650 samples, 0.74%)</title><rect x="69.7480%" y="85" width="0.7383%" height="15" fill="rgb(245,172,44)"/><text x="69.9980%" y="95.50"></text></g><g><title>late_bound_vars_map (164,551 samples, 0.12%)</title><rect x="70.6820%" y="117" width="0.1184%" height="15" fill="rgb(236,23,11)"/><text x="70.9320%" y="127.50"></text></g><g><title>resolve_lifetimes (139,691 samples, 0.10%)</title><rect x="70.6999%" y="101" width="0.1006%" height="15" fill="rgb(205,117,38)"/><text x="70.9499%" y="111.50"></text></g><g><title>fn_sig (466,665 samples, 0.34%)</title><rect x="70.4863%" y="133" width="0.3359%" height="15" fill="rgb(237,72,25)"/><text x="70.7363%" y="143.50"></text></g><g><title>generics_of (338,623 samples, 0.24%)</title><rect x="70.8222%" y="133" width="0.2437%" height="15" fill="rgb(244,70,9)"/><text x="71.0722%" y="143.50"></text></g><g><title>param_env (331,173 samples, 0.24%)</title><rect x="71.1158%" y="133" width="0.2384%" height="15" fill="rgb(217,125,39)"/><text x="71.3658%" y="143.50"></text></g><g><title>late_bound_vars_map (236,705 samples, 0.17%)</title><rect x="71.6732%" y="85" width="0.1704%" height="15" fill="rgb(235,36,10)"/><text x="71.9232%" y="95.50"></text></g><g><title>resolve_lifetimes (223,424 samples, 0.16%)</title><rect x="71.6827%" y="69" width="0.1608%" height="15" fill="rgb(251,123,47)"/><text x="71.9327%" y="79.50"></text></g><g><title>explicit_predicates_of (450,097 samples, 0.32%)</title><rect x="71.5323%" y="101" width="0.3240%" height="15" fill="rgb(221,13,13)"/><text x="71.7823%" y="111.50"></text></g><g><title>predicates_of (1,013,763 samples, 0.73%)</title><rect x="71.3542%" y="133" width="0.7297%" height="15" fill="rgb(238,131,9)"/><text x="71.6042%" y="143.50"></text></g><g><title>predicates_defined_on (919,382 samples, 0.66%)</title><rect x="71.4221%" y="117" width="0.6618%" height="15" fill="rgb(211,50,8)"/><text x="71.6721%" y="127.50"></text></g><g><title>inferred_outlives_of (316,283 samples, 0.23%)</title><rect x="71.8563%" y="101" width="0.2277%" height="15" fill="rgb(245,182,24)"/><text x="72.1063%" y="111.50"></text></g><g><title>inferred_outlives_crate (278,273 samples, 0.20%)</title><rect x="71.8836%" y="85" width="0.2003%" height="15" fill="rgb(242,14,37)"/><text x="72.1336%" y="95.50"></text></g><g><title>type_of (140,781 samples, 0.10%)</title><rect x="71.9826%" y="69" width="0.1013%" height="15" fill="rgb(246,228,12)"/><text x="72.2326%" y="79.50"></text></g><g><title>type_collecting (7,164,771 samples, 5.16%)</title><rect x="67.0411%" y="165" width="5.1573%" height="15" fill="rgb(213,55,15)"/><text x="67.2911%" y="175.50">type_c..</text></g><g><title>collect_mod_item_types (7,147,911 samples, 5.15%)</title><rect x="67.0533%" y="149" width="5.1451%" height="15" fill="rgb(209,9,3)"/><text x="67.3033%" y="159.50">collec..</text></g><g><title>type_of (159,072 samples, 0.11%)</title><rect x="72.0839%" y="133" width="0.1145%" height="15" fill="rgb(230,59,30)"/><text x="72.3339%" y="143.50"></text></g><g><title>evaluate_obligation (732,227 samples, 0.53%)</title><rect x="74.9215%" y="133" width="0.5271%" height="15" fill="rgb(209,121,21)"/><text x="75.1715%" y="143.50"></text></g><g><title>implied_outlives_bounds (379,622 samples, 0.27%)</title><rect x="75.4486%" y="133" width="0.2733%" height="15" fill="rgb(220,109,13)"/><text x="75.6986%" y="143.50"></text></g><g><title>param_env (583,318 samples, 0.42%)</title><rect x="75.7219%" y="133" width="0.4199%" height="15" fill="rgb(232,18,1)"/><text x="75.9719%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,822,860 samples, 4.19%)</title><rect x="72.4270%" y="149" width="4.1914%" height="15" fill="rgb(215,41,42)"/><text x="72.6770%" y="159.50">check..</text></g><g><title>region_scope_tree (649,028 samples, 0.47%)</title><rect x="76.1512%" y="133" width="0.4672%" height="15" fill="rgb(224,123,36)"/><text x="76.4012%" y="143.50"></text></g><g><title>adt_sized_constraint (243,483 samples, 0.18%)</title><rect x="77.8992%" y="117" width="0.1753%" height="15" fill="rgb(240,125,3)"/><text x="78.1492%" y="127.50"></text></g><g><title>evaluate_obligation (536,889 samples, 0.39%)</title><rect x="77.7050%" y="133" width="0.3865%" height="15" fill="rgb(205,98,50)"/><text x="77.9550%" y="143.50"></text></g><g><title>param_env (325,644 samples, 0.23%)</title><rect x="78.1573%" y="133" width="0.2344%" height="15" fill="rgb(205,185,37)"/><text x="78.4073%" y="143.50"></text></g><g><title>analysis (108,663,594 samples, 78.22%)</title><rect x="0.4006%" y="197" width="78.2173%" height="15" fill="rgb(238,207,15)"/><text x="0.6506%" y="207.50">analysis</text></g><g><title>type_check_crate (67,369,138 samples, 48.49%)</title><rect x="30.1248%" y="181" width="48.4931%" height="15" fill="rgb(213,199,42)"/><text x="30.3748%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,907,840 samples, 6.41%)</title><rect x="72.2059%" y="165" width="6.4120%" height="15" fill="rgb(235,201,11)"/><text x="72.4559%" y="175.50">wf_check..</text></g><g><title>check_item_well_formed (2,777,836 samples, 2.00%)</title><rect x="76.6184%" y="149" width="1.9995%" height="15" fill="rgb(207,46,11)"/><text x="76.8684%" y="159.50">c..</text></g><g><title>codegen_crate (585,637 samples, 0.42%)</title><rect x="78.6231%" y="197" width="0.4215%" height="15" fill="rgb(241,35,35)"/><text x="78.8731%" y="207.50"></text></g><g><title>metadata_register_crate (1,389,476 samples, 1.00%)</title><rect x="88.0678%" y="149" width="1.0002%" height="15" fill="rgb(243,32,47)"/><text x="88.3178%" y="159.50"></text></g><g><title>metadata_register_crate (498,396 samples, 0.36%)</title><rect x="88.7092%" y="133" width="0.3588%" height="15" fill="rgb(247,202,23)"/><text x="88.9592%" y="143.50"></text></g><g><title>macro_expand_crate (13,762,806 samples, 9.91%)</title><rect x="79.3567%" y="181" width="9.9066%" height="15" fill="rgb(219,102,11)"/><text x="79.6067%" y="191.50">macro_expand_c..</text></g><g><title>expand_crate (13,746,065 samples, 9.89%)</title><rect x="79.3687%" y="165" width="9.8946%" height="15" fill="rgb(243,110,44)"/><text x="79.6187%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (271,342 samples, 0.20%)</title><rect x="89.0680%" y="149" width="0.1953%" height="15" fill="rgb(222,74,54)"/><text x="89.3180%" y="159.50"></text></g><g><title>finalize_macro_resolutions (183,542 samples, 0.13%)</title><rect x="89.3563%" y="165" width="0.1321%" height="15" fill="rgb(216,99,12)"/><text x="89.6063%" y="175.50"></text></g><g><title>late_resolve_crate (2,656,850 samples, 1.91%)</title><rect x="89.4884%" y="165" width="1.9124%" height="15" fill="rgb(226,22,26)"/><text x="89.7384%" y="175.50">l..</text></g><g><title>configure_and_expand (17,291,005 samples, 12.45%)</title><rect x="79.0446%" y="197" width="12.4463%" height="15" fill="rgb(217,163,10)"/><text x="79.2946%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,016,134 samples, 2.17%)</title><rect x="89.3198%" y="181" width="2.1710%" height="15" fill="rgb(213,25,53)"/><text x="89.5698%" y="191.50">r..</text></g><g><title>drop_ast (189,042 samples, 0.14%)</title><rect x="91.4909%" y="197" width="0.1361%" height="15" fill="rgb(252,105,26)"/><text x="91.7409%" y="207.50"></text></g><g><title>early_lint_checks (495,995 samples, 0.36%)</title><rect x="91.6400%" y="197" width="0.3570%" height="15" fill="rgb(220,39,43)"/><text x="91.8900%" y="207.50"></text></g><g><title>free_global_ctxt (3,960,234 samples, 2.85%)</title><rect x="91.9970%" y="197" width="2.8506%" height="15" fill="rgb(229,68,48)"/><text x="92.2470%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,539,757 samples, 1.11%)</title><rect x="94.8477%" y="197" width="1.1083%" height="15" fill="rgb(252,8,32)"/><text x="95.0977%" y="207.50"></text></g><g><title>hir_lowering (3,694,402 samples, 2.66%)</title><rect x="95.9560%" y="197" width="2.6593%" height="15" fill="rgb(223,20,43)"/><text x="96.2060%" y="207.50">hi..</text></g><g><title>parse_crate (246,453 samples, 0.18%)</title><rect x="98.6768%" y="197" width="0.1774%" height="15" fill="rgb(229,81,49)"/><text x="98.9268%" y="207.50"></text></g><g><title>prepare_outputs (201,222 samples, 0.14%)</title><rect x="98.8589%" y="197" width="0.1448%" height="15" fill="rgb(236,28,36)"/><text x="99.1089%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (940,271 samples, 0.68%)</title><rect x="99.0037%" y="197" width="0.6768%" height="15" fill="rgb(249,185,26)"/><text x="99.2537%" y="207.50"></text></g><g><title>all (138,925,245 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (138,925,245 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (340,704 samples, 0.25%)</title><rect x="99.7548%" y="197" width="0.2452%" height="15" fill="rgb(221,78,26)"/><text x="100.0048%" y="207.50"></text></g></svg></svg>