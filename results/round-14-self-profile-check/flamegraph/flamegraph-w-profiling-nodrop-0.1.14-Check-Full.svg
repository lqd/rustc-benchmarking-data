<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (32,290 samples, 0.14%)</title><rect x="7.1585%" y="133" width="0.1353%" height="15" fill="rgb(227,0,7)"/><text x="7.4085%" y="143.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (26,280 samples, 0.11%)</title><rect x="7.1837%" y="117" width="0.1101%" height="15" fill="rgb(217,0,24)"/><text x="7.4337%" y="127.50"></text></g><g><title>param_env (30,601 samples, 0.13%)</title><rect x="7.2938%" y="133" width="0.1282%" height="15" fill="rgb(221,193,54)"/><text x="7.5438%" y="143.50"></text></g><g><title>needs_drop_raw (162,522 samples, 0.68%)</title><rect x="8.9057%" y="101" width="0.6810%" height="15" fill="rgb(248,212,6)"/><text x="9.1557%" y="111.50"></text></g><g><title>is_copy_raw (154,611 samples, 0.65%)</title><rect x="8.9388%" y="85" width="0.6478%" height="15" fill="rgb(208,68,35)"/><text x="9.1888%" y="95.50"></text></g><g><title>evaluate_obligation (145,441 samples, 0.61%)</title><rect x="8.9772%" y="69" width="0.6094%" height="15" fill="rgb(232,128,0)"/><text x="9.2272%" y="79.50"></text></g><g><title>trait_impls_of (126,701 samples, 0.53%)</title><rect x="9.0558%" y="53" width="0.5309%" height="15" fill="rgb(207,160,47)"/><text x="9.3058%" y="63.50"></text></g><g><title>implementations_of_trait (26,990 samples, 0.11%)</title><rect x="9.4736%" y="37" width="0.1131%" height="15" fill="rgb(228,23,34)"/><text x="9.7236%" y="47.50"></text></g><g><title>resolve_instance (52,871 samples, 0.22%)</title><rect x="9.5867%" y="101" width="0.2215%" height="15" fill="rgb(218,30,26)"/><text x="9.8367%" y="111.50"></text></g><g><title>thir_body (120,120 samples, 0.50%)</title><rect x="9.8250%" y="101" width="0.5033%" height="15" fill="rgb(220,122,19)"/><text x="10.0750%" y="111.50"></text></g><g><title>mir_const (887,281 samples, 3.72%)</title><rect x="6.6190%" y="149" width="3.7177%" height="15" fill="rgb(250,228,42)"/><text x="6.8690%" y="159.50">mir_..</text></g><g><title>unsafety_check_result (695,619 samples, 2.91%)</title><rect x="7.4220%" y="133" width="2.9147%" height="15" fill="rgb(240,193,28)"/><text x="7.6720%" y="143.50">un..</text></g><g><title>mir_built (601,769 samples, 2.52%)</title><rect x="7.8153%" y="117" width="2.5214%" height="15" fill="rgb(216,20,37)"/><text x="8.0653%" y="127.50">mi..</text></g><g><title>mir_promoted (1,005,352 samples, 4.21%)</title><rect x="6.1591%" y="165" width="4.2125%" height="15" fill="rgb(206,188,39)"/><text x="6.4091%" y="175.50">mir_p..</text></g><g><title>type_op_normalize_fn_sig (36,050 samples, 0.15%)</title><rect x="10.3716%" y="165" width="0.1511%" height="15" fill="rgb(217,207,13)"/><text x="10.6216%" y="175.50"></text></g><g><title>MIR_borrow_checking (2,096,394 samples, 8.78%)</title><rect x="2.2076%" y="197" width="8.7840%" height="15" fill="rgb(231,73,38)"/><text x="2.4576%" y="207.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (2,084,953 samples, 8.74%)</title><rect x="2.2555%" y="181" width="8.7361%" height="15" fill="rgb(225,20,46)"/><text x="2.5055%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (111,921 samples, 0.47%)</title><rect x="10.5226%" y="165" width="0.4690%" height="15" fill="rgb(210,31,41)"/><text x="10.7726%" y="175.50"></text></g><g><title>MIR_effect_checking (40,730 samples, 0.17%)</title><rect x="10.9916%" y="197" width="0.1707%" height="15" fill="rgb(221,200,47)"/><text x="11.2416%" y="207.50"></text></g><g><title>hir_module_items (73,211 samples, 0.31%)</title><rect x="11.1622%" y="197" width="0.3068%" height="15" fill="rgb(226,26,5)"/><text x="11.4122%" y="207.50"></text></g><g><title>get_lang_items (47,361 samples, 0.20%)</title><rect x="11.9074%" y="149" width="0.1984%" height="15" fill="rgb(249,33,26)"/><text x="12.1574%" y="159.50"></text></g><g><title>codegen_fn_attrs (29,730 samples, 0.12%)</title><rect x="12.2137%" y="133" width="0.1246%" height="15" fill="rgb(235,183,28)"/><text x="12.4637%" y="143.50"></text></g><g><title>should_inherit_track_caller (56,870 samples, 0.24%)</title><rect x="12.1059%" y="149" width="0.2383%" height="15" fill="rgb(221,5,38)"/><text x="12.3559%" y="159.50"></text></g><g><title>codegen_fn_attrs (152,411 samples, 0.64%)</title><rect x="11.7720%" y="165" width="0.6386%" height="15" fill="rgb(247,18,42)"/><text x="12.0220%" y="175.50"></text></g><g><title>check_mod_attrs (206,993 samples, 0.87%)</title><rect x="11.5437%" y="181" width="0.8673%" height="15" fill="rgb(241,131,45)"/><text x="11.7937%" y="191.50"></text></g><g><title>lookup_deprecation_entry (50,870 samples, 0.21%)</title><rect x="12.8597%" y="165" width="0.2131%" height="15" fill="rgb(249,31,29)"/><text x="13.1097%" y="175.50"></text></g><g><title>stability_index (25,090 samples, 0.11%)</title><rect x="12.9677%" y="149" width="0.1051%" height="15" fill="rgb(225,111,53)"/><text x="13.2177%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (150,281 samples, 0.63%)</title><rect x="12.5671%" y="181" width="0.6297%" height="15" fill="rgb(238,160,17)"/><text x="12.8171%" y="191.50"></text></g><g><title>misc_checking_1 (434,914 samples, 1.82%)</title><rect x="11.4706%" y="197" width="1.8223%" height="15" fill="rgb(214,148,48)"/><text x="11.7206%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (75,011 samples, 0.31%)</title><rect x="13.2975%" y="181" width="0.3143%" height="15" fill="rgb(232,36,49)"/><text x="13.5475%" y="191.50"></text></g><g><title>check_mod_liveness (60,701 samples, 0.25%)</title><rect x="13.3574%" y="165" width="0.2543%" height="15" fill="rgb(209,103,24)"/><text x="13.6074%" y="175.50"></text></g><g><title>misc_checking_2 (162,472 samples, 0.68%)</title><rect x="13.2929%" y="197" width="0.6808%" height="15" fill="rgb(229,88,8)"/><text x="13.5429%" y="207.50"></text></g><g><title>match_checking (86,371 samples, 0.36%)</title><rect x="13.6118%" y="181" width="0.3619%" height="15" fill="rgb(213,181,19)"/><text x="13.8618%" y="191.50"></text></g><g><title>check_match (82,271 samples, 0.34%)</title><rect x="13.6290%" y="165" width="0.3447%" height="15" fill="rgb(254,191,54)"/><text x="13.8790%" y="175.50"></text></g><g><title>check_private_in_public (39,270 samples, 0.16%)</title><rect x="13.9990%" y="181" width="0.1645%" height="15" fill="rgb(241,83,37)"/><text x="14.2490%" y="191.50"></text></g><g><title>death_checking (69,771 samples, 0.29%)</title><rect x="14.1635%" y="181" width="0.2923%" height="15" fill="rgb(233,36,39)"/><text x="14.4135%" y="191.50"></text></g><g><title>all_diagnostic_items (33,980 samples, 0.14%)</title><rect x="16.0010%" y="149" width="0.1424%" height="15" fill="rgb(226,3,54)"/><text x="16.2510%" y="159.50"></text></g><g><title>param_env (52,311 samples, 0.22%)</title><rect x="16.1444%" y="149" width="0.2192%" height="15" fill="rgb(245,192,40)"/><text x="16.3944%" y="159.50"></text></g><g><title>predicates_of (24,931 samples, 0.10%)</title><rect x="16.2592%" y="133" width="0.1045%" height="15" fill="rgb(238,167,29)"/><text x="16.5092%" y="143.50"></text></g><g><title>trait_impls_of (208,373 samples, 0.87%)</title><rect x="16.3636%" y="149" width="0.8731%" height="15" fill="rgb(232,182,51)"/><text x="16.6136%" y="159.50"></text></g><g><title>implementations_of_trait (41,901 samples, 0.18%)</title><rect x="17.0611%" y="133" width="0.1756%" height="15" fill="rgb(231,60,39)"/><text x="17.3111%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (37,791 samples, 0.16%)</title><rect x="17.0784%" y="117" width="0.1583%" height="15" fill="rgb(208,69,12)"/><text x="17.3284%" y="127.50"></text></g><g><title>crate_lints (3,343,147 samples, 14.01%)</title><rect x="14.4625%" y="165" width="14.0079%" height="15" fill="rgb(235,93,37)"/><text x="14.7125%" y="175.50">crate_lints</text></g><g><title>type_of (2,681,048 samples, 11.23%)</title><rect x="17.2367%" y="149" width="11.2337%" height="15" fill="rgb(213,116,39)"/><text x="17.4867%" y="159.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,429,055 samples, 10.18%)</title><rect x="18.2926%" y="133" width="10.1779%" height="15" fill="rgb(222,207,29)"/><text x="18.5426%" y="143.50">metadata_decode..</text></g><g><title>lint_checking (3,399,588 samples, 14.24%)</title><rect x="14.4559%" y="181" width="14.2444%" height="15" fill="rgb(206,96,30)"/><text x="14.7059%" y="191.50">lint_checking</text></g><g><title>module_lints (54,861 samples, 0.23%)</title><rect x="28.4704%" y="165" width="0.2299%" height="15" fill="rgb(218,138,4)"/><text x="28.7204%" y="175.50"></text></g><g><title>lint_mod (52,411 samples, 0.22%)</title><rect x="28.4807%" y="149" width="0.2196%" height="15" fill="rgb(250,191,14)"/><text x="28.7307%" y="159.50"></text></g><g><title>privacy_access_levels (48,991 samples, 0.21%)</title><rect x="28.7003%" y="181" width="0.2053%" height="15" fill="rgb(239,60,40)"/><text x="28.9503%" y="191.50"></text></g><g><title>privacy_checking_modules (60,141 samples, 0.25%)</title><rect x="28.9056%" y="181" width="0.2520%" height="15" fill="rgb(206,27,48)"/><text x="29.1556%" y="191.50"></text></g><g><title>check_mod_privacy (58,571 samples, 0.25%)</title><rect x="28.9122%" y="165" width="0.2454%" height="15" fill="rgb(225,35,8)"/><text x="29.1622%" y="175.50"></text></g><g><title>misc_checking_3 (3,638,491 samples, 15.25%)</title><rect x="13.9737%" y="197" width="15.2455%" height="15" fill="rgb(250,213,24)"/><text x="14.2237%" y="207.50">misc_checking_3</text></g><g><title>impl_parent (120,891 samples, 0.51%)</title><rect x="30.1616%" y="133" width="0.5065%" height="15" fill="rgb(247,123,22)"/><text x="30.4116%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (93,201 samples, 0.39%)</title><rect x="30.2777%" y="117" width="0.3905%" height="15" fill="rgb(231,138,38)"/><text x="30.5277%" y="127.50"></text></g><g><title>impl_trait_ref (421,385 samples, 1.77%)</title><rect x="30.6682%" y="133" width="1.7656%" height="15" fill="rgb(231,145,46)"/><text x="30.9182%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (392,375 samples, 1.64%)</title><rect x="30.7897%" y="117" width="1.6441%" height="15" fill="rgb(251,118,11)"/><text x="31.0397%" y="127.50"></text></g><g><title>coherent_trait (820,089 samples, 3.44%)</title><rect x="29.3408%" y="165" width="3.4362%" height="15" fill="rgb(217,147,25)"/><text x="29.5908%" y="175.50">coh..</text></g><g><title>specialization_graph_of (813,719 samples, 3.41%)</title><rect x="29.3675%" y="149" width="3.4095%" height="15" fill="rgb(247,81,37)"/><text x="29.6175%" y="159.50">spe..</text></g><g><title>trait_impls_of (81,921 samples, 0.34%)</title><rect x="32.4338%" y="133" width="0.3433%" height="15" fill="rgb(209,12,38)"/><text x="32.6838%" y="143.50"></text></g><g><title>implementations_of_trait (30,010 samples, 0.13%)</title><rect x="32.6513%" y="117" width="0.1257%" height="15" fill="rgb(227,1,9)"/><text x="32.9013%" y="127.50"></text></g><g><title>coherence_checking (861,229 samples, 3.61%)</title><rect x="29.2935%" y="181" width="3.6086%" height="15" fill="rgb(248,47,43)"/><text x="29.5435%" y="191.50">cohe..</text></g><g><title>dropck_outlives (31,401 samples, 0.13%)</title><rect x="37.5368%" y="133" width="0.1316%" height="15" fill="rgb(221,10,30)"/><text x="37.7868%" y="143.50"></text></g><g><title>predicates_of (29,180 samples, 0.12%)</title><rect x="38.1429%" y="117" width="0.1223%" height="15" fill="rgb(210,229,1)"/><text x="38.3929%" y="127.50"></text></g><g><title>evaluate_obligation (226,823 samples, 0.95%)</title><rect x="37.6684%" y="133" width="0.9504%" height="15" fill="rgb(222,148,37)"/><text x="37.9184%" y="143.50"></text></g><g><title>trait_impls_of (82,221 samples, 0.34%)</title><rect x="38.2743%" y="117" width="0.3445%" height="15" fill="rgb(234,67,33)"/><text x="38.5243%" y="127.50"></text></g><g><title>implementations_of_trait (32,451 samples, 0.14%)</title><rect x="38.4828%" y="101" width="0.1360%" height="15" fill="rgb(247,98,35)"/><text x="38.7328%" y="111.50"></text></g><g><title>associated_item (64,071 samples, 0.27%)</title><rect x="38.7687%" y="101" width="0.2685%" height="15" fill="rgb(247,138,52)"/><text x="39.0187%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (63,521 samples, 0.27%)</title><rect x="38.7710%" y="85" width="0.2662%" height="15" fill="rgb(213,79,30)"/><text x="39.0210%" y="95.50"></text></g><g><title>impl_item_implementor_ids (71,381 samples, 0.30%)</title><rect x="38.7583%" y="133" width="0.2991%" height="15" fill="rgb(246,177,23)"/><text x="39.0083%" y="143.50"></text></g><g><title>associated_items (70,481 samples, 0.30%)</title><rect x="38.7621%" y="117" width="0.2953%" height="15" fill="rgb(230,62,27)"/><text x="39.0121%" y="127.50"></text></g><g><title>impl_trait_ref (31,920 samples, 0.13%)</title><rect x="39.0739%" y="133" width="0.1337%" height="15" fill="rgb(216,154,8)"/><text x="39.3239%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (28,440 samples, 0.12%)</title><rect x="39.0885%" y="117" width="0.1192%" height="15" fill="rgb(244,35,45)"/><text x="39.3385%" y="127.50"></text></g><g><title>item_attrs (62,750 samples, 0.26%)</title><rect x="39.2077%" y="133" width="0.2629%" height="15" fill="rgb(251,115,12)"/><text x="39.4577%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (61,070 samples, 0.26%)</title><rect x="39.2147%" y="117" width="0.2559%" height="15" fill="rgb(240,54,50)"/><text x="39.4647%" y="127.50"></text></g><g><title>predicates_of (57,830 samples, 0.24%)</title><rect x="39.4948%" y="133" width="0.2423%" height="15" fill="rgb(233,84,52)"/><text x="39.7448%" y="143.50"></text></g><g><title>predicates_defined_on (43,290 samples, 0.18%)</title><rect x="39.5557%" y="117" width="0.1814%" height="15" fill="rgb(207,117,47)"/><text x="39.8057%" y="127.50"></text></g><g><title>type_of (32,771 samples, 0.14%)</title><rect x="39.8156%" y="133" width="0.1373%" height="15" fill="rgb(249,43,39)"/><text x="40.0656%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (27,611 samples, 0.12%)</title><rect x="39.8372%" y="117" width="0.1157%" height="15" fill="rgb(209,38,44)"/><text x="40.0872%" y="127.50"></text></g><g><title>item_bodies_checking (1,671,049 samples, 7.00%)</title><rect x="32.9596%" y="181" width="7.0018%" height="15" fill="rgb(236,212,23)"/><text x="33.2096%" y="191.50">item_bodi..</text></g><g><title>typeck_item_bodies (1,669,669 samples, 7.00%)</title><rect x="32.9654%" y="165" width="6.9960%" height="15" fill="rgb(242,79,21)"/><text x="33.2154%" y="175.50">typeck_it..</text></g><g><title>typeck (1,660,499 samples, 6.96%)</title><rect x="33.0038%" y="149" width="6.9576%" height="15" fill="rgb(211,96,35)"/><text x="33.2538%" y="159.50">typeck</text></g><g><title>item_types_checking (255,933 samples, 1.07%)</title><rect x="39.9613%" y="181" width="1.0724%" height="15" fill="rgb(253,215,40)"/><text x="40.2113%" y="191.50"></text></g><g><title>check_mod_item_types (254,133 samples, 1.06%)</title><rect x="39.9689%" y="165" width="1.0648%" height="15" fill="rgb(211,81,21)"/><text x="40.2189%" y="175.50"></text></g><g><title>fn_sig (63,812 samples, 0.27%)</title><rect x="41.3689%" y="149" width="0.2674%" height="15" fill="rgb(208,190,38)"/><text x="41.6189%" y="159.50"></text></g><g><title>late_bound_vars_map (40,741 samples, 0.17%)</title><rect x="41.4656%" y="133" width="0.1707%" height="15" fill="rgb(235,213,38)"/><text x="41.7156%" y="143.50"></text></g><g><title>resolve_lifetimes (34,881 samples, 0.15%)</title><rect x="41.4901%" y="117" width="0.1462%" height="15" fill="rgb(237,122,38)"/><text x="41.7401%" y="127.50"></text></g><g><title>generics_of (73,600 samples, 0.31%)</title><rect x="41.6363%" y="149" width="0.3084%" height="15" fill="rgb(244,218,35)"/><text x="41.8863%" y="159.50"></text></g><g><title>explicit_predicates_of (77,571 samples, 0.33%)</title><rect x="42.1071%" y="117" width="0.3250%" height="15" fill="rgb(240,68,47)"/><text x="42.3571%" y="127.50"></text></g><g><title>predicates_of (162,032 samples, 0.68%)</title><rect x="42.0030%" y="149" width="0.6789%" height="15" fill="rgb(210,16,53)"/><text x="42.2530%" y="159.50"></text></g><g><title>predicates_defined_on (153,562 samples, 0.64%)</title><rect x="42.0385%" y="133" width="0.6434%" height="15" fill="rgb(235,124,12)"/><text x="42.2885%" y="143.50"></text></g><g><title>inferred_outlives_of (59,621 samples, 0.25%)</title><rect x="42.4321%" y="117" width="0.2498%" height="15" fill="rgb(224,169,11)"/><text x="42.6821%" y="127.50"></text></g><g><title>inferred_outlives_crate (49,861 samples, 0.21%)</title><rect x="42.4730%" y="101" width="0.2089%" height="15" fill="rgb(250,166,2)"/><text x="42.7230%" y="111.50"></text></g><g><title>type_collecting (448,726 samples, 1.88%)</title><rect x="41.0382%" y="181" width="1.8802%" height="15" fill="rgb(242,216,29)"/><text x="41.2882%" y="191.50">t..</text></g><g><title>collect_mod_item_types (437,725 samples, 1.83%)</title><rect x="41.0843%" y="165" width="1.8341%" height="15" fill="rgb(230,116,27)"/><text x="41.3343%" y="175.50">c..</text></g><g><title>type_of (56,431 samples, 0.24%)</title><rect x="42.6819%" y="149" width="0.2364%" height="15" fill="rgb(228,99,48)"/><text x="42.9319%" y="159.50"></text></g><g><title>adt_def (28,411 samples, 0.12%)</title><rect x="42.7993%" y="133" width="0.1190%" height="15" fill="rgb(253,11,6)"/><text x="43.0493%" y="143.50"></text></g><g><title>evaluate_obligation (95,910 samples, 0.40%)</title><rect x="43.8077%" y="149" width="0.4019%" height="15" fill="rgb(247,143,39)"/><text x="44.0577%" y="159.50"></text></g><g><title>implied_outlives_bounds (38,410 samples, 0.16%)</title><rect x="44.2096%" y="149" width="0.1609%" height="15" fill="rgb(236,97,10)"/><text x="44.4596%" y="159.50"></text></g><g><title>param_env (29,830 samples, 0.12%)</title><rect x="44.3705%" y="149" width="0.1250%" height="15" fill="rgb(233,208,19)"/><text x="44.6205%" y="159.50"></text></g><g><title>check_impl_item_well_formed (374,084 samples, 1.57%)</title><rect x="43.0417%" y="165" width="1.5674%" height="15" fill="rgb(216,164,2)"/><text x="43.2917%" y="175.50"></text></g><g><title>region_scope_tree (27,111 samples, 0.11%)</title><rect x="44.4955%" y="149" width="0.1136%" height="15" fill="rgb(220,129,5)"/><text x="44.7455%" y="159.50"></text></g><g><title>evaluate_obligation (31,351 samples, 0.13%)</title><rect x="46.0803%" y="149" width="0.1314%" height="15" fill="rgb(242,17,10)"/><text x="46.3303%" y="159.50"></text></g><g><title>implied_outlives_bounds (46,000 samples, 0.19%)</title><rect x="46.2184%" y="149" width="0.1927%" height="15" fill="rgb(242,107,0)"/><text x="46.4684%" y="159.50"></text></g><g><title>param_env (160,691 samples, 0.67%)</title><rect x="46.4111%" y="149" width="0.6733%" height="15" fill="rgb(251,28,31)"/><text x="46.6611%" y="159.50"></text></g><g><title>predicates_of (27,371 samples, 0.11%)</title><rect x="47.0844%" y="149" width="0.1147%" height="15" fill="rgb(233,223,10)"/><text x="47.3344%" y="159.50"></text></g><g><title>analysis (10,887,962 samples, 45.62%)</title><rect x="1.8069%" y="213" width="45.6211%" height="15" fill="rgb(215,21,27)"/><text x="2.0569%" y="223.50">analysis</text></g><g><title>type_check_crate (4,345,749 samples, 18.21%)</title><rect x="29.2191%" y="197" width="18.2089%" height="15" fill="rgb(232,23,21)"/><text x="29.4691%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,075,622 samples, 4.51%)</title><rect x="42.9211%" y="181" width="4.5069%" height="15" fill="rgb(244,5,23)"/><text x="43.1711%" y="191.50">wf_ch..</text></g><g><title>check_item_well_formed (672,768 samples, 2.82%)</title><rect x="44.6091%" y="165" width="2.8189%" height="15" fill="rgb(226,81,46)"/><text x="44.8591%" y="175.50">ch..</text></g><g><title>variances_of (40,310 samples, 0.17%)</title><rect x="47.2591%" y="149" width="0.1689%" height="15" fill="rgb(247,70,30)"/><text x="47.5091%" y="159.50"></text></g><g><title>crate_variances (29,500 samples, 0.12%)</title><rect x="47.3044%" y="133" width="0.1236%" height="15" fill="rgb(212,68,19)"/><text x="47.5544%" y="143.50"></text></g><g><title>codegen_crate (362,394 samples, 1.52%)</title><rect x="47.4588%" y="213" width="1.5184%" height="15" fill="rgb(240,187,13)"/><text x="47.7088%" y="223.50"></text></g><g><title>AST_validation (66,741 samples, 0.28%)</title><rect x="49.4933%" y="197" width="0.2796%" height="15" fill="rgb(223,113,26)"/><text x="49.7433%" y="207.50"></text></g><g><title>crate_injection (45,570 samples, 0.19%)</title><rect x="49.8665%" y="197" width="0.1909%" height="15" fill="rgb(206,192,2)"/><text x="50.1165%" y="207.50"></text></g><g><title>metadata_load_macro (173,981 samples, 0.73%)</title><rect x="70.0266%" y="165" width="0.7290%" height="15" fill="rgb(241,108,4)"/><text x="70.2766%" y="175.50"></text></g><g><title>macro_expand_crate (6,223,870 samples, 26.08%)</title><rect x="50.0574%" y="197" width="26.0783%" height="15" fill="rgb(247,173,49)"/><text x="50.3074%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (6,208,129 samples, 26.01%)</title><rect x="50.1234%" y="181" width="26.0124%" height="15" fill="rgb(224,114,35)"/><text x="50.3734%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (1,284,035 samples, 5.38%)</title><rect x="70.7556%" y="165" width="5.3802%" height="15" fill="rgb(245,159,27)"/><text x="71.0056%" y="175.50">metadat..</text></g><g><title>metadata_register_crate (473,746 samples, 1.99%)</title><rect x="74.1507%" y="149" width="1.9850%" height="15" fill="rgb(245,172,44)"/><text x="74.4007%" y="159.50">m..</text></g><g><title>metadata_register_crate (40,281 samples, 0.17%)</title><rect x="75.9670%" y="133" width="0.1688%" height="15" fill="rgb(236,23,11)"/><text x="76.2170%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (66,621 samples, 0.28%)</title><rect x="76.1497%" y="197" width="0.2791%" height="15" fill="rgb(205,117,38)"/><text x="76.3997%" y="207.50"></text></g><g><title>finalize_macro_resolutions (125,202 samples, 0.52%)</title><rect x="76.5113%" y="181" width="0.5246%" height="15" fill="rgb(237,72,25)"/><text x="76.7613%" y="191.50"></text></g><g><title>late_resolve_crate (501,815 samples, 2.10%)</title><rect x="77.0359%" y="181" width="2.1026%" height="15" fill="rgb(244,70,9)"/><text x="77.2859%" y="191.50">l..</text></g><g><title>configure_and_expand (7,224,171 samples, 30.27%)</title><rect x="48.9772%" y="213" width="30.2696%" height="15" fill="rgb(217,125,39)"/><text x="49.2272%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (672,548 samples, 2.82%)</title><rect x="76.4288%" y="197" width="2.8180%" height="15" fill="rgb(235,36,10)"/><text x="76.6788%" y="207.50">re..</text></g><g><title>drop_ast (36,880 samples, 0.15%)</title><rect x="79.2468%" y="213" width="0.1545%" height="15" fill="rgb(251,123,47)"/><text x="79.4968%" y="223.50"></text></g><g><title>early_lint_checks (81,091 samples, 0.34%)</title><rect x="79.4579%" y="213" width="0.3398%" height="15" fill="rgb(221,13,13)"/><text x="79.7079%" y="223.50"></text></g><g><title>free_global_ctxt (2,202,795 samples, 9.23%)</title><rect x="79.7977%" y="213" width="9.2298%" height="15" fill="rgb(238,131,9)"/><text x="80.0477%" y="223.50">free_global_c..</text></g><g><title>crate_hash (67,962 samples, 0.28%)</title><rect x="90.2931%" y="197" width="0.2848%" height="15" fill="rgb(211,50,8)"/><text x="90.5431%" y="207.50"></text></g><g><title>mir_for_ctfe (55,140 samples, 0.23%)</title><rect x="90.7569%" y="197" width="0.2310%" height="15" fill="rgb(245,182,24)"/><text x="91.0069%" y="207.50"></text></g><g><title>generate_crate_metadata (513,356 samples, 2.15%)</title><rect x="89.0275%" y="213" width="2.1510%" height="15" fill="rgb(242,14,37)"/><text x="89.2775%" y="223.50">g..</text></g><g><title>hir_lowering (407,745 samples, 1.71%)</title><rect x="91.1785%" y="213" width="1.7085%" height="15" fill="rgb(246,228,12)"/><text x="91.4285%" y="223.50"></text></g><g><title>link (39,030 samples, 0.16%)</title><rect x="92.8869%" y="213" width="0.1635%" height="15" fill="rgb(213,55,15)"/><text x="93.1369%" y="223.50"></text></g><g><title>parse_crate (753,068 samples, 3.16%)</title><rect x="93.0505%" y="213" width="3.1554%" height="15" fill="rgb(209,9,3)"/><text x="93.3005%" y="223.50">par..</text></g><g><title>prepare_outputs (182,492 samples, 0.76%)</title><rect x="96.2278%" y="213" width="0.7647%" height="15" fill="rgb(230,59,30)"/><text x="96.4778%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (339,864 samples, 1.42%)</title><rect x="96.9924%" y="213" width="1.4240%" height="15" fill="rgb(209,121,21)"/><text x="97.2424%" y="223.50"></text></g><g><title>setup_global_ctxt (79,511 samples, 0.33%)</title><rect x="98.4645%" y="213" width="0.3332%" height="15" fill="rgb(220,109,13)"/><text x="98.7145%" y="223.50"></text></g><g><title>all (23,866,077 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (23,866,077 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (286,953 samples, 1.20%)</title><rect x="98.7977%" y="213" width="1.2023%" height="15" fill="rgb(224,123,36)"/><text x="99.0477%" y="223.50"></text></g></svg></svg>