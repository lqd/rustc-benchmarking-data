<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (777,061 samples, 0.63%)</title><rect x="8.8458%" y="165" width="0.6253%" height="15" fill="rgb(227,0,7)"/><text x="9.0958%" y="175.50"></text></g><g><title>param_env (300,423 samples, 0.24%)</title><rect x="10.7403%" y="133" width="0.2418%" height="15" fill="rgb(217,0,24)"/><text x="10.9903%" y="143.50"></text></g><g><title>item_attrs (267,962 samples, 0.22%)</title><rect x="11.3836%" y="101" width="0.2156%" height="15" fill="rgb(221,193,54)"/><text x="11.6336%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (258,472 samples, 0.21%)</title><rect x="11.3912%" y="85" width="0.2080%" height="15" fill="rgb(248,212,6)"/><text x="11.6412%" y="95.50"></text></g><g><title>codegen_fn_attrs (373,682 samples, 0.30%)</title><rect x="11.3084%" y="117" width="0.3007%" height="15" fill="rgb(208,68,35)"/><text x="11.5584%" y="127.50"></text></g><g><title>is_copy_raw (385,535 samples, 0.31%)</title><rect x="13.3345%" y="101" width="0.3102%" height="15" fill="rgb(232,128,0)"/><text x="13.5845%" y="111.50"></text></g><g><title>evaluate_obligation (312,734 samples, 0.25%)</title><rect x="13.3931%" y="85" width="0.2517%" height="15" fill="rgb(207,160,47)"/><text x="13.6431%" y="95.50"></text></g><g><title>adt_drop_tys (173,213 samples, 0.14%)</title><rect x="13.9569%" y="69" width="0.1394%" height="15" fill="rgb(228,23,34)"/><text x="14.2069%" y="79.50"></text></g><g><title>adt_drop_tys (627,187 samples, 0.50%)</title><rect x="13.7504%" y="85" width="0.5047%" height="15" fill="rgb(218,30,26)"/><text x="14.0004%" y="95.50"></text></g><g><title>needs_drop_raw (1,560,077 samples, 1.26%)</title><rect x="13.6448%" y="101" width="1.2554%" height="15" fill="rgb(220,122,19)"/><text x="13.8948%" y="111.50"></text></g><g><title>is_copy_raw (801,718 samples, 0.65%)</title><rect x="14.2551%" y="85" width="0.6452%" height="15" fill="rgb(250,228,42)"/><text x="14.5051%" y="95.50"></text></g><g><title>evaluate_obligation (564,315 samples, 0.45%)</title><rect x="14.4461%" y="69" width="0.4541%" height="15" fill="rgb(240,193,28)"/><text x="14.6961%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (197,332 samples, 0.16%)</title><rect x="15.0506%" y="85" width="0.1588%" height="15" fill="rgb(216,20,37)"/><text x="15.3006%" y="95.50"></text></g><g><title>resolve_instance (539,266 samples, 0.43%)</title><rect x="14.9002%" y="101" width="0.4340%" height="15" fill="rgb(206,188,39)"/><text x="15.1502%" y="111.50"></text></g><g><title>thir_body (668,853 samples, 0.54%)</title><rect x="15.3584%" y="101" width="0.5382%" height="15" fill="rgb(217,207,13)"/><text x="15.6084%" y="111.50"></text></g><g><title>mir_const (7,196,243 samples, 5.79%)</title><rect x="10.1371%" y="149" width="5.7910%" height="15" fill="rgb(231,73,38)"/><text x="10.3871%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (6,146,259 samples, 4.95%)</title><rect x="10.9821%" y="133" width="4.9460%" height="15" fill="rgb(225,20,46)"/><text x="11.2321%" y="143.50">unsafe..</text></g><g><title>mir_built (5,367,049 samples, 4.32%)</title><rect x="11.6091%" y="117" width="4.3190%" height="15" fill="rgb(210,31,41)"/><text x="11.8591%" y="127.50">mir_b..</text></g><g><title>mir_promoted (7,934,149 samples, 6.38%)</title><rect x="9.5822%" y="165" width="6.3848%" height="15" fill="rgb(221,200,47)"/><text x="9.8322%" y="175.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (706,439 samples, 0.57%)</title><rect x="15.9669%" y="165" width="0.5685%" height="15" fill="rgb(226,26,5)"/><text x="16.2169%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (149,162 samples, 0.12%)</title><rect x="16.5354%" y="165" width="0.1200%" height="15" fill="rgb(249,33,26)"/><text x="16.7854%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,631,334 samples, 2.12%)</title><rect x="16.6738%" y="165" width="2.1175%" height="15" fill="rgb(235,183,28)"/><text x="16.9238%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (22,112,264 samples, 17.79%)</title><rect x="1.0013%" y="197" width="17.7942%" height="15" fill="rgb(221,5,38)"/><text x="1.2513%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,988,172 samples, 17.69%)</title><rect x="1.1012%" y="181" width="17.6943%" height="15" fill="rgb(247,18,42)"/><text x="1.3512%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (267,933 samples, 0.22%)</title><rect x="18.8340%" y="197" width="0.2156%" height="15" fill="rgb(241,131,45)"/><text x="19.0840%" y="207.50"></text></g><g><title>get_lang_items (136,261 samples, 0.11%)</title><rect x="19.5999%" y="117" width="0.1097%" height="15" fill="rgb(249,31,29)"/><text x="19.8499%" y="127.50"></text></g><g><title>codegen_fn_attrs (307,873 samples, 0.25%)</title><rect x="19.5681%" y="133" width="0.2478%" height="15" fill="rgb(225,111,53)"/><text x="19.8181%" y="143.50"></text></g><g><title>codegen_fn_attrs (629,449 samples, 0.51%)</title><rect x="19.3197%" y="165" width="0.5065%" height="15" fill="rgb(238,160,17)"/><text x="19.5697%" y="175.50"></text></g><g><title>should_inherit_track_caller (526,057 samples, 0.42%)</title><rect x="19.4029%" y="149" width="0.4233%" height="15" fill="rgb(214,148,48)"/><text x="19.6529%" y="159.50"></text></g><g><title>check_mod_attrs (936,421 samples, 0.75%)</title><rect x="19.0731%" y="181" width="0.7536%" height="15" fill="rgb(232,36,49)"/><text x="19.3231%" y="191.50"></text></g><g><title>check_mod_const_bodies (182,702 samples, 0.15%)</title><rect x="19.8267%" y="181" width="0.1470%" height="15" fill="rgb(209,103,24)"/><text x="20.0767%" y="191.50"></text></g><g><title>lookup_deprecation_entry (204,473 samples, 0.16%)</title><rect x="20.2357%" y="165" width="0.1645%" height="15" fill="rgb(229,88,8)"/><text x="20.4857%" y="175.50"></text></g><g><title>stability_index (128,872 samples, 0.10%)</title><rect x="20.2966%" y="149" width="0.1037%" height="15" fill="rgb(213,181,19)"/><text x="20.5466%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (538,506 samples, 0.43%)</title><rect x="20.0513%" y="181" width="0.4333%" height="15" fill="rgb(254,191,54)"/><text x="20.3013%" y="191.50"></text></g><g><title>misc_checking_1 (1,845,361 samples, 1.48%)</title><rect x="19.0500%" y="197" width="1.4850%" height="15" fill="rgb(241,83,37)"/><text x="19.3000%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (356,614 samples, 0.29%)</title><rect x="20.5363%" y="181" width="0.2870%" height="15" fill="rgb(233,36,39)"/><text x="20.7863%" y="191.50"></text></g><g><title>check_mod_liveness (289,793 samples, 0.23%)</title><rect x="20.5901%" y="165" width="0.2332%" height="15" fill="rgb(226,3,54)"/><text x="20.8401%" y="175.50"></text></g><g><title>misc_checking_2 (717,708 samples, 0.58%)</title><rect x="20.5350%" y="197" width="0.5776%" height="15" fill="rgb(245,192,40)"/><text x="20.7850%" y="207.50"></text></g><g><title>match_checking (359,494 samples, 0.29%)</title><rect x="20.8233%" y="181" width="0.2893%" height="15" fill="rgb(238,167,29)"/><text x="21.0733%" y="191.50"></text></g><g><title>check_match (330,592 samples, 0.27%)</title><rect x="20.8466%" y="165" width="0.2660%" height="15" fill="rgb(232,182,51)"/><text x="21.0966%" y="175.50"></text></g><g><title>check_private_in_public (176,062 samples, 0.14%)</title><rect x="21.1206%" y="181" width="0.1417%" height="15" fill="rgb(231,60,39)"/><text x="21.3706%" y="191.50"></text></g><g><title>death_checking (330,594 samples, 0.27%)</title><rect x="21.2623%" y="181" width="0.2660%" height="15" fill="rgb(208,69,12)"/><text x="21.5123%" y="191.50"></text></g><g><title>crate_lints (1,818,050 samples, 1.46%)</title><rect x="21.5294%" y="165" width="1.4630%" height="15" fill="rgb(235,93,37)"/><text x="21.7794%" y="175.50"></text></g><g><title>type_of (1,086,252 samples, 0.87%)</title><rect x="22.1183%" y="149" width="0.8741%" height="15" fill="rgb(213,116,39)"/><text x="22.3683%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (850,821 samples, 0.68%)</title><rect x="22.3077%" y="133" width="0.6847%" height="15" fill="rgb(222,207,29)"/><text x="22.5577%" y="143.50"></text></g><g><title>lint_checking (2,226,705 samples, 1.79%)</title><rect x="21.5283%" y="181" width="1.7919%" height="15" fill="rgb(206,96,30)"/><text x="21.7783%" y="191.50">l..</text></g><g><title>module_lints (407,295 samples, 0.33%)</title><rect x="22.9924%" y="165" width="0.3278%" height="15" fill="rgb(218,138,4)"/><text x="23.2424%" y="175.50"></text></g><g><title>lint_mod (403,984 samples, 0.33%)</title><rect x="22.9951%" y="149" width="0.3251%" height="15" fill="rgb(250,191,14)"/><text x="23.2451%" y="159.50"></text></g><g><title>privacy_access_levels (318,683 samples, 0.26%)</title><rect x="23.3202%" y="181" width="0.2565%" height="15" fill="rgb(239,60,40)"/><text x="23.5702%" y="191.50"></text></g><g><title>privacy_checking_modules (946,380 samples, 0.76%)</title><rect x="23.5766%" y="181" width="0.7616%" height="15" fill="rgb(206,27,48)"/><text x="23.8266%" y="191.50"></text></g><g><title>check_mod_privacy (943,580 samples, 0.76%)</title><rect x="23.5789%" y="165" width="0.7593%" height="15" fill="rgb(225,35,8)"/><text x="23.8289%" y="175.50"></text></g><g><title>misc_checking_3 (4,020,994 samples, 3.24%)</title><rect x="21.1126%" y="197" width="3.2358%" height="15" fill="rgb(250,213,24)"/><text x="21.3626%" y="207.50">mis..</text></g><g><title>evaluate_obligation (297,983 samples, 0.24%)</title><rect x="24.6062%" y="133" width="0.2398%" height="15" fill="rgb(247,123,22)"/><text x="24.8562%" y="143.50"></text></g><g><title>object_safety_violations (671,298 samples, 0.54%)</title><rect x="24.4575%" y="149" width="0.5402%" height="15" fill="rgb(231,138,38)"/><text x="24.7075%" y="159.50"></text></g><g><title>impl_parent (2,297,256 samples, 1.85%)</title><rect x="28.4900%" y="133" width="1.8486%" height="15" fill="rgb(231,145,46)"/><text x="28.7400%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,368,225 samples, 1.10%)</title><rect x="29.2376%" y="117" width="1.1010%" height="15" fill="rgb(251,118,11)"/><text x="29.4876%" y="127.50"></text></g><g><title>impl_trait_ref (6,772,587 samples, 5.45%)</title><rect x="30.3386%" y="133" width="5.4500%" height="15" fill="rgb(217,147,25)"/><text x="30.5886%" y="143.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,803,203 samples, 4.67%)</title><rect x="31.1187%" y="117" width="4.6700%" height="15" fill="rgb(247,81,37)"/><text x="31.3687%" y="127.50">metad..</text></g><g><title>trait_impls_of (752,746 samples, 0.61%)</title><rect x="35.8679%" y="133" width="0.6057%" height="15" fill="rgb(209,12,38)"/><text x="36.1179%" y="143.50"></text></g><g><title>implementations_of_trait (172,240 samples, 0.14%)</title><rect x="36.3351%" y="117" width="0.1386%" height="15" fill="rgb(227,1,9)"/><text x="36.5851%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (136,610 samples, 0.11%)</title><rect x="36.3638%" y="101" width="0.1099%" height="15" fill="rgb(248,47,43)"/><text x="36.6138%" y="111.50"></text></g><g><title>coherent_trait (14,988,015 samples, 12.06%)</title><rect x="24.4214%" y="165" width="12.0612%" height="15" fill="rgb(221,10,30)"/><text x="24.6714%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (14,271,956 samples, 11.48%)</title><rect x="24.9977%" y="149" width="11.4849%" height="15" fill="rgb(210,229,1)"/><text x="25.2477%" y="159.50">specialization_gr..</text></g><g><title>coherence_checking (15,087,377 samples, 12.14%)</title><rect x="24.4026%" y="181" width="12.1411%" height="15" fill="rgb(222,148,37)"/><text x="24.6526%" y="191.50">coherence_checking</text></g><g><title>associated_items (172,461 samples, 0.14%)</title><rect x="47.9357%" y="133" width="0.1388%" height="15" fill="rgb(234,67,33)"/><text x="48.1857%" y="143.50"></text></g><g><title>adt_dtorck_constraint (135,831 samples, 0.11%)</title><rect x="48.3976%" y="101" width="0.1093%" height="15" fill="rgb(247,98,35)"/><text x="48.6476%" y="111.50"></text></g><g><title>adt_dtorck_constraint (180,423 samples, 0.15%)</title><rect x="48.3708%" y="117" width="0.1452%" height="15" fill="rgb(247,138,52)"/><text x="48.6208%" y="127.50"></text></g><g><title>dropck_outlives (533,705 samples, 0.43%)</title><rect x="48.1143%" y="133" width="0.4295%" height="15" fill="rgb(213,79,30)"/><text x="48.3643%" y="143.50"></text></g><g><title>evaluate_obligation (1,187,586 samples, 0.96%)</title><rect x="48.5438%" y="133" width="0.9557%" height="15" fill="rgb(246,177,23)"/><text x="48.7938%" y="143.50"></text></g><g><title>trait_impls_of (201,392 samples, 0.16%)</title><rect x="49.3374%" y="117" width="0.1621%" height="15" fill="rgb(230,62,27)"/><text x="49.5874%" y="127.50"></text></g><g><title>item_attrs (124,392 samples, 0.10%)</title><rect x="49.6608%" y="133" width="0.1001%" height="15" fill="rgb(216,154,8)"/><text x="49.9108%" y="143.50"></text></g><g><title>method_autoderef_steps (362,594 samples, 0.29%)</title><rect x="49.8154%" y="133" width="0.2918%" height="15" fill="rgb(244,35,45)"/><text x="50.0654%" y="143.50"></text></g><g><title>evaluate_obligation (192,303 samples, 0.15%)</title><rect x="49.9524%" y="117" width="0.1548%" height="15" fill="rgb(251,115,12)"/><text x="50.2024%" y="127.50"></text></g><g><title>predicates_of (241,241 samples, 0.19%)</title><rect x="50.2151%" y="133" width="0.1941%" height="15" fill="rgb(240,54,50)"/><text x="50.4651%" y="143.50"></text></g><g><title>predicates_defined_on (191,551 samples, 0.15%)</title><rect x="50.2551%" y="117" width="0.1541%" height="15" fill="rgb(233,84,52)"/><text x="50.5051%" y="127.50"></text></g><g><title>associated_item (381,772 samples, 0.31%)</title><rect x="53.2069%" y="101" width="0.3072%" height="15" fill="rgb(207,117,47)"/><text x="53.4569%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (308,951 samples, 0.25%)</title><rect x="53.2655%" y="85" width="0.2486%" height="15" fill="rgb(249,43,39)"/><text x="53.5155%" y="95.50"></text></g><g><title>associated_items (525,233 samples, 0.42%)</title><rect x="53.1048%" y="117" width="0.4227%" height="15" fill="rgb(209,38,44)"/><text x="53.3548%" y="127.50"></text></g><g><title>eval_to_const_value_raw (283,673 samples, 0.23%)</title><rect x="53.6231%" y="117" width="0.2283%" height="15" fill="rgb(236,212,23)"/><text x="53.8731%" y="127.50"></text></g><g><title>eval_to_const_value_raw (265,663 samples, 0.21%)</title><rect x="53.6376%" y="101" width="0.2138%" height="15" fill="rgb(242,79,21)"/><text x="53.8876%" y="111.50"></text></g><g><title>eval_to_allocation_raw (260,003 samples, 0.21%)</title><rect x="53.6421%" y="85" width="0.2092%" height="15" fill="rgb(211,96,35)"/><text x="53.8921%" y="95.50"></text></g><g><title>evaluate_obligation (804,950 samples, 0.65%)</title><rect x="53.8513%" y="117" width="0.6478%" height="15" fill="rgb(253,215,40)"/><text x="54.1013%" y="127.50"></text></g><g><title>trait_impls_of (368,964 samples, 0.30%)</title><rect x="54.2022%" y="101" width="0.2969%" height="15" fill="rgb(211,81,21)"/><text x="54.4522%" y="111.50"></text></g><g><title>method_autoderef_steps (139,751 samples, 0.11%)</title><rect x="54.8948%" y="117" width="0.1125%" height="15" fill="rgb(208,190,38)"/><text x="55.1448%" y="127.50"></text></g><g><title>predicates_of (154,641 samples, 0.12%)</title><rect x="55.0147%" y="117" width="0.1244%" height="15" fill="rgb(235,213,38)"/><text x="55.2647%" y="127.50"></text></g><g><title>typeck (5,893,435 samples, 4.74%)</title><rect x="50.4677%" y="133" width="4.7426%" height="15" fill="rgb(237,122,38)"/><text x="50.7177%" y="143.50">typeck</text></g><g><title>item_bodies_checking (23,176,627 samples, 18.65%)</title><rect x="36.5908%" y="181" width="18.6507%" height="15" fill="rgb(244,218,35)"/><text x="36.8408%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,173,297 samples, 18.65%)</title><rect x="36.5934%" y="165" width="18.6480%" height="15" fill="rgb(240,68,47)"/><text x="36.8434%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (23,086,086 samples, 18.58%)</title><rect x="36.6636%" y="149" width="18.5778%" height="15" fill="rgb(210,16,53)"/><text x="36.9136%" y="159.50">typeck</text></g><g><title>impl_trait_ref (145,491 samples, 0.12%)</title><rect x="56.1882%" y="101" width="0.1171%" height="15" fill="rgb(235,124,12)"/><text x="56.4382%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (125,961 samples, 0.10%)</title><rect x="56.2039%" y="85" width="0.1014%" height="15" fill="rgb(224,169,11)"/><text x="56.4539%" y="95.50"></text></g><g><title>adt_destructor (304,863 samples, 0.25%)</title><rect x="56.0800%" y="149" width="0.2453%" height="15" fill="rgb(250,166,2)"/><text x="56.3300%" y="159.50"></text></g><g><title>coherent_trait (300,333 samples, 0.24%)</title><rect x="56.0836%" y="133" width="0.2417%" height="15" fill="rgb(242,216,29)"/><text x="56.3336%" y="143.50"></text></g><g><title>specialization_graph_of (298,583 samples, 0.24%)</title><rect x="56.0851%" y="117" width="0.2403%" height="15" fill="rgb(230,116,27)"/><text x="56.3351%" y="127.50"></text></g><g><title>implied_outlives_bounds (191,831 samples, 0.15%)</title><rect x="56.3951%" y="149" width="0.1544%" height="15" fill="rgb(228,99,48)"/><text x="56.6451%" y="159.50"></text></g><g><title>item_types_checking (1,660,488 samples, 1.34%)</title><rect x="55.2414%" y="181" width="1.3362%" height="15" fill="rgb(253,11,6)"/><text x="55.4914%" y="191.50"></text></g><g><title>check_mod_item_types (1,656,808 samples, 1.33%)</title><rect x="55.2444%" y="165" width="1.3333%" height="15" fill="rgb(247,143,39)"/><text x="55.4944%" y="175.50"></text></g><g><title>fn_sig (538,116 samples, 0.43%)</title><rect x="56.9745%" y="149" width="0.4330%" height="15" fill="rgb(236,97,10)"/><text x="57.2245%" y="159.50"></text></g><g><title>generics_of (434,773 samples, 0.35%)</title><rect x="57.4075%" y="149" width="0.3499%" height="15" fill="rgb(233,208,19)"/><text x="57.6575%" y="159.50"></text></g><g><title>impl_trait_ref (268,483 samples, 0.22%)</title><rect x="57.7574%" y="149" width="0.2161%" height="15" fill="rgb(216,164,2)"/><text x="58.0074%" y="159.50"></text></g><g><title>lint_levels (159,362 samples, 0.13%)</title><rect x="58.7617%" y="69" width="0.1282%" height="15" fill="rgb(220,129,5)"/><text x="59.0117%" y="79.50"></text></g><g><title>late_bound_vars_map (473,266 samples, 0.38%)</title><rect x="58.5102%" y="101" width="0.3808%" height="15" fill="rgb(242,17,10)"/><text x="58.7602%" y="111.50"></text></g><g><title>resolve_lifetimes (447,876 samples, 0.36%)</title><rect x="58.5306%" y="85" width="0.3604%" height="15" fill="rgb(242,107,0)"/><text x="58.7806%" y="95.50"></text></g><g><title>explicit_predicates_of (942,732 samples, 0.76%)</title><rect x="58.1647%" y="117" width="0.7586%" height="15" fill="rgb(251,28,31)"/><text x="58.4147%" y="127.50"></text></g><g><title>predicates_of (240,871 samples, 0.19%)</title><rect x="59.0918%" y="85" width="0.1938%" height="15" fill="rgb(233,223,10)"/><text x="59.3418%" y="95.50"></text></g><g><title>predicates_defined_on (231,811 samples, 0.19%)</title><rect x="59.0991%" y="69" width="0.1865%" height="15" fill="rgb(215,21,27)"/><text x="59.3491%" y="79.50"></text></g><g><title>inferred_outlives_of (170,301 samples, 0.14%)</title><rect x="59.1486%" y="53" width="0.1370%" height="15" fill="rgb(232,23,21)"/><text x="59.3986%" y="63.50"></text></g><g><title>metadata_decode_entry_inferred_outlives_of (166,071 samples, 0.13%)</title><rect x="59.1520%" y="37" width="0.1336%" height="15" fill="rgb(244,5,23)"/><text x="59.4020%" y="47.50"></text></g><g><title>predicates_of (1,775,953 samples, 1.43%)</title><rect x="57.9735%" y="149" width="1.4291%" height="15" fill="rgb(226,81,46)"/><text x="58.2235%" y="159.50"></text></g><g><title>predicates_defined_on (1,685,572 samples, 1.36%)</title><rect x="58.0462%" y="133" width="1.3564%" height="15" fill="rgb(247,70,30)"/><text x="58.2962%" y="143.50"></text></g><g><title>inferred_outlives_of (595,547 samples, 0.48%)</title><rect x="58.9234%" y="117" width="0.4792%" height="15" fill="rgb(212,68,19)"/><text x="59.1734%" y="127.50"></text></g><g><title>inferred_outlives_crate (562,436 samples, 0.45%)</title><rect x="58.9500%" y="101" width="0.4526%" height="15" fill="rgb(240,187,13)"/><text x="59.2000%" y="111.50"></text></g><g><title>type_of (145,300 samples, 0.12%)</title><rect x="59.2857%" y="85" width="0.1169%" height="15" fill="rgb(223,113,26)"/><text x="59.5357%" y="95.50"></text></g><g><title>late_bound_vars_map (261,573 samples, 0.21%)</title><rect x="60.0466%" y="133" width="0.2105%" height="15" fill="rgb(206,192,2)"/><text x="60.2966%" y="143.50"></text></g><g><title>resolve_lifetimes (248,043 samples, 0.20%)</title><rect x="60.0574%" y="117" width="0.1996%" height="15" fill="rgb(241,108,4)"/><text x="60.3074%" y="127.50"></text></g><g><title>type_collecting (4,713,752 samples, 3.79%)</title><rect x="56.5790%" y="181" width="3.7932%" height="15" fill="rgb(247,173,49)"/><text x="56.8290%" y="191.50">type..</text></g><g><title>collect_mod_item_types (4,701,542 samples, 3.78%)</title><rect x="56.5889%" y="165" width="3.7834%" height="15" fill="rgb(224,114,35)"/><text x="56.8389%" y="175.50">coll..</text></g><g><title>type_of (1,141,951 samples, 0.92%)</title><rect x="59.4533%" y="149" width="0.9190%" height="15" fill="rgb(245,159,27)"/><text x="59.7033%" y="159.50"></text></g><g><title>evaluate_obligation (882,714 samples, 0.71%)</title><rect x="62.9832%" y="149" width="0.7103%" height="15" fill="rgb(245,172,44)"/><text x="63.2332%" y="159.50"></text></g><g><title>implied_outlives_bounds (639,298 samples, 0.51%)</title><rect x="63.6965%" y="149" width="0.5145%" height="15" fill="rgb(236,23,11)"/><text x="63.9465%" y="159.50"></text></g><g><title>param_env (513,456 samples, 0.41%)</title><rect x="64.2115%" y="149" width="0.4132%" height="15" fill="rgb(205,117,38)"/><text x="64.4615%" y="159.50"></text></g><g><title>region_scope_tree (288,781 samples, 0.23%)</title><rect x="64.6538%" y="149" width="0.2324%" height="15" fill="rgb(237,72,25)"/><text x="64.9038%" y="159.50"></text></g><g><title>check_impl_item_well_formed (5,493,375 samples, 4.42%)</title><rect x="60.5458%" y="165" width="4.4206%" height="15" fill="rgb(244,70,9)"/><text x="60.7958%" y="175.50">check..</text></g><g><title>adt_sized_constraint (185,303 samples, 0.15%)</title><rect x="66.4609%" y="133" width="0.1491%" height="15" fill="rgb(217,125,39)"/><text x="66.7109%" y="143.50"></text></g><g><title>adt_sized_constraint (223,973 samples, 0.18%)</title><rect x="66.4345%" y="149" width="0.1802%" height="15" fill="rgb(235,36,10)"/><text x="66.6845%" y="159.50"></text></g><g><title>evaluate_obligation (638,508 samples, 0.51%)</title><rect x="66.6149%" y="149" width="0.5138%" height="15" fill="rgb(251,123,47)"/><text x="66.8649%" y="159.50"></text></g><g><title>implied_outlives_bounds (206,194 samples, 0.17%)</title><rect x="67.1420%" y="149" width="0.1659%" height="15" fill="rgb(221,13,13)"/><text x="67.3920%" y="159.50"></text></g><g><title>param_env (297,842 samples, 0.24%)</title><rect x="67.3080%" y="149" width="0.2397%" height="15" fill="rgb(238,131,9)"/><text x="67.5580%" y="159.50"></text></g><g><title>check_item_well_formed (3,467,152 samples, 2.79%)</title><rect x="64.9664%" y="165" width="2.7901%" height="15" fill="rgb(211,50,8)"/><text x="65.2164%" y="175.50">ch..</text></g><g><title>evaluate_obligation (193,671 samples, 0.16%)</title><rect x="68.0063%" y="149" width="0.1559%" height="15" fill="rgb(245,182,24)"/><text x="68.2563%" y="159.50"></text></g><g><title>analysis (83,978,569 samples, 67.58%)</title><rect x="0.6943%" y="213" width="67.5792%" height="15" fill="rgb(242,14,37)"/><text x="0.9443%" y="223.50">analysis</text></g><g><title>type_check_crate (54,584,424 samples, 43.93%)</title><rect x="24.3484%" y="197" width="43.9252%" height="15" fill="rgb(246,228,12)"/><text x="24.5984%" y="207.50">type_check_crate</text></g><g><title>wf_checking (9,813,408 samples, 7.90%)</title><rect x="60.3765%" y="181" width="7.8970%" height="15" fill="rgb(213,55,15)"/><text x="60.6265%" y="191.50">wf_checking</text></g><g><title>check_trait_item_well_formed (642,547 samples, 0.52%)</title><rect x="67.7565%" y="165" width="0.5171%" height="15" fill="rgb(209,9,3)"/><text x="68.0065%" y="175.50"></text></g><g><title>codegen_crate (388,104 samples, 0.31%)</title><rect x="68.2843%" y="213" width="0.3123%" height="15" fill="rgb(230,59,30)"/><text x="68.5343%" y="223.50"></text></g><g><title>AST_validation (287,173 samples, 0.23%)</title><rect x="68.7921%" y="197" width="0.2311%" height="15" fill="rgb(209,121,21)"/><text x="69.0421%" y="207.50"></text></g><g><title>metadata_load_macro (209,993 samples, 0.17%)</title><rect x="82.3884%" y="165" width="0.1690%" height="15" fill="rgb(220,109,13)"/><text x="82.6384%" y="175.50"></text></g><g><title>metadata_register_crate (2,704,260 samples, 2.18%)</title><rect x="82.5574%" y="165" width="2.1762%" height="15" fill="rgb(232,18,1)"/><text x="82.8074%" y="175.50">m..</text></g><g><title>metadata_register_crate (1,009,911 samples, 0.81%)</title><rect x="83.9209%" y="149" width="0.8127%" height="15" fill="rgb(215,41,42)"/><text x="84.1709%" y="159.50"></text></g><g><title>macro_expand_crate (19,379,884 samples, 15.60%)</title><rect x="69.1883%" y="197" width="15.5954%" height="15" fill="rgb(224,123,36)"/><text x="69.4383%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (19,361,024 samples, 15.58%)</title><rect x="69.2035%" y="181" width="15.5802%" height="15" fill="rgb(240,125,3)"/><text x="69.4535%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (309,283 samples, 0.25%)</title><rect x="84.7880%" y="197" width="0.2489%" height="15" fill="rgb(205,98,50)"/><text x="85.0380%" y="207.50"></text></g><g><title>late_resolve_crate (2,448,017 samples, 1.97%)</title><rect x="85.2147%" y="181" width="1.9700%" height="15" fill="rgb(205,185,37)"/><text x="85.4647%" y="191.50">l..</text></g><g><title>configure_and_expand (23,274,857 samples, 18.73%)</title><rect x="68.5966%" y="213" width="18.7297%" height="15" fill="rgb(238,207,15)"/><text x="68.8466%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,845,132 samples, 2.29%)</title><rect x="85.0368%" y="197" width="2.2895%" height="15" fill="rgb(213,199,42)"/><text x="85.2868%" y="207.50">r..</text></g><g><title>drop_ast (295,114 samples, 0.24%)</title><rect x="87.3264%" y="213" width="0.2375%" height="15" fill="rgb(235,201,11)"/><text x="87.5764%" y="223.50"></text></g><g><title>early_lint_checks (446,015 samples, 0.36%)</title><rect x="87.5767%" y="213" width="0.3589%" height="15" fill="rgb(207,46,11)"/><text x="87.8267%" y="223.50"></text></g><g><title>free_global_ctxt (3,117,925 samples, 2.51%)</title><rect x="87.9356%" y="213" width="2.5091%" height="15" fill="rgb(241,35,35)"/><text x="88.1856%" y="223.50">fr..</text></g><g><title>generate_crate_metadata (1,188,543 samples, 0.96%)</title><rect x="90.4447%" y="213" width="0.9564%" height="15" fill="rgb(243,32,47)"/><text x="90.6947%" y="223.50"></text></g><g><title>hir_lowering (3,957,803 samples, 3.18%)</title><rect x="91.4011%" y="213" width="3.1849%" height="15" fill="rgb(247,202,23)"/><text x="91.6511%" y="223.50">hir..</text></g><g><title>parse_crate (5,135,166 samples, 4.13%)</title><rect x="94.6335%" y="213" width="4.1324%" height="15" fill="rgb(219,102,11)"/><text x="94.8835%" y="223.50">parse..</text></g><g><title>prepare_outputs (321,704 samples, 0.26%)</title><rect x="98.7754%" y="213" width="0.2589%" height="15" fill="rgb(243,110,44)"/><text x="99.0254%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (743,548 samples, 0.60%)</title><rect x="99.0343%" y="213" width="0.5983%" height="15" fill="rgb(222,74,54)"/><text x="99.2843%" y="223.50"></text></g><g><title>all (124,266,844 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (124,266,844 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (320,244 samples, 0.26%)</title><rect x="99.7423%" y="213" width="0.2577%" height="15" fill="rgb(217,163,10)"/><text x="99.9923%" y="223.50"></text></g></svg></svg>