<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (167,392 samples, 0.10%)</title><rect x="10.1830%" y="261" width="0.1035%" height="15" fill="rgb(227,0,7)"/><text x="10.4330%" y="271.50"></text></g><g><title>param_env (285,985 samples, 0.18%)</title><rect x="11.4946%" y="229" width="0.1769%" height="15" fill="rgb(217,0,24)"/><text x="11.7446%" y="239.50"></text></g><g><title>item_attrs (166,554 samples, 0.10%)</title><rect x="12.0649%" y="197" width="0.1030%" height="15" fill="rgb(221,193,54)"/><text x="12.3149%" y="207.50"></text></g><g><title>codegen_fn_attrs (268,194 samples, 0.17%)</title><rect x="12.0119%" y="213" width="0.1659%" height="15" fill="rgb(248,212,6)"/><text x="12.2619%" y="223.50"></text></g><g><title>is_copy_raw (240,814 samples, 0.15%)</title><rect x="14.3898%" y="165" width="0.1490%" height="15" fill="rgb(208,68,35)"/><text x="14.6398%" y="175.50"></text></g><g><title>evaluate_obligation (224,884 samples, 0.14%)</title><rect x="14.3996%" y="149" width="0.1391%" height="15" fill="rgb(232,128,0)"/><text x="14.6496%" y="159.50"></text></g><g><title>adt_drop_tys (470,025 samples, 0.29%)</title><rect x="14.2779%" y="181" width="0.2907%" height="15" fill="rgb(207,160,47)"/><text x="14.5279%" y="191.50"></text></g><g><title>needs_drop_raw (1,566,667 samples, 0.97%)</title><rect x="14.2212%" y="197" width="0.9690%" height="15" fill="rgb(228,23,34)"/><text x="14.4712%" y="207.50"></text></g><g><title>is_copy_raw (1,000,781 samples, 0.62%)</title><rect x="14.5712%" y="181" width="0.6190%" height="15" fill="rgb(218,30,26)"/><text x="14.8212%" y="191.50"></text></g><g><title>evaluate_obligation (891,551 samples, 0.55%)</title><rect x="14.6388%" y="165" width="0.5515%" height="15" fill="rgb(220,122,19)"/><text x="14.8888%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (478,544 samples, 0.30%)</title><rect x="15.3699%" y="181" width="0.2960%" height="15" fill="rgb(250,228,42)"/><text x="15.6199%" y="191.50"></text></g><g><title>impl_parent (258,944 samples, 0.16%)</title><rect x="16.0182%" y="165" width="0.1602%" height="15" fill="rgb(240,193,28)"/><text x="16.2682%" y="175.50"></text></g><g><title>specialization_graph_of (1,147,013 samples, 0.71%)</title><rect x="15.7374%" y="181" width="0.7095%" height="15" fill="rgb(216,20,37)"/><text x="15.9874%" y="191.50"></text></g><g><title>impl_trait_ref (434,004 samples, 0.27%)</title><rect x="16.1784%" y="165" width="0.2684%" height="15" fill="rgb(206,188,39)"/><text x="16.4284%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (362,374 samples, 0.22%)</title><rect x="16.2227%" y="149" width="0.2241%" height="15" fill="rgb(217,207,13)"/><text x="16.4727%" y="159.50"></text></g><g><title>resolve_instance (2,125,449 samples, 1.31%)</title><rect x="15.1903%" y="197" width="1.3147%" height="15" fill="rgb(231,73,38)"/><text x="15.4403%" y="207.50"></text></g><g><title>thir_body (1,342,044 samples, 0.83%)</title><rect x="16.5183%" y="197" width="0.8301%" height="15" fill="rgb(225,20,46)"/><text x="16.7683%" y="207.50"></text></g><g><title>mir_const (10,382,525 samples, 6.42%)</title><rect x="10.9351%" y="245" width="6.4220%" height="15" fill="rgb(210,31,41)"/><text x="11.1851%" y="255.50">mir_const</text></g><g><title>unsafety_check_result (9,192,022 samples, 5.69%)</title><rect x="11.6715%" y="229" width="5.6856%" height="15" fill="rgb(221,200,47)"/><text x="11.9215%" y="239.50">unsafet..</text></g><g><title>mir_built (8,373,504 samples, 5.18%)</title><rect x="12.1778%" y="213" width="5.1793%" height="15" fill="rgb(226,26,5)"/><text x="12.4278%" y="223.50">mir_bu..</text></g><g><title>mir_const_qualif (708,442 samples, 0.44%)</title><rect x="17.3571%" y="245" width="0.4382%" height="15" fill="rgb(249,33,26)"/><text x="17.6071%" y="255.50"></text></g><g><title>mir_const (545,071 samples, 0.34%)</title><rect x="17.4582%" y="229" width="0.3371%" height="15" fill="rgb(235,183,28)"/><text x="17.7082%" y="239.50"></text></g><g><title>unsafety_check_result (380,411 samples, 0.24%)</title><rect x="17.5600%" y="213" width="0.2353%" height="15" fill="rgb(221,5,38)"/><text x="17.8100%" y="223.50"></text></g><g><title>mir_built (328,809 samples, 0.20%)</title><rect x="17.5919%" y="197" width="0.2034%" height="15" fill="rgb(247,18,42)"/><text x="17.8419%" y="207.50"></text></g><g><title>mir_promoted (12,141,820 samples, 7.51%)</title><rect x="10.2866%" y="261" width="7.5102%" height="15" fill="rgb(241,131,45)"/><text x="10.5366%" y="271.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (477,504 samples, 0.30%)</title><rect x="17.8002%" y="261" width="0.2954%" height="15" fill="rgb(249,31,29)"/><text x="18.0502%" y="271.50"></text></g><g><title>type_op_normalize_fn_sig (758,691 samples, 0.47%)</title><rect x="18.0956%" y="261" width="0.4693%" height="15" fill="rgb(225,111,53)"/><text x="18.3456%" y="271.50"></text></g><g><title>normalize_projection_ty (492,136 samples, 0.30%)</title><rect x="18.2604%" y="245" width="0.3044%" height="15" fill="rgb(238,160,17)"/><text x="18.5104%" y="255.50"></text></g><g><title>type_op_prove_predicate (2,203,264 samples, 1.36%)</title><rect x="18.6756%" y="261" width="1.3628%" height="15" fill="rgb(214,148,48)"/><text x="18.9256%" y="271.50"></text></g><g><title>evaluate_obligation (182,122 samples, 0.11%)</title><rect x="19.9257%" y="245" width="0.1126%" height="15" fill="rgb(232,36,49)"/><text x="20.1757%" y="255.50"></text></g><g><title>MIR_borrow_checking (31,356,511 samples, 19.40%)</title><rect x="0.6536%" y="293" width="19.3952%" height="15" fill="rgb(209,103,24)"/><text x="0.9036%" y="303.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,187,547 samples, 19.29%)</title><rect x="0.7581%" y="277" width="19.2907%" height="15" fill="rgb(229,88,8)"/><text x="1.0081%" y="287.50">mir_borrowck</text></g><g><title>MIR_effect_checking (409,824 samples, 0.25%)</title><rect x="20.0488%" y="293" width="0.2535%" height="15" fill="rgb(213,181,19)"/><text x="20.2988%" y="303.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (323,223 samples, 0.20%)</title><rect x="20.1024%" y="277" width="0.1999%" height="15" fill="rgb(254,191,54)"/><text x="20.3524%" y="287.50"></text></g><g><title>hir_module_items (215,561 samples, 0.13%)</title><rect x="20.3023%" y="293" width="0.1333%" height="15" fill="rgb(241,83,37)"/><text x="20.5523%" y="303.50"></text></g><g><title>codegen_fn_attrs (242,351 samples, 0.15%)</title><rect x="20.7444%" y="229" width="0.1499%" height="15" fill="rgb(233,36,39)"/><text x="20.9944%" y="239.50"></text></g><g><title>codegen_fn_attrs (412,653 samples, 0.26%)</title><rect x="20.6426%" y="261" width="0.2552%" height="15" fill="rgb(226,3,54)"/><text x="20.8926%" y="271.50"></text></g><g><title>should_inherit_track_caller (345,352 samples, 0.21%)</title><rect x="20.6842%" y="245" width="0.2136%" height="15" fill="rgb(245,192,40)"/><text x="20.9342%" y="255.50"></text></g><g><title>check_mod_attrs (718,948 samples, 0.44%)</title><rect x="20.4532%" y="277" width="0.4447%" height="15" fill="rgb(238,167,29)"/><text x="20.7032%" y="287.50"></text></g><g><title>lookup_deprecation_entry (172,771 samples, 0.11%)</title><rect x="21.1733%" y="261" width="0.1069%" height="15" fill="rgb(232,182,51)"/><text x="21.4233%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (452,285 samples, 0.28%)</title><rect x="21.0481%" y="277" width="0.2798%" height="15" fill="rgb(231,60,39)"/><text x="21.2981%" y="287.50"></text></g><g><title>misc_checking_1 (1,506,006 samples, 0.93%)</title><rect x="20.4360%" y="293" width="0.9315%" height="15" fill="rgb(208,69,12)"/><text x="20.6860%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (611,167 samples, 0.38%)</title><rect x="21.3686%" y="277" width="0.3780%" height="15" fill="rgb(235,93,37)"/><text x="21.6186%" y="287.50"></text></g><g><title>check_mod_liveness (482,525 samples, 0.30%)</title><rect x="21.4481%" y="261" width="0.2985%" height="15" fill="rgb(213,116,39)"/><text x="21.6981%" y="271.50"></text></g><g><title>misc_checking_2 (1,217,693 samples, 0.75%)</title><rect x="21.3676%" y="293" width="0.7532%" height="15" fill="rgb(222,207,29)"/><text x="21.6176%" y="303.50"></text></g><g><title>match_checking (604,916 samples, 0.37%)</title><rect x="21.7466%" y="277" width="0.3742%" height="15" fill="rgb(206,96,30)"/><text x="21.9966%" y="287.50"></text></g><g><title>check_match (559,744 samples, 0.35%)</title><rect x="21.7745%" y="261" width="0.3462%" height="15" fill="rgb(218,138,4)"/><text x="22.0245%" y="271.50"></text></g><g><title>check_private_in_public (282,263 samples, 0.17%)</title><rect x="22.1275%" y="277" width="0.1746%" height="15" fill="rgb(250,191,14)"/><text x="22.3775%" y="287.50"></text></g><g><title>death_checking (1,168,163 samples, 0.72%)</title><rect x="22.3021%" y="277" width="0.7226%" height="15" fill="rgb(239,60,40)"/><text x="22.5521%" y="287.50"></text></g><g><title>item_attrs (168,771 samples, 0.10%)</title><rect x="22.9202%" y="261" width="0.1044%" height="15" fill="rgb(206,27,48)"/><text x="23.1702%" y="271.50"></text></g><g><title>metadata_decode_entry_item_attrs (166,751 samples, 0.10%)</title><rect x="22.9215%" y="245" width="0.1031%" height="15" fill="rgb(225,35,8)"/><text x="23.1715%" y="255.50"></text></g><g><title>param_env (435,493 samples, 0.27%)</title><rect x="23.8894%" y="245" width="0.2694%" height="15" fill="rgb(250,213,24)"/><text x="24.1394%" y="255.50"></text></g><g><title>predicates_of (192,840 samples, 0.12%)</title><rect x="24.0395%" y="229" width="0.1193%" height="15" fill="rgb(247,123,22)"/><text x="24.2895%" y="239.50"></text></g><g><title>crate_lints (3,090,624 samples, 1.91%)</title><rect x="23.0257%" y="261" width="1.9117%" height="15" fill="rgb(231,138,38)"/><text x="23.2757%" y="271.50">c..</text></g><g><title>type_of (1,254,010 samples, 0.78%)</title><rect x="24.1617%" y="245" width="0.7757%" height="15" fill="rgb(231,145,46)"/><text x="24.4117%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (987,937 samples, 0.61%)</title><rect x="24.3263%" y="229" width="0.6111%" height="15" fill="rgb(251,118,11)"/><text x="24.5763%" y="239.50"></text></g><g><title>lint_checking (3,700,321 samples, 2.29%)</title><rect x="23.0246%" y="277" width="2.2888%" height="15" fill="rgb(217,147,25)"/><text x="23.2746%" y="287.50">l..</text></g><g><title>module_lints (608,017 samples, 0.38%)</title><rect x="24.9373%" y="261" width="0.3761%" height="15" fill="rgb(247,81,37)"/><text x="25.1873%" y="271.50"></text></g><g><title>lint_mod (600,437 samples, 0.37%)</title><rect x="24.9420%" y="245" width="0.3714%" height="15" fill="rgb(209,12,38)"/><text x="25.1920%" y="255.50"></text></g><g><title>privacy_access_levels (290,354 samples, 0.18%)</title><rect x="25.3134%" y="277" width="0.1796%" height="15" fill="rgb(227,1,9)"/><text x="25.5634%" y="287.50"></text></g><g><title>privacy_checking_modules (1,036,181 samples, 0.64%)</title><rect x="25.4930%" y="277" width="0.6409%" height="15" fill="rgb(248,47,43)"/><text x="25.7430%" y="287.50"></text></g><g><title>check_mod_privacy (1,030,421 samples, 0.64%)</title><rect x="25.4966%" y="261" width="0.6374%" height="15" fill="rgb(221,10,30)"/><text x="25.7466%" y="271.50"></text></g><g><title>misc_checking_3 (6,509,802 samples, 4.03%)</title><rect x="22.1207%" y="293" width="4.0266%" height="15" fill="rgb(210,229,1)"/><text x="22.3707%" y="303.50">misc..</text></g><g><title>adt_destructor (314,903 samples, 0.19%)</title><rect x="26.2797%" y="245" width="0.1948%" height="15" fill="rgb(222,148,37)"/><text x="26.5297%" y="255.50"></text></g><g><title>coherent_trait (306,033 samples, 0.19%)</title><rect x="26.2851%" y="229" width="0.1893%" height="15" fill="rgb(234,67,33)"/><text x="26.5351%" y="239.50"></text></g><g><title>specialization_graph_of (303,653 samples, 0.19%)</title><rect x="26.2866%" y="213" width="0.1878%" height="15" fill="rgb(247,98,35)"/><text x="26.5366%" y="223.50"></text></g><g><title>impl_parent (3,418,553 samples, 2.11%)</title><rect x="30.7880%" y="229" width="2.1145%" height="15" fill="rgb(247,138,52)"/><text x="31.0380%" y="239.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,968,697 samples, 1.22%)</title><rect x="31.6848%" y="213" width="1.2177%" height="15" fill="rgb(213,79,30)"/><text x="31.9348%" y="223.50"></text></g><g><title>impl_trait_ref (7,012,414 samples, 4.34%)</title><rect x="32.9033%" y="229" width="4.3375%" height="15" fill="rgb(246,177,23)"/><text x="33.1533%" y="239.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,582,926 samples, 3.45%)</title><rect x="33.7874%" y="213" width="3.4533%" height="15" fill="rgb(230,62,27)"/><text x="34.0374%" y="223.50">met..</text></g><g><title>trait_impls_of (1,459,735 samples, 0.90%)</title><rect x="37.3029%" y="229" width="0.9029%" height="15" fill="rgb(216,154,8)"/><text x="37.5529%" y="239.50"></text></g><g><title>implementations_of_trait (484,074 samples, 0.30%)</title><rect x="37.9063%" y="213" width="0.2994%" height="15" fill="rgb(244,35,45)"/><text x="38.1563%" y="223.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (332,954 samples, 0.21%)</title><rect x="37.9998%" y="197" width="0.2059%" height="15" fill="rgb(251,115,12)"/><text x="38.2498%" y="207.50"></text></g><g><title>coherent_trait (19,342,066 samples, 11.96%)</title><rect x="26.2434%" y="261" width="11.9638%" height="15" fill="rgb(240,54,50)"/><text x="26.4934%" y="271.50">coherent_trait</text></g><g><title>specialization_graph_of (18,782,730 samples, 11.62%)</title><rect x="26.5894%" y="245" width="11.6179%" height="15" fill="rgb(233,84,52)"/><text x="26.8394%" y="255.50">specialization_gr..</text></g><g><title>coherence_checking (19,452,417 samples, 12.03%)</title><rect x="26.2277%" y="277" width="12.0321%" height="15" fill="rgb(207,117,47)"/><text x="26.4777%" y="287.50">coherence_checking</text></g><g><title>associated_item (401,975 samples, 0.25%)</title><rect x="58.3262%" y="213" width="0.2486%" height="15" fill="rgb(249,43,39)"/><text x="58.5762%" y="223.50"></text></g><g><title>metadata_decode_entry_associated_item (322,643 samples, 0.20%)</title><rect x="58.3753%" y="197" width="0.1996%" height="15" fill="rgb(209,38,44)"/><text x="58.6253%" y="207.50"></text></g><g><title>associated_items (614,308 samples, 0.38%)</title><rect x="58.2174%" y="229" width="0.3800%" height="15" fill="rgb(236,212,23)"/><text x="58.4674%" y="239.50"></text></g><g><title>adt_dtorck_constraint (356,533 samples, 0.22%)</title><rect x="58.8024%" y="213" width="0.2205%" height="15" fill="rgb(242,79,21)"/><text x="59.0524%" y="223.50"></text></g><g><title>dropck_outlives (1,003,419 samples, 0.62%)</title><rect x="58.6599%" y="229" width="0.6207%" height="15" fill="rgb(211,96,35)"/><text x="58.9099%" y="239.50"></text></g><g><title>normalize_projection_ty (416,574 samples, 0.26%)</title><rect x="59.0229%" y="213" width="0.2577%" height="15" fill="rgb(253,215,40)"/><text x="59.2729%" y="223.50"></text></g><g><title>mir_borrowck (291,432 samples, 0.18%)</title><rect x="59.5188%" y="149" width="0.1803%" height="15" fill="rgb(211,81,21)"/><text x="59.7688%" y="159.50"></text></g><g><title>mir_for_ctfe (440,206 samples, 0.27%)</title><rect x="59.4279%" y="181" width="0.2723%" height="15" fill="rgb(208,190,38)"/><text x="59.6779%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (399,635 samples, 0.25%)</title><rect x="59.4530%" y="165" width="0.2472%" height="15" fill="rgb(235,213,38)"/><text x="59.7030%" y="175.50"></text></g><g><title>eval_to_const_value_raw (679,407 samples, 0.42%)</title><rect x="59.2806%" y="229" width="0.4202%" height="15" fill="rgb(237,122,38)"/><text x="59.5306%" y="239.50"></text></g><g><title>eval_to_const_value_raw (675,177 samples, 0.42%)</title><rect x="59.2832%" y="213" width="0.4176%" height="15" fill="rgb(244,218,35)"/><text x="59.5332%" y="223.50"></text></g><g><title>eval_to_allocation_raw (664,927 samples, 0.41%)</title><rect x="59.2895%" y="197" width="0.4113%" height="15" fill="rgb(240,68,47)"/><text x="59.5395%" y="207.50"></text></g><g><title>generics_of (384,893 samples, 0.24%)</title><rect x="62.1613%" y="213" width="0.2381%" height="15" fill="rgb(210,16,53)"/><text x="62.4113%" y="223.50"></text></g><g><title>metadata_decode_entry_generics_of (300,722 samples, 0.19%)</title><rect x="62.2134%" y="197" width="0.1860%" height="15" fill="rgb(235,124,12)"/><text x="62.4634%" y="207.50"></text></g><g><title>impl_trait_ref (429,548 samples, 0.27%)</title><rect x="62.4511%" y="213" width="0.2657%" height="15" fill="rgb(224,169,11)"/><text x="62.7011%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (370,855 samples, 0.23%)</title><rect x="62.4874%" y="197" width="0.2294%" height="15" fill="rgb(250,166,2)"/><text x="62.7374%" y="207.50"></text></g><g><title>predicates_of (349,400 samples, 0.22%)</title><rect x="62.7288%" y="213" width="0.2161%" height="15" fill="rgb(242,216,29)"/><text x="62.9788%" y="223.50"></text></g><g><title>predicates_defined_on (210,400 samples, 0.13%)</title><rect x="62.8148%" y="197" width="0.1301%" height="15" fill="rgb(230,116,27)"/><text x="63.0648%" y="207.50"></text></g><g><title>specializes (349,183 samples, 0.22%)</title><rect x="62.9449%" y="213" width="0.2160%" height="15" fill="rgb(228,99,48)"/><text x="63.1949%" y="223.50"></text></g><g><title>param_env (192,131 samples, 0.12%)</title><rect x="63.0421%" y="197" width="0.1188%" height="15" fill="rgb(253,11,6)"/><text x="63.2921%" y="207.50"></text></g><g><title>trait_impls_of (759,227 samples, 0.47%)</title><rect x="63.1687%" y="213" width="0.4696%" height="15" fill="rgb(247,143,39)"/><text x="63.4187%" y="223.50"></text></g><g><title>implementations_of_trait (320,443 samples, 0.20%)</title><rect x="63.4401%" y="197" width="0.1982%" height="15" fill="rgb(236,97,10)"/><text x="63.6901%" y="207.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (167,721 samples, 0.10%)</title><rect x="63.5346%" y="181" width="0.1037%" height="15" fill="rgb(233,208,19)"/><text x="63.7846%" y="191.50"></text></g><g><title>evaluate_obligation (6,373,473 samples, 3.94%)</title><rect x="59.7008%" y="229" width="3.9422%" height="15" fill="rgb(216,164,2)"/><text x="59.9508%" y="239.50">eval..</text></g><g><title>generics_of (162,921 samples, 0.10%)</title><rect x="63.7775%" y="229" width="0.1008%" height="15" fill="rgb(220,129,5)"/><text x="64.0275%" y="239.50"></text></g><g><title>evaluate_obligation (220,190 samples, 0.14%)</title><rect x="64.3181%" y="213" width="0.1362%" height="15" fill="rgb(242,17,10)"/><text x="64.5681%" y="223.50"></text></g><g><title>method_autoderef_steps (452,384 samples, 0.28%)</title><rect x="64.1810%" y="229" width="0.2798%" height="15" fill="rgb(242,107,0)"/><text x="64.4310%" y="239.50"></text></g><g><title>param_env (325,853 samples, 0.20%)</title><rect x="64.5914%" y="229" width="0.2016%" height="15" fill="rgb(251,28,31)"/><text x="64.8414%" y="239.50"></text></g><g><title>predicates_of (503,237 samples, 0.31%)</title><rect x="64.8057%" y="229" width="0.3113%" height="15" fill="rgb(233,223,10)"/><text x="65.0557%" y="239.50"></text></g><g><title>predicates_defined_on (333,844 samples, 0.21%)</title><rect x="64.9105%" y="213" width="0.2065%" height="15" fill="rgb(215,21,27)"/><text x="65.1605%" y="223.50"></text></g><g><title>item_bodies_checking (43,680,167 samples, 27.02%)</title><rect x="38.2875%" y="277" width="27.0179%" height="15" fill="rgb(232,23,21)"/><text x="38.5375%" y="287.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (43,676,417 samples, 27.02%)</title><rect x="38.2898%" y="261" width="27.0156%" height="15" fill="rgb(244,5,23)"/><text x="38.5398%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (43,553,876 samples, 26.94%)</title><rect x="38.3656%" y="245" width="26.9398%" height="15" fill="rgb(226,81,46)"/><text x="38.6156%" y="255.50">typeck</text></g><g><title>item_types_checking (1,363,675 samples, 0.84%)</title><rect x="65.3053%" y="277" width="0.8435%" height="15" fill="rgb(247,70,30)"/><text x="65.5553%" y="287.50"></text></g><g><title>check_mod_item_types (1,356,725 samples, 0.84%)</title><rect x="65.3096%" y="261" width="0.8392%" height="15" fill="rgb(212,68,19)"/><text x="65.5596%" y="271.50"></text></g><g><title>fn_sig (309,354 samples, 0.19%)</title><rect x="66.3462%" y="245" width="0.1913%" height="15" fill="rgb(240,187,13)"/><text x="66.5962%" y="255.50"></text></g><g><title>lint_levels (202,592 samples, 0.13%)</title><rect x="66.8977%" y="197" width="0.1253%" height="15" fill="rgb(223,113,26)"/><text x="67.1477%" y="207.50"></text></g><g><title>named_region_map (616,778 samples, 0.38%)</title><rect x="66.6420%" y="229" width="0.3815%" height="15" fill="rgb(206,192,2)"/><text x="66.8920%" y="239.50"></text></g><g><title>resolve_lifetimes (594,218 samples, 0.37%)</title><rect x="66.6560%" y="213" width="0.3675%" height="15" fill="rgb(241,108,4)"/><text x="66.9060%" y="223.50"></text></g><g><title>generics_of (801,100 samples, 0.50%)</title><rect x="66.5376%" y="245" width="0.4955%" height="15" fill="rgb(247,173,49)"/><text x="66.7876%" y="255.50"></text></g><g><title>explicit_predicates_of (180,882 samples, 0.11%)</title><rect x="67.1846%" y="213" width="0.1119%" height="15" fill="rgb(224,114,35)"/><text x="67.4346%" y="223.50"></text></g><g><title>predicates_of (538,366 samples, 0.33%)</title><rect x="67.0950%" y="245" width="0.3330%" height="15" fill="rgb(245,159,27)"/><text x="67.3450%" y="255.50"></text></g><g><title>predicates_defined_on (483,966 samples, 0.30%)</title><rect x="67.1287%" y="229" width="0.2994%" height="15" fill="rgb(245,172,44)"/><text x="67.3787%" y="239.50"></text></g><g><title>inferred_outlives_of (212,672 samples, 0.13%)</title><rect x="67.2965%" y="213" width="0.1315%" height="15" fill="rgb(236,23,11)"/><text x="67.5465%" y="223.50"></text></g><g><title>inferred_outlives_crate (192,552 samples, 0.12%)</title><rect x="67.3089%" y="197" width="0.1191%" height="15" fill="rgb(205,117,38)"/><text x="67.5589%" y="207.50"></text></g><g><title>type_collecting (2,163,465 samples, 1.34%)</title><rect x="66.1514%" y="277" width="1.3382%" height="15" fill="rgb(237,72,25)"/><text x="66.4014%" y="287.50"></text></g><g><title>collect_mod_item_types (2,148,475 samples, 1.33%)</title><rect x="66.1607%" y="261" width="1.3289%" height="15" fill="rgb(244,70,9)"/><text x="66.4107%" y="271.50"></text></g><g><title>mir_const_qualif (296,333 samples, 0.18%)</title><rect x="69.0598%" y="197" width="0.1833%" height="15" fill="rgb(217,125,39)"/><text x="69.3098%" y="207.50"></text></g><g><title>mir_const (247,093 samples, 0.15%)</title><rect x="69.0903%" y="181" width="0.1528%" height="15" fill="rgb(235,36,10)"/><text x="69.3403%" y="191.50"></text></g><g><title>mir_borrowck (690,367 samples, 0.43%)</title><rect x="69.4299%" y="165" width="0.4270%" height="15" fill="rgb(251,123,47)"/><text x="69.6799%" y="175.50"></text></g><g><title>mir_for_ctfe (995,132 samples, 0.62%)</title><rect x="69.2431%" y="197" width="0.6155%" height="15" fill="rgb(221,13,13)"/><text x="69.4931%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (912,431 samples, 0.56%)</title><rect x="69.2943%" y="181" width="0.5644%" height="15" fill="rgb(238,131,9)"/><text x="69.5443%" y="191.50"></text></g><g><title>mir_borrowck (244,473 samples, 0.15%)</title><rect x="70.0274%" y="101" width="0.1512%" height="15" fill="rgb(211,50,8)"/><text x="70.2774%" y="111.50"></text></g><g><title>mir_for_ctfe (342,535 samples, 0.21%)</title><rect x="69.9676%" y="133" width="0.2119%" height="15" fill="rgb(245,182,24)"/><text x="70.2176%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (318,245 samples, 0.20%)</title><rect x="69.9826%" y="117" width="0.1968%" height="15" fill="rgb(242,14,37)"/><text x="70.2326%" y="127.50"></text></g><g><title>mir_borrowck (195,322 samples, 0.12%)</title><rect x="70.3714%" y="37" width="0.1208%" height="15" fill="rgb(246,228,12)"/><text x="70.6214%" y="47.50"></text></g><g><title>mir_for_ctfe (306,233 samples, 0.19%)</title><rect x="70.3037%" y="69" width="0.1894%" height="15" fill="rgb(213,55,15)"/><text x="70.5537%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (281,163 samples, 0.17%)</title><rect x="70.3192%" y="53" width="0.1739%" height="15" fill="rgb(209,9,3)"/><text x="70.5692%" y="63.50"></text></g><g><title>eval_to_const_value_raw (584,247 samples, 0.36%)</title><rect x="70.1918%" y="117" width="0.3614%" height="15" fill="rgb(230,59,30)"/><text x="70.4418%" y="127.50"></text></g><g><title>eval_to_const_value_raw (580,757 samples, 0.36%)</title><rect x="70.1940%" y="101" width="0.3592%" height="15" fill="rgb(209,121,21)"/><text x="70.4440%" y="111.50"></text></g><g><title>eval_to_allocation_raw (571,147 samples, 0.35%)</title><rect x="70.1999%" y="85" width="0.3533%" height="15" fill="rgb(220,109,13)"/><text x="70.4499%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (613,247 samples, 0.38%)</title><rect x="70.1795%" y="133" width="0.3793%" height="15" fill="rgb(232,18,1)"/><text x="70.4295%" y="143.50"></text></g><g><title>evaluate_obligation (231,782 samples, 0.14%)</title><rect x="70.6937%" y="117" width="0.1434%" height="15" fill="rgb(215,41,42)"/><text x="70.9437%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,588,508 samples, 0.98%)</title><rect x="69.8689%" y="181" width="0.9826%" height="15" fill="rgb(224,123,36)"/><text x="70.1189%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,586,108 samples, 0.98%)</title><rect x="69.8704%" y="165" width="0.9811%" height="15" fill="rgb(240,125,3)"/><text x="70.1204%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,582,598 samples, 0.98%)</title><rect x="69.8726%" y="149" width="0.9789%" height="15" fill="rgb(205,98,50)"/><text x="70.1226%" y="159.50"></text></g><g><title>typeck (473,236 samples, 0.29%)</title><rect x="70.5588%" y="133" width="0.2927%" height="15" fill="rgb(205,185,37)"/><text x="70.8088%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,612,668 samples, 1.00%)</title><rect x="69.8595%" y="197" width="0.9975%" height="15" fill="rgb(238,207,15)"/><text x="70.1095%" y="207.50"></text></g><g><title>eval_to_const_value_raw (3,509,760 samples, 2.17%)</title><rect x="68.8805%" y="245" width="2.1709%" height="15" fill="rgb(213,199,42)"/><text x="69.1305%" y="255.50">e..</text></g><g><title>eval_to_const_value_raw (3,482,270 samples, 2.15%)</title><rect x="68.8975%" y="229" width="2.1539%" height="15" fill="rgb(235,201,11)"/><text x="69.1475%" y="239.50">e..</text></g><g><title>eval_to_allocation_raw (3,469,950 samples, 2.15%)</title><rect x="68.9051%" y="213" width="2.1463%" height="15" fill="rgb(207,46,11)"/><text x="69.1551%" y="223.50">e..</text></g><g><title>typeck (314,216 samples, 0.19%)</title><rect x="70.8570%" y="197" width="0.1944%" height="15" fill="rgb(241,35,35)"/><text x="71.1070%" y="207.50"></text></g><g><title>evaluate_obligation (474,803 samples, 0.29%)</title><rect x="71.0514%" y="245" width="0.2937%" height="15" fill="rgb(243,32,47)"/><text x="71.3014%" y="255.50"></text></g><g><title>implied_outlives_bounds (203,173 samples, 0.13%)</title><rect x="71.3478%" y="245" width="0.1257%" height="15" fill="rgb(247,202,23)"/><text x="71.5978%" y="255.50"></text></g><g><title>param_env (266,132 samples, 0.16%)</title><rect x="71.4744%" y="245" width="0.1646%" height="15" fill="rgb(219,102,11)"/><text x="71.7244%" y="255.50"></text></g><g><title>region_scope_tree (512,006 samples, 0.32%)</title><rect x="71.6852%" y="245" width="0.3167%" height="15" fill="rgb(243,110,44)"/><text x="71.9352%" y="255.50"></text></g><g><title>check_impl_item_well_formed (7,179,995 samples, 4.44%)</title><rect x="67.6415%" y="261" width="4.4411%" height="15" fill="rgb(222,74,54)"/><text x="67.8915%" y="271.50">check..</text></g><g><title>eval_to_const_value_raw (187,623 samples, 0.12%)</title><rect x="72.7910%" y="245" width="0.1161%" height="15" fill="rgb(216,99,12)"/><text x="73.0410%" y="255.50"></text></g><g><title>eval_to_const_value_raw (183,423 samples, 0.11%)</title><rect x="72.7936%" y="229" width="0.1135%" height="15" fill="rgb(226,22,26)"/><text x="73.0436%" y="239.50"></text></g><g><title>eval_to_allocation_raw (180,733 samples, 0.11%)</title><rect x="72.7953%" y="213" width="0.1118%" height="15" fill="rgb(217,163,10)"/><text x="73.0453%" y="223.50"></text></g><g><title>evaluate_obligation (424,496 samples, 0.26%)</title><rect x="72.9071%" y="245" width="0.2626%" height="15" fill="rgb(213,25,53)"/><text x="73.1571%" y="255.50"></text></g><g><title>param_env (222,943 samples, 0.14%)</title><rect x="73.2212%" y="245" width="0.1379%" height="15" fill="rgb(252,105,26)"/><text x="73.4712%" y="255.50"></text></g><g><title>analysis (118,140,357 samples, 73.07%)</title><rect x="0.4381%" y="309" width="73.0744%" height="15" fill="rgb(220,39,43)"/><text x="0.6881%" y="319.50">analysis</text></g><g><title>type_check_crate (76,575,935 samples, 47.37%)</title><rect x="26.1473%" y="293" width="47.3652%" height="15" fill="rgb(229,68,48)"/><text x="26.3973%" y="303.50">type_check_crate</text></g><g><title>wf_checking (9,726,529 samples, 6.02%)</title><rect x="67.4963%" y="277" width="6.0162%" height="15" fill="rgb(252,8,32)"/><text x="67.7463%" y="287.50">wf_check..</text></g><g><title>check_item_well_formed (2,311,774 samples, 1.43%)</title><rect x="72.0826%" y="261" width="1.4299%" height="15" fill="rgb(223,20,43)"/><text x="72.3326%" y="271.50"></text></g><g><title>codegen_crate (447,695 samples, 0.28%)</title><rect x="73.5162%" y="309" width="0.2769%" height="15" fill="rgb(229,81,49)"/><text x="73.7662%" y="319.50"></text></g><g><title>AST_validation (191,902 samples, 0.12%)</title><rect x="73.8752%" y="293" width="0.1187%" height="15" fill="rgb(236,28,36)"/><text x="74.1252%" y="303.50"></text></g><g><title>metadata_load_macro (194,624 samples, 0.12%)</title><rect x="86.2980%" y="261" width="0.1204%" height="15" fill="rgb(249,185,26)"/><text x="86.5480%" y="271.50"></text></g><g><title>metadata_register_crate (6,875,156 samples, 4.25%)</title><rect x="86.4184%" y="261" width="4.2526%" height="15" fill="rgb(249,174,33)"/><text x="86.6684%" y="271.50">metad..</text></g><g><title>metadata_register_crate (5,846,383 samples, 3.62%)</title><rect x="87.0547%" y="245" width="3.6162%" height="15" fill="rgb(233,201,37)"/><text x="87.3047%" y="255.50">meta..</text></g><g><title>metadata_register_crate (5,128,846 samples, 3.17%)</title><rect x="87.4985%" y="229" width="3.1724%" height="15" fill="rgb(221,78,26)"/><text x="87.7485%" y="239.50">met..</text></g><g><title>macro_expand_crate (27,051,183 samples, 16.73%)</title><rect x="74.0775%" y="293" width="16.7322%" height="15" fill="rgb(250,127,30)"/><text x="74.3275%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (27,039,922 samples, 16.73%)</title><rect x="74.0844%" y="277" width="16.7252%" height="15" fill="rgb(230,49,44)"/><text x="74.3344%" y="287.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (224,345 samples, 0.14%)</title><rect x="90.6709%" y="261" width="0.1388%" height="15" fill="rgb(229,67,23)"/><text x="90.9209%" y="271.50"></text></g><g><title>finalize_macro_resolutions (187,512 samples, 0.12%)</title><rect x="90.9037%" y="277" width="0.1160%" height="15" fill="rgb(249,83,47)"/><text x="91.1537%" y="287.50"></text></g><g><title>late_resolve_crate (1,902,782 samples, 1.18%)</title><rect x="91.0197%" y="277" width="1.1769%" height="15" fill="rgb(215,43,3)"/><text x="91.2697%" y="287.50"></text></g><g><title>configure_and_expand (29,916,734 samples, 18.50%)</title><rect x="73.7931%" y="309" width="18.5047%" height="15" fill="rgb(238,154,13)"/><text x="74.0431%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (2,351,886 samples, 1.45%)</title><rect x="90.8431%" y="293" width="1.4547%" height="15" fill="rgb(219,56,2)"/><text x="91.0931%" y="303.50"></text></g><g><title>drop_ast (232,073 samples, 0.14%)</title><rect x="92.2978%" y="309" width="0.1435%" height="15" fill="rgb(233,0,4)"/><text x="92.5478%" y="319.50"></text></g><g><title>early_lint_checks (506,905 samples, 0.31%)</title><rect x="92.4556%" y="309" width="0.3135%" height="15" fill="rgb(235,30,7)"/><text x="92.7056%" y="319.50"></text></g><g><title>free_global_ctxt (4,372,279 samples, 2.70%)</title><rect x="92.7691%" y="309" width="2.7044%" height="15" fill="rgb(250,79,13)"/><text x="93.0191%" y="319.50">fr..</text></g><g><title>generate_crate_metadata (1,699,140 samples, 1.05%)</title><rect x="95.4735%" y="309" width="1.0510%" height="15" fill="rgb(211,146,34)"/><text x="95.7235%" y="319.50"></text></g><g><title>hir_lowering (3,401,987 samples, 2.10%)</title><rect x="96.5245%" y="309" width="2.1043%" height="15" fill="rgb(228,22,38)"/><text x="96.7745%" y="319.50">h..</text></g><g><title>parse_crate (356,394 samples, 0.22%)</title><rect x="98.6638%" y="309" width="0.2204%" height="15" fill="rgb(235,168,5)"/><text x="98.9138%" y="319.50"></text></g><g><title>prepare_outputs (205,193 samples, 0.13%)</title><rect x="98.8877%" y="309" width="0.1269%" height="15" fill="rgb(221,155,16)"/><text x="99.1377%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (1,163,423 samples, 0.72%)</title><rect x="99.0147%" y="309" width="0.7196%" height="15" fill="rgb(215,215,53)"/><text x="99.2647%" y="319.50"></text></g><g><title>all (161,671,304 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (161,671,304 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (330,083 samples, 0.20%)</title><rect x="99.7958%" y="309" width="0.2042%" height="15" fill="rgb(227,97,0)"/><text x="100.0458%" y="319.50"></text></g></svg></svg>