<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (232,994 samples, 0.20%)</title><rect x="9.2202%" y="213" width="0.2041%" height="15" fill="rgb(227,0,7)"/><text x="9.4702%" y="223.50"></text></g><g><title>item_attrs (198,514 samples, 0.17%)</title><rect x="9.7289%" y="181" width="0.1739%" height="15" fill="rgb(217,0,24)"/><text x="9.9789%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (190,124 samples, 0.17%)</title><rect x="9.7362%" y="165" width="0.1665%" height="15" fill="rgb(221,193,54)"/><text x="9.9862%" y="175.50"></text></g><g><title>codegen_fn_attrs (303,045 samples, 0.27%)</title><rect x="9.6590%" y="197" width="0.2654%" height="15" fill="rgb(248,212,6)"/><text x="9.9090%" y="207.50"></text></g><g><title>adt_drop_tys (132,371 samples, 0.12%)</title><rect x="11.7875%" y="149" width="0.1159%" height="15" fill="rgb(208,68,35)"/><text x="12.0375%" y="159.50"></text></g><g><title>adt_drop_tys (335,332 samples, 0.29%)</title><rect x="11.7604%" y="165" width="0.2937%" height="15" fill="rgb(232,128,0)"/><text x="12.0104%" y="175.50"></text></g><g><title>needs_drop_raw (840,708 samples, 0.74%)</title><rect x="11.6955%" y="181" width="0.7363%" height="15" fill="rgb(207,160,47)"/><text x="11.9455%" y="191.50"></text></g><g><title>is_copy_raw (431,345 samples, 0.38%)</title><rect x="12.0541%" y="165" width="0.3778%" height="15" fill="rgb(228,23,34)"/><text x="12.3041%" y="175.50"></text></g><g><title>evaluate_obligation (361,394 samples, 0.32%)</title><rect x="12.1153%" y="149" width="0.3165%" height="15" fill="rgb(218,30,26)"/><text x="12.3653%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (148,422 samples, 0.13%)</title><rect x="12.5299%" y="165" width="0.1300%" height="15" fill="rgb(220,122,19)"/><text x="12.7799%" y="175.50"></text></g><g><title>impl_parent (1,352,040 samples, 1.18%)</title><rect x="14.1066%" y="149" width="1.1842%" height="15" fill="rgb(250,228,42)"/><text x="14.3566%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (746,752 samples, 0.65%)</title><rect x="14.6367%" y="133" width="0.6540%" height="15" fill="rgb(240,193,28)"/><text x="14.8867%" y="143.50"></text></g><g><title>specialization_graph_of (6,516,132 samples, 5.71%)</title><rect x="12.6965%" y="165" width="5.7070%" height="15" fill="rgb(216,20,37)"/><text x="12.9465%" y="175.50">special..</text></g><g><title>impl_trait_ref (3,554,081 samples, 3.11%)</title><rect x="15.2907%" y="149" width="3.1128%" height="15" fill="rgb(206,188,39)"/><text x="15.5407%" y="159.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,157,477 samples, 2.77%)</title><rect x="15.6381%" y="133" width="2.7654%" height="15" fill="rgb(217,207,13)"/><text x="15.8881%" y="143.50">me..</text></g><g><title>resolve_instance (6,863,324 samples, 6.01%)</title><rect x="12.4318%" y="181" width="6.0111%" height="15" fill="rgb(231,73,38)"/><text x="12.6818%" y="191.50">resolve_..</text></g><g><title>thir_body (848,499 samples, 0.74%)</title><rect x="18.4558%" y="181" width="0.7431%" height="15" fill="rgb(225,20,46)"/><text x="18.7058%" y="191.50"></text></g><g><title>mir_const (11,843,541 samples, 10.37%)</title><rect x="8.8341%" y="229" width="10.3729%" height="15" fill="rgb(210,31,41)"/><text x="9.0841%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (11,169,763 samples, 9.78%)</title><rect x="9.4243%" y="213" width="9.7828%" height="15" fill="rgb(221,200,47)"/><text x="9.6743%" y="223.50">unsafety_check..</text></g><g><title>mir_built (10,598,696 samples, 9.28%)</title><rect x="9.9244%" y="197" width="9.2826%" height="15" fill="rgb(226,26,5)"/><text x="10.1744%" y="207.50">mir_built</text></g><g><title>has_structural_eq_impls (137,551 samples, 0.12%)</title><rect x="19.3119%" y="213" width="0.1205%" height="15" fill="rgb(249,33,26)"/><text x="19.5619%" y="223.50"></text></g><g><title>evaluate_obligation (127,751 samples, 0.11%)</title><rect x="19.3205%" y="197" width="0.1119%" height="15" fill="rgb(235,183,28)"/><text x="19.5705%" y="207.50"></text></g><g><title>trait_impls_of (116,741 samples, 0.10%)</title><rect x="19.3302%" y="181" width="0.1022%" height="15" fill="rgb(221,5,38)"/><text x="19.5802%" y="191.50"></text></g><g><title>is_freeze_raw (166,582 samples, 0.15%)</title><rect x="19.4335%" y="213" width="0.1459%" height="15" fill="rgb(247,18,42)"/><text x="19.6835%" y="223.50"></text></g><g><title>evaluate_obligation (163,972 samples, 0.14%)</title><rect x="19.4357%" y="197" width="0.1436%" height="15" fill="rgb(241,131,45)"/><text x="19.6857%" y="207.50"></text></g><g><title>mir_const (244,332 samples, 0.21%)</title><rect x="19.5812%" y="213" width="0.2140%" height="15" fill="rgb(249,31,29)"/><text x="19.8312%" y="223.50"></text></g><g><title>unsafety_check_result (183,572 samples, 0.16%)</title><rect x="19.6345%" y="197" width="0.1608%" height="15" fill="rgb(225,111,53)"/><text x="19.8845%" y="207.50"></text></g><g><title>mir_built (140,750 samples, 0.12%)</title><rect x="19.6720%" y="181" width="0.1233%" height="15" fill="rgb(238,160,17)"/><text x="19.9220%" y="191.50"></text></g><g><title>mir_const_qualif (673,606 samples, 0.59%)</title><rect x="19.2070%" y="229" width="0.5900%" height="15" fill="rgb(214,148,48)"/><text x="19.4570%" y="239.50"></text></g><g><title>mir_promoted (13,041,613 samples, 11.42%)</title><rect x="8.3750%" y="245" width="11.4222%" height="15" fill="rgb(232,36,49)"/><text x="8.6250%" y="255.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (361,724 samples, 0.32%)</title><rect x="19.8017%" y="245" width="0.3168%" height="15" fill="rgb(209,103,24)"/><text x="20.0517%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (223,033 samples, 0.20%)</title><rect x="20.1185%" y="245" width="0.1953%" height="15" fill="rgb(229,88,8)"/><text x="20.3685%" y="255.50"></text></g><g><title>normalize_projection_ty (133,282 samples, 0.12%)</title><rect x="20.1971%" y="229" width="0.1167%" height="15" fill="rgb(213,181,19)"/><text x="20.4471%" y="239.50"></text></g><g><title>type_op_normalize_predicate (180,432 samples, 0.16%)</title><rect x="20.3138%" y="245" width="0.1580%" height="15" fill="rgb(254,191,54)"/><text x="20.5638%" y="255.50"></text></g><g><title>type_op_prove_predicate (1,342,335 samples, 1.18%)</title><rect x="20.4718%" y="245" width="1.1757%" height="15" fill="rgb(241,83,37)"/><text x="20.7218%" y="255.50"></text></g><g><title>MIR_borrow_checking (23,899,014 samples, 20.93%)</title><rect x="0.7204%" y="277" width="20.9313%" height="15" fill="rgb(233,36,39)"/><text x="0.9704%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (23,862,434 samples, 20.90%)</title><rect x="0.7524%" y="261" width="20.8993%" height="15" fill="rgb(226,3,54)"/><text x="1.0024%" y="271.50">mir_borrowck</text></g><g><title>MIR_effect_checking (139,872 samples, 0.12%)</title><rect x="21.6517%" y="277" width="0.1225%" height="15" fill="rgb(245,192,40)"/><text x="21.9017%" y="287.50"></text></g><g><title>codegen_fn_attrs (168,951 samples, 0.15%)</title><rect x="21.9957%" y="245" width="0.1480%" height="15" fill="rgb(238,167,29)"/><text x="22.2457%" y="255.50"></text></g><g><title>check_mod_attrs (298,604 samples, 0.26%)</title><rect x="21.8822%" y="261" width="0.2615%" height="15" fill="rgb(232,182,51)"/><text x="22.1322%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (211,292 samples, 0.19%)</title><rect x="22.2233%" y="261" width="0.1851%" height="15" fill="rgb(231,60,39)"/><text x="22.4733%" y="271.50"></text></g><g><title>misc_checking_1 (652,027 samples, 0.57%)</title><rect x="21.8656%" y="277" width="0.5711%" height="15" fill="rgb(208,69,12)"/><text x="22.1156%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (487,125 samples, 0.43%)</title><rect x="22.4379%" y="261" width="0.4266%" height="15" fill="rgb(235,93,37)"/><text x="22.6879%" y="271.50"></text></g><g><title>check_mod_liveness (418,973 samples, 0.37%)</title><rect x="22.4976%" y="245" width="0.3669%" height="15" fill="rgb(213,116,39)"/><text x="22.7476%" y="255.50"></text></g><g><title>type_uninhabited_from (197,043 samples, 0.17%)</title><rect x="22.6920%" y="229" width="0.1726%" height="15" fill="rgb(222,207,29)"/><text x="22.9420%" y="239.50"></text></g><g><title>type_uninhabited_from (178,143 samples, 0.16%)</title><rect x="22.7085%" y="213" width="0.1560%" height="15" fill="rgb(206,96,30)"/><text x="22.9585%" y="223.50"></text></g><g><title>type_uninhabited_from (152,102 samples, 0.13%)</title><rect x="22.7314%" y="197" width="0.1332%" height="15" fill="rgb(218,138,4)"/><text x="22.9814%" y="207.50"></text></g><g><title>type_uninhabited_from (126,231 samples, 0.11%)</title><rect x="22.7540%" y="181" width="0.1106%" height="15" fill="rgb(250,191,14)"/><text x="23.0040%" y="191.50"></text></g><g><title>misc_checking_2 (914,760 samples, 0.80%)</title><rect x="22.4367%" y="277" width="0.8012%" height="15" fill="rgb(239,60,40)"/><text x="22.6867%" y="287.50"></text></g><g><title>match_checking (426,235 samples, 0.37%)</title><rect x="22.8646%" y="261" width="0.3733%" height="15" fill="rgb(206,27,48)"/><text x="23.1146%" y="271.50"></text></g><g><title>check_match (414,485 samples, 0.36%)</title><rect x="22.8749%" y="245" width="0.3630%" height="15" fill="rgb(225,35,8)"/><text x="23.1249%" y="255.50"></text></g><g><title>death_checking (134,612 samples, 0.12%)</title><rect x="23.2976%" y="261" width="0.1179%" height="15" fill="rgb(250,213,24)"/><text x="23.5476%" y="271.50"></text></g><g><title>fn_abi_of_instance (141,392 samples, 0.12%)</title><rect x="23.8548%" y="133" width="0.1238%" height="15" fill="rgb(247,123,22)"/><text x="24.1048%" y="143.50"></text></g><g><title>eval_to_const_value_raw (562,446 samples, 0.49%)</title><rect x="23.6718%" y="181" width="0.4926%" height="15" fill="rgb(231,138,38)"/><text x="23.9218%" y="191.50"></text></g><g><title>eval_to_const_value_raw (561,846 samples, 0.49%)</title><rect x="23.6723%" y="165" width="0.4921%" height="15" fill="rgb(231,145,46)"/><text x="23.9223%" y="175.50"></text></g><g><title>eval_to_allocation_raw (560,156 samples, 0.49%)</title><rect x="23.6738%" y="149" width="0.4906%" height="15" fill="rgb(251,118,11)"/><text x="23.9238%" y="159.50"></text></g><g><title>eval_to_allocation_raw (613,667 samples, 0.54%)</title><rect x="23.6280%" y="229" width="0.5375%" height="15" fill="rgb(217,147,25)"/><text x="23.8780%" y="239.50"></text></g><g><title>eval_to_allocation_raw (612,707 samples, 0.54%)</title><rect x="23.6288%" y="213" width="0.5366%" height="15" fill="rgb(247,81,37)"/><text x="23.8788%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (569,736 samples, 0.50%)</title><rect x="23.6664%" y="197" width="0.4990%" height="15" fill="rgb(209,12,38)"/><text x="23.9164%" y="207.50"></text></g><g><title>eval_to_const_value_raw (171,423 samples, 0.15%)</title><rect x="24.1654%" y="229" width="0.1501%" height="15" fill="rgb(227,1,9)"/><text x="24.4154%" y="239.50"></text></g><g><title>eval_to_const_value_raw (162,293 samples, 0.14%)</title><rect x="24.1734%" y="213" width="0.1421%" height="15" fill="rgb(248,47,43)"/><text x="24.4234%" y="223.50"></text></g><g><title>eval_to_allocation_raw (156,233 samples, 0.14%)</title><rect x="24.1787%" y="197" width="0.1368%" height="15" fill="rgb(221,10,30)"/><text x="24.4287%" y="207.50"></text></g><g><title>param_env (133,711 samples, 0.12%)</title><rect x="24.3156%" y="229" width="0.1171%" height="15" fill="rgb(210,229,1)"/><text x="24.5656%" y="239.50"></text></g><g><title>crate_lints (1,244,254 samples, 1.09%)</title><rect x="23.4168%" y="245" width="1.0897%" height="15" fill="rgb(222,148,37)"/><text x="23.6668%" y="255.50"></text></g><g><title>lint_checking (1,575,347 samples, 1.38%)</title><rect x="23.4155%" y="261" width="1.3797%" height="15" fill="rgb(234,67,33)"/><text x="23.6655%" y="271.50"></text></g><g><title>module_lints (329,533 samples, 0.29%)</title><rect x="24.5066%" y="245" width="0.2886%" height="15" fill="rgb(247,98,35)"/><text x="24.7566%" y="255.50"></text></g><g><title>lint_mod (325,773 samples, 0.29%)</title><rect x="24.5099%" y="229" width="0.2853%" height="15" fill="rgb(247,138,52)"/><text x="24.7599%" y="239.50"></text></g><g><title>privacy_checking_modules (532,526 samples, 0.47%)</title><rect x="24.8541%" y="261" width="0.4664%" height="15" fill="rgb(213,79,30)"/><text x="25.1041%" y="271.50"></text></g><g><title>check_mod_privacy (530,176 samples, 0.46%)</title><rect x="24.8562%" y="245" width="0.4643%" height="15" fill="rgb(246,177,23)"/><text x="25.1062%" y="255.50"></text></g><g><title>misc_checking_3 (2,387,386 samples, 2.09%)</title><rect x="23.2379%" y="277" width="2.0909%" height="15" fill="rgb(230,62,27)"/><text x="23.4879%" y="287.50">m..</text></g><g><title>dropck_outlives (426,034 samples, 0.37%)</title><rect x="32.7935%" y="213" width="0.3731%" height="15" fill="rgb(216,154,8)"/><text x="33.0435%" y="223.50"></text></g><g><title>evaluate_obligation (1,115,872 samples, 0.98%)</title><rect x="33.1666%" y="213" width="0.9773%" height="15" fill="rgb(244,35,45)"/><text x="33.4166%" y="223.50"></text></g><g><title>trait_impls_of (394,383 samples, 0.35%)</title><rect x="33.7985%" y="197" width="0.3454%" height="15" fill="rgb(251,115,12)"/><text x="34.0485%" y="207.50"></text></g><g><title>implementations_of_trait (138,052 samples, 0.12%)</title><rect x="34.0230%" y="181" width="0.1209%" height="15" fill="rgb(240,54,50)"/><text x="34.2730%" y="191.50"></text></g><g><title>predicates_of (168,594 samples, 0.15%)</title><rect x="34.5135%" y="213" width="0.1477%" height="15" fill="rgb(233,84,52)"/><text x="34.7635%" y="223.50"></text></g><g><title>associated_item (598,748 samples, 0.52%)</title><rect x="41.2783%" y="181" width="0.5244%" height="15" fill="rgb(207,117,47)"/><text x="41.5283%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (515,327 samples, 0.45%)</title><rect x="41.3513%" y="165" width="0.4513%" height="15" fill="rgb(249,43,39)"/><text x="41.6013%" y="175.50"></text></g><g><title>associated_items (770,569 samples, 0.67%)</title><rect x="41.1556%" y="197" width="0.6749%" height="15" fill="rgb(209,38,44)"/><text x="41.4056%" y="207.50"></text></g><g><title>adt_def (347,995 samples, 0.30%)</title><rect x="42.6543%" y="165" width="0.3048%" height="15" fill="rgb(236,212,23)"/><text x="42.9043%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (338,515 samples, 0.30%)</title><rect x="42.6626%" y="149" width="0.2965%" height="15" fill="rgb(242,79,21)"/><text x="42.9126%" y="159.50"></text></g><g><title>item_attrs (216,574 samples, 0.19%)</title><rect x="42.7694%" y="133" width="0.1897%" height="15" fill="rgb(211,96,35)"/><text x="43.0194%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (206,944 samples, 0.18%)</title><rect x="42.7778%" y="117" width="0.1812%" height="15" fill="rgb(253,215,40)"/><text x="43.0278%" y="127.50"></text></g><g><title>adt_def (219,701 samples, 0.19%)</title><rect x="43.1953%" y="149" width="0.1924%" height="15" fill="rgb(211,81,21)"/><text x="43.4453%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (211,671 samples, 0.19%)</title><rect x="43.2023%" y="133" width="0.1854%" height="15" fill="rgb(208,190,38)"/><text x="43.4523%" y="143.50"></text></g><g><title>item_attrs (125,590 samples, 0.11%)</title><rect x="43.2777%" y="117" width="0.1100%" height="15" fill="rgb(235,213,38)"/><text x="43.5277%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (115,650 samples, 0.10%)</title><rect x="43.2864%" y="101" width="0.1013%" height="15" fill="rgb(237,122,38)"/><text x="43.5364%" y="111.50"></text></g><g><title>adt_def (244,664 samples, 0.21%)</title><rect x="43.5763%" y="133" width="0.2143%" height="15" fill="rgb(244,218,35)"/><text x="43.8263%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (237,474 samples, 0.21%)</title><rect x="43.5826%" y="117" width="0.2080%" height="15" fill="rgb(240,68,47)"/><text x="43.8326%" y="127.50"></text></g><g><title>item_attrs (155,922 samples, 0.14%)</title><rect x="43.6540%" y="101" width="0.1366%" height="15" fill="rgb(210,16,53)"/><text x="43.9040%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (149,042 samples, 0.13%)</title><rect x="43.6601%" y="85" width="0.1305%" height="15" fill="rgb(235,124,12)"/><text x="43.9101%" y="95.50"></text></g><g><title>adt_def (117,312 samples, 0.10%)</title><rect x="43.9861%" y="117" width="0.1027%" height="15" fill="rgb(224,169,11)"/><text x="44.2361%" y="127.50"></text></g><g><title>adt_def (206,522 samples, 0.18%)</title><rect x="44.2640%" y="101" width="0.1809%" height="15" fill="rgb(250,166,2)"/><text x="44.5140%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (198,442 samples, 0.17%)</title><rect x="44.2711%" y="85" width="0.1738%" height="15" fill="rgb(242,216,29)"/><text x="44.5211%" y="95.50"></text></g><g><title>adt_def (286,863 samples, 0.25%)</title><rect x="44.6119%" y="85" width="0.2512%" height="15" fill="rgb(230,116,27)"/><text x="44.8619%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (276,093 samples, 0.24%)</title><rect x="44.6213%" y="69" width="0.2418%" height="15" fill="rgb(228,99,48)"/><text x="44.8713%" y="79.50"></text></g><g><title>item_attrs (155,521 samples, 0.14%)</title><rect x="44.7269%" y="53" width="0.1362%" height="15" fill="rgb(253,11,6)"/><text x="44.9769%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,931 samples, 0.12%)</title><rect x="44.7441%" y="37" width="0.1191%" height="15" fill="rgb(247,143,39)"/><text x="44.9941%" y="47.50"></text></g><g><title>adt_dtorck_constraint (615,277 samples, 0.54%)</title><rect x="44.5093%" y="101" width="0.5389%" height="15" fill="rgb(236,97,10)"/><text x="44.7593%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,150,421 samples, 1.01%)</title><rect x="44.1376%" y="117" width="1.0076%" height="15" fill="rgb(233,208,19)"/><text x="44.3876%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,641,377 samples, 1.44%)</title><rect x="43.8236%" y="133" width="1.4376%" height="15" fill="rgb(216,164,2)"/><text x="44.0736%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,194,725 samples, 1.92%)</title><rect x="43.4333%" y="149" width="1.9222%" height="15" fill="rgb(220,129,5)"/><text x="43.6833%" y="159.50">a..</text></g><g><title>adt_dtorck_constraint (2,802,941 samples, 2.45%)</title><rect x="43.0137%" y="165" width="2.4549%" height="15" fill="rgb(242,17,10)"/><text x="43.2637%" y="175.50">ad..</text></g><g><title>dropck_outlives (4,257,627 samples, 3.73%)</title><rect x="41.8797%" y="197" width="3.7289%" height="15" fill="rgb(242,107,0)"/><text x="42.1297%" y="207.50">drop..</text></g><g><title>adt_dtorck_constraint (3,622,441 samples, 3.17%)</title><rect x="42.4360%" y="181" width="3.1726%" height="15" fill="rgb(251,28,31)"/><text x="42.6860%" y="191.50">adt..</text></g><g><title>type_of (129,171 samples, 0.11%)</title><rect x="45.4955%" y="165" width="0.1131%" height="15" fill="rgb(233,223,10)"/><text x="45.7455%" y="175.50"></text></g><g><title>adt_def (116,171 samples, 0.10%)</title><rect x="46.3257%" y="165" width="0.1017%" height="15" fill="rgb(215,21,27)"/><text x="46.5757%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (114,211 samples, 0.10%)</title><rect x="46.3274%" y="149" width="0.1000%" height="15" fill="rgb(232,23,21)"/><text x="46.5774%" y="159.50"></text></g><g><title>adt_sized_constraint (152,102 samples, 0.13%)</title><rect x="46.3162%" y="181" width="0.1332%" height="15" fill="rgb(244,5,23)"/><text x="46.5662%" y="191.50"></text></g><g><title>impl_trait_ref (119,392 samples, 0.10%)</title><rect x="46.5162%" y="181" width="0.1046%" height="15" fill="rgb(226,81,46)"/><text x="46.7662%" y="191.50"></text></g><g><title>predicates_of (140,682 samples, 0.12%)</title><rect x="46.6265%" y="181" width="0.1232%" height="15" fill="rgb(247,70,30)"/><text x="46.8765%" y="191.50"></text></g><g><title>trait_impls_of (852,929 samples, 0.75%)</title><rect x="46.7592%" y="181" width="0.7470%" height="15" fill="rgb(212,68,19)"/><text x="47.0092%" y="191.50"></text></g><g><title>implementations_of_trait (190,892 samples, 0.17%)</title><rect x="47.3390%" y="165" width="0.1672%" height="15" fill="rgb(240,187,13)"/><text x="47.5890%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (122,531 samples, 0.11%)</title><rect x="47.3989%" y="149" width="0.1073%" height="15" fill="rgb(223,113,26)"/><text x="47.6489%" y="159.50"></text></g><g><title>evaluate_obligation (2,167,445 samples, 1.90%)</title><rect x="45.6086%" y="197" width="1.8983%" height="15" fill="rgb(206,192,2)"/><text x="45.8586%" y="207.50">e..</text></g><g><title>fn_sig (153,711 samples, 0.13%)</title><rect x="47.5324%" y="197" width="0.1346%" height="15" fill="rgb(241,108,4)"/><text x="47.7824%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (138,361 samples, 0.12%)</title><rect x="47.5458%" y="181" width="0.1212%" height="15" fill="rgb(247,173,49)"/><text x="47.7958%" y="191.50"></text></g><g><title>is_copy_raw (320,145 samples, 0.28%)</title><rect x="47.9340%" y="197" width="0.2804%" height="15" fill="rgb(224,114,35)"/><text x="48.1840%" y="207.50"></text></g><g><title>evaluate_obligation (288,913 samples, 0.25%)</title><rect x="47.9614%" y="181" width="0.2530%" height="15" fill="rgb(245,159,27)"/><text x="48.2114%" y="191.50"></text></g><g><title>trait_impls_of (135,831 samples, 0.12%)</title><rect x="48.0955%" y="165" width="0.1190%" height="15" fill="rgb(245,172,44)"/><text x="48.3455%" y="175.50"></text></g><g><title>lint_levels (120,401 samples, 0.11%)</title><rect x="48.2947%" y="197" width="0.1055%" height="15" fill="rgb(236,23,11)"/><text x="48.5447%" y="207.50"></text></g><g><title>evaluate_obligation (161,471 samples, 0.14%)</title><rect x="48.5621%" y="181" width="0.1414%" height="15" fill="rgb(205,117,38)"/><text x="48.8121%" y="191.50"></text></g><g><title>method_autoderef_steps (321,112 samples, 0.28%)</title><rect x="48.4368%" y="197" width="0.2812%" height="15" fill="rgb(237,72,25)"/><text x="48.6868%" y="207.50"></text></g><g><title>explicit_predicates_of (201,562 samples, 0.18%)</title><rect x="48.9388%" y="165" width="0.1765%" height="15" fill="rgb(244,70,9)"/><text x="49.1888%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (172,852 samples, 0.15%)</title><rect x="48.9640%" y="149" width="0.1514%" height="15" fill="rgb(217,125,39)"/><text x="49.2140%" y="159.50"></text></g><g><title>predicates_of (503,275 samples, 0.44%)</title><rect x="48.7328%" y="197" width="0.4408%" height="15" fill="rgb(235,36,10)"/><text x="48.9828%" y="207.50"></text></g><g><title>predicates_defined_on (356,855 samples, 0.31%)</title><rect x="48.8611%" y="181" width="0.3125%" height="15" fill="rgb(251,123,47)"/><text x="49.1111%" y="191.50"></text></g><g><title>trait_impls_of (125,882 samples, 0.11%)</title><rect x="49.2492%" y="197" width="0.1103%" height="15" fill="rgb(221,13,13)"/><text x="49.4992%" y="207.50"></text></g><g><title>typeck (16,914,897 samples, 14.81%)</title><rect x="34.6935%" y="213" width="14.8145%" height="15" fill="rgb(238,131,9)"/><text x="34.9435%" y="223.50">typeck</text></g><g><title>item_bodies_checking (27,558,675 samples, 24.14%)</title><rect x="25.3885%" y="261" width="24.1366%" height="15" fill="rgb(211,50,8)"/><text x="25.6385%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (27,555,925 samples, 24.13%)</title><rect x="25.3909%" y="245" width="24.1342%" height="15" fill="rgb(245,182,24)"/><text x="25.6409%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (27,540,035 samples, 24.12%)</title><rect x="25.4048%" y="229" width="24.1202%" height="15" fill="rgb(242,14,37)"/><text x="25.6548%" y="239.50">typeck</text></g><g><title>impl_trait_ref (311,903 samples, 0.27%)</title><rect x="50.2951%" y="101" width="0.2732%" height="15" fill="rgb(246,228,12)"/><text x="50.5451%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (288,793 samples, 0.25%)</title><rect x="50.3154%" y="85" width="0.2529%" height="15" fill="rgb(213,55,15)"/><text x="50.5654%" y="95.50"></text></g><g><title>coherent_trait (534,596 samples, 0.47%)</title><rect x="50.1279%" y="133" width="0.4682%" height="15" fill="rgb(209,9,3)"/><text x="50.3779%" y="143.50"></text></g><g><title>specialization_graph_of (531,196 samples, 0.47%)</title><rect x="50.1308%" y="117" width="0.4652%" height="15" fill="rgb(230,59,30)"/><text x="50.3808%" y="127.50"></text></g><g><title>adt_destructor (541,726 samples, 0.47%)</title><rect x="50.1231%" y="165" width="0.4745%" height="15" fill="rgb(209,121,21)"/><text x="50.3731%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_destructor (541,206 samples, 0.47%)</title><rect x="50.1235%" y="149" width="0.4740%" height="15" fill="rgb(220,109,13)"/><text x="50.3735%" y="159.50"></text></g><g><title>adt_dtorck_constraint (547,536 samples, 0.48%)</title><rect x="50.1184%" y="181" width="0.4795%" height="15" fill="rgb(232,18,1)"/><text x="50.3684%" y="191.50"></text></g><g><title>dropck_outlives (572,876 samples, 0.50%)</title><rect x="50.0972%" y="213" width="0.5017%" height="15" fill="rgb(215,41,42)"/><text x="50.3472%" y="223.50"></text></g><g><title>adt_dtorck_constraint (555,566 samples, 0.49%)</title><rect x="50.1123%" y="197" width="0.4866%" height="15" fill="rgb(224,123,36)"/><text x="50.3623%" y="207.50"></text></g><g><title>item_types_checking (1,416,646 samples, 1.24%)</title><rect x="49.5250%" y="261" width="1.2407%" height="15" fill="rgb(240,125,3)"/><text x="49.7750%" y="271.50"></text></g><g><title>check_mod_item_types (1,413,716 samples, 1.24%)</title><rect x="49.5276%" y="245" width="1.2382%" height="15" fill="rgb(205,98,50)"/><text x="49.7776%" y="255.50"></text></g><g><title>typeck (1,375,766 samples, 1.20%)</title><rect x="49.5608%" y="229" width="1.2049%" height="15" fill="rgb(205,185,37)"/><text x="49.8108%" y="239.50"></text></g><g><title>fn_sig (196,193 samples, 0.17%)</title><rect x="50.8346%" y="229" width="0.1718%" height="15" fill="rgb(238,207,15)"/><text x="51.0846%" y="239.50"></text></g><g><title>generics_of (116,012 samples, 0.10%)</title><rect x="51.0064%" y="229" width="0.1016%" height="15" fill="rgb(213,199,42)"/><text x="51.2564%" y="239.50"></text></g><g><title>type_collecting (462,605 samples, 0.41%)</title><rect x="50.7672%" y="261" width="0.4052%" height="15" fill="rgb(235,201,11)"/><text x="51.0172%" y="271.50"></text></g><g><title>collect_mod_item_types (454,215 samples, 0.40%)</title><rect x="50.7745%" y="245" width="0.3978%" height="15" fill="rgb(207,46,11)"/><text x="51.0245%" y="255.50"></text></g><g><title>adt_def (125,671 samples, 0.11%)</title><rect x="51.7393%" y="197" width="0.1101%" height="15" fill="rgb(241,35,35)"/><text x="51.9893%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (123,491 samples, 0.11%)</title><rect x="51.7412%" y="181" width="0.1082%" height="15" fill="rgb(243,32,47)"/><text x="51.9912%" y="191.50"></text></g><g><title>adt_def (253,073 samples, 0.22%)</title><rect x="52.0474%" y="149" width="0.2216%" height="15" fill="rgb(247,202,23)"/><text x="52.2974%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (244,813 samples, 0.21%)</title><rect x="52.0547%" y="133" width="0.2144%" height="15" fill="rgb(219,102,11)"/><text x="52.3047%" y="143.50"></text></g><g><title>item_attrs (173,803 samples, 0.15%)</title><rect x="52.1169%" y="117" width="0.1522%" height="15" fill="rgb(243,110,44)"/><text x="52.3669%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (165,283 samples, 0.14%)</title><rect x="52.1243%" y="101" width="0.1448%" height="15" fill="rgb(222,74,54)"/><text x="52.3743%" y="111.50"></text></g><g><title>adt_sized_constraint (120,232 samples, 0.11%)</title><rect x="52.3333%" y="133" width="0.1053%" height="15" fill="rgb(216,99,12)"/><text x="52.5833%" y="143.50"></text></g><g><title>adt_sized_constraint (218,953 samples, 0.19%)</title><rect x="52.2691%" y="149" width="0.1918%" height="15" fill="rgb(226,22,26)"/><text x="52.5191%" y="159.50"></text></g><g><title>adt_sized_constraint (534,076 samples, 0.47%)</title><rect x="52.0200%" y="165" width="0.4678%" height="15" fill="rgb(217,163,10)"/><text x="52.2700%" y="175.50"></text></g><g><title>adt_sized_constraint (685,748 samples, 0.60%)</title><rect x="51.9276%" y="181" width="0.6006%" height="15" fill="rgb(213,25,53)"/><text x="52.1776%" y="191.50"></text></g><g><title>adt_sized_constraint (799,259 samples, 0.70%)</title><rect x="51.8494%" y="197" width="0.7000%" height="15" fill="rgb(252,105,26)"/><text x="52.0994%" y="207.50"></text></g><g><title>adt_sized_constraint (963,951 samples, 0.84%)</title><rect x="51.7236%" y="213" width="0.8443%" height="15" fill="rgb(220,39,43)"/><text x="51.9736%" y="223.50"></text></g><g><title>evaluate_obligation (1,266,945 samples, 1.11%)</title><rect x="51.5684%" y="229" width="1.1096%" height="15" fill="rgb(229,68,48)"/><text x="51.8184%" y="239.50"></text></g><g><title>param_env (154,691 samples, 0.14%)</title><rect x="52.7466%" y="229" width="0.1355%" height="15" fill="rgb(252,8,32)"/><text x="52.9966%" y="239.50"></text></g><g><title>region_scope_tree (197,272 samples, 0.17%)</title><rect x="52.9321%" y="229" width="0.1728%" height="15" fill="rgb(223,20,43)"/><text x="53.1821%" y="239.50"></text></g><g><title>analysis (60,022,954 samples, 52.57%)</title><rect x="0.5357%" y="293" width="52.5696%" height="15" fill="rgb(229,81,49)"/><text x="0.7857%" y="303.50">analysis</text></g><g><title>type_check_crate (31,714,711 samples, 27.78%)</title><rect x="25.3288%" y="277" width="27.7765%" height="15" fill="rgb(236,28,36)"/><text x="25.5788%" y="287.50">type_check_crate</text></g><g><title>wf_checking (2,205,264 samples, 1.93%)</title><rect x="51.1739%" y="261" width="1.9314%" height="15" fill="rgb(249,185,26)"/><text x="51.4239%" y="271.50">w..</text></g><g><title>check_item_well_formed (2,145,682 samples, 1.88%)</title><rect x="51.2261%" y="245" width="1.8792%" height="15" fill="rgb(249,174,33)"/><text x="51.4761%" y="255.50">c..</text></g><g><title>codegen_crate (401,034 samples, 0.35%)</title><rect x="53.1149%" y="293" width="0.3512%" height="15" fill="rgb(233,201,37)"/><text x="53.3649%" y="303.50"></text></g><g><title>metadata_load_macro (921,719 samples, 0.81%)</title><rect x="87.4593%" y="245" width="0.8073%" height="15" fill="rgb(221,78,26)"/><text x="87.7093%" y="255.50"></text></g><g><title>metadata_register_crate (2,966,195 samples, 2.60%)</title><rect x="88.2666%" y="245" width="2.5979%" height="15" fill="rgb(250,127,30)"/><text x="88.5166%" y="255.50">me..</text></g><g><title>metadata_register_crate (1,051,011 samples, 0.92%)</title><rect x="89.9439%" y="229" width="0.9205%" height="15" fill="rgb(230,49,44)"/><text x="90.1939%" y="239.50"></text></g><g><title>macro_expand_crate (42,354,159 samples, 37.09%)</title><rect x="53.8500%" y="277" width="37.0948%" height="15" fill="rgb(229,67,23)"/><text x="54.1000%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (42,334,499 samples, 37.08%)</title><rect x="53.8672%" y="261" width="37.0776%" height="15" fill="rgb(249,83,47)"/><text x="54.1172%" y="271.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (358,714 samples, 0.31%)</title><rect x="90.9459%" y="277" width="0.3142%" height="15" fill="rgb(215,43,3)"/><text x="91.1959%" y="287.50"></text></g><g><title>pre_AST_expansion_lint_checks (144,352 samples, 0.13%)</title><rect x="91.2601%" y="277" width="0.1264%" height="15" fill="rgb(238,154,13)"/><text x="91.5101%" y="287.50"></text></g><g><title>finalize_imports (153,352 samples, 0.13%)</title><rect x="91.3905%" y="261" width="0.1343%" height="15" fill="rgb(219,56,2)"/><text x="91.6405%" y="271.50"></text></g><g><title>finalize_macro_resolutions (254,163 samples, 0.22%)</title><rect x="91.5248%" y="261" width="0.2226%" height="15" fill="rgb(233,0,4)"/><text x="91.7748%" y="271.50"></text></g><g><title>late_resolve_crate (1,443,096 samples, 1.26%)</title><rect x="91.7474%" y="261" width="1.2639%" height="15" fill="rgb(235,30,7)"/><text x="91.9974%" y="271.50"></text></g><g><title>configure_and_expand (45,227,851 samples, 39.61%)</title><rect x="53.4661%" y="293" width="39.6117%" height="15" fill="rgb(250,79,13)"/><text x="53.7161%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (1,931,101 samples, 1.69%)</title><rect x="91.3865%" y="277" width="1.6913%" height="15" fill="rgb(211,146,34)"/><text x="91.6365%" y="287.50"></text></g><g><title>early_lint_checks (289,923 samples, 0.25%)</title><rect x="93.1716%" y="293" width="0.2539%" height="15" fill="rgb(228,22,38)"/><text x="93.4216%" y="303.50"></text></g><g><title>free_global_ctxt (3,396,008 samples, 2.97%)</title><rect x="93.4255%" y="293" width="2.9743%" height="15" fill="rgb(235,168,5)"/><text x="93.6755%" y="303.50">fre..</text></g><g><title>generate_crate_metadata (176,522 samples, 0.15%)</title><rect x="96.3998%" y="293" width="0.1546%" height="15" fill="rgb(221,155,16)"/><text x="96.6498%" y="303.50"></text></g><g><title>hir_lowering (1,479,306 samples, 1.30%)</title><rect x="96.5544%" y="293" width="1.2956%" height="15" fill="rgb(215,215,53)"/><text x="96.8044%" y="303.50"></text></g><g><title>parse_crate (1,211,134 samples, 1.06%)</title><rect x="97.9015%" y="293" width="1.0607%" height="15" fill="rgb(223,4,10)"/><text x="98.1515%" y="303.50"></text></g><g><title>prepare_outputs (170,782 samples, 0.15%)</title><rect x="98.9703%" y="293" width="0.1496%" height="15" fill="rgb(234,103,6)"/><text x="99.2203%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (622,617 samples, 0.55%)</title><rect x="99.1198%" y="293" width="0.5453%" height="15" fill="rgb(227,97,0)"/><text x="99.3698%" y="303.50"></text></g><g><title>all (114,178,094 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (114,178,094 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (281,264 samples, 0.25%)</title><rect x="99.7537%" y="293" width="0.2463%" height="15" fill="rgb(222,22,37)"/><text x="100.0037%" y="303.50"></text></g></svg></svg>