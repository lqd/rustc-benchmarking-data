<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (146,831 samples, 0.16%)</title><rect x="7.6947%" y="261" width="0.1563%" height="15" fill="rgb(227,0,7)"/><text x="7.9447%" y="271.50"></text></g><g><title>param_env (251,702 samples, 0.27%)</title><rect x="8.9075%" y="229" width="0.2679%" height="15" fill="rgb(217,0,24)"/><text x="9.1575%" y="239.50"></text></g><g><title>codegen_fn_attrs (188,213 samples, 0.20%)</title><rect x="9.4537%" y="213" width="0.2003%" height="15" fill="rgb(221,193,54)"/><text x="9.7037%" y="223.50"></text></g><g><title>adt_drop_tys (111,171 samples, 0.12%)</title><rect x="11.1773%" y="149" width="0.1183%" height="15" fill="rgb(248,212,6)"/><text x="11.4273%" y="159.50"></text></g><g><title>adt_drop_tys (158,022 samples, 0.17%)</title><rect x="11.1648%" y="165" width="0.1682%" height="15" fill="rgb(208,68,35)"/><text x="11.4148%" y="175.50"></text></g><g><title>adt_drop_tys (335,103 samples, 0.36%)</title><rect x="11.1370%" y="181" width="0.3567%" height="15" fill="rgb(232,128,0)"/><text x="11.3870%" y="191.50"></text></g><g><title>is_copy_raw (578,455 samples, 0.62%)</title><rect x="11.4936%" y="181" width="0.6157%" height="15" fill="rgb(207,160,47)"/><text x="11.7436%" y="191.50"></text></g><g><title>evaluate_obligation (476,895 samples, 0.51%)</title><rect x="11.6017%" y="165" width="0.5076%" height="15" fill="rgb(228,23,34)"/><text x="11.8517%" y="175.50"></text></g><g><title>needs_drop_raw (1,009,241 samples, 1.07%)</title><rect x="11.0431%" y="197" width="1.0742%" height="15" fill="rgb(218,30,26)"/><text x="11.2931%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (100,281 samples, 0.11%)</title><rect x="12.2565%" y="181" width="0.1067%" height="15" fill="rgb(220,122,19)"/><text x="12.5065%" y="191.50"></text></g><g><title>specialization_graph_of (198,322 samples, 0.21%)</title><rect x="12.4071%" y="181" width="0.2111%" height="15" fill="rgb(250,228,42)"/><text x="12.6571%" y="191.50"></text></g><g><title>resolve_instance (555,277 samples, 0.59%)</title><rect x="12.1173%" y="197" width="0.5910%" height="15" fill="rgb(240,193,28)"/><text x="12.3673%" y="207.50"></text></g><g><title>thir_body (403,357 samples, 0.43%)</title><rect x="12.7280%" y="197" width="0.4293%" height="15" fill="rgb(216,20,37)"/><text x="12.9780%" y="207.50"></text></g><g><title>mir_const (4,553,445 samples, 4.85%)</title><rect x="8.4052%" y="245" width="4.8467%" height="15" fill="rgb(206,188,39)"/><text x="8.6552%" y="255.50">mir_co..</text></g><g><title>unsafety_check_result (3,829,828 samples, 4.08%)</title><rect x="9.1754%" y="229" width="4.0765%" height="15" fill="rgb(217,207,13)"/><text x="9.4254%" y="239.50">unsa..</text></g><g><title>mir_built (3,380,120 samples, 3.60%)</title><rect x="9.6541%" y="213" width="3.5978%" height="15" fill="rgb(231,73,38)"/><text x="9.9041%" y="223.50">mir_..</text></g><g><title>mir_promoted (5,045,230 samples, 5.37%)</title><rect x="7.9342%" y="261" width="5.3701%" height="15" fill="rgb(225,20,46)"/><text x="8.1842%" y="271.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (448,764 samples, 0.48%)</title><rect x="13.3044%" y="261" width="0.4777%" height="15" fill="rgb(210,31,41)"/><text x="13.5544%" y="271.50"></text></g><g><title>type_op_normalize_fn_sig (377,702 samples, 0.40%)</title><rect x="13.7820%" y="261" width="0.4020%" height="15" fill="rgb(221,200,47)"/><text x="14.0320%" y="271.50"></text></g><g><title>normalize_projection_ty (180,582 samples, 0.19%)</title><rect x="13.9918%" y="245" width="0.1922%" height="15" fill="rgb(226,26,5)"/><text x="14.2418%" y="255.50"></text></g><g><title>type_op_normalize_predicate (222,334 samples, 0.24%)</title><rect x="14.1840%" y="261" width="0.2367%" height="15" fill="rgb(249,33,26)"/><text x="14.4340%" y="271.50"></text></g><g><title>type_op_normalize_ty (278,763 samples, 0.30%)</title><rect x="14.4207%" y="261" width="0.2967%" height="15" fill="rgb(235,183,28)"/><text x="14.6707%" y="271.50"></text></g><g><title>normalize_projection_ty (118,521 samples, 0.13%)</title><rect x="14.5913%" y="245" width="0.1262%" height="15" fill="rgb(221,5,38)"/><text x="14.8413%" y="255.50"></text></g><g><title>type_op_prove_predicate (2,080,681 samples, 2.21%)</title><rect x="14.7174%" y="261" width="2.2147%" height="15" fill="rgb(247,18,42)"/><text x="14.9674%" y="271.50">t..</text></g><g><title>MIR_borrow_checking (15,211,319 samples, 16.19%)</title><rect x="0.7463%" y="293" width="16.1909%" height="15" fill="rgb(241,131,45)"/><text x="0.9963%" y="303.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,148,249 samples, 16.12%)</title><rect x="0.8135%" y="277" width="16.1238%" height="15" fill="rgb(249,31,29)"/><text x="1.0635%" y="287.50">mir_borrowck</text></g><g><title>MIR_effect_checking (124,132 samples, 0.13%)</title><rect x="16.9373%" y="293" width="0.1321%" height="15" fill="rgb(225,111,53)"/><text x="17.1873%" y="303.50"></text></g><g><title>hir_module_items (134,252 samples, 0.14%)</title><rect x="17.0694%" y="293" width="0.1429%" height="15" fill="rgb(238,160,17)"/><text x="17.3194%" y="303.50"></text></g><g><title>codegen_fn_attrs (226,742 samples, 0.24%)</title><rect x="17.5124%" y="229" width="0.2413%" height="15" fill="rgb(214,148,48)"/><text x="17.7624%" y="239.50"></text></g><g><title>codegen_fn_attrs (362,963 samples, 0.39%)</title><rect x="17.3714%" y="261" width="0.3863%" height="15" fill="rgb(232,36,49)"/><text x="17.6214%" y="271.50"></text></g><g><title>should_inherit_track_caller (325,573 samples, 0.35%)</title><rect x="17.4112%" y="245" width="0.3465%" height="15" fill="rgb(209,103,24)"/><text x="17.6612%" y="255.50"></text></g><g><title>check_mod_attrs (492,335 samples, 0.52%)</title><rect x="17.2339%" y="277" width="0.5240%" height="15" fill="rgb(229,88,8)"/><text x="17.4839%" y="287.50"></text></g><g><title>lookup_deprecation_entry (97,932 samples, 0.10%)</title><rect x="17.9869%" y="261" width="0.1042%" height="15" fill="rgb(213,181,19)"/><text x="18.2369%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (266,654 samples, 0.28%)</title><rect x="17.8763%" y="277" width="0.2838%" height="15" fill="rgb(254,191,54)"/><text x="18.1263%" y="287.50"></text></g><g><title>misc_checking_1 (931,550 samples, 0.99%)</title><rect x="17.2128%" y="293" width="0.9915%" height="15" fill="rgb(241,83,37)"/><text x="17.4628%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (271,553 samples, 0.29%)</title><rect x="18.2061%" y="277" width="0.2890%" height="15" fill="rgb(233,36,39)"/><text x="18.4561%" y="287.50"></text></g><g><title>check_mod_liveness (224,592 samples, 0.24%)</title><rect x="18.2561%" y="261" width="0.2391%" height="15" fill="rgb(226,3,54)"/><text x="18.5061%" y="271.50"></text></g><g><title>misc_checking_2 (603,906 samples, 0.64%)</title><rect x="18.2044%" y="293" width="0.6428%" height="15" fill="rgb(245,192,40)"/><text x="18.4544%" y="303.50"></text></g><g><title>match_checking (330,743 samples, 0.35%)</title><rect x="18.4951%" y="277" width="0.3520%" height="15" fill="rgb(238,167,29)"/><text x="18.7451%" y="287.50"></text></g><g><title>check_match (312,633 samples, 0.33%)</title><rect x="18.5144%" y="261" width="0.3328%" height="15" fill="rgb(232,182,51)"/><text x="18.7644%" y="271.50"></text></g><g><title>check_private_in_public (145,431 samples, 0.15%)</title><rect x="18.8566%" y="277" width="0.1548%" height="15" fill="rgb(231,60,39)"/><text x="19.1066%" y="287.50"></text></g><g><title>death_checking (253,153 samples, 0.27%)</title><rect x="19.0114%" y="277" width="0.2695%" height="15" fill="rgb(208,69,12)"/><text x="19.2614%" y="287.50"></text></g><g><title>eval_to_const_value_raw (161,581 samples, 0.17%)</title><rect x="20.1256%" y="245" width="0.1720%" height="15" fill="rgb(235,93,37)"/><text x="20.3756%" y="255.50"></text></g><g><title>eval_to_const_value_raw (152,801 samples, 0.16%)</title><rect x="20.1350%" y="229" width="0.1626%" height="15" fill="rgb(213,116,39)"/><text x="20.3850%" y="239.50"></text></g><g><title>eval_to_allocation_raw (147,131 samples, 0.16%)</title><rect x="20.1410%" y="213" width="0.1566%" height="15" fill="rgb(222,207,29)"/><text x="20.3910%" y="223.50"></text></g><g><title>param_env (194,293 samples, 0.21%)</title><rect x="20.2976%" y="245" width="0.2068%" height="15" fill="rgb(206,96,30)"/><text x="20.5476%" y="255.50"></text></g><g><title>crate_lints (2,647,030 samples, 2.82%)</title><rect x="19.2826%" y="261" width="2.8175%" height="15" fill="rgb(218,138,4)"/><text x="19.5326%" y="271.50">cr..</text></g><g><title>type_of (1,497,109 samples, 1.59%)</title><rect x="20.5066%" y="245" width="1.5935%" height="15" fill="rgb(250,191,14)"/><text x="20.7566%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (1,138,702 samples, 1.21%)</title><rect x="20.8881%" y="229" width="1.2120%" height="15" fill="rgb(239,60,40)"/><text x="21.1381%" y="239.50"></text></g><g><title>lint_checking (2,867,512 samples, 3.05%)</title><rect x="19.2809%" y="277" width="3.0522%" height="15" fill="rgb(206,27,48)"/><text x="19.5309%" y="287.50">lin..</text></g><g><title>module_lints (218,862 samples, 0.23%)</title><rect x="22.1001%" y="261" width="0.2330%" height="15" fill="rgb(225,35,8)"/><text x="22.3501%" y="271.50"></text></g><g><title>lint_mod (215,992 samples, 0.23%)</title><rect x="22.1032%" y="245" width="0.2299%" height="15" fill="rgb(250,213,24)"/><text x="22.3532%" y="255.50"></text></g><g><title>privacy_access_levels (186,042 samples, 0.20%)</title><rect x="22.3331%" y="277" width="0.1980%" height="15" fill="rgb(247,123,22)"/><text x="22.5831%" y="287.50"></text></g><g><title>privacy_checking_modules (657,818 samples, 0.70%)</title><rect x="22.5311%" y="277" width="0.7002%" height="15" fill="rgb(231,138,38)"/><text x="22.7811%" y="287.50"></text></g><g><title>check_mod_privacy (655,128 samples, 0.70%)</title><rect x="22.5339%" y="261" width="0.6973%" height="15" fill="rgb(231,145,46)"/><text x="22.7839%" y="271.50"></text></g><g><title>misc_checking_3 (4,129,706 samples, 4.40%)</title><rect x="18.8472%" y="293" width="4.3957%" height="15" fill="rgb(251,118,11)"/><text x="19.0972%" y="303.50">misc_..</text></g><g><title>impl_parent (1,999,481 samples, 2.13%)</title><rect x="27.0118%" y="229" width="2.1282%" height="15" fill="rgb(217,147,25)"/><text x="27.2618%" y="239.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,274,791 samples, 1.36%)</title><rect x="27.7831%" y="213" width="1.3569%" height="15" fill="rgb(247,81,37)"/><text x="28.0331%" y="223.50"></text></g><g><title>impl_trait_ref (5,239,705 samples, 5.58%)</title><rect x="29.1400%" y="229" width="5.5771%" height="15" fill="rgb(209,12,38)"/><text x="29.3900%" y="239.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,523,090 samples, 4.81%)</title><rect x="29.9028%" y="213" width="4.8144%" height="15" fill="rgb(227,1,9)"/><text x="30.1528%" y="223.50">metada..</text></g><g><title>coherent_trait (11,510,448 samples, 12.25%)</title><rect x="23.3155%" y="261" width="12.2517%" height="15" fill="rgb(248,47,43)"/><text x="23.5655%" y="271.50">coherent_trait</text></g><g><title>specialization_graph_of (11,496,038 samples, 12.24%)</title><rect x="23.3308%" y="245" width="12.2364%" height="15" fill="rgb(221,10,30)"/><text x="23.5808%" y="255.50">specialization_gra..</text></g><g><title>trait_impls_of (755,139 samples, 0.80%)</title><rect x="34.7634%" y="229" width="0.8038%" height="15" fill="rgb(210,229,1)"/><text x="35.0134%" y="239.50"></text></g><g><title>implementations_of_trait (242,721 samples, 0.26%)</title><rect x="35.3088%" y="213" width="0.2584%" height="15" fill="rgb(222,148,37)"/><text x="35.5588%" y="223.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (170,280 samples, 0.18%)</title><rect x="35.3859%" y="197" width="0.1812%" height="15" fill="rgb(234,67,33)"/><text x="35.6359%" y="207.50"></text></g><g><title>orphan_check_crate (167,332 samples, 0.18%)</title><rect x="35.5957%" y="261" width="0.1781%" height="15" fill="rgb(247,98,35)"/><text x="35.8457%" y="271.50"></text></g><g><title>coherence_checking (11,727,411 samples, 12.48%)</title><rect x="23.2946%" y="277" width="12.4827%" height="15" fill="rgb(247,138,52)"/><text x="23.5446%" y="287.50">coherence_checking</text></g><g><title>associated_items (113,701 samples, 0.12%)</title><rect x="43.2175%" y="229" width="0.1210%" height="15" fill="rgb(213,79,30)"/><text x="43.4675%" y="239.50"></text></g><g><title>adt_def (216,321 samples, 0.23%)</title><rect x="43.6377%" y="197" width="0.2303%" height="15" fill="rgb(246,177,23)"/><text x="43.8877%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (212,351 samples, 0.23%)</title><rect x="43.6419%" y="181" width="0.2260%" height="15" fill="rgb(230,62,27)"/><text x="43.8919%" y="191.50"></text></g><g><title>adt_def (154,551 samples, 0.16%)</title><rect x="43.9829%" y="165" width="0.1645%" height="15" fill="rgb(216,154,8)"/><text x="44.2329%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (153,261 samples, 0.16%)</title><rect x="43.9842%" y="149" width="0.1631%" height="15" fill="rgb(244,35,45)"/><text x="44.2342%" y="159.50"></text></g><g><title>adt_destructor (216,913 samples, 0.23%)</title><rect x="44.1914%" y="149" width="0.2309%" height="15" fill="rgb(251,115,12)"/><text x="44.4414%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_destructor (216,103 samples, 0.23%)</title><rect x="44.1923%" y="133" width="0.2300%" height="15" fill="rgb(240,54,50)"/><text x="44.4423%" y="143.50"></text></g><g><title>adt_def (394,676 samples, 0.42%)</title><rect x="44.6292%" y="85" width="0.4201%" height="15" fill="rgb(233,84,52)"/><text x="44.8792%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (394,016 samples, 0.42%)</title><rect x="44.6299%" y="69" width="0.4194%" height="15" fill="rgb(207,117,47)"/><text x="44.8799%" y="79.50"></text></g><g><title>item_attrs (385,785 samples, 0.41%)</title><rect x="44.6386%" y="53" width="0.4106%" height="15" fill="rgb(249,43,39)"/><text x="44.8886%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (384,955 samples, 0.41%)</title><rect x="44.6395%" y="37" width="0.4097%" height="15" fill="rgb(209,38,44)"/><text x="44.8895%" y="47.50"></text></g><g><title>adt_dtorck_constraint (484,926 samples, 0.52%)</title><rect x="44.6182%" y="101" width="0.5162%" height="15" fill="rgb(236,212,23)"/><text x="44.8682%" y="111.50"></text></g><g><title>adt_dtorck_constraint (548,647 samples, 0.58%)</title><rect x="44.5524%" y="117" width="0.5840%" height="15" fill="rgb(242,79,21)"/><text x="44.8024%" y="127.50"></text></g><g><title>adt_dtorck_constraint (597,067 samples, 0.64%)</title><rect x="44.5058%" y="133" width="0.6355%" height="15" fill="rgb(211,96,35)"/><text x="44.7558%" y="143.50"></text></g><g><title>adt_dtorck_constraint (684,698 samples, 0.73%)</title><rect x="44.4223%" y="149" width="0.7288%" height="15" fill="rgb(253,215,40)"/><text x="44.6723%" y="159.50"></text></g><g><title>adt_dtorck_constraint (951,802 samples, 1.01%)</title><rect x="44.1568%" y="165" width="1.0131%" height="15" fill="rgb(211,81,21)"/><text x="44.4068%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,149,753 samples, 1.22%)</title><rect x="43.9619%" y="181" width="1.2238%" height="15" fill="rgb(208,190,38)"/><text x="44.2119%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,226,244 samples, 1.31%)</title><rect x="43.8922%" y="197" width="1.3052%" height="15" fill="rgb(235,213,38)"/><text x="44.1422%" y="207.50"></text></g><g><title>adt_dtorck_constraint (1,573,666 samples, 1.68%)</title><rect x="43.5686%" y="213" width="1.6750%" height="15" fill="rgb(237,122,38)"/><text x="43.8186%" y="223.50"></text></g><g><title>dropck_outlives (1,747,320 samples, 1.86%)</title><rect x="43.3969%" y="229" width="1.8598%" height="15" fill="rgb(244,218,35)"/><text x="43.6469%" y="239.50">d..</text></g><g><title>evaluate_obligation (477,355 samples, 0.51%)</title><rect x="45.2567%" y="229" width="0.5081%" height="15" fill="rgb(240,68,47)"/><text x="45.5067%" y="239.50"></text></g><g><title>method_autoderef_steps (261,925 samples, 0.28%)</title><rect x="46.0138%" y="229" width="0.2788%" height="15" fill="rgb(210,16,53)"/><text x="46.2638%" y="239.50"></text></g><g><title>predicates_of (148,081 samples, 0.16%)</title><rect x="46.3442%" y="229" width="0.1576%" height="15" fill="rgb(235,124,12)"/><text x="46.5942%" y="239.50"></text></g><g><title>predicates_defined_on (103,331 samples, 0.11%)</title><rect x="46.3918%" y="213" width="0.1100%" height="15" fill="rgb(224,169,11)"/><text x="46.6418%" y="223.50"></text></g><g><title>associated_items (126,083 samples, 0.13%)</title><rect x="52.0802%" y="213" width="0.1342%" height="15" fill="rgb(250,166,2)"/><text x="52.3302%" y="223.50"></text></g><g><title>dropck_outlives (381,245 samples, 0.41%)</title><rect x="52.2280%" y="213" width="0.4058%" height="15" fill="rgb(242,216,29)"/><text x="52.4780%" y="223.50"></text></g><g><title>evaluate_obligation (959,453 samples, 1.02%)</title><rect x="52.6338%" y="213" width="1.0212%" height="15" fill="rgb(230,116,27)"/><text x="52.8838%" y="223.50"></text></g><g><title>trait_impls_of (182,112 samples, 0.19%)</title><rect x="53.4612%" y="197" width="0.1938%" height="15" fill="rgb(228,99,48)"/><text x="53.7112%" y="207.50"></text></g><g><title>is_copy_raw (648,787 samples, 0.69%)</title><rect x="53.8457%" y="213" width="0.6906%" height="15" fill="rgb(253,11,6)"/><text x="54.0957%" y="223.50"></text></g><g><title>evaluate_obligation (572,047 samples, 0.61%)</title><rect x="53.9273%" y="197" width="0.6089%" height="15" fill="rgb(247,143,39)"/><text x="54.1773%" y="207.50"></text></g><g><title>trait_impls_of (205,362 samples, 0.22%)</title><rect x="54.3176%" y="181" width="0.2186%" height="15" fill="rgb(236,97,10)"/><text x="54.5676%" y="191.50"></text></g><g><title>item_attrs (120,312 samples, 0.13%)</title><rect x="54.5362%" y="213" width="0.1281%" height="15" fill="rgb(233,208,19)"/><text x="54.7862%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (115,672 samples, 0.12%)</title><rect x="54.5412%" y="197" width="0.1231%" height="15" fill="rgb(216,164,2)"/><text x="54.7912%" y="207.50"></text></g><g><title>predicates_of (170,680 samples, 0.18%)</title><rect x="54.8114%" y="213" width="0.1817%" height="15" fill="rgb(220,129,5)"/><text x="55.0614%" y="223.50"></text></g><g><title>predicates_defined_on (114,010 samples, 0.12%)</title><rect x="54.8717%" y="197" width="0.1214%" height="15" fill="rgb(242,17,10)"/><text x="55.1217%" y="207.50"></text></g><g><title>typeck (8,062,439 samples, 8.58%)</title><rect x="46.5631%" y="229" width="8.5817%" height="15" fill="rgb(242,107,0)"/><text x="46.8131%" y="239.50">typeck</text></g><g><title>item_bodies_checking (18,200,763 samples, 19.37%)</title><rect x="35.8042%" y="277" width="19.3729%" height="15" fill="rgb(251,28,31)"/><text x="36.0542%" y="287.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,197,523 samples, 19.37%)</title><rect x="35.8076%" y="261" width="19.3694%" height="15" fill="rgb(233,223,10)"/><text x="36.0576%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (18,151,193 samples, 19.32%)</title><rect x="35.8569%" y="245" width="19.3201%" height="15" fill="rgb(215,21,27)"/><text x="36.1069%" y="255.50">typeck</text></g><g><title>impl_parent (101,691 samples, 0.11%)</title><rect x="56.5949%" y="197" width="0.1082%" height="15" fill="rgb(232,23,21)"/><text x="56.8449%" y="207.50"></text></g><g><title>adt_destructor (530,996 samples, 0.57%)</title><rect x="56.4179%" y="245" width="0.5652%" height="15" fill="rgb(244,5,23)"/><text x="56.6679%" y="255.50"></text></g><g><title>coherent_trait (526,506 samples, 0.56%)</title><rect x="56.4226%" y="229" width="0.5604%" height="15" fill="rgb(226,81,46)"/><text x="56.6726%" y="239.50"></text></g><g><title>specialization_graph_of (524,536 samples, 0.56%)</title><rect x="56.4247%" y="213" width="0.5583%" height="15" fill="rgb(247,70,30)"/><text x="56.6747%" y="223.50"></text></g><g><title>impl_trait_ref (262,972 samples, 0.28%)</title><rect x="56.7032%" y="197" width="0.2799%" height="15" fill="rgb(212,68,19)"/><text x="56.9532%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (226,222 samples, 0.24%)</title><rect x="56.7423%" y="181" width="0.2408%" height="15" fill="rgb(240,187,13)"/><text x="56.9923%" y="191.50"></text></g><g><title>type_of (236,692 samples, 0.25%)</title><rect x="57.1674%" y="245" width="0.2519%" height="15" fill="rgb(223,113,26)"/><text x="57.4174%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (220,092 samples, 0.23%)</title><rect x="57.1850%" y="229" width="0.2343%" height="15" fill="rgb(206,192,2)"/><text x="57.4350%" y="239.50"></text></g><g><title>item_types_checking (2,200,344 samples, 2.34%)</title><rect x="55.1771%" y="277" width="2.3420%" height="15" fill="rgb(241,108,4)"/><text x="55.4271%" y="287.50">i..</text></g><g><title>check_mod_item_types (2,196,794 samples, 2.34%)</title><rect x="55.1808%" y="261" width="2.3383%" height="15" fill="rgb(247,173,49)"/><text x="55.4308%" y="271.50">c..</text></g><g><title>fn_sig (173,691 samples, 0.18%)</title><rect x="57.7066%" y="245" width="0.1849%" height="15" fill="rgb(224,114,35)"/><text x="57.9566%" y="255.50"></text></g><g><title>generics_of (135,032 samples, 0.14%)</title><rect x="57.8914%" y="245" width="0.1437%" height="15" fill="rgb(245,159,27)"/><text x="58.1414%" y="255.50"></text></g><g><title>late_bound_vars_map (362,985 samples, 0.39%)</title><rect x="58.3620%" y="197" width="0.3864%" height="15" fill="rgb(245,172,44)"/><text x="58.6120%" y="207.50"></text></g><g><title>resolve_lifetimes (353,905 samples, 0.38%)</title><rect x="58.3717%" y="181" width="0.3767%" height="15" fill="rgb(236,23,11)"/><text x="58.6217%" y="191.50"></text></g><g><title>lint_levels (137,911 samples, 0.15%)</title><rect x="58.6016%" y="165" width="0.1468%" height="15" fill="rgb(205,117,38)"/><text x="58.8516%" y="175.50"></text></g><g><title>explicit_predicates_of (693,691 samples, 0.74%)</title><rect x="58.1309%" y="213" width="0.7384%" height="15" fill="rgb(237,72,25)"/><text x="58.3809%" y="223.50"></text></g><g><title>type_param_predicates (96,720 samples, 0.10%)</title><rect x="58.7663%" y="197" width="0.1029%" height="15" fill="rgb(244,70,9)"/><text x="59.0163%" y="207.50"></text></g><g><title>predicates_of (987,734 samples, 1.05%)</title><rect x="58.0497%" y="245" width="1.0513%" height="15" fill="rgb(217,125,39)"/><text x="58.2997%" y="255.50"></text></g><g><title>predicates_defined_on (960,483 samples, 1.02%)</title><rect x="58.0787%" y="229" width="1.0223%" height="15" fill="rgb(235,36,10)"/><text x="58.3287%" y="239.50"></text></g><g><title>inferred_outlives_of (217,702 samples, 0.23%)</title><rect x="58.8693%" y="213" width="0.2317%" height="15" fill="rgb(251,123,47)"/><text x="59.1193%" y="223.50"></text></g><g><title>inferred_outlives_crate (201,102 samples, 0.21%)</title><rect x="58.8870%" y="197" width="0.2141%" height="15" fill="rgb(221,13,13)"/><text x="59.1370%" y="207.50"></text></g><g><title>type_of (107,571 samples, 0.11%)</title><rect x="58.9865%" y="181" width="0.1145%" height="15" fill="rgb(238,131,9)"/><text x="59.2365%" y="191.50"></text></g><g><title>type_collecting (1,947,382 samples, 2.07%)</title><rect x="57.5221%" y="277" width="2.0728%" height="15" fill="rgb(211,50,8)"/><text x="57.7721%" y="287.50">t..</text></g><g><title>collect_mod_item_types (1,938,722 samples, 2.06%)</title><rect x="57.5313%" y="261" width="2.0636%" height="15" fill="rgb(245,182,24)"/><text x="57.7813%" y="271.50">c..</text></g><g><title>type_of (460,564 samples, 0.49%)</title><rect x="59.1046%" y="245" width="0.4902%" height="15" fill="rgb(242,14,37)"/><text x="59.3546%" y="255.50"></text></g><g><title>adt_sized_constraint (125,352 samples, 0.13%)</title><rect x="62.6901%" y="229" width="0.1334%" height="15" fill="rgb(246,228,12)"/><text x="62.9401%" y="239.50"></text></g><g><title>evaluate_obligation (767,247 samples, 0.82%)</title><rect x="62.1537%" y="245" width="0.8167%" height="15" fill="rgb(213,55,15)"/><text x="62.4037%" y="255.50"></text></g><g><title>implied_outlives_bounds (268,023 samples, 0.29%)</title><rect x="63.0062%" y="245" width="0.2853%" height="15" fill="rgb(209,9,3)"/><text x="63.2562%" y="255.50"></text></g><g><title>layout_of (145,311 samples, 0.15%)</title><rect x="63.4103%" y="229" width="0.1547%" height="15" fill="rgb(230,59,30)"/><text x="63.6603%" y="239.50"></text></g><g><title>object_safety_violations (272,063 samples, 0.29%)</title><rect x="63.2915%" y="245" width="0.2896%" height="15" fill="rgb(209,121,21)"/><text x="63.5415%" y="255.50"></text></g><g><title>param_env (309,563 samples, 0.33%)</title><rect x="63.5811%" y="245" width="0.3295%" height="15" fill="rgb(220,109,13)"/><text x="63.8311%" y="255.50"></text></g><g><title>region_scope_tree (204,003 samples, 0.22%)</title><rect x="63.9670%" y="245" width="0.2171%" height="15" fill="rgb(232,18,1)"/><text x="64.2170%" y="255.50"></text></g><g><title>check_impl_item_well_formed (4,180,696 samples, 4.45%)</title><rect x="59.7383%" y="261" width="4.4499%" height="15" fill="rgb(215,41,42)"/><text x="59.9883%" y="271.50">check..</text></g><g><title>evaluate_obligation (165,931 samples, 0.18%)</title><rect x="65.7022%" y="245" width="0.1766%" height="15" fill="rgb(224,123,36)"/><text x="65.9522%" y="255.50"></text></g><g><title>implied_outlives_bounds (134,101 samples, 0.14%)</title><rect x="65.9466%" y="245" width="0.1427%" height="15" fill="rgb(240,125,3)"/><text x="66.1966%" y="255.50"></text></g><g><title>evaluate_obligation (149,822 samples, 0.16%)</title><rect x="66.2642%" y="229" width="0.1595%" height="15" fill="rgb(205,98,50)"/><text x="66.5142%" y="239.50"></text></g><g><title>object_safety_violations (507,306 samples, 0.54%)</title><rect x="66.1126%" y="245" width="0.5400%" height="15" fill="rgb(205,185,37)"/><text x="66.3626%" y="255.50"></text></g><g><title>param_env (250,365 samples, 0.27%)</title><rect x="66.6533%" y="245" width="0.2665%" height="15" fill="rgb(238,207,15)"/><text x="66.9033%" y="255.50"></text></g><g><title>predicates_of (101,560 samples, 0.11%)</title><rect x="66.9198%" y="245" width="0.1081%" height="15" fill="rgb(213,199,42)"/><text x="67.1698%" y="255.50"></text></g><g><title>trait_impls_of (196,623 samples, 0.21%)</title><rect x="67.0505%" y="245" width="0.2093%" height="15" fill="rgb(235,201,11)"/><text x="67.3005%" y="255.50"></text></g><g><title>analysis (62,766,999 samples, 66.81%)</title><rect x="0.5463%" y="309" width="66.8092%" height="15" fill="rgb(207,46,11)"/><text x="0.7963%" y="319.50">analysis</text></g><g><title>type_check_crate (41,443,672 samples, 44.11%)</title><rect x="23.2428%" y="293" width="44.1126%" height="15" fill="rgb(241,35,35)"/><text x="23.4928%" y="303.50">type_check_crate</text></g><g><title>wf_checking (7,287,971 samples, 7.76%)</title><rect x="59.5981%" y="277" width="7.7573%" height="15" fill="rgb(243,32,47)"/><text x="59.8481%" y="287.50">wf_checking</text></g><g><title>check_item_well_formed (2,975,563 samples, 3.17%)</title><rect x="64.1883%" y="261" width="3.1672%" height="15" fill="rgb(247,202,23)"/><text x="64.4383%" y="271.50">che..</text></g><g><title>codegen_crate (523,656 samples, 0.56%)</title><rect x="67.3629%" y="309" width="0.5574%" height="15" fill="rgb(219,102,11)"/><text x="67.6129%" y="319.50"></text></g><g><title>AST_validation (118,201 samples, 0.13%)</title><rect x="68.0646%" y="293" width="0.1258%" height="15" fill="rgb(243,110,44)"/><text x="68.3146%" y="303.50"></text></g><g><title>metadata_load_macro (648,088 samples, 0.69%)</title><rect x="79.3953%" y="261" width="0.6898%" height="15" fill="rgb(222,74,54)"/><text x="79.6453%" y="271.50"></text></g><g><title>metadata_register_crate (5,928,717 samples, 6.31%)</title><rect x="80.0851%" y="261" width="6.3105%" height="15" fill="rgb(216,99,12)"/><text x="80.3351%" y="271.50">metadata..</text></g><g><title>metadata_register_crate (4,327,451 samples, 4.61%)</title><rect x="81.7895%" y="245" width="4.6061%" height="15" fill="rgb(226,22,26)"/><text x="82.0395%" y="255.50">metad..</text></g><g><title>metadata_register_crate (152,203 samples, 0.16%)</title><rect x="86.2336%" y="229" width="0.1620%" height="15" fill="rgb(217,163,10)"/><text x="86.4836%" y="239.50"></text></g><g><title>macro_expand_crate (17,036,829 samples, 18.13%)</title><rect x="68.2910%" y="293" width="18.1340%" height="15" fill="rgb(213,25,53)"/><text x="68.5410%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (17,019,779 samples, 18.12%)</title><rect x="68.3091%" y="277" width="18.1158%" height="15" fill="rgb(252,105,26)"/><text x="68.5591%" y="287.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (102,251 samples, 0.11%)</title><rect x="86.4284%" y="293" width="0.1088%" height="15" fill="rgb(220,39,43)"/><text x="86.6784%" y="303.50"></text></g><g><title>late_resolve_crate (1,137,332 samples, 1.21%)</title><rect x="86.6665%" y="277" width="1.2106%" height="15" fill="rgb(229,68,48)"/><text x="86.9165%" y="287.50"></text></g><g><title>configure_and_expand (18,812,768 samples, 20.02%)</title><rect x="67.9202%" y="309" width="20.0243%" height="15" fill="rgb(252,8,32)"/><text x="68.1702%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (1,322,165 samples, 1.41%)</title><rect x="86.5372%" y="293" width="1.4073%" height="15" fill="rgb(223,20,43)"/><text x="86.7872%" y="303.50"></text></g><g><title>drop_ast (100,861 samples, 0.11%)</title><rect x="87.9445%" y="309" width="0.1074%" height="15" fill="rgb(229,81,49)"/><text x="88.1945%" y="319.50"></text></g><g><title>early_lint_checks (292,504 samples, 0.31%)</title><rect x="88.0739%" y="309" width="0.3113%" height="15" fill="rgb(236,28,36)"/><text x="88.3239%" y="319.50"></text></g><g><title>free_global_ctxt (3,743,911 samples, 3.99%)</title><rect x="88.3852%" y="309" width="3.9850%" height="15" fill="rgb(249,185,26)"/><text x="88.6352%" y="319.50">free..</text></g><g><title>dep_kind (223,882 samples, 0.24%)</title><rect x="93.3133%" y="293" width="0.2383%" height="15" fill="rgb(249,174,33)"/><text x="93.5633%" y="303.50"></text></g><g><title>is_copy_raw (303,715 samples, 0.32%)</title><rect x="95.3248%" y="245" width="0.3233%" height="15" fill="rgb(233,201,37)"/><text x="95.5748%" y="255.50"></text></g><g><title>evaluate_obligation (259,304 samples, 0.28%)</title><rect x="95.3721%" y="229" width="0.2760%" height="15" fill="rgb(221,78,26)"/><text x="95.6221%" y="239.50"></text></g><g><title>needs_drop_raw (355,125 samples, 0.38%)</title><rect x="95.2746%" y="261" width="0.3780%" height="15" fill="rgb(250,127,30)"/><text x="95.5246%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,322,525 samples, 1.41%)</title><rect x="94.3403%" y="277" width="1.4077%" height="15" fill="rgb(230,49,44)"/><text x="94.5903%" y="287.50"></text></g><g><title>optimized_mir (1,983,092 samples, 2.11%)</title><rect x="93.6397%" y="293" width="2.1108%" height="15" fill="rgb(229,67,23)"/><text x="93.8897%" y="303.50">o..</text></g><g><title>generate_crate_metadata (3,191,496 samples, 3.40%)</title><rect x="92.3702%" y="309" width="3.3970%" height="15" fill="rgb(249,83,47)"/><text x="92.6202%" y="319.50">gen..</text></g><g><title>hir_lowering (1,559,947 samples, 1.66%)</title><rect x="95.7672%" y="309" width="1.6604%" height="15" fill="rgb(215,43,3)"/><text x="96.0172%" y="319.50"></text></g><g><title>parse_crate (987,791 samples, 1.05%)</title><rect x="97.4985%" y="309" width="1.0514%" height="15" fill="rgb(238,154,13)"/><text x="97.7485%" y="319.50"></text></g><g><title>prepare_outputs (199,793 samples, 0.21%)</title><rect x="98.5564%" y="309" width="0.2127%" height="15" fill="rgb(219,56,2)"/><text x="98.8064%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (750,898 samples, 0.80%)</title><rect x="98.7691%" y="309" width="0.7993%" height="15" fill="rgb(233,0,4)"/><text x="99.0191%" y="319.50"></text></g><g><title>all (93,949,685 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (93,949,685 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (313,323 samples, 0.33%)</title><rect x="99.6665%" y="309" width="0.3335%" height="15" fill="rgb(211,146,34)"/><text x="99.9165%" y="319.50"></text></g></svg></svg>