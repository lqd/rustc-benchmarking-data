<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (361,684 samples, 0.36%)</title><rect x="8.6055%" y="197" width="0.3609%" height="15" fill="rgb(227,0,7)"/><text x="8.8555%" y="207.50"></text></g><g><title>item_attrs (312,295 samples, 0.31%)</title><rect x="9.5000%" y="165" width="0.3116%" height="15" fill="rgb(217,0,24)"/><text x="9.7500%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (301,665 samples, 0.30%)</title><rect x="9.5106%" y="149" width="0.3010%" height="15" fill="rgb(221,193,54)"/><text x="9.7606%" y="159.50"></text></g><g><title>codegen_fn_attrs (418,065 samples, 0.42%)</title><rect x="9.4134%" y="181" width="0.4171%" height="15" fill="rgb(248,212,6)"/><text x="9.6634%" y="191.50"></text></g><g><title>eval_to_const_value_raw (102,801 samples, 0.10%)</title><rect x="11.1815%" y="165" width="0.1026%" height="15" fill="rgb(208,68,35)"/><text x="11.4315%" y="175.50"></text></g><g><title>is_copy_raw (126,170 samples, 0.13%)</title><rect x="11.4556%" y="133" width="0.1259%" height="15" fill="rgb(232,128,0)"/><text x="11.7056%" y="143.50"></text></g><g><title>evaluate_obligation (101,760 samples, 0.10%)</title><rect x="11.4800%" y="117" width="0.1015%" height="15" fill="rgb(207,160,47)"/><text x="11.7300%" y="127.50"></text></g><g><title>param_env (104,950 samples, 0.10%)</title><rect x="11.5815%" y="133" width="0.1047%" height="15" fill="rgb(228,23,34)"/><text x="11.8315%" y="143.50"></text></g><g><title>adt_drop_tys (298,271 samples, 0.30%)</title><rect x="11.3913%" y="149" width="0.2976%" height="15" fill="rgb(218,30,26)"/><text x="11.6413%" y="159.50"></text></g><g><title>needs_drop_raw (864,510 samples, 0.86%)</title><rect x="11.3250%" y="165" width="0.8626%" height="15" fill="rgb(220,122,19)"/><text x="11.5750%" y="175.50"></text></g><g><title>is_copy_raw (499,778 samples, 0.50%)</title><rect x="11.6889%" y="149" width="0.4987%" height="15" fill="rgb(250,228,42)"/><text x="11.9389%" y="159.50"></text></g><g><title>evaluate_obligation (429,885 samples, 0.43%)</title><rect x="11.7586%" y="133" width="0.4289%" height="15" fill="rgb(240,193,28)"/><text x="12.0086%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (363,913 samples, 0.36%)</title><rect x="12.3375%" y="149" width="0.3631%" height="15" fill="rgb(216,20,37)"/><text x="12.5875%" y="159.50"></text></g><g><title>impl_parent (378,806 samples, 0.38%)</title><rect x="13.3860%" y="133" width="0.3780%" height="15" fill="rgb(206,188,39)"/><text x="13.6360%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (243,273 samples, 0.24%)</title><rect x="13.5212%" y="117" width="0.2427%" height="15" fill="rgb(217,207,13)"/><text x="13.7712%" y="127.50"></text></g><g><title>specialization_graph_of (2,051,825 samples, 2.05%)</title><rect x="12.7352%" y="149" width="2.0473%" height="15" fill="rgb(231,73,38)"/><text x="12.9852%" y="159.50">s..</text></g><g><title>impl_trait_ref (1,020,778 samples, 1.02%)</title><rect x="13.7640%" y="133" width="1.0185%" height="15" fill="rgb(225,20,46)"/><text x="14.0140%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (893,487 samples, 0.89%)</title><rect x="13.8910%" y="117" width="0.8915%" height="15" fill="rgb(210,31,41)"/><text x="14.1410%" y="127.50"></text></g><g><title>resolve_instance (2,645,179 samples, 2.64%)</title><rect x="12.2027%" y="165" width="2.6393%" height="15" fill="rgb(221,200,47)"/><text x="12.4527%" y="175.50">re..</text></g><g><title>thir_body (482,534 samples, 0.48%)</title><rect x="14.8591%" y="165" width="0.4815%" height="15" fill="rgb(226,26,5)"/><text x="15.1091%" y="175.50"></text></g><g><title>mir_const (7,191,606 samples, 7.18%)</title><rect x="8.1777%" y="213" width="7.1756%" height="15" fill="rgb(249,33,26)"/><text x="8.4277%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (6,401,207 samples, 6.39%)</title><rect x="8.9664%" y="197" width="6.3870%" height="15" fill="rgb(235,183,28)"/><text x="9.2164%" y="207.50">unsafety..</text></g><g><title>mir_built (5,535,107 samples, 5.52%)</title><rect x="9.8306%" y="181" width="5.5228%" height="15" fill="rgb(221,5,38)"/><text x="10.0806%" y="191.50">mir_bui..</text></g><g><title>has_structural_eq_impls (609,875 samples, 0.61%)</title><rect x="15.5026%" y="197" width="0.6085%" height="15" fill="rgb(247,18,42)"/><text x="15.7526%" y="207.50"></text></g><g><title>evaluate_obligation (470,414 samples, 0.47%)</title><rect x="15.6418%" y="181" width="0.4694%" height="15" fill="rgb(241,131,45)"/><text x="15.8918%" y="191.50"></text></g><g><title>is_freeze_raw (172,601 samples, 0.17%)</title><rect x="16.1146%" y="197" width="0.1722%" height="15" fill="rgb(249,31,29)"/><text x="16.3646%" y="207.50"></text></g><g><title>evaluate_obligation (166,621 samples, 0.17%)</title><rect x="16.1205%" y="181" width="0.1663%" height="15" fill="rgb(225,111,53)"/><text x="16.3705%" y="191.50"></text></g><g><title>needs_drop_raw (216,081 samples, 0.22%)</title><rect x="16.7616%" y="149" width="0.2156%" height="15" fill="rgb(238,160,17)"/><text x="17.0116%" y="159.50"></text></g><g><title>is_copy_raw (188,111 samples, 0.19%)</title><rect x="16.7895%" y="133" width="0.1877%" height="15" fill="rgb(214,148,48)"/><text x="17.0395%" y="143.50"></text></g><g><title>evaluate_obligation (165,181 samples, 0.16%)</title><rect x="16.8124%" y="117" width="0.1648%" height="15" fill="rgb(232,36,49)"/><text x="17.0624%" y="127.50"></text></g><g><title>thir_body (151,491 samples, 0.15%)</title><rect x="16.9795%" y="149" width="0.1512%" height="15" fill="rgb(209,103,24)"/><text x="17.2295%" y="159.50"></text></g><g><title>mir_const (842,019 samples, 0.84%)</title><rect x="16.2920%" y="197" width="0.8401%" height="15" fill="rgb(229,88,8)"/><text x="16.5420%" y="207.50"></text></g><g><title>unsafety_check_result (757,077 samples, 0.76%)</title><rect x="16.3767%" y="181" width="0.7554%" height="15" fill="rgb(213,181,19)"/><text x="16.6267%" y="191.50"></text></g><g><title>mir_built (670,256 samples, 0.67%)</title><rect x="16.4634%" y="165" width="0.6688%" height="15" fill="rgb(254,191,54)"/><text x="16.7134%" y="175.50"></text></g><g><title>mir_const_qualif (1,787,940 samples, 1.78%)</title><rect x="15.3534%" y="213" width="1.7840%" height="15" fill="rgb(241,83,37)"/><text x="15.6034%" y="223.50">m..</text></g><g><title>mir_promoted (9,489,152 samples, 9.47%)</title><rect x="7.6697%" y="229" width="9.4681%" height="15" fill="rgb(233,36,39)"/><text x="7.9197%" y="239.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (213,432 samples, 0.21%)</title><rect x="17.1423%" y="229" width="0.2130%" height="15" fill="rgb(226,3,54)"/><text x="17.3923%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (148,272 samples, 0.15%)</title><rect x="17.3552%" y="229" width="0.1479%" height="15" fill="rgb(245,192,40)"/><text x="17.6052%" y="239.50"></text></g><g><title>type_op_normalize_predicate (254,103 samples, 0.25%)</title><rect x="17.5032%" y="229" width="0.2535%" height="15" fill="rgb(238,167,29)"/><text x="17.7532%" y="239.50"></text></g><g><title>normalize_projection_ty (155,583 samples, 0.16%)</title><rect x="17.6015%" y="213" width="0.1552%" height="15" fill="rgb(232,182,51)"/><text x="17.8515%" y="223.50"></text></g><g><title>type_op_prove_predicate (1,504,283 samples, 1.50%)</title><rect x="17.7567%" y="229" width="1.5009%" height="15" fill="rgb(231,60,39)"/><text x="18.0067%" y="239.50"></text></g><g><title>MIR_borrow_checking (18,441,266 samples, 18.40%)</title><rect x="0.8619%" y="261" width="18.4003%" height="15" fill="rgb(208,69,12)"/><text x="1.1119%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,378,905 samples, 18.34%)</title><rect x="0.9242%" y="245" width="18.3380%" height="15" fill="rgb(235,93,37)"/><text x="1.1742%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (389,044 samples, 0.39%)</title><rect x="19.2622%" y="261" width="0.3882%" height="15" fill="rgb(213,116,39)"/><text x="19.5122%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (358,334 samples, 0.36%)</title><rect x="19.2928%" y="245" width="0.3575%" height="15" fill="rgb(222,207,29)"/><text x="19.5428%" y="255.50"></text></g><g><title>hir_module_items (110,301 samples, 0.11%)</title><rect x="19.6504%" y="261" width="0.1101%" height="15" fill="rgb(206,96,30)"/><text x="19.9004%" y="271.50"></text></g><g><title>should_inherit_track_caller (118,712 samples, 0.12%)</title><rect x="20.0246%" y="213" width="0.1184%" height="15" fill="rgb(218,138,4)"/><text x="20.2746%" y="223.50"></text></g><g><title>codegen_fn_attrs (250,254 samples, 0.25%)</title><rect x="19.9147%" y="229" width="0.2497%" height="15" fill="rgb(250,191,14)"/><text x="20.1647%" y="239.50"></text></g><g><title>check_mod_attrs (387,214 samples, 0.39%)</title><rect x="19.7782%" y="245" width="0.3864%" height="15" fill="rgb(239,60,40)"/><text x="20.0282%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (236,583 samples, 0.24%)</title><rect x="20.2683%" y="245" width="0.2361%" height="15" fill="rgb(206,27,48)"/><text x="20.5183%" y="255.50"></text></g><g><title>misc_checking_1 (784,518 samples, 0.78%)</title><rect x="19.7608%" y="261" width="0.7828%" height="15" fill="rgb(225,35,8)"/><text x="20.0108%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (272,493 samples, 0.27%)</title><rect x="20.5453%" y="245" width="0.2719%" height="15" fill="rgb(250,213,24)"/><text x="20.7953%" y="255.50"></text></g><g><title>check_mod_liveness (217,653 samples, 0.22%)</title><rect x="20.6000%" y="229" width="0.2172%" height="15" fill="rgb(247,123,22)"/><text x="20.8500%" y="239.50"></text></g><g><title>misc_checking_2 (651,427 samples, 0.65%)</title><rect x="20.5436%" y="261" width="0.6500%" height="15" fill="rgb(231,138,38)"/><text x="20.7936%" y="271.50"></text></g><g><title>match_checking (377,204 samples, 0.38%)</title><rect x="20.8172%" y="245" width="0.3764%" height="15" fill="rgb(231,145,46)"/><text x="21.0672%" y="255.50"></text></g><g><title>check_match (360,954 samples, 0.36%)</title><rect x="20.8334%" y="229" width="0.3602%" height="15" fill="rgb(251,118,11)"/><text x="21.0834%" y="239.50"></text></g><g><title>death_checking (226,353 samples, 0.23%)</title><rect x="21.3031%" y="245" width="0.2258%" height="15" fill="rgb(217,147,25)"/><text x="21.5531%" y="255.50"></text></g><g><title>fn_abi_of_instance (118,881 samples, 0.12%)</title><rect x="22.9318%" y="101" width="0.1186%" height="15" fill="rgb(247,81,37)"/><text x="23.1818%" y="111.50"></text></g><g><title>layout_of (188,013 samples, 0.19%)</title><rect x="23.0555%" y="101" width="0.1876%" height="15" fill="rgb(209,12,38)"/><text x="23.3055%" y="111.50"></text></g><g><title>layout_of (122,641 samples, 0.12%)</title><rect x="23.1207%" y="85" width="0.1224%" height="15" fill="rgb(227,1,9)"/><text x="23.3707%" y="95.50"></text></g><g><title>mir_for_ctfe (124,871 samples, 0.12%)</title><rect x="23.2431%" y="101" width="0.1246%" height="15" fill="rgb(248,47,43)"/><text x="23.4931%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,007,912 samples, 1.01%)</title><rect x="22.3651%" y="149" width="1.0057%" height="15" fill="rgb(221,10,30)"/><text x="22.6151%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,006,142 samples, 1.00%)</title><rect x="22.3669%" y="133" width="1.0039%" height="15" fill="rgb(210,229,1)"/><text x="22.6169%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,001,431 samples, 1.00%)</title><rect x="22.3716%" y="117" width="0.9992%" height="15" fill="rgb(222,148,37)"/><text x="22.6216%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,233,893 samples, 1.23%)</title><rect x="22.1444%" y="213" width="1.2311%" height="15" fill="rgb(234,67,33)"/><text x="22.3944%" y="223.50"></text></g><g><title>eval_to_const_value_raw (1,232,453 samples, 1.23%)</title><rect x="22.1458%" y="197" width="1.2297%" height="15" fill="rgb(247,98,35)"/><text x="22.3958%" y="207.50"></text></g><g><title>eval_to_allocation_raw (1,230,113 samples, 1.23%)</title><rect x="22.1481%" y="181" width="1.2274%" height="15" fill="rgb(247,138,52)"/><text x="22.3981%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,024,672 samples, 1.02%)</title><rect x="22.3531%" y="165" width="1.0224%" height="15" fill="rgb(213,79,30)"/><text x="22.6031%" y="175.50"></text></g><g><title>crate_lints (3,705,702 samples, 3.70%)</title><rect x="21.5309%" y="229" width="3.6975%" height="15" fill="rgb(246,177,23)"/><text x="21.7809%" y="239.50">crat..</text></g><g><title>type_of (1,764,334 samples, 1.76%)</title><rect x="23.4680%" y="213" width="1.7604%" height="15" fill="rgb(230,62,27)"/><text x="23.7180%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (1,506,991 samples, 1.50%)</title><rect x="23.7248%" y="197" width="1.5036%" height="15" fill="rgb(216,154,8)"/><text x="23.9748%" y="207.50"></text></g><g><title>lint_checking (3,952,094 samples, 3.94%)</title><rect x="21.5290%" y="245" width="3.9433%" height="15" fill="rgb(244,35,45)"/><text x="21.7790%" y="255.50">lint..</text></g><g><title>module_lints (244,422 samples, 0.24%)</title><rect x="25.2284%" y="229" width="0.2439%" height="15" fill="rgb(251,115,12)"/><text x="25.4784%" y="239.50"></text></g><g><title>lint_mod (241,642 samples, 0.24%)</title><rect x="25.2312%" y="213" width="0.2411%" height="15" fill="rgb(240,54,50)"/><text x="25.4812%" y="223.50"></text></g><g><title>privacy_access_levels (108,531 samples, 0.11%)</title><rect x="25.4723%" y="245" width="0.1083%" height="15" fill="rgb(233,84,52)"/><text x="25.7223%" y="255.50"></text></g><g><title>privacy_checking_modules (479,036 samples, 0.48%)</title><rect x="25.5806%" y="245" width="0.4780%" height="15" fill="rgb(207,117,47)"/><text x="25.8306%" y="255.50"></text></g><g><title>check_mod_privacy (477,116 samples, 0.48%)</title><rect x="25.5825%" y="229" width="0.4761%" height="15" fill="rgb(249,43,39)"/><text x="25.8325%" y="239.50"></text></g><g><title>misc_checking_3 (4,887,295 samples, 4.88%)</title><rect x="21.1936%" y="261" width="4.8764%" height="15" fill="rgb(209,38,44)"/><text x="21.4436%" y="271.50">misc_c..</text></g><g><title>impl_parent (747,789 samples, 0.75%)</title><rect x="27.1708%" y="197" width="0.7461%" height="15" fill="rgb(236,212,23)"/><text x="27.4208%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (485,246 samples, 0.48%)</title><rect x="27.4327%" y="181" width="0.4842%" height="15" fill="rgb(242,79,21)"/><text x="27.6827%" y="191.50"></text></g><g><title>impl_trait_ref (2,128,813 samples, 2.12%)</title><rect x="27.9169%" y="197" width="2.1241%" height="15" fill="rgb(211,96,35)"/><text x="28.1669%" y="207.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,867,430 samples, 1.86%)</title><rect x="28.1777%" y="181" width="1.8633%" height="15" fill="rgb(253,215,40)"/><text x="28.4277%" y="191.50">m..</text></g><g><title>coherent_trait (4,166,027 samples, 4.16%)</title><rect x="26.1289%" y="229" width="4.1568%" height="15" fill="rgb(211,81,21)"/><text x="26.3789%" y="239.50">coher..</text></g><g><title>specialization_graph_of (4,157,117 samples, 4.15%)</title><rect x="26.1377%" y="213" width="4.1479%" height="15" fill="rgb(208,190,38)"/><text x="26.3877%" y="223.50">speci..</text></g><g><title>trait_impls_of (245,182 samples, 0.24%)</title><rect x="30.0410%" y="197" width="0.2446%" height="15" fill="rgb(235,213,38)"/><text x="30.2910%" y="207.50"></text></g><g><title>coherence_checking (4,223,597 samples, 4.21%)</title><rect x="26.1111%" y="245" width="4.2142%" height="15" fill="rgb(237,122,38)"/><text x="26.3611%" y="255.50">coher..</text></g><g><title>associated_item (472,124 samples, 0.47%)</title><rect x="37.8720%" y="181" width="0.4711%" height="15" fill="rgb(244,218,35)"/><text x="38.1220%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (362,054 samples, 0.36%)</title><rect x="37.9819%" y="165" width="0.3612%" height="15" fill="rgb(240,68,47)"/><text x="38.2319%" y="175.50"></text></g><g><title>associated_items (662,295 samples, 0.66%)</title><rect x="37.7067%" y="197" width="0.6608%" height="15" fill="rgb(210,16,53)"/><text x="37.9567%" y="207.50"></text></g><g><title>adt_dtorck_constraint (160,531 samples, 0.16%)</title><rect x="38.7521%" y="133" width="0.1602%" height="15" fill="rgb(235,124,12)"/><text x="39.0021%" y="143.50"></text></g><g><title>adt_dtorck_constraint (259,422 samples, 0.26%)</title><rect x="38.6734%" y="149" width="0.2588%" height="15" fill="rgb(224,169,11)"/><text x="38.9234%" y="159.50"></text></g><g><title>adt_dtorck_constraint (350,043 samples, 0.35%)</title><rect x="38.5966%" y="165" width="0.3493%" height="15" fill="rgb(250,166,2)"/><text x="38.8466%" y="175.50"></text></g><g><title>dropck_outlives (545,217 samples, 0.54%)</title><rect x="38.4298%" y="197" width="0.5440%" height="15" fill="rgb(242,216,29)"/><text x="38.6798%" y="207.50"></text></g><g><title>adt_dtorck_constraint (465,356 samples, 0.46%)</title><rect x="38.5094%" y="181" width="0.4643%" height="15" fill="rgb(230,116,27)"/><text x="38.7594%" y="191.50"></text></g><g><title>adt_def (118,452 samples, 0.12%)</title><rect x="39.3846%" y="165" width="0.1182%" height="15" fill="rgb(228,99,48)"/><text x="39.6346%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (115,442 samples, 0.12%)</title><rect x="39.3876%" y="149" width="0.1152%" height="15" fill="rgb(253,11,6)"/><text x="39.6376%" y="159.50"></text></g><g><title>adt_def (171,361 samples, 0.17%)</title><rect x="39.5081%" y="149" width="0.1710%" height="15" fill="rgb(247,143,39)"/><text x="39.7581%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (170,251 samples, 0.17%)</title><rect x="39.5092%" y="133" width="0.1699%" height="15" fill="rgb(236,97,10)"/><text x="39.7592%" y="143.50"></text></g><g><title>adt_sized_constraint (271,811 samples, 0.27%)</title><rect x="39.5028%" y="165" width="0.2712%" height="15" fill="rgb(233,208,19)"/><text x="39.7528%" y="175.50"></text></g><g><title>adt_sized_constraint (419,973 samples, 0.42%)</title><rect x="39.3664%" y="181" width="0.4190%" height="15" fill="rgb(216,164,2)"/><text x="39.6164%" y="191.50"></text></g><g><title>evaluate_obligation (1,526,428 samples, 1.52%)</title><rect x="38.9738%" y="197" width="1.5230%" height="15" fill="rgb(220,129,5)"/><text x="39.2238%" y="207.50"></text></g><g><title>trait_impls_of (535,108 samples, 0.53%)</title><rect x="39.9629%" y="181" width="0.5339%" height="15" fill="rgb(242,17,10)"/><text x="40.2129%" y="191.50"></text></g><g><title>implementations_of_trait (173,261 samples, 0.17%)</title><rect x="40.3239%" y="165" width="0.1729%" height="15" fill="rgb(242,107,0)"/><text x="40.5739%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (112,901 samples, 0.11%)</title><rect x="40.3841%" y="149" width="0.1126%" height="15" fill="rgb(251,28,31)"/><text x="40.6341%" y="159.50"></text></g><g><title>fn_sig (116,173 samples, 0.12%)</title><rect x="40.5218%" y="197" width="0.1159%" height="15" fill="rgb(233,223,10)"/><text x="40.7718%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (102,382 samples, 0.10%)</title><rect x="40.5355%" y="181" width="0.1022%" height="15" fill="rgb(215,21,27)"/><text x="40.7855%" y="191.50"></text></g><g><title>evaluate_obligation (145,982 samples, 0.15%)</title><rect x="41.0263%" y="181" width="0.1457%" height="15" fill="rgb(232,23,21)"/><text x="41.2763%" y="191.50"></text></g><g><title>method_autoderef_steps (285,023 samples, 0.28%)</title><rect x="40.9108%" y="197" width="0.2844%" height="15" fill="rgb(244,5,23)"/><text x="41.1608%" y="207.50"></text></g><g><title>predicates_of (281,793 samples, 0.28%)</title><rect x="41.2224%" y="197" width="0.2812%" height="15" fill="rgb(226,81,46)"/><text x="41.4724%" y="207.50"></text></g><g><title>predicates_defined_on (185,932 samples, 0.19%)</title><rect x="41.3181%" y="181" width="0.1855%" height="15" fill="rgb(247,70,30)"/><text x="41.5681%" y="191.50"></text></g><g><title>associated_item (277,352 samples, 0.28%)</title><rect x="44.8616%" y="165" width="0.2767%" height="15" fill="rgb(212,68,19)"/><text x="45.1116%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (236,222 samples, 0.24%)</title><rect x="44.9026%" y="149" width="0.2357%" height="15" fill="rgb(240,187,13)"/><text x="45.1526%" y="159.50"></text></g><g><title>associated_items (382,903 samples, 0.38%)</title><rect x="44.7796%" y="181" width="0.3821%" height="15" fill="rgb(223,113,26)"/><text x="45.0296%" y="191.50"></text></g><g><title>dropck_outlives (152,392 samples, 0.15%)</title><rect x="45.1867%" y="181" width="0.1521%" height="15" fill="rgb(206,192,2)"/><text x="45.4367%" y="191.50"></text></g><g><title>evaluate_obligation (1,389,575 samples, 1.39%)</title><rect x="45.3387%" y="181" width="1.3865%" height="15" fill="rgb(241,108,4)"/><text x="45.5887%" y="191.50"></text></g><g><title>trait_impls_of (512,325 samples, 0.51%)</title><rect x="46.2140%" y="165" width="0.5112%" height="15" fill="rgb(247,173,49)"/><text x="46.4640%" y="175.50"></text></g><g><title>implementations_of_trait (176,412 samples, 0.18%)</title><rect x="46.5492%" y="149" width="0.1760%" height="15" fill="rgb(224,114,35)"/><text x="46.7992%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (120,451 samples, 0.12%)</title><rect x="46.6050%" y="133" width="0.1202%" height="15" fill="rgb(245,159,27)"/><text x="46.8550%" y="143.50"></text></g><g><title>method_autoderef_steps (148,545 samples, 0.15%)</title><rect x="47.1434%" y="181" width="0.1482%" height="15" fill="rgb(245,172,44)"/><text x="47.3934%" y="191.50"></text></g><g><title>object_safety_violations (193,543 samples, 0.19%)</title><rect x="47.2916%" y="181" width="0.1931%" height="15" fill="rgb(236,23,11)"/><text x="47.5416%" y="191.50"></text></g><g><title>explicit_predicates_of (105,261 samples, 0.11%)</title><rect x="47.6417%" y="149" width="0.1050%" height="15" fill="rgb(205,117,38)"/><text x="47.8917%" y="159.50"></text></g><g><title>predicates_of (278,112 samples, 0.28%)</title><rect x="47.4982%" y="181" width="0.2775%" height="15" fill="rgb(237,72,25)"/><text x="47.7482%" y="191.50"></text></g><g><title>predicates_defined_on (202,501 samples, 0.20%)</title><rect x="47.5737%" y="165" width="0.2021%" height="15" fill="rgb(244,70,9)"/><text x="47.8237%" y="175.50"></text></g><g><title>typeck (6,348,920 samples, 6.33%)</title><rect x="41.5753%" y="197" width="6.3348%" height="15" fill="rgb(217,125,39)"/><text x="41.8253%" y="207.50">typeck</text></g><g><title>item_bodies_checking (17,651,677 samples, 17.61%)</title><rect x="30.3408%" y="245" width="17.6124%" height="15" fill="rgb(235,36,10)"/><text x="30.5908%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,649,147 samples, 17.61%)</title><rect x="30.3433%" y="229" width="17.6099%" height="15" fill="rgb(251,123,47)"/><text x="30.5933%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (17,616,816 samples, 17.58%)</title><rect x="30.3756%" y="213" width="17.5776%" height="15" fill="rgb(221,13,13)"/><text x="30.6256%" y="223.50">typeck</text></g><g><title>impl_trait_ref (189,482 samples, 0.19%)</title><rect x="51.1907%" y="53" width="0.1891%" height="15" fill="rgb(238,131,9)"/><text x="51.4407%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (168,611 samples, 0.17%)</title><rect x="51.2115%" y="37" width="0.1682%" height="15" fill="rgb(211,50,8)"/><text x="51.4615%" y="47.50"></text></g><g><title>coherent_trait (359,474 samples, 0.36%)</title><rect x="51.0523%" y="85" width="0.3587%" height="15" fill="rgb(245,182,24)"/><text x="51.3023%" y="95.50"></text></g><g><title>specialization_graph_of (357,774 samples, 0.36%)</title><rect x="51.0540%" y="69" width="0.3570%" height="15" fill="rgb(242,14,37)"/><text x="51.3040%" y="79.50"></text></g><g><title>adt_destructor (368,275 samples, 0.37%)</title><rect x="51.0455%" y="117" width="0.3675%" height="15" fill="rgb(246,228,12)"/><text x="51.2955%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (366,585 samples, 0.37%)</title><rect x="51.0472%" y="101" width="0.3658%" height="15" fill="rgb(213,55,15)"/><text x="51.2972%" y="111.50"></text></g><g><title>adt_dtorck_constraint (384,145 samples, 0.38%)</title><rect x="51.0318%" y="133" width="0.3833%" height="15" fill="rgb(209,9,3)"/><text x="51.2818%" y="143.50"></text></g><g><title>adt_dtorck_constraint (417,315 samples, 0.42%)</title><rect x="51.0061%" y="149" width="0.4164%" height="15" fill="rgb(230,59,30)"/><text x="51.2561%" y="159.50"></text></g><g><title>adt_dtorck_constraint (425,325 samples, 0.42%)</title><rect x="50.9986%" y="165" width="0.4244%" height="15" fill="rgb(209,121,21)"/><text x="51.2486%" y="175.50"></text></g><g><title>dropck_outlives (473,145 samples, 0.47%)</title><rect x="50.9522%" y="197" width="0.4721%" height="15" fill="rgb(220,109,13)"/><text x="51.2022%" y="207.50"></text></g><g><title>adt_dtorck_constraint (430,525 samples, 0.43%)</title><rect x="50.9948%" y="181" width="0.4296%" height="15" fill="rgb(232,18,1)"/><text x="51.2448%" y="191.50"></text></g><g><title>predicates_of (159,061 samples, 0.16%)</title><rect x="51.6936%" y="197" width="0.1587%" height="15" fill="rgb(215,41,42)"/><text x="51.9436%" y="207.50"></text></g><g><title>typeck (3,758,131 samples, 3.75%)</title><rect x="48.1684%" y="213" width="3.7498%" height="15" fill="rgb(224,123,36)"/><text x="48.4184%" y="223.50">type..</text></g><g><title>item_types_checking (3,975,214 samples, 3.97%)</title><rect x="47.9533%" y="245" width="3.9664%" height="15" fill="rgb(240,125,3)"/><text x="48.2033%" y="255.50">item..</text></g><g><title>check_mod_item_types (3,972,874 samples, 3.96%)</title><rect x="47.9556%" y="229" width="3.9640%" height="15" fill="rgb(205,98,50)"/><text x="48.2056%" y="239.50">chec..</text></g><g><title>fn_sig (188,911 samples, 0.19%)</title><rect x="52.0612%" y="213" width="0.1885%" height="15" fill="rgb(205,185,37)"/><text x="52.3112%" y="223.50"></text></g><g><title>generics_of (117,821 samples, 0.12%)</title><rect x="52.2496%" y="213" width="0.1176%" height="15" fill="rgb(238,207,15)"/><text x="52.4996%" y="223.50"></text></g><g><title>predicates_of (189,291 samples, 0.19%)</title><rect x="52.3952%" y="213" width="0.1889%" height="15" fill="rgb(213,199,42)"/><text x="52.6452%" y="223.50"></text></g><g><title>predicates_defined_on (170,611 samples, 0.17%)</title><rect x="52.4138%" y="197" width="0.1702%" height="15" fill="rgb(235,201,11)"/><text x="52.6638%" y="207.50"></text></g><g><title>named_region_map (131,262 samples, 0.13%)</title><rect x="52.6929%" y="197" width="0.1310%" height="15" fill="rgb(207,46,11)"/><text x="52.9429%" y="207.50"></text></g><g><title>resolve_lifetimes (121,172 samples, 0.12%)</title><rect x="52.7030%" y="181" width="0.1209%" height="15" fill="rgb(241,35,35)"/><text x="52.9530%" y="191.50"></text></g><g><title>type_collecting (912,160 samples, 0.91%)</title><rect x="51.9211%" y="245" width="0.9101%" height="15" fill="rgb(243,32,47)"/><text x="52.1711%" y="255.50"></text></g><g><title>collect_mod_item_types (899,979 samples, 0.90%)</title><rect x="51.9333%" y="229" width="0.8980%" height="15" fill="rgb(247,202,23)"/><text x="52.1833%" y="239.50"></text></g><g><title>type_of (247,753 samples, 0.25%)</title><rect x="52.5841%" y="213" width="0.2472%" height="15" fill="rgb(219,102,11)"/><text x="52.8341%" y="223.50"></text></g><g><title>evaluate_obligation (125,193 samples, 0.12%)</title><rect x="53.2539%" y="213" width="0.1249%" height="15" fill="rgb(243,110,44)"/><text x="53.5039%" y="223.50"></text></g><g><title>check_impl_item_well_formed (793,160 samples, 0.79%)</title><rect x="52.8944%" y="229" width="0.7914%" height="15" fill="rgb(222,74,54)"/><text x="53.1444%" y="239.50"></text></g><g><title>region_scope_tree (129,381 samples, 0.13%)</title><rect x="53.5567%" y="213" width="0.1291%" height="15" fill="rgb(216,99,12)"/><text x="53.8067%" y="223.50"></text></g><g><title>adt_def (121,731 samples, 0.12%)</title><rect x="54.4223%" y="181" width="0.1215%" height="15" fill="rgb(226,22,26)"/><text x="54.6723%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (119,841 samples, 0.12%)</title><rect x="54.4242%" y="165" width="0.1196%" height="15" fill="rgb(217,163,10)"/><text x="54.6742%" y="175.50"></text></g><g><title>adt_sized_constraint (243,072 samples, 0.24%)</title><rect x="54.4118%" y="197" width="0.2425%" height="15" fill="rgb(213,25,53)"/><text x="54.6618%" y="207.50"></text></g><g><title>evaluate_obligation (672,218 samples, 0.67%)</title><rect x="54.1020%" y="213" width="0.6707%" height="15" fill="rgb(252,105,26)"/><text x="54.3520%" y="223.50"></text></g><g><title>param_env (154,981 samples, 0.15%)</title><rect x="54.8080%" y="213" width="0.1546%" height="15" fill="rgb(220,39,43)"/><text x="55.0580%" y="223.50"></text></g><g><title>analysis (54,582,859 samples, 54.46%)</title><rect x="0.6526%" y="277" width="54.4615%" height="15" fill="rgb(229,68,48)"/><text x="0.9026%" y="287.50">analysis</text></g><g><title>type_check_crate (29,108,785 samples, 29.04%)</title><rect x="26.0700%" y="261" width="29.0441%" height="15" fill="rgb(252,8,32)"/><text x="26.3200%" y="271.50">type_check_crate</text></g><g><title>wf_checking (2,285,266 samples, 2.28%)</title><rect x="52.8339%" y="245" width="2.2802%" height="15" fill="rgb(223,20,43)"/><text x="53.0839%" y="255.50">w..</text></g><g><title>check_item_well_formed (1,431,466 samples, 1.43%)</title><rect x="53.6858%" y="229" width="1.4283%" height="15" fill="rgb(229,81,49)"/><text x="53.9358%" y="239.50"></text></g><g><title>codegen_crate (576,726 samples, 0.58%)</title><rect x="55.1265%" y="277" width="0.5754%" height="15" fill="rgb(236,28,36)"/><text x="55.3765%" y="287.50"></text></g><g><title>AST_validation (247,802 samples, 0.25%)</title><rect x="55.9402%" y="261" width="0.2473%" height="15" fill="rgb(249,185,26)"/><text x="56.1902%" y="271.50"></text></g><g><title>metadata_load_macro (268,243 samples, 0.27%)</title><rect x="78.2418%" y="229" width="0.2676%" height="15" fill="rgb(249,174,33)"/><text x="78.4918%" y="239.50"></text></g><g><title>macro_expand_crate (27,123,782 samples, 27.06%)</title><rect x="56.3589%" y="261" width="27.0635%" height="15" fill="rgb(233,201,37)"/><text x="56.6089%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (27,105,931 samples, 27.05%)</title><rect x="56.3767%" y="245" width="27.0457%" height="15" fill="rgb(221,78,26)"/><text x="56.6267%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (4,923,874 samples, 4.91%)</title><rect x="78.5094%" y="229" width="4.9129%" height="15" fill="rgb(250,127,30)"/><text x="78.7594%" y="239.50">metada..</text></g><g><title>metadata_register_crate (2,006,522 samples, 2.00%)</title><rect x="81.4203%" y="213" width="2.0021%" height="15" fill="rgb(230,49,44)"/><text x="81.6703%" y="223.50">m..</text></g><g><title>metadata_register_crate (121,980 samples, 0.12%)</title><rect x="83.3007%" y="197" width="0.1217%" height="15" fill="rgb(229,67,23)"/><text x="83.5507%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (272,023 samples, 0.27%)</title><rect x="83.4278%" y="261" width="0.2714%" height="15" fill="rgb(249,83,47)"/><text x="83.6778%" y="271.50"></text></g><g><title>finalize_macro_resolutions (231,483 samples, 0.23%)</title><rect x="83.7914%" y="245" width="0.2310%" height="15" fill="rgb(215,43,3)"/><text x="84.0414%" y="255.50"></text></g><g><title>late_resolve_crate (3,331,717 samples, 3.32%)</title><rect x="84.0224%" y="245" width="3.3243%" height="15" fill="rgb(238,154,13)"/><text x="84.2724%" y="255.50">lat..</text></g><g><title>configure_and_expand (31,819,314 samples, 31.75%)</title><rect x="55.7019%" y="277" width="31.7486%" height="15" fill="rgb(219,56,2)"/><text x="55.9519%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (3,759,573 samples, 3.75%)</title><rect x="83.6993%" y="261" width="3.7512%" height="15" fill="rgb(233,0,4)"/><text x="83.9493%" y="271.50">reso..</text></g><g><title>drop_ast (116,382 samples, 0.12%)</title><rect x="87.4505%" y="277" width="0.1161%" height="15" fill="rgb(235,30,7)"/><text x="87.7005%" y="287.50"></text></g><g><title>early_lint_checks (218,902 samples, 0.22%)</title><rect x="87.5853%" y="277" width="0.2184%" height="15" fill="rgb(250,79,13)"/><text x="87.8353%" y="287.50"></text></g><g><title>free_global_ctxt (3,360,647 samples, 3.35%)</title><rect x="87.8038%" y="277" width="3.3532%" height="15" fill="rgb(211,146,34)"/><text x="88.0538%" y="287.50">fre..</text></g><g><title>generate_crate_metadata (1,178,973 samples, 1.18%)</title><rect x="91.1569%" y="277" width="1.1764%" height="15" fill="rgb(228,22,38)"/><text x="91.4069%" y="287.50"></text></g><g><title>hir_lowering (2,192,464 samples, 2.19%)</title><rect x="92.3333%" y="277" width="2.1876%" height="15" fill="rgb(235,168,5)"/><text x="92.5833%" y="287.50">h..</text></g><g><title>parse_crate (4,071,585 samples, 4.06%)</title><rect x="94.5706%" y="277" width="4.0625%" height="15" fill="rgb(221,155,16)"/><text x="94.8206%" y="287.50">pars..</text></g><g><title>prepare_outputs (265,073 samples, 0.26%)</title><rect x="98.6431%" y="277" width="0.2645%" height="15" fill="rgb(215,215,53)"/><text x="98.8931%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (619,646 samples, 0.62%)</title><rect x="98.9076%" y="277" width="0.6183%" height="15" fill="rgb(223,4,10)"/><text x="99.1576%" y="287.50"></text></g><g><title>setup_global_ctxt (103,911 samples, 0.10%)</title><rect x="99.5377%" y="277" width="0.1037%" height="15" fill="rgb(234,103,6)"/><text x="99.7877%" y="287.50"></text></g><g><title>all (100,222,826 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (100,222,826 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (359,444 samples, 0.36%)</title><rect x="99.6414%" y="277" width="0.3586%" height="15" fill="rgb(228,201,54)"/><text x="99.8914%" y="287.50"></text></g></svg></svg>