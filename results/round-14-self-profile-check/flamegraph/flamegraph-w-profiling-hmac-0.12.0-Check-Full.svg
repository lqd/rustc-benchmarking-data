<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (88,620 samples, 0.10%)</title><rect x="7.3424%" y="165" width="0.1034%" height="15" fill="rgb(227,0,7)"/><text x="7.5924%" y="175.50"></text></g><g><title>param_env (331,514 samples, 0.39%)</title><rect x="8.2568%" y="133" width="0.3867%" height="15" fill="rgb(217,0,24)"/><text x="8.5068%" y="143.50"></text></g><g><title>item_attrs (126,503 samples, 0.15%)</title><rect x="8.9316%" y="101" width="0.1475%" height="15" fill="rgb(221,193,54)"/><text x="9.1816%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (121,033 samples, 0.14%)</title><rect x="8.9380%" y="85" width="0.1412%" height="15" fill="rgb(248,212,6)"/><text x="9.1880%" y="95.50"></text></g><g><title>codegen_fn_attrs (195,104 samples, 0.23%)</title><rect x="8.8676%" y="117" width="0.2276%" height="15" fill="rgb(208,68,35)"/><text x="9.1176%" y="127.50"></text></g><g><title>impl_polarity (254,363 samples, 0.30%)</title><rect x="10.4749%" y="37" width="0.2967%" height="15" fill="rgb(232,128,0)"/><text x="10.7249%" y="47.50"></text></g><g><title>is_copy_raw (353,845 samples, 0.41%)</title><rect x="10.3758%" y="69" width="0.4127%" height="15" fill="rgb(207,160,47)"/><text x="10.6258%" y="79.50"></text></g><g><title>evaluate_obligation (340,615 samples, 0.40%)</title><rect x="10.3913%" y="53" width="0.3973%" height="15" fill="rgb(228,23,34)"/><text x="10.6413%" y="63.50"></text></g><g><title>adt_drop_tys (481,966 samples, 0.56%)</title><rect x="10.2763%" y="85" width="0.5621%" height="15" fill="rgb(218,30,26)"/><text x="10.5263%" y="95.50"></text></g><g><title>is_copy_raw (589,849 samples, 0.69%)</title><rect x="10.8384%" y="85" width="0.6880%" height="15" fill="rgb(220,122,19)"/><text x="11.0884%" y="95.50"></text></g><g><title>evaluate_obligation (537,797 samples, 0.63%)</title><rect x="10.8991%" y="69" width="0.6273%" height="15" fill="rgb(250,228,42)"/><text x="11.1491%" y="79.50"></text></g><g><title>needs_drop_raw (1,141,965 samples, 1.33%)</title><rect x="10.2048%" y="101" width="1.3320%" height="15" fill="rgb(240,193,28)"/><text x="10.4548%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (339,285 samples, 0.40%)</title><rect x="11.7143%" y="85" width="0.3957%" height="15" fill="rgb(216,20,37)"/><text x="11.9643%" y="95.50"></text></g><g><title>impl_parent (196,730 samples, 0.23%)</title><rect x="12.5090%" y="69" width="0.2295%" height="15" fill="rgb(206,188,39)"/><text x="12.7590%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (125,710 samples, 0.15%)</title><rect x="12.5919%" y="53" width="0.1466%" height="15" fill="rgb(217,207,13)"/><text x="12.8419%" y="63.50"></text></g><g><title>specialization_graph_of (935,198 samples, 1.09%)</title><rect x="12.1557%" y="85" width="1.0908%" height="15" fill="rgb(231,73,38)"/><text x="12.4057%" y="95.50"></text></g><g><title>impl_trait_ref (435,574 samples, 0.51%)</title><rect x="12.7385%" y="69" width="0.5080%" height="15" fill="rgb(225,20,46)"/><text x="12.9885%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (365,864 samples, 0.43%)</title><rect x="12.8198%" y="53" width="0.4267%" height="15" fill="rgb(210,31,41)"/><text x="13.0698%" y="63.50"></text></g><g><title>resolve_instance (1,529,659 samples, 1.78%)</title><rect x="11.5368%" y="101" width="1.7841%" height="15" fill="rgb(221,200,47)"/><text x="11.7868%" y="111.50">r..</text></g><g><title>thir_body (364,074 samples, 0.42%)</title><rect x="13.3323%" y="101" width="0.4246%" height="15" fill="rgb(226,26,5)"/><text x="13.5823%" y="111.50"></text></g><g><title>mir_const (5,100,925 samples, 5.95%)</title><rect x="7.8493%" y="149" width="5.9496%" height="15" fill="rgb(249,33,26)"/><text x="8.0993%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (4,420,069 samples, 5.16%)</title><rect x="8.6435%" y="133" width="5.1554%" height="15" fill="rgb(235,183,28)"/><text x="8.8935%" y="143.50">unsafe..</text></g><g><title>mir_built (4,032,794 samples, 4.70%)</title><rect x="9.0952%" y="117" width="4.7037%" height="15" fill="rgb(221,5,38)"/><text x="9.3452%" y="127.50">mir_b..</text></g><g><title>mir_promoted (5,518,761 samples, 6.44%)</title><rect x="7.4458%" y="165" width="6.4369%" height="15" fill="rgb(247,18,42)"/><text x="7.6958%" y="175.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (312,365 samples, 0.36%)</title><rect x="13.8827%" y="165" width="0.3643%" height="15" fill="rgb(241,131,45)"/><text x="14.1327%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (489,036 samples, 0.57%)</title><rect x="14.2470%" y="165" width="0.5704%" height="15" fill="rgb(249,31,29)"/><text x="14.4970%" y="175.50"></text></g><g><title>normalize_projection_ty (264,443 samples, 0.31%)</title><rect x="14.5089%" y="149" width="0.3084%" height="15" fill="rgb(225,111,53)"/><text x="14.7589%" y="159.50"></text></g><g><title>type_op_normalize_predicate (134,791 samples, 0.16%)</title><rect x="14.8174%" y="165" width="0.1572%" height="15" fill="rgb(238,160,17)"/><text x="15.0674%" y="175.50"></text></g><g><title>type_op_normalize_ty (402,835 samples, 0.47%)</title><rect x="14.9746%" y="165" width="0.4699%" height="15" fill="rgb(214,148,48)"/><text x="15.2246%" y="175.50"></text></g><g><title>normalize_projection_ty (224,972 samples, 0.26%)</title><rect x="15.1821%" y="149" width="0.2624%" height="15" fill="rgb(232,36,49)"/><text x="15.4321%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,455,027 samples, 1.70%)</title><rect x="15.4445%" y="165" width="1.6971%" height="15" fill="rgb(209,103,24)"/><text x="15.6945%" y="175.50"></text></g><g><title>MIR_borrow_checking (13,419,779 samples, 15.65%)</title><rect x="1.4923%" y="197" width="15.6524%" height="15" fill="rgb(229,88,8)"/><text x="1.7423%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,385,309 samples, 15.61%)</title><rect x="1.5325%" y="181" width="15.6122%" height="15" fill="rgb(213,181,19)"/><text x="1.7825%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (136,542 samples, 0.16%)</title><rect x="17.1447%" y="197" width="0.1593%" height="15" fill="rgb(254,191,54)"/><text x="17.3947%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (109,011 samples, 0.13%)</title><rect x="17.1768%" y="181" width="0.1271%" height="15" fill="rgb(241,83,37)"/><text x="17.4268%" y="191.50"></text></g><g><title>hir_module_items (255,023 samples, 0.30%)</title><rect x="17.3040%" y="197" width="0.2975%" height="15" fill="rgb(233,36,39)"/><text x="17.5540%" y="207.50"></text></g><g><title>get_lang_items (113,962 samples, 0.13%)</title><rect x="18.0443%" y="149" width="0.1329%" height="15" fill="rgb(226,3,54)"/><text x="18.2943%" y="159.50"></text></g><g><title>codegen_fn_attrs (136,671 samples, 0.16%)</title><rect x="18.3016%" y="133" width="0.1594%" height="15" fill="rgb(245,192,40)"/><text x="18.5516%" y="143.50"></text></g><g><title>should_inherit_track_caller (248,972 samples, 0.29%)</title><rect x="18.1772%" y="149" width="0.2904%" height="15" fill="rgb(238,167,29)"/><text x="18.4272%" y="159.50"></text></g><g><title>codegen_fn_attrs (504,346 samples, 0.59%)</title><rect x="17.9210%" y="165" width="0.5883%" height="15" fill="rgb(232,182,51)"/><text x="18.1710%" y="175.50"></text></g><g><title>check_mod_attrs (733,989 samples, 0.86%)</title><rect x="17.6534%" y="181" width="0.8561%" height="15" fill="rgb(231,60,39)"/><text x="17.9034%" y="191.50"></text></g><g><title>check_mod_const_bodies (118,661 samples, 0.14%)</title><rect x="18.5095%" y="181" width="0.1384%" height="15" fill="rgb(208,69,12)"/><text x="18.7595%" y="191.50"></text></g><g><title>lookup_deprecation_entry (208,943 samples, 0.24%)</title><rect x="18.9909%" y="165" width="0.2437%" height="15" fill="rgb(235,93,37)"/><text x="19.2409%" y="175.50"></text></g><g><title>stability_index (120,441 samples, 0.14%)</title><rect x="19.0941%" y="149" width="0.1405%" height="15" fill="rgb(213,116,39)"/><text x="19.3441%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (470,255 samples, 0.55%)</title><rect x="18.7583%" y="181" width="0.5485%" height="15" fill="rgb(222,207,29)"/><text x="19.0083%" y="191.50"></text></g><g><title>misc_checking_1 (1,552,898 samples, 1.81%)</title><rect x="17.6020%" y="197" width="1.8113%" height="15" fill="rgb(206,96,30)"/><text x="17.8520%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (195,362 samples, 0.23%)</title><rect x="19.4152%" y="181" width="0.2279%" height="15" fill="rgb(218,138,4)"/><text x="19.6652%" y="191.50"></text></g><g><title>check_mod_liveness (151,482 samples, 0.18%)</title><rect x="19.4664%" y="165" width="0.1767%" height="15" fill="rgb(250,191,14)"/><text x="19.7164%" y="175.50"></text></g><g><title>misc_checking_2 (419,245 samples, 0.49%)</title><rect x="19.4133%" y="197" width="0.4890%" height="15" fill="rgb(239,60,40)"/><text x="19.6633%" y="207.50"></text></g><g><title>match_checking (222,223 samples, 0.26%)</title><rect x="19.6431%" y="181" width="0.2592%" height="15" fill="rgb(206,27,48)"/><text x="19.8931%" y="191.50"></text></g><g><title>check_match (208,893 samples, 0.24%)</title><rect x="19.6586%" y="165" width="0.2436%" height="15" fill="rgb(225,35,8)"/><text x="19.9086%" y="175.50"></text></g><g><title>check_private_in_public (135,062 samples, 0.16%)</title><rect x="19.9129%" y="181" width="0.1575%" height="15" fill="rgb(250,213,24)"/><text x="20.1629%" y="191.50"></text></g><g><title>death_checking (257,913 samples, 0.30%)</title><rect x="20.0704%" y="181" width="0.3008%" height="15" fill="rgb(247,123,22)"/><text x="20.3204%" y="191.50"></text></g><g><title>eval_to_const_value_raw (138,501 samples, 0.16%)</title><rect x="20.8842%" y="149" width="0.1615%" height="15" fill="rgb(231,138,38)"/><text x="21.1342%" y="159.50"></text></g><g><title>eval_to_const_value_raw (130,361 samples, 0.15%)</title><rect x="20.8937%" y="133" width="0.1520%" height="15" fill="rgb(231,145,46)"/><text x="21.1437%" y="143.50"></text></g><g><title>eval_to_allocation_raw (123,601 samples, 0.14%)</title><rect x="20.9016%" y="117" width="0.1442%" height="15" fill="rgb(251,118,11)"/><text x="21.1516%" y="127.50"></text></g><g><title>param_env (340,935 samples, 0.40%)</title><rect x="21.0458%" y="149" width="0.3977%" height="15" fill="rgb(217,147,25)"/><text x="21.2958%" y="159.50"></text></g><g><title>predicates_of (158,451 samples, 0.18%)</title><rect x="21.2586%" y="133" width="0.1848%" height="15" fill="rgb(247,81,37)"/><text x="21.5086%" y="143.50"></text></g><g><title>predicates_defined_on (129,621 samples, 0.15%)</title><rect x="21.2922%" y="117" width="0.1512%" height="15" fill="rgb(209,12,38)"/><text x="21.5422%" y="127.50"></text></g><g><title>crate_lints (1,330,345 samples, 1.55%)</title><rect x="20.3731%" y="165" width="1.5517%" height="15" fill="rgb(227,1,9)"/><text x="20.6231%" y="175.50"></text></g><g><title>type_of (412,665 samples, 0.48%)</title><rect x="21.4434%" y="149" width="0.4813%" height="15" fill="rgb(248,47,43)"/><text x="21.6934%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (318,483 samples, 0.37%)</title><rect x="21.5533%" y="133" width="0.3715%" height="15" fill="rgb(221,10,30)"/><text x="21.8033%" y="143.50"></text></g><g><title>lint_checking (1,483,006 samples, 1.73%)</title><rect x="20.3712%" y="181" width="1.7297%" height="15" fill="rgb(210,229,1)"/><text x="20.6212%" y="191.50"></text></g><g><title>module_lints (151,081 samples, 0.18%)</title><rect x="21.9247%" y="165" width="0.1762%" height="15" fill="rgb(222,148,37)"/><text x="22.1747%" y="175.50"></text></g><g><title>lint_mod (148,081 samples, 0.17%)</title><rect x="21.9282%" y="149" width="0.1727%" height="15" fill="rgb(234,67,33)"/><text x="22.1782%" y="159.50"></text></g><g><title>privacy_access_levels (187,442 samples, 0.22%)</title><rect x="22.1009%" y="181" width="0.2186%" height="15" fill="rgb(247,98,35)"/><text x="22.3509%" y="191.50"></text></g><g><title>privacy_checking_modules (642,207 samples, 0.75%)</title><rect x="22.3196%" y="181" width="0.7490%" height="15" fill="rgb(247,138,52)"/><text x="22.5696%" y="191.50"></text></g><g><title>check_mod_privacy (639,777 samples, 0.75%)</title><rect x="22.3224%" y="165" width="0.7462%" height="15" fill="rgb(213,79,30)"/><text x="22.5724%" y="175.50"></text></g><g><title>misc_checking_3 (2,725,090 samples, 3.18%)</title><rect x="19.9023%" y="197" width="3.1785%" height="15" fill="rgb(246,177,23)"/><text x="20.1523%" y="207.50">mis..</text></g><g><title>impl_parent (1,049,194 samples, 1.22%)</title><rect x="26.1553%" y="133" width="1.2237%" height="15" fill="rgb(230,62,27)"/><text x="26.4053%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (588,077 samples, 0.69%)</title><rect x="26.6931%" y="117" width="0.6859%" height="15" fill="rgb(216,154,8)"/><text x="26.9431%" y="127.50"></text></g><g><title>impl_trait_ref (2,885,372 samples, 3.37%)</title><rect x="27.3790%" y="133" width="3.3654%" height="15" fill="rgb(244,35,45)"/><text x="27.6290%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,438,765 samples, 2.84%)</title><rect x="27.8999%" y="117" width="2.8445%" height="15" fill="rgb(251,115,12)"/><text x="28.1499%" y="127.50">me..</text></g><g><title>trait_impls_of (542,307 samples, 0.63%)</title><rect x="30.8496%" y="133" width="0.6325%" height="15" fill="rgb(240,54,50)"/><text x="31.0996%" y="143.50"></text></g><g><title>implementations_of_trait (173,831 samples, 0.20%)</title><rect x="31.2794%" y="117" width="0.2028%" height="15" fill="rgb(233,84,52)"/><text x="31.5294%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (95,261 samples, 0.11%)</title><rect x="31.3710%" y="101" width="0.1111%" height="15" fill="rgb(207,117,47)"/><text x="31.6210%" y="111.50"></text></g><g><title>coherent_trait (7,114,480 samples, 8.30%)</title><rect x="23.1871%" y="165" width="8.2981%" height="15" fill="rgb(249,43,39)"/><text x="23.4371%" y="175.50">coherent_tra..</text></g><g><title>specialization_graph_of (7,079,460 samples, 8.26%)</title><rect x="23.2280%" y="149" width="8.2573%" height="15" fill="rgb(209,38,44)"/><text x="23.4780%" y="159.50">specializat..</text></g><g><title>coherence_checking (7,241,621 samples, 8.45%)</title><rect x="23.1481%" y="181" width="8.4464%" height="15" fill="rgb(236,212,23)"/><text x="23.3981%" y="191.50">coherence_ch..</text></g><g><title>adt_sized_constraint (93,911 samples, 0.11%)</title><rect x="41.3704%" y="133" width="0.1095%" height="15" fill="rgb(242,79,21)"/><text x="41.6204%" y="143.50"></text></g><g><title>associated_item (465,077 samples, 0.54%)</title><rect x="41.5719%" y="117" width="0.5425%" height="15" fill="rgb(211,96,35)"/><text x="41.8219%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (419,687 samples, 0.49%)</title><rect x="41.6249%" y="101" width="0.4895%" height="15" fill="rgb(253,215,40)"/><text x="41.8749%" y="111.50"></text></g><g><title>associated_items (553,937 samples, 0.65%)</title><rect x="41.4890%" y="133" width="0.6461%" height="15" fill="rgb(211,81,21)"/><text x="41.7390%" y="143.50"></text></g><g><title>adt_dtorck_constraint (154,882 samples, 0.18%)</title><rect x="42.3327%" y="117" width="0.1806%" height="15" fill="rgb(208,190,38)"/><text x="42.5827%" y="127.50"></text></g><g><title>dropck_outlives (343,643 samples, 0.40%)</title><rect x="42.1892%" y="133" width="0.4008%" height="15" fill="rgb(235,213,38)"/><text x="42.4392%" y="143.50"></text></g><g><title>predicates_of (107,321 samples, 0.13%)</title><rect x="43.5056%" y="117" width="0.1252%" height="15" fill="rgb(237,122,38)"/><text x="43.7556%" y="127.50"></text></g><g><title>trait_impls_of (286,650 samples, 0.33%)</title><rect x="43.7239%" y="117" width="0.3343%" height="15" fill="rgb(244,218,35)"/><text x="43.9739%" y="127.50"></text></g><g><title>implementations_of_trait (93,730 samples, 0.11%)</title><rect x="43.9490%" y="101" width="0.1093%" height="15" fill="rgb(240,68,47)"/><text x="44.1990%" y="111.50"></text></g><g><title>evaluate_obligation (1,263,690 samples, 1.47%)</title><rect x="42.5900%" y="133" width="1.4739%" height="15" fill="rgb(210,16,53)"/><text x="42.8400%" y="143.50"></text></g><g><title>fn_sig (87,212 samples, 0.10%)</title><rect x="44.0966%" y="133" width="0.1017%" height="15" fill="rgb(235,124,12)"/><text x="44.3466%" y="143.50"></text></g><g><title>impl_trait_ref (136,061 samples, 0.16%)</title><rect x="44.3774%" y="133" width="0.1587%" height="15" fill="rgb(224,169,11)"/><text x="44.6274%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (123,451 samples, 0.14%)</title><rect x="44.3921%" y="117" width="0.1440%" height="15" fill="rgb(250,166,2)"/><text x="44.6421%" y="127.50"></text></g><g><title>evaluate_obligation (146,343 samples, 0.17%)</title><rect x="44.8952%" y="117" width="0.1707%" height="15" fill="rgb(242,216,29)"/><text x="45.1452%" y="127.50"></text></g><g><title>method_autoderef_steps (342,025 samples, 0.40%)</title><rect x="44.6794%" y="133" width="0.3989%" height="15" fill="rgb(230,116,27)"/><text x="44.9294%" y="143.50"></text></g><g><title>object_safety_violations (133,022 samples, 0.16%)</title><rect x="45.0783%" y="133" width="0.1552%" height="15" fill="rgb(228,99,48)"/><text x="45.3283%" y="143.50"></text></g><g><title>explicit_predicates_of (182,542 samples, 0.21%)</title><rect x="45.4493%" y="101" width="0.2129%" height="15" fill="rgb(253,11,6)"/><text x="45.6993%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (164,012 samples, 0.19%)</title><rect x="45.4709%" y="85" width="0.1913%" height="15" fill="rgb(247,143,39)"/><text x="45.7209%" y="95.50"></text></g><g><title>predicates_of (378,904 samples, 0.44%)</title><rect x="45.2604%" y="133" width="0.4419%" height="15" fill="rgb(236,97,10)"/><text x="45.5104%" y="143.50"></text></g><g><title>predicates_defined_on (288,942 samples, 0.34%)</title><rect x="45.3653%" y="117" width="0.3370%" height="15" fill="rgb(233,208,19)"/><text x="45.6153%" y="127.50"></text></g><g><title>evaluate_obligation (113,752 samples, 0.13%)</title><rect x="47.2809%" y="117" width="0.1327%" height="15" fill="rgb(216,164,2)"/><text x="47.5309%" y="127.50"></text></g><g><title>lint_levels (102,271 samples, 0.12%)</title><rect x="47.4867%" y="117" width="0.1193%" height="15" fill="rgb(220,129,5)"/><text x="47.7367%" y="127.50"></text></g><g><title>typeck (1,592,368 samples, 1.86%)</title><rect x="45.8341%" y="133" width="1.8573%" height="15" fill="rgb(242,17,10)"/><text x="46.0841%" y="143.50">t..</text></g><g><title>item_bodies_checking (13,760,754 samples, 16.05%)</title><rect x="31.6673%" y="181" width="16.0501%" height="15" fill="rgb(242,107,0)"/><text x="31.9173%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,758,074 samples, 16.05%)</title><rect x="31.6704%" y="165" width="16.0470%" height="15" fill="rgb(251,28,31)"/><text x="31.9204%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (13,734,994 samples, 16.02%)</title><rect x="31.6973%" y="149" width="16.0201%" height="15" fill="rgb(233,223,10)"/><text x="31.9473%" y="159.50">typeck</text></g><g><title>adt_destructor (181,472 samples, 0.21%)</title><rect x="49.4556%" y="149" width="0.2117%" height="15" fill="rgb(215,21,27)"/><text x="49.7056%" y="159.50"></text></g><g><title>coherent_trait (177,882 samples, 0.21%)</title><rect x="49.4598%" y="133" width="0.2075%" height="15" fill="rgb(232,23,21)"/><text x="49.7098%" y="143.50"></text></g><g><title>specialization_graph_of (176,612 samples, 0.21%)</title><rect x="49.4612%" y="117" width="0.2060%" height="15" fill="rgb(244,5,23)"/><text x="49.7112%" y="127.50"></text></g><g><title>item_types_checking (1,951,321 samples, 2.28%)</title><rect x="47.7174%" y="181" width="2.2760%" height="15" fill="rgb(226,81,46)"/><text x="47.9674%" y="191.50">i..</text></g><g><title>check_mod_item_types (1,947,771 samples, 2.27%)</title><rect x="47.7215%" y="165" width="2.2718%" height="15" fill="rgb(247,70,30)"/><text x="47.9715%" y="175.50">c..</text></g><g><title>fn_sig (257,291 samples, 0.30%)</title><rect x="50.3890%" y="149" width="0.3001%" height="15" fill="rgb(212,68,19)"/><text x="50.6390%" y="159.50"></text></g><g><title>type_of (96,741 samples, 0.11%)</title><rect x="50.5762%" y="133" width="0.1128%" height="15" fill="rgb(240,187,13)"/><text x="50.8262%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (91,011 samples, 0.11%)</title><rect x="50.5829%" y="117" width="0.1062%" height="15" fill="rgb(223,113,26)"/><text x="50.8329%" y="127.50"></text></g><g><title>named_region_map (102,741 samples, 0.12%)</title><rect x="50.8578%" y="133" width="0.1198%" height="15" fill="rgb(206,192,2)"/><text x="51.1078%" y="143.50"></text></g><g><title>generics_of (266,021 samples, 0.31%)</title><rect x="50.6891%" y="149" width="0.3103%" height="15" fill="rgb(241,108,4)"/><text x="50.9391%" y="159.50"></text></g><g><title>late_bound_vars_map (651,487 samples, 0.76%)</title><rect x="52.3579%" y="101" width="0.7599%" height="15" fill="rgb(247,173,49)"/><text x="52.6079%" y="111.50"></text></g><g><title>resolve_lifetimes (616,687 samples, 0.72%)</title><rect x="52.3985%" y="85" width="0.7193%" height="15" fill="rgb(224,114,35)"/><text x="52.6485%" y="95.50"></text></g><g><title>explicit_predicates_of (2,015,501 samples, 2.35%)</title><rect x="51.2605%" y="117" width="2.3508%" height="15" fill="rgb(245,159,27)"/><text x="51.5105%" y="127.50">e..</text></g><g><title>type_param_predicates (341,525 samples, 0.40%)</title><rect x="53.2130%" y="101" width="0.3983%" height="15" fill="rgb(245,172,44)"/><text x="53.4630%" y="111.50"></text></g><g><title>predicates_of (2,302,696 samples, 2.69%)</title><rect x="51.0908%" y="149" width="2.6858%" height="15" fill="rgb(236,23,11)"/><text x="51.3408%" y="159.50">pr..</text></g><g><title>predicates_defined_on (2,252,183 samples, 2.63%)</title><rect x="51.1497%" y="133" width="2.6269%" height="15" fill="rgb(205,117,38)"/><text x="51.3997%" y="143.50">pr..</text></g><g><title>inferred_outlives_of (141,642 samples, 0.17%)</title><rect x="53.6113%" y="117" width="0.1652%" height="15" fill="rgb(237,72,25)"/><text x="53.8613%" y="127.50"></text></g><g><title>inferred_outlives_crate (116,601 samples, 0.14%)</title><rect x="53.6405%" y="101" width="0.1360%" height="15" fill="rgb(244,70,9)"/><text x="53.8905%" y="111.50"></text></g><g><title>type_collecting (3,511,228 samples, 4.10%)</title><rect x="49.9986%" y="181" width="4.0954%" height="15" fill="rgb(217,125,39)"/><text x="50.2486%" y="191.50">type..</text></g><g><title>collect_mod_item_types (3,495,698 samples, 4.08%)</title><rect x="50.0167%" y="165" width="4.0773%" height="15" fill="rgb(235,36,10)"/><text x="50.2667%" y="175.50">coll..</text></g><g><title>type_of (272,145 samples, 0.32%)</title><rect x="53.7765%" y="149" width="0.3174%" height="15" fill="rgb(251,123,47)"/><text x="54.0265%" y="159.50"></text></g><g><title>evaluate_obligation (331,832 samples, 0.39%)</title><rect x="56.3818%" y="149" width="0.3870%" height="15" fill="rgb(221,13,13)"/><text x="56.6318%" y="159.50"></text></g><g><title>implied_outlives_bounds (290,462 samples, 0.34%)</title><rect x="56.7866%" y="149" width="0.3388%" height="15" fill="rgb(238,131,9)"/><text x="57.0366%" y="159.50"></text></g><g><title>param_env (403,594 samples, 0.47%)</title><rect x="57.1455%" y="149" width="0.4707%" height="15" fill="rgb(211,50,8)"/><text x="57.3955%" y="159.50"></text></g><g><title>region_scope_tree (123,251 samples, 0.14%)</title><rect x="57.6977%" y="149" width="0.1438%" height="15" fill="rgb(245,182,24)"/><text x="57.9477%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,074,953 samples, 3.59%)</title><rect x="54.2709%" y="165" width="3.5865%" height="15" fill="rgb(242,14,37)"/><text x="54.5209%" y="175.50">chec..</text></g><g><title>evaluate_obligation (221,613 samples, 0.26%)</title><rect x="61.7860%" y="149" width="0.2585%" height="15" fill="rgb(246,228,12)"/><text x="62.0360%" y="159.50"></text></g><g><title>implied_outlives_bounds (107,071 samples, 0.12%)</title><rect x="62.0680%" y="149" width="0.1249%" height="15" fill="rgb(213,55,15)"/><text x="62.3180%" y="159.50"></text></g><g><title>param_env (1,086,535 samples, 1.27%)</title><rect x="62.2209%" y="149" width="1.2673%" height="15" fill="rgb(209,9,3)"/><text x="62.4709%" y="159.50"></text></g><g><title>predicates_of (215,630 samples, 0.25%)</title><rect x="63.4882%" y="149" width="0.2515%" height="15" fill="rgb(230,59,30)"/><text x="63.7382%" y="159.50"></text></g><g><title>predicates_defined_on (140,020 samples, 0.16%)</title><rect x="63.5764%" y="133" width="0.1633%" height="15" fill="rgb(209,121,21)"/><text x="63.8264%" y="143.50"></text></g><g><title>trait_impls_of (116,291 samples, 0.14%)</title><rect x="63.7941%" y="149" width="0.1356%" height="15" fill="rgb(220,109,13)"/><text x="64.0441%" y="159.50"></text></g><g><title>analysis (53,973,980 samples, 62.95%)</title><rect x="1.0648%" y="213" width="62.9535%" height="15" fill="rgb(232,18,1)"/><text x="1.3148%" y="223.50">analysis</text></g><g><title>type_check_crate (35,098,370 samples, 40.94%)</title><rect x="23.0807%" y="197" width="40.9376%" height="15" fill="rgb(215,41,42)"/><text x="23.3307%" y="207.50">type_check_crate</text></g><g><title>wf_checking (8,507,185 samples, 9.92%)</title><rect x="54.0958%" y="181" width="9.9225%" height="15" fill="rgb(224,123,36)"/><text x="54.3458%" y="191.50">wf_checking</text></g><g><title>check_item_well_formed (5,282,161 samples, 6.16%)</title><rect x="57.8574%" y="165" width="6.1609%" height="15" fill="rgb(240,125,3)"/><text x="58.1074%" y="175.50">check_it..</text></g><g><title>codegen_crate (299,723 samples, 0.35%)</title><rect x="64.0309%" y="213" width="0.3496%" height="15" fill="rgb(205,98,50)"/><text x="64.2809%" y="223.50"></text></g><g><title>AST_validation (182,952 samples, 0.21%)</title><rect x="64.6503%" y="197" width="0.2134%" height="15" fill="rgb(205,185,37)"/><text x="64.9003%" y="207.50"></text></g><g><title>metadata_register_crate (975,860 samples, 1.14%)</title><rect x="84.8657%" y="165" width="1.1382%" height="15" fill="rgb(238,207,15)"/><text x="85.1157%" y="175.50"></text></g><g><title>metadata_register_crate (360,753 samples, 0.42%)</title><rect x="85.5831%" y="149" width="0.4208%" height="15" fill="rgb(213,199,42)"/><text x="85.8331%" y="159.50"></text></g><g><title>macro_expand_crate (18,141,752 samples, 21.16%)</title><rect x="65.0365%" y="197" width="21.1600%" height="15" fill="rgb(235,201,11)"/><text x="65.2865%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (18,114,421 samples, 21.13%)</title><rect x="65.0684%" y="181" width="21.1281%" height="15" fill="rgb(207,46,11)"/><text x="65.3184%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (165,092 samples, 0.19%)</title><rect x="86.0039%" y="165" width="0.1926%" height="15" fill="rgb(241,35,35)"/><text x="86.2539%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (111,191 samples, 0.13%)</title><rect x="86.2034%" y="197" width="0.1297%" height="15" fill="rgb(243,32,47)"/><text x="86.4534%" y="207.50"></text></g><g><title>finalize_imports (218,572 samples, 0.25%)</title><rect x="86.3448%" y="181" width="0.2549%" height="15" fill="rgb(247,202,23)"/><text x="86.5948%" y="191.50"></text></g><g><title>late_resolve_crate (2,249,095 samples, 2.62%)</title><rect x="86.6621%" y="181" width="2.6233%" height="15" fill="rgb(219,102,11)"/><text x="86.9121%" y="191.50">la..</text></g><g><title>configure_and_expand (21,478,069 samples, 25.05%)</title><rect x="64.3805%" y="213" width="25.0513%" height="15" fill="rgb(243,110,44)"/><text x="64.6305%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,656,680 samples, 3.10%)</title><rect x="86.3331%" y="197" width="3.0987%" height="15" fill="rgb(222,74,54)"/><text x="86.5831%" y="207.50">res..</text></g><g><title>drop_ast (197,572 samples, 0.23%)</title><rect x="89.4318%" y="213" width="0.2304%" height="15" fill="rgb(216,99,12)"/><text x="89.6818%" y="223.50"></text></g><g><title>early_lint_checks (320,803 samples, 0.37%)</title><rect x="89.6808%" y="213" width="0.3742%" height="15" fill="rgb(226,22,26)"/><text x="89.9308%" y="223.50"></text></g><g><title>free_global_ctxt (1,838,930 samples, 2.14%)</title><rect x="90.0550%" y="213" width="2.1449%" height="15" fill="rgb(217,163,10)"/><text x="90.3050%" y="223.50">f..</text></g><g><title>generate_crate_metadata (713,398 samples, 0.83%)</title><rect x="92.1998%" y="213" width="0.8321%" height="15" fill="rgb(213,25,53)"/><text x="92.4498%" y="223.50"></text></g><g><title>hir_lowering (3,644,800 samples, 4.25%)</title><rect x="93.0319%" y="213" width="4.2512%" height="15" fill="rgb(252,105,26)"/><text x="93.2819%" y="223.50">hir_l..</text></g><g><title>parse_crate (935,080 samples, 1.09%)</title><rect x="97.3317%" y="213" width="1.0906%" height="15" fill="rgb(220,39,43)"/><text x="97.5817%" y="223.50"></text></g><g><title>prepare_outputs (345,963 samples, 0.40%)</title><rect x="98.4345%" y="213" width="0.4035%" height="15" fill="rgb(229,68,48)"/><text x="98.6845%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (521,396 samples, 0.61%)</title><rect x="98.8380%" y="213" width="0.6081%" height="15" fill="rgb(252,8,32)"/><text x="99.0880%" y="223.50"></text></g><g><title>setup_global_ctxt (141,442 samples, 0.16%)</title><rect x="99.4587%" y="213" width="0.1650%" height="15" fill="rgb(223,20,43)"/><text x="99.7087%" y="223.50"></text></g><g><title>all (85,736,254 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (85,736,254 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (322,634 samples, 0.38%)</title><rect x="99.6237%" y="213" width="0.3763%" height="15" fill="rgb(249,185,26)"/><text x="99.8737%" y="223.50"></text></g></svg></svg>