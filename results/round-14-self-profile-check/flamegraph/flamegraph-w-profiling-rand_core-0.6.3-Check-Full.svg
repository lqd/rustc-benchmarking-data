<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (206,072 samples, 0.16%)</title><rect x="10.7488%" y="117" width="0.1602%" height="15" fill="rgb(227,0,7)"/><text x="10.9988%" y="127.50"></text></g><g><title>item_attrs (300,254 samples, 0.23%)</title><rect x="11.3475%" y="85" width="0.2334%" height="15" fill="rgb(217,0,24)"/><text x="11.5975%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (290,474 samples, 0.23%)</title><rect x="11.3551%" y="69" width="0.2258%" height="15" fill="rgb(221,193,54)"/><text x="11.6051%" y="79.50"></text></g><g><title>codegen_fn_attrs (425,915 samples, 0.33%)</title><rect x="11.2694%" y="101" width="0.3311%" height="15" fill="rgb(248,212,6)"/><text x="11.5194%" y="111.50"></text></g><g><title>is_copy_raw (244,661 samples, 0.19%)</title><rect x="13.4266%" y="85" width="0.1902%" height="15" fill="rgb(208,68,35)"/><text x="13.6766%" y="95.50"></text></g><g><title>evaluate_obligation (198,341 samples, 0.15%)</title><rect x="13.4626%" y="69" width="0.1542%" height="15" fill="rgb(232,128,0)"/><text x="13.7126%" y="79.50"></text></g><g><title>is_copy_raw (134,302 samples, 0.10%)</title><rect x="13.7373%" y="53" width="0.1044%" height="15" fill="rgb(207,160,47)"/><text x="13.9873%" y="63.50"></text></g><g><title>adt_drop_tys (254,834 samples, 0.20%)</title><rect x="13.6946%" y="69" width="0.1981%" height="15" fill="rgb(228,23,34)"/><text x="13.9446%" y="79.50"></text></g><g><title>is_copy_raw (700,545 samples, 0.54%)</title><rect x="13.8928%" y="69" width="0.5446%" height="15" fill="rgb(218,30,26)"/><text x="14.1428%" y="79.50"></text></g><g><title>evaluate_obligation (598,874 samples, 0.47%)</title><rect x="13.9718%" y="53" width="0.4656%" height="15" fill="rgb(220,122,19)"/><text x="14.2218%" y="63.50"></text></g><g><title>needs_drop_raw (1,057,849 samples, 0.82%)</title><rect x="13.6168%" y="85" width="0.8224%" height="15" fill="rgb(250,228,42)"/><text x="13.8668%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (331,963 samples, 0.26%)</title><rect x="14.6024%" y="69" width="0.2581%" height="15" fill="rgb(240,193,28)"/><text x="14.8524%" y="79.50"></text></g><g><title>specialization_graph_of (336,443 samples, 0.26%)</title><rect x="14.9002%" y="69" width="0.2616%" height="15" fill="rgb(216,20,37)"/><text x="15.1502%" y="79.50"></text></g><g><title>impl_trait_ref (145,561 samples, 0.11%)</title><rect x="15.0486%" y="53" width="0.1132%" height="15" fill="rgb(206,188,39)"/><text x="15.2986%" y="63.50"></text></g><g><title>resolve_instance (1,017,642 samples, 0.79%)</title><rect x="14.4392%" y="85" width="0.7912%" height="15" fill="rgb(217,207,13)"/><text x="14.6892%" y="95.50"></text></g><g><title>thir_body (962,665 samples, 0.75%)</title><rect x="15.2449%" y="85" width="0.7484%" height="15" fill="rgb(231,73,38)"/><text x="15.4949%" y="95.50"></text></g><g><title>mir_const (7,532,454 samples, 5.86%)</title><rect x="10.1974%" y="133" width="5.8561%" height="15" fill="rgb(225,20,46)"/><text x="10.4474%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (6,617,217 samples, 5.14%)</title><rect x="10.9090%" y="117" width="5.1446%" height="15" fill="rgb(210,31,41)"/><text x="11.1590%" y="127.50">unsafe..</text></g><g><title>mir_built (5,727,626 samples, 4.45%)</title><rect x="11.6006%" y="101" width="4.4530%" height="15" fill="rgb(221,200,47)"/><text x="11.8506%" y="111.50">mir_b..</text></g><g><title>mir_promoted (8,612,897 samples, 6.70%)</title><rect x="9.6092%" y="149" width="6.6961%" height="15" fill="rgb(226,26,5)"/><text x="9.8592%" y="159.50">mir_promo..</text></g><g><title>mir_const_qualif (323,905 samples, 0.25%)</title><rect x="16.0535%" y="133" width="0.2518%" height="15" fill="rgb(249,33,26)"/><text x="16.3035%" y="143.50"></text></g><g><title>mir_const (236,615 samples, 0.18%)</title><rect x="16.1214%" y="117" width="0.1840%" height="15" fill="rgb(235,183,28)"/><text x="16.3714%" y="127.50"></text></g><g><title>unsafety_check_result (170,474 samples, 0.13%)</title><rect x="16.1728%" y="101" width="0.1325%" height="15" fill="rgb(221,5,38)"/><text x="16.4228%" y="111.50"></text></g><g><title>mir_built (143,374 samples, 0.11%)</title><rect x="16.1939%" y="85" width="0.1115%" height="15" fill="rgb(247,18,42)"/><text x="16.4439%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (309,686 samples, 0.24%)</title><rect x="16.3067%" y="149" width="0.2408%" height="15" fill="rgb(241,131,45)"/><text x="16.5567%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,218,738 samples, 0.95%)</title><rect x="16.5474%" y="149" width="0.9475%" height="15" fill="rgb(249,31,29)"/><text x="16.7974%" y="159.50"></text></g><g><title>normalize_projection_ty (808,273 samples, 0.63%)</title><rect x="16.8665%" y="133" width="0.6284%" height="15" fill="rgb(225,111,53)"/><text x="17.1165%" y="143.50"></text></g><g><title>type_op_normalize_ty (139,772 samples, 0.11%)</title><rect x="17.5535%" y="149" width="0.1087%" height="15" fill="rgb(238,160,17)"/><text x="17.8035%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,388,274 samples, 1.86%)</title><rect x="17.6622%" y="149" width="1.8568%" height="15" fill="rgb(214,148,48)"/><text x="17.9122%" y="159.50">t..</text></g><g><title>evaluate_obligation (146,792 samples, 0.11%)</title><rect x="19.4048%" y="133" width="0.1141%" height="15" fill="rgb(232,36,49)"/><text x="19.6548%" y="143.50"></text></g><g><title>MIR_borrow_checking (23,740,826 samples, 18.46%)</title><rect x="1.0639%" y="181" width="18.4574%" height="15" fill="rgb(209,103,24)"/><text x="1.3139%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (23,633,365 samples, 18.37%)</title><rect x="1.1475%" y="165" width="18.3738%" height="15" fill="rgb(229,88,8)"/><text x="1.3975%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (250,552 samples, 0.19%)</title><rect x="19.5213%" y="181" width="0.1948%" height="15" fill="rgb(213,181,19)"/><text x="19.7713%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (195,792 samples, 0.15%)</title><rect x="19.5639%" y="165" width="0.1522%" height="15" fill="rgb(254,191,54)"/><text x="19.8139%" y="175.50"></text></g><g><title>hir_module_items (349,834 samples, 0.27%)</title><rect x="19.7161%" y="181" width="0.2720%" height="15" fill="rgb(241,83,37)"/><text x="19.9661%" y="191.50"></text></g><g><title>get_lang_items (139,591 samples, 0.11%)</title><rect x="20.5357%" y="133" width="0.1085%" height="15" fill="rgb(233,36,39)"/><text x="20.7857%" y="143.50"></text></g><g><title>should_inherit_track_caller (303,322 samples, 0.24%)</title><rect x="20.6442%" y="133" width="0.2358%" height="15" fill="rgb(226,3,54)"/><text x="20.8942%" y="143.50"></text></g><g><title>codegen_fn_attrs (657,896 samples, 0.51%)</title><rect x="20.3957%" y="149" width="0.5115%" height="15" fill="rgb(245,192,40)"/><text x="20.6457%" y="159.50"></text></g><g><title>check_mod_attrs (1,134,722 samples, 0.88%)</title><rect x="20.0251%" y="165" width="0.8822%" height="15" fill="rgb(238,167,29)"/><text x="20.2751%" y="175.50"></text></g><g><title>check_mod_const_bodies (223,202 samples, 0.17%)</title><rect x="20.9073%" y="165" width="0.1735%" height="15" fill="rgb(232,182,51)"/><text x="21.1573%" y="175.50"></text></g><g><title>lookup_deprecation_entry (224,031 samples, 0.17%)</title><rect x="21.4007%" y="149" width="0.1742%" height="15" fill="rgb(231,60,39)"/><text x="21.6507%" y="159.50"></text></g><g><title>stability_index (158,011 samples, 0.12%)</title><rect x="21.4520%" y="133" width="0.1228%" height="15" fill="rgb(208,69,12)"/><text x="21.7020%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (583,126 samples, 0.45%)</title><rect x="21.2055%" y="165" width="0.4534%" height="15" fill="rgb(235,93,37)"/><text x="21.4555%" y="175.50"></text></g><g><title>misc_checking_1 (2,234,725 samples, 1.74%)</title><rect x="19.9885%" y="181" width="1.7374%" height="15" fill="rgb(213,116,39)"/><text x="20.2385%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (446,465 samples, 0.35%)</title><rect x="21.7272%" y="165" width="0.3471%" height="15" fill="rgb(222,207,29)"/><text x="21.9772%" y="175.50"></text></g><g><title>check_mod_liveness (361,254 samples, 0.28%)</title><rect x="21.7934%" y="149" width="0.2809%" height="15" fill="rgb(206,96,30)"/><text x="22.0434%" y="159.50"></text></g><g><title>misc_checking_2 (834,260 samples, 0.65%)</title><rect x="21.7259%" y="181" width="0.6486%" height="15" fill="rgb(218,138,4)"/><text x="21.9759%" y="191.50"></text></g><g><title>match_checking (386,175 samples, 0.30%)</title><rect x="22.0743%" y="165" width="0.3002%" height="15" fill="rgb(250,191,14)"/><text x="22.3243%" y="175.50"></text></g><g><title>check_match (359,395 samples, 0.28%)</title><rect x="22.0951%" y="149" width="0.2794%" height="15" fill="rgb(239,60,40)"/><text x="22.3451%" y="159.50"></text></g><g><title>check_private_in_public (154,012 samples, 0.12%)</title><rect x="22.3821%" y="165" width="0.1197%" height="15" fill="rgb(206,27,48)"/><text x="22.6321%" y="175.50"></text></g><g><title>death_checking (303,143 samples, 0.24%)</title><rect x="22.5019%" y="165" width="0.2357%" height="15" fill="rgb(225,35,8)"/><text x="22.7519%" y="175.50"></text></g><g><title>eval_to_const_value_raw (169,352 samples, 0.13%)</title><rect x="23.1312%" y="133" width="0.1317%" height="15" fill="rgb(250,213,24)"/><text x="23.3812%" y="143.50"></text></g><g><title>eval_to_const_value_raw (165,002 samples, 0.13%)</title><rect x="23.1346%" y="117" width="0.1283%" height="15" fill="rgb(247,123,22)"/><text x="23.3846%" y="127.50"></text></g><g><title>eval_to_allocation_raw (155,762 samples, 0.12%)</title><rect x="23.1418%" y="101" width="0.1211%" height="15" fill="rgb(231,138,38)"/><text x="23.3918%" y="111.50"></text></g><g><title>param_env (162,433 samples, 0.13%)</title><rect x="23.2629%" y="133" width="0.1263%" height="15" fill="rgb(231,145,46)"/><text x="23.5129%" y="143.50"></text></g><g><title>crate_lints (1,178,884 samples, 0.92%)</title><rect x="22.7388%" y="149" width="0.9165%" height="15" fill="rgb(251,118,11)"/><text x="22.9888%" y="159.50"></text></g><g><title>type_of (334,154 samples, 0.26%)</title><rect x="23.3956%" y="133" width="0.2598%" height="15" fill="rgb(217,147,25)"/><text x="23.6456%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (257,392 samples, 0.20%)</title><rect x="23.4552%" y="117" width="0.2001%" height="15" fill="rgb(247,81,37)"/><text x="23.7052%" y="127.50"></text></g><g><title>lint_checking (1,511,307 samples, 1.17%)</title><rect x="22.7376%" y="165" width="1.1750%" height="15" fill="rgb(209,12,38)"/><text x="22.9876%" y="175.50"></text></g><g><title>module_lints (330,803 samples, 0.26%)</title><rect x="23.6553%" y="149" width="0.2572%" height="15" fill="rgb(227,1,9)"/><text x="23.9053%" y="159.50"></text></g><g><title>lint_mod (326,253 samples, 0.25%)</title><rect x="23.6589%" y="133" width="0.2536%" height="15" fill="rgb(248,47,43)"/><text x="23.9089%" y="143.50"></text></g><g><title>privacy_access_levels (219,512 samples, 0.17%)</title><rect x="23.9125%" y="165" width="0.1707%" height="15" fill="rgb(221,10,30)"/><text x="24.1625%" y="175.50"></text></g><g><title>privacy_checking_modules (630,957 samples, 0.49%)</title><rect x="24.0832%" y="165" width="0.4905%" height="15" fill="rgb(210,229,1)"/><text x="24.3332%" y="175.50"></text></g><g><title>check_mod_privacy (627,127 samples, 0.49%)</title><rect x="24.0862%" y="149" width="0.4876%" height="15" fill="rgb(222,148,37)"/><text x="24.3362%" y="159.50"></text></g><g><title>misc_checking_3 (2,850,301 samples, 2.22%)</title><rect x="22.3745%" y="181" width="2.2160%" height="15" fill="rgb(234,67,33)"/><text x="22.6245%" y="191.50">m..</text></g><g><title>impl_parent (870,983 samples, 0.68%)</title><rect x="26.0104%" y="117" width="0.6771%" height="15" fill="rgb(247,98,35)"/><text x="26.2604%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (473,739 samples, 0.37%)</title><rect x="26.3193%" y="101" width="0.3683%" height="15" fill="rgb(247,138,52)"/><text x="26.5693%" y="111.50"></text></g><g><title>impl_trait_ref (2,312,135 samples, 1.80%)</title><rect x="26.6876%" y="117" width="1.7976%" height="15" fill="rgb(213,79,30)"/><text x="26.9376%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,905,152 samples, 1.48%)</title><rect x="27.0040%" y="101" width="1.4812%" height="15" fill="rgb(246,177,23)"/><text x="27.2540%" y="111.50"></text></g><g><title>trait_impls_of (327,253 samples, 0.25%)</title><rect x="28.5100%" y="117" width="0.2544%" height="15" fill="rgb(230,62,27)"/><text x="28.7600%" y="127.50"></text></g><g><title>coherent_trait (5,284,388 samples, 4.11%)</title><rect x="24.6570%" y="149" width="4.1084%" height="15" fill="rgb(216,154,8)"/><text x="24.9070%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (5,263,188 samples, 4.09%)</title><rect x="24.6735%" y="133" width="4.0919%" height="15" fill="rgb(244,35,45)"/><text x="24.9235%" y="143.50">spec..</text></g><g><title>coherence_checking (5,387,950 samples, 4.19%)</title><rect x="24.6390%" y="165" width="4.1889%" height="15" fill="rgb(251,115,12)"/><text x="24.8890%" y="175.50">coher..</text></g><g><title>adt_sized_constraint (214,002 samples, 0.17%)</title><rect x="45.7854%" y="101" width="0.1664%" height="15" fill="rgb(240,54,50)"/><text x="46.0354%" y="111.50"></text></g><g><title>adt_def (213,422 samples, 0.17%)</title><rect x="45.7859%" y="85" width="0.1659%" height="15" fill="rgb(233,84,52)"/><text x="46.0359%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (213,172 samples, 0.17%)</title><rect x="45.7861%" y="69" width="0.1657%" height="15" fill="rgb(207,117,47)"/><text x="46.0361%" y="79.50"></text></g><g><title>item_attrs (210,992 samples, 0.16%)</title><rect x="45.7878%" y="53" width="0.1640%" height="15" fill="rgb(249,43,39)"/><text x="46.0378%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (210,622 samples, 0.16%)</title><rect x="45.7881%" y="37" width="0.1637%" height="15" fill="rgb(209,38,44)"/><text x="46.0381%" y="47.50"></text></g><g><title>adt_sized_constraint (341,602 samples, 0.27%)</title><rect x="45.6939%" y="117" width="0.2656%" height="15" fill="rgb(236,212,23)"/><text x="45.9439%" y="127.50"></text></g><g><title>associated_item (380,034 samples, 0.30%)</title><rect x="46.0743%" y="101" width="0.2955%" height="15" fill="rgb(242,79,21)"/><text x="46.3243%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (304,784 samples, 0.24%)</title><rect x="46.1328%" y="85" width="0.2370%" height="15" fill="rgb(211,96,35)"/><text x="46.3828%" y="95.50"></text></g><g><title>associated_items (546,579 samples, 0.42%)</title><rect x="45.9656%" y="117" width="0.4249%" height="15" fill="rgb(253,215,40)"/><text x="46.2156%" y="127.50"></text></g><g><title>adt_dtorck_constraint (203,933 samples, 0.16%)</title><rect x="46.6466%" y="101" width="0.1585%" height="15" fill="rgb(211,81,21)"/><text x="46.8966%" y="111.50"></text></g><g><title>dropck_outlives (490,695 samples, 0.38%)</title><rect x="46.4506%" y="117" width="0.3815%" height="15" fill="rgb(208,190,38)"/><text x="46.7006%" y="127.50"></text></g><g><title>eval_to_const_value_raw (313,444 samples, 0.24%)</title><rect x="46.8321%" y="117" width="0.2437%" height="15" fill="rgb(235,213,38)"/><text x="47.0821%" y="127.50"></text></g><g><title>eval_to_const_value_raw (290,513 samples, 0.23%)</title><rect x="46.8499%" y="101" width="0.2259%" height="15" fill="rgb(237,122,38)"/><text x="47.0999%" y="111.50"></text></g><g><title>eval_to_allocation_raw (279,113 samples, 0.22%)</title><rect x="46.8588%" y="85" width="0.2170%" height="15" fill="rgb(244,218,35)"/><text x="47.1088%" y="95.50"></text></g><g><title>generics_of (1,049,933 samples, 0.82%)</title><rect x="51.6348%" y="101" width="0.8163%" height="15" fill="rgb(240,68,47)"/><text x="51.8848%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (787,138 samples, 0.61%)</title><rect x="51.8391%" y="85" width="0.6120%" height="15" fill="rgb(210,16,53)"/><text x="52.0891%" y="95.50"></text></g><g><title>impl_polarity (155,535 samples, 0.12%)</title><rect x="52.4838%" y="101" width="0.1209%" height="15" fill="rgb(235,124,12)"/><text x="52.7338%" y="111.50"></text></g><g><title>impl_trait_ref (1,358,985 samples, 1.06%)</title><rect x="52.6047%" y="101" width="1.0565%" height="15" fill="rgb(224,169,11)"/><text x="52.8547%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,101,651 samples, 0.86%)</title><rect x="52.8048%" y="85" width="0.8565%" height="15" fill="rgb(250,166,2)"/><text x="53.0548%" y="95.50"></text></g><g><title>opt_def_kind (167,153 samples, 0.13%)</title><rect x="53.8799%" y="85" width="0.1300%" height="15" fill="rgb(242,216,29)"/><text x="54.1299%" y="95.50"></text></g><g><title>explicit_predicates_of (162,910 samples, 0.13%)</title><rect x="54.1962%" y="69" width="0.1267%" height="15" fill="rgb(230,116,27)"/><text x="54.4462%" y="79.50"></text></g><g><title>predicates_of (926,079 samples, 0.72%)</title><rect x="53.7057%" y="101" width="0.7200%" height="15" fill="rgb(228,99,48)"/><text x="53.9557%" y="111.50"></text></g><g><title>predicates_defined_on (534,894 samples, 0.42%)</title><rect x="54.0098%" y="85" width="0.4159%" height="15" fill="rgb(253,11,6)"/><text x="54.2598%" y="95.50"></text></g><g><title>inferred_outlives_of (132,261 samples, 0.10%)</title><rect x="54.3228%" y="69" width="0.1028%" height="15" fill="rgb(247,143,39)"/><text x="54.5728%" y="79.50"></text></g><g><title>specializes (2,514,245 samples, 1.95%)</title><rect x="54.4257%" y="101" width="1.9547%" height="15" fill="rgb(236,97,10)"/><text x="54.6757%" y="111.50">s..</text></g><g><title>param_env (1,465,157 samples, 1.14%)</title><rect x="55.2413%" y="85" width="1.1391%" height="15" fill="rgb(233,208,19)"/><text x="55.4913%" y="95.50"></text></g><g><title>def_span (646,108 samples, 0.50%)</title><rect x="55.8781%" y="69" width="0.5023%" height="15" fill="rgb(216,164,2)"/><text x="56.1281%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (571,837 samples, 0.44%)</title><rect x="55.9358%" y="53" width="0.4446%" height="15" fill="rgb(220,129,5)"/><text x="56.1858%" y="63.50"></text></g><g><title>trait_impls_of (320,926 samples, 0.25%)</title><rect x="56.3928%" y="101" width="0.2495%" height="15" fill="rgb(242,17,10)"/><text x="56.6428%" y="111.50"></text></g><g><title>evaluate_obligation (12,333,887 samples, 9.59%)</title><rect x="47.0758%" y="117" width="9.5890%" height="15" fill="rgb(242,107,0)"/><text x="47.3258%" y="127.50">evaluate_oblig..</text></g><g><title>fn_sig (157,300 samples, 0.12%)</title><rect x="56.6884%" y="117" width="0.1223%" height="15" fill="rgb(251,28,31)"/><text x="56.9384%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (138,660 samples, 0.11%)</title><rect x="56.7029%" y="101" width="0.1078%" height="15" fill="rgb(233,223,10)"/><text x="56.9529%" y="111.50"></text></g><g><title>generics_of (394,196 samples, 0.31%)</title><rect x="56.8107%" y="117" width="0.3065%" height="15" fill="rgb(215,21,27)"/><text x="57.0607%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (304,575 samples, 0.24%)</title><rect x="56.8804%" y="101" width="0.2368%" height="15" fill="rgb(232,23,21)"/><text x="57.1304%" y="111.50"></text></g><g><title>associated_item (157,091 samples, 0.12%)</title><rect x="57.1704%" y="85" width="0.1221%" height="15" fill="rgb(244,5,23)"/><text x="57.4204%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (136,621 samples, 0.11%)</title><rect x="57.1864%" y="69" width="0.1062%" height="15" fill="rgb(226,81,46)"/><text x="57.4364%" y="79.50"></text></g><g><title>impl_item_implementor_ids (239,413 samples, 0.19%)</title><rect x="57.1183%" y="117" width="0.1861%" height="15" fill="rgb(247,70,30)"/><text x="57.3683%" y="127.50"></text></g><g><title>associated_items (213,781 samples, 0.17%)</title><rect x="57.1382%" y="101" width="0.1662%" height="15" fill="rgb(212,68,19)"/><text x="57.3882%" y="111.50"></text></g><g><title>impl_trait_ref (479,073 samples, 0.37%)</title><rect x="57.3159%" y="117" width="0.3725%" height="15" fill="rgb(240,187,13)"/><text x="57.5659%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (172,681 samples, 0.13%)</title><rect x="57.5541%" y="101" width="0.1343%" height="15" fill="rgb(223,113,26)"/><text x="57.8041%" y="111.50"></text></g><g><title>item_attrs (155,982 samples, 0.12%)</title><rect x="57.7112%" y="117" width="0.1213%" height="15" fill="rgb(206,192,2)"/><text x="57.9612%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (150,682 samples, 0.12%)</title><rect x="57.7154%" y="101" width="0.1171%" height="15" fill="rgb(241,108,4)"/><text x="57.9654%" y="111.50"></text></g><g><title>method_autoderef_steps (479,283 samples, 0.37%)</title><rect x="57.9127%" y="117" width="0.3726%" height="15" fill="rgb(247,173,49)"/><text x="58.1627%" y="127.50"></text></g><g><title>evaluate_obligation (229,351 samples, 0.18%)</title><rect x="58.1070%" y="101" width="0.1783%" height="15" fill="rgb(224,114,35)"/><text x="58.3570%" y="111.50"></text></g><g><title>param_env (305,753 samples, 0.24%)</title><rect x="58.4174%" y="117" width="0.2377%" height="15" fill="rgb(245,159,27)"/><text x="58.6674%" y="127.50"></text></g><g><title>predicates_of (266,753 samples, 0.21%)</title><rect x="58.4477%" y="101" width="0.2074%" height="15" fill="rgb(245,172,44)"/><text x="58.6977%" y="111.50"></text></g><g><title>predicates_defined_on (262,622 samples, 0.20%)</title><rect x="58.4509%" y="85" width="0.2042%" height="15" fill="rgb(236,23,11)"/><text x="58.7009%" y="95.50"></text></g><g><title>explicit_predicates_of (137,251 samples, 0.11%)</title><rect x="58.8727%" y="85" width="0.1067%" height="15" fill="rgb(205,117,38)"/><text x="59.1227%" y="95.50"></text></g><g><title>predicates_of (465,217 samples, 0.36%)</title><rect x="58.6694%" y="117" width="0.3617%" height="15" fill="rgb(237,72,25)"/><text x="58.9194%" y="127.50"></text></g><g><title>predicates_defined_on (324,865 samples, 0.25%)</title><rect x="58.7785%" y="101" width="0.2526%" height="15" fill="rgb(244,70,9)"/><text x="59.0285%" y="111.50"></text></g><g><title>specializes (225,663 samples, 0.18%)</title><rect x="59.0584%" y="117" width="0.1754%" height="15" fill="rgb(217,125,39)"/><text x="59.3084%" y="127.50"></text></g><g><title>associated_items (152,961 samples, 0.12%)</title><rect x="60.8737%" y="101" width="0.1189%" height="15" fill="rgb(235,36,10)"/><text x="61.1237%" y="111.50"></text></g><g><title>specializes (315,925 samples, 0.25%)</title><rect x="61.4238%" y="85" width="0.2456%" height="15" fill="rgb(251,123,47)"/><text x="61.6738%" y="95.50"></text></g><g><title>param_env (219,211 samples, 0.17%)</title><rect x="61.4990%" y="69" width="0.1704%" height="15" fill="rgb(221,13,13)"/><text x="61.7490%" y="79.50"></text></g><g><title>trait_impls_of (139,811 samples, 0.11%)</title><rect x="61.6735%" y="85" width="0.1087%" height="15" fill="rgb(238,131,9)"/><text x="61.9235%" y="95.50"></text></g><g><title>evaluate_obligation (997,200 samples, 0.78%)</title><rect x="61.0083%" y="101" width="0.7753%" height="15" fill="rgb(211,50,8)"/><text x="61.2583%" y="111.50"></text></g><g><title>is_copy_raw (148,232 samples, 0.12%)</title><rect x="61.8770%" y="101" width="0.1152%" height="15" fill="rgb(245,182,24)"/><text x="62.1270%" y="111.50"></text></g><g><title>evaluate_obligation (135,012 samples, 0.10%)</title><rect x="61.8872%" y="85" width="0.1050%" height="15" fill="rgb(242,14,37)"/><text x="62.1372%" y="95.50"></text></g><g><title>typeck (3,505,369 samples, 2.73%)</title><rect x="59.3509%" y="117" width="2.7253%" height="15" fill="rgb(246,228,12)"/><text x="59.6009%" y="127.50">ty..</text></g><g><title>item_bodies_checking (42,760,329 samples, 33.24%)</title><rect x="28.8794%" y="165" width="33.2442%" height="15" fill="rgb(213,55,15)"/><text x="29.1294%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (42,757,539 samples, 33.24%)</title><rect x="28.8816%" y="149" width="33.2420%" height="15" fill="rgb(209,9,3)"/><text x="29.1316%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (42,681,567 samples, 33.18%)</title><rect x="28.9407%" y="133" width="33.1829%" height="15" fill="rgb(230,59,30)"/><text x="29.1907%" y="143.50">typeck</text></g><g><title>item_types_checking (1,006,551 samples, 0.78%)</title><rect x="62.1236%" y="165" width="0.7825%" height="15" fill="rgb(209,121,21)"/><text x="62.3736%" y="175.50"></text></g><g><title>check_mod_item_types (1,001,931 samples, 0.78%)</title><rect x="62.1272%" y="149" width="0.7790%" height="15" fill="rgb(220,109,13)"/><text x="62.3772%" y="159.50"></text></g><g><title>typeck (228,092 samples, 0.18%)</title><rect x="62.7288%" y="133" width="0.1773%" height="15" fill="rgb(232,18,1)"/><text x="62.9788%" y="143.50"></text></g><g><title>fn_sig (676,546 samples, 0.53%)</title><rect x="63.3151%" y="133" width="0.5260%" height="15" fill="rgb(215,41,42)"/><text x="63.5651%" y="143.50"></text></g><g><title>is_late_bound_map (374,314 samples, 0.29%)</title><rect x="64.0156%" y="117" width="0.2910%" height="15" fill="rgb(224,123,36)"/><text x="64.2656%" y="127.50"></text></g><g><title>resolve_lifetimes (368,244 samples, 0.29%)</title><rect x="64.0203%" y="101" width="0.2863%" height="15" fill="rgb(240,125,3)"/><text x="64.2703%" y="111.50"></text></g><g><title>lint_levels (269,883 samples, 0.21%)</title><rect x="64.0968%" y="85" width="0.2098%" height="15" fill="rgb(205,98,50)"/><text x="64.3468%" y="95.50"></text></g><g><title>named_region_map (304,324 samples, 0.24%)</title><rect x="64.3066%" y="117" width="0.2366%" height="15" fill="rgb(205,185,37)"/><text x="64.5566%" y="127.50"></text></g><g><title>resolve_lifetimes (264,883 samples, 0.21%)</title><rect x="64.3373%" y="101" width="0.2059%" height="15" fill="rgb(238,207,15)"/><text x="64.5873%" y="111.50"></text></g><g><title>generics_of (939,780 samples, 0.73%)</title><rect x="63.8411%" y="133" width="0.7306%" height="15" fill="rgb(213,199,42)"/><text x="64.0911%" y="143.50"></text></g><g><title>explicit_item_bounds (163,262 samples, 0.13%)</title><rect x="64.6847%" y="117" width="0.1269%" height="15" fill="rgb(235,201,11)"/><text x="64.9347%" y="127.50"></text></g><g><title>item_bounds (268,314 samples, 0.21%)</title><rect x="64.6174%" y="133" width="0.2086%" height="15" fill="rgb(207,46,11)"/><text x="64.8674%" y="143.50"></text></g><g><title>late_bound_vars_map (392,317 samples, 0.31%)</title><rect x="65.3050%" y="85" width="0.3050%" height="15" fill="rgb(241,35,35)"/><text x="65.5550%" y="95.50"></text></g><g><title>resolve_lifetimes (366,377 samples, 0.28%)</title><rect x="65.3252%" y="69" width="0.2848%" height="15" fill="rgb(243,32,47)"/><text x="65.5752%" y="79.50"></text></g><g><title>explicit_predicates_of (850,410 samples, 0.66%)</title><rect x="65.0220%" y="101" width="0.6612%" height="15" fill="rgb(247,202,23)"/><text x="65.2720%" y="111.50"></text></g><g><title>predicates_of (1,334,066 samples, 1.04%)</title><rect x="64.8260%" y="133" width="1.0372%" height="15" fill="rgb(219,102,11)"/><text x="65.0760%" y="143.50"></text></g><g><title>predicates_defined_on (1,243,396 samples, 0.97%)</title><rect x="64.8965%" y="117" width="0.9667%" height="15" fill="rgb(243,110,44)"/><text x="65.1465%" y="127.50"></text></g><g><title>inferred_outlives_of (231,604 samples, 0.18%)</title><rect x="65.6831%" y="101" width="0.1801%" height="15" fill="rgb(222,74,54)"/><text x="65.9331%" y="111.50"></text></g><g><title>inferred_outlives_crate (191,272 samples, 0.15%)</title><rect x="65.7145%" y="85" width="0.1487%" height="15" fill="rgb(216,99,12)"/><text x="65.9645%" y="95.50"></text></g><g><title>super_predicates_of (140,872 samples, 0.11%)</title><rect x="65.8632%" y="133" width="0.1095%" height="15" fill="rgb(226,22,26)"/><text x="66.1132%" y="143.50"></text></g><g><title>type_collecting (4,123,417 samples, 3.21%)</title><rect x="62.9076%" y="165" width="3.2058%" height="15" fill="rgb(217,163,10)"/><text x="63.1576%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (4,103,016 samples, 3.19%)</title><rect x="62.9235%" y="149" width="3.1899%" height="15" fill="rgb(213,25,53)"/><text x="63.1735%" y="159.50">col..</text></g><g><title>type_of (167,252 samples, 0.13%)</title><rect x="65.9834%" y="133" width="0.1300%" height="15" fill="rgb(252,105,26)"/><text x="66.2334%" y="143.50"></text></g><g><title>evaluate_obligation (382,763 samples, 0.30%)</title><rect x="67.3310%" y="133" width="0.2976%" height="15" fill="rgb(220,39,43)"/><text x="67.5810%" y="143.50"></text></g><g><title>implied_outlives_bounds (173,251 samples, 0.13%)</title><rect x="67.6343%" y="133" width="0.1347%" height="15" fill="rgb(229,68,48)"/><text x="67.8843%" y="143.50"></text></g><g><title>param_env (273,631 samples, 0.21%)</title><rect x="67.7690%" y="133" width="0.2127%" height="15" fill="rgb(252,8,32)"/><text x="68.0190%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,463,116 samples, 1.91%)</title><rect x="66.2467%" y="149" width="1.9150%" height="15" fill="rgb(223,20,43)"/><text x="66.4967%" y="159.50">c..</text></g><g><title>region_scope_tree (204,731 samples, 0.16%)</title><rect x="68.0025%" y="133" width="0.1592%" height="15" fill="rgb(229,81,49)"/><text x="68.2525%" y="143.50"></text></g><g><title>param_env (305,944 samples, 0.24%)</title><rect x="69.2467%" y="133" width="0.2379%" height="15" fill="rgb(236,28,36)"/><text x="69.4967%" y="143.50"></text></g><g><title>check_item_well_formed (1,892,644 samples, 1.47%)</title><rect x="68.1617%" y="149" width="1.4714%" height="15" fill="rgb(249,185,26)"/><text x="68.4117%" y="159.50"></text></g><g><title>evaluate_obligation (177,402 samples, 0.14%)</title><rect x="70.0827%" y="133" width="0.1379%" height="15" fill="rgb(249,174,33)"/><text x="70.3327%" y="143.50"></text></g><g><title>analysis (89,761,173 samples, 69.79%)</title><rect x="0.6478%" y="197" width="69.7851%" height="15" fill="rgb(233,201,37)"/><text x="0.8978%" y="207.50">analysis</text></g><g><title>type_check_crate (58,964,889 samples, 45.84%)</title><rect x="24.5905%" y="181" width="45.8425%" height="15" fill="rgb(221,78,26)"/><text x="24.8405%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,550,582 samples, 4.32%)</title><rect x="66.1176%" y="165" width="4.3153%" height="15" fill="rgb(250,127,30)"/><text x="66.3676%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,028,811 samples, 0.80%)</title><rect x="69.6331%" y="149" width="0.7999%" height="15" fill="rgb(230,49,44)"/><text x="69.8831%" y="159.50"></text></g><g><title>codegen_crate (282,393 samples, 0.22%)</title><rect x="70.4428%" y="197" width="0.2195%" height="15" fill="rgb(229,67,23)"/><text x="70.6928%" y="207.50"></text></g><g><title>AST_validation (371,544 samples, 0.29%)</title><rect x="70.8395%" y="181" width="0.2889%" height="15" fill="rgb(249,83,47)"/><text x="71.0895%" y="191.50"></text></g><g><title>complete_gated_feature_checking (134,622 samples, 0.10%)</title><rect x="71.1284%" y="181" width="0.1047%" height="15" fill="rgb(215,43,3)"/><text x="71.3784%" y="191.50"></text></g><g><title>metadata_load_macro (224,583 samples, 0.17%)</title><rect x="85.2331%" y="149" width="0.1746%" height="15" fill="rgb(238,154,13)"/><text x="85.4831%" y="159.50"></text></g><g><title>metadata_register_crate (201,682 samples, 0.16%)</title><rect x="85.4077%" y="149" width="0.1568%" height="15" fill="rgb(219,56,2)"/><text x="85.6577%" y="159.50"></text></g><g><title>macro_expand_crate (18,703,659 samples, 14.54%)</title><rect x="71.3051%" y="181" width="14.5412%" height="15" fill="rgb(233,0,4)"/><text x="71.5551%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (18,676,688 samples, 14.52%)</title><rect x="71.3261%" y="165" width="14.5203%" height="15" fill="rgb(235,30,7)"/><text x="71.5761%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (362,563 samples, 0.28%)</title><rect x="85.5645%" y="149" width="0.2819%" height="15" fill="rgb(250,79,13)"/><text x="85.8145%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (181,132 samples, 0.14%)</title><rect x="85.8506%" y="181" width="0.1408%" height="15" fill="rgb(211,146,34)"/><text x="86.1006%" y="191.50"></text></g><g><title>late_resolve_crate (3,071,415 samples, 2.39%)</title><rect x="86.1405%" y="165" width="2.3879%" height="15" fill="rgb(228,22,38)"/><text x="86.3905%" y="175.50">la..</text></g><g><title>configure_and_expand (23,213,940 samples, 18.05%)</title><rect x="70.6623%" y="197" width="18.0478%" height="15" fill="rgb(235,168,5)"/><text x="70.9123%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,496,919 samples, 2.72%)</title><rect x="85.9914%" y="181" width="2.7187%" height="15" fill="rgb(221,155,16)"/><text x="86.2414%" y="191.50">re..</text></g><g><title>drop_ast (380,254 samples, 0.30%)</title><rect x="88.7101%" y="197" width="0.2956%" height="15" fill="rgb(215,215,53)"/><text x="88.9601%" y="207.50"></text></g><g><title>early_lint_checks (694,248 samples, 0.54%)</title><rect x="89.0169%" y="197" width="0.5397%" height="15" fill="rgb(223,4,10)"/><text x="89.2669%" y="207.50"></text></g><g><title>free_global_ctxt (2,429,217 samples, 1.89%)</title><rect x="89.5567%" y="197" width="1.8886%" height="15" fill="rgb(234,103,6)"/><text x="89.8067%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,033,022 samples, 0.80%)</title><rect x="91.4453%" y="197" width="0.8031%" height="15" fill="rgb(227,97,0)"/><text x="91.6953%" y="207.50"></text></g><g><title>hir_lowering (5,274,079 samples, 4.10%)</title><rect x="92.2484%" y="197" width="4.1004%" height="15" fill="rgb(234,150,53)"/><text x="92.4984%" y="207.50">hir_..</text></g><g><title>parse_crate (2,795,981 samples, 2.17%)</title><rect x="96.3905%" y="197" width="2.1737%" height="15" fill="rgb(228,201,54)"/><text x="96.6405%" y="207.50">p..</text></g><g><title>prepare_outputs (346,254 samples, 0.27%)</title><rect x="98.5718%" y="197" width="0.2692%" height="15" fill="rgb(222,22,37)"/><text x="98.8218%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (966,051 samples, 0.75%)</title><rect x="98.8410%" y="197" width="0.7511%" height="15" fill="rgb(237,53,32)"/><text x="99.0910%" y="207.50"></text></g><g><title>setup_global_ctxt (135,322 samples, 0.11%)</title><rect x="99.6012%" y="197" width="0.1052%" height="15" fill="rgb(233,25,53)"/><text x="99.8512%" y="207.50"></text></g><g><title>all (128,625,068 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(210,40,34)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (128,625,068 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,220,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (377,574 samples, 0.29%)</title><rect x="99.7065%" y="197" width="0.2935%" height="15" fill="rgb(235,28,35)"/><text x="99.9565%" y="207.50"></text></g></svg></svg>