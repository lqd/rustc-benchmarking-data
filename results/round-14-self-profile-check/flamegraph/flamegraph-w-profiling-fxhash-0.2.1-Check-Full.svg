<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (84,630 samples, 0.12%)</title><rect x="9.1860%" y="117" width="0.1166%" height="15" fill="rgb(227,0,7)"/><text x="9.4360%" y="127.50"></text></g><g><title>item_attrs (114,880 samples, 0.16%)</title><rect x="9.6522%" y="85" width="0.1583%" height="15" fill="rgb(217,0,24)"/><text x="9.9022%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (111,820 samples, 0.15%)</title><rect x="9.6564%" y="69" width="0.1541%" height="15" fill="rgb(221,193,54)"/><text x="9.9064%" y="79.50"></text></g><g><title>codegen_fn_attrs (167,290 samples, 0.23%)</title><rect x="9.5905%" y="101" width="0.2305%" height="15" fill="rgb(248,212,6)"/><text x="9.8405%" y="111.50"></text></g><g><title>is_copy_raw (158,311 samples, 0.22%)</title><rect x="11.3634%" y="85" width="0.2181%" height="15" fill="rgb(208,68,35)"/><text x="11.6134%" y="95.50"></text></g><g><title>evaluate_obligation (138,951 samples, 0.19%)</title><rect x="11.3901%" y="69" width="0.1914%" height="15" fill="rgb(232,128,0)"/><text x="11.6401%" y="79.50"></text></g><g><title>is_copy_raw (98,630 samples, 0.14%)</title><rect x="11.6255%" y="53" width="0.1359%" height="15" fill="rgb(207,160,47)"/><text x="11.8755%" y="63.50"></text></g><g><title>evaluate_obligation (91,410 samples, 0.13%)</title><rect x="11.6354%" y="37" width="0.1259%" height="15" fill="rgb(228,23,34)"/><text x="11.8854%" y="47.50"></text></g><g><title>adt_drop_tys (135,102 samples, 0.19%)</title><rect x="11.6116%" y="69" width="0.1861%" height="15" fill="rgb(218,30,26)"/><text x="11.8616%" y="79.50"></text></g><g><title>needs_drop_raw (270,273 samples, 0.37%)</title><rect x="11.5815%" y="85" width="0.3724%" height="15" fill="rgb(220,122,19)"/><text x="11.8315%" y="95.50"></text></g><g><title>is_copy_raw (113,301 samples, 0.16%)</title><rect x="11.7978%" y="69" width="0.1561%" height="15" fill="rgb(250,228,42)"/><text x="12.0478%" y="79.50"></text></g><g><title>evaluate_obligation (88,581 samples, 0.12%)</title><rect x="11.8318%" y="53" width="0.1220%" height="15" fill="rgb(240,193,28)"/><text x="12.0818%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (95,940 samples, 0.13%)</title><rect x="12.1181%" y="69" width="0.1322%" height="15" fill="rgb(216,20,37)"/><text x="12.3681%" y="79.50"></text></g><g><title>impl_parent (105,803 samples, 0.15%)</title><rect x="12.5561%" y="53" width="0.1458%" height="15" fill="rgb(206,188,39)"/><text x="12.8061%" y="63.50"></text></g><g><title>specialization_graph_of (527,626 samples, 0.73%)</title><rect x="12.3492%" y="69" width="0.7269%" height="15" fill="rgb(217,207,13)"/><text x="12.5992%" y="79.50"></text></g><g><title>impl_trait_ref (271,652 samples, 0.37%)</title><rect x="12.7019%" y="53" width="0.3743%" height="15" fill="rgb(231,73,38)"/><text x="12.9519%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (229,661 samples, 0.32%)</title><rect x="12.7597%" y="37" width="0.3164%" height="15" fill="rgb(225,20,46)"/><text x="13.0097%" y="47.50"></text></g><g><title>resolve_instance (879,369 samples, 1.21%)</title><rect x="11.9539%" y="85" width="1.2115%" height="15" fill="rgb(210,31,41)"/><text x="12.2039%" y="95.50"></text></g><g><title>thir_body (445,336 samples, 0.61%)</title><rect x="13.1847%" y="85" width="0.6135%" height="15" fill="rgb(221,200,47)"/><text x="13.4347%" y="95.50"></text></g><g><title>mir_const (3,744,379 samples, 5.16%)</title><rect x="8.6511%" y="133" width="5.1586%" height="15" fill="rgb(226,26,5)"/><text x="8.9011%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (3,271,526 samples, 4.51%)</title><rect x="9.3026%" y="117" width="4.5072%" height="15" fill="rgb(249,33,26)"/><text x="9.5526%" y="127.50">unsaf..</text></g><g><title>mir_built (2,895,233 samples, 3.99%)</title><rect x="9.8210%" y="101" width="3.9887%" height="15" fill="rgb(235,183,28)"/><text x="10.0710%" y="111.50">mir_..</text></g><g><title>mir_promoted (4,379,945 samples, 6.03%)</title><rect x="8.1510%" y="149" width="6.0342%" height="15" fill="rgb(221,5,38)"/><text x="8.4010%" y="159.50">mir_prom..</text></g><g><title>mir_const_qualif (272,591 samples, 0.38%)</title><rect x="13.8097%" y="133" width="0.3755%" height="15" fill="rgb(247,18,42)"/><text x="14.0597%" y="143.50"></text></g><g><title>mir_const (202,241 samples, 0.28%)</title><rect x="13.9066%" y="117" width="0.2786%" height="15" fill="rgb(241,131,45)"/><text x="14.1566%" y="127.50"></text></g><g><title>unsafety_check_result (146,071 samples, 0.20%)</title><rect x="13.9840%" y="101" width="0.2012%" height="15" fill="rgb(249,31,29)"/><text x="14.2340%" y="111.50"></text></g><g><title>mir_built (105,890 samples, 0.15%)</title><rect x="14.0394%" y="85" width="0.1459%" height="15" fill="rgb(225,111,53)"/><text x="14.2894%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (87,580 samples, 0.12%)</title><rect x="14.1853%" y="149" width="0.1207%" height="15" fill="rgb(238,160,17)"/><text x="14.4353%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (128,043 samples, 0.18%)</title><rect x="14.3059%" y="149" width="0.1764%" height="15" fill="rgb(214,148,48)"/><text x="14.5559%" y="159.50"></text></g><g><title>normalize_projection_ty (78,972 samples, 0.11%)</title><rect x="14.3735%" y="133" width="0.1088%" height="15" fill="rgb(232,36,49)"/><text x="14.6235%" y="143.50"></text></g><g><title>type_op_prove_predicate (498,836 samples, 0.69%)</title><rect x="14.4823%" y="149" width="0.6872%" height="15" fill="rgb(209,103,24)"/><text x="14.7323%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,895,300 samples, 13.63%)</title><rect x="1.5398%" y="181" width="13.6327%" height="15" fill="rgb(229,88,8)"/><text x="1.7898%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,825,149 samples, 13.54%)</title><rect x="1.6365%" y="165" width="13.5360%" height="15" fill="rgb(213,181,19)"/><text x="1.8865%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (148,902 samples, 0.21%)</title><rect x="15.1725%" y="181" width="0.2051%" height="15" fill="rgb(254,191,54)"/><text x="15.4225%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (118,482 samples, 0.16%)</title><rect x="15.2144%" y="165" width="0.1632%" height="15" fill="rgb(241,83,37)"/><text x="15.4644%" y="175.50"></text></g><g><title>hir_module_items (218,812 samples, 0.30%)</title><rect x="15.3776%" y="181" width="0.3015%" height="15" fill="rgb(233,36,39)"/><text x="15.6276%" y="191.50"></text></g><g><title>get_lang_items (119,121 samples, 0.16%)</title><rect x="16.2405%" y="133" width="0.1641%" height="15" fill="rgb(226,3,54)"/><text x="16.4905%" y="143.50"></text></g><g><title>associated_item (89,481 samples, 0.12%)</title><rect x="16.4937%" y="117" width="0.1233%" height="15" fill="rgb(245,192,40)"/><text x="16.7437%" y="127.50"></text></g><g><title>item_attrs (102,010 samples, 0.14%)</title><rect x="16.6579%" y="101" width="0.1405%" height="15" fill="rgb(238,167,29)"/><text x="16.9079%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,410 samples, 0.12%)</title><rect x="16.6766%" y="85" width="0.1218%" height="15" fill="rgb(232,182,51)"/><text x="16.9266%" y="95.50"></text></g><g><title>codegen_fn_attrs (177,660 samples, 0.24%)</title><rect x="16.6170%" y="117" width="0.2448%" height="15" fill="rgb(231,60,39)"/><text x="16.8670%" y="127.50"></text></g><g><title>should_inherit_track_caller (341,141 samples, 0.47%)</title><rect x="16.4046%" y="133" width="0.4700%" height="15" fill="rgb(208,69,12)"/><text x="16.6546%" y="143.50"></text></g><g><title>codegen_fn_attrs (614,374 samples, 0.85%)</title><rect x="16.0764%" y="149" width="0.8464%" height="15" fill="rgb(235,93,37)"/><text x="16.3264%" y="159.50"></text></g><g><title>check_mod_attrs (864,979 samples, 1.19%)</title><rect x="15.7315%" y="165" width="1.1917%" height="15" fill="rgb(213,116,39)"/><text x="15.9815%" y="175.50"></text></g><g><title>check_mod_const_bodies (147,711 samples, 0.20%)</title><rect x="16.9231%" y="165" width="0.2035%" height="15" fill="rgb(222,207,29)"/><text x="17.1731%" y="175.50"></text></g><g><title>lookup_deprecation_entry (134,461 samples, 0.19%)</title><rect x="17.4289%" y="149" width="0.1852%" height="15" fill="rgb(206,96,30)"/><text x="17.6789%" y="159.50"></text></g><g><title>stability_index (77,741 samples, 0.11%)</title><rect x="17.5070%" y="133" width="0.1071%" height="15" fill="rgb(218,138,4)"/><text x="17.7570%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (370,744 samples, 0.51%)</title><rect x="17.2231%" y="165" width="0.5108%" height="15" fill="rgb(250,191,14)"/><text x="17.4731%" y="175.50"></text></g><g><title>misc_checking_1 (1,553,857 samples, 2.14%)</title><rect x="15.6802%" y="181" width="2.1407%" height="15" fill="rgb(239,60,40)"/><text x="15.9302%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (164,102 samples, 0.23%)</title><rect x="17.8231%" y="165" width="0.2261%" height="15" fill="rgb(206,27,48)"/><text x="18.0731%" y="175.50"></text></g><g><title>check_mod_liveness (126,732 samples, 0.17%)</title><rect x="17.8746%" y="149" width="0.1746%" height="15" fill="rgb(225,35,8)"/><text x="18.1246%" y="159.50"></text></g><g><title>misc_checking_2 (384,004 samples, 0.53%)</title><rect x="17.8209%" y="181" width="0.5290%" height="15" fill="rgb(250,213,24)"/><text x="18.0709%" y="191.50"></text></g><g><title>match_checking (218,332 samples, 0.30%)</title><rect x="18.0492%" y="165" width="0.3008%" height="15" fill="rgb(247,123,22)"/><text x="18.2992%" y="175.50"></text></g><g><title>check_match (201,272 samples, 0.28%)</title><rect x="18.0727%" y="149" width="0.2773%" height="15" fill="rgb(231,138,38)"/><text x="18.3227%" y="159.50"></text></g><g><title>check_private_in_public (87,161 samples, 0.12%)</title><rect x="18.3619%" y="165" width="0.1201%" height="15" fill="rgb(231,145,46)"/><text x="18.6119%" y="175.50"></text></g><g><title>death_checking (199,602 samples, 0.27%)</title><rect x="18.4820%" y="165" width="0.2750%" height="15" fill="rgb(251,118,11)"/><text x="18.7320%" y="175.50"></text></g><g><title>eval_to_const_value_raw (201,402 samples, 0.28%)</title><rect x="19.5298%" y="133" width="0.2775%" height="15" fill="rgb(217,147,25)"/><text x="19.7798%" y="143.50"></text></g><g><title>eval_to_const_value_raw (191,992 samples, 0.26%)</title><rect x="19.5428%" y="117" width="0.2645%" height="15" fill="rgb(247,81,37)"/><text x="19.7928%" y="127.50"></text></g><g><title>eval_to_allocation_raw (182,952 samples, 0.25%)</title><rect x="19.5552%" y="101" width="0.2521%" height="15" fill="rgb(209,12,38)"/><text x="19.8052%" y="111.50"></text></g><g><title>param_env (109,191 samples, 0.15%)</title><rect x="19.8073%" y="133" width="0.1504%" height="15" fill="rgb(227,1,9)"/><text x="20.0573%" y="143.50"></text></g><g><title>crate_lints (2,148,154 samples, 2.96%)</title><rect x="18.7594%" y="149" width="2.9595%" height="15" fill="rgb(248,47,43)"/><text x="19.0094%" y="159.50">cra..</text></g><g><title>type_of (1,278,367 samples, 1.76%)</title><rect x="19.9577%" y="133" width="1.7612%" height="15" fill="rgb(221,10,30)"/><text x="20.2077%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (812,851 samples, 1.12%)</title><rect x="20.5990%" y="117" width="1.1199%" height="15" fill="rgb(210,229,1)"/><text x="20.8490%" y="127.50"></text></g><g><title>lint_checking (2,333,566 samples, 3.21%)</title><rect x="18.7570%" y="165" width="3.2149%" height="15" fill="rgb(222,148,37)"/><text x="19.0070%" y="175.50">lin..</text></g><g><title>module_lints (183,642 samples, 0.25%)</title><rect x="21.7189%" y="149" width="0.2530%" height="15" fill="rgb(234,67,33)"/><text x="21.9689%" y="159.50"></text></g><g><title>lint_mod (181,102 samples, 0.25%)</title><rect x="21.7224%" y="133" width="0.2495%" height="15" fill="rgb(247,98,35)"/><text x="21.9724%" y="143.50"></text></g><g><title>privacy_access_levels (110,211 samples, 0.15%)</title><rect x="21.9719%" y="165" width="0.1518%" height="15" fill="rgb(247,138,52)"/><text x="22.2219%" y="175.50"></text></g><g><title>privacy_checking_modules (251,203 samples, 0.35%)</title><rect x="22.1237%" y="165" width="0.3461%" height="15" fill="rgb(213,79,30)"/><text x="22.3737%" y="175.50"></text></g><g><title>check_mod_privacy (249,733 samples, 0.34%)</title><rect x="22.1258%" y="149" width="0.3441%" height="15" fill="rgb(246,177,23)"/><text x="22.3758%" y="159.50"></text></g><g><title>misc_checking_3 (3,001,714 samples, 4.14%)</title><rect x="18.3500%" y="181" width="4.1354%" height="15" fill="rgb(230,62,27)"/><text x="18.6000%" y="191.50">misc_..</text></g><g><title>impl_parent (1,650,743 samples, 2.27%)</title><rect x="26.2905%" y="117" width="2.2742%" height="15" fill="rgb(216,154,8)"/><text x="26.5405%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,054,750 samples, 1.45%)</title><rect x="27.1116%" y="101" width="1.4531%" height="15" fill="rgb(244,35,45)"/><text x="27.3616%" y="111.50"></text></g><g><title>impl_trait_ref (4,893,612 samples, 6.74%)</title><rect x="28.5647%" y="117" width="6.7419%" height="15" fill="rgb(251,115,12)"/><text x="28.8147%" y="127.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,288,605 samples, 5.91%)</title><rect x="29.3983%" y="101" width="5.9084%" height="15" fill="rgb(240,54,50)"/><text x="29.6483%" y="111.50">metadata..</text></g><g><title>coherent_trait (9,879,901 samples, 13.61%)</title><rect x="22.5757%" y="149" width="13.6115%" height="15" fill="rgb(233,84,52)"/><text x="22.8257%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (9,864,801 samples, 13.59%)</title><rect x="22.5965%" y="133" width="13.5907%" height="15" fill="rgb(207,117,47)"/><text x="22.8465%" y="143.50">specialization_graph_..</text></g><g><title>trait_impls_of (637,417 samples, 0.88%)</title><rect x="35.3090%" y="117" width="0.8782%" height="15" fill="rgb(249,43,39)"/><text x="35.5590%" y="127.50"></text></g><g><title>implementations_of_trait (148,802 samples, 0.21%)</title><rect x="35.9822%" y="101" width="0.2050%" height="15" fill="rgb(209,38,44)"/><text x="36.2322%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (118,782 samples, 0.16%)</title><rect x="36.0235%" y="85" width="0.1636%" height="15" fill="rgb(236,212,23)"/><text x="36.2735%" y="95.50"></text></g><g><title>coherence_checking (9,974,611 samples, 13.74%)</title><rect x="22.5496%" y="165" width="13.7419%" height="15" fill="rgb(242,79,21)"/><text x="22.7996%" y="175.50">coherence_checking</text></g><g><title>adt_sized_constraint (73,000 samples, 0.10%)</title><rect x="45.7627%" y="117" width="0.1006%" height="15" fill="rgb(211,96,35)"/><text x="46.0127%" y="127.50"></text></g><g><title>associated_item (510,655 samples, 0.70%)</title><rect x="46.0650%" y="101" width="0.7035%" height="15" fill="rgb(253,215,40)"/><text x="46.3150%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (411,063 samples, 0.57%)</title><rect x="46.2022%" y="85" width="0.5663%" height="15" fill="rgb(211,81,21)"/><text x="46.4522%" y="95.50"></text></g><g><title>associated_items (672,256 samples, 0.93%)</title><rect x="45.8667%" y="117" width="0.9262%" height="15" fill="rgb(208,190,38)"/><text x="46.1167%" y="127.50"></text></g><g><title>dropck_outlives (129,801 samples, 0.18%)</title><rect x="46.8383%" y="117" width="0.1788%" height="15" fill="rgb(235,213,38)"/><text x="47.0883%" y="127.50"></text></g><g><title>adt_dtorck_constraint (74,581 samples, 0.10%)</title><rect x="46.9143%" y="101" width="0.1027%" height="15" fill="rgb(237,122,38)"/><text x="47.1643%" y="111.50"></text></g><g><title>predicates_of (139,711 samples, 0.19%)</title><rect x="47.9374%" y="101" width="0.1925%" height="15" fill="rgb(244,218,35)"/><text x="48.1874%" y="111.50"></text></g><g><title>predicates_defined_on (78,080 samples, 0.11%)</title><rect x="48.0223%" y="85" width="0.1076%" height="15" fill="rgb(240,68,47)"/><text x="48.2723%" y="95.50"></text></g><g><title>specializes (267,145 samples, 0.37%)</title><rect x="48.1298%" y="101" width="0.3680%" height="15" fill="rgb(210,16,53)"/><text x="48.3798%" y="111.50"></text></g><g><title>param_env (191,864 samples, 0.26%)</title><rect x="48.2335%" y="85" width="0.2643%" height="15" fill="rgb(235,124,12)"/><text x="48.4835%" y="95.50"></text></g><g><title>def_span (103,061 samples, 0.14%)</title><rect x="48.3559%" y="69" width="0.1420%" height="15" fill="rgb(224,169,11)"/><text x="48.6059%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (96,341 samples, 0.13%)</title><rect x="48.3652%" y="53" width="0.1327%" height="15" fill="rgb(250,166,2)"/><text x="48.6152%" y="63.50"></text></g><g><title>trait_impls_of (491,098 samples, 0.68%)</title><rect x="48.5032%" y="101" width="0.6766%" height="15" fill="rgb(242,216,29)"/><text x="48.7532%" y="111.50"></text></g><g><title>implementations_of_trait (157,702 samples, 0.22%)</title><rect x="48.9625%" y="85" width="0.2173%" height="15" fill="rgb(230,116,27)"/><text x="49.2125%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (119,612 samples, 0.16%)</title><rect x="49.0150%" y="69" width="0.1648%" height="15" fill="rgb(228,99,48)"/><text x="49.2650%" y="79.50"></text></g><g><title>evaluate_obligation (1,570,675 samples, 2.16%)</title><rect x="47.0171%" y="117" width="2.1639%" height="15" fill="rgb(253,11,6)"/><text x="47.2671%" y="127.50">e..</text></g><g><title>generics_of (108,172 samples, 0.15%)</title><rect x="49.2756%" y="117" width="0.1490%" height="15" fill="rgb(247,143,39)"/><text x="49.5256%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (90,932 samples, 0.13%)</title><rect x="49.2993%" y="101" width="0.1253%" height="15" fill="rgb(236,97,10)"/><text x="49.5493%" y="111.50"></text></g><g><title>method_autoderef_steps (124,500 samples, 0.17%)</title><rect x="49.7519%" y="117" width="0.1715%" height="15" fill="rgb(233,208,19)"/><text x="50.0019%" y="127.50"></text></g><g><title>object_safety_violations (154,431 samples, 0.21%)</title><rect x="49.9234%" y="117" width="0.2128%" height="15" fill="rgb(216,164,2)"/><text x="50.1734%" y="127.50"></text></g><g><title>predicates_of (173,523 samples, 0.24%)</title><rect x="50.1825%" y="117" width="0.2391%" height="15" fill="rgb(220,129,5)"/><text x="50.4325%" y="127.50"></text></g><g><title>predicates_defined_on (125,762 samples, 0.17%)</title><rect x="50.2483%" y="101" width="0.1733%" height="15" fill="rgb(242,17,10)"/><text x="50.4983%" y="111.50"></text></g><g><title>trait_impls_of (101,781 samples, 0.14%)</title><rect x="50.4265%" y="117" width="0.1402%" height="15" fill="rgb(242,107,0)"/><text x="50.6765%" y="127.50"></text></g><g><title>item_bodies_checking (10,408,477 samples, 14.34%)</title><rect x="36.3479%" y="165" width="14.3397%" height="15" fill="rgb(251,28,31)"/><text x="36.5979%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,406,177 samples, 14.34%)</title><rect x="36.3510%" y="149" width="14.3365%" height="15" fill="rgb(233,223,10)"/><text x="36.6010%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (10,359,547 samples, 14.27%)</title><rect x="36.4153%" y="133" width="14.2723%" height="15" fill="rgb(215,21,27)"/><text x="36.6653%" y="143.50">typeck</text></g><g><title>impl_trait_ref (133,112 samples, 0.18%)</title><rect x="51.5140%" y="85" width="0.1834%" height="15" fill="rgb(232,23,21)"/><text x="51.7640%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (114,831 samples, 0.16%)</title><rect x="51.5392%" y="69" width="0.1582%" height="15" fill="rgb(244,5,23)"/><text x="51.7892%" y="79.50"></text></g><g><title>adt_destructor (289,833 samples, 0.40%)</title><rect x="51.3400%" y="133" width="0.3993%" height="15" fill="rgb(226,81,46)"/><text x="51.5900%" y="143.50"></text></g><g><title>coherent_trait (285,893 samples, 0.39%)</title><rect x="51.3454%" y="117" width="0.3939%" height="15" fill="rgb(247,70,30)"/><text x="51.5954%" y="127.50"></text></g><g><title>specialization_graph_of (284,033 samples, 0.39%)</title><rect x="51.3479%" y="101" width="0.3913%" height="15" fill="rgb(212,68,19)"/><text x="51.5979%" y="111.50"></text></g><g><title>specializes (128,872 samples, 0.18%)</title><rect x="52.3129%" y="101" width="0.1775%" height="15" fill="rgb(240,187,13)"/><text x="52.5629%" y="111.50"></text></g><g><title>param_env (118,412 samples, 0.16%)</title><rect x="52.3273%" y="85" width="0.1631%" height="15" fill="rgb(223,113,26)"/><text x="52.5773%" y="95.50"></text></g><g><title>def_span (108,702 samples, 0.15%)</title><rect x="52.3407%" y="69" width="0.1498%" height="15" fill="rgb(206,192,2)"/><text x="52.5907%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (107,462 samples, 0.15%)</title><rect x="52.3424%" y="53" width="0.1480%" height="15" fill="rgb(241,108,4)"/><text x="52.5924%" y="63.50"></text></g><g><title>evaluate_obligation (246,523 samples, 0.34%)</title><rect x="52.1953%" y="117" width="0.3396%" height="15" fill="rgb(247,173,49)"/><text x="52.4453%" y="127.50"></text></g><g><title>item_types_checking (1,411,545 samples, 1.94%)</title><rect x="50.6875%" y="165" width="1.9447%" height="15" fill="rgb(224,114,35)"/><text x="50.9375%" y="175.50">i..</text></g><g><title>check_mod_item_types (1,409,415 samples, 1.94%)</title><rect x="50.6905%" y="149" width="1.9417%" height="15" fill="rgb(245,159,27)"/><text x="50.9405%" y="159.50">c..</text></g><g><title>typeck (568,416 samples, 0.78%)</title><rect x="51.8491%" y="133" width="0.7831%" height="15" fill="rgb(245,172,44)"/><text x="52.0991%" y="143.50"></text></g><g><title>fn_sig (268,945 samples, 0.37%)</title><rect x="53.1019%" y="133" width="0.3705%" height="15" fill="rgb(236,23,11)"/><text x="53.3519%" y="143.50"></text></g><g><title>named_region_map (572,675 samples, 0.79%)</title><rect x="53.7176%" y="117" width="0.7890%" height="15" fill="rgb(205,117,38)"/><text x="53.9676%" y="127.50"></text></g><g><title>resolve_lifetimes (524,855 samples, 0.72%)</title><rect x="53.7835%" y="101" width="0.7231%" height="15" fill="rgb(237,72,25)"/><text x="54.0335%" y="111.50"></text></g><g><title>lint_levels (134,842 samples, 0.19%)</title><rect x="54.3208%" y="85" width="0.1858%" height="15" fill="rgb(244,70,9)"/><text x="54.5708%" y="95.50"></text></g><g><title>generics_of (774,368 samples, 1.07%)</title><rect x="53.4724%" y="133" width="1.0668%" height="15" fill="rgb(217,125,39)"/><text x="53.7224%" y="143.50"></text></g><g><title>explicit_predicates_of (156,440 samples, 0.22%)</title><rect x="54.8350%" y="101" width="0.2155%" height="15" fill="rgb(235,36,10)"/><text x="55.0850%" y="111.50"></text></g><g><title>predicates_of (396,022 samples, 0.55%)</title><rect x="54.6025%" y="133" width="0.5456%" height="15" fill="rgb(251,123,47)"/><text x="54.8525%" y="143.50"></text></g><g><title>predicates_defined_on (331,592 samples, 0.46%)</title><rect x="54.6913%" y="117" width="0.4568%" height="15" fill="rgb(221,13,13)"/><text x="54.9413%" y="127.50"></text></g><g><title>type_collecting (2,139,383 samples, 2.95%)</title><rect x="52.6343%" y="165" width="2.9474%" height="15" fill="rgb(238,131,9)"/><text x="52.8843%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (2,127,763 samples, 2.93%)</title><rect x="52.6504%" y="149" width="2.9314%" height="15" fill="rgb(211,50,8)"/><text x="52.9004%" y="159.50">co..</text></g><g><title>type_of (280,863 samples, 0.39%)</title><rect x="55.1948%" y="133" width="0.3869%" height="15" fill="rgb(245,182,24)"/><text x="55.4448%" y="143.50"></text></g><g><title>type_of (122,251 samples, 0.17%)</title><rect x="55.4133%" y="117" width="0.1684%" height="15" fill="rgb(242,14,37)"/><text x="55.6633%" y="127.50"></text></g><g><title>evaluate_obligation (201,231 samples, 0.28%)</title><rect x="56.7196%" y="133" width="0.2772%" height="15" fill="rgb(246,228,12)"/><text x="56.9696%" y="143.50"></text></g><g><title>param_env (113,231 samples, 0.16%)</title><rect x="57.0787%" y="133" width="0.1560%" height="15" fill="rgb(213,55,15)"/><text x="57.3287%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,252,053 samples, 1.72%)</title><rect x="55.7163%" y="149" width="1.7249%" height="15" fill="rgb(209,9,3)"/><text x="55.9663%" y="159.50"></text></g><g><title>region_scope_tree (128,153 samples, 0.18%)</title><rect x="57.2647%" y="133" width="0.1766%" height="15" fill="rgb(230,59,30)"/><text x="57.5147%" y="143.50"></text></g><g><title>evaluate_obligation (212,702 samples, 0.29%)</title><rect x="58.2403%" y="133" width="0.2930%" height="15" fill="rgb(209,121,21)"/><text x="58.4903%" y="143.50"></text></g><g><title>param_env (215,902 samples, 0.30%)</title><rect x="58.5815%" y="133" width="0.2974%" height="15" fill="rgb(220,109,13)"/><text x="58.8315%" y="143.50"></text></g><g><title>check_item_well_formed (1,241,822 samples, 1.71%)</title><rect x="57.4413%" y="149" width="1.7108%" height="15" fill="rgb(232,18,1)"/><text x="57.6913%" y="159.50"></text></g><g><title>evaluate_obligation (96,662 samples, 0.13%)</title><rect x="59.2798%" y="133" width="0.1332%" height="15" fill="rgb(215,41,42)"/><text x="59.5298%" y="143.50"></text></g><g><title>analysis (42,385,573 samples, 58.39%)</title><rect x="1.0805%" y="197" width="58.3942%" height="15" fill="rgb(224,123,36)"/><text x="1.3305%" y="207.50">analysis</text></g><g><title>type_check_crate (26,848,789 samples, 36.99%)</title><rect x="22.4854%" y="181" width="36.9893%" height="15" fill="rgb(240,125,3)"/><text x="22.7354%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,822,602 samples, 3.89%)</title><rect x="55.5861%" y="165" width="3.8887%" height="15" fill="rgb(205,98,50)"/><text x="55.8361%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (234,173 samples, 0.32%)</title><rect x="59.1521%" y="149" width="0.3226%" height="15" fill="rgb(205,185,37)"/><text x="59.4021%" y="159.50"></text></g><g><title>codegen_crate (545,776 samples, 0.75%)</title><rect x="59.4910%" y="197" width="0.7519%" height="15" fill="rgb(238,207,15)"/><text x="59.7410%" y="207.50"></text></g><g><title>AST_validation (149,421 samples, 0.21%)</title><rect x="60.5618%" y="181" width="0.2059%" height="15" fill="rgb(213,199,42)"/><text x="60.8118%" y="191.50"></text></g><g><title>crate_injection (77,231 samples, 0.11%)</title><rect x="60.8409%" y="181" width="0.1064%" height="15" fill="rgb(235,201,11)"/><text x="61.0909%" y="191.50"></text></g><g><title>metadata_load_macro (97,741 samples, 0.13%)</title><rect x="77.0994%" y="149" width="0.1347%" height="15" fill="rgb(207,46,11)"/><text x="77.3494%" y="159.50"></text></g><g><title>macro_expand_crate (14,526,582 samples, 20.01%)</title><rect x="60.9473%" y="181" width="20.0131%" height="15" fill="rgb(241,35,35)"/><text x="61.1973%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (14,498,232 samples, 19.97%)</title><rect x="60.9863%" y="165" width="19.9741%" height="15" fill="rgb(243,32,47)"/><text x="61.2363%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,704,760 samples, 3.73%)</title><rect x="77.2341%" y="149" width="3.7263%" height="15" fill="rgb(247,202,23)"/><text x="77.4841%" y="159.50">meta..</text></g><g><title>metadata_register_crate (967,841 samples, 1.33%)</title><rect x="79.6270%" y="133" width="1.3334%" height="15" fill="rgb(219,102,11)"/><text x="79.8770%" y="143.50"></text></g><g><title>metadata_register_crate (78,291 samples, 0.11%)</title><rect x="80.8525%" y="117" width="0.1079%" height="15" fill="rgb(243,110,44)"/><text x="81.1025%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (205,473 samples, 0.28%)</title><rect x="80.9676%" y="181" width="0.2831%" height="15" fill="rgb(222,74,54)"/><text x="81.2176%" y="191.50"></text></g><g><title>finalize_macro_resolutions (114,182 samples, 0.16%)</title><rect x="81.3288%" y="165" width="0.1573%" height="15" fill="rgb(216,99,12)"/><text x="81.5788%" y="175.50"></text></g><g><title>late_resolve_crate (2,104,853 samples, 2.90%)</title><rect x="81.4861%" y="165" width="2.8998%" height="15" fill="rgb(226,22,26)"/><text x="81.7361%" y="175.50">la..</text></g><g><title>configure_and_expand (17,634,967 samples, 24.30%)</title><rect x="60.2429%" y="197" width="24.2955%" height="15" fill="rgb(217,163,10)"/><text x="60.4929%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,386,426 samples, 3.29%)</title><rect x="81.2507%" y="181" width="3.2878%" height="15" fill="rgb(213,25,53)"/><text x="81.5007%" y="191.50">res..</text></g><g><title>drop_ast (181,502 samples, 0.25%)</title><rect x="84.5385%" y="197" width="0.2501%" height="15" fill="rgb(252,105,26)"/><text x="84.7885%" y="207.50"></text></g><g><title>early_lint_checks (655,147 samples, 0.90%)</title><rect x="84.8072%" y="197" width="0.9026%" height="15" fill="rgb(220,39,43)"/><text x="85.0572%" y="207.50"></text></g><g><title>free_global_ctxt (2,904,613 samples, 4.00%)</title><rect x="85.7098%" y="197" width="4.0017%" height="15" fill="rgb(229,68,48)"/><text x="85.9598%" y="207.50">free..</text></g><g><title>generate_crate_metadata (628,537 samples, 0.87%)</title><rect x="89.7114%" y="197" width="0.8659%" height="15" fill="rgb(252,8,32)"/><text x="89.9614%" y="207.50"></text></g><g><title>hir_lowering (2,709,350 samples, 3.73%)</title><rect x="90.5773%" y="197" width="3.7326%" height="15" fill="rgb(223,20,43)"/><text x="90.8273%" y="207.50">hir_..</text></g><g><title>parse_crate (2,787,461 samples, 3.84%)</title><rect x="94.3730%" y="197" width="3.8403%" height="15" fill="rgb(229,81,49)"/><text x="94.6230%" y="207.50">pars..</text></g><g><title>prepare_outputs (319,414 samples, 0.44%)</title><rect x="98.2274%" y="197" width="0.4401%" height="15" fill="rgb(236,28,36)"/><text x="98.4774%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (538,316 samples, 0.74%)</title><rect x="98.6675%" y="197" width="0.7416%" height="15" fill="rgb(249,185,26)"/><text x="98.9175%" y="207.50"></text></g><g><title>setup_global_ctxt (140,582 samples, 0.19%)</title><rect x="99.4241%" y="197" width="0.1937%" height="15" fill="rgb(249,174,33)"/><text x="99.6741%" y="207.50"></text></g><g><title>all (72,585,199 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (72,585,199 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (277,463 samples, 0.38%)</title><rect x="99.6177%" y="197" width="0.3823%" height="15" fill="rgb(250,127,30)"/><text x="99.8677%" y="207.50"></text></g></svg></svg>