<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (712,908 samples, 0.25%)</title><rect x="9.1273%" y="149" width="0.2495%" height="15" fill="rgb(227,0,7)"/><text x="9.3773%" y="159.50"></text></g><g><title>is_copy_raw (574,733 samples, 0.20%)</title><rect x="9.1756%" y="133" width="0.2012%" height="15" fill="rgb(217,0,24)"/><text x="9.4256%" y="143.50"></text></g><g><title>evaluate_obligation (496,682 samples, 0.17%)</title><rect x="9.2030%" y="117" width="0.1738%" height="15" fill="rgb(221,193,54)"/><text x="9.4530%" y="127.50"></text></g><g><title>resolve_instance (642,137 samples, 0.22%)</title><rect x="9.3864%" y="149" width="0.2247%" height="15" fill="rgb(248,212,6)"/><text x="9.6364%" y="159.50"></text></g><g><title>thir_body (1,527,578 samples, 0.53%)</title><rect x="9.6244%" y="149" width="0.5346%" height="15" fill="rgb(208,68,35)"/><text x="9.8744%" y="159.50"></text></g><g><title>mir_const (9,329,699 samples, 3.27%)</title><rect x="6.9020%" y="197" width="3.2654%" height="15" fill="rgb(232,128,0)"/><text x="7.1520%" y="207.50">mir..</text></g><g><title>unsafety_check_result (8,001,029 samples, 2.80%)</title><rect x="7.3670%" y="181" width="2.8003%" height="15" fill="rgb(207,160,47)"/><text x="7.6170%" y="191.50">un..</text></g><g><title>mir_built (7,230,013 samples, 2.53%)</title><rect x="7.6368%" y="165" width="2.5305%" height="15" fill="rgb(228,23,34)"/><text x="7.8868%" y="175.50">mi..</text></g><g><title>mir_promoted (11,238,751 samples, 3.93%)</title><rect x="6.4446%" y="213" width="3.9335%" height="15" fill="rgb(218,30,26)"/><text x="6.6946%" y="223.50">mir_..</text></g><g><title>mir_const_qualif (602,186 samples, 0.21%)</title><rect x="10.1673%" y="197" width="0.2108%" height="15" fill="rgb(220,122,19)"/><text x="10.4173%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (428,486 samples, 0.15%)</title><rect x="10.3787%" y="213" width="0.1500%" height="15" fill="rgb(250,228,42)"/><text x="10.6287%" y="223.50"></text></g><g><title>type_op_prove_predicate (1,599,327 samples, 0.56%)</title><rect x="10.6201%" y="213" width="0.5598%" height="15" fill="rgb(240,193,28)"/><text x="10.8701%" y="223.50"></text></g><g><title>MIR_borrow_checking (30,579,405 samples, 10.70%)</title><rect x="0.4804%" y="245" width="10.7027%" height="15" fill="rgb(216,20,37)"/><text x="0.7304%" y="255.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (30,384,892 samples, 10.63%)</title><rect x="0.5484%" y="229" width="10.6347%" height="15" fill="rgb(206,188,39)"/><text x="0.7984%" y="239.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (484,616 samples, 0.17%)</title><rect x="11.5375%" y="213" width="0.1696%" height="15" fill="rgb(217,207,13)"/><text x="11.7875%" y="223.50"></text></g><g><title>should_inherit_track_caller (392,056 samples, 0.14%)</title><rect x="11.5699%" y="197" width="0.1372%" height="15" fill="rgb(231,73,38)"/><text x="11.8199%" y="207.50"></text></g><g><title>check_mod_attrs (937,421 samples, 0.33%)</title><rect x="11.3790%" y="229" width="0.3281%" height="15" fill="rgb(225,20,46)"/><text x="11.6290%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (491,266 samples, 0.17%)</title><rect x="11.8005%" y="229" width="0.1719%" height="15" fill="rgb(210,31,41)"/><text x="12.0505%" y="239.50"></text></g><g><title>misc_checking_1 (1,780,850 samples, 0.62%)</title><rect x="11.3667%" y="245" width="0.6233%" height="15" fill="rgb(221,200,47)"/><text x="11.6167%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (472,575 samples, 0.17%)</title><rect x="11.9905%" y="229" width="0.1654%" height="15" fill="rgb(226,26,5)"/><text x="12.2405%" y="239.50"></text></g><g><title>check_mod_liveness (346,235 samples, 0.12%)</title><rect x="12.0347%" y="213" width="0.1212%" height="15" fill="rgb(249,33,26)"/><text x="12.2847%" y="223.50"></text></g><g><title>misc_checking_2 (1,384,615 samples, 0.48%)</title><rect x="11.9900%" y="245" width="0.4846%" height="15" fill="rgb(235,183,28)"/><text x="12.2400%" y="255.50"></text></g><g><title>match_checking (910,610 samples, 0.32%)</title><rect x="12.1559%" y="229" width="0.3187%" height="15" fill="rgb(221,5,38)"/><text x="12.4059%" y="239.50"></text></g><g><title>check_match (862,950 samples, 0.30%)</title><rect x="12.1726%" y="213" width="0.3020%" height="15" fill="rgb(247,18,42)"/><text x="12.4226%" y="223.50"></text></g><g><title>death_checking (695,257 samples, 0.24%)</title><rect x="12.5753%" y="229" width="0.2433%" height="15" fill="rgb(241,131,45)"/><text x="12.8253%" y="239.50"></text></g><g><title>crate_lints (2,930,213 samples, 1.03%)</title><rect x="12.8192%" y="213" width="1.0256%" height="15" fill="rgb(249,31,29)"/><text x="13.0692%" y="223.50"></text></g><g><title>type_of (1,114,316 samples, 0.39%)</title><rect x="13.4547%" y="197" width="0.3900%" height="15" fill="rgb(225,111,53)"/><text x="13.7047%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (883,300 samples, 0.31%)</title><rect x="13.5356%" y="181" width="0.3092%" height="15" fill="rgb(238,160,17)"/><text x="13.7856%" y="191.50"></text></g><g><title>lint_checking (3,485,699 samples, 1.22%)</title><rect x="12.8186%" y="229" width="1.2200%" height="15" fill="rgb(214,148,48)"/><text x="13.0686%" y="239.50"></text></g><g><title>module_lints (553,866 samples, 0.19%)</title><rect x="13.8448%" y="213" width="0.1939%" height="15" fill="rgb(232,36,49)"/><text x="14.0948%" y="223.50"></text></g><g><title>lint_mod (547,696 samples, 0.19%)</title><rect x="13.8469%" y="197" width="0.1917%" height="15" fill="rgb(209,103,24)"/><text x="14.0969%" y="207.50"></text></g><g><title>privacy_access_levels (335,543 samples, 0.12%)</title><rect x="14.0386%" y="229" width="0.1174%" height="15" fill="rgb(229,88,8)"/><text x="14.2886%" y="239.50"></text></g><g><title>privacy_checking_modules (1,037,502 samples, 0.36%)</title><rect x="14.1560%" y="229" width="0.3631%" height="15" fill="rgb(213,181,19)"/><text x="14.4060%" y="239.50"></text></g><g><title>check_mod_privacy (1,032,502 samples, 0.36%)</title><rect x="14.1578%" y="213" width="0.3614%" height="15" fill="rgb(254,191,54)"/><text x="14.4078%" y="223.50"></text></g><g><title>misc_checking_3 (5,861,806 samples, 2.05%)</title><rect x="12.4746%" y="245" width="2.0516%" height="15" fill="rgb(241,83,37)"/><text x="12.7246%" y="255.50">m..</text></g><g><title>impl_trait_ref (333,014 samples, 0.12%)</title><rect x="14.6313%" y="149" width="0.1166%" height="15" fill="rgb(233,36,39)"/><text x="14.8813%" y="159.50"></text></g><g><title>adt_destructor (488,725 samples, 0.17%)</title><rect x="14.5853%" y="197" width="0.1711%" height="15" fill="rgb(226,3,54)"/><text x="14.8353%" y="207.50"></text></g><g><title>coherent_trait (484,495 samples, 0.17%)</title><rect x="14.5868%" y="181" width="0.1696%" height="15" fill="rgb(245,192,40)"/><text x="14.8368%" y="191.50"></text></g><g><title>specialization_graph_of (482,895 samples, 0.17%)</title><rect x="14.5874%" y="165" width="0.1690%" height="15" fill="rgb(238,167,29)"/><text x="14.8374%" y="175.50"></text></g><g><title>impl_parent (3,161,235 samples, 1.11%)</title><rect x="16.4341%" y="181" width="1.1064%" height="15" fill="rgb(232,182,51)"/><text x="16.6841%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,734,920 samples, 0.61%)</title><rect x="16.9333%" y="165" width="0.6072%" height="15" fill="rgb(231,60,39)"/><text x="17.1833%" y="175.50"></text></g><g><title>impl_trait_ref (6,070,428 samples, 2.12%)</title><rect x="17.5405%" y="181" width="2.1246%" height="15" fill="rgb(208,69,12)"/><text x="17.7905%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,834,866 samples, 1.69%)</title><rect x="17.9730%" y="165" width="1.6922%" height="15" fill="rgb(235,93,37)"/><text x="18.2230%" y="175.50"></text></g><g><title>coherent_trait (15,584,884 samples, 5.45%)</title><rect x="14.5656%" y="213" width="5.4547%" height="15" fill="rgb(213,116,39)"/><text x="14.8156%" y="223.50">coheren..</text></g><g><title>specialization_graph_of (14,735,895 samples, 5.16%)</title><rect x="14.8627%" y="197" width="5.1575%" height="15" fill="rgb(222,207,29)"/><text x="15.1127%" y="207.50">specia..</text></g><g><title>trait_impls_of (1,012,271 samples, 0.35%)</title><rect x="19.6660%" y="181" width="0.3543%" height="15" fill="rgb(206,96,30)"/><text x="19.9160%" y="191.50"></text></g><g><title>coherence_checking (15,672,896 samples, 5.49%)</title><rect x="14.5571%" y="229" width="5.4855%" height="15" fill="rgb(218,138,4)"/><text x="14.8071%" y="239.50">coheren..</text></g><g><title>associated_items (485,576 samples, 0.17%)</title><rect x="30.2565%" y="181" width="0.1700%" height="15" fill="rgb(250,191,14)"/><text x="30.5065%" y="191.50"></text></g><g><title>adt_def (372,114 samples, 0.13%)</title><rect x="30.5546%" y="85" width="0.1302%" height="15" fill="rgb(239,60,40)"/><text x="30.8046%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (371,874 samples, 0.13%)</title><rect x="30.5547%" y="69" width="0.1302%" height="15" fill="rgb(206,27,48)"/><text x="30.8047%" y="79.50"></text></g><g><title>item_attrs (369,804 samples, 0.13%)</title><rect x="30.5554%" y="53" width="0.1294%" height="15" fill="rgb(225,35,8)"/><text x="30.8054%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (369,424 samples, 0.13%)</title><rect x="30.5555%" y="37" width="0.1293%" height="15" fill="rgb(250,213,24)"/><text x="30.8055%" y="47.50"></text></g><g><title>adt_dtorck_constraint (377,074 samples, 0.13%)</title><rect x="30.5537%" y="101" width="0.1320%" height="15" fill="rgb(247,123,22)"/><text x="30.8037%" y="111.50"></text></g><g><title>adt_dtorck_constraint (403,045 samples, 0.14%)</title><rect x="30.5451%" y="117" width="0.1411%" height="15" fill="rgb(231,138,38)"/><text x="30.7951%" y="127.50"></text></g><g><title>adt_dtorck_constraint (441,465 samples, 0.15%)</title><rect x="30.5343%" y="133" width="0.1545%" height="15" fill="rgb(231,145,46)"/><text x="30.7843%" y="143.50"></text></g><g><title>adt_dtorck_constraint (454,015 samples, 0.16%)</title><rect x="30.5313%" y="149" width="0.1589%" height="15" fill="rgb(251,118,11)"/><text x="30.7813%" y="159.50"></text></g><g><title>dropck_outlives (725,031 samples, 0.25%)</title><rect x="30.4426%" y="181" width="0.2538%" height="15" fill="rgb(217,147,25)"/><text x="30.6926%" y="191.50"></text></g><g><title>adt_dtorck_constraint (570,979 samples, 0.20%)</title><rect x="30.4965%" y="165" width="0.1998%" height="15" fill="rgb(247,81,37)"/><text x="30.7465%" y="175.50"></text></g><g><title>generics_of (591,994 samples, 0.21%)</title><rect x="31.9524%" y="165" width="0.2072%" height="15" fill="rgb(209,12,38)"/><text x="32.2024%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (428,752 samples, 0.15%)</title><rect x="32.0096%" y="149" width="0.1501%" height="15" fill="rgb(227,1,9)"/><text x="32.2596%" y="159.50"></text></g><g><title>impl_trait_ref (849,711 samples, 0.30%)</title><rect x="32.2242%" y="165" width="0.2974%" height="15" fill="rgb(248,47,43)"/><text x="32.4742%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (708,399 samples, 0.25%)</title><rect x="32.2737%" y="149" width="0.2479%" height="15" fill="rgb(221,10,30)"/><text x="32.5237%" y="159.50"></text></g><g><title>predicates_of (826,421 samples, 0.29%)</title><rect x="32.5377%" y="165" width="0.2892%" height="15" fill="rgb(210,229,1)"/><text x="32.7877%" y="175.50"></text></g><g><title>predicates_defined_on (467,617 samples, 0.16%)</title><rect x="32.6633%" y="149" width="0.1637%" height="15" fill="rgb(222,148,37)"/><text x="32.9133%" y="159.50"></text></g><g><title>specializes (2,043,386 samples, 0.72%)</title><rect x="32.8269%" y="165" width="0.7152%" height="15" fill="rgb(234,67,33)"/><text x="33.0769%" y="175.50"></text></g><g><title>param_env (1,224,327 samples, 0.43%)</title><rect x="33.1136%" y="149" width="0.4285%" height="15" fill="rgb(247,98,35)"/><text x="33.3636%" y="159.50"></text></g><g><title>def_span (582,429 samples, 0.20%)</title><rect x="33.3383%" y="133" width="0.2038%" height="15" fill="rgb(247,138,52)"/><text x="33.5883%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (521,036 samples, 0.18%)</title><rect x="33.3597%" y="117" width="0.1824%" height="15" fill="rgb(213,79,30)"/><text x="33.6097%" y="127.50"></text></g><g><title>trait_impls_of (341,873 samples, 0.12%)</title><rect x="33.5459%" y="165" width="0.1197%" height="15" fill="rgb(246,177,23)"/><text x="33.7959%" y="175.50"></text></g><g><title>evaluate_obligation (8,490,430 samples, 2.97%)</title><rect x="30.6980%" y="181" width="2.9716%" height="15" fill="rgb(230,62,27)"/><text x="30.9480%" y="191.50">eva..</text></g><g><title>item_bodies_checking (40,491,735 samples, 14.17%)</title><rect x="20.0621%" y="229" width="14.1720%" height="15" fill="rgb(216,154,8)"/><text x="20.3121%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (40,488,025 samples, 14.17%)</title><rect x="20.0634%" y="213" width="14.1707%" height="15" fill="rgb(244,35,45)"/><text x="20.3134%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (40,345,382 samples, 14.12%)</title><rect x="20.1133%" y="197" width="14.1208%" height="15" fill="rgb(251,115,12)"/><text x="20.3633%" y="207.50">typeck</text></g><g><title>item_types_checking (1,332,825 samples, 0.47%)</title><rect x="34.2341%" y="229" width="0.4665%" height="15" fill="rgb(240,54,50)"/><text x="34.4841%" y="239.50"></text></g><g><title>check_mod_item_types (1,326,535 samples, 0.46%)</title><rect x="34.2363%" y="213" width="0.4643%" height="15" fill="rgb(233,84,52)"/><text x="34.4863%" y="223.50"></text></g><g><title>fn_sig (1,195,434 samples, 0.42%)</title><rect x="34.8388%" y="197" width="0.4184%" height="15" fill="rgb(207,117,47)"/><text x="35.0888%" y="207.50"></text></g><g><title>generics_of (381,753 samples, 0.13%)</title><rect x="35.2572%" y="197" width="0.1336%" height="15" fill="rgb(249,43,39)"/><text x="35.5072%" y="207.50"></text></g><g><title>late_bound_vars_map (378,285 samples, 0.13%)</title><rect x="35.5508%" y="149" width="0.1324%" height="15" fill="rgb(209,38,44)"/><text x="35.8008%" y="159.50"></text></g><g><title>resolve_lifetimes (363,604 samples, 0.13%)</title><rect x="35.5559%" y="133" width="0.1273%" height="15" fill="rgb(236,212,23)"/><text x="35.8059%" y="143.50"></text></g><g><title>explicit_predicates_of (584,076 samples, 0.20%)</title><rect x="35.4824%" y="165" width="0.2044%" height="15" fill="rgb(242,79,21)"/><text x="35.7324%" y="175.50"></text></g><g><title>predicates_of (875,370 samples, 0.31%)</title><rect x="35.4173%" y="197" width="0.3064%" height="15" fill="rgb(211,96,35)"/><text x="35.6673%" y="207.50"></text></g><g><title>predicates_defined_on (802,049 samples, 0.28%)</title><rect x="35.4429%" y="181" width="0.2807%" height="15" fill="rgb(253,215,40)"/><text x="35.6929%" y="191.50"></text></g><g><title>type_collecting (3,062,375 samples, 1.07%)</title><rect x="34.7012%" y="229" width="1.0718%" height="15" fill="rgb(211,81,21)"/><text x="34.9512%" y="239.50"></text></g><g><title>collect_mod_item_types (3,046,065 samples, 1.07%)</title><rect x="34.7069%" y="213" width="1.0661%" height="15" fill="rgb(208,190,38)"/><text x="34.9569%" y="223.50"></text></g><g><title>evaluate_obligation (392,095 samples, 0.14%)</title><rect x="36.7157%" y="197" width="0.1372%" height="15" fill="rgb(235,213,38)"/><text x="36.9657%" y="207.50"></text></g><g><title>param_env (448,883 samples, 0.16%)</title><rect x="36.9219%" y="197" width="0.1571%" height="15" fill="rgb(237,122,38)"/><text x="37.1719%" y="207.50"></text></g><g><title>region_scope_tree (592,996 samples, 0.21%)</title><rect x="37.0890%" y="197" width="0.2075%" height="15" fill="rgb(244,218,35)"/><text x="37.3390%" y="207.50"></text></g><g><title>check_impl_item_well_formed (3,901,163 samples, 1.37%)</title><rect x="35.9358%" y="213" width="1.3654%" height="15" fill="rgb(240,68,47)"/><text x="36.1858%" y="223.50"></text></g><g><title>evaluate_obligation (399,936 samples, 0.14%)</title><rect x="37.7578%" y="197" width="0.1400%" height="15" fill="rgb(210,16,53)"/><text x="38.0078%" y="207.50"></text></g><g><title>analysis (108,122,838 samples, 37.84%)</title><rect x="0.3462%" y="261" width="37.8428%" height="15" fill="rgb(235,124,12)"/><text x="0.5962%" y="271.50">analysis</text></g><g><title>type_check_crate (67,608,191 samples, 23.66%)</title><rect x="14.5263%" y="245" width="23.6627%" height="15" fill="rgb(224,169,11)"/><text x="14.7763%" y="255.50">type_check_crate</text></g><g><title>wf_checking (6,893,108 samples, 2.41%)</title><rect x="35.7764%" y="229" width="2.4126%" height="15" fill="rgb(250,166,2)"/><text x="36.0264%" y="239.50">wf..</text></g><g><title>check_item_well_formed (2,536,590 samples, 0.89%)</title><rect x="37.3012%" y="213" width="0.8878%" height="15" fill="rgb(242,216,29)"/><text x="37.5512%" y="223.50"></text></g><g><title>codegen_crate (529,956 samples, 0.19%)</title><rect x="38.1923%" y="261" width="0.1855%" height="15" fill="rgb(230,116,27)"/><text x="38.4423%" y="271.50"></text></g><g><title>metadata_register_crate (2,084,763 samples, 0.73%)</title><rect x="92.9938%" y="213" width="0.7297%" height="15" fill="rgb(228,99,48)"/><text x="93.2438%" y="223.50"></text></g><g><title>metadata_register_crate (767,797 samples, 0.27%)</title><rect x="93.4547%" y="197" width="0.2687%" height="15" fill="rgb(253,11,6)"/><text x="93.7047%" y="207.50"></text></g><g><title>macro_expand_crate (157,923,908 samples, 55.27%)</title><rect x="38.5760%" y="245" width="55.2731%" height="15" fill="rgb(247,143,39)"/><text x="38.8260%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (157,899,408 samples, 55.26%)</title><rect x="38.5846%" y="229" width="55.2645%" height="15" fill="rgb(236,97,10)"/><text x="38.8346%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (358,893 samples, 0.13%)</title><rect x="93.7234%" y="213" width="0.1256%" height="15" fill="rgb(233,208,19)"/><text x="93.9734%" y="223.50"></text></g><g><title>finalize_macro_resolutions (963,091 samples, 0.34%)</title><rect x="93.8863%" y="229" width="0.3371%" height="15" fill="rgb(216,164,2)"/><text x="94.1363%" y="239.50"></text></g><g><title>late_resolve_crate (2,002,772 samples, 0.70%)</title><rect x="94.2233%" y="229" width="0.7010%" height="15" fill="rgb(220,129,5)"/><text x="94.4733%" y="239.50"></text></g><g><title>configure_and_expand (161,727,471 samples, 56.60%)</title><rect x="38.3777%" y="261" width="56.6043%" height="15" fill="rgb(242,17,10)"/><text x="38.6277%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (3,176,446 samples, 1.11%)</title><rect x="93.8703%" y="245" width="1.1117%" height="15" fill="rgb(242,107,0)"/><text x="94.1203%" y="255.50"></text></g><g><title>drop_ast (612,077 samples, 0.21%)</title><rect x="94.9820%" y="261" width="0.2142%" height="15" fill="rgb(251,28,31)"/><text x="95.2320%" y="271.50"></text></g><g><title>early_lint_checks (514,116 samples, 0.18%)</title><rect x="95.2007%" y="261" width="0.1799%" height="15" fill="rgb(233,223,10)"/><text x="95.4507%" y="271.50"></text></g><g><title>free_global_ctxt (3,986,194 samples, 1.40%)</title><rect x="95.3806%" y="261" width="1.3952%" height="15" fill="rgb(215,21,27)"/><text x="95.6306%" y="271.50"></text></g><g><title>generate_crate_metadata (2,351,397 samples, 0.82%)</title><rect x="96.7758%" y="261" width="0.8230%" height="15" fill="rgb(232,23,21)"/><text x="97.0258%" y="271.50"></text></g><g><title>hir_lowering (4,533,341 samples, 1.59%)</title><rect x="97.5988%" y="261" width="1.5867%" height="15" fill="rgb(244,5,23)"/><text x="97.8488%" y="271.50"></text></g><g><title>parse_crate (655,657 samples, 0.23%)</title><rect x="99.2031%" y="261" width="0.2295%" height="15" fill="rgb(226,81,46)"/><text x="99.4531%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (915,010 samples, 0.32%)</title><rect x="99.5034%" y="261" width="0.3203%" height="15" fill="rgb(247,70,30)"/><text x="99.7534%" y="271.50"></text></g><g><title>all (285,715,907 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (285,715,907 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (388,204 samples, 0.14%)</title><rect x="99.8641%" y="261" width="0.1359%" height="15" fill="rgb(223,113,26)"/><text x="100.1141%" y="271.50"></text></g></svg></svg>