<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (137,180 samples, 0.20%)</title><rect x="8.9813%" y="101" width="0.1993%" height="15" fill="rgb(227,0,7)"/><text x="9.2313%" y="111.50"></text></g><g><title>item_attrs (176,852 samples, 0.26%)</title><rect x="9.5215%" y="69" width="0.2570%" height="15" fill="rgb(217,0,24)"/><text x="9.7715%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (171,442 samples, 0.25%)</title><rect x="9.5294%" y="53" width="0.2491%" height="15" fill="rgb(221,193,54)"/><text x="9.7794%" y="63.50"></text></g><g><title>codegen_fn_attrs (244,182 samples, 0.35%)</title><rect x="9.4375%" y="85" width="0.3548%" height="15" fill="rgb(248,212,6)"/><text x="9.6875%" y="95.50"></text></g><g><title>adt_drop_tys (81,301 samples, 0.12%)</title><rect x="11.3731%" y="53" width="0.1181%" height="15" fill="rgb(208,68,35)"/><text x="11.6231%" y="63.50"></text></g><g><title>needs_drop_raw (556,728 samples, 0.81%)</title><rect x="11.2996%" y="69" width="0.8089%" height="15" fill="rgb(232,128,0)"/><text x="11.5496%" y="79.50"></text></g><g><title>is_copy_raw (424,805 samples, 0.62%)</title><rect x="11.4913%" y="53" width="0.6172%" height="15" fill="rgb(207,160,47)"/><text x="11.7413%" y="63.50"></text></g><g><title>evaluate_obligation (368,633 samples, 0.54%)</title><rect x="11.5729%" y="37" width="0.5356%" height="15" fill="rgb(228,23,34)"/><text x="11.8229%" y="47.50"></text></g><g><title>resolve_instance (179,472 samples, 0.26%)</title><rect x="12.1085%" y="69" width="0.2608%" height="15" fill="rgb(218,30,26)"/><text x="12.3585%" y="79.50"></text></g><g><title>thir_body (399,996 samples, 0.58%)</title><rect x="12.3835%" y="69" width="0.5812%" height="15" fill="rgb(220,122,19)"/><text x="12.6335%" y="79.50"></text></g><g><title>mir_const (3,099,746 samples, 4.50%)</title><rect x="8.4713%" y="117" width="4.5037%" height="15" fill="rgb(250,228,42)"/><text x="8.7213%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (2,611,501 samples, 3.79%)</title><rect x="9.1807%" y="101" width="3.7943%" height="15" fill="rgb(240,193,28)"/><text x="9.4307%" y="111.50">unsa..</text></g><g><title>mir_built (2,190,548 samples, 3.18%)</title><rect x="9.7923%" y="85" width="3.1827%" height="15" fill="rgb(216,20,37)"/><text x="10.0423%" y="95.50">mir..</text></g><g><title>has_structural_eq_impls (105,701 samples, 0.15%)</title><rect x="13.1553%" y="101" width="0.1536%" height="15" fill="rgb(206,188,39)"/><text x="13.4053%" y="111.50"></text></g><g><title>mir_const (93,132 samples, 0.14%)</title><rect x="13.3798%" y="101" width="0.1353%" height="15" fill="rgb(217,207,13)"/><text x="13.6298%" y="111.50"></text></g><g><title>mir_promoted (3,812,894 samples, 5.54%)</title><rect x="8.0035%" y="133" width="5.5398%" height="15" fill="rgb(231,73,38)"/><text x="8.2535%" y="143.50">mir_pro..</text></g><g><title>mir_const_qualif (391,185 samples, 0.57%)</title><rect x="12.9750%" y="117" width="0.5684%" height="15" fill="rgb(225,20,46)"/><text x="13.2250%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (213,123 samples, 0.31%)</title><rect x="13.5439%" y="133" width="0.3097%" height="15" fill="rgb(210,31,41)"/><text x="13.7939%" y="143.50"></text></g><g><title>type_op_prove_predicate (814,331 samples, 1.18%)</title><rect x="13.9743%" y="133" width="1.1832%" height="15" fill="rgb(221,200,47)"/><text x="14.2243%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,267,974 samples, 13.47%)</title><rect x="1.6956%" y="165" width="13.4656%" height="15" fill="rgb(226,26,5)"/><text x="1.9456%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,219,904 samples, 13.40%)</title><rect x="1.7654%" y="149" width="13.3958%" height="15" fill="rgb(249,33,26)"/><text x="2.0154%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (151,221 samples, 0.22%)</title><rect x="15.1612%" y="165" width="0.2197%" height="15" fill="rgb(235,183,28)"/><text x="15.4112%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (114,571 samples, 0.17%)</title><rect x="15.2144%" y="149" width="0.1665%" height="15" fill="rgb(221,5,38)"/><text x="15.4644%" y="159.50"></text></g><g><title>hir_module_items (185,692 samples, 0.27%)</title><rect x="15.3809%" y="165" width="0.2698%" height="15" fill="rgb(247,18,42)"/><text x="15.6309%" y="175.50"></text></g><g><title>associated_item (75,640 samples, 0.11%)</title><rect x="16.1844%" y="101" width="0.1099%" height="15" fill="rgb(241,131,45)"/><text x="16.4344%" y="111.50"></text></g><g><title>get_lang_items (90,311 samples, 0.13%)</title><rect x="16.3396%" y="85" width="0.1312%" height="15" fill="rgb(249,31,29)"/><text x="16.5896%" y="95.50"></text></g><g><title>codegen_fn_attrs (247,402 samples, 0.36%)</title><rect x="16.2943%" y="101" width="0.3595%" height="15" fill="rgb(225,111,53)"/><text x="16.5443%" y="111.50"></text></g><g><title>codegen_fn_attrs (445,574 samples, 0.65%)</title><rect x="16.0168%" y="133" width="0.6474%" height="15" fill="rgb(238,160,17)"/><text x="16.2668%" y="143.50"></text></g><g><title>should_inherit_track_caller (382,423 samples, 0.56%)</title><rect x="16.1086%" y="117" width="0.5556%" height="15" fill="rgb(214,148,48)"/><text x="16.3586%" y="127.50"></text></g><g><title>check_mod_attrs (669,678 samples, 0.97%)</title><rect x="15.6918%" y="149" width="0.9730%" height="15" fill="rgb(232,36,49)"/><text x="15.9418%" y="159.50"></text></g><g><title>check_mod_const_bodies (121,951 samples, 0.18%)</title><rect x="16.6648%" y="149" width="0.1772%" height="15" fill="rgb(209,103,24)"/><text x="16.9148%" y="159.50"></text></g><g><title>lookup_deprecation_entry (140,501 samples, 0.20%)</title><rect x="17.1944%" y="133" width="0.2041%" height="15" fill="rgb(229,88,8)"/><text x="17.4444%" y="143.50"></text></g><g><title>stability_index (81,821 samples, 0.12%)</title><rect x="17.2796%" y="117" width="0.1189%" height="15" fill="rgb(213,181,19)"/><text x="17.5296%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (406,635 samples, 0.59%)</title><rect x="16.9466%" y="149" width="0.5908%" height="15" fill="rgb(254,191,54)"/><text x="17.1966%" y="159.50"></text></g><g><title>misc_checking_1 (1,350,025 samples, 1.96%)</title><rect x="15.6513%" y="165" width="1.9615%" height="15" fill="rgb(241,83,37)"/><text x="15.9013%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (172,632 samples, 0.25%)</title><rect x="17.6153%" y="149" width="0.2508%" height="15" fill="rgb(233,36,39)"/><text x="17.8653%" y="159.50"></text></g><g><title>check_mod_liveness (135,122 samples, 0.20%)</title><rect x="17.6698%" y="133" width="0.1963%" height="15" fill="rgb(226,3,54)"/><text x="17.9198%" y="143.50"></text></g><g><title>mir_borrowck (381,723 samples, 0.55%)</title><rect x="18.6081%" y="37" width="0.5546%" height="15" fill="rgb(245,192,40)"/><text x="18.8581%" y="47.50"></text></g><g><title>eval_to_const_value_raw (661,977 samples, 0.96%)</title><rect x="18.2031%" y="117" width="0.9618%" height="15" fill="rgb(238,167,29)"/><text x="18.4531%" y="127.50"></text></g><g><title>eval_to_const_value_raw (651,657 samples, 0.95%)</title><rect x="18.2181%" y="101" width="0.9468%" height="15" fill="rgb(232,182,51)"/><text x="18.4681%" y="111.50"></text></g><g><title>eval_to_allocation_raw (644,877 samples, 0.94%)</title><rect x="18.2280%" y="85" width="0.9370%" height="15" fill="rgb(231,60,39)"/><text x="18.4780%" y="95.50"></text></g><g><title>mir_for_ctfe (531,195 samples, 0.77%)</title><rect x="18.3932%" y="69" width="0.7718%" height="15" fill="rgb(208,69,12)"/><text x="18.6432%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (489,844 samples, 0.71%)</title><rect x="18.4532%" y="53" width="0.7117%" height="15" fill="rgb(235,93,37)"/><text x="18.7032%" y="63.50"></text></g><g><title>mir_const_qualif (189,023 samples, 0.27%)</title><rect x="19.1718%" y="117" width="0.2746%" height="15" fill="rgb(213,116,39)"/><text x="19.4218%" y="127.50"></text></g><g><title>mir_const (141,303 samples, 0.21%)</title><rect x="19.2411%" y="101" width="0.2053%" height="15" fill="rgb(222,207,29)"/><text x="19.4911%" y="111.50"></text></g><g><title>unsafety_check_result (94,331 samples, 0.14%)</title><rect x="19.3093%" y="85" width="0.1371%" height="15" fill="rgb(206,96,30)"/><text x="19.5593%" y="95.50"></text></g><g><title>misc_checking_2 (1,287,204 samples, 1.87%)</title><rect x="17.6128%" y="165" width="1.8702%" height="15" fill="rgb(218,138,4)"/><text x="17.8628%" y="175.50">m..</text></g><g><title>match_checking (1,112,852 samples, 1.62%)</title><rect x="17.8661%" y="149" width="1.6169%" height="15" fill="rgb(250,191,14)"/><text x="18.1161%" y="159.50"></text></g><g><title>check_match (1,097,942 samples, 1.60%)</title><rect x="17.8878%" y="133" width="1.5952%" height="15" fill="rgb(239,60,40)"/><text x="18.1378%" y="143.50"></text></g><g><title>check_private_in_public (81,161 samples, 0.12%)</title><rect x="19.4955%" y="149" width="0.1179%" height="15" fill="rgb(206,27,48)"/><text x="19.7455%" y="159.50"></text></g><g><title>death_checking (157,112 samples, 0.23%)</title><rect x="19.6134%" y="149" width="0.2283%" height="15" fill="rgb(225,35,8)"/><text x="19.8634%" y="159.50"></text></g><g><title>crate_lints (689,288 samples, 1.00%)</title><rect x="19.8437%" y="133" width="1.0015%" height="15" fill="rgb(250,213,24)"/><text x="20.0937%" y="143.50"></text></g><g><title>type_of (319,503 samples, 0.46%)</title><rect x="20.3810%" y="117" width="0.4642%" height="15" fill="rgb(247,123,22)"/><text x="20.6310%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (237,922 samples, 0.35%)</title><rect x="20.4995%" y="101" width="0.3457%" height="15" fill="rgb(231,138,38)"/><text x="20.7495%" y="111.50"></text></g><g><title>lint_checking (824,790 samples, 1.20%)</title><rect x="19.8417%" y="149" width="1.1984%" height="15" fill="rgb(231,145,46)"/><text x="20.0917%" y="159.50"></text></g><g><title>module_lints (134,102 samples, 0.19%)</title><rect x="20.8452%" y="133" width="0.1948%" height="15" fill="rgb(251,118,11)"/><text x="21.0952%" y="143.50"></text></g><g><title>lint_mod (132,312 samples, 0.19%)</title><rect x="20.8478%" y="117" width="0.1922%" height="15" fill="rgb(217,147,25)"/><text x="21.0978%" y="127.50"></text></g><g><title>privacy_access_levels (103,201 samples, 0.15%)</title><rect x="21.0400%" y="149" width="0.1499%" height="15" fill="rgb(247,81,37)"/><text x="21.2900%" y="159.50"></text></g><g><title>privacy_checking_modules (281,703 samples, 0.41%)</title><rect x="21.1900%" y="149" width="0.4093%" height="15" fill="rgb(209,12,38)"/><text x="21.4400%" y="159.50"></text></g><g><title>check_mod_privacy (280,053 samples, 0.41%)</title><rect x="21.1923%" y="133" width="0.4069%" height="15" fill="rgb(227,1,9)"/><text x="21.4423%" y="143.50"></text></g><g><title>misc_checking_3 (1,466,907 samples, 2.13%)</title><rect x="19.4830%" y="165" width="2.1313%" height="15" fill="rgb(248,47,43)"/><text x="19.7330%" y="175.50">m..</text></g><g><title>impl_parent (939,520 samples, 1.37%)</title><rect x="24.1068%" y="101" width="1.3650%" height="15" fill="rgb(221,10,30)"/><text x="24.3568%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (506,824 samples, 0.74%)</title><rect x="24.7355%" y="85" width="0.7364%" height="15" fill="rgb(210,229,1)"/><text x="24.9855%" y="95.50"></text></g><g><title>impl_trait_ref (2,408,738 samples, 3.50%)</title><rect x="25.4718%" y="101" width="3.4997%" height="15" fill="rgb(222,148,37)"/><text x="25.7218%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,970,526 samples, 2.86%)</title><rect x="26.1085%" y="85" width="2.8630%" height="15" fill="rgb(234,67,33)"/><text x="26.3585%" y="95.50">me..</text></g><g><title>coherent_trait (5,349,560 samples, 7.77%)</title><rect x="21.7153%" y="133" width="7.7725%" height="15" fill="rgb(247,98,35)"/><text x="21.9653%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (5,329,669 samples, 7.74%)</title><rect x="21.7442%" y="117" width="7.7436%" height="15" fill="rgb(247,138,52)"/><text x="21.9942%" y="127.50">specializat..</text></g><g><title>trait_impls_of (352,854 samples, 0.51%)</title><rect x="28.9752%" y="101" width="0.5127%" height="15" fill="rgb(213,79,30)"/><text x="29.2252%" y="111.50"></text></g><g><title>implementations_of_trait (80,431 samples, 0.12%)</title><rect x="29.3710%" y="85" width="0.1169%" height="15" fill="rgb(246,177,23)"/><text x="29.6210%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (70,810 samples, 0.10%)</title><rect x="29.3849%" y="69" width="0.1029%" height="15" fill="rgb(230,62,27)"/><text x="29.6349%" y="79.50"></text></g><g><title>coherence_checking (5,458,400 samples, 7.93%)</title><rect x="21.6815%" y="149" width="7.9306%" height="15" fill="rgb(216,154,8)"/><text x="21.9315%" y="159.50">coherence_c..</text></g><g><title>associated_item (276,224 samples, 0.40%)</title><rect x="44.3165%" y="85" width="0.4013%" height="15" fill="rgb(244,35,45)"/><text x="44.5665%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (210,963 samples, 0.31%)</title><rect x="44.4114%" y="69" width="0.3065%" height="15" fill="rgb(251,115,12)"/><text x="44.6614%" y="79.50"></text></g><g><title>associated_items (441,597 samples, 0.64%)</title><rect x="44.1098%" y="101" width="0.6416%" height="15" fill="rgb(240,54,50)"/><text x="44.3598%" y="111.50"></text></g><g><title>dropck_outlives (266,085 samples, 0.39%)</title><rect x="44.8219%" y="101" width="0.3866%" height="15" fill="rgb(233,84,52)"/><text x="45.0719%" y="111.50"></text></g><g><title>adt_dtorck_constraint (113,521 samples, 0.16%)</title><rect x="45.0436%" y="85" width="0.1649%" height="15" fill="rgb(207,117,47)"/><text x="45.2936%" y="95.50"></text></g><g><title>evaluate_obligation (444,966 samples, 0.65%)</title><rect x="45.2085%" y="101" width="0.6465%" height="15" fill="rgb(249,43,39)"/><text x="45.4585%" y="111.50"></text></g><g><title>trait_impls_of (102,353 samples, 0.15%)</title><rect x="45.7063%" y="85" width="0.1487%" height="15" fill="rgb(209,38,44)"/><text x="45.9563%" y="95.50"></text></g><g><title>fn_sig (116,091 samples, 0.17%)</title><rect x="45.8817%" y="101" width="0.1687%" height="15" fill="rgb(236,212,23)"/><text x="46.1317%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (101,890 samples, 0.15%)</title><rect x="45.9024%" y="85" width="0.1480%" height="15" fill="rgb(242,79,21)"/><text x="46.1524%" y="95.50"></text></g><g><title>generics_of (111,310 samples, 0.16%)</title><rect x="46.0504%" y="101" width="0.1617%" height="15" fill="rgb(211,96,35)"/><text x="46.3004%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (69,590 samples, 0.10%)</title><rect x="46.1110%" y="85" width="0.1011%" height="15" fill="rgb(253,215,40)"/><text x="46.3610%" y="95.50"></text></g><g><title>impl_trait_ref (96,370 samples, 0.14%)</title><rect x="46.2968%" y="101" width="0.1400%" height="15" fill="rgb(211,81,21)"/><text x="46.5468%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (86,090 samples, 0.13%)</title><rect x="46.3117%" y="85" width="0.1251%" height="15" fill="rgb(208,190,38)"/><text x="46.5617%" y="95.50"></text></g><g><title>item_attrs (146,614 samples, 0.21%)</title><rect x="46.4978%" y="101" width="0.2130%" height="15" fill="rgb(235,213,38)"/><text x="46.7478%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (139,404 samples, 0.20%)</title><rect x="46.5082%" y="85" width="0.2025%" height="15" fill="rgb(237,122,38)"/><text x="46.7582%" y="95.50"></text></g><g><title>method_autoderef_steps (351,426 samples, 0.51%)</title><rect x="46.7826%" y="101" width="0.5106%" height="15" fill="rgb(244,218,35)"/><text x="47.0326%" y="111.50"></text></g><g><title>evaluate_obligation (183,054 samples, 0.27%)</title><rect x="47.0273%" y="85" width="0.2660%" height="15" fill="rgb(240,68,47)"/><text x="47.2773%" y="95.50"></text></g><g><title>object_safety_violations (128,072 samples, 0.19%)</title><rect x="47.2932%" y="101" width="0.1861%" height="15" fill="rgb(210,16,53)"/><text x="47.5432%" y="111.50"></text></g><g><title>explicit_predicates_of (108,682 samples, 0.16%)</title><rect x="47.7897%" y="69" width="0.1579%" height="15" fill="rgb(235,124,12)"/><text x="48.0397%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (86,140 samples, 0.13%)</title><rect x="47.8225%" y="53" width="0.1252%" height="15" fill="rgb(224,169,11)"/><text x="48.0725%" y="63.50"></text></g><g><title>predicates_of (330,336 samples, 0.48%)</title><rect x="47.5325%" y="101" width="0.4800%" height="15" fill="rgb(250,166,2)"/><text x="47.7825%" y="111.50"></text></g><g><title>predicates_defined_on (237,075 samples, 0.34%)</title><rect x="47.6680%" y="85" width="0.3445%" height="15" fill="rgb(242,216,29)"/><text x="47.9180%" y="95.50"></text></g><g><title>type_of (75,980 samples, 0.11%)</title><rect x="48.0667%" y="101" width="0.1104%" height="15" fill="rgb(230,116,27)"/><text x="48.3167%" y="111.50"></text></g><g><title>typeck (710,958 samples, 1.03%)</title><rect x="48.1771%" y="101" width="1.0330%" height="15" fill="rgb(228,99,48)"/><text x="48.4271%" y="111.50"></text></g><g><title>item_bodies_checking (13,485,630 samples, 19.59%)</title><rect x="29.6728%" y="149" width="19.5935%" height="15" fill="rgb(253,11,6)"/><text x="29.9228%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,482,930 samples, 19.59%)</title><rect x="29.6768%" y="133" width="19.5896%" height="15" fill="rgb(247,143,39)"/><text x="29.9268%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (13,439,610 samples, 19.53%)</title><rect x="29.7397%" y="117" width="19.5267%" height="15" fill="rgb(236,97,10)"/><text x="29.9897%" y="127.50">typeck</text></g><g><title>adt_destructor (186,352 samples, 0.27%)</title><rect x="49.8861%" y="117" width="0.2708%" height="15" fill="rgb(233,208,19)"/><text x="50.1361%" y="127.50"></text></g><g><title>coherent_trait (179,442 samples, 0.26%)</title><rect x="49.8961%" y="101" width="0.2607%" height="15" fill="rgb(216,164,2)"/><text x="50.1461%" y="111.50"></text></g><g><title>specialization_graph_of (175,872 samples, 0.26%)</title><rect x="49.9013%" y="85" width="0.2555%" height="15" fill="rgb(220,129,5)"/><text x="50.1513%" y="95.50"></text></g><g><title>item_types_checking (885,360 samples, 1.29%)</title><rect x="49.2664%" y="149" width="1.2864%" height="15" fill="rgb(242,17,10)"/><text x="49.5164%" y="159.50"></text></g><g><title>check_mod_item_types (880,770 samples, 1.28%)</title><rect x="49.2730%" y="133" width="1.2797%" height="15" fill="rgb(242,107,0)"/><text x="49.5230%" y="143.50"></text></g><g><title>typeck (174,702 samples, 0.25%)</title><rect x="50.2989%" y="117" width="0.2538%" height="15" fill="rgb(251,28,31)"/><text x="50.5489%" y="127.50"></text></g><g><title>late_bound_vars_map (213,861 samples, 0.31%)</title><rect x="51.1992%" y="101" width="0.3107%" height="15" fill="rgb(233,223,10)"/><text x="51.4492%" y="111.50"></text></g><g><title>resolve_lifetimes (199,651 samples, 0.29%)</title><rect x="51.2198%" y="85" width="0.2901%" height="15" fill="rgb(215,21,27)"/><text x="51.4698%" y="95.50"></text></g><g><title>fn_sig (434,594 samples, 0.63%)</title><rect x="50.9351%" y="117" width="0.6314%" height="15" fill="rgb(232,23,21)"/><text x="51.1851%" y="127.50"></text></g><g><title>generics_of (187,031 samples, 0.27%)</title><rect x="51.5665%" y="117" width="0.2717%" height="15" fill="rgb(244,5,23)"/><text x="51.8165%" y="127.50"></text></g><g><title>late_bound_vars_map (369,694 samples, 0.54%)</title><rect x="52.5717%" y="69" width="0.5371%" height="15" fill="rgb(226,81,46)"/><text x="52.8217%" y="79.50"></text></g><g><title>resolve_lifetimes (345,194 samples, 0.50%)</title><rect x="52.6073%" y="53" width="0.5015%" height="15" fill="rgb(247,70,30)"/><text x="52.8573%" y="63.50"></text></g><g><title>lint_levels (146,131 samples, 0.21%)</title><rect x="52.8965%" y="37" width="0.2123%" height="15" fill="rgb(212,68,19)"/><text x="53.1465%" y="47.50"></text></g><g><title>explicit_predicates_of (715,248 samples, 1.04%)</title><rect x="52.1006%" y="85" width="1.0392%" height="15" fill="rgb(240,187,13)"/><text x="52.3506%" y="95.50"></text></g><g><title>predicates_of (1,070,564 samples, 1.56%)</title><rect x="51.9253%" y="117" width="1.5554%" height="15" fill="rgb(223,113,26)"/><text x="52.1753%" y="127.50"></text></g><g><title>predicates_defined_on (1,025,422 samples, 1.49%)</title><rect x="51.9908%" y="101" width="1.4899%" height="15" fill="rgb(206,192,2)"/><text x="52.2408%" y="111.50"></text></g><g><title>inferred_outlives_of (234,603 samples, 0.34%)</title><rect x="53.1398%" y="85" width="0.3409%" height="15" fill="rgb(241,108,4)"/><text x="53.3898%" y="95.50"></text></g><g><title>inferred_outlives_crate (214,462 samples, 0.31%)</title><rect x="53.1691%" y="69" width="0.3116%" height="15" fill="rgb(247,173,49)"/><text x="53.4191%" y="79.50"></text></g><g><title>type_of (111,601 samples, 0.16%)</title><rect x="53.3186%" y="53" width="0.1621%" height="15" fill="rgb(224,114,35)"/><text x="53.5686%" y="63.50"></text></g><g><title>type_collecting (2,144,324 samples, 3.12%)</title><rect x="50.5542%" y="149" width="3.1155%" height="15" fill="rgb(245,159,27)"/><text x="50.8042%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (2,132,964 samples, 3.10%)</title><rect x="50.5707%" y="133" width="3.0990%" height="15" fill="rgb(245,172,44)"/><text x="50.8207%" y="143.50">col..</text></g><g><title>type_of (130,112 samples, 0.19%)</title><rect x="53.4807%" y="117" width="0.1890%" height="15" fill="rgb(236,23,11)"/><text x="53.7307%" y="127.50"></text></g><g><title>evaluate_obligation (837,275 samples, 1.22%)</title><rect x="57.4199%" y="117" width="1.2165%" height="15" fill="rgb(205,117,38)"/><text x="57.6699%" y="127.50"></text></g><g><title>implied_outlives_bounds (389,345 samples, 0.57%)</title><rect x="58.6364%" y="117" width="0.5657%" height="15" fill="rgb(237,72,25)"/><text x="58.8864%" y="127.50"></text></g><g><title>param_env (403,877 samples, 0.59%)</title><rect x="59.2021%" y="117" width="0.5868%" height="15" fill="rgb(244,70,9)"/><text x="59.4521%" y="127.50"></text></g><g><title>region_scope_tree (356,364 samples, 0.52%)</title><rect x="59.8564%" y="117" width="0.5178%" height="15" fill="rgb(217,125,39)"/><text x="60.1064%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,441,671 samples, 6.45%)</title><rect x="53.9421%" y="133" width="6.4534%" height="15" fill="rgb(235,36,10)"/><text x="54.1921%" y="143.50">check_im..</text></g><g><title>adt_def (159,982 samples, 0.23%)</title><rect x="62.4122%" y="85" width="0.2324%" height="15" fill="rgb(251,123,47)"/><text x="62.6622%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (156,112 samples, 0.23%)</title><rect x="62.4178%" y="69" width="0.2268%" height="15" fill="rgb(221,13,13)"/><text x="62.6678%" y="79.50"></text></g><g><title>item_attrs (127,832 samples, 0.19%)</title><rect x="62.4589%" y="53" width="0.1857%" height="15" fill="rgb(238,131,9)"/><text x="62.7089%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (124,752 samples, 0.18%)</title><rect x="62.4634%" y="37" width="0.1813%" height="15" fill="rgb(211,50,8)"/><text x="62.7134%" y="47.50"></text></g><g><title>adt_sized_constraint (192,952 samples, 0.28%)</title><rect x="62.3770%" y="117" width="0.2803%" height="15" fill="rgb(245,182,24)"/><text x="62.6270%" y="127.50"></text></g><g><title>adt_sized_constraint (182,252 samples, 0.26%)</title><rect x="62.3925%" y="101" width="0.2648%" height="15" fill="rgb(242,14,37)"/><text x="62.6425%" y="111.50"></text></g><g><title>implied_outlives_bounds (175,631 samples, 0.26%)</title><rect x="62.6915%" y="117" width="0.2552%" height="15" fill="rgb(246,228,12)"/><text x="62.9415%" y="127.50"></text></g><g><title>param_env (458,307 samples, 0.67%)</title><rect x="62.9467%" y="117" width="0.6659%" height="15" fill="rgb(213,55,15)"/><text x="63.1967%" y="127.50"></text></g><g><title>predicates_of (112,180 samples, 0.16%)</title><rect x="63.6126%" y="117" width="0.1630%" height="15" fill="rgb(209,9,3)"/><text x="63.8626%" y="127.50"></text></g><g><title>predicates_defined_on (73,540 samples, 0.11%)</title><rect x="63.6687%" y="101" width="0.1068%" height="15" fill="rgb(230,59,30)"/><text x="63.9187%" y="111.50"></text></g><g><title>trait_impls_of (81,141 samples, 0.12%)</title><rect x="63.8490%" y="117" width="0.1179%" height="15" fill="rgb(209,121,21)"/><text x="64.0990%" y="127.50"></text></g><g><title>analysis (43,265,961 samples, 62.86%)</title><rect x="1.2651%" y="181" width="62.8619%" height="15" fill="rgb(220,109,13)"/><text x="1.5151%" y="191.50">analysis</text></g><g><title>type_check_crate (29,260,235 samples, 42.51%)</title><rect x="21.6143%" y="165" width="42.5127%" height="15" fill="rgb(232,18,1)"/><text x="21.8643%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,195,290 samples, 10.45%)</title><rect x="53.6729%" y="149" width="10.4542%" height="15" fill="rgb(215,41,42)"/><text x="53.9229%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (2,568,337 samples, 3.73%)</title><rect x="60.3955%" y="133" width="3.7316%" height="15" fill="rgb(224,123,36)"/><text x="60.6455%" y="143.50">chec..</text></g><g><title>variances_of (110,201 samples, 0.16%)</title><rect x="63.9669%" y="117" width="0.1601%" height="15" fill="rgb(240,125,3)"/><text x="64.2169%" y="127.50"></text></g><g><title>crate_variances (104,031 samples, 0.15%)</title><rect x="63.9759%" y="101" width="0.1511%" height="15" fill="rgb(205,98,50)"/><text x="64.2259%" y="111.50"></text></g><g><title>codegen_crate (340,323 samples, 0.49%)</title><rect x="64.1447%" y="181" width="0.4945%" height="15" fill="rgb(205,185,37)"/><text x="64.3947%" y="191.50"></text></g><g><title>AST_validation (138,661 samples, 0.20%)</title><rect x="64.9679%" y="165" width="0.2015%" height="15" fill="rgb(238,207,15)"/><text x="65.2179%" y="175.50"></text></g><g><title>crate_injection (73,451 samples, 0.11%)</title><rect x="65.2583%" y="165" width="0.1067%" height="15" fill="rgb(213,199,42)"/><text x="65.5083%" y="175.50"></text></g><g><title>metadata_load_macro (140,873 samples, 0.20%)</title><rect x="78.2869%" y="133" width="0.2047%" height="15" fill="rgb(235,201,11)"/><text x="78.5369%" y="143.50"></text></g><g><title>macro_expand_crate (9,239,262 samples, 13.42%)</title><rect x="65.3650%" y="165" width="13.4239%" height="15" fill="rgb(207,46,11)"/><text x="65.6150%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (9,213,952 samples, 13.39%)</title><rect x="65.4018%" y="149" width="13.3871%" height="15" fill="rgb(241,35,35)"/><text x="65.6518%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (204,622 samples, 0.30%)</title><rect x="78.4916%" y="133" width="0.2973%" height="15" fill="rgb(243,32,47)"/><text x="78.7416%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (334,583 samples, 0.49%)</title><rect x="78.8064%" y="165" width="0.4861%" height="15" fill="rgb(247,202,23)"/><text x="79.0564%" y="175.50"></text></g><g><title>late_resolve_crate (1,774,960 samples, 2.58%)</title><rect x="79.4317%" y="149" width="2.5789%" height="15" fill="rgb(219,102,11)"/><text x="79.6817%" y="159.50">la..</text></g><g><title>configure_and_expand (12,061,104 samples, 17.52%)</title><rect x="64.6392%" y="181" width="17.5238%" height="15" fill="rgb(243,110,44)"/><text x="64.8892%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,975,662 samples, 2.87%)</title><rect x="79.2925%" y="165" width="2.8705%" height="15" fill="rgb(222,74,54)"/><text x="79.5425%" y="175.50">re..</text></g><g><title>drop_ast (219,413 samples, 0.32%)</title><rect x="82.1630%" y="181" width="0.3188%" height="15" fill="rgb(216,99,12)"/><text x="82.4130%" y="191.50"></text></g><g><title>early_lint_checks (390,264 samples, 0.57%)</title><rect x="82.5028%" y="181" width="0.5670%" height="15" fill="rgb(226,22,26)"/><text x="82.7528%" y="191.50"></text></g><g><title>free_global_ctxt (1,680,219 samples, 2.44%)</title><rect x="83.0698%" y="181" width="2.4412%" height="15" fill="rgb(217,163,10)"/><text x="83.3198%" y="191.50">fr..</text></g><g><title>mir_for_ctfe (85,071 samples, 0.12%)</title><rect x="86.2725%" y="165" width="0.1236%" height="15" fill="rgb(213,25,53)"/><text x="86.5225%" y="175.50"></text></g><g><title>generate_crate_metadata (637,367 samples, 0.93%)</title><rect x="85.5110%" y="181" width="0.9260%" height="15" fill="rgb(252,105,26)"/><text x="85.7610%" y="191.50"></text></g><g><title>hir_lowering (2,399,456 samples, 3.49%)</title><rect x="86.4371%" y="181" width="3.4862%" height="15" fill="rgb(220,39,43)"/><text x="86.6871%" y="191.50">hir..</text></g><g><title>parse_crate (5,590,582 samples, 8.12%)</title><rect x="89.9805%" y="181" width="8.1227%" height="15" fill="rgb(229,68,48)"/><text x="90.2305%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (333,834 samples, 0.49%)</title><rect x="98.1177%" y="181" width="0.4850%" height="15" fill="rgb(252,8,32)"/><text x="98.3677%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (443,305 samples, 0.64%)</title><rect x="98.6027%" y="181" width="0.6441%" height="15" fill="rgb(223,20,43)"/><text x="98.8527%" y="191.50"></text></g><g><title>setup_global_ctxt (153,372 samples, 0.22%)</title><rect x="99.2619%" y="181" width="0.2228%" height="15" fill="rgb(229,81,49)"/><text x="99.5119%" y="191.50"></text></g><g><title>all (68,826,975 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (68,826,975 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (354,644 samples, 0.52%)</title><rect x="99.4847%" y="181" width="0.5153%" height="15" fill="rgb(249,174,33)"/><text x="99.7347%" y="191.50"></text></g></svg></svg>