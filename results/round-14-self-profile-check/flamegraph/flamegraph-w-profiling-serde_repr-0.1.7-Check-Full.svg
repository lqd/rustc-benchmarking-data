<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (255,394 samples, 0.19%)</title><rect x="10.7359%" y="165" width="0.1888%" height="15" fill="rgb(227,0,7)"/><text x="10.9859%" y="175.50"></text></g><g><title>item_attrs (191,911 samples, 0.14%)</title><rect x="11.2255%" y="133" width="0.1419%" height="15" fill="rgb(217,0,24)"/><text x="11.4755%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (185,321 samples, 0.14%)</title><rect x="11.2304%" y="117" width="0.1370%" height="15" fill="rgb(221,193,54)"/><text x="11.4804%" y="127.50"></text></g><g><title>codegen_fn_attrs (281,283 samples, 0.21%)</title><rect x="11.1739%" y="149" width="0.2080%" height="15" fill="rgb(248,212,6)"/><text x="11.4239%" y="159.50"></text></g><g><title>adt_drop_tys (213,193 samples, 0.16%)</title><rect x="13.5696%" y="101" width="0.1576%" height="15" fill="rgb(208,68,35)"/><text x="13.8196%" y="111.50"></text></g><g><title>is_copy_raw (151,663 samples, 0.11%)</title><rect x="13.7272%" y="101" width="0.1121%" height="15" fill="rgb(232,128,0)"/><text x="13.9772%" y="111.50"></text></g><g><title>param_env (146,611 samples, 0.11%)</title><rect x="13.8393%" y="101" width="0.1084%" height="15" fill="rgb(207,160,47)"/><text x="14.0893%" y="111.50"></text></g><g><title>adt_drop_tys (560,188 samples, 0.41%)</title><rect x="13.5343%" y="117" width="0.4141%" height="15" fill="rgb(228,23,34)"/><text x="13.7843%" y="127.50"></text></g><g><title>needs_drop_raw (1,222,936 samples, 0.90%)</title><rect x="13.4605%" y="133" width="0.9041%" height="15" fill="rgb(218,30,26)"/><text x="13.7105%" y="143.50"></text></g><g><title>is_copy_raw (562,968 samples, 0.42%)</title><rect x="13.9484%" y="117" width="0.4162%" height="15" fill="rgb(220,122,19)"/><text x="14.1984%" y="127.50"></text></g><g><title>evaluate_obligation (480,758 samples, 0.36%)</title><rect x="14.0092%" y="101" width="0.3554%" height="15" fill="rgb(250,228,42)"/><text x="14.2592%" y="111.50"></text></g><g><title>impl_parent (223,525 samples, 0.17%)</title><rect x="14.7896%" y="101" width="0.1653%" height="15" fill="rgb(240,193,28)"/><text x="15.0396%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (157,662 samples, 0.12%)</title><rect x="14.8383%" y="85" width="0.1166%" height="15" fill="rgb(216,20,37)"/><text x="15.0883%" y="95.50"></text></g><g><title>specialization_graph_of (1,096,093 samples, 0.81%)</title><rect x="14.5222%" y="117" width="0.8103%" height="15" fill="rgb(206,188,39)"/><text x="14.7722%" y="127.50"></text></g><g><title>impl_trait_ref (510,946 samples, 0.38%)</title><rect x="14.9548%" y="101" width="0.3777%" height="15" fill="rgb(217,207,13)"/><text x="15.2048%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (447,365 samples, 0.33%)</title><rect x="15.0018%" y="85" width="0.3307%" height="15" fill="rgb(231,73,38)"/><text x="15.2518%" y="95.50"></text></g><g><title>resolve_instance (1,331,155 samples, 0.98%)</title><rect x="14.3647%" y="133" width="0.9841%" height="15" fill="rgb(225,20,46)"/><text x="14.6147%" y="143.50"></text></g><g><title>thir_body (1,114,361 samples, 0.82%)</title><rect x="15.3629%" y="133" width="0.8238%" height="15" fill="rgb(210,31,41)"/><text x="15.6129%" y="143.50"></text></g><g><title>mir_const (7,971,548 samples, 5.89%)</title><rect x="10.3014%" y="181" width="5.8934%" height="15" fill="rgb(221,200,47)"/><text x="10.5514%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (7,128,508 samples, 5.27%)</title><rect x="10.9247%" y="165" width="5.2701%" height="15" fill="rgb(226,26,5)"/><text x="11.1747%" y="175.50">unsafe..</text></g><g><title>mir_built (6,510,121 samples, 4.81%)</title><rect x="11.3819%" y="149" width="4.8129%" height="15" fill="rgb(249,33,26)"/><text x="11.6319%" y="159.50">mir_bu..</text></g><g><title>has_structural_eq_impls (140,111 samples, 0.10%)</title><rect x="16.2481%" y="165" width="0.1036%" height="15" fill="rgb(235,183,28)"/><text x="16.4981%" y="175.50"></text></g><g><title>mir_promoted (9,019,308 samples, 6.67%)</title><rect x="9.8658%" y="197" width="6.6680%" height="15" fill="rgb(221,5,38)"/><text x="10.1158%" y="207.50">mir_promo..</text></g><g><title>mir_const_qualif (458,556 samples, 0.34%)</title><rect x="16.1948%" y="181" width="0.3390%" height="15" fill="rgb(247,18,42)"/><text x="16.4448%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (291,265 samples, 0.22%)</title><rect x="16.5338%" y="197" width="0.2153%" height="15" fill="rgb(241,131,45)"/><text x="16.7838%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (886,740 samples, 0.66%)</title><rect x="16.7491%" y="197" width="0.6556%" height="15" fill="rgb(249,31,29)"/><text x="16.9991%" y="207.50"></text></g><g><title>normalize_projection_ty (638,265 samples, 0.47%)</title><rect x="16.9328%" y="181" width="0.4719%" height="15" fill="rgb(225,111,53)"/><text x="17.1828%" y="191.50"></text></g><g><title>type_op_normalize_predicate (264,274 samples, 0.20%)</title><rect x="17.4047%" y="197" width="0.1954%" height="15" fill="rgb(238,160,17)"/><text x="17.6547%" y="207.50"></text></g><g><title>type_op_prove_predicate (2,115,426 samples, 1.56%)</title><rect x="17.6001%" y="197" width="1.5639%" height="15" fill="rgb(214,148,48)"/><text x="17.8501%" y="207.50"></text></g><g><title>MIR_borrow_checking (25,004,628 samples, 18.49%)</title><rect x="0.6806%" y="229" width="18.4859%" height="15" fill="rgb(232,36,49)"/><text x="0.9306%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,965,907 samples, 18.46%)</title><rect x="0.7092%" y="213" width="18.4573%" height="15" fill="rgb(209,103,24)"/><text x="0.9592%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (219,573 samples, 0.16%)</title><rect x="19.4858%" y="197" width="0.1623%" height="15" fill="rgb(229,88,8)"/><text x="19.7358%" y="207.50"></text></g><g><title>check_mod_attrs (395,364 samples, 0.29%)</title><rect x="19.3559%" y="213" width="0.2923%" height="15" fill="rgb(213,181,19)"/><text x="19.6059%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (231,174 samples, 0.17%)</title><rect x="19.7237%" y="213" width="0.1709%" height="15" fill="rgb(254,191,54)"/><text x="19.9737%" y="223.50"></text></g><g><title>misc_checking_1 (782,849 samples, 0.58%)</title><rect x="19.3398%" y="229" width="0.5788%" height="15" fill="rgb(241,83,37)"/><text x="19.5898%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (505,866 samples, 0.37%)</title><rect x="19.9197%" y="213" width="0.3740%" height="15" fill="rgb(233,36,39)"/><text x="20.1697%" y="223.50"></text></g><g><title>check_mod_liveness (426,226 samples, 0.32%)</title><rect x="19.9786%" y="197" width="0.3151%" height="15" fill="rgb(226,3,54)"/><text x="20.2286%" y="207.50"></text></g><g><title>type_uninhabited_from (153,911 samples, 0.11%)</title><rect x="20.1799%" y="181" width="0.1138%" height="15" fill="rgb(245,192,40)"/><text x="20.4299%" y="191.50"></text></g><g><title>misc_checking_2 (959,701 samples, 0.71%)</title><rect x="19.9185%" y="229" width="0.7095%" height="15" fill="rgb(238,167,29)"/><text x="20.1685%" y="239.50"></text></g><g><title>match_checking (452,185 samples, 0.33%)</title><rect x="20.2937%" y="213" width="0.3343%" height="15" fill="rgb(232,182,51)"/><text x="20.5437%" y="223.50"></text></g><g><title>check_match (439,905 samples, 0.33%)</title><rect x="20.3028%" y="197" width="0.3252%" height="15" fill="rgb(231,60,39)"/><text x="20.5528%" y="207.50"></text></g><g><title>death_checking (214,232 samples, 0.16%)</title><rect x="20.7029%" y="213" width="0.1584%" height="15" fill="rgb(208,69,12)"/><text x="20.9529%" y="223.50"></text></g><g><title>eval_to_const_value_raw (433,835 samples, 0.32%)</title><rect x="21.1445%" y="133" width="0.3207%" height="15" fill="rgb(235,93,37)"/><text x="21.3945%" y="143.50"></text></g><g><title>eval_to_const_value_raw (433,245 samples, 0.32%)</title><rect x="21.1450%" y="117" width="0.3203%" height="15" fill="rgb(213,116,39)"/><text x="21.3950%" y="127.50"></text></g><g><title>eval_to_allocation_raw (431,505 samples, 0.32%)</title><rect x="21.1463%" y="101" width="0.3190%" height="15" fill="rgb(222,207,29)"/><text x="21.3963%" y="111.50"></text></g><g><title>eval_to_allocation_raw (481,985 samples, 0.36%)</title><rect x="21.1107%" y="181" width="0.3563%" height="15" fill="rgb(206,96,30)"/><text x="21.3607%" y="191.50"></text></g><g><title>eval_to_allocation_raw (481,375 samples, 0.36%)</title><rect x="21.1112%" y="165" width="0.3559%" height="15" fill="rgb(218,138,4)"/><text x="21.3612%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (443,615 samples, 0.33%)</title><rect x="21.1391%" y="149" width="0.3280%" height="15" fill="rgb(250,191,14)"/><text x="21.3891%" y="159.50"></text></g><g><title>param_env (166,503 samples, 0.12%)</title><rect x="21.5460%" y="181" width="0.1231%" height="15" fill="rgb(239,60,40)"/><text x="21.7960%" y="191.50"></text></g><g><title>crate_lints (1,106,433 samples, 0.82%)</title><rect x="20.8624%" y="197" width="0.8180%" height="15" fill="rgb(206,27,48)"/><text x="21.1124%" y="207.50"></text></g><g><title>lint_checking (1,554,618 samples, 1.15%)</title><rect x="20.8612%" y="213" width="1.1493%" height="15" fill="rgb(225,35,8)"/><text x="21.1112%" y="223.50"></text></g><g><title>module_lints (446,625 samples, 0.33%)</title><rect x="21.6804%" y="197" width="0.3302%" height="15" fill="rgb(250,213,24)"/><text x="21.9304%" y="207.50"></text></g><g><title>lint_mod (443,765 samples, 0.33%)</title><rect x="21.6825%" y="181" width="0.3281%" height="15" fill="rgb(247,123,22)"/><text x="21.9325%" y="191.50"></text></g><g><title>privacy_checking_modules (658,827 samples, 0.49%)</title><rect x="22.0703%" y="213" width="0.4871%" height="15" fill="rgb(231,138,38)"/><text x="22.3203%" y="223.50"></text></g><g><title>check_mod_privacy (656,677 samples, 0.49%)</title><rect x="22.0718%" y="197" width="0.4855%" height="15" fill="rgb(231,145,46)"/><text x="22.3218%" y="207.50"></text></g><g><title>misc_checking_3 (2,620,199 samples, 1.94%)</title><rect x="20.6280%" y="229" width="1.9371%" height="15" fill="rgb(251,118,11)"/><text x="20.8780%" y="239.50">m..</text></g><g><title>impl_parent (883,262 samples, 0.65%)</title><rect x="23.4726%" y="165" width="0.6530%" height="15" fill="rgb(217,147,25)"/><text x="23.7226%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (603,766 samples, 0.45%)</title><rect x="23.6792%" y="149" width="0.4464%" height="15" fill="rgb(247,81,37)"/><text x="23.9292%" y="159.50"></text></g><g><title>impl_trait_ref (2,895,856 samples, 2.14%)</title><rect x="24.1256%" y="165" width="2.1409%" height="15" fill="rgb(209,12,38)"/><text x="24.3756%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,589,143 samples, 1.91%)</title><rect x="24.3523%" y="149" width="1.9142%" height="15" fill="rgb(227,1,9)"/><text x="24.6023%" y="159.50">m..</text></g><g><title>coherent_trait (5,171,298 samples, 3.82%)</title><rect x="22.6135%" y="197" width="3.8231%" height="15" fill="rgb(248,47,43)"/><text x="22.8635%" y="207.50">cohe..</text></g><g><title>specialization_graph_of (5,164,338 samples, 3.82%)</title><rect x="22.6186%" y="181" width="3.8180%" height="15" fill="rgb(221,10,30)"/><text x="22.8686%" y="191.50">spec..</text></g><g><title>trait_impls_of (230,073 samples, 0.17%)</title><rect x="26.2665%" y="165" width="0.1701%" height="15" fill="rgb(210,229,1)"/><text x="26.5165%" y="175.50"></text></g><g><title>coherence_checking (5,224,679 samples, 3.86%)</title><rect x="22.6029%" y="213" width="3.8626%" height="15" fill="rgb(222,148,37)"/><text x="22.8529%" y="223.50">cohe..</text></g><g><title>adt_sized_constraint (149,711 samples, 0.11%)</title><rect x="28.4156%" y="149" width="0.1107%" height="15" fill="rgb(234,67,33)"/><text x="28.6656%" y="159.50"></text></g><g><title>adt_sized_constraint (292,242 samples, 0.22%)</title><rect x="28.3182%" y="165" width="0.2161%" height="15" fill="rgb(247,98,35)"/><text x="28.5682%" y="175.50"></text></g><g><title>adt_def (549,535 samples, 0.41%)</title><rect x="28.7989%" y="133" width="0.4063%" height="15" fill="rgb(247,138,52)"/><text x="29.0489%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (543,715 samples, 0.40%)</title><rect x="28.8032%" y="117" width="0.4020%" height="15" fill="rgb(213,79,30)"/><text x="29.0532%" y="127.50"></text></g><g><title>item_attrs (462,944 samples, 0.34%)</title><rect x="28.8629%" y="101" width="0.3423%" height="15" fill="rgb(246,177,23)"/><text x="29.1129%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (453,544 samples, 0.34%)</title><rect x="28.8699%" y="85" width="0.3353%" height="15" fill="rgb(230,62,27)"/><text x="29.1199%" y="95.50"></text></g><g><title>adt_def (220,973 samples, 0.16%)</title><rect x="29.3208%" y="117" width="0.1634%" height="15" fill="rgb(216,154,8)"/><text x="29.5708%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (214,683 samples, 0.16%)</title><rect x="29.3254%" y="101" width="0.1587%" height="15" fill="rgb(244,35,45)"/><text x="29.5754%" y="111.50"></text></g><g><title>item_attrs (159,003 samples, 0.12%)</title><rect x="29.3666%" y="85" width="0.1176%" height="15" fill="rgb(251,115,12)"/><text x="29.6166%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (152,693 samples, 0.11%)</title><rect x="29.3712%" y="69" width="0.1129%" height="15" fill="rgb(240,54,50)"/><text x="29.6212%" y="79.50"></text></g><g><title>adt_def (248,393 samples, 0.18%)</title><rect x="29.5767%" y="101" width="0.1836%" height="15" fill="rgb(233,84,52)"/><text x="29.8267%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (243,533 samples, 0.18%)</title><rect x="29.5803%" y="85" width="0.1800%" height="15" fill="rgb(207,117,47)"/><text x="29.8303%" y="95.50"></text></g><g><title>item_attrs (140,983 samples, 0.10%)</title><rect x="29.6561%" y="69" width="0.1042%" height="15" fill="rgb(249,43,39)"/><text x="29.9061%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,743 samples, 0.10%)</title><rect x="29.6600%" y="53" width="0.1004%" height="15" fill="rgb(209,38,44)"/><text x="29.9100%" y="63.50"></text></g><g><title>adt_def (239,582 samples, 0.18%)</title><rect x="29.8708%" y="85" width="0.1771%" height="15" fill="rgb(236,212,23)"/><text x="30.1208%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (229,642 samples, 0.17%)</title><rect x="29.8782%" y="69" width="0.1698%" height="15" fill="rgb(242,79,21)"/><text x="30.1282%" y="79.50"></text></g><g><title>item_attrs (151,662 samples, 0.11%)</title><rect x="29.9358%" y="53" width="0.1121%" height="15" fill="rgb(211,96,35)"/><text x="30.1858%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (141,362 samples, 0.10%)</title><rect x="29.9434%" y="37" width="0.1045%" height="15" fill="rgb(253,215,40)"/><text x="30.1934%" y="47.50"></text></g><g><title>adt_def (385,614 samples, 0.29%)</title><rect x="30.2334%" y="53" width="0.2851%" height="15" fill="rgb(211,81,21)"/><text x="30.4834%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (379,574 samples, 0.28%)</title><rect x="30.2379%" y="37" width="0.2806%" height="15" fill="rgb(208,190,38)"/><text x="30.4879%" y="47.50"></text></g><g><title>adt_dtorck_constraint (519,415 samples, 0.38%)</title><rect x="30.1942%" y="69" width="0.3840%" height="15" fill="rgb(235,213,38)"/><text x="30.4442%" y="79.50"></text></g><g><title>adt_dtorck_constraint (692,167 samples, 0.51%)</title><rect x="30.0837%" y="85" width="0.5117%" height="15" fill="rgb(237,122,38)"/><text x="30.3337%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,158,242 samples, 0.86%)</title><rect x="29.7801%" y="101" width="0.8563%" height="15" fill="rgb(244,218,35)"/><text x="30.0301%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,590,438 samples, 1.18%)</title><rect x="29.5116%" y="117" width="1.1758%" height="15" fill="rgb(240,68,47)"/><text x="29.7616%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,010,973 samples, 1.49%)</title><rect x="29.2462%" y="133" width="1.4867%" height="15" fill="rgb(210,16,53)"/><text x="29.4962%" y="143.50"></text></g><g><title>dropck_outlives (2,979,012 samples, 2.20%)</title><rect x="28.5840%" y="165" width="2.2024%" height="15" fill="rgb(235,124,12)"/><text x="28.8340%" y="175.50">d..</text></g><g><title>adt_dtorck_constraint (2,814,851 samples, 2.08%)</title><rect x="28.7053%" y="149" width="2.0810%" height="15" fill="rgb(224,169,11)"/><text x="28.9553%" y="159.50">a..</text></g><g><title>evaluate_obligation (461,023 samples, 0.34%)</title><rect x="30.7863%" y="165" width="0.3408%" height="15" fill="rgb(250,166,2)"/><text x="31.0363%" y="175.50"></text></g><g><title>trait_impls_of (165,221 samples, 0.12%)</title><rect x="31.0050%" y="149" width="0.1221%" height="15" fill="rgb(242,216,29)"/><text x="31.2550%" y="159.50"></text></g><g><title>predicates_of (225,166 samples, 0.17%)</title><rect x="31.4591%" y="165" width="0.1665%" height="15" fill="rgb(230,116,27)"/><text x="31.7091%" y="175.50"></text></g><g><title>predicates_defined_on (167,655 samples, 0.12%)</title><rect x="31.5016%" y="149" width="0.1239%" height="15" fill="rgb(228,99,48)"/><text x="31.7516%" y="159.50"></text></g><g><title>associated_item (373,994 samples, 0.28%)</title><rect x="45.5395%" y="133" width="0.2765%" height="15" fill="rgb(253,11,6)"/><text x="45.7895%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (289,563 samples, 0.21%)</title><rect x="45.6019%" y="117" width="0.2141%" height="15" fill="rgb(247,143,39)"/><text x="45.8519%" y="127.50"></text></g><g><title>associated_items (555,354 samples, 0.41%)</title><rect x="45.4267%" y="149" width="0.4106%" height="15" fill="rgb(236,97,10)"/><text x="45.6767%" y="159.50"></text></g><g><title>adt_dtorck_constraint (221,823 samples, 0.16%)</title><rect x="46.2528%" y="117" width="0.1640%" height="15" fill="rgb(233,208,19)"/><text x="46.5028%" y="127.50"></text></g><g><title>dropck_outlives (748,479 samples, 0.55%)</title><rect x="45.8764%" y="149" width="0.5533%" height="15" fill="rgb(216,164,2)"/><text x="46.1264%" y="159.50"></text></g><g><title>adt_dtorck_constraint (324,885 samples, 0.24%)</title><rect x="46.1896%" y="133" width="0.2402%" height="15" fill="rgb(220,129,5)"/><text x="46.4396%" y="143.50"></text></g><g><title>adt_sized_constraint (168,743 samples, 0.12%)</title><rect x="47.5246%" y="133" width="0.1248%" height="15" fill="rgb(242,17,10)"/><text x="47.7746%" y="143.50"></text></g><g><title>predicates_of (136,312 samples, 0.10%)</title><rect x="47.7479%" y="133" width="0.1008%" height="15" fill="rgb(242,107,0)"/><text x="47.9979%" y="143.50"></text></g><g><title>evaluate_obligation (2,406,394 samples, 1.78%)</title><rect x="46.4297%" y="149" width="1.7790%" height="15" fill="rgb(251,28,31)"/><text x="46.6797%" y="159.50">e..</text></g><g><title>trait_impls_of (381,975 samples, 0.28%)</title><rect x="47.9264%" y="133" width="0.2824%" height="15" fill="rgb(233,223,10)"/><text x="48.1764%" y="143.50"></text></g><g><title>implementations_of_trait (156,732 samples, 0.12%)</title><rect x="48.0929%" y="117" width="0.1159%" height="15" fill="rgb(215,21,27)"/><text x="48.3429%" y="127.50"></text></g><g><title>impl_item_implementor_ids (142,690 samples, 0.11%)</title><rect x="48.4101%" y="149" width="0.1055%" height="15" fill="rgb(232,23,21)"/><text x="48.6601%" y="159.50"></text></g><g><title>is_copy_raw (426,484 samples, 0.32%)</title><rect x="48.5796%" y="149" width="0.3153%" height="15" fill="rgb(244,5,23)"/><text x="48.8296%" y="159.50"></text></g><g><title>evaluate_obligation (385,534 samples, 0.29%)</title><rect x="48.6099%" y="133" width="0.2850%" height="15" fill="rgb(226,81,46)"/><text x="48.8599%" y="143.50"></text></g><g><title>trait_impls_of (191,402 samples, 0.14%)</title><rect x="48.7534%" y="117" width="0.1415%" height="15" fill="rgb(247,70,30)"/><text x="49.0034%" y="127.50"></text></g><g><title>evaluate_obligation (171,164 samples, 0.13%)</title><rect x="49.1008%" y="133" width="0.1265%" height="15" fill="rgb(212,68,19)"/><text x="49.3508%" y="143.50"></text></g><g><title>method_autoderef_steps (350,406 samples, 0.26%)</title><rect x="48.9756%" y="149" width="0.2591%" height="15" fill="rgb(240,187,13)"/><text x="49.2256%" y="159.50"></text></g><g><title>predicates_of (388,325 samples, 0.29%)</title><rect x="49.2425%" y="149" width="0.2871%" height="15" fill="rgb(223,113,26)"/><text x="49.4925%" y="159.50"></text></g><g><title>predicates_defined_on (243,752 samples, 0.18%)</title><rect x="49.3494%" y="133" width="0.1802%" height="15" fill="rgb(206,192,2)"/><text x="49.5994%" y="143.50"></text></g><g><title>typeck (24,167,299 samples, 17.87%)</title><rect x="31.7767%" y="165" width="17.8669%" height="15" fill="rgb(241,108,4)"/><text x="32.0267%" y="175.50">typeck</text></g><g><title>item_bodies_checking (31,369,089 samples, 23.19%)</title><rect x="26.4785%" y="213" width="23.1911%" height="15" fill="rgb(247,173,49)"/><text x="26.7285%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (31,366,029 samples, 23.19%)</title><rect x="26.4808%" y="197" width="23.1889%" height="15" fill="rgb(224,114,35)"/><text x="26.7308%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (31,346,509 samples, 23.17%)</title><rect x="26.4952%" y="181" width="23.1744%" height="15" fill="rgb(245,159,27)"/><text x="26.7452%" y="191.50">typeck</text></g><g><title>impl_trait_ref (223,333 samples, 0.17%)</title><rect x="50.2989%" y="53" width="0.1651%" height="15" fill="rgb(245,172,44)"/><text x="50.5489%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (192,883 samples, 0.14%)</title><rect x="50.3214%" y="37" width="0.1426%" height="15" fill="rgb(236,23,11)"/><text x="50.5714%" y="47.50"></text></g><g><title>coherent_trait (412,124 samples, 0.30%)</title><rect x="50.1860%" y="85" width="0.3047%" height="15" fill="rgb(205,117,38)"/><text x="50.4360%" y="95.50"></text></g><g><title>specialization_graph_of (410,734 samples, 0.30%)</title><rect x="50.1870%" y="69" width="0.3037%" height="15" fill="rgb(237,72,25)"/><text x="50.4370%" y="79.50"></text></g><g><title>adt_destructor (416,634 samples, 0.31%)</title><rect x="50.1831%" y="117" width="0.3080%" height="15" fill="rgb(244,70,9)"/><text x="50.4331%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (416,194 samples, 0.31%)</title><rect x="50.1834%" y="101" width="0.3077%" height="15" fill="rgb(217,125,39)"/><text x="50.4334%" y="111.50"></text></g><g><title>adt_dtorck_constraint (423,075 samples, 0.31%)</title><rect x="50.1787%" y="133" width="0.3128%" height="15" fill="rgb(235,36,10)"/><text x="50.4287%" y="143.50"></text></g><g><title>dropck_outlives (448,195 samples, 0.33%)</title><rect x="50.1610%" y="165" width="0.3314%" height="15" fill="rgb(251,123,47)"/><text x="50.4110%" y="175.50"></text></g><g><title>adt_dtorck_constraint (431,455 samples, 0.32%)</title><rect x="50.1734%" y="149" width="0.3190%" height="15" fill="rgb(221,13,13)"/><text x="50.4234%" y="159.50"></text></g><g><title>typeck (1,071,752 samples, 0.79%)</title><rect x="49.8312%" y="181" width="0.7923%" height="15" fill="rgb(238,131,9)"/><text x="50.0812%" y="191.50"></text></g><g><title>item_types_checking (1,297,215 samples, 0.96%)</title><rect x="49.6696%" y="213" width="0.9590%" height="15" fill="rgb(211,50,8)"/><text x="49.9196%" y="223.50"></text></g><g><title>check_mod_item_types (1,294,445 samples, 0.96%)</title><rect x="49.6717%" y="197" width="0.9570%" height="15" fill="rgb(245,182,24)"/><text x="49.9217%" y="207.50"></text></g><g><title>fn_sig (166,992 samples, 0.12%)</title><rect x="50.7086%" y="181" width="0.1235%" height="15" fill="rgb(242,14,37)"/><text x="50.9586%" y="191.50"></text></g><g><title>named_region_map (222,383 samples, 0.16%)</title><rect x="50.8683%" y="165" width="0.1644%" height="15" fill="rgb(246,228,12)"/><text x="51.1183%" y="175.50"></text></g><g><title>resolve_lifetimes (218,283 samples, 0.16%)</title><rect x="50.8713%" y="149" width="0.1614%" height="15" fill="rgb(213,55,15)"/><text x="51.1213%" y="159.50"></text></g><g><title>lint_levels (143,112 samples, 0.11%)</title><rect x="50.9269%" y="133" width="0.1058%" height="15" fill="rgb(209,9,3)"/><text x="51.1769%" y="143.50"></text></g><g><title>generics_of (278,294 samples, 0.21%)</title><rect x="50.8321%" y="181" width="0.2057%" height="15" fill="rgb(230,59,30)"/><text x="51.0821%" y="191.50"></text></g><g><title>predicates_of (181,261 samples, 0.13%)</title><rect x="51.0491%" y="181" width="0.1340%" height="15" fill="rgb(209,121,21)"/><text x="51.2991%" y="191.50"></text></g><g><title>predicates_defined_on (171,661 samples, 0.13%)</title><rect x="51.0562%" y="165" width="0.1269%" height="15" fill="rgb(220,109,13)"/><text x="51.3062%" y="175.50"></text></g><g><title>type_collecting (799,169 samples, 0.59%)</title><rect x="50.6306%" y="213" width="0.5908%" height="15" fill="rgb(232,18,1)"/><text x="50.8806%" y="223.50"></text></g><g><title>collect_mod_item_types (791,659 samples, 0.59%)</title><rect x="50.6361%" y="197" width="0.5853%" height="15" fill="rgb(215,41,42)"/><text x="50.8861%" y="207.50"></text></g><g><title>check_impl_item_well_formed (277,094 samples, 0.20%)</title><rect x="51.2646%" y="197" width="0.2049%" height="15" fill="rgb(224,123,36)"/><text x="51.5146%" y="207.50"></text></g><g><title>adt_sized_constraint (181,642 samples, 0.13%)</title><rect x="51.9314%" y="165" width="0.1343%" height="15" fill="rgb(240,125,3)"/><text x="52.1814%" y="175.50"></text></g><g><title>evaluate_obligation (492,785 samples, 0.36%)</title><rect x="51.7672%" y="181" width="0.3643%" height="15" fill="rgb(205,98,50)"/><text x="52.0172%" y="191.50"></text></g><g><title>region_scope_tree (216,462 samples, 0.16%)</title><rect x="52.3228%" y="181" width="0.1600%" height="15" fill="rgb(205,185,37)"/><text x="52.5728%" y="191.50"></text></g><g><title>analysis (70,361,245 samples, 52.02%)</title><rect x="0.4864%" y="245" width="52.0180%" height="15" fill="rgb(238,207,15)"/><text x="0.7364%" y="255.50">analysis</text></g><g><title>type_check_crate (40,496,822 samples, 29.94%)</title><rect x="22.5651%" y="229" width="29.9393%" height="15" fill="rgb(213,199,42)"/><text x="22.8151%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,733,209 samples, 1.28%)</title><rect x="51.2230%" y="213" width="1.2814%" height="15" fill="rgb(235,201,11)"/><text x="51.4730%" y="223.50"></text></g><g><title>check_item_well_formed (1,399,874 samples, 1.03%)</title><rect x="51.4695%" y="197" width="1.0349%" height="15" fill="rgb(207,46,11)"/><text x="51.7195%" y="207.50"></text></g><g><title>codegen_crate (586,887 samples, 0.43%)</title><rect x="52.5124%" y="245" width="0.4339%" height="15" fill="rgb(241,35,35)"/><text x="52.7624%" y="255.50"></text></g><g><title>metadata_load_macro (902,640 samples, 0.67%)</title><rect x="88.8632%" y="197" width="0.6673%" height="15" fill="rgb(243,32,47)"/><text x="89.1132%" y="207.50"></text></g><g><title>metadata_register_crate (3,000,254 samples, 2.22%)</title><rect x="89.5305%" y="197" width="2.2181%" height="15" fill="rgb(247,202,23)"/><text x="89.7805%" y="207.50">m..</text></g><g><title>metadata_register_crate (1,002,402 samples, 0.74%)</title><rect x="91.0075%" y="181" width="0.7411%" height="15" fill="rgb(219,102,11)"/><text x="91.2575%" y="191.50"></text></g><g><title>macro_expand_crate (52,131,702 samples, 38.54%)</title><rect x="53.2602%" y="229" width="38.5409%" height="15" fill="rgb(243,110,44)"/><text x="53.5102%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (52,112,381 samples, 38.53%)</title><rect x="53.2745%" y="213" width="38.5266%" height="15" fill="rgb(222,74,54)"/><text x="53.5245%" y="223.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (361,174 samples, 0.27%)</title><rect x="91.8018%" y="229" width="0.2670%" height="15" fill="rgb(216,99,12)"/><text x="92.0518%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (155,742 samples, 0.12%)</title><rect x="92.0688%" y="229" width="0.1151%" height="15" fill="rgb(226,22,26)"/><text x="92.3188%" y="239.50"></text></g><g><title>finalize_macro_resolutions (387,885 samples, 0.29%)</title><rect x="92.2334%" y="213" width="0.2868%" height="15" fill="rgb(217,163,10)"/><text x="92.4834%" y="223.50"></text></g><g><title>late_resolve_crate (1,626,408 samples, 1.20%)</title><rect x="92.5202%" y="213" width="1.2024%" height="15" fill="rgb(213,25,53)"/><text x="92.7702%" y="223.50"></text></g><g><title>configure_and_expand (55,245,706 samples, 40.84%)</title><rect x="52.9462%" y="245" width="40.8431%" height="15" fill="rgb(252,105,26)"/><text x="53.1962%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,171,554 samples, 1.61%)</title><rect x="92.1839%" y="229" width="1.6054%" height="15" fill="rgb(220,39,43)"/><text x="92.4339%" y="239.50"></text></g><g><title>early_lint_checks (375,144 samples, 0.28%)</title><rect x="93.8950%" y="245" width="0.2773%" height="15" fill="rgb(229,68,48)"/><text x="94.1450%" y="255.50"></text></g><g><title>free_global_ctxt (3,314,037 samples, 2.45%)</title><rect x="94.1723%" y="245" width="2.4501%" height="15" fill="rgb(252,8,32)"/><text x="94.4223%" y="255.50">fr..</text></g><g><title>generate_crate_metadata (173,962 samples, 0.13%)</title><rect x="96.6224%" y="245" width="0.1286%" height="15" fill="rgb(223,20,43)"/><text x="96.8724%" y="255.50"></text></g><g><title>hir_lowering (1,911,321 samples, 1.41%)</title><rect x="96.7510%" y="245" width="1.4130%" height="15" fill="rgb(229,81,49)"/><text x="97.0010%" y="255.50"></text></g><g><title>parse_crate (1,271,865 samples, 0.94%)</title><rect x="98.2032%" y="245" width="0.9403%" height="15" fill="rgb(236,28,36)"/><text x="98.4532%" y="255.50"></text></g><g><title>prepare_outputs (184,603 samples, 0.14%)</title><rect x="99.1505%" y="245" width="0.1365%" height="15" fill="rgb(249,185,26)"/><text x="99.4005%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (579,096 samples, 0.43%)</title><rect x="99.2870%" y="245" width="0.4281%" height="15" fill="rgb(249,174,33)"/><text x="99.5370%" y="255.50"></text></g><g><title>all (135,263,228 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (135,263,228 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (285,283 samples, 0.21%)</title><rect x="99.7891%" y="245" width="0.2109%" height="15" fill="rgb(250,127,30)"/><text x="100.0391%" y="255.50"></text></g></svg></svg>