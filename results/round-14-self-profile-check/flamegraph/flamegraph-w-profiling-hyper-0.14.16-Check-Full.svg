<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (276,945 samples, 0.11%)</title><rect x="8.9457%" y="197" width="0.1089%" height="15" fill="rgb(227,0,7)"/><text x="9.1957%" y="207.50"></text></g><g><title>is_promotable_const_fn (261,564 samples, 0.10%)</title><rect x="9.6868%" y="181" width="0.1028%" height="15" fill="rgb(217,0,24)"/><text x="9.9368%" y="191.50"></text></g><g><title>param_env (602,456 samples, 0.24%)</title><rect x="10.3742%" y="165" width="0.2368%" height="15" fill="rgb(221,193,54)"/><text x="10.6242%" y="175.50"></text></g><g><title>item_attrs (398,306 samples, 0.16%)</title><rect x="11.0260%" y="133" width="0.1566%" height="15" fill="rgb(248,212,6)"/><text x="11.2760%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (380,975 samples, 0.15%)</title><rect x="11.0328%" y="117" width="0.1497%" height="15" fill="rgb(208,68,35)"/><text x="11.2828%" y="127.50"></text></g><g><title>codegen_fn_attrs (601,460 samples, 0.24%)</title><rect x="10.9571%" y="149" width="0.2364%" height="15" fill="rgb(232,128,0)"/><text x="11.2071%" y="159.50"></text></g><g><title>adt_drop_tys (510,214 samples, 0.20%)</title><rect x="13.2803%" y="117" width="0.2005%" height="15" fill="rgb(207,160,47)"/><text x="13.5303%" y="127.50"></text></g><g><title>is_copy_raw (1,968,638 samples, 0.77%)</title><rect x="13.4812%" y="117" width="0.7738%" height="15" fill="rgb(228,23,34)"/><text x="13.7312%" y="127.50"></text></g><g><title>evaluate_obligation (1,312,207 samples, 0.52%)</title><rect x="13.7392%" y="101" width="0.5158%" height="15" fill="rgb(218,30,26)"/><text x="13.9892%" y="111.50"></text></g><g><title>needs_drop_raw (2,778,413 samples, 1.09%)</title><rect x="13.1638%" y="133" width="1.0921%" height="15" fill="rgb(220,122,19)"/><text x="13.4138%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (823,649 samples, 0.32%)</title><rect x="14.4085%" y="117" width="0.3237%" height="15" fill="rgb(250,228,42)"/><text x="14.6585%" y="127.50"></text></g><g><title>specialization_graph_of (1,210,114 samples, 0.48%)</title><rect x="14.7871%" y="117" width="0.4756%" height="15" fill="rgb(240,193,28)"/><text x="15.0371%" y="127.50"></text></g><g><title>impl_trait_ref (581,708 samples, 0.23%)</title><rect x="15.0341%" y="101" width="0.2286%" height="15" fill="rgb(216,20,37)"/><text x="15.2841%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (500,606 samples, 0.20%)</title><rect x="15.0660%" y="85" width="0.1968%" height="15" fill="rgb(206,188,39)"/><text x="15.3160%" y="95.50"></text></g><g><title>resolve_instance (2,710,833 samples, 1.07%)</title><rect x="14.2558%" y="133" width="1.0655%" height="15" fill="rgb(217,207,13)"/><text x="14.5058%" y="143.50"></text></g><g><title>thir_body (1,859,792 samples, 0.73%)</title><rect x="15.3407%" y="133" width="0.7310%" height="15" fill="rgb(231,73,38)"/><text x="15.5907%" y="143.50"></text></g><g><title>mir_const (16,023,632 samples, 6.30%)</title><rect x="9.7896%" y="181" width="6.2981%" height="15" fill="rgb(225,20,46)"/><text x="10.0396%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (13,934,047 samples, 5.48%)</title><rect x="10.6110%" y="165" width="5.4768%" height="15" fill="rgb(210,31,41)"/><text x="10.8610%" y="175.50">unsafet..</text></g><g><title>mir_built (12,451,909 samples, 4.89%)</title><rect x="11.1935%" y="149" width="4.8942%" height="15" fill="rgb(221,200,47)"/><text x="11.4435%" y="159.50">mir_bu..</text></g><g><title>mir_promoted (17,794,952 samples, 6.99%)</title><rect x="9.1308%" y="197" width="6.9943%" height="15" fill="rgb(226,26,5)"/><text x="9.3808%" y="207.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (1,035,042 samples, 0.41%)</title><rect x="16.1251%" y="197" width="0.4068%" height="15" fill="rgb(249,33,26)"/><text x="16.3751%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (643,366 samples, 0.25%)</title><rect x="16.5319%" y="197" width="0.2529%" height="15" fill="rgb(235,183,28)"/><text x="16.7819%" y="207.50"></text></g><g><title>normalize_projection_ty (380,824 samples, 0.15%)</title><rect x="16.6351%" y="181" width="0.1497%" height="15" fill="rgb(221,5,38)"/><text x="16.8851%" y="191.50"></text></g><g><title>type_op_normalize_ty (806,498 samples, 0.32%)</title><rect x="16.8587%" y="197" width="0.3170%" height="15" fill="rgb(247,18,42)"/><text x="17.1087%" y="207.50"></text></g><g><title>normalize_projection_ty (651,218 samples, 0.26%)</title><rect x="16.9197%" y="181" width="0.2560%" height="15" fill="rgb(241,131,45)"/><text x="17.1697%" y="191.50"></text></g><g><title>type_op_prove_predicate (4,289,420 samples, 1.69%)</title><rect x="17.1757%" y="197" width="1.6860%" height="15" fill="rgb(249,31,29)"/><text x="17.4257%" y="207.50"></text></g><g><title>MIR_borrow_checking (46,699,209 samples, 18.36%)</title><rect x="0.5118%" y="229" width="18.3551%" height="15" fill="rgb(225,111,53)"/><text x="0.7618%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (46,409,876 samples, 18.24%)</title><rect x="0.6255%" y="213" width="18.2414%" height="15" fill="rgb(238,160,17)"/><text x="0.8755%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (443,016 samples, 0.17%)</title><rect x="18.9049%" y="229" width="0.1741%" height="15" fill="rgb(214,148,48)"/><text x="19.1549%" y="239.50"></text></g><g><title>codegen_fn_attrs (276,043 samples, 0.11%)</title><rect x="19.4552%" y="165" width="0.1085%" height="15" fill="rgb(232,36,49)"/><text x="19.7052%" y="175.50"></text></g><g><title>should_inherit_track_caller (492,905 samples, 0.19%)</title><rect x="19.3767%" y="181" width="0.1937%" height="15" fill="rgb(209,103,24)"/><text x="19.6267%" y="191.50"></text></g><g><title>codegen_fn_attrs (765,429 samples, 0.30%)</title><rect x="19.2757%" y="197" width="0.3009%" height="15" fill="rgb(229,88,8)"/><text x="19.5257%" y="207.50"></text></g><g><title>check_mod_attrs (1,207,303 samples, 0.47%)</title><rect x="19.1021%" y="213" width="0.4745%" height="15" fill="rgb(213,181,19)"/><text x="19.3521%" y="223.50"></text></g><g><title>check_mod_const_bodies (277,193 samples, 0.11%)</title><rect x="19.5766%" y="213" width="0.1090%" height="15" fill="rgb(254,191,54)"/><text x="19.8266%" y="223.50"></text></g><g><title>lint_levels (279,733 samples, 0.11%)</title><rect x="19.9205%" y="197" width="0.1099%" height="15" fill="rgb(241,83,37)"/><text x="20.1705%" y="207.50"></text></g><g><title>lookup_deprecation_entry (341,894 samples, 0.13%)</title><rect x="20.0304%" y="197" width="0.1344%" height="15" fill="rgb(233,36,39)"/><text x="20.2804%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (1,180,816 samples, 0.46%)</title><rect x="19.7585%" y="213" width="0.4641%" height="15" fill="rgb(226,3,54)"/><text x="20.0085%" y="223.50"></text></g><g><title>misc_checking_1 (3,026,204 samples, 1.19%)</title><rect x="19.0792%" y="229" width="1.1895%" height="15" fill="rgb(245,192,40)"/><text x="19.3292%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,065,351 samples, 0.42%)</title><rect x="20.2696%" y="213" width="0.4187%" height="15" fill="rgb(238,167,29)"/><text x="20.5196%" y="223.50"></text></g><g><title>check_mod_liveness (853,140 samples, 0.34%)</title><rect x="20.3530%" y="197" width="0.3353%" height="15" fill="rgb(232,182,51)"/><text x="20.6030%" y="207.50"></text></g><g><title>mir_borrowck (458,394 samples, 0.18%)</title><rect x="21.4333%" y="101" width="0.1802%" height="15" fill="rgb(231,60,39)"/><text x="21.6833%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (656,317 samples, 0.26%)</title><rect x="21.3563%" y="117" width="0.2580%" height="15" fill="rgb(208,69,12)"/><text x="21.6063%" y="127.50"></text></g><g><title>mir_for_ctfe (923,470 samples, 0.36%)</title><rect x="21.2859%" y="133" width="0.3630%" height="15" fill="rgb(235,93,37)"/><text x="21.5359%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,221,154 samples, 0.48%)</title><rect x="21.1699%" y="181" width="0.4800%" height="15" fill="rgb(213,116,39)"/><text x="21.4199%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,212,964 samples, 0.48%)</title><rect x="21.1731%" y="165" width="0.4768%" height="15" fill="rgb(222,207,29)"/><text x="21.4231%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,197,484 samples, 0.47%)</title><rect x="21.1792%" y="149" width="0.4707%" height="15" fill="rgb(206,96,30)"/><text x="21.4292%" y="159.50"></text></g><g><title>mir_const_qualif (350,125 samples, 0.14%)</title><rect x="21.6573%" y="181" width="0.1376%" height="15" fill="rgb(218,138,4)"/><text x="21.9073%" y="191.50"></text></g><g><title>misc_checking_2 (4,003,474 samples, 1.57%)</title><rect x="20.2687%" y="229" width="1.5736%" height="15" fill="rgb(250,191,14)"/><text x="20.5187%" y="239.50"></text></g><g><title>match_checking (2,935,713 samples, 1.15%)</title><rect x="20.6883%" y="213" width="1.1539%" height="15" fill="rgb(239,60,40)"/><text x="20.9383%" y="223.50"></text></g><g><title>check_match (2,856,501 samples, 1.12%)</title><rect x="20.7195%" y="197" width="1.1227%" height="15" fill="rgb(206,27,48)"/><text x="20.9695%" y="207.50"></text></g><g><title>check_private_in_public (583,766 samples, 0.23%)</title><rect x="21.8463%" y="213" width="0.2294%" height="15" fill="rgb(225,35,8)"/><text x="22.0963%" y="223.50"></text></g><g><title>death_checking (1,093,152 samples, 0.43%)</title><rect x="22.0758%" y="213" width="0.4297%" height="15" fill="rgb(250,213,24)"/><text x="22.3258%" y="223.50"></text></g><g><title>param_env (875,750 samples, 0.34%)</title><rect x="23.0200%" y="181" width="0.3442%" height="15" fill="rgb(247,123,22)"/><text x="23.2700%" y="191.50"></text></g><g><title>predicates_of (381,325 samples, 0.15%)</title><rect x="23.2143%" y="165" width="0.1499%" height="15" fill="rgb(231,138,38)"/><text x="23.4643%" y="175.50"></text></g><g><title>predicates_defined_on (309,035 samples, 0.12%)</title><rect x="23.2427%" y="149" width="0.1215%" height="15" fill="rgb(231,145,46)"/><text x="23.4927%" y="159.50"></text></g><g><title>crate_lints (3,766,771 samples, 1.48%)</title><rect x="22.5061%" y="197" width="1.4805%" height="15" fill="rgb(251,118,11)"/><text x="22.7561%" y="207.50"></text></g><g><title>type_of (1,468,046 samples, 0.58%)</title><rect x="23.4096%" y="181" width="0.5770%" height="15" fill="rgb(217,147,25)"/><text x="23.6596%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,143,051 samples, 0.45%)</title><rect x="23.5373%" y="165" width="0.4493%" height="15" fill="rgb(247,81,37)"/><text x="23.7873%" y="175.50"></text></g><g><title>lint_checking (4,971,065 samples, 1.95%)</title><rect x="22.5054%" y="213" width="1.9539%" height="15" fill="rgb(209,12,38)"/><text x="22.7554%" y="223.50">l..</text></g><g><title>module_lints (1,202,654 samples, 0.47%)</title><rect x="23.9866%" y="197" width="0.4727%" height="15" fill="rgb(227,1,9)"/><text x="24.2366%" y="207.50"></text></g><g><title>lint_mod (1,184,894 samples, 0.47%)</title><rect x="23.9936%" y="181" width="0.4657%" height="15" fill="rgb(248,47,43)"/><text x="24.2436%" y="191.50"></text></g><g><title>layout_of (256,352 samples, 0.10%)</title><rect x="24.3585%" y="165" width="0.1008%" height="15" fill="rgb(221,10,30)"/><text x="24.6085%" y="175.50"></text></g><g><title>privacy_access_levels (802,329 samples, 0.32%)</title><rect x="24.4593%" y="213" width="0.3154%" height="15" fill="rgb(210,229,1)"/><text x="24.7093%" y="223.50"></text></g><g><title>privacy_checking_modules (2,481,637 samples, 0.98%)</title><rect x="24.7747%" y="213" width="0.9754%" height="15" fill="rgb(222,148,37)"/><text x="25.0247%" y="223.50"></text></g><g><title>check_mod_privacy (2,467,357 samples, 0.97%)</title><rect x="24.7803%" y="197" width="0.9698%" height="15" fill="rgb(234,67,33)"/><text x="25.0303%" y="207.50"></text></g><g><title>misc_checking_3 (9,972,090 samples, 3.92%)</title><rect x="21.8422%" y="229" width="3.9195%" height="15" fill="rgb(247,98,35)"/><text x="22.0922%" y="239.50">misc..</text></g><g><title>adt_destructor (486,665 samples, 0.19%)</title><rect x="25.8703%" y="181" width="0.1913%" height="15" fill="rgb(247,138,52)"/><text x="26.1203%" y="191.50"></text></g><g><title>coherent_trait (483,085 samples, 0.19%)</title><rect x="25.8717%" y="165" width="0.1899%" height="15" fill="rgb(213,79,30)"/><text x="26.1217%" y="175.50"></text></g><g><title>specialization_graph_of (481,075 samples, 0.19%)</title><rect x="25.8725%" y="149" width="0.1891%" height="15" fill="rgb(246,177,23)"/><text x="26.1225%" y="159.50"></text></g><g><title>impl_parent (3,395,854 samples, 1.33%)</title><rect x="28.5536%" y="165" width="1.3347%" height="15" fill="rgb(230,62,27)"/><text x="28.8036%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,956,009 samples, 0.77%)</title><rect x="29.1195%" y="149" width="0.7688%" height="15" fill="rgb(216,154,8)"/><text x="29.3695%" y="159.50"></text></g><g><title>impl_trait_ref (7,498,378 samples, 2.95%)</title><rect x="29.8883%" y="165" width="2.9472%" height="15" fill="rgb(244,35,45)"/><text x="30.1383%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,901,439 samples, 2.32%)</title><rect x="30.5160%" y="149" width="2.3196%" height="15" fill="rgb(251,115,12)"/><text x="30.7660%" y="159.50">m..</text></g><g><title>trait_impls_of (1,303,445 samples, 0.51%)</title><rect x="32.8456%" y="165" width="0.5123%" height="15" fill="rgb(240,54,50)"/><text x="33.0956%" y="175.50"></text></g><g><title>implementations_of_trait (439,154 samples, 0.17%)</title><rect x="33.1853%" y="149" width="0.1726%" height="15" fill="rgb(233,84,52)"/><text x="33.4353%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (313,764 samples, 0.12%)</title><rect x="33.2346%" y="133" width="0.1233%" height="15" fill="rgb(207,117,47)"/><text x="33.4846%" y="143.50"></text></g><g><title>coherent_trait (19,116,503 samples, 7.51%)</title><rect x="25.8445%" y="197" width="7.5137%" height="15" fill="rgb(249,43,39)"/><text x="26.0945%" y="207.50">coherent_t..</text></g><g><title>specialization_graph_of (18,375,985 samples, 7.22%)</title><rect x="26.1356%" y="181" width="7.2227%" height="15" fill="rgb(209,38,44)"/><text x="26.3856%" y="191.50">specializa..</text></g><g><title>coherence_checking (19,262,215 samples, 7.57%)</title><rect x="25.8328%" y="213" width="7.5710%" height="15" fill="rgb(236,212,23)"/><text x="26.0828%" y="223.50">coherence_..</text></g><g><title>associated_item (439,871 samples, 0.17%)</title><rect x="47.2423%" y="149" width="0.1729%" height="15" fill="rgb(242,79,21)"/><text x="47.4923%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (342,581 samples, 0.13%)</title><rect x="47.2805%" y="133" width="0.1347%" height="15" fill="rgb(211,96,35)"/><text x="47.5305%" y="143.50"></text></g><g><title>associated_items (682,115 samples, 0.27%)</title><rect x="47.1639%" y="165" width="0.2681%" height="15" fill="rgb(253,215,40)"/><text x="47.4139%" y="175.50"></text></g><g><title>adt_dtorck_constraint (585,598 samples, 0.23%)</title><rect x="47.7529%" y="149" width="0.2302%" height="15" fill="rgb(211,81,21)"/><text x="48.0029%" y="159.50"></text></g><g><title>dropck_outlives (1,289,739 samples, 0.51%)</title><rect x="47.4891%" y="165" width="0.5069%" height="15" fill="rgb(208,190,38)"/><text x="47.7391%" y="175.50"></text></g><g><title>impl_trait_ref (298,832 samples, 0.12%)</title><rect x="49.4232%" y="149" width="0.1175%" height="15" fill="rgb(235,213,38)"/><text x="49.6732%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (259,042 samples, 0.10%)</title><rect x="49.4389%" y="133" width="0.1018%" height="15" fill="rgb(237,122,38)"/><text x="49.6889%" y="143.50"></text></g><g><title>predicates_of (449,053 samples, 0.18%)</title><rect x="49.5658%" y="149" width="0.1765%" height="15" fill="rgb(244,218,35)"/><text x="49.8158%" y="159.50"></text></g><g><title>predicates_defined_on (280,561 samples, 0.11%)</title><rect x="49.6320%" y="133" width="0.1103%" height="15" fill="rgb(240,68,47)"/><text x="49.8820%" y="143.50"></text></g><g><title>specializes (307,242 samples, 0.12%)</title><rect x="49.7423%" y="149" width="0.1208%" height="15" fill="rgb(210,16,53)"/><text x="49.9923%" y="159.50"></text></g><g><title>trait_impls_of (583,945 samples, 0.23%)</title><rect x="49.8672%" y="149" width="0.2295%" height="15" fill="rgb(235,124,12)"/><text x="50.1172%" y="159.50"></text></g><g><title>evaluate_obligation (5,345,836 samples, 2.10%)</title><rect x="47.9960%" y="165" width="2.1012%" height="15" fill="rgb(224,169,11)"/><text x="48.2460%" y="175.50">e..</text></g><g><title>item_attrs (280,555 samples, 0.11%)</title><rect x="50.4375%" y="165" width="0.1103%" height="15" fill="rgb(250,166,2)"/><text x="50.6875%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (268,735 samples, 0.11%)</title><rect x="50.4422%" y="149" width="0.1056%" height="15" fill="rgb(242,216,29)"/><text x="50.6922%" y="159.50"></text></g><g><title>evaluate_obligation (499,995 samples, 0.20%)</title><rect x="50.8202%" y="149" width="0.1965%" height="15" fill="rgb(230,116,27)"/><text x="51.0702%" y="159.50"></text></g><g><title>method_autoderef_steps (1,112,672 samples, 0.44%)</title><rect x="50.5922%" y="165" width="0.4373%" height="15" fill="rgb(228,99,48)"/><text x="50.8422%" y="175.50"></text></g><g><title>predicates_of (801,230 samples, 0.31%)</title><rect x="51.0904%" y="165" width="0.3149%" height="15" fill="rgb(253,11,6)"/><text x="51.3404%" y="175.50"></text></g><g><title>predicates_defined_on (384,194 samples, 0.15%)</title><rect x="51.2543%" y="149" width="0.1510%" height="15" fill="rgb(247,143,39)"/><text x="51.5043%" y="159.50"></text></g><g><title>evaluate_obligation (595,917 samples, 0.23%)</title><rect x="52.8856%" y="149" width="0.2342%" height="15" fill="rgb(236,97,10)"/><text x="53.1356%" y="159.50"></text></g><g><title>typeck (4,818,153 samples, 1.89%)</title><rect x="51.4729%" y="165" width="1.8938%" height="15" fill="rgb(233,208,19)"/><text x="51.7229%" y="175.50">t..</text></g><g><title>item_bodies_checking (50,800,535 samples, 19.97%)</title><rect x="33.4397%" y="213" width="19.9672%" height="15" fill="rgb(216,164,2)"/><text x="33.6897%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,795,905 samples, 19.97%)</title><rect x="33.4415%" y="197" width="19.9653%" height="15" fill="rgb(220,129,5)"/><text x="33.6915%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (50,590,423 samples, 19.88%)</title><rect x="33.5222%" y="181" width="19.8846%" height="15" fill="rgb(242,17,10)"/><text x="33.7722%" y="191.50">typeck</text></g><g><title>evaluate_obligation (320,054 samples, 0.13%)</title><rect x="55.6717%" y="181" width="0.1258%" height="15" fill="rgb(242,107,0)"/><text x="55.9217%" y="191.50"></text></g><g><title>mir_borrowck (365,644 samples, 0.14%)</title><rect x="58.1243%" y="133" width="0.1437%" height="15" fill="rgb(251,28,31)"/><text x="58.3743%" y="143.50"></text></g><g><title>mir_const (424,715 samples, 0.17%)</title><rect x="58.3580%" y="117" width="0.1669%" height="15" fill="rgb(233,223,10)"/><text x="58.6080%" y="127.50"></text></g><g><title>mir_promoted (658,590 samples, 0.26%)</title><rect x="58.2681%" y="133" width="0.2589%" height="15" fill="rgb(215,21,27)"/><text x="58.5181%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (496,797 samples, 0.20%)</title><rect x="58.5609%" y="133" width="0.1953%" height="15" fill="rgb(232,23,21)"/><text x="58.8109%" y="143.50"></text></g><g><title>normalize_projection_ty (327,635 samples, 0.13%)</title><rect x="58.6274%" y="117" width="0.1288%" height="15" fill="rgb(244,5,23)"/><text x="58.8774%" y="127.50"></text></g><g><title>type_op_prove_predicate (988,680 samples, 0.39%)</title><rect x="58.8046%" y="133" width="0.3886%" height="15" fill="rgb(226,81,46)"/><text x="59.0546%" y="143.50"></text></g><g><title>mir_borrowck (6,705,866 samples, 2.64%)</title><rect x="56.5580%" y="149" width="2.6357%" height="15" fill="rgb(247,70,30)"/><text x="56.8080%" y="159.50">mi..</text></g><g><title>associated_item (368,763 samples, 0.14%)</title><rect x="63.5357%" y="53" width="0.1449%" height="15" fill="rgb(212,68,19)"/><text x="63.7857%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (282,733 samples, 0.11%)</title><rect x="63.5695%" y="37" width="0.1111%" height="15" fill="rgb(240,187,13)"/><text x="63.8195%" y="47.50"></text></g><g><title>associated_items (541,194 samples, 0.21%)</title><rect x="63.4768%" y="69" width="0.2127%" height="15" fill="rgb(223,113,26)"/><text x="63.7268%" y="79.50"></text></g><g><title>adt_dtorck_constraint (269,561 samples, 0.11%)</title><rect x="63.8508%" y="37" width="0.1060%" height="15" fill="rgb(206,192,2)"/><text x="64.1008%" y="47.50"></text></g><g><title>adt_dtorck_constraint (498,063 samples, 0.20%)</title><rect x="63.7781%" y="53" width="0.1958%" height="15" fill="rgb(241,108,4)"/><text x="64.0281%" y="63.50"></text></g><g><title>dropck_outlives (695,696 samples, 0.27%)</title><rect x="63.7045%" y="69" width="0.2734%" height="15" fill="rgb(247,173,49)"/><text x="63.9545%" y="79.50"></text></g><g><title>trait_impls_of (287,893 samples, 0.11%)</title><rect x="64.3243%" y="53" width="0.1132%" height="15" fill="rgb(224,114,35)"/><text x="64.5743%" y="63.50"></text></g><g><title>evaluate_obligation (1,164,644 samples, 0.46%)</title><rect x="63.9801%" y="69" width="0.4578%" height="15" fill="rgb(245,159,27)"/><text x="64.2301%" y="79.50"></text></g><g><title>is_copy_raw (434,564 samples, 0.17%)</title><rect x="64.5891%" y="69" width="0.1708%" height="15" fill="rgb(245,172,44)"/><text x="64.8391%" y="79.50"></text></g><g><title>evaluate_obligation (362,814 samples, 0.14%)</title><rect x="64.6173%" y="53" width="0.1426%" height="15" fill="rgb(236,23,11)"/><text x="64.8673%" y="63.50"></text></g><g><title>method_autoderef_steps (258,383 samples, 0.10%)</title><rect x="64.8495%" y="69" width="0.1016%" height="15" fill="rgb(205,117,38)"/><text x="65.0995%" y="79.50"></text></g><g><title>mir_built (14,878,016 samples, 5.85%)</title><rect x="59.3007%" y="101" width="5.8478%" height="15" fill="rgb(237,72,25)"/><text x="59.5507%" y="111.50">mir_bui..</text></g><g><title>typeck (14,340,580 samples, 5.64%)</title><rect x="59.5119%" y="85" width="5.6366%" height="15" fill="rgb(244,70,9)"/><text x="59.7619%" y="95.50">typeck</text></g><g><title>needs_drop_raw (331,753 samples, 0.13%)</title><rect x="65.6062%" y="69" width="0.1304%" height="15" fill="rgb(217,125,39)"/><text x="65.8562%" y="79.50"></text></g><g><title>thir_body (266,591 samples, 0.10%)</title><rect x="65.7419%" y="69" width="0.1048%" height="15" fill="rgb(235,36,10)"/><text x="65.9919%" y="79.50"></text></g><g><title>mir_built (1,528,648 samples, 0.60%)</title><rect x="65.2526%" y="85" width="0.6008%" height="15" fill="rgb(251,123,47)"/><text x="65.5026%" y="95.50"></text></g><g><title>mir_const (16,963,890 samples, 6.67%)</title><rect x="59.2328%" y="133" width="6.6677%" height="15" fill="rgb(221,13,13)"/><text x="59.4828%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,833,128 samples, 6.62%)</title><rect x="59.2842%" y="117" width="6.6163%" height="15" fill="rgb(238,131,9)"/><text x="59.5342%" y="127.50">unsafety_..</text></g><g><title>unsafety_check_result (1,913,242 samples, 0.75%)</title><rect x="65.1485%" y="101" width="0.7520%" height="15" fill="rgb(211,50,8)"/><text x="65.3985%" y="111.50"></text></g><g><title>mir_promoted (17,073,400 samples, 6.71%)</title><rect x="59.1938%" y="149" width="6.7107%" height="15" fill="rgb(245,182,24)"/><text x="59.4438%" y="159.50">mir_promo..</text></g><g><title>type_of (25,675,305 samples, 10.09%)</title><rect x="55.9814%" y="181" width="10.0917%" height="15" fill="rgb(242,14,37)"/><text x="56.2314%" y="191.50">type_of</text></g><g><title>mir_borrowck (25,614,555 samples, 10.07%)</title><rect x="56.0053%" y="165" width="10.0678%" height="15" fill="rgb(246,228,12)"/><text x="56.2553%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (311,754 samples, 0.12%)</title><rect x="65.9505%" y="149" width="0.1225%" height="15" fill="rgb(213,55,15)"/><text x="66.2005%" y="159.50"></text></g><g><title>item_types_checking (32,356,120 samples, 12.72%)</title><rect x="53.4068%" y="213" width="12.7176%" height="15" fill="rgb(209,9,3)"/><text x="53.6568%" y="223.50">item_types_checking</text></g><g><title>check_mod_item_types (32,332,179 samples, 12.71%)</title><rect x="53.4162%" y="197" width="12.7082%" height="15" fill="rgb(230,59,30)"/><text x="53.6662%" y="207.50">check_mod_item_types</text></g><g><title>fn_sig (871,747 samples, 0.34%)</title><rect x="66.4149%" y="181" width="0.3426%" height="15" fill="rgb(209,121,21)"/><text x="66.6649%" y="191.50"></text></g><g><title>named_region_map (459,279 samples, 0.18%)</title><rect x="66.8956%" y="165" width="0.1805%" height="15" fill="rgb(220,109,13)"/><text x="67.1456%" y="175.50"></text></g><g><title>resolve_lifetimes (418,177 samples, 0.16%)</title><rect x="66.9118%" y="149" width="0.1644%" height="15" fill="rgb(232,18,1)"/><text x="67.1618%" y="159.50"></text></g><g><title>generics_of (851,716 samples, 0.33%)</title><rect x="66.7575%" y="181" width="0.3348%" height="15" fill="rgb(215,41,42)"/><text x="67.0075%" y="191.50"></text></g><g><title>item_bounds (261,653 samples, 0.10%)</title><rect x="67.1537%" y="181" width="0.1028%" height="15" fill="rgb(224,123,36)"/><text x="67.4037%" y="191.50"></text></g><g><title>late_bound_vars_map (332,582 samples, 0.13%)</title><rect x="67.6395%" y="133" width="0.1307%" height="15" fill="rgb(240,125,3)"/><text x="67.8895%" y="143.50"></text></g><g><title>resolve_lifetimes (315,652 samples, 0.12%)</title><rect x="67.6461%" y="117" width="0.1241%" height="15" fill="rgb(205,98,50)"/><text x="67.8961%" y="127.50"></text></g><g><title>explicit_predicates_of (1,015,251 samples, 0.40%)</title><rect x="67.4070%" y="149" width="0.3990%" height="15" fill="rgb(205,185,37)"/><text x="67.6570%" y="159.50"></text></g><g><title>predicates_of (1,934,062 samples, 0.76%)</title><rect x="67.2566%" y="181" width="0.7602%" height="15" fill="rgb(238,207,15)"/><text x="67.5066%" y="191.50"></text></g><g><title>predicates_defined_on (1,789,579 samples, 0.70%)</title><rect x="67.3134%" y="165" width="0.7034%" height="15" fill="rgb(213,199,42)"/><text x="67.5634%" y="175.50"></text></g><g><title>inferred_outlives_of (536,186 samples, 0.21%)</title><rect x="67.8060%" y="149" width="0.2107%" height="15" fill="rgb(235,201,11)"/><text x="68.0560%" y="159.50"></text></g><g><title>inferred_outlives_crate (483,595 samples, 0.19%)</title><rect x="67.8267%" y="133" width="0.1901%" height="15" fill="rgb(207,46,11)"/><text x="68.0767%" y="143.50"></text></g><g><title>type_of (285,692 samples, 0.11%)</title><rect x="67.9045%" y="117" width="0.1123%" height="15" fill="rgb(241,35,35)"/><text x="68.1545%" y="127.50"></text></g><g><title>type_collecting (5,336,299 samples, 2.10%)</title><rect x="66.1278%" y="213" width="2.0974%" height="15" fill="rgb(243,32,47)"/><text x="66.3778%" y="223.50">t..</text></g><g><title>collect_mod_item_types (5,304,129 samples, 2.08%)</title><rect x="66.1404%" y="197" width="2.0848%" height="15" fill="rgb(247,202,23)"/><text x="66.3904%" y="207.50">c..</text></g><g><title>type_of (479,025 samples, 0.19%)</title><rect x="68.0369%" y="181" width="0.1883%" height="15" fill="rgb(219,102,11)"/><text x="68.2869%" y="191.50"></text></g><g><title>evaluate_obligation (1,495,649 samples, 0.59%)</title><rect x="70.8492%" y="181" width="0.5879%" height="15" fill="rgb(243,110,44)"/><text x="71.0992%" y="191.50"></text></g><g><title>implied_outlives_bounds (653,928 samples, 0.26%)</title><rect x="71.4550%" y="181" width="0.2570%" height="15" fill="rgb(222,74,54)"/><text x="71.7050%" y="191.50"></text></g><g><title>param_env (865,852 samples, 0.34%)</title><rect x="71.7120%" y="181" width="0.3403%" height="15" fill="rgb(216,99,12)"/><text x="71.9620%" y="191.50"></text></g><g><title>region_scope_tree (761,958 samples, 0.30%)</title><rect x="72.0800%" y="181" width="0.2995%" height="15" fill="rgb(226,22,26)"/><text x="72.3300%" y="191.50"></text></g><g><title>check_impl_item_well_formed (10,015,368 samples, 3.94%)</title><rect x="68.4525%" y="197" width="3.9365%" height="15" fill="rgb(217,163,10)"/><text x="68.7025%" y="207.50">chec..</text></g><g><title>adt_def (284,163 samples, 0.11%)</title><rect x="74.4808%" y="149" width="0.1117%" height="15" fill="rgb(213,25,53)"/><text x="74.7308%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (276,863 samples, 0.11%)</title><rect x="74.4837%" y="133" width="0.1088%" height="15" fill="rgb(252,105,26)"/><text x="74.7337%" y="143.50"></text></g><g><title>adt_sized_constraint (484,095 samples, 0.19%)</title><rect x="74.4665%" y="165" width="0.1903%" height="15" fill="rgb(220,39,43)"/><text x="74.7165%" y="175.50"></text></g><g><title>evaluate_obligation (1,489,707 samples, 0.59%)</title><rect x="74.1200%" y="181" width="0.5855%" height="15" fill="rgb(229,68,48)"/><text x="74.3700%" y="191.50"></text></g><g><title>implied_outlives_bounds (294,881 samples, 0.12%)</title><rect x="74.7221%" y="181" width="0.1159%" height="15" fill="rgb(252,8,32)"/><text x="74.9721%" y="191.50"></text></g><g><title>evaluate_obligation (268,094 samples, 0.11%)</title><rect x="74.9311%" y="165" width="0.1054%" height="15" fill="rgb(223,20,43)"/><text x="75.1811%" y="175.50"></text></g><g><title>object_safety_violations (864,000 samples, 0.34%)</title><rect x="74.8429%" y="181" width="0.3396%" height="15" fill="rgb(229,81,49)"/><text x="75.0929%" y="191.50"></text></g><g><title>param_env (691,259 samples, 0.27%)</title><rect x="75.1825%" y="181" width="0.2717%" height="15" fill="rgb(236,28,36)"/><text x="75.4325%" y="191.50"></text></g><g><title>trait_impls_of (434,413 samples, 0.17%)</title><rect x="75.5963%" y="181" width="0.1707%" height="15" fill="rgb(249,185,26)"/><text x="75.8463%" y="191.50"></text></g><g><title>check_item_well_formed (8,776,189 samples, 3.45%)</title><rect x="72.3890%" y="197" width="3.4495%" height="15" fill="rgb(249,174,33)"/><text x="72.6390%" y="207.50">che..</text></g><g><title>analysis (193,800,717 samples, 76.17%)</title><rect x="0.2953%" y="245" width="76.1734%" height="15" fill="rgb(233,201,37)"/><text x="0.5453%" y="255.50">analysis</text></g><g><title>type_check_crate (129,008,786 samples, 50.71%)</title><rect x="25.7618%" y="229" width="50.7069%" height="15" fill="rgb(221,78,26)"/><text x="26.0118%" y="239.50">type_check_crate</text></g><g><title>wf_checking (20,958,893 samples, 8.24%)</title><rect x="68.2308%" y="213" width="8.2379%" height="15" fill="rgb(250,127,30)"/><text x="68.4808%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,603,357 samples, 0.63%)</title><rect x="75.8385%" y="197" width="0.6302%" height="15" fill="rgb(230,49,44)"/><text x="76.0885%" y="207.50"></text></g><g><title>codegen_crate (417,715 samples, 0.16%)</title><rect x="76.4712%" y="245" width="0.1642%" height="15" fill="rgb(229,67,23)"/><text x="76.7212%" y="255.50"></text></g><g><title>metadata_load_macro (274,356 samples, 0.11%)</title><rect x="86.2016%" y="197" width="0.1078%" height="15" fill="rgb(249,83,47)"/><text x="86.4516%" y="207.50"></text></g><g><title>metadata_register_crate (6,039,156 samples, 2.37%)</title><rect x="86.3094%" y="197" width="2.3737%" height="15" fill="rgb(215,43,3)"/><text x="86.5594%" y="207.50">me..</text></g><g><title>metadata_register_crate (4,572,780 samples, 1.80%)</title><rect x="86.8858%" y="181" width="1.7973%" height="15" fill="rgb(238,154,13)"/><text x="87.1358%" y="191.50">m..</text></g><g><title>macro_expand_crate (30,611,851 samples, 12.03%)</title><rect x="76.8543%" y="229" width="12.0320%" height="15" fill="rgb(219,56,2)"/><text x="77.1043%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (30,601,511 samples, 12.03%)</title><rect x="76.8584%" y="213" width="12.0279%" height="15" fill="rgb(233,0,4)"/><text x="77.1084%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (516,966 samples, 0.20%)</title><rect x="88.6831%" y="197" width="0.2032%" height="15" fill="rgb(235,30,7)"/><text x="88.9331%" y="207.50"></text></g><g><title>late_resolve_crate (4,251,558 samples, 1.67%)</title><rect x="89.0598%" y="213" width="1.6711%" height="15" fill="rgb(250,79,13)"/><text x="89.3098%" y="223.50"></text></g><g><title>configure_and_expand (36,134,352 samples, 14.20%)</title><rect x="76.6354%" y="245" width="14.2026%" height="15" fill="rgb(211,146,34)"/><text x="76.8854%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (4,909,434 samples, 1.93%)</title><rect x="88.9084%" y="229" width="1.9297%" height="15" fill="rgb(228,22,38)"/><text x="89.1584%" y="239.50">r..</text></g><g><title>drop_ast (445,685 samples, 0.18%)</title><rect x="90.8380%" y="245" width="0.1752%" height="15" fill="rgb(235,168,5)"/><text x="91.0880%" y="255.50"></text></g><g><title>early_lint_checks (720,548 samples, 0.28%)</title><rect x="91.0230%" y="245" width="0.2832%" height="15" fill="rgb(221,155,16)"/><text x="91.2730%" y="255.50"></text></g><g><title>free_global_ctxt (5,007,546 samples, 1.97%)</title><rect x="91.3063%" y="245" width="1.9682%" height="15" fill="rgb(215,215,53)"/><text x="91.5563%" y="255.50">f..</text></g><g><title>is_copy_raw (373,144 samples, 0.15%)</title><rect x="96.3651%" y="181" width="0.1467%" height="15" fill="rgb(223,4,10)"/><text x="96.6151%" y="191.50"></text></g><g><title>evaluate_obligation (318,182 samples, 0.13%)</title><rect x="96.3867%" y="165" width="0.1251%" height="15" fill="rgb(234,103,6)"/><text x="96.6367%" y="175.50"></text></g><g><title>needs_drop_raw (450,665 samples, 0.18%)</title><rect x="96.3360%" y="197" width="0.1771%" height="15" fill="rgb(227,97,0)"/><text x="96.5860%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,757,661 samples, 1.08%)</title><rect x="95.4533%" y="213" width="1.0839%" height="15" fill="rgb(234,150,53)"/><text x="95.7033%" y="223.50"></text></g><g><title>optimized_mir (4,902,403 samples, 1.93%)</title><rect x="94.6126%" y="229" width="1.9269%" height="15" fill="rgb(228,201,54)"/><text x="94.8626%" y="239.50">o..</text></g><g><title>generate_crate_metadata (8,380,923 samples, 3.29%)</title><rect x="93.2745%" y="245" width="3.2941%" height="15" fill="rgb(222,22,37)"/><text x="93.5245%" y="255.50">gen..</text></g><g><title>hir_lowering (6,196,299 samples, 2.44%)</title><rect x="96.5686%" y="245" width="2.4355%" height="15" fill="rgb(237,53,32)"/><text x="96.8186%" y="255.50">hi..</text></g><g><title>parse_crate (265,443 samples, 0.10%)</title><rect x="99.0376%" y="245" width="0.1043%" height="15" fill="rgb(233,25,53)"/><text x="99.2876%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,469,687 samples, 0.58%)</title><rect x="99.2164%" y="245" width="0.5777%" height="15" fill="rgb(210,40,34)"/><text x="99.4664%" y="255.50"></text></g><g><title>all (254,420,382 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(241,220,44)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (254,420,382 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,28,35)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (417,794 samples, 0.16%)</title><rect x="99.8358%" y="245" width="0.1642%" height="15" fill="rgb(210,56,17)"/><text x="100.0858%" y="255.50"></text></g></svg></svg>