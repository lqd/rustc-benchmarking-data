<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (5,816,825 samples, 0.14%)</title><rect x="15.4616%" y="165" width="0.1371%" height="15" fill="rgb(227,0,7)"/><text x="15.7116%" y="175.50"></text></g><g><title>is_copy_raw (38,564,548 samples, 0.91%)</title><rect x="21.6132%" y="85" width="0.9089%" height="15" fill="rgb(217,0,24)"/><text x="21.8632%" y="95.50"></text></g><g><title>evaluate_obligation (31,627,975 samples, 0.75%)</title><rect x="21.7767%" y="69" width="0.7454%" height="15" fill="rgb(221,193,54)"/><text x="22.0267%" y="79.50"></text></g><g><title>needs_drop_raw (46,943,220 samples, 1.11%)</title><rect x="21.4283%" y="101" width="1.1064%" height="15" fill="rgb(248,212,6)"/><text x="21.6783%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (17,407,100 samples, 0.41%)</title><rect x="22.6820%" y="85" width="0.4103%" height="15" fill="rgb(208,68,35)"/><text x="22.9320%" y="95.50"></text></g><g><title>resolve_instance (26,341,213 samples, 0.62%)</title><rect x="22.5361%" y="101" width="0.6208%" height="15" fill="rgb(232,128,0)"/><text x="22.7861%" y="111.50"></text></g><g><title>thir_body (55,010,897 samples, 1.30%)</title><rect x="23.1839%" y="101" width="1.2965%" height="15" fill="rgb(207,160,47)"/><text x="23.4339%" y="111.50"></text></g><g><title>mir_const (332,537,268 samples, 7.84%)</title><rect x="16.7302%" y="149" width="7.8372%" height="15" fill="rgb(228,23,34)"/><text x="16.9802%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (294,352,375 samples, 6.94%)</title><rect x="17.6301%" y="133" width="6.9373%" height="15" fill="rgb(218,30,26)"/><text x="17.8801%" y="143.50">unsafety_..</text></g><g><title>mir_built (271,062,475 samples, 6.39%)</title><rect x="18.1790%" y="117" width="6.3884%" height="15" fill="rgb(220,122,19)"/><text x="18.4290%" y="127.50">mir_built</text></g><g><title>mir_const (10,237,576 samples, 0.24%)</title><rect x="24.7152%" y="133" width="0.2413%" height="15" fill="rgb(250,228,42)"/><text x="24.9652%" y="143.50"></text></g><g><title>unsafety_check_result (7,426,540 samples, 0.18%)</title><rect x="24.7815%" y="117" width="0.1750%" height="15" fill="rgb(240,193,28)"/><text x="25.0315%" y="127.50"></text></g><g><title>mir_built (6,521,360 samples, 0.15%)</title><rect x="24.8028%" y="101" width="0.1537%" height="15" fill="rgb(216,20,37)"/><text x="25.0528%" y="111.50"></text></g><g><title>mir_const_qualif (16,760,394 samples, 0.40%)</title><rect x="24.5674%" y="149" width="0.3950%" height="15" fill="rgb(206,188,39)"/><text x="24.8174%" y="159.50"></text></g><g><title>mir_promoted (389,633,304 samples, 9.18%)</title><rect x="15.7796%" y="165" width="9.1829%" height="15" fill="rgb(217,207,13)"/><text x="16.0296%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (19,559,395 samples, 0.46%)</title><rect x="24.9648%" y="165" width="0.4610%" height="15" fill="rgb(231,73,38)"/><text x="25.2148%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (26,149,178 samples, 0.62%)</title><rect x="25.4258%" y="165" width="0.6163%" height="15" fill="rgb(225,20,46)"/><text x="25.6758%" y="175.50"></text></g><g><title>normalize_projection_ty (15,862,430 samples, 0.37%)</title><rect x="25.6682%" y="149" width="0.3738%" height="15" fill="rgb(210,31,41)"/><text x="25.9182%" y="159.50"></text></g><g><title>type_op_normalize_predicate (15,719,967 samples, 0.37%)</title><rect x="26.0495%" y="165" width="0.3705%" height="15" fill="rgb(221,200,47)"/><text x="26.2995%" y="175.50"></text></g><g><title>normalize_projection_ty (5,615,633 samples, 0.13%)</title><rect x="26.2877%" y="149" width="0.1323%" height="15" fill="rgb(226,26,5)"/><text x="26.5377%" y="159.50"></text></g><g><title>type_op_normalize_ty (27,184,357 samples, 0.64%)</title><rect x="26.4200%" y="165" width="0.6407%" height="15" fill="rgb(249,33,26)"/><text x="26.6700%" y="175.50"></text></g><g><title>normalize_projection_ty (17,264,030 samples, 0.41%)</title><rect x="26.6538%" y="149" width="0.4069%" height="15" fill="rgb(235,183,28)"/><text x="26.9038%" y="159.50"></text></g><g><title>type_op_prove_predicate (124,666,414 samples, 2.94%)</title><rect x="27.0607%" y="165" width="2.9381%" height="15" fill="rgb(221,5,38)"/><text x="27.3107%" y="175.50">ty..</text></g><g><title>MIR_borrow_checking (1,253,317,061 samples, 29.54%)</title><rect x="0.4618%" y="197" width="29.5382%" height="15" fill="rgb(247,18,42)"/><text x="0.7118%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,244,582,585 samples, 29.33%)</title><rect x="0.6677%" y="181" width="29.3323%" height="15" fill="rgb(241,131,45)"/><text x="0.9177%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (7,724,447 samples, 0.18%)</title><rect x="30.0000%" y="197" width="0.1820%" height="15" fill="rgb(249,31,29)"/><text x="30.2500%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,236,178 samples, 0.12%)</title><rect x="30.0586%" y="181" width="0.1234%" height="15" fill="rgb(225,111,53)"/><text x="30.3086%" y="191.50"></text></g><g><title>hir_module_items (6,562,234 samples, 0.15%)</title><rect x="30.1821%" y="197" width="0.1547%" height="15" fill="rgb(238,160,17)"/><text x="30.4321%" y="207.50"></text></g><g><title>codegen_fn_attrs (6,907,981 samples, 0.16%)</title><rect x="30.5626%" y="165" width="0.1628%" height="15" fill="rgb(214,148,48)"/><text x="30.8126%" y="175.50"></text></g><g><title>check_mod_attrs (16,250,044 samples, 0.38%)</title><rect x="30.3424%" y="181" width="0.3830%" height="15" fill="rgb(232,36,49)"/><text x="30.5924%" y="191.50"></text></g><g><title>lint_levels (11,289,356 samples, 0.27%)</title><rect x="31.0424%" y="165" width="0.2661%" height="15" fill="rgb(209,103,24)"/><text x="31.2924%" y="175.50"></text></g><g><title>lookup_deprecation_entry (5,402,955 samples, 0.13%)</title><rect x="31.3085%" y="165" width="0.1273%" height="15" fill="rgb(229,88,8)"/><text x="31.5585%" y="175.50"></text></g><g><title>stability_index (4,956,296 samples, 0.12%)</title><rect x="31.3190%" y="149" width="0.1168%" height="15" fill="rgb(213,181,19)"/><text x="31.5690%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (22,566,780 samples, 0.53%)</title><rect x="30.9203%" y="181" width="0.5319%" height="15" fill="rgb(254,191,54)"/><text x="31.1703%" y="191.50"></text></g><g><title>misc_checking_1 (48,427,512 samples, 1.14%)</title><rect x="30.3367%" y="197" width="1.1413%" height="15" fill="rgb(241,83,37)"/><text x="30.5867%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (22,808,676 samples, 0.54%)</title><rect x="31.4782%" y="181" width="0.5376%" height="15" fill="rgb(233,36,39)"/><text x="31.7282%" y="191.50"></text></g><g><title>check_mod_liveness (19,358,249 samples, 0.46%)</title><rect x="31.5595%" y="165" width="0.4562%" height="15" fill="rgb(226,3,54)"/><text x="31.8095%" y="175.50"></text></g><g><title>misc_checking_2 (52,924,962 samples, 1.25%)</title><rect x="31.4781%" y="197" width="1.2473%" height="15" fill="rgb(245,192,40)"/><text x="31.7281%" y="207.50"></text></g><g><title>match_checking (30,112,296 samples, 0.71%)</title><rect x="32.0157%" y="181" width="0.7097%" height="15" fill="rgb(238,167,29)"/><text x="32.2657%" y="191.50"></text></g><g><title>check_match (28,338,033 samples, 0.67%)</title><rect x="32.0575%" y="165" width="0.6679%" height="15" fill="rgb(232,182,51)"/><text x="32.3075%" y="175.50"></text></g><g><title>check_private_in_public (12,640,341 samples, 0.30%)</title><rect x="32.7260%" y="181" width="0.2979%" height="15" fill="rgb(231,60,39)"/><text x="32.9760%" y="191.50"></text></g><g><title>death_checking (17,834,320 samples, 0.42%)</title><rect x="33.0239%" y="181" width="0.4203%" height="15" fill="rgb(208,69,12)"/><text x="33.2739%" y="191.50"></text></g><g><title>param_env (5,735,819 samples, 0.14%)</title><rect x="33.9816%" y="149" width="0.1352%" height="15" fill="rgb(235,93,37)"/><text x="34.2316%" y="159.50"></text></g><g><title>crate_lints (31,291,150 samples, 0.74%)</title><rect x="33.4443%" y="165" width="0.7375%" height="15" fill="rgb(213,116,39)"/><text x="33.6943%" y="175.50"></text></g><g><title>lint_checking (59,486,686 samples, 1.40%)</title><rect x="33.4442%" y="181" width="1.4020%" height="15" fill="rgb(222,207,29)"/><text x="33.6942%" y="191.50"></text></g><g><title>module_lints (28,191,476 samples, 0.66%)</title><rect x="34.1818%" y="165" width="0.6644%" height="15" fill="rgb(206,96,30)"/><text x="34.4318%" y="175.50"></text></g><g><title>lint_mod (28,091,935 samples, 0.66%)</title><rect x="34.1841%" y="149" width="0.6621%" height="15" fill="rgb(218,138,4)"/><text x="34.4341%" y="159.50"></text></g><g><title>privacy_access_levels (16,106,010 samples, 0.38%)</title><rect x="34.8462%" y="181" width="0.3796%" height="15" fill="rgb(250,191,14)"/><text x="35.0962%" y="191.50"></text></g><g><title>privacy_checking_modules (51,396,235 samples, 1.21%)</title><rect x="35.2258%" y="181" width="1.2113%" height="15" fill="rgb(239,60,40)"/><text x="35.4758%" y="191.50"></text></g><g><title>check_mod_privacy (51,301,074 samples, 1.21%)</title><rect x="35.2280%" y="165" width="1.2091%" height="15" fill="rgb(206,27,48)"/><text x="35.4780%" y="175.50"></text></g><g><title>misc_checking_3 (157,874,776 samples, 3.72%)</title><rect x="32.7254%" y="197" width="3.7208%" height="15" fill="rgb(225,35,8)"/><text x="32.9754%" y="207.50">misc..</text></g><g><title>impl_parent (4,666,861 samples, 0.11%)</title><rect x="37.2302%" y="133" width="0.1100%" height="15" fill="rgb(250,213,24)"/><text x="37.4802%" y="143.50"></text></g><g><title>impl_trait_ref (8,898,525 samples, 0.21%)</title><rect x="37.3403%" y="133" width="0.2097%" height="15" fill="rgb(247,123,22)"/><text x="37.5903%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,838,835 samples, 0.16%)</title><rect x="37.3888%" y="117" width="0.1612%" height="15" fill="rgb(231,138,38)"/><text x="37.6388%" y="127.50"></text></g><g><title>coherent_trait (47,020,307 samples, 1.11%)</title><rect x="36.5068%" y="165" width="1.1082%" height="15" fill="rgb(231,145,46)"/><text x="36.7568%" y="175.50"></text></g><g><title>specialization_graph_of (45,174,648 samples, 1.06%)</title><rect x="36.5503%" y="149" width="1.0647%" height="15" fill="rgb(251,118,11)"/><text x="36.8003%" y="159.50"></text></g><g><title>coherence_checking (48,599,784 samples, 1.15%)</title><rect x="36.5056%" y="181" width="1.1454%" height="15" fill="rgb(217,147,25)"/><text x="36.7556%" y="191.50"></text></g><g><title>dropck_outlives (17,799,114 samples, 0.42%)</title><rect x="62.6874%" y="133" width="0.4195%" height="15" fill="rgb(247,81,37)"/><text x="62.9374%" y="143.50"></text></g><g><title>specializes (4,835,105 samples, 0.11%)</title><rect x="64.6272%" y="117" width="0.1140%" height="15" fill="rgb(209,12,38)"/><text x="64.8772%" y="127.50"></text></g><g><title>evaluate_obligation (69,934,880 samples, 1.65%)</title><rect x="63.1131%" y="133" width="1.6482%" height="15" fill="rgb(227,1,9)"/><text x="63.3631%" y="143.50"></text></g><g><title>method_autoderef_steps (10,168,820 samples, 0.24%)</title><rect x="64.9090%" y="133" width="0.2397%" height="15" fill="rgb(248,47,43)"/><text x="65.1590%" y="143.50"></text></g><g><title>evaluate_obligation (5,005,757 samples, 0.12%)</title><rect x="65.0307%" y="117" width="0.1180%" height="15" fill="rgb(221,10,30)"/><text x="65.2807%" y="127.50"></text></g><g><title>param_env (4,483,175 samples, 0.11%)</title><rect x="65.1631%" y="133" width="0.1057%" height="15" fill="rgb(210,229,1)"/><text x="65.4131%" y="143.50"></text></g><g><title>dropck_outlives (5,568,425 samples, 0.13%)</title><rect x="72.6633%" y="117" width="0.1312%" height="15" fill="rgb(222,148,37)"/><text x="72.9133%" y="127.50"></text></g><g><title>evaluate_obligation (17,298,900 samples, 0.41%)</title><rect x="72.8346%" y="117" width="0.4077%" height="15" fill="rgb(234,67,33)"/><text x="73.0846%" y="127.50"></text></g><g><title>method_autoderef_steps (7,774,326 samples, 0.18%)</title><rect x="73.4098%" y="117" width="0.1832%" height="15" fill="rgb(247,98,35)"/><text x="73.6598%" y="127.50"></text></g><g><title>typeck (351,624,505 samples, 8.29%)</title><rect x="65.3711%" y="133" width="8.2871%" height="15" fill="rgb(247,138,52)"/><text x="65.6211%" y="143.50">typeck</text></g><g><title>item_bodies_checking (1,526,645,389 samples, 35.98%)</title><rect x="37.6993%" y="181" width="35.9800%" height="15" fill="rgb(213,79,30)"/><text x="37.9493%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,526,641,339 samples, 35.98%)</title><rect x="37.6994%" y="165" width="35.9799%" height="15" fill="rgb(246,177,23)"/><text x="37.9494%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (1,522,738,654 samples, 35.89%)</title><rect x="37.7914%" y="149" width="35.8879%" height="15" fill="rgb(230,62,27)"/><text x="38.0414%" y="159.50">typeck</text></g><g><title>evaluate_obligation (10,372,709 samples, 0.24%)</title><rect x="76.7485%" y="149" width="0.2445%" height="15" fill="rgb(216,154,8)"/><text x="76.9985%" y="159.50"></text></g><g><title>evaluate_obligation (8,851,506 samples, 0.21%)</title><rect x="77.7679%" y="37" width="0.2086%" height="15" fill="rgb(244,35,45)"/><text x="78.0179%" y="47.50"></text></g><g><title>mir_built (32,015,817 samples, 0.75%)</title><rect x="77.2519%" y="69" width="0.7545%" height="15" fill="rgb(251,115,12)"/><text x="77.5019%" y="79.50"></text></g><g><title>typeck (27,478,287 samples, 0.65%)</title><rect x="77.3588%" y="53" width="0.6476%" height="15" fill="rgb(240,54,50)"/><text x="77.6088%" y="63.50"></text></g><g><title>mir_const (35,465,286 samples, 0.84%)</title><rect x="77.1934%" y="101" width="0.8358%" height="15" fill="rgb(233,84,52)"/><text x="77.4434%" y="111.50"></text></g><g><title>unsafety_check_result (33,166,850 samples, 0.78%)</title><rect x="77.2476%" y="85" width="0.7817%" height="15" fill="rgb(207,117,47)"/><text x="77.4976%" y="95.50"></text></g><g><title>mir_promoted (35,687,849 samples, 0.84%)</title><rect x="77.1886%" y="117" width="0.8411%" height="15" fill="rgb(249,43,39)"/><text x="77.4386%" y="127.50"></text></g><g><title>type_of (46,554,782 samples, 1.10%)</title><rect x="77.0501%" y="149" width="1.0972%" height="15" fill="rgb(209,38,44)"/><text x="77.3001%" y="159.50"></text></g><g><title>mir_borrowck (46,399,370 samples, 1.09%)</title><rect x="77.0537%" y="133" width="1.0935%" height="15" fill="rgb(236,212,23)"/><text x="77.3037%" y="143.50"></text></g><g><title>item_types_checking (194,108,651 samples, 4.57%)</title><rect x="73.6793%" y="181" width="4.5748%" height="15" fill="rgb(242,79,21)"/><text x="73.9293%" y="191.50">item_..</text></g><g><title>check_mod_item_types (193,972,080 samples, 4.57%)</title><rect x="73.6825%" y="165" width="4.5715%" height="15" fill="rgb(211,96,35)"/><text x="73.9325%" y="175.50">check..</text></g><g><title>typeck (4,532,230 samples, 0.11%)</title><rect x="78.1473%" y="149" width="0.1068%" height="15" fill="rgb(253,215,40)"/><text x="78.3973%" y="159.50"></text></g><g><title>fn_sig (8,841,888 samples, 0.21%)</title><rect x="78.4772%" y="149" width="0.2084%" height="15" fill="rgb(211,81,21)"/><text x="78.7272%" y="159.50"></text></g><g><title>generics_of (8,916,218 samples, 0.21%)</title><rect x="78.6856%" y="149" width="0.2101%" height="15" fill="rgb(208,190,38)"/><text x="78.9356%" y="159.50"></text></g><g><title>late_bound_vars_map (8,319,110 samples, 0.20%)</title><rect x="79.2118%" y="101" width="0.1961%" height="15" fill="rgb(235,213,38)"/><text x="79.4618%" y="111.50"></text></g><g><title>resolve_lifetimes (7,892,091 samples, 0.19%)</title><rect x="79.2218%" y="85" width="0.1860%" height="15" fill="rgb(237,122,38)"/><text x="79.4718%" y="95.50"></text></g><g><title>explicit_predicates_of (16,575,362 samples, 0.39%)</title><rect x="79.0413%" y="117" width="0.3906%" height="15" fill="rgb(244,218,35)"/><text x="79.2913%" y="127.50"></text></g><g><title>predicates_of (25,009,562 samples, 0.59%)</title><rect x="78.9231%" y="149" width="0.5894%" height="15" fill="rgb(240,68,47)"/><text x="79.1731%" y="159.50"></text></g><g><title>predicates_defined_on (22,863,141 samples, 0.54%)</title><rect x="78.9737%" y="133" width="0.5388%" height="15" fill="rgb(210,16,53)"/><text x="79.2237%" y="143.50"></text></g><g><title>type_collecting (63,432,319 samples, 1.49%)</title><rect x="78.2551%" y="181" width="1.4950%" height="15" fill="rgb(235,124,12)"/><text x="78.5051%" y="191.50"></text></g><g><title>collect_mod_item_types (63,321,209 samples, 1.49%)</title><rect x="78.2577%" y="165" width="1.4924%" height="15" fill="rgb(224,169,11)"/><text x="78.5077%" y="175.50"></text></g><g><title>type_of (9,986,091 samples, 0.24%)</title><rect x="79.5147%" y="149" width="0.2354%" height="15" fill="rgb(250,166,2)"/><text x="79.7647%" y="159.50"></text></g><g><title>evaluate_obligation (17,095,624 samples, 0.40%)</title><rect x="82.3352%" y="149" width="0.4029%" height="15" fill="rgb(242,216,29)"/><text x="82.5852%" y="159.50"></text></g><g><title>implied_outlives_bounds (11,995,204 samples, 0.28%)</title><rect x="82.7701%" y="149" width="0.2827%" height="15" fill="rgb(230,116,27)"/><text x="83.0201%" y="159.50"></text></g><g><title>param_env (17,249,915 samples, 0.41%)</title><rect x="83.0684%" y="149" width="0.4065%" height="15" fill="rgb(228,99,48)"/><text x="83.3184%" y="159.50"></text></g><g><title>region_scope_tree (15,729,866 samples, 0.37%)</title><rect x="83.4763%" y="149" width="0.3707%" height="15" fill="rgb(253,11,6)"/><text x="83.7263%" y="159.50"></text></g><g><title>check_impl_item_well_formed (166,068,434 samples, 3.91%)</title><rect x="79.9417%" y="165" width="3.9139%" height="15" fill="rgb(247,143,39)"/><text x="80.1917%" y="175.50">chec..</text></g><g><title>evaluate_obligation (11,242,280 samples, 0.26%)</title><rect x="85.8682%" y="149" width="0.2650%" height="15" fill="rgb(236,97,10)"/><text x="86.1182%" y="159.50"></text></g><g><title>implied_outlives_bounds (4,321,758 samples, 0.10%)</title><rect x="86.1587%" y="149" width="0.1019%" height="15" fill="rgb(233,208,19)"/><text x="86.4087%" y="159.50"></text></g><g><title>param_env (10,082,038 samples, 0.24%)</title><rect x="86.2673%" y="149" width="0.2376%" height="15" fill="rgb(216,164,2)"/><text x="86.5173%" y="159.50"></text></g><g><title>check_item_well_formed (118,231,801 samples, 2.79%)</title><rect x="83.8556%" y="165" width="2.7865%" height="15" fill="rgb(220,129,5)"/><text x="84.1056%" y="175.50">ch..</text></g><g><title>analysis (3,669,992,348 samples, 86.49%)</title><rect x="0.2500%" y="213" width="86.4944%" height="15" fill="rgb(242,17,10)"/><text x="0.5000%" y="223.50">analysis</text></g><g><title>type_check_crate (2,134,173,716 samples, 50.30%)</title><rect x="36.4462%" y="197" width="50.2982%" height="15" fill="rgb(242,107,0)"/><text x="36.6962%" y="207.50">type_check_crate</text></g><g><title>wf_checking (296,511,678 samples, 6.99%)</title><rect x="79.7562%" y="181" width="6.9882%" height="15" fill="rgb(251,28,31)"/><text x="80.0062%" y="191.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (4,343,971 samples, 0.10%)</title><rect x="86.6421%" y="165" width="0.1024%" height="15" fill="rgb(233,223,10)"/><text x="86.8921%" y="175.50"></text></g><g><title>AST_validation (5,636,703 samples, 0.13%)</title><rect x="86.7626%" y="197" width="0.1328%" height="15" fill="rgb(215,21,27)"/><text x="87.0126%" y="207.50"></text></g><g><title>complete_gated_feature_checking (4,801,273 samples, 0.11%)</title><rect x="86.8955%" y="197" width="0.1132%" height="15" fill="rgb(232,23,21)"/><text x="87.1455%" y="207.50"></text></g><g><title>macro_expand_crate (254,771,230 samples, 6.00%)</title><rect x="87.0102%" y="197" width="6.0045%" height="15" fill="rgb(244,5,23)"/><text x="87.2602%" y="207.50">macro_ex..</text></g><g><title>expand_crate (254,754,670 samples, 6.00%)</title><rect x="87.0106%" y="181" width="6.0041%" height="15" fill="rgb(226,81,46)"/><text x="87.2606%" y="191.50">expand_c..</text></g><g><title>late_resolve_crate (49,030,368 samples, 1.16%)</title><rect x="93.1149%" y="181" width="1.1555%" height="15" fill="rgb(247,70,30)"/><text x="93.3649%" y="191.50"></text></g><g><title>configure_and_expand (326,680,815 samples, 7.70%)</title><rect x="86.7578%" y="213" width="7.6992%" height="15" fill="rgb(212,68,19)"/><text x="87.0078%" y="223.50">configure_a..</text></g><g><title>resolve_crate (61,126,494 samples, 1.44%)</title><rect x="93.0164%" y="197" width="1.4406%" height="15" fill="rgb(240,187,13)"/><text x="93.2664%" y="207.50"></text></g><g><title>drop_ast (9,166,382 samples, 0.22%)</title><rect x="94.4570%" y="213" width="0.2160%" height="15" fill="rgb(223,113,26)"/><text x="94.7070%" y="223.50"></text></g><g><title>early_lint_checks (13,871,575 samples, 0.33%)</title><rect x="94.6739%" y="213" width="0.3269%" height="15" fill="rgb(206,192,2)"/><text x="94.9239%" y="223.50"></text></g><g><title>free_global_ctxt (30,783,814 samples, 0.73%)</title><rect x="95.0008%" y="213" width="0.7255%" height="15" fill="rgb(241,108,4)"/><text x="95.2508%" y="223.50"></text></g><g><title>generate_crate_metadata (42,451,955 samples, 1.00%)</title><rect x="95.7263%" y="213" width="1.0005%" height="15" fill="rgb(247,173,49)"/><text x="95.9763%" y="223.50"></text></g><g><title>hir_lowering (126,860,889 samples, 2.99%)</title><rect x="96.7268%" y="213" width="2.9899%" height="15" fill="rgb(224,114,35)"/><text x="96.9768%" y="223.50">hir..</text></g><g><title>self_profile_alloc_query_strings (8,244,362 samples, 0.19%)</title><rect x="99.7369%" y="213" width="0.1943%" height="15" fill="rgb(245,159,27)"/><text x="99.9869%" y="223.50"></text></g><g><title>all (4,243,038,349 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (4,243,038,349 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>