<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (135,592 samples, 0.17%)</title><rect x="6.1047%" y="197" width="0.1688%" height="15" fill="rgb(227,0,7)"/><text x="6.3547%" y="207.50"></text></g><g><title>item_attrs (80,881 samples, 0.10%)</title><rect x="6.5299%" y="165" width="0.1007%" height="15" fill="rgb(217,0,24)"/><text x="6.7799%" y="175.50"></text></g><g><title>codegen_fn_attrs (135,042 samples, 0.17%)</title><rect x="6.4770%" y="181" width="0.1681%" height="15" fill="rgb(221,193,54)"/><text x="6.7270%" y="191.50"></text></g><g><title>mir_for_ctfe (310,336 samples, 0.39%)</title><rect x="9.2351%" y="117" width="0.3863%" height="15" fill="rgb(248,212,6)"/><text x="9.4851%" y="127.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (282,225 samples, 0.35%)</title><rect x="9.2701%" y="101" width="0.3513%" height="15" fill="rgb(208,68,35)"/><text x="9.5201%" y="111.50"></text></g><g><title>mir_for_ctfe (212,563 samples, 0.26%)</title><rect x="11.3113%" y="53" width="0.2646%" height="15" fill="rgb(232,128,0)"/><text x="11.5613%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (186,443 samples, 0.23%)</title><rect x="11.3438%" y="37" width="0.2321%" height="15" fill="rgb(207,160,47)"/><text x="11.5938%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,265,329 samples, 1.58%)</title><rect x="10.1084%" y="101" width="1.5751%" height="15" fill="rgb(228,23,34)"/><text x="10.3584%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,196,438 samples, 1.49%)</title><rect x="10.1942%" y="85" width="1.4893%" height="15" fill="rgb(218,30,26)"/><text x="10.4442%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,077,144 samples, 1.34%)</title><rect x="10.3427%" y="69" width="1.3408%" height="15" fill="rgb(220,122,19)"/><text x="10.5927%" y="79.50"></text></g><g><title>trait_of_item (124,160 samples, 0.15%)</title><rect x="11.8238%" y="85" width="0.1546%" height="15" fill="rgb(250,228,42)"/><text x="12.0738%" y="95.50"></text></g><g><title>metadata_decode_entry_trait_of_item (89,320 samples, 0.11%)</title><rect x="11.8671%" y="69" width="0.1112%" height="15" fill="rgb(240,193,28)"/><text x="12.1171%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,437,900 samples, 4.28%)</title><rect x="8.0312%" y="165" width="4.2794%" height="15" fill="rgb(216,20,37)"/><text x="8.2812%" y="175.50">eval_..</text></g><g><title>eval_to_const_value_raw (3,305,270 samples, 4.11%)</title><rect x="8.1963%" y="149" width="4.1143%" height="15" fill="rgb(206,188,39)"/><text x="8.4463%" y="159.50">eval..</text></g><g><title>eval_to_allocation_raw (3,166,948 samples, 3.94%)</title><rect x="8.3685%" y="133" width="3.9421%" height="15" fill="rgb(217,207,13)"/><text x="8.6185%" y="143.50">eval..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,100,926 samples, 2.62%)</title><rect x="9.6954%" y="117" width="2.6152%" height="15" fill="rgb(231,73,38)"/><text x="9.9454%" y="127.50">tr..</text></g><g><title>resolve_instance (503,803 samples, 0.63%)</title><rect x="11.6835%" y="101" width="0.6271%" height="15" fill="rgb(225,20,46)"/><text x="11.9335%" y="111.50"></text></g><g><title>type_of (266,942 samples, 0.33%)</title><rect x="11.9783%" y="85" width="0.3323%" height="15" fill="rgb(210,31,41)"/><text x="12.2283%" y="95.50"></text></g><g><title>is_copy_raw (99,631 samples, 0.12%)</title><rect x="12.5820%" y="133" width="0.1240%" height="15" fill="rgb(221,200,47)"/><text x="12.8320%" y="143.50"></text></g><g><title>evaluate_obligation (86,231 samples, 0.11%)</title><rect x="12.5987%" y="117" width="0.1073%" height="15" fill="rgb(226,26,5)"/><text x="12.8487%" y="127.50"></text></g><g><title>adt_drop_tys (244,932 samples, 0.30%)</title><rect x="12.4806%" y="149" width="0.3049%" height="15" fill="rgb(249,33,26)"/><text x="12.7306%" y="159.50"></text></g><g><title>needs_drop_raw (826,425 samples, 1.03%)</title><rect x="12.3937%" y="165" width="1.0287%" height="15" fill="rgb(235,183,28)"/><text x="12.6437%" y="175.50"></text></g><g><title>is_copy_raw (511,611 samples, 0.64%)</title><rect x="12.7855%" y="149" width="0.6368%" height="15" fill="rgb(221,5,38)"/><text x="13.0355%" y="159.50"></text></g><g><title>evaluate_obligation (438,891 samples, 0.55%)</title><rect x="12.8761%" y="133" width="0.5463%" height="15" fill="rgb(247,18,42)"/><text x="13.1261%" y="143.50"></text></g><g><title>param_env (994,521 samples, 1.24%)</title><rect x="13.4224%" y="165" width="1.2380%" height="15" fill="rgb(241,131,45)"/><text x="13.6724%" y="175.50"></text></g><g><title>predicates_of (368,053 samples, 0.46%)</title><rect x="14.2022%" y="149" width="0.4581%" height="15" fill="rgb(249,31,29)"/><text x="14.4522%" y="159.50"></text></g><g><title>predicates_defined_on (229,752 samples, 0.29%)</title><rect x="14.3743%" y="133" width="0.2860%" height="15" fill="rgb(225,111,53)"/><text x="14.6243%" y="143.50"></text></g><g><title>specialization_graph_of (90,131 samples, 0.11%)</title><rect x="14.7918%" y="149" width="0.1122%" height="15" fill="rgb(238,160,17)"/><text x="15.0418%" y="159.50"></text></g><g><title>resolve_instance (215,162 samples, 0.27%)</title><rect x="14.6603%" y="165" width="0.2678%" height="15" fill="rgb(214,148,48)"/><text x="14.9103%" y="175.50"></text></g><g><title>thir_body (292,491 samples, 0.36%)</title><rect x="14.9395%" y="165" width="0.3641%" height="15" fill="rgb(232,36,49)"/><text x="15.1895%" y="175.50"></text></g><g><title>mir_const (7,674,634 samples, 9.55%)</title><rect x="5.7587%" y="213" width="9.5532%" height="15" fill="rgb(209,103,24)"/><text x="6.0087%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (7,261,149 samples, 9.04%)</title><rect x="6.2734%" y="197" width="9.0385%" height="15" fill="rgb(229,88,8)"/><text x="6.5234%" y="207.50">unsafety_chec..</text></g><g><title>mir_built (6,962,575 samples, 8.67%)</title><rect x="6.6451%" y="181" width="8.6669%" height="15" fill="rgb(213,181,19)"/><text x="6.8951%" y="191.50">mir_built</text></g><g><title>has_structural_eq_impls (269,303 samples, 0.34%)</title><rect x="15.4079%" y="197" width="0.3352%" height="15" fill="rgb(254,191,54)"/><text x="15.6579%" y="207.50"></text></g><g><title>evaluate_obligation (258,063 samples, 0.32%)</title><rect x="15.4219%" y="181" width="0.3212%" height="15" fill="rgb(241,83,37)"/><text x="15.6719%" y="191.50"></text></g><g><title>trait_impls_of (240,342 samples, 0.30%)</title><rect x="15.4440%" y="165" width="0.2992%" height="15" fill="rgb(233,36,39)"/><text x="15.6940%" y="175.50"></text></g><g><title>mir_promoted (8,450,547 samples, 10.52%)</title><rect x="5.3980%" y="229" width="10.5191%" height="15" fill="rgb(226,3,54)"/><text x="5.6480%" y="239.50">mir_promoted</text></g><g><title>mir_const_qualif (486,097 samples, 0.61%)</title><rect x="15.3120%" y="213" width="0.6051%" height="15" fill="rgb(245,192,40)"/><text x="15.5620%" y="223.50"></text></g><g><title>type_op_ascribe_user_type (229,791 samples, 0.29%)</title><rect x="15.9170%" y="229" width="0.2860%" height="15" fill="rgb(238,167,29)"/><text x="16.1670%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (110,800 samples, 0.14%)</title><rect x="16.2031%" y="229" width="0.1379%" height="15" fill="rgb(232,182,51)"/><text x="16.4531%" y="239.50"></text></g><g><title>type_op_prove_predicate (677,001 samples, 0.84%)</title><rect x="16.3933%" y="229" width="0.8427%" height="15" fill="rgb(231,60,39)"/><text x="16.6433%" y="239.50"></text></g><g><title>MIR_borrow_checking (13,063,225 samples, 16.26%)</title><rect x="0.9815%" y="261" width="16.2608%" height="15" fill="rgb(208,69,12)"/><text x="1.2315%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,032,905 samples, 16.22%)</title><rect x="1.0193%" y="245" width="16.2231%" height="15" fill="rgb(235,93,37)"/><text x="1.2693%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (133,982 samples, 0.17%)</title><rect x="17.2424%" y="261" width="0.1668%" height="15" fill="rgb(213,116,39)"/><text x="17.4924%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (101,212 samples, 0.13%)</title><rect x="17.2831%" y="245" width="0.1260%" height="15" fill="rgb(222,207,29)"/><text x="17.5331%" y="255.50"></text></g><g><title>hir_module_items (97,751 samples, 0.12%)</title><rect x="17.4091%" y="261" width="0.1217%" height="15" fill="rgb(206,96,30)"/><text x="17.6591%" y="271.50"></text></g><g><title>should_inherit_track_caller (107,951 samples, 0.13%)</title><rect x="17.7908%" y="213" width="0.1344%" height="15" fill="rgb(218,138,4)"/><text x="18.0408%" y="223.50"></text></g><g><title>codegen_fn_attrs (222,593 samples, 0.28%)</title><rect x="17.6674%" y="229" width="0.2771%" height="15" fill="rgb(250,191,14)"/><text x="17.9174%" y="239.50"></text></g><g><title>check_mod_attrs (308,914 samples, 0.38%)</title><rect x="17.5600%" y="245" width="0.3845%" height="15" fill="rgb(239,60,40)"/><text x="17.8100%" y="255.50"></text></g><g><title>lookup_deprecation_entry (82,471 samples, 0.10%)</title><rect x="18.1476%" y="229" width="0.1027%" height="15" fill="rgb(206,27,48)"/><text x="18.3976%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (238,323 samples, 0.30%)</title><rect x="18.0333%" y="245" width="0.2967%" height="15" fill="rgb(225,35,8)"/><text x="18.2833%" y="255.50"></text></g><g><title>misc_checking_1 (673,227 samples, 0.84%)</title><rect x="17.5313%" y="261" width="0.8380%" height="15" fill="rgb(250,213,24)"/><text x="17.7813%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (326,254 samples, 0.41%)</title><rect x="18.3714%" y="245" width="0.4061%" height="15" fill="rgb(247,123,22)"/><text x="18.6214%" y="255.50"></text></g><g><title>check_mod_liveness (285,163 samples, 0.35%)</title><rect x="18.4225%" y="229" width="0.3550%" height="15" fill="rgb(231,138,38)"/><text x="18.6725%" y="239.50"></text></g><g><title>misc_checking_2 (901,920 samples, 1.12%)</title><rect x="18.3693%" y="261" width="1.1227%" height="15" fill="rgb(231,145,46)"/><text x="18.6193%" y="271.50"></text></g><g><title>match_checking (573,976 samples, 0.71%)</title><rect x="18.7775%" y="245" width="0.7145%" height="15" fill="rgb(251,118,11)"/><text x="19.0275%" y="255.50"></text></g><g><title>check_match (562,736 samples, 0.70%)</title><rect x="18.7915%" y="229" width="0.7005%" height="15" fill="rgb(217,147,25)"/><text x="19.0415%" y="239.50"></text></g><g><title>death_checking (168,522 samples, 0.21%)</title><rect x="19.5922%" y="245" width="0.2098%" height="15" fill="rgb(247,81,37)"/><text x="19.8422%" y="255.50"></text></g><g><title>eval_to_allocation_raw (239,442 samples, 0.30%)</title><rect x="20.5501%" y="213" width="0.2981%" height="15" fill="rgb(209,12,38)"/><text x="20.8001%" y="223.50"></text></g><g><title>eval_to_allocation_raw (236,432 samples, 0.29%)</title><rect x="20.5538%" y="197" width="0.2943%" height="15" fill="rgb(227,1,9)"/><text x="20.8038%" y="207.50"></text></g><g><title>param_env (124,161 samples, 0.15%)</title><rect x="20.8481%" y="213" width="0.1546%" height="15" fill="rgb(248,47,43)"/><text x="21.0981%" y="223.50"></text></g><g><title>crate_lints (2,236,205 samples, 2.78%)</title><rect x="19.8037%" y="229" width="2.7836%" height="15" fill="rgb(221,10,30)"/><text x="20.0537%" y="239.50">cr..</text></g><g><title>type_of (1,268,453 samples, 1.58%)</title><rect x="21.0083%" y="213" width="1.5789%" height="15" fill="rgb(210,229,1)"/><text x="21.2583%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (969,600 samples, 1.21%)</title><rect x="21.3803%" y="197" width="1.2069%" height="15" fill="rgb(222,148,37)"/><text x="21.6303%" y="207.50"></text></g><g><title>eval_to_const_value_raw (281,872 samples, 0.35%)</title><rect x="23.3462%" y="85" width="0.3509%" height="15" fill="rgb(234,67,33)"/><text x="23.5962%" y="95.50"></text></g><g><title>eval_to_const_value_raw (266,302 samples, 0.33%)</title><rect x="23.3656%" y="69" width="0.3315%" height="15" fill="rgb(247,98,35)"/><text x="23.6156%" y="79.50"></text></g><g><title>eval_to_allocation_raw (237,422 samples, 0.30%)</title><rect x="23.4015%" y="53" width="0.2955%" height="15" fill="rgb(247,138,52)"/><text x="23.6515%" y="63.50"></text></g><g><title>eval_to_const_value_raw (695,098 samples, 0.87%)</title><rect x="22.9154%" y="149" width="0.8652%" height="15" fill="rgb(213,79,30)"/><text x="23.1654%" y="159.50"></text></g><g><title>eval_to_const_value_raw (679,148 samples, 0.85%)</title><rect x="22.9353%" y="133" width="0.8454%" height="15" fill="rgb(246,177,23)"/><text x="23.1853%" y="143.50"></text></g><g><title>eval_to_allocation_raw (655,608 samples, 0.82%)</title><rect x="22.9646%" y="117" width="0.8161%" height="15" fill="rgb(230,62,27)"/><text x="23.2146%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (426,795 samples, 0.53%)</title><rect x="23.2494%" y="101" width="0.5313%" height="15" fill="rgb(216,154,8)"/><text x="23.4994%" y="111.50"></text></g><g><title>layout_of (91,621 samples, 0.11%)</title><rect x="23.8009%" y="149" width="0.1140%" height="15" fill="rgb(244,35,45)"/><text x="24.0509%" y="159.50"></text></g><g><title>lint_checking (3,537,379 samples, 4.40%)</title><rect x="19.8019%" y="245" width="4.4033%" height="15" fill="rgb(251,115,12)"/><text x="20.0519%" y="255.50">lint_..</text></g><g><title>module_lints (1,299,784 samples, 1.62%)</title><rect x="22.5872%" y="229" width="1.6179%" height="15" fill="rgb(240,54,50)"/><text x="22.8372%" y="239.50"></text></g><g><title>lint_mod (1,294,224 samples, 1.61%)</title><rect x="22.5942%" y="213" width="1.6110%" height="15" fill="rgb(233,84,52)"/><text x="22.8442%" y="223.50"></text></g><g><title>layout_of (1,147,914 samples, 1.43%)</title><rect x="22.7763%" y="197" width="1.4289%" height="15" fill="rgb(207,117,47)"/><text x="23.0263%" y="207.50"></text></g><g><title>layout_of (1,133,613 samples, 1.41%)</title><rect x="22.7941%" y="181" width="1.4111%" height="15" fill="rgb(249,43,39)"/><text x="23.0441%" y="191.50"></text></g><g><title>layout_of (1,120,163 samples, 1.39%)</title><rect x="22.8108%" y="165" width="1.3944%" height="15" fill="rgb(209,38,44)"/><text x="23.0608%" y="175.50"></text></g><g><title>param_env (233,203 samples, 0.29%)</title><rect x="23.9149%" y="149" width="0.2903%" height="15" fill="rgb(236,212,23)"/><text x="24.1649%" y="159.50"></text></g><g><title>predicates_of (85,722 samples, 0.11%)</title><rect x="24.0985%" y="133" width="0.1067%" height="15" fill="rgb(242,79,21)"/><text x="24.3485%" y="143.50"></text></g><g><title>privacy_access_levels (88,181 samples, 0.11%)</title><rect x="24.2052%" y="245" width="0.1098%" height="15" fill="rgb(211,96,35)"/><text x="24.4552%" y="255.50"></text></g><g><title>privacy_checking_modules (279,483 samples, 0.35%)</title><rect x="24.3150%" y="245" width="0.3479%" height="15" fill="rgb(253,215,40)"/><text x="24.5650%" y="255.50"></text></g><g><title>check_mod_privacy (275,943 samples, 0.34%)</title><rect x="24.3194%" y="229" width="0.3435%" height="15" fill="rgb(211,81,21)"/><text x="24.5694%" y="239.50"></text></g><g><title>misc_checking_3 (4,169,936 samples, 5.19%)</title><rect x="19.4920%" y="261" width="5.1906%" height="15" fill="rgb(208,190,38)"/><text x="19.7420%" y="271.50">misc_c..</text></g><g><title>impl_parent (1,318,509 samples, 1.64%)</title><rect x="27.0178%" y="197" width="1.6413%" height="15" fill="rgb(235,213,38)"/><text x="27.2678%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (856,955 samples, 1.07%)</title><rect x="27.5923%" y="181" width="1.0667%" height="15" fill="rgb(237,122,38)"/><text x="27.8423%" y="191.50"></text></g><g><title>impl_trait_ref (3,777,376 samples, 4.70%)</title><rect x="28.6590%" y="197" width="4.7020%" height="15" fill="rgb(244,218,35)"/><text x="28.9090%" y="207.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,327,231 samples, 4.14%)</title><rect x="29.2194%" y="181" width="4.1417%" height="15" fill="rgb(240,68,47)"/><text x="29.4694%" y="191.50">metad..</text></g><g><title>trait_impls_of (334,614 samples, 0.42%)</title><rect x="33.3869%" y="197" width="0.4165%" height="15" fill="rgb(210,16,53)"/><text x="33.6369%" y="207.50"></text></g><g><title>implementations_of_trait (98,052 samples, 0.12%)</title><rect x="33.6813%" y="181" width="0.1221%" height="15" fill="rgb(235,124,12)"/><text x="33.9313%" y="191.50"></text></g><g><title>coherent_trait (7,284,261 samples, 9.07%)</title><rect x="24.7370%" y="229" width="9.0673%" height="15" fill="rgb(224,169,11)"/><text x="24.9870%" y="239.50">coherent_trait</text></g><g><title>specialization_graph_of (7,270,601 samples, 9.05%)</title><rect x="24.7540%" y="213" width="9.0503%" height="15" fill="rgb(250,166,2)"/><text x="25.0040%" y="223.50">specializatio..</text></g><g><title>coherence_checking (7,327,831 samples, 9.12%)</title><rect x="24.7199%" y="245" width="9.1215%" height="15" fill="rgb(242,216,29)"/><text x="24.9699%" y="255.50">coherence_che..</text></g><g><title>associated_items (101,210 samples, 0.13%)</title><rect x="38.6091%" y="197" width="0.1260%" height="15" fill="rgb(230,116,27)"/><text x="38.8591%" y="207.50"></text></g><g><title>adt_dtorck_constraint (90,121 samples, 0.11%)</title><rect x="38.8977%" y="133" width="0.1122%" height="15" fill="rgb(228,99,48)"/><text x="39.1477%" y="143.50"></text></g><g><title>adt_dtorck_constraint (98,361 samples, 0.12%)</title><rect x="38.8897%" y="149" width="0.1224%" height="15" fill="rgb(253,11,6)"/><text x="39.1397%" y="159.50"></text></g><g><title>adt_dtorck_constraint (114,613 samples, 0.14%)</title><rect x="38.8716%" y="165" width="0.1427%" height="15" fill="rgb(247,143,39)"/><text x="39.1216%" y="175.50"></text></g><g><title>dropck_outlives (228,193 samples, 0.28%)</title><rect x="38.7470%" y="197" width="0.2840%" height="15" fill="rgb(236,97,10)"/><text x="38.9970%" y="207.50"></text></g><g><title>adt_dtorck_constraint (169,653 samples, 0.21%)</title><rect x="38.8199%" y="181" width="0.2112%" height="15" fill="rgb(233,208,19)"/><text x="39.0699%" y="191.50"></text></g><g><title>evaluate_obligation (573,749 samples, 0.71%)</title><rect x="39.0310%" y="197" width="0.7142%" height="15" fill="rgb(216,164,2)"/><text x="39.2810%" y="207.50"></text></g><g><title>item_attrs (87,931 samples, 0.11%)</title><rect x="39.9508%" y="197" width="0.1095%" height="15" fill="rgb(220,129,5)"/><text x="40.2008%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (83,951 samples, 0.10%)</title><rect x="39.9558%" y="181" width="0.1045%" height="15" fill="rgb(242,17,10)"/><text x="40.2058%" y="191.50"></text></g><g><title>predicates_of (137,201 samples, 0.17%)</title><rect x="40.2118%" y="197" width="0.1708%" height="15" fill="rgb(242,107,0)"/><text x="40.4618%" y="207.50"></text></g><g><title>predicates_defined_on (98,941 samples, 0.12%)</title><rect x="40.2595%" y="181" width="0.1232%" height="15" fill="rgb(251,28,31)"/><text x="40.5095%" y="191.50"></text></g><g><title>adt_sized_constraint (121,712 samples, 0.15%)</title><rect x="43.0558%" y="181" width="0.1515%" height="15" fill="rgb(233,223,10)"/><text x="43.3058%" y="191.50"></text></g><g><title>associated_item (189,603 samples, 0.24%)</title><rect x="43.3025%" y="165" width="0.2360%" height="15" fill="rgb(215,21,27)"/><text x="43.5525%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (150,613 samples, 0.19%)</title><rect x="43.3510%" y="149" width="0.1875%" height="15" fill="rgb(232,23,21)"/><text x="43.6010%" y="159.50"></text></g><g><title>associated_items (272,913 samples, 0.34%)</title><rect x="43.2119%" y="181" width="0.3397%" height="15" fill="rgb(244,5,23)"/><text x="43.4619%" y="191.50"></text></g><g><title>adt_dtorck_constraint (126,541 samples, 0.16%)</title><rect x="43.9006%" y="133" width="0.1575%" height="15" fill="rgb(226,81,46)"/><text x="44.1506%" y="143.50"></text></g><g><title>adt_dtorck_constraint (188,061 samples, 0.23%)</title><rect x="43.8405%" y="149" width="0.2341%" height="15" fill="rgb(247,70,30)"/><text x="44.0905%" y="159.50"></text></g><g><title>dropck_outlives (439,135 samples, 0.55%)</title><rect x="43.5691%" y="181" width="0.5466%" height="15" fill="rgb(212,68,19)"/><text x="43.8191%" y="191.50"></text></g><g><title>adt_dtorck_constraint (357,174 samples, 0.44%)</title><rect x="43.6711%" y="165" width="0.4446%" height="15" fill="rgb(240,187,13)"/><text x="43.9211%" y="175.50"></text></g><g><title>adt_def (125,872 samples, 0.16%)</title><rect x="44.4802%" y="149" width="0.1567%" height="15" fill="rgb(223,113,26)"/><text x="44.7302%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (123,752 samples, 0.15%)</title><rect x="44.4828%" y="133" width="0.1540%" height="15" fill="rgb(206,192,2)"/><text x="44.7328%" y="143.50"></text></g><g><title>item_attrs (94,672 samples, 0.12%)</title><rect x="44.5190%" y="117" width="0.1178%" height="15" fill="rgb(241,108,4)"/><text x="44.7690%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (92,252 samples, 0.11%)</title><rect x="44.5220%" y="101" width="0.1148%" height="15" fill="rgb(247,173,49)"/><text x="44.7720%" y="111.50"></text></g><g><title>adt_def (148,671 samples, 0.19%)</title><rect x="44.6396%" y="133" width="0.1851%" height="15" fill="rgb(224,114,35)"/><text x="44.8896%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (148,001 samples, 0.18%)</title><rect x="44.6404%" y="117" width="0.1842%" height="15" fill="rgb(245,159,27)"/><text x="44.8904%" y="127.50"></text></g><g><title>item_attrs (138,501 samples, 0.17%)</title><rect x="44.6523%" y="101" width="0.1724%" height="15" fill="rgb(245,172,44)"/><text x="44.9023%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (137,771 samples, 0.17%)</title><rect x="44.6532%" y="85" width="0.1715%" height="15" fill="rgb(236,23,11)"/><text x="44.9032%" y="95.50"></text></g><g><title>adt_sized_constraint (153,651 samples, 0.19%)</title><rect x="44.6368%" y="149" width="0.1913%" height="15" fill="rgb(205,117,38)"/><text x="44.8868%" y="159.50"></text></g><g><title>adt_sized_constraint (296,344 samples, 0.37%)</title><rect x="44.4683%" y="165" width="0.3689%" height="15" fill="rgb(237,72,25)"/><text x="44.7183%" y="175.50"></text></g><g><title>evaluate_obligation (652,916 samples, 0.81%)</title><rect x="44.1157%" y="181" width="0.8127%" height="15" fill="rgb(244,70,9)"/><text x="44.3657%" y="191.50"></text></g><g><title>is_copy_raw (306,965 samples, 0.38%)</title><rect x="45.0994%" y="181" width="0.3821%" height="15" fill="rgb(217,125,39)"/><text x="45.3494%" y="191.50"></text></g><g><title>evaluate_obligation (291,335 samples, 0.36%)</title><rect x="45.1188%" y="165" width="0.3626%" height="15" fill="rgb(235,36,10)"/><text x="45.3688%" y="175.50"></text></g><g><title>trait_impls_of (205,862 samples, 0.26%)</title><rect x="45.2252%" y="149" width="0.2563%" height="15" fill="rgb(251,123,47)"/><text x="45.4752%" y="159.50"></text></g><g><title>method_autoderef_steps (90,640 samples, 0.11%)</title><rect x="45.5940%" y="181" width="0.1128%" height="15" fill="rgb(221,13,13)"/><text x="45.8440%" y="191.50"></text></g><g><title>predicates_of (170,000 samples, 0.21%)</title><rect x="45.7168%" y="181" width="0.2116%" height="15" fill="rgb(238,131,9)"/><text x="45.9668%" y="191.50"></text></g><g><title>predicates_defined_on (113,530 samples, 0.14%)</title><rect x="45.7871%" y="165" width="0.1413%" height="15" fill="rgb(211,50,8)"/><text x="46.0371%" y="175.50"></text></g><g><title>typeck (4,473,349 samples, 5.57%)</title><rect x="40.4531%" y="197" width="5.5683%" height="15" fill="rgb(245,182,24)"/><text x="40.7031%" y="207.50">typeck</text></g><g><title>item_bodies_checking (9,801,370 samples, 12.20%)</title><rect x="33.8596%" y="245" width="12.2005%" height="15" fill="rgb(242,14,37)"/><text x="34.1096%" y="255.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (9,798,530 samples, 12.20%)</title><rect x="33.8632%" y="229" width="12.1970%" height="15" fill="rgb(246,228,12)"/><text x="34.1132%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (9,780,308 samples, 12.17%)</title><rect x="33.8859%" y="213" width="12.1743%" height="15" fill="rgb(213,55,15)"/><text x="34.1359%" y="223.50">typeck</text></g><g><title>impl_trait_ref (146,900 samples, 0.18%)</title><rect x="46.9537%" y="85" width="0.1829%" height="15" fill="rgb(209,9,3)"/><text x="47.2037%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (127,090 samples, 0.16%)</title><rect x="46.9784%" y="69" width="0.1582%" height="15" fill="rgb(230,59,30)"/><text x="47.2284%" y="79.50"></text></g><g><title>coherent_trait (336,064 samples, 0.42%)</title><rect x="46.7613%" y="117" width="0.4183%" height="15" fill="rgb(209,121,21)"/><text x="47.0113%" y="127.50"></text></g><g><title>specialization_graph_of (334,514 samples, 0.42%)</title><rect x="46.7632%" y="101" width="0.4164%" height="15" fill="rgb(220,109,13)"/><text x="47.0132%" y="111.50"></text></g><g><title>adt_destructor (341,624 samples, 0.43%)</title><rect x="46.7551%" y="149" width="0.4252%" height="15" fill="rgb(232,18,1)"/><text x="47.0051%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_destructor (340,994 samples, 0.42%)</title><rect x="46.7559%" y="133" width="0.4245%" height="15" fill="rgb(215,41,42)"/><text x="47.0059%" y="143.50"></text></g><g><title>adt_dtorck_constraint (347,724 samples, 0.43%)</title><rect x="46.7484%" y="165" width="0.4328%" height="15" fill="rgb(224,123,36)"/><text x="46.9984%" y="175.50"></text></g><g><title>dropck_outlives (374,144 samples, 0.47%)</title><rect x="46.7168%" y="197" width="0.4657%" height="15" fill="rgb(240,125,3)"/><text x="46.9668%" y="207.50"></text></g><g><title>adt_dtorck_constraint (354,554 samples, 0.44%)</title><rect x="46.7412%" y="181" width="0.4413%" height="15" fill="rgb(205,98,50)"/><text x="46.9912%" y="191.50"></text></g><g><title>typeck (799,898 samples, 1.00%)</title><rect x="46.3821%" y="213" width="0.9957%" height="15" fill="rgb(205,185,37)"/><text x="46.6321%" y="223.50"></text></g><g><title>item_types_checking (1,059,492 samples, 1.32%)</title><rect x="46.0602%" y="245" width="1.3188%" height="15" fill="rgb(238,207,15)"/><text x="46.3102%" y="255.50"></text></g><g><title>check_mod_item_types (1,054,322 samples, 1.31%)</title><rect x="46.0666%" y="229" width="1.3124%" height="15" fill="rgb(213,199,42)"/><text x="46.3166%" y="239.50"></text></g><g><title>fn_sig (264,643 samples, 0.33%)</title><rect x="47.5108%" y="213" width="0.3294%" height="15" fill="rgb(235,201,11)"/><text x="47.7608%" y="223.50"></text></g><g><title>named_region_map (119,240 samples, 0.15%)</title><rect x="47.8936%" y="197" width="0.1484%" height="15" fill="rgb(207,46,11)"/><text x="48.1436%" y="207.50"></text></g><g><title>resolve_lifetimes (115,250 samples, 0.14%)</title><rect x="47.8986%" y="181" width="0.1435%" height="15" fill="rgb(241,35,35)"/><text x="48.1486%" y="191.50"></text></g><g><title>generics_of (172,313 samples, 0.21%)</title><rect x="47.8402%" y="213" width="0.2145%" height="15" fill="rgb(243,32,47)"/><text x="48.0902%" y="223.50"></text></g><g><title>explicit_predicates_of (238,553 samples, 0.30%)</title><rect x="48.1450%" y="181" width="0.2969%" height="15" fill="rgb(247,202,23)"/><text x="48.3950%" y="191.50"></text></g><g><title>predicates_of (364,574 samples, 0.45%)</title><rect x="48.0964%" y="213" width="0.4538%" height="15" fill="rgb(219,102,11)"/><text x="48.3464%" y="223.50"></text></g><g><title>predicates_defined_on (351,044 samples, 0.44%)</title><rect x="48.1132%" y="197" width="0.4370%" height="15" fill="rgb(243,110,44)"/><text x="48.3632%" y="207.50"></text></g><g><title>inferred_outlives_of (86,971 samples, 0.11%)</title><rect x="48.4420%" y="181" width="0.1083%" height="15" fill="rgb(222,74,54)"/><text x="48.6920%" y="191.50"></text></g><g><title>type_collecting (1,010,911 samples, 1.26%)</title><rect x="47.3811%" y="245" width="1.2584%" height="15" fill="rgb(216,99,12)"/><text x="47.6311%" y="255.50"></text></g><g><title>collect_mod_item_types (1,000,901 samples, 1.25%)</title><rect x="47.3936%" y="229" width="1.2459%" height="15" fill="rgb(226,22,26)"/><text x="47.6436%" y="239.50"></text></g><g><title>evaluate_obligation (140,761 samples, 0.18%)</title><rect x="49.0918%" y="213" width="0.1752%" height="15" fill="rgb(217,163,10)"/><text x="49.3418%" y="223.50"></text></g><g><title>evaluate_obligation (144,782 samples, 0.18%)</title><rect x="49.4804%" y="197" width="0.1802%" height="15" fill="rgb(213,25,53)"/><text x="49.7304%" y="207.50"></text></g><g><title>layout_of (92,001 samples, 0.11%)</title><rect x="49.7082%" y="197" width="0.1145%" height="15" fill="rgb(252,105,26)"/><text x="49.9582%" y="207.50"></text></g><g><title>object_safety_violations (464,985 samples, 0.58%)</title><rect x="49.3321%" y="213" width="0.5788%" height="15" fill="rgb(220,39,43)"/><text x="49.5821%" y="223.50"></text></g><g><title>check_impl_item_well_formed (1,077,402 samples, 1.34%)</title><rect x="48.7081%" y="229" width="1.3411%" height="15" fill="rgb(229,68,48)"/><text x="48.9581%" y="239.50"></text></g><g><title>adt_sized_constraint (371,234 samples, 0.46%)</title><rect x="50.7078%" y="181" width="0.4621%" height="15" fill="rgb(252,8,32)"/><text x="50.9578%" y="191.50"></text></g><g><title>adt_sized_constraint (429,594 samples, 0.53%)</title><rect x="50.6386%" y="197" width="0.5347%" height="15" fill="rgb(223,20,43)"/><text x="50.8886%" y="207.50"></text></g><g><title>evaluate_obligation (568,215 samples, 0.71%)</title><rect x="50.5105%" y="213" width="0.7073%" height="15" fill="rgb(229,81,49)"/><text x="50.7605%" y="223.50"></text></g><g><title>implied_outlives_bounds (81,721 samples, 0.10%)</title><rect x="51.2209%" y="213" width="0.1017%" height="15" fill="rgb(236,28,36)"/><text x="51.4709%" y="223.50"></text></g><g><title>param_env (94,312 samples, 0.12%)</title><rect x="51.3229%" y="213" width="0.1174%" height="15" fill="rgb(249,185,26)"/><text x="51.5729%" y="223.50"></text></g><g><title>analysis (40,892,796 samples, 50.90%)</title><rect x="0.8135%" y="277" width="50.9024%" height="15" fill="rgb(249,174,33)"/><text x="1.0635%" y="287.50">analysis</text></g><g><title>type_check_crate (21,717,402 samples, 27.03%)</title><rect x="24.6826%" y="261" width="27.0333%" height="15" fill="rgb(233,201,37)"/><text x="24.9326%" y="271.50">type_check_crate</text></g><g><title>wf_checking (2,470,137 samples, 3.07%)</title><rect x="48.6412%" y="245" width="3.0748%" height="15" fill="rgb(221,78,26)"/><text x="48.8912%" y="255.50">wf_..</text></g><g><title>check_item_well_formed (1,338,954 samples, 1.67%)</title><rect x="50.0492%" y="229" width="1.6667%" height="15" fill="rgb(250,127,30)"/><text x="50.2992%" y="239.50"></text></g><g><title>codegen_crate (569,907 samples, 0.71%)</title><rect x="51.7306%" y="277" width="0.7094%" height="15" fill="rgb(230,49,44)"/><text x="51.9806%" y="287.50"></text></g><g><title>AST_validation (133,992 samples, 0.17%)</title><rect x="52.7213%" y="261" width="0.1668%" height="15" fill="rgb(229,67,23)"/><text x="52.9713%" y="271.50"></text></g><g><title>metadata_load_macro (179,604 samples, 0.22%)</title><rect x="72.2446%" y="229" width="0.2236%" height="15" fill="rgb(249,83,47)"/><text x="72.4946%" y="239.50"></text></g><g><title>metadata_register_crate (3,128,275 samples, 3.89%)</title><rect x="72.4682%" y="229" width="3.8940%" height="15" fill="rgb(215,43,3)"/><text x="72.7182%" y="239.50">meta..</text></g><g><title>metadata_register_crate (1,004,262 samples, 1.25%)</title><rect x="75.1121%" y="213" width="1.2501%" height="15" fill="rgb(238,154,13)"/><text x="75.3621%" y="223.50"></text></g><g><title>metadata_register_crate (84,191 samples, 0.10%)</title><rect x="76.2574%" y="197" width="0.1048%" height="15" fill="rgb(219,56,2)"/><text x="76.5074%" y="207.50"></text></g><g><title>macro_expand_crate (18,874,710 samples, 23.49%)</title><rect x="53.0487%" y="261" width="23.4948%" height="15" fill="rgb(233,0,4)"/><text x="53.2987%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (18,846,740 samples, 23.46%)</title><rect x="53.0836%" y="245" width="23.4600%" height="15" fill="rgb(235,30,7)"/><text x="53.3336%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (145,691 samples, 0.18%)</title><rect x="76.3622%" y="229" width="0.1814%" height="15" fill="rgb(250,79,13)"/><text x="76.6122%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (117,271 samples, 0.15%)</title><rect x="76.5504%" y="261" width="0.1460%" height="15" fill="rgb(211,146,34)"/><text x="76.8004%" y="271.50"></text></g><g><title>finalize_imports (96,871 samples, 0.12%)</title><rect x="76.7092%" y="245" width="0.1206%" height="15" fill="rgb(228,22,38)"/><text x="76.9592%" y="255.50"></text></g><g><title>late_resolve_crate (10,497,157 samples, 13.07%)</title><rect x="76.8965%" y="245" width="13.0666%" height="15" fill="rgb(235,168,5)"/><text x="77.1465%" y="255.50">late_resolve_crate</text></g><g><title>configure_and_expand (30,232,358 samples, 37.63%)</title><rect x="52.4401%" y="277" width="37.6326%" height="15" fill="rgb(221,155,16)"/><text x="52.6901%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (10,745,920 samples, 13.38%)</title><rect x="76.6963%" y="261" width="13.3763%" height="15" fill="rgb(215,215,53)"/><text x="76.9463%" y="271.50">resolve_crate</text></g><g><title>early_lint_checks (150,952 samples, 0.19%)</title><rect x="90.1758%" y="277" width="0.1879%" height="15" fill="rgb(223,4,10)"/><text x="90.4258%" y="287.50"></text></g><g><title>free_global_ctxt (3,499,719 samples, 4.36%)</title><rect x="90.3637%" y="277" width="4.3564%" height="15" fill="rgb(234,103,6)"/><text x="90.6137%" y="287.50">free_..</text></g><g><title>generate_crate_metadata (604,007 samples, 0.75%)</title><rect x="94.7200%" y="277" width="0.7519%" height="15" fill="rgb(227,97,0)"/><text x="94.9700%" y="287.50"></text></g><g><title>hir_lowering (1,211,484 samples, 1.51%)</title><rect x="95.4719%" y="277" width="1.5080%" height="15" fill="rgb(234,150,53)"/><text x="95.7219%" y="287.50"></text></g><g><title>parse_crate (911,870 samples, 1.14%)</title><rect x="97.0359%" y="277" width="1.1351%" height="15" fill="rgb(228,201,54)"/><text x="97.2859%" y="287.50"></text></g><g><title>prepare_outputs (294,003 samples, 0.37%)</title><rect x="98.1824%" y="277" width="0.3660%" height="15" fill="rgb(222,22,37)"/><text x="98.4324%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (742,258 samples, 0.92%)</title><rect x="98.5484%" y="277" width="0.9239%" height="15" fill="rgb(237,53,32)"/><text x="98.7984%" y="287.50"></text></g><g><title>all (80,335,637 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (80,335,637 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(210,40,34)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (342,264 samples, 0.43%)</title><rect x="99.5740%" y="277" width="0.4260%" height="15" fill="rgb(241,220,44)"/><text x="99.8240%" y="287.50"></text></g></svg></svg>