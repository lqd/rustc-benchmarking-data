<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>explicit_predicates_of (63,050 samples, 0.11%)</title><rect x="5.6205%" y="53" width="0.1132%" height="15" fill="rgb(227,0,7)"/><text x="5.8705%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (61,410 samples, 0.11%)</title><rect x="5.6235%" y="37" width="0.1103%" height="15" fill="rgb(217,0,24)"/><text x="5.8735%" y="47.50"></text></g><g><title>needs_drop_raw (270,045 samples, 0.49%)</title><rect x="5.2531%" y="133" width="0.4850%" height="15" fill="rgb(221,193,54)"/><text x="5.5031%" y="143.50"></text></g><g><title>is_copy_raw (214,674 samples, 0.39%)</title><rect x="5.3525%" y="117" width="0.3856%" height="15" fill="rgb(248,212,6)"/><text x="5.6025%" y="127.50"></text></g><g><title>evaluate_obligation (194,663 samples, 0.35%)</title><rect x="5.3885%" y="101" width="0.3496%" height="15" fill="rgb(208,68,35)"/><text x="5.6385%" y="111.50"></text></g><g><title>predicates_of (79,030 samples, 0.14%)</title><rect x="5.5962%" y="85" width="0.1419%" height="15" fill="rgb(232,128,0)"/><text x="5.8462%" y="95.50"></text></g><g><title>predicates_defined_on (70,320 samples, 0.13%)</title><rect x="5.6118%" y="69" width="0.1263%" height="15" fill="rgb(207,160,47)"/><text x="5.8618%" y="79.50"></text></g><g><title>resolve_instance (89,460 samples, 0.16%)</title><rect x="5.7381%" y="133" width="0.1607%" height="15" fill="rgb(228,23,34)"/><text x="5.9881%" y="143.50"></text></g><g><title>thir_body (112,571 samples, 0.20%)</title><rect x="5.9077%" y="133" width="0.2022%" height="15" fill="rgb(218,30,26)"/><text x="6.1577%" y="143.50"></text></g><g><title>mir_const (1,127,212 samples, 2.02%)</title><rect x="4.0898%" y="181" width="2.0246%" height="15" fill="rgb(220,122,19)"/><text x="4.3398%" y="191.50">m..</text></g><g><title>unsafety_check_result (899,301 samples, 1.62%)</title><rect x="4.4991%" y="165" width="1.6153%" height="15" fill="rgb(250,228,42)"/><text x="4.7491%" y="175.50"></text></g><g><title>mir_built (783,218 samples, 1.41%)</title><rect x="4.7076%" y="149" width="1.4068%" height="15" fill="rgb(240,193,28)"/><text x="4.9576%" y="159.50"></text></g><g><title>mir_promoted (1,323,005 samples, 2.38%)</title><rect x="3.7594%" y="197" width="2.3763%" height="15" fill="rgb(216,20,37)"/><text x="4.0094%" y="207.50">mi..</text></g><g><title>type_op_ascribe_user_type (63,790 samples, 0.11%)</title><rect x="6.1357%" y="197" width="0.1146%" height="15" fill="rgb(206,188,39)"/><text x="6.3857%" y="207.50"></text></g><g><title>type_op_prove_predicate (195,422 samples, 0.35%)</title><rect x="6.3581%" y="197" width="0.3510%" height="15" fill="rgb(217,207,13)"/><text x="6.6081%" y="207.50"></text></g><g><title>MIR_borrow_checking (3,068,754 samples, 5.51%)</title><rect x="1.2017%" y="229" width="5.5119%" height="15" fill="rgb(231,73,38)"/><text x="1.4517%" y="239.50">MIR_bor..</text></g><g><title>mir_borrowck (3,052,714 samples, 5.48%)</title><rect x="1.2305%" y="213" width="5.4830%" height="15" fill="rgb(225,20,46)"/><text x="1.4805%" y="223.50">mir_bor..</text></g><g><title>hir_module_items (123,532 samples, 0.22%)</title><rect x="6.7208%" y="229" width="0.2219%" height="15" fill="rgb(210,31,41)"/><text x="6.9708%" y="239.50"></text></g><g><title>get_lang_items (85,561 samples, 0.15%)</title><rect x="7.4833%" y="149" width="0.1537%" height="15" fill="rgb(221,200,47)"/><text x="7.7333%" y="159.50"></text></g><g><title>item_attrs (61,430 samples, 0.11%)</title><rect x="7.6369%" y="149" width="0.1103%" height="15" fill="rgb(226,26,5)"/><text x="7.8869%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (57,100 samples, 0.10%)</title><rect x="7.6447%" y="133" width="0.1026%" height="15" fill="rgb(249,33,26)"/><text x="7.8947%" y="143.50"></text></g><g><title>codegen_fn_attrs (244,832 samples, 0.44%)</title><rect x="7.4172%" y="165" width="0.4397%" height="15" fill="rgb(235,183,28)"/><text x="7.6672%" y="175.50"></text></g><g><title>codegen_fn_attrs (368,404 samples, 0.66%)</title><rect x="7.2016%" y="197" width="0.6617%" height="15" fill="rgb(221,5,38)"/><text x="7.4516%" y="207.50"></text></g><g><title>should_inherit_track_caller (328,513 samples, 0.59%)</title><rect x="7.2733%" y="181" width="0.5900%" height="15" fill="rgb(247,18,42)"/><text x="7.5233%" y="191.50"></text></g><g><title>check_mod_attrs (489,055 samples, 0.88%)</title><rect x="6.9856%" y="213" width="0.8784%" height="15" fill="rgb(241,131,45)"/><text x="7.2356%" y="223.50"></text></g><g><title>lint_levels (55,961 samples, 0.10%)</title><rect x="8.1370%" y="197" width="0.1005%" height="15" fill="rgb(249,31,29)"/><text x="8.3870%" y="207.50"></text></g><g><title>lookup_deprecation_entry (79,151 samples, 0.14%)</title><rect x="8.2375%" y="197" width="0.1422%" height="15" fill="rgb(225,111,53)"/><text x="8.4875%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (279,903 samples, 0.50%)</title><rect x="7.9807%" y="213" width="0.5027%" height="15" fill="rgb(238,160,17)"/><text x="8.2307%" y="223.50"></text></g><g><title>misc_checking_1 (892,580 samples, 1.60%)</title><rect x="6.9433%" y="229" width="1.6032%" height="15" fill="rgb(214,148,48)"/><text x="7.1933%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (128,282 samples, 0.23%)</title><rect x="8.5507%" y="213" width="0.2304%" height="15" fill="rgb(232,36,49)"/><text x="8.8007%" y="223.50"></text></g><g><title>check_mod_liveness (102,322 samples, 0.18%)</title><rect x="8.5973%" y="197" width="0.1838%" height="15" fill="rgb(209,103,24)"/><text x="8.8473%" y="207.50"></text></g><g><title>misc_checking_2 (315,854 samples, 0.57%)</title><rect x="8.5465%" y="229" width="0.5673%" height="15" fill="rgb(229,88,8)"/><text x="8.7965%" y="239.50"></text></g><g><title>match_checking (185,232 samples, 0.33%)</title><rect x="8.7811%" y="213" width="0.3327%" height="15" fill="rgb(213,181,19)"/><text x="9.0311%" y="223.50"></text></g><g><title>check_match (175,932 samples, 0.32%)</title><rect x="8.7978%" y="197" width="0.3160%" height="15" fill="rgb(254,191,54)"/><text x="9.0478%" y="207.50"></text></g><g><title>death_checking (141,752 samples, 0.25%)</title><rect x="9.1986%" y="213" width="0.2546%" height="15" fill="rgb(241,83,37)"/><text x="9.4486%" y="223.50"></text></g><g><title>item_attrs (73,450 samples, 0.13%)</title><rect x="9.3213%" y="197" width="0.1319%" height="15" fill="rgb(233,36,39)"/><text x="9.5713%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (72,570 samples, 0.13%)</title><rect x="9.3228%" y="181" width="0.1303%" height="15" fill="rgb(226,3,54)"/><text x="9.5728%" y="191.50"></text></g><g><title>all_diagnostic_items (59,941 samples, 0.11%)</title><rect x="10.2448%" y="181" width="0.1077%" height="15" fill="rgb(245,192,40)"/><text x="10.4948%" y="191.50"></text></g><g><title>crate_lints (1,579,238 samples, 2.84%)</title><rect x="9.4557%" y="197" width="2.8365%" height="15" fill="rgb(238,167,29)"/><text x="9.7057%" y="207.50">cr..</text></g><g><title>type_of (1,025,732 samples, 1.84%)</title><rect x="10.4499%" y="181" width="1.8423%" height="15" fill="rgb(232,182,51)"/><text x="10.6999%" y="191.50">t..</text></g><g><title>metadata_decode_entry_type_of (791,479 samples, 1.42%)</title><rect x="10.8706%" y="165" width="1.4216%" height="15" fill="rgb(231,60,39)"/><text x="11.1206%" y="175.50"></text></g><g><title>lint_checking (1,628,358 samples, 2.92%)</title><rect x="9.4532%" y="213" width="2.9247%" height="15" fill="rgb(208,69,12)"/><text x="9.7032%" y="223.50">li..</text></g><g><title>privacy_checking_modules (103,471 samples, 0.19%)</title><rect x="12.4736%" y="213" width="0.1858%" height="15" fill="rgb(235,93,37)"/><text x="12.7236%" y="223.50"></text></g><g><title>check_mod_privacy (102,451 samples, 0.18%)</title><rect x="12.4755%" y="197" width="0.1840%" height="15" fill="rgb(213,116,39)"/><text x="12.7255%" y="207.50"></text></g><g><title>misc_checking_3 (1,982,062 samples, 3.56%)</title><rect x="9.1138%" y="229" width="3.5600%" height="15" fill="rgb(222,207,29)"/><text x="9.3638%" y="239.50">misc..</text></g><g><title>impl_parent (113,762 samples, 0.20%)</title><rect x="13.8694%" y="133" width="0.2043%" height="15" fill="rgb(206,96,30)"/><text x="14.1194%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (67,162 samples, 0.12%)</title><rect x="13.9531%" y="117" width="0.1206%" height="15" fill="rgb(218,138,4)"/><text x="14.2031%" y="127.50"></text></g><g><title>impl_trait_ref (365,624 samples, 0.66%)</title><rect x="14.0737%" y="133" width="0.6567%" height="15" fill="rgb(250,191,14)"/><text x="14.3237%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (323,034 samples, 0.58%)</title><rect x="14.1502%" y="117" width="0.5802%" height="15" fill="rgb(239,60,40)"/><text x="14.4002%" y="127.50"></text></g><g><title>adt_destructor (1,100,093 samples, 1.98%)</title><rect x="12.8492%" y="181" width="1.9759%" height="15" fill="rgb(206,27,48)"/><text x="13.0992%" y="191.50">a..</text></g><g><title>coherent_trait (1,089,493 samples, 1.96%)</title><rect x="12.8682%" y="165" width="1.9569%" height="15" fill="rgb(225,35,8)"/><text x="13.1182%" y="175.50">c..</text></g><g><title>specialization_graph_of (1,086,992 samples, 1.95%)</title><rect x="12.8727%" y="149" width="1.9524%" height="15" fill="rgb(250,213,24)"/><text x="13.1227%" y="159.50">s..</text></g><g><title>param_env (149,841 samples, 0.27%)</title><rect x="14.8251%" y="181" width="0.2691%" height="15" fill="rgb(247,123,22)"/><text x="15.0751%" y="191.50"></text></g><g><title>impl_parent (3,410,883 samples, 6.13%)</title><rect x="26.7013%" y="165" width="6.1264%" height="15" fill="rgb(231,138,38)"/><text x="26.9513%" y="175.50">impl_par..</text></g><g><title>metadata_decode_entry_impl_parent (1,795,685 samples, 3.23%)</title><rect x="29.6024%" y="149" width="3.2253%" height="15" fill="rgb(231,145,46)"/><text x="29.8524%" y="159.50">met..</text></g><g><title>impl_trait_ref (9,031,990 samples, 16.22%)</title><rect x="32.8277%" y="165" width="16.2225%" height="15" fill="rgb(251,118,11)"/><text x="33.0777%" y="175.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,408,622 samples, 13.31%)</title><rect x="35.7435%" y="149" width="13.3068%" height="15" fill="rgb(217,147,25)"/><text x="35.9935%" y="159.50">metadata_decode_entr..</text></g><g><title>coherent_trait (21,551,452 samples, 38.71%)</title><rect x="12.7895%" y="197" width="38.7090%" height="15" fill="rgb(247,81,37)"/><text x="13.0395%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (20,268,287 samples, 36.40%)</title><rect x="15.0942%" y="181" width="36.4043%" height="15" fill="rgb(209,12,38)"/><text x="15.3442%" y="191.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,360,475 samples, 2.44%)</title><rect x="49.0549%" y="165" width="2.4436%" height="15" fill="rgb(227,1,9)"/><text x="49.3049%" y="175.50">tr..</text></g><g><title>implementations_of_trait (306,666 samples, 0.55%)</title><rect x="50.9477%" y="149" width="0.5508%" height="15" fill="rgb(248,47,43)"/><text x="51.1977%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (246,664 samples, 0.44%)</title><rect x="51.0555%" y="133" width="0.4430%" height="15" fill="rgb(221,10,30)"/><text x="51.3055%" y="143.50"></text></g><g><title>coherence_checking (21,623,162 samples, 38.84%)</title><rect x="12.7472%" y="213" width="38.8378%" height="15" fill="rgb(210,229,1)"/><text x="12.9972%" y="223.50">coherence_checking</text></g><g><title>adt_def (56,210 samples, 0.10%)</title><rect x="57.9593%" y="149" width="0.1010%" height="15" fill="rgb(222,148,37)"/><text x="58.2093%" y="159.50"></text></g><g><title>adt_sized_constraint (67,250 samples, 0.12%)</title><rect x="57.9479%" y="165" width="0.1208%" height="15" fill="rgb(234,67,33)"/><text x="58.1979%" y="175.50"></text></g><g><title>associated_items (86,840 samples, 0.16%)</title><rect x="58.0843%" y="165" width="0.1560%" height="15" fill="rgb(247,98,35)"/><text x="58.3343%" y="175.50"></text></g><g><title>dropck_outlives (249,733 samples, 0.45%)</title><rect x="58.3188%" y="165" width="0.4486%" height="15" fill="rgb(247,138,52)"/><text x="58.5688%" y="175.50"></text></g><g><title>adt_dtorck_constraint (161,253 samples, 0.29%)</title><rect x="58.4777%" y="149" width="0.2896%" height="15" fill="rgb(213,79,30)"/><text x="58.7277%" y="159.50"></text></g><g><title>adt_def (77,083 samples, 0.14%)</title><rect x="59.3043%" y="133" width="0.1385%" height="15" fill="rgb(246,177,23)"/><text x="59.5543%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (75,013 samples, 0.13%)</title><rect x="59.3080%" y="117" width="0.1347%" height="15" fill="rgb(230,62,27)"/><text x="59.5580%" y="127.50"></text></g><g><title>adt_sized_constraint (92,243 samples, 0.17%)</title><rect x="59.2853%" y="149" width="0.1657%" height="15" fill="rgb(216,154,8)"/><text x="59.5353%" y="159.50"></text></g><g><title>evaluate_obligation (727,279 samples, 1.31%)</title><rect x="58.7673%" y="165" width="1.3063%" height="15" fill="rgb(244,35,45)"/><text x="59.0173%" y="175.50"></text></g><g><title>trait_impls_of (280,604 samples, 0.50%)</title><rect x="59.5696%" y="149" width="0.5040%" height="15" fill="rgb(251,115,12)"/><text x="59.8196%" y="159.50"></text></g><g><title>implementations_of_trait (102,012 samples, 0.18%)</title><rect x="59.8904%" y="133" width="0.1832%" height="15" fill="rgb(240,54,50)"/><text x="60.1404%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (66,282 samples, 0.12%)</title><rect x="59.9546%" y="117" width="0.1191%" height="15" fill="rgb(233,84,52)"/><text x="60.2046%" y="127.50"></text></g><g><title>fn_sig (65,890 samples, 0.12%)</title><rect x="60.0950%" y="165" width="0.1183%" height="15" fill="rgb(207,117,47)"/><text x="60.3450%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (57,640 samples, 0.10%)</title><rect x="60.1098%" y="149" width="0.1035%" height="15" fill="rgb(249,43,39)"/><text x="60.3598%" y="159.50"></text></g><g><title>generics_of (57,292 samples, 0.10%)</title><rect x="60.2133%" y="165" width="0.1029%" height="15" fill="rgb(209,38,44)"/><text x="60.4633%" y="175.50"></text></g><g><title>item_attrs (93,250 samples, 0.17%)</title><rect x="60.4384%" y="165" width="0.1675%" height="15" fill="rgb(236,212,23)"/><text x="60.6884%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (86,750 samples, 0.16%)</title><rect x="60.4501%" y="149" width="0.1558%" height="15" fill="rgb(242,79,21)"/><text x="60.7001%" y="159.50"></text></g><g><title>method_autoderef_steps (85,341 samples, 0.15%)</title><rect x="60.6711%" y="165" width="0.1533%" height="15" fill="rgb(211,96,35)"/><text x="60.9211%" y="175.50"></text></g><g><title>evaluate_obligation (71,121 samples, 0.13%)</title><rect x="60.6966%" y="149" width="0.1277%" height="15" fill="rgb(253,215,40)"/><text x="60.9466%" y="159.50"></text></g><g><title>explicit_predicates_of (56,591 samples, 0.10%)</title><rect x="61.0767%" y="133" width="0.1016%" height="15" fill="rgb(211,81,21)"/><text x="61.3267%" y="143.50"></text></g><g><title>predicates_of (208,341 samples, 0.37%)</title><rect x="60.8561%" y="165" width="0.3742%" height="15" fill="rgb(208,190,38)"/><text x="61.1061%" y="175.50"></text></g><g><title>predicates_defined_on (132,111 samples, 0.24%)</title><rect x="60.9930%" y="149" width="0.2373%" height="15" fill="rgb(235,213,38)"/><text x="61.2430%" y="159.50"></text></g><g><title>type_of (71,242 samples, 0.13%)</title><rect x="61.3071%" y="165" width="0.1280%" height="15" fill="rgb(237,122,38)"/><text x="61.5571%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (56,510 samples, 0.10%)</title><rect x="61.3335%" y="149" width="0.1015%" height="15" fill="rgb(244,218,35)"/><text x="61.5835%" y="159.50"></text></g><g><title>item_bodies_checking (5,507,431 samples, 9.89%)</title><rect x="51.6355%" y="213" width="9.8920%" height="15" fill="rgb(240,68,47)"/><text x="51.8855%" y="223.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (5,504,281 samples, 9.89%)</title><rect x="51.6411%" y="197" width="9.8864%" height="15" fill="rgb(210,16,53)"/><text x="51.8911%" y="207.50">typeck_item_bo..</text></g><g><title>typeck (5,483,531 samples, 9.85%)</title><rect x="51.6784%" y="181" width="9.8491%" height="15" fill="rgb(235,124,12)"/><text x="51.9284%" y="191.50">typeck</text></g><g><title>item_types_checking (443,805 samples, 0.80%)</title><rect x="61.5275%" y="213" width="0.7971%" height="15" fill="rgb(224,169,11)"/><text x="61.7775%" y="223.50"></text></g><g><title>check_mod_item_types (440,245 samples, 0.79%)</title><rect x="61.5339%" y="197" width="0.7907%" height="15" fill="rgb(250,166,2)"/><text x="61.7839%" y="207.50"></text></g><g><title>fn_sig (171,104 samples, 0.31%)</title><rect x="62.5397%" y="181" width="0.3073%" height="15" fill="rgb(242,216,29)"/><text x="62.7897%" y="191.50"></text></g><g><title>type_of (56,041 samples, 0.10%)</title><rect x="62.7464%" y="165" width="0.1007%" height="15" fill="rgb(230,116,27)"/><text x="62.9964%" y="175.50"></text></g><g><title>named_region_map (120,350 samples, 0.22%)</title><rect x="62.9326%" y="165" width="0.2162%" height="15" fill="rgb(228,99,48)"/><text x="63.1826%" y="175.50"></text></g><g><title>resolve_lifetimes (104,860 samples, 0.19%)</title><rect x="62.9604%" y="149" width="0.1883%" height="15" fill="rgb(253,11,6)"/><text x="63.2104%" y="159.50"></text></g><g><title>generics_of (177,960 samples, 0.32%)</title><rect x="62.8471%" y="181" width="0.3196%" height="15" fill="rgb(247,143,39)"/><text x="63.0971%" y="191.50"></text></g><g><title>explicit_predicates_of (57,260 samples, 0.10%)</title><rect x="63.3491%" y="149" width="0.1028%" height="15" fill="rgb(236,97,10)"/><text x="63.5991%" y="159.50"></text></g><g><title>predicates_of (139,191 samples, 0.25%)</title><rect x="63.2642%" y="181" width="0.2500%" height="15" fill="rgb(233,208,19)"/><text x="63.5142%" y="191.50"></text></g><g><title>predicates_defined_on (124,091 samples, 0.22%)</title><rect x="63.2914%" y="165" width="0.2229%" height="15" fill="rgb(216,164,2)"/><text x="63.5414%" y="175.50"></text></g><g><title>type_collecting (738,538 samples, 1.33%)</title><rect x="62.3278%" y="213" width="1.3265%" height="15" fill="rgb(220,129,5)"/><text x="62.5778%" y="223.50"></text></g><g><title>collect_mod_item_types (729,088 samples, 1.31%)</title><rect x="62.3448%" y="197" width="1.3095%" height="15" fill="rgb(242,17,10)"/><text x="62.5948%" y="207.50"></text></g><g><title>type_of (78,001 samples, 0.14%)</title><rect x="63.5142%" y="181" width="0.1401%" height="15" fill="rgb(242,107,0)"/><text x="63.7642%" y="191.50"></text></g><g><title>adt_def (84,441 samples, 0.15%)</title><rect x="65.2337%" y="133" width="0.1517%" height="15" fill="rgb(251,28,31)"/><text x="65.4837%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (83,891 samples, 0.15%)</title><rect x="65.2347%" y="117" width="0.1507%" height="15" fill="rgb(233,223,10)"/><text x="65.4847%" y="127.50"></text></g><g><title>adt_sized_constraint (92,941 samples, 0.17%)</title><rect x="65.2308%" y="149" width="0.1669%" height="15" fill="rgb(215,21,27)"/><text x="65.4808%" y="159.50"></text></g><g><title>adt_sized_constraint (158,321 samples, 0.28%)</title><rect x="65.1205%" y="165" width="0.2844%" height="15" fill="rgb(232,23,21)"/><text x="65.3705%" y="175.50"></text></g><g><title>evaluate_obligation (442,377 samples, 0.79%)</title><rect x="64.7684%" y="181" width="0.7946%" height="15" fill="rgb(244,5,23)"/><text x="65.0184%" y="191.50"></text></g><g><title>implied_outlives_bounds (108,730 samples, 0.20%)</title><rect x="65.5629%" y="181" width="0.1953%" height="15" fill="rgb(226,81,46)"/><text x="65.8129%" y="191.50"></text></g><g><title>param_env (69,531 samples, 0.12%)</title><rect x="65.7582%" y="181" width="0.1249%" height="15" fill="rgb(247,70,30)"/><text x="66.0082%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,308,114 samples, 2.35%)</title><rect x="63.7653%" y="197" width="2.3495%" height="15" fill="rgb(212,68,19)"/><text x="64.0153%" y="207.50">c..</text></g><g><title>region_scope_tree (74,760 samples, 0.13%)</title><rect x="65.9805%" y="181" width="0.1343%" height="15" fill="rgb(240,187,13)"/><text x="66.2305%" y="191.50"></text></g><g><title>evaluate_obligation (113,501 samples, 0.20%)</title><rect x="66.8469%" y="181" width="0.2039%" height="15" fill="rgb(223,113,26)"/><text x="67.0969%" y="191.50"></text></g><g><title>implied_outlives_bounds (68,831 samples, 0.12%)</title><rect x="67.0635%" y="181" width="0.1236%" height="15" fill="rgb(206,192,2)"/><text x="67.3135%" y="191.50"></text></g><g><title>param_env (68,760 samples, 0.12%)</title><rect x="67.1872%" y="181" width="0.1235%" height="15" fill="rgb(241,108,4)"/><text x="67.4372%" y="191.50"></text></g><g><title>predicates_of (83,092 samples, 0.15%)</title><rect x="67.3107%" y="181" width="0.1492%" height="15" fill="rgb(247,173,49)"/><text x="67.5607%" y="191.50"></text></g><g><title>predicates_defined_on (58,862 samples, 0.11%)</title><rect x="67.3542%" y="165" width="0.1057%" height="15" fill="rgb(224,114,35)"/><text x="67.6042%" y="175.50"></text></g><g><title>analysis (37,076,434 samples, 66.59%)</title><rect x="0.9544%" y="245" width="66.5938%" height="15" fill="rgb(245,159,27)"/><text x="1.2044%" y="255.50">analysis</text></g><g><title>type_check_crate (30,551,591 samples, 54.87%)</title><rect x="12.6738%" y="229" width="54.8744%" height="15" fill="rgb(245,172,44)"/><text x="12.9238%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,166,434 samples, 3.89%)</title><rect x="63.6570%" y="213" width="3.8912%" height="15" fill="rgb(236,23,11)"/><text x="63.9070%" y="223.50">wf_c..</text></g><g><title>check_item_well_formed (798,039 samples, 1.43%)</title><rect x="66.1148%" y="197" width="1.4334%" height="15" fill="rgb(205,117,38)"/><text x="66.3648%" y="207.50"></text></g><g><title>native_libraries (119,521 samples, 0.21%)</title><rect x="68.5003%" y="229" width="0.2147%" height="15" fill="rgb(237,72,25)"/><text x="68.7503%" y="239.50"></text></g><g><title>metadata_decode_entry_native_libraries (113,891 samples, 0.20%)</title><rect x="68.5104%" y="213" width="0.2046%" height="15" fill="rgb(244,70,9)"/><text x="68.7604%" y="223.50"></text></g><g><title>codegen_crate (659,778 samples, 1.19%)</title><rect x="67.5632%" y="245" width="1.1850%" height="15" fill="rgb(217,125,39)"/><text x="67.8132%" y="255.50"></text></g><g><title>AST_validation (97,561 samples, 0.18%)</title><rect x="69.0679%" y="229" width="0.1752%" height="15" fill="rgb(235,36,10)"/><text x="69.3179%" y="239.50"></text></g><g><title>crate_injection (62,791 samples, 0.11%)</title><rect x="69.3197%" y="229" width="0.1128%" height="15" fill="rgb(251,123,47)"/><text x="69.5697%" y="239.50"></text></g><g><title>metadata_load_macro (216,022 samples, 0.39%)</title><rect x="82.2296%" y="197" width="0.3880%" height="15" fill="rgb(221,13,13)"/><text x="82.4796%" y="207.50"></text></g><g><title>macro_expand_crate (9,720,428 samples, 17.46%)</title><rect x="69.4325%" y="229" width="17.4591%" height="15" fill="rgb(238,131,9)"/><text x="69.6825%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (9,700,688 samples, 17.42%)</title><rect x="69.4679%" y="213" width="17.4236%" height="15" fill="rgb(211,50,8)"/><text x="69.7179%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,379,536 samples, 4.27%)</title><rect x="82.6176%" y="197" width="4.2739%" height="15" fill="rgb(245,182,24)"/><text x="82.8676%" y="207.50">metad..</text></g><g><title>metadata_register_crate (2,105,903 samples, 3.78%)</title><rect x="83.1091%" y="181" width="3.7825%" height="15" fill="rgb(242,14,37)"/><text x="83.3591%" y="191.50">meta..</text></g><g><title>metadata_register_crate (1,725,139 samples, 3.10%)</title><rect x="83.7930%" y="165" width="3.0986%" height="15" fill="rgb(246,228,12)"/><text x="84.0430%" y="175.50">met..</text></g><g><title>metadata_register_crate (685,297 samples, 1.23%)</title><rect x="85.6607%" y="149" width="1.2309%" height="15" fill="rgb(213,55,15)"/><text x="85.9107%" y="159.50"></text></g><g><title>metadata_register_crate (59,450 samples, 0.11%)</title><rect x="86.7848%" y="133" width="0.1068%" height="15" fill="rgb(209,9,3)"/><text x="87.0348%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (110,801 samples, 0.20%)</title><rect x="86.8980%" y="229" width="0.1990%" height="15" fill="rgb(230,59,30)"/><text x="87.1480%" y="239.50"></text></g><g><title>finalize_macro_resolutions (194,942 samples, 0.35%)</title><rect x="87.2017%" y="213" width="0.3501%" height="15" fill="rgb(209,121,21)"/><text x="87.4517%" y="223.50"></text></g><g><title>late_resolve_crate (897,150 samples, 1.61%)</title><rect x="87.5519%" y="213" width="1.6114%" height="15" fill="rgb(220,109,13)"/><text x="87.8019%" y="223.50"></text></g><g><title>configure_and_expand (11,416,727 samples, 20.51%)</title><rect x="68.7482%" y="245" width="20.5058%" height="15" fill="rgb(232,18,1)"/><text x="68.9982%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,200,933 samples, 2.16%)</title><rect x="87.0970%" y="229" width="2.1570%" height="15" fill="rgb(215,41,42)"/><text x="87.3470%" y="239.50">r..</text></g><g><title>early_lint_checks (128,271 samples, 0.23%)</title><rect x="89.3780%" y="245" width="0.2304%" height="15" fill="rgb(224,123,36)"/><text x="89.6280%" y="255.50"></text></g><g><title>free_global_ctxt (2,539,418 samples, 4.56%)</title><rect x="89.6084%" y="245" width="4.5611%" height="15" fill="rgb(240,125,3)"/><text x="89.8584%" y="255.50">free_..</text></g><g><title>crate_hash (68,101 samples, 0.12%)</title><rect x="94.6173%" y="229" width="0.1223%" height="15" fill="rgb(205,98,50)"/><text x="94.8673%" y="239.50"></text></g><g><title>generate_crate_metadata (382,084 samples, 0.69%)</title><rect x="94.1695%" y="245" width="0.6863%" height="15" fill="rgb(205,185,37)"/><text x="94.4195%" y="255.50"></text></g><g><title>hir_lowering (798,739 samples, 1.43%)</title><rect x="94.8557%" y="245" width="1.4346%" height="15" fill="rgb(238,207,15)"/><text x="95.1057%" y="255.50"></text></g><g><title>parse_crate (871,470 samples, 1.57%)</title><rect x="96.3731%" y="245" width="1.5653%" height="15" fill="rgb(213,199,42)"/><text x="96.6231%" y="255.50"></text></g><g><title>prepare_outputs (252,653 samples, 0.45%)</title><rect x="97.9524%" y="245" width="0.4538%" height="15" fill="rgb(235,201,11)"/><text x="98.2024%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (463,055 samples, 0.83%)</title><rect x="98.4062%" y="245" width="0.8317%" height="15" fill="rgb(207,46,11)"/><text x="98.6562%" y="255.50"></text></g><g><title>setup_global_ctxt (116,271 samples, 0.21%)</title><rect x="99.2578%" y="245" width="0.2088%" height="15" fill="rgb(241,35,35)"/><text x="99.5078%" y="255.50"></text></g><g><title>all (55,675,532 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (55,675,532 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (296,973 samples, 0.53%)</title><rect x="99.4666%" y="245" width="0.5334%" height="15" fill="rgb(219,102,11)"/><text x="99.7166%" y="255.50"></text></g></svg></svg>