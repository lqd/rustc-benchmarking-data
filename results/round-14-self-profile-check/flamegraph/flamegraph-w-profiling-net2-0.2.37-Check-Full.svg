<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (312,795 samples, 0.16%)</title><rect x="13.4682%" y="149" width="0.1578%" height="15" fill="rgb(227,0,7)"/><text x="13.7182%" y="159.50"></text></g><g><title>param_env (476,135 samples, 0.24%)</title><rect x="15.9467%" y="117" width="0.2403%" height="15" fill="rgb(217,0,24)"/><text x="16.1967%" y="127.50"></text></g><g><title>item_attrs (346,064 samples, 0.17%)</title><rect x="16.8839%" y="85" width="0.1746%" height="15" fill="rgb(221,193,54)"/><text x="17.1339%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (334,174 samples, 0.17%)</title><rect x="16.8899%" y="69" width="0.1686%" height="15" fill="rgb(248,212,6)"/><text x="17.1399%" y="79.50"></text></g><g><title>codegen_fn_attrs (570,267 samples, 0.29%)</title><rect x="16.7860%" y="101" width="0.2877%" height="15" fill="rgb(208,68,35)"/><text x="17.0360%" y="111.50"></text></g><g><title>is_copy_raw (438,735 samples, 0.22%)</title><rect x="20.4224%" y="85" width="0.2214%" height="15" fill="rgb(232,128,0)"/><text x="20.6724%" y="95.50"></text></g><g><title>evaluate_obligation (380,695 samples, 0.19%)</title><rect x="20.4517%" y="69" width="0.1921%" height="15" fill="rgb(207,160,47)"/><text x="20.7017%" y="79.50"></text></g><g><title>adt_drop_tys (265,015 samples, 0.13%)</title><rect x="20.7338%" y="69" width="0.1337%" height="15" fill="rgb(228,23,34)"/><text x="20.9838%" y="79.50"></text></g><g><title>needs_drop_raw (1,645,115 samples, 0.83%)</title><rect x="20.6445%" y="85" width="0.8301%" height="15" fill="rgb(218,30,26)"/><text x="20.8945%" y="95.50"></text></g><g><title>is_copy_raw (1,203,037 samples, 0.61%)</title><rect x="20.8675%" y="69" width="0.6070%" height="15" fill="rgb(220,122,19)"/><text x="21.1175%" y="79.50"></text></g><g><title>evaluate_obligation (952,627 samples, 0.48%)</title><rect x="20.9939%" y="53" width="0.4807%" height="15" fill="rgb(250,228,42)"/><text x="21.2439%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (262,662 samples, 0.13%)</title><rect x="21.7525%" y="69" width="0.1325%" height="15" fill="rgb(240,193,28)"/><text x="22.0025%" y="79.50"></text></g><g><title>impl_parent (230,756 samples, 0.12%)</title><rect x="22.1386%" y="53" width="0.1164%" height="15" fill="rgb(216,20,37)"/><text x="22.3886%" y="63.50"></text></g><g><title>specialization_graph_of (1,109,193 samples, 0.56%)</title><rect x="21.9280%" y="69" width="0.5597%" height="15" fill="rgb(206,188,39)"/><text x="22.1780%" y="79.50"></text></g><g><title>impl_trait_ref (461,033 samples, 0.23%)</title><rect x="22.2551%" y="53" width="0.2326%" height="15" fill="rgb(217,207,13)"/><text x="22.5051%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (372,203 samples, 0.19%)</title><rect x="22.2999%" y="37" width="0.1878%" height="15" fill="rgb(231,73,38)"/><text x="22.5499%" y="47.50"></text></g><g><title>resolve_instance (2,172,814 samples, 1.10%)</title><rect x="21.4746%" y="85" width="1.0964%" height="15" fill="rgb(225,20,46)"/><text x="21.7246%" y="95.50"></text></g><g><title>thir_body (2,606,123 samples, 1.32%)</title><rect x="22.6271%" y="85" width="1.3150%" height="15" fill="rgb(210,31,41)"/><text x="22.8771%" y="95.50"></text></g><g><title>mir_const (18,157,466 samples, 9.16%)</title><rect x="14.8188%" y="133" width="9.1620%" height="15" fill="rgb(221,200,47)"/><text x="15.0688%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (15,445,875 samples, 7.79%)</title><rect x="16.1870%" y="117" width="7.7938%" height="15" fill="rgb(226,26,5)"/><text x="16.4370%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (13,688,523 samples, 6.91%)</title><rect x="17.0737%" y="101" width="6.9070%" height="15" fill="rgb(249,33,26)"/><text x="17.3237%" y="111.50">mir_built</text></g><g><title>mir_promoted (20,444,900 samples, 10.32%)</title><rect x="13.7428%" y="149" width="10.3162%" height="15" fill="rgb(235,183,28)"/><text x="13.9928%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (557,159 samples, 0.28%)</title><rect x="24.0592%" y="149" width="0.2811%" height="15" fill="rgb(221,5,38)"/><text x="24.3092%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (334,580 samples, 0.17%)</title><rect x="24.3403%" y="149" width="0.1688%" height="15" fill="rgb(247,18,42)"/><text x="24.5903%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,338,440 samples, 1.68%)</title><rect x="24.5592%" y="149" width="1.6845%" height="15" fill="rgb(241,131,45)"/><text x="24.8092%" y="159.50"></text></g><g><title>evaluate_obligation (587,015 samples, 0.30%)</title><rect x="25.9475%" y="133" width="0.2962%" height="15" fill="rgb(249,31,29)"/><text x="26.1975%" y="143.50"></text></g><g><title>MIR_borrow_checking (50,623,287 samples, 25.54%)</title><rect x="0.7020%" y="181" width="25.5438%" height="15" fill="rgb(225,111,53)"/><text x="0.9520%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (50,206,304 samples, 25.33%)</title><rect x="0.9124%" y="165" width="25.3334%" height="15" fill="rgb(238,160,17)"/><text x="1.1624%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (204,952 samples, 0.10%)</title><rect x="26.2458%" y="181" width="0.1034%" height="15" fill="rgb(214,148,48)"/><text x="26.4958%" y="191.50"></text></g><g><title>hir_module_items (429,916 samples, 0.22%)</title><rect x="26.3492%" y="181" width="0.2169%" height="15" fill="rgb(232,36,49)"/><text x="26.5992%" y="191.50"></text></g><g><title>should_inherit_track_caller (424,477 samples, 0.21%)</title><rect x="26.9935%" y="133" width="0.2142%" height="15" fill="rgb(209,103,24)"/><text x="27.2435%" y="143.50"></text></g><g><title>codegen_fn_attrs (799,860 samples, 0.40%)</title><rect x="26.8136%" y="149" width="0.4036%" height="15" fill="rgb(229,88,8)"/><text x="27.0636%" y="159.50"></text></g><g><title>check_mod_attrs (1,258,025 samples, 0.63%)</title><rect x="26.5824%" y="165" width="0.6348%" height="15" fill="rgb(213,181,19)"/><text x="26.8324%" y="175.50"></text></g><g><title>check_mod_const_bodies (295,824 samples, 0.15%)</title><rect x="27.2172%" y="165" width="0.1493%" height="15" fill="rgb(254,191,54)"/><text x="27.4672%" y="175.50"></text></g><g><title>is_copy_raw (312,574 samples, 0.16%)</title><rect x="27.5985%" y="149" width="0.1577%" height="15" fill="rgb(241,83,37)"/><text x="27.8485%" y="159.50"></text></g><g><title>evaluate_obligation (280,693 samples, 0.14%)</title><rect x="27.6146%" y="133" width="0.1416%" height="15" fill="rgb(233,36,39)"/><text x="27.8646%" y="143.50"></text></g><g><title>lookup_deprecation_entry (228,143 samples, 0.12%)</title><rect x="27.7563%" y="149" width="0.1151%" height="15" fill="rgb(226,3,54)"/><text x="28.0063%" y="159.50"></text></g><g><title>param_env (338,204 samples, 0.17%)</title><rect x="27.9155%" y="149" width="0.1707%" height="15" fill="rgb(245,192,40)"/><text x="28.1655%" y="159.50"></text></g><g><title>predicates_of (212,973 samples, 0.11%)</title><rect x="27.9787%" y="133" width="0.1075%" height="15" fill="rgb(238,167,29)"/><text x="28.2287%" y="143.50"></text></g><g><title>predicates_defined_on (211,073 samples, 0.11%)</title><rect x="27.9796%" y="117" width="0.1065%" height="15" fill="rgb(232,182,51)"/><text x="28.2296%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,355,345 samples, 0.68%)</title><rect x="27.4445%" y="165" width="0.6839%" height="15" fill="rgb(231,60,39)"/><text x="27.6945%" y="175.50"></text></g><g><title>misc_checking_1 (3,178,016 samples, 1.60%)</title><rect x="26.5664%" y="181" width="1.6036%" height="15" fill="rgb(208,69,12)"/><text x="26.8164%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,043,732 samples, 0.53%)</title><rect x="28.1708%" y="165" width="0.5267%" height="15" fill="rgb(235,93,37)"/><text x="28.4208%" y="175.50"></text></g><g><title>check_mod_liveness (844,860 samples, 0.43%)</title><rect x="28.2712%" y="149" width="0.4263%" height="15" fill="rgb(213,116,39)"/><text x="28.5212%" y="159.50"></text></g><g><title>misc_checking_2 (2,409,478 samples, 1.22%)</title><rect x="28.1699%" y="181" width="1.2158%" height="15" fill="rgb(222,207,29)"/><text x="28.4199%" y="191.50"></text></g><g><title>match_checking (1,364,006 samples, 0.69%)</title><rect x="28.6975%" y="165" width="0.6883%" height="15" fill="rgb(206,96,30)"/><text x="28.9475%" y="175.50"></text></g><g><title>check_match (1,268,685 samples, 0.64%)</title><rect x="28.7456%" y="149" width="0.6402%" height="15" fill="rgb(218,138,4)"/><text x="28.9956%" y="159.50"></text></g><g><title>check_private_in_public (475,226 samples, 0.24%)</title><rect x="29.3908%" y="165" width="0.2398%" height="15" fill="rgb(250,191,14)"/><text x="29.6408%" y="175.50"></text></g><g><title>death_checking (699,407 samples, 0.35%)</title><rect x="29.6306%" y="165" width="0.3529%" height="15" fill="rgb(239,60,40)"/><text x="29.8806%" y="175.50"></text></g><g><title>param_env (867,189 samples, 0.44%)</title><rect x="30.5254%" y="133" width="0.4376%" height="15" fill="rgb(206,27,48)"/><text x="30.7754%" y="143.50"></text></g><g><title>predicates_of (533,585 samples, 0.27%)</title><rect x="30.6937%" y="117" width="0.2692%" height="15" fill="rgb(225,35,8)"/><text x="30.9437%" y="127.50"></text></g><g><title>predicates_defined_on (462,775 samples, 0.23%)</title><rect x="30.7294%" y="101" width="0.2335%" height="15" fill="rgb(250,213,24)"/><text x="30.9794%" y="111.50"></text></g><g><title>crate_lints (3,033,824 samples, 1.53%)</title><rect x="29.9842%" y="149" width="1.5308%" height="15" fill="rgb(247,123,22)"/><text x="30.2342%" y="159.50"></text></g><g><title>type_of (1,087,149 samples, 0.55%)</title><rect x="30.9665%" y="133" width="0.5486%" height="15" fill="rgb(231,138,38)"/><text x="31.2165%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (857,597 samples, 0.43%)</title><rect x="31.0823%" y="117" width="0.4327%" height="15" fill="rgb(231,145,46)"/><text x="31.3323%" y="127.50"></text></g><g><title>lint_checking (3,862,163 samples, 1.95%)</title><rect x="29.9836%" y="165" width="1.9488%" height="15" fill="rgb(251,118,11)"/><text x="30.2336%" y="175.50">l..</text></g><g><title>module_lints (827,019 samples, 0.42%)</title><rect x="31.5150%" y="149" width="0.4173%" height="15" fill="rgb(217,147,25)"/><text x="31.7650%" y="159.50"></text></g><g><title>lint_mod (817,269 samples, 0.41%)</title><rect x="31.5200%" y="133" width="0.4124%" height="15" fill="rgb(247,81,37)"/><text x="31.7700%" y="143.50"></text></g><g><title>privacy_access_levels (533,216 samples, 0.27%)</title><rect x="31.9323%" y="165" width="0.2691%" height="15" fill="rgb(209,12,38)"/><text x="32.1823%" y="175.50"></text></g><g><title>privacy_checking_modules (1,552,267 samples, 0.78%)</title><rect x="32.2014%" y="165" width="0.7833%" height="15" fill="rgb(227,1,9)"/><text x="32.4514%" y="175.50"></text></g><g><title>check_mod_privacy (1,544,797 samples, 0.78%)</title><rect x="32.2052%" y="149" width="0.7795%" height="15" fill="rgb(248,47,43)"/><text x="32.4552%" y="159.50"></text></g><g><title>misc_checking_3 (7,153,490 samples, 3.61%)</title><rect x="29.3857%" y="181" width="3.6095%" height="15" fill="rgb(221,10,30)"/><text x="29.6357%" y="191.50">misc..</text></g><g><title>impl_parent (1,072,317 samples, 0.54%)</title><rect x="33.6288%" y="117" width="0.5411%" height="15" fill="rgb(210,229,1)"/><text x="33.8788%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (585,393 samples, 0.30%)</title><rect x="33.8745%" y="101" width="0.2954%" height="15" fill="rgb(222,148,37)"/><text x="34.1245%" y="111.50"></text></g><g><title>impl_trait_ref (2,844,024 samples, 1.44%)</title><rect x="34.1698%" y="117" width="1.4351%" height="15" fill="rgb(234,67,33)"/><text x="34.4198%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,573,659 samples, 1.30%)</title><rect x="34.3063%" y="101" width="1.2986%" height="15" fill="rgb(247,98,35)"/><text x="34.5563%" y="111.50"></text></g><g><title>coherent_trait (5,211,119 samples, 2.63%)</title><rect x="33.0909%" y="149" width="2.6295%" height="15" fill="rgb(247,138,52)"/><text x="33.3409%" y="159.50">co..</text></g><g><title>specialization_graph_of (5,192,109 samples, 2.62%)</title><rect x="33.1005%" y="133" width="2.6199%" height="15" fill="rgb(213,79,30)"/><text x="33.3505%" y="143.50">sp..</text></g><g><title>trait_impls_of (227,216 samples, 0.11%)</title><rect x="35.6057%" y="117" width="0.1146%" height="15" fill="rgb(246,177,23)"/><text x="35.8557%" y="127.50"></text></g><g><title>coherence_checking (5,304,749 samples, 2.68%)</title><rect x="33.0813%" y="165" width="2.6767%" height="15" fill="rgb(230,62,27)"/><text x="33.3313%" y="175.50">co..</text></g><g><title>associated_item (1,198,293 samples, 0.60%)</title><rect x="52.8623%" y="101" width="0.6046%" height="15" fill="rgb(216,154,8)"/><text x="53.1123%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (947,271 samples, 0.48%)</title><rect x="52.9890%" y="85" width="0.4780%" height="15" fill="rgb(244,35,45)"/><text x="53.2390%" y="95.50"></text></g><g><title>associated_items (1,895,761 samples, 0.96%)</title><rect x="52.5335%" y="117" width="0.9566%" height="15" fill="rgb(251,115,12)"/><text x="52.7835%" y="127.50"></text></g><g><title>dropck_outlives (496,275 samples, 0.25%)</title><rect x="53.5379%" y="117" width="0.2504%" height="15" fill="rgb(240,54,50)"/><text x="53.7879%" y="127.50"></text></g><g><title>adt_dtorck_constraint (264,443 samples, 0.13%)</title><rect x="53.6548%" y="101" width="0.1334%" height="15" fill="rgb(233,84,52)"/><text x="53.9048%" y="111.50"></text></g><g><title>predicates_of (396,623 samples, 0.20%)</title><rect x="55.1221%" y="101" width="0.2001%" height="15" fill="rgb(207,117,47)"/><text x="55.3721%" y="111.50"></text></g><g><title>predicates_defined_on (222,400 samples, 0.11%)</title><rect x="55.2100%" y="85" width="0.1122%" height="15" fill="rgb(249,43,39)"/><text x="55.4600%" y="95.50"></text></g><g><title>specializes (999,460 samples, 0.50%)</title><rect x="55.3223%" y="101" width="0.5043%" height="15" fill="rgb(209,38,44)"/><text x="55.5723%" y="111.50"></text></g><g><title>param_env (606,548 samples, 0.31%)</title><rect x="55.5205%" y="85" width="0.3061%" height="15" fill="rgb(236,212,23)"/><text x="55.7705%" y="95.50"></text></g><g><title>def_span (272,593 samples, 0.14%)</title><rect x="55.6890%" y="69" width="0.1375%" height="15" fill="rgb(242,79,21)"/><text x="55.9390%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (244,713 samples, 0.12%)</title><rect x="55.7031%" y="53" width="0.1235%" height="15" fill="rgb(211,96,35)"/><text x="55.9531%" y="63.50"></text></g><g><title>trait_impls_of (451,656 samples, 0.23%)</title><rect x="55.8336%" y="101" width="0.2279%" height="15" fill="rgb(253,215,40)"/><text x="56.0836%" y="111.50"></text></g><g><title>evaluate_obligation (4,511,890 samples, 2.28%)</title><rect x="53.7883%" y="117" width="2.2766%" height="15" fill="rgb(211,81,21)"/><text x="54.0383%" y="127.50">e..</text></g><g><title>item_attrs (453,784 samples, 0.23%)</title><rect x="56.3638%" y="117" width="0.2290%" height="15" fill="rgb(208,190,38)"/><text x="56.6138%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (438,514 samples, 0.22%)</title><rect x="56.3715%" y="101" width="0.2213%" height="15" fill="rgb(235,213,38)"/><text x="56.6215%" y="111.50"></text></g><g><title>method_autoderef_steps (286,893 samples, 0.14%)</title><rect x="56.6665%" y="117" width="0.1448%" height="15" fill="rgb(237,122,38)"/><text x="56.9165%" y="127.50"></text></g><g><title>predicates_of (568,224 samples, 0.29%)</title><rect x="56.8841%" y="117" width="0.2867%" height="15" fill="rgb(244,218,35)"/><text x="57.1341%" y="127.50"></text></g><g><title>predicates_defined_on (388,562 samples, 0.20%)</title><rect x="56.9747%" y="101" width="0.1961%" height="15" fill="rgb(240,68,47)"/><text x="57.2247%" y="111.50"></text></g><g><title>associated_items (271,764 samples, 0.14%)</title><rect x="63.8278%" y="101" width="0.1371%" height="15" fill="rgb(210,16,53)"/><text x="64.0778%" y="111.50"></text></g><g><title>dropck_outlives (340,104 samples, 0.17%)</title><rect x="63.9759%" y="101" width="0.1716%" height="15" fill="rgb(235,124,12)"/><text x="64.2259%" y="111.50"></text></g><g><title>evaluate_obligation (1,274,823 samples, 0.64%)</title><rect x="64.1475%" y="101" width="0.6433%" height="15" fill="rgb(224,169,11)"/><text x="64.3975%" y="111.50"></text></g><g><title>is_copy_raw (488,788 samples, 0.25%)</title><rect x="64.8854%" y="101" width="0.2466%" height="15" fill="rgb(250,166,2)"/><text x="65.1354%" y="111.50"></text></g><g><title>evaluate_obligation (379,566 samples, 0.19%)</title><rect x="64.9405%" y="85" width="0.1915%" height="15" fill="rgb(242,216,29)"/><text x="65.1905%" y="95.50"></text></g><g><title>method_autoderef_steps (350,476 samples, 0.18%)</title><rect x="65.1860%" y="101" width="0.1768%" height="15" fill="rgb(230,116,27)"/><text x="65.4360%" y="111.50"></text></g><g><title>typeck (16,348,852 samples, 8.25%)</title><rect x="57.2850%" y="117" width="8.2494%" height="15" fill="rgb(228,99,48)"/><text x="57.5350%" y="127.50">typeck</text></g><g><title>item_bodies_checking (59,056,372 samples, 29.80%)</title><rect x="35.7903%" y="165" width="29.7990%" height="15" fill="rgb(253,11,6)"/><text x="36.0403%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (59,053,002 samples, 29.80%)</title><rect x="35.7920%" y="149" width="29.7973%" height="15" fill="rgb(247,143,39)"/><text x="36.0420%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (58,798,315 samples, 29.67%)</title><rect x="35.9205%" y="133" width="29.6688%" height="15" fill="rgb(236,97,10)"/><text x="36.1705%" y="143.50">typeck</text></g><g><title>item_types_checking (1,805,591 samples, 0.91%)</title><rect x="65.5893%" y="165" width="0.9111%" height="15" fill="rgb(233,208,19)"/><text x="65.8393%" y="175.50"></text></g><g><title>check_mod_item_types (1,796,491 samples, 0.91%)</title><rect x="65.5939%" y="149" width="0.9065%" height="15" fill="rgb(216,164,2)"/><text x="65.8439%" y="159.50"></text></g><g><title>late_bound_vars_map (336,062 samples, 0.17%)</title><rect x="67.1518%" y="117" width="0.1696%" height="15" fill="rgb(220,129,5)"/><text x="67.4018%" y="127.50"></text></g><g><title>resolve_lifetimes (265,961 samples, 0.13%)</title><rect x="67.1872%" y="101" width="0.1342%" height="15" fill="rgb(242,17,10)"/><text x="67.4372%" y="111.50"></text></g><g><title>fn_sig (1,065,766 samples, 0.54%)</title><rect x="66.8303%" y="133" width="0.5378%" height="15" fill="rgb(242,107,0)"/><text x="67.0803%" y="143.50"></text></g><g><title>named_region_map (896,280 samples, 0.45%)</title><rect x="67.5309%" y="117" width="0.4522%" height="15" fill="rgb(251,28,31)"/><text x="67.7809%" y="127.50"></text></g><g><title>resolve_lifetimes (813,389 samples, 0.41%)</title><rect x="67.5728%" y="101" width="0.4104%" height="15" fill="rgb(233,223,10)"/><text x="67.8228%" y="111.50"></text></g><g><title>lint_levels (230,523 samples, 0.12%)</title><rect x="67.8669%" y="85" width="0.1163%" height="15" fill="rgb(215,21,27)"/><text x="68.1169%" y="95.50"></text></g><g><title>generics_of (1,252,203 samples, 0.63%)</title><rect x="67.3681%" y="133" width="0.6318%" height="15" fill="rgb(232,23,21)"/><text x="67.6181%" y="143.50"></text></g><g><title>explicit_predicates_of (396,493 samples, 0.20%)</title><rect x="68.2175%" y="101" width="0.2001%" height="15" fill="rgb(244,5,23)"/><text x="68.4675%" y="111.50"></text></g><g><title>predicates_of (786,771 samples, 0.40%)</title><rect x="68.0390%" y="133" width="0.3970%" height="15" fill="rgb(226,81,46)"/><text x="68.2890%" y="143.50"></text></g><g><title>predicates_defined_on (650,768 samples, 0.33%)</title><rect x="68.1077%" y="117" width="0.3284%" height="15" fill="rgb(247,70,30)"/><text x="68.3577%" y="127.50"></text></g><g><title>type_collecting (3,983,584 samples, 2.01%)</title><rect x="66.5036%" y="165" width="2.0101%" height="15" fill="rgb(212,68,19)"/><text x="66.7536%" y="175.50">t..</text></g><g><title>collect_mod_item_types (3,974,904 samples, 2.01%)</title><rect x="66.5079%" y="149" width="2.0057%" height="15" fill="rgb(240,187,13)"/><text x="66.7579%" y="159.50">c..</text></g><g><title>adt_sized_constraint (222,251 samples, 0.11%)</title><rect x="70.8987%" y="101" width="0.1121%" height="15" fill="rgb(223,113,26)"/><text x="71.1487%" y="111.50"></text></g><g><title>adt_sized_constraint (311,552 samples, 0.16%)</title><rect x="70.8555%" y="117" width="0.1572%" height="15" fill="rgb(206,192,2)"/><text x="71.1055%" y="127.50"></text></g><g><title>evaluate_obligation (916,576 samples, 0.46%)</title><rect x="70.5679%" y="133" width="0.4625%" height="15" fill="rgb(241,108,4)"/><text x="70.8179%" y="143.50"></text></g><g><title>implied_outlives_bounds (302,693 samples, 0.15%)</title><rect x="71.0304%" y="133" width="0.1527%" height="15" fill="rgb(247,173,49)"/><text x="71.2804%" y="143.50"></text></g><g><title>param_env (653,556 samples, 0.33%)</title><rect x="71.1831%" y="133" width="0.3298%" height="15" fill="rgb(224,114,35)"/><text x="71.4331%" y="143.50"></text></g><g><title>region_scope_tree (613,162 samples, 0.31%)</title><rect x="71.5453%" y="133" width="0.3094%" height="15" fill="rgb(245,159,27)"/><text x="71.7953%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,140,291 samples, 3.10%)</title><rect x="68.7623%" y="149" width="3.0983%" height="15" fill="rgb(245,172,44)"/><text x="69.0123%" y="159.50">che..</text></g><g><title>evaluate_obligation (435,646 samples, 0.22%)</title><rect x="72.6044%" y="133" width="0.2198%" height="15" fill="rgb(236,23,11)"/><text x="72.8544%" y="143.50"></text></g><g><title>param_env (403,823 samples, 0.20%)</title><rect x="72.8972%" y="133" width="0.2038%" height="15" fill="rgb(205,117,38)"/><text x="73.1472%" y="143.50"></text></g><g><title>trait_impls_of (259,943 samples, 0.13%)</title><rect x="73.2327%" y="133" width="0.1312%" height="15" fill="rgb(237,72,25)"/><text x="73.4827%" y="143.50"></text></g><g><title>check_item_well_formed (3,098,390 samples, 1.56%)</title><rect x="71.8606%" y="149" width="1.5634%" height="15" fill="rgb(244,70,9)"/><text x="72.1106%" y="159.50"></text></g><g><title>evaluate_obligation (340,201 samples, 0.17%)</title><rect x="74.7729%" y="133" width="0.1717%" height="15" fill="rgb(217,125,39)"/><text x="75.0229%" y="143.50"></text></g><g><title>implied_outlives_bounds (229,672 samples, 0.12%)</title><rect x="74.9446%" y="133" width="0.1159%" height="15" fill="rgb(235,36,10)"/><text x="75.1946%" y="143.50"></text></g><g><title>param_env (471,749 samples, 0.24%)</title><rect x="75.0605%" y="133" width="0.2380%" height="15" fill="rgb(251,123,47)"/><text x="75.3105%" y="143.50"></text></g><g><title>analysis (148,432,444 samples, 74.90%)</title><rect x="0.4250%" y="197" width="74.8968%" height="15" fill="rgb(221,13,13)"/><text x="0.6750%" y="207.50">analysis</text></g><g><title>type_check_crate (83,883,780 samples, 42.33%)</title><rect x="32.9953%" y="181" width="42.3265%" height="15" fill="rgb(238,131,9)"/><text x="33.2453%" y="191.50">type_check_crate</text></g><g><title>wf_checking (13,476,281 samples, 6.80%)</title><rect x="68.5219%" y="165" width="6.7999%" height="15" fill="rgb(211,50,8)"/><text x="68.7719%" y="175.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (3,761,064 samples, 1.90%)</title><rect x="73.4240%" y="149" width="1.8978%" height="15" fill="rgb(245,182,24)"/><text x="73.6740%" y="159.50">c..</text></g><g><title>codegen_crate (406,494 samples, 0.21%)</title><rect x="75.3252%" y="197" width="0.2051%" height="15" fill="rgb(242,14,37)"/><text x="75.5752%" y="207.50"></text></g><g><title>AST_validation (337,564 samples, 0.17%)</title><rect x="75.5923%" y="181" width="0.1703%" height="15" fill="rgb(246,228,12)"/><text x="75.8423%" y="191.50"></text></g><g><title>metadata_register_crate (1,302,646 samples, 0.66%)</title><rect x="88.1694%" y="149" width="0.6573%" height="15" fill="rgb(213,55,15)"/><text x="88.4194%" y="159.50"></text></g><g><title>metadata_register_crate (464,884 samples, 0.23%)</title><rect x="88.5921%" y="133" width="0.2346%" height="15" fill="rgb(209,9,3)"/><text x="88.8421%" y="143.50"></text></g><g><title>macro_expand_crate (26,133,212 samples, 13.19%)</title><rect x="75.8568%" y="181" width="13.1864%" height="15" fill="rgb(230,59,30)"/><text x="76.1068%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (26,122,822 samples, 13.18%)</title><rect x="75.8620%" y="165" width="13.1812%" height="15" fill="rgb(209,121,21)"/><text x="76.1120%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (429,104 samples, 0.22%)</title><rect x="88.8267%" y="149" width="0.2165%" height="15" fill="rgb(220,109,13)"/><text x="89.0767%" y="159.50"></text></g><g><title>finalize_imports (353,484 samples, 0.18%)</title><rect x="89.0868%" y="165" width="0.1784%" height="15" fill="rgb(232,18,1)"/><text x="89.3368%" y="175.50"></text></g><g><title>late_resolve_crate (3,459,028 samples, 1.75%)</title><rect x="89.3605%" y="165" width="1.7454%" height="15" fill="rgb(215,41,42)"/><text x="89.6105%" y="175.50"></text></g><g><title>configure_and_expand (31,096,118 samples, 15.69%)</title><rect x="75.5303%" y="197" width="15.6906%" height="15" fill="rgb(224,123,36)"/><text x="75.7803%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,235,658 samples, 2.14%)</title><rect x="89.0837%" y="181" width="2.1373%" height="15" fill="rgb(240,125,3)"/><text x="89.3337%" y="191.50">r..</text></g><g><title>drop_ast (407,914 samples, 0.21%)</title><rect x="91.2209%" y="197" width="0.2058%" height="15" fill="rgb(205,98,50)"/><text x="91.4709%" y="207.50"></text></g><g><title>early_lint_checks (700,007 samples, 0.35%)</title><rect x="91.4354%" y="197" width="0.3532%" height="15" fill="rgb(205,185,37)"/><text x="91.6854%" y="207.50"></text></g><g><title>free_global_ctxt (4,152,216 samples, 2.10%)</title><rect x="91.7887%" y="197" width="2.0951%" height="15" fill="rgb(238,207,15)"/><text x="92.0387%" y="207.50">f..</text></g><g><title>generate_crate_metadata (3,615,241 samples, 1.82%)</title><rect x="93.8838%" y="197" width="1.8242%" height="15" fill="rgb(213,199,42)"/><text x="94.1338%" y="207.50">g..</text></g><g><title>hir_lowering (5,786,885 samples, 2.92%)</title><rect x="95.7080%" y="197" width="2.9200%" height="15" fill="rgb(235,201,11)"/><text x="95.9580%" y="207.50">hi..</text></g><g><title>parse_crate (551,127 samples, 0.28%)</title><rect x="98.7006%" y="197" width="0.2781%" height="15" fill="rgb(207,46,11)"/><text x="98.9506%" y="207.50"></text></g><g><title>prepare_outputs (216,863 samples, 0.11%)</title><rect x="98.9818%" y="197" width="0.1094%" height="15" fill="rgb(241,35,35)"/><text x="99.2318%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,101,863 samples, 0.56%)</title><rect x="99.0912%" y="197" width="0.5560%" height="15" fill="rgb(243,32,47)"/><text x="99.3412%" y="207.50"></text></g><g><title>all (198,182,582 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (198,182,582 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (596,657 samples, 0.30%)</title><rect x="99.6989%" y="197" width="0.3011%" height="15" fill="rgb(243,110,44)"/><text x="99.9489%" y="207.50"></text></g></svg></svg>