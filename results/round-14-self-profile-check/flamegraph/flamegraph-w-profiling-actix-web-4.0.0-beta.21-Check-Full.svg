<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (6,111,939 samples, 0.20%)</title><rect x="13.5256%" y="181" width="0.1987%" height="15" fill="rgb(227,0,7)"/><text x="13.7756%" y="191.50"></text></g><g><title>param_env (3,806,786 samples, 0.12%)</title><rect x="15.0934%" y="149" width="0.1238%" height="15" fill="rgb(217,0,24)"/><text x="15.3434%" y="159.50"></text></g><g><title>codegen_fn_attrs (3,677,136 samples, 0.12%)</title><rect x="15.6204%" y="133" width="0.1196%" height="15" fill="rgb(221,193,54)"/><text x="15.8704%" y="143.50"></text></g><g><title>is_copy_raw (32,939,670 samples, 1.07%)</title><rect x="18.3569%" y="101" width="1.0710%" height="15" fill="rgb(248,212,6)"/><text x="18.6069%" y="111.50"></text></g><g><title>evaluate_obligation (26,614,185 samples, 0.87%)</title><rect x="18.5625%" y="85" width="0.8653%" height="15" fill="rgb(208,68,35)"/><text x="18.8125%" y="95.50"></text></g><g><title>needs_drop_raw (41,614,612 samples, 1.35%)</title><rect x="18.0910%" y="117" width="1.3530%" height="15" fill="rgb(232,128,0)"/><text x="18.3410%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (11,386,794 samples, 0.37%)</title><rect x="19.6032%" y="101" width="0.3702%" height="15" fill="rgb(207,160,47)"/><text x="19.8532%" y="111.50"></text></g><g><title>resolve_instance (19,442,180 samples, 0.63%)</title><rect x="19.4457%" y="117" width="0.6321%" height="15" fill="rgb(228,23,34)"/><text x="19.6957%" y="127.50"></text></g><g><title>thir_body (26,100,207 samples, 0.85%)</title><rect x="20.1014%" y="117" width="0.8486%" height="15" fill="rgb(218,30,26)"/><text x="20.3514%" y="127.50"></text></g><g><title>mir_const (200,871,226 samples, 6.53%)</title><rect x="14.4993%" y="165" width="6.5310%" height="15" fill="rgb(220,122,19)"/><text x="14.7493%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (178,789,216 samples, 5.81%)</title><rect x="15.2172%" y="149" width="5.8131%" height="15" fill="rgb(250,228,42)"/><text x="15.4672%" y="159.50">unsafet..</text></g><g><title>mir_built (162,710,107 samples, 5.29%)</title><rect x="15.7400%" y="133" width="5.2903%" height="15" fill="rgb(240,193,28)"/><text x="15.9900%" y="143.50">mir_bu..</text></g><g><title>mir_const_qualif (4,861,534 samples, 0.16%)</title><rect x="21.0303%" y="165" width="0.1581%" height="15" fill="rgb(216,20,37)"/><text x="21.2803%" y="175.50"></text></g><g><title>mir_promoted (225,530,244 samples, 7.33%)</title><rect x="13.8561%" y="181" width="7.3328%" height="15" fill="rgb(206,188,39)"/><text x="14.1061%" y="191.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (25,253,462 samples, 0.82%)</title><rect x="21.1891%" y="181" width="0.8211%" height="15" fill="rgb(217,207,13)"/><text x="21.4391%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (23,475,795 samples, 0.76%)</title><rect x="22.0101%" y="181" width="0.7633%" height="15" fill="rgb(231,73,38)"/><text x="22.2601%" y="191.50"></text></g><g><title>normalize_projection_ty (12,519,342 samples, 0.41%)</title><rect x="22.3664%" y="165" width="0.4070%" height="15" fill="rgb(225,20,46)"/><text x="22.6164%" y="175.50"></text></g><g><title>type_op_normalize_predicate (18,458,330 samples, 0.60%)</title><rect x="22.7736%" y="181" width="0.6001%" height="15" fill="rgb(210,31,41)"/><text x="23.0236%" y="191.50"></text></g><g><title>normalize_projection_ty (10,552,041 samples, 0.34%)</title><rect x="23.0307%" y="165" width="0.3431%" height="15" fill="rgb(221,200,47)"/><text x="23.2807%" y="175.50"></text></g><g><title>type_op_normalize_ty (12,874,461 samples, 0.42%)</title><rect x="23.3737%" y="181" width="0.4186%" height="15" fill="rgb(226,26,5)"/><text x="23.6237%" y="191.50"></text></g><g><title>normalize_projection_ty (5,291,566 samples, 0.17%)</title><rect x="23.6203%" y="165" width="0.1720%" height="15" fill="rgb(249,33,26)"/><text x="23.8703%" y="175.50"></text></g><g><title>type_op_prove_predicate (116,356,700 samples, 3.78%)</title><rect x="23.7923%" y="181" width="3.7832%" height="15" fill="rgb(235,183,28)"/><text x="24.0423%" y="191.50">type..</text></g><g><title>MIR_borrow_checking (833,382,658 samples, 27.10%)</title><rect x="0.4816%" y="213" width="27.0962%" height="15" fill="rgb(221,5,38)"/><text x="0.7316%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (830,231,028 samples, 26.99%)</title><rect x="0.5841%" y="197" width="26.9937%" height="15" fill="rgb(247,18,42)"/><text x="0.8341%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (4,621,489 samples, 0.15%)</title><rect x="27.6426%" y="213" width="0.1503%" height="15" fill="rgb(241,131,45)"/><text x="27.8926%" y="223.50"></text></g><g><title>codegen_fn_attrs (5,039,132 samples, 0.16%)</title><rect x="27.9757%" y="181" width="0.1638%" height="15" fill="rgb(249,31,29)"/><text x="28.2257%" y="191.50"></text></g><g><title>check_mod_attrs (10,479,627 samples, 0.34%)</title><rect x="27.7989%" y="197" width="0.3407%" height="15" fill="rgb(225,111,53)"/><text x="28.0489%" y="207.50"></text></g><g><title>lint_levels (6,032,287 samples, 0.20%)</title><rect x="28.4167%" y="181" width="0.1961%" height="15" fill="rgb(238,160,17)"/><text x="28.6667%" y="191.50"></text></g><g><title>lookup_deprecation_entry (4,265,235 samples, 0.14%)</title><rect x="28.6128%" y="181" width="0.1387%" height="15" fill="rgb(214,148,48)"/><text x="28.8628%" y="191.50"></text></g><g><title>stability_index (3,906,473 samples, 0.13%)</title><rect x="28.6245%" y="165" width="0.1270%" height="15" fill="rgb(232,36,49)"/><text x="28.8745%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (13,696,839 samples, 0.45%)</title><rect x="28.3151%" y="197" width="0.4453%" height="15" fill="rgb(209,103,24)"/><text x="28.5651%" y="207.50"></text></g><g><title>misc_checking_1 (30,922,152 samples, 1.01%)</title><rect x="27.7929%" y="213" width="1.0054%" height="15" fill="rgb(229,88,8)"/><text x="28.0429%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (15,937,446 samples, 0.52%)</title><rect x="28.7984%" y="197" width="0.5182%" height="15" fill="rgb(213,181,19)"/><text x="29.0484%" y="207.50"></text></g><g><title>check_mod_liveness (13,790,445 samples, 0.45%)</title><rect x="28.8682%" y="181" width="0.4484%" height="15" fill="rgb(254,191,54)"/><text x="29.1182%" y="191.50"></text></g><g><title>type_uninhabited_from (4,951,481 samples, 0.16%)</title><rect x="29.1556%" y="165" width="0.1610%" height="15" fill="rgb(241,83,37)"/><text x="29.4056%" y="175.50"></text></g><g><title>type_uninhabited_from (3,555,134 samples, 0.12%)</title><rect x="29.2010%" y="149" width="0.1156%" height="15" fill="rgb(233,36,39)"/><text x="29.4510%" y="159.50"></text></g><g><title>misc_checking_2 (32,592,531 samples, 1.06%)</title><rect x="28.7982%" y="213" width="1.0597%" height="15" fill="rgb(226,3,54)"/><text x="29.0482%" y="223.50"></text></g><g><title>match_checking (16,651,675 samples, 0.54%)</title><rect x="29.3165%" y="197" width="0.5414%" height="15" fill="rgb(245,192,40)"/><text x="29.5665%" y="207.50"></text></g><g><title>check_match (15,611,967 samples, 0.51%)</title><rect x="29.3503%" y="181" width="0.5076%" height="15" fill="rgb(238,167,29)"/><text x="29.6003%" y="191.50"></text></g><g><title>check_private_in_public (8,427,814 samples, 0.27%)</title><rect x="29.8587%" y="197" width="0.2740%" height="15" fill="rgb(232,182,51)"/><text x="30.1087%" y="207.50"></text></g><g><title>death_checking (12,557,989 samples, 0.41%)</title><rect x="30.1328%" y="197" width="0.4083%" height="15" fill="rgb(231,60,39)"/><text x="30.3828%" y="207.50"></text></g><g><title>eval_to_const_value_raw (3,686,970 samples, 0.12%)</title><rect x="31.1231%" y="165" width="0.1199%" height="15" fill="rgb(208,69,12)"/><text x="31.3731%" y="175.50"></text></g><g><title>eval_to_const_value_raw (3,660,279 samples, 0.12%)</title><rect x="31.1240%" y="149" width="0.1190%" height="15" fill="rgb(235,93,37)"/><text x="31.3740%" y="159.50"></text></g><g><title>eval_to_allocation_raw (3,620,789 samples, 0.12%)</title><rect x="31.1252%" y="133" width="0.1177%" height="15" fill="rgb(213,116,39)"/><text x="31.3752%" y="143.50"></text></g><g><title>param_env (8,900,888 samples, 0.29%)</title><rect x="31.2430%" y="165" width="0.2894%" height="15" fill="rgb(222,207,29)"/><text x="31.4930%" y="175.50"></text></g><g><title>predicates_of (4,126,290 samples, 0.13%)</title><rect x="31.3982%" y="149" width="0.1342%" height="15" fill="rgb(206,96,30)"/><text x="31.6482%" y="159.50"></text></g><g><title>predicates_defined_on (3,392,524 samples, 0.11%)</title><rect x="31.4221%" y="133" width="0.1103%" height="15" fill="rgb(218,138,4)"/><text x="31.6721%" y="143.50"></text></g><g><title>crate_lints (34,312,910 samples, 1.12%)</title><rect x="30.5412%" y="181" width="1.1156%" height="15" fill="rgb(250,191,14)"/><text x="30.7912%" y="191.50"></text></g><g><title>lint_checking (51,533,170 samples, 1.68%)</title><rect x="30.5411%" y="197" width="1.6755%" height="15" fill="rgb(239,60,40)"/><text x="30.7911%" y="207.50"></text></g><g><title>module_lints (17,216,370 samples, 0.56%)</title><rect x="31.6568%" y="181" width="0.5598%" height="15" fill="rgb(206,27,48)"/><text x="31.9068%" y="191.50"></text></g><g><title>lint_mod (17,142,540 samples, 0.56%)</title><rect x="31.6592%" y="165" width="0.5574%" height="15" fill="rgb(225,35,8)"/><text x="31.9092%" y="175.50"></text></g><g><title>privacy_access_levels (14,092,055 samples, 0.46%)</title><rect x="32.2166%" y="197" width="0.4582%" height="15" fill="rgb(250,213,24)"/><text x="32.4666%" y="207.50"></text></g><g><title>privacy_checking_modules (33,242,188 samples, 1.08%)</title><rect x="32.6748%" y="197" width="1.0808%" height="15" fill="rgb(247,123,22)"/><text x="32.9248%" y="207.50"></text></g><g><title>check_mod_privacy (33,173,878 samples, 1.08%)</title><rect x="32.6770%" y="181" width="1.0786%" height="15" fill="rgb(231,138,38)"/><text x="32.9270%" y="191.50"></text></g><g><title>misc_checking_3 (120,213,379 samples, 3.91%)</title><rect x="29.8579%" y="213" width="3.9086%" height="15" fill="rgb(231,145,46)"/><text x="30.1079%" y="223.50">misc..</text></g><g><title>impl_parent (6,965,397 samples, 0.23%)</title><rect x="34.3181%" y="149" width="0.2265%" height="15" fill="rgb(251,118,11)"/><text x="34.5681%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (4,203,903 samples, 0.14%)</title><rect x="34.4079%" y="133" width="0.1367%" height="15" fill="rgb(217,147,25)"/><text x="34.6579%" y="143.50"></text></g><g><title>impl_trait_ref (14,834,576 samples, 0.48%)</title><rect x="34.5447%" y="149" width="0.4823%" height="15" fill="rgb(247,81,37)"/><text x="34.7947%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (12,024,332 samples, 0.39%)</title><rect x="34.6360%" y="133" width="0.3910%" height="15" fill="rgb(209,12,38)"/><text x="34.8860%" y="143.50"></text></g><g><title>trait_impls_of (5,178,708 samples, 0.17%)</title><rect x="35.0326%" y="149" width="0.1684%" height="15" fill="rgb(227,1,9)"/><text x="35.2826%" y="159.50"></text></g><g><title>coherent_trait (42,301,768 samples, 1.38%)</title><rect x="33.8257%" y="181" width="1.3754%" height="15" fill="rgb(248,47,43)"/><text x="34.0757%" y="191.50"></text></g><g><title>specialization_graph_of (41,090,874 samples, 1.34%)</title><rect x="33.8651%" y="165" width="1.3360%" height="15" fill="rgb(221,10,30)"/><text x="34.1151%" y="175.50"></text></g><g><title>coherence_checking (43,670,713 samples, 1.42%)</title><rect x="33.8235%" y="197" width="1.4199%" height="15" fill="rgb(210,229,1)"/><text x="34.0735%" y="207.50"></text></g><g><title>adt_dtorck_constraint (4,528,583 samples, 0.15%)</title><rect x="53.1501%" y="133" width="0.1472%" height="15" fill="rgb(222,148,37)"/><text x="53.4001%" y="143.50"></text></g><g><title>dropck_outlives (21,125,796 samples, 0.69%)</title><rect x="52.7171%" y="149" width="0.6869%" height="15" fill="rgb(234,67,33)"/><text x="52.9671%" y="159.50"></text></g><g><title>normalize_projection_ty (3,279,833 samples, 0.11%)</title><rect x="53.2974%" y="133" width="0.1066%" height="15" fill="rgb(247,98,35)"/><text x="53.5474%" y="143.50"></text></g><g><title>evaluate_obligation (42,648,660 samples, 1.39%)</title><rect x="53.4042%" y="149" width="1.3867%" height="15" fill="rgb(247,138,52)"/><text x="53.6542%" y="159.50"></text></g><g><title>type_of (3,263,356 samples, 0.11%)</title><rect x="54.6847%" y="133" width="0.1061%" height="15" fill="rgb(213,79,30)"/><text x="54.9347%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (3,254,576 samples, 0.11%)</title><rect x="54.6850%" y="117" width="0.1058%" height="15" fill="rgb(246,177,23)"/><text x="54.9350%" y="127.50"></text></g><g><title>evaluate_obligation (12,421,145 samples, 0.40%)</title><rect x="55.3380%" y="133" width="0.4039%" height="15" fill="rgb(230,62,27)"/><text x="55.5880%" y="143.50"></text></g><g><title>method_autoderef_steps (25,393,797 samples, 0.83%)</title><rect x="54.9185%" y="149" width="0.8256%" height="15" fill="rgb(216,154,8)"/><text x="55.1685%" y="159.50"></text></g><g><title>dropck_outlives (10,029,117 samples, 0.33%)</title><rect x="63.2360%" y="133" width="0.3261%" height="15" fill="rgb(244,35,45)"/><text x="63.4860%" y="143.50"></text></g><g><title>evaluate_obligation (25,406,352 samples, 0.83%)</title><rect x="63.5627%" y="133" width="0.8260%" height="15" fill="rgb(251,115,12)"/><text x="63.8127%" y="143.50"></text></g><g><title>is_copy_raw (4,012,728 samples, 0.13%)</title><rect x="64.5113%" y="133" width="0.1305%" height="15" fill="rgb(240,54,50)"/><text x="64.7613%" y="143.50"></text></g><g><title>method_autoderef_steps (8,888,540 samples, 0.29%)</title><rect x="64.6604%" y="133" width="0.2890%" height="15" fill="rgb(233,84,52)"/><text x="64.9104%" y="143.50"></text></g><g><title>evaluate_obligation (4,087,419 samples, 0.13%)</title><rect x="64.8165%" y="117" width="0.1329%" height="15" fill="rgb(207,117,47)"/><text x="65.0665%" y="127.50"></text></g><g><title>typeck (282,295,129 samples, 9.18%)</title><rect x="55.8866%" y="149" width="9.1784%" height="15" fill="rgb(249,43,39)"/><text x="56.1366%" y="159.50">typeck</text></g><g><title>item_bodies_checking (916,641,089 samples, 29.80%)</title><rect x="35.2813%" y="197" width="29.8032%" height="15" fill="rgb(209,38,44)"/><text x="35.5313%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (916,637,029 samples, 29.80%)</title><rect x="35.2814%" y="181" width="29.8031%" height="15" fill="rgb(236,212,23)"/><text x="35.5314%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (912,860,759 samples, 29.68%)</title><rect x="35.4042%" y="165" width="29.6803%" height="15" fill="rgb(242,79,21)"/><text x="35.6542%" y="175.50">typeck</text></g><g><title>mir_borrowck (14,480,159 samples, 0.47%)</title><rect x="66.9555%" y="133" width="0.4708%" height="15" fill="rgb(211,96,35)"/><text x="67.2055%" y="143.50"></text></g><g><title>adt_dtorck_constraint (4,289,164 samples, 0.14%)</title><rect x="68.5646%" y="37" width="0.1395%" height="15" fill="rgb(253,215,40)"/><text x="68.8146%" y="47.50"></text></g><g><title>dropck_outlives (6,640,773 samples, 0.22%)</title><rect x="68.4980%" y="53" width="0.2159%" height="15" fill="rgb(211,81,21)"/><text x="68.7480%" y="63.50"></text></g><g><title>evaluate_obligation (3,296,595 samples, 0.11%)</title><rect x="68.7141%" y="53" width="0.1072%" height="15" fill="rgb(208,190,38)"/><text x="68.9641%" y="63.50"></text></g><g><title>mir_built (45,683,656 samples, 1.49%)</title><rect x="67.4722%" y="85" width="1.4853%" height="15" fill="rgb(235,213,38)"/><text x="67.7222%" y="95.50"></text></g><g><title>typeck (40,860,152 samples, 1.33%)</title><rect x="67.6291%" y="69" width="1.3285%" height="15" fill="rgb(237,122,38)"/><text x="67.8791%" y="79.50"></text></g><g><title>mir_const (50,195,855 samples, 1.63%)</title><rect x="67.4407%" y="117" width="1.6320%" height="15" fill="rgb(244,218,35)"/><text x="67.6907%" y="127.50"></text></g><g><title>unsafety_check_result (49,550,067 samples, 1.61%)</title><rect x="67.4617%" y="101" width="1.6110%" height="15" fill="rgb(240,68,47)"/><text x="67.7117%" y="111.50"></text></g><g><title>unsafety_check_result (3,543,027 samples, 0.12%)</title><rect x="68.9576%" y="85" width="0.1152%" height="15" fill="rgb(210,16,53)"/><text x="69.2076%" y="95.50"></text></g><g><title>mir_promoted (50,702,899 samples, 1.65%)</title><rect x="67.4263%" y="133" width="1.6485%" height="15" fill="rgb(235,124,12)"/><text x="67.6763%" y="143.50"></text></g><g><title>type_of (77,669,571 samples, 2.53%)</title><rect x="66.6260%" y="165" width="2.5253%" height="15" fill="rgb(224,169,11)"/><text x="66.8760%" y="175.50">ty..</text></g><g><title>mir_borrowck (77,365,924 samples, 2.52%)</title><rect x="66.6358%" y="149" width="2.5154%" height="15" fill="rgb(250,166,2)"/><text x="66.8858%" y="159.50">mi..</text></g><g><title>typeck (5,972,934 samples, 0.19%)</title><rect x="69.1513%" y="165" width="0.1942%" height="15" fill="rgb(242,216,29)"/><text x="69.4013%" y="175.50"></text></g><g><title>item_types_checking (131,053,830 samples, 4.26%)</title><rect x="65.0845%" y="197" width="4.2610%" height="15" fill="rgb(230,116,27)"/><text x="65.3345%" y="207.50">item_..</text></g><g><title>check_mod_item_types (130,961,027 samples, 4.26%)</title><rect x="65.0875%" y="181" width="4.2580%" height="15" fill="rgb(228,99,48)"/><text x="65.3375%" y="191.50">check..</text></g><g><title>fn_sig (6,601,858 samples, 0.21%)</title><rect x="69.5700%" y="165" width="0.2146%" height="15" fill="rgb(253,11,6)"/><text x="69.8200%" y="175.50"></text></g><g><title>named_region_map (3,474,732 samples, 0.11%)</title><rect x="69.8929%" y="149" width="0.1130%" height="15" fill="rgb(247,143,39)"/><text x="70.1429%" y="159.50"></text></g><g><title>resolve_lifetimes (3,131,187 samples, 0.10%)</title><rect x="69.9040%" y="133" width="0.1018%" height="15" fill="rgb(236,97,10)"/><text x="70.1540%" y="143.50"></text></g><g><title>generics_of (7,083,683 samples, 0.23%)</title><rect x="69.7846%" y="165" width="0.2303%" height="15" fill="rgb(233,208,19)"/><text x="70.0346%" y="175.50"></text></g><g><title>late_bound_vars_map (4,149,955 samples, 0.13%)</title><rect x="70.3471%" y="117" width="0.1349%" height="15" fill="rgb(216,164,2)"/><text x="70.5971%" y="127.50"></text></g><g><title>resolve_lifetimes (3,916,183 samples, 0.13%)</title><rect x="70.3547%" y="101" width="0.1273%" height="15" fill="rgb(220,129,5)"/><text x="70.6047%" y="111.50"></text></g><g><title>explicit_predicates_of (10,531,597 samples, 0.34%)</title><rect x="70.1650%" y="133" width="0.3424%" height="15" fill="rgb(242,17,10)"/><text x="70.4150%" y="143.50"></text></g><g><title>predicates_of (23,746,262 samples, 0.77%)</title><rect x="70.0367%" y="165" width="0.7721%" height="15" fill="rgb(242,107,0)"/><text x="70.2867%" y="175.50"></text></g><g><title>predicates_defined_on (22,334,260 samples, 0.73%)</title><rect x="70.0826%" y="149" width="0.7262%" height="15" fill="rgb(251,28,31)"/><text x="70.3326%" y="159.50"></text></g><g><title>inferred_outlives_of (9,268,143 samples, 0.30%)</title><rect x="70.5074%" y="133" width="0.3013%" height="15" fill="rgb(233,223,10)"/><text x="70.7574%" y="143.50"></text></g><g><title>inferred_outlives_crate (8,751,927 samples, 0.28%)</title><rect x="70.5242%" y="117" width="0.2846%" height="15" fill="rgb(215,21,27)"/><text x="70.7742%" y="127.50"></text></g><g><title>type_of (5,666,441 samples, 0.18%)</title><rect x="70.6245%" y="101" width="0.1842%" height="15" fill="rgb(232,23,21)"/><text x="70.8745%" y="111.50"></text></g><g><title>type_collecting (48,229,094 samples, 1.57%)</title><rect x="69.3481%" y="197" width="1.5681%" height="15" fill="rgb(244,5,23)"/><text x="69.5981%" y="207.50"></text></g><g><title>collect_mod_item_types (48,147,093 samples, 1.57%)</title><rect x="69.3508%" y="181" width="1.5654%" height="15" fill="rgb(226,81,46)"/><text x="69.6008%" y="191.50"></text></g><g><title>type_of (3,231,937 samples, 0.11%)</title><rect x="70.8111%" y="165" width="0.1051%" height="15" fill="rgb(247,70,30)"/><text x="71.0611%" y="175.50"></text></g><g><title>evaluate_obligation (10,358,962 samples, 0.34%)</title><rect x="72.9383%" y="165" width="0.3368%" height="15" fill="rgb(212,68,19)"/><text x="73.1883%" y="175.50"></text></g><g><title>implied_outlives_bounds (6,670,432 samples, 0.22%)</title><rect x="73.2914%" y="165" width="0.2169%" height="15" fill="rgb(240,187,13)"/><text x="73.5414%" y="175.50"></text></g><g><title>param_env (9,418,164 samples, 0.31%)</title><rect x="73.5277%" y="165" width="0.3062%" height="15" fill="rgb(223,113,26)"/><text x="73.7777%" y="175.50"></text></g><g><title>region_scope_tree (8,198,410 samples, 0.27%)</title><rect x="73.8435%" y="165" width="0.2666%" height="15" fill="rgb(206,192,2)"/><text x="74.0935%" y="175.50"></text></g><g><title>check_impl_item_well_formed (93,798,397 samples, 3.05%)</title><rect x="71.0886%" y="181" width="3.0497%" height="15" fill="rgb(241,108,4)"/><text x="71.3386%" y="191.50">che..</text></g><g><title>evaluate_obligation (10,619,010 samples, 0.35%)</title><rect x="75.7325%" y="165" width="0.3453%" height="15" fill="rgb(247,173,49)"/><text x="75.9825%" y="175.50"></text></g><g><title>param_env (8,066,138 samples, 0.26%)</title><rect x="76.2132%" y="165" width="0.2623%" height="15" fill="rgb(224,114,35)"/><text x="76.4632%" y="175.50"></text></g><g><title>check_item_well_formed (75,375,841 samples, 2.45%)</title><rect x="74.1384%" y="181" width="2.4507%" height="15" fill="rgb(245,159,27)"/><text x="74.3884%" y="191.50">ch..</text></g><g><title>analysis (2,347,512,475 samples, 76.33%)</title><rect x="0.3059%" y="229" width="76.3258%" height="15" fill="rgb(245,172,44)"/><text x="0.5559%" y="239.50">analysis</text></g><g><title>type_check_crate (1,318,383,952 samples, 42.87%)</title><rect x="33.7665%" y="213" width="42.8653%" height="15" fill="rgb(236,23,11)"/><text x="34.0165%" y="223.50">type_check_crate</text></g><g><title>wf_checking (175,649,332 samples, 5.71%)</title><rect x="70.9208%" y="197" width="5.7110%" height="15" fill="rgb(205,117,38)"/><text x="71.1708%" y="207.50">wf_chec..</text></g><g><title>AST_validation (5,465,850 samples, 0.18%)</title><rect x="76.6688%" y="213" width="0.1777%" height="15" fill="rgb(237,72,25)"/><text x="76.9188%" y="223.50"></text></g><g><title>complete_gated_feature_checking (3,412,308 samples, 0.11%)</title><rect x="76.8465%" y="213" width="0.1109%" height="15" fill="rgb(244,70,9)"/><text x="77.0965%" y="223.50"></text></g><g><title>metadata_register_crate (26,769,757 samples, 0.87%)</title><rect x="90.8873%" y="181" width="0.8704%" height="15" fill="rgb(217,125,39)"/><text x="91.1373%" y="191.50"></text></g><g><title>metadata_register_crate (16,273,584 samples, 0.53%)</title><rect x="91.2286%" y="165" width="0.5291%" height="15" fill="rgb(235,36,10)"/><text x="91.4786%" y="175.50"></text></g><g><title>metadata_register_crate (9,393,265 samples, 0.31%)</title><rect x="91.4523%" y="149" width="0.3054%" height="15" fill="rgb(251,123,47)"/><text x="91.7023%" y="159.50"></text></g><g><title>macro_expand_crate (460,583,485 samples, 14.98%)</title><rect x="76.9596%" y="213" width="14.9752%" height="15" fill="rgb(221,13,13)"/><text x="77.2096%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (460,554,804 samples, 14.97%)</title><rect x="76.9605%" y="197" width="14.9742%" height="15" fill="rgb(238,131,9)"/><text x="77.2105%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (5,446,056 samples, 0.18%)</title><rect x="91.7577%" y="181" width="0.1771%" height="15" fill="rgb(211,50,8)"/><text x="92.0077%" y="191.50"></text></g><g><title>late_resolve_crate (33,068,756 samples, 1.08%)</title><rect x="92.0832%" y="197" width="1.0752%" height="15" fill="rgb(245,182,24)"/><text x="92.3332%" y="207.50"></text></g><g><title>configure_and_expand (513,404,479 samples, 16.69%)</title><rect x="76.6616%" y="229" width="16.6926%" height="15" fill="rgb(242,14,37)"/><text x="76.9116%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (43,532,322 samples, 1.42%)</title><rect x="91.9388%" y="213" width="1.4154%" height="15" fill="rgb(246,228,12)"/><text x="92.1888%" y="223.50"></text></g><g><title>drop_ast (8,096,860 samples, 0.26%)</title><rect x="93.3542%" y="229" width="0.2633%" height="15" fill="rgb(213,55,15)"/><text x="93.6042%" y="239.50"></text></g><g><title>early_lint_checks (11,803,281 samples, 0.38%)</title><rect x="93.6190%" y="229" width="0.3838%" height="15" fill="rgb(209,9,3)"/><text x="93.8690%" y="239.50"></text></g><g><title>free_global_ctxt (26,444,613 samples, 0.86%)</title><rect x="94.0027%" y="229" width="0.8598%" height="15" fill="rgb(230,59,30)"/><text x="94.2527%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,511,109 samples, 0.44%)</title><rect x="96.5453%" y="197" width="0.4393%" height="15" fill="rgb(209,121,21)"/><text x="96.7953%" y="207.50"></text></g><g><title>optimized_mir (22,037,653 samples, 0.72%)</title><rect x="96.2689%" y="213" width="0.7165%" height="15" fill="rgb(220,109,13)"/><text x="96.5189%" y="223.50"></text></g><g><title>generate_crate_metadata (66,209,283 samples, 2.15%)</title><rect x="94.8625%" y="229" width="2.1527%" height="15" fill="rgb(232,18,1)"/><text x="95.1125%" y="239.50">g..</text></g><g><title>hir_lowering (79,763,342 samples, 2.59%)</title><rect x="97.0152%" y="229" width="2.5934%" height="15" fill="rgb(215,41,42)"/><text x="97.2652%" y="239.50">hi..</text></g><g><title>self_profile_alloc_query_strings (8,306,412 samples, 0.27%)</title><rect x="99.6395%" y="229" width="0.2701%" height="15" fill="rgb(224,123,36)"/><text x="99.8895%" y="239.50"></text></g><g><title>all (3,075,647,198 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (3,075,647,198 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>