<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (497,412 samples, 0.18%)</title><rect x="11.2123%" y="149" width="0.1841%" height="15" fill="rgb(227,0,7)"/><text x="11.4623%" y="159.50"></text></g><g><title>is_sized_raw (421,324 samples, 0.16%)</title><rect x="11.4671%" y="149" width="0.1559%" height="15" fill="rgb(217,0,24)"/><text x="11.7171%" y="159.50"></text></g><g><title>evaluate_obligation (322,274 samples, 0.12%)</title><rect x="11.5037%" y="133" width="0.1193%" height="15" fill="rgb(221,193,54)"/><text x="11.7537%" y="143.50"></text></g><g><title>param_env (442,284 samples, 0.16%)</title><rect x="13.0682%" y="117" width="0.1637%" height="15" fill="rgb(248,212,6)"/><text x="13.3182%" y="127.50"></text></g><g><title>codegen_fn_attrs (376,662 samples, 0.14%)</title><rect x="13.6493%" y="101" width="0.1394%" height="15" fill="rgb(208,68,35)"/><text x="13.8993%" y="111.50"></text></g><g><title>is_copy_raw (587,887 samples, 0.22%)</title><rect x="16.1251%" y="85" width="0.2176%" height="15" fill="rgb(232,128,0)"/><text x="16.3751%" y="95.50"></text></g><g><title>evaluate_obligation (472,587 samples, 0.17%)</title><rect x="16.1678%" y="69" width="0.1749%" height="15" fill="rgb(207,160,47)"/><text x="16.4178%" y="79.50"></text></g><g><title>adt_drop_tys (542,916 samples, 0.20%)</title><rect x="16.5096%" y="69" width="0.2009%" height="15" fill="rgb(228,23,34)"/><text x="16.7596%" y="79.50"></text></g><g><title>is_copy_raw (2,854,592 samples, 1.06%)</title><rect x="16.7128%" y="69" width="1.0565%" height="15" fill="rgb(218,30,26)"/><text x="16.9628%" y="79.50"></text></g><g><title>evaluate_obligation (2,280,296 samples, 0.84%)</title><rect x="16.9253%" y="53" width="0.8439%" height="15" fill="rgb(220,122,19)"/><text x="17.1753%" y="63.50"></text></g><g><title>needs_drop_raw (4,056,877 samples, 1.50%)</title><rect x="16.3449%" y="85" width="1.5015%" height="15" fill="rgb(250,228,42)"/><text x="16.5949%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,094,403 samples, 0.41%)</title><rect x="17.9911%" y="69" width="0.4050%" height="15" fill="rgb(240,193,28)"/><text x="18.2411%" y="79.50"></text></g><g><title>evaluate_obligation (292,323 samples, 0.11%)</title><rect x="18.2879%" y="53" width="0.1082%" height="15" fill="rgb(216,20,37)"/><text x="18.5379%" y="63.50"></text></g><g><title>resolve_instance (1,751,869 samples, 0.65%)</title><rect x="17.8463%" y="85" width="0.6484%" height="15" fill="rgb(206,188,39)"/><text x="18.0963%" y="95.50"></text></g><g><title>thir_body (1,900,255 samples, 0.70%)</title><rect x="18.5247%" y="85" width="0.7033%" height="15" fill="rgb(217,207,13)"/><text x="18.7747%" y="95.50"></text></g><g><title>mir_const (18,722,232 samples, 6.93%)</title><rect x="12.3226%" y="133" width="6.9291%" height="15" fill="rgb(231,73,38)"/><text x="12.5726%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,265,285 samples, 6.02%)</title><rect x="13.2319%" y="117" width="6.0198%" height="15" fill="rgb(225,20,46)"/><text x="13.4819%" y="127.50">unsafety..</text></g><g><title>mir_built (14,760,669 samples, 5.46%)</title><rect x="13.7887%" y="101" width="5.4630%" height="15" fill="rgb(210,31,41)"/><text x="14.0387%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (20,741,435 samples, 7.68%)</title><rect x="11.6230%" y="149" width="7.6764%" height="15" fill="rgb(221,200,47)"/><text x="11.8730%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,696,542 samples, 0.63%)</title><rect x="19.2994%" y="149" width="0.6279%" height="15" fill="rgb(226,26,5)"/><text x="19.5494%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (4,221,838 samples, 1.56%)</title><rect x="19.9273%" y="149" width="1.5625%" height="15" fill="rgb(249,33,26)"/><text x="20.1773%" y="159.50"></text></g><g><title>normalize_projection_ty (2,835,644 samples, 1.05%)</title><rect x="20.4404%" y="133" width="1.0495%" height="15" fill="rgb(235,183,28)"/><text x="20.6904%" y="143.50"></text></g><g><title>type_op_normalize_predicate (387,196 samples, 0.14%)</title><rect x="21.4898%" y="149" width="0.1433%" height="15" fill="rgb(221,5,38)"/><text x="21.7398%" y="159.50"></text></g><g><title>type_op_normalize_ty (1,857,084 samples, 0.69%)</title><rect x="21.6331%" y="149" width="0.6873%" height="15" fill="rgb(247,18,42)"/><text x="21.8831%" y="159.50"></text></g><g><title>normalize_projection_ty (1,237,348 samples, 0.46%)</title><rect x="21.8625%" y="133" width="0.4579%" height="15" fill="rgb(241,131,45)"/><text x="22.1125%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,532,820 samples, 2.42%)</title><rect x="22.3205%" y="149" width="2.4178%" height="15" fill="rgb(249,31,29)"/><text x="22.5705%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (65,629,441 samples, 24.29%)</title><rect x="0.4595%" y="181" width="24.2896%" height="15" fill="rgb(225,111,53)"/><text x="0.7095%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (65,241,544 samples, 24.15%)</title><rect x="0.6031%" y="165" width="24.1460%" height="15" fill="rgb(238,160,17)"/><text x="0.8531%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (368,166 samples, 0.14%)</title><rect x="24.7868%" y="181" width="0.1363%" height="15" fill="rgb(214,148,48)"/><text x="25.0368%" y="191.50"></text></g><g><title>item_attrs (301,123 samples, 0.11%)</title><rect x="25.2996%" y="101" width="0.1114%" height="15" fill="rgb(232,36,49)"/><text x="25.5496%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (281,423 samples, 0.10%)</title><rect x="25.3069%" y="85" width="0.1042%" height="15" fill="rgb(209,103,24)"/><text x="25.5569%" y="95.50"></text></g><g><title>codegen_fn_attrs (554,644 samples, 0.21%)</title><rect x="25.2696%" y="117" width="0.2053%" height="15" fill="rgb(229,88,8)"/><text x="25.5196%" y="127.50"></text></g><g><title>should_inherit_track_caller (833,697 samples, 0.31%)</title><rect x="25.1735%" y="133" width="0.3086%" height="15" fill="rgb(213,181,19)"/><text x="25.4235%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,084,693 samples, 0.40%)</title><rect x="25.0863%" y="149" width="0.4014%" height="15" fill="rgb(254,191,54)"/><text x="25.3363%" y="159.50"></text></g><g><title>check_mod_attrs (1,495,258 samples, 0.55%)</title><rect x="24.9344%" y="165" width="0.5534%" height="15" fill="rgb(241,83,37)"/><text x="25.1844%" y="175.50"></text></g><g><title>check_mod_const_bodies (287,333 samples, 0.11%)</title><rect x="25.4878%" y="165" width="0.1063%" height="15" fill="rgb(233,36,39)"/><text x="25.7378%" y="175.50"></text></g><g><title>lookup_deprecation_entry (316,342 samples, 0.12%)</title><rect x="25.8544%" y="149" width="0.1171%" height="15" fill="rgb(226,3,54)"/><text x="26.1044%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (970,390 samples, 0.36%)</title><rect x="25.6477%" y="165" width="0.3591%" height="15" fill="rgb(245,192,40)"/><text x="25.8977%" y="175.50"></text></g><g><title>misc_checking_1 (2,988,753 samples, 1.11%)</title><rect x="24.9232%" y="181" width="1.1061%" height="15" fill="rgb(238,167,29)"/><text x="25.1732%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,283,975 samples, 0.48%)</title><rect x="26.0301%" y="165" width="0.4752%" height="15" fill="rgb(232,182,51)"/><text x="26.2801%" y="175.50"></text></g><g><title>check_mod_liveness (1,119,692 samples, 0.41%)</title><rect x="26.0909%" y="149" width="0.4144%" height="15" fill="rgb(231,60,39)"/><text x="26.3409%" y="159.50"></text></g><g><title>type_uninhabited_from (485,486 samples, 0.18%)</title><rect x="26.3256%" y="133" width="0.1797%" height="15" fill="rgb(208,69,12)"/><text x="26.5756%" y="143.50"></text></g><g><title>type_uninhabited_from (395,605 samples, 0.15%)</title><rect x="26.3589%" y="117" width="0.1464%" height="15" fill="rgb(235,93,37)"/><text x="26.6089%" y="127.50"></text></g><g><title>misc_checking_2 (2,505,319 samples, 0.93%)</title><rect x="26.0294%" y="181" width="0.9272%" height="15" fill="rgb(213,116,39)"/><text x="26.2794%" y="191.50"></text></g><g><title>match_checking (1,219,334 samples, 0.45%)</title><rect x="26.5053%" y="165" width="0.4513%" height="15" fill="rgb(222,207,29)"/><text x="26.7553%" y="175.50"></text></g><g><title>check_match (1,134,303 samples, 0.42%)</title><rect x="26.5368%" y="149" width="0.4198%" height="15" fill="rgb(206,96,30)"/><text x="26.7868%" y="159.50"></text></g><g><title>check_private_in_public (478,905 samples, 0.18%)</title><rect x="26.9607%" y="165" width="0.1772%" height="15" fill="rgb(218,138,4)"/><text x="27.2107%" y="175.50"></text></g><g><title>death_checking (987,871 samples, 0.37%)</title><rect x="27.1380%" y="165" width="0.3656%" height="15" fill="rgb(250,191,14)"/><text x="27.3880%" y="175.50"></text></g><g><title>param_env (311,233 samples, 0.12%)</title><rect x="27.8637%" y="133" width="0.1152%" height="15" fill="rgb(239,60,40)"/><text x="28.1137%" y="143.50"></text></g><g><title>crate_lints (2,437,967 samples, 0.90%)</title><rect x="27.5041%" y="149" width="0.9023%" height="15" fill="rgb(206,27,48)"/><text x="27.7541%" y="159.50"></text></g><g><title>type_of (1,141,152 samples, 0.42%)</title><rect x="27.9841%" y="133" width="0.4223%" height="15" fill="rgb(225,35,8)"/><text x="28.2341%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (894,090 samples, 0.33%)</title><rect x="28.0755%" y="117" width="0.3309%" height="15" fill="rgb(250,213,24)"/><text x="28.3255%" y="127.50"></text></g><g><title>lint_checking (3,337,957 samples, 1.24%)</title><rect x="27.5036%" y="165" width="1.2354%" height="15" fill="rgb(247,123,22)"/><text x="27.7536%" y="175.50"></text></g><g><title>module_lints (898,620 samples, 0.33%)</title><rect x="28.4064%" y="149" width="0.3326%" height="15" fill="rgb(231,138,38)"/><text x="28.6564%" y="159.50"></text></g><g><title>lint_mod (891,440 samples, 0.33%)</title><rect x="28.4091%" y="133" width="0.3299%" height="15" fill="rgb(231,145,46)"/><text x="28.6591%" y="143.50"></text></g><g><title>privacy_access_levels (676,248 samples, 0.25%)</title><rect x="28.7390%" y="165" width="0.2503%" height="15" fill="rgb(251,118,11)"/><text x="28.9890%" y="175.50"></text></g><g><title>privacy_checking_modules (2,502,708 samples, 0.93%)</title><rect x="28.9893%" y="165" width="0.9263%" height="15" fill="rgb(217,147,25)"/><text x="29.2393%" y="175.50"></text></g><g><title>check_mod_privacy (2,496,988 samples, 0.92%)</title><rect x="28.9914%" y="149" width="0.9241%" height="15" fill="rgb(247,81,37)"/><text x="29.2414%" y="159.50"></text></g><g><title>misc_checking_3 (8,019,820 samples, 2.97%)</title><rect x="26.9566%" y="181" width="2.9682%" height="15" fill="rgb(209,12,38)"/><text x="27.2066%" y="191.50">mis..</text></g><g><title>impl_parent (2,469,396 samples, 0.91%)</title><rect x="31.3821%" y="117" width="0.9139%" height="15" fill="rgb(227,1,9)"/><text x="31.6321%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,496,566 samples, 0.55%)</title><rect x="31.7422%" y="101" width="0.5539%" height="15" fill="rgb(248,47,43)"/><text x="31.9922%" y="111.50"></text></g><g><title>impl_trait_ref (5,871,606 samples, 2.17%)</title><rect x="32.2961%" y="117" width="2.1731%" height="15" fill="rgb(221,10,30)"/><text x="32.5461%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,536,488 samples, 1.68%)</title><rect x="32.7902%" y="101" width="1.6790%" height="15" fill="rgb(210,229,1)"/><text x="33.0402%" y="111.50"></text></g><g><title>trait_impls_of (948,811 samples, 0.35%)</title><rect x="34.4784%" y="117" width="0.3512%" height="15" fill="rgb(222,148,37)"/><text x="34.7284%" y="127.50"></text></g><g><title>implementations_of_trait (326,483 samples, 0.12%)</title><rect x="34.7087%" y="101" width="0.1208%" height="15" fill="rgb(234,67,33)"/><text x="34.9587%" y="111.50"></text></g><g><title>coherent_trait (13,056,627 samples, 4.83%)</title><rect x="29.9976%" y="149" width="4.8323%" height="15" fill="rgb(247,98,35)"/><text x="30.2476%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (13,026,147 samples, 4.82%)</title><rect x="30.0089%" y="133" width="4.8210%" height="15" fill="rgb(247,138,52)"/><text x="30.2589%" y="143.50">specia..</text></g><g><title>coherence_checking (13,169,617 samples, 4.87%)</title><rect x="29.9883%" y="165" width="4.8741%" height="15" fill="rgb(213,79,30)"/><text x="30.2383%" y="175.50">cohere..</text></g><g><title>associated_item (1,277,126 samples, 0.47%)</title><rect x="52.6313%" y="101" width="0.4727%" height="15" fill="rgb(246,177,23)"/><text x="52.8813%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (827,522 samples, 0.31%)</title><rect x="52.7977%" y="85" width="0.3063%" height="15" fill="rgb(230,62,27)"/><text x="53.0477%" y="95.50"></text></g><g><title>associated_items (1,711,950 samples, 0.63%)</title><rect x="52.4881%" y="117" width="0.6336%" height="15" fill="rgb(216,154,8)"/><text x="52.7381%" y="127.50"></text></g><g><title>adt_dtorck_constraint (428,983 samples, 0.16%)</title><rect x="53.4889%" y="101" width="0.1588%" height="15" fill="rgb(244,35,45)"/><text x="53.7389%" y="111.50"></text></g><g><title>dropck_outlives (1,703,615 samples, 0.63%)</title><rect x="53.1601%" y="117" width="0.6305%" height="15" fill="rgb(251,115,12)"/><text x="53.4101%" y="127.50"></text></g><g><title>normalize_projection_ty (386,294 samples, 0.14%)</title><rect x="53.6477%" y="101" width="0.1430%" height="15" fill="rgb(240,54,50)"/><text x="53.8977%" y="111.50"></text></g><g><title>predicates_of (296,662 samples, 0.11%)</title><rect x="54.9884%" y="101" width="0.1098%" height="15" fill="rgb(233,84,52)"/><text x="55.2384%" y="111.50"></text></g><g><title>evaluate_obligation (3,743,522 samples, 1.39%)</title><rect x="53.7906%" y="117" width="1.3855%" height="15" fill="rgb(207,117,47)"/><text x="54.0406%" y="127.50"></text></g><g><title>associated_item (615,518 samples, 0.23%)</title><rect x="55.3771%" y="85" width="0.2278%" height="15" fill="rgb(249,43,39)"/><text x="55.6271%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (527,978 samples, 0.20%)</title><rect x="55.4095%" y="69" width="0.1954%" height="15" fill="rgb(209,38,44)"/><text x="55.6595%" y="79.50"></text></g><g><title>impl_item_implementor_ids (874,020 samples, 0.32%)</title><rect x="55.2920%" y="117" width="0.3235%" height="15" fill="rgb(236,212,23)"/><text x="55.5420%" y="127.50"></text></g><g><title>associated_items (807,250 samples, 0.30%)</title><rect x="55.3167%" y="101" width="0.2988%" height="15" fill="rgb(242,79,21)"/><text x="55.5667%" y="111.50"></text></g><g><title>evaluate_obligation (547,764 samples, 0.20%)</title><rect x="55.9206%" y="101" width="0.2027%" height="15" fill="rgb(211,96,35)"/><text x="56.1706%" y="111.50"></text></g><g><title>method_autoderef_steps (1,093,981 samples, 0.40%)</title><rect x="55.7243%" y="117" width="0.4049%" height="15" fill="rgb(253,215,40)"/><text x="55.9743%" y="127.50"></text></g><g><title>predicates_of (445,976 samples, 0.17%)</title><rect x="56.1722%" y="117" width="0.1651%" height="15" fill="rgb(211,81,21)"/><text x="56.4222%" y="127.50"></text></g><g><title>predicates_defined_on (306,553 samples, 0.11%)</title><rect x="56.2238%" y="101" width="0.1135%" height="15" fill="rgb(208,190,38)"/><text x="56.4738%" y="111.50"></text></g><g><title>dropck_outlives (271,754 samples, 0.10%)</title><rect x="59.1842%" y="101" width="0.1006%" height="15" fill="rgb(235,213,38)"/><text x="59.4342%" y="111.50"></text></g><g><title>evaluate_obligation (1,193,150 samples, 0.44%)</title><rect x="59.2847%" y="101" width="0.4416%" height="15" fill="rgb(237,122,38)"/><text x="59.5347%" y="111.50"></text></g><g><title>is_copy_raw (368,254 samples, 0.14%)</title><rect x="59.7923%" y="101" width="0.1363%" height="15" fill="rgb(244,218,35)"/><text x="60.0423%" y="111.50"></text></g><g><title>evaluate_obligation (319,323 samples, 0.12%)</title><rect x="59.8104%" y="85" width="0.1182%" height="15" fill="rgb(240,68,47)"/><text x="60.0604%" y="95.50"></text></g><g><title>typeck (9,934,751 samples, 3.68%)</title><rect x="56.4127%" y="117" width="3.6769%" height="15" fill="rgb(210,16,53)"/><text x="56.6627%" y="127.50">type..</text></g><g><title>item_bodies_checking (68,204,950 samples, 25.24%)</title><rect x="34.8907%" y="165" width="25.2428%" height="15" fill="rgb(235,124,12)"/><text x="35.1407%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (68,200,550 samples, 25.24%)</title><rect x="34.8923%" y="149" width="25.2412%" height="15" fill="rgb(224,169,11)"/><text x="35.1423%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (67,913,569 samples, 25.13%)</title><rect x="34.9985%" y="133" width="25.1350%" height="15" fill="rgb(250,166,2)"/><text x="35.2485%" y="143.50">typeck</text></g><g><title>adt_destructor (341,994 samples, 0.13%)</title><rect x="64.2844%" y="133" width="0.1266%" height="15" fill="rgb(242,216,29)"/><text x="64.5344%" y="143.50"></text></g><g><title>coherent_trait (331,584 samples, 0.12%)</title><rect x="64.2882%" y="117" width="0.1227%" height="15" fill="rgb(230,116,27)"/><text x="64.5382%" y="127.50"></text></g><g><title>specialization_graph_of (328,654 samples, 0.12%)</title><rect x="64.2893%" y="101" width="0.1216%" height="15" fill="rgb(228,99,48)"/><text x="64.5393%" y="111.50"></text></g><g><title>evaluate_obligation (772,609 samples, 0.29%)</title><rect x="64.4140%" y="133" width="0.2859%" height="15" fill="rgb(253,11,6)"/><text x="64.6640%" y="143.50"></text></g><g><title>predicates_of (296,939 samples, 0.11%)</title><rect x="64.8713%" y="133" width="0.1099%" height="15" fill="rgb(247,143,39)"/><text x="65.1213%" y="143.50"></text></g><g><title>item_types_checking (13,110,616 samples, 4.85%)</title><rect x="60.1335%" y="165" width="4.8523%" height="15" fill="rgb(236,97,10)"/><text x="60.3835%" y="175.50">item_t..</text></g><g><title>check_mod_item_types (13,102,506 samples, 4.85%)</title><rect x="60.1365%" y="149" width="4.8493%" height="15" fill="rgb(233,208,19)"/><text x="60.3865%" y="159.50">check_..</text></g><g><title>fn_sig (1,830,241 samples, 0.68%)</title><rect x="65.2323%" y="133" width="0.6774%" height="15" fill="rgb(216,164,2)"/><text x="65.4823%" y="143.50"></text></g><g><title>type_param_predicates (279,461 samples, 0.10%)</title><rect x="65.8063%" y="117" width="0.1034%" height="15" fill="rgb(220,129,5)"/><text x="66.0563%" y="127.50"></text></g><g><title>is_late_bound_map (780,760 samples, 0.29%)</title><rect x="66.0305%" y="117" width="0.2890%" height="15" fill="rgb(242,17,10)"/><text x="66.2805%" y="127.50"></text></g><g><title>resolve_lifetimes (743,229 samples, 0.28%)</title><rect x="66.0443%" y="101" width="0.2751%" height="15" fill="rgb(242,107,0)"/><text x="66.2943%" y="111.50"></text></g><g><title>generics_of (1,233,248 samples, 0.46%)</title><rect x="65.9097%" y="133" width="0.4564%" height="15" fill="rgb(251,28,31)"/><text x="66.1597%" y="143.50"></text></g><g><title>explicit_predicates_of (836,384 samples, 0.31%)</title><rect x="66.5350%" y="101" width="0.3095%" height="15" fill="rgb(233,223,10)"/><text x="66.7850%" y="111.50"></text></g><g><title>predicates_of (1,678,974 samples, 0.62%)</title><rect x="66.4030%" y="133" width="0.6214%" height="15" fill="rgb(215,21,27)"/><text x="66.6530%" y="143.50"></text></g><g><title>predicates_defined_on (1,549,292 samples, 0.57%)</title><rect x="66.4510%" y="117" width="0.5734%" height="15" fill="rgb(232,23,21)"/><text x="66.7010%" y="127.50"></text></g><g><title>inferred_outlives_of (485,765 samples, 0.18%)</title><rect x="66.8446%" y="101" width="0.1798%" height="15" fill="rgb(244,5,23)"/><text x="67.0946%" y="111.50"></text></g><g><title>inferred_outlives_crate (436,695 samples, 0.16%)</title><rect x="66.8627%" y="85" width="0.1616%" height="15" fill="rgb(226,81,46)"/><text x="67.1127%" y="95.50"></text></g><g><title>type_collecting (5,851,035 samples, 2.17%)</title><rect x="64.9870%" y="165" width="2.1655%" height="15" fill="rgb(247,70,30)"/><text x="65.2370%" y="175.50">t..</text></g><g><title>collect_mod_item_types (5,834,845 samples, 2.16%)</title><rect x="64.9930%" y="149" width="2.1595%" height="15" fill="rgb(212,68,19)"/><text x="65.2430%" y="159.50">c..</text></g><g><title>type_of (334,853 samples, 0.12%)</title><rect x="67.0286%" y="133" width="0.1239%" height="15" fill="rgb(240,187,13)"/><text x="67.2786%" y="143.50"></text></g><g><title>evaluate_obligation (685,476 samples, 0.25%)</title><rect x="71.5172%" y="133" width="0.2537%" height="15" fill="rgb(223,113,26)"/><text x="71.7672%" y="143.50"></text></g><g><title>implied_outlives_bounds (755,380 samples, 0.28%)</title><rect x="71.7956%" y="133" width="0.2796%" height="15" fill="rgb(206,192,2)"/><text x="72.0456%" y="143.50"></text></g><g><title>object_safety_violations (459,715 samples, 0.17%)</title><rect x="72.0790%" y="133" width="0.1701%" height="15" fill="rgb(241,108,4)"/><text x="72.3290%" y="143.50"></text></g><g><title>param_env (1,690,116 samples, 0.63%)</title><rect x="72.2502%" y="133" width="0.6255%" height="15" fill="rgb(247,173,49)"/><text x="72.5002%" y="143.50"></text></g><g><title>region_scope_tree (874,990 samples, 0.32%)</title><rect x="72.9385%" y="133" width="0.3238%" height="15" fill="rgb(224,114,35)"/><text x="73.1885%" y="143.50"></text></g><g><title>check_impl_item_well_formed (16,049,698 samples, 5.94%)</title><rect x="67.3747%" y="149" width="5.9400%" height="15" fill="rgb(245,159,27)"/><text x="67.6247%" y="159.50">check_im..</text></g><g><title>adt_sized_constraint (339,124 samples, 0.13%)</title><rect x="74.2826%" y="101" width="0.1255%" height="15" fill="rgb(245,172,44)"/><text x="74.5326%" y="111.50"></text></g><g><title>adt_def (338,564 samples, 0.13%)</title><rect x="74.2828%" y="85" width="0.1253%" height="15" fill="rgb(236,23,11)"/><text x="74.5328%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (338,334 samples, 0.13%)</title><rect x="74.2829%" y="69" width="0.1252%" height="15" fill="rgb(205,117,38)"/><text x="74.5329%" y="79.50"></text></g><g><title>item_attrs (336,104 samples, 0.12%)</title><rect x="74.2837%" y="53" width="0.1244%" height="15" fill="rgb(237,72,25)"/><text x="74.5337%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (335,784 samples, 0.12%)</title><rect x="74.2838%" y="37" width="0.1243%" height="15" fill="rgb(244,70,9)"/><text x="74.5338%" y="47.50"></text></g><g><title>adt_sized_constraint (404,104 samples, 0.15%)</title><rect x="74.2608%" y="133" width="0.1496%" height="15" fill="rgb(217,125,39)"/><text x="74.5108%" y="143.50"></text></g><g><title>adt_sized_constraint (391,494 samples, 0.14%)</title><rect x="74.2654%" y="117" width="0.1449%" height="15" fill="rgb(235,36,10)"/><text x="74.5154%" y="127.50"></text></g><g><title>evaluate_obligation (560,546 samples, 0.21%)</title><rect x="74.4108%" y="133" width="0.2075%" height="15" fill="rgb(251,123,47)"/><text x="74.6608%" y="143.50"></text></g><g><title>param_env (451,597 samples, 0.17%)</title><rect x="74.7145%" y="133" width="0.1671%" height="15" fill="rgb(221,13,13)"/><text x="74.9645%" y="143.50"></text></g><g><title>check_item_well_formed (4,907,964 samples, 1.82%)</title><rect x="73.3147%" y="149" width="1.8164%" height="15" fill="rgb(238,131,9)"/><text x="73.5647%" y="159.50">c..</text></g><g><title>analysis (202,666,399 samples, 75.01%)</title><rect x="0.2607%" y="197" width="75.0073%" height="15" fill="rgb(211,50,8)"/><text x="0.5107%" y="207.50">analysis</text></g><g><title>type_check_crate (122,515,335 samples, 45.34%)</title><rect x="29.9247%" y="181" width="45.3432%" height="15" fill="rgb(245,182,24)"/><text x="30.1747%" y="191.50">type_check_crate</text></g><g><title>wf_checking (21,907,244 samples, 8.11%)</title><rect x="67.1600%" y="165" width="8.1079%" height="15" fill="rgb(242,14,37)"/><text x="67.4100%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (369,594 samples, 0.14%)</title><rect x="75.1311%" y="149" width="0.1368%" height="15" fill="rgb(246,228,12)"/><text x="75.3811%" y="159.50"></text></g><g><title>codegen_crate (393,125 samples, 0.15%)</title><rect x="75.2710%" y="197" width="0.1455%" height="15" fill="rgb(213,55,15)"/><text x="75.5210%" y="207.50"></text></g><g><title>AST_validation (486,845 samples, 0.18%)</title><rect x="75.4897%" y="181" width="0.1802%" height="15" fill="rgb(209,9,3)"/><text x="75.7397%" y="191.50"></text></g><g><title>metadata_load_macro (618,137 samples, 0.23%)</title><rect x="89.7268%" y="149" width="0.2288%" height="15" fill="rgb(230,59,30)"/><text x="89.9768%" y="159.50"></text></g><g><title>metadata_register_crate (2,573,958 samples, 0.95%)</title><rect x="89.9556%" y="149" width="0.9526%" height="15" fill="rgb(209,121,21)"/><text x="90.2056%" y="159.50"></text></g><g><title>metadata_register_crate (878,119 samples, 0.32%)</title><rect x="90.5832%" y="133" width="0.3250%" height="15" fill="rgb(220,109,13)"/><text x="90.8332%" y="143.50"></text></g><g><title>macro_expand_crate (41,537,403 samples, 15.37%)</title><rect x="75.7417%" y="181" width="15.3731%" height="15" fill="rgb(232,18,1)"/><text x="75.9917%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (41,511,703 samples, 15.36%)</title><rect x="75.7512%" y="165" width="15.3636%" height="15" fill="rgb(215,41,42)"/><text x="76.0012%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (558,175 samples, 0.21%)</title><rect x="90.9082%" y="149" width="0.2066%" height="15" fill="rgb(224,123,36)"/><text x="91.1582%" y="159.50"></text></g><g><title>late_resolve_crate (6,905,387 samples, 2.56%)</title><rect x="91.3134%" y="165" width="2.5557%" height="15" fill="rgb(240,125,3)"/><text x="91.5634%" y="175.50">la..</text></g><g><title>configure_and_expand (50,056,549 samples, 18.53%)</title><rect x="75.4165%" y="197" width="18.5260%" height="15" fill="rgb(205,98,50)"/><text x="75.6665%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,562,995 samples, 2.80%)</title><rect x="91.1434%" y="181" width="2.7991%" height="15" fill="rgb(205,185,37)"/><text x="91.3934%" y="191.50">re..</text></g><g><title>drop_ast (307,403 samples, 0.11%)</title><rect x="93.9425%" y="197" width="0.1138%" height="15" fill="rgb(238,207,15)"/><text x="94.1925%" y="207.50"></text></g><g><title>early_lint_checks (539,906 samples, 0.20%)</title><rect x="94.0630%" y="197" width="0.1998%" height="15" fill="rgb(213,199,42)"/><text x="94.3130%" y="207.50"></text></g><g><title>free_global_ctxt (4,403,769 samples, 1.63%)</title><rect x="94.2628%" y="197" width="1.6298%" height="15" fill="rgb(235,201,11)"/><text x="94.5128%" y="207.50"></text></g><g><title>generate_crate_metadata (2,368,307 samples, 0.88%)</title><rect x="95.8927%" y="197" width="0.8765%" height="15" fill="rgb(207,46,11)"/><text x="96.1427%" y="207.50"></text></g><g><title>hir_lowering (6,480,892 samples, 2.40%)</title><rect x="96.7692%" y="197" width="2.3986%" height="15" fill="rgb(241,35,35)"/><text x="97.0192%" y="207.50">hi..</text></g><g><title>parse_crate (312,543 samples, 0.12%)</title><rect x="99.1902%" y="197" width="0.1157%" height="15" fill="rgb(243,32,47)"/><text x="99.4402%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,211,483 samples, 0.45%)</title><rect x="99.3712%" y="197" width="0.4484%" height="15" fill="rgb(247,202,23)"/><text x="99.6212%" y="207.50"></text></g><g><title>all (270,195,672 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (270,195,672 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (398,374 samples, 0.15%)</title><rect x="99.8526%" y="197" width="0.1474%" height="15" fill="rgb(222,74,54)"/><text x="100.1026%" y="207.50"></text></g></svg></svg>