<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (207,672 samples, 0.28%)</title><rect x="7.5987%" y="85" width="0.2768%" height="15" fill="rgb(227,0,7)"/><text x="7.8487%" y="95.50"></text></g><g><title>evaluate_obligation (193,792 samples, 0.26%)</title><rect x="7.6172%" y="69" width="0.2583%" height="15" fill="rgb(217,0,24)"/><text x="7.8672%" y="79.50"></text></g><g><title>trait_impls_of (133,482 samples, 0.18%)</title><rect x="7.6976%" y="53" width="0.1779%" height="15" fill="rgb(221,193,54)"/><text x="7.9476%" y="63.50"></text></g><g><title>needs_drop_raw (461,255 samples, 0.61%)</title><rect x="7.8755%" y="85" width="0.6147%" height="15" fill="rgb(248,212,6)"/><text x="8.1255%" y="95.50"></text></g><g><title>is_copy_raw (359,845 samples, 0.48%)</title><rect x="8.0106%" y="69" width="0.4796%" height="15" fill="rgb(208,68,35)"/><text x="8.2606%" y="79.50"></text></g><g><title>evaluate_obligation (313,724 samples, 0.42%)</title><rect x="8.0721%" y="53" width="0.4181%" height="15" fill="rgb(232,128,0)"/><text x="8.3221%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (154,950 samples, 0.21%)</title><rect x="8.6187%" y="69" width="0.2065%" height="15" fill="rgb(207,160,47)"/><text x="8.8687%" y="79.50"></text></g><g><title>impl_parent (216,832 samples, 0.29%)</title><rect x="9.4371%" y="53" width="0.2890%" height="15" fill="rgb(228,23,34)"/><text x="9.6871%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (127,692 samples, 0.17%)</title><rect x="9.5559%" y="37" width="0.1702%" height="15" fill="rgb(218,30,26)"/><text x="9.8059%" y="47.50"></text></g><g><title>specialization_graph_of (904,171 samples, 1.21%)</title><rect x="8.8611%" y="69" width="1.2050%" height="15" fill="rgb(220,122,19)"/><text x="9.1111%" y="79.50"></text></g><g><title>impl_trait_ref (255,152 samples, 0.34%)</title><rect x="9.7261%" y="53" width="0.3401%" height="15" fill="rgb(250,228,42)"/><text x="9.9761%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (180,752 samples, 0.24%)</title><rect x="9.8253%" y="37" width="0.2409%" height="15" fill="rgb(240,193,28)"/><text x="10.0753%" y="47.50"></text></g><g><title>resolve_instance (1,212,753 samples, 1.62%)</title><rect x="8.4902%" y="85" width="1.6163%" height="15" fill="rgb(216,20,37)"/><text x="8.7402%" y="95.50"></text></g><g><title>thir_body (275,673 samples, 0.37%)</title><rect x="10.1174%" y="85" width="0.3674%" height="15" fill="rgb(206,188,39)"/><text x="10.3674%" y="95.50"></text></g><g><title>mir_const (3,544,010 samples, 4.72%)</title><rect x="5.7672%" y="133" width="4.7233%" height="15" fill="rgb(217,207,13)"/><text x="6.0172%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (3,184,797 samples, 4.24%)</title><rect x="6.2460%" y="117" width="4.2445%" height="15" fill="rgb(231,73,38)"/><text x="6.4960%" y="127.50">unsaf..</text></g><g><title>mir_built (2,957,092 samples, 3.94%)</title><rect x="6.5494%" y="101" width="3.9411%" height="15" fill="rgb(225,20,46)"/><text x="6.7994%" y="111.50">mir_..</text></g><g><title>mir_promoted (3,822,394 samples, 5.09%)</title><rect x="5.4159%" y="149" width="5.0943%" height="15" fill="rgb(210,31,41)"/><text x="5.6659%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (276,453 samples, 0.37%)</title><rect x="10.5102%" y="149" width="0.3684%" height="15" fill="rgb(221,200,47)"/><text x="10.7602%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (124,953 samples, 0.17%)</title><rect x="10.8786%" y="149" width="0.1665%" height="15" fill="rgb(226,26,5)"/><text x="11.1286%" y="159.50"></text></g><g><title>type_op_prove_predicate (561,941 samples, 0.75%)</title><rect x="11.1002%" y="149" width="0.7489%" height="15" fill="rgb(249,33,26)"/><text x="11.3502%" y="159.50"></text></g><g><title>MIR_borrow_checking (8,092,370 samples, 10.79%)</title><rect x="1.0701%" y="181" width="10.7851%" height="15" fill="rgb(235,183,28)"/><text x="1.3201%" y="191.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (8,060,299 samples, 10.74%)</title><rect x="1.1128%" y="165" width="10.7424%" height="15" fill="rgb(221,5,38)"/><text x="1.3628%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (95,541 samples, 0.13%)</title><rect x="11.8668%" y="181" width="0.1273%" height="15" fill="rgb(247,18,42)"/><text x="12.1168%" y="191.50"></text></g><g><title>codegen_fn_attrs (186,163 samples, 0.25%)</title><rect x="12.1444%" y="149" width="0.2481%" height="15" fill="rgb(241,131,45)"/><text x="12.3944%" y="159.50"></text></g><g><title>check_mod_attrs (280,513 samples, 0.37%)</title><rect x="12.0187%" y="165" width="0.3739%" height="15" fill="rgb(249,31,29)"/><text x="12.2687%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (193,463 samples, 0.26%)</title><rect x="12.4854%" y="165" width="0.2578%" height="15" fill="rgb(225,111,53)"/><text x="12.7354%" y="175.50"></text></g><g><title>misc_checking_1 (590,136 samples, 0.79%)</title><rect x="11.9946%" y="181" width="0.7865%" height="15" fill="rgb(238,160,17)"/><text x="12.2446%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (156,622 samples, 0.21%)</title><rect x="12.7830%" y="165" width="0.2087%" height="15" fill="rgb(214,148,48)"/><text x="13.0330%" y="175.50"></text></g><g><title>check_mod_liveness (122,991 samples, 0.16%)</title><rect x="12.8278%" y="149" width="0.1639%" height="15" fill="rgb(232,36,49)"/><text x="13.0778%" y="159.50"></text></g><g><title>misc_checking_2 (358,774 samples, 0.48%)</title><rect x="12.7812%" y="181" width="0.4782%" height="15" fill="rgb(209,103,24)"/><text x="13.0312%" y="191.50"></text></g><g><title>match_checking (200,762 samples, 0.27%)</title><rect x="12.9917%" y="165" width="0.2676%" height="15" fill="rgb(229,88,8)"/><text x="13.2417%" y="175.50"></text></g><g><title>check_match (190,942 samples, 0.25%)</title><rect x="13.0048%" y="149" width="0.2545%" height="15" fill="rgb(213,181,19)"/><text x="13.2548%" y="159.50"></text></g><g><title>death_checking (121,831 samples, 0.16%)</title><rect x="13.3540%" y="165" width="0.1624%" height="15" fill="rgb(254,191,54)"/><text x="13.6040%" y="175.50"></text></g><g><title>crate_lints (1,609,778 samples, 2.15%)</title><rect x="13.5183%" y="149" width="2.1454%" height="15" fill="rgb(241,83,37)"/><text x="13.7683%" y="159.50">c..</text></g><g><title>type_of (1,059,578 samples, 1.41%)</title><rect x="14.2515%" y="133" width="1.4122%" height="15" fill="rgb(233,36,39)"/><text x="14.5015%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (819,838 samples, 1.09%)</title><rect x="14.5711%" y="117" width="1.0926%" height="15" fill="rgb(226,3,54)"/><text x="14.8211%" y="127.50"></text></g><g><title>lint_checking (1,735,600 samples, 2.31%)</title><rect x="13.5164%" y="165" width="2.3131%" height="15" fill="rgb(245,192,40)"/><text x="13.7664%" y="175.50">l..</text></g><g><title>module_lints (124,432 samples, 0.17%)</title><rect x="15.6637%" y="149" width="0.1658%" height="15" fill="rgb(238,167,29)"/><text x="15.9137%" y="159.50"></text></g><g><title>lint_mod (121,282 samples, 0.16%)</title><rect x="15.6679%" y="133" width="0.1616%" height="15" fill="rgb(232,182,51)"/><text x="15.9179%" y="143.50"></text></g><g><title>privacy_access_levels (77,561 samples, 0.10%)</title><rect x="15.8295%" y="165" width="0.1034%" height="15" fill="rgb(231,60,39)"/><text x="16.0795%" y="175.50"></text></g><g><title>privacy_checking_modules (325,223 samples, 0.43%)</title><rect x="15.9329%" y="165" width="0.4334%" height="15" fill="rgb(208,69,12)"/><text x="16.1829%" y="175.50"></text></g><g><title>check_mod_privacy (323,463 samples, 0.43%)</title><rect x="15.9353%" y="149" width="0.4311%" height="15" fill="rgb(235,93,37)"/><text x="16.1853%" y="159.50"></text></g><g><title>misc_checking_3 (2,340,916 samples, 3.12%)</title><rect x="13.2593%" y="181" width="3.1199%" height="15" fill="rgb(213,116,39)"/><text x="13.5093%" y="191.50">mis..</text></g><g><title>impl_parent (886,522 samples, 1.18%)</title><rect x="17.9207%" y="117" width="1.1815%" height="15" fill="rgb(222,207,29)"/><text x="18.1707%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (587,166 samples, 0.78%)</title><rect x="18.3197%" y="101" width="0.7825%" height="15" fill="rgb(206,96,30)"/><text x="18.5697%" y="111.50"></text></g><g><title>impl_trait_ref (3,002,684 samples, 4.00%)</title><rect x="19.1022%" y="117" width="4.0018%" height="15" fill="rgb(218,138,4)"/><text x="19.3522%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,711,459 samples, 3.61%)</title><rect x="19.4903%" y="101" width="3.6137%" height="15" fill="rgb(250,191,14)"/><text x="19.7403%" y="111.50">meta..</text></g><g><title>coherent_trait (5,238,297 samples, 6.98%)</title><rect x="16.4294%" y="149" width="6.9814%" height="15" fill="rgb(239,60,40)"/><text x="16.6794%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (5,230,977 samples, 6.97%)</title><rect x="16.4391%" y="133" width="6.9716%" height="15" fill="rgb(206,27,48)"/><text x="16.6891%" y="143.50">specializ..</text></g><g><title>trait_impls_of (228,802 samples, 0.30%)</title><rect x="23.1058%" y="117" width="0.3049%" height="15" fill="rgb(225,35,8)"/><text x="23.3558%" y="127.50"></text></g><g><title>coherence_checking (5,273,049 samples, 7.03%)</title><rect x="16.4136%" y="165" width="7.0277%" height="15" fill="rgb(250,213,24)"/><text x="16.6636%" y="175.50">coherence..</text></g><g><title>associated_item (216,671 samples, 0.29%)</title><rect x="32.0892%" y="101" width="0.2888%" height="15" fill="rgb(247,123,22)"/><text x="32.3392%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (163,531 samples, 0.22%)</title><rect x="32.1601%" y="85" width="0.2179%" height="15" fill="rgb(231,138,38)"/><text x="32.4101%" y="95.50"></text></g><g><title>associated_items (334,153 samples, 0.45%)</title><rect x="31.9556%" y="117" width="0.4453%" height="15" fill="rgb(231,145,46)"/><text x="32.2056%" y="127.50"></text></g><g><title>dropck_outlives (229,344 samples, 0.31%)</title><rect x="32.4308%" y="117" width="0.3057%" height="15" fill="rgb(251,118,11)"/><text x="32.6808%" y="127.50"></text></g><g><title>adt_dtorck_constraint (136,533 samples, 0.18%)</title><rect x="32.5545%" y="101" width="0.1820%" height="15" fill="rgb(217,147,25)"/><text x="32.8045%" y="111.50"></text></g><g><title>impl_trait_ref (105,870 samples, 0.14%)</title><rect x="34.1749%" y="101" width="0.1411%" height="15" fill="rgb(247,81,37)"/><text x="34.4249%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (83,230 samples, 0.11%)</title><rect x="34.2050%" y="85" width="0.1109%" height="15" fill="rgb(209,12,38)"/><text x="34.4550%" y="95.50"></text></g><g><title>opt_def_kind (236,063 samples, 0.31%)</title><rect x="34.3160%" y="101" width="0.3146%" height="15" fill="rgb(227,1,9)"/><text x="34.5660%" y="111.50"></text></g><g><title>explicit_predicates_of (108,341 samples, 0.14%)</title><rect x="34.7165%" y="69" width="0.1444%" height="15" fill="rgb(248,47,43)"/><text x="34.9665%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (100,511 samples, 0.13%)</title><rect x="34.7270%" y="53" width="0.1340%" height="15" fill="rgb(221,10,30)"/><text x="34.9770%" y="63.50"></text></g><g><title>predicates_of (183,822 samples, 0.24%)</title><rect x="34.6306%" y="101" width="0.2450%" height="15" fill="rgb(210,229,1)"/><text x="34.8806%" y="111.50"></text></g><g><title>predicates_defined_on (139,962 samples, 0.19%)</title><rect x="34.6890%" y="85" width="0.1865%" height="15" fill="rgb(222,148,37)"/><text x="34.9390%" y="95.50"></text></g><g><title>evaluate_obligation (2,003,331 samples, 2.67%)</title><rect x="32.7365%" y="117" width="2.6699%" height="15" fill="rgb(234,67,33)"/><text x="32.9865%" y="127.50">ev..</text></g><g><title>trait_impls_of (387,503 samples, 0.52%)</title><rect x="34.8900%" y="101" width="0.5164%" height="15" fill="rgb(247,98,35)"/><text x="35.1400%" y="111.50"></text></g><g><title>implementations_of_trait (143,301 samples, 0.19%)</title><rect x="35.2155%" y="85" width="0.1910%" height="15" fill="rgb(247,138,52)"/><text x="35.4655%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (78,520 samples, 0.10%)</title><rect x="35.3018%" y="69" width="0.1046%" height="15" fill="rgb(213,79,30)"/><text x="35.5518%" y="79.50"></text></g><g><title>fn_sig (112,341 samples, 0.15%)</title><rect x="35.4314%" y="117" width="0.1497%" height="15" fill="rgb(246,177,23)"/><text x="35.6814%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (105,181 samples, 0.14%)</title><rect x="35.4410%" y="101" width="0.1402%" height="15" fill="rgb(230,62,27)"/><text x="35.6910%" y="111.50"></text></g><g><title>item_attrs (106,021 samples, 0.14%)</title><rect x="35.7671%" y="117" width="0.1413%" height="15" fill="rgb(216,154,8)"/><text x="36.0171%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (100,471 samples, 0.13%)</title><rect x="35.7745%" y="101" width="0.1339%" height="15" fill="rgb(244,35,45)"/><text x="36.0245%" y="111.50"></text></g><g><title>method_autoderef_steps (168,891 samples, 0.23%)</title><rect x="35.9365%" y="117" width="0.2251%" height="15" fill="rgb(251,115,12)"/><text x="36.1865%" y="127.50"></text></g><g><title>evaluate_obligation (102,560 samples, 0.14%)</title><rect x="36.0249%" y="101" width="0.1367%" height="15" fill="rgb(240,54,50)"/><text x="36.2749%" y="111.50"></text></g><g><title>object_safety_violations (113,871 samples, 0.15%)</title><rect x="36.1616%" y="117" width="0.1518%" height="15" fill="rgb(233,84,52)"/><text x="36.4116%" y="127.50"></text></g><g><title>explicit_predicates_of (122,421 samples, 0.16%)</title><rect x="36.4919%" y="85" width="0.1632%" height="15" fill="rgb(207,117,47)"/><text x="36.7419%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (108,080 samples, 0.14%)</title><rect x="36.5110%" y="69" width="0.1440%" height="15" fill="rgb(249,43,39)"/><text x="36.7610%" y="79.50"></text></g><g><title>predicates_of (270,433 samples, 0.36%)</title><rect x="36.3384%" y="117" width="0.3604%" height="15" fill="rgb(209,38,44)"/><text x="36.5884%" y="127.50"></text></g><g><title>predicates_defined_on (203,722 samples, 0.27%)</title><rect x="36.4273%" y="101" width="0.2715%" height="15" fill="rgb(236,212,23)"/><text x="36.6773%" y="111.50"></text></g><g><title>item_bodies_checking (10,121,254 samples, 13.49%)</title><rect x="23.4603%" y="165" width="13.4891%" height="15" fill="rgb(242,79,21)"/><text x="23.7103%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,118,934 samples, 13.49%)</title><rect x="23.4634%" y="149" width="13.4860%" height="15" fill="rgb(211,96,35)"/><text x="23.7134%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (10,094,744 samples, 13.45%)</title><rect x="23.4956%" y="133" width="13.4538%" height="15" fill="rgb(253,215,40)"/><text x="23.7456%" y="143.50">typeck</text></g><g><title>item_types_checking (201,872 samples, 0.27%)</title><rect x="36.9494%" y="165" width="0.2690%" height="15" fill="rgb(211,81,21)"/><text x="37.1994%" y="175.50"></text></g><g><title>check_mod_item_types (199,292 samples, 0.27%)</title><rect x="36.9528%" y="149" width="0.2656%" height="15" fill="rgb(208,190,38)"/><text x="37.2028%" y="159.50"></text></g><g><title>fn_sig (194,432 samples, 0.26%)</title><rect x="37.3440%" y="133" width="0.2591%" height="15" fill="rgb(235,213,38)"/><text x="37.5940%" y="143.50"></text></g><g><title>named_region_map (225,612 samples, 0.30%)</title><rect x="37.6575%" y="117" width="0.3007%" height="15" fill="rgb(237,122,38)"/><text x="37.9075%" y="127.50"></text></g><g><title>resolve_lifetimes (217,082 samples, 0.29%)</title><rect x="37.6688%" y="101" width="0.2893%" height="15" fill="rgb(244,218,35)"/><text x="37.9188%" y="111.50"></text></g><g><title>lint_levels (113,252 samples, 0.15%)</title><rect x="37.8072%" y="85" width="0.1509%" height="15" fill="rgb(240,68,47)"/><text x="38.0572%" y="95.50"></text></g><g><title>generics_of (273,683 samples, 0.36%)</title><rect x="37.6032%" y="133" width="0.3648%" height="15" fill="rgb(210,16,53)"/><text x="37.8532%" y="143.50"></text></g><g><title>explicit_predicates_of (107,522 samples, 0.14%)</title><rect x="38.0271%" y="101" width="0.1433%" height="15" fill="rgb(235,124,12)"/><text x="38.2771%" y="111.50"></text></g><g><title>predicates_of (452,706 samples, 0.60%)</title><rect x="37.9786%" y="133" width="0.6033%" height="15" fill="rgb(224,169,11)"/><text x="38.2286%" y="143.50"></text></g><g><title>predicates_defined_on (439,706 samples, 0.59%)</title><rect x="37.9959%" y="117" width="0.5860%" height="15" fill="rgb(250,166,2)"/><text x="38.2459%" y="127.50"></text></g><g><title>inferred_outlives_of (308,754 samples, 0.41%)</title><rect x="38.1704%" y="101" width="0.4115%" height="15" fill="rgb(242,216,29)"/><text x="38.4204%" y="111.50"></text></g><g><title>inferred_outlives_crate (298,524 samples, 0.40%)</title><rect x="38.1840%" y="85" width="0.3979%" height="15" fill="rgb(230,116,27)"/><text x="38.4340%" y="95.50"></text></g><g><title>type_of (233,982 samples, 0.31%)</title><rect x="38.2701%" y="69" width="0.3118%" height="15" fill="rgb(228,99,48)"/><text x="38.5201%" y="79.50"></text></g><g><title>type_collecting (1,070,712 samples, 1.43%)</title><rect x="37.2201%" y="165" width="1.4270%" height="15" fill="rgb(253,11,6)"/><text x="37.4701%" y="175.50"></text></g><g><title>collect_mod_item_types (1,059,091 samples, 1.41%)</title><rect x="37.2356%" y="149" width="1.4115%" height="15" fill="rgb(247,143,39)"/><text x="37.4856%" y="159.50"></text></g><g><title>evaluate_obligation (177,642 samples, 0.24%)</title><rect x="39.2146%" y="133" width="0.2368%" height="15" fill="rgb(236,97,10)"/><text x="39.4646%" y="143.50"></text></g><g><title>layout_of (98,512 samples, 0.13%)</title><rect x="39.7260%" y="117" width="0.1313%" height="15" fill="rgb(233,208,19)"/><text x="39.9760%" y="127.50"></text></g><g><title>object_safety_violations (259,143 samples, 0.35%)</title><rect x="39.5500%" y="133" width="0.3454%" height="15" fill="rgb(216,164,2)"/><text x="39.8000%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,049,952 samples, 1.40%)</title><rect x="38.7169%" y="149" width="1.3993%" height="15" fill="rgb(220,129,5)"/><text x="38.9669%" y="159.50"></text></g><g><title>adt_def (77,800 samples, 0.10%)</title><rect x="41.2990%" y="101" width="0.1037%" height="15" fill="rgb(242,17,10)"/><text x="41.5490%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (76,330 samples, 0.10%)</title><rect x="41.3009%" y="85" width="0.1017%" height="15" fill="rgb(242,107,0)"/><text x="41.5509%" y="95.50"></text></g><g><title>adt_def (86,041 samples, 0.11%)</title><rect x="41.4089%" y="85" width="0.1147%" height="15" fill="rgb(251,28,31)"/><text x="41.6589%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (85,341 samples, 0.11%)</title><rect x="41.4098%" y="69" width="0.1137%" height="15" fill="rgb(233,223,10)"/><text x="41.6598%" y="79.50"></text></g><g><title>adt_sized_constraint (107,831 samples, 0.14%)</title><rect x="41.4027%" y="101" width="0.1437%" height="15" fill="rgb(215,21,27)"/><text x="41.6527%" y="111.50"></text></g><g><title>evaluate_obligation (313,845 samples, 0.42%)</title><rect x="41.1370%" y="133" width="0.4183%" height="15" fill="rgb(232,23,21)"/><text x="41.3870%" y="143.50"></text></g><g><title>adt_sized_constraint (203,831 samples, 0.27%)</title><rect x="41.2836%" y="117" width="0.2717%" height="15" fill="rgb(244,5,23)"/><text x="41.5336%" y="127.50"></text></g><g><title>impl_trait_ref (176,133 samples, 0.23%)</title><rect x="41.6990%" y="133" width="0.2347%" height="15" fill="rgb(226,81,46)"/><text x="41.9490%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (157,582 samples, 0.21%)</title><rect x="41.7237%" y="117" width="0.2100%" height="15" fill="rgb(247,70,30)"/><text x="41.9737%" y="127.50"></text></g><g><title>param_env (114,523 samples, 0.15%)</title><rect x="41.9991%" y="133" width="0.1526%" height="15" fill="rgb(212,68,19)"/><text x="42.2491%" y="143.50"></text></g><g><title>analysis (31,139,577 samples, 41.50%)</title><rect x="0.8949%" y="197" width="41.5014%" height="15" fill="rgb(240,187,13)"/><text x="1.1449%" y="207.50">analysis</text></g><g><title>type_check_crate (19,521,328 samples, 26.02%)</title><rect x="16.3792%" y="181" width="26.0171%" height="15" fill="rgb(223,113,26)"/><text x="16.6292%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,811,381 samples, 3.75%)</title><rect x="38.6494%" y="165" width="3.7469%" height="15" fill="rgb(206,192,2)"/><text x="38.8994%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (1,710,819 samples, 2.28%)</title><rect x="40.1162%" y="149" width="2.2801%" height="15" fill="rgb(241,108,4)"/><text x="40.3662%" y="159.50">c..</text></g><g><title>codegen_crate (405,184 samples, 0.54%)</title><rect x="42.4094%" y="197" width="0.5400%" height="15" fill="rgb(247,173,49)"/><text x="42.6594%" y="207.50"></text></g><g><title>AST_validation (117,571 samples, 0.16%)</title><rect x="43.2007%" y="181" width="0.1567%" height="15" fill="rgb(224,114,35)"/><text x="43.4507%" y="191.50"></text></g><g><title>crate_injection (78,211 samples, 0.10%)</title><rect x="43.3873%" y="181" width="0.1042%" height="15" fill="rgb(245,159,27)"/><text x="43.6373%" y="191.50"></text></g><g><title>metadata_load_macro (128,722 samples, 0.17%)</title><rect x="71.5107%" y="149" width="0.1716%" height="15" fill="rgb(245,172,44)"/><text x="71.7607%" y="159.50"></text></g><g><title>metadata_register_crate (14,342,768 samples, 19.12%)</title><rect x="71.6823%" y="149" width="19.1154%" height="15" fill="rgb(236,23,11)"/><text x="71.9323%" y="159.50">metadata_register_crate</text></g><g><title>metadata_register_crate (12,517,317 samples, 16.68%)</title><rect x="74.1152%" y="133" width="16.6825%" height="15" fill="rgb(205,117,38)"/><text x="74.3652%" y="143.50">metadata_register_crate</text></g><g><title>metadata_register_crate (10,739,038 samples, 14.31%)</title><rect x="76.4852%" y="117" width="14.3125%" height="15" fill="rgb(237,72,25)"/><text x="76.7352%" y="127.50">metadata_register_crate</text></g><g><title>macro_expand_crate (35,556,996 samples, 47.39%)</title><rect x="43.4916%" y="181" width="47.3887%" height="15" fill="rgb(244,70,9)"/><text x="43.7416%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (35,544,536 samples, 47.37%)</title><rect x="43.5082%" y="165" width="47.3721%" height="15" fill="rgb(217,125,39)"/><text x="43.7582%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (965,151 samples, 1.29%)</title><rect x="91.0662%" y="165" width="1.2863%" height="15" fill="rgb(235,36,10)"/><text x="91.3162%" y="175.50"></text></g><g><title>configure_and_expand (37,109,793 samples, 49.46%)</title><rect x="42.9494%" y="197" width="49.4582%" height="15" fill="rgb(251,123,47)"/><text x="43.1994%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,074,102 samples, 1.43%)</title><rect x="90.9761%" y="181" width="1.4315%" height="15" fill="rgb(221,13,13)"/><text x="91.2261%" y="191.50"></text></g><g><title>drop_ast (75,131 samples, 0.10%)</title><rect x="92.4076%" y="197" width="0.1001%" height="15" fill="rgb(238,131,9)"/><text x="92.6576%" y="207.50"></text></g><g><title>early_lint_checks (202,942 samples, 0.27%)</title><rect x="92.5319%" y="197" width="0.2705%" height="15" fill="rgb(211,50,8)"/><text x="92.7819%" y="207.50"></text></g><g><title>free_global_ctxt (2,569,568 samples, 3.42%)</title><rect x="92.8024%" y="197" width="3.4246%" height="15" fill="rgb(245,182,24)"/><text x="93.0524%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (477,496 samples, 0.64%)</title><rect x="96.2270%" y="197" width="0.6364%" height="15" fill="rgb(242,14,37)"/><text x="96.4770%" y="207.50"></text></g><g><title>hir_lowering (948,000 samples, 1.26%)</title><rect x="96.8634%" y="197" width="1.2634%" height="15" fill="rgb(246,228,12)"/><text x="97.1134%" y="207.50"></text></g><g><title>parse_crate (258,093 samples, 0.34%)</title><rect x="98.1868%" y="197" width="0.3440%" height="15" fill="rgb(213,55,15)"/><text x="98.4368%" y="207.50"></text></g><g><title>prepare_outputs (186,072 samples, 0.25%)</title><rect x="98.5418%" y="197" width="0.2480%" height="15" fill="rgb(209,9,3)"/><text x="98.7918%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (527,385 samples, 0.70%)</title><rect x="98.7898%" y="197" width="0.7029%" height="15" fill="rgb(230,59,30)"/><text x="99.0398%" y="207.50"></text></g><g><title>setup_global_ctxt (82,041 samples, 0.11%)</title><rect x="99.5075%" y="197" width="0.1093%" height="15" fill="rgb(209,121,21)"/><text x="99.7575%" y="207.50"></text></g><g><title>all (75,032,666 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (75,032,666 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (287,473 samples, 0.38%)</title><rect x="99.6169%" y="197" width="0.3831%" height="15" fill="rgb(215,41,42)"/><text x="99.8669%" y="207.50"></text></g></svg></svg>