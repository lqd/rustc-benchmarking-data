<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>impl_trait_ref (74,330 samples, 0.31%)</title><rect x="8.9723%" y="133" width="0.3128%" height="15" fill="rgb(227,0,7)"/><text x="9.2223%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (70,120 samples, 0.30%)</title><rect x="8.9901%" y="117" width="0.2950%" height="15" fill="rgb(217,0,24)"/><text x="9.2401%" y="127.50"></text></g><g><title>adt_destructor (140,532 samples, 0.59%)</title><rect x="8.7474%" y="197" width="0.5913%" height="15" fill="rgb(221,193,54)"/><text x="8.9974%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_destructor (138,902 samples, 0.58%)</title><rect x="8.7542%" y="181" width="0.5845%" height="15" fill="rgb(248,212,6)"/><text x="9.0042%" y="191.50"></text></g><g><title>coherent_trait (133,761 samples, 0.56%)</title><rect x="8.7758%" y="165" width="0.5628%" height="15" fill="rgb(208,68,35)"/><text x="9.0258%" y="175.50"></text></g><g><title>specialization_graph_of (130,611 samples, 0.55%)</title><rect x="8.7891%" y="149" width="0.5496%" height="15" fill="rgb(232,128,0)"/><text x="9.0391%" y="159.50"></text></g><g><title>is_sized_raw (46,590 samples, 0.20%)</title><rect x="9.3886%" y="197" width="0.1960%" height="15" fill="rgb(207,160,47)"/><text x="9.6386%" y="207.50"></text></g><g><title>evaluate_obligation (25,170 samples, 0.11%)</title><rect x="9.4787%" y="181" width="0.1059%" height="15" fill="rgb(228,23,34)"/><text x="9.7287%" y="191.50"></text></g><g><title>diagnostic_items (42,700 samples, 0.18%)</title><rect x="11.1559%" y="165" width="0.1797%" height="15" fill="rgb(218,30,26)"/><text x="11.4059%" y="175.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (35,330 samples, 0.15%)</title><rect x="11.1869%" y="149" width="0.1487%" height="15" fill="rgb(220,122,19)"/><text x="11.4369%" y="159.50"></text></g><g><title>is_copy_raw (157,532 samples, 0.66%)</title><rect x="13.7801%" y="133" width="0.6629%" height="15" fill="rgb(250,228,42)"/><text x="14.0301%" y="143.50"></text></g><g><title>evaluate_obligation (148,042 samples, 0.62%)</title><rect x="13.8200%" y="117" width="0.6229%" height="15" fill="rgb(240,193,28)"/><text x="14.0700%" y="127.50"></text></g><g><title>trait_impls_of (93,891 samples, 0.40%)</title><rect x="14.0478%" y="101" width="0.3951%" height="15" fill="rgb(216,20,37)"/><text x="14.2978%" y="111.50"></text></g><g><title>implementations_of_trait (27,811 samples, 0.12%)</title><rect x="14.3259%" y="85" width="0.1170%" height="15" fill="rgb(206,188,39)"/><text x="14.5759%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (25,421 samples, 0.11%)</title><rect x="14.3359%" y="69" width="0.1070%" height="15" fill="rgb(217,207,13)"/><text x="14.5859%" y="79.50"></text></g><g><title>explicit_predicates_of (254,933 samples, 1.07%)</title><rect x="15.5226%" y="53" width="1.0727%" height="15" fill="rgb(231,73,38)"/><text x="15.7726%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (253,363 samples, 1.07%)</title><rect x="15.5292%" y="37" width="1.0661%" height="15" fill="rgb(225,20,46)"/><text x="15.7792%" y="47.50"></text></g><g><title>predicates_of (273,443 samples, 1.15%)</title><rect x="15.4567%" y="85" width="1.1506%" height="15" fill="rgb(210,31,41)"/><text x="15.7067%" y="95.50"></text></g><g><title>predicates_defined_on (263,823 samples, 1.11%)</title><rect x="15.4972%" y="69" width="1.1101%" height="15" fill="rgb(221,200,47)"/><text x="15.7472%" y="79.50"></text></g><g><title>needs_drop_raw (517,596 samples, 2.18%)</title><rect x="14.4429%" y="133" width="2.1779%" height="15" fill="rgb(226,26,5)"/><text x="14.6929%" y="143.50">n..</text></g><g><title>is_copy_raw (485,125 samples, 2.04%)</title><rect x="14.5795%" y="117" width="2.0413%" height="15" fill="rgb(249,33,26)"/><text x="14.8295%" y="127.50">i..</text></g><g><title>evaluate_obligation (457,415 samples, 1.92%)</title><rect x="14.6961%" y="101" width="1.9247%" height="15" fill="rgb(235,183,28)"/><text x="14.9461%" y="111.50">e..</text></g><g><title>thir_body (118,330 samples, 0.50%)</title><rect x="16.6982%" y="133" width="0.4979%" height="15" fill="rgb(221,5,38)"/><text x="16.9482%" y="143.50"></text></g><g><title>mir_const (1,628,938 samples, 6.85%)</title><rect x="10.3549%" y="181" width="6.8541%" height="15" fill="rgb(247,18,42)"/><text x="10.6049%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (1,376,055 samples, 5.79%)</title><rect x="11.4190%" y="165" width="5.7901%" height="15" fill="rgb(241,131,45)"/><text x="11.6690%" y="175.50">unsafet..</text></g><g><title>mir_built (1,263,444 samples, 5.32%)</title><rect x="11.8928%" y="149" width="5.3162%" height="15" fill="rgb(249,31,29)"/><text x="12.1428%" y="159.50">mir_bui..</text></g><g><title>mir_promoted (1,824,991 samples, 7.68%)</title><rect x="9.5847%" y="197" width="7.6790%" height="15" fill="rgb(225,111,53)"/><text x="9.8347%" y="207.50">mir_promoted</text></g><g><title>MIR_borrow_checking (3,483,108 samples, 14.66%)</title><rect x="3.1306%" y="229" width="14.6559%" height="15" fill="rgb(238,160,17)"/><text x="3.3806%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (3,462,408 samples, 14.57%)</title><rect x="3.2177%" y="213" width="14.5688%" height="15" fill="rgb(214,148,48)"/><text x="3.4677%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (124,250 samples, 0.52%)</title><rect x="17.2637%" y="197" width="0.5228%" height="15" fill="rgb(232,36,49)"/><text x="17.5137%" y="207.50"></text></g><g><title>MIR_effect_checking (80,041 samples, 0.34%)</title><rect x="17.7865%" y="229" width="0.3368%" height="15" fill="rgb(209,103,24)"/><text x="18.0365%" y="239.50"></text></g><g><title>lint_levels (54,240 samples, 0.23%)</title><rect x="17.8951%" y="213" width="0.2282%" height="15" fill="rgb(229,88,8)"/><text x="18.1451%" y="223.50"></text></g><g><title>hir_owner (24,200 samples, 0.10%)</title><rect x="18.4533%" y="213" width="0.1018%" height="15" fill="rgb(213,181,19)"/><text x="18.7033%" y="223.50"></text></g><g><title>hir_module_items (103,591 samples, 0.44%)</title><rect x="18.1233%" y="229" width="0.4359%" height="15" fill="rgb(254,191,54)"/><text x="18.3733%" y="239.50"></text></g><g><title>get_lang_items (53,891 samples, 0.23%)</title><rect x="19.2950%" y="181" width="0.2268%" height="15" fill="rgb(241,83,37)"/><text x="19.5450%" y="191.50"></text></g><g><title>associated_item (39,730 samples, 0.17%)</title><rect x="19.6075%" y="165" width="0.1672%" height="15" fill="rgb(233,36,39)"/><text x="19.8575%" y="175.50"></text></g><g><title>should_inherit_track_caller (63,100 samples, 0.27%)</title><rect x="19.5217%" y="181" width="0.2655%" height="15" fill="rgb(226,3,54)"/><text x="19.7717%" y="191.50"></text></g><g><title>codegen_fn_attrs (216,862 samples, 0.91%)</title><rect x="19.0105%" y="197" width="0.9125%" height="15" fill="rgb(245,192,40)"/><text x="19.2605%" y="207.50"></text></g><g><title>supported_target_features (32,271 samples, 0.14%)</title><rect x="19.7872%" y="181" width="0.1358%" height="15" fill="rgb(238,167,29)"/><text x="20.0372%" y="191.50"></text></g><g><title>check_mod_attrs (294,044 samples, 1.24%)</title><rect x="18.6865%" y="213" width="1.2373%" height="15" fill="rgb(232,182,51)"/><text x="18.9365%" y="223.50"></text></g><g><title>check_mod_const_bodies (41,160 samples, 0.17%)</title><rect x="19.9238%" y="213" width="0.1732%" height="15" fill="rgb(231,60,39)"/><text x="20.1738%" y="223.50"></text></g><g><title>lookup_deprecation_entry (29,882 samples, 0.13%)</title><rect x="20.4450%" y="197" width="0.1257%" height="15" fill="rgb(208,69,12)"/><text x="20.6950%" y="207.50"></text></g><g><title>lookup_stability (63,480 samples, 0.27%)</title><rect x="20.5707%" y="197" width="0.2671%" height="15" fill="rgb(235,93,37)"/><text x="20.8207%" y="207.50"></text></g><g><title>stability_index (26,860 samples, 0.11%)</title><rect x="20.7248%" y="181" width="0.1130%" height="15" fill="rgb(213,116,39)"/><text x="20.9748%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (176,712 samples, 0.74%)</title><rect x="20.1746%" y="213" width="0.7436%" height="15" fill="rgb(222,207,29)"/><text x="20.4246%" y="223.50"></text></g><g><title>looking_for_derive_registrar (25,530 samples, 0.11%)</title><rect x="20.9246%" y="213" width="0.1074%" height="15" fill="rgb(206,96,30)"/><text x="21.1746%" y="223.50"></text></g><g><title>misc_checking_1 (590,696 samples, 2.49%)</title><rect x="18.5623%" y="229" width="2.4855%" height="15" fill="rgb(218,138,4)"/><text x="18.8123%" y="239.50">mi..</text></g><g><title>check_mod_intrinsics (62,370 samples, 0.26%)</title><rect x="21.0809%" y="197" width="0.2624%" height="15" fill="rgb(250,191,14)"/><text x="21.3309%" y="207.50"></text></g><g><title>layout_of (31,030 samples, 0.13%)</title><rect x="21.2128%" y="181" width="0.1306%" height="15" fill="rgb(239,60,40)"/><text x="21.4628%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (150,751 samples, 0.63%)</title><rect x="21.0587%" y="213" width="0.6343%" height="15" fill="rgb(206,27,48)"/><text x="21.3087%" y="223.50"></text></g><g><title>check_mod_liveness (83,101 samples, 0.35%)</title><rect x="21.3434%" y="197" width="0.3497%" height="15" fill="rgb(225,35,8)"/><text x="21.5934%" y="207.50"></text></g><g><title>misc_checking_2 (335,273 samples, 1.41%)</title><rect x="21.0477%" y="229" width="1.4107%" height="15" fill="rgb(250,213,24)"/><text x="21.2977%" y="239.50"></text></g><g><title>match_checking (181,912 samples, 0.77%)</title><rect x="21.6930%" y="213" width="0.7654%" height="15" fill="rgb(247,123,22)"/><text x="21.9430%" y="223.50"></text></g><g><title>check_match (173,152 samples, 0.73%)</title><rect x="21.7299%" y="197" width="0.7286%" height="15" fill="rgb(231,138,38)"/><text x="21.9799%" y="207.50"></text></g><g><title>check_private_in_public (55,611 samples, 0.23%)</title><rect x="22.5057%" y="213" width="0.2340%" height="15" fill="rgb(231,145,46)"/><text x="22.7557%" y="223.50"></text></g><g><title>death_checking (88,531 samples, 0.37%)</title><rect x="22.7397%" y="213" width="0.3725%" height="15" fill="rgb(251,118,11)"/><text x="22.9897%" y="223.50"></text></g><g><title>crate_lints (179,502 samples, 0.76%)</title><rect x="23.1246%" y="197" width="0.7553%" height="15" fill="rgb(217,147,25)"/><text x="23.3746%" y="207.50"></text></g><g><title>param_env (83,621 samples, 0.35%)</title><rect x="23.5280%" y="181" width="0.3519%" height="15" fill="rgb(247,81,37)"/><text x="23.7780%" y="191.50"></text></g><g><title>predicates_of (39,360 samples, 0.17%)</title><rect x="23.7142%" y="165" width="0.1656%" height="15" fill="rgb(209,12,38)"/><text x="23.9642%" y="175.50"></text></g><g><title>predicates_defined_on (33,190 samples, 0.14%)</title><rect x="23.7402%" y="149" width="0.1397%" height="15" fill="rgb(227,1,9)"/><text x="23.9902%" y="159.50"></text></g><g><title>lint_checking (241,273 samples, 1.02%)</title><rect x="23.1122%" y="213" width="1.0152%" height="15" fill="rgb(248,47,43)"/><text x="23.3622%" y="223.50"></text></g><g><title>module_lints (58,831 samples, 0.25%)</title><rect x="23.8799%" y="197" width="0.2475%" height="15" fill="rgb(221,10,30)"/><text x="24.1299%" y="207.50"></text></g><g><title>lint_mod (55,211 samples, 0.23%)</title><rect x="23.8951%" y="181" width="0.2323%" height="15" fill="rgb(210,229,1)"/><text x="24.1451%" y="191.50"></text></g><g><title>privacy_access_levels (70,951 samples, 0.30%)</title><rect x="24.1274%" y="213" width="0.2985%" height="15" fill="rgb(222,148,37)"/><text x="24.3774%" y="223.50"></text></g><g><title>privacy_checking_modules (81,521 samples, 0.34%)</title><rect x="24.4259%" y="213" width="0.3430%" height="15" fill="rgb(234,67,33)"/><text x="24.6759%" y="223.50"></text></g><g><title>check_mod_privacy (79,381 samples, 0.33%)</title><rect x="24.4349%" y="197" width="0.3340%" height="15" fill="rgb(247,98,35)"/><text x="24.6849%" y="207.50"></text></g><g><title>misc_checking_3 (558,767 samples, 2.35%)</title><rect x="22.4585%" y="229" width="2.3511%" height="15" fill="rgb(247,138,52)"/><text x="22.7085%" y="239.50">m..</text></g><g><title>coherent_trait (96,471 samples, 0.41%)</title><rect x="25.0217%" y="197" width="0.4059%" height="15" fill="rgb(213,79,30)"/><text x="25.2717%" y="207.50"></text></g><g><title>specialization_graph_of (88,981 samples, 0.37%)</title><rect x="25.0532%" y="181" width="0.3744%" height="15" fill="rgb(246,177,23)"/><text x="25.3032%" y="191.50"></text></g><g><title>orphan_check_crate (27,550 samples, 0.12%)</title><rect x="25.4617%" y="197" width="0.1159%" height="15" fill="rgb(230,62,27)"/><text x="25.7117%" y="207.50"></text></g><g><title>coherence_checking (156,762 samples, 0.66%)</title><rect x="24.9537%" y="213" width="0.6596%" height="15" fill="rgb(216,154,8)"/><text x="25.2037%" y="223.50"></text></g><g><title>adt_def (60,231 samples, 0.25%)</title><rect x="31.3422%" y="165" width="0.2534%" height="15" fill="rgb(244,35,45)"/><text x="31.5922%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (58,731 samples, 0.25%)</title><rect x="31.3485%" y="149" width="0.2471%" height="15" fill="rgb(251,115,12)"/><text x="31.5985%" y="159.50"></text></g><g><title>item_attrs (26,720 samples, 0.11%)</title><rect x="31.4832%" y="133" width="0.1124%" height="15" fill="rgb(240,54,50)"/><text x="31.7332%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (24,850 samples, 0.10%)</title><rect x="31.4910%" y="117" width="0.1046%" height="15" fill="rgb(233,84,52)"/><text x="31.7410%" y="127.50"></text></g><g><title>dropck_outlives (37,551 samples, 0.16%)</title><rect x="31.6239%" y="165" width="0.1580%" height="15" fill="rgb(207,117,47)"/><text x="31.8739%" y="175.50"></text></g><g><title>evaluate_obligation (104,621 samples, 0.44%)</title><rect x="31.7819%" y="165" width="0.4402%" height="15" fill="rgb(249,43,39)"/><text x="32.0319%" y="175.50"></text></g><g><title>fn_sig (27,760 samples, 0.12%)</title><rect x="32.2221%" y="165" width="0.1168%" height="15" fill="rgb(209,38,44)"/><text x="32.4721%" y="175.50"></text></g><g><title>item_attrs (143,871 samples, 0.61%)</title><rect x="32.4077%" y="165" width="0.6054%" height="15" fill="rgb(236,212,23)"/><text x="32.6577%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (141,261 samples, 0.59%)</title><rect x="32.4187%" y="149" width="0.5944%" height="15" fill="rgb(242,79,21)"/><text x="32.6687%" y="159.50"></text></g><g><title>predicates_of (44,810 samples, 0.19%)</title><rect x="33.1107%" y="165" width="0.1885%" height="15" fill="rgb(211,96,35)"/><text x="33.3607%" y="175.50"></text></g><g><title>predicates_defined_on (31,340 samples, 0.13%)</title><rect x="33.1674%" y="149" width="0.1319%" height="15" fill="rgb(253,215,40)"/><text x="33.4174%" y="159.50"></text></g><g><title>type_of (43,612 samples, 0.18%)</title><rect x="33.4135%" y="165" width="0.1835%" height="15" fill="rgb(211,81,21)"/><text x="33.6635%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (30,562 samples, 0.13%)</title><rect x="33.4684%" y="149" width="0.1286%" height="15" fill="rgb(208,190,38)"/><text x="33.7184%" y="159.50"></text></g><g><title>item_bodies_checking (1,895,421 samples, 7.98%)</title><rect x="25.7088%" y="213" width="7.9754%" height="15" fill="rgb(235,213,38)"/><text x="25.9588%" y="223.50">item_bodies..</text></g><g><title>typeck_item_bodies (1,892,331 samples, 7.96%)</title><rect x="25.7218%" y="197" width="7.9624%" height="15" fill="rgb(237,122,38)"/><text x="25.9718%" y="207.50">typeck_item..</text></g><g><title>typeck (1,876,801 samples, 7.90%)</title><rect x="25.7872%" y="181" width="7.8970%" height="15" fill="rgb(244,218,35)"/><text x="26.0372%" y="191.50">typeck</text></g><g><title>item_types_checking (166,072 samples, 0.70%)</title><rect x="33.6842%" y="213" width="0.6988%" height="15" fill="rgb(240,68,47)"/><text x="33.9342%" y="223.50"></text></g><g><title>check_mod_item_types (162,752 samples, 0.68%)</title><rect x="33.6982%" y="197" width="0.6848%" height="15" fill="rgb(210,16,53)"/><text x="33.9482%" y="207.50"></text></g><g><title>fn_sig (155,330 samples, 0.65%)</title><rect x="34.8315%" y="181" width="0.6536%" height="15" fill="rgb(235,124,12)"/><text x="35.0815%" y="191.50"></text></g><g><title>late_bound_vars_map (106,790 samples, 0.45%)</title><rect x="35.0357%" y="165" width="0.4493%" height="15" fill="rgb(224,169,11)"/><text x="35.2857%" y="175.50"></text></g><g><title>resolve_lifetimes (83,650 samples, 0.35%)</title><rect x="35.1331%" y="149" width="0.3520%" height="15" fill="rgb(250,166,2)"/><text x="35.3831%" y="159.50"></text></g><g><title>generics_of (73,662 samples, 0.31%)</title><rect x="35.4851%" y="181" width="0.3099%" height="15" fill="rgb(242,216,29)"/><text x="35.7351%" y="191.50"></text></g><g><title>explicit_predicates_of (111,492 samples, 0.47%)</title><rect x="35.9985%" y="149" width="0.4691%" height="15" fill="rgb(230,116,27)"/><text x="36.2485%" y="159.50"></text></g><g><title>trait_explicit_predicates_and_bounds (36,211 samples, 0.15%)</title><rect x="36.3152%" y="133" width="0.1524%" height="15" fill="rgb(228,99,48)"/><text x="36.5652%" y="143.50"></text></g><g><title>predicates_of (154,843 samples, 0.65%)</title><rect x="35.8308%" y="181" width="0.6515%" height="15" fill="rgb(253,11,6)"/><text x="36.0808%" y="191.50"></text></g><g><title>predicates_defined_on (139,233 samples, 0.59%)</title><rect x="35.8965%" y="165" width="0.5859%" height="15" fill="rgb(247,143,39)"/><text x="36.1465%" y="175.50"></text></g><g><title>super_predicates_of (31,720 samples, 0.13%)</title><rect x="36.4823%" y="181" width="0.1335%" height="15" fill="rgb(236,97,10)"/><text x="36.7323%" y="191.50"></text></g><g><title>type_collecting (632,107 samples, 2.66%)</title><rect x="34.3885%" y="213" width="2.6597%" height="15" fill="rgb(233,208,19)"/><text x="34.6385%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (622,457 samples, 2.62%)</title><rect x="34.4291%" y="197" width="2.6191%" height="15" fill="rgb(216,164,2)"/><text x="34.6791%" y="207.50">co..</text></g><g><title>type_of (99,981 samples, 0.42%)</title><rect x="36.6275%" y="181" width="0.4207%" height="15" fill="rgb(220,129,5)"/><text x="36.8775%" y="191.50"></text></g><g><title>type_of (43,510 samples, 0.18%)</title><rect x="36.8651%" y="165" width="0.1831%" height="15" fill="rgb(242,17,10)"/><text x="37.1151%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (41,420 samples, 0.17%)</title><rect x="36.8739%" y="149" width="0.1743%" height="15" fill="rgb(242,107,0)"/><text x="37.1239%" y="159.50"></text></g><g><title>param_env (51,251 samples, 0.22%)</title><rect x="38.0048%" y="181" width="0.2156%" height="15" fill="rgb(251,28,31)"/><text x="38.2548%" y="191.50"></text></g><g><title>check_impl_item_well_formed (266,944 samples, 1.12%)</title><rect x="37.2449%" y="197" width="1.1232%" height="15" fill="rgb(233,223,10)"/><text x="37.4949%" y="207.50"></text></g><g><title>region_scope_tree (35,081 samples, 0.15%)</title><rect x="38.2205%" y="181" width="0.1476%" height="15" fill="rgb(215,21,27)"/><text x="38.4705%" y="191.50"></text></g><g><title>implied_outlives_bounds (103,811 samples, 0.44%)</title><rect x="40.8831%" y="181" width="0.4368%" height="15" fill="rgb(232,23,21)"/><text x="41.1331%" y="191.50"></text></g><g><title>param_env (232,993 samples, 0.98%)</title><rect x="41.3199%" y="181" width="0.9804%" height="15" fill="rgb(244,5,23)"/><text x="41.5699%" y="191.50"></text></g><g><title>explicit_predicates_of (27,700 samples, 0.12%)</title><rect x="42.4424%" y="149" width="0.1166%" height="15" fill="rgb(226,81,46)"/><text x="42.6924%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (23,870 samples, 0.10%)</title><rect x="42.4585%" y="133" width="0.1004%" height="15" fill="rgb(247,70,30)"/><text x="42.7085%" y="143.50"></text></g><g><title>predicates_of (78,282 samples, 0.33%)</title><rect x="42.3003%" y="181" width="0.3294%" height="15" fill="rgb(212,68,19)"/><text x="42.5503%" y="191.50"></text></g><g><title>predicates_defined_on (55,641 samples, 0.23%)</title><rect x="42.3956%" y="165" width="0.2341%" height="15" fill="rgb(240,187,13)"/><text x="42.6456%" y="175.50"></text></g><g><title>check_item_well_formed (1,033,621 samples, 4.35%)</title><rect x="38.3681%" y="197" width="4.3492%" height="15" fill="rgb(223,113,26)"/><text x="38.6181%" y="207.50">check..</text></g><g><title>implied_outlives_bounds (25,710 samples, 0.11%)</title><rect x="43.6254%" y="181" width="0.1082%" height="15" fill="rgb(206,192,2)"/><text x="43.8754%" y="191.50"></text></g><g><title>param_env (53,231 samples, 0.22%)</title><rect x="43.7336%" y="181" width="0.2240%" height="15" fill="rgb(241,108,4)"/><text x="43.9836%" y="191.50"></text></g><g><title>analysis (9,843,330 samples, 41.42%)</title><rect x="2.5499%" y="245" width="41.4180%" height="15" fill="rgb(247,173,49)"/><text x="2.7999%" y="255.50">analysis</text></g><g><title>type_check_crate (4,553,131 samples, 19.16%)</title><rect x="24.8096%" y="229" width="19.1583%" height="15" fill="rgb(224,114,35)"/><text x="25.0596%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,643,078 samples, 6.91%)</title><rect x="37.0543%" y="213" width="6.9136%" height="15" fill="rgb(245,159,27)"/><text x="37.3043%" y="223.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (297,223 samples, 1.25%)</title><rect x="42.7173%" y="197" width="1.2506%" height="15" fill="rgb(245,172,44)"/><text x="42.9673%" y="207.50"></text></g><g><title>codegen_crate (508,156 samples, 2.14%)</title><rect x="44.0075%" y="245" width="2.1382%" height="15" fill="rgb(236,23,11)"/><text x="44.2575%" y="255.50">c..</text></g><g><title>AST_validation (71,661 samples, 0.30%)</title><rect x="47.0815%" y="229" width="0.3015%" height="15" fill="rgb(205,117,38)"/><text x="47.3315%" y="239.50"></text></g><g><title>crate_injection (75,591 samples, 0.32%)</title><rect x="47.4494%" y="229" width="0.3181%" height="15" fill="rgb(237,72,25)"/><text x="47.6994%" y="239.50"></text></g><g><title>metadata_load_macro (33,721 samples, 0.14%)</title><rect x="73.8583%" y="197" width="0.1419%" height="15" fill="rgb(244,70,9)"/><text x="74.1083%" y="207.50"></text></g><g><title>macro_expand_crate (6,430,691 samples, 27.06%)</title><rect x="47.7675%" y="229" width="27.0585%" height="15" fill="rgb(217,125,39)"/><text x="48.0175%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (6,409,801 samples, 26.97%)</title><rect x="47.8554%" y="213" width="26.9706%" height="15" fill="rgb(235,36,10)"/><text x="48.1054%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (196,272 samples, 0.83%)</title><rect x="74.0001%" y="197" width="0.8259%" height="15" fill="rgb(251,123,47)"/><text x="74.2501%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (95,931 samples, 0.40%)</title><rect x="74.8459%" y="229" width="0.4037%" height="15" fill="rgb(221,13,13)"/><text x="75.0959%" y="239.50"></text></g><g><title>finalize_macro_resolutions (261,193 samples, 1.10%)</title><rect x="75.3605%" y="213" width="1.0990%" height="15" fill="rgb(238,131,9)"/><text x="75.6105%" y="223.50"></text></g><g><title>late_resolve_crate (457,355 samples, 1.92%)</title><rect x="76.4595%" y="213" width="1.9244%" height="15" fill="rgb(211,50,8)"/><text x="76.7095%" y="223.50">l..</text></g><g><title>configure_and_expand (7,705,776 samples, 32.42%)</title><rect x="46.1457%" y="245" width="32.4237%" height="15" fill="rgb(245,182,24)"/><text x="46.3957%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (789,009 samples, 3.32%)</title><rect x="75.2495%" y="229" width="3.3199%" height="15" fill="rgb(242,14,37)"/><text x="75.4995%" y="239.50">res..</text></g><g><title>drop_ast (53,611 samples, 0.23%)</title><rect x="78.5694%" y="245" width="0.2256%" height="15" fill="rgb(246,228,12)"/><text x="78.8194%" y="255.50"></text></g><g><title>drop_compiler (25,390 samples, 0.11%)</title><rect x="78.7950%" y="245" width="0.1068%" height="15" fill="rgb(213,55,15)"/><text x="79.0450%" y="255.50"></text></g><g><title>early_lint_checks (108,951 samples, 0.46%)</title><rect x="78.9018%" y="245" width="0.4584%" height="15" fill="rgb(209,9,3)"/><text x="79.1518%" y="255.50"></text></g><g><title>free_global_ctxt (1,242,694 samples, 5.23%)</title><rect x="79.3603%" y="245" width="5.2289%" height="15" fill="rgb(230,59,30)"/><text x="79.6103%" y="255.50">free_g..</text></g><g><title>crate_hash (122,731 samples, 0.52%)</title><rect x="86.0557%" y="229" width="0.5164%" height="15" fill="rgb(209,121,21)"/><text x="86.3057%" y="239.50"></text></g><g><title>mir_keys (28,430 samples, 0.12%)</title><rect x="86.7471%" y="229" width="0.1196%" height="15" fill="rgb(220,109,13)"/><text x="86.9971%" y="239.50"></text></g><g><title>variances_of (41,390 samples, 0.17%)</title><rect x="86.9181%" y="229" width="0.1742%" height="15" fill="rgb(232,18,1)"/><text x="87.1681%" y="239.50"></text></g><g><title>crate_variances (35,050 samples, 0.15%)</title><rect x="86.9448%" y="213" width="0.1475%" height="15" fill="rgb(215,41,42)"/><text x="87.1948%" y="223.50"></text></g><g><title>generate_crate_metadata (595,276 samples, 2.50%)</title><rect x="84.5892%" y="245" width="2.5048%" height="15" fill="rgb(224,123,36)"/><text x="84.8392%" y="255.50">ge..</text></g><g><title>hir_lowering (618,707 samples, 2.60%)</title><rect x="87.0939%" y="245" width="2.6033%" height="15" fill="rgb(240,125,3)"/><text x="87.3439%" y="255.50">hi..</text></g><g><title>link (62,241 samples, 0.26%)</title><rect x="89.6973%" y="245" width="0.2619%" height="15" fill="rgb(205,98,50)"/><text x="89.9473%" y="255.50"></text></g><g><title>parse_crate (886,250 samples, 3.73%)</title><rect x="89.9592%" y="245" width="3.7291%" height="15" fill="rgb(205,185,37)"/><text x="90.2092%" y="255.50">pars..</text></g><g><title>prepare_outputs (307,083 samples, 1.29%)</title><rect x="93.7241%" y="245" width="1.2921%" height="15" fill="rgb(238,207,15)"/><text x="93.9741%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (538,806 samples, 2.27%)</title><rect x="95.0162%" y="245" width="2.2671%" height="15" fill="rgb(213,199,42)"/><text x="95.2662%" y="255.50">s..</text></g><g><title>setup_global_ctxt (123,612 samples, 0.52%)</title><rect x="97.3456%" y="245" width="0.5201%" height="15" fill="rgb(235,201,11)"/><text x="97.5956%" y="255.50"></text></g><g><title>all (23,765,854 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (23,765,854 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (507,236 samples, 2.13%)</title><rect x="97.8657%" y="245" width="2.1343%" height="15" fill="rgb(243,32,47)"/><text x="98.1157%" y="255.50">w..</text></g></svg></svg>