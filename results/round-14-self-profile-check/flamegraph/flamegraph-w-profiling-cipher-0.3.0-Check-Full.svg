<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (193,512 samples, 0.15%)</title><rect x="10.5417%" y="85" width="0.1492%" height="15" fill="rgb(227,0,7)"/><text x="10.7917%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (186,392 samples, 0.14%)</title><rect x="10.5472%" y="69" width="0.1437%" height="15" fill="rgb(217,0,24)"/><text x="10.7972%" y="79.50"></text></g><g><title>codegen_fn_attrs (283,132 samples, 0.22%)</title><rect x="10.4858%" y="101" width="0.2183%" height="15" fill="rgb(221,193,54)"/><text x="10.7358%" y="111.50"></text></g><g><title>is_copy_raw (263,822 samples, 0.20%)</title><rect x="12.8353%" y="85" width="0.2034%" height="15" fill="rgb(248,212,6)"/><text x="13.0853%" y="95.50"></text></g><g><title>evaluate_obligation (201,612 samples, 0.16%)</title><rect x="12.8833%" y="69" width="0.1554%" height="15" fill="rgb(208,68,35)"/><text x="13.1333%" y="79.50"></text></g><g><title>adt_drop_tys (134,972 samples, 0.10%)</title><rect x="13.2101%" y="69" width="0.1041%" height="15" fill="rgb(232,128,0)"/><text x="13.4601%" y="79.50"></text></g><g><title>is_copy_raw (1,673,913 samples, 1.29%)</title><rect x="13.3141%" y="69" width="1.2905%" height="15" fill="rgb(207,160,47)"/><text x="13.5641%" y="79.50"></text></g><g><title>evaluate_obligation (1,441,560 samples, 1.11%)</title><rect x="13.4933%" y="53" width="1.1114%" height="15" fill="rgb(228,23,34)"/><text x="13.7433%" y="63.50"></text></g><g><title>needs_drop_raw (2,020,567 samples, 1.56%)</title><rect x="13.0523%" y="85" width="1.5578%" height="15" fill="rgb(218,30,26)"/><text x="13.3023%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (457,182 samples, 0.35%)</title><rect x="14.7734%" y="69" width="0.3525%" height="15" fill="rgb(220,122,19)"/><text x="15.0234%" y="79.50"></text></g><g><title>specialization_graph_of (397,973 samples, 0.31%)</title><rect x="15.1427%" y="69" width="0.3068%" height="15" fill="rgb(250,228,42)"/><text x="15.3927%" y="79.50"></text></g><g><title>impl_trait_ref (195,811 samples, 0.15%)</title><rect x="15.2986%" y="53" width="0.1510%" height="15" fill="rgb(240,193,28)"/><text x="15.5486%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (172,181 samples, 0.13%)</title><rect x="15.3168%" y="37" width="0.1327%" height="15" fill="rgb(216,20,37)"/><text x="15.5668%" y="47.50"></text></g><g><title>resolve_instance (1,148,119 samples, 0.89%)</title><rect x="14.6100%" y="85" width="0.8852%" height="15" fill="rgb(206,188,39)"/><text x="14.8600%" y="95.50"></text></g><g><title>thir_body (898,924 samples, 0.69%)</title><rect x="15.5147%" y="85" width="0.6930%" height="15" fill="rgb(217,207,13)"/><text x="15.7647%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (181,501 samples, 0.14%)</title><rect x="16.2191%" y="85" width="0.1399%" height="15" fill="rgb(231,73,38)"/><text x="16.4691%" y="95.50"></text></g><g><title>mir_const (8,994,283 samples, 6.93%)</title><rect x="9.4314%" y="133" width="6.9343%" height="15" fill="rgb(225,20,46)"/><text x="9.6814%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,055,784 samples, 6.21%)</title><rect x="10.1550%" y="117" width="6.2108%" height="15" fill="rgb(210,31,41)"/><text x="10.4050%" y="127.50">unsafety..</text></g><g><title>mir_built (7,343,637 samples, 5.66%)</title><rect x="10.7040%" y="101" width="5.6617%" height="15" fill="rgb(221,200,47)"/><text x="10.9540%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (9,729,183 samples, 7.50%)</title><rect x="8.8944%" y="149" width="7.5009%" height="15" fill="rgb(226,26,5)"/><text x="9.1444%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (508,386 samples, 0.39%)</title><rect x="16.3953%" y="149" width="0.3919%" height="15" fill="rgb(249,33,26)"/><text x="16.6453%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,258,508 samples, 0.97%)</title><rect x="16.7872%" y="149" width="0.9703%" height="15" fill="rgb(235,183,28)"/><text x="17.0372%" y="159.50"></text></g><g><title>normalize_projection_ty (774,072 samples, 0.60%)</title><rect x="17.1607%" y="133" width="0.5968%" height="15" fill="rgb(221,5,38)"/><text x="17.4107%" y="143.50"></text></g><g><title>type_op_normalize_predicate (542,295 samples, 0.42%)</title><rect x="17.7575%" y="149" width="0.4181%" height="15" fill="rgb(247,18,42)"/><text x="18.0075%" y="159.50"></text></g><g><title>normalize_projection_ty (222,572 samples, 0.17%)</title><rect x="18.0040%" y="133" width="0.1716%" height="15" fill="rgb(241,131,45)"/><text x="18.2540%" y="143.50"></text></g><g><title>type_op_normalize_ty (600,828 samples, 0.46%)</title><rect x="18.1756%" y="149" width="0.4632%" height="15" fill="rgb(249,31,29)"/><text x="18.4256%" y="159.50"></text></g><g><title>normalize_projection_ty (177,754 samples, 0.14%)</title><rect x="18.5018%" y="133" width="0.1370%" height="15" fill="rgb(225,111,53)"/><text x="18.7518%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,367,061 samples, 2.60%)</title><rect x="18.6388%" y="149" width="2.5959%" height="15" fill="rgb(238,160,17)"/><text x="18.8888%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (26,017,527 samples, 20.06%)</title><rect x="1.1771%" y="181" width="20.0587%" height="15" fill="rgb(214,148,48)"/><text x="1.4271%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,904,175 samples, 19.97%)</title><rect x="1.2645%" y="165" width="19.9713%" height="15" fill="rgb(232,36,49)"/><text x="1.5145%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (342,923 samples, 0.26%)</title><rect x="21.2550%" y="181" width="0.2644%" height="15" fill="rgb(209,103,24)"/><text x="21.5050%" y="191.50"></text></g><g><title>should_inherit_track_caller (329,093 samples, 0.25%)</title><rect x="22.1257%" y="133" width="0.2537%" height="15" fill="rgb(229,88,8)"/><text x="22.3757%" y="143.50"></text></g><g><title>codegen_fn_attrs (600,717 samples, 0.46%)</title><rect x="21.9398%" y="149" width="0.4631%" height="15" fill="rgb(213,181,19)"/><text x="22.1898%" y="159.50"></text></g><g><title>check_mod_attrs (1,092,732 samples, 0.84%)</title><rect x="21.5606%" y="165" width="0.8425%" height="15" fill="rgb(254,191,54)"/><text x="21.8106%" y="175.50"></text></g><g><title>check_mod_const_bodies (228,034 samples, 0.18%)</title><rect x="22.4030%" y="165" width="0.1758%" height="15" fill="rgb(241,83,37)"/><text x="22.6530%" y="175.50"></text></g><g><title>check_mod_loops (132,000 samples, 0.10%)</title><rect x="22.5788%" y="165" width="0.1018%" height="15" fill="rgb(233,36,39)"/><text x="22.8288%" y="175.50"></text></g><g><title>lookup_deprecation_entry (291,373 samples, 0.22%)</title><rect x="22.9240%" y="149" width="0.2246%" height="15" fill="rgb(226,3,54)"/><text x="23.1740%" y="159.50"></text></g><g><title>stability_index (215,692 samples, 0.17%)</title><rect x="22.9824%" y="133" width="0.1663%" height="15" fill="rgb(245,192,40)"/><text x="23.2324%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (652,557 samples, 0.50%)</title><rect x="22.7094%" y="165" width="0.5031%" height="15" fill="rgb(238,167,29)"/><text x="22.9594%" y="175.50"></text></g><g><title>misc_checking_1 (2,305,636 samples, 1.78%)</title><rect x="21.5196%" y="181" width="1.7776%" height="15" fill="rgb(232,182,51)"/><text x="21.7696%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (451,325 samples, 0.35%)</title><rect x="23.2984%" y="165" width="0.3480%" height="15" fill="rgb(231,60,39)"/><text x="23.5484%" y="175.50"></text></g><g><title>check_mod_liveness (373,874 samples, 0.29%)</title><rect x="23.3581%" y="149" width="0.2882%" height="15" fill="rgb(208,69,12)"/><text x="23.6081%" y="159.50"></text></g><g><title>misc_checking_2 (1,065,992 samples, 0.82%)</title><rect x="23.2972%" y="181" width="0.8218%" height="15" fill="rgb(235,93,37)"/><text x="23.5472%" y="191.50"></text></g><g><title>match_checking (613,127 samples, 0.47%)</title><rect x="23.6463%" y="165" width="0.4727%" height="15" fill="rgb(213,116,39)"/><text x="23.8963%" y="175.50"></text></g><g><title>check_match (583,557 samples, 0.45%)</title><rect x="23.6691%" y="149" width="0.4499%" height="15" fill="rgb(222,207,29)"/><text x="23.9191%" y="159.50"></text></g><g><title>check_private_in_public (165,892 samples, 0.13%)</title><rect x="24.1263%" y="165" width="0.1279%" height="15" fill="rgb(206,96,30)"/><text x="24.3763%" y="175.50"></text></g><g><title>codegen_fn_attrs (293,343 samples, 0.23%)</title><rect x="24.4344%" y="149" width="0.2262%" height="15" fill="rgb(218,138,4)"/><text x="24.6844%" y="159.50"></text></g><g><title>should_inherit_track_caller (253,603 samples, 0.20%)</title><rect x="24.4651%" y="133" width="0.1955%" height="15" fill="rgb(250,191,14)"/><text x="24.7151%" y="143.50"></text></g><g><title>death_checking (599,427 samples, 0.46%)</title><rect x="24.2542%" y="165" width="0.4621%" height="15" fill="rgb(239,60,40)"/><text x="24.5042%" y="175.50"></text></g><g><title>param_env (272,163 samples, 0.21%)</title><rect x="25.0542%" y="133" width="0.2098%" height="15" fill="rgb(206,27,48)"/><text x="25.3042%" y="143.50"></text></g><g><title>predicates_of (134,921 samples, 0.10%)</title><rect x="25.1600%" y="117" width="0.1040%" height="15" fill="rgb(225,35,8)"/><text x="25.4100%" y="127.50"></text></g><g><title>crate_lints (1,063,272 samples, 0.82%)</title><rect x="24.7173%" y="149" width="0.8197%" height="15" fill="rgb(250,213,24)"/><text x="24.9673%" y="159.50"></text></g><g><title>type_of (344,104 samples, 0.27%)</title><rect x="25.2718%" y="133" width="0.2653%" height="15" fill="rgb(247,123,22)"/><text x="25.5218%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (264,092 samples, 0.20%)</title><rect x="25.3334%" y="117" width="0.2036%" height="15" fill="rgb(231,138,38)"/><text x="25.5834%" y="127.50"></text></g><g><title>lint_checking (1,374,895 samples, 1.06%)</title><rect x="24.7163%" y="165" width="1.0600%" height="15" fill="rgb(231,145,46)"/><text x="24.9663%" y="175.50"></text></g><g><title>module_lints (310,333 samples, 0.24%)</title><rect x="25.5371%" y="149" width="0.2393%" height="15" fill="rgb(251,118,11)"/><text x="25.7871%" y="159.50"></text></g><g><title>lint_mod (305,493 samples, 0.24%)</title><rect x="25.5408%" y="133" width="0.2355%" height="15" fill="rgb(217,147,25)"/><text x="25.7908%" y="143.50"></text></g><g><title>privacy_access_levels (231,402 samples, 0.18%)</title><rect x="25.7763%" y="165" width="0.1784%" height="15" fill="rgb(247,81,37)"/><text x="26.0263%" y="175.50"></text></g><g><title>privacy_checking_modules (756,039 samples, 0.58%)</title><rect x="25.9547%" y="165" width="0.5829%" height="15" fill="rgb(209,12,38)"/><text x="26.2047%" y="175.50"></text></g><g><title>check_mod_privacy (751,759 samples, 0.58%)</title><rect x="25.9580%" y="149" width="0.5796%" height="15" fill="rgb(227,1,9)"/><text x="26.2080%" y="159.50"></text></g><g><title>misc_checking_3 (3,151,745 samples, 2.43%)</title><rect x="24.1190%" y="181" width="2.4299%" height="15" fill="rgb(248,47,43)"/><text x="24.3690%" y="191.50">mi..</text></g><g><title>adt_destructor (172,482 samples, 0.13%)</title><rect x="26.6562%" y="133" width="0.1330%" height="15" fill="rgb(221,10,30)"/><text x="26.9062%" y="143.50"></text></g><g><title>coherent_trait (162,392 samples, 0.13%)</title><rect x="26.6639%" y="117" width="0.1252%" height="15" fill="rgb(210,229,1)"/><text x="26.9139%" y="127.50"></text></g><g><title>specialization_graph_of (160,562 samples, 0.12%)</title><rect x="26.6653%" y="101" width="0.1238%" height="15" fill="rgb(222,148,37)"/><text x="26.9153%" y="111.50"></text></g><g><title>impl_parent (954,395 samples, 0.74%)</title><rect x="28.1919%" y="117" width="0.7358%" height="15" fill="rgb(234,67,33)"/><text x="28.4419%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (525,547 samples, 0.41%)</title><rect x="28.5225%" y="101" width="0.4052%" height="15" fill="rgb(247,98,35)"/><text x="28.7725%" y="111.50"></text></g><g><title>impl_trait_ref (2,594,918 samples, 2.00%)</title><rect x="28.9277%" y="117" width="2.0006%" height="15" fill="rgb(247,138,52)"/><text x="29.1777%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,167,773 samples, 1.67%)</title><rect x="29.2570%" y="101" width="1.6713%" height="15" fill="rgb(213,79,30)"/><text x="29.5070%" y="111.50"></text></g><g><title>trait_impls_of (386,975 samples, 0.30%)</title><rect x="30.9540%" y="117" width="0.2983%" height="15" fill="rgb(246,177,23)"/><text x="31.2040%" y="127.50"></text></g><g><title>coherent_trait (6,005,175 samples, 4.63%)</title><rect x="26.6236%" y="149" width="4.6298%" height="15" fill="rgb(230,62,27)"/><text x="26.8736%" y="159.50">coher..</text></g><g><title>specialization_graph_of (5,732,503 samples, 4.42%)</title><rect x="26.8338%" y="133" width="4.4196%" height="15" fill="rgb(216,154,8)"/><text x="27.0838%" y="143.50">speci..</text></g><g><title>coherence_checking (6,120,747 samples, 4.72%)</title><rect x="26.6045%" y="165" width="4.7189%" height="15" fill="rgb(244,35,45)"/><text x="26.8545%" y="175.50">coher..</text></g><g><title>associated_item (192,165 samples, 0.15%)</title><rect x="38.9582%" y="101" width="0.1482%" height="15" fill="rgb(251,115,12)"/><text x="39.2082%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (151,042 samples, 0.12%)</title><rect x="38.9899%" y="85" width="0.1164%" height="15" fill="rgb(240,54,50)"/><text x="39.2399%" y="95.50"></text></g><g><title>associated_items (279,966 samples, 0.22%)</title><rect x="38.9021%" y="117" width="0.2158%" height="15" fill="rgb(233,84,52)"/><text x="39.1521%" y="127.50"></text></g><g><title>dropck_outlives (255,863 samples, 0.20%)</title><rect x="39.1358%" y="117" width="0.1973%" height="15" fill="rgb(207,117,47)"/><text x="39.3858%" y="127.50"></text></g><g><title>evaluate_obligation (655,224 samples, 0.51%)</title><rect x="39.3331%" y="117" width="0.5052%" height="15" fill="rgb(249,43,39)"/><text x="39.5831%" y="127.50"></text></g><g><title>evaluate_obligation (209,751 samples, 0.16%)</title><rect x="40.2768%" y="101" width="0.1617%" height="15" fill="rgb(209,38,44)"/><text x="40.5268%" y="111.50"></text></g><g><title>method_autoderef_steps (430,782 samples, 0.33%)</title><rect x="40.1146%" y="117" width="0.3321%" height="15" fill="rgb(236,212,23)"/><text x="40.3646%" y="127.50"></text></g><g><title>predicates_of (226,011 samples, 0.17%)</title><rect x="40.4754%" y="117" width="0.1742%" height="15" fill="rgb(242,79,21)"/><text x="40.7254%" y="127.50"></text></g><g><title>predicates_defined_on (170,961 samples, 0.13%)</title><rect x="40.5178%" y="101" width="0.1318%" height="15" fill="rgb(211,96,35)"/><text x="40.7678%" y="111.50"></text></g><g><title>associated_item (711,281 samples, 0.55%)</title><rect x="49.4616%" y="85" width="0.5484%" height="15" fill="rgb(253,215,40)"/><text x="49.7116%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (558,339 samples, 0.43%)</title><rect x="49.5795%" y="69" width="0.4305%" height="15" fill="rgb(211,81,21)"/><text x="49.8295%" y="79.50"></text></g><g><title>associated_items (963,412 samples, 0.74%)</title><rect x="49.2897%" y="101" width="0.7428%" height="15" fill="rgb(208,190,38)"/><text x="49.5397%" y="111.50"></text></g><g><title>dropck_outlives (323,884 samples, 0.25%)</title><rect x="50.0492%" y="101" width="0.2497%" height="15" fill="rgb(235,213,38)"/><text x="50.2992%" y="111.50"></text></g><g><title>impl_item_implementor_ids (164,510 samples, 0.13%)</title><rect x="51.8613%" y="85" width="0.1268%" height="15" fill="rgb(237,122,38)"/><text x="52.1113%" y="95.50"></text></g><g><title>associated_items (141,100 samples, 0.11%)</title><rect x="51.8793%" y="69" width="0.1088%" height="15" fill="rgb(244,218,35)"/><text x="52.1293%" y="79.50"></text></g><g><title>predicates_of (190,972 samples, 0.15%)</title><rect x="52.0988%" y="85" width="0.1472%" height="15" fill="rgb(240,68,47)"/><text x="52.3488%" y="95.50"></text></g><g><title>specializes (507,198 samples, 0.39%)</title><rect x="52.2461%" y="85" width="0.3910%" height="15" fill="rgb(210,16,53)"/><text x="52.4961%" y="95.50"></text></g><g><title>param_env (355,228 samples, 0.27%)</title><rect x="52.3632%" y="69" width="0.2739%" height="15" fill="rgb(235,124,12)"/><text x="52.6132%" y="79.50"></text></g><g><title>def_span (147,281 samples, 0.11%)</title><rect x="52.5236%" y="53" width="0.1135%" height="15" fill="rgb(224,169,11)"/><text x="52.7736%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (133,241 samples, 0.10%)</title><rect x="52.5344%" y="37" width="0.1027%" height="15" fill="rgb(250,166,2)"/><text x="52.7844%" y="47.50"></text></g><g><title>trait_impls_of (129,782 samples, 0.10%)</title><rect x="52.6430%" y="85" width="0.1001%" height="15" fill="rgb(242,216,29)"/><text x="52.8930%" y="95.50"></text></g><g><title>evaluate_obligation (3,185,902 samples, 2.46%)</title><rect x="50.2989%" y="101" width="2.4562%" height="15" fill="rgb(230,116,27)"/><text x="50.5489%" y="111.50">ev..</text></g><g><title>is_copy_raw (155,592 samples, 0.12%)</title><rect x="52.9804%" y="101" width="0.1200%" height="15" fill="rgb(228,99,48)"/><text x="53.2304%" y="111.50"></text></g><g><title>method_autoderef_steps (488,667 samples, 0.38%)</title><rect x="53.1595%" y="101" width="0.3767%" height="15" fill="rgb(253,11,6)"/><text x="53.4095%" y="111.50"></text></g><g><title>evaluate_obligation (353,174 samples, 0.27%)</title><rect x="53.2640%" y="85" width="0.2723%" height="15" fill="rgb(247,143,39)"/><text x="53.5140%" y="95.50"></text></g><g><title>predicates_of (136,341 samples, 0.11%)</title><rect x="53.5500%" y="101" width="0.1051%" height="15" fill="rgb(236,97,10)"/><text x="53.8000%" y="111.50"></text></g><g><title>typeck (16,850,807 samples, 12.99%)</title><rect x="40.7113%" y="117" width="12.9914%" height="15" fill="rgb(233,208,19)"/><text x="40.9613%" y="127.50">typeck</text></g><g><title>item_bodies_checking (28,986,991 samples, 22.35%)</title><rect x="31.3814%" y="165" width="22.3481%" height="15" fill="rgb(216,164,2)"/><text x="31.6314%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,983,521 samples, 22.35%)</title><rect x="31.3841%" y="149" width="22.3454%" height="15" fill="rgb(220,129,5)"/><text x="31.6341%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (28,917,560 samples, 22.29%)</title><rect x="31.4350%" y="133" width="22.2945%" height="15" fill="rgb(242,17,10)"/><text x="31.6850%" y="143.50">typeck</text></g><g><title>item_types_checking (2,120,033 samples, 1.63%)</title><rect x="53.7295%" y="165" width="1.6345%" height="15" fill="rgb(242,107,0)"/><text x="53.9795%" y="175.50"></text></g><g><title>check_mod_item_types (2,114,323 samples, 1.63%)</title><rect x="53.7339%" y="149" width="1.6301%" height="15" fill="rgb(251,28,31)"/><text x="53.9839%" y="159.50"></text></g><g><title>fn_sig (632,220 samples, 0.49%)</title><rect x="55.8524%" y="133" width="0.4874%" height="15" fill="rgb(233,223,10)"/><text x="56.1024%" y="143.50"></text></g><g><title>named_region_map (756,578 samples, 0.58%)</title><rect x="56.6660%" y="117" width="0.5833%" height="15" fill="rgb(215,21,27)"/><text x="56.9160%" y="127.50"></text></g><g><title>resolve_lifetimes (707,588 samples, 0.55%)</title><rect x="56.7037%" y="101" width="0.5455%" height="15" fill="rgb(232,23,21)"/><text x="56.9537%" y="111.50"></text></g><g><title>lint_levels (392,754 samples, 0.30%)</title><rect x="56.9465%" y="85" width="0.3028%" height="15" fill="rgb(244,5,23)"/><text x="57.1965%" y="95.50"></text></g><g><title>generics_of (1,226,664 samples, 0.95%)</title><rect x="56.3398%" y="133" width="0.9457%" height="15" fill="rgb(226,81,46)"/><text x="56.5898%" y="143.50"></text></g><g><title>late_bound_vars_map (147,431 samples, 0.11%)</title><rect x="57.5713%" y="101" width="0.1137%" height="15" fill="rgb(247,70,30)"/><text x="57.8213%" y="111.50"></text></g><g><title>explicit_item_bounds (253,092 samples, 0.20%)</title><rect x="57.4926%" y="117" width="0.1951%" height="15" fill="rgb(212,68,19)"/><text x="57.7426%" y="127.50"></text></g><g><title>item_bounds (483,394 samples, 0.37%)</title><rect x="57.3391%" y="133" width="0.3727%" height="15" fill="rgb(240,187,13)"/><text x="57.5891%" y="143.50"></text></g><g><title>late_bound_vars_map (324,385 samples, 0.25%)</title><rect x="58.2518%" y="85" width="0.2501%" height="15" fill="rgb(223,113,26)"/><text x="58.5018%" y="95.50"></text></g><g><title>resolve_lifetimes (301,395 samples, 0.23%)</title><rect x="58.2695%" y="69" width="0.2324%" height="15" fill="rgb(206,192,2)"/><text x="58.5195%" y="79.50"></text></g><g><title>explicit_predicates_of (775,178 samples, 0.60%)</title><rect x="57.9600%" y="101" width="0.5976%" height="15" fill="rgb(241,108,4)"/><text x="58.2100%" y="111.50"></text></g><g><title>predicates_of (1,156,580 samples, 0.89%)</title><rect x="57.7118%" y="133" width="0.8917%" height="15" fill="rgb(247,173,49)"/><text x="57.9618%" y="143.50"></text></g><g><title>predicates_defined_on (1,036,260 samples, 0.80%)</title><rect x="57.8046%" y="117" width="0.7989%" height="15" fill="rgb(224,114,35)"/><text x="58.0546%" y="127.50"></text></g><g><title>super_predicates_of (285,283 samples, 0.22%)</title><rect x="58.6035%" y="133" width="0.2199%" height="15" fill="rgb(245,159,27)"/><text x="58.8535%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (256,273 samples, 0.20%)</title><rect x="58.6259%" y="117" width="0.1976%" height="15" fill="rgb(245,172,44)"/><text x="58.8759%" y="127.50"></text></g><g><title>type_collecting (4,900,094 samples, 3.78%)</title><rect x="55.3658%" y="165" width="3.7778%" height="15" fill="rgb(236,23,11)"/><text x="55.6158%" y="175.50">type..</text></g><g><title>collect_mod_item_types (4,868,274 samples, 3.75%)</title><rect x="55.3903%" y="149" width="3.7533%" height="15" fill="rgb(205,117,38)"/><text x="55.6403%" y="159.50">coll..</text></g><g><title>type_of (407,054 samples, 0.31%)</title><rect x="58.8298%" y="133" width="0.3138%" height="15" fill="rgb(237,72,25)"/><text x="59.0798%" y="143.50"></text></g><g><title>evaluate_obligation (276,612 samples, 0.21%)</title><rect x="60.9941%" y="133" width="0.2133%" height="15" fill="rgb(244,70,9)"/><text x="61.2441%" y="143.50"></text></g><g><title>implied_outlives_bounds (310,414 samples, 0.24%)</title><rect x="61.2128%" y="133" width="0.2393%" height="15" fill="rgb(217,125,39)"/><text x="61.4628%" y="143.50"></text></g><g><title>param_env (262,215 samples, 0.20%)</title><rect x="61.4521%" y="133" width="0.2022%" height="15" fill="rgb(235,36,10)"/><text x="61.7021%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,295,616 samples, 2.54%)</title><rect x="59.2996%" y="149" width="2.5408%" height="15" fill="rgb(251,123,47)"/><text x="59.5496%" y="159.50">ch..</text></g><g><title>region_scope_tree (234,191 samples, 0.18%)</title><rect x="61.6599%" y="133" width="0.1806%" height="15" fill="rgb(221,13,13)"/><text x="61.9099%" y="143.50"></text></g><g><title>evaluate_obligation (3,954,995 samples, 3.05%)</title><rect x="63.3909%" y="133" width="3.0492%" height="15" fill="rgb(238,131,9)"/><text x="63.6409%" y="143.50">eva..</text></g><g><title>predicates_of (306,454 samples, 0.24%)</title><rect x="66.2038%" y="117" width="0.2363%" height="15" fill="rgb(211,50,8)"/><text x="66.4538%" y="127.50"></text></g><g><title>predicates_defined_on (170,031 samples, 0.13%)</title><rect x="66.3090%" y="101" width="0.1311%" height="15" fill="rgb(245,182,24)"/><text x="66.5590%" y="111.50"></text></g><g><title>param_env (232,243 samples, 0.18%)</title><rect x="66.4866%" y="133" width="0.1791%" height="15" fill="rgb(242,14,37)"/><text x="66.7366%" y="143.50"></text></g><g><title>check_item_well_formed (6,381,312 samples, 4.92%)</title><rect x="61.8404%" y="149" width="4.9198%" height="15" fill="rgb(246,228,12)"/><text x="62.0904%" y="159.50">check_..</text></g><g><title>evaluate_obligation (320,032 samples, 0.25%)</title><rect x="69.8588%" y="133" width="0.2467%" height="15" fill="rgb(213,55,15)"/><text x="70.1088%" y="143.50"></text></g><g><title>implied_outlives_bounds (302,382 samples, 0.23%)</title><rect x="70.1588%" y="133" width="0.2331%" height="15" fill="rgb(209,9,3)"/><text x="70.4088%" y="143.50"></text></g><g><title>param_env (283,583 samples, 0.22%)</title><rect x="70.3967%" y="133" width="0.2186%" height="15" fill="rgb(230,59,30)"/><text x="70.6467%" y="143.50"></text></g><g><title>analysis (90,817,454 samples, 70.02%)</title><rect x="0.7368%" y="197" width="70.0174%" height="15" fill="rgb(209,121,21)"/><text x="0.9868%" y="207.50">analysis</text></g><g><title>type_check_crate (57,337,303 samples, 44.21%)</title><rect x="26.5489%" y="181" width="44.2053%" height="15" fill="rgb(220,109,13)"/><text x="26.7989%" y="191.50">type_check_crate</text></g><g><title>wf_checking (15,054,846 samples, 11.61%)</title><rect x="59.1474%" y="165" width="11.6068%" height="15" fill="rgb(232,18,1)"/><text x="59.3974%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (5,180,477 samples, 3.99%)</title><rect x="66.7602%" y="149" width="3.9940%" height="15" fill="rgb(215,41,42)"/><text x="67.0102%" y="159.50">chec..</text></g><g><title>codegen_crate (543,686 samples, 0.42%)</title><rect x="70.7621%" y="197" width="0.4192%" height="15" fill="rgb(224,123,36)"/><text x="71.0121%" y="207.50"></text></g><g><title>AST_validation (207,052 samples, 0.16%)</title><rect x="71.3470%" y="181" width="0.1596%" height="15" fill="rgb(240,125,3)"/><text x="71.5970%" y="191.50"></text></g><g><title>metadata_load_macro (159,731 samples, 0.12%)</title><rect x="87.3539%" y="149" width="0.1231%" height="15" fill="rgb(205,98,50)"/><text x="87.6039%" y="159.50"></text></g><g><title>metadata_register_crate (356,945 samples, 0.28%)</title><rect x="87.4770%" y="149" width="0.2752%" height="15" fill="rgb(205,185,37)"/><text x="87.7270%" y="159.50"></text></g><g><title>macro_expand_crate (21,072,943 samples, 16.25%)</title><rect x="71.6652%" y="181" width="16.2466%" height="15" fill="rgb(238,207,15)"/><text x="71.9152%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (21,052,982 samples, 16.23%)</title><rect x="71.6806%" y="165" width="16.2312%" height="15" fill="rgb(213,199,42)"/><text x="71.9306%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (207,002 samples, 0.16%)</title><rect x="87.7522%" y="149" width="0.1596%" height="15" fill="rgb(235,201,11)"/><text x="88.0022%" y="159.50"></text></g><g><title>finalize_macro_resolutions (258,022 samples, 0.20%)</title><rect x="88.1084%" y="165" width="0.1989%" height="15" fill="rgb(207,46,11)"/><text x="88.3584%" y="175.50"></text></g><g><title>late_resolve_crate (2,641,509 samples, 2.04%)</title><rect x="88.3073%" y="165" width="2.0365%" height="15" fill="rgb(241,35,35)"/><text x="88.5573%" y="175.50">l..</text></g><g><title>configure_and_expand (25,063,927 samples, 19.32%)</title><rect x="71.1813%" y="197" width="19.3235%" height="15" fill="rgb(243,32,47)"/><text x="71.4313%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,231,415 samples, 2.49%)</title><rect x="88.0134%" y="181" width="2.4913%" height="15" fill="rgb(247,202,23)"/><text x="88.2634%" y="191.50">re..</text></g><g><title>drop_ast (304,594 samples, 0.23%)</title><rect x="90.5048%" y="197" width="0.2348%" height="15" fill="rgb(219,102,11)"/><text x="90.7548%" y="207.50"></text></g><g><title>early_lint_checks (612,926 samples, 0.47%)</title><rect x="90.7552%" y="197" width="0.4725%" height="15" fill="rgb(243,110,44)"/><text x="91.0052%" y="207.50"></text></g><g><title>free_global_ctxt (2,198,144 samples, 1.69%)</title><rect x="91.2278%" y="197" width="1.6947%" height="15" fill="rgb(222,74,54)"/><text x="91.4778%" y="207.50"></text></g><g><title>generate_crate_metadata (950,090 samples, 0.73%)</title><rect x="92.9225%" y="197" width="0.7325%" height="15" fill="rgb(216,99,12)"/><text x="93.1725%" y="207.50"></text></g><g><title>hir_lowering (6,098,728 samples, 4.70%)</title><rect x="93.6550%" y="197" width="4.7019%" height="15" fill="rgb(226,22,26)"/><text x="93.9050%" y="207.50">hir_l..</text></g><g><title>parse_crate (458,345 samples, 0.35%)</title><rect x="98.3920%" y="197" width="0.3534%" height="15" fill="rgb(217,163,10)"/><text x="98.6420%" y="207.50"></text></g><g><title>prepare_outputs (355,654 samples, 0.27%)</title><rect x="98.7526%" y="197" width="0.2742%" height="15" fill="rgb(213,25,53)"/><text x="99.0026%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (754,369 samples, 0.58%)</title><rect x="99.0268%" y="197" width="0.5816%" height="15" fill="rgb(252,105,26)"/><text x="99.2768%" y="207.50"></text></g><g><title>setup_global_ctxt (158,762 samples, 0.12%)</title><rect x="99.6169%" y="197" width="0.1224%" height="15" fill="rgb(220,39,43)"/><text x="99.8669%" y="207.50"></text></g><g><title>all (129,706,993 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (129,706,993 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (338,114 samples, 0.26%)</title><rect x="99.7393%" y="197" width="0.2607%" height="15" fill="rgb(223,20,43)"/><text x="99.9893%" y="207.50"></text></g></svg></svg>