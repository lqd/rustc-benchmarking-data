<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (127,634 samples, 0.16%)</title><rect x="9.2146%" y="117" width="0.1578%" height="15" fill="rgb(227,0,7)"/><text x="9.4646%" y="127.50"></text></g><g><title>item_attrs (157,851 samples, 0.20%)</title><rect x="9.7183%" y="85" width="0.1952%" height="15" fill="rgb(217,0,24)"/><text x="9.9683%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (152,471 samples, 0.19%)</title><rect x="9.7249%" y="69" width="0.1885%" height="15" fill="rgb(221,193,54)"/><text x="9.9749%" y="79.50"></text></g><g><title>codegen_fn_attrs (226,531 samples, 0.28%)</title><rect x="9.6431%" y="101" width="0.2801%" height="15" fill="rgb(248,212,6)"/><text x="9.8931%" y="111.50"></text></g><g><title>is_copy_raw (84,022 samples, 0.10%)</title><rect x="11.5479%" y="53" width="0.1039%" height="15" fill="rgb(208,68,35)"/><text x="11.7979%" y="63.50"></text></g><g><title>adt_drop_tys (155,982 samples, 0.19%)</title><rect x="11.5188%" y="69" width="0.1928%" height="15" fill="rgb(232,128,0)"/><text x="11.7688%" y="79.50"></text></g><g><title>needs_drop_raw (564,155 samples, 0.70%)</title><rect x="11.4612%" y="85" width="0.6975%" height="15" fill="rgb(207,160,47)"/><text x="11.7112%" y="95.50"></text></g><g><title>is_copy_raw (361,583 samples, 0.45%)</title><rect x="11.7117%" y="69" width="0.4470%" height="15" fill="rgb(228,23,34)"/><text x="11.9617%" y="79.50"></text></g><g><title>evaluate_obligation (302,851 samples, 0.37%)</title><rect x="11.7843%" y="53" width="0.3744%" height="15" fill="rgb(218,30,26)"/><text x="12.0343%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (111,171 samples, 0.14%)</title><rect x="12.2582%" y="69" width="0.1374%" height="15" fill="rgb(220,122,19)"/><text x="12.5082%" y="79.50"></text></g><g><title>impl_parent (185,491 samples, 0.23%)</title><rect x="13.0667%" y="53" width="0.2293%" height="15" fill="rgb(250,228,42)"/><text x="13.3167%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (120,420 samples, 0.15%)</title><rect x="13.1471%" y="37" width="0.1489%" height="15" fill="rgb(240,193,28)"/><text x="13.3971%" y="47.50"></text></g><g><title>specialization_graph_of (978,452 samples, 1.21%)</title><rect x="12.4395%" y="69" width="1.2097%" height="15" fill="rgb(216,20,37)"/><text x="12.6895%" y="79.50"></text></g><g><title>impl_trait_ref (285,645 samples, 0.35%)</title><rect x="13.2960%" y="53" width="0.3532%" height="15" fill="rgb(206,188,39)"/><text x="13.5460%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (217,502 samples, 0.27%)</title><rect x="13.3802%" y="37" width="0.2689%" height="15" fill="rgb(217,207,13)"/><text x="13.6302%" y="47.50"></text></g><g><title>resolve_instance (1,242,353 samples, 1.54%)</title><rect x="12.1587%" y="85" width="1.5360%" height="15" fill="rgb(231,73,38)"/><text x="12.4087%" y="95.50"></text></g><g><title>thir_body (487,563 samples, 0.60%)</title><rect x="13.7119%" y="85" width="0.6028%" height="15" fill="rgb(225,20,46)"/><text x="13.9619%" y="95.50"></text></g><g><title>mir_const (4,529,392 samples, 5.60%)</title><rect x="8.7245%" y="133" width="5.5999%" height="15" fill="rgb(210,31,41)"/><text x="8.9745%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (4,005,324 samples, 4.95%)</title><rect x="9.3724%" y="117" width="4.9520%" height="15" fill="rgb(221,200,47)"/><text x="9.6224%" y="127.50">unsafe..</text></g><g><title>mir_built (3,559,878 samples, 4.40%)</title><rect x="9.9231%" y="101" width="4.4012%" height="15" fill="rgb(226,26,5)"/><text x="10.1731%" y="111.50">mir_b..</text></g><g><title>mir_promoted (4,971,854 samples, 6.15%)</title><rect x="8.1994%" y="149" width="6.1469%" height="15" fill="rgb(249,33,26)"/><text x="8.4494%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (142,130 samples, 0.18%)</title><rect x="14.3463%" y="149" width="0.1757%" height="15" fill="rgb(235,183,28)"/><text x="14.5963%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (130,310 samples, 0.16%)</title><rect x="14.5221%" y="149" width="0.1611%" height="15" fill="rgb(221,5,38)"/><text x="14.7721%" y="159.50"></text></g><g><title>type_op_prove_predicate (778,517 samples, 0.96%)</title><rect x="14.7238%" y="149" width="0.9625%" height="15" fill="rgb(247,18,42)"/><text x="14.9738%" y="159.50"></text></g><g><title>MIR_borrow_checking (11,757,083 samples, 14.54%)</title><rect x="1.1551%" y="181" width="14.5358%" height="15" fill="rgb(241,131,45)"/><text x="1.4051%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (11,710,683 samples, 14.48%)</title><rect x="1.2125%" y="165" width="14.4784%" height="15" fill="rgb(249,31,29)"/><text x="1.4625%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (171,822 samples, 0.21%)</title><rect x="15.7050%" y="181" width="0.2124%" height="15" fill="rgb(225,111,53)"/><text x="15.9550%" y="191.50"></text></g><g><title>get_lang_items (108,432 samples, 0.13%)</title><rect x="16.2372%" y="133" width="0.1341%" height="15" fill="rgb(238,160,17)"/><text x="16.4872%" y="143.50"></text></g><g><title>codegen_fn_attrs (96,382 samples, 0.12%)</title><rect x="16.4697%" y="117" width="0.1192%" height="15" fill="rgb(214,148,48)"/><text x="16.7197%" y="127.50"></text></g><g><title>should_inherit_track_caller (180,743 samples, 0.22%)</title><rect x="16.3713%" y="133" width="0.2235%" height="15" fill="rgb(232,36,49)"/><text x="16.6213%" y="143.50"></text></g><g><title>codegen_fn_attrs (389,666 samples, 0.48%)</title><rect x="16.1468%" y="149" width="0.4818%" height="15" fill="rgb(209,103,24)"/><text x="16.3968%" y="159.50"></text></g><g><title>check_mod_attrs (549,626 samples, 0.68%)</title><rect x="15.9492%" y="165" width="0.6795%" height="15" fill="rgb(229,88,8)"/><text x="16.1992%" y="175.50"></text></g><g><title>lookup_deprecation_entry (81,912 samples, 0.10%)</title><rect x="16.8668%" y="149" width="0.1013%" height="15" fill="rgb(213,181,19)"/><text x="17.1168%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (242,043 samples, 0.30%)</title><rect x="16.7578%" y="165" width="0.2992%" height="15" fill="rgb(254,191,54)"/><text x="17.0078%" y="175.50"></text></g><g><title>misc_checking_1 (971,121 samples, 1.20%)</title><rect x="15.9180%" y="181" width="1.2006%" height="15" fill="rgb(241,83,37)"/><text x="16.1680%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (201,282 samples, 0.25%)</title><rect x="17.1206%" y="165" width="0.2489%" height="15" fill="rgb(233,36,39)"/><text x="17.3706%" y="175.50"></text></g><g><title>check_mod_liveness (155,912 samples, 0.19%)</title><rect x="17.1767%" y="149" width="0.1928%" height="15" fill="rgb(226,3,54)"/><text x="17.4267%" y="159.50"></text></g><g><title>misc_checking_2 (452,295 samples, 0.56%)</title><rect x="17.1187%" y="181" width="0.5592%" height="15" fill="rgb(245,192,40)"/><text x="17.3687%" y="191.50"></text></g><g><title>match_checking (249,473 samples, 0.31%)</title><rect x="17.3694%" y="165" width="0.3084%" height="15" fill="rgb(238,167,29)"/><text x="17.6194%" y="175.50"></text></g><g><title>check_match (236,263 samples, 0.29%)</title><rect x="17.3858%" y="149" width="0.2921%" height="15" fill="rgb(232,182,51)"/><text x="17.6358%" y="159.50"></text></g><g><title>check_private_in_public (100,551 samples, 0.12%)</title><rect x="17.6888%" y="165" width="0.1243%" height="15" fill="rgb(231,60,39)"/><text x="17.9388%" y="175.50"></text></g><g><title>death_checking (211,832 samples, 0.26%)</title><rect x="17.8132%" y="165" width="0.2619%" height="15" fill="rgb(208,69,12)"/><text x="18.0632%" y="175.50"></text></g><g><title>param_env (98,990 samples, 0.12%)</title><rect x="18.8161%" y="133" width="0.1224%" height="15" fill="rgb(235,93,37)"/><text x="19.0661%" y="143.50"></text></g><g><title>crate_lints (1,806,741 samples, 2.23%)</title><rect x="18.0767%" y="149" width="2.2338%" height="15" fill="rgb(213,116,39)"/><text x="18.3267%" y="159.50">c..</text></g><g><title>type_of (1,049,731 samples, 1.30%)</title><rect x="19.0126%" y="133" width="1.2978%" height="15" fill="rgb(222,207,29)"/><text x="19.2626%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (814,074 samples, 1.01%)</title><rect x="19.3040%" y="117" width="1.0065%" height="15" fill="rgb(206,96,30)"/><text x="19.5540%" y="127.50"></text></g><g><title>lint_checking (2,026,413 samples, 2.51%)</title><rect x="18.0750%" y="165" width="2.5053%" height="15" fill="rgb(218,138,4)"/><text x="18.3250%" y="175.50">li..</text></g><g><title>module_lints (218,342 samples, 0.27%)</title><rect x="20.3104%" y="149" width="0.2699%" height="15" fill="rgb(250,191,14)"/><text x="20.5604%" y="159.50"></text></g><g><title>lint_mod (215,702 samples, 0.27%)</title><rect x="20.3137%" y="133" width="0.2667%" height="15" fill="rgb(239,60,40)"/><text x="20.5637%" y="143.50"></text></g><g><title>privacy_access_levels (126,022 samples, 0.16%)</title><rect x="20.5804%" y="165" width="0.1558%" height="15" fill="rgb(206,27,48)"/><text x="20.8304%" y="175.50"></text></g><g><title>privacy_checking_modules (353,394 samples, 0.44%)</title><rect x="20.7362%" y="165" width="0.4369%" height="15" fill="rgb(225,35,8)"/><text x="20.9862%" y="175.50"></text></g><g><title>check_mod_privacy (351,934 samples, 0.44%)</title><rect x="20.7380%" y="149" width="0.4351%" height="15" fill="rgb(250,213,24)"/><text x="20.9880%" y="159.50"></text></g><g><title>misc_checking_3 (2,837,132 samples, 3.51%)</title><rect x="17.6779%" y="181" width="3.5077%" height="15" fill="rgb(247,123,22)"/><text x="17.9279%" y="191.50">mis..</text></g><g><title>impl_trait_ref (142,791 samples, 0.18%)</title><rect x="21.4167%" y="85" width="0.1765%" height="15" fill="rgb(231,138,38)"/><text x="21.6667%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (124,201 samples, 0.15%)</title><rect x="21.4397%" y="69" width="0.1536%" height="15" fill="rgb(231,145,46)"/><text x="21.6897%" y="79.50"></text></g><g><title>adt_destructor (287,793 samples, 0.36%)</title><rect x="21.2689%" y="133" width="0.3558%" height="15" fill="rgb(251,118,11)"/><text x="21.5189%" y="143.50"></text></g><g><title>coherent_trait (285,373 samples, 0.35%)</title><rect x="21.2719%" y="117" width="0.3528%" height="15" fill="rgb(217,147,25)"/><text x="21.5219%" y="127.50"></text></g><g><title>specialization_graph_of (283,633 samples, 0.35%)</title><rect x="21.2741%" y="101" width="0.3507%" height="15" fill="rgb(247,81,37)"/><text x="21.5241%" y="111.50"></text></g><g><title>impl_parent (1,734,802 samples, 2.14%)</title><rect x="25.5407%" y="117" width="2.1448%" height="15" fill="rgb(209,12,38)"/><text x="25.7907%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,058,022 samples, 1.31%)</title><rect x="26.3774%" y="101" width="1.3081%" height="15" fill="rgb(227,1,9)"/><text x="26.6274%" y="111.50"></text></g><g><title>impl_trait_ref (4,347,662 samples, 5.38%)</title><rect x="27.6855%" y="117" width="5.3752%" height="15" fill="rgb(248,47,43)"/><text x="27.9355%" y="127.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,662,377 samples, 4.53%)</title><rect x="28.5327%" y="101" width="4.5280%" height="15" fill="rgb(221,10,30)"/><text x="28.7827%" y="111.50">metad..</text></g><g><title>trait_impls_of (576,788 samples, 0.71%)</title><rect x="33.0886%" y="117" width="0.7131%" height="15" fill="rgb(210,229,1)"/><text x="33.3386%" y="127.50"></text></g><g><title>implementations_of_trait (145,681 samples, 0.18%)</title><rect x="33.6216%" y="101" width="0.1801%" height="15" fill="rgb(222,148,37)"/><text x="33.8716%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (123,361 samples, 0.15%)</title><rect x="33.6492%" y="85" width="0.1525%" height="15" fill="rgb(234,67,33)"/><text x="33.8992%" y="95.50"></text></g><g><title>coherent_trait (10,156,514 samples, 12.56%)</title><rect x="21.2456%" y="149" width="12.5570%" height="15" fill="rgb(247,98,35)"/><text x="21.4956%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (9,808,821 samples, 12.13%)</title><rect x="21.6755%" y="133" width="12.1271%" height="15" fill="rgb(247,138,52)"/><text x="21.9255%" y="143.50">specialization_gra..</text></g><g><title>coherence_checking (10,226,885 samples, 12.64%)</title><rect x="21.2267%" y="165" width="12.6440%" height="15" fill="rgb(213,79,30)"/><text x="21.4767%" y="175.50">coherence_checking</text></g><g><title>associated_item (106,110 samples, 0.13%)</title><rect x="42.3309%" y="101" width="0.1312%" height="15" fill="rgb(246,177,23)"/><text x="42.5809%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (86,480 samples, 0.11%)</title><rect x="42.3552%" y="85" width="0.1069%" height="15" fill="rgb(230,62,27)"/><text x="42.6052%" y="95.50"></text></g><g><title>associated_items (171,810 samples, 0.21%)</title><rect x="42.2684%" y="117" width="0.2124%" height="15" fill="rgb(216,154,8)"/><text x="42.5184%" y="127.50"></text></g><g><title>dropck_outlives (188,032 samples, 0.23%)</title><rect x="42.5223%" y="117" width="0.2325%" height="15" fill="rgb(244,35,45)"/><text x="42.7723%" y="127.50"></text></g><g><title>adt_dtorck_constraint (136,412 samples, 0.17%)</title><rect x="42.5861%" y="101" width="0.1687%" height="15" fill="rgb(251,115,12)"/><text x="42.8361%" y="111.50"></text></g><g><title>evaluate_obligation (585,837 samples, 0.72%)</title><rect x="42.7548%" y="117" width="0.7243%" height="15" fill="rgb(240,54,50)"/><text x="43.0048%" y="127.50"></text></g><g><title>trait_impls_of (235,331 samples, 0.29%)</title><rect x="43.1881%" y="101" width="0.2910%" height="15" fill="rgb(233,84,52)"/><text x="43.4381%" y="111.50"></text></g><g><title>item_attrs (100,011 samples, 0.12%)</title><rect x="43.6692%" y="117" width="0.1236%" height="15" fill="rgb(207,117,47)"/><text x="43.9192%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (97,251 samples, 0.12%)</title><rect x="43.6726%" y="101" width="0.1202%" height="15" fill="rgb(249,43,39)"/><text x="43.9226%" y="111.50"></text></g><g><title>method_autoderef_steps (115,651 samples, 0.14%)</title><rect x="43.8359%" y="117" width="0.1430%" height="15" fill="rgb(209,38,44)"/><text x="44.0859%" y="127.50"></text></g><g><title>object_safety_violations (123,812 samples, 0.15%)</title><rect x="43.9804%" y="117" width="0.1531%" height="15" fill="rgb(236,212,23)"/><text x="44.2304%" y="127.50"></text></g><g><title>predicates_of (115,440 samples, 0.14%)</title><rect x="44.1550%" y="117" width="0.1427%" height="15" fill="rgb(242,79,21)"/><text x="44.4050%" y="127.50"></text></g><g><title>predicates_defined_on (81,440 samples, 0.10%)</title><rect x="44.1971%" y="101" width="0.1007%" height="15" fill="rgb(211,96,35)"/><text x="44.4471%" y="111.50"></text></g><g><title>associated_item (227,374 samples, 0.28%)</title><rect x="47.8840%" y="85" width="0.2811%" height="15" fill="rgb(253,215,40)"/><text x="48.1340%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (183,334 samples, 0.23%)</title><rect x="47.9385%" y="69" width="0.2267%" height="15" fill="rgb(211,81,21)"/><text x="48.1885%" y="79.50"></text></g><g><title>associated_items (311,324 samples, 0.38%)</title><rect x="47.7924%" y="101" width="0.3849%" height="15" fill="rgb(208,190,38)"/><text x="48.0424%" y="111.50"></text></g><g><title>evaluate_obligation (488,644 samples, 0.60%)</title><rect x="48.2673%" y="101" width="0.6041%" height="15" fill="rgb(235,213,38)"/><text x="48.5173%" y="111.50"></text></g><g><title>trait_impls_of (125,121 samples, 0.15%)</title><rect x="48.7167%" y="85" width="0.1547%" height="15" fill="rgb(237,122,38)"/><text x="48.9667%" y="95.50"></text></g><g><title>method_autoderef_steps (141,350 samples, 0.17%)</title><rect x="49.2027%" y="101" width="0.1748%" height="15" fill="rgb(244,218,35)"/><text x="49.4527%" y="111.50"></text></g><g><title>predicates_of (121,420 samples, 0.15%)</title><rect x="49.3855%" y="101" width="0.1501%" height="15" fill="rgb(240,68,47)"/><text x="49.6355%" y="111.50"></text></g><g><title>trait_impls_of (94,591 samples, 0.12%)</title><rect x="49.5551%" y="101" width="0.1169%" height="15" fill="rgb(210,16,53)"/><text x="49.8051%" y="111.50"></text></g><g><title>typeck (4,334,428 samples, 5.36%)</title><rect x="44.3660%" y="117" width="5.3588%" height="15" fill="rgb(235,124,12)"/><text x="44.6160%" y="127.50">typeck</text></g><g><title>item_bodies_checking (12,835,995 samples, 15.87%)</title><rect x="33.8931%" y="165" width="15.8697%" height="15" fill="rgb(224,169,11)"/><text x="34.1431%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,832,725 samples, 15.87%)</title><rect x="33.8972%" y="149" width="15.8657%" height="15" fill="rgb(250,166,2)"/><text x="34.1472%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (12,800,374 samples, 15.83%)</title><rect x="33.9372%" y="133" width="15.8257%" height="15" fill="rgb(242,216,29)"/><text x="34.1872%" y="143.50">typeck</text></g><g><title>mir_const (544,246 samples, 0.67%)</title><rect x="51.0696%" y="85" width="0.6729%" height="15" fill="rgb(230,116,27)"/><text x="51.3196%" y="95.50"></text></g><g><title>unsafety_check_result (499,246 samples, 0.62%)</title><rect x="51.1253%" y="69" width="0.6172%" height="15" fill="rgb(228,99,48)"/><text x="51.3753%" y="79.50"></text></g><g><title>mir_built (464,235 samples, 0.57%)</title><rect x="51.1685%" y="53" width="0.5740%" height="15" fill="rgb(253,11,6)"/><text x="51.4185%" y="63.50"></text></g><g><title>typeck (351,264 samples, 0.43%)</title><rect x="51.3082%" y="37" width="0.4343%" height="15" fill="rgb(247,143,39)"/><text x="51.5582%" y="47.50"></text></g><g><title>mir_promoted (620,027 samples, 0.77%)</title><rect x="50.9825%" y="101" width="0.7666%" height="15" fill="rgb(236,97,10)"/><text x="51.2325%" y="111.50"></text></g><g><title>item_types_checking (1,620,108 samples, 2.00%)</title><rect x="49.7629%" y="165" width="2.0030%" height="15" fill="rgb(233,208,19)"/><text x="50.0129%" y="175.50">i..</text></g><g><title>check_mod_item_types (1,617,668 samples, 2.00%)</title><rect x="49.7659%" y="149" width="2.0000%" height="15" fill="rgb(216,164,2)"/><text x="50.0159%" y="159.50">c..</text></g><g><title>type_of (1,102,772 samples, 1.36%)</title><rect x="50.4025%" y="133" width="1.3634%" height="15" fill="rgb(220,129,5)"/><text x="50.6525%" y="143.50"></text></g><g><title>mir_borrowck (1,084,182 samples, 1.34%)</title><rect x="50.4255%" y="117" width="1.3404%" height="15" fill="rgb(242,17,10)"/><text x="50.6755%" y="127.50"></text></g><g><title>fn_sig (297,005 samples, 0.37%)</title><rect x="51.9455%" y="133" width="0.3672%" height="15" fill="rgb(242,107,0)"/><text x="52.1955%" y="143.50"></text></g><g><title>is_late_bound_map (83,921 samples, 0.10%)</title><rect x="52.3896%" y="117" width="0.1038%" height="15" fill="rgb(251,28,31)"/><text x="52.6396%" y="127.50"></text></g><g><title>resolve_lifetimes (81,091 samples, 0.10%)</title><rect x="52.3931%" y="101" width="0.1003%" height="15" fill="rgb(233,223,10)"/><text x="52.6431%" y="111.50"></text></g><g><title>named_region_map (155,350 samples, 0.19%)</title><rect x="52.4934%" y="117" width="0.1921%" height="15" fill="rgb(215,21,27)"/><text x="52.7434%" y="127.50"></text></g><g><title>resolve_lifetimes (147,680 samples, 0.18%)</title><rect x="52.5029%" y="101" width="0.1826%" height="15" fill="rgb(232,23,21)"/><text x="52.7529%" y="111.50"></text></g><g><title>generics_of (310,092 samples, 0.38%)</title><rect x="52.3127%" y="133" width="0.3834%" height="15" fill="rgb(244,5,23)"/><text x="52.5627%" y="143.50"></text></g><g><title>predicates_of (309,343 samples, 0.38%)</title><rect x="52.7298%" y="133" width="0.3825%" height="15" fill="rgb(226,81,46)"/><text x="52.9798%" y="143.50"></text></g><g><title>predicates_defined_on (285,303 samples, 0.35%)</title><rect x="52.7595%" y="117" width="0.3527%" height="15" fill="rgb(247,70,30)"/><text x="53.0095%" y="127.50"></text></g><g><title>inferred_outlives_of (190,502 samples, 0.24%)</title><rect x="52.8767%" y="101" width="0.2355%" height="15" fill="rgb(212,68,19)"/><text x="53.1267%" y="111.50"></text></g><g><title>inferred_outlives_crate (177,122 samples, 0.22%)</title><rect x="52.8933%" y="85" width="0.2190%" height="15" fill="rgb(240,187,13)"/><text x="53.1433%" y="95.50"></text></g><g><title>type_of (86,630 samples, 0.11%)</title><rect x="53.0052%" y="69" width="0.1071%" height="15" fill="rgb(223,113,26)"/><text x="53.2552%" y="79.50"></text></g><g><title>type_collecting (1,123,362 samples, 1.39%)</title><rect x="51.7678%" y="165" width="1.3889%" height="15" fill="rgb(206,192,2)"/><text x="52.0178%" y="175.50"></text></g><g><title>collect_mod_item_types (1,116,292 samples, 1.38%)</title><rect x="51.7765%" y="149" width="1.3801%" height="15" fill="rgb(241,108,4)"/><text x="52.0265%" y="159.50"></text></g><g><title>evaluate_obligation (352,553 samples, 0.44%)</title><rect x="54.1631%" y="133" width="0.4359%" height="15" fill="rgb(247,173,49)"/><text x="54.4131%" y="143.50"></text></g><g><title>implied_outlives_bounds (89,644 samples, 0.11%)</title><rect x="54.6222%" y="133" width="0.1108%" height="15" fill="rgb(224,114,35)"/><text x="54.8722%" y="143.50"></text></g><g><title>param_env (89,890 samples, 0.11%)</title><rect x="54.7330%" y="133" width="0.1111%" height="15" fill="rgb(245,159,27)"/><text x="54.9830%" y="143.50"></text></g><g><title>region_scope_tree (143,120 samples, 0.18%)</title><rect x="54.8758%" y="133" width="0.1769%" height="15" fill="rgb(245,172,44)"/><text x="55.1258%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,456,005 samples, 1.80%)</title><rect x="53.2563%" y="149" width="1.8001%" height="15" fill="rgb(236,23,11)"/><text x="53.5063%" y="159.50">c..</text></g><g><title>adt_sized_constraint (120,311 samples, 0.15%)</title><rect x="55.8729%" y="101" width="0.1487%" height="15" fill="rgb(205,117,38)"/><text x="56.1229%" y="111.50"></text></g><g><title>adt_sized_constraint (166,681 samples, 0.21%)</title><rect x="55.8205%" y="117" width="0.2061%" height="15" fill="rgb(237,72,25)"/><text x="56.0705%" y="127.50"></text></g><g><title>evaluate_obligation (342,655 samples, 0.42%)</title><rect x="55.6047%" y="133" width="0.4236%" height="15" fill="rgb(244,70,9)"/><text x="55.8547%" y="143.50"></text></g><g><title>param_env (83,990 samples, 0.10%)</title><rect x="56.1058%" y="133" width="0.1038%" height="15" fill="rgb(217,125,39)"/><text x="56.3558%" y="143.50"></text></g><g><title>analysis (44,895,166 samples, 55.51%)</title><rect x="0.8474%" y="197" width="55.5059%" height="15" fill="rgb(235,36,10)"/><text x="1.0974%" y="207.50">analysis</text></g><g><title>type_check_crate (28,444,950 samples, 35.17%)</title><rect x="21.1856%" y="181" width="35.1678%" height="15" fill="rgb(251,123,47)"/><text x="21.4356%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,583,390 samples, 3.19%)</title><rect x="53.1594%" y="165" width="3.1940%" height="15" fill="rgb(221,13,13)"/><text x="53.4094%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (1,049,003 samples, 1.30%)</title><rect x="55.0564%" y="149" width="1.2969%" height="15" fill="rgb(238,131,9)"/><text x="55.3064%" y="159.50"></text></g><g><title>codegen_crate (562,337 samples, 0.70%)</title><rect x="56.3666%" y="197" width="0.6952%" height="15" fill="rgb(211,50,8)"/><text x="56.6166%" y="207.50"></text></g><g><title>AST_validation (141,981 samples, 0.18%)</title><rect x="57.3578%" y="181" width="0.1755%" height="15" fill="rgb(245,182,24)"/><text x="57.6078%" y="191.50"></text></g><g><title>crate_injection (98,421 samples, 0.12%)</title><rect x="57.6211%" y="181" width="0.1217%" height="15" fill="rgb(242,14,37)"/><text x="57.8711%" y="191.50"></text></g><g><title>metadata_load_macro (603,334 samples, 0.75%)</title><rect x="78.8911%" y="149" width="0.7459%" height="15" fill="rgb(246,228,12)"/><text x="79.1411%" y="159.50"></text></g><g><title>macro_expand_crate (20,504,582 samples, 25.35%)</title><rect x="57.7427%" y="181" width="25.3507%" height="15" fill="rgb(213,55,15)"/><text x="57.9927%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (20,477,611 samples, 25.32%)</title><rect x="57.7761%" y="165" width="25.3174%" height="15" fill="rgb(209,9,3)"/><text x="58.0261%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,795,661 samples, 3.46%)</title><rect x="79.6371%" y="149" width="3.4564%" height="15" fill="rgb(230,59,30)"/><text x="79.8871%" y="159.50">met..</text></g><g><title>metadata_register_crate (1,016,621 samples, 1.26%)</title><rect x="81.8366%" y="133" width="1.2569%" height="15" fill="rgb(209,121,21)"/><text x="82.0866%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (234,753 samples, 0.29%)</title><rect x="83.1007%" y="181" width="0.2902%" height="15" fill="rgb(220,109,13)"/><text x="83.3507%" y="191.50"></text></g><g><title>finalize_macro_resolutions (297,444 samples, 0.37%)</title><rect x="83.4990%" y="165" width="0.3677%" height="15" fill="rgb(232,18,1)"/><text x="83.7490%" y="175.50"></text></g><g><title>late_resolve_crate (1,964,992 samples, 2.43%)</title><rect x="83.8668%" y="165" width="2.4294%" height="15" fill="rgb(215,41,42)"/><text x="84.1168%" y="175.50">la..</text></g><g><title>configure_and_expand (23,765,448 samples, 29.38%)</title><rect x="57.0619%" y="197" width="29.3823%" height="15" fill="rgb(224,123,36)"/><text x="57.3119%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,469,598 samples, 3.05%)</title><rect x="83.3909%" y="181" width="3.0533%" height="15" fill="rgb(240,125,3)"/><text x="83.6409%" y="191.50">res..</text></g><g><title>drop_ast (142,562 samples, 0.18%)</title><rect x="86.4442%" y="197" width="0.1763%" height="15" fill="rgb(205,98,50)"/><text x="86.6942%" y="207.50"></text></g><g><title>early_lint_checks (302,793 samples, 0.37%)</title><rect x="86.6399%" y="197" width="0.3744%" height="15" fill="rgb(205,185,37)"/><text x="86.8899%" y="207.50"></text></g><g><title>free_global_ctxt (2,958,373 samples, 3.66%)</title><rect x="87.0142%" y="197" width="3.6576%" height="15" fill="rgb(238,207,15)"/><text x="87.2642%" y="207.50">free..</text></g><g><title>generate_crate_metadata (663,248 samples, 0.82%)</title><rect x="90.6718%" y="197" width="0.8200%" height="15" fill="rgb(213,199,42)"/><text x="90.9218%" y="207.50"></text></g><g><title>hir_lowering (2,122,034 samples, 2.62%)</title><rect x="91.4918%" y="197" width="2.6236%" height="15" fill="rgb(235,201,11)"/><text x="91.7418%" y="207.50">hi..</text></g><g><title>parse_crate (3,460,639 samples, 4.28%)</title><rect x="94.1774%" y="197" width="4.2785%" height="15" fill="rgb(207,46,11)"/><text x="94.4274%" y="207.50">parse..</text></g><g><title>prepare_outputs (289,553 samples, 0.36%)</title><rect x="98.4686%" y="197" width="0.3580%" height="15" fill="rgb(241,35,35)"/><text x="98.7186%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (571,016 samples, 0.71%)</title><rect x="98.8266%" y="197" width="0.7060%" height="15" fill="rgb(243,32,47)"/><text x="99.0766%" y="207.50"></text></g><g><title>setup_global_ctxt (107,571 samples, 0.13%)</title><rect x="99.5455%" y="197" width="0.1330%" height="15" fill="rgb(247,202,23)"/><text x="99.7955%" y="207.50"></text></g><g><title>all (80,883,582 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (80,883,582 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (260,012 samples, 0.32%)</title><rect x="99.6785%" y="197" width="0.3215%" height="15" fill="rgb(222,74,54)"/><text x="99.9285%" y="207.50"></text></g></svg></svg>