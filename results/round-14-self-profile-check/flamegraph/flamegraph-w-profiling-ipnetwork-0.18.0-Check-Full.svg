<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (271,183 samples, 0.14%)</title><rect x="12.8525%" y="117" width="0.1358%" height="15" fill="rgb(227,0,7)"/><text x="13.1025%" y="127.50"></text></g><g><title>item_attrs (299,903 samples, 0.15%)</title><rect x="13.4820%" y="85" width="0.1502%" height="15" fill="rgb(217,0,24)"/><text x="13.7320%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (290,252 samples, 0.15%)</title><rect x="13.4868%" y="69" width="0.1453%" height="15" fill="rgb(221,193,54)"/><text x="13.7368%" y="79.50"></text></g><g><title>codegen_fn_attrs (419,285 samples, 0.21%)</title><rect x="13.4323%" y="101" width="0.2099%" height="15" fill="rgb(248,212,6)"/><text x="13.6823%" y="111.50"></text></g><g><title>is_copy_raw (234,933 samples, 0.12%)</title><rect x="16.6944%" y="53" width="0.1176%" height="15" fill="rgb(208,68,35)"/><text x="16.9444%" y="63.50"></text></g><g><title>evaluate_obligation (210,982 samples, 0.11%)</title><rect x="16.7064%" y="37" width="0.1056%" height="15" fill="rgb(232,128,0)"/><text x="16.9564%" y="47.50"></text></g><g><title>adt_drop_tys (426,603 samples, 0.21%)</title><rect x="16.6639%" y="69" width="0.2136%" height="15" fill="rgb(207,160,47)"/><text x="16.9139%" y="79.50"></text></g><g><title>is_copy_raw (1,050,735 samples, 0.53%)</title><rect x="16.8775%" y="69" width="0.5261%" height="15" fill="rgb(228,23,34)"/><text x="17.1275%" y="79.50"></text></g><g><title>evaluate_obligation (891,822 samples, 0.45%)</title><rect x="16.9570%" y="53" width="0.4465%" height="15" fill="rgb(218,30,26)"/><text x="17.2070%" y="63.50"></text></g><g><title>needs_drop_raw (1,621,520 samples, 0.81%)</title><rect x="16.5956%" y="85" width="0.8119%" height="15" fill="rgb(220,122,19)"/><text x="16.8456%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (502,736 samples, 0.25%)</title><rect x="17.6015%" y="69" width="0.2517%" height="15" fill="rgb(250,228,42)"/><text x="17.8515%" y="79.50"></text></g><g><title>resolve_instance (1,332,246 samples, 0.67%)</title><rect x="17.4209%" y="85" width="0.6671%" height="15" fill="rgb(240,193,28)"/><text x="17.6709%" y="95.50"></text></g><g><title>thir_body (2,046,930 samples, 1.02%)</title><rect x="18.1133%" y="85" width="1.0249%" height="15" fill="rgb(216,20,37)"/><text x="18.3633%" y="95.50"></text></g><g><title>mir_const (14,183,188 samples, 7.10%)</title><rect x="12.0661%" y="133" width="7.1015%" height="15" fill="rgb(206,188,39)"/><text x="12.3161%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (12,341,442 samples, 6.18%)</title><rect x="12.9883%" y="117" width="6.1793%" height="15" fill="rgb(217,207,13)"/><text x="13.2383%" y="127.50">unsafety..</text></g><g><title>mir_built (11,035,379 samples, 5.53%)</title><rect x="13.6422%" y="101" width="5.5254%" height="15" fill="rgb(231,73,38)"/><text x="13.8922%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (16,433,919 samples, 8.23%)</title><rect x="11.2808%" y="149" width="8.2284%" height="15" fill="rgb(225,20,46)"/><text x="11.5308%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (682,356 samples, 0.34%)</title><rect x="19.1676%" y="133" width="0.3417%" height="15" fill="rgb(210,31,41)"/><text x="19.4176%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (520,794 samples, 0.26%)</title><rect x="19.5094%" y="149" width="0.2608%" height="15" fill="rgb(221,200,47)"/><text x="19.7594%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (912,809 samples, 0.46%)</title><rect x="19.7702%" y="149" width="0.4570%" height="15" fill="rgb(226,26,5)"/><text x="20.0202%" y="159.50"></text></g><g><title>normalize_projection_ty (526,625 samples, 0.26%)</title><rect x="19.9636%" y="133" width="0.2637%" height="15" fill="rgb(249,33,26)"/><text x="20.2136%" y="143.50"></text></g><g><title>type_op_normalize_predicate (442,486 samples, 0.22%)</title><rect x="20.2272%" y="149" width="0.2216%" height="15" fill="rgb(235,183,28)"/><text x="20.4772%" y="159.50"></text></g><g><title>normalize_projection_ty (254,254 samples, 0.13%)</title><rect x="20.3215%" y="133" width="0.1273%" height="15" fill="rgb(221,5,38)"/><text x="20.5715%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,290,773 samples, 1.65%)</title><rect x="20.5486%" y="149" width="1.6477%" height="15" fill="rgb(247,18,42)"/><text x="20.7986%" y="159.50"></text></g><g><title>MIR_borrow_checking (43,199,211 samples, 21.63%)</title><rect x="0.5740%" y="181" width="21.6298%" height="15" fill="rgb(241,131,45)"/><text x="0.8240%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,964,151 samples, 21.51%)</title><rect x="0.6917%" y="165" width="21.5121%" height="15" fill="rgb(249,31,29)"/><text x="0.9417%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (324,843 samples, 0.16%)</title><rect x="22.2037%" y="181" width="0.1626%" height="15" fill="rgb(225,111,53)"/><text x="22.4537%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (234,303 samples, 0.12%)</title><rect x="22.2491%" y="165" width="0.1173%" height="15" fill="rgb(238,160,17)"/><text x="22.4991%" y="175.50"></text></g><g><title>hir_module_items (279,543 samples, 0.14%)</title><rect x="22.3664%" y="181" width="0.1400%" height="15" fill="rgb(214,148,48)"/><text x="22.6164%" y="191.50"></text></g><g><title>should_inherit_track_caller (347,073 samples, 0.17%)</title><rect x="22.8263%" y="133" width="0.1738%" height="15" fill="rgb(232,36,49)"/><text x="23.0763%" y="143.50"></text></g><g><title>codegen_fn_attrs (579,265 samples, 0.29%)</title><rect x="22.7199%" y="149" width="0.2900%" height="15" fill="rgb(209,103,24)"/><text x="22.9699%" y="159.50"></text></g><g><title>check_mod_attrs (981,911 samples, 0.49%)</title><rect x="22.5183%" y="165" width="0.4916%" height="15" fill="rgb(229,88,8)"/><text x="22.7683%" y="175.50"></text></g><g><title>check_mod_const_bodies (202,202 samples, 0.10%)</title><rect x="23.0100%" y="165" width="0.1012%" height="15" fill="rgb(213,181,19)"/><text x="23.2600%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (512,825 samples, 0.26%)</title><rect x="23.1720%" y="165" width="0.2568%" height="15" fill="rgb(254,191,54)"/><text x="23.4220%" y="175.50"></text></g><g><title>misc_checking_1 (1,903,991 samples, 0.95%)</title><rect x="22.5066%" y="181" width="0.9533%" height="15" fill="rgb(241,83,37)"/><text x="22.7566%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,067,012 samples, 0.53%)</title><rect x="23.4607%" y="165" width="0.5343%" height="15" fill="rgb(233,36,39)"/><text x="23.7107%" y="175.50"></text></g><g><title>check_mod_liveness (899,699 samples, 0.45%)</title><rect x="23.5445%" y="149" width="0.4505%" height="15" fill="rgb(226,3,54)"/><text x="23.7945%" y="159.50"></text></g><g><title>type_uninhabited_from (477,074 samples, 0.24%)</title><rect x="23.7561%" y="133" width="0.2389%" height="15" fill="rgb(245,192,40)"/><text x="24.0061%" y="143.50"></text></g><g><title>type_uninhabited_from (444,804 samples, 0.22%)</title><rect x="23.7722%" y="117" width="0.2227%" height="15" fill="rgb(238,167,29)"/><text x="24.0222%" y="127.50"></text></g><g><title>misc_checking_2 (2,353,966 samples, 1.18%)</title><rect x="23.4599%" y="181" width="1.1786%" height="15" fill="rgb(232,182,51)"/><text x="23.7099%" y="191.50"></text></g><g><title>match_checking (1,285,364 samples, 0.64%)</title><rect x="23.9949%" y="165" width="0.6436%" height="15" fill="rgb(231,60,39)"/><text x="24.2449%" y="175.50"></text></g><g><title>check_match (1,229,774 samples, 0.62%)</title><rect x="24.0228%" y="149" width="0.6157%" height="15" fill="rgb(208,69,12)"/><text x="24.2728%" y="159.50"></text></g><g><title>check_private_in_public (340,224 samples, 0.17%)</title><rect x="24.6439%" y="165" width="0.1703%" height="15" fill="rgb(235,93,37)"/><text x="24.8939%" y="175.50"></text></g><g><title>death_checking (764,908 samples, 0.38%)</title><rect x="24.8142%" y="165" width="0.3830%" height="15" fill="rgb(213,116,39)"/><text x="25.0642%" y="175.50"></text></g><g><title>param_env (235,452 samples, 0.12%)</title><rect x="25.7910%" y="133" width="0.1179%" height="15" fill="rgb(222,207,29)"/><text x="26.0410%" y="143.50"></text></g><g><title>crate_lints (2,562,598 samples, 1.28%)</title><rect x="25.1980%" y="149" width="1.2831%" height="15" fill="rgb(206,96,30)"/><text x="25.4480%" y="159.50"></text></g><g><title>type_of (1,134,149 samples, 0.57%)</title><rect x="25.9132%" y="133" width="0.5679%" height="15" fill="rgb(218,138,4)"/><text x="26.1632%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (898,887 samples, 0.45%)</title><rect x="26.0310%" y="117" width="0.4501%" height="15" fill="rgb(250,191,14)"/><text x="26.2810%" y="127.50"></text></g><g><title>lint_checking (3,453,048 samples, 1.73%)</title><rect x="25.1972%" y="165" width="1.7289%" height="15" fill="rgb(239,60,40)"/><text x="25.4472%" y="175.50"></text></g><g><title>module_lints (888,970 samples, 0.45%)</title><rect x="26.4811%" y="149" width="0.4451%" height="15" fill="rgb(206,27,48)"/><text x="26.7311%" y="159.50"></text></g><g><title>lint_mod (882,930 samples, 0.44%)</title><rect x="26.4841%" y="133" width="0.4421%" height="15" fill="rgb(225,35,8)"/><text x="26.7341%" y="143.50"></text></g><g><title>privacy_access_levels (499,856 samples, 0.25%)</title><rect x="26.9262%" y="165" width="0.2503%" height="15" fill="rgb(250,213,24)"/><text x="27.1762%" y="175.50"></text></g><g><title>privacy_checking_modules (1,403,486 samples, 0.70%)</title><rect x="27.1764%" y="165" width="0.7027%" height="15" fill="rgb(247,123,22)"/><text x="27.4264%" y="175.50"></text></g><g><title>check_mod_privacy (1,399,366 samples, 0.70%)</title><rect x="27.1785%" y="149" width="0.7007%" height="15" fill="rgb(231,138,38)"/><text x="27.4285%" y="159.50"></text></g><g><title>misc_checking_3 (6,489,082 samples, 3.25%)</title><rect x="24.6385%" y="181" width="3.2491%" height="15" fill="rgb(231,145,46)"/><text x="24.8885%" y="191.50">mis..</text></g><g><title>adt_destructor (350,154 samples, 0.18%)</title><rect x="27.9832%" y="133" width="0.1753%" height="15" fill="rgb(251,118,11)"/><text x="28.2332%" y="143.50"></text></g><g><title>coherent_trait (346,484 samples, 0.17%)</title><rect x="27.9851%" y="117" width="0.1735%" height="15" fill="rgb(217,147,25)"/><text x="28.2351%" y="127.50"></text></g><g><title>specialization_graph_of (345,224 samples, 0.17%)</title><rect x="27.9857%" y="101" width="0.1729%" height="15" fill="rgb(247,81,37)"/><text x="28.2357%" y="111.50"></text></g><g><title>impl_parent (3,403,218 samples, 1.70%)</title><rect x="31.4386%" y="117" width="1.7040%" height="15" fill="rgb(209,12,38)"/><text x="31.6886%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,858,770 samples, 0.93%)</title><rect x="32.2119%" y="101" width="0.9307%" height="15" fill="rgb(227,1,9)"/><text x="32.4619%" y="111.50"></text></g><g><title>impl_trait_ref (6,482,444 samples, 3.25%)</title><rect x="33.1432%" y="117" width="3.2457%" height="15" fill="rgb(248,47,43)"/><text x="33.3932%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,120,030 samples, 2.56%)</title><rect x="33.8254%" y="101" width="2.5636%" height="15" fill="rgb(221,10,30)"/><text x="34.0754%" y="111.50">me..</text></g><g><title>predicates_of (199,952 samples, 0.10%)</title><rect x="36.4645%" y="117" width="0.1001%" height="15" fill="rgb(210,229,1)"/><text x="36.7145%" y="127.50"></text></g><g><title>trait_impls_of (1,177,454 samples, 0.59%)</title><rect x="36.5662%" y="117" width="0.5895%" height="15" fill="rgb(222,148,37)"/><text x="36.8162%" y="127.50"></text></g><g><title>implementations_of_trait (347,675 samples, 0.17%)</title><rect x="36.9816%" y="101" width="0.1741%" height="15" fill="rgb(234,67,33)"/><text x="37.2316%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (269,704 samples, 0.14%)</title><rect x="37.0207%" y="85" width="0.1350%" height="15" fill="rgb(247,98,35)"/><text x="37.2707%" y="95.50"></text></g><g><title>coherent_trait (18,398,515 samples, 9.21%)</title><rect x="27.9520%" y="149" width="9.2121%" height="15" fill="rgb(247,138,52)"/><text x="28.2020%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (17,808,098 samples, 8.92%)</title><rect x="28.2476%" y="133" width="8.9165%" height="15" fill="rgb(213,79,30)"/><text x="28.4976%" y="143.50">specializatio..</text></g><g><title>coherence_checking (18,519,225 samples, 9.27%)</title><rect x="27.9379%" y="165" width="9.2725%" height="15" fill="rgb(246,177,23)"/><text x="28.1879%" y="175.50">coherence_che..</text></g><g><title>associated_item (872,307 samples, 0.44%)</title><rect x="54.2250%" y="101" width="0.4368%" height="15" fill="rgb(230,62,27)"/><text x="54.4750%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (704,652 samples, 0.35%)</title><rect x="54.3090%" y="85" width="0.3528%" height="15" fill="rgb(216,154,8)"/><text x="54.5590%" y="95.50"></text></g><g><title>associated_items (1,193,351 samples, 0.60%)</title><rect x="54.0836%" y="117" width="0.5975%" height="15" fill="rgb(244,35,45)"/><text x="54.3336%" y="127.50"></text></g><g><title>adt_dtorck_constraint (247,213 samples, 0.12%)</title><rect x="54.8595%" y="101" width="0.1238%" height="15" fill="rgb(251,115,12)"/><text x="55.1095%" y="111.50"></text></g><g><title>dropck_outlives (548,258 samples, 0.27%)</title><rect x="54.7267%" y="117" width="0.2745%" height="15" fill="rgb(240,54,50)"/><text x="54.9767%" y="127.50"></text></g><g><title>generics_of (323,231 samples, 0.16%)</title><rect x="56.4827%" y="101" width="0.1618%" height="15" fill="rgb(233,84,52)"/><text x="56.7327%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (235,660 samples, 0.12%)</title><rect x="56.5266%" y="85" width="0.1180%" height="15" fill="rgb(207,117,47)"/><text x="56.7766%" y="95.50"></text></g><g><title>impl_trait_ref (234,543 samples, 0.12%)</title><rect x="56.7415%" y="101" width="0.1174%" height="15" fill="rgb(249,43,39)"/><text x="56.9915%" y="111.50"></text></g><g><title>predicates_of (704,545 samples, 0.35%)</title><rect x="56.8819%" y="101" width="0.3528%" height="15" fill="rgb(209,38,44)"/><text x="57.1319%" y="111.50"></text></g><g><title>predicates_defined_on (399,111 samples, 0.20%)</title><rect x="57.0349%" y="85" width="0.1998%" height="15" fill="rgb(236,212,23)"/><text x="57.2849%" y="95.50"></text></g><g><title>specializes (1,512,358 samples, 0.76%)</title><rect x="57.2347%" y="101" width="0.7572%" height="15" fill="rgb(242,79,21)"/><text x="57.4847%" y="111.50"></text></g><g><title>param_env (1,028,952 samples, 0.52%)</title><rect x="57.4767%" y="85" width="0.5152%" height="15" fill="rgb(211,96,35)"/><text x="57.7267%" y="95.50"></text></g><g><title>def_span (338,174 samples, 0.17%)</title><rect x="57.8226%" y="69" width="0.1693%" height="15" fill="rgb(253,215,40)"/><text x="58.0726%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (300,244 samples, 0.15%)</title><rect x="57.8416%" y="53" width="0.1503%" height="15" fill="rgb(211,81,21)"/><text x="58.0916%" y="63.50"></text></g><g><title>trait_impls_of (463,042 samples, 0.23%)</title><rect x="58.0005%" y="101" width="0.2318%" height="15" fill="rgb(208,190,38)"/><text x="58.2505%" y="111.50"></text></g><g><title>evaluate_obligation (6,460,800 samples, 3.23%)</title><rect x="55.0013%" y="117" width="3.2349%" height="15" fill="rgb(235,213,38)"/><text x="55.2513%" y="127.50">eva..</text></g><g><title>method_autoderef_steps (302,657 samples, 0.15%)</title><rect x="58.6424%" y="117" width="0.1515%" height="15" fill="rgb(237,122,38)"/><text x="58.8924%" y="127.50"></text></g><g><title>predicates_of (381,565 samples, 0.19%)</title><rect x="58.9116%" y="117" width="0.1910%" height="15" fill="rgb(244,218,35)"/><text x="59.1616%" y="127.50"></text></g><g><title>predicates_defined_on (256,583 samples, 0.13%)</title><rect x="58.9742%" y="101" width="0.1285%" height="15" fill="rgb(240,68,47)"/><text x="59.2242%" y="111.50"></text></g><g><title>impl_trait_ref (257,064 samples, 0.13%)</title><rect x="61.7264%" y="85" width="0.1287%" height="15" fill="rgb(210,16,53)"/><text x="61.9764%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (234,463 samples, 0.12%)</title><rect x="61.7377%" y="69" width="0.1174%" height="15" fill="rgb(235,124,12)"/><text x="61.9877%" y="79.50"></text></g><g><title>evaluate_obligation (1,111,591 samples, 0.56%)</title><rect x="61.3557%" y="101" width="0.5566%" height="15" fill="rgb(224,169,11)"/><text x="61.6057%" y="111.50"></text></g><g><title>item_attrs (392,965 samples, 0.20%)</title><rect x="62.0248%" y="101" width="0.1968%" height="15" fill="rgb(250,166,2)"/><text x="62.2748%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (391,585 samples, 0.20%)</title><rect x="62.0255%" y="85" width="0.1961%" height="15" fill="rgb(242,216,29)"/><text x="62.2755%" y="95.50"></text></g><g><title>typeck (6,372,142 samples, 3.19%)</title><rect x="59.1835%" y="117" width="3.1905%" height="15" fill="rgb(230,116,27)"/><text x="59.4335%" y="127.50">typ..</text></g><g><title>item_bodies_checking (50,282,500 samples, 25.18%)</title><rect x="37.2380%" y="165" width="25.1764%" height="15" fill="rgb(228,99,48)"/><text x="37.4880%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,279,460 samples, 25.17%)</title><rect x="37.2396%" y="149" width="25.1748%" height="15" fill="rgb(253,11,6)"/><text x="37.4896%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (50,121,108 samples, 25.10%)</title><rect x="37.3189%" y="133" width="25.0956%" height="15" fill="rgb(247,143,39)"/><text x="37.5689%" y="143.50">typeck</text></g><g><title>item_types_checking (3,074,333 samples, 1.54%)</title><rect x="62.4144%" y="165" width="1.5393%" height="15" fill="rgb(236,97,10)"/><text x="62.6644%" y="175.50"></text></g><g><title>check_mod_item_types (3,068,373 samples, 1.54%)</title><rect x="62.4174%" y="149" width="1.5363%" height="15" fill="rgb(233,208,19)"/><text x="62.6674%" y="159.50"></text></g><g><title>fn_sig (800,116 samples, 0.40%)</title><rect x="64.1915%" y="133" width="0.4006%" height="15" fill="rgb(216,164,2)"/><text x="64.4415%" y="143.50"></text></g><g><title>named_region_map (725,681 samples, 0.36%)</title><rect x="64.7615%" y="117" width="0.3633%" height="15" fill="rgb(220,129,5)"/><text x="65.0115%" y="127.50"></text></g><g><title>resolve_lifetimes (686,730 samples, 0.34%)</title><rect x="64.7810%" y="101" width="0.3438%" height="15" fill="rgb(242,17,10)"/><text x="65.0310%" y="111.50"></text></g><g><title>lint_levels (283,343 samples, 0.14%)</title><rect x="64.9830%" y="85" width="0.1419%" height="15" fill="rgb(242,107,0)"/><text x="65.2330%" y="95.50"></text></g><g><title>generics_of (1,086,826 samples, 0.54%)</title><rect x="64.5922%" y="133" width="0.5442%" height="15" fill="rgb(251,28,31)"/><text x="64.8422%" y="143.50"></text></g><g><title>explicit_predicates_of (201,542 samples, 0.10%)</title><rect x="65.3126%" y="101" width="0.1009%" height="15" fill="rgb(233,223,10)"/><text x="65.5626%" y="111.50"></text></g><g><title>predicates_of (673,128 samples, 0.34%)</title><rect x="65.1932%" y="133" width="0.3370%" height="15" fill="rgb(215,21,27)"/><text x="65.4432%" y="143.50"></text></g><g><title>predicates_defined_on (579,337 samples, 0.29%)</title><rect x="65.2402%" y="117" width="0.2901%" height="15" fill="rgb(232,23,21)"/><text x="65.4902%" y="127.50"></text></g><g><title>inferred_outlives_of (233,035 samples, 0.12%)</title><rect x="65.4136%" y="101" width="0.1167%" height="15" fill="rgb(244,5,23)"/><text x="65.6636%" y="111.50"></text></g><g><title>inferred_outlives_crate (201,023 samples, 0.10%)</title><rect x="65.4296%" y="85" width="0.1007%" height="15" fill="rgb(226,81,46)"/><text x="65.6796%" y="95.50"></text></g><g><title>type_collecting (3,292,167 samples, 1.65%)</title><rect x="63.9550%" y="165" width="1.6484%" height="15" fill="rgb(247,70,30)"/><text x="64.2050%" y="175.50"></text></g><g><title>collect_mod_item_types (3,282,847 samples, 1.64%)</title><rect x="63.9597%" y="149" width="1.6437%" height="15" fill="rgb(212,68,19)"/><text x="64.2097%" y="159.50"></text></g><g><title>evaluate_obligation (550,287 samples, 0.28%)</title><rect x="67.2661%" y="133" width="0.2755%" height="15" fill="rgb(240,187,13)"/><text x="67.5161%" y="143.50"></text></g><g><title>implied_outlives_bounds (255,810 samples, 0.13%)</title><rect x="67.5515%" y="133" width="0.1281%" height="15" fill="rgb(223,113,26)"/><text x="67.8015%" y="143.50"></text></g><g><title>param_env (470,027 samples, 0.24%)</title><rect x="67.7058%" y="133" width="0.2353%" height="15" fill="rgb(206,192,2)"/><text x="67.9558%" y="143.50"></text></g><g><title>region_scope_tree (829,199 samples, 0.42%)</title><rect x="67.9663%" y="133" width="0.4152%" height="15" fill="rgb(241,108,4)"/><text x="68.2163%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,251,793 samples, 2.63%)</title><rect x="65.7825%" y="149" width="2.6296%" height="15" fill="rgb(247,173,49)"/><text x="66.0325%" y="159.50">ch..</text></g><g><title>adt_sized_constraint (209,323 samples, 0.10%)</title><rect x="69.7443%" y="117" width="0.1048%" height="15" fill="rgb(224,114,35)"/><text x="69.9943%" y="127.50"></text></g><g><title>evaluate_obligation (852,441 samples, 0.43%)</title><rect x="69.4226%" y="133" width="0.4268%" height="15" fill="rgb(245,159,27)"/><text x="69.6726%" y="143.50"></text></g><g><title>param_env (352,561 samples, 0.18%)</title><rect x="69.9035%" y="133" width="0.1765%" height="15" fill="rgb(245,172,44)"/><text x="70.1535%" y="143.50"></text></g><g><title>analysis (139,597,802 samples, 69.90%)</title><rect x="0.3359%" y="197" width="69.8964%" height="15" fill="rgb(236,23,11)"/><text x="0.5859%" y="207.50">analysis</text></g><g><title>type_check_crate (84,571,271 samples, 42.34%)</title><rect x="27.8876%" y="181" width="42.3447%" height="15" fill="rgb(205,117,38)"/><text x="28.1376%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,235,554 samples, 4.62%)</title><rect x="65.6081%" y="165" width="4.6242%" height="15" fill="rgb(237,72,25)"/><text x="65.8581%" y="175.50">wf_ch..</text></g><g><title>check_item_well_formed (3,635,363 samples, 1.82%)</title><rect x="68.4121%" y="149" width="1.8202%" height="15" fill="rgb(244,70,9)"/><text x="68.6621%" y="159.50">c..</text></g><g><title>codegen_crate (372,954 samples, 0.19%)</title><rect x="70.2375%" y="197" width="0.1867%" height="15" fill="rgb(217,125,39)"/><text x="70.4875%" y="207.50"></text></g><g><title>AST_validation (351,694 samples, 0.18%)</title><rect x="70.5191%" y="181" width="0.1761%" height="15" fill="rgb(235,36,10)"/><text x="70.7691%" y="191.50"></text></g><g><title>complete_gated_feature_checking (221,323 samples, 0.11%)</title><rect x="70.6952%" y="181" width="0.1108%" height="15" fill="rgb(251,123,47)"/><text x="70.9452%" y="191.50"></text></g><g><title>metadata_load_macro (243,543 samples, 0.12%)</title><rect x="84.0362%" y="149" width="0.1219%" height="15" fill="rgb(221,13,13)"/><text x="84.2862%" y="159.50"></text></g><g><title>metadata_register_crate (2,296,706 samples, 1.15%)</title><rect x="84.1581%" y="149" width="1.1500%" height="15" fill="rgb(238,131,9)"/><text x="84.4081%" y="159.50"></text></g><g><title>metadata_register_crate (856,349 samples, 0.43%)</title><rect x="84.8793%" y="133" width="0.4288%" height="15" fill="rgb(211,50,8)"/><text x="85.1293%" y="143.50"></text></g><g><title>macro_expand_crate (29,416,977 samples, 14.73%)</title><rect x="70.8392%" y="181" width="14.7290%" height="15" fill="rgb(245,182,24)"/><text x="71.0892%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (29,402,547 samples, 14.72%)</title><rect x="70.8465%" y="165" width="14.7218%" height="15" fill="rgb(242,14,37)"/><text x="71.0965%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (519,725 samples, 0.26%)</title><rect x="85.3081%" y="149" width="0.2602%" height="15" fill="rgb(246,228,12)"/><text x="85.5581%" y="159.50"></text></g><g><title>finalize_macro_resolutions (436,565 samples, 0.22%)</title><rect x="85.7125%" y="165" width="0.2186%" height="15" fill="rgb(213,55,15)"/><text x="85.9625%" y="175.50"></text></g><g><title>late_resolve_crate (6,524,883 samples, 3.27%)</title><rect x="85.9311%" y="165" width="3.2670%" height="15" fill="rgb(209,9,3)"/><text x="86.1811%" y="175.50">lat..</text></g><g><title>configure_and_expand (37,834,021 samples, 18.94%)</title><rect x="70.4242%" y="197" width="18.9434%" height="15" fill="rgb(230,59,30)"/><text x="70.6742%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,407,082 samples, 3.71%)</title><rect x="85.6590%" y="181" width="3.7087%" height="15" fill="rgb(209,121,21)"/><text x="85.9090%" y="191.50">reso..</text></g><g><title>drop_ast (323,114 samples, 0.16%)</title><rect x="89.3677%" y="197" width="0.1618%" height="15" fill="rgb(220,109,13)"/><text x="89.6177%" y="207.50"></text></g><g><title>early_lint_checks (589,886 samples, 0.30%)</title><rect x="89.5390%" y="197" width="0.2954%" height="15" fill="rgb(232,18,1)"/><text x="89.7890%" y="207.50"></text></g><g><title>free_global_ctxt (4,559,880 samples, 2.28%)</title><rect x="89.8344%" y="197" width="2.2831%" height="15" fill="rgb(215,41,42)"/><text x="90.0844%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,565,918 samples, 0.78%)</title><rect x="92.1175%" y="197" width="0.7841%" height="15" fill="rgb(224,123,36)"/><text x="92.3675%" y="207.50"></text></g><g><title>hir_lowering (9,649,708 samples, 4.83%)</title><rect x="92.9016%" y="197" width="4.8316%" height="15" fill="rgb(240,125,3)"/><text x="93.1516%" y="207.50">hir_lo..</text></g><g><title>parse_crate (2,594,489 samples, 1.30%)</title><rect x="97.7591%" y="197" width="1.2991%" height="15" fill="rgb(205,98,50)"/><text x="98.0091%" y="207.50"></text></g><g><title>prepare_outputs (289,173 samples, 0.14%)</title><rect x="99.0616%" y="197" width="0.1448%" height="15" fill="rgb(205,185,37)"/><text x="99.3116%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,129,783 samples, 0.57%)</title><rect x="99.2063%" y="197" width="0.5657%" height="15" fill="rgb(238,207,15)"/><text x="99.4563%" y="207.50"></text></g><g><title>all (199,721,011 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (199,721,011 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (362,274 samples, 0.18%)</title><rect x="99.8186%" y="197" width="0.1814%" height="15" fill="rgb(207,46,11)"/><text x="100.0686%" y="207.50"></text></g></svg></svg>