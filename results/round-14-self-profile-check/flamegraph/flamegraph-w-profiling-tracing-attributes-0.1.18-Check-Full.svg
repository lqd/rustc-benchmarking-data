<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (375,957 samples, 0.11%)</title><rect x="10.6778%" y="213" width="0.1062%" height="15" fill="rgb(227,0,7)"/><text x="10.9278%" y="223.50"></text></g><g><title>param_env (603,244 samples, 0.17%)</title><rect x="11.9521%" y="181" width="0.1704%" height="15" fill="rgb(217,0,24)"/><text x="12.2021%" y="191.50"></text></g><g><title>item_attrs (471,555 samples, 0.13%)</title><rect x="12.5109%" y="149" width="0.1332%" height="15" fill="rgb(221,193,54)"/><text x="12.7609%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (452,125 samples, 0.13%)</title><rect x="12.5164%" y="133" width="0.1277%" height="15" fill="rgb(248,212,6)"/><text x="12.7664%" y="143.50"></text></g><g><title>codegen_fn_attrs (682,320 samples, 0.19%)</title><rect x="12.4629%" y="165" width="0.1927%" height="15" fill="rgb(208,68,35)"/><text x="12.7129%" y="175.50"></text></g><g><title>adt_drop_tys (454,125 samples, 0.13%)</title><rect x="15.1736%" y="117" width="0.1282%" height="15" fill="rgb(232,128,0)"/><text x="15.4236%" y="127.50"></text></g><g><title>adt_drop_tys (1,003,247 samples, 0.28%)</title><rect x="15.1435%" y="133" width="0.2833%" height="15" fill="rgb(207,160,47)"/><text x="15.3935%" y="143.50"></text></g><g><title>is_copy_raw (2,083,199 samples, 0.59%)</title><rect x="15.4273%" y="133" width="0.5883%" height="15" fill="rgb(228,23,34)"/><text x="15.6773%" y="143.50"></text></g><g><title>evaluate_obligation (1,738,853 samples, 0.49%)</title><rect x="15.5245%" y="117" width="0.4911%" height="15" fill="rgb(218,30,26)"/><text x="15.7745%" y="127.50"></text></g><g><title>needs_drop_raw (3,494,099 samples, 0.99%)</title><rect x="15.0438%" y="149" width="0.9867%" height="15" fill="rgb(220,122,19)"/><text x="15.2938%" y="159.50"></text></g><g><title>resolve_instance (1,225,383 samples, 0.35%)</title><rect x="16.0306%" y="149" width="0.3461%" height="15" fill="rgb(250,228,42)"/><text x="16.2806%" y="159.50"></text></g><g><title>thir_body (3,186,349 samples, 0.90%)</title><rect x="16.3950%" y="149" width="0.8998%" height="15" fill="rgb(240,193,28)"/><text x="16.6450%" y="159.50"></text></g><g><title>mir_const (20,920,174 samples, 5.91%)</title><rect x="11.4024%" y="197" width="5.9079%" height="15" fill="rgb(216,20,37)"/><text x="11.6524%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (18,370,405 samples, 5.19%)</title><rect x="12.1224%" y="181" width="5.1878%" height="15" fill="rgb(206,188,39)"/><text x="12.3724%" y="191.50">unsafe..</text></g><g><title>mir_built (16,482,609 samples, 4.65%)</title><rect x="12.6556%" y="165" width="4.6547%" height="15" fill="rgb(217,207,13)"/><text x="12.9056%" y="175.50">mir_b..</text></g><g><title>mir_const_qualif (581,214 samples, 0.16%)</title><rect x="17.3103%" y="197" width="0.1641%" height="15" fill="rgb(231,73,38)"/><text x="17.5603%" y="207.50"></text></g><g><title>mir_promoted (23,559,636 samples, 6.65%)</title><rect x="10.8213%" y="213" width="6.6533%" height="15" fill="rgb(225,20,46)"/><text x="11.0713%" y="223.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (849,899 samples, 0.24%)</title><rect x="17.4752%" y="213" width="0.2400%" height="15" fill="rgb(210,31,41)"/><text x="17.7252%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (1,580,493 samples, 0.45%)</title><rect x="17.7152%" y="213" width="0.4463%" height="15" fill="rgb(221,200,47)"/><text x="17.9652%" y="223.50"></text></g><g><title>normalize_projection_ty (1,073,525 samples, 0.30%)</title><rect x="17.8584%" y="197" width="0.3032%" height="15" fill="rgb(226,26,5)"/><text x="18.1084%" y="207.50"></text></g><g><title>type_op_normalize_predicate (2,030,054 samples, 0.57%)</title><rect x="18.1615%" y="213" width="0.5733%" height="15" fill="rgb(249,33,26)"/><text x="18.4115%" y="223.50"></text></g><g><title>normalize_projection_ty (1,270,106 samples, 0.36%)</title><rect x="18.3762%" y="197" width="0.3587%" height="15" fill="rgb(235,183,28)"/><text x="18.6262%" y="207.50"></text></g><g><title>type_op_prove_predicate (7,891,016 samples, 2.23%)</title><rect x="18.7426%" y="213" width="2.2284%" height="15" fill="rgb(221,5,38)"/><text x="18.9926%" y="223.50">t..</text></g><g><title>evaluate_obligation (535,185 samples, 0.15%)</title><rect x="20.8199%" y="197" width="0.1511%" height="15" fill="rgb(247,18,42)"/><text x="21.0699%" y="207.50"></text></g><g><title>MIR_borrow_checking (72,636,127 samples, 20.51%)</title><rect x="0.4636%" y="245" width="20.5126%" height="15" fill="rgb(241,131,45)"/><text x="0.7136%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (72,361,814 samples, 20.44%)</title><rect x="0.5411%" y="229" width="20.4351%" height="15" fill="rgb(249,31,29)"/><text x="0.7911%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (369,884 samples, 0.10%)</title><rect x="21.0465%" y="245" width="0.1045%" height="15" fill="rgb(225,111,53)"/><text x="21.2965%" y="255.50"></text></g><g><title>codegen_fn_attrs (546,096 samples, 0.15%)</title><rect x="21.3128%" y="213" width="0.1542%" height="15" fill="rgb(238,160,17)"/><text x="21.5628%" y="223.50"></text></g><g><title>check_mod_attrs (1,099,481 samples, 0.31%)</title><rect x="21.1566%" y="229" width="0.3105%" height="15" fill="rgb(214,148,48)"/><text x="21.4066%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (617,248 samples, 0.17%)</title><rect x="21.5750%" y="229" width="0.1743%" height="15" fill="rgb(232,36,49)"/><text x="21.8250%" y="239.50"></text></g><g><title>misc_checking_1 (2,196,664 samples, 0.62%)</title><rect x="21.1511%" y="245" width="0.6203%" height="15" fill="rgb(209,103,24)"/><text x="21.4011%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (1,670,878 samples, 0.47%)</title><rect x="21.7720%" y="229" width="0.4719%" height="15" fill="rgb(229,88,8)"/><text x="22.0220%" y="239.50"></text></g><g><title>check_mod_liveness (1,413,376 samples, 0.40%)</title><rect x="21.8447%" y="213" width="0.3991%" height="15" fill="rgb(213,181,19)"/><text x="22.0947%" y="223.50"></text></g><g><title>type_uninhabited_from (415,205 samples, 0.12%)</title><rect x="22.1266%" y="197" width="0.1173%" height="15" fill="rgb(254,191,54)"/><text x="22.3766%" y="207.50"></text></g><g><title>misc_checking_2 (3,586,190 samples, 1.01%)</title><rect x="21.7714%" y="245" width="1.0127%" height="15" fill="rgb(241,83,37)"/><text x="22.0214%" y="255.50"></text></g><g><title>match_checking (1,913,352 samples, 0.54%)</title><rect x="22.2438%" y="229" width="0.5403%" height="15" fill="rgb(233,36,39)"/><text x="22.4938%" y="239.50"></text></g><g><title>check_match (1,848,322 samples, 0.52%)</title><rect x="22.2622%" y="213" width="0.5220%" height="15" fill="rgb(226,3,54)"/><text x="22.5122%" y="223.50"></text></g><g><title>check_private_in_public (423,865 samples, 0.12%)</title><rect x="22.7872%" y="229" width="0.1197%" height="15" fill="rgb(245,192,40)"/><text x="23.0372%" y="239.50"></text></g><g><title>death_checking (836,999 samples, 0.24%)</title><rect x="22.9069%" y="229" width="0.2364%" height="15" fill="rgb(238,167,29)"/><text x="23.1569%" y="239.50"></text></g><g><title>eval_to_const_value_raw (354,314 samples, 0.10%)</title><rect x="23.4489%" y="149" width="0.1001%" height="15" fill="rgb(232,182,51)"/><text x="23.6989%" y="159.50"></text></g><g><title>eval_to_allocation_raw (397,965 samples, 0.11%)</title><rect x="23.4369%" y="197" width="0.1124%" height="15" fill="rgb(231,60,39)"/><text x="23.6869%" y="207.50"></text></g><g><title>eval_to_allocation_raw (397,335 samples, 0.11%)</title><rect x="23.4371%" y="181" width="0.1122%" height="15" fill="rgb(208,69,12)"/><text x="23.6871%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (363,394 samples, 0.10%)</title><rect x="23.4467%" y="165" width="0.1026%" height="15" fill="rgb(235,93,37)"/><text x="23.6967%" y="175.50"></text></g><g><title>crate_lints (2,172,674 samples, 0.61%)</title><rect x="23.1437%" y="213" width="0.6136%" height="15" fill="rgb(213,116,39)"/><text x="23.3937%" y="223.50"></text></g><g><title>lint_checking (3,814,072 samples, 1.08%)</title><rect x="23.1433%" y="229" width="1.0771%" height="15" fill="rgb(222,207,29)"/><text x="23.3933%" y="239.50"></text></g><g><title>module_lints (1,639,858 samples, 0.46%)</title><rect x="23.7573%" y="213" width="0.4631%" height="15" fill="rgb(206,96,30)"/><text x="24.0073%" y="223.50"></text></g><g><title>lint_mod (1,635,478 samples, 0.46%)</title><rect x="23.7585%" y="197" width="0.4619%" height="15" fill="rgb(218,138,4)"/><text x="24.0085%" y="207.50"></text></g><g><title>privacy_checking_modules (2,516,908 samples, 0.71%)</title><rect x="24.2966%" y="229" width="0.7108%" height="15" fill="rgb(250,191,14)"/><text x="24.5466%" y="239.50"></text></g><g><title>check_mod_privacy (2,513,838 samples, 0.71%)</title><rect x="24.2975%" y="213" width="0.7099%" height="15" fill="rgb(239,60,40)"/><text x="24.5475%" y="223.50"></text></g><g><title>misc_checking_3 (7,890,497 samples, 2.23%)</title><rect x="22.7842%" y="245" width="2.2283%" height="15" fill="rgb(206,27,48)"/><text x="23.0342%" y="255.50">m..</text></g><g><title>impl_trait_ref (478,476 samples, 0.14%)</title><rect x="25.1790%" y="149" width="0.1351%" height="15" fill="rgb(225,35,8)"/><text x="25.4290%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (456,966 samples, 0.13%)</title><rect x="25.1850%" y="133" width="0.1290%" height="15" fill="rgb(250,213,24)"/><text x="25.4350%" y="143.50"></text></g><g><title>adt_destructor (668,908 samples, 0.19%)</title><rect x="25.1348%" y="197" width="0.1889%" height="15" fill="rgb(247,123,22)"/><text x="25.3848%" y="207.50"></text></g><g><title>coherent_trait (659,297 samples, 0.19%)</title><rect x="25.1375%" y="181" width="0.1862%" height="15" fill="rgb(231,138,38)"/><text x="25.3875%" y="191.50"></text></g><g><title>specialization_graph_of (658,037 samples, 0.19%)</title><rect x="25.1379%" y="165" width="0.1858%" height="15" fill="rgb(231,145,46)"/><text x="25.3879%" y="175.50"></text></g><g><title>impl_parent (3,692,636 samples, 1.04%)</title><rect x="26.9506%" y="181" width="1.0428%" height="15" fill="rgb(251,118,11)"/><text x="27.2006%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,857,128 samples, 0.52%)</title><rect x="27.4689%" y="165" width="0.5245%" height="15" fill="rgb(217,147,25)"/><text x="27.7189%" y="175.50"></text></g><g><title>impl_trait_ref (6,425,961 samples, 1.81%)</title><rect x="27.9934%" y="181" width="1.8147%" height="15" fill="rgb(247,81,37)"/><text x="28.2434%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,745,363 samples, 1.34%)</title><rect x="28.4680%" y="165" width="1.3401%" height="15" fill="rgb(209,12,38)"/><text x="28.7180%" y="175.50"></text></g><g><title>coherent_trait (17,760,758 samples, 5.02%)</title><rect x="25.1198%" y="213" width="5.0157%" height="15" fill="rgb(227,1,9)"/><text x="25.3698%" y="223.50">cohere..</text></g><g><title>specialization_graph_of (16,836,278 samples, 4.75%)</title><rect x="25.3809%" y="197" width="4.7546%" height="15" fill="rgb(248,47,43)"/><text x="25.6309%" y="207.50">specia..</text></g><g><title>trait_impls_of (1,156,713 samples, 0.33%)</title><rect x="29.8088%" y="181" width="0.3267%" height="15" fill="rgb(221,10,30)"/><text x="30.0588%" y="191.50"></text></g><g><title>coherence_checking (17,867,329 samples, 5.05%)</title><rect x="25.1133%" y="229" width="5.0458%" height="15" fill="rgb(210,229,1)"/><text x="25.3633%" y="239.50">cohere..</text></g><g><title>dropck_outlives (1,783,770 samples, 0.50%)</title><rect x="38.8789%" y="181" width="0.5037%" height="15" fill="rgb(222,148,37)"/><text x="39.1289%" y="191.50"></text></g><g><title>evaluate_obligation (3,330,518 samples, 0.94%)</title><rect x="39.3827%" y="181" width="0.9405%" height="15" fill="rgb(234,67,33)"/><text x="39.6327%" y="191.50"></text></g><g><title>predicates_of (394,174 samples, 0.11%)</title><rect x="40.6360%" y="181" width="0.1113%" height="15" fill="rgb(247,98,35)"/><text x="40.8860%" y="191.50"></text></g><g><title>adt_def (425,546 samples, 0.12%)</title><rect x="52.1552%" y="117" width="0.1202%" height="15" fill="rgb(247,138,52)"/><text x="52.4052%" y="127.50"></text></g><g><title>adt_def (373,365 samples, 0.11%)</title><rect x="52.4626%" y="85" width="0.1054%" height="15" fill="rgb(213,79,30)"/><text x="52.7126%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (362,714 samples, 0.10%)</title><rect x="52.4657%" y="69" width="0.1024%" height="15" fill="rgb(246,177,23)"/><text x="52.7157%" y="79.50"></text></g><g><title>adt_dtorck_constraint (405,456 samples, 0.11%)</title><rect x="52.5799%" y="85" width="0.1145%" height="15" fill="rgb(230,62,27)"/><text x="52.8299%" y="95.50"></text></g><g><title>adt_dtorck_constraint (995,902 samples, 0.28%)</title><rect x="52.4254%" y="101" width="0.2812%" height="15" fill="rgb(216,154,8)"/><text x="52.6754%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,595,349 samples, 0.45%)</title><rect x="52.2866%" y="117" width="0.4505%" height="15" fill="rgb(244,35,45)"/><text x="52.5366%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,377,828 samples, 0.67%)</title><rect x="52.0943%" y="133" width="0.6715%" height="15" fill="rgb(251,115,12)"/><text x="52.3443%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,950,623 samples, 0.83%)</title><rect x="51.9540%" y="149" width="0.8333%" height="15" fill="rgb(240,54,50)"/><text x="52.2040%" y="159.50"></text></g><g><title>dropck_outlives (5,119,243 samples, 1.45%)</title><rect x="51.3572%" y="165" width="1.4457%" height="15" fill="rgb(233,84,52)"/><text x="51.6072%" y="175.50"></text></g><g><title>trait_impls_of (429,655 samples, 0.12%)</title><rect x="54.0236%" y="149" width="0.1213%" height="15" fill="rgb(207,117,47)"/><text x="54.2736%" y="159.50"></text></g><g><title>evaluate_obligation (4,752,243 samples, 1.34%)</title><rect x="52.8033%" y="165" width="1.3420%" height="15" fill="rgb(249,43,39)"/><text x="53.0533%" y="175.50"></text></g><g><title>is_copy_raw (454,185 samples, 0.13%)</title><rect x="54.4460%" y="165" width="0.1283%" height="15" fill="rgb(209,38,44)"/><text x="54.6960%" y="175.50"></text></g><g><title>evaluate_obligation (360,934 samples, 0.10%)</title><rect x="54.4723%" y="149" width="0.1019%" height="15" fill="rgb(236,212,23)"/><text x="54.7223%" y="159.50"></text></g><g><title>evaluate_obligation (719,370 samples, 0.20%)</title><rect x="54.9231%" y="149" width="0.2032%" height="15" fill="rgb(242,79,21)"/><text x="55.1731%" y="159.50"></text></g><g><title>method_autoderef_steps (1,788,146 samples, 0.50%)</title><rect x="54.6239%" y="165" width="0.5050%" height="15" fill="rgb(211,96,35)"/><text x="54.8739%" y="175.50"></text></g><g><title>predicates_of (600,948 samples, 0.17%)</title><rect x="55.1356%" y="165" width="0.1697%" height="15" fill="rgb(253,215,40)"/><text x="55.3856%" y="175.50"></text></g><g><title>predicates_defined_on (383,856 samples, 0.11%)</title><rect x="55.1969%" y="149" width="0.1084%" height="15" fill="rgb(211,81,21)"/><text x="55.4469%" y="159.50"></text></g><g><title>typeck (51,781,637 samples, 14.62%)</title><rect x="40.7935%" y="181" width="14.6232%" height="15" fill="rgb(208,190,38)"/><text x="41.0435%" y="191.50">typeck</text></g><g><title>item_bodies_checking (89,470,013 samples, 25.27%)</title><rect x="30.1736%" y="229" width="25.2665%" height="15" fill="rgb(235,213,38)"/><text x="30.4236%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (89,466,593 samples, 25.27%)</title><rect x="30.1745%" y="213" width="25.2655%" height="15" fill="rgb(237,122,38)"/><text x="30.4245%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (89,313,602 samples, 25.22%)</title><rect x="30.2177%" y="197" width="25.2223%" height="15" fill="rgb(244,218,35)"/><text x="30.4677%" y="207.50">typeck</text></g><g><title>mir_borrowck (1,551,837 samples, 0.44%)</title><rect x="57.1660%" y="165" width="0.4382%" height="15" fill="rgb(240,68,47)"/><text x="57.4160%" y="175.50"></text></g><g><title>specialization_graph_of (1,547,717 samples, 0.44%)</title><rect x="58.2082%" y="85" width="0.4371%" height="15" fill="rgb(210,16,53)"/><text x="58.4582%" y="95.50"></text></g><g><title>impl_trait_ref (758,199 samples, 0.21%)</title><rect x="58.4312%" y="69" width="0.2141%" height="15" fill="rgb(235,124,12)"/><text x="58.6812%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (644,628 samples, 0.18%)</title><rect x="58.4632%" y="53" width="0.1820%" height="15" fill="rgb(224,169,11)"/><text x="58.7132%" y="63.50"></text></g><g><title>resolve_instance (1,838,000 samples, 0.52%)</title><rect x="58.1305%" y="101" width="0.5191%" height="15" fill="rgb(250,166,2)"/><text x="58.3805%" y="111.50"></text></g><g><title>associated_items (452,985 samples, 0.13%)</title><rect x="60.9627%" y="85" width="0.1279%" height="15" fill="rgb(242,216,29)"/><text x="61.2127%" y="95.50"></text></g><g><title>adt_dtorck_constraint (425,785 samples, 0.12%)</title><rect x="61.1684%" y="37" width="0.1202%" height="15" fill="rgb(230,116,27)"/><text x="61.4184%" y="47.50"></text></g><g><title>adt_dtorck_constraint (531,857 samples, 0.15%)</title><rect x="61.1444%" y="53" width="0.1502%" height="15" fill="rgb(228,99,48)"/><text x="61.3944%" y="63.50"></text></g><g><title>dropck_outlives (717,799 samples, 0.20%)</title><rect x="61.1000%" y="85" width="0.2027%" height="15" fill="rgb(253,11,6)"/><text x="61.3500%" y="95.50"></text></g><g><title>adt_dtorck_constraint (641,488 samples, 0.18%)</title><rect x="61.1215%" y="69" width="0.1812%" height="15" fill="rgb(247,143,39)"/><text x="61.3715%" y="79.50"></text></g><g><title>evaluate_obligation (998,994 samples, 0.28%)</title><rect x="61.3027%" y="85" width="0.2821%" height="15" fill="rgb(236,97,10)"/><text x="61.5527%" y="95.50"></text></g><g><title>mir_built (14,402,690 samples, 4.07%)</title><rect x="57.8042%" y="117" width="4.0673%" height="15" fill="rgb(233,208,19)"/><text x="58.0542%" y="127.50">mir_..</text></g><g><title>typeck (11,075,213 samples, 3.13%)</title><rect x="58.7439%" y="101" width="3.1277%" height="15" fill="rgb(216,164,2)"/><text x="58.9939%" y="111.50">typ..</text></g><g><title>mir_built (436,975 samples, 0.12%)</title><rect x="61.8876%" y="101" width="0.1234%" height="15" fill="rgb(220,129,5)"/><text x="62.1376%" y="111.50"></text></g><g><title>mir_const (15,383,560 samples, 4.34%)</title><rect x="57.6668%" y="149" width="4.3443%" height="15" fill="rgb(242,17,10)"/><text x="57.9168%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (15,090,127 samples, 4.26%)</title><rect x="57.7497%" y="133" width="4.2615%" height="15" fill="rgb(242,107,0)"/><text x="57.9997%" y="143.50">unsaf..</text></g><g><title>unsafety_check_result (494,206 samples, 0.14%)</title><rect x="61.8716%" y="117" width="0.1396%" height="15" fill="rgb(251,28,31)"/><text x="62.1216%" y="127.50"></text></g><g><title>mir_promoted (15,612,913 samples, 4.41%)</title><rect x="57.6042%" y="165" width="4.4091%" height="15" fill="rgb(233,223,10)"/><text x="57.8542%" y="175.50">mir_p..</text></g><g><title>type_of (21,307,385 samples, 6.02%)</title><rect x="56.1689%" y="197" width="6.0172%" height="15" fill="rgb(215,21,27)"/><text x="56.4189%" y="207.50">type_of</text></g><g><title>mir_borrowck (21,085,553 samples, 5.95%)</title><rect x="56.2316%" y="181" width="5.9546%" height="15" fill="rgb(232,23,21)"/><text x="56.4816%" y="191.50">mir_borr..</text></g><g><title>type_op_prove_predicate (390,452 samples, 0.11%)</title><rect x="62.0759%" y="165" width="0.1103%" height="15" fill="rgb(244,5,23)"/><text x="62.3259%" y="175.50"></text></g><g><title>item_types_checking (24,184,069 samples, 6.83%)</title><rect x="55.4401%" y="229" width="6.8296%" height="15" fill="rgb(226,81,46)"/><text x="55.6901%" y="239.50">item_type..</text></g><g><title>check_mod_item_types (24,178,879 samples, 6.83%)</title><rect x="55.4415%" y="213" width="6.8282%" height="15" fill="rgb(247,70,30)"/><text x="55.6915%" y="223.50">check_mod..</text></g><g><title>fn_sig (683,177 samples, 0.19%)</title><rect x="62.4132%" y="197" width="0.1929%" height="15" fill="rgb(212,68,19)"/><text x="62.6632%" y="207.50"></text></g><g><title>is_late_bound_map (520,626 samples, 0.15%)</title><rect x="62.6681%" y="181" width="0.1470%" height="15" fill="rgb(240,187,13)"/><text x="62.9181%" y="191.50"></text></g><g><title>resolve_lifetimes (516,576 samples, 0.15%)</title><rect x="62.6692%" y="165" width="0.1459%" height="15" fill="rgb(223,113,26)"/><text x="62.9192%" y="175.50"></text></g><g><title>lint_levels (485,656 samples, 0.14%)</title><rect x="62.6780%" y="149" width="0.1372%" height="15" fill="rgb(206,192,2)"/><text x="62.9280%" y="159.50"></text></g><g><title>named_region_map (727,329 samples, 0.21%)</title><rect x="62.8151%" y="181" width="0.2054%" height="15" fill="rgb(241,108,4)"/><text x="63.0651%" y="191.50"></text></g><g><title>resolve_lifetimes (686,608 samples, 0.19%)</title><rect x="62.8266%" y="165" width="0.1939%" height="15" fill="rgb(247,173,49)"/><text x="63.0766%" y="175.50"></text></g><g><title>generics_of (1,491,658 samples, 0.42%)</title><rect x="62.6062%" y="197" width="0.4212%" height="15" fill="rgb(224,114,35)"/><text x="62.8562%" y="207.50"></text></g><g><title>predicates_of (960,308 samples, 0.27%)</title><rect x="63.0535%" y="197" width="0.2712%" height="15" fill="rgb(245,159,27)"/><text x="63.3035%" y="207.50"></text></g><g><title>predicates_defined_on (866,477 samples, 0.24%)</title><rect x="63.0800%" y="181" width="0.2447%" height="15" fill="rgb(245,172,44)"/><text x="63.3300%" y="191.50"></text></g><g><title>inferred_outlives_of (401,734 samples, 0.11%)</title><rect x="63.2113%" y="165" width="0.1135%" height="15" fill="rgb(236,23,11)"/><text x="63.4613%" y="175.50"></text></g><g><title>inferred_outlives_crate (365,234 samples, 0.10%)</title><rect x="63.2216%" y="149" width="0.1031%" height="15" fill="rgb(205,117,38)"/><text x="63.4716%" y="159.50"></text></g><g><title>type_collecting (3,849,893 samples, 1.09%)</title><rect x="62.2708%" y="229" width="1.0872%" height="15" fill="rgb(237,72,25)"/><text x="62.5208%" y="239.50"></text></g><g><title>collect_mod_item_types (3,841,393 samples, 1.08%)</title><rect x="62.2732%" y="213" width="1.0848%" height="15" fill="rgb(244,70,9)"/><text x="62.5232%" y="223.50"></text></g><g><title>evaluate_obligation (466,094 samples, 0.13%)</title><rect x="64.0682%" y="197" width="0.1316%" height="15" fill="rgb(217,125,39)"/><text x="64.3182%" y="207.50"></text></g><g><title>region_scope_tree (663,917 samples, 0.19%)</title><rect x="64.3628%" y="197" width="0.1875%" height="15" fill="rgb(235,36,10)"/><text x="64.6128%" y="207.50"></text></g><g><title>check_impl_item_well_formed (3,860,650 samples, 1.09%)</title><rect x="63.4662%" y="213" width="1.0903%" height="15" fill="rgb(251,123,47)"/><text x="63.7162%" y="223.50"></text></g><g><title>adt_def (365,193 samples, 0.10%)</title><rect x="65.4731%" y="149" width="0.1031%" height="15" fill="rgb(221,13,13)"/><text x="65.7231%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (354,582 samples, 0.10%)</title><rect x="65.4761%" y="133" width="0.1001%" height="15" fill="rgb(238,131,9)"/><text x="65.7261%" y="143.50"></text></g><g><title>adt_sized_constraint (766,258 samples, 0.22%)</title><rect x="65.4625%" y="165" width="0.2164%" height="15" fill="rgb(211,50,8)"/><text x="65.7125%" y="175.50"></text></g><g><title>adt_sized_constraint (1,014,010 samples, 0.29%)</title><rect x="65.4006%" y="181" width="0.2864%" height="15" fill="rgb(245,182,24)"/><text x="65.6506%" y="191.50"></text></g><g><title>evaluate_obligation (1,951,072 samples, 0.55%)</title><rect x="65.1611%" y="197" width="0.5510%" height="15" fill="rgb(242,14,37)"/><text x="65.4111%" y="207.50"></text></g><g><title>object_safety_violations (812,779 samples, 0.23%)</title><rect x="65.7693%" y="197" width="0.2295%" height="15" fill="rgb(246,228,12)"/><text x="66.0193%" y="207.50"></text></g><g><title>param_env (449,186 samples, 0.13%)</title><rect x="65.9991%" y="197" width="0.1269%" height="15" fill="rgb(213,55,15)"/><text x="66.2491%" y="207.50"></text></g><g><title>region_scope_tree (478,717 samples, 0.14%)</title><rect x="66.1569%" y="197" width="0.1352%" height="15" fill="rgb(209,9,3)"/><text x="66.4069%" y="207.50"></text></g><g><title>analysis (233,940,437 samples, 66.07%)</title><rect x="0.2640%" y="261" width="66.0652%" height="15" fill="rgb(230,59,30)"/><text x="0.5140%" y="271.50">analysis</text></g><g><title>type_check_crate (146,304,894 samples, 41.32%)</title><rect x="25.0124%" y="245" width="41.3168%" height="15" fill="rgb(209,121,21)"/><text x="25.2624%" y="255.50">type_check_crate</text></g><g><title>wf_checking (10,510,406 samples, 2.97%)</title><rect x="63.3611%" y="229" width="2.9682%" height="15" fill="rgb(220,109,13)"/><text x="63.6111%" y="239.50">wf_..</text></g><g><title>check_item_well_formed (6,277,393 samples, 1.77%)</title><rect x="64.5565%" y="213" width="1.7727%" height="15" fill="rgb(232,18,1)"/><text x="64.8065%" y="223.50">c..</text></g><g><title>codegen_crate (381,474 samples, 0.11%)</title><rect x="66.3321%" y="261" width="0.1077%" height="15" fill="rgb(215,41,42)"/><text x="66.5821%" y="271.50"></text></g><g><title>metadata_load_macro (1,826,517 samples, 0.52%)</title><rect x="89.6142%" y="213" width="0.5158%" height="15" fill="rgb(224,123,36)"/><text x="89.8642%" y="223.50"></text></g><g><title>macro_expand_crate (85,717,982 samples, 24.21%)</title><rect x="66.6395%" y="245" width="24.2069%" height="15" fill="rgb(240,125,3)"/><text x="66.8895%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (85,698,122 samples, 24.20%)</title><rect x="66.6451%" y="229" width="24.2013%" height="15" fill="rgb(205,98,50)"/><text x="66.8951%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (2,536,878 samples, 0.72%)</title><rect x="90.1300%" y="213" width="0.7164%" height="15" fill="rgb(205,185,37)"/><text x="90.3800%" y="223.50"></text></g><g><title>metadata_register_crate (856,540 samples, 0.24%)</title><rect x="90.6045%" y="197" width="0.2419%" height="15" fill="rgb(238,207,15)"/><text x="90.8545%" y="207.50"></text></g><g><title>maybe_create_a_macro_crate (559,546 samples, 0.16%)</title><rect x="90.8468%" y="245" width="0.1580%" height="15" fill="rgb(213,199,42)"/><text x="91.0968%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (506,056 samples, 0.14%)</title><rect x="91.0048%" y="245" width="0.1429%" height="15" fill="rgb(235,201,11)"/><text x="91.2548%" y="255.50"></text></g><g><title>finalize_macro_resolutions (889,670 samples, 0.25%)</title><rect x="91.1789%" y="229" width="0.2512%" height="15" fill="rgb(207,46,11)"/><text x="91.4289%" y="239.50"></text></g><g><title>late_resolve_crate (5,256,628 samples, 1.48%)</title><rect x="91.4302%" y="229" width="1.4845%" height="15" fill="rgb(241,35,35)"/><text x="91.6802%" y="239.50"></text></g><g><title>configure_and_expand (94,037,045 samples, 26.56%)</title><rect x="66.4398%" y="261" width="26.5562%" height="15" fill="rgb(243,32,47)"/><text x="66.6898%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (6,544,893 samples, 1.85%)</title><rect x="91.1477%" y="245" width="1.8483%" height="15" fill="rgb(247,202,23)"/><text x="91.3977%" y="255.50">r..</text></g><g><title>drop_ast (420,055 samples, 0.12%)</title><rect x="92.9960%" y="261" width="0.1186%" height="15" fill="rgb(219,102,11)"/><text x="93.2460%" y="271.50"></text></g><g><title>early_lint_checks (1,097,552 samples, 0.31%)</title><rect x="93.1198%" y="261" width="0.3100%" height="15" fill="rgb(243,110,44)"/><text x="93.3698%" y="271.50"></text></g><g><title>free_global_ctxt (5,697,532 samples, 1.61%)</title><rect x="93.4297%" y="261" width="1.6090%" height="15" fill="rgb(222,74,54)"/><text x="93.6797%" y="271.50"></text></g><g><title>hir_lowering (7,090,659 samples, 2.00%)</title><rect x="95.1058%" y="261" width="2.0024%" height="15" fill="rgb(216,99,12)"/><text x="95.3558%" y="271.50">h..</text></g><g><title>parse_crate (8,199,581 samples, 2.32%)</title><rect x="97.1294%" y="261" width="2.3156%" height="15" fill="rgb(226,22,26)"/><text x="97.3794%" y="271.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,292,684 samples, 0.37%)</title><rect x="99.5062%" y="261" width="0.3651%" height="15" fill="rgb(217,163,10)"/><text x="99.7562%" y="271.50"></text></g><g><title>all (354,105,392 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (354,105,392 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="287.50">rustc</text></g></svg></svg>