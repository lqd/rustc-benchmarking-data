<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (304,705 samples, 0.12%)</title><rect x="14.9586%" y="229" width="0.1218%" height="15" fill="rgb(227,0,7)"/><text x="15.2086%" y="239.50"></text></g><g><title>item_attrs (252,901 samples, 0.10%)</title><rect x="15.5407%" y="197" width="0.1011%" height="15" fill="rgb(217,0,24)"/><text x="15.7907%" y="207.50"></text></g><g><title>codegen_fn_attrs (351,453 samples, 0.14%)</title><rect x="15.5102%" y="213" width="0.1405%" height="15" fill="rgb(221,193,54)"/><text x="15.7602%" y="223.50"></text></g><g><title>is_copy_raw (276,654 samples, 0.11%)</title><rect x="18.9693%" y="149" width="0.1106%" height="15" fill="rgb(248,212,6)"/><text x="19.2193%" y="159.50"></text></g><g><title>evaluate_obligation (269,984 samples, 0.11%)</title><rect x="18.9720%" y="133" width="0.1079%" height="15" fill="rgb(208,68,35)"/><text x="19.2220%" y="143.50"></text></g><g><title>adt_drop_tys (417,656 samples, 0.17%)</title><rect x="18.9292%" y="165" width="0.1670%" height="15" fill="rgb(232,128,0)"/><text x="19.1792%" y="175.50"></text></g><g><title>adt_drop_tys (676,228 samples, 0.27%)</title><rect x="18.9128%" y="181" width="0.2703%" height="15" fill="rgb(207,160,47)"/><text x="19.1628%" y="191.50"></text></g><g><title>needs_drop_raw (1,469,445 samples, 0.59%)</title><rect x="18.8731%" y="197" width="0.5874%" height="15" fill="rgb(228,23,34)"/><text x="19.1231%" y="207.50"></text></g><g><title>is_copy_raw (693,974 samples, 0.28%)</title><rect x="19.1831%" y="181" width="0.2774%" height="15" fill="rgb(218,30,26)"/><text x="19.4331%" y="191.50"></text></g><g><title>evaluate_obligation (595,774 samples, 0.24%)</title><rect x="19.2224%" y="165" width="0.2382%" height="15" fill="rgb(220,122,19)"/><text x="19.4724%" y="175.50"></text></g><g><title>resolve_instance (705,930 samples, 0.28%)</title><rect x="19.4605%" y="197" width="0.2822%" height="15" fill="rgb(250,228,42)"/><text x="19.7105%" y="207.50"></text></g><g><title>thir_body (3,521,110 samples, 1.41%)</title><rect x="19.7763%" y="197" width="1.4075%" height="15" fill="rgb(240,193,28)"/><text x="20.0263%" y="207.50"></text></g><g><title>mir_const (17,786,627 samples, 7.11%)</title><rect x="14.0941%" y="245" width="7.1099%" height="15" fill="rgb(216,20,37)"/><text x="14.3441%" y="255.50">mir_const</text></g><g><title>unsafety_check_result (15,319,313 samples, 6.12%)</title><rect x="15.0804%" y="229" width="6.1237%" height="15" fill="rgb(206,188,39)"/><text x="15.3304%" y="239.50">unsafety..</text></g><g><title>mir_built (13,892,767 samples, 5.55%)</title><rect x="15.6507%" y="213" width="5.5534%" height="15" fill="rgb(217,207,13)"/><text x="15.9007%" y="223.50">mir_bui..</text></g><g><title>mir_promoted (20,934,879 samples, 8.37%)</title><rect x="13.0571%" y="261" width="8.3684%" height="15" fill="rgb(231,73,38)"/><text x="13.3071%" y="271.50">mir_promoted</text></g><g><title>mir_const_qualif (553,865 samples, 0.22%)</title><rect x="21.2041%" y="245" width="0.2214%" height="15" fill="rgb(225,20,46)"/><text x="21.4541%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (496,629 samples, 0.20%)</title><rect x="21.4927%" y="261" width="0.1985%" height="15" fill="rgb(210,31,41)"/><text x="21.7427%" y="271.50"></text></g><g><title>normalize_projection_ty (292,306 samples, 0.12%)</title><rect x="21.5744%" y="245" width="0.1168%" height="15" fill="rgb(221,200,47)"/><text x="21.8244%" y="255.50"></text></g><g><title>type_op_normalize_predicate (329,243 samples, 0.13%)</title><rect x="21.6912%" y="261" width="0.1316%" height="15" fill="rgb(226,26,5)"/><text x="21.9412%" y="271.50"></text></g><g><title>type_op_prove_predicate (1,980,364 samples, 0.79%)</title><rect x="21.8313%" y="261" width="0.7916%" height="15" fill="rgb(249,33,26)"/><text x="22.0813%" y="271.50"></text></g><g><title>MIR_borrow_checking (55,233,664 samples, 22.08%)</title><rect x="0.5531%" y="293" width="22.0788%" height="15" fill="rgb(235,183,28)"/><text x="0.8031%" y="303.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (54,934,340 samples, 21.96%)</title><rect x="0.6727%" y="277" width="21.9592%" height="15" fill="rgb(221,5,38)"/><text x="0.9227%" y="287.50">mir_borrowck</text></g><g><title>MIR_effect_checking (334,814 samples, 0.13%)</title><rect x="22.6319%" y="293" width="0.1338%" height="15" fill="rgb(247,18,42)"/><text x="22.8819%" y="303.50"></text></g><g><title>hir_module_items (280,613 samples, 0.11%)</title><rect x="22.7657%" y="293" width="0.1122%" height="15" fill="rgb(241,131,45)"/><text x="23.0157%" y="303.50"></text></g><g><title>codegen_fn_attrs (416,944 samples, 0.17%)</title><rect x="23.1032%" y="261" width="0.1667%" height="15" fill="rgb(249,31,29)"/><text x="23.3532%" y="271.50"></text></g><g><title>check_mod_attrs (940,898 samples, 0.38%)</title><rect x="22.8938%" y="277" width="0.3761%" height="15" fill="rgb(225,111,53)"/><text x="23.1438%" y="287.50"></text></g><g><title>check_mod_unstable_api_usage (423,267 samples, 0.17%)</title><rect x="23.4187%" y="277" width="0.1692%" height="15" fill="rgb(238,160,17)"/><text x="23.6687%" y="287.50"></text></g><g><title>misc_checking_1 (1,847,461 samples, 0.74%)</title><rect x="22.8781%" y="293" width="0.7385%" height="15" fill="rgb(214,148,48)"/><text x="23.1281%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (958,121 samples, 0.38%)</title><rect x="23.6173%" y="277" width="0.3830%" height="15" fill="rgb(232,36,49)"/><text x="23.8673%" y="287.50"></text></g><g><title>check_mod_liveness (763,587 samples, 0.31%)</title><rect x="23.6951%" y="261" width="0.3052%" height="15" fill="rgb(209,103,24)"/><text x="23.9451%" y="271.50"></text></g><g><title>misc_checking_2 (1,880,601 samples, 0.75%)</title><rect x="23.6166%" y="293" width="0.7517%" height="15" fill="rgb(229,88,8)"/><text x="23.8666%" y="303.50"></text></g><g><title>match_checking (920,680 samples, 0.37%)</title><rect x="24.0003%" y="277" width="0.3680%" height="15" fill="rgb(213,181,19)"/><text x="24.2503%" y="287.50"></text></g><g><title>check_match (859,039 samples, 0.34%)</title><rect x="24.0249%" y="261" width="0.3434%" height="15" fill="rgb(254,191,54)"/><text x="24.2749%" y="271.50"></text></g><g><title>check_private_in_public (251,983 samples, 0.10%)</title><rect x="24.3726%" y="277" width="0.1007%" height="15" fill="rgb(241,83,37)"/><text x="24.6226%" y="287.50"></text></g><g><title>death_checking (623,177 samples, 0.25%)</title><rect x="24.4733%" y="277" width="0.2491%" height="15" fill="rgb(233,36,39)"/><text x="24.7233%" y="287.50"></text></g><g><title>eval_to_const_value_raw (281,983 samples, 0.11%)</title><rect x="25.2240%" y="197" width="0.1127%" height="15" fill="rgb(226,3,54)"/><text x="25.4740%" y="207.50"></text></g><g><title>eval_to_const_value_raw (281,263 samples, 0.11%)</title><rect x="25.2243%" y="181" width="0.1124%" height="15" fill="rgb(245,192,40)"/><text x="25.4743%" y="191.50"></text></g><g><title>eval_to_allocation_raw (279,773 samples, 0.11%)</title><rect x="25.2249%" y="165" width="0.1118%" height="15" fill="rgb(238,167,29)"/><text x="25.4749%" y="175.50"></text></g><g><title>eval_to_allocation_raw (366,614 samples, 0.15%)</title><rect x="25.1921%" y="245" width="0.1465%" height="15" fill="rgb(232,182,51)"/><text x="25.4421%" y="255.50"></text></g><g><title>eval_to_allocation_raw (365,904 samples, 0.15%)</title><rect x="25.1924%" y="229" width="0.1463%" height="15" fill="rgb(231,60,39)"/><text x="25.4424%" y="239.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (292,043 samples, 0.12%)</title><rect x="25.2219%" y="213" width="0.1167%" height="15" fill="rgb(208,69,12)"/><text x="25.4719%" y="223.50"></text></g><g><title>promoted_mir (339,463 samples, 0.14%)</title><rect x="26.3205%" y="133" width="0.1357%" height="15" fill="rgb(235,93,37)"/><text x="26.5705%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,247,155 samples, 0.90%)</title><rect x="25.5781%" y="181" width="0.8983%" height="15" fill="rgb(213,116,39)"/><text x="25.8281%" y="191.50"></text></g><g><title>eval_to_const_value_raw (2,245,545 samples, 0.90%)</title><rect x="25.5788%" y="165" width="0.8976%" height="15" fill="rgb(222,207,29)"/><text x="25.8288%" y="175.50"></text></g><g><title>eval_to_allocation_raw (2,242,235 samples, 0.90%)</title><rect x="25.5801%" y="149" width="0.8963%" height="15" fill="rgb(206,96,30)"/><text x="25.8301%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,851,232 samples, 1.14%)</title><rect x="25.3386%" y="245" width="1.1397%" height="15" fill="rgb(218,138,4)"/><text x="25.5886%" y="255.50"></text></g><g><title>eval_to_const_value_raw (2,849,192 samples, 1.14%)</title><rect x="25.3395%" y="229" width="1.1389%" height="15" fill="rgb(250,191,14)"/><text x="25.5895%" y="239.50"></text></g><g><title>eval_to_allocation_raw (2,845,392 samples, 1.14%)</title><rect x="25.3410%" y="213" width="1.1374%" height="15" fill="rgb(239,60,40)"/><text x="25.5910%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,260,165 samples, 0.90%)</title><rect x="25.5749%" y="197" width="0.9035%" height="15" fill="rgb(206,27,48)"/><text x="25.8249%" y="207.50"></text></g><g><title>crate_lints (5,802,605 samples, 2.32%)</title><rect x="24.7231%" y="261" width="2.3195%" height="15" fill="rgb(225,35,8)"/><text x="24.9731%" y="271.50">c..</text></g><g><title>type_of (1,161,822 samples, 0.46%)</title><rect x="26.5782%" y="245" width="0.4644%" height="15" fill="rgb(250,213,24)"/><text x="26.8282%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (926,448 samples, 0.37%)</title><rect x="26.6723%" y="229" width="0.3703%" height="15" fill="rgb(247,123,22)"/><text x="26.9223%" y="239.50"></text></g><g><title>lint_checking (6,889,677 samples, 2.75%)</title><rect x="24.7224%" y="277" width="2.7540%" height="15" fill="rgb(231,138,38)"/><text x="24.9724%" y="287.50">li..</text></g><g><title>module_lints (1,085,392 samples, 0.43%)</title><rect x="27.0426%" y="261" width="0.4339%" height="15" fill="rgb(231,145,46)"/><text x="27.2926%" y="271.50"></text></g><g><title>lint_mod (1,073,802 samples, 0.43%)</title><rect x="27.0472%" y="245" width="0.4292%" height="15" fill="rgb(251,118,11)"/><text x="27.2972%" y="255.50"></text></g><g><title>privacy_access_levels (455,725 samples, 0.18%)</title><rect x="27.4765%" y="277" width="0.1822%" height="15" fill="rgb(217,147,25)"/><text x="27.7265%" y="287.50"></text></g><g><title>privacy_checking_modules (1,436,935 samples, 0.57%)</title><rect x="27.6586%" y="277" width="0.5744%" height="15" fill="rgb(247,81,37)"/><text x="27.9086%" y="287.50"></text></g><g><title>check_mod_privacy (1,429,185 samples, 0.57%)</title><rect x="27.6617%" y="261" width="0.5713%" height="15" fill="rgb(209,12,38)"/><text x="27.9117%" y="271.50"></text></g><g><title>misc_checking_3 (9,684,307 samples, 3.87%)</title><rect x="24.3683%" y="293" width="3.8712%" height="15" fill="rgb(227,1,9)"/><text x="24.6183%" y="303.50">misc..</text></g><g><title>adt_destructor (306,823 samples, 0.12%)</title><rect x="28.3099%" y="245" width="0.1226%" height="15" fill="rgb(248,47,43)"/><text x="28.5599%" y="255.50"></text></g><g><title>coherent_trait (297,603 samples, 0.12%)</title><rect x="28.3136%" y="229" width="0.1190%" height="15" fill="rgb(221,10,30)"/><text x="28.5636%" y="239.50"></text></g><g><title>specialization_graph_of (296,363 samples, 0.12%)</title><rect x="28.3141%" y="213" width="0.1185%" height="15" fill="rgb(210,229,1)"/><text x="28.5641%" y="223.50"></text></g><g><title>impl_parent (2,427,254 samples, 0.97%)</title><rect x="30.2454%" y="229" width="0.9703%" height="15" fill="rgb(222,148,37)"/><text x="30.4954%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,437,249 samples, 0.57%)</title><rect x="30.6411%" y="213" width="0.5745%" height="15" fill="rgb(234,67,33)"/><text x="30.8911%" y="223.50"></text></g><g><title>impl_trait_ref (5,107,057 samples, 2.04%)</title><rect x="31.2156%" y="229" width="2.0415%" height="15" fill="rgb(247,98,35)"/><text x="31.4656%" y="239.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,113,890 samples, 1.64%)</title><rect x="31.6126%" y="213" width="1.6445%" height="15" fill="rgb(247,138,52)"/><text x="31.8626%" y="223.50"></text></g><g><title>coherent_trait (13,221,197 samples, 5.28%)</title><rect x="28.2898%" y="261" width="5.2850%" height="15" fill="rgb(213,79,30)"/><text x="28.5398%" y="271.50">cohere..</text></g><g><title>specialization_graph_of (12,554,730 samples, 5.02%)</title><rect x="28.5562%" y="245" width="5.0186%" height="15" fill="rgb(246,177,23)"/><text x="28.8062%" y="255.50">specia..</text></g><g><title>trait_impls_of (792,899 samples, 0.32%)</title><rect x="33.2578%" y="229" width="0.3169%" height="15" fill="rgb(230,62,27)"/><text x="33.5078%" y="239.50"></text></g><g><title>coherence_checking (13,306,417 samples, 5.32%)</title><rect x="28.2821%" y="277" width="5.3190%" height="15" fill="rgb(216,154,8)"/><text x="28.5321%" y="287.50">coheren..</text></g><g><title>associated_item (267,522 samples, 0.11%)</title><rect x="60.3292%" y="213" width="0.1069%" height="15" fill="rgb(244,35,45)"/><text x="60.5792%" y="223.50"></text></g><g><title>associated_items (402,393 samples, 0.16%)</title><rect x="60.2825%" y="229" width="0.1609%" height="15" fill="rgb(251,115,12)"/><text x="60.5325%" y="239.50"></text></g><g><title>dropck_outlives (462,825 samples, 0.19%)</title><rect x="60.4640%" y="229" width="0.1850%" height="15" fill="rgb(240,54,50)"/><text x="60.7140%" y="239.50"></text></g><g><title>adt_dtorck_constraint (347,863 samples, 0.14%)</title><rect x="60.5099%" y="213" width="0.1391%" height="15" fill="rgb(233,84,52)"/><text x="60.7599%" y="223.50"></text></g><g><title>evaluate_obligation (1,236,485 samples, 0.49%)</title><rect x="60.6736%" y="229" width="0.4943%" height="15" fill="rgb(207,117,47)"/><text x="60.9236%" y="239.50"></text></g><g><title>predicates_of (289,883 samples, 0.12%)</title><rect x="61.5721%" y="229" width="0.1159%" height="15" fill="rgb(249,43,39)"/><text x="61.8221%" y="239.50"></text></g><g><title>evaluate_obligation (844,961 samples, 0.34%)</title><rect x="63.6443%" y="213" width="0.3378%" height="15" fill="rgb(209,38,44)"/><text x="63.8943%" y="223.50"></text></g><g><title>typeck (6,239,990 samples, 2.49%)</title><rect x="61.7147%" y="229" width="2.4943%" height="15" fill="rgb(236,212,23)"/><text x="61.9647%" y="239.50">ty..</text></g><g><title>item_bodies_checking (76,638,703 samples, 30.64%)</title><rect x="33.6138%" y="277" width="30.6352%" height="15" fill="rgb(242,79,21)"/><text x="33.8638%" y="287.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (76,635,083 samples, 30.63%)</title><rect x="33.6152%" y="261" width="30.6337%" height="15" fill="rgb(211,96,35)"/><text x="33.8652%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (76,430,159 samples, 30.55%)</title><rect x="33.6971%" y="245" width="30.5518%" height="15" fill="rgb(253,215,40)"/><text x="33.9471%" y="255.50">typeck</text></g><g><title>specialization_graph_of (794,429 samples, 0.32%)</title><rect x="65.5430%" y="133" width="0.3176%" height="15" fill="rgb(211,81,21)"/><text x="65.7930%" y="143.50"></text></g><g><title>impl_trait_ref (366,235 samples, 0.15%)</title><rect x="65.7141%" y="117" width="0.1464%" height="15" fill="rgb(208,190,38)"/><text x="65.9641%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (311,625 samples, 0.12%)</title><rect x="65.7360%" y="101" width="0.1246%" height="15" fill="rgb(235,213,38)"/><text x="65.9860%" y="111.50"></text></g><g><title>resolve_instance (873,589 samples, 0.35%)</title><rect x="65.5174%" y="149" width="0.3492%" height="15" fill="rgb(237,122,38)"/><text x="65.7674%" y="159.50"></text></g><g><title>associated_item (469,924 samples, 0.19%)</title><rect x="67.1183%" y="117" width="0.1878%" height="15" fill="rgb(244,218,35)"/><text x="67.3683%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (386,534 samples, 0.15%)</title><rect x="67.1516%" y="101" width="0.1545%" height="15" fill="rgb(240,68,47)"/><text x="67.4016%" y="111.50"></text></g><g><title>associated_items (624,899 samples, 0.25%)</title><rect x="67.0648%" y="133" width="0.2498%" height="15" fill="rgb(210,16,53)"/><text x="67.3148%" y="143.50"></text></g><g><title>item_attrs (383,044 samples, 0.15%)</title><rect x="67.4301%" y="53" width="0.1531%" height="15" fill="rgb(235,124,12)"/><text x="67.6801%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (382,604 samples, 0.15%)</title><rect x="67.4303%" y="37" width="0.1529%" height="15" fill="rgb(224,169,11)"/><text x="67.6803%" y="47.50"></text></g><g><title>codegen_fn_attrs (392,304 samples, 0.16%)</title><rect x="67.4267%" y="69" width="0.1568%" height="15" fill="rgb(250,166,2)"/><text x="67.6767%" y="79.50"></text></g><g><title>fn_abi_of_instance (421,284 samples, 0.17%)</title><rect x="67.4209%" y="85" width="0.1684%" height="15" fill="rgb(242,216,29)"/><text x="67.6709%" y="95.50"></text></g><g><title>eval_to_const_value_raw (551,896 samples, 0.22%)</title><rect x="67.3849%" y="133" width="0.2206%" height="15" fill="rgb(230,116,27)"/><text x="67.6349%" y="143.50"></text></g><g><title>eval_to_const_value_raw (545,026 samples, 0.22%)</title><rect x="67.3876%" y="117" width="0.2179%" height="15" fill="rgb(228,99,48)"/><text x="67.6376%" y="127.50"></text></g><g><title>eval_to_allocation_raw (539,186 samples, 0.22%)</title><rect x="67.3899%" y="101" width="0.2155%" height="15" fill="rgb(253,11,6)"/><text x="67.6399%" y="111.50"></text></g><g><title>impl_trait_ref (287,843 samples, 0.12%)</title><rect x="68.0297%" y="117" width="0.1151%" height="15" fill="rgb(247,143,39)"/><text x="68.2797%" y="127.50"></text></g><g><title>trait_impls_of (588,478 samples, 0.24%)</title><rect x="68.2971%" y="117" width="0.2352%" height="15" fill="rgb(236,97,10)"/><text x="68.5471%" y="127.50"></text></g><g><title>evaluate_obligation (2,326,487 samples, 0.93%)</title><rect x="67.6055%" y="133" width="0.9300%" height="15" fill="rgb(233,208,19)"/><text x="67.8555%" y="143.50"></text></g><g><title>mir_const (9,281,332 samples, 3.71%)</title><rect x="65.1767%" y="197" width="3.7101%" height="15" fill="rgb(216,164,2)"/><text x="65.4267%" y="207.50">mir_..</text></g><g><title>unsafety_check_result (9,076,480 samples, 3.63%)</title><rect x="65.2586%" y="181" width="3.6282%" height="15" fill="rgb(220,129,5)"/><text x="65.5086%" y="191.50">unsa..</text></g><g><title>mir_built (8,894,338 samples, 3.56%)</title><rect x="65.3314%" y="165" width="3.5554%" height="15" fill="rgb(242,17,10)"/><text x="65.5814%" y="175.50">mir_..</text></g><g><title>typeck (7,443,623 samples, 2.98%)</title><rect x="65.9113%" y="149" width="2.9755%" height="15" fill="rgb(242,107,0)"/><text x="66.1613%" y="159.50">typ..</text></g><g><title>thir_body (413,944 samples, 0.17%)</title><rect x="69.2023%" y="133" width="0.1655%" height="15" fill="rgb(251,28,31)"/><text x="69.4523%" y="143.50"></text></g><g><title>mir_const (5,741,384 samples, 2.30%)</title><rect x="69.0053%" y="181" width="2.2950%" height="15" fill="rgb(233,223,10)"/><text x="69.2553%" y="191.50">m..</text></g><g><title>unsafety_check_result (5,660,893 samples, 2.26%)</title><rect x="69.0375%" y="165" width="2.2629%" height="15" fill="rgb(215,21,27)"/><text x="69.2875%" y="175.50">u..</text></g><g><title>mir_built (5,623,242 samples, 2.25%)</title><rect x="69.0526%" y="149" width="2.2478%" height="15" fill="rgb(232,23,21)"/><text x="69.3026%" y="159.50">m..</text></g><g><title>typeck (4,834,003 samples, 1.93%)</title><rect x="69.3681%" y="133" width="1.9323%" height="15" fill="rgb(244,5,23)"/><text x="69.6181%" y="143.50">t..</text></g><g><title>mir_const_qualif (6,039,287 samples, 2.41%)</title><rect x="68.8867%" y="197" width="2.4141%" height="15" fill="rgb(226,81,46)"/><text x="69.1367%" y="207.50">mi..</text></g><g><title>mir_promoted (15,429,011 samples, 6.17%)</title><rect x="65.1335%" y="213" width="6.1675%" height="15" fill="rgb(247,70,30)"/><text x="65.3835%" y="223.50">mir_prom..</text></g><g><title>type_of (17,130,641 samples, 6.85%)</title><rect x="64.6608%" y="245" width="6.8477%" height="15" fill="rgb(212,68,19)"/><text x="64.9108%" y="255.50">type_of</text></g><g><title>mir_borrowck (17,120,691 samples, 6.84%)</title><rect x="64.6647%" y="229" width="6.8437%" height="15" fill="rgb(240,187,13)"/><text x="64.9147%" y="239.50">mir_borro..</text></g><g><title>item_types_checking (18,322,253 samples, 7.32%)</title><rect x="64.2489%" y="277" width="7.3240%" height="15" fill="rgb(223,113,26)"/><text x="64.4989%" y="287.50">item_types..</text></g><g><title>check_mod_item_types (18,308,102 samples, 7.32%)</title><rect x="64.2546%" y="261" width="7.3184%" height="15" fill="rgb(206,192,2)"/><text x="64.5046%" y="271.50">check_mod_..</text></g><g><title>fn_sig (523,545 samples, 0.21%)</title><rect x="71.7491%" y="245" width="0.2093%" height="15" fill="rgb(241,108,4)"/><text x="71.9991%" y="255.50"></text></g><g><title>named_region_map (930,889 samples, 0.37%)</title><rect x="72.0277%" y="229" width="0.3721%" height="15" fill="rgb(247,173,49)"/><text x="72.2777%" y="239.50"></text></g><g><title>resolve_lifetimes (856,599 samples, 0.34%)</title><rect x="72.0574%" y="213" width="0.3424%" height="15" fill="rgb(224,114,35)"/><text x="72.3074%" y="223.50"></text></g><g><title>lint_levels (328,704 samples, 0.13%)</title><rect x="72.2685%" y="197" width="0.1314%" height="15" fill="rgb(245,159,27)"/><text x="72.5185%" y="207.50"></text></g><g><title>generics_of (1,125,742 samples, 0.45%)</title><rect x="71.9584%" y="245" width="0.4500%" height="15" fill="rgb(245,172,44)"/><text x="72.2084%" y="255.50"></text></g><g><title>predicates_of (482,945 samples, 0.19%)</title><rect x="72.4283%" y="245" width="0.1930%" height="15" fill="rgb(236,23,11)"/><text x="72.6783%" y="255.50"></text></g><g><title>predicates_defined_on (404,195 samples, 0.16%)</title><rect x="72.4598%" y="229" width="0.1616%" height="15" fill="rgb(205,117,38)"/><text x="72.7098%" y="239.50"></text></g><g><title>type_collecting (2,840,941 samples, 1.14%)</title><rect x="71.5738%" y="277" width="1.1356%" height="15" fill="rgb(237,72,25)"/><text x="71.8238%" y="287.50"></text></g><g><title>collect_mod_item_types (2,826,050 samples, 1.13%)</title><rect x="71.5797%" y="261" width="1.1297%" height="15" fill="rgb(244,70,9)"/><text x="71.8297%" y="271.50"></text></g><g><title>evaluate_obligation (343,343 samples, 0.14%)</title><rect x="73.2349%" y="245" width="0.1372%" height="15" fill="rgb(217,125,39)"/><text x="73.4849%" y="255.50"></text></g><g><title>check_impl_item_well_formed (1,877,762 samples, 0.75%)</title><rect x="72.8221%" y="261" width="0.7506%" height="15" fill="rgb(235,36,10)"/><text x="73.0721%" y="271.50"></text></g><g><title>evaluate_obligation (470,913 samples, 0.19%)</title><rect x="74.4109%" y="245" width="0.1882%" height="15" fill="rgb(251,123,47)"/><text x="74.6609%" y="255.50"></text></g><g><title>param_env (466,129 samples, 0.19%)</title><rect x="74.6664%" y="245" width="0.1863%" height="15" fill="rgb(221,13,13)"/><text x="74.9164%" y="255.50"></text></g><g><title>region_scope_tree (1,024,664 samples, 0.41%)</title><rect x="74.8779%" y="245" width="0.4096%" height="15" fill="rgb(238,131,9)"/><text x="75.1279%" y="255.50"></text></g><g><title>analysis (187,585,506 samples, 74.98%)</title><rect x="0.3237%" y="309" width="74.9844%" height="15" fill="rgb(211,50,8)"/><text x="0.5737%" y="319.50">analysis</text></g><g><title>type_check_crate (117,749,860 samples, 47.07%)</title><rect x="28.2395%" y="293" width="47.0687%" height="15" fill="rgb(245,182,24)"/><text x="28.4895%" y="303.50">type_check_crate</text></g><g><title>wf_checking (6,489,423 samples, 2.59%)</title><rect x="72.7141%" y="277" width="2.5940%" height="15" fill="rgb(242,14,37)"/><text x="72.9641%" y="287.50">wf..</text></g><g><title>check_item_well_formed (4,341,497 samples, 1.74%)</title><rect x="73.5727%" y="261" width="1.7354%" height="15" fill="rgb(246,228,12)"/><text x="73.8227%" y="271.50"></text></g><g><title>codegen_crate (381,984 samples, 0.15%)</title><rect x="75.3128%" y="309" width="0.1527%" height="15" fill="rgb(213,55,15)"/><text x="75.5628%" y="319.50"></text></g><g><title>AST_validation (454,095 samples, 0.18%)</title><rect x="75.5577%" y="293" width="0.1815%" height="15" fill="rgb(209,9,3)"/><text x="75.8077%" y="303.50"></text></g><g><title>metadata_register_crate (2,618,749 samples, 1.05%)</title><rect x="88.9868%" y="261" width="1.0468%" height="15" fill="rgb(230,59,30)"/><text x="89.2368%" y="271.50"></text></g><g><title>metadata_register_crate (983,101 samples, 0.39%)</title><rect x="89.6406%" y="245" width="0.3930%" height="15" fill="rgb(209,121,21)"/><text x="89.8906%" y="255.50"></text></g><g><title>macro_expand_crate (36,542,047 samples, 14.61%)</title><rect x="75.8210%" y="293" width="14.6071%" height="15" fill="rgb(220,109,13)"/><text x="76.0710%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (36,524,196 samples, 14.60%)</title><rect x="75.8281%" y="277" width="14.6000%" height="15" fill="rgb(232,18,1)"/><text x="76.0781%" y="287.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (986,931 samples, 0.39%)</title><rect x="90.0336%" y="261" width="0.3945%" height="15" fill="rgb(215,41,42)"/><text x="90.2836%" y="271.50"></text></g><g><title>finalize_macro_resolutions (333,644 samples, 0.13%)</title><rect x="90.5764%" y="277" width="0.1334%" height="15" fill="rgb(224,123,36)"/><text x="90.8264%" y="287.50"></text></g><g><title>late_resolve_crate (4,596,581 samples, 1.84%)</title><rect x="90.7098%" y="277" width="1.8374%" height="15" fill="rgb(240,125,3)"/><text x="90.9598%" y="287.50">l..</text></g><g><title>configure_and_expand (42,990,529 samples, 17.18%)</title><rect x="75.4655%" y="309" width="17.1848%" height="15" fill="rgb(205,98,50)"/><text x="75.7155%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (5,331,139 samples, 2.13%)</title><rect x="90.5193%" y="293" width="2.1310%" height="15" fill="rgb(205,185,37)"/><text x="90.7693%" y="303.50">r..</text></g><g><title>drop_ast (351,223 samples, 0.14%)</title><rect x="92.6503%" y="309" width="0.1404%" height="15" fill="rgb(238,207,15)"/><text x="92.9003%" y="319.50"></text></g><g><title>early_lint_checks (872,959 samples, 0.35%)</title><rect x="92.7984%" y="309" width="0.3490%" height="15" fill="rgb(213,199,42)"/><text x="93.0484%" y="319.50"></text></g><g><title>free_global_ctxt (4,909,105 samples, 1.96%)</title><rect x="93.1474%" y="309" width="1.9623%" height="15" fill="rgb(235,201,11)"/><text x="93.3974%" y="319.50">f..</text></g><g><title>generate_crate_metadata (1,827,391 samples, 0.73%)</title><rect x="95.1097%" y="309" width="0.7305%" height="15" fill="rgb(207,46,11)"/><text x="95.3597%" y="319.50"></text></g><g><title>hir_lowering (4,867,854 samples, 1.95%)</title><rect x="95.8402%" y="309" width="1.9459%" height="15" fill="rgb(241,35,35)"/><text x="96.0902%" y="319.50">h..</text></g><g><title>parse_crate (3,816,952 samples, 1.53%)</title><rect x="97.8165%" y="309" width="1.5258%" height="15" fill="rgb(243,32,47)"/><text x="98.0665%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (987,132 samples, 0.39%)</title><rect x="99.4154%" y="309" width="0.3946%" height="15" fill="rgb(247,202,23)"/><text x="99.6654%" y="319.50"></text></g><g><title>all (250,165,883 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (250,165,883 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (375,274 samples, 0.15%)</title><rect x="99.8500%" y="309" width="0.1500%" height="15" fill="rgb(222,74,54)"/><text x="100.1000%" y="319.50"></text></g></svg></svg>