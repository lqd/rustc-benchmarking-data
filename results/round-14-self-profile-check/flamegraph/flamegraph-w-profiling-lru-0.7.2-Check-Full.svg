<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (297,234 samples, 0.28%)</title><rect x="9.3974%" y="117" width="0.2787%" height="15" fill="rgb(227,0,7)"/><text x="9.6474%" y="127.50"></text></g><g><title>item_attrs (177,473 samples, 0.17%)</title><rect x="10.0957%" y="85" width="0.1664%" height="15" fill="rgb(217,0,24)"/><text x="10.3457%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (171,723 samples, 0.16%)</title><rect x="10.1011%" y="69" width="0.1610%" height="15" fill="rgb(221,193,54)"/><text x="10.3511%" y="79.50"></text></g><g><title>codegen_fn_attrs (268,273 samples, 0.25%)</title><rect x="10.0226%" y="101" width="0.2515%" height="15" fill="rgb(248,212,6)"/><text x="10.2726%" y="111.50"></text></g><g><title>is_copy_raw (199,030 samples, 0.19%)</title><rect x="11.9268%" y="85" width="0.1866%" height="15" fill="rgb(208,68,35)"/><text x="12.1768%" y="95.50"></text></g><g><title>evaluate_obligation (166,320 samples, 0.16%)</title><rect x="11.9575%" y="69" width="0.1560%" height="15" fill="rgb(232,128,0)"/><text x="12.2075%" y="79.50"></text></g><g><title>adt_drop_tys (279,951 samples, 0.26%)</title><rect x="12.1809%" y="69" width="0.2625%" height="15" fill="rgb(207,160,47)"/><text x="12.4309%" y="79.50"></text></g><g><title>needs_drop_raw (900,589 samples, 0.84%)</title><rect x="12.1135%" y="85" width="0.8444%" height="15" fill="rgb(228,23,34)"/><text x="12.3635%" y="95.50"></text></g><g><title>is_copy_raw (548,696 samples, 0.51%)</title><rect x="12.4434%" y="69" width="0.5145%" height="15" fill="rgb(218,30,26)"/><text x="12.6934%" y="79.50"></text></g><g><title>evaluate_obligation (466,116 samples, 0.44%)</title><rect x="12.5208%" y="53" width="0.4371%" height="15" fill="rgb(220,122,19)"/><text x="12.7708%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (113,690 samples, 0.11%)</title><rect x="13.0995%" y="69" width="0.1066%" height="15" fill="rgb(250,228,42)"/><text x="13.3495%" y="79.50"></text></g><g><title>specialization_graph_of (373,654 samples, 0.35%)</title><rect x="13.2206%" y="69" width="0.3504%" height="15" fill="rgb(240,193,28)"/><text x="13.4706%" y="79.50"></text></g><g><title>impl_trait_ref (140,341 samples, 0.13%)</title><rect x="13.4394%" y="53" width="0.1316%" height="15" fill="rgb(216,20,37)"/><text x="13.6894%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (110,981 samples, 0.10%)</title><rect x="13.4669%" y="37" width="0.1041%" height="15" fill="rgb(206,188,39)"/><text x="13.7169%" y="47.50"></text></g><g><title>resolve_instance (719,127 samples, 0.67%)</title><rect x="12.9579%" y="85" width="0.6743%" height="15" fill="rgb(217,207,13)"/><text x="13.2079%" y="95.50"></text></g><g><title>thir_body (746,360 samples, 0.70%)</title><rect x="13.6492%" y="85" width="0.6998%" height="15" fill="rgb(231,73,38)"/><text x="13.8992%" y="95.50"></text></g><g><title>mir_const (5,897,772 samples, 5.53%)</title><rect x="8.8314%" y="133" width="5.5301%" height="15" fill="rgb(225,20,46)"/><text x="9.0814%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (4,996,890 samples, 4.69%)</title><rect x="9.6761%" y="117" width="4.6854%" height="15" fill="rgb(210,31,41)"/><text x="9.9261%" y="127.50">unsaf..</text></g><g><title>mir_built (4,359,164 samples, 4.09%)</title><rect x="10.2741%" y="101" width="4.0874%" height="15" fill="rgb(221,200,47)"/><text x="10.5241%" y="111.50">mir_..</text></g><g><title>mir_promoted (6,475,907 samples, 6.07%)</title><rect x="8.3188%" y="149" width="6.0722%" height="15" fill="rgb(226,26,5)"/><text x="8.5688%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (443,466 samples, 0.42%)</title><rect x="14.3910%" y="149" width="0.4158%" height="15" fill="rgb(249,33,26)"/><text x="14.6410%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,397,507 samples, 1.31%)</title><rect x="14.9592%" y="149" width="1.3104%" height="15" fill="rgb(235,183,28)"/><text x="15.2092%" y="159.50"></text></g><g><title>MIR_borrow_checking (15,997,488 samples, 15.00%)</title><rect x="1.2705%" y="181" width="15.0002%" height="15" fill="rgb(221,5,38)"/><text x="1.5205%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,913,047 samples, 14.92%)</title><rect x="1.3497%" y="165" width="14.9210%" height="15" fill="rgb(247,18,42)"/><text x="1.5997%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (295,333 samples, 0.28%)</title><rect x="16.2916%" y="181" width="0.2769%" height="15" fill="rgb(241,131,45)"/><text x="16.5416%" y="191.50"></text></g><g><title>associated_item (113,431 samples, 0.11%)</title><rect x="17.1112%" y="117" width="0.1064%" height="15" fill="rgb(249,31,29)"/><text x="17.3612%" y="127.50"></text></g><g><title>get_lang_items (137,352 samples, 0.13%)</title><rect x="17.2754%" y="101" width="0.1288%" height="15" fill="rgb(225,111,53)"/><text x="17.5254%" y="111.50"></text></g><g><title>item_attrs (174,122 samples, 0.16%)</title><rect x="17.4042%" y="101" width="0.1633%" height="15" fill="rgb(238,160,17)"/><text x="17.6542%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (167,112 samples, 0.16%)</title><rect x="17.4108%" y="85" width="0.1567%" height="15" fill="rgb(214,148,48)"/><text x="17.6608%" y="95.50"></text></g><g><title>codegen_fn_attrs (456,454 samples, 0.43%)</title><rect x="17.2176%" y="117" width="0.4280%" height="15" fill="rgb(232,36,49)"/><text x="17.4676%" y="127.50"></text></g><g><title>codegen_fn_attrs (756,528 samples, 0.71%)</title><rect x="16.9469%" y="149" width="0.7094%" height="15" fill="rgb(209,103,24)"/><text x="17.1969%" y="159.50"></text></g><g><title>should_inherit_track_caller (661,727 samples, 0.62%)</title><rect x="17.0358%" y="133" width="0.6205%" height="15" fill="rgb(229,88,8)"/><text x="17.2858%" y="143.50"></text></g><g><title>check_mod_attrs (1,130,893 samples, 1.06%)</title><rect x="16.5965%" y="165" width="1.0604%" height="15" fill="rgb(213,181,19)"/><text x="16.8465%" y="175.50"></text></g><g><title>check_mod_const_bodies (195,632 samples, 0.18%)</title><rect x="17.6568%" y="165" width="0.1834%" height="15" fill="rgb(254,191,54)"/><text x="17.9068%" y="175.50"></text></g><g><title>lint_levels (200,802 samples, 0.19%)</title><rect x="18.2965%" y="149" width="0.1883%" height="15" fill="rgb(241,83,37)"/><text x="18.5465%" y="159.50"></text></g><g><title>lookup_deprecation_entry (261,122 samples, 0.24%)</title><rect x="18.4848%" y="149" width="0.2448%" height="15" fill="rgb(233,36,39)"/><text x="18.7348%" y="159.50"></text></g><g><title>stability_index (163,171 samples, 0.15%)</title><rect x="18.5766%" y="133" width="0.1530%" height="15" fill="rgb(226,3,54)"/><text x="18.8266%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (985,391 samples, 0.92%)</title><rect x="17.9630%" y="165" width="0.9240%" height="15" fill="rgb(245,192,40)"/><text x="18.2130%" y="175.50"></text></g><g><title>misc_checking_1 (2,542,628 samples, 2.38%)</title><rect x="16.5690%" y="181" width="2.3841%" height="15" fill="rgb(238,167,29)"/><text x="16.8190%" y="191.50">mi..</text></g><g><title>liveness_and_intrinsic_checking (350,434 samples, 0.33%)</title><rect x="18.9545%" y="165" width="0.3286%" height="15" fill="rgb(232,182,51)"/><text x="19.2045%" y="175.50"></text></g><g><title>check_mod_liveness (284,343 samples, 0.27%)</title><rect x="19.0164%" y="149" width="0.2666%" height="15" fill="rgb(231,60,39)"/><text x="19.2664%" y="159.50"></text></g><g><title>misc_checking_2 (659,767 samples, 0.62%)</title><rect x="18.9531%" y="181" width="0.6186%" height="15" fill="rgb(208,69,12)"/><text x="19.2031%" y="191.50"></text></g><g><title>match_checking (307,903 samples, 0.29%)</title><rect x="19.2830%" y="165" width="0.2887%" height="15" fill="rgb(235,93,37)"/><text x="19.5330%" y="175.50"></text></g><g><title>check_match (286,083 samples, 0.27%)</title><rect x="19.3035%" y="149" width="0.2682%" height="15" fill="rgb(213,116,39)"/><text x="19.5535%" y="159.50"></text></g><g><title>check_private_in_public (163,812 samples, 0.15%)</title><rect x="19.5803%" y="165" width="0.1536%" height="15" fill="rgb(222,207,29)"/><text x="19.8303%" y="175.50"></text></g><g><title>death_checking (227,023 samples, 0.21%)</title><rect x="19.7339%" y="165" width="0.2129%" height="15" fill="rgb(206,96,30)"/><text x="19.9839%" y="175.50"></text></g><g><title>param_env (117,620 samples, 0.11%)</title><rect x="20.3108%" y="133" width="0.1103%" height="15" fill="rgb(218,138,4)"/><text x="20.5608%" y="143.50"></text></g><g><title>crate_lints (945,720 samples, 0.89%)</title><rect x="19.9479%" y="149" width="0.8868%" height="15" fill="rgb(250,191,14)"/><text x="20.1979%" y="159.50"></text></g><g><title>type_of (437,814 samples, 0.41%)</title><rect x="20.4241%" y="133" width="0.4105%" height="15" fill="rgb(239,60,40)"/><text x="20.6741%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (341,244 samples, 0.32%)</title><rect x="20.5147%" y="117" width="0.3200%" height="15" fill="rgb(206,27,48)"/><text x="20.7647%" y="127.50"></text></g><g><title>lint_checking (1,279,784 samples, 1.20%)</title><rect x="19.9467%" y="165" width="1.2000%" height="15" fill="rgb(225,35,8)"/><text x="20.1967%" y="175.50"></text></g><g><title>module_lints (332,814 samples, 0.31%)</title><rect x="20.8347%" y="149" width="0.3121%" height="15" fill="rgb(250,213,24)"/><text x="21.0847%" y="159.50"></text></g><g><title>lint_mod (330,724 samples, 0.31%)</title><rect x="20.8366%" y="133" width="0.3101%" height="15" fill="rgb(247,123,22)"/><text x="21.0866%" y="143.50"></text></g><g><title>privacy_access_levels (207,232 samples, 0.19%)</title><rect x="21.1467%" y="165" width="0.1943%" height="15" fill="rgb(231,138,38)"/><text x="21.3967%" y="175.50"></text></g><g><title>privacy_checking_modules (896,660 samples, 0.84%)</title><rect x="21.3410%" y="165" width="0.8408%" height="15" fill="rgb(231,145,46)"/><text x="21.5910%" y="175.50"></text></g><g><title>check_mod_privacy (895,050 samples, 0.84%)</title><rect x="21.3426%" y="149" width="0.8393%" height="15" fill="rgb(251,118,11)"/><text x="21.5926%" y="159.50"></text></g><g><title>misc_checking_3 (2,797,221 samples, 2.62%)</title><rect x="19.5717%" y="181" width="2.6228%" height="15" fill="rgb(217,147,25)"/><text x="19.8217%" y="191.50">mi..</text></g><g><title>impl_parent (1,835,449 samples, 1.72%)</title><rect x="25.2819%" y="117" width="1.7210%" height="15" fill="rgb(247,81,37)"/><text x="25.5319%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (931,258 samples, 0.87%)</title><rect x="26.1297%" y="101" width="0.8732%" height="15" fill="rgb(209,12,38)"/><text x="26.3797%" y="111.50"></text></g><g><title>impl_trait_ref (4,179,743 samples, 3.92%)</title><rect x="27.0043%" y="117" width="3.9192%" height="15" fill="rgb(227,1,9)"/><text x="27.2543%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,485,526 samples, 3.27%)</title><rect x="27.6553%" y="101" width="3.2682%" height="15" fill="rgb(248,47,43)"/><text x="27.9053%" y="111.50">met..</text></g><g><title>trait_impls_of (632,769 samples, 0.59%)</title><rect x="31.1102%" y="117" width="0.5933%" height="15" fill="rgb(221,10,30)"/><text x="31.3602%" y="127.50"></text></g><g><title>implementations_of_trait (157,712 samples, 0.15%)</title><rect x="31.5557%" y="101" width="0.1479%" height="15" fill="rgb(210,229,1)"/><text x="31.8057%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (119,172 samples, 0.11%)</title><rect x="31.5918%" y="85" width="0.1117%" height="15" fill="rgb(222,148,37)"/><text x="31.8418%" y="95.50"></text></g><g><title>coherent_trait (10,076,032 samples, 9.45%)</title><rect x="22.2728%" y="149" width="9.4479%" height="15" fill="rgb(234,67,33)"/><text x="22.5228%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (10,047,942 samples, 9.42%)</title><rect x="22.2992%" y="133" width="9.4216%" height="15" fill="rgb(247,98,35)"/><text x="22.5492%" y="143.50">specializatio..</text></g><g><title>coherence_checking (10,211,993 samples, 9.58%)</title><rect x="22.2462%" y="165" width="9.5754%" height="15" fill="rgb(247,138,52)"/><text x="22.4962%" y="175.50">coherence_chec..</text></g><g><title>associated_item (133,762 samples, 0.13%)</title><rect x="43.9722%" y="101" width="0.1254%" height="15" fill="rgb(213,79,30)"/><text x="44.2222%" y="111.50"></text></g><g><title>associated_items (214,343 samples, 0.20%)</title><rect x="43.9113%" y="117" width="0.2010%" height="15" fill="rgb(246,177,23)"/><text x="44.1613%" y="127.50"></text></g><g><title>dropck_outlives (358,785 samples, 0.34%)</title><rect x="44.1515%" y="117" width="0.3364%" height="15" fill="rgb(230,62,27)"/><text x="44.4015%" y="127.50"></text></g><g><title>adt_dtorck_constraint (193,202 samples, 0.18%)</title><rect x="44.3067%" y="101" width="0.1812%" height="15" fill="rgb(216,154,8)"/><text x="44.5567%" y="111.50"></text></g><g><title>evaluate_obligation (831,537 samples, 0.78%)</title><rect x="44.4879%" y="117" width="0.7797%" height="15" fill="rgb(244,35,45)"/><text x="44.7379%" y="127.50"></text></g><g><title>item_attrs (125,980 samples, 0.12%)</title><rect x="45.4589%" y="117" width="0.1181%" height="15" fill="rgb(251,115,12)"/><text x="45.7089%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (121,220 samples, 0.11%)</title><rect x="45.4634%" y="101" width="0.1137%" height="15" fill="rgb(240,54,50)"/><text x="45.7134%" y="111.50"></text></g><g><title>method_autoderef_steps (183,454 samples, 0.17%)</title><rect x="45.6080%" y="117" width="0.1720%" height="15" fill="rgb(233,84,52)"/><text x="45.8580%" y="127.50"></text></g><g><title>object_safety_violations (135,322 samples, 0.13%)</title><rect x="45.7800%" y="117" width="0.1269%" height="15" fill="rgb(207,117,47)"/><text x="46.0300%" y="127.50"></text></g><g><title>predicates_of (208,183 samples, 0.20%)</title><rect x="45.9428%" y="117" width="0.1952%" height="15" fill="rgb(249,43,39)"/><text x="46.1928%" y="127.50"></text></g><g><title>predicates_defined_on (141,210 samples, 0.13%)</title><rect x="46.0056%" y="101" width="0.1324%" height="15" fill="rgb(209,38,44)"/><text x="46.2556%" y="111.50"></text></g><g><title>evaluate_obligation (376,273 samples, 0.35%)</title><rect x="49.8706%" y="101" width="0.3528%" height="15" fill="rgb(236,212,23)"/><text x="50.1206%" y="111.50"></text></g><g><title>method_autoderef_steps (119,150 samples, 0.11%)</title><rect x="50.4584%" y="101" width="0.1117%" height="15" fill="rgb(242,79,21)"/><text x="50.7084%" y="111.50"></text></g><g><title>predicates_of (114,992 samples, 0.11%)</title><rect x="50.5750%" y="101" width="0.1078%" height="15" fill="rgb(211,96,35)"/><text x="50.8250%" y="111.50"></text></g><g><title>typeck (4,836,434 samples, 4.53%)</title><rect x="46.1847%" y="117" width="4.5349%" height="15" fill="rgb(253,215,40)"/><text x="46.4347%" y="127.50">typeck</text></g><g><title>item_bodies_checking (20,105,503 samples, 18.85%)</title><rect x="31.8971%" y="165" width="18.8521%" height="15" fill="rgb(211,81,21)"/><text x="32.1471%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,102,573 samples, 18.85%)</title><rect x="31.8999%" y="149" width="18.8494%" height="15" fill="rgb(208,190,38)"/><text x="32.1499%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (20,043,173 samples, 18.79%)</title><rect x="31.9556%" y="133" width="18.7937%" height="15" fill="rgb(235,213,38)"/><text x="32.2056%" y="143.50">typeck</text></g><g><title>item_types_checking (1,575,528 samples, 1.48%)</title><rect x="50.7493%" y="165" width="1.4773%" height="15" fill="rgb(237,122,38)"/><text x="50.9993%" y="175.50"></text></g><g><title>check_mod_item_types (1,572,938 samples, 1.47%)</title><rect x="50.7517%" y="149" width="1.4749%" height="15" fill="rgb(244,218,35)"/><text x="51.0017%" y="159.50"></text></g><g><title>fn_sig (392,344 samples, 0.37%)</title><rect x="52.6976%" y="133" width="0.3679%" height="15" fill="rgb(240,68,47)"/><text x="52.9476%" y="143.50"></text></g><g><title>is_late_bound_map (359,274 samples, 0.34%)</title><rect x="53.3191%" y="117" width="0.3369%" height="15" fill="rgb(210,16,53)"/><text x="53.5691%" y="127.50"></text></g><g><title>resolve_lifetimes (320,023 samples, 0.30%)</title><rect x="53.3559%" y="101" width="0.3001%" height="15" fill="rgb(235,124,12)"/><text x="53.6059%" y="111.50"></text></g><g><title>generics_of (754,760 samples, 0.71%)</title><rect x="53.0655%" y="133" width="0.7077%" height="15" fill="rgb(224,169,11)"/><text x="53.3155%" y="143.50"></text></g><g><title>impl_trait_ref (149,752 samples, 0.14%)</title><rect x="53.7732%" y="133" width="0.1404%" height="15" fill="rgb(250,166,2)"/><text x="54.0232%" y="143.50"></text></g><g><title>late_bound_vars_map (446,836 samples, 0.42%)</title><rect x="54.6344%" y="85" width="0.4190%" height="15" fill="rgb(242,216,29)"/><text x="54.8844%" y="95.50"></text></g><g><title>resolve_lifetimes (427,606 samples, 0.40%)</title><rect x="54.6524%" y="69" width="0.4009%" height="15" fill="rgb(230,116,27)"/><text x="54.9024%" y="79.50"></text></g><g><title>explicit_predicates_of (962,779 samples, 0.90%)</title><rect x="54.1668%" y="101" width="0.9028%" height="15" fill="rgb(228,99,48)"/><text x="54.4168%" y="111.50"></text></g><g><title>generics_of (118,331 samples, 0.11%)</title><rect x="55.4651%" y="53" width="0.1110%" height="15" fill="rgb(253,11,6)"/><text x="55.7151%" y="63.50"></text></g><g><title>predicates_of (1,839,296 samples, 1.72%)</title><rect x="53.9136%" y="133" width="1.7246%" height="15" fill="rgb(247,143,39)"/><text x="54.1636%" y="143.50"></text></g><g><title>predicates_defined_on (1,738,966 samples, 1.63%)</title><rect x="54.0077%" y="117" width="1.6306%" height="15" fill="rgb(236,97,10)"/><text x="54.2577%" y="127.50"></text></g><g><title>inferred_outlives_of (606,547 samples, 0.57%)</title><rect x="55.0695%" y="101" width="0.5687%" height="15" fill="rgb(233,208,19)"/><text x="55.3195%" y="111.50"></text></g><g><title>inferred_outlives_crate (568,387 samples, 0.53%)</title><rect x="55.1053%" y="85" width="0.5330%" height="15" fill="rgb(216,164,2)"/><text x="55.3553%" y="95.50"></text></g><g><title>type_of (280,073 samples, 0.26%)</title><rect x="55.3757%" y="69" width="0.2626%" height="15" fill="rgb(220,129,5)"/><text x="55.6257%" y="79.50"></text></g><g><title>type_collecting (3,991,245 samples, 3.74%)</title><rect x="52.2282%" y="165" width="3.7424%" height="15" fill="rgb(242,17,10)"/><text x="52.4782%" y="175.50">type..</text></g><g><title>collect_mod_item_types (3,980,645 samples, 3.73%)</title><rect x="52.2381%" y="149" width="3.7325%" height="15" fill="rgb(242,107,0)"/><text x="52.4881%" y="159.50">coll..</text></g><g><title>type_of (354,417 samples, 0.33%)</title><rect x="55.6383%" y="133" width="0.3323%" height="15" fill="rgb(251,28,31)"/><text x="55.8883%" y="143.50"></text></g><g><title>evaluate_obligation (446,053 samples, 0.42%)</title><rect x="58.2575%" y="133" width="0.4182%" height="15" fill="rgb(233,223,10)"/><text x="58.5075%" y="143.50"></text></g><g><title>implied_outlives_bounds (316,452 samples, 0.30%)</title><rect x="58.6758%" y="133" width="0.2967%" height="15" fill="rgb(215,21,27)"/><text x="58.9258%" y="143.50"></text></g><g><title>param_env (377,496 samples, 0.35%)</title><rect x="58.9725%" y="133" width="0.3540%" height="15" fill="rgb(232,23,21)"/><text x="59.2225%" y="143.50"></text></g><g><title>region_scope_tree (310,082 samples, 0.29%)</title><rect x="59.3509%" y="133" width="0.2908%" height="15" fill="rgb(244,5,23)"/><text x="59.6009%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,759,600 samples, 3.53%)</title><rect x="56.1297%" y="149" width="3.5252%" height="15" fill="rgb(226,81,46)"/><text x="56.3797%" y="159.50">che..</text></g><g><title>adt_def (112,221 samples, 0.11%)</title><rect x="61.3500%" y="117" width="0.1052%" height="15" fill="rgb(247,70,30)"/><text x="61.6000%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (110,721 samples, 0.10%)</title><rect x="61.3514%" y="101" width="0.1038%" height="15" fill="rgb(212,68,19)"/><text x="61.6014%" y="111.50"></text></g><g><title>adt_sized_constraint (182,502 samples, 0.17%)</title><rect x="61.3418%" y="133" width="0.1711%" height="15" fill="rgb(240,187,13)"/><text x="61.5918%" y="143.50"></text></g><g><title>adt_sized_constraint (162,311 samples, 0.15%)</title><rect x="61.5927%" y="117" width="0.1522%" height="15" fill="rgb(223,113,26)"/><text x="61.8427%" y="127.50"></text></g><g><title>evaluate_obligation (277,782 samples, 0.26%)</title><rect x="61.5130%" y="133" width="0.2605%" height="15" fill="rgb(206,192,2)"/><text x="61.7630%" y="143.50"></text></g><g><title>implied_outlives_bounds (169,471 samples, 0.16%)</title><rect x="61.7858%" y="133" width="0.1589%" height="15" fill="rgb(241,108,4)"/><text x="62.0358%" y="143.50"></text></g><g><title>param_env (276,505 samples, 0.26%)</title><rect x="61.9447%" y="133" width="0.2593%" height="15" fill="rgb(247,173,49)"/><text x="62.1947%" y="143.50"></text></g><g><title>analysis (65,737,370 samples, 61.64%)</title><rect x="0.7824%" y="197" width="61.6393%" height="15" fill="rgb(224,114,35)"/><text x="1.0324%" y="207.50">analysis</text></g><g><title>type_check_crate (42,901,647 samples, 40.23%)</title><rect x="22.1946%" y="181" width="40.2272%" height="15" fill="rgb(245,159,27)"/><text x="22.4446%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,875,946 samples, 6.45%)</title><rect x="55.9745%" y="165" width="6.4473%" height="15" fill="rgb(245,172,44)"/><text x="56.2245%" y="175.50">wf_check..</text></g><g><title>check_item_well_formed (2,950,744 samples, 2.77%)</title><rect x="59.6550%" y="149" width="2.7668%" height="15" fill="rgb(236,23,11)"/><text x="59.9050%" y="159.50">ch..</text></g><g><title>codegen_crate (598,027 samples, 0.56%)</title><rect x="62.4327%" y="197" width="0.5607%" height="15" fill="rgb(205,117,38)"/><text x="62.6827%" y="207.50"></text></g><g><title>AST_validation (234,062 samples, 0.22%)</title><rect x="63.2182%" y="181" width="0.2195%" height="15" fill="rgb(237,72,25)"/><text x="63.4682%" y="191.50"></text></g><g><title>complete_gated_feature_checking (130,972 samples, 0.12%)</title><rect x="63.4377%" y="181" width="0.1228%" height="15" fill="rgb(244,70,9)"/><text x="63.6877%" y="191.50"></text></g><g><title>macro_expand_crate (10,539,747 samples, 9.88%)</title><rect x="63.6396%" y="181" width="9.8827%" height="15" fill="rgb(217,125,39)"/><text x="63.8896%" y="191.50">macro_expand_c..</text></g><g><title>expand_crate (10,521,816 samples, 9.87%)</title><rect x="63.6564%" y="165" width="9.8659%" height="15" fill="rgb(235,36,10)"/><text x="63.9064%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (878,179 samples, 0.82%)</title><rect x="72.6988%" y="149" width="0.8234%" height="15" fill="rgb(251,123,47)"/><text x="72.9488%" y="159.50"></text></g><g><title>metadata_register_crate (395,504 samples, 0.37%)</title><rect x="73.1514%" y="133" width="0.3708%" height="15" fill="rgb(221,13,13)"/><text x="73.4014%" y="143.50"></text></g><g><title>metadata_register_crate (190,222 samples, 0.18%)</title><rect x="73.3439%" y="117" width="0.1784%" height="15" fill="rgb(238,131,9)"/><text x="73.5939%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (677,608 samples, 0.64%)</title><rect x="73.5271%" y="181" width="0.6354%" height="15" fill="rgb(211,50,8)"/><text x="73.7771%" y="191.50"></text></g><g><title>finalize_macro_resolutions (151,712 samples, 0.14%)</title><rect x="74.2290%" y="165" width="0.1423%" height="15" fill="rgb(245,182,24)"/><text x="74.4790%" y="175.50"></text></g><g><title>late_resolve_crate (3,474,108 samples, 3.26%)</title><rect x="74.3713%" y="165" width="3.2575%" height="15" fill="rgb(242,14,37)"/><text x="74.6213%" y="175.50">lat..</text></g><g><title>configure_and_expand (15,803,906 samples, 14.82%)</title><rect x="62.9935%" y="197" width="14.8187%" height="15" fill="rgb(246,228,12)"/><text x="63.2435%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,892,283 samples, 3.65%)</title><rect x="74.1625%" y="181" width="3.6496%" height="15" fill="rgb(213,55,15)"/><text x="74.4125%" y="191.50">reso..</text></g><g><title>drop_ast (454,705 samples, 0.43%)</title><rect x="77.8121%" y="197" width="0.4264%" height="15" fill="rgb(209,9,3)"/><text x="78.0621%" y="207.50"></text></g><g><title>early_lint_checks (641,097 samples, 0.60%)</title><rect x="78.2565%" y="197" width="0.6011%" height="15" fill="rgb(230,59,30)"/><text x="78.5065%" y="207.50"></text></g><g><title>free_global_ctxt (2,414,727 samples, 2.26%)</title><rect x="78.8577%" y="197" width="2.2642%" height="15" fill="rgb(209,121,21)"/><text x="79.1077%" y="207.50">f..</text></g><g><title>generate_crate_metadata (979,081 samples, 0.92%)</title><rect x="81.1218%" y="197" width="0.9180%" height="15" fill="rgb(220,109,13)"/><text x="81.3718%" y="207.50"></text></g><g><title>hir_lowering (4,980,296 samples, 4.67%)</title><rect x="82.0399%" y="197" width="4.6698%" height="15" fill="rgb(232,18,1)"/><text x="82.2899%" y="207.50">hir_l..</text></g><g><title>parse_crate (12,754,642 samples, 11.96%)</title><rect x="86.7561%" y="197" width="11.9595%" height="15" fill="rgb(215,41,42)"/><text x="87.0061%" y="207.50">parse_crate</text></g><g><title>prepare_outputs (320,483 samples, 0.30%)</title><rect x="98.7247%" y="197" width="0.3005%" height="15" fill="rgb(224,123,36)"/><text x="98.9747%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (551,776 samples, 0.52%)</title><rect x="99.0252%" y="197" width="0.5174%" height="15" fill="rgb(240,125,3)"/><text x="99.2752%" y="207.50"></text></g><g><title>setup_global_ctxt (148,052 samples, 0.14%)</title><rect x="99.5524%" y="197" width="0.1388%" height="15" fill="rgb(205,98,50)"/><text x="99.8024%" y="207.50"></text></g><g><title>all (106,648,465 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (106,648,465 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (329,274 samples, 0.31%)</title><rect x="99.6913%" y="197" width="0.3087%" height="15" fill="rgb(213,199,42)"/><text x="99.9413%" y="207.50"></text></g></svg></svg>