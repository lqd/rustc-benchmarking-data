<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (178,641 samples, 0.19%)</title><rect x="13.1275%" y="149" width="0.1905%" height="15" fill="rgb(227,0,7)"/><text x="13.3775%" y="159.50"></text></g><g><title>is_copy_raw (265,313 samples, 0.28%)</title><rect x="19.1516%" y="85" width="0.2829%" height="15" fill="rgb(217,0,24)"/><text x="19.4016%" y="95.50"></text></g><g><title>evaluate_obligation (213,133 samples, 0.23%)</title><rect x="19.2073%" y="69" width="0.2273%" height="15" fill="rgb(221,193,54)"/><text x="19.4573%" y="79.50"></text></g><g><title>needs_drop_raw (208,733 samples, 0.22%)</title><rect x="19.4351%" y="85" width="0.2226%" height="15" fill="rgb(248,212,6)"/><text x="19.6851%" y="95.50"></text></g><g><title>is_copy_raw (122,282 samples, 0.13%)</title><rect x="19.5273%" y="69" width="0.1304%" height="15" fill="rgb(208,68,35)"/><text x="19.7773%" y="79.50"></text></g><g><title>evaluate_obligation (102,762 samples, 0.11%)</title><rect x="19.5481%" y="53" width="0.1096%" height="15" fill="rgb(232,128,0)"/><text x="19.7981%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (234,464 samples, 0.25%)</title><rect x="19.9654%" y="69" width="0.2500%" height="15" fill="rgb(207,160,47)"/><text x="20.2154%" y="79.50"></text></g><g><title>impl_item_implementor_ids (133,210 samples, 0.14%)</title><rect x="20.2272%" y="69" width="0.1420%" height="15" fill="rgb(228,23,34)"/><text x="20.4772%" y="79.50"></text></g><g><title>associated_items (115,150 samples, 0.12%)</title><rect x="20.2465%" y="53" width="0.1228%" height="15" fill="rgb(218,30,26)"/><text x="20.4965%" y="63.50"></text></g><g><title>resolve_instance (692,398 samples, 0.74%)</title><rect x="19.6894%" y="85" width="0.7383%" height="15" fill="rgb(220,122,19)"/><text x="19.9394%" y="95.50"></text></g><g><title>thir_body (1,027,607 samples, 1.10%)</title><rect x="20.4683%" y="85" width="1.0957%" height="15" fill="rgb(250,228,42)"/><text x="20.7183%" y="95.50"></text></g><g><title>mir_const (6,812,342 samples, 7.26%)</title><rect x="14.3264%" y="133" width="7.2638%" height="15" fill="rgb(240,193,28)"/><text x="14.5764%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (5,836,826 samples, 6.22%)</title><rect x="15.3666%" y="117" width="6.2236%" height="15" fill="rgb(216,20,37)"/><text x="15.6166%" y="127.50">unsafety..</text></g><g><title>mir_built (5,325,317 samples, 5.68%)</title><rect x="15.9120%" y="101" width="5.6782%" height="15" fill="rgb(206,188,39)"/><text x="16.1620%" y="111.50">mir_bui..</text></g><g><title>mir_const (521,907 samples, 0.56%)</title><rect x="21.8490%" y="117" width="0.5565%" height="15" fill="rgb(217,207,13)"/><text x="22.0990%" y="127.50"></text></g><g><title>unsafety_check_result (390,884 samples, 0.42%)</title><rect x="21.9887%" y="101" width="0.4168%" height="15" fill="rgb(231,73,38)"/><text x="22.2387%" y="111.50"></text></g><g><title>mir_built (336,874 samples, 0.36%)</title><rect x="22.0463%" y="85" width="0.3592%" height="15" fill="rgb(225,20,46)"/><text x="22.2963%" y="95.50"></text></g><g><title>mir_promoted (8,524,454 samples, 9.09%)</title><rect x="13.3180%" y="149" width="9.0893%" height="15" fill="rgb(210,31,41)"/><text x="13.5680%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (766,402 samples, 0.82%)</title><rect x="21.5902%" y="133" width="0.8172%" height="15" fill="rgb(221,200,47)"/><text x="21.8402%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (138,971 samples, 0.15%)</title><rect x="22.4089%" y="149" width="0.1482%" height="15" fill="rgb(226,26,5)"/><text x="22.6589%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,042,299 samples, 1.11%)</title><rect x="22.6397%" y="149" width="1.1114%" height="15" fill="rgb(249,33,26)"/><text x="22.8897%" y="159.50"></text></g><g><title>MIR_borrow_checking (21,328,518 samples, 22.74%)</title><rect x="1.0153%" y="181" width="22.7418%" height="15" fill="rgb(235,183,28)"/><text x="1.2653%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,128,605 samples, 22.53%)</title><rect x="1.2285%" y="165" width="22.5287%" height="15" fill="rgb(221,5,38)"/><text x="1.4785%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (425,145 samples, 0.45%)</title><rect x="23.7572%" y="181" width="0.4533%" height="15" fill="rgb(247,18,42)"/><text x="24.0072%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (315,483 samples, 0.34%)</title><rect x="23.8741%" y="165" width="0.3364%" height="15" fill="rgb(241,131,45)"/><text x="24.1241%" y="175.50"></text></g><g><title>hir_module_items (229,323 samples, 0.24%)</title><rect x="24.2105%" y="181" width="0.2445%" height="15" fill="rgb(249,31,29)"/><text x="24.4605%" y="191.50"></text></g><g><title>should_inherit_track_caller (224,880 samples, 0.24%)</title><rect x="25.0654%" y="133" width="0.2398%" height="15" fill="rgb(225,111,53)"/><text x="25.3154%" y="143.50"></text></g><g><title>codegen_fn_attrs (482,054 samples, 0.51%)</title><rect x="24.8129%" y="149" width="0.5140%" height="15" fill="rgb(238,160,17)"/><text x="25.0629%" y="159.50"></text></g><g><title>check_mod_attrs (798,308 samples, 0.85%)</title><rect x="24.4758%" y="165" width="0.8512%" height="15" fill="rgb(214,148,48)"/><text x="24.7258%" y="175.50"></text></g><g><title>check_mod_const_bodies (152,292 samples, 0.16%)</title><rect x="25.3270%" y="165" width="0.1624%" height="15" fill="rgb(232,36,49)"/><text x="25.5770%" y="175.50"></text></g><g><title>lookup_deprecation_entry (127,751 samples, 0.14%)</title><rect x="25.7405%" y="149" width="0.1362%" height="15" fill="rgb(209,103,24)"/><text x="25.9905%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (339,794 samples, 0.36%)</title><rect x="25.5770%" y="165" width="0.3623%" height="15" fill="rgb(229,88,8)"/><text x="25.8270%" y="175.50"></text></g><g><title>misc_checking_1 (1,457,317 samples, 1.55%)</title><rect x="24.4554%" y="181" width="1.5539%" height="15" fill="rgb(213,181,19)"/><text x="24.7054%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (285,303 samples, 0.30%)</title><rect x="26.0111%" y="165" width="0.3042%" height="15" fill="rgb(254,191,54)"/><text x="26.2611%" y="175.50"></text></g><g><title>check_mod_liveness (188,822 samples, 0.20%)</title><rect x="26.1140%" y="149" width="0.2013%" height="15" fill="rgb(241,83,37)"/><text x="26.3640%" y="159.50"></text></g><g><title>misc_checking_2 (987,111 samples, 1.05%)</title><rect x="26.0093%" y="181" width="1.0525%" height="15" fill="rgb(233,36,39)"/><text x="26.2593%" y="191.50"></text></g><g><title>match_checking (700,108 samples, 0.75%)</title><rect x="26.3153%" y="165" width="0.7465%" height="15" fill="rgb(226,3,54)"/><text x="26.5653%" y="175.50"></text></g><g><title>check_match (647,108 samples, 0.69%)</title><rect x="26.3718%" y="149" width="0.6900%" height="15" fill="rgb(245,192,40)"/><text x="26.6218%" y="159.50"></text></g><g><title>check_private_in_public (242,483 samples, 0.26%)</title><rect x="27.0721%" y="165" width="0.2586%" height="15" fill="rgb(238,167,29)"/><text x="27.3221%" y="175.50"></text></g><g><title>death_checking (633,287 samples, 0.68%)</title><rect x="27.3307%" y="165" width="0.6753%" height="15" fill="rgb(232,182,51)"/><text x="27.5807%" y="175.50"></text></g><g><title>item_attrs (215,602 samples, 0.23%)</title><rect x="27.7761%" y="149" width="0.2299%" height="15" fill="rgb(231,60,39)"/><text x="28.0261%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (212,862 samples, 0.23%)</title><rect x="27.7790%" y="133" width="0.2270%" height="15" fill="rgb(208,69,12)"/><text x="28.0290%" y="143.50"></text></g><g><title>eval_to_const_value_raw (383,014 samples, 0.41%)</title><rect x="28.6227%" y="133" width="0.4084%" height="15" fill="rgb(235,93,37)"/><text x="28.8727%" y="143.50"></text></g><g><title>eval_to_const_value_raw (371,503 samples, 0.40%)</title><rect x="28.6350%" y="117" width="0.3961%" height="15" fill="rgb(213,116,39)"/><text x="28.8850%" y="127.50"></text></g><g><title>eval_to_allocation_raw (352,073 samples, 0.38%)</title><rect x="28.6557%" y="101" width="0.3754%" height="15" fill="rgb(222,207,29)"/><text x="28.9057%" y="111.50"></text></g><g><title>mir_for_ctfe (105,582 samples, 0.11%)</title><rect x="28.9186%" y="85" width="0.1126%" height="15" fill="rgb(206,96,30)"/><text x="29.1686%" y="95.50"></text></g><g><title>param_env (115,720 samples, 0.12%)</title><rect x="29.0311%" y="133" width="0.1234%" height="15" fill="rgb(218,138,4)"/><text x="29.2811%" y="143.50"></text></g><g><title>crate_lints (1,440,606 samples, 1.54%)</title><rect x="28.0077%" y="149" width="1.5361%" height="15" fill="rgb(250,191,14)"/><text x="28.2577%" y="159.50"></text></g><g><title>type_of (337,313 samples, 0.36%)</title><rect x="29.1841%" y="133" width="0.3597%" height="15" fill="rgb(239,60,40)"/><text x="29.4341%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (258,981 samples, 0.28%)</title><rect x="29.2676%" y="117" width="0.2761%" height="15" fill="rgb(206,27,48)"/><text x="29.5176%" y="127.50"></text></g><g><title>lint_checking (1,880,341 samples, 2.00%)</title><rect x="28.0059%" y="165" width="2.0049%" height="15" fill="rgb(225,35,8)"/><text x="28.2559%" y="175.50">l..</text></g><g><title>module_lints (438,105 samples, 0.47%)</title><rect x="29.5438%" y="149" width="0.4671%" height="15" fill="rgb(250,213,24)"/><text x="29.7938%" y="159.50"></text></g><g><title>lint_mod (434,325 samples, 0.46%)</title><rect x="29.5478%" y="133" width="0.4631%" height="15" fill="rgb(247,123,22)"/><text x="29.7978%" y="143.50"></text></g><g><title>privacy_access_levels (382,674 samples, 0.41%)</title><rect x="30.0109%" y="165" width="0.4080%" height="15" fill="rgb(231,138,38)"/><text x="30.2609%" y="175.50"></text></g><g><title>privacy_checking_modules (724,048 samples, 0.77%)</title><rect x="30.4189%" y="165" width="0.7720%" height="15" fill="rgb(231,145,46)"/><text x="30.6689%" y="175.50"></text></g><g><title>check_mod_privacy (721,688 samples, 0.77%)</title><rect x="30.4214%" y="149" width="0.7695%" height="15" fill="rgb(251,118,11)"/><text x="30.6714%" y="159.50"></text></g><g><title>misc_checking_3 (3,887,283 samples, 4.14%)</title><rect x="27.0618%" y="181" width="4.1449%" height="15" fill="rgb(217,147,25)"/><text x="27.3118%" y="191.50">misc_..</text></g><g><title>is_copy_raw (242,922 samples, 0.26%)</title><rect x="31.4252%" y="133" width="0.2590%" height="15" fill="rgb(247,81,37)"/><text x="31.6752%" y="143.50"></text></g><g><title>evaluate_obligation (210,462 samples, 0.22%)</title><rect x="31.4598%" y="117" width="0.2244%" height="15" fill="rgb(209,12,38)"/><text x="31.7098%" y="127.50"></text></g><g><title>param_env (119,471 samples, 0.13%)</title><rect x="31.6842%" y="133" width="0.1274%" height="15" fill="rgb(227,1,9)"/><text x="31.9342%" y="143.50"></text></g><g><title>impl_parent (1,076,690 samples, 1.15%)</title><rect x="33.6532%" y="117" width="1.1480%" height="15" fill="rgb(248,47,43)"/><text x="33.9032%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (601,045 samples, 0.64%)</title><rect x="34.1603%" y="101" width="0.6409%" height="15" fill="rgb(221,10,30)"/><text x="34.4103%" y="111.50"></text></g><g><title>impl_trait_ref (2,213,303 samples, 2.36%)</title><rect x="34.8012%" y="117" width="2.3600%" height="15" fill="rgb(210,229,1)"/><text x="35.0512%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,510,271 samples, 1.61%)</title><rect x="35.5508%" y="101" width="1.6103%" height="15" fill="rgb(222,148,37)"/><text x="35.8008%" y="111.50"></text></g><g><title>coherent_trait (5,835,756 samples, 6.22%)</title><rect x="31.3230%" y="149" width="6.2225%" height="15" fill="rgb(234,67,33)"/><text x="31.5730%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (5,377,501 samples, 5.73%)</title><rect x="31.8116%" y="133" width="5.7338%" height="15" fill="rgb(247,98,35)"/><text x="32.0616%" y="143.50">special..</text></g><g><title>trait_impls_of (359,046 samples, 0.38%)</title><rect x="37.1626%" y="117" width="0.3828%" height="15" fill="rgb(247,138,52)"/><text x="37.4126%" y="127.50"></text></g><g><title>coherence_checking (5,917,656 samples, 6.31%)</title><rect x="31.3054%" y="165" width="6.3098%" height="15" fill="rgb(213,79,30)"/><text x="31.5554%" y="175.50">coherenc..</text></g><g><title>dropck_outlives (120,790 samples, 0.13%)</title><rect x="53.7061%" y="117" width="0.1288%" height="15" fill="rgb(246,177,23)"/><text x="53.9561%" y="127.50"></text></g><g><title>mir_for_ctfe (881,813 samples, 0.94%)</title><rect x="55.8954%" y="53" width="0.9402%" height="15" fill="rgb(230,62,27)"/><text x="56.1454%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (872,013 samples, 0.93%)</title><rect x="55.9059%" y="37" width="0.9298%" height="15" fill="rgb(216,154,8)"/><text x="56.1559%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,806,350 samples, 1.93%)</title><rect x="54.9426%" y="101" width="1.9260%" height="15" fill="rgb(244,35,45)"/><text x="55.1926%" y="111.50">e..</text></g><g><title>eval_to_const_value_raw (1,763,170 samples, 1.88%)</title><rect x="54.9886%" y="85" width="1.8800%" height="15" fill="rgb(251,115,12)"/><text x="55.2386%" y="95.50">e..</text></g><g><title>eval_to_allocation_raw (1,719,119 samples, 1.83%)</title><rect x="55.0356%" y="69" width="1.8330%" height="15" fill="rgb(240,54,50)"/><text x="55.2856%" y="79.50">e..</text></g><g><title>generics_of (94,501 samples, 0.10%)</title><rect x="56.8686%" y="101" width="0.1008%" height="15" fill="rgb(233,84,52)"/><text x="57.1186%" y="111.50"></text></g><g><title>predicates_of (159,670 samples, 0.17%)</title><rect x="57.0039%" y="101" width="0.1703%" height="15" fill="rgb(207,117,47)"/><text x="57.2539%" y="111.50"></text></g><g><title>predicates_defined_on (95,630 samples, 0.10%)</title><rect x="57.0721%" y="85" width="0.1020%" height="15" fill="rgb(249,43,39)"/><text x="57.3221%" y="95.50"></text></g><g><title>evaluate_obligation (3,212,088 samples, 3.42%)</title><rect x="53.8349%" y="117" width="3.4249%" height="15" fill="rgb(209,38,44)"/><text x="54.0849%" y="127.50">eva..</text></g><g><title>item_attrs (102,600 samples, 0.11%)</title><rect x="57.3860%" y="117" width="0.1094%" height="15" fill="rgb(236,212,23)"/><text x="57.6360%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,010 samples, 0.10%)</title><rect x="57.3909%" y="101" width="0.1045%" height="15" fill="rgb(242,79,21)"/><text x="57.6409%" y="111.50"></text></g><g><title>object_safety_violations (126,702 samples, 0.14%)</title><rect x="57.5136%" y="117" width="0.1351%" height="15" fill="rgb(211,96,35)"/><text x="57.7636%" y="127.50"></text></g><g><title>predicates_of (117,092 samples, 0.12%)</title><rect x="57.7563%" y="117" width="0.1249%" height="15" fill="rgb(253,215,40)"/><text x="58.0063%" y="127.50"></text></g><g><title>item_bodies_checking (19,107,712 samples, 20.37%)</title><rect x="37.6544%" y="165" width="20.3739%" height="15" fill="rgb(211,81,21)"/><text x="37.9044%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,105,442 samples, 20.37%)</title><rect x="37.6568%" y="149" width="20.3714%" height="15" fill="rgb(208,190,38)"/><text x="37.9068%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (18,979,082 samples, 20.24%)</title><rect x="37.7916%" y="133" width="20.2367%" height="15" fill="rgb(235,213,38)"/><text x="38.0416%" y="143.50">typeck</text></g><g><title>item_types_checking (1,570,568 samples, 1.67%)</title><rect x="58.0283%" y="165" width="1.6746%" height="15" fill="rgb(237,122,38)"/><text x="58.2783%" y="175.50"></text></g><g><title>check_mod_item_types (1,567,528 samples, 1.67%)</title><rect x="58.0315%" y="149" width="1.6714%" height="15" fill="rgb(244,218,35)"/><text x="58.2815%" y="159.50"></text></g><g><title>typeck (470,715 samples, 0.50%)</title><rect x="59.2010%" y="133" width="0.5019%" height="15" fill="rgb(240,68,47)"/><text x="59.4510%" y="143.50"></text></g><g><title>late_bound_vars_map (268,014 samples, 0.29%)</title><rect x="60.5227%" y="117" width="0.2858%" height="15" fill="rgb(210,16,53)"/><text x="60.7727%" y="127.50"></text></g><g><title>resolve_lifetimes (200,132 samples, 0.21%)</title><rect x="60.5951%" y="101" width="0.2134%" height="15" fill="rgb(235,124,12)"/><text x="60.8451%" y="111.50"></text></g><g><title>fn_sig (713,009 samples, 0.76%)</title><rect x="60.1339%" y="133" width="0.7603%" height="15" fill="rgb(224,169,11)"/><text x="60.3839%" y="143.50"></text></g><g><title>named_region_map (519,476 samples, 0.55%)</title><rect x="61.0736%" y="117" width="0.5539%" height="15" fill="rgb(250,166,2)"/><text x="61.3236%" y="127.50"></text></g><g><title>resolve_lifetimes (493,625 samples, 0.53%)</title><rect x="61.1012%" y="101" width="0.5263%" height="15" fill="rgb(242,216,29)"/><text x="61.3512%" y="111.50"></text></g><g><title>lint_levels (188,212 samples, 0.20%)</title><rect x="61.4268%" y="85" width="0.2007%" height="15" fill="rgb(230,116,27)"/><text x="61.6768%" y="95.50"></text></g><g><title>generics_of (712,206 samples, 0.76%)</title><rect x="60.8942%" y="133" width="0.7594%" height="15" fill="rgb(228,99,48)"/><text x="61.1442%" y="143.50"></text></g><g><title>explicit_predicates_of (163,322 samples, 0.17%)</title><rect x="61.9934%" y="101" width="0.1741%" height="15" fill="rgb(253,11,6)"/><text x="62.2434%" y="111.50"></text></g><g><title>predicates_of (535,786 samples, 0.57%)</title><rect x="61.7283%" y="133" width="0.5713%" height="15" fill="rgb(247,143,39)"/><text x="61.9783%" y="143.50"></text></g><g><title>predicates_defined_on (443,914 samples, 0.47%)</title><rect x="61.8263%" y="117" width="0.4733%" height="15" fill="rgb(236,97,10)"/><text x="62.0763%" y="127.50"></text></g><g><title>inferred_outlives_of (123,821 samples, 0.13%)</title><rect x="62.1676%" y="101" width="0.1320%" height="15" fill="rgb(233,208,19)"/><text x="62.4176%" y="111.50"></text></g><g><title>type_collecting (2,538,428 samples, 2.71%)</title><rect x="59.7045%" y="165" width="2.7066%" height="15" fill="rgb(216,164,2)"/><text x="59.9545%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (2,530,788 samples, 2.70%)</title><rect x="59.7127%" y="149" width="2.6985%" height="15" fill="rgb(220,129,5)"/><text x="59.9627%" y="159.50">co..</text></g><g><title>type_of (104,641 samples, 0.11%)</title><rect x="62.2996%" y="133" width="0.1116%" height="15" fill="rgb(242,17,10)"/><text x="62.5496%" y="143.50"></text></g><g><title>evaluate_obligation (280,693 samples, 0.30%)</title><rect x="64.1600%" y="133" width="0.2993%" height="15" fill="rgb(242,107,0)"/><text x="64.4100%" y="143.50"></text></g><g><title>implied_outlives_bounds (104,301 samples, 0.11%)</title><rect x="64.4593%" y="133" width="0.1112%" height="15" fill="rgb(251,28,31)"/><text x="64.7093%" y="143.50"></text></g><g><title>param_env (197,185 samples, 0.21%)</title><rect x="64.5705%" y="133" width="0.2103%" height="15" fill="rgb(233,223,10)"/><text x="64.8205%" y="143.50"></text></g><g><title>region_scope_tree (354,805 samples, 0.38%)</title><rect x="64.7997%" y="133" width="0.3783%" height="15" fill="rgb(215,21,27)"/><text x="65.0497%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,371,951 samples, 2.53%)</title><rect x="62.6718%" y="149" width="2.5291%" height="15" fill="rgb(232,23,21)"/><text x="62.9218%" y="159.50">ch..</text></g><g><title>evaluate_obligation (552,616 samples, 0.59%)</title><rect x="67.5763%" y="133" width="0.5892%" height="15" fill="rgb(244,5,23)"/><text x="67.8263%" y="143.50"></text></g><g><title>implied_outlives_bounds (126,392 samples, 0.13%)</title><rect x="68.1923%" y="133" width="0.1348%" height="15" fill="rgb(226,81,46)"/><text x="68.4423%" y="143.50"></text></g><g><title>param_env (559,332 samples, 0.60%)</title><rect x="68.3271%" y="133" width="0.5964%" height="15" fill="rgb(247,70,30)"/><text x="68.5771%" y="143.50"></text></g><g><title>region_scope_tree (207,961 samples, 0.22%)</title><rect x="69.0109%" y="133" width="0.2217%" height="15" fill="rgb(212,68,19)"/><text x="69.2609%" y="143.50"></text></g><g><title>analysis (64,368,877 samples, 68.63%)</title><rect x="0.6680%" y="197" width="68.6342%" height="15" fill="rgb(240,187,13)"/><text x="0.9180%" y="207.50">analysis</text></g><g><title>type_check_crate (35,728,027 samples, 38.10%)</title><rect x="31.2067%" y="181" width="38.0955%" height="15" fill="rgb(223,113,26)"/><text x="31.4567%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,451,781 samples, 6.88%)</title><rect x="62.4229%" y="165" width="6.8793%" height="15" fill="rgb(206,192,2)"/><text x="62.6729%" y="175.50">wf_checki..</text></g><g><title>check_item_well_formed (3,846,416 samples, 4.10%)</title><rect x="65.2009%" y="149" width="4.1013%" height="15" fill="rgb(241,108,4)"/><text x="65.4509%" y="159.50">chec..</text></g><g><title>codegen_crate (358,844 samples, 0.38%)</title><rect x="69.3128%" y="197" width="0.3826%" height="15" fill="rgb(247,173,49)"/><text x="69.5628%" y="207.50"></text></g><g><title>AST_validation (238,282 samples, 0.25%)</title><rect x="69.8794%" y="181" width="0.2541%" height="15" fill="rgb(224,114,35)"/><text x="70.1294%" y="191.50"></text></g><g><title>metadata_register_crate (191,522 samples, 0.20%)</title><rect x="84.4658%" y="149" width="0.2042%" height="15" fill="rgb(245,159,27)"/><text x="84.7158%" y="159.50"></text></g><g><title>macro_expand_crate (13,551,271 samples, 14.45%)</title><rect x="70.2898%" y="181" width="14.4492%" height="15" fill="rgb(245,172,44)"/><text x="70.5398%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,538,991 samples, 14.44%)</title><rect x="70.3029%" y="165" width="14.4361%" height="15" fill="rgb(236,23,11)"/><text x="70.5529%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (178,102 samples, 0.19%)</title><rect x="84.7430%" y="181" width="0.1899%" height="15" fill="rgb(205,117,38)"/><text x="84.9930%" y="191.50"></text></g><g><title>finalize_macro_resolutions (289,543 samples, 0.31%)</title><rect x="84.9642%" y="165" width="0.3087%" height="15" fill="rgb(237,72,25)"/><text x="85.2142%" y="175.50"></text></g><g><title>late_resolve_crate (1,932,282 samples, 2.06%)</title><rect x="85.2729%" y="165" width="2.0603%" height="15" fill="rgb(244,70,9)"/><text x="85.5229%" y="175.50">l..</text></g><g><title>configure_and_expand (16,667,786 samples, 17.77%)</title><rect x="69.6955%" y="197" width="17.7723%" height="15" fill="rgb(217,125,39)"/><text x="69.9455%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,377,246 samples, 2.53%)</title><rect x="84.9330%" y="181" width="2.5348%" height="15" fill="rgb(235,36,10)"/><text x="85.1830%" y="191.50">re..</text></g><g><title>drop_ast (190,892 samples, 0.20%)</title><rect x="87.4677%" y="197" width="0.2035%" height="15" fill="rgb(251,123,47)"/><text x="87.7177%" y="207.50"></text></g><g><title>early_lint_checks (451,205 samples, 0.48%)</title><rect x="87.6880%" y="197" width="0.4811%" height="15" fill="rgb(221,13,13)"/><text x="87.9380%" y="207.50"></text></g><g><title>free_global_ctxt (2,305,445 samples, 2.46%)</title><rect x="88.1691%" y="197" width="2.4582%" height="15" fill="rgb(238,131,9)"/><text x="88.4191%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,347,845 samples, 1.44%)</title><rect x="90.6273%" y="197" width="1.4372%" height="15" fill="rgb(211,50,8)"/><text x="90.8773%" y="207.50"></text></g><g><title>hir_lowering (3,276,246 samples, 3.49%)</title><rect x="92.0644%" y="197" width="3.4933%" height="15" fill="rgb(245,182,24)"/><text x="92.3144%" y="207.50">hir..</text></g><g><title>parse_crate (2,723,850 samples, 2.90%)</title><rect x="95.6025%" y="197" width="2.9043%" height="15" fill="rgb(242,14,37)"/><text x="95.8525%" y="207.50">pa..</text></g><g><title>prepare_outputs (183,152 samples, 0.20%)</title><rect x="98.5155%" y="197" width="0.1953%" height="15" fill="rgb(246,228,12)"/><text x="98.7655%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (741,348 samples, 0.79%)</title><rect x="98.7108%" y="197" width="0.7905%" height="15" fill="rgb(213,55,15)"/><text x="98.9608%" y="207.50"></text></g><g><title>all (93,785,414 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (93,785,414 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (372,104 samples, 0.40%)</title><rect x="99.6032%" y="197" width="0.3968%" height="15" fill="rgb(209,121,21)"/><text x="99.8532%" y="207.50"></text></g></svg></svg>