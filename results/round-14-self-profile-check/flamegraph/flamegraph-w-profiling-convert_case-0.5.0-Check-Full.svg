<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (339,585 samples, 0.22%)</title><rect x="11.2236%" y="149" width="0.2193%" height="15" fill="rgb(227,0,7)"/><text x="11.4736%" y="159.50"></text></g><g><title>param_env (376,413 samples, 0.24%)</title><rect x="12.7695%" y="117" width="0.2430%" height="15" fill="rgb(217,0,24)"/><text x="13.0195%" y="127.50"></text></g><g><title>item_attrs (422,964 samples, 0.27%)</title><rect x="13.4271%" y="85" width="0.2731%" height="15" fill="rgb(221,193,54)"/><text x="13.6771%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (410,074 samples, 0.26%)</title><rect x="13.4354%" y="69" width="0.2648%" height="15" fill="rgb(248,212,6)"/><text x="13.6854%" y="79.50"></text></g><g><title>codegen_fn_attrs (540,106 samples, 0.35%)</title><rect x="13.3632%" y="101" width="0.3487%" height="15" fill="rgb(208,68,35)"/><text x="13.6132%" y="111.50"></text></g><g><title>is_copy_raw (180,402 samples, 0.12%)</title><rect x="16.0339%" y="53" width="0.1165%" height="15" fill="rgb(232,128,0)"/><text x="16.2839%" y="63.50"></text></g><g><title>param_env (160,372 samples, 0.10%)</title><rect x="16.1504%" y="53" width="0.1035%" height="15" fill="rgb(207,160,47)"/><text x="16.4004%" y="63.50"></text></g><g><title>adt_drop_tys (448,404 samples, 0.29%)</title><rect x="15.9790%" y="69" width="0.2895%" height="15" fill="rgb(228,23,34)"/><text x="16.2290%" y="79.50"></text></g><g><title>is_copy_raw (629,254 samples, 0.41%)</title><rect x="16.2686%" y="69" width="0.4063%" height="15" fill="rgb(218,30,26)"/><text x="16.5186%" y="79.50"></text></g><g><title>evaluate_obligation (435,859 samples, 0.28%)</title><rect x="16.3934%" y="53" width="0.2814%" height="15" fill="rgb(220,122,19)"/><text x="16.6434%" y="63.50"></text></g><g><title>needs_drop_raw (1,319,669 samples, 0.85%)</title><rect x="15.8415%" y="85" width="0.8521%" height="15" fill="rgb(250,228,42)"/><text x="16.0915%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,253,891 samples, 0.81%)</title><rect x="16.8654%" y="69" width="0.8096%" height="15" fill="rgb(240,193,28)"/><text x="17.1154%" y="79.50"></text></g><g><title>impl_parent (214,473 samples, 0.14%)</title><rect x="17.9342%" y="53" width="0.1385%" height="15" fill="rgb(216,20,37)"/><text x="18.1842%" y="63.50"></text></g><g><title>specialization_graph_of (1,046,221 samples, 0.68%)</title><rect x="17.7123%" y="69" width="0.6755%" height="15" fill="rgb(206,188,39)"/><text x="17.9623%" y="79.50"></text></g><g><title>impl_trait_ref (488,056 samples, 0.32%)</title><rect x="18.0727%" y="53" width="0.3151%" height="15" fill="rgb(217,207,13)"/><text x="18.3227%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (418,924 samples, 0.27%)</title><rect x="18.1173%" y="37" width="0.2705%" height="15" fill="rgb(231,73,38)"/><text x="18.3673%" y="47.50"></text></g><g><title>resolve_instance (2,701,230 samples, 1.74%)</title><rect x="16.6936%" y="85" width="1.7441%" height="15" fill="rgb(225,20,46)"/><text x="16.9436%" y="95.50"></text></g><g><title>thir_body (1,233,225 samples, 0.80%)</title><rect x="18.4730%" y="85" width="0.7963%" height="15" fill="rgb(210,31,41)"/><text x="18.7230%" y="95.50"></text></g><g><title>mir_const (11,086,759 samples, 7.16%)</title><rect x="12.1355%" y="133" width="7.1584%" height="15" fill="rgb(221,200,47)"/><text x="12.3855%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (9,728,370 samples, 6.28%)</title><rect x="13.0125%" y="117" width="6.2813%" height="15" fill="rgb(226,26,5)"/><text x="13.2625%" y="127.50">unsafety..</text></g><g><title>mir_built (8,642,269 samples, 5.58%)</title><rect x="13.7138%" y="101" width="5.5801%" height="15" fill="rgb(249,33,26)"/><text x="13.9638%" y="111.50">mir_bui..</text></g><g><title>mir_const (310,143 samples, 0.20%)</title><rect x="19.4078%" y="117" width="0.2003%" height="15" fill="rgb(235,183,28)"/><text x="19.6578%" y="127.50"></text></g><g><title>unsafety_check_result (237,033 samples, 0.15%)</title><rect x="19.4550%" y="101" width="0.1530%" height="15" fill="rgb(221,5,38)"/><text x="19.7050%" y="111.50"></text></g><g><title>mir_built (194,752 samples, 0.13%)</title><rect x="19.4823%" y="85" width="0.1257%" height="15" fill="rgb(247,18,42)"/><text x="19.7323%" y="95.50"></text></g><g><title>mir_promoted (12,591,846 samples, 8.13%)</title><rect x="11.4838%" y="149" width="8.1302%" height="15" fill="rgb(241,131,45)"/><text x="11.7338%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (495,807 samples, 0.32%)</title><rect x="19.2939%" y="133" width="0.3201%" height="15" fill="rgb(249,31,29)"/><text x="19.5439%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (292,953 samples, 0.19%)</title><rect x="19.6165%" y="149" width="0.1892%" height="15" fill="rgb(225,111,53)"/><text x="19.8665%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,206,228 samples, 0.78%)</title><rect x="19.8057%" y="149" width="0.7788%" height="15" fill="rgb(238,160,17)"/><text x="20.0557%" y="159.50"></text></g><g><title>normalize_projection_ty (855,373 samples, 0.55%)</title><rect x="20.0322%" y="133" width="0.5523%" height="15" fill="rgb(214,148,48)"/><text x="20.2822%" y="143.50"></text></g><g><title>type_op_normalize_predicate (4,047,564 samples, 2.61%)</title><rect x="20.5845%" y="149" width="2.6134%" height="15" fill="rgb(232,36,49)"/><text x="20.8345%" y="159.50">ty..</text></g><g><title>normalize_projection_ty (2,864,661 samples, 1.85%)</title><rect x="21.3483%" y="133" width="1.8496%" height="15" fill="rgb(209,103,24)"/><text x="21.5983%" y="143.50">n..</text></g><g><title>type_op_prove_predicate (7,236,166 samples, 4.67%)</title><rect x="23.1979%" y="149" width="4.6722%" height="15" fill="rgb(229,88,8)"/><text x="23.4479%" y="159.50">type_..</text></g><g><title>evaluate_obligation (172,022 samples, 0.11%)</title><rect x="27.7590%" y="133" width="0.1111%" height="15" fill="rgb(213,181,19)"/><text x="28.0090%" y="143.50"></text></g><g><title>MIR_borrow_checking (42,282,218 samples, 27.30%)</title><rect x="0.5740%" y="181" width="27.3004%" height="15" fill="rgb(254,191,54)"/><text x="0.8240%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,115,046 samples, 27.19%)</title><rect x="0.6820%" y="165" width="27.1924%" height="15" fill="rgb(241,83,37)"/><text x="0.9320%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (231,772 samples, 0.15%)</title><rect x="27.8744%" y="181" width="0.1496%" height="15" fill="rgb(233,36,39)"/><text x="28.1244%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (173,142 samples, 0.11%)</title><rect x="27.9123%" y="165" width="0.1118%" height="15" fill="rgb(226,3,54)"/><text x="28.1623%" y="175.50"></text></g><g><title>hir_module_items (173,103 samples, 0.11%)</title><rect x="28.0240%" y="181" width="0.1118%" height="15" fill="rgb(245,192,40)"/><text x="28.2740%" y="191.50"></text></g><g><title>should_inherit_track_caller (203,002 samples, 0.13%)</title><rect x="28.4103%" y="133" width="0.1311%" height="15" fill="rgb(238,167,29)"/><text x="28.6603%" y="143.50"></text></g><g><title>codegen_fn_attrs (374,453 samples, 0.24%)</title><rect x="28.3117%" y="149" width="0.2418%" height="15" fill="rgb(232,182,51)"/><text x="28.5617%" y="159.50"></text></g><g><title>check_mod_attrs (625,648 samples, 0.40%)</title><rect x="28.1496%" y="165" width="0.4040%" height="15" fill="rgb(231,60,39)"/><text x="28.3996%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (316,094 samples, 0.20%)</title><rect x="28.6792%" y="165" width="0.2041%" height="15" fill="rgb(208,69,12)"/><text x="28.9292%" y="175.50"></text></g><g><title>misc_checking_1 (1,214,254 samples, 0.78%)</title><rect x="28.1362%" y="181" width="0.7840%" height="15" fill="rgb(235,93,37)"/><text x="28.3862%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (541,716 samples, 0.35%)</title><rect x="28.9212%" y="165" width="0.3498%" height="15" fill="rgb(213,116,39)"/><text x="29.1712%" y="175.50"></text></g><g><title>check_mod_liveness (445,516 samples, 0.29%)</title><rect x="28.9833%" y="149" width="0.2877%" height="15" fill="rgb(222,207,29)"/><text x="29.2333%" y="159.50"></text></g><g><title>misc_checking_2 (1,467,496 samples, 0.95%)</title><rect x="28.9202%" y="181" width="0.9475%" height="15" fill="rgb(206,96,30)"/><text x="29.1702%" y="191.50"></text></g><g><title>match_checking (924,230 samples, 0.60%)</title><rect x="29.2710%" y="165" width="0.5967%" height="15" fill="rgb(218,138,4)"/><text x="29.5210%" y="175.50"></text></g><g><title>check_match (885,060 samples, 0.57%)</title><rect x="29.2963%" y="149" width="0.5715%" height="15" fill="rgb(250,191,14)"/><text x="29.5463%" y="159.50"></text></g><g><title>check_private_in_public (179,602 samples, 0.12%)</title><rect x="29.8742%" y="165" width="0.1160%" height="15" fill="rgb(239,60,40)"/><text x="30.1242%" y="175.50"></text></g><g><title>death_checking (465,725 samples, 0.30%)</title><rect x="29.9902%" y="165" width="0.3007%" height="15" fill="rgb(206,27,48)"/><text x="30.2402%" y="175.50"></text></g><g><title>param_env (215,112 samples, 0.14%)</title><rect x="30.8205%" y="133" width="0.1389%" height="15" fill="rgb(225,35,8)"/><text x="31.0705%" y="143.50"></text></g><g><title>resolve_instance (169,861 samples, 0.11%)</title><rect x="30.9594%" y="133" width="0.1097%" height="15" fill="rgb(250,213,24)"/><text x="31.2094%" y="143.50"></text></g><g><title>crate_lints (2,296,885 samples, 1.48%)</title><rect x="30.2920%" y="149" width="1.4830%" height="15" fill="rgb(247,123,22)"/><text x="30.5420%" y="159.50"></text></g><g><title>type_of (1,079,753 samples, 0.70%)</title><rect x="31.0779%" y="133" width="0.6972%" height="15" fill="rgb(231,138,38)"/><text x="31.3279%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (850,347 samples, 0.55%)</title><rect x="31.2260%" y="117" width="0.5490%" height="15" fill="rgb(231,145,46)"/><text x="31.4760%" y="127.50"></text></g><g><title>lint_checking (2,816,861 samples, 1.82%)</title><rect x="30.2909%" y="165" width="1.8188%" height="15" fill="rgb(251,118,11)"/><text x="30.5409%" y="175.50">l..</text></g><g><title>module_lints (518,306 samples, 0.33%)</title><rect x="31.7750%" y="149" width="0.3347%" height="15" fill="rgb(217,147,25)"/><text x="32.0250%" y="159.50"></text></g><g><title>lint_mod (512,466 samples, 0.33%)</title><rect x="31.7788%" y="133" width="0.3309%" height="15" fill="rgb(247,81,37)"/><text x="32.0288%" y="143.50"></text></g><g><title>privacy_access_levels (238,433 samples, 0.15%)</title><rect x="32.1097%" y="165" width="0.1539%" height="15" fill="rgb(209,12,38)"/><text x="32.3597%" y="175.50"></text></g><g><title>privacy_checking_modules (868,060 samples, 0.56%)</title><rect x="32.2636%" y="165" width="0.5605%" height="15" fill="rgb(227,1,9)"/><text x="32.5136%" y="175.50"></text></g><g><title>check_mod_privacy (863,910 samples, 0.56%)</title><rect x="32.2663%" y="149" width="0.5578%" height="15" fill="rgb(248,47,43)"/><text x="32.5163%" y="159.50"></text></g><g><title>misc_checking_3 (4,599,111 samples, 2.97%)</title><rect x="29.8678%" y="181" width="2.9695%" height="15" fill="rgb(221,10,30)"/><text x="30.1178%" y="191.50">mis..</text></g><g><title>impl_trait_ref (195,252 samples, 0.13%)</title><rect x="33.0103%" y="85" width="0.1261%" height="15" fill="rgb(210,229,1)"/><text x="33.2603%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (176,912 samples, 0.11%)</title><rect x="33.0222%" y="69" width="0.1142%" height="15" fill="rgb(222,148,37)"/><text x="33.2722%" y="79.50"></text></g><g><title>adt_destructor (342,714 samples, 0.22%)</title><rect x="32.9309%" y="133" width="0.2213%" height="15" fill="rgb(234,67,33)"/><text x="33.1809%" y="143.50"></text></g><g><title>coherent_trait (333,924 samples, 0.22%)</title><rect x="32.9366%" y="117" width="0.2156%" height="15" fill="rgb(247,98,35)"/><text x="33.1866%" y="127.50"></text></g><g><title>specialization_graph_of (332,914 samples, 0.21%)</title><rect x="32.9372%" y="101" width="0.2150%" height="15" fill="rgb(247,138,52)"/><text x="33.1872%" y="111.50"></text></g><g><title>impl_parent (2,668,220 samples, 1.72%)</title><rect x="35.7017%" y="117" width="1.7228%" height="15" fill="rgb(213,79,30)"/><text x="35.9517%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,449,576 samples, 0.94%)</title><rect x="36.4885%" y="101" width="0.9359%" height="15" fill="rgb(246,177,23)"/><text x="36.7385%" y="111.50"></text></g><g><title>impl_trait_ref (5,127,378 samples, 3.31%)</title><rect x="37.4245%" y="117" width="3.3106%" height="15" fill="rgb(230,62,27)"/><text x="37.6745%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,957,256 samples, 2.56%)</title><rect x="38.1800%" y="101" width="2.5551%" height="15" fill="rgb(216,154,8)"/><text x="38.4300%" y="111.50">me..</text></g><g><title>coherent_trait (12,963,514 samples, 8.37%)</title><rect x="32.9023%" y="149" width="8.3702%" height="15" fill="rgb(244,35,45)"/><text x="33.1523%" y="159.50">coherent_tra..</text></g><g><title>specialization_graph_of (12,450,028 samples, 8.04%)</title><rect x="33.2338%" y="133" width="8.0386%" height="15" fill="rgb(251,115,12)"/><text x="33.4838%" y="143.50">specializat..</text></g><g><title>trait_impls_of (829,752 samples, 0.54%)</title><rect x="40.7367%" y="117" width="0.5357%" height="15" fill="rgb(240,54,50)"/><text x="40.9867%" y="127.50"></text></g><g><title>implementations_of_trait (209,662 samples, 0.14%)</title><rect x="41.1370%" y="101" width="0.1354%" height="15" fill="rgb(233,84,52)"/><text x="41.3870%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (175,871 samples, 0.11%)</title><rect x="41.1589%" y="85" width="0.1136%" height="15" fill="rgb(207,117,47)"/><text x="41.4089%" y="95.50"></text></g><g><title>coherence_checking (13,049,074 samples, 8.43%)</title><rect x="32.8862%" y="165" width="8.4254%" height="15" fill="rgb(249,43,39)"/><text x="33.1362%" y="175.50">coherence_ch..</text></g><g><title>adt_def (397,664 samples, 0.26%)</title><rect x="50.7939%" y="101" width="0.2568%" height="15" fill="rgb(209,38,44)"/><text x="51.0439%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (396,964 samples, 0.26%)</title><rect x="50.7944%" y="85" width="0.2563%" height="15" fill="rgb(236,212,23)"/><text x="51.0444%" y="95.50"></text></g><g><title>item_attrs (388,634 samples, 0.25%)</title><rect x="50.7997%" y="69" width="0.2509%" height="15" fill="rgb(242,79,21)"/><text x="51.0497%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (387,614 samples, 0.25%)</title><rect x="50.8004%" y="53" width="0.2503%" height="15" fill="rgb(211,96,35)"/><text x="51.0504%" y="63.50"></text></g><g><title>adt_sized_constraint (411,374 samples, 0.27%)</title><rect x="50.7903%" y="117" width="0.2656%" height="15" fill="rgb(253,215,40)"/><text x="51.0403%" y="127.50"></text></g><g><title>associated_item (379,995 samples, 0.25%)</title><rect x="51.1658%" y="101" width="0.2454%" height="15" fill="rgb(211,81,21)"/><text x="51.4158%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (298,813 samples, 0.19%)</title><rect x="51.2182%" y="85" width="0.1929%" height="15" fill="rgb(208,190,38)"/><text x="51.4682%" y="95.50"></text></g><g><title>associated_items (559,246 samples, 0.36%)</title><rect x="51.0629%" y="117" width="0.3611%" height="15" fill="rgb(235,213,38)"/><text x="51.3129%" y="127.50"></text></g><g><title>dropck_outlives (605,319 samples, 0.39%)</title><rect x="51.4497%" y="117" width="0.3908%" height="15" fill="rgb(237,122,38)"/><text x="51.6997%" y="127.50"></text></g><g><title>adt_dtorck_constraint (204,712 samples, 0.13%)</title><rect x="51.7084%" y="101" width="0.1322%" height="15" fill="rgb(244,218,35)"/><text x="51.9584%" y="111.50"></text></g><g><title>trait_impls_of (198,834 samples, 0.13%)</title><rect x="52.6078%" y="101" width="0.1284%" height="15" fill="rgb(240,68,47)"/><text x="52.8578%" y="111.50"></text></g><g><title>evaluate_obligation (1,388,234 samples, 0.90%)</title><rect x="51.8406%" y="117" width="0.8963%" height="15" fill="rgb(210,16,53)"/><text x="52.0906%" y="127.50"></text></g><g><title>method_autoderef_steps (406,674 samples, 0.26%)</title><rect x="53.0744%" y="117" width="0.2626%" height="15" fill="rgb(235,124,12)"/><text x="53.3244%" y="127.50"></text></g><g><title>evaluate_obligation (196,672 samples, 0.13%)</title><rect x="53.2100%" y="101" width="0.1270%" height="15" fill="rgb(224,169,11)"/><text x="53.4600%" y="111.50"></text></g><g><title>predicates_of (217,832 samples, 0.14%)</title><rect x="53.3691%" y="117" width="0.1406%" height="15" fill="rgb(250,166,2)"/><text x="53.6191%" y="127.50"></text></g><g><title>adt_dtorck_constraint (156,721 samples, 0.10%)</title><rect x="64.8144%" y="85" width="0.1012%" height="15" fill="rgb(242,216,29)"/><text x="65.0644%" y="95.50"></text></g><g><title>dropck_outlives (451,764 samples, 0.29%)</title><rect x="64.6416%" y="101" width="0.2917%" height="15" fill="rgb(230,116,27)"/><text x="64.8916%" y="111.50"></text></g><g><title>trait_impls_of (191,471 samples, 0.12%)</title><rect x="67.8296%" y="85" width="0.1236%" height="15" fill="rgb(228,99,48)"/><text x="68.0796%" y="95.50"></text></g><g><title>evaluate_obligation (4,677,711 samples, 3.02%)</title><rect x="64.9333%" y="101" width="3.0203%" height="15" fill="rgb(253,11,6)"/><text x="65.1833%" y="111.50">eva..</text></g><g><title>method_autoderef_steps (902,352 samples, 0.58%)</title><rect x="68.3399%" y="101" width="0.5826%" height="15" fill="rgb(247,143,39)"/><text x="68.5899%" y="111.50"></text></g><g><title>evaluate_obligation (412,078 samples, 0.27%)</title><rect x="68.6565%" y="85" width="0.2661%" height="15" fill="rgb(236,97,10)"/><text x="68.9065%" y="95.50"></text></g><g><title>predicates_of (249,877 samples, 0.16%)</title><rect x="68.9350%" y="101" width="0.1613%" height="15" fill="rgb(233,208,19)"/><text x="69.1850%" y="111.50"></text></g><g><title>predicates_defined_on (184,536 samples, 0.12%)</title><rect x="68.9772%" y="85" width="0.1191%" height="15" fill="rgb(216,164,2)"/><text x="69.2272%" y="95.50"></text></g><g><title>typeck (24,189,607 samples, 15.62%)</title><rect x="53.5818%" y="117" width="15.6185%" height="15" fill="rgb(220,129,5)"/><text x="53.8318%" y="127.50">typeck</text></g><g><title>item_bodies_checking (43,209,297 samples, 27.90%)</title><rect x="41.3322%" y="165" width="27.8989%" height="15" fill="rgb(242,17,10)"/><text x="41.5822%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (43,206,247 samples, 27.90%)</title><rect x="41.3342%" y="149" width="27.8970%" height="15" fill="rgb(242,107,0)"/><text x="41.5842%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (43,116,595 samples, 27.84%)</title><rect x="41.3920%" y="133" width="27.8391%" height="15" fill="rgb(251,28,31)"/><text x="41.6420%" y="143.50">typeck</text></g><g><title>item_types_checking (585,276 samples, 0.38%)</title><rect x="69.2311%" y="165" width="0.3779%" height="15" fill="rgb(233,223,10)"/><text x="69.4811%" y="175.50"></text></g><g><title>check_mod_item_types (580,176 samples, 0.37%)</title><rect x="69.2344%" y="149" width="0.3746%" height="15" fill="rgb(215,21,27)"/><text x="69.4844%" y="159.50"></text></g><g><title>fn_sig (214,503 samples, 0.14%)</title><rect x="69.8052%" y="133" width="0.1385%" height="15" fill="rgb(232,23,21)"/><text x="70.0552%" y="143.50"></text></g><g><title>named_region_map (217,262 samples, 0.14%)</title><rect x="70.0667%" y="117" width="0.1403%" height="15" fill="rgb(244,5,23)"/><text x="70.3167%" y="127.50"></text></g><g><title>resolve_lifetimes (197,442 samples, 0.13%)</title><rect x="70.0795%" y="101" width="0.1275%" height="15" fill="rgb(226,81,46)"/><text x="70.3295%" y="111.50"></text></g><g><title>generics_of (426,353 samples, 0.28%)</title><rect x="69.9437%" y="133" width="0.2753%" height="15" fill="rgb(247,70,30)"/><text x="70.1937%" y="143.50"></text></g><g><title>late_bound_vars_map (184,072 samples, 0.12%)</title><rect x="70.4152%" y="85" width="0.1188%" height="15" fill="rgb(212,68,19)"/><text x="70.6652%" y="95.50"></text></g><g><title>resolve_lifetimes (181,042 samples, 0.12%)</title><rect x="70.4171%" y="69" width="0.1169%" height="15" fill="rgb(240,187,13)"/><text x="70.6671%" y="79.50"></text></g><g><title>explicit_predicates_of (413,934 samples, 0.27%)</title><rect x="70.3384%" y="101" width="0.2673%" height="15" fill="rgb(223,113,26)"/><text x="70.5884%" y="111.50"></text></g><g><title>predicates_of (729,927 samples, 0.47%)</title><rect x="70.2505%" y="133" width="0.4713%" height="15" fill="rgb(206,192,2)"/><text x="70.5005%" y="143.50"></text></g><g><title>predicates_defined_on (677,886 samples, 0.44%)</title><rect x="70.2841%" y="117" width="0.4377%" height="15" fill="rgb(241,108,4)"/><text x="70.5341%" y="127.50"></text></g><g><title>inferred_outlives_of (179,831 samples, 0.12%)</title><rect x="70.6057%" y="101" width="0.1161%" height="15" fill="rgb(247,173,49)"/><text x="70.8557%" y="111.50"></text></g><g><title>inferred_outlives_crate (157,081 samples, 0.10%)</title><rect x="70.6204%" y="85" width="0.1014%" height="15" fill="rgb(224,114,35)"/><text x="70.8704%" y="95.50"></text></g><g><title>type_collecting (1,823,850 samples, 1.18%)</title><rect x="69.6105%" y="165" width="1.1776%" height="15" fill="rgb(245,159,27)"/><text x="69.8605%" y="175.50"></text></g><g><title>collect_mod_item_types (1,814,140 samples, 1.17%)</title><rect x="69.6168%" y="149" width="1.1713%" height="15" fill="rgb(245,172,44)"/><text x="69.8668%" y="159.50"></text></g><g><title>evaluate_obligation (370,333 samples, 0.24%)</title><rect x="71.8659%" y="133" width="0.2391%" height="15" fill="rgb(236,23,11)"/><text x="72.1159%" y="143.50"></text></g><g><title>param_env (242,813 samples, 0.16%)</title><rect x="72.2049%" y="133" width="0.1568%" height="15" fill="rgb(205,117,38)"/><text x="72.4549%" y="143.50"></text></g><g><title>region_scope_tree (374,013 samples, 0.24%)</title><rect x="72.3826%" y="133" width="0.2415%" height="15" fill="rgb(237,72,25)"/><text x="72.6326%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,744,543 samples, 1.77%)</title><rect x="70.9063%" y="149" width="1.7721%" height="15" fill="rgb(244,70,9)"/><text x="71.1563%" y="159.50">c..</text></g><g><title>adt_sized_constraint (165,821 samples, 0.11%)</title><rect x="73.4319%" y="117" width="0.1071%" height="15" fill="rgb(217,125,39)"/><text x="73.6819%" y="127.50"></text></g><g><title>evaluate_obligation (421,314 samples, 0.27%)</title><rect x="73.2682%" y="133" width="0.2720%" height="15" fill="rgb(235,36,10)"/><text x="73.5182%" y="143.50"></text></g><g><title>param_env (172,582 samples, 0.11%)</title><rect x="73.6101%" y="133" width="0.1114%" height="15" fill="rgb(251,123,47)"/><text x="73.8601%" y="143.50"></text></g><g><title>check_item_well_formed (1,818,147 samples, 1.17%)</title><rect x="72.6783%" y="149" width="1.1739%" height="15" fill="rgb(221,13,13)"/><text x="72.9283%" y="159.50"></text></g><g><title>analysis (114,021,409 samples, 73.62%)</title><rect x="0.3881%" y="197" width="73.6202%" height="15" fill="rgb(238,131,9)"/><text x="0.6381%" y="207.50">analysis</text></g><g><title>type_check_crate (63,764,824 samples, 41.17%)</title><rect x="32.8373%" y="181" width="41.1710%" height="15" fill="rgb(211,50,8)"/><text x="33.0873%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,980,295 samples, 3.22%)</title><rect x="70.7927%" y="165" width="3.2156%" height="15" fill="rgb(245,182,24)"/><text x="71.0427%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (241,653 samples, 0.16%)</title><rect x="73.8523%" y="149" width="0.1560%" height="15" fill="rgb(242,14,37)"/><text x="74.1023%" y="159.50"></text></g><g><title>codegen_crate (333,434 samples, 0.22%)</title><rect x="74.0147%" y="197" width="0.2153%" height="15" fill="rgb(246,228,12)"/><text x="74.2647%" y="207.50"></text></g><g><title>AST_validation (198,592 samples, 0.13%)</title><rect x="74.3528%" y="181" width="0.1282%" height="15" fill="rgb(213,55,15)"/><text x="74.6028%" y="191.50"></text></g><g><title>metadata_load_macro (179,691 samples, 0.12%)</title><rect x="88.1838%" y="149" width="0.1160%" height="15" fill="rgb(209,9,3)"/><text x="88.4338%" y="159.50"></text></g><g><title>metadata_register_crate (2,211,665 samples, 1.43%)</title><rect x="88.2999%" y="149" width="1.4280%" height="15" fill="rgb(230,59,30)"/><text x="88.5499%" y="159.50"></text></g><g><title>metadata_register_crate (818,459 samples, 0.53%)</title><rect x="89.1994%" y="133" width="0.5285%" height="15" fill="rgb(209,121,21)"/><text x="89.4494%" y="143.50"></text></g><g><title>macro_expand_crate (23,821,124 samples, 15.38%)</title><rect x="74.5764%" y="181" width="15.3806%" height="15" fill="rgb(220,109,13)"/><text x="74.8264%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (23,798,672 samples, 15.37%)</title><rect x="74.5909%" y="165" width="15.3661%" height="15" fill="rgb(232,18,1)"/><text x="74.8409%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (354,903 samples, 0.23%)</title><rect x="89.7279%" y="149" width="0.2292%" height="15" fill="rgb(215,41,42)"/><text x="89.9779%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (167,382 samples, 0.11%)</title><rect x="89.9601%" y="181" width="0.1081%" height="15" fill="rgb(224,123,36)"/><text x="90.2101%" y="191.50"></text></g><g><title>finalize_macro_resolutions (344,144 samples, 0.22%)</title><rect x="90.1402%" y="165" width="0.2222%" height="15" fill="rgb(240,125,3)"/><text x="90.3902%" y="175.50"></text></g><g><title>late_resolve_crate (2,204,134 samples, 1.42%)</title><rect x="90.3624%" y="165" width="1.4231%" height="15" fill="rgb(205,98,50)"/><text x="90.6124%" y="175.50"></text></g><g><title>configure_and_expand (27,309,601 samples, 17.63%)</title><rect x="74.2300%" y="197" width="17.6330%" height="15" fill="rgb(205,185,37)"/><text x="74.4800%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,779,800 samples, 1.79%)</title><rect x="90.0682%" y="181" width="1.7948%" height="15" fill="rgb(238,207,15)"/><text x="90.3182%" y="191.50">r..</text></g><g><title>drop_ast (188,952 samples, 0.12%)</title><rect x="91.8630%" y="197" width="0.1220%" height="15" fill="rgb(213,199,42)"/><text x="92.1130%" y="207.50"></text></g><g><title>early_lint_checks (436,955 samples, 0.28%)</title><rect x="91.9942%" y="197" width="0.2821%" height="15" fill="rgb(235,201,11)"/><text x="92.2442%" y="207.50"></text></g><g><title>free_global_ctxt (3,698,921 samples, 2.39%)</title><rect x="92.2763%" y="197" width="2.3883%" height="15" fill="rgb(207,46,11)"/><text x="92.5263%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,334,554 samples, 0.86%)</title><rect x="94.6646%" y="197" width="0.8617%" height="15" fill="rgb(241,35,35)"/><text x="94.9146%" y="207.50"></text></g><g><title>hir_lowering (2,651,249 samples, 1.71%)</title><rect x="95.5263%" y="197" width="1.7118%" height="15" fill="rgb(243,32,47)"/><text x="95.7763%" y="207.50"></text></g><g><title>parse_crate (2,670,290 samples, 1.72%)</title><rect x="97.2760%" y="197" width="1.7241%" height="15" fill="rgb(247,202,23)"/><text x="97.5260%" y="207.50"></text></g><g><title>prepare_outputs (205,903 samples, 0.13%)</title><rect x="99.0047%" y="197" width="0.1329%" height="15" fill="rgb(219,102,11)"/><text x="99.2547%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (862,330 samples, 0.56%)</title><rect x="99.1376%" y="197" width="0.5568%" height="15" fill="rgb(243,110,44)"/><text x="99.3876%" y="207.50"></text></g><g><title>all (154,877,901 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (154,877,901 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (374,624 samples, 0.24%)</title><rect x="99.7581%" y="197" width="0.2419%" height="15" fill="rgb(226,22,26)"/><text x="100.0081%" y="207.50"></text></g></svg></svg>