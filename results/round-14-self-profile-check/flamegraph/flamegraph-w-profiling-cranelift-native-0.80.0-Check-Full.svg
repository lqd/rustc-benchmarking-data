<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (28,820 samples, 0.11%)</title><rect x="9.5637%" y="213" width="0.1131%" height="15" fill="rgb(227,0,7)"/><text x="9.8137%" y="223.50"></text></g><g><title>codegen_fn_attrs (52,091 samples, 0.20%)</title><rect x="10.0005%" y="197" width="0.2044%" height="15" fill="rgb(217,0,24)"/><text x="10.2505%" y="207.50"></text></g><g><title>adt_drop_tys (45,780 samples, 0.18%)</title><rect x="11.9394%" y="133" width="0.1796%" height="15" fill="rgb(221,193,54)"/><text x="12.1894%" y="143.50"></text></g><g><title>param_env (35,460 samples, 0.14%)</title><rect x="11.9799%" y="117" width="0.1391%" height="15" fill="rgb(248,212,6)"/><text x="12.2299%" y="127.50"></text></g><g><title>adt_drop_tys (76,330 samples, 0.30%)</title><rect x="11.9226%" y="149" width="0.2995%" height="15" fill="rgb(208,68,35)"/><text x="12.1726%" y="159.50"></text></g><g><title>is_copy_raw (27,391 samples, 0.11%)</title><rect x="12.2221%" y="149" width="0.1075%" height="15" fill="rgb(232,128,0)"/><text x="12.4721%" y="159.50"></text></g><g><title>adt_drop_tys (139,401 samples, 0.55%)</title><rect x="11.8871%" y="165" width="0.5470%" height="15" fill="rgb(207,160,47)"/><text x="12.1371%" y="175.50"></text></g><g><title>param_env (26,650 samples, 0.10%)</title><rect x="12.3295%" y="149" width="0.1046%" height="15" fill="rgb(228,23,34)"/><text x="12.5795%" y="159.50"></text></g><g><title>explicit_predicates_of (72,791 samples, 0.29%)</title><rect x="12.9306%" y="101" width="0.2856%" height="15" fill="rgb(218,30,26)"/><text x="13.1806%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (71,971 samples, 0.28%)</title><rect x="12.9338%" y="85" width="0.2824%" height="15" fill="rgb(220,122,19)"/><text x="13.1838%" y="95.50"></text></g><g><title>predicates_of (83,041 samples, 0.33%)</title><rect x="12.8955%" y="133" width="0.3258%" height="15" fill="rgb(250,228,42)"/><text x="13.1455%" y="143.50"></text></g><g><title>predicates_defined_on (76,421 samples, 0.30%)</title><rect x="12.9214%" y="117" width="0.2999%" height="15" fill="rgb(240,193,28)"/><text x="13.1714%" y="127.50"></text></g><g><title>needs_drop_raw (358,054 samples, 1.40%)</title><rect x="11.8245%" y="181" width="1.4050%" height="15" fill="rgb(216,20,37)"/><text x="12.0745%" y="191.50"></text></g><g><title>is_copy_raw (202,703 samples, 0.80%)</title><rect x="12.4341%" y="165" width="0.7954%" height="15" fill="rgb(206,188,39)"/><text x="12.6841%" y="175.50"></text></g><g><title>evaluate_obligation (187,672 samples, 0.74%)</title><rect x="12.4931%" y="149" width="0.7364%" height="15" fill="rgb(217,207,13)"/><text x="12.7431%" y="159.50"></text></g><g><title>specialization_graph_of (31,490 samples, 0.12%)</title><rect x="13.3972%" y="165" width="0.1236%" height="15" fill="rgb(231,73,38)"/><text x="13.6472%" y="175.50"></text></g><g><title>resolve_instance (81,821 samples, 0.32%)</title><rect x="13.2295%" y="181" width="0.3211%" height="15" fill="rgb(225,20,46)"/><text x="13.4795%" y="191.50"></text></g><g><title>thir_body (154,551 samples, 0.61%)</title><rect x="13.5584%" y="181" width="0.6064%" height="15" fill="rgb(210,31,41)"/><text x="13.8084%" y="191.50"></text></g><g><title>mir_const (1,344,596 samples, 5.28%)</title><rect x="8.8981%" y="229" width="5.2760%" height="15" fill="rgb(221,200,47)"/><text x="9.1481%" y="239.50">mir_co..</text></g><g><title>unsafety_check_result (1,146,144 samples, 4.50%)</title><rect x="9.6768%" y="213" width="4.4973%" height="15" fill="rgb(226,26,5)"/><text x="9.9268%" y="223.50">unsaf..</text></g><g><title>mir_built (1,011,562 samples, 3.97%)</title><rect x="10.2049%" y="197" width="3.9692%" height="15" fill="rgb(249,33,26)"/><text x="10.4549%" y="207.50">mir_..</text></g><g><title>mir_promoted (1,549,118 samples, 6.08%)</title><rect x="8.2480%" y="245" width="6.0785%" height="15" fill="rgb(235,183,28)"/><text x="8.4980%" y="255.50">mir_prom..</text></g><g><title>mir_const_qualif (38,841 samples, 0.15%)</title><rect x="14.1741%" y="229" width="0.1524%" height="15" fill="rgb(221,5,38)"/><text x="14.4241%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (35,030 samples, 0.14%)</title><rect x="14.3265%" y="245" width="0.1375%" height="15" fill="rgb(247,18,42)"/><text x="14.5765%" y="255.50"></text></g><g><title>type_op_normalize_predicate (46,161 samples, 0.18%)</title><rect x="14.4640%" y="245" width="0.1811%" height="15" fill="rgb(241,131,45)"/><text x="14.7140%" y="255.50"></text></g><g><title>normalize_projection_ty (26,351 samples, 0.10%)</title><rect x="14.5417%" y="229" width="0.1034%" height="15" fill="rgb(249,31,29)"/><text x="14.7917%" y="239.50"></text></g><g><title>MIR_borrow_checking (3,371,077 samples, 13.23%)</title><rect x="2.1502%" y="277" width="13.2276%" height="15" fill="rgb(225,111,53)"/><text x="2.4002%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (3,363,377 samples, 13.20%)</title><rect x="2.1804%" y="261" width="13.1974%" height="15" fill="rgb(238,160,17)"/><text x="2.4304%" y="271.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (186,723 samples, 0.73%)</title><rect x="14.6451%" y="245" width="0.7327%" height="15" fill="rgb(214,148,48)"/><text x="14.8951%" y="255.50"></text></g><g><title>MIR_effect_checking (102,432 samples, 0.40%)</title><rect x="15.3778%" y="277" width="0.4019%" height="15" fill="rgb(232,36,49)"/><text x="15.6278%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (85,701 samples, 0.34%)</title><rect x="15.4434%" y="261" width="0.3363%" height="15" fill="rgb(209,103,24)"/><text x="15.6934%" y="271.50"></text></g><g><title>hir_module_items (77,871 samples, 0.31%)</title><rect x="15.7797%" y="277" width="0.3056%" height="15" fill="rgb(229,88,8)"/><text x="16.0297%" y="287.50"></text></g><g><title>get_lang_items (46,091 samples, 0.18%)</title><rect x="16.5549%" y="229" width="0.1809%" height="15" fill="rgb(213,181,19)"/><text x="16.8049%" y="239.50"></text></g><g><title>codegen_fn_attrs (125,342 samples, 0.49%)</title><rect x="16.3711%" y="245" width="0.4918%" height="15" fill="rgb(254,191,54)"/><text x="16.6211%" y="255.50"></text></g><g><title>check_mod_attrs (181,122 samples, 0.71%)</title><rect x="16.1526%" y="261" width="0.7107%" height="15" fill="rgb(241,83,37)"/><text x="16.4026%" y="271.50"></text></g><g><title>lookup_deprecation_entry (35,710 samples, 0.14%)</title><rect x="17.1812%" y="245" width="0.1401%" height="15" fill="rgb(233,36,39)"/><text x="17.4312%" y="255.50"></text></g><g><title>lookup_stability (28,351 samples, 0.11%)</title><rect x="17.3213%" y="245" width="0.1112%" height="15" fill="rgb(226,3,54)"/><text x="17.5713%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (132,342 samples, 0.52%)</title><rect x="16.9841%" y="261" width="0.5193%" height="15" fill="rgb(245,192,40)"/><text x="17.2341%" y="271.50"></text></g><g><title>misc_checking_1 (386,874 samples, 1.52%)</title><rect x="16.0869%" y="277" width="1.5180%" height="15" fill="rgb(238,167,29)"/><text x="16.3369%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (95,021 samples, 0.37%)</title><rect x="17.6107%" y="261" width="0.3728%" height="15" fill="rgb(232,182,51)"/><text x="17.8607%" y="271.50"></text></g><g><title>check_mod_liveness (78,031 samples, 0.31%)</title><rect x="17.6774%" y="245" width="0.3062%" height="15" fill="rgb(231,60,39)"/><text x="17.9274%" y="255.50"></text></g><g><title>type_uninhabited_from (27,990 samples, 0.11%)</title><rect x="17.8738%" y="229" width="0.1098%" height="15" fill="rgb(208,69,12)"/><text x="18.1238%" y="239.50"></text></g><g><title>misc_checking_2 (211,332 samples, 0.83%)</title><rect x="17.6050%" y="277" width="0.8292%" height="15" fill="rgb(235,93,37)"/><text x="17.8550%" y="287.50"></text></g><g><title>match_checking (114,841 samples, 0.45%)</title><rect x="17.9836%" y="261" width="0.4506%" height="15" fill="rgb(213,116,39)"/><text x="18.2336%" y="271.50"></text></g><g><title>check_match (111,551 samples, 0.44%)</title><rect x="17.9965%" y="245" width="0.4377%" height="15" fill="rgb(222,207,29)"/><text x="18.2465%" y="255.50"></text></g><g><title>death_checking (45,051 samples, 0.18%)</title><rect x="18.5429%" y="261" width="0.1768%" height="15" fill="rgb(206,96,30)"/><text x="18.7929%" y="271.50"></text></g><g><title>eval_to_const_value_raw (151,912 samples, 0.60%)</title><rect x="18.9718%" y="229" width="0.5961%" height="15" fill="rgb(218,138,4)"/><text x="19.2218%" y="239.50"></text></g><g><title>eval_to_const_value_raw (149,712 samples, 0.59%)</title><rect x="18.9804%" y="213" width="0.5874%" height="15" fill="rgb(250,191,14)"/><text x="19.2304%" y="223.50"></text></g><g><title>eval_to_allocation_raw (144,512 samples, 0.57%)</title><rect x="19.0008%" y="197" width="0.5670%" height="15" fill="rgb(239,60,40)"/><text x="19.2508%" y="207.50"></text></g><g><title>mir_for_ctfe (38,111 samples, 0.15%)</title><rect x="19.4184%" y="181" width="0.1495%" height="15" fill="rgb(206,27,48)"/><text x="19.6684%" y="191.50"></text></g><g><title>param_env (33,831 samples, 0.13%)</title><rect x="19.5679%" y="229" width="0.1327%" height="15" fill="rgb(225,35,8)"/><text x="19.8179%" y="239.50"></text></g><g><title>crate_lints (250,353 samples, 0.98%)</title><rect x="18.7248%" y="245" width="0.9823%" height="15" fill="rgb(250,213,24)"/><text x="18.9748%" y="255.50"></text></g><g><title>lint_checking (316,424 samples, 1.24%)</title><rect x="18.7197%" y="261" width="1.2416%" height="15" fill="rgb(247,123,22)"/><text x="18.9697%" y="271.50"></text></g><g><title>module_lints (64,761 samples, 0.25%)</title><rect x="19.7072%" y="245" width="0.2541%" height="15" fill="rgb(231,138,38)"/><text x="19.9572%" y="255.50"></text></g><g><title>lint_mod (63,041 samples, 0.25%)</title><rect x="19.7139%" y="229" width="0.2474%" height="15" fill="rgb(231,145,46)"/><text x="19.9639%" y="239.50"></text></g><g><title>privacy_access_levels (53,700 samples, 0.21%)</title><rect x="19.9613%" y="261" width="0.2107%" height="15" fill="rgb(251,118,11)"/><text x="20.2113%" y="271.50"></text></g><g><title>privacy_checking_modules (86,050 samples, 0.34%)</title><rect x="20.1720%" y="261" width="0.3376%" height="15" fill="rgb(217,147,25)"/><text x="20.4220%" y="271.50"></text></g><g><title>check_mod_privacy (84,680 samples, 0.33%)</title><rect x="20.1774%" y="245" width="0.3323%" height="15" fill="rgb(247,81,37)"/><text x="20.4274%" y="255.50"></text></g><g><title>misc_checking_3 (541,895 samples, 2.13%)</title><rect x="18.4342%" y="277" width="2.1263%" height="15" fill="rgb(209,12,38)"/><text x="18.6842%" y="287.50">m..</text></g><g><title>adt_def (46,281 samples, 0.18%)</title><rect x="21.4166%" y="181" width="0.1816%" height="15" fill="rgb(227,1,9)"/><text x="21.6666%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (45,851 samples, 0.18%)</title><rect x="21.4183%" y="165" width="0.1799%" height="15" fill="rgb(248,47,43)"/><text x="21.6683%" y="175.50"></text></g><g><title>item_attrs (42,201 samples, 0.17%)</title><rect x="21.4326%" y="149" width="0.1656%" height="15" fill="rgb(221,10,30)"/><text x="21.6826%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (41,741 samples, 0.16%)</title><rect x="21.4344%" y="133" width="0.1638%" height="15" fill="rgb(210,229,1)"/><text x="21.6844%" y="143.50"></text></g><g><title>impl_parent (104,971 samples, 0.41%)</title><rect x="22.0156%" y="117" width="0.4119%" height="15" fill="rgb(222,148,37)"/><text x="22.2656%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (83,571 samples, 0.33%)</title><rect x="22.0995%" y="101" width="0.3279%" height="15" fill="rgb(234,67,33)"/><text x="22.3495%" y="111.50"></text></g><g><title>impl_trait_ref (351,535 samples, 1.38%)</title><rect x="22.4275%" y="117" width="1.3794%" height="15" fill="rgb(247,98,35)"/><text x="22.6775%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (329,525 samples, 1.29%)</title><rect x="22.5138%" y="101" width="1.2930%" height="15" fill="rgb(247,138,52)"/><text x="22.7638%" y="111.50"></text></g><g><title>coherent_trait (596,187 samples, 2.34%)</title><rect x="21.6227%" y="149" width="2.3394%" height="15" fill="rgb(213,79,30)"/><text x="21.8727%" y="159.50">c..</text></g><g><title>specialization_graph_of (592,367 samples, 2.32%)</title><rect x="21.6377%" y="133" width="2.3244%" height="15" fill="rgb(246,177,23)"/><text x="21.8877%" y="143.50">s..</text></g><g><title>trait_impls_of (39,551 samples, 0.16%)</title><rect x="23.8068%" y="117" width="0.1552%" height="15" fill="rgb(230,62,27)"/><text x="24.0568%" y="127.50"></text></g><g><title>adt_destructor (604,597 samples, 2.37%)</title><rect x="21.5982%" y="181" width="2.3724%" height="15" fill="rgb(216,154,8)"/><text x="21.8482%" y="191.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (603,517 samples, 2.37%)</title><rect x="21.6025%" y="165" width="2.3681%" height="15" fill="rgb(244,35,45)"/><text x="21.8525%" y="175.50">me..</text></g><g><title>adt_def (51,450 samples, 0.20%)</title><rect x="24.0127%" y="165" width="0.2019%" height="15" fill="rgb(251,115,12)"/><text x="24.2627%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (50,760 samples, 0.20%)</title><rect x="24.0154%" y="149" width="0.1992%" height="15" fill="rgb(240,54,50)"/><text x="24.2654%" y="159.50"></text></g><g><title>item_attrs (43,190 samples, 0.17%)</title><rect x="24.0451%" y="133" width="0.1695%" height="15" fill="rgb(233,84,52)"/><text x="24.2951%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (42,470 samples, 0.17%)</title><rect x="24.0479%" y="117" width="0.1666%" height="15" fill="rgb(207,117,47)"/><text x="24.2979%" y="127.50"></text></g><g><title>adt_def (73,921 samples, 0.29%)</title><rect x="24.3056%" y="149" width="0.2901%" height="15" fill="rgb(249,43,39)"/><text x="24.5556%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (72,711 samples, 0.29%)</title><rect x="24.3103%" y="133" width="0.2853%" height="15" fill="rgb(209,38,44)"/><text x="24.5603%" y="143.50"></text></g><g><title>item_attrs (32,231 samples, 0.13%)</title><rect x="24.4692%" y="117" width="0.1265%" height="15" fill="rgb(236,212,23)"/><text x="24.7192%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (30,951 samples, 0.12%)</title><rect x="24.4742%" y="101" width="0.1214%" height="15" fill="rgb(242,79,21)"/><text x="24.7242%" y="111.50"></text></g><g><title>adt_def (36,601 samples, 0.14%)</title><rect x="24.6646%" y="133" width="0.1436%" height="15" fill="rgb(211,96,35)"/><text x="24.9146%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (35,081 samples, 0.14%)</title><rect x="24.6706%" y="117" width="0.1377%" height="15" fill="rgb(253,215,40)"/><text x="24.9206%" y="127.50"></text></g><g><title>adt_def (28,070 samples, 0.11%)</title><rect x="25.0201%" y="85" width="0.1101%" height="15" fill="rgb(211,81,21)"/><text x="25.2701%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (27,880 samples, 0.11%)</title><rect x="25.0209%" y="69" width="0.1094%" height="15" fill="rgb(208,190,38)"/><text x="25.2709%" y="79.50"></text></g><g><title>item_attrs (25,820 samples, 0.10%)</title><rect x="25.0289%" y="53" width="0.1013%" height="15" fill="rgb(235,213,38)"/><text x="25.2789%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (25,600 samples, 0.10%)</title><rect x="25.0298%" y="37" width="0.1005%" height="15" fill="rgb(237,122,38)"/><text x="25.2798%" y="47.50"></text></g><g><title>adt_dtorck_constraint (32,430 samples, 0.13%)</title><rect x="25.0106%" y="101" width="0.1273%" height="15" fill="rgb(244,218,35)"/><text x="25.2606%" y="111.50"></text></g><g><title>adt_dtorck_constraint (61,330 samples, 0.24%)</title><rect x="24.9226%" y="117" width="0.2406%" height="15" fill="rgb(240,68,47)"/><text x="25.1726%" y="127.50"></text></g><g><title>adt_dtorck_constraint (98,291 samples, 0.39%)</title><rect x="24.8353%" y="133" width="0.3857%" height="15" fill="rgb(210,16,53)"/><text x="25.0853%" y="143.50"></text></g><g><title>adt_dtorck_constraint (158,262 samples, 0.62%)</title><rect x="24.6217%" y="149" width="0.6210%" height="15" fill="rgb(235,124,12)"/><text x="24.8717%" y="159.50"></text></g><g><title>adt_dtorck_constraint (279,704 samples, 1.10%)</title><rect x="24.2321%" y="165" width="1.0975%" height="15" fill="rgb(224,169,11)"/><text x="24.4821%" y="175.50"></text></g><g><title>adt_dtorck_constraint (372,624 samples, 1.46%)</title><rect x="23.9706%" y="181" width="1.4621%" height="15" fill="rgb(250,166,2)"/><text x="24.2206%" y="191.50"></text></g><g><title>dropck_outlives (1,072,402 samples, 4.21%)</title><rect x="21.2493%" y="213" width="4.2079%" height="15" fill="rgb(242,216,29)"/><text x="21.4993%" y="223.50">dropc..</text></g><g><title>adt_dtorck_constraint (1,044,092 samples, 4.10%)</title><rect x="21.3604%" y="197" width="4.0969%" height="15" fill="rgb(230,116,27)"/><text x="21.6104%" y="207.50">adt_..</text></g><g><title>evaluate_obligation (33,690 samples, 0.13%)</title><rect x="25.4573%" y="213" width="0.1322%" height="15" fill="rgb(228,99,48)"/><text x="25.7073%" y="223.50"></text></g><g><title>associated_item (50,351 samples, 0.20%)</title><rect x="35.8741%" y="181" width="0.1976%" height="15" fill="rgb(253,11,6)"/><text x="36.1241%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (40,011 samples, 0.16%)</title><rect x="35.9146%" y="165" width="0.1570%" height="15" fill="rgb(247,143,39)"/><text x="36.1646%" y="175.50"></text></g><g><title>associated_items (78,731 samples, 0.31%)</title><rect x="35.7858%" y="197" width="0.3089%" height="15" fill="rgb(236,97,10)"/><text x="36.0358%" y="207.50"></text></g><g><title>adt_def (27,640 samples, 0.11%)</title><rect x="36.2704%" y="165" width="0.1085%" height="15" fill="rgb(233,208,19)"/><text x="36.5204%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (27,160 samples, 0.11%)</title><rect x="36.2723%" y="149" width="0.1066%" height="15" fill="rgb(216,164,2)"/><text x="36.5223%" y="159.50"></text></g><g><title>dropck_outlives (73,580 samples, 0.29%)</title><rect x="36.1404%" y="197" width="0.2887%" height="15" fill="rgb(220,129,5)"/><text x="36.3904%" y="207.50"></text></g><g><title>adt_dtorck_constraint (47,910 samples, 0.19%)</title><rect x="36.2411%" y="181" width="0.1880%" height="15" fill="rgb(242,17,10)"/><text x="36.4911%" y="191.50"></text></g><g><title>adt_def (42,021 samples, 0.16%)</title><rect x="36.8336%" y="165" width="0.1649%" height="15" fill="rgb(242,107,0)"/><text x="37.0836%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (40,941 samples, 0.16%)</title><rect x="36.8378%" y="149" width="0.1606%" height="15" fill="rgb(251,28,31)"/><text x="37.0878%" y="159.50"></text></g><g><title>adt_sized_constraint (51,701 samples, 0.20%)</title><rect x="36.8113%" y="181" width="0.2029%" height="15" fill="rgb(233,223,10)"/><text x="37.0613%" y="191.50"></text></g><g><title>evaluate_obligation (527,898 samples, 2.07%)</title><rect x="36.4291%" y="197" width="2.0714%" height="15" fill="rgb(215,21,27)"/><text x="36.6791%" y="207.50">e..</text></g><g><title>trait_impls_of (335,484 samples, 1.32%)</title><rect x="37.1841%" y="181" width="1.3164%" height="15" fill="rgb(232,23,21)"/><text x="37.4341%" y="191.50"></text></g><g><title>implementations_of_trait (99,711 samples, 0.39%)</title><rect x="38.1092%" y="165" width="0.3913%" height="15" fill="rgb(244,5,23)"/><text x="38.3592%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (62,761 samples, 0.25%)</title><rect x="38.2542%" y="149" width="0.2463%" height="15" fill="rgb(226,81,46)"/><text x="38.5042%" y="159.50"></text></g><g><title>fn_sig (52,760 samples, 0.21%)</title><rect x="38.5310%" y="197" width="0.2070%" height="15" fill="rgb(247,70,30)"/><text x="38.7810%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (41,280 samples, 0.16%)</title><rect x="38.5760%" y="181" width="0.1620%" height="15" fill="rgb(212,68,19)"/><text x="38.8260%" y="191.50"></text></g><g><title>generics_of (50,181 samples, 0.20%)</title><rect x="38.7380%" y="197" width="0.1969%" height="15" fill="rgb(240,187,13)"/><text x="38.9880%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (32,811 samples, 0.13%)</title><rect x="38.8062%" y="181" width="0.1287%" height="15" fill="rgb(223,113,26)"/><text x="39.0562%" y="191.50"></text></g><g><title>associated_item (61,251 samples, 0.24%)</title><rect x="38.9658%" y="165" width="0.2403%" height="15" fill="rgb(206,192,2)"/><text x="39.2158%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (59,961 samples, 0.24%)</title><rect x="38.9709%" y="149" width="0.2353%" height="15" fill="rgb(241,108,4)"/><text x="39.2209%" y="159.50"></text></g><g><title>impl_item_implementor_ids (74,841 samples, 0.29%)</title><rect x="38.9349%" y="197" width="0.2937%" height="15" fill="rgb(247,173,49)"/><text x="39.1849%" y="207.50"></text></g><g><title>associated_items (71,501 samples, 0.28%)</title><rect x="38.9480%" y="181" width="0.2806%" height="15" fill="rgb(224,114,35)"/><text x="39.1980%" y="191.50"></text></g><g><title>is_copy_raw (201,402 samples, 0.79%)</title><rect x="39.3395%" y="197" width="0.7903%" height="15" fill="rgb(245,159,27)"/><text x="39.5895%" y="207.50"></text></g><g><title>evaluate_obligation (194,222 samples, 0.76%)</title><rect x="39.3677%" y="181" width="0.7621%" height="15" fill="rgb(245,172,44)"/><text x="39.6177%" y="191.50"></text></g><g><title>trait_impls_of (168,972 samples, 0.66%)</title><rect x="39.4668%" y="165" width="0.6630%" height="15" fill="rgb(236,23,11)"/><text x="39.7168%" y="175.50"></text></g><g><title>implementations_of_trait (35,890 samples, 0.14%)</title><rect x="39.9890%" y="149" width="0.1408%" height="15" fill="rgb(205,117,38)"/><text x="40.2390%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (29,400 samples, 0.12%)</title><rect x="40.0145%" y="133" width="0.1154%" height="15" fill="rgb(237,72,25)"/><text x="40.2645%" y="143.50"></text></g><g><title>item_attrs (110,381 samples, 0.43%)</title><rect x="40.1298%" y="197" width="0.4331%" height="15" fill="rgb(244,70,9)"/><text x="40.3798%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (103,741 samples, 0.41%)</title><rect x="40.1559%" y="181" width="0.4071%" height="15" fill="rgb(217,125,39)"/><text x="40.4059%" y="191.50"></text></g><g><title>lint_levels (41,571 samples, 0.16%)</title><rect x="40.5629%" y="197" width="0.1631%" height="15" fill="rgb(235,36,10)"/><text x="40.8129%" y="207.50"></text></g><g><title>method_autoderef_steps (53,910 samples, 0.21%)</title><rect x="40.7868%" y="197" width="0.2115%" height="15" fill="rgb(251,123,47)"/><text x="41.0368%" y="207.50"></text></g><g><title>evaluate_obligation (42,320 samples, 0.17%)</title><rect x="40.8323%" y="181" width="0.1661%" height="15" fill="rgb(221,13,13)"/><text x="41.0823%" y="191.50"></text></g><g><title>trait_impls_of (26,190 samples, 0.10%)</title><rect x="40.8956%" y="165" width="0.1028%" height="15" fill="rgb(238,131,9)"/><text x="41.1456%" y="175.50"></text></g><g><title>explicit_predicates_of (49,910 samples, 0.20%)</title><rect x="41.4248%" y="165" width="0.1958%" height="15" fill="rgb(211,50,8)"/><text x="41.6748%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (37,510 samples, 0.15%)</title><rect x="41.4734%" y="149" width="0.1472%" height="15" fill="rgb(245,182,24)"/><text x="41.7234%" y="159.50"></text></g><g><title>predicates_of (179,192 samples, 0.70%)</title><rect x="41.0223%" y="197" width="0.7031%" height="15" fill="rgb(242,14,37)"/><text x="41.2723%" y="207.50"></text></g><g><title>predicates_defined_on (122,730 samples, 0.48%)</title><rect x="41.2439%" y="181" width="0.4816%" height="15" fill="rgb(246,228,12)"/><text x="41.4939%" y="191.50"></text></g><g><title>inferred_outlives_of (26,720 samples, 0.10%)</title><rect x="41.6206%" y="165" width="0.1048%" height="15" fill="rgb(213,55,15)"/><text x="41.8706%" y="175.50"></text></g><g><title>trait_impls_of (64,000 samples, 0.25%)</title><rect x="41.7818%" y="197" width="0.2511%" height="15" fill="rgb(209,9,3)"/><text x="42.0318%" y="207.50"></text></g><g><title>type_of (54,761 samples, 0.21%)</title><rect x="42.0329%" y="197" width="0.2149%" height="15" fill="rgb(230,59,30)"/><text x="42.2829%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (44,091 samples, 0.17%)</title><rect x="42.0748%" y="181" width="0.1730%" height="15" fill="rgb(209,121,21)"/><text x="42.3248%" y="191.50"></text></g><g><title>typeck (4,262,947 samples, 16.73%)</title><rect x="25.5976%" y="213" width="16.7272%" height="15" fill="rgb(220,109,13)"/><text x="25.8476%" y="223.50">typeck</text></g><g><title>item_bodies_checking (5,521,821 samples, 21.67%)</title><rect x="20.7043%" y="261" width="21.6668%" height="15" fill="rgb(232,18,1)"/><text x="20.9543%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (5,520,011 samples, 21.66%)</title><rect x="20.7114%" y="245" width="21.6597%" height="15" fill="rgb(215,41,42)"/><text x="20.9614%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (5,516,861 samples, 21.65%)</title><rect x="20.7238%" y="229" width="21.6474%" height="15" fill="rgb(224,123,36)"/><text x="20.9738%" y="239.50">typeck</text></g><g><title>trait_impls_of (36,720 samples, 0.14%)</title><rect x="43.1348%" y="213" width="0.1441%" height="15" fill="rgb(240,125,3)"/><text x="43.3848%" y="223.50"></text></g><g><title>item_types_checking (231,732 samples, 0.91%)</title><rect x="42.3711%" y="261" width="0.9093%" height="15" fill="rgb(205,98,50)"/><text x="42.6211%" y="271.50"></text></g><g><title>check_mod_item_types (230,292 samples, 0.90%)</title><rect x="42.3768%" y="245" width="0.9036%" height="15" fill="rgb(205,185,37)"/><text x="42.6268%" y="255.50"></text></g><g><title>typeck (226,902 samples, 0.89%)</title><rect x="42.3901%" y="229" width="0.8903%" height="15" fill="rgb(238,207,15)"/><text x="42.6401%" y="239.50"></text></g><g><title>fn_sig (85,271 samples, 0.33%)</title><rect x="43.4502%" y="229" width="0.3346%" height="15" fill="rgb(213,199,42)"/><text x="43.7002%" y="239.50"></text></g><g><title>named_region_map (55,362 samples, 0.22%)</title><rect x="43.9348%" y="213" width="0.2172%" height="15" fill="rgb(235,201,11)"/><text x="44.1848%" y="223.50"></text></g><g><title>resolve_lifetimes (51,452 samples, 0.20%)</title><rect x="43.9501%" y="197" width="0.2019%" height="15" fill="rgb(207,46,11)"/><text x="44.2001%" y="207.50"></text></g><g><title>generics_of (103,092 samples, 0.40%)</title><rect x="43.7848%" y="229" width="0.4045%" height="15" fill="rgb(241,35,35)"/><text x="44.0348%" y="239.50"></text></g><g><title>predicates_of (32,460 samples, 0.13%)</title><rect x="44.1893%" y="229" width="0.1274%" height="15" fill="rgb(243,32,47)"/><text x="44.4393%" y="239.50"></text></g><g><title>predicates_defined_on (30,030 samples, 0.12%)</title><rect x="44.1989%" y="213" width="0.1178%" height="15" fill="rgb(247,202,23)"/><text x="44.4489%" y="223.50"></text></g><g><title>type_collecting (279,093 samples, 1.10%)</title><rect x="43.2840%" y="261" width="1.0951%" height="15" fill="rgb(219,102,11)"/><text x="43.5340%" y="271.50"></text></g><g><title>collect_mod_item_types (271,943 samples, 1.07%)</title><rect x="43.3121%" y="245" width="1.0671%" height="15" fill="rgb(243,110,44)"/><text x="43.5621%" y="255.50"></text></g><g><title>adt_sized_constraint (37,930 samples, 0.15%)</title><rect x="45.7567%" y="213" width="0.1488%" height="15" fill="rgb(222,74,54)"/><text x="46.0067%" y="223.50"></text></g><g><title>evaluate_obligation (91,831 samples, 0.36%)</title><rect x="45.5467%" y="229" width="0.3603%" height="15" fill="rgb(216,99,12)"/><text x="45.7967%" y="239.50"></text></g><g><title>implied_outlives_bounds (85,521 samples, 0.34%)</title><rect x="45.9070%" y="229" width="0.3356%" height="15" fill="rgb(226,22,26)"/><text x="46.1570%" y="239.50"></text></g><g><title>param_env (140,221 samples, 0.55%)</title><rect x="46.2426%" y="229" width="0.5502%" height="15" fill="rgb(217,163,10)"/><text x="46.4926%" y="239.50"></text></g><g><title>predicates_of (25,561 samples, 0.10%)</title><rect x="46.7928%" y="229" width="0.1003%" height="15" fill="rgb(213,25,53)"/><text x="47.0428%" y="239.50"></text></g><g><title>region_scope_tree (50,510 samples, 0.20%)</title><rect x="46.8931%" y="229" width="0.1982%" height="15" fill="rgb(252,105,26)"/><text x="47.1431%" y="239.50"></text></g><g><title>analysis (11,560,227 samples, 45.36%)</title><rect x="1.7321%" y="293" width="45.3606%" height="15" fill="rgb(220,39,43)"/><text x="1.9821%" y="303.50">analysis</text></g><g><title>type_check_crate (6,761,775 samples, 26.53%)</title><rect x="20.5605%" y="277" width="26.5322%" height="15" fill="rgb(229,68,48)"/><text x="20.8105%" y="287.50">type_check_crate</text></g><g><title>wf_checking (690,498 samples, 2.71%)</title><rect x="44.3833%" y="261" width="2.7094%" height="15" fill="rgb(252,8,32)"/><text x="44.6333%" y="271.50">wf..</text></g><g><title>check_item_well_formed (669,798 samples, 2.63%)</title><rect x="44.4645%" y="245" width="2.6282%" height="15" fill="rgb(223,20,43)"/><text x="44.7145%" y="255.50">ch..</text></g><g><title>native_libraries (25,570 samples, 0.10%)</title><rect x="48.4077%" y="277" width="0.1003%" height="15" fill="rgb(229,81,49)"/><text x="48.6577%" y="287.50"></text></g><g><title>codegen_crate (379,074 samples, 1.49%)</title><rect x="47.1227%" y="293" width="1.4874%" height="15" fill="rgb(236,28,36)"/><text x="47.3727%" y="303.50"></text></g><g><title>AST_validation (48,400 samples, 0.19%)</title><rect x="49.1626%" y="277" width="0.1899%" height="15" fill="rgb(249,185,26)"/><text x="49.4126%" y="287.50"></text></g><g><title>crate_injection (55,261 samples, 0.22%)</title><rect x="49.4211%" y="277" width="0.2168%" height="15" fill="rgb(249,174,33)"/><text x="49.6711%" y="287.50"></text></g><g><title>metadata_load_macro (208,212 samples, 0.82%)</title><rect x="71.9894%" y="245" width="0.8170%" height="15" fill="rgb(233,201,37)"/><text x="72.2394%" y="255.50"></text></g><g><title>macro_expand_crate (7,540,753 samples, 29.59%)</title><rect x="49.6379%" y="277" width="29.5888%" height="15" fill="rgb(221,78,26)"/><text x="49.8879%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (7,531,213 samples, 29.55%)</title><rect x="49.6753%" y="261" width="29.5514%" height="15" fill="rgb(250,127,30)"/><text x="49.9253%" y="271.50">expand_crate</text></g><g><title>metadata_register_crate (1,636,238 samples, 6.42%)</title><rect x="72.8063%" y="245" width="6.4204%" height="15" fill="rgb(230,49,44)"/><text x="73.0563%" y="255.50">metadata..</text></g><g><title>metadata_register_crate (678,715 samples, 2.66%)</title><rect x="76.5635%" y="229" width="2.6632%" height="15" fill="rgb(229,67,23)"/><text x="76.8135%" y="239.50">me..</text></g><g><title>metadata_register_crate (95,340 samples, 0.37%)</title><rect x="78.8526%" y="213" width="0.3741%" height="15" fill="rgb(249,83,47)"/><text x="79.1026%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (98,981 samples, 0.39%)</title><rect x="79.2371%" y="277" width="0.3884%" height="15" fill="rgb(215,43,3)"/><text x="79.4871%" y="287.50"></text></g><g><title>finalize_imports (162,951 samples, 0.64%)</title><rect x="79.6395%" y="261" width="0.6394%" height="15" fill="rgb(238,154,13)"/><text x="79.8895%" y="271.50"></text></g><g><title>finalize_macro_resolutions (25,531 samples, 0.10%)</title><rect x="80.2789%" y="261" width="0.1002%" height="15" fill="rgb(219,56,2)"/><text x="80.5289%" y="271.50"></text></g><g><title>late_resolve_crate (401,714 samples, 1.58%)</title><rect x="80.3791%" y="261" width="1.5763%" height="15" fill="rgb(233,0,4)"/><text x="80.6291%" y="271.50"></text></g><g><title>configure_and_expand (8,520,334 samples, 33.43%)</title><rect x="48.6101%" y="293" width="33.4325%" height="15" fill="rgb(235,30,7)"/><text x="48.8601%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (616,006 samples, 2.42%)</title><rect x="79.6255%" y="277" width="2.4171%" height="15" fill="rgb(250,79,13)"/><text x="79.8755%" y="287.50">re..</text></g><g><title>drop_ast (32,261 samples, 0.13%)</title><rect x="82.0426%" y="293" width="0.1266%" height="15" fill="rgb(211,146,34)"/><text x="82.2926%" y="303.50"></text></g><g><title>early_lint_checks (89,061 samples, 0.35%)</title><rect x="82.2602%" y="293" width="0.3495%" height="15" fill="rgb(228,22,38)"/><text x="82.5102%" y="303.50"></text></g><g><title>free_global_ctxt (1,942,011 samples, 7.62%)</title><rect x="82.6097%" y="293" width="7.6202%" height="15" fill="rgb(235,168,5)"/><text x="82.8597%" y="303.50">free_globa..</text></g><g><title>crate_hash (72,040 samples, 0.28%)</title><rect x="91.0698%" y="277" width="0.2827%" height="15" fill="rgb(221,155,16)"/><text x="91.3198%" y="287.50"></text></g><g><title>generate_crate_metadata (355,924 samples, 1.40%)</title><rect x="90.2299%" y="293" width="1.3966%" height="15" fill="rgb(215,215,53)"/><text x="90.4799%" y="303.50"></text></g><g><title>hir_lowering (446,815 samples, 1.75%)</title><rect x="91.6264%" y="293" width="1.7532%" height="15" fill="rgb(223,4,10)"/><text x="91.8764%" y="303.50"></text></g><g><title>link (45,391 samples, 0.18%)</title><rect x="93.3797%" y="293" width="0.1781%" height="15" fill="rgb(234,103,6)"/><text x="93.6297%" y="303.50"></text></g><g><title>parse_crate (748,548 samples, 2.94%)</title><rect x="93.5578%" y="293" width="2.9372%" height="15" fill="rgb(227,97,0)"/><text x="93.8078%" y="303.50">pa..</text></g><g><title>prepare_outputs (166,331 samples, 0.65%)</title><rect x="96.5187%" y="293" width="0.6527%" height="15" fill="rgb(234,150,53)"/><text x="96.7687%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (338,764 samples, 1.33%)</title><rect x="97.1713%" y="293" width="1.3293%" height="15" fill="rgb(228,201,54)"/><text x="97.4213%" y="303.50"></text></g><g><title>setup_global_ctxt (77,480 samples, 0.30%)</title><rect x="98.5458%" y="293" width="0.3040%" height="15" fill="rgb(222,22,37)"/><text x="98.7958%" y="303.50"></text></g><g><title>all (25,485,151 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (25,485,151 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (293,133 samples, 1.15%)</title><rect x="98.8498%" y="293" width="1.1502%" height="15" fill="rgb(210,40,34)"/><text x="99.0998%" y="303.50"></text></g></svg></svg>