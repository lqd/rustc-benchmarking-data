<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (205,622 samples, 0.11%)</title><rect x="14.3004%" y="101" width="0.1116%" height="15" fill="rgb(227,0,7)"/><text x="14.5504%" y="111.50"></text></g><g><title>item_attrs (197,924 samples, 0.11%)</title><rect x="14.9729%" y="69" width="0.1075%" height="15" fill="rgb(217,0,24)"/><text x="15.2229%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (192,304 samples, 0.10%)</title><rect x="14.9760%" y="53" width="0.1044%" height="15" fill="rgb(221,193,54)"/><text x="15.2260%" y="63.50"></text></g><g><title>codegen_fn_attrs (280,364 samples, 0.15%)</title><rect x="14.9330%" y="85" width="0.1522%" height="15" fill="rgb(248,212,6)"/><text x="15.1830%" y="95.50"></text></g><g><title>is_copy_raw (416,477 samples, 0.23%)</title><rect x="18.3224%" y="69" width="0.2261%" height="15" fill="rgb(208,68,35)"/><text x="18.5724%" y="79.50"></text></g><g><title>evaluate_obligation (334,197 samples, 0.18%)</title><rect x="18.3671%" y="53" width="0.1815%" height="15" fill="rgb(232,128,0)"/><text x="18.6171%" y="63.50"></text></g><g><title>needs_drop_raw (423,766 samples, 0.23%)</title><rect x="18.5485%" y="69" width="0.2301%" height="15" fill="rgb(207,160,47)"/><text x="18.7985%" y="79.50"></text></g><g><title>is_copy_raw (258,314 samples, 0.14%)</title><rect x="18.6383%" y="53" width="0.1403%" height="15" fill="rgb(228,23,34)"/><text x="18.8883%" y="63.50"></text></g><g><title>evaluate_obligation (196,662 samples, 0.11%)</title><rect x="18.6718%" y="37" width="0.1068%" height="15" fill="rgb(218,30,26)"/><text x="18.9218%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (220,524 samples, 0.12%)</title><rect x="18.9834%" y="53" width="0.1197%" height="15" fill="rgb(220,122,19)"/><text x="19.2334%" y="63.50"></text></g><g><title>resolve_instance (752,521 samples, 0.41%)</title><rect x="18.7786%" y="69" width="0.4086%" height="15" fill="rgb(250,228,42)"/><text x="19.0286%" y="79.50"></text></g><g><title>thir_body (2,751,050 samples, 1.49%)</title><rect x="19.2163%" y="69" width="1.4937%" height="15" fill="rgb(240,193,28)"/><text x="19.4663%" y="79.50"></text></g><g><title>mir_const (13,416,856 samples, 7.28%)</title><rect x="13.4421%" y="117" width="7.2846%" height="15" fill="rgb(216,20,37)"/><text x="13.6921%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (11,630,557 samples, 6.31%)</title><rect x="14.4120%" y="101" width="6.3147%" height="15" fill="rgb(206,188,39)"/><text x="14.6620%" y="111.50">unsafety..</text></g><g><title>mir_built (10,390,669 samples, 5.64%)</title><rect x="15.0852%" y="85" width="5.6416%" height="15" fill="rgb(217,207,13)"/><text x="15.3352%" y="95.50">mir_bui..</text></g><g><title>mir_promoted (15,704,037 samples, 8.53%)</title><rect x="12.5950%" y="133" width="8.5264%" height="15" fill="rgb(231,73,38)"/><text x="12.8450%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (726,888 samples, 0.39%)</title><rect x="20.7267%" y="117" width="0.3947%" height="15" fill="rgb(225,20,46)"/><text x="20.9767%" y="127.50"></text></g><g><title>mir_const (514,547 samples, 0.28%)</title><rect x="20.8420%" y="101" width="0.2794%" height="15" fill="rgb(210,31,41)"/><text x="21.0920%" y="111.50"></text></g><g><title>unsafety_check_result (353,133 samples, 0.19%)</title><rect x="20.9297%" y="85" width="0.1917%" height="15" fill="rgb(221,200,47)"/><text x="21.1797%" y="95.50"></text></g><g><title>mir_built (303,993 samples, 0.17%)</title><rect x="20.9564%" y="69" width="0.1651%" height="15" fill="rgb(226,26,5)"/><text x="21.2064%" y="79.50"></text></g><g><title>type_op_ascribe_user_type (381,333 samples, 0.21%)</title><rect x="21.1250%" y="133" width="0.2070%" height="15" fill="rgb(249,33,26)"/><text x="21.3750%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,654,360 samples, 0.90%)</title><rect x="21.3894%" y="133" width="0.8982%" height="15" fill="rgb(235,183,28)"/><text x="21.6394%" y="143.50"></text></g><g><title>MIR_borrow_checking (39,531,530 samples, 21.46%)</title><rect x="0.8275%" y="165" width="21.4634%" height="15" fill="rgb(221,5,38)"/><text x="1.0775%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (39,227,846 samples, 21.30%)</title><rect x="0.9924%" y="149" width="21.2985%" height="15" fill="rgb(247,18,42)"/><text x="1.2424%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (484,745 samples, 0.26%)</title><rect x="22.2909%" y="165" width="0.2632%" height="15" fill="rgb(241,131,45)"/><text x="22.5409%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (354,544 samples, 0.19%)</title><rect x="22.3616%" y="149" width="0.1925%" height="15" fill="rgb(249,31,29)"/><text x="22.6116%" y="159.50"></text></g><g><title>hir_module_items (324,524 samples, 0.18%)</title><rect x="22.5541%" y="165" width="0.1762%" height="15" fill="rgb(225,111,53)"/><text x="22.8041%" y="175.50"></text></g><g><title>should_inherit_track_caller (311,795 samples, 0.17%)</title><rect x="23.1554%" y="117" width="0.1693%" height="15" fill="rgb(238,160,17)"/><text x="23.4054%" y="127.50"></text></g><g><title>codegen_fn_attrs (580,507 samples, 0.32%)</title><rect x="23.0220%" y="133" width="0.3152%" height="15" fill="rgb(214,148,48)"/><text x="23.2720%" y="143.50"></text></g><g><title>check_mod_attrs (1,087,731 samples, 0.59%)</title><rect x="22.7467%" y="149" width="0.5906%" height="15" fill="rgb(232,36,49)"/><text x="22.9967%" y="159.50"></text></g><g><title>check_mod_const_bodies (238,154 samples, 0.13%)</title><rect x="23.3373%" y="149" width="0.1293%" height="15" fill="rgb(209,103,24)"/><text x="23.5873%" y="159.50"></text></g><g><title>lint_levels (316,984 samples, 0.17%)</title><rect x="23.6416%" y="133" width="0.1721%" height="15" fill="rgb(229,88,8)"/><text x="23.8916%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (727,757 samples, 0.40%)</title><rect x="23.5383%" y="149" width="0.3951%" height="15" fill="rgb(213,181,19)"/><text x="23.7883%" y="159.50"></text></g><g><title>misc_checking_1 (2,278,035 samples, 1.24%)</title><rect x="22.7306%" y="165" width="1.2368%" height="15" fill="rgb(254,191,54)"/><text x="22.9806%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (778,789 samples, 0.42%)</title><rect x="23.9681%" y="149" width="0.4228%" height="15" fill="rgb(241,83,37)"/><text x="24.2181%" y="159.50"></text></g><g><title>check_mod_liveness (593,187 samples, 0.32%)</title><rect x="24.0689%" y="133" width="0.3221%" height="15" fill="rgb(233,36,39)"/><text x="24.3189%" y="143.50"></text></g><g><title>misc_checking_2 (1,554,978 samples, 0.84%)</title><rect x="23.9674%" y="165" width="0.8443%" height="15" fill="rgb(226,3,54)"/><text x="24.2174%" y="175.50"></text></g><g><title>match_checking (774,839 samples, 0.42%)</title><rect x="24.3910%" y="149" width="0.4207%" height="15" fill="rgb(245,192,40)"/><text x="24.6410%" y="159.50"></text></g><g><title>check_match (712,458 samples, 0.39%)</title><rect x="24.4248%" y="133" width="0.3868%" height="15" fill="rgb(238,167,29)"/><text x="24.6748%" y="143.50"></text></g><g><title>check_private_in_public (363,424 samples, 0.20%)</title><rect x="24.8173%" y="149" width="0.1973%" height="15" fill="rgb(232,182,51)"/><text x="25.0673%" y="159.50"></text></g><g><title>death_checking (694,758 samples, 0.38%)</title><rect x="25.0146%" y="149" width="0.3772%" height="15" fill="rgb(231,60,39)"/><text x="25.2646%" y="159.50"></text></g><g><title>crate_lints (1,303,765 samples, 0.71%)</title><rect x="25.3927%" y="133" width="0.7079%" height="15" fill="rgb(208,69,12)"/><text x="25.6427%" y="143.50"></text></g><g><title>type_of (342,164 samples, 0.19%)</title><rect x="25.9148%" y="117" width="0.1858%" height="15" fill="rgb(235,93,37)"/><text x="26.1648%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (264,444 samples, 0.14%)</title><rect x="25.9570%" y="101" width="0.1436%" height="15" fill="rgb(213,116,39)"/><text x="26.2070%" y="111.50"></text></g><g><title>lint_checking (2,206,195 samples, 1.20%)</title><rect x="25.3918%" y="149" width="1.1978%" height="15" fill="rgb(222,207,29)"/><text x="25.6418%" y="159.50"></text></g><g><title>module_lints (900,770 samples, 0.49%)</title><rect x="26.1006%" y="133" width="0.4891%" height="15" fill="rgb(206,96,30)"/><text x="26.3506%" y="143.50"></text></g><g><title>lint_mod (895,490 samples, 0.49%)</title><rect x="26.1035%" y="117" width="0.4862%" height="15" fill="rgb(218,138,4)"/><text x="26.3535%" y="127.50"></text></g><g><title>privacy_access_levels (437,465 samples, 0.24%)</title><rect x="26.5897%" y="149" width="0.2375%" height="15" fill="rgb(250,191,14)"/><text x="26.8397%" y="159.50"></text></g><g><title>privacy_checking_modules (1,358,845 samples, 0.74%)</title><rect x="26.8272%" y="149" width="0.7378%" height="15" fill="rgb(239,60,40)"/><text x="27.0772%" y="159.50"></text></g><g><title>check_mod_privacy (1,355,765 samples, 0.74%)</title><rect x="26.8289%" y="133" width="0.7361%" height="15" fill="rgb(206,27,48)"/><text x="27.0789%" y="143.50"></text></g><g><title>misc_checking_3 (5,088,077 samples, 2.76%)</title><rect x="24.8117%" y="165" width="2.7625%" height="15" fill="rgb(225,35,8)"/><text x="25.0617%" y="175.50">mi..</text></g><g><title>is_copy_raw (285,562 samples, 0.16%)</title><rect x="27.7130%" y="117" width="0.1550%" height="15" fill="rgb(250,213,24)"/><text x="27.9630%" y="127.50"></text></g><g><title>evaluate_obligation (248,252 samples, 0.13%)</title><rect x="27.7333%" y="101" width="0.1348%" height="15" fill="rgb(247,123,22)"/><text x="27.9833%" y="111.50"></text></g><g><title>impl_parent (599,604 samples, 0.33%)</title><rect x="28.5059%" y="101" width="0.3256%" height="15" fill="rgb(231,138,38)"/><text x="28.7559%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (359,562 samples, 0.20%)</title><rect x="28.6362%" y="85" width="0.1952%" height="15" fill="rgb(231,145,46)"/><text x="28.8862%" y="95.50"></text></g><g><title>impl_trait_ref (1,429,229 samples, 0.78%)</title><rect x="28.8314%" y="101" width="0.7760%" height="15" fill="rgb(251,118,11)"/><text x="29.0814%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,182,596 samples, 0.64%)</title><rect x="28.9653%" y="85" width="0.6421%" height="15" fill="rgb(217,147,25)"/><text x="29.2153%" y="95.50"></text></g><g><title>trait_impls_of (207,372 samples, 0.11%)</title><rect x="29.6145%" y="101" width="0.1126%" height="15" fill="rgb(247,81,37)"/><text x="29.8645%" y="111.50"></text></g><g><title>coherent_trait (3,842,893 samples, 2.09%)</title><rect x="27.6411%" y="133" width="2.0865%" height="15" fill="rgb(209,12,38)"/><text x="27.8911%" y="143.50">c..</text></g><g><title>specialization_graph_of (3,301,696 samples, 1.79%)</title><rect x="27.9349%" y="117" width="1.7926%" height="15" fill="rgb(227,1,9)"/><text x="28.1849%" y="127.50">s..</text></g><g><title>coherence_checking (3,960,404 samples, 2.15%)</title><rect x="27.6327%" y="149" width="2.1503%" height="15" fill="rgb(248,47,43)"/><text x="27.8827%" y="159.50">c..</text></g><g><title>associated_item (730,500 samples, 0.40%)</title><rect x="52.8652%" y="85" width="0.3966%" height="15" fill="rgb(221,10,30)"/><text x="53.1152%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (586,089 samples, 0.32%)</title><rect x="52.9436%" y="69" width="0.3182%" height="15" fill="rgb(210,229,1)"/><text x="53.1936%" y="79.50"></text></g><g><title>associated_items (977,064 samples, 0.53%)</title><rect x="52.7491%" y="101" width="0.5305%" height="15" fill="rgb(222,148,37)"/><text x="52.9991%" y="111.50"></text></g><g><title>dropck_outlives (220,713 samples, 0.12%)</title><rect x="53.3168%" y="101" width="0.1198%" height="15" fill="rgb(234,67,33)"/><text x="53.5668%" y="111.50"></text></g><g><title>eval_to_const_value_raw (264,572 samples, 0.14%)</title><rect x="53.4366%" y="101" width="0.1436%" height="15" fill="rgb(247,98,35)"/><text x="53.6866%" y="111.50"></text></g><g><title>eval_to_const_value_raw (242,502 samples, 0.13%)</title><rect x="53.4486%" y="85" width="0.1317%" height="15" fill="rgb(247,138,52)"/><text x="53.6986%" y="95.50"></text></g><g><title>eval_to_allocation_raw (236,042 samples, 0.13%)</title><rect x="53.4521%" y="69" width="0.1282%" height="15" fill="rgb(213,79,30)"/><text x="53.7021%" y="79.50"></text></g><g><title>generics_of (846,468 samples, 0.46%)</title><rect x="56.6293%" y="85" width="0.4596%" height="15" fill="rgb(246,177,23)"/><text x="56.8793%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (654,185 samples, 0.36%)</title><rect x="56.7337%" y="69" width="0.3552%" height="15" fill="rgb(230,62,27)"/><text x="56.9837%" y="79.50"></text></g><g><title>impl_trait_ref (1,366,206 samples, 0.74%)</title><rect x="57.1890%" y="85" width="0.7418%" height="15" fill="rgb(216,154,8)"/><text x="57.4390%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (957,171 samples, 0.52%)</title><rect x="57.4111%" y="69" width="0.5197%" height="15" fill="rgb(244,35,45)"/><text x="57.6611%" y="79.50"></text></g><g><title>predicates_of (574,587 samples, 0.31%)</title><rect x="57.9613%" y="85" width="0.3120%" height="15" fill="rgb(251,115,12)"/><text x="58.2113%" y="95.50"></text></g><g><title>predicates_defined_on (305,663 samples, 0.17%)</title><rect x="58.1073%" y="69" width="0.1660%" height="15" fill="rgb(240,54,50)"/><text x="58.3573%" y="79.50"></text></g><g><title>specializes (1,523,810 samples, 0.83%)</title><rect x="58.2732%" y="85" width="0.8273%" height="15" fill="rgb(233,84,52)"/><text x="58.5232%" y="95.50"></text></g><g><title>param_env (954,893 samples, 0.52%)</title><rect x="58.5821%" y="69" width="0.5185%" height="15" fill="rgb(207,117,47)"/><text x="58.8321%" y="79.50"></text></g><g><title>def_span (467,078 samples, 0.25%)</title><rect x="58.8470%" y="53" width="0.2536%" height="15" fill="rgb(249,43,39)"/><text x="59.0970%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (423,697 samples, 0.23%)</title><rect x="58.8705%" y="37" width="0.2300%" height="15" fill="rgb(209,38,44)"/><text x="59.1205%" y="47.50"></text></g><g><title>trait_impls_of (403,103 samples, 0.22%)</title><rect x="59.1115%" y="85" width="0.2189%" height="15" fill="rgb(236,212,23)"/><text x="59.3615%" y="95.50"></text></g><g><title>evaluate_obligation (10,629,214 samples, 5.77%)</title><rect x="53.5803%" y="101" width="5.7711%" height="15" fill="rgb(242,79,21)"/><text x="53.8303%" y="111.50">evaluat..</text></g><g><title>generics_of (393,534 samples, 0.21%)</title><rect x="59.4371%" y="101" width="0.2137%" height="15" fill="rgb(211,96,35)"/><text x="59.6871%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (304,994 samples, 0.17%)</title><rect x="59.4852%" y="85" width="0.1656%" height="15" fill="rgb(253,215,40)"/><text x="59.7352%" y="95.50"></text></g><g><title>impl_trait_ref (231,481 samples, 0.13%)</title><rect x="59.7049%" y="101" width="0.1257%" height="15" fill="rgb(211,81,21)"/><text x="59.9549%" y="111.50"></text></g><g><title>method_autoderef_steps (302,242 samples, 0.16%)</title><rect x="59.9825%" y="101" width="0.1641%" height="15" fill="rgb(208,190,38)"/><text x="60.2325%" y="111.50"></text></g><g><title>param_env (341,185 samples, 0.19%)</title><rect x="60.2533%" y="101" width="0.1852%" height="15" fill="rgb(235,213,38)"/><text x="60.5033%" y="111.50"></text></g><g><title>predicates_of (375,541 samples, 0.20%)</title><rect x="60.4669%" y="101" width="0.2039%" height="15" fill="rgb(237,122,38)"/><text x="60.7169%" y="111.50"></text></g><g><title>predicates_defined_on (254,571 samples, 0.14%)</title><rect x="60.5326%" y="85" width="0.1382%" height="15" fill="rgb(244,218,35)"/><text x="60.7826%" y="95.50"></text></g><g><title>item_bodies_checking (57,218,997 samples, 31.07%)</title><rect x="29.8133%" y="149" width="31.0667%" height="15" fill="rgb(240,68,47)"/><text x="30.0633%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,216,257 samples, 31.07%)</title><rect x="29.8148%" y="133" width="31.0653%" height="15" fill="rgb(210,16,53)"/><text x="30.0648%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (57,004,593 samples, 30.95%)</title><rect x="29.9297%" y="117" width="30.9503%" height="15" fill="rgb(235,124,12)"/><text x="30.1797%" y="127.50">typeck</text></g><g><title>item_types_checking (1,614,207 samples, 0.88%)</title><rect x="60.8801%" y="149" width="0.8764%" height="15" fill="rgb(224,169,11)"/><text x="61.1301%" y="159.50"></text></g><g><title>check_mod_item_types (1,610,217 samples, 0.87%)</title><rect x="60.8822%" y="133" width="0.8743%" height="15" fill="rgb(250,166,2)"/><text x="61.1322%" y="143.50"></text></g><g><title>fn_sig (526,207 samples, 0.29%)</title><rect x="62.0382%" y="117" width="0.2857%" height="15" fill="rgb(242,216,29)"/><text x="62.2882%" y="127.50"></text></g><g><title>named_region_map (403,534 samples, 0.22%)</title><rect x="62.4318%" y="101" width="0.2191%" height="15" fill="rgb(230,116,27)"/><text x="62.6818%" y="111.50"></text></g><g><title>resolve_lifetimes (359,414 samples, 0.20%)</title><rect x="62.4557%" y="85" width="0.1951%" height="15" fill="rgb(228,99,48)"/><text x="62.7057%" y="95.50"></text></g><g><title>generics_of (628,807 samples, 0.34%)</title><rect x="62.3239%" y="117" width="0.3414%" height="15" fill="rgb(253,11,6)"/><text x="62.5739%" y="127.50"></text></g><g><title>explicit_predicates_of (353,545 samples, 0.19%)</title><rect x="62.8333%" y="85" width="0.1920%" height="15" fill="rgb(247,143,39)"/><text x="63.0833%" y="95.50"></text></g><g><title>predicates_of (924,339 samples, 0.50%)</title><rect x="62.6968%" y="117" width="0.5019%" height="15" fill="rgb(236,97,10)"/><text x="62.9468%" y="127.50"></text></g><g><title>predicates_defined_on (828,468 samples, 0.45%)</title><rect x="62.7489%" y="101" width="0.4498%" height="15" fill="rgb(233,208,19)"/><text x="62.9989%" y="111.50"></text></g><g><title>inferred_outlives_of (319,553 samples, 0.17%)</title><rect x="63.0252%" y="85" width="0.1735%" height="15" fill="rgb(216,164,2)"/><text x="63.2752%" y="95.50"></text></g><g><title>inferred_outlives_crate (282,393 samples, 0.15%)</title><rect x="63.0454%" y="69" width="0.1533%" height="15" fill="rgb(220,129,5)"/><text x="63.2954%" y="79.50"></text></g><g><title>type_collecting (2,829,591 samples, 1.54%)</title><rect x="61.7574%" y="149" width="1.5363%" height="15" fill="rgb(242,17,10)"/><text x="62.0074%" y="159.50"></text></g><g><title>collect_mod_item_types (2,814,301 samples, 1.53%)</title><rect x="61.7657%" y="133" width="1.5280%" height="15" fill="rgb(242,107,0)"/><text x="62.0157%" y="143.50"></text></g><g><title>evaluate_obligation (560,857 samples, 0.30%)</title><rect x="65.3689%" y="117" width="0.3045%" height="15" fill="rgb(251,28,31)"/><text x="65.6189%" y="127.50"></text></g><g><title>implied_outlives_bounds (264,731 samples, 0.14%)</title><rect x="65.6734%" y="117" width="0.1437%" height="15" fill="rgb(233,223,10)"/><text x="65.9234%" y="127.50"></text></g><g><title>param_env (552,229 samples, 0.30%)</title><rect x="65.8171%" y="117" width="0.2998%" height="15" fill="rgb(215,21,27)"/><text x="66.0671%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,747,764 samples, 3.12%)</title><rect x="63.4862%" y="133" width="3.1207%" height="15" fill="rgb(232,23,21)"/><text x="63.7362%" y="143.50">che..</text></g><g><title>region_scope_tree (879,959 samples, 0.48%)</title><rect x="66.1291%" y="117" width="0.4778%" height="15" fill="rgb(244,5,23)"/><text x="66.3791%" y="127.50"></text></g><g><title>evaluate_obligation (493,423 samples, 0.27%)</title><rect x="67.5853%" y="117" width="0.2679%" height="15" fill="rgb(226,81,46)"/><text x="67.8353%" y="127.50"></text></g><g><title>param_env (345,396 samples, 0.19%)</title><rect x="67.9315%" y="117" width="0.1875%" height="15" fill="rgb(247,70,30)"/><text x="68.1815%" y="127.50"></text></g><g><title>check_item_well_formed (3,016,775 samples, 1.64%)</title><rect x="66.6069%" y="133" width="1.6379%" height="15" fill="rgb(212,68,19)"/><text x="66.8569%" y="143.50"></text></g><g><title>analysis (124,948,661 samples, 67.84%)</title><rect x="0.5041%" y="181" width="67.8402%" height="15" fill="rgb(240,187,13)"/><text x="0.7541%" y="191.50">analysis</text></g><g><title>type_check_crate (75,090,776 samples, 40.77%)</title><rect x="27.5742%" y="165" width="40.7701%" height="15" fill="rgb(223,113,26)"/><text x="27.8242%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,288,284 samples, 5.04%)</title><rect x="63.3013%" y="149" width="5.0430%" height="15" fill="rgb(206,192,2)"/><text x="63.5513%" y="159.50">wf_che..</text></g><g><title>codegen_crate (317,644 samples, 0.17%)</title><rect x="68.3506%" y="181" width="0.1725%" height="15" fill="rgb(241,108,4)"/><text x="68.6006%" y="191.50"></text></g><g><title>AST_validation (414,834 samples, 0.23%)</title><rect x="68.6569%" y="165" width="0.2252%" height="15" fill="rgb(247,173,49)"/><text x="68.9069%" y="175.50"></text></g><g><title>complete_gated_feature_checking (204,812 samples, 0.11%)</title><rect x="68.8821%" y="165" width="0.1112%" height="15" fill="rgb(224,114,35)"/><text x="69.1321%" y="175.50"></text></g><g><title>metadata_load_macro (306,532 samples, 0.17%)</title><rect x="87.1760%" y="133" width="0.1664%" height="15" fill="rgb(245,159,27)"/><text x="87.4260%" y="143.50"></text></g><g><title>metadata_register_crate (228,852 samples, 0.12%)</title><rect x="87.3424%" y="133" width="0.1243%" height="15" fill="rgb(245,172,44)"/><text x="87.5924%" y="143.50"></text></g><g><title>macro_expand_crate (34,441,264 samples, 18.70%)</title><rect x="69.0528%" y="165" width="18.6997%" height="15" fill="rgb(236,23,11)"/><text x="69.3028%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (34,422,533 samples, 18.69%)</title><rect x="69.0630%" y="149" width="18.6895%" height="15" fill="rgb(205,117,38)"/><text x="69.3130%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (526,415 samples, 0.29%)</title><rect x="87.4667%" y="133" width="0.2858%" height="15" fill="rgb(237,72,25)"/><text x="87.7167%" y="143.50"></text></g><g><title>finalize_macro_resolutions (525,296 samples, 0.29%)</title><rect x="87.8636%" y="149" width="0.2852%" height="15" fill="rgb(244,70,9)"/><text x="88.1136%" y="159.50"></text></g><g><title>late_resolve_crate (7,001,527 samples, 3.80%)</title><rect x="88.1488%" y="149" width="3.8014%" height="15" fill="rgb(217,125,39)"/><text x="88.3988%" y="159.50">late..</text></g><g><title>configure_and_expand (43,509,055 samples, 23.62%)</title><rect x="68.5230%" y="181" width="23.6230%" height="15" fill="rgb(235,36,10)"/><text x="68.7730%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (7,981,609 samples, 4.33%)</title><rect x="87.8125%" y="165" width="4.3336%" height="15" fill="rgb(251,123,47)"/><text x="88.0625%" y="175.50">resol..</text></g><g><title>drop_ast (354,784 samples, 0.19%)</title><rect x="92.1460%" y="181" width="0.1926%" height="15" fill="rgb(221,13,13)"/><text x="92.3960%" y="191.50"></text></g><g><title>early_lint_checks (796,149 samples, 0.43%)</title><rect x="92.3464%" y="181" width="0.4323%" height="15" fill="rgb(238,131,9)"/><text x="92.5964%" y="191.50"></text></g><g><title>free_global_ctxt (2,824,152 samples, 1.53%)</title><rect x="92.7786%" y="181" width="1.5334%" height="15" fill="rgb(211,50,8)"/><text x="93.0286%" y="191.50"></text></g><g><title>generate_crate_metadata (1,953,722 samples, 1.06%)</title><rect x="94.3120%" y="181" width="1.0608%" height="15" fill="rgb(245,182,24)"/><text x="94.5620%" y="191.50"></text></g><g><title>hir_lowering (6,494,233 samples, 3.53%)</title><rect x="95.3727%" y="181" width="3.5260%" height="15" fill="rgb(242,14,37)"/><text x="95.6227%" y="191.50">hir..</text></g><g><title>parse_crate (340,964 samples, 0.19%)</title><rect x="98.9347%" y="181" width="0.1851%" height="15" fill="rgb(246,228,12)"/><text x="99.1847%" y="191.50"></text></g><g><title>prepare_outputs (264,053 samples, 0.14%)</title><rect x="99.1262%" y="181" width="0.1434%" height="15" fill="rgb(213,55,15)"/><text x="99.3762%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (911,210 samples, 0.49%)</title><rect x="99.2696%" y="181" width="0.4947%" height="15" fill="rgb(209,9,3)"/><text x="99.5196%" y="191.50"></text></g><g><title>all (184,180,833 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (184,180,833 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (329,224 samples, 0.18%)</title><rect x="99.8212%" y="181" width="0.1788%" height="15" fill="rgb(220,109,13)"/><text x="100.0712%" y="191.50"></text></g></svg></svg>