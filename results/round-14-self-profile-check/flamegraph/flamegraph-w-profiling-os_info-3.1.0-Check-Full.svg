<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (430,657 samples, 0.13%)</title><rect x="12.4727%" y="149" width="0.1262%" height="15" fill="rgb(227,0,7)"/><text x="12.7227%" y="159.50"></text></g><g><title>param_env (400,805 samples, 0.12%)</title><rect x="14.0995%" y="117" width="0.1174%" height="15" fill="rgb(217,0,24)"/><text x="14.3495%" y="127.50"></text></g><g><title>item_attrs (351,094 samples, 0.10%)</title><rect x="14.6421%" y="85" width="0.1029%" height="15" fill="rgb(221,193,54)"/><text x="14.8921%" y="95.50"></text></g><g><title>codegen_fn_attrs (542,145 samples, 0.16%)</title><rect x="14.5968%" y="101" width="0.1589%" height="15" fill="rgb(248,212,6)"/><text x="14.8468%" y="111.50"></text></g><g><title>adt_drop_tys (517,987 samples, 0.15%)</title><rect x="17.6519%" y="69" width="0.1518%" height="15" fill="rgb(208,68,35)"/><text x="17.9019%" y="79.50"></text></g><g><title>is_copy_raw (2,473,749 samples, 0.72%)</title><rect x="17.8037%" y="69" width="0.7249%" height="15" fill="rgb(232,128,0)"/><text x="18.0537%" y="79.50"></text></g><g><title>evaluate_obligation (2,036,603 samples, 0.60%)</title><rect x="17.9318%" y="53" width="0.5968%" height="15" fill="rgb(207,160,47)"/><text x="18.1818%" y="63.50"></text></g><g><title>needs_drop_raw (3,328,427 samples, 0.98%)</title><rect x="17.5607%" y="85" width="0.9753%" height="15" fill="rgb(228,23,34)"/><text x="17.8107%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (393,717 samples, 0.12%)</title><rect x="18.6426%" y="69" width="0.1154%" height="15" fill="rgb(218,30,26)"/><text x="18.8926%" y="79.50"></text></g><g><title>specialization_graph_of (1,274,143 samples, 0.37%)</title><rect x="18.7868%" y="69" width="0.3734%" height="15" fill="rgb(220,122,19)"/><text x="19.0368%" y="79.50"></text></g><g><title>impl_trait_ref (511,985 samples, 0.15%)</title><rect x="19.0102%" y="53" width="0.1500%" height="15" fill="rgb(250,228,42)"/><text x="19.2602%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (437,315 samples, 0.13%)</title><rect x="19.0320%" y="37" width="0.1281%" height="15" fill="rgb(240,193,28)"/><text x="19.2820%" y="47.50"></text></g><g><title>resolve_instance (2,223,434 samples, 0.65%)</title><rect x="18.5463%" y="85" width="0.6515%" height="15" fill="rgb(216,20,37)"/><text x="18.7963%" y="95.50"></text></g><g><title>thir_body (3,432,671 samples, 1.01%)</title><rect x="19.2119%" y="85" width="1.0059%" height="15" fill="rgb(206,188,39)"/><text x="19.4619%" y="95.50"></text></g><g><title>mir_const (23,205,741 samples, 6.80%)</title><rect x="13.4635%" y="133" width="6.7999%" height="15" fill="rgb(217,207,13)"/><text x="13.7135%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (20,634,519 samples, 6.05%)</title><rect x="14.2169%" y="117" width="6.0464%" height="15" fill="rgb(231,73,38)"/><text x="14.4669%" y="127.50">unsafety..</text></g><g><title>mir_built (18,795,894 samples, 5.51%)</title><rect x="14.7557%" y="101" width="5.5077%" height="15" fill="rgb(225,20,46)"/><text x="15.0057%" y="111.50">mir_bui..</text></g><g><title>mir_const_qualif (786,339 samples, 0.23%)</title><rect x="20.2634%" y="133" width="0.2304%" height="15" fill="rgb(210,31,41)"/><text x="20.5134%" y="143.50"></text></g><g><title>mir_const (421,272 samples, 0.12%)</title><rect x="20.3703%" y="117" width="0.1234%" height="15" fill="rgb(221,200,47)"/><text x="20.6203%" y="127.50"></text></g><g><title>mir_promoted (26,544,126 samples, 7.78%)</title><rect x="12.7161%" y="149" width="7.7781%" height="15" fill="rgb(226,26,5)"/><text x="12.9661%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,496,875 samples, 0.44%)</title><rect x="20.4943%" y="149" width="0.4386%" height="15" fill="rgb(249,33,26)"/><text x="20.7443%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,309,445 samples, 0.38%)</title><rect x="20.9329%" y="149" width="0.3837%" height="15" fill="rgb(235,183,28)"/><text x="21.1829%" y="159.50"></text></g><g><title>normalize_projection_ty (622,294 samples, 0.18%)</title><rect x="21.1343%" y="133" width="0.1823%" height="15" fill="rgb(221,5,38)"/><text x="21.3843%" y="143.50"></text></g><g><title>type_op_normalize_ty (693,436 samples, 0.20%)</title><rect x="21.3687%" y="149" width="0.2032%" height="15" fill="rgb(247,18,42)"/><text x="21.6187%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,923,784 samples, 1.44%)</title><rect x="21.5719%" y="149" width="1.4428%" height="15" fill="rgb(241,131,45)"/><text x="21.8219%" y="159.50"></text></g><g><title>MIR_borrow_checking (76,772,650 samples, 22.50%)</title><rect x="0.5275%" y="181" width="22.4964%" height="15" fill="rgb(249,31,29)"/><text x="0.7775%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (76,503,475 samples, 22.42%)</title><rect x="0.6063%" y="165" width="22.4175%" height="15" fill="rgb(225,111,53)"/><text x="0.8563%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (368,204 samples, 0.11%)</title><rect x="23.0238%" y="181" width="0.1079%" height="15" fill="rgb(238,160,17)"/><text x="23.2738%" y="191.50"></text></g><g><title>hir_module_items (446,916 samples, 0.13%)</title><rect x="23.1317%" y="181" width="0.1310%" height="15" fill="rgb(214,148,48)"/><text x="23.3817%" y="191.50"></text></g><g><title>codegen_fn_attrs (600,916 samples, 0.18%)</title><rect x="23.4481%" y="149" width="0.1761%" height="15" fill="rgb(232,36,49)"/><text x="23.6981%" y="159.50"></text></g><g><title>check_mod_attrs (1,197,223 samples, 0.35%)</title><rect x="23.2734%" y="165" width="0.3508%" height="15" fill="rgb(209,103,24)"/><text x="23.5234%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (764,809 samples, 0.22%)</title><rect x="23.7557%" y="165" width="0.2241%" height="15" fill="rgb(229,88,8)"/><text x="24.0057%" y="175.50"></text></g><g><title>misc_checking_1 (2,532,008 samples, 0.74%)</title><rect x="23.2628%" y="181" width="0.7419%" height="15" fill="rgb(213,181,19)"/><text x="23.5128%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,079,712 samples, 0.32%)</title><rect x="24.0054%" y="165" width="0.3164%" height="15" fill="rgb(254,191,54)"/><text x="24.2554%" y="175.50"></text></g><g><title>check_mod_liveness (807,990 samples, 0.24%)</title><rect x="24.0850%" y="149" width="0.2368%" height="15" fill="rgb(241,83,37)"/><text x="24.3350%" y="159.50"></text></g><g><title>misc_checking_2 (4,300,228 samples, 1.26%)</title><rect x="24.0048%" y="181" width="1.2601%" height="15" fill="rgb(233,36,39)"/><text x="24.2548%" y="191.50"></text></g><g><title>match_checking (3,218,436 samples, 0.94%)</title><rect x="24.3218%" y="165" width="0.9431%" height="15" fill="rgb(226,3,54)"/><text x="24.5718%" y="175.50"></text></g><g><title>check_match (3,145,495 samples, 0.92%)</title><rect x="24.3431%" y="149" width="0.9217%" height="15" fill="rgb(245,192,40)"/><text x="24.5931%" y="159.50"></text></g><g><title>check_private_in_public (462,965 samples, 0.14%)</title><rect x="25.2681%" y="165" width="0.1357%" height="15" fill="rgb(238,167,29)"/><text x="25.5181%" y="175.50"></text></g><g><title>death_checking (1,018,582 samples, 0.30%)</title><rect x="25.4038%" y="165" width="0.2985%" height="15" fill="rgb(232,182,51)"/><text x="25.6538%" y="175.50"></text></g><g><title>eval_to_const_value_raw (974,043 samples, 0.29%)</title><rect x="26.1296%" y="133" width="0.2854%" height="15" fill="rgb(231,60,39)"/><text x="26.3796%" y="143.50"></text></g><g><title>eval_to_const_value_raw (963,973 samples, 0.28%)</title><rect x="26.1325%" y="117" width="0.2825%" height="15" fill="rgb(208,69,12)"/><text x="26.3825%" y="127.50"></text></g><g><title>eval_to_allocation_raw (945,323 samples, 0.28%)</title><rect x="26.1380%" y="101" width="0.2770%" height="15" fill="rgb(235,93,37)"/><text x="26.3880%" y="111.50"></text></g><g><title>param_env (496,664 samples, 0.15%)</title><rect x="26.4150%" y="133" width="0.1455%" height="15" fill="rgb(213,116,39)"/><text x="26.6650%" y="143.50"></text></g><g><title>crate_lints (4,137,396 samples, 1.21%)</title><rect x="25.7028%" y="149" width="1.2124%" height="15" fill="rgb(222,207,29)"/><text x="25.9528%" y="159.50"></text></g><g><title>type_of (1,195,065 samples, 0.35%)</title><rect x="26.5650%" y="133" width="0.3502%" height="15" fill="rgb(206,96,30)"/><text x="26.8150%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (950,283 samples, 0.28%)</title><rect x="26.6367%" y="117" width="0.2785%" height="15" fill="rgb(218,138,4)"/><text x="26.8867%" y="127.50"></text></g><g><title>lint_checking (5,547,932 samples, 1.63%)</title><rect x="25.7022%" y="165" width="1.6257%" height="15" fill="rgb(250,191,14)"/><text x="25.9522%" y="175.50"></text></g><g><title>module_lints (1,408,496 samples, 0.41%)</title><rect x="26.9152%" y="149" width="0.4127%" height="15" fill="rgb(239,60,40)"/><text x="27.1652%" y="159.50"></text></g><g><title>lint_mod (1,398,026 samples, 0.41%)</title><rect x="26.9183%" y="133" width="0.4097%" height="15" fill="rgb(206,27,48)"/><text x="27.1683%" y="143.50"></text></g><g><title>privacy_access_levels (608,177 samples, 0.18%)</title><rect x="27.3279%" y="165" width="0.1782%" height="15" fill="rgb(225,35,8)"/><text x="27.5779%" y="175.50"></text></g><g><title>privacy_checking_modules (2,508,708 samples, 0.74%)</title><rect x="27.5061%" y="165" width="0.7351%" height="15" fill="rgb(250,213,24)"/><text x="27.7561%" y="175.50"></text></g><g><title>check_mod_privacy (2,501,347 samples, 0.73%)</title><rect x="27.5083%" y="149" width="0.7330%" height="15" fill="rgb(247,123,22)"/><text x="27.7583%" y="159.50"></text></g><g><title>misc_checking_3 (10,184,684 samples, 2.98%)</title><rect x="25.2648%" y="181" width="2.9844%" height="15" fill="rgb(231,138,38)"/><text x="25.5148%" y="191.50">mis..</text></g><g><title>impl_parent (3,179,319 samples, 0.93%)</title><rect x="29.8810%" y="117" width="0.9316%" height="15" fill="rgb(231,145,46)"/><text x="30.1310%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,755,281 samples, 0.51%)</title><rect x="30.2983%" y="101" width="0.5143%" height="15" fill="rgb(251,118,11)"/><text x="30.5483%" y="111.50"></text></g><g><title>impl_trait_ref (6,305,583 samples, 1.85%)</title><rect x="30.8126%" y="117" width="1.8477%" height="15" fill="rgb(217,147,25)"/><text x="31.0626%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,834,830 samples, 1.42%)</title><rect x="31.2436%" y="101" width="1.4167%" height="15" fill="rgb(247,81,37)"/><text x="31.4936%" y="111.50"></text></g><g><title>coherent_trait (15,955,208 samples, 4.68%)</title><rect x="28.2936%" y="149" width="4.6753%" height="15" fill="rgb(209,12,38)"/><text x="28.5436%" y="159.50">coher..</text></g><g><title>specialization_graph_of (15,493,823 samples, 4.54%)</title><rect x="28.4288%" y="133" width="4.5401%" height="15" fill="rgb(227,1,9)"/><text x="28.6788%" y="143.50">speci..</text></g><g><title>trait_impls_of (1,049,311 samples, 0.31%)</title><rect x="32.6614%" y="117" width="0.3075%" height="15" fill="rgb(248,47,43)"/><text x="32.9114%" y="127.50"></text></g><g><title>coherence_checking (16,069,940 samples, 4.71%)</title><rect x="28.2862%" y="165" width="4.7089%" height="15" fill="rgb(221,10,30)"/><text x="28.5362%" y="175.50">coher..</text></g><g><title>adt_dtorck_constraint (426,395 samples, 0.12%)</title><rect x="51.6584%" y="101" width="0.1249%" height="15" fill="rgb(210,229,1)"/><text x="51.9084%" y="111.50"></text></g><g><title>dropck_outlives (1,206,452 samples, 0.35%)</title><rect x="51.4636%" y="117" width="0.3535%" height="15" fill="rgb(222,148,37)"/><text x="51.7136%" y="127.50"></text></g><g><title>evaluate_obligation (3,614,013 samples, 1.06%)</title><rect x="51.8171%" y="117" width="1.0590%" height="15" fill="rgb(234,67,33)"/><text x="52.0671%" y="127.50"></text></g><g><title>predicates_of (393,376 samples, 0.12%)</title><rect x="53.2291%" y="117" width="0.1153%" height="15" fill="rgb(247,98,35)"/><text x="53.4791%" y="127.50"></text></g><g><title>associated_item (393,217 samples, 0.12%)</title><rect x="56.9597%" y="85" width="0.1152%" height="15" fill="rgb(247,138,52)"/><text x="57.2097%" y="95.50"></text></g><g><title>associated_items (577,797 samples, 0.17%)</title><rect x="56.9144%" y="101" width="0.1693%" height="15" fill="rgb(213,79,30)"/><text x="57.1644%" y="111.50"></text></g><g><title>dropck_outlives (399,904 samples, 0.12%)</title><rect x="57.1042%" y="101" width="0.1172%" height="15" fill="rgb(246,177,23)"/><text x="57.3542%" y="111.50"></text></g><g><title>evaluate_obligation (1,730,657 samples, 0.51%)</title><rect x="57.2213%" y="101" width="0.5071%" height="15" fill="rgb(230,62,27)"/><text x="57.4713%" y="111.50"></text></g><g><title>predicates_of (445,935 samples, 0.13%)</title><rect x="58.0797%" y="101" width="0.1307%" height="15" fill="rgb(216,154,8)"/><text x="58.3297%" y="111.50"></text></g><g><title>typeck (16,669,926 samples, 4.88%)</title><rect x="53.3890%" y="117" width="4.8847%" height="15" fill="rgb(244,35,45)"/><text x="53.6390%" y="127.50">typeck</text></g><g><title>item_bodies_checking (86,290,036 samples, 25.29%)</title><rect x="33.0094%" y="165" width="25.2852%" height="15" fill="rgb(251,115,12)"/><text x="33.2594%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (86,286,216 samples, 25.28%)</title><rect x="33.0105%" y="149" width="25.2841%" height="15" fill="rgb(240,54,50)"/><text x="33.2605%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (86,123,253 samples, 25.24%)</title><rect x="33.0583%" y="133" width="25.2363%" height="15" fill="rgb(233,84,52)"/><text x="33.3083%" y="143.50">typeck</text></g><g><title>item_types_checking (3,811,093 samples, 1.12%)</title><rect x="58.2946%" y="165" width="1.1167%" height="15" fill="rgb(207,117,47)"/><text x="58.5446%" y="175.50"></text></g><g><title>check_mod_item_types (3,802,363 samples, 1.11%)</title><rect x="58.2972%" y="149" width="1.1142%" height="15" fill="rgb(249,43,39)"/><text x="58.5472%" y="159.50"></text></g><g><title>typeck (973,101 samples, 0.29%)</title><rect x="59.1262%" y="133" width="0.2851%" height="15" fill="rgb(209,38,44)"/><text x="59.3762%" y="143.50"></text></g><g><title>fn_sig (1,077,170 samples, 0.32%)</title><rect x="59.5989%" y="133" width="0.3156%" height="15" fill="rgb(236,212,23)"/><text x="59.8489%" y="143.50"></text></g><g><title>lint_levels (488,396 samples, 0.14%)</title><rect x="60.1126%" y="85" width="0.1431%" height="15" fill="rgb(242,79,21)"/><text x="60.3626%" y="95.50"></text></g><g><title>is_late_bound_map (924,141 samples, 0.27%)</title><rect x="59.9855%" y="117" width="0.2708%" height="15" fill="rgb(211,96,35)"/><text x="60.2355%" y="127.50"></text></g><g><title>resolve_lifetimes (901,741 samples, 0.26%)</title><rect x="59.9920%" y="101" width="0.2642%" height="15" fill="rgb(253,215,40)"/><text x="60.2420%" y="111.50"></text></g><g><title>named_region_map (402,586 samples, 0.12%)</title><rect x="60.2563%" y="117" width="0.1180%" height="15" fill="rgb(211,81,21)"/><text x="60.5063%" y="127.50"></text></g><g><title>resolve_lifetimes (370,715 samples, 0.11%)</title><rect x="60.2656%" y="101" width="0.1086%" height="15" fill="rgb(208,190,38)"/><text x="60.5156%" y="111.50"></text></g><g><title>generics_of (1,598,758 samples, 0.47%)</title><rect x="59.9145%" y="133" width="0.4685%" height="15" fill="rgb(235,213,38)"/><text x="60.1645%" y="143.50"></text></g><g><title>explicit_predicates_of (361,765 samples, 0.11%)</title><rect x="60.5100%" y="101" width="0.1060%" height="15" fill="rgb(237,122,38)"/><text x="60.7600%" y="111.50"></text></g><g><title>predicates_of (1,024,183 samples, 0.30%)</title><rect x="60.4129%" y="133" width="0.3001%" height="15" fill="rgb(244,218,35)"/><text x="60.6629%" y="143.50"></text></g><g><title>predicates_defined_on (901,421 samples, 0.26%)</title><rect x="60.4489%" y="117" width="0.2641%" height="15" fill="rgb(240,68,47)"/><text x="60.6989%" y="127.50"></text></g><g><title>type_collecting (4,661,373 samples, 1.37%)</title><rect x="59.4127%" y="165" width="1.3659%" height="15" fill="rgb(210,16,53)"/><text x="59.6627%" y="175.50"></text></g><g><title>collect_mod_item_types (4,643,192 samples, 1.36%)</title><rect x="59.4180%" y="149" width="1.3606%" height="15" fill="rgb(235,124,12)"/><text x="59.6680%" y="159.50"></text></g><g><title>evaluate_obligation (614,525 samples, 0.18%)</title><rect x="61.9430%" y="133" width="0.1801%" height="15" fill="rgb(224,169,11)"/><text x="62.1930%" y="143.50"></text></g><g><title>implied_outlives_bounds (472,046 samples, 0.14%)</title><rect x="62.1355%" y="133" width="0.1383%" height="15" fill="rgb(250,166,2)"/><text x="62.3855%" y="143.50"></text></g><g><title>param_env (497,858 samples, 0.15%)</title><rect x="62.2957%" y="133" width="0.1459%" height="15" fill="rgb(242,216,29)"/><text x="62.5457%" y="143.50"></text></g><g><title>region_scope_tree (1,003,370 samples, 0.29%)</title><rect x="62.4702%" y="133" width="0.2940%" height="15" fill="rgb(230,116,27)"/><text x="62.7202%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,578,856 samples, 1.93%)</title><rect x="60.9001%" y="149" width="1.9278%" height="15" fill="rgb(228,99,48)"/><text x="61.1501%" y="159.50">c..</text></g><g><title>adt_def (422,124 samples, 0.12%)</title><rect x="63.5968%" y="101" width="0.1237%" height="15" fill="rgb(253,11,6)"/><text x="63.8468%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (420,014 samples, 0.12%)</title><rect x="63.5974%" y="85" width="0.1231%" height="15" fill="rgb(247,143,39)"/><text x="63.8474%" y="95.50"></text></g><g><title>item_attrs (400,674 samples, 0.12%)</title><rect x="63.6031%" y="69" width="0.1174%" height="15" fill="rgb(236,97,10)"/><text x="63.8531%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (399,074 samples, 0.12%)</title><rect x="63.6035%" y="53" width="0.1169%" height="15" fill="rgb(233,208,19)"/><text x="63.8535%" y="63.50"></text></g><g><title>adt_sized_constraint (496,435 samples, 0.15%)</title><rect x="63.5921%" y="117" width="0.1455%" height="15" fill="rgb(216,164,2)"/><text x="63.8421%" y="127.50"></text></g><g><title>evaluate_obligation (1,043,841 samples, 0.31%)</title><rect x="63.4325%" y="133" width="0.3059%" height="15" fill="rgb(220,129,5)"/><text x="63.6825%" y="143.50"></text></g><g><title>param_env (408,317 samples, 0.12%)</title><rect x="63.7953%" y="133" width="0.1196%" height="15" fill="rgb(242,17,10)"/><text x="64.0453%" y="143.50"></text></g><g><title>analysis (217,583,527 samples, 63.76%)</title><rect x="0.2965%" y="197" width="63.7576%" height="15" fill="rgb(242,107,0)"/><text x="0.5465%" y="207.50">analysis</text></g><g><title>type_check_crate (122,190,149 samples, 35.80%)</title><rect x="28.2492%" y="181" width="35.8049%" height="15" fill="rgb(251,28,31)"/><text x="28.4992%" y="191.50">type_check_crate</text></g><g><title>wf_checking (11,166,925 samples, 3.27%)</title><rect x="60.7819%" y="165" width="3.2722%" height="15" fill="rgb(233,223,10)"/><text x="61.0319%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (4,184,743 samples, 1.23%)</title><rect x="62.8278%" y="149" width="1.2262%" height="15" fill="rgb(215,21,27)"/><text x="63.0778%" y="159.50"></text></g><g><title>codegen_crate (405,235 samples, 0.12%)</title><rect x="64.0575%" y="197" width="0.1187%" height="15" fill="rgb(232,23,21)"/><text x="64.3075%" y="207.50"></text></g><g><title>AST_validation (387,184 samples, 0.11%)</title><rect x="64.2524%" y="181" width="0.1135%" height="15" fill="rgb(244,5,23)"/><text x="64.5024%" y="191.50"></text></g><g><title>metadata_register_crate (7,822,068 samples, 2.29%)</title><rect x="88.6480%" y="149" width="2.2921%" height="15" fill="rgb(226,81,46)"/><text x="88.8980%" y="159.50">m..</text></g><g><title>metadata_register_crate (5,291,270 samples, 1.55%)</title><rect x="89.3896%" y="133" width="1.5505%" height="15" fill="rgb(247,70,30)"/><text x="89.6396%" y="143.50"></text></g><g><title>macro_expand_crate (91,156,462 samples, 26.71%)</title><rect x="64.4436%" y="181" width="26.7112%" height="15" fill="rgb(212,68,19)"/><text x="64.6936%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (91,137,331 samples, 26.71%)</title><rect x="64.4492%" y="165" width="26.7056%" height="15" fill="rgb(240,187,13)"/><text x="64.6992%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (732,707 samples, 0.21%)</title><rect x="90.9401%" y="149" width="0.2147%" height="15" fill="rgb(223,113,26)"/><text x="91.1901%" y="159.50"></text></g><g><title>finalize_macro_resolutions (411,384 samples, 0.12%)</title><rect x="91.2229%" y="165" width="0.1205%" height="15" fill="rgb(206,192,2)"/><text x="91.4729%" y="175.50"></text></g><g><title>late_resolve_crate (6,460,893 samples, 1.89%)</title><rect x="91.3435%" y="165" width="1.8932%" height="15" fill="rgb(241,108,4)"/><text x="91.5935%" y="175.50">l..</text></g><g><title>configure_and_expand (99,460,855 samples, 29.14%)</title><rect x="64.1763%" y="197" width="29.1446%" height="15" fill="rgb(247,173,49)"/><text x="64.4263%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,258,632 samples, 2.13%)</title><rect x="91.1939%" y="181" width="2.1270%" height="15" fill="rgb(224,114,35)"/><text x="91.4439%" y="191.50">r..</text></g><g><title>drop_ast (539,726 samples, 0.16%)</title><rect x="93.3209%" y="197" width="0.1582%" height="15" fill="rgb(245,159,27)"/><text x="93.5709%" y="207.50"></text></g><g><title>early_lint_checks (1,404,466 samples, 0.41%)</title><rect x="93.4846%" y="197" width="0.4115%" height="15" fill="rgb(245,172,44)"/><text x="93.7346%" y="207.50"></text></g><g><title>free_global_ctxt (4,962,876 samples, 1.45%)</title><rect x="93.8961%" y="197" width="1.4543%" height="15" fill="rgb(236,23,11)"/><text x="94.1461%" y="207.50"></text></g><g><title>generate_crate_metadata (4,944,545 samples, 1.45%)</title><rect x="95.3504%" y="197" width="1.4489%" height="15" fill="rgb(205,117,38)"/><text x="95.6004%" y="207.50"></text></g><g><title>hir_lowering (8,116,401 samples, 2.38%)</title><rect x="96.7993%" y="197" width="2.3783%" height="15" fill="rgb(237,72,25)"/><text x="97.0493%" y="207.50">hi..</text></g><g><title>parse_crate (680,697 samples, 0.20%)</title><rect x="99.1973%" y="197" width="0.1995%" height="15" fill="rgb(244,70,9)"/><text x="99.4473%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,181,733 samples, 0.35%)</title><rect x="99.4603%" y="197" width="0.3463%" height="15" fill="rgb(217,125,39)"/><text x="99.7103%" y="207.50"></text></g><g><title>all (341,266,943 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (341,266,943 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (538,686 samples, 0.16%)</title><rect x="99.8422%" y="197" width="0.1578%" height="15" fill="rgb(221,13,13)"/><text x="100.0922%" y="207.50"></text></g></svg></svg>