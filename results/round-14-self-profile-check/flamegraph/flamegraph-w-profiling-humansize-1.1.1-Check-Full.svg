<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (161,262 samples, 0.12%)</title><rect x="10.1162%" y="69" width="0.1243%" height="15" fill="rgb(227,0,7)"/><text x="10.3662%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (157,062 samples, 0.12%)</title><rect x="10.1195%" y="53" width="0.1211%" height="15" fill="rgb(217,0,24)"/><text x="10.3695%" y="63.50"></text></g><g><title>codegen_fn_attrs (231,532 samples, 0.18%)</title><rect x="10.0730%" y="85" width="0.1785%" height="15" fill="rgb(221,193,54)"/><text x="10.3230%" y="95.50"></text></g><g><title>is_copy_raw (391,033 samples, 0.30%)</title><rect x="11.9617%" y="69" width="0.3015%" height="15" fill="rgb(248,212,6)"/><text x="12.2117%" y="79.50"></text></g><g><title>evaluate_obligation (336,323 samples, 0.26%)</title><rect x="12.0039%" y="53" width="0.2593%" height="15" fill="rgb(208,68,35)"/><text x="12.2539%" y="63.50"></text></g><g><title>needs_drop_raw (356,456 samples, 0.27%)</title><rect x="12.2672%" y="69" width="0.2748%" height="15" fill="rgb(232,128,0)"/><text x="12.5172%" y="79.50"></text></g><g><title>is_copy_raw (204,774 samples, 0.16%)</title><rect x="12.3842%" y="53" width="0.1579%" height="15" fill="rgb(207,160,47)"/><text x="12.6342%" y="63.50"></text></g><g><title>evaluate_obligation (174,793 samples, 0.13%)</title><rect x="12.4073%" y="37" width="0.1348%" height="15" fill="rgb(228,23,34)"/><text x="12.6573%" y="47.50"></text></g><g><title>thir_body (1,008,563 samples, 0.78%)</title><rect x="12.6057%" y="69" width="0.7775%" height="15" fill="rgb(218,30,26)"/><text x="12.8557%" y="79.50"></text></g><g><title>mir_const (5,179,598 samples, 3.99%)</title><rect x="9.3935%" y="117" width="3.9931%" height="15" fill="rgb(220,122,19)"/><text x="9.6435%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (4,598,774 samples, 3.55%)</title><rect x="9.8412%" y="101" width="3.5453%" height="15" fill="rgb(250,228,42)"/><text x="10.0912%" y="111.50">unsa..</text></g><g><title>mir_built (4,066,648 samples, 3.14%)</title><rect x="10.2515%" y="85" width="3.1351%" height="15" fill="rgb(240,193,28)"/><text x="10.5015%" y="95.50">mir..</text></g><g><title>mir_const (409,074 samples, 0.32%)</title><rect x="13.6459%" y="101" width="0.3154%" height="15" fill="rgb(216,20,37)"/><text x="13.8959%" y="111.50"></text></g><g><title>unsafety_check_result (312,543 samples, 0.24%)</title><rect x="13.7203%" y="85" width="0.2409%" height="15" fill="rgb(206,188,39)"/><text x="13.9703%" y="95.50"></text></g><g><title>mir_built (260,683 samples, 0.20%)</title><rect x="13.7603%" y="69" width="0.2010%" height="15" fill="rgb(217,207,13)"/><text x="14.0103%" y="79.50"></text></g><g><title>mir_promoted (6,701,634 samples, 5.17%)</title><rect x="8.8053%" y="133" width="5.1665%" height="15" fill="rgb(231,73,38)"/><text x="9.0553%" y="143.50">mir_pr..</text></g><g><title>mir_const_qualif (759,178 samples, 0.59%)</title><rect x="13.3866%" y="117" width="0.5853%" height="15" fill="rgb(225,20,46)"/><text x="13.6366%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (186,792 samples, 0.14%)</title><rect x="13.9726%" y="133" width="0.1440%" height="15" fill="rgb(210,31,41)"/><text x="14.2226%" y="143.50"></text></g><g><title>type_op_prove_predicate (793,130 samples, 0.61%)</title><rect x="14.2121%" y="133" width="0.6114%" height="15" fill="rgb(221,200,47)"/><text x="14.4621%" y="143.50"></text></g><g><title>MIR_borrow_checking (17,698,796 samples, 13.64%)</title><rect x="1.1852%" y="165" width="13.6446%" height="15" fill="rgb(226,26,5)"/><text x="1.4352%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (17,644,526 samples, 13.60%)</title><rect x="1.2270%" y="149" width="13.6027%" height="15" fill="rgb(249,33,26)"/><text x="1.4770%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (231,863 samples, 0.18%)</title><rect x="14.8297%" y="165" width="0.1788%" height="15" fill="rgb(235,183,28)"/><text x="15.0797%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (198,392 samples, 0.15%)</title><rect x="14.8555%" y="149" width="0.1529%" height="15" fill="rgb(221,5,38)"/><text x="15.1055%" y="159.50"></text></g><g><title>hir_module_items (253,863 samples, 0.20%)</title><rect x="15.0085%" y="165" width="0.1957%" height="15" fill="rgb(247,18,42)"/><text x="15.2585%" y="175.50"></text></g><g><title>should_inherit_track_caller (218,692 samples, 0.17%)</title><rect x="15.7335%" y="117" width="0.1686%" height="15" fill="rgb(241,131,45)"/><text x="15.9835%" y="127.50"></text></g><g><title>codegen_fn_attrs (469,505 samples, 0.36%)</title><rect x="15.5636%" y="133" width="0.3620%" height="15" fill="rgb(249,31,29)"/><text x="15.8136%" y="143.50"></text></g><g><title>check_mod_attrs (899,551 samples, 0.69%)</title><rect x="15.2323%" y="149" width="0.6935%" height="15" fill="rgb(225,111,53)"/><text x="15.4823%" y="159.50"></text></g><g><title>check_mod_const_bodies (158,562 samples, 0.12%)</title><rect x="15.9258%" y="149" width="0.1222%" height="15" fill="rgb(238,160,17)"/><text x="16.1758%" y="159.50"></text></g><g><title>lint_levels (288,963 samples, 0.22%)</title><rect x="16.3840%" y="133" width="0.2228%" height="15" fill="rgb(214,148,48)"/><text x="16.6340%" y="143.50"></text></g><g><title>lookup_deprecation_entry (201,101 samples, 0.16%)</title><rect x="16.6068%" y="133" width="0.1550%" height="15" fill="rgb(232,36,49)"/><text x="16.8568%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (924,960 samples, 0.71%)</title><rect x="16.1468%" y="149" width="0.7131%" height="15" fill="rgb(209,103,24)"/><text x="16.3968%" y="159.50"></text></g><g><title>misc_checking_1 (2,209,954 samples, 1.70%)</title><rect x="15.2046%" y="165" width="1.7037%" height="15" fill="rgb(229,88,8)"/><text x="15.4546%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (325,804 samples, 0.25%)</title><rect x="16.9095%" y="149" width="0.2512%" height="15" fill="rgb(213,181,19)"/><text x="17.1595%" y="159.50"></text></g><g><title>check_mod_liveness (244,133 samples, 0.19%)</title><rect x="16.9724%" y="133" width="0.1882%" height="15" fill="rgb(254,191,54)"/><text x="17.2224%" y="143.50"></text></g><g><title>misc_checking_2 (772,139 samples, 0.60%)</title><rect x="16.9083%" y="165" width="0.5953%" height="15" fill="rgb(241,83,37)"/><text x="17.1583%" y="175.50"></text></g><g><title>match_checking (444,825 samples, 0.34%)</title><rect x="17.1606%" y="149" width="0.3429%" height="15" fill="rgb(233,36,39)"/><text x="17.4106%" y="159.50"></text></g><g><title>check_match (428,385 samples, 0.33%)</title><rect x="17.1733%" y="133" width="0.3303%" height="15" fill="rgb(226,3,54)"/><text x="17.4233%" y="143.50"></text></g><g><title>death_checking (307,114 samples, 0.24%)</title><rect x="17.6032%" y="149" width="0.2368%" height="15" fill="rgb(245,192,40)"/><text x="17.8532%" y="159.50"></text></g><g><title>eval_to_allocation_raw (224,743 samples, 0.17%)</title><rect x="18.3795%" y="117" width="0.1733%" height="15" fill="rgb(238,167,29)"/><text x="18.6295%" y="127.50"></text></g><g><title>eval_to_allocation_raw (218,473 samples, 0.17%)</title><rect x="18.3843%" y="101" width="0.1684%" height="15" fill="rgb(232,182,51)"/><text x="18.6343%" y="111.50"></text></g><g><title>eval_to_const_value_raw (186,213 samples, 0.14%)</title><rect x="18.5527%" y="117" width="0.1436%" height="15" fill="rgb(231,60,39)"/><text x="18.8027%" y="127.50"></text></g><g><title>eval_to_const_value_raw (183,403 samples, 0.14%)</title><rect x="18.5549%" y="101" width="0.1414%" height="15" fill="rgb(208,69,12)"/><text x="18.8049%" y="111.50"></text></g><g><title>eval_to_allocation_raw (178,893 samples, 0.14%)</title><rect x="18.5584%" y="85" width="0.1379%" height="15" fill="rgb(235,93,37)"/><text x="18.8084%" y="95.50"></text></g><g><title>crate_lints (2,246,085 samples, 1.73%)</title><rect x="17.8412%" y="133" width="1.7316%" height="15" fill="rgb(213,116,39)"/><text x="18.0912%" y="143.50"></text></g><g><title>type_of (1,067,050 samples, 0.82%)</title><rect x="18.7501%" y="117" width="0.8226%" height="15" fill="rgb(222,207,29)"/><text x="19.0001%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (836,908 samples, 0.65%)</title><rect x="18.9276%" y="101" width="0.6452%" height="15" fill="rgb(206,96,30)"/><text x="19.1776%" y="111.50"></text></g><g><title>lint_checking (2,700,430 samples, 2.08%)</title><rect x="17.8400%" y="149" width="2.0818%" height="15" fill="rgb(218,138,4)"/><text x="18.0900%" y="159.50">l..</text></g><g><title>module_lints (452,805 samples, 0.35%)</title><rect x="19.5728%" y="133" width="0.3491%" height="15" fill="rgb(250,191,14)"/><text x="19.8228%" y="143.50"></text></g><g><title>lint_mod (449,735 samples, 0.35%)</title><rect x="19.5751%" y="117" width="0.3467%" height="15" fill="rgb(239,60,40)"/><text x="19.8251%" y="127.50"></text></g><g><title>privacy_access_levels (160,112 samples, 0.12%)</title><rect x="19.9218%" y="149" width="0.1234%" height="15" fill="rgb(206,27,48)"/><text x="20.1718%" y="159.50"></text></g><g><title>privacy_checking_modules (619,487 samples, 0.48%)</title><rect x="20.0453%" y="149" width="0.4776%" height="15" fill="rgb(225,35,8)"/><text x="20.2953%" y="159.50"></text></g><g><title>check_mod_privacy (617,117 samples, 0.48%)</title><rect x="20.0471%" y="133" width="0.4758%" height="15" fill="rgb(250,213,24)"/><text x="20.2971%" y="143.50"></text></g><g><title>misc_checking_3 (3,933,354 samples, 3.03%)</title><rect x="17.5036%" y="165" width="3.0323%" height="15" fill="rgb(247,123,22)"/><text x="17.7536%" y="175.50">mis..</text></g><g><title>impl_trait_ref (324,085 samples, 0.25%)</title><rect x="20.8785%" y="69" width="0.2498%" height="15" fill="rgb(231,138,38)"/><text x="21.1285%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (276,794 samples, 0.21%)</title><rect x="20.9150%" y="53" width="0.2134%" height="15" fill="rgb(231,145,46)"/><text x="21.1650%" y="63.50"></text></g><g><title>adt_destructor (735,778 samples, 0.57%)</title><rect x="20.6373%" y="117" width="0.5672%" height="15" fill="rgb(251,118,11)"/><text x="20.8873%" y="127.50"></text></g><g><title>coherent_trait (722,948 samples, 0.56%)</title><rect x="20.6472%" y="101" width="0.5573%" height="15" fill="rgb(217,147,25)"/><text x="20.8972%" y="111.50"></text></g><g><title>specialization_graph_of (720,368 samples, 0.56%)</title><rect x="20.6492%" y="85" width="0.5554%" height="15" fill="rgb(247,81,37)"/><text x="20.8992%" y="95.50"></text></g><g><title>param_env (189,553 samples, 0.15%)</title><rect x="21.2046%" y="117" width="0.1461%" height="15" fill="rgb(209,12,38)"/><text x="21.4546%" y="127.50"></text></g><g><title>impl_parent (4,597,283 samples, 3.54%)</title><rect x="27.2410%" y="101" width="3.5442%" height="15" fill="rgb(227,1,9)"/><text x="27.4910%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (2,167,443 samples, 1.67%)</title><rect x="29.1142%" y="85" width="1.6709%" height="15" fill="rgb(248,47,43)"/><text x="29.3642%" y="95.50"></text></g><g><title>impl_trait_ref (10,317,931 samples, 7.95%)</title><rect x="30.7852%" y="101" width="7.9544%" height="15" fill="rgb(221,10,30)"/><text x="31.0352%" y="111.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (8,323,957 samples, 6.42%)</title><rect x="32.3224%" y="85" width="6.4172%" height="15" fill="rgb(210,229,1)"/><text x="32.5724%" y="95.50">metadata..</text></g><g><title>coherent_trait (25,057,298 samples, 19.32%)</title><rect x="20.5892%" y="133" width="19.3174%" height="15" fill="rgb(222,148,37)"/><text x="20.8392%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (24,069,527 samples, 18.56%)</title><rect x="21.3507%" y="117" width="18.5559%" height="15" fill="rgb(234,67,33)"/><text x="21.6007%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,510,477 samples, 1.16%)</title><rect x="38.7422%" y="101" width="1.1645%" height="15" fill="rgb(247,98,35)"/><text x="38.9922%" y="111.50"></text></g><g><title>implementations_of_trait (338,553 samples, 0.26%)</title><rect x="39.6456%" y="85" width="0.2610%" height="15" fill="rgb(247,138,52)"/><text x="39.8956%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (277,793 samples, 0.21%)</title><rect x="39.6925%" y="69" width="0.2142%" height="15" fill="rgb(213,79,30)"/><text x="39.9425%" y="79.50"></text></g><g><title>coherence_checking (25,161,480 samples, 19.40%)</title><rect x="20.5647%" y="149" width="19.3978%" height="15" fill="rgb(246,177,23)"/><text x="20.8147%" y="159.50">coherence_checking</text></g><g><title>associated_item (703,856 samples, 0.54%)</title><rect x="56.0407%" y="85" width="0.5426%" height="15" fill="rgb(230,62,27)"/><text x="56.2907%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (551,185 samples, 0.42%)</title><rect x="56.1584%" y="69" width="0.4249%" height="15" fill="rgb(216,154,8)"/><text x="56.4084%" y="79.50"></text></g><g><title>associated_items (965,290 samples, 0.74%)</title><rect x="55.8630%" y="101" width="0.7442%" height="15" fill="rgb(244,35,45)"/><text x="56.1130%" y="111.50"></text></g><g><title>adt_dtorck_constraint (144,901 samples, 0.11%)</title><rect x="56.7695%" y="69" width="0.1117%" height="15" fill="rgb(251,115,12)"/><text x="57.0195%" y="79.50"></text></g><g><title>dropck_outlives (307,363 samples, 0.24%)</title><rect x="56.6551%" y="101" width="0.2370%" height="15" fill="rgb(240,54,50)"/><text x="56.9051%" y="111.50"></text></g><g><title>adt_dtorck_constraint (233,902 samples, 0.18%)</title><rect x="56.7118%" y="85" width="0.1803%" height="15" fill="rgb(233,84,52)"/><text x="56.9618%" y="95.50"></text></g><g><title>generics_of (1,165,203 samples, 0.90%)</title><rect x="58.3765%" y="85" width="0.8983%" height="15" fill="rgb(207,117,47)"/><text x="58.6265%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (803,318 samples, 0.62%)</title><rect x="58.6555%" y="69" width="0.6193%" height="15" fill="rgb(249,43,39)"/><text x="58.9055%" y="79.50"></text></g><g><title>impl_trait_ref (203,771 samples, 0.16%)</title><rect x="59.3121%" y="85" width="0.1571%" height="15" fill="rgb(209,38,44)"/><text x="59.5621%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (171,871 samples, 0.13%)</title><rect x="59.3367%" y="69" width="0.1325%" height="15" fill="rgb(236,212,23)"/><text x="59.5867%" y="79.50"></text></g><g><title>predicates_of (225,000 samples, 0.17%)</title><rect x="59.4812%" y="85" width="0.1735%" height="15" fill="rgb(242,79,21)"/><text x="59.7312%" y="95.50"></text></g><g><title>predicates_defined_on (132,090 samples, 0.10%)</title><rect x="59.5529%" y="69" width="0.1018%" height="15" fill="rgb(211,96,35)"/><text x="59.8029%" y="79.50"></text></g><g><title>specializes (326,114 samples, 0.25%)</title><rect x="59.6547%" y="85" width="0.2514%" height="15" fill="rgb(253,215,40)"/><text x="59.9047%" y="95.50"></text></g><g><title>param_env (210,783 samples, 0.16%)</title><rect x="59.7436%" y="69" width="0.1625%" height="15" fill="rgb(211,81,21)"/><text x="59.9936%" y="79.50"></text></g><g><title>trait_impls_of (339,964 samples, 0.26%)</title><rect x="59.9143%" y="85" width="0.2621%" height="15" fill="rgb(208,190,38)"/><text x="60.1643%" y="95.50"></text></g><g><title>evaluate_obligation (4,276,604 samples, 3.30%)</title><rect x="56.8921%" y="101" width="3.2970%" height="15" fill="rgb(235,213,38)"/><text x="57.1421%" y="111.50">eva..</text></g><g><title>method_autoderef_steps (162,162 samples, 0.13%)</title><rect x="60.6261%" y="101" width="0.1250%" height="15" fill="rgb(237,122,38)"/><text x="60.8761%" y="111.50"></text></g><g><title>object_safety_violations (220,273 samples, 0.17%)</title><rect x="60.7511%" y="101" width="0.1698%" height="15" fill="rgb(244,218,35)"/><text x="61.0011%" y="111.50"></text></g><g><title>predicates_of (296,853 samples, 0.23%)</title><rect x="60.9728%" y="101" width="0.2289%" height="15" fill="rgb(240,68,47)"/><text x="61.2228%" y="111.50"></text></g><g><title>predicates_defined_on (202,682 samples, 0.16%)</title><rect x="61.0454%" y="85" width="0.1563%" height="15" fill="rgb(210,16,53)"/><text x="61.2954%" y="95.50"></text></g><g><title>item_bodies_checking (27,661,918 samples, 21.33%)</title><rect x="39.9858%" y="149" width="21.3254%" height="15" fill="rgb(235,124,12)"/><text x="40.2358%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (27,658,828 samples, 21.32%)</title><rect x="39.9881%" y="133" width="21.3230%" height="15" fill="rgb(224,169,11)"/><text x="40.2381%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (27,624,408 samples, 21.30%)</title><rect x="40.0147%" y="117" width="21.2965%" height="15" fill="rgb(250,166,2)"/><text x="40.2647%" y="127.50">typeck</text></g><g><title>item_types_checking (1,091,602 samples, 0.84%)</title><rect x="61.3112%" y="149" width="0.8415%" height="15" fill="rgb(242,216,29)"/><text x="61.5612%" y="159.50"></text></g><g><title>check_mod_item_types (1,088,052 samples, 0.84%)</title><rect x="61.3139%" y="133" width="0.8388%" height="15" fill="rgb(230,116,27)"/><text x="61.5639%" y="143.50"></text></g><g><title>typeck (553,105 samples, 0.43%)</title><rect x="61.7263%" y="117" width="0.4264%" height="15" fill="rgb(228,99,48)"/><text x="61.9763%" y="127.50"></text></g><g><title>fn_sig (294,112 samples, 0.23%)</title><rect x="62.4646%" y="117" width="0.2267%" height="15" fill="rgb(253,11,6)"/><text x="62.7146%" y="127.50"></text></g><g><title>named_region_map (524,005 samples, 0.40%)</title><rect x="62.8057%" y="101" width="0.4040%" height="15" fill="rgb(247,143,39)"/><text x="63.0557%" y="111.50"></text></g><g><title>resolve_lifetimes (494,655 samples, 0.38%)</title><rect x="62.8283%" y="85" width="0.3813%" height="15" fill="rgb(236,97,10)"/><text x="63.0783%" y="95.50"></text></g><g><title>generics_of (699,238 samples, 0.54%)</title><rect x="62.6913%" y="117" width="0.5391%" height="15" fill="rgb(233,208,19)"/><text x="62.9413%" y="127.50"></text></g><g><title>explicit_predicates_of (303,033 samples, 0.23%)</title><rect x="63.4245%" y="85" width="0.2336%" height="15" fill="rgb(216,164,2)"/><text x="63.6745%" y="95.50"></text></g><g><title>predicates_of (603,867 samples, 0.47%)</title><rect x="63.2870%" y="117" width="0.4655%" height="15" fill="rgb(220,129,5)"/><text x="63.5370%" y="127.50"></text></g><g><title>predicates_defined_on (532,425 samples, 0.41%)</title><rect x="63.3421%" y="101" width="0.4105%" height="15" fill="rgb(242,17,10)"/><text x="63.5921%" y="111.50"></text></g><g><title>type_collecting (2,399,907 samples, 1.85%)</title><rect x="62.1533%" y="149" width="1.8502%" height="15" fill="rgb(242,107,0)"/><text x="62.4033%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,384,897 samples, 1.84%)</title><rect x="62.1649%" y="133" width="1.8386%" height="15" fill="rgb(251,28,31)"/><text x="62.4149%" y="143.50">c..</text></g><g><title>type_of (276,642 samples, 0.21%)</title><rect x="63.7902%" y="117" width="0.2133%" height="15" fill="rgb(233,223,10)"/><text x="64.0402%" y="127.50"></text></g><g><title>evaluate_obligation (551,485 samples, 0.43%)</title><rect x="65.0768%" y="117" width="0.4252%" height="15" fill="rgb(215,21,27)"/><text x="65.3268%" y="127.50"></text></g><g><title>implied_outlives_bounds (197,642 samples, 0.15%)</title><rect x="65.5020%" y="117" width="0.1524%" height="15" fill="rgb(232,23,21)"/><text x="65.7520%" y="127.50"></text></g><g><title>param_env (175,855 samples, 0.14%)</title><rect x="65.6543%" y="117" width="0.1356%" height="15" fill="rgb(244,5,23)"/><text x="65.9043%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,758,673 samples, 2.13%)</title><rect x="64.1550%" y="133" width="2.1267%" height="15" fill="rgb(226,81,46)"/><text x="64.4050%" y="143.50">c..</text></g><g><title>region_scope_tree (623,516 samples, 0.48%)</title><rect x="65.8011%" y="117" width="0.4807%" height="15" fill="rgb(247,70,30)"/><text x="66.0511%" y="127.50"></text></g><g><title>evaluate_obligation (575,616 samples, 0.44%)</title><rect x="67.1775%" y="117" width="0.4438%" height="15" fill="rgb(212,68,19)"/><text x="67.4275%" y="127.50"></text></g><g><title>param_env (244,933 samples, 0.19%)</title><rect x="67.7091%" y="117" width="0.1888%" height="15" fill="rgb(240,187,13)"/><text x="67.9591%" y="127.50"></text></g><g><title>check_item_well_formed (2,295,413 samples, 1.77%)</title><rect x="66.2818%" y="133" width="1.7696%" height="15" fill="rgb(223,113,26)"/><text x="66.5318%" y="143.50"></text></g><g><title>adt_def (186,682 samples, 0.14%)</title><rect x="68.2056%" y="85" width="0.1439%" height="15" fill="rgb(206,192,2)"/><text x="68.4556%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (177,862 samples, 0.14%)</title><rect x="68.2124%" y="69" width="0.1371%" height="15" fill="rgb(241,108,4)"/><text x="68.4624%" y="79.50"></text></g><g><title>item_attrs (163,842 samples, 0.13%)</title><rect x="68.2232%" y="53" width="0.1263%" height="15" fill="rgb(247,173,49)"/><text x="68.4732%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (162,492 samples, 0.13%)</title><rect x="68.2243%" y="37" width="0.1253%" height="15" fill="rgb(224,114,35)"/><text x="68.4743%" y="47.50"></text></g><g><title>evaluate_obligation (351,324 samples, 0.27%)</title><rect x="68.1571%" y="117" width="0.2708%" height="15" fill="rgb(245,159,27)"/><text x="68.4071%" y="127.50"></text></g><g><title>adt_sized_constraint (294,753 samples, 0.23%)</title><rect x="68.2007%" y="101" width="0.2272%" height="15" fill="rgb(245,172,44)"/><text x="68.4507%" y="111.50"></text></g><g><title>analysis (87,984,099 samples, 67.83%)</title><rect x="0.6790%" y="181" width="67.8297%" height="15" fill="rgb(236,23,11)"/><text x="0.9290%" y="191.50">analysis</text></g><g><title>type_check_crate (62,227,043 samples, 47.97%)</title><rect x="20.5359%" y="165" width="47.9728%" height="15" fill="rgb(205,117,38)"/><text x="20.7859%" y="175.50">type_check_crate</text></g><g><title>wf_checking (5,840,716 samples, 4.50%)</title><rect x="64.0059%" y="149" width="4.5028%" height="15" fill="rgb(237,72,25)"/><text x="64.2559%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (593,157 samples, 0.46%)</title><rect x="68.0514%" y="133" width="0.4573%" height="15" fill="rgb(244,70,9)"/><text x="68.3014%" y="143.50"></text></g><g><title>codegen_crate (525,266 samples, 0.40%)</title><rect x="68.5180%" y="181" width="0.4049%" height="15" fill="rgb(217,125,39)"/><text x="68.7680%" y="191.50"></text></g><g><title>AST_validation (160,662 samples, 0.12%)</title><rect x="69.1011%" y="165" width="0.1239%" height="15" fill="rgb(235,36,10)"/><text x="69.3511%" y="175.50"></text></g><g><title>metadata_load_macro (400,713 samples, 0.31%)</title><rect x="82.2219%" y="133" width="0.3089%" height="15" fill="rgb(251,123,47)"/><text x="82.4719%" y="143.50"></text></g><g><title>macro_expand_crate (19,684,389 samples, 15.18%)</title><rect x="69.3858%" y="165" width="15.1753%" height="15" fill="rgb(221,13,13)"/><text x="69.6358%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (19,656,999 samples, 15.15%)</title><rect x="69.4069%" y="149" width="15.1542%" height="15" fill="rgb(238,131,9)"/><text x="69.6569%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,633,580 samples, 2.03%)</title><rect x="82.5308%" y="133" width="2.0303%" height="15" fill="rgb(211,50,8)"/><text x="82.7808%" y="143.50">m..</text></g><g><title>metadata_register_crate (988,190 samples, 0.76%)</title><rect x="83.7993%" y="117" width="0.7618%" height="15" fill="rgb(245,182,24)"/><text x="84.0493%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (155,412 samples, 0.12%)</title><rect x="84.5648%" y="165" width="0.1198%" height="15" fill="rgb(242,14,37)"/><text x="84.8148%" y="175.50"></text></g><g><title>finalize_macro_resolutions (358,294 samples, 0.28%)</title><rect x="84.7065%" y="149" width="0.2762%" height="15" fill="rgb(246,228,12)"/><text x="84.9565%" y="159.50"></text></g><g><title>late_resolve_crate (4,230,086 samples, 3.26%)</title><rect x="84.9827%" y="149" width="3.2611%" height="15" fill="rgb(213,55,15)"/><text x="85.2327%" y="159.50">lat..</text></g><g><title>configure_and_expand (25,257,432 samples, 19.47%)</title><rect x="68.9229%" y="181" width="19.4717%" height="15" fill="rgb(209,9,3)"/><text x="69.1729%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,812,453 samples, 3.71%)</title><rect x="84.6846%" y="165" width="3.7101%" height="15" fill="rgb(230,59,30)"/><text x="84.9346%" y="175.50">reso..</text></g><g><title>drop_ast (283,763 samples, 0.22%)</title><rect x="88.3946%" y="181" width="0.2188%" height="15" fill="rgb(209,121,21)"/><text x="88.6446%" y="191.50"></text></g><g><title>early_lint_checks (753,469 samples, 0.58%)</title><rect x="88.6244%" y="181" width="0.5809%" height="15" fill="rgb(220,109,13)"/><text x="88.8744%" y="191.50"></text></g><g><title>free_global_ctxt (3,536,149 samples, 2.73%)</title><rect x="89.2053%" y="181" width="2.7261%" height="15" fill="rgb(232,18,1)"/><text x="89.4553%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (803,359 samples, 0.62%)</title><rect x="91.9314%" y="181" width="0.6193%" height="15" fill="rgb(215,41,42)"/><text x="92.1814%" y="191.50"></text></g><g><title>hir_lowering (5,951,147 samples, 4.59%)</title><rect x="92.5508%" y="181" width="4.5879%" height="15" fill="rgb(224,123,36)"/><text x="92.8008%" y="191.50">hir_l..</text></g><g><title>parse_crate (2,116,834 samples, 1.63%)</title><rect x="97.1791%" y="181" width="1.6319%" height="15" fill="rgb(240,125,3)"/><text x="97.4291%" y="191.50"></text></g><g><title>prepare_outputs (316,873 samples, 0.24%)</title><rect x="98.8185%" y="181" width="0.2443%" height="15" fill="rgb(205,98,50)"/><text x="99.0685%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (798,879 samples, 0.62%)</title><rect x="99.0628%" y="181" width="0.6159%" height="15" fill="rgb(205,185,37)"/><text x="99.3128%" y="191.50"></text></g><g><title>setup_global_ctxt (133,761 samples, 0.10%)</title><rect x="99.6880%" y="181" width="0.1031%" height="15" fill="rgb(238,207,15)"/><text x="99.9380%" y="191.50"></text></g><g><title>all (129,713,284 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (129,713,284 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (270,913 samples, 0.21%)</title><rect x="99.7911%" y="181" width="0.2089%" height="15" fill="rgb(207,46,11)"/><text x="100.0411%" y="191.50"></text></g></svg></svg>