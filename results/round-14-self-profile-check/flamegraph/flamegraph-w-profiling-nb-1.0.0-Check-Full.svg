<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>eval_to_const_value_raw (120,412 samples, 0.25%)</title><rect x="9.0810%" y="69" width="0.2545%" height="15" fill="rgb(227,0,7)"/><text x="9.3310%" y="79.50"></text></g><g><title>eval_to_const_value_raw (110,682 samples, 0.23%)</title><rect x="9.1015%" y="53" width="0.2340%" height="15" fill="rgb(217,0,24)"/><text x="9.3515%" y="63.50"></text></g><g><title>eval_to_allocation_raw (102,872 samples, 0.22%)</title><rect x="9.1180%" y="37" width="0.2175%" height="15" fill="rgb(221,193,54)"/><text x="9.3680%" y="47.50"></text></g><g><title>is_copy_raw (58,181 samples, 0.12%)</title><rect x="9.3385%" y="69" width="0.1230%" height="15" fill="rgb(248,212,6)"/><text x="9.5885%" y="79.50"></text></g><g><title>needs_drop_raw (123,452 samples, 0.26%)</title><rect x="9.4880%" y="69" width="0.2610%" height="15" fill="rgb(208,68,35)"/><text x="9.7380%" y="79.50"></text></g><g><title>is_copy_raw (110,202 samples, 0.23%)</title><rect x="9.5160%" y="53" width="0.2330%" height="15" fill="rgb(232,128,0)"/><text x="9.7660%" y="63.50"></text></g><g><title>evaluate_obligation (88,951 samples, 0.19%)</title><rect x="9.5609%" y="37" width="0.1880%" height="15" fill="rgb(207,160,47)"/><text x="9.8109%" y="47.50"></text></g><g><title>resolve_instance (71,081 samples, 0.15%)</title><rect x="9.8002%" y="69" width="0.1503%" height="15" fill="rgb(228,23,34)"/><text x="10.0502%" y="79.50"></text></g><g><title>thir_body (208,962 samples, 0.44%)</title><rect x="9.9632%" y="69" width="0.4417%" height="15" fill="rgb(218,30,26)"/><text x="10.2132%" y="79.50"></text></g><g><title>mir_const (1,596,968 samples, 3.38%)</title><rect x="7.0353%" y="117" width="3.3759%" height="15" fill="rgb(220,122,19)"/><text x="7.2853%" y="127.50">mir..</text></g><g><title>unsafety_check_result (1,373,216 samples, 2.90%)</title><rect x="7.5083%" y="101" width="2.9029%" height="15" fill="rgb(250,228,42)"/><text x="7.7583%" y="111.50">un..</text></g><g><title>mir_built (1,235,044 samples, 2.61%)</title><rect x="7.8004%" y="85" width="2.6108%" height="15" fill="rgb(240,193,28)"/><text x="8.0504%" y="95.50">mi..</text></g><g><title>mir_promoted (1,816,231 samples, 3.84%)</title><rect x="6.5951%" y="133" width="3.8394%" height="15" fill="rgb(216,20,37)"/><text x="6.8451%" y="143.50">mir_..</text></g><g><title>type_op_normalize_fn_sig (84,431 samples, 0.18%)</title><rect x="10.4345%" y="133" width="0.1785%" height="15" fill="rgb(206,188,39)"/><text x="10.6845%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,333,909 samples, 9.16%)</title><rect x="2.0259%" y="165" width="9.1616%" height="15" fill="rgb(217,207,13)"/><text x="2.2759%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (4,315,578 samples, 9.12%)</title><rect x="2.0647%" y="149" width="9.1229%" height="15" fill="rgb(231,73,38)"/><text x="2.3147%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (271,804 samples, 0.57%)</title><rect x="10.6129%" y="133" width="0.5746%" height="15" fill="rgb(225,20,46)"/><text x="10.8629%" y="143.50"></text></g><g><title>hir_module_items (150,682 samples, 0.32%)</title><rect x="11.1977%" y="165" width="0.3185%" height="15" fill="rgb(210,31,41)"/><text x="11.4477%" y="175.50"></text></g><g><title>associated_item (68,911 samples, 0.15%)</title><rect x="12.1667%" y="101" width="0.1457%" height="15" fill="rgb(221,200,47)"/><text x="12.4167%" y="111.50"></text></g><g><title>get_lang_items (62,841 samples, 0.13%)</title><rect x="12.4202%" y="85" width="0.1328%" height="15" fill="rgb(226,26,5)"/><text x="12.6702%" y="95.50"></text></g><g><title>item_attrs (103,201 samples, 0.22%)</title><rect x="12.5530%" y="85" width="0.2182%" height="15" fill="rgb(249,33,26)"/><text x="12.8030%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (90,640 samples, 0.19%)</title><rect x="12.5796%" y="69" width="0.1916%" height="15" fill="rgb(235,183,28)"/><text x="12.8296%" y="79.50"></text></g><g><title>codegen_fn_attrs (297,144 samples, 0.63%)</title><rect x="12.3123%" y="101" width="0.6281%" height="15" fill="rgb(221,5,38)"/><text x="12.5623%" y="111.50"></text></g><g><title>codegen_fn_attrs (454,105 samples, 0.96%)</title><rect x="11.9895%" y="133" width="0.9599%" height="15" fill="rgb(247,18,42)"/><text x="12.2395%" y="143.50"></text></g><g><title>should_inherit_track_caller (403,895 samples, 0.85%)</title><rect x="12.0956%" y="117" width="0.8538%" height="15" fill="rgb(241,131,45)"/><text x="12.3456%" y="127.50"></text></g><g><title>check_mod_attrs (643,787 samples, 1.36%)</title><rect x="11.5896%" y="149" width="1.3609%" height="15" fill="rgb(249,31,29)"/><text x="11.8396%" y="159.50"></text></g><g><title>check_mod_const_bodies (75,380 samples, 0.16%)</title><rect x="12.9506%" y="149" width="0.1593%" height="15" fill="rgb(225,111,53)"/><text x="13.2006%" y="159.50"></text></g><g><title>lookup_deprecation_entry (135,782 samples, 0.29%)</title><rect x="13.5173%" y="133" width="0.2870%" height="15" fill="rgb(238,160,17)"/><text x="13.7673%" y="143.50"></text></g><g><title>stability_index (67,111 samples, 0.14%)</title><rect x="13.6625%" y="117" width="0.1419%" height="15" fill="rgb(214,148,48)"/><text x="13.9125%" y="127.50"></text></g><g><title>lookup_stability (61,190 samples, 0.13%)</title><rect x="13.8043%" y="133" width="0.1294%" height="15" fill="rgb(232,36,49)"/><text x="14.0543%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (376,255 samples, 0.80%)</title><rect x="13.2065%" y="149" width="0.7954%" height="15" fill="rgb(209,103,24)"/><text x="13.4565%" y="159.50"></text></g><g><title>misc_checking_1 (1,219,044 samples, 2.58%)</title><rect x="11.5171%" y="165" width="2.5770%" height="15" fill="rgb(229,88,8)"/><text x="11.7671%" y="175.50">mi..</text></g><g><title>liveness_and_intrinsic_checking (74,731 samples, 0.16%)</title><rect x="14.0973%" y="149" width="0.1580%" height="15" fill="rgb(213,181,19)"/><text x="14.3473%" y="159.50"></text></g><g><title>check_mod_liveness (48,871 samples, 0.10%)</title><rect x="14.1520%" y="133" width="0.1033%" height="15" fill="rgb(254,191,54)"/><text x="14.4020%" y="143.50"></text></g><g><title>misc_checking_2 (253,853 samples, 0.54%)</title><rect x="14.0941%" y="165" width="0.5366%" height="15" fill="rgb(241,83,37)"/><text x="14.3441%" y="175.50"></text></g><g><title>match_checking (177,582 samples, 0.38%)</title><rect x="14.2553%" y="149" width="0.3754%" height="15" fill="rgb(233,36,39)"/><text x="14.5053%" y="159.50"></text></g><g><title>check_match (170,742 samples, 0.36%)</title><rect x="14.2697%" y="133" width="0.3609%" height="15" fill="rgb(226,3,54)"/><text x="14.5197%" y="143.50"></text></g><g><title>check_private_in_public (55,240 samples, 0.12%)</title><rect x="14.6478%" y="149" width="0.1168%" height="15" fill="rgb(245,192,40)"/><text x="14.8978%" y="159.50"></text></g><g><title>death_checking (258,843 samples, 0.55%)</title><rect x="14.7645%" y="149" width="0.5472%" height="15" fill="rgb(238,167,29)"/><text x="15.0145%" y="159.50"></text></g><g><title>item_attrs (162,832 samples, 0.34%)</title><rect x="14.9675%" y="133" width="0.3442%" height="15" fill="rgb(232,182,51)"/><text x="15.2175%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (160,812 samples, 0.34%)</title><rect x="14.9718%" y="117" width="0.3399%" height="15" fill="rgb(231,60,39)"/><text x="15.2218%" y="127.50"></text></g><g><title>param_env (47,480 samples, 0.10%)</title><rect x="15.9808%" y="117" width="0.1004%" height="15" fill="rgb(208,69,12)"/><text x="16.2308%" y="127.50"></text></g><g><title>crate_lints (683,778 samples, 1.45%)</title><rect x="15.3150%" y="133" width="1.4455%" height="15" fill="rgb(235,93,37)"/><text x="15.5650%" y="143.50"></text></g><g><title>type_of (320,244 samples, 0.68%)</title><rect x="16.0835%" y="117" width="0.6770%" height="15" fill="rgb(213,116,39)"/><text x="16.3335%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (241,313 samples, 0.51%)</title><rect x="16.2504%" y="101" width="0.5101%" height="15" fill="rgb(222,207,29)"/><text x="16.5004%" y="111.50"></text></g><g><title>lint_checking (778,129 samples, 1.64%)</title><rect x="15.3117%" y="149" width="1.6449%" height="15" fill="rgb(206,96,30)"/><text x="15.5617%" y="159.50"></text></g><g><title>module_lints (92,781 samples, 0.20%)</title><rect x="16.7605%" y="133" width="0.1961%" height="15" fill="rgb(218,138,4)"/><text x="17.0105%" y="143.50"></text></g><g><title>lint_mod (91,181 samples, 0.19%)</title><rect x="16.7639%" y="117" width="0.1928%" height="15" fill="rgb(250,191,14)"/><text x="17.0139%" y="127.50"></text></g><g><title>privacy_access_levels (79,631 samples, 0.17%)</title><rect x="16.9566%" y="149" width="0.1683%" height="15" fill="rgb(239,60,40)"/><text x="17.2066%" y="159.50"></text></g><g><title>privacy_checking_modules (174,192 samples, 0.37%)</title><rect x="17.1250%" y="149" width="0.3682%" height="15" fill="rgb(206,27,48)"/><text x="17.3750%" y="159.50"></text></g><g><title>check_mod_privacy (172,912 samples, 0.37%)</title><rect x="17.1277%" y="133" width="0.3655%" height="15" fill="rgb(225,35,8)"/><text x="17.3777%" y="143.50"></text></g><g><title>misc_checking_3 (1,364,235 samples, 2.88%)</title><rect x="14.6307%" y="165" width="2.8839%" height="15" fill="rgb(250,213,24)"/><text x="14.8807%" y="175.50">mi..</text></g><g><title>adt_destructor (69,891 samples, 0.15%)</title><rect x="17.7827%" y="117" width="0.1477%" height="15" fill="rgb(247,123,22)"/><text x="18.0327%" y="127.50"></text></g><g><title>coherent_trait (59,841 samples, 0.13%)</title><rect x="17.8039%" y="101" width="0.1265%" height="15" fill="rgb(231,138,38)"/><text x="18.0539%" y="111.50"></text></g><g><title>specialization_graph_of (58,281 samples, 0.12%)</title><rect x="17.8072%" y="85" width="0.1232%" height="15" fill="rgb(231,145,46)"/><text x="18.0572%" y="95.50"></text></g><g><title>is_copy_raw (83,141 samples, 0.18%)</title><rect x="17.9304%" y="117" width="0.1758%" height="15" fill="rgb(251,118,11)"/><text x="18.1804%" y="127.50"></text></g><g><title>evaluate_obligation (64,031 samples, 0.14%)</title><rect x="17.9708%" y="101" width="0.1354%" height="15" fill="rgb(217,147,25)"/><text x="18.2208%" y="111.50"></text></g><g><title>param_env (70,921 samples, 0.15%)</title><rect x="18.1062%" y="117" width="0.1499%" height="15" fill="rgb(247,81,37)"/><text x="18.3562%" y="127.50"></text></g><g><title>impl_parent (1,959,208 samples, 4.14%)</title><rect x="27.1615%" y="101" width="4.1416%" height="15" fill="rgb(209,12,38)"/><text x="27.4115%" y="111.50">impl_..</text></g><g><title>metadata_decode_entry_impl_parent (983,960 samples, 2.08%)</title><rect x="29.2231%" y="85" width="2.0800%" height="15" fill="rgb(227,1,9)"/><text x="29.4731%" y="95.50">m..</text></g><g><title>impl_trait_ref (3,718,316 samples, 7.86%)</title><rect x="31.3222%" y="101" width="7.8603%" height="15" fill="rgb(248,47,43)"/><text x="31.5722%" y="111.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,737,957 samples, 5.79%)</title><rect x="33.3946%" y="85" width="5.7879%" height="15" fill="rgb(221,10,30)"/><text x="33.6446%" y="95.50">metadat..</text></g><g><title>item_attrs (56,791 samples, 0.12%)</title><rect x="39.1825%" y="101" width="0.1201%" height="15" fill="rgb(210,229,1)"/><text x="39.4325%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (54,111 samples, 0.11%)</title><rect x="39.1882%" y="85" width="0.1144%" height="15" fill="rgb(222,148,37)"/><text x="39.4382%" y="95.50"></text></g><g><title>trait_impls_of (789,578 samples, 1.67%)</title><rect x="39.4067%" y="101" width="1.6691%" height="15" fill="rgb(234,67,33)"/><text x="39.6567%" y="111.50"></text></g><g><title>implementations_of_trait (173,712 samples, 0.37%)</title><rect x="40.7086%" y="85" width="0.3672%" height="15" fill="rgb(247,98,35)"/><text x="40.9586%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (155,322 samples, 0.33%)</title><rect x="40.7475%" y="69" width="0.3283%" height="15" fill="rgb(247,138,52)"/><text x="40.9975%" y="79.50"></text></g><g><title>coherent_trait (11,085,905 samples, 23.43%)</title><rect x="17.6468%" y="133" width="23.4349%" height="15" fill="rgb(213,79,30)"/><text x="17.8968%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (10,797,671 samples, 22.83%)</title><rect x="18.2561%" y="117" width="22.8256%" height="15" fill="rgb(246,177,23)"/><text x="18.5061%" y="127.50">specialization_graph_of</text></g><g><title>orphan_check_crate (50,050 samples, 0.11%)</title><rect x="41.1025%" y="133" width="0.1058%" height="15" fill="rgb(230,62,27)"/><text x="41.3525%" y="143.50"></text></g><g><title>coherence_checking (11,188,965 samples, 23.65%)</title><rect x="17.5792%" y="149" width="23.6527%" height="15" fill="rgb(216,154,8)"/><text x="17.8292%" y="159.50">coherence_checking</text></g><g><title>dropck_outlives (67,901 samples, 0.14%)</title><rect x="48.6305%" y="101" width="0.1435%" height="15" fill="rgb(244,35,45)"/><text x="48.8805%" y="111.50"></text></g><g><title>evaluate_obligation (342,532 samples, 0.72%)</title><rect x="48.7740%" y="101" width="0.7241%" height="15" fill="rgb(251,115,12)"/><text x="49.0240%" y="111.50"></text></g><g><title>impl_trait_ref (49,640 samples, 0.10%)</title><rect x="49.5599%" y="101" width="0.1049%" height="15" fill="rgb(240,54,50)"/><text x="49.8099%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (47,840 samples, 0.10%)</title><rect x="49.5637%" y="85" width="0.1011%" height="15" fill="rgb(233,84,52)"/><text x="49.8137%" y="95.50"></text></g><g><title>predicates_of (271,245 samples, 0.57%)</title><rect x="49.8084%" y="101" width="0.5734%" height="15" fill="rgb(207,117,47)"/><text x="50.0584%" y="111.50"></text></g><g><title>item_bodies_checking (4,337,589 samples, 9.17%)</title><rect x="41.3194%" y="149" width="9.1694%" height="15" fill="rgb(249,43,39)"/><text x="41.5694%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (4,336,029 samples, 9.17%)</title><rect x="41.3227%" y="133" width="9.1661%" height="15" fill="rgb(209,38,44)"/><text x="41.5727%" y="143.50">typeck_item_b..</text></g><g><title>typeck (4,321,609 samples, 9.14%)</title><rect x="41.3531%" y="117" width="9.1356%" height="15" fill="rgb(236,212,23)"/><text x="41.6031%" y="127.50">typeck</text></g><g><title>item_types_checking (366,814 samples, 0.78%)</title><rect x="50.4887%" y="149" width="0.7754%" height="15" fill="rgb(242,79,21)"/><text x="50.7387%" y="159.50"></text></g><g><title>check_mod_item_types (365,024 samples, 0.77%)</title><rect x="50.4925%" y="133" width="0.7716%" height="15" fill="rgb(211,96,35)"/><text x="50.7425%" y="143.50"></text></g><g><title>fn_sig (172,162 samples, 0.36%)</title><rect x="51.7391%" y="117" width="0.3639%" height="15" fill="rgb(253,215,40)"/><text x="51.9891%" y="127.50"></text></g><g><title>type_of (50,811 samples, 0.11%)</title><rect x="51.9956%" y="101" width="0.1074%" height="15" fill="rgb(211,81,21)"/><text x="52.2456%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (48,221 samples, 0.10%)</title><rect x="52.0011%" y="85" width="0.1019%" height="15" fill="rgb(208,190,38)"/><text x="52.2511%" y="95.50"></text></g><g><title>generics_of (129,511 samples, 0.27%)</title><rect x="52.1030%" y="117" width="0.2738%" height="15" fill="rgb(235,213,38)"/><text x="52.3530%" y="127.50"></text></g><g><title>impl_trait_ref (111,741 samples, 0.24%)</title><rect x="52.3768%" y="117" width="0.2362%" height="15" fill="rgb(237,122,38)"/><text x="52.6268%" y="127.50"></text></g><g><title>late_bound_vars_map (391,924 samples, 0.83%)</title><rect x="53.3209%" y="69" width="0.8285%" height="15" fill="rgb(244,218,35)"/><text x="53.5709%" y="79.50"></text></g><g><title>resolve_lifetimes (363,714 samples, 0.77%)</title><rect x="53.3806%" y="53" width="0.7689%" height="15" fill="rgb(240,68,47)"/><text x="53.6306%" y="63.50"></text></g><g><title>lint_levels (108,961 samples, 0.23%)</title><rect x="53.9191%" y="37" width="0.2303%" height="15" fill="rgb(210,16,53)"/><text x="54.1691%" y="47.50"></text></g><g><title>explicit_predicates_of (662,148 samples, 1.40%)</title><rect x="52.7893%" y="85" width="1.3997%" height="15" fill="rgb(235,124,12)"/><text x="53.0393%" y="95.50"></text></g><g><title>predicates_of (788,438 samples, 1.67%)</title><rect x="52.6130%" y="117" width="1.6667%" height="15" fill="rgb(224,169,11)"/><text x="52.8630%" y="127.50"></text></g><g><title>predicates_defined_on (758,838 samples, 1.60%)</title><rect x="52.6756%" y="101" width="1.6041%" height="15" fill="rgb(250,166,2)"/><text x="52.9256%" y="111.50"></text></g><g><title>type_collecting (1,651,868 samples, 3.49%)</title><rect x="51.2659%" y="149" width="3.4919%" height="15" fill="rgb(242,216,29)"/><text x="51.5159%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (1,640,678 samples, 3.47%)</title><rect x="51.2896%" y="133" width="3.4683%" height="15" fill="rgb(230,116,27)"/><text x="51.5396%" y="143.50">col..</text></g><g><title>type_of (226,212 samples, 0.48%)</title><rect x="54.2797%" y="117" width="0.4782%" height="15" fill="rgb(228,99,48)"/><text x="54.5297%" y="127.50"></text></g><g><title>type_of (85,841 samples, 0.18%)</title><rect x="54.5764%" y="101" width="0.1815%" height="15" fill="rgb(253,11,6)"/><text x="54.8264%" y="111.50"></text></g><g><title>adt_sized_constraint (52,300 samples, 0.11%)</title><rect x="56.7513%" y="101" width="0.1106%" height="15" fill="rgb(247,143,39)"/><text x="57.0013%" y="111.50"></text></g><g><title>adt_def (49,280 samples, 0.10%)</title><rect x="56.7577%" y="85" width="0.1042%" height="15" fill="rgb(236,97,10)"/><text x="57.0077%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (47,490 samples, 0.10%)</title><rect x="56.7615%" y="69" width="0.1004%" height="15" fill="rgb(233,208,19)"/><text x="57.0115%" y="79.50"></text></g><g><title>evaluate_obligation (281,093 samples, 0.59%)</title><rect x="56.3158%" y="117" width="0.5942%" height="15" fill="rgb(216,164,2)"/><text x="56.5658%" y="127.50"></text></g><g><title>implied_outlives_bounds (120,132 samples, 0.25%)</title><rect x="56.9100%" y="117" width="0.2540%" height="15" fill="rgb(220,129,5)"/><text x="57.1600%" y="127.50"></text></g><g><title>param_env (94,680 samples, 0.20%)</title><rect x="57.1640%" y="117" width="0.2001%" height="15" fill="rgb(242,17,10)"/><text x="57.4140%" y="127.50"></text></g><g><title>predicates_of (74,201 samples, 0.16%)</title><rect x="57.3641%" y="117" width="0.1569%" height="15" fill="rgb(242,107,0)"/><text x="57.6141%" y="127.50"></text></g><g><title>predicates_defined_on (65,661 samples, 0.14%)</title><rect x="57.3822%" y="101" width="0.1388%" height="15" fill="rgb(251,28,31)"/><text x="57.6322%" y="111.50"></text></g><g><title>region_scope_tree (99,552 samples, 0.21%)</title><rect x="57.5210%" y="117" width="0.2104%" height="15" fill="rgb(233,223,10)"/><text x="57.7710%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,367,303 samples, 2.89%)</title><rect x="54.9003%" y="133" width="2.8904%" height="15" fill="rgb(215,21,27)"/><text x="55.1503%" y="143.50">ch..</text></g><g><title>implied_outlives_bounds (84,772 samples, 0.18%)</title><rect x="59.4827%" y="117" width="0.1792%" height="15" fill="rgb(232,23,21)"/><text x="59.7327%" y="127.50"></text></g><g><title>param_env (140,053 samples, 0.30%)</title><rect x="59.6619%" y="117" width="0.2961%" height="15" fill="rgb(244,5,23)"/><text x="59.9119%" y="127.50"></text></g><g><title>predicates_of (73,890 samples, 0.16%)</title><rect x="59.9579%" y="117" width="0.1562%" height="15" fill="rgb(226,81,46)"/><text x="60.2079%" y="127.50"></text></g><g><title>predicates_defined_on (47,770 samples, 0.10%)</title><rect x="60.0131%" y="101" width="0.1010%" height="15" fill="rgb(247,70,30)"/><text x="60.2631%" y="111.50"></text></g><g><title>analysis (27,791,951 samples, 58.75%)</title><rect x="1.5216%" y="181" width="58.7504%" height="15" fill="rgb(212,68,19)"/><text x="1.7716%" y="191.50">analysis</text></g><g><title>type_check_crate (20,226,446 samples, 42.76%)</title><rect x="17.5146%" y="165" width="42.7574%" height="15" fill="rgb(240,187,13)"/><text x="17.7646%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,607,479 samples, 5.51%)</title><rect x="54.7599%" y="149" width="5.5120%" height="15" fill="rgb(223,113,26)"/><text x="55.0099%" y="159.50">wf_chec..</text></g><g><title>check_item_well_formed (1,173,794 samples, 2.48%)</title><rect x="57.7907%" y="133" width="2.4813%" height="15" fill="rgb(206,192,2)"/><text x="58.0407%" y="143.50">ch..</text></g><g><title>variances_of (62,160 samples, 0.13%)</title><rect x="60.1406%" y="117" width="0.1314%" height="15" fill="rgb(241,108,4)"/><text x="60.3906%" y="127.50"></text></g><g><title>crate_variances (57,930 samples, 0.12%)</title><rect x="60.1495%" y="101" width="0.1225%" height="15" fill="rgb(247,173,49)"/><text x="60.3995%" y="111.50"></text></g><g><title>codegen_crate (281,603 samples, 0.60%)</title><rect x="60.2952%" y="181" width="0.5953%" height="15" fill="rgb(224,114,35)"/><text x="60.5452%" y="191.50"></text></g><g><title>AST_validation (116,121 samples, 0.25%)</title><rect x="61.3558%" y="165" width="0.2455%" height="15" fill="rgb(245,159,27)"/><text x="61.6058%" y="175.50"></text></g><g><title>complete_gated_feature_checking (59,501 samples, 0.13%)</title><rect x="61.6013%" y="165" width="0.1258%" height="15" fill="rgb(245,172,44)"/><text x="61.8513%" y="175.50"></text></g><g><title>crate_injection (98,931 samples, 0.21%)</title><rect x="61.7271%" y="165" width="0.2091%" height="15" fill="rgb(236,23,11)"/><text x="61.9771%" y="175.50"></text></g><g><title>metadata_load_macro (124,552 samples, 0.26%)</title><rect x="79.4281%" y="133" width="0.2633%" height="15" fill="rgb(205,117,38)"/><text x="79.6781%" y="143.50"></text></g><g><title>macro_expand_crate (8,595,927 samples, 18.17%)</title><rect x="61.9362%" y="165" width="18.1712%" height="15" fill="rgb(237,72,25)"/><text x="62.1862%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (8,569,496 samples, 18.12%)</title><rect x="61.9921%" y="149" width="18.1154%" height="15" fill="rgb(244,70,9)"/><text x="62.2421%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (196,822 samples, 0.42%)</title><rect x="79.6913%" y="133" width="0.4161%" height="15" fill="rgb(217,125,39)"/><text x="79.9413%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (84,091 samples, 0.18%)</title><rect x="80.1188%" y="165" width="0.1778%" height="15" fill="rgb(235,36,10)"/><text x="80.3688%" y="175.50"></text></g><g><title>finalize_macro_resolutions (353,184 samples, 0.75%)</title><rect x="80.3941%" y="149" width="0.7466%" height="15" fill="rgb(251,123,47)"/><text x="80.6441%" y="159.50"></text></g><g><title>late_resolve_crate (2,258,445 samples, 4.77%)</title><rect x="81.1407%" y="149" width="4.7742%" height="15" fill="rgb(221,13,13)"/><text x="81.3907%" y="159.50">late_r..</text></g><g><title>configure_and_expand (11,924,154 samples, 25.21%)</title><rect x="60.8905%" y="181" width="25.2069%" height="15" fill="rgb(238,131,9)"/><text x="61.1405%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,744,051 samples, 5.80%)</title><rect x="80.2966%" y="165" width="5.8007%" height="15" fill="rgb(211,50,8)"/><text x="80.5466%" y="175.50">resolve..</text></g><g><title>drop_ast (105,571 samples, 0.22%)</title><rect x="86.0973%" y="181" width="0.2232%" height="15" fill="rgb(245,182,24)"/><text x="86.3473%" y="191.50"></text></g><g><title>early_lint_checks (265,583 samples, 0.56%)</title><rect x="86.3498%" y="181" width="0.5614%" height="15" fill="rgb(242,14,37)"/><text x="86.5998%" y="191.50"></text></g><g><title>free_global_ctxt (1,374,825 samples, 2.91%)</title><rect x="86.9112%" y="181" width="2.9063%" height="15" fill="rgb(246,228,12)"/><text x="87.1612%" y="191.50">fr..</text></g><g><title>crate_hash (62,501 samples, 0.13%)</title><rect x="90.5774%" y="165" width="0.1321%" height="15" fill="rgb(213,55,15)"/><text x="90.8274%" y="175.50"></text></g><g><title>generate_crate_metadata (524,316 samples, 1.11%)</title><rect x="89.8175%" y="181" width="1.1084%" height="15" fill="rgb(209,9,3)"/><text x="90.0675%" y="191.50"></text></g><g><title>hir_lowering (1,817,581 samples, 3.84%)</title><rect x="90.9259%" y="181" width="3.8422%" height="15" fill="rgb(230,59,30)"/><text x="91.1759%" y="191.50">hir_..</text></g><g><title>parse_crate (1,206,923 samples, 2.55%)</title><rect x="94.8483%" y="181" width="2.5514%" height="15" fill="rgb(209,121,21)"/><text x="95.0983%" y="191.50">pa..</text></g><g><title>prepare_outputs (323,513 samples, 0.68%)</title><rect x="97.4212%" y="181" width="0.6839%" height="15" fill="rgb(220,109,13)"/><text x="97.6712%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (439,105 samples, 0.93%)</title><rect x="98.1050%" y="181" width="0.9282%" height="15" fill="rgb(232,18,1)"/><text x="98.3550%" y="191.50"></text></g><g><title>setup_global_ctxt (153,422 samples, 0.32%)</title><rect x="99.0595%" y="181" width="0.3243%" height="15" fill="rgb(215,41,42)"/><text x="99.3095%" y="191.50"></text></g><g><title>all (47,305,150 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (47,305,150 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (291,503 samples, 0.62%)</title><rect x="99.3838%" y="181" width="0.6162%" height="15" fill="rgb(205,98,50)"/><text x="99.6338%" y="191.50"></text></g></svg></svg>