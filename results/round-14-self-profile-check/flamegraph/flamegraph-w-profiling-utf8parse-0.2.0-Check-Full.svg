<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (46,280 samples, 0.13%)</title><rect x="9.8121%" y="101" width="0.1257%" height="15" fill="rgb(227,0,7)"/><text x="10.0621%" y="111.50"></text></g><g><title>evaluate_obligation (38,980 samples, 0.11%)</title><rect x="9.8319%" y="85" width="0.1059%" height="15" fill="rgb(217,0,24)"/><text x="10.0819%" y="95.50"></text></g><g><title>resolve_instance (46,820 samples, 0.13%)</title><rect x="9.9893%" y="101" width="0.1272%" height="15" fill="rgb(221,193,54)"/><text x="10.2393%" y="111.50"></text></g><g><title>thir_body (241,822 samples, 0.66%)</title><rect x="10.1253%" y="101" width="0.6570%" height="15" fill="rgb(248,212,6)"/><text x="10.3753%" y="111.50"></text></g><g><title>mir_const (1,179,861 samples, 3.21%)</title><rect x="7.5844%" y="149" width="3.2054%" height="15" fill="rgb(208,68,35)"/><text x="7.8344%" y="159.50">mir..</text></g><g><title>unsafety_check_result (1,008,769 samples, 2.74%)</title><rect x="8.0492%" y="133" width="2.7406%" height="15" fill="rgb(232,128,0)"/><text x="8.2992%" y="143.50">un..</text></g><g><title>mir_built (925,578 samples, 2.51%)</title><rect x="8.2753%" y="117" width="2.5145%" height="15" fill="rgb(207,160,47)"/><text x="8.5253%" y="127.50">mi..</text></g><g><title>mir_promoted (1,367,813 samples, 3.72%)</title><rect x="7.1861%" y="165" width="3.7160%" height="15" fill="rgb(228,23,34)"/><text x="7.4361%" y="175.50">mir_..</text></g><g><title>mir_const_qualif (41,312 samples, 0.11%)</title><rect x="10.7898%" y="149" width="0.1122%" height="15" fill="rgb(218,30,26)"/><text x="11.0398%" y="159.50"></text></g><g><title>type_op_prove_predicate (120,520 samples, 0.33%)</title><rect x="10.9796%" y="165" width="0.3274%" height="15" fill="rgb(220,122,19)"/><text x="11.2296%" y="175.50"></text></g><g><title>MIR_borrow_checking (3,378,748 samples, 9.18%)</title><rect x="2.1311%" y="197" width="9.1791%" height="15" fill="rgb(250,228,42)"/><text x="2.3811%" y="207.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (3,360,297 samples, 9.13%)</title><rect x="2.1812%" y="181" width="9.1290%" height="15" fill="rgb(240,193,28)"/><text x="2.4312%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (59,811 samples, 0.16%)</title><rect x="11.3102%" y="197" width="0.1625%" height="15" fill="rgb(216,20,37)"/><text x="11.5602%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (38,010 samples, 0.10%)</title><rect x="11.3695%" y="181" width="0.1033%" height="15" fill="rgb(206,188,39)"/><text x="11.6195%" y="191.50"></text></g><g><title>hir_module_items (96,682 samples, 0.26%)</title><rect x="11.4727%" y="197" width="0.2627%" height="15" fill="rgb(217,207,13)"/><text x="11.7227%" y="207.50"></text></g><g><title>get_lang_items (41,160 samples, 0.11%)</title><rect x="12.1372%" y="149" width="0.1118%" height="15" fill="rgb(231,73,38)"/><text x="12.3872%" y="159.50"></text></g><g><title>codegen_fn_attrs (42,590 samples, 0.12%)</title><rect x="12.4040%" y="133" width="0.1157%" height="15" fill="rgb(225,20,46)"/><text x="12.6540%" y="143.50"></text></g><g><title>should_inherit_track_caller (101,772 samples, 0.28%)</title><rect x="12.2490%" y="149" width="0.2765%" height="15" fill="rgb(210,31,41)"/><text x="12.4990%" y="159.50"></text></g><g><title>codegen_fn_attrs (204,282 samples, 0.55%)</title><rect x="12.0139%" y="165" width="0.5550%" height="15" fill="rgb(221,200,47)"/><text x="12.2639%" y="175.50"></text></g><g><title>check_mod_attrs (289,233 samples, 0.79%)</title><rect x="11.7836%" y="181" width="0.7858%" height="15" fill="rgb(226,26,5)"/><text x="12.0336%" y="191.50"></text></g><g><title>lookup_deprecation_entry (50,411 samples, 0.14%)</title><rect x="12.8663%" y="165" width="0.1370%" height="15" fill="rgb(249,33,26)"/><text x="13.1163%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (118,282 samples, 0.32%)</title><rect x="12.7313%" y="181" width="0.3213%" height="15" fill="rgb(235,183,28)"/><text x="12.9813%" y="191.50"></text></g><g><title>misc_checking_1 (512,626 samples, 1.39%)</title><rect x="11.7365%" y="197" width="1.3927%" height="15" fill="rgb(221,5,38)"/><text x="11.9865%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (103,951 samples, 0.28%)</title><rect x="13.1332%" y="181" width="0.2824%" height="15" fill="rgb(247,18,42)"/><text x="13.3832%" y="191.50"></text></g><g><title>check_mod_liveness (72,351 samples, 0.20%)</title><rect x="13.2191%" y="165" width="0.1966%" height="15" fill="rgb(241,131,45)"/><text x="13.4691%" y="175.50"></text></g><g><title>misc_checking_2 (354,614 samples, 0.96%)</title><rect x="13.1292%" y="197" width="0.9634%" height="15" fill="rgb(249,31,29)"/><text x="13.3792%" y="207.50"></text></g><g><title>match_checking (249,173 samples, 0.68%)</title><rect x="13.4156%" y="181" width="0.6769%" height="15" fill="rgb(225,111,53)"/><text x="13.6656%" y="191.50"></text></g><g><title>check_match (237,903 samples, 0.65%)</title><rect x="13.4462%" y="165" width="0.6463%" height="15" fill="rgb(238,160,17)"/><text x="13.6962%" y="175.50"></text></g><g><title>check_private_in_public (57,790 samples, 0.16%)</title><rect x="14.1093%" y="181" width="0.1570%" height="15" fill="rgb(214,148,48)"/><text x="14.3593%" y="191.50"></text></g><g><title>death_checking (180,542 samples, 0.49%)</title><rect x="14.2663%" y="181" width="0.4905%" height="15" fill="rgb(232,36,49)"/><text x="14.5163%" y="191.50"></text></g><g><title>item_attrs (68,331 samples, 0.19%)</title><rect x="14.5711%" y="165" width="0.1856%" height="15" fill="rgb(209,103,24)"/><text x="14.8211%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (67,351 samples, 0.18%)</title><rect x="14.5738%" y="149" width="0.1830%" height="15" fill="rgb(229,88,8)"/><text x="14.8238%" y="159.50"></text></g><g><title>eval_to_const_value_raw (61,451 samples, 0.17%)</title><rect x="15.4136%" y="149" width="0.1669%" height="15" fill="rgb(213,181,19)"/><text x="15.6636%" y="159.50"></text></g><g><title>eval_to_const_value_raw (59,841 samples, 0.16%)</title><rect x="15.4179%" y="133" width="0.1626%" height="15" fill="rgb(254,191,54)"/><text x="15.6679%" y="143.50"></text></g><g><title>eval_to_allocation_raw (55,091 samples, 0.15%)</title><rect x="15.4308%" y="117" width="0.1497%" height="15" fill="rgb(241,83,37)"/><text x="15.6808%" y="127.50"></text></g><g><title>param_env (47,920 samples, 0.13%)</title><rect x="15.5805%" y="149" width="0.1302%" height="15" fill="rgb(233,36,39)"/><text x="15.8305%" y="159.50"></text></g><g><title>crate_lints (660,507 samples, 1.79%)</title><rect x="14.7614%" y="165" width="1.7944%" height="15" fill="rgb(226,3,54)"/><text x="15.0114%" y="175.50">c..</text></g><g><title>type_of (310,764 samples, 0.84%)</title><rect x="15.7116%" y="149" width="0.8443%" height="15" fill="rgb(245,192,40)"/><text x="15.9616%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (227,412 samples, 0.62%)</title><rect x="15.9380%" y="133" width="0.6178%" height="15" fill="rgb(238,167,29)"/><text x="16.1880%" y="143.50"></text></g><g><title>lint_checking (830,709 samples, 2.26%)</title><rect x="14.7568%" y="181" width="2.2568%" height="15" fill="rgb(232,182,51)"/><text x="15.0068%" y="191.50">l..</text></g><g><title>module_lints (168,492 samples, 0.46%)</title><rect x="16.5558%" y="165" width="0.4577%" height="15" fill="rgb(231,60,39)"/><text x="16.8058%" y="175.50"></text></g><g><title>lint_mod (165,952 samples, 0.45%)</title><rect x="16.5627%" y="149" width="0.4508%" height="15" fill="rgb(208,69,12)"/><text x="16.8127%" y="159.50"></text></g><g><title>privacy_access_levels (65,821 samples, 0.18%)</title><rect x="17.0136%" y="181" width="0.1788%" height="15" fill="rgb(235,93,37)"/><text x="17.2636%" y="191.50"></text></g><g><title>privacy_checking_modules (157,602 samples, 0.43%)</title><rect x="17.1924%" y="181" width="0.4282%" height="15" fill="rgb(213,116,39)"/><text x="17.4424%" y="191.50"></text></g><g><title>check_mod_privacy (155,722 samples, 0.42%)</title><rect x="17.1975%" y="165" width="0.4231%" height="15" fill="rgb(222,207,29)"/><text x="17.4475%" y="175.50"></text></g><g><title>misc_checking_3 (1,314,365 samples, 3.57%)</title><rect x="14.0926%" y="197" width="3.5708%" height="15" fill="rgb(206,96,30)"/><text x="14.3426%" y="207.50">misc..</text></g><g><title>adt_destructor (37,800 samples, 0.10%)</title><rect x="17.8169%" y="149" width="0.1027%" height="15" fill="rgb(218,138,4)"/><text x="18.0669%" y="159.50"></text></g><g><title>impl_parent (519,065 samples, 1.41%)</title><rect x="20.1413%" y="133" width="1.4102%" height="15" fill="rgb(250,191,14)"/><text x="20.3913%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (324,283 samples, 0.88%)</title><rect x="20.6705%" y="117" width="0.8810%" height="15" fill="rgb(239,60,40)"/><text x="20.9205%" y="127.50"></text></g><g><title>impl_trait_ref (1,206,576 samples, 3.28%)</title><rect x="21.5515%" y="133" width="3.2779%" height="15" fill="rgb(206,27,48)"/><text x="21.8015%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,017,773 samples, 2.77%)</title><rect x="22.0644%" y="117" width="2.7650%" height="15" fill="rgb(225,35,8)"/><text x="22.3144%" y="127.50">me..</text></g><g><title>coherent_trait (2,771,391 samples, 7.53%)</title><rect x="17.7711%" y="165" width="7.5291%" height="15" fill="rgb(250,213,24)"/><text x="18.0211%" y="175.50">coherent_t..</text></g><g><title>specialization_graph_of (2,706,250 samples, 7.35%)</title><rect x="17.9481%" y="149" width="7.3521%" height="15" fill="rgb(247,123,22)"/><text x="18.1981%" y="159.50">specializa..</text></g><g><title>trait_impls_of (172,104 samples, 0.47%)</title><rect x="24.8326%" y="133" width="0.4676%" height="15" fill="rgb(231,138,38)"/><text x="25.0826%" y="143.50"></text></g><g><title>implementations_of_trait (37,840 samples, 0.10%)</title><rect x="25.1974%" y="117" width="0.1028%" height="15" fill="rgb(231,145,46)"/><text x="25.4474%" y="127.50"></text></g><g><title>coherence_checking (2,809,031 samples, 7.63%)</title><rect x="17.7376%" y="181" width="7.6314%" height="15" fill="rgb(251,118,11)"/><text x="17.9876%" y="191.50">coherence_..</text></g><g><title>associated_items (50,761 samples, 0.14%)</title><rect x="34.7993%" y="133" width="0.1379%" height="15" fill="rgb(217,147,25)"/><text x="35.0493%" y="143.50"></text></g><g><title>dropck_outlives (60,381 samples, 0.16%)</title><rect x="34.9520%" y="133" width="0.1640%" height="15" fill="rgb(247,81,37)"/><text x="35.2020%" y="143.50"></text></g><g><title>generics_of (52,751 samples, 0.14%)</title><rect x="36.1539%" y="117" width="0.1433%" height="15" fill="rgb(209,12,38)"/><text x="36.4039%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (44,711 samples, 0.12%)</title><rect x="36.1758%" y="101" width="0.1215%" height="15" fill="rgb(227,1,9)"/><text x="36.4258%" y="111.50"></text></g><g><title>impl_trait_ref (65,051 samples, 0.18%)</title><rect x="36.4254%" y="117" width="0.1767%" height="15" fill="rgb(248,47,43)"/><text x="36.6754%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (58,510 samples, 0.16%)</title><rect x="36.4431%" y="101" width="0.1590%" height="15" fill="rgb(221,10,30)"/><text x="36.6931%" y="111.50"></text></g><g><title>predicates_of (109,501 samples, 0.30%)</title><rect x="36.6408%" y="117" width="0.2975%" height="15" fill="rgb(210,229,1)"/><text x="36.8908%" y="127.50"></text></g><g><title>predicates_defined_on (66,571 samples, 0.18%)</title><rect x="36.7574%" y="101" width="0.1809%" height="15" fill="rgb(222,148,37)"/><text x="37.0074%" y="111.50"></text></g><g><title>specializes (394,055 samples, 1.07%)</title><rect x="36.9383%" y="117" width="1.0705%" height="15" fill="rgb(234,67,33)"/><text x="37.1883%" y="127.50"></text></g><g><title>param_env (297,173 samples, 0.81%)</title><rect x="37.2015%" y="101" width="0.8073%" height="15" fill="rgb(247,98,35)"/><text x="37.4515%" y="111.50"></text></g><g><title>def_span (215,312 samples, 0.58%)</title><rect x="37.4238%" y="85" width="0.5849%" height="15" fill="rgb(247,138,52)"/><text x="37.6738%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (204,952 samples, 0.56%)</title><rect x="37.4520%" y="69" width="0.5568%" height="15" fill="rgb(213,79,30)"/><text x="37.7020%" y="79.50"></text></g><g><title>trait_impls_of (126,982 samples, 0.34%)</title><rect x="38.0253%" y="117" width="0.3450%" height="15" fill="rgb(246,177,23)"/><text x="38.2753%" y="127.50"></text></g><g><title>implementations_of_trait (51,590 samples, 0.14%)</title><rect x="38.2301%" y="101" width="0.1402%" height="15" fill="rgb(230,62,27)"/><text x="38.4801%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (48,580 samples, 0.13%)</title><rect x="38.2383%" y="85" width="0.1320%" height="15" fill="rgb(216,154,8)"/><text x="38.4883%" y="95.50"></text></g><g><title>evaluate_obligation (1,209,556 samples, 3.29%)</title><rect x="35.1160%" y="133" width="3.2860%" height="15" fill="rgb(244,35,45)"/><text x="35.3660%" y="143.50">eva..</text></g><g><title>method_autoderef_steps (48,181 samples, 0.13%)</title><rect x="38.6584%" y="133" width="0.1309%" height="15" fill="rgb(251,115,12)"/><text x="38.9084%" y="143.50"></text></g><g><title>predicates_of (46,570 samples, 0.13%)</title><rect x="38.8024%" y="133" width="0.1265%" height="15" fill="rgb(240,54,50)"/><text x="39.0524%" y="143.50"></text></g><g><title>item_bodies_checking (5,030,437 samples, 13.67%)</title><rect x="25.3957%" y="181" width="13.6663%" height="15" fill="rgb(233,84,52)"/><text x="25.6457%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (5,028,737 samples, 13.66%)</title><rect x="25.4003%" y="165" width="13.6617%" height="15" fill="rgb(207,117,47)"/><text x="25.6503%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (5,014,877 samples, 13.62%)</title><rect x="25.4379%" y="149" width="13.6241%" height="15" fill="rgb(249,43,39)"/><text x="25.6879%" y="159.50">typeck</text></g><g><title>item_types_checking (239,803 samples, 0.65%)</title><rect x="39.0620%" y="181" width="0.6515%" height="15" fill="rgb(209,38,44)"/><text x="39.3120%" y="191.50"></text></g><g><title>check_mod_item_types (237,573 samples, 0.65%)</title><rect x="39.0681%" y="165" width="0.6454%" height="15" fill="rgb(236,212,23)"/><text x="39.3181%" y="175.50"></text></g><g><title>is_mir_available (47,690 samples, 0.13%)</title><rect x="41.1732%" y="101" width="0.1296%" height="15" fill="rgb(242,79,21)"/><text x="41.4232%" y="111.50"></text></g><g><title>mir_keys (42,120 samples, 0.11%)</title><rect x="41.1884%" y="85" width="0.1144%" height="15" fill="rgb(211,96,35)"/><text x="41.4384%" y="95.50"></text></g><g><title>thir_body (64,752 samples, 0.18%)</title><rect x="42.4463%" y="37" width="0.1759%" height="15" fill="rgb(253,215,40)"/><text x="42.6963%" y="47.50"></text></g><g><title>mir_const_qualif (492,445 samples, 1.34%)</title><rect x="41.3063%" y="101" width="1.3378%" height="15" fill="rgb(211,81,21)"/><text x="41.5563%" y="111.50"></text></g><g><title>mir_const (419,275 samples, 1.14%)</title><rect x="41.5051%" y="85" width="1.1391%" height="15" fill="rgb(208,190,38)"/><text x="41.7551%" y="95.50"></text></g><g><title>unsafety_check_result (297,963 samples, 0.81%)</title><rect x="41.8346%" y="69" width="0.8095%" height="15" fill="rgb(235,213,38)"/><text x="42.0846%" y="79.50"></text></g><g><title>mir_built (252,013 samples, 0.68%)</title><rect x="41.9595%" y="53" width="0.6847%" height="15" fill="rgb(237,122,38)"/><text x="42.2095%" y="63.50"></text></g><g><title>implied_outlives_bounds (37,970 samples, 0.10%)</title><rect x="46.4551%" y="53" width="0.1032%" height="15" fill="rgb(244,218,35)"/><text x="46.7051%" y="63.50"></text></g><g><title>is_late_bound_map (46,742 samples, 0.13%)</title><rect x="46.5583%" y="53" width="0.1270%" height="15" fill="rgb(240,68,47)"/><text x="46.8083%" y="63.50"></text></g><g><title>mir_borrowck (1,054,555 samples, 2.86%)</title><rect x="44.0234%" y="69" width="2.8649%" height="15" fill="rgb(210,16,53)"/><text x="44.2734%" y="79.50">mi..</text></g><g><title>mir_promoted (74,751 samples, 0.20%)</title><rect x="46.6853%" y="53" width="0.2031%" height="15" fill="rgb(235,124,12)"/><text x="46.9353%" y="63.50"></text></g><g><title>mir_for_ctfe (1,567,989 samples, 4.26%)</title><rect x="42.6441%" y="101" width="4.2598%" height="15" fill="rgb(224,169,11)"/><text x="42.8941%" y="111.50">mir_f..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,435,467 samples, 3.90%)</title><rect x="43.0042%" y="85" width="3.8998%" height="15" fill="rgb(250,166,2)"/><text x="43.2542%" y="95.50">mir_..</text></g><g><title>region_scope_tree (39,960 samples, 0.11%)</title><rect x="48.4599%" y="85" width="0.1086%" height="15" fill="rgb(242,216,29)"/><text x="48.7099%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,083,814 samples, 8.38%)</title><rect x="40.2769%" y="149" width="8.3779%" height="15" fill="rgb(230,116,27)"/><text x="40.5269%" y="159.50">eval_to_cons..</text></g><g><title>eval_to_const_value_raw (3,056,123 samples, 8.30%)</title><rect x="40.3521%" y="133" width="8.3027%" height="15" fill="rgb(228,99,48)"/><text x="40.6021%" y="143.50">eval_to_cons..</text></g><g><title>eval_to_allocation_raw (3,023,143 samples, 8.21%)</title><rect x="40.4417%" y="117" width="8.2131%" height="15" fill="rgb(253,11,6)"/><text x="40.6917%" y="127.50">eval_to_all..</text></g><g><title>typeck (640,746 samples, 1.74%)</title><rect x="46.9140%" y="101" width="1.7407%" height="15" fill="rgb(247,143,39)"/><text x="47.1640%" y="111.50"></text></g><g><title>fn_sig (102,503 samples, 0.28%)</title><rect x="48.6547%" y="149" width="0.2785%" height="15" fill="rgb(236,97,10)"/><text x="48.9047%" y="159.50"></text></g><g><title>named_region_map (144,661 samples, 0.39%)</title><rect x="49.0888%" y="133" width="0.3930%" height="15" fill="rgb(233,208,19)"/><text x="49.3388%" y="143.50"></text></g><g><title>resolve_lifetimes (135,811 samples, 0.37%)</title><rect x="49.1128%" y="117" width="0.3690%" height="15" fill="rgb(216,164,2)"/><text x="49.3628%" y="127.50"></text></g><g><title>lint_levels (58,000 samples, 0.16%)</title><rect x="49.3242%" y="101" width="0.1576%" height="15" fill="rgb(220,129,5)"/><text x="49.5742%" y="111.50"></text></g><g><title>generics_of (213,171 samples, 0.58%)</title><rect x="48.9332%" y="149" width="0.5791%" height="15" fill="rgb(242,17,10)"/><text x="49.1832%" y="159.50"></text></g><g><title>param_env (277,702 samples, 0.75%)</title><rect x="49.5838%" y="149" width="0.7544%" height="15" fill="rgb(242,107,0)"/><text x="49.8338%" y="159.50"></text></g><g><title>predicates_of (45,590 samples, 0.12%)</title><rect x="50.2144%" y="133" width="0.1239%" height="15" fill="rgb(251,28,31)"/><text x="50.4644%" y="143.50"></text></g><g><title>predicates_defined_on (39,900 samples, 0.11%)</title><rect x="50.2298%" y="117" width="0.1084%" height="15" fill="rgb(233,223,10)"/><text x="50.4798%" y="127.50"></text></g><g><title>explicit_predicates_of (87,660 samples, 0.24%)</title><rect x="50.5082%" y="117" width="0.2381%" height="15" fill="rgb(215,21,27)"/><text x="50.7582%" y="127.50"></text></g><g><title>predicates_of (222,232 samples, 0.60%)</title><rect x="50.3382%" y="149" width="0.6037%" height="15" fill="rgb(232,23,21)"/><text x="50.5882%" y="159.50"></text></g><g><title>predicates_defined_on (199,032 samples, 0.54%)</title><rect x="50.4013%" y="133" width="0.5407%" height="15" fill="rgb(244,5,23)"/><text x="50.6513%" y="143.50"></text></g><g><title>inferred_outlives_of (72,021 samples, 0.20%)</title><rect x="50.7463%" y="117" width="0.1957%" height="15" fill="rgb(226,81,46)"/><text x="50.9963%" y="127.50"></text></g><g><title>inferred_outlives_crate (56,820 samples, 0.15%)</title><rect x="50.7876%" y="101" width="0.1544%" height="15" fill="rgb(247,70,30)"/><text x="51.0376%" y="111.50"></text></g><g><title>type_collecting (4,218,078 samples, 11.46%)</title><rect x="39.7158%" y="181" width="11.4594%" height="15" fill="rgb(212,68,19)"/><text x="39.9658%" y="191.50">type_collecting</text></g><g><title>collect_mod_item_types (4,210,318 samples, 11.44%)</title><rect x="39.7369%" y="165" width="11.4383%" height="15" fill="rgb(240,187,13)"/><text x="39.9869%" y="175.50">collect_mod_item_..</text></g><g><title>type_of (49,011 samples, 0.13%)</title><rect x="51.0421%" y="149" width="0.1331%" height="15" fill="rgb(223,113,26)"/><text x="51.2921%" y="159.50"></text></g><g><title>evaluate_obligation (129,460 samples, 0.35%)</title><rect x="52.1254%" y="149" width="0.3517%" height="15" fill="rgb(206,192,2)"/><text x="52.3754%" y="159.50"></text></g><g><title>implied_outlives_bounds (50,791 samples, 0.14%)</title><rect x="52.4771%" y="149" width="0.1380%" height="15" fill="rgb(241,108,4)"/><text x="52.7271%" y="159.50"></text></g><g><title>param_env (39,560 samples, 0.11%)</title><rect x="52.6151%" y="149" width="0.1075%" height="15" fill="rgb(247,173,49)"/><text x="52.8651%" y="159.50"></text></g><g><title>check_impl_item_well_formed (636,016 samples, 1.73%)</title><rect x="51.3102%" y="165" width="1.7279%" height="15" fill="rgb(224,114,35)"/><text x="51.5602%" y="175.50"></text></g><g><title>region_scope_tree (88,172 samples, 0.24%)</title><rect x="52.7985%" y="149" width="0.2395%" height="15" fill="rgb(245,159,27)"/><text x="53.0485%" y="159.50"></text></g><g><title>evaluate_obligation (93,622 samples, 0.25%)</title><rect x="53.7923%" y="149" width="0.2543%" height="15" fill="rgb(245,172,44)"/><text x="54.0423%" y="159.50"></text></g><g><title>param_env (53,181 samples, 0.14%)</title><rect x="54.0767%" y="149" width="0.1445%" height="15" fill="rgb(236,23,11)"/><text x="54.3267%" y="159.50"></text></g><g><title>predicates_of (38,380 samples, 0.10%)</title><rect x="54.2212%" y="149" width="0.1043%" height="15" fill="rgb(205,117,38)"/><text x="54.4712%" y="159.50"></text></g><g><title>check_item_well_formed (521,467 samples, 1.42%)</title><rect x="53.0381%" y="165" width="1.4167%" height="15" fill="rgb(237,72,25)"/><text x="53.2881%" y="175.50"></text></g><g><title>analysis (19,520,501 samples, 53.03%)</title><rect x="1.7576%" y="213" width="53.0319%" height="15" fill="rgb(244,70,9)"/><text x="2.0076%" y="223.50">analysis</text></g><g><title>type_check_crate (13,665,764 samples, 37.13%)</title><rect x="17.6633%" y="197" width="37.1262%" height="15" fill="rgb(217,125,39)"/><text x="17.9133%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,327,765 samples, 3.61%)</title><rect x="51.1823%" y="181" width="3.6072%" height="15" fill="rgb(235,36,10)"/><text x="51.4323%" y="191.50">wf_c..</text></g><g><title>check_trait_item_well_formed (123,222 samples, 0.33%)</title><rect x="54.4548%" y="165" width="0.3348%" height="15" fill="rgb(251,123,47)"/><text x="54.7048%" y="175.50"></text></g><g><title>codegen_crate (266,093 samples, 0.72%)</title><rect x="54.8175%" y="213" width="0.7229%" height="15" fill="rgb(221,13,13)"/><text x="55.0675%" y="223.50"></text></g><g><title>AST_validation (87,411 samples, 0.24%)</title><rect x="56.0398%" y="197" width="0.2375%" height="15" fill="rgb(238,131,9)"/><text x="56.2898%" y="207.50"></text></g><g><title>complete_gated_feature_checking (41,390 samples, 0.11%)</title><rect x="56.2773%" y="197" width="0.1124%" height="15" fill="rgb(211,50,8)"/><text x="56.5273%" y="207.50"></text></g><g><title>crate_injection (82,611 samples, 0.22%)</title><rect x="56.3897%" y="197" width="0.2244%" height="15" fill="rgb(245,182,24)"/><text x="56.6397%" y="207.50"></text></g><g><title>metadata_load_macro (91,802 samples, 0.25%)</title><rect x="78.2451%" y="165" width="0.2494%" height="15" fill="rgb(242,14,37)"/><text x="78.4951%" y="175.50"></text></g><g><title>metadata_register_crate (186,241 samples, 0.51%)</title><rect x="78.4945%" y="165" width="0.5060%" height="15" fill="rgb(246,228,12)"/><text x="78.7445%" y="175.50"></text></g><g><title>macro_expand_crate (8,306,184 samples, 22.57%)</title><rect x="56.6142%" y="197" width="22.5656%" height="15" fill="rgb(213,55,15)"/><text x="56.8642%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (8,292,404 samples, 22.53%)</title><rect x="56.6516%" y="181" width="22.5282%" height="15" fill="rgb(209,9,3)"/><text x="56.9016%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (66,000 samples, 0.18%)</title><rect x="79.0005%" y="165" width="0.1793%" height="15" fill="rgb(230,59,30)"/><text x="79.2505%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (101,251 samples, 0.28%)</title><rect x="79.1899%" y="197" width="0.2751%" height="15" fill="rgb(209,121,21)"/><text x="79.4399%" y="207.50"></text></g><g><title>finalize_macro_resolutions (179,642 samples, 0.49%)</title><rect x="79.5596%" y="181" width="0.4880%" height="15" fill="rgb(220,109,13)"/><text x="79.8096%" y="191.50"></text></g><g><title>late_resolve_crate (1,267,284 samples, 3.44%)</title><rect x="80.0477%" y="181" width="3.4429%" height="15" fill="rgb(232,18,1)"/><text x="80.2977%" y="191.50">lat..</text></g><g><title>configure_and_expand (10,356,357 samples, 28.14%)</title><rect x="55.5405%" y="213" width="28.1354%" height="15" fill="rgb(215,41,42)"/><text x="55.7905%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,549,978 samples, 4.21%)</title><rect x="79.4650%" y="197" width="4.2109%" height="15" fill="rgb(224,123,36)"/><text x="79.7150%" y="207.50">resol..</text></g><g><title>drop_ast (95,031 samples, 0.26%)</title><rect x="83.6759%" y="213" width="0.2582%" height="15" fill="rgb(240,125,3)"/><text x="83.9259%" y="223.50"></text></g><g><title>early_lint_checks (265,013 samples, 0.72%)</title><rect x="83.9706%" y="213" width="0.7200%" height="15" fill="rgb(205,98,50)"/><text x="84.2206%" y="223.50"></text></g><g><title>free_global_ctxt (1,400,586 samples, 3.81%)</title><rect x="84.6905%" y="213" width="3.8050%" height="15" fill="rgb(205,185,37)"/><text x="84.9405%" y="223.50">free..</text></g><g><title>crate_hash (60,051 samples, 0.16%)</title><rect x="89.6721%" y="197" width="0.1631%" height="15" fill="rgb(238,207,15)"/><text x="89.9221%" y="207.50"></text></g><g><title>generate_crate_metadata (561,056 samples, 1.52%)</title><rect x="88.4956%" y="213" width="1.5242%" height="15" fill="rgb(213,199,42)"/><text x="88.7456%" y="223.50"></text></g><g><title>hir_lowering (1,360,145 samples, 3.70%)</title><rect x="90.0198%" y="213" width="3.6951%" height="15" fill="rgb(235,201,11)"/><text x="90.2698%" y="223.50">hir_..</text></g><g><title>link (37,390 samples, 0.10%)</title><rect x="93.7149%" y="213" width="0.1016%" height="15" fill="rgb(207,46,11)"/><text x="93.9649%" y="223.50"></text></g><g><title>parse_crate (1,221,244 samples, 3.32%)</title><rect x="93.8165%" y="213" width="3.3178%" height="15" fill="rgb(241,35,35)"/><text x="94.0665%" y="223.50">par..</text></g><g><title>prepare_outputs (233,973 samples, 0.64%)</title><rect x="97.1566%" y="213" width="0.6356%" height="15" fill="rgb(243,32,47)"/><text x="97.4066%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (399,884 samples, 1.09%)</title><rect x="97.7923%" y="213" width="1.0864%" height="15" fill="rgb(247,202,23)"/><text x="98.0423%" y="223.50"></text></g><g><title>setup_global_ctxt (99,881 samples, 0.27%)</title><rect x="98.9066%" y="213" width="0.2713%" height="15" fill="rgb(219,102,11)"/><text x="99.1566%" y="223.50"></text></g><g><title>all (36,808,976 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (36,808,976 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (302,574 samples, 0.82%)</title><rect x="99.1780%" y="213" width="0.8220%" height="15" fill="rgb(216,99,12)"/><text x="99.4280%" y="223.50"></text></g></svg></svg>