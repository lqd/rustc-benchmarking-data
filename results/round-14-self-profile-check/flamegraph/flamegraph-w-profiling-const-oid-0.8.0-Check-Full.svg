<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (173,042 samples, 0.13%)</title><rect x="9.5702%" y="133" width="0.1337%" height="15" fill="rgb(227,0,7)"/><text x="9.8202%" y="143.50"></text></g><g><title>item_attrs (227,714 samples, 0.18%)</title><rect x="9.9857%" y="101" width="0.1760%" height="15" fill="rgb(217,0,24)"/><text x="10.2357%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (220,424 samples, 0.17%)</title><rect x="9.9913%" y="85" width="0.1703%" height="15" fill="rgb(221,193,54)"/><text x="10.2413%" y="95.50"></text></g><g><title>codegen_fn_attrs (308,874 samples, 0.24%)</title><rect x="9.9368%" y="117" width="0.2387%" height="15" fill="rgb(248,212,6)"/><text x="10.1868%" y="127.50"></text></g><g><title>adt_drop_tys (286,163 samples, 0.22%)</title><rect x="11.9038%" y="85" width="0.2211%" height="15" fill="rgb(208,68,35)"/><text x="12.1538%" y="95.50"></text></g><g><title>is_copy_raw (678,867 samples, 0.52%)</title><rect x="12.1249%" y="85" width="0.5246%" height="15" fill="rgb(232,128,0)"/><text x="12.3749%" y="95.50"></text></g><g><title>evaluate_obligation (593,735 samples, 0.46%)</title><rect x="12.1907%" y="69" width="0.4588%" height="15" fill="rgb(207,160,47)"/><text x="12.4407%" y="79.50"></text></g><g><title>needs_drop_raw (1,056,502 samples, 0.82%)</title><rect x="11.8468%" y="101" width="0.8164%" height="15" fill="rgb(228,23,34)"/><text x="12.0968%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (208,764 samples, 0.16%)</title><rect x="12.7885%" y="85" width="0.1613%" height="15" fill="rgb(218,30,26)"/><text x="13.0385%" y="95.50"></text></g><g><title>resolve_instance (524,596 samples, 0.41%)</title><rect x="12.6828%" y="101" width="0.4054%" height="15" fill="rgb(220,122,19)"/><text x="12.9328%" y="111.50"></text></g><g><title>thir_body (761,520 samples, 0.59%)</title><rect x="13.0989%" y="101" width="0.5884%" height="15" fill="rgb(250,228,42)"/><text x="13.3489%" y="111.50"></text></g><g><title>mir_const (5,867,367 samples, 4.53%)</title><rect x="9.1618%" y="149" width="4.5338%" height="15" fill="rgb(240,193,28)"/><text x="9.4118%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (5,165,680 samples, 3.99%)</title><rect x="9.7040%" y="133" width="3.9916%" height="15" fill="rgb(216,20,37)"/><text x="9.9540%" y="143.50">unsa..</text></g><g><title>mir_built (4,555,424 samples, 3.52%)</title><rect x="10.1755%" y="117" width="3.5200%" height="15" fill="rgb(206,188,39)"/><text x="10.4255%" y="127.50">mir..</text></g><g><title>thir_body (264,164 samples, 0.20%)</title><rect x="14.8508%" y="85" width="0.2041%" height="15" fill="rgb(217,207,13)"/><text x="15.1008%" y="95.50"></text></g><g><title>mir_const (1,362,006 samples, 1.05%)</title><rect x="14.0046%" y="133" width="1.0524%" height="15" fill="rgb(231,73,38)"/><text x="14.2546%" y="143.50"></text></g><g><title>unsafety_check_result (1,111,821 samples, 0.86%)</title><rect x="14.1980%" y="117" width="0.8591%" height="15" fill="rgb(225,20,46)"/><text x="14.4480%" y="127.50"></text></g><g><title>mir_built (937,790 samples, 0.72%)</title><rect x="14.3324%" y="101" width="0.7246%" height="15" fill="rgb(210,31,41)"/><text x="14.5824%" y="111.50"></text></g><g><title>mir_promoted (8,401,215 samples, 6.49%)</title><rect x="8.5870%" y="165" width="6.4917%" height="15" fill="rgb(221,200,47)"/><text x="8.8370%" y="175.50">mir_promo..</text></g><g><title>mir_const_qualif (1,790,040 samples, 1.38%)</title><rect x="13.6955%" y="149" width="1.3832%" height="15" fill="rgb(226,26,5)"/><text x="13.9455%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (218,061 samples, 0.17%)</title><rect x="15.0787%" y="165" width="0.1685%" height="15" fill="rgb(249,33,26)"/><text x="15.3287%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (568,514 samples, 0.44%)</title><rect x="15.2472%" y="165" width="0.4393%" height="15" fill="rgb(235,183,28)"/><text x="15.4972%" y="175.50"></text></g><g><title>normalize_projection_ty (348,332 samples, 0.27%)</title><rect x="15.4173%" y="149" width="0.2692%" height="15" fill="rgb(221,5,38)"/><text x="15.6673%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,354,551 samples, 1.05%)</title><rect x="15.8108%" y="165" width="1.0467%" height="15" fill="rgb(247,18,42)"/><text x="16.0608%" y="175.50"></text></g><g><title>MIR_borrow_checking (20,389,515 samples, 15.76%)</title><rect x="1.1084%" y="197" width="15.7552%" height="15" fill="rgb(241,131,45)"/><text x="1.3584%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (20,286,764 samples, 15.68%)</title><rect x="1.1878%" y="181" width="15.6758%" height="15" fill="rgb(249,31,29)"/><text x="1.4378%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (731,788 samples, 0.57%)</title><rect x="16.8636%" y="197" width="0.5655%" height="15" fill="rgb(225,111,53)"/><text x="17.1136%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (677,218 samples, 0.52%)</title><rect x="16.9058%" y="181" width="0.5233%" height="15" fill="rgb(238,160,17)"/><text x="17.1558%" y="191.50"></text></g><g><title>hir_module_items (354,314 samples, 0.27%)</title><rect x="17.4290%" y="197" width="0.2738%" height="15" fill="rgb(214,148,48)"/><text x="17.6790%" y="207.50"></text></g><g><title>item_attrs (169,851 samples, 0.13%)</title><rect x="18.6427%" y="117" width="0.1312%" height="15" fill="rgb(232,36,49)"/><text x="18.8927%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (153,551 samples, 0.12%)</title><rect x="18.6553%" y="101" width="0.1187%" height="15" fill="rgb(209,103,24)"/><text x="18.9053%" y="111.50"></text></g><g><title>codegen_fn_attrs (480,635 samples, 0.37%)</title><rect x="18.4948%" y="133" width="0.3714%" height="15" fill="rgb(229,88,8)"/><text x="18.7448%" y="143.50"></text></g><g><title>codegen_fn_attrs (791,238 samples, 0.61%)</title><rect x="18.2653%" y="165" width="0.6114%" height="15" fill="rgb(213,181,19)"/><text x="18.5153%" y="175.50"></text></g><g><title>should_inherit_track_caller (682,677 samples, 0.53%)</title><rect x="18.3491%" y="149" width="0.5275%" height="15" fill="rgb(254,191,54)"/><text x="18.5991%" y="159.50"></text></g><g><title>check_mod_attrs (1,471,976 samples, 1.14%)</title><rect x="17.7397%" y="181" width="1.1374%" height="15" fill="rgb(241,83,37)"/><text x="17.9897%" y="191.50"></text></g><g><title>check_mod_const_bodies (244,173 samples, 0.19%)</title><rect x="18.8771%" y="181" width="0.1887%" height="15" fill="rgb(233,36,39)"/><text x="19.1271%" y="191.50"></text></g><g><title>check_mod_loops (139,461 samples, 0.11%)</title><rect x="19.0658%" y="181" width="0.1078%" height="15" fill="rgb(226,3,54)"/><text x="19.3158%" y="191.50"></text></g><g><title>lookup_deprecation_entry (245,513 samples, 0.19%)</title><rect x="19.4481%" y="165" width="0.1897%" height="15" fill="rgb(245,192,40)"/><text x="19.6981%" y="175.50"></text></g><g><title>stability_index (165,412 samples, 0.13%)</title><rect x="19.5100%" y="149" width="0.1278%" height="15" fill="rgb(238,167,29)"/><text x="19.7600%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (723,008 samples, 0.56%)</title><rect x="19.1993%" y="181" width="0.5587%" height="15" fill="rgb(232,182,51)"/><text x="19.4493%" y="191.50"></text></g><g><title>misc_checking_1 (2,779,531 samples, 2.15%)</title><rect x="17.7032%" y="197" width="2.1478%" height="15" fill="rgb(231,60,39)"/><text x="17.9532%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (661,407 samples, 0.51%)</title><rect x="19.8521%" y="181" width="0.5111%" height="15" fill="rgb(208,69,12)"/><text x="20.1021%" y="191.50"></text></g><g><title>check_mod_liveness (564,155 samples, 0.44%)</title><rect x="19.9273%" y="165" width="0.4359%" height="15" fill="rgb(235,93,37)"/><text x="20.1773%" y="175.50"></text></g><g><title>misc_checking_2 (1,242,144 samples, 0.96%)</title><rect x="19.8510%" y="197" width="0.9598%" height="15" fill="rgb(213,116,39)"/><text x="20.1010%" y="207.50"></text></g><g><title>match_checking (579,287 samples, 0.45%)</title><rect x="20.3632%" y="181" width="0.4476%" height="15" fill="rgb(222,207,29)"/><text x="20.6132%" y="191.50"></text></g><g><title>check_match (549,077 samples, 0.42%)</title><rect x="20.3865%" y="165" width="0.4243%" height="15" fill="rgb(206,96,30)"/><text x="20.6365%" y="175.50"></text></g><g><title>check_private_in_public (194,332 samples, 0.15%)</title><rect x="20.8180%" y="181" width="0.1502%" height="15" fill="rgb(218,138,4)"/><text x="21.0680%" y="191.50"></text></g><g><title>death_checking (534,346 samples, 0.41%)</title><rect x="20.9682%" y="181" width="0.4129%" height="15" fill="rgb(250,191,14)"/><text x="21.2182%" y="191.50"></text></g><g><title>item_attrs (187,923 samples, 0.15%)</title><rect x="21.2359%" y="165" width="0.1452%" height="15" fill="rgb(239,60,40)"/><text x="21.4859%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (185,863 samples, 0.14%)</title><rect x="21.2375%" y="149" width="0.1436%" height="15" fill="rgb(206,27,48)"/><text x="21.4875%" y="159.50"></text></g><g><title>eval_to_const_value_raw (133,001 samples, 0.10%)</title><rect x="21.9674%" y="149" width="0.1028%" height="15" fill="rgb(225,35,8)"/><text x="22.2174%" y="159.50"></text></g><g><title>eval_to_const_value_raw (129,451 samples, 0.10%)</title><rect x="21.9702%" y="133" width="0.1000%" height="15" fill="rgb(250,213,24)"/><text x="22.2202%" y="143.50"></text></g><g><title>param_env (221,673 samples, 0.17%)</title><rect x="22.0702%" y="149" width="0.1713%" height="15" fill="rgb(247,123,22)"/><text x="22.3202%" y="159.50"></text></g><g><title>crate_lints (1,459,576 samples, 1.13%)</title><rect x="21.3824%" y="165" width="1.1278%" height="15" fill="rgb(231,138,38)"/><text x="21.6324%" y="175.50"></text></g><g><title>type_of (339,744 samples, 0.26%)</title><rect x="22.2477%" y="149" width="0.2625%" height="15" fill="rgb(231,145,46)"/><text x="22.4977%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (263,094 samples, 0.20%)</title><rect x="22.3070%" y="133" width="0.2033%" height="15" fill="rgb(251,118,11)"/><text x="22.5570%" y="143.50"></text></g><g><title>lint_checking (1,861,790 samples, 1.44%)</title><rect x="21.3811%" y="181" width="1.4386%" height="15" fill="rgb(217,147,25)"/><text x="21.6311%" y="191.50"></text></g><g><title>module_lints (400,464 samples, 0.31%)</title><rect x="22.5102%" y="165" width="0.3094%" height="15" fill="rgb(247,81,37)"/><text x="22.7602%" y="175.50"></text></g><g><title>lint_mod (395,834 samples, 0.31%)</title><rect x="22.5138%" y="149" width="0.3059%" height="15" fill="rgb(209,12,38)"/><text x="22.7638%" y="159.50"></text></g><g><title>privacy_access_levels (208,422 samples, 0.16%)</title><rect x="22.8197%" y="181" width="0.1610%" height="15" fill="rgb(227,1,9)"/><text x="23.0697%" y="191.50"></text></g><g><title>privacy_checking_modules (670,448 samples, 0.52%)</title><rect x="22.9807%" y="181" width="0.5181%" height="15" fill="rgb(248,47,43)"/><text x="23.2307%" y="191.50"></text></g><g><title>check_mod_privacy (666,887 samples, 0.52%)</title><rect x="22.9835%" y="165" width="0.5153%" height="15" fill="rgb(221,10,30)"/><text x="23.2335%" y="175.50"></text></g><g><title>misc_checking_3 (3,491,659 samples, 2.70%)</title><rect x="20.8108%" y="197" width="2.6980%" height="15" fill="rgb(210,229,1)"/><text x="21.0608%" y="207.50">mi..</text></g><g><title>mir_const_qualif (154,021 samples, 0.12%)</title><rect x="23.7990%" y="101" width="0.1190%" height="15" fill="rgb(222,148,37)"/><text x="24.0490%" y="111.50"></text></g><g><title>mir_borrowck (369,664 samples, 0.29%)</title><rect x="24.0223%" y="69" width="0.2856%" height="15" fill="rgb(234,67,33)"/><text x="24.2723%" y="79.50"></text></g><g><title>mir_for_ctfe (504,985 samples, 0.39%)</title><rect x="23.9180%" y="101" width="0.3902%" height="15" fill="rgb(247,98,35)"/><text x="24.1680%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (465,275 samples, 0.36%)</title><rect x="23.9487%" y="85" width="0.3595%" height="15" fill="rgb(247,138,52)"/><text x="24.1987%" y="95.50"></text></g><g><title>eval_to_const_value_raw (221,623 samples, 0.17%)</title><rect x="24.3147%" y="85" width="0.1712%" height="15" fill="rgb(213,79,30)"/><text x="24.5647%" y="95.50"></text></g><g><title>eval_to_const_value_raw (219,593 samples, 0.17%)</title><rect x="24.3162%" y="69" width="0.1697%" height="15" fill="rgb(246,177,23)"/><text x="24.5662%" y="79.50"></text></g><g><title>eval_to_allocation_raw (215,313 samples, 0.17%)</title><rect x="24.3195%" y="53" width="0.1664%" height="15" fill="rgb(230,62,27)"/><text x="24.5695%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (232,593 samples, 0.18%)</title><rect x="24.3086%" y="101" width="0.1797%" height="15" fill="rgb(216,154,8)"/><text x="24.5586%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,245,584 samples, 0.96%)</title><rect x="23.7006%" y="149" width="0.9625%" height="15" fill="rgb(244,35,45)"/><text x="23.9506%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,235,944 samples, 0.96%)</title><rect x="23.7081%" y="133" width="0.9550%" height="15" fill="rgb(251,115,12)"/><text x="23.9581%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,234,074 samples, 0.95%)</title><rect x="23.7095%" y="117" width="0.9536%" height="15" fill="rgb(240,54,50)"/><text x="23.9595%" y="127.50"></text></g><g><title>typeck (226,193 samples, 0.17%)</title><rect x="24.4883%" y="101" width="0.1748%" height="15" fill="rgb(233,84,52)"/><text x="24.7383%" y="111.50"></text></g><g><title>impl_parent (1,788,049 samples, 1.38%)</title><rect x="27.6468%" y="133" width="1.3816%" height="15" fill="rgb(207,117,47)"/><text x="27.8968%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (935,167 samples, 0.72%)</title><rect x="28.3058%" y="117" width="0.7226%" height="15" fill="rgb(249,43,39)"/><text x="28.5558%" y="127.50"></text></g><g><title>impl_trait_ref (3,690,991 samples, 2.85%)</title><rect x="29.0301%" y="133" width="2.8521%" height="15" fill="rgb(209,38,44)"/><text x="29.2801%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,574,900 samples, 1.99%)</title><rect x="29.8925%" y="117" width="1.9896%" height="15" fill="rgb(236,212,23)"/><text x="30.1425%" y="127.50">m..</text></g><g><title>trait_impls_of (724,569 samples, 0.56%)</title><rect x="32.0105%" y="133" width="0.5599%" height="15" fill="rgb(242,79,21)"/><text x="32.2605%" y="143.50"></text></g><g><title>implementations_of_trait (162,164 samples, 0.13%)</title><rect x="32.4451%" y="117" width="0.1253%" height="15" fill="rgb(211,96,35)"/><text x="32.6951%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (140,214 samples, 0.11%)</title><rect x="32.4621%" y="101" width="0.1083%" height="15" fill="rgb(253,215,40)"/><text x="32.7121%" y="111.50"></text></g><g><title>coherent_trait (11,617,319 samples, 8.98%)</title><rect x="23.5953%" y="165" width="8.9768%" height="15" fill="rgb(211,81,21)"/><text x="23.8453%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (10,091,902 samples, 7.80%)</title><rect x="24.7740%" y="149" width="7.7981%" height="15" fill="rgb(208,190,38)"/><text x="25.0240%" y="159.50">specializat..</text></g><g><title>coherence_checking (11,774,040 samples, 9.10%)</title><rect x="23.5667%" y="181" width="9.0979%" height="15" fill="rgb(235,213,38)"/><text x="23.8167%" y="191.50">coherence_che..</text></g><g><title>adt_sized_constraint (166,622 samples, 0.13%)</title><rect x="47.1113%" y="133" width="0.1288%" height="15" fill="rgb(237,122,38)"/><text x="47.3613%" y="143.50"></text></g><g><title>associated_item (507,516 samples, 0.39%)</title><rect x="47.3863%" y="117" width="0.3922%" height="15" fill="rgb(244,218,35)"/><text x="47.6363%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (404,945 samples, 0.31%)</title><rect x="47.4656%" y="101" width="0.3129%" height="15" fill="rgb(240,68,47)"/><text x="47.7156%" y="111.50"></text></g><g><title>associated_items (724,437 samples, 0.56%)</title><rect x="47.2460%" y="133" width="0.5598%" height="15" fill="rgb(210,16,53)"/><text x="47.4960%" y="143.50"></text></g><g><title>dropck_outlives (349,166 samples, 0.27%)</title><rect x="47.8624%" y="133" width="0.2698%" height="15" fill="rgb(235,124,12)"/><text x="48.1124%" y="143.50"></text></g><g><title>adt_dtorck_constraint (190,302 samples, 0.15%)</title><rect x="47.9852%" y="117" width="0.1470%" height="15" fill="rgb(224,169,11)"/><text x="48.2352%" y="127.50"></text></g><g><title>mir_borrowck (169,032 samples, 0.13%)</title><rect x="48.3037%" y="69" width="0.1306%" height="15" fill="rgb(250,166,2)"/><text x="48.5537%" y="79.50"></text></g><g><title>mir_for_ctfe (248,882 samples, 0.19%)</title><rect x="48.2429%" y="101" width="0.1923%" height="15" fill="rgb(242,216,29)"/><text x="48.4929%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (228,352 samples, 0.18%)</title><rect x="48.2588%" y="85" width="0.1764%" height="15" fill="rgb(230,116,27)"/><text x="48.5088%" y="95.50"></text></g><g><title>eval_to_allocation_raw (380,704 samples, 0.29%)</title><rect x="48.1414%" y="117" width="0.2942%" height="15" fill="rgb(228,99,48)"/><text x="48.3914%" y="127.50"></text></g><g><title>mir_const_qualif (136,700 samples, 0.11%)</title><rect x="48.5118%" y="85" width="0.1056%" height="15" fill="rgb(253,11,6)"/><text x="48.7618%" y="95.50"></text></g><g><title>mir_borrowck (277,923 samples, 0.21%)</title><rect x="48.7228%" y="53" width="0.2148%" height="15" fill="rgb(247,143,39)"/><text x="48.9728%" y="63.50"></text></g><g><title>mir_for_ctfe (415,326 samples, 0.32%)</title><rect x="48.6175%" y="85" width="0.3209%" height="15" fill="rgb(236,97,10)"/><text x="48.8675%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (378,426 samples, 0.29%)</title><rect x="48.6460%" y="69" width="0.2924%" height="15" fill="rgb(233,208,19)"/><text x="48.8960%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,044,100 samples, 0.81%)</title><rect x="48.1323%" y="133" width="0.8068%" height="15" fill="rgb(216,164,2)"/><text x="48.3823%" y="143.50"></text></g><g><title>eval_to_const_value_raw (651,506 samples, 0.50%)</title><rect x="48.4356%" y="117" width="0.5034%" height="15" fill="rgb(220,129,5)"/><text x="48.6856%" y="127.50"></text></g><g><title>eval_to_allocation_raw (639,256 samples, 0.49%)</title><rect x="48.4451%" y="101" width="0.4940%" height="15" fill="rgb(242,17,10)"/><text x="48.6951%" y="111.50"></text></g><g><title>generics_of (1,043,833 samples, 0.81%)</title><rect x="52.9027%" y="117" width="0.8066%" height="15" fill="rgb(242,107,0)"/><text x="53.1527%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (784,420 samples, 0.61%)</title><rect x="53.1031%" y="101" width="0.6061%" height="15" fill="rgb(251,28,31)"/><text x="53.3531%" y="111.50"></text></g><g><title>impl_polarity (180,363 samples, 0.14%)</title><rect x="53.7493%" y="117" width="0.1394%" height="15" fill="rgb(233,223,10)"/><text x="53.9993%" y="127.50"></text></g><g><title>impl_trait_ref (1,033,828 samples, 0.80%)</title><rect x="53.8886%" y="117" width="0.7988%" height="15" fill="rgb(215,21,27)"/><text x="54.1386%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (817,786 samples, 0.63%)</title><rect x="54.0556%" y="101" width="0.6319%" height="15" fill="rgb(232,23,21)"/><text x="54.3056%" y="111.50"></text></g><g><title>opt_def_kind (197,432 samples, 0.15%)</title><rect x="54.9748%" y="101" width="0.1526%" height="15" fill="rgb(244,5,23)"/><text x="55.2248%" y="111.50"></text></g><g><title>explicit_predicates_of (198,804 samples, 0.15%)</title><rect x="55.3298%" y="85" width="0.1536%" height="15" fill="rgb(226,81,46)"/><text x="55.5798%" y="95.50"></text></g><g><title>predicates_of (1,099,691 samples, 0.85%)</title><rect x="54.7504%" y="117" width="0.8497%" height="15" fill="rgb(247,70,30)"/><text x="55.0004%" y="127.50"></text></g><g><title>predicates_defined_on (611,748 samples, 0.47%)</title><rect x="55.1274%" y="101" width="0.4727%" height="15" fill="rgb(212,68,19)"/><text x="55.3774%" y="111.50"></text></g><g><title>inferred_outlives_of (151,053 samples, 0.12%)</title><rect x="55.4834%" y="85" width="0.1167%" height="15" fill="rgb(240,187,13)"/><text x="55.7334%" y="95.50"></text></g><g><title>specializes (2,838,187 samples, 2.19%)</title><rect x="55.6001%" y="117" width="2.1931%" height="15" fill="rgb(223,113,26)"/><text x="55.8501%" y="127.50">s..</text></g><g><title>param_env (1,675,384 samples, 1.29%)</title><rect x="56.4986%" y="101" width="1.2946%" height="15" fill="rgb(206,192,2)"/><text x="56.7486%" y="111.50"></text></g><g><title>def_span (751,863 samples, 0.58%)</title><rect x="57.2122%" y="85" width="0.5810%" height="15" fill="rgb(241,108,4)"/><text x="57.4622%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (666,282 samples, 0.51%)</title><rect x="57.2784%" y="69" width="0.5148%" height="15" fill="rgb(247,173,49)"/><text x="57.5284%" y="79.50"></text></g><g><title>trait_impls_of (323,754 samples, 0.25%)</title><rect x="57.8119%" y="117" width="0.2502%" height="15" fill="rgb(224,114,35)"/><text x="58.0619%" y="127.50"></text></g><g><title>evaluate_obligation (11,837,865 samples, 9.15%)</title><rect x="48.9390%" y="133" width="9.1472%" height="15" fill="rgb(245,159,27)"/><text x="49.1890%" y="143.50">evaluate_obli..</text></g><g><title>fn_sig (147,614 samples, 0.11%)</title><rect x="58.1138%" y="133" width="0.1141%" height="15" fill="rgb(245,172,44)"/><text x="58.3638%" y="143.50"></text></g><g><title>generics_of (408,928 samples, 0.32%)</title><rect x="58.2279%" y="133" width="0.3160%" height="15" fill="rgb(236,23,11)"/><text x="58.4779%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (314,406 samples, 0.24%)</title><rect x="58.3009%" y="117" width="0.2429%" height="15" fill="rgb(205,117,38)"/><text x="58.5509%" y="127.50"></text></g><g><title>impl_item_implementor_ids (144,821 samples, 0.11%)</title><rect x="58.5438%" y="133" width="0.1119%" height="15" fill="rgb(237,72,25)"/><text x="58.7938%" y="143.50"></text></g><g><title>method_autoderef_steps (195,492 samples, 0.15%)</title><rect x="58.8701%" y="133" width="0.1511%" height="15" fill="rgb(244,70,9)"/><text x="59.1201%" y="143.50"></text></g><g><title>explicit_predicates_of (134,953 samples, 0.10%)</title><rect x="59.4100%" y="101" width="0.1043%" height="15" fill="rgb(217,125,39)"/><text x="59.6600%" y="111.50"></text></g><g><title>predicates_of (463,214 samples, 0.36%)</title><rect x="59.2066%" y="133" width="0.3579%" height="15" fill="rgb(235,36,10)"/><text x="59.4566%" y="143.50"></text></g><g><title>predicates_defined_on (298,574 samples, 0.23%)</title><rect x="59.3339%" y="117" width="0.2307%" height="15" fill="rgb(251,123,47)"/><text x="59.5839%" y="127.50"></text></g><g><title>specializes (226,572 samples, 0.18%)</title><rect x="59.5944%" y="133" width="0.1751%" height="15" fill="rgb(221,13,13)"/><text x="59.8444%" y="143.50"></text></g><g><title>type_of (283,133 samples, 0.22%)</title><rect x="59.7773%" y="133" width="0.2188%" height="15" fill="rgb(238,131,9)"/><text x="60.0273%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (252,723 samples, 0.20%)</title><rect x="59.8008%" y="117" width="0.1953%" height="15" fill="rgb(211,50,8)"/><text x="60.0508%" y="127.50"></text></g><g><title>eval_to_const_value_raw (203,632 samples, 0.16%)</title><rect x="62.5063%" y="117" width="0.1573%" height="15" fill="rgb(245,182,24)"/><text x="62.7563%" y="127.50"></text></g><g><title>eval_to_allocation_raw (200,922 samples, 0.16%)</title><rect x="62.5084%" y="101" width="0.1553%" height="15" fill="rgb(242,14,37)"/><text x="62.7584%" y="111.50"></text></g><g><title>adt_def (214,312 samples, 0.17%)</title><rect x="62.7640%" y="85" width="0.1656%" height="15" fill="rgb(246,228,12)"/><text x="63.0140%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (213,962 samples, 0.17%)</title><rect x="62.7642%" y="69" width="0.1653%" height="15" fill="rgb(213,55,15)"/><text x="63.0142%" y="79.50"></text></g><g><title>item_attrs (200,252 samples, 0.15%)</title><rect x="62.7748%" y="53" width="0.1547%" height="15" fill="rgb(209,9,3)"/><text x="63.0248%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (199,732 samples, 0.15%)</title><rect x="62.7752%" y="37" width="0.1543%" height="15" fill="rgb(230,59,30)"/><text x="63.0252%" y="47.50"></text></g><g><title>adt_sized_constraint (226,742 samples, 0.18%)</title><rect x="62.7620%" y="101" width="0.1752%" height="15" fill="rgb(209,121,21)"/><text x="63.0120%" y="111.50"></text></g><g><title>evaluate_obligation (394,155 samples, 0.30%)</title><rect x="62.6636%" y="117" width="0.3046%" height="15" fill="rgb(220,109,13)"/><text x="62.9136%" y="127.50"></text></g><g><title>typeck (4,126,656 samples, 3.19%)</title><rect x="59.9961%" y="133" width="3.1887%" height="15" fill="rgb(232,18,1)"/><text x="60.2461%" y="143.50">typ..</text></g><g><title>item_bodies_checking (39,493,386 samples, 30.52%)</title><rect x="32.7245%" y="181" width="30.5169%" height="15" fill="rgb(215,41,42)"/><text x="32.9745%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (39,489,586 samples, 30.51%)</title><rect x="32.7274%" y="165" width="30.5139%" height="15" fill="rgb(224,123,36)"/><text x="32.9774%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (39,417,375 samples, 30.46%)</title><rect x="32.7832%" y="149" width="30.4581%" height="15" fill="rgb(240,125,3)"/><text x="33.0332%" y="159.50">typeck</text></g><g><title>item_types_checking (1,217,663 samples, 0.94%)</title><rect x="63.2413%" y="181" width="0.9409%" height="15" fill="rgb(205,98,50)"/><text x="63.4913%" y="191.50"></text></g><g><title>check_mod_item_types (1,212,063 samples, 0.94%)</title><rect x="63.2457%" y="165" width="0.9366%" height="15" fill="rgb(205,185,37)"/><text x="63.4957%" y="175.50"></text></g><g><title>typeck (174,592 samples, 0.13%)</title><rect x="64.0473%" y="149" width="0.1349%" height="15" fill="rgb(238,207,15)"/><text x="64.2973%" y="159.50"></text></g><g><title>fn_sig (510,048 samples, 0.39%)</title><rect x="64.6309%" y="149" width="0.3941%" height="15" fill="rgb(213,199,42)"/><text x="64.8809%" y="159.50"></text></g><g><title>lint_levels (427,185 samples, 0.33%)</title><rect x="65.3021%" y="101" width="0.3301%" height="15" fill="rgb(235,201,11)"/><text x="65.5521%" y="111.50"></text></g><g><title>is_late_bound_map (591,726 samples, 0.46%)</title><rect x="65.1761%" y="133" width="0.4572%" height="15" fill="rgb(207,46,11)"/><text x="65.4261%" y="143.50"></text></g><g><title>resolve_lifetimes (579,826 samples, 0.45%)</title><rect x="65.1853%" y="117" width="0.4480%" height="15" fill="rgb(241,35,35)"/><text x="65.4353%" y="127.50"></text></g><g><title>named_region_map (519,034 samples, 0.40%)</title><rect x="65.6333%" y="133" width="0.4011%" height="15" fill="rgb(243,32,47)"/><text x="65.8833%" y="143.50"></text></g><g><title>resolve_lifetimes (477,313 samples, 0.37%)</title><rect x="65.6656%" y="117" width="0.3688%" height="15" fill="rgb(247,202,23)"/><text x="65.9156%" y="127.50"></text></g><g><title>generics_of (1,335,782 samples, 1.03%)</title><rect x="65.0250%" y="149" width="1.0322%" height="15" fill="rgb(219,102,11)"/><text x="65.2750%" y="159.50"></text></g><g><title>impl_trait_ref (156,502 samples, 0.12%)</title><rect x="66.0572%" y="149" width="0.1209%" height="15" fill="rgb(243,110,44)"/><text x="66.3072%" y="159.50"></text></g><g><title>explicit_predicates_of (221,171 samples, 0.17%)</title><rect x="66.3889%" y="117" width="0.1709%" height="15" fill="rgb(222,74,54)"/><text x="66.6389%" y="127.50"></text></g><g><title>predicates_of (892,463 samples, 0.69%)</title><rect x="66.1781%" y="149" width="0.6896%" height="15" fill="rgb(216,99,12)"/><text x="66.4281%" y="159.50"></text></g><g><title>predicates_defined_on (783,580 samples, 0.61%)</title><rect x="66.2623%" y="133" width="0.6055%" height="15" fill="rgb(226,22,26)"/><text x="66.5123%" y="143.50"></text></g><g><title>inferred_outlives_of (398,564 samples, 0.31%)</title><rect x="66.5598%" y="117" width="0.3080%" height="15" fill="rgb(217,163,10)"/><text x="66.8098%" y="127.50"></text></g><g><title>inferred_outlives_crate (354,133 samples, 0.27%)</title><rect x="66.5941%" y="101" width="0.2736%" height="15" fill="rgb(213,25,53)"/><text x="66.8441%" y="111.50"></text></g><g><title>type_of (199,833 samples, 0.15%)</title><rect x="66.7133%" y="85" width="0.1544%" height="15" fill="rgb(252,105,26)"/><text x="66.9633%" y="95.50"></text></g><g><title>type_collecting (3,664,090 samples, 2.83%)</title><rect x="64.1841%" y="181" width="2.8313%" height="15" fill="rgb(220,39,43)"/><text x="64.4341%" y="191.50">ty..</text></g><g><title>collect_mod_item_types (3,645,420 samples, 2.82%)</title><rect x="64.1985%" y="165" width="2.8168%" height="15" fill="rgb(229,68,48)"/><text x="64.4485%" y="175.50">co..</text></g><g><title>type_of (191,061 samples, 0.15%)</title><rect x="66.8678%" y="149" width="0.1476%" height="15" fill="rgb(252,8,32)"/><text x="67.1178%" y="159.50"></text></g><g><title>evaluate_obligation (193,882 samples, 0.15%)</title><rect x="67.9536%" y="149" width="0.1498%" height="15" fill="rgb(223,20,43)"/><text x="68.2036%" y="159.50"></text></g><g><title>param_env (165,741 samples, 0.13%)</title><rect x="68.1733%" y="149" width="0.1281%" height="15" fill="rgb(229,81,49)"/><text x="68.4233%" y="159.50"></text></g><g><title>region_scope_tree (382,466 samples, 0.30%)</title><rect x="68.3187%" y="149" width="0.2955%" height="15" fill="rgb(236,28,36)"/><text x="68.5687%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,916,976 samples, 1.48%)</title><rect x="67.1373%" y="165" width="1.4813%" height="15" fill="rgb(249,185,26)"/><text x="67.3873%" y="175.50"></text></g><g><title>eval_to_const_value_raw (222,332 samples, 0.17%)</title><rect x="69.2813%" y="149" width="0.1718%" height="15" fill="rgb(249,174,33)"/><text x="69.5313%" y="159.50"></text></g><g><title>eval_to_const_value_raw (221,212 samples, 0.17%)</title><rect x="69.2821%" y="133" width="0.1709%" height="15" fill="rgb(233,201,37)"/><text x="69.5321%" y="143.50"></text></g><g><title>eval_to_allocation_raw (219,072 samples, 0.17%)</title><rect x="69.2838%" y="117" width="0.1693%" height="15" fill="rgb(221,78,26)"/><text x="69.5338%" y="127.50"></text></g><g><title>evaluate_obligation (283,652 samples, 0.22%)</title><rect x="69.4531%" y="149" width="0.2192%" height="15" fill="rgb(250,127,30)"/><text x="69.7031%" y="159.50"></text></g><g><title>param_env (170,404 samples, 0.13%)</title><rect x="69.7187%" y="149" width="0.1317%" height="15" fill="rgb(230,49,44)"/><text x="69.9687%" y="159.50"></text></g><g><title>analysis (89,782,962 samples, 69.38%)</title><rect x="0.6490%" y="213" width="69.3761%" height="15" fill="rgb(229,67,23)"/><text x="0.8990%" y="223.50">analysis</text></g><g><title>type_check_crate (60,198,914 samples, 46.52%)</title><rect x="23.5088%" y="197" width="46.5162%" height="15" fill="rgb(249,83,47)"/><text x="23.7588%" y="207.50">type_check_crate</text></g><g><title>wf_checking (3,889,933 samples, 3.01%)</title><rect x="67.0193%" y="181" width="3.0058%" height="15" fill="rgb(215,43,3)"/><text x="67.2693%" y="191.50">wf_..</text></g><g><title>check_item_well_formed (1,820,206 samples, 1.41%)</title><rect x="68.6186%" y="165" width="1.4065%" height="15" fill="rgb(238,154,13)"/><text x="68.8686%" y="175.50"></text></g><g><title>codegen_crate (320,363 samples, 0.25%)</title><rect x="70.0350%" y="213" width="0.2475%" height="15" fill="rgb(219,56,2)"/><text x="70.2850%" y="223.50"></text></g><g><title>AST_validation (254,593 samples, 0.20%)</title><rect x="70.4608%" y="197" width="0.1967%" height="15" fill="rgb(233,0,4)"/><text x="70.7108%" y="207.50"></text></g><g><title>complete_gated_feature_checking (148,751 samples, 0.11%)</title><rect x="70.6575%" y="197" width="0.1149%" height="15" fill="rgb(235,30,7)"/><text x="70.9075%" y="207.50"></text></g><g><title>metadata_load_macro (477,986 samples, 0.37%)</title><rect x="84.4313%" y="165" width="0.3693%" height="15" fill="rgb(250,79,13)"/><text x="84.6813%" y="175.50"></text></g><g><title>metadata_register_crate (207,122 samples, 0.16%)</title><rect x="84.8006%" y="165" width="0.1600%" height="15" fill="rgb(211,146,34)"/><text x="85.0506%" y="175.50"></text></g><g><title>macro_expand_crate (18,472,444 samples, 14.27%)</title><rect x="70.8527%" y="197" width="14.2738%" height="15" fill="rgb(228,22,38)"/><text x="71.1027%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (18,446,864 samples, 14.25%)</title><rect x="70.8725%" y="181" width="14.2540%" height="15" fill="rgb(235,168,5)"/><text x="71.1225%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (214,612 samples, 0.17%)</title><rect x="84.9607%" y="165" width="0.1658%" height="15" fill="rgb(221,155,16)"/><text x="85.2107%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (228,743 samples, 0.18%)</title><rect x="85.1300%" y="197" width="0.1768%" height="15" fill="rgb(215,215,53)"/><text x="85.3800%" y="207.50"></text></g><g><title>finalize_macro_resolutions (430,604 samples, 0.33%)</title><rect x="85.3873%" y="181" width="0.3327%" height="15" fill="rgb(223,4,10)"/><text x="85.6373%" y="191.50"></text></g><g><title>late_resolve_crate (3,053,343 samples, 2.36%)</title><rect x="85.7201%" y="181" width="2.3593%" height="15" fill="rgb(234,103,6)"/><text x="85.9701%" y="191.50">l..</text></g><g><title>configure_and_expand (23,262,047 samples, 17.97%)</title><rect x="70.2826%" y="213" width="17.9748%" height="15" fill="rgb(227,97,0)"/><text x="70.5326%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (3,818,553 samples, 2.95%)</title><rect x="85.3067%" y="197" width="2.9506%" height="15" fill="rgb(234,150,53)"/><text x="85.5567%" y="207.50">res..</text></g><g><title>drop_ast (320,794 samples, 0.25%)</title><rect x="88.2574%" y="213" width="0.2479%" height="15" fill="rgb(228,201,54)"/><text x="88.5074%" y="223.50"></text></g><g><title>early_lint_checks (762,318 samples, 0.59%)</title><rect x="88.5164%" y="213" width="0.5890%" height="15" fill="rgb(222,22,37)"/><text x="88.7664%" y="223.50"></text></g><g><title>free_global_ctxt (2,690,790 samples, 2.08%)</title><rect x="89.1054%" y="213" width="2.0792%" height="15" fill="rgb(237,53,32)"/><text x="89.3554%" y="223.50">f..</text></g><g><title>promoted_mir (199,851 samples, 0.15%)</title><rect x="92.1078%" y="197" width="0.1544%" height="15" fill="rgb(233,25,53)"/><text x="92.3578%" y="207.50"></text></g><g><title>generate_crate_metadata (1,414,416 samples, 1.09%)</title><rect x="91.1846%" y="213" width="1.0929%" height="15" fill="rgb(210,40,34)"/><text x="91.4346%" y="223.50"></text></g><g><title>hir_lowering (5,948,416 samples, 4.60%)</title><rect x="92.2775%" y="213" width="4.5964%" height="15" fill="rgb(241,220,44)"/><text x="92.5275%" y="223.50">hir_l..</text></g><g><title>parse_crate (2,254,795 samples, 1.74%)</title><rect x="96.9057%" y="213" width="1.7423%" height="15" fill="rgb(235,28,35)"/><text x="97.1557%" y="223.50"></text></g><g><title>prepare_outputs (334,704 samples, 0.26%)</title><rect x="98.6552%" y="213" width="0.2586%" height="15" fill="rgb(210,56,17)"/><text x="98.9052%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (898,000 samples, 0.69%)</title><rect x="98.9138%" y="213" width="0.6939%" height="15" fill="rgb(224,130,29)"/><text x="99.1638%" y="223.50"></text></g><g><title>setup_global_ctxt (149,692 samples, 0.12%)</title><rect x="99.6162%" y="213" width="0.1157%" height="15" fill="rgb(235,212,8)"/><text x="99.8662%" y="223.50"></text></g><g><title>all (129,414,919 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,33,50)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (129,414,919 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,149,13)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (347,054 samples, 0.27%)</title><rect x="99.7318%" y="213" width="0.2682%" height="15" fill="rgb(250,156,29)"/><text x="99.9818%" y="223.50"></text></g></svg></svg>