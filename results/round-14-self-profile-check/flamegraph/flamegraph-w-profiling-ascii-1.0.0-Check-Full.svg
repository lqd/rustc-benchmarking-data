<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (825,885 samples, 0.24%)</title><rect x="13.0545%" y="133" width="0.2445%" height="15" fill="rgb(227,0,7)"/><text x="13.3045%" y="143.50"></text></g><g><title>item_attrs (637,441 samples, 0.19%)</title><rect x="13.8178%" y="101" width="0.1887%" height="15" fill="rgb(217,0,24)"/><text x="14.0678%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (618,381 samples, 0.18%)</title><rect x="13.8235%" y="85" width="0.1831%" height="15" fill="rgb(221,193,54)"/><text x="14.0735%" y="95.50"></text></g><g><title>codegen_fn_attrs (887,791 samples, 0.26%)</title><rect x="13.7528%" y="117" width="0.2629%" height="15" fill="rgb(248,212,6)"/><text x="14.0028%" y="127.50"></text></g><g><title>is_copy_raw (1,591,325 samples, 0.47%)</title><rect x="16.6041%" y="85" width="0.4712%" height="15" fill="rgb(208,68,35)"/><text x="16.8541%" y="95.50"></text></g><g><title>evaluate_obligation (1,273,411 samples, 0.38%)</title><rect x="16.6982%" y="69" width="0.3770%" height="15" fill="rgb(232,128,0)"/><text x="16.9482%" y="79.50"></text></g><g><title>needs_drop_raw (1,938,881 samples, 0.57%)</title><rect x="16.5026%" y="101" width="0.5741%" height="15" fill="rgb(207,160,47)"/><text x="16.7526%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,541,465 samples, 0.46%)</title><rect x="17.3697%" y="85" width="0.4564%" height="15" fill="rgb(228,23,34)"/><text x="17.6197%" y="95.50"></text></g><g><title>impl_item_implementor_ids (505,394 samples, 0.15%)</title><rect x="17.8355%" y="85" width="0.1496%" height="15" fill="rgb(218,30,26)"/><text x="18.0855%" y="95.50"></text></g><g><title>associated_items (460,954 samples, 0.14%)</title><rect x="17.8487%" y="69" width="0.1365%" height="15" fill="rgb(220,122,19)"/><text x="18.0987%" y="79.50"></text></g><g><title>resolve_instance (3,340,882 samples, 0.99%)</title><rect x="17.0864%" y="101" width="0.9892%" height="15" fill="rgb(250,228,42)"/><text x="17.3364%" y="111.50"></text></g><g><title>thir_body (2,796,710 samples, 0.83%)</title><rect x="18.1114%" y="101" width="0.8281%" height="15" fill="rgb(240,193,28)"/><text x="18.3614%" y="111.50"></text></g><g><title>mir_const (22,642,653 samples, 6.70%)</title><rect x="12.2643%" y="149" width="6.7043%" height="15" fill="rgb(216,20,37)"/><text x="12.5143%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (19,147,957 samples, 5.67%)</title><rect x="13.2990%" y="133" width="5.6696%" height="15" fill="rgb(206,188,39)"/><text x="13.5490%" y="143.50">unsafet..</text></g><g><title>mir_built (16,727,746 samples, 4.95%)</title><rect x="14.0156%" y="117" width="4.9530%" height="15" fill="rgb(217,207,13)"/><text x="14.2656%" y="127.50">mir_bu..</text></g><g><title>mir_const_qualif (1,970,206 samples, 0.58%)</title><rect x="18.9686%" y="149" width="0.5834%" height="15" fill="rgb(231,73,38)"/><text x="19.2186%" y="159.50"></text></g><g><title>mir_const (1,394,846 samples, 0.41%)</title><rect x="19.1390%" y="133" width="0.4130%" height="15" fill="rgb(225,20,46)"/><text x="19.3890%" y="143.50"></text></g><g><title>unsafety_check_result (1,162,234 samples, 0.34%)</title><rect x="19.2078%" y="117" width="0.3441%" height="15" fill="rgb(210,31,41)"/><text x="19.4578%" y="127.50"></text></g><g><title>mir_built (1,007,943 samples, 0.30%)</title><rect x="19.2535%" y="101" width="0.2984%" height="15" fill="rgb(221,200,47)"/><text x="19.5035%" y="111.50"></text></g><g><title>mir_promoted (27,291,131 samples, 8.08%)</title><rect x="11.4713%" y="165" width="8.0807%" height="15" fill="rgb(226,26,5)"/><text x="11.7213%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,058,493 samples, 0.31%)</title><rect x="19.5521%" y="165" width="0.3134%" height="15" fill="rgb(249,33,26)"/><text x="19.8021%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (764,978 samples, 0.23%)</title><rect x="19.8656%" y="165" width="0.2265%" height="15" fill="rgb(235,183,28)"/><text x="20.1156%" y="175.50"></text></g><g><title>normalize_projection_ty (404,987 samples, 0.12%)</title><rect x="19.9721%" y="149" width="0.1199%" height="15" fill="rgb(221,5,38)"/><text x="20.2221%" y="159.50"></text></g><g><title>type_op_normalize_predicate (866,518 samples, 0.26%)</title><rect x="20.0921%" y="165" width="0.2566%" height="15" fill="rgb(247,18,42)"/><text x="20.3421%" y="175.50"></text></g><g><title>type_op_prove_predicate (5,167,187 samples, 1.53%)</title><rect x="20.3883%" y="165" width="1.5300%" height="15" fill="rgb(241,131,45)"/><text x="20.6383%" y="175.50"></text></g><g><title>MIR_borrow_checking (72,283,349 samples, 21.40%)</title><rect x="0.5262%" y="197" width="21.4026%" height="15" fill="rgb(249,31,29)"/><text x="0.7762%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (71,648,235 samples, 21.21%)</title><rect x="0.7143%" y="181" width="21.2146%" height="15" fill="rgb(225,111,53)"/><text x="0.9643%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,022,731 samples, 0.30%)</title><rect x="21.9288%" y="197" width="0.3028%" height="15" fill="rgb(238,160,17)"/><text x="22.1788%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (737,368 samples, 0.22%)</title><rect x="22.0133%" y="181" width="0.2183%" height="15" fill="rgb(214,148,48)"/><text x="22.2633%" y="191.50"></text></g><g><title>hir_module_items (613,856 samples, 0.18%)</title><rect x="22.2317%" y="197" width="0.1818%" height="15" fill="rgb(232,36,49)"/><text x="22.4817%" y="207.50"></text></g><g><title>codegen_fn_attrs (358,122 samples, 0.11%)</title><rect x="22.8267%" y="133" width="0.1060%" height="15" fill="rgb(209,103,24)"/><text x="23.0767%" y="143.50"></text></g><g><title>should_inherit_track_caller (761,487 samples, 0.23%)</title><rect x="22.7160%" y="149" width="0.2255%" height="15" fill="rgb(229,88,8)"/><text x="22.9660%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,108,189 samples, 0.33%)</title><rect x="22.6192%" y="165" width="0.3281%" height="15" fill="rgb(213,181,19)"/><text x="22.8692%" y="175.50"></text></g><g><title>check_mod_attrs (1,780,029 samples, 0.53%)</title><rect x="22.4203%" y="181" width="0.5271%" height="15" fill="rgb(254,191,54)"/><text x="22.6703%" y="191.50"></text></g><g><title>check_mod_const_bodies (437,966 samples, 0.13%)</title><rect x="22.9474%" y="181" width="0.1297%" height="15" fill="rgb(241,83,37)"/><text x="23.1974%" y="191.50"></text></g><g><title>lookup_deprecation_entry (489,044 samples, 0.14%)</title><rect x="23.2751%" y="165" width="0.1448%" height="15" fill="rgb(233,36,39)"/><text x="23.5251%" y="175.50"></text></g><g><title>stability_index (387,854 samples, 0.11%)</title><rect x="23.3051%" y="149" width="0.1148%" height="15" fill="rgb(226,3,54)"/><text x="23.5551%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,118,432 samples, 0.33%)</title><rect x="23.1403%" y="181" width="0.3312%" height="15" fill="rgb(245,192,40)"/><text x="23.3903%" y="191.50"></text></g><g><title>misc_checking_1 (3,703,262 samples, 1.10%)</title><rect x="22.4135%" y="197" width="1.0965%" height="15" fill="rgb(238,167,29)"/><text x="22.6635%" y="207.50"></text></g><g><title>check_mod_intrinsics (352,273 samples, 0.10%)</title><rect x="23.5141%" y="165" width="0.1043%" height="15" fill="rgb(232,182,51)"/><text x="23.7641%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,425,326 samples, 0.42%)</title><rect x="23.5111%" y="181" width="0.4220%" height="15" fill="rgb(231,60,39)"/><text x="23.7611%" y="191.50"></text></g><g><title>check_mod_liveness (1,062,903 samples, 0.31%)</title><rect x="23.6184%" y="165" width="0.3147%" height="15" fill="rgb(208,69,12)"/><text x="23.8684%" y="175.50"></text></g><g><title>module_children (4,581,742 samples, 1.36%)</title><rect x="25.1278%" y="133" width="1.3566%" height="15" fill="rgb(235,93,37)"/><text x="25.3778%" y="143.50"></text></g><g><title>metadata_decode_entry_module_children (4,511,501 samples, 1.34%)</title><rect x="25.1486%" y="117" width="1.3358%" height="15" fill="rgb(213,116,39)"/><text x="25.3986%" y="127.50"></text></g><g><title>trimmed_def_paths (5,550,161 samples, 1.64%)</title><rect x="24.8416%" y="149" width="1.6434%" height="15" fill="rgb(222,207,29)"/><text x="25.0916%" y="159.50"></text></g><g><title>misc_checking_2 (10,071,311 samples, 2.98%)</title><rect x="23.5100%" y="197" width="2.9820%" height="15" fill="rgb(206,96,30)"/><text x="23.7600%" y="207.50">mis..</text></g><g><title>match_checking (8,642,495 samples, 2.56%)</title><rect x="23.9331%" y="181" width="2.5590%" height="15" fill="rgb(218,138,4)"/><text x="24.1831%" y="191.50">ma..</text></g><g><title>check_match (8,408,194 samples, 2.49%)</title><rect x="24.0025%" y="165" width="2.4896%" height="15" fill="rgb(250,191,14)"/><text x="24.2525%" y="175.50">ch..</text></g><g><title>check_private_in_public (719,488 samples, 0.21%)</title><rect x="26.4955%" y="181" width="0.2130%" height="15" fill="rgb(239,60,40)"/><text x="26.7455%" y="191.50"></text></g><g><title>death_checking (1,363,865 samples, 0.40%)</title><rect x="26.7085%" y="181" width="0.4038%" height="15" fill="rgb(206,27,48)"/><text x="26.9585%" y="191.50"></text></g><g><title>eval_to_const_value_raw (3,587,121 samples, 1.06%)</title><rect x="27.5181%" y="149" width="1.0621%" height="15" fill="rgb(225,35,8)"/><text x="27.7681%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,583,470 samples, 1.06%)</title><rect x="27.5192%" y="133" width="1.0610%" height="15" fill="rgb(250,213,24)"/><text x="27.7692%" y="143.50"></text></g><g><title>eval_to_allocation_raw (3,575,569 samples, 1.06%)</title><rect x="27.5215%" y="117" width="1.0587%" height="15" fill="rgb(247,123,22)"/><text x="27.7715%" y="127.50"></text></g><g><title>param_env (451,753 samples, 0.13%)</title><rect x="28.5802%" y="149" width="0.1338%" height="15" fill="rgb(231,138,38)"/><text x="28.8302%" y="159.50"></text></g><g><title>crate_lints (6,536,073 samples, 1.94%)</title><rect x="27.1129%" y="165" width="1.9353%" height="15" fill="rgb(231,145,46)"/><text x="27.3629%" y="175.50">c..</text></g><g><title>type_of (1,124,005 samples, 0.33%)</title><rect x="28.7153%" y="149" width="0.3328%" height="15" fill="rgb(251,118,11)"/><text x="28.9653%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (895,483 samples, 0.27%)</title><rect x="28.7830%" y="133" width="0.2651%" height="15" fill="rgb(217,147,25)"/><text x="29.0330%" y="143.50"></text></g><g><title>lint_checking (7,638,435 samples, 2.26%)</title><rect x="27.1123%" y="181" width="2.2617%" height="15" fill="rgb(247,81,37)"/><text x="27.3623%" y="191.50">l..</text></g><g><title>module_lints (1,100,552 samples, 0.33%)</title><rect x="29.0482%" y="165" width="0.3259%" height="15" fill="rgb(209,12,38)"/><text x="29.2982%" y="175.50"></text></g><g><title>lint_mod (1,093,492 samples, 0.32%)</title><rect x="29.0503%" y="149" width="0.3238%" height="15" fill="rgb(227,1,9)"/><text x="29.3003%" y="159.50"></text></g><g><title>privacy_access_levels (1,194,323 samples, 0.35%)</title><rect x="29.3740%" y="181" width="0.3536%" height="15" fill="rgb(248,47,43)"/><text x="29.6240%" y="191.50"></text></g><g><title>privacy_checking_modules (2,603,109 samples, 0.77%)</title><rect x="29.7277%" y="181" width="0.7708%" height="15" fill="rgb(221,10,30)"/><text x="29.9777%" y="191.50"></text></g><g><title>check_mod_privacy (2,598,669 samples, 0.77%)</title><rect x="29.7290%" y="165" width="0.7694%" height="15" fill="rgb(210,229,1)"/><text x="29.9790%" y="175.50"></text></g><g><title>misc_checking_3 (13,562,950 samples, 4.02%)</title><rect x="26.4921%" y="197" width="4.0159%" height="15" fill="rgb(222,148,37)"/><text x="26.7421%" y="207.50">misc..</text></g><g><title>impl_parent (3,676,425 samples, 1.09%)</title><rect x="32.9305%" y="133" width="1.0886%" height="15" fill="rgb(234,67,33)"/><text x="33.1805%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,048,600 samples, 0.61%)</title><rect x="33.4125%" y="117" width="0.6066%" height="15" fill="rgb(247,98,35)"/><text x="33.6625%" y="127.50"></text></g><g><title>impl_trait_ref (7,324,084 samples, 2.17%)</title><rect x="34.0193%" y="133" width="2.1686%" height="15" fill="rgb(247,138,52)"/><text x="34.2693%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,917,789 samples, 1.75%)</title><rect x="34.4357%" y="117" width="1.7522%" height="15" fill="rgb(213,79,30)"/><text x="34.6857%" y="127.50"></text></g><g><title>predicates_of (390,132 samples, 0.12%)</title><rect x="36.2568%" y="133" width="0.1155%" height="15" fill="rgb(246,177,23)"/><text x="36.5068%" y="143.50"></text></g><g><title>trait_impls_of (1,454,166 samples, 0.43%)</title><rect x="36.3724%" y="133" width="0.4306%" height="15" fill="rgb(230,62,27)"/><text x="36.6224%" y="143.50"></text></g><g><title>implementations_of_trait (451,488 samples, 0.13%)</title><rect x="36.6692%" y="117" width="0.1337%" height="15" fill="rgb(216,154,8)"/><text x="36.9192%" y="127.50"></text></g><g><title>coherent_trait (20,953,482 samples, 6.20%)</title><rect x="30.6127%" y="165" width="6.2042%" height="15" fill="rgb(244,35,45)"/><text x="30.8627%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (20,443,396 samples, 6.05%)</title><rect x="30.7637%" y="149" width="6.0532%" height="15" fill="rgb(251,115,12)"/><text x="31.0137%" y="159.50">speciali..</text></g><g><title>coherence_checking (21,173,935 samples, 6.27%)</title><rect x="30.5994%" y="181" width="6.2695%" height="15" fill="rgb(240,54,50)"/><text x="30.8494%" y="191.50">coherenc..</text></g><g><title>associated_item (744,690 samples, 0.22%)</title><rect x="51.1545%" y="117" width="0.2205%" height="15" fill="rgb(233,84,52)"/><text x="51.4045%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (610,127 samples, 0.18%)</title><rect x="51.1943%" y="101" width="0.1807%" height="15" fill="rgb(207,117,47)"/><text x="51.4443%" y="111.50"></text></g><g><title>associated_items (1,044,953 samples, 0.31%)</title><rect x="51.0799%" y="133" width="0.3094%" height="15" fill="rgb(249,43,39)"/><text x="51.3299%" y="143.50"></text></g><g><title>dropck_outlives (560,627 samples, 0.17%)</title><rect x="51.4301%" y="133" width="0.1660%" height="15" fill="rgb(209,38,44)"/><text x="51.6801%" y="143.50"></text></g><g><title>predicates_of (538,911 samples, 0.16%)</title><rect x="52.7355%" y="117" width="0.1596%" height="15" fill="rgb(236,212,23)"/><text x="52.9855%" y="127.50"></text></g><g><title>predicates_defined_on (343,941 samples, 0.10%)</title><rect x="52.7933%" y="101" width="0.1018%" height="15" fill="rgb(242,79,21)"/><text x="53.0433%" y="111.50"></text></g><g><title>specializes (437,464 samples, 0.13%)</title><rect x="52.8951%" y="117" width="0.1295%" height="15" fill="rgb(211,96,35)"/><text x="53.1451%" y="127.50"></text></g><g><title>evaluate_obligation (5,163,456 samples, 1.53%)</title><rect x="51.5961%" y="133" width="1.5289%" height="15" fill="rgb(253,215,40)"/><text x="51.8461%" y="143.50"></text></g><g><title>item_attrs (338,113 samples, 0.10%)</title><rect x="53.3517%" y="133" width="0.1001%" height="15" fill="rgb(211,81,21)"/><text x="53.6017%" y="143.50"></text></g><g><title>evaluate_obligation (443,854 samples, 0.13%)</title><rect x="53.5999%" y="117" width="0.1314%" height="15" fill="rgb(208,190,38)"/><text x="53.8499%" y="127.50"></text></g><g><title>method_autoderef_steps (849,679 samples, 0.25%)</title><rect x="53.4867%" y="133" width="0.2516%" height="15" fill="rgb(235,213,38)"/><text x="53.7367%" y="143.50"></text></g><g><title>predicates_of (470,225 samples, 0.14%)</title><rect x="53.8044%" y="133" width="0.1392%" height="15" fill="rgb(237,122,38)"/><text x="54.0544%" y="143.50"></text></g><g><title>evaluate_obligation (1,778,513 samples, 0.53%)</title><rect x="57.7934%" y="117" width="0.5266%" height="15" fill="rgb(244,218,35)"/><text x="58.0434%" y="127.50"></text></g><g><title>method_autoderef_steps (389,722 samples, 0.12%)</title><rect x="58.5138%" y="117" width="0.1154%" height="15" fill="rgb(240,68,47)"/><text x="58.7638%" y="127.50"></text></g><g><title>typeck (15,966,077 samples, 4.73%)</title><rect x="53.9908%" y="133" width="4.7274%" height="15" fill="rgb(210,16,53)"/><text x="54.2408%" y="143.50">typeck</text></g><g><title>item_bodies_checking (73,809,406 samples, 21.85%)</title><rect x="36.9078%" y="181" width="21.8545%" height="15" fill="rgb(235,124,12)"/><text x="37.1578%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (73,804,976 samples, 21.85%)</title><rect x="36.9091%" y="165" width="21.8532%" height="15" fill="rgb(224,169,11)"/><text x="37.1591%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (73,364,770 samples, 21.72%)</title><rect x="37.0394%" y="149" width="21.7228%" height="15" fill="rgb(250,166,2)"/><text x="37.2894%" y="159.50">typeck</text></g><g><title>mir_const (870,220 samples, 0.26%)</title><rect x="60.7128%" y="101" width="0.2577%" height="15" fill="rgb(242,216,29)"/><text x="60.9628%" y="111.50"></text></g><g><title>unsafety_check_result (747,428 samples, 0.22%)</title><rect x="60.7491%" y="85" width="0.2213%" height="15" fill="rgb(230,116,27)"/><text x="60.9991%" y="95.50"></text></g><g><title>mir_built (733,298 samples, 0.22%)</title><rect x="60.7533%" y="69" width="0.2171%" height="15" fill="rgb(228,99,48)"/><text x="61.0033%" y="79.50"></text></g><g><title>typeck (509,836 samples, 0.15%)</title><rect x="60.8195%" y="53" width="0.1510%" height="15" fill="rgb(253,11,6)"/><text x="61.0695%" y="63.50"></text></g><g><title>mir_promoted (896,840 samples, 0.27%)</title><rect x="60.7058%" y="117" width="0.2655%" height="15" fill="rgb(247,143,39)"/><text x="60.9558%" y="127.50"></text></g><g><title>type_of (1,348,825 samples, 0.40%)</title><rect x="60.5824%" y="149" width="0.3994%" height="15" fill="rgb(236,97,10)"/><text x="60.8324%" y="159.50"></text></g><g><title>mir_borrowck (1,333,815 samples, 0.39%)</title><rect x="60.5869%" y="133" width="0.3949%" height="15" fill="rgb(233,208,19)"/><text x="60.8369%" y="143.50"></text></g><g><title>item_types_checking (7,888,567 samples, 2.34%)</title><rect x="58.7622%" y="181" width="2.3358%" height="15" fill="rgb(216,164,2)"/><text x="59.0122%" y="191.50">i..</text></g><g><title>check_mod_item_types (7,881,006 samples, 2.33%)</title><rect x="58.7645%" y="165" width="2.3335%" height="15" fill="rgb(220,129,5)"/><text x="59.0145%" y="175.50">c..</text></g><g><title>typeck (392,424 samples, 0.12%)</title><rect x="60.9818%" y="149" width="0.1162%" height="15" fill="rgb(242,17,10)"/><text x="61.2318%" y="159.50"></text></g><g><title>thir_body (397,624 samples, 0.12%)</title><rect x="62.9893%" y="37" width="0.1177%" height="15" fill="rgb(242,107,0)"/><text x="63.2393%" y="47.50"></text></g><g><title>mir_const_qualif (2,937,963 samples, 0.87%)</title><rect x="62.2471%" y="101" width="0.8699%" height="15" fill="rgb(251,28,31)"/><text x="62.4971%" y="111.50"></text></g><g><title>mir_const (2,463,640 samples, 0.73%)</title><rect x="62.3876%" y="85" width="0.7295%" height="15" fill="rgb(233,223,10)"/><text x="62.6376%" y="95.50"></text></g><g><title>unsafety_check_result (1,723,500 samples, 0.51%)</title><rect x="62.6067%" y="69" width="0.5103%" height="15" fill="rgb(215,21,27)"/><text x="62.8567%" y="79.50"></text></g><g><title>mir_built (1,505,656 samples, 0.45%)</title><rect x="62.6712%" y="53" width="0.4458%" height="15" fill="rgb(232,23,21)"/><text x="62.9212%" y="63.50"></text></g><g><title>mir_borrowck (5,930,536 samples, 1.76%)</title><rect x="64.0930%" y="69" width="1.7560%" height="15" fill="rgb(244,5,23)"/><text x="64.3430%" y="79.50"></text></g><g><title>mir_promoted (464,796 samples, 0.14%)</title><rect x="65.7113%" y="53" width="0.1376%" height="15" fill="rgb(226,81,46)"/><text x="65.9613%" y="63.50"></text></g><g><title>mir_for_ctfe (9,272,674 samples, 2.75%)</title><rect x="63.1170%" y="101" width="2.7456%" height="15" fill="rgb(247,70,30)"/><text x="63.3670%" y="111.50">mi..</text></g><g><title>mir_drops_elaborated_and_const_checked (8,466,025 samples, 2.51%)</title><rect x="63.3559%" y="85" width="2.5067%" height="15" fill="rgb(212,68,19)"/><text x="63.6059%" y="95.50">mi..</text></g><g><title>eval_to_const_value_raw (18,189,274 samples, 5.39%)</title><rect x="61.5668%" y="149" width="5.3857%" height="15" fill="rgb(240,187,13)"/><text x="61.8168%" y="159.50">eval_to..</text></g><g><title>eval_to_const_value_raw (18,064,694 samples, 5.35%)</title><rect x="61.6037%" y="133" width="5.3488%" height="15" fill="rgb(223,113,26)"/><text x="61.8537%" y="143.50">eval_to..</text></g><g><title>eval_to_allocation_raw (17,821,942 samples, 5.28%)</title><rect x="61.6756%" y="117" width="5.2770%" height="15" fill="rgb(206,192,2)"/><text x="61.9256%" y="127.50">eval_t..</text></g><g><title>typeck (3,654,244 samples, 1.08%)</title><rect x="65.8705%" y="101" width="1.0820%" height="15" fill="rgb(241,108,4)"/><text x="66.1205%" y="111.50"></text></g><g><title>fn_sig (1,065,098 samples, 0.32%)</title><rect x="66.9525%" y="149" width="0.3154%" height="15" fill="rgb(247,173,49)"/><text x="67.2025%" y="159.50"></text></g><g><title>is_late_bound_map (564,316 samples, 0.17%)</title><rect x="67.4352%" y="133" width="0.1671%" height="15" fill="rgb(224,114,35)"/><text x="67.6852%" y="143.50"></text></g><g><title>resolve_lifetimes (516,186 samples, 0.15%)</title><rect x="67.4495%" y="117" width="0.1528%" height="15" fill="rgb(245,159,27)"/><text x="67.6995%" y="127.50"></text></g><g><title>lint_levels (547,736 samples, 0.16%)</title><rect x="67.8723%" y="101" width="0.1622%" height="15" fill="rgb(245,172,44)"/><text x="68.1223%" y="111.50"></text></g><g><title>named_region_map (1,462,788 samples, 0.43%)</title><rect x="67.6023%" y="133" width="0.4331%" height="15" fill="rgb(236,23,11)"/><text x="67.8523%" y="143.50"></text></g><g><title>resolve_lifetimes (1,376,687 samples, 0.41%)</title><rect x="67.6278%" y="117" width="0.4076%" height="15" fill="rgb(205,117,38)"/><text x="67.8778%" y="127.50"></text></g><g><title>generics_of (2,645,251 samples, 0.78%)</title><rect x="67.2679%" y="149" width="0.7832%" height="15" fill="rgb(237,72,25)"/><text x="67.5179%" y="159.50"></text></g><g><title>param_env (1,644,406 samples, 0.49%)</title><rect x="68.1504%" y="149" width="0.4869%" height="15" fill="rgb(244,70,9)"/><text x="68.4004%" y="159.50"></text></g><g><title>predicates_of (556,556 samples, 0.16%)</title><rect x="68.4725%" y="133" width="0.1648%" height="15" fill="rgb(217,125,39)"/><text x="68.7225%" y="143.50"></text></g><g><title>predicates_defined_on (515,035 samples, 0.15%)</title><rect x="68.4848%" y="117" width="0.1525%" height="15" fill="rgb(235,36,10)"/><text x="68.7348%" y="127.50"></text></g><g><title>explicit_predicates_of (897,300 samples, 0.27%)</title><rect x="68.8562%" y="117" width="0.2657%" height="15" fill="rgb(251,123,47)"/><text x="69.1062%" y="127.50"></text></g><g><title>predicates_of (2,029,710 samples, 0.60%)</title><rect x="68.6373%" y="149" width="0.6010%" height="15" fill="rgb(221,13,13)"/><text x="68.8873%" y="159.50"></text></g><g><title>predicates_defined_on (1,748,936 samples, 0.52%)</title><rect x="68.7205%" y="133" width="0.5178%" height="15" fill="rgb(238,131,9)"/><text x="68.9705%" y="143.50"></text></g><g><title>inferred_outlives_of (393,333 samples, 0.12%)</title><rect x="69.1218%" y="117" width="0.1165%" height="15" fill="rgb(211,50,8)"/><text x="69.3718%" y="127.50"></text></g><g><title>type_collecting (28,015,559 samples, 8.30%)</title><rect x="61.0994%" y="181" width="8.2952%" height="15" fill="rgb(245,182,24)"/><text x="61.3494%" y="191.50">type_collect..</text></g><g><title>collect_mod_item_types (27,999,209 samples, 8.29%)</title><rect x="61.1042%" y="165" width="8.2904%" height="15" fill="rgb(242,14,37)"/><text x="61.3542%" y="175.50">collect_mod_..</text></g><g><title>type_of (487,956 samples, 0.14%)</title><rect x="69.2501%" y="149" width="0.1445%" height="15" fill="rgb(246,228,12)"/><text x="69.5001%" y="159.50"></text></g><g><title>evaluate_obligation (1,199,316 samples, 0.36%)</title><rect x="72.0184%" y="149" width="0.3551%" height="15" fill="rgb(213,55,15)"/><text x="72.2684%" y="159.50"></text></g><g><title>implied_outlives_bounds (656,991 samples, 0.19%)</title><rect x="72.3770%" y="149" width="0.1945%" height="15" fill="rgb(209,9,3)"/><text x="72.6270%" y="159.50"></text></g><g><title>object_safety_violations (400,804 samples, 0.12%)</title><rect x="72.5746%" y="149" width="0.1187%" height="15" fill="rgb(230,59,30)"/><text x="72.8246%" y="159.50"></text></g><g><title>param_env (1,423,411 samples, 0.42%)</title><rect x="72.6933%" y="149" width="0.4215%" height="15" fill="rgb(209,121,21)"/><text x="72.9433%" y="159.50"></text></g><g><title>region_scope_tree (1,238,984 samples, 0.37%)</title><rect x="73.1330%" y="149" width="0.3669%" height="15" fill="rgb(220,109,13)"/><text x="73.3830%" y="159.50"></text></g><g><title>check_impl_item_well_formed (13,022,721 samples, 3.86%)</title><rect x="69.6483%" y="165" width="3.8559%" height="15" fill="rgb(232,18,1)"/><text x="69.8983%" y="175.50">chec..</text></g><g><title>evaluate_obligation (1,446,031 samples, 0.43%)</title><rect x="75.1514%" y="149" width="0.4282%" height="15" fill="rgb(215,41,42)"/><text x="75.4014%" y="159.50"></text></g><g><title>param_env (886,560 samples, 0.26%)</title><rect x="75.6608%" y="149" width="0.2625%" height="15" fill="rgb(224,123,36)"/><text x="75.9108%" y="159.50"></text></g><g><title>check_item_well_formed (8,780,373 samples, 2.60%)</title><rect x="73.5043%" y="165" width="2.5998%" height="15" fill="rgb(240,125,3)"/><text x="73.7543%" y="175.50">ch..</text></g><g><title>analysis (256,781,530 samples, 76.03%)</title><rect x="0.3070%" y="213" width="76.0313%" height="15" fill="rgb(205,98,50)"/><text x="0.5570%" y="223.50">analysis</text></g><g><title>type_check_crate (154,783,301 samples, 45.83%)</title><rect x="30.5080%" y="197" width="45.8303%" height="15" fill="rgb(205,185,37)"/><text x="30.7580%" y="207.50">type_check_crate</text></g><g><title>wf_checking (23,414,659 samples, 6.93%)</title><rect x="69.4054%" y="181" width="6.9329%" height="15" fill="rgb(238,207,15)"/><text x="69.6554%" y="191.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (790,940 samples, 0.23%)</title><rect x="76.1041%" y="165" width="0.2342%" height="15" fill="rgb(213,199,42)"/><text x="76.3541%" y="175.50"></text></g><g><title>codegen_crate (380,654 samples, 0.11%)</title><rect x="76.3410%" y="213" width="0.1127%" height="15" fill="rgb(235,201,11)"/><text x="76.5910%" y="223.50"></text></g><g><title>metadata_load_macro (355,457 samples, 0.11%)</title><rect x="90.3990%" y="165" width="0.1052%" height="15" fill="rgb(207,46,11)"/><text x="90.6490%" y="175.50"></text></g><g><title>metadata_register_crate (2,281,556 samples, 0.68%)</title><rect x="90.5042%" y="165" width="0.6756%" height="15" fill="rgb(241,35,35)"/><text x="90.7542%" y="175.50"></text></g><g><title>metadata_register_crate (830,519 samples, 0.25%)</title><rect x="90.9339%" y="149" width="0.2459%" height="15" fill="rgb(243,32,47)"/><text x="91.1839%" y="159.50"></text></g><g><title>macro_expand_crate (50,115,924 samples, 14.84%)</title><rect x="76.6743%" y="197" width="14.8390%" height="15" fill="rgb(247,202,23)"/><text x="76.9243%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (50,102,924 samples, 14.84%)</title><rect x="76.6781%" y="181" width="14.8351%" height="15" fill="rgb(219,102,11)"/><text x="76.9281%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,126,381 samples, 0.33%)</title><rect x="91.1798%" y="165" width="0.3335%" height="15" fill="rgb(243,110,44)"/><text x="91.4298%" y="175.50"></text></g><g><title>late_resolve_crate (4,279,357 samples, 1.27%)</title><rect x="91.6454%" y="181" width="1.2671%" height="15" fill="rgb(222,74,54)"/><text x="91.8954%" y="191.50"></text></g><g><title>configure_and_expand (55,872,238 samples, 16.54%)</title><rect x="76.4537%" y="213" width="16.5434%" height="15" fill="rgb(216,99,12)"/><text x="76.7037%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (4,934,085 samples, 1.46%)</title><rect x="91.5362%" y="197" width="1.4609%" height="15" fill="rgb(226,22,26)"/><text x="91.7862%" y="207.50"></text></g><g><title>drop_ast (635,837 samples, 0.19%)</title><rect x="92.9971%" y="213" width="0.1883%" height="15" fill="rgb(217,163,10)"/><text x="93.2471%" y="223.50"></text></g><g><title>early_lint_checks (1,144,083 samples, 0.34%)</title><rect x="93.1896%" y="213" width="0.3388%" height="15" fill="rgb(213,25,53)"/><text x="93.4396%" y="223.50"></text></g><g><title>free_global_ctxt (5,214,578 samples, 1.54%)</title><rect x="93.5284%" y="213" width="1.5440%" height="15" fill="rgb(252,105,26)"/><text x="93.7784%" y="223.50"></text></g><g><title>generate_crate_metadata (4,693,802 samples, 1.39%)</title><rect x="95.0724%" y="213" width="1.3898%" height="15" fill="rgb(220,39,43)"/><text x="95.3224%" y="223.50"></text></g><g><title>hir_lowering (9,064,670 samples, 2.68%)</title><rect x="96.4622%" y="213" width="2.6840%" height="15" fill="rgb(229,68,48)"/><text x="96.7122%" y="223.50">hi..</text></g><g><title>parse_crate (386,314 samples, 0.11%)</title><rect x="99.1738%" y="213" width="0.1144%" height="15" fill="rgb(252,8,32)"/><text x="99.4238%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,535,587 samples, 0.45%)</title><rect x="99.3553%" y="213" width="0.4547%" height="15" fill="rgb(223,20,43)"/><text x="99.6053%" y="223.50"></text></g><g><title>all (337,731,394 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (337,731,394 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (545,316 samples, 0.16%)</title><rect x="99.8385%" y="213" width="0.1615%" height="15" fill="rgb(249,185,26)"/><text x="100.0885%" y="223.50"></text></g></svg></svg>