<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (73,511 samples, 0.11%)</title><rect x="9.4925%" y="181" width="0.1146%" height="15" fill="rgb(227,0,7)"/><text x="9.7425%" y="191.50"></text></g><g><title>param_env (338,873 samples, 0.53%)</title><rect x="11.0065%" y="149" width="0.5285%" height="15" fill="rgb(217,0,24)"/><text x="11.2565%" y="159.50"></text></g><g><title>item_attrs (288,563 samples, 0.45%)</title><rect x="12.0441%" y="117" width="0.4500%" height="15" fill="rgb(221,193,54)"/><text x="12.2941%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (278,273 samples, 0.43%)</title><rect x="12.0602%" y="101" width="0.4340%" height="15" fill="rgb(248,212,6)"/><text x="12.3102%" y="111.50"></text></g><g><title>codegen_fn_attrs (395,833 samples, 0.62%)</title><rect x="11.9116%" y="133" width="0.6173%" height="15" fill="rgb(208,68,35)"/><text x="12.1616%" y="143.50"></text></g><g><title>is_copy_raw (88,332 samples, 0.14%)</title><rect x="14.6123%" y="117" width="0.1378%" height="15" fill="rgb(232,128,0)"/><text x="14.8623%" y="127.50"></text></g><g><title>evaluate_obligation (72,862 samples, 0.11%)</title><rect x="14.6364%" y="101" width="0.1136%" height="15" fill="rgb(207,160,47)"/><text x="14.8864%" y="111.50"></text></g><g><title>adt_drop_tys (107,851 samples, 0.17%)</title><rect x="14.9105%" y="85" width="0.1682%" height="15" fill="rgb(228,23,34)"/><text x="15.1605%" y="95.50"></text></g><g><title>is_copy_raw (111,681 samples, 0.17%)</title><rect x="15.0787%" y="85" width="0.1742%" height="15" fill="rgb(218,30,26)"/><text x="15.3287%" y="95.50"></text></g><g><title>evaluate_obligation (89,480 samples, 0.14%)</title><rect x="15.1133%" y="69" width="0.1395%" height="15" fill="rgb(220,122,19)"/><text x="15.3633%" y="79.50"></text></g><g><title>param_env (96,750 samples, 0.15%)</title><rect x="15.2529%" y="85" width="0.1509%" height="15" fill="rgb(250,228,42)"/><text x="15.5029%" y="95.50"></text></g><g><title>adt_drop_tys (348,242 samples, 0.54%)</title><rect x="14.8620%" y="101" width="0.5431%" height="15" fill="rgb(240,193,28)"/><text x="15.1120%" y="111.50"></text></g><g><title>needs_drop_raw (884,859 samples, 1.38%)</title><rect x="14.7540%" y="117" width="1.3799%" height="15" fill="rgb(216,20,37)"/><text x="15.0040%" y="127.50"></text></g><g><title>is_copy_raw (467,335 samples, 0.73%)</title><rect x="15.4051%" y="101" width="0.7288%" height="15" fill="rgb(206,188,39)"/><text x="15.6551%" y="111.50"></text></g><g><title>evaluate_obligation (399,133 samples, 0.62%)</title><rect x="15.5115%" y="85" width="0.6225%" height="15" fill="rgb(217,207,13)"/><text x="15.7615%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (621,487 samples, 0.97%)</title><rect x="16.7207%" y="101" width="0.9692%" height="15" fill="rgb(231,73,38)"/><text x="16.9707%" y="111.50"></text></g><g><title>evaluate_obligation (162,231 samples, 0.25%)</title><rect x="17.4369%" y="85" width="0.2530%" height="15" fill="rgb(225,20,46)"/><text x="17.6869%" y="95.50"></text></g><g><title>impl_parent (438,459 samples, 0.68%)</title><rect x="18.7312%" y="85" width="0.6838%" height="15" fill="rgb(210,31,41)"/><text x="18.9812%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (287,908 samples, 0.45%)</title><rect x="18.9659%" y="69" width="0.4490%" height="15" fill="rgb(221,200,47)"/><text x="19.2159%" y="79.50"></text></g><g><title>specialization_graph_of (2,282,586 samples, 3.56%)</title><rect x="17.7402%" y="101" width="3.5597%" height="15" fill="rgb(226,26,5)"/><text x="17.9902%" y="111.50">spec..</text></g><g><title>impl_trait_ref (1,208,730 samples, 1.89%)</title><rect x="19.4149%" y="85" width="1.8850%" height="15" fill="rgb(249,33,26)"/><text x="19.6649%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,056,089 samples, 1.65%)</title><rect x="19.6530%" y="69" width="1.6470%" height="15" fill="rgb(235,183,28)"/><text x="19.9030%" y="79.50"></text></g><g><title>resolve_instance (3,383,189 samples, 5.28%)</title><rect x="16.1339%" y="117" width="5.2761%" height="15" fill="rgb(221,5,38)"/><text x="16.3839%" y="127.50">resolv..</text></g><g><title>thir_body (507,017 samples, 0.79%)</title><rect x="21.4348%" y="117" width="0.7907%" height="15" fill="rgb(247,18,42)"/><text x="21.6848%" y="127.50"></text></g><g><title>mir_const (7,654,944 samples, 11.94%)</title><rect x="10.3055%" y="165" width="11.9380%" height="15" fill="rgb(241,131,45)"/><text x="10.5555%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (6,866,567 samples, 10.71%)</title><rect x="11.5350%" y="149" width="10.7085%" height="15" fill="rgb(249,31,29)"/><text x="11.7850%" y="159.50">unsafety_check_r..</text></g><g><title>mir_built (6,229,209 samples, 9.71%)</title><rect x="12.5289%" y="133" width="9.7145%" height="15" fill="rgb(225,111,53)"/><text x="12.7789%" y="143.50">mir_built</text></g><g><title>mir_promoted (8,103,329 samples, 12.64%)</title><rect x="9.6330%" y="181" width="12.6372%" height="15" fill="rgb(238,160,17)"/><text x="9.8830%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (282,933 samples, 0.44%)</title><rect x="22.2702%" y="181" width="0.4412%" height="15" fill="rgb(214,148,48)"/><text x="22.5202%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (365,473 samples, 0.57%)</title><rect x="22.7114%" y="181" width="0.5700%" height="15" fill="rgb(232,36,49)"/><text x="22.9614%" y="191.50"></text></g><g><title>normalize_projection_ty (238,141 samples, 0.37%)</title><rect x="22.9100%" y="165" width="0.3714%" height="15" fill="rgb(209,103,24)"/><text x="23.1600%" y="175.50"></text></g><g><title>type_op_normalize_predicate (214,333 samples, 0.33%)</title><rect x="23.2814%" y="181" width="0.3343%" height="15" fill="rgb(229,88,8)"/><text x="23.5314%" y="191.50"></text></g><g><title>normalize_projection_ty (129,491 samples, 0.20%)</title><rect x="23.4137%" y="165" width="0.2019%" height="15" fill="rgb(213,181,19)"/><text x="23.6637%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,563,390 samples, 2.44%)</title><rect x="23.6156%" y="181" width="2.4381%" height="15" fill="rgb(254,191,54)"/><text x="23.8656%" y="191.50">ty..</text></g><g><title>evaluate_obligation (163,393 samples, 0.25%)</title><rect x="25.7990%" y="165" width="0.2548%" height="15" fill="rgb(241,83,37)"/><text x="26.0490%" y="175.50"></text></g><g><title>MIR_borrow_checking (16,023,379 samples, 24.99%)</title><rect x="1.0692%" y="213" width="24.9886%" height="15" fill="rgb(233,36,39)"/><text x="1.3192%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,981,179 samples, 24.92%)</title><rect x="1.1350%" y="197" width="24.9228%" height="15" fill="rgb(226,3,54)"/><text x="1.3850%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (88,562 samples, 0.14%)</title><rect x="26.0869%" y="213" width="0.1381%" height="15" fill="rgb(245,192,40)"/><text x="26.3369%" y="223.50"></text></g><g><title>codegen_fn_attrs (124,322 samples, 0.19%)</title><rect x="26.3943%" y="181" width="0.1939%" height="15" fill="rgb(238,167,29)"/><text x="26.6443%" y="191.50"></text></g><g><title>check_mod_attrs (211,623 samples, 0.33%)</title><rect x="26.2583%" y="197" width="0.3300%" height="15" fill="rgb(232,182,51)"/><text x="26.5083%" y="207.50"></text></g><g><title>lookup_deprecation_entry (72,391 samples, 0.11%)</title><rect x="26.8491%" y="181" width="0.1129%" height="15" fill="rgb(231,60,39)"/><text x="27.0991%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (225,302 samples, 0.35%)</title><rect x="26.7146%" y="197" width="0.3514%" height="15" fill="rgb(208,69,12)"/><text x="26.9646%" y="207.50"></text></g><g><title>misc_checking_1 (581,997 samples, 0.91%)</title><rect x="26.2256%" y="213" width="0.9076%" height="15" fill="rgb(235,93,37)"/><text x="26.4756%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (243,143 samples, 0.38%)</title><rect x="27.1394%" y="197" width="0.3792%" height="15" fill="rgb(213,116,39)"/><text x="27.3894%" y="207.50"></text></g><g><title>check_mod_liveness (197,622 samples, 0.31%)</title><rect x="27.2104%" y="181" width="0.3082%" height="15" fill="rgb(222,207,29)"/><text x="27.4604%" y="191.50"></text></g><g><title>param_env (73,220 samples, 0.11%)</title><rect x="27.9156%" y="165" width="0.1142%" height="15" fill="rgb(206,96,30)"/><text x="28.1656%" y="175.50"></text></g><g><title>misc_checking_2 (575,847 samples, 0.90%)</title><rect x="27.1332%" y="213" width="0.8980%" height="15" fill="rgb(218,138,4)"/><text x="27.3832%" y="223.50"></text></g><g><title>match_checking (328,734 samples, 0.51%)</title><rect x="27.5186%" y="197" width="0.5127%" height="15" fill="rgb(250,191,14)"/><text x="27.7686%" y="207.50"></text></g><g><title>check_match (315,543 samples, 0.49%)</title><rect x="27.5392%" y="181" width="0.4921%" height="15" fill="rgb(239,60,40)"/><text x="27.7892%" y="191.50"></text></g><g><title>check_private_in_public (67,690 samples, 0.11%)</title><rect x="28.0459%" y="197" width="0.1056%" height="15" fill="rgb(206,27,48)"/><text x="28.2959%" y="207.50"></text></g><g><title>death_checking (147,822 samples, 0.23%)</title><rect x="28.1515%" y="197" width="0.2305%" height="15" fill="rgb(225,35,8)"/><text x="28.4015%" y="207.50"></text></g><g><title>param_env (206,844 samples, 0.32%)</title><rect x="28.6078%" y="165" width="0.3226%" height="15" fill="rgb(250,213,24)"/><text x="28.8578%" y="175.50"></text></g><g><title>predicates_of (101,450 samples, 0.16%)</title><rect x="28.7722%" y="149" width="0.1582%" height="15" fill="rgb(247,123,22)"/><text x="29.0222%" y="159.50"></text></g><g><title>predicates_defined_on (84,580 samples, 0.13%)</title><rect x="28.7985%" y="133" width="0.1319%" height="15" fill="rgb(231,138,38)"/><text x="29.0485%" y="143.50"></text></g><g><title>crate_lints (360,474 samples, 0.56%)</title><rect x="28.3841%" y="181" width="0.5622%" height="15" fill="rgb(231,145,46)"/><text x="28.6341%" y="191.50"></text></g><g><title>lint_checking (537,106 samples, 0.84%)</title><rect x="28.3820%" y="197" width="0.8376%" height="15" fill="rgb(251,118,11)"/><text x="28.6320%" y="207.50"></text></g><g><title>module_lints (175,272 samples, 0.27%)</title><rect x="28.9463%" y="181" width="0.2733%" height="15" fill="rgb(217,147,25)"/><text x="29.1963%" y="191.50"></text></g><g><title>lint_mod (171,182 samples, 0.27%)</title><rect x="28.9527%" y="165" width="0.2670%" height="15" fill="rgb(247,81,37)"/><text x="29.2027%" y="175.50"></text></g><g><title>privacy_checking_modules (321,534 samples, 0.50%)</title><rect x="29.3174%" y="197" width="0.5014%" height="15" fill="rgb(209,12,38)"/><text x="29.5674%" y="207.50"></text></g><g><title>check_mod_privacy (318,573 samples, 0.50%)</title><rect x="29.3220%" y="181" width="0.4968%" height="15" fill="rgb(227,1,9)"/><text x="29.5720%" y="191.50"></text></g><g><title>misc_checking_3 (1,161,803 samples, 1.81%)</title><rect x="28.0313%" y="213" width="1.8118%" height="15" fill="rgb(248,47,43)"/><text x="28.2813%" y="223.50">m..</text></g><g><title>associated_item (323,384 samples, 0.50%)</title><rect x="36.9065%" y="133" width="0.5043%" height="15" fill="rgb(221,10,30)"/><text x="37.1565%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (240,213 samples, 0.37%)</title><rect x="37.0362%" y="117" width="0.3746%" height="15" fill="rgb(210,229,1)"/><text x="37.2862%" y="127.50"></text></g><g><title>associated_items (450,834 samples, 0.70%)</title><rect x="36.7355%" y="149" width="0.7031%" height="15" fill="rgb(222,148,37)"/><text x="36.9855%" y="159.50"></text></g><g><title>impl_parent (86,342 samples, 0.13%)</title><rect x="37.8622%" y="53" width="0.1347%" height="15" fill="rgb(234,67,33)"/><text x="38.1122%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (66,192 samples, 0.10%)</title><rect x="37.8936%" y="37" width="0.1032%" height="15" fill="rgb(247,98,35)"/><text x="38.1436%" y="47.50"></text></g><g><title>impl_trait_ref (295,634 samples, 0.46%)</title><rect x="37.9969%" y="53" width="0.4610%" height="15" fill="rgb(247,138,52)"/><text x="38.2469%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (276,854 samples, 0.43%)</title><rect x="38.0262%" y="37" width="0.4318%" height="15" fill="rgb(213,79,30)"/><text x="38.2762%" y="47.50"></text></g><g><title>coherent_trait (497,696 samples, 0.78%)</title><rect x="37.7220%" y="85" width="0.7762%" height="15" fill="rgb(246,177,23)"/><text x="37.9720%" y="95.50"></text></g><g><title>specialization_graph_of (494,886 samples, 0.77%)</title><rect x="37.7264%" y="69" width="0.7718%" height="15" fill="rgb(230,62,27)"/><text x="37.9764%" y="79.50"></text></g><g><title>adt_destructor (512,907 samples, 0.80%)</title><rect x="37.7033%" y="117" width="0.7999%" height="15" fill="rgb(216,154,8)"/><text x="37.9533%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (509,827 samples, 0.80%)</title><rect x="37.7081%" y="101" width="0.7951%" height="15" fill="rgb(244,35,45)"/><text x="37.9581%" y="111.50"></text></g><g><title>adt_dtorck_constraint (104,662 samples, 0.16%)</title><rect x="38.6011%" y="69" width="0.1632%" height="15" fill="rgb(251,115,12)"/><text x="38.8511%" y="79.50"></text></g><g><title>adt_dtorck_constraint (146,863 samples, 0.23%)</title><rect x="38.5607%" y="85" width="0.2290%" height="15" fill="rgb(240,54,50)"/><text x="38.8107%" y="95.50"></text></g><g><title>adt_dtorck_constraint (189,293 samples, 0.30%)</title><rect x="38.5246%" y="101" width="0.2952%" height="15" fill="rgb(233,84,52)"/><text x="38.7746%" y="111.50"></text></g><g><title>adt_dtorck_constraint (206,703 samples, 0.32%)</title><rect x="38.5032%" y="117" width="0.3224%" height="15" fill="rgb(207,117,47)"/><text x="38.7532%" y="127.50"></text></g><g><title>dropck_outlives (877,950 samples, 1.37%)</title><rect x="37.4864%" y="149" width="1.3692%" height="15" fill="rgb(249,43,39)"/><text x="37.7364%" y="159.50"></text></g><g><title>adt_dtorck_constraint (797,140 samples, 1.24%)</title><rect x="37.6124%" y="133" width="1.2431%" height="15" fill="rgb(209,38,44)"/><text x="37.8624%" y="143.50"></text></g><g><title>adt_def (140,951 samples, 0.22%)</title><rect x="39.4378%" y="117" width="0.2198%" height="15" fill="rgb(236,212,23)"/><text x="39.6878%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (138,771 samples, 0.22%)</title><rect x="39.4412%" y="101" width="0.2164%" height="15" fill="rgb(242,79,21)"/><text x="39.6912%" y="111.50"></text></g><g><title>item_attrs (111,061 samples, 0.17%)</title><rect x="39.4845%" y="85" width="0.1732%" height="15" fill="rgb(211,96,35)"/><text x="39.7345%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (108,341 samples, 0.17%)</title><rect x="39.4887%" y="69" width="0.1690%" height="15" fill="rgb(253,215,40)"/><text x="39.7387%" y="79.50"></text></g><g><title>adt_def (136,341 samples, 0.21%)</title><rect x="39.6624%" y="101" width="0.2126%" height="15" fill="rgb(211,81,21)"/><text x="39.9124%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (135,911 samples, 0.21%)</title><rect x="39.6631%" y="85" width="0.2120%" height="15" fill="rgb(208,190,38)"/><text x="39.9131%" y="95.50"></text></g><g><title>adt_sized_constraint (170,891 samples, 0.27%)</title><rect x="39.6577%" y="117" width="0.2665%" height="15" fill="rgb(235,213,38)"/><text x="39.9077%" y="127.50"></text></g><g><title>adt_sized_constraint (329,832 samples, 0.51%)</title><rect x="39.4207%" y="133" width="0.5144%" height="15" fill="rgb(237,122,38)"/><text x="39.6707%" y="143.50"></text></g><g><title>evaluate_obligation (1,243,071 samples, 1.94%)</title><rect x="38.8556%" y="149" width="1.9386%" height="15" fill="rgb(244,218,35)"/><text x="39.1056%" y="159.50">e..</text></g><g><title>trait_impls_of (374,953 samples, 0.58%)</title><rect x="40.2094%" y="133" width="0.5847%" height="15" fill="rgb(240,68,47)"/><text x="40.4594%" y="143.50"></text></g><g><title>implementations_of_trait (105,211 samples, 0.16%)</title><rect x="40.6301%" y="117" width="0.1641%" height="15" fill="rgb(210,16,53)"/><text x="40.8801%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (68,360 samples, 0.11%)</title><rect x="40.6876%" y="101" width="0.1066%" height="15" fill="rgb(235,124,12)"/><text x="40.9376%" y="111.50"></text></g><g><title>fn_sig (81,492 samples, 0.13%)</title><rect x="40.8188%" y="149" width="0.1271%" height="15" fill="rgb(224,169,11)"/><text x="41.0688%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (71,601 samples, 0.11%)</title><rect x="40.8342%" y="133" width="0.1117%" height="15" fill="rgb(250,166,2)"/><text x="41.0842%" y="143.50"></text></g><g><title>item_attrs (114,021 samples, 0.18%)</title><rect x="41.1770%" y="149" width="0.1778%" height="15" fill="rgb(242,216,29)"/><text x="41.4270%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (108,551 samples, 0.17%)</title><rect x="41.1856%" y="133" width="0.1693%" height="15" fill="rgb(230,116,27)"/><text x="41.4356%" y="143.50"></text></g><g><title>evaluate_obligation (122,802 samples, 0.19%)</title><rect x="41.5909%" y="133" width="0.1915%" height="15" fill="rgb(228,99,48)"/><text x="41.8409%" y="143.50"></text></g><g><title>method_autoderef_steps (269,815 samples, 0.42%)</title><rect x="41.3996%" y="149" width="0.4208%" height="15" fill="rgb(253,11,6)"/><text x="41.6496%" y="159.50"></text></g><g><title>explicit_predicates_of (70,641 samples, 0.11%)</title><rect x="42.0495%" y="117" width="0.1102%" height="15" fill="rgb(247,143,39)"/><text x="42.2995%" y="127.50"></text></g><g><title>predicates_of (223,082 samples, 0.35%)</title><rect x="41.8594%" y="149" width="0.3479%" height="15" fill="rgb(236,97,10)"/><text x="42.1094%" y="159.50"></text></g><g><title>predicates_defined_on (146,041 samples, 0.23%)</title><rect x="41.9796%" y="133" width="0.2278%" height="15" fill="rgb(233,208,19)"/><text x="42.2296%" y="143.50"></text></g><g><title>type_of (70,890 samples, 0.11%)</title><rect x="42.3077%" y="149" width="0.1106%" height="15" fill="rgb(216,164,2)"/><text x="42.5577%" y="159.50"></text></g><g><title>adt_def (70,090 samples, 0.11%)</title><rect x="53.2821%" y="117" width="0.1093%" height="15" fill="rgb(220,129,5)"/><text x="53.5321%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (68,170 samples, 0.11%)</title><rect x="53.2851%" y="101" width="0.1063%" height="15" fill="rgb(242,17,10)"/><text x="53.5351%" y="111.50"></text></g><g><title>adt_sized_constraint (85,420 samples, 0.13%)</title><rect x="53.2662%" y="133" width="0.1332%" height="15" fill="rgb(242,107,0)"/><text x="53.5162%" y="143.50"></text></g><g><title>associated_item (282,552 samples, 0.44%)</title><rect x="53.5590%" y="117" width="0.4406%" height="15" fill="rgb(251,28,31)"/><text x="53.8090%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (214,262 samples, 0.33%)</title><rect x="53.6655%" y="101" width="0.3341%" height="15" fill="rgb(233,223,10)"/><text x="53.9155%" y="111.50"></text></g><g><title>associated_items (402,195 samples, 0.63%)</title><rect x="53.4060%" y="133" width="0.6272%" height="15" fill="rgb(215,21,27)"/><text x="53.6560%" y="143.50"></text></g><g><title>dropck_outlives (120,871 samples, 0.19%)</title><rect x="54.1133%" y="133" width="0.1885%" height="15" fill="rgb(232,23,21)"/><text x="54.3633%" y="143.50"></text></g><g><title>adt_def (81,450 samples, 0.13%)</title><rect x="55.8075%" y="101" width="0.1270%" height="15" fill="rgb(244,5,23)"/><text x="56.0575%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (78,970 samples, 0.12%)</title><rect x="55.8113%" y="85" width="0.1232%" height="15" fill="rgb(226,81,46)"/><text x="56.0613%" y="95.50"></text></g><g><title>adt_sized_constraint (95,540 samples, 0.15%)</title><rect x="55.7964%" y="117" width="0.1490%" height="15" fill="rgb(247,70,30)"/><text x="56.0464%" y="127.50"></text></g><g><title>impl_trait_ref (68,140 samples, 0.11%)</title><rect x="56.0682%" y="117" width="0.1063%" height="15" fill="rgb(212,68,19)"/><text x="56.3182%" y="127.50"></text></g><g><title>explicit_predicates_of (67,851 samples, 0.11%)</title><rect x="56.3262%" y="85" width="0.1058%" height="15" fill="rgb(240,187,13)"/><text x="56.5762%" y="95.50"></text></g><g><title>predicates_of (164,191 samples, 0.26%)</title><rect x="56.2021%" y="117" width="0.2561%" height="15" fill="rgb(223,113,26)"/><text x="56.4521%" y="127.50"></text></g><g><title>predicates_defined_on (112,851 samples, 0.18%)</title><rect x="56.2821%" y="101" width="0.1760%" height="15" fill="rgb(206,192,2)"/><text x="56.5321%" y="111.50"></text></g><g><title>specializes (68,241 samples, 0.11%)</title><rect x="56.4581%" y="117" width="0.1064%" height="15" fill="rgb(241,108,4)"/><text x="56.7081%" y="127.50"></text></g><g><title>trait_impls_of (428,675 samples, 0.67%)</title><rect x="56.5849%" y="117" width="0.6685%" height="15" fill="rgb(247,173,49)"/><text x="56.8349%" y="127.50"></text></g><g><title>implementations_of_trait (150,862 samples, 0.24%)</title><rect x="57.0182%" y="101" width="0.2353%" height="15" fill="rgb(224,114,35)"/><text x="57.2682%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (96,312 samples, 0.15%)</title><rect x="57.1032%" y="85" width="0.1502%" height="15" fill="rgb(245,159,27)"/><text x="57.3532%" y="95.50"></text></g><g><title>evaluate_obligation (1,894,629 samples, 2.95%)</title><rect x="54.3018%" y="133" width="2.9547%" height="15" fill="rgb(245,172,44)"/><text x="54.5518%" y="143.50">eva..</text></g><g><title>fn_sig (101,202 samples, 0.16%)</title><rect x="57.2843%" y="133" width="0.1578%" height="15" fill="rgb(236,23,11)"/><text x="57.5343%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (89,942 samples, 0.14%)</title><rect x="57.3019%" y="117" width="0.1403%" height="15" fill="rgb(205,117,38)"/><text x="57.5519%" y="127.50"></text></g><g><title>generics_of (82,280 samples, 0.13%)</title><rect x="57.4421%" y="133" width="0.1283%" height="15" fill="rgb(237,72,25)"/><text x="57.6921%" y="143.50"></text></g><g><title>impl_item_implementor_ids (111,022 samples, 0.17%)</title><rect x="57.5724%" y="133" width="0.1731%" height="15" fill="rgb(244,70,9)"/><text x="57.8224%" y="143.50"></text></g><g><title>associated_items (95,921 samples, 0.15%)</title><rect x="57.5960%" y="117" width="0.1496%" height="15" fill="rgb(217,125,39)"/><text x="57.8460%" y="127.50"></text></g><g><title>is_copy_raw (344,532 samples, 0.54%)</title><rect x="57.9073%" y="133" width="0.5373%" height="15" fill="rgb(235,36,10)"/><text x="58.1573%" y="143.50"></text></g><g><title>evaluate_obligation (310,932 samples, 0.48%)</title><rect x="57.9597%" y="117" width="0.4849%" height="15" fill="rgb(251,123,47)"/><text x="58.2097%" y="127.50"></text></g><g><title>trait_impls_of (122,811 samples, 0.19%)</title><rect x="58.2531%" y="101" width="0.1915%" height="15" fill="rgb(221,13,13)"/><text x="58.5031%" y="111.50"></text></g><g><title>lint_levels (71,200 samples, 0.11%)</title><rect x="58.5640%" y="133" width="0.1110%" height="15" fill="rgb(238,131,9)"/><text x="58.8140%" y="143.50"></text></g><g><title>evaluate_obligation (101,534 samples, 0.16%)</title><rect x="58.9026%" y="117" width="0.1583%" height="15" fill="rgb(211,50,8)"/><text x="59.1526%" y="127.50"></text></g><g><title>method_autoderef_steps (205,064 samples, 0.32%)</title><rect x="58.7522%" y="133" width="0.3198%" height="15" fill="rgb(245,182,24)"/><text x="59.0022%" y="143.50"></text></g><g><title>explicit_predicates_of (143,320 samples, 0.22%)</title><rect x="59.3451%" y="101" width="0.2235%" height="15" fill="rgb(242,14,37)"/><text x="59.5951%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (124,080 samples, 0.19%)</title><rect x="59.3751%" y="85" width="0.1935%" height="15" fill="rgb(246,228,12)"/><text x="59.6251%" y="95.50"></text></g><g><title>predicates_of (319,622 samples, 0.50%)</title><rect x="59.1201%" y="133" width="0.4985%" height="15" fill="rgb(213,55,15)"/><text x="59.3701%" y="143.50"></text></g><g><title>predicates_defined_on (245,030 samples, 0.38%)</title><rect x="59.2364%" y="117" width="0.3821%" height="15" fill="rgb(209,9,3)"/><text x="59.4864%" y="127.50"></text></g><g><title>typeck (11,198,214 samples, 17.46%)</title><rect x="42.4182%" y="149" width="17.4637%" height="15" fill="rgb(230,59,30)"/><text x="42.6682%" y="159.50">typeck</text></g><g><title>item_bodies_checking (19,235,785 samples, 30.00%)</title><rect x="29.9501%" y="197" width="29.9984%" height="15" fill="rgb(209,121,21)"/><text x="30.2001%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,233,225 samples, 29.99%)</title><rect x="29.9541%" y="181" width="29.9944%" height="15" fill="rgb(220,109,13)"/><text x="30.2041%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (19,211,354 samples, 29.96%)</title><rect x="29.9882%" y="165" width="29.9603%" height="15" fill="rgb(232,18,1)"/><text x="30.2382%" y="175.50">typeck</text></g><g><title>fn_sig (236,324 samples, 0.37%)</title><rect x="60.0819%" y="165" width="0.3685%" height="15" fill="rgb(215,41,42)"/><text x="60.3319%" y="175.50"></text></g><g><title>type_of (64,732 samples, 0.10%)</title><rect x="60.3495%" y="149" width="0.1010%" height="15" fill="rgb(224,123,36)"/><text x="60.5995%" y="159.50"></text></g><g><title>named_region_map (86,090 samples, 0.13%)</title><rect x="60.5338%" y="149" width="0.1343%" height="15" fill="rgb(240,125,3)"/><text x="60.7838%" y="159.50"></text></g><g><title>resolve_lifetimes (81,250 samples, 0.13%)</title><rect x="60.5414%" y="133" width="0.1267%" height="15" fill="rgb(205,98,50)"/><text x="60.7914%" y="143.50"></text></g><g><title>generics_of (145,310 samples, 0.23%)</title><rect x="60.4504%" y="165" width="0.2266%" height="15" fill="rgb(205,185,37)"/><text x="60.7004%" y="175.50"></text></g><g><title>predicates_of (83,241 samples, 0.13%)</title><rect x="60.6771%" y="165" width="0.1298%" height="15" fill="rgb(238,207,15)"/><text x="60.9271%" y="175.50"></text></g><g><title>predicates_defined_on (75,621 samples, 0.12%)</title><rect x="60.6889%" y="149" width="0.1179%" height="15" fill="rgb(213,199,42)"/><text x="60.9389%" y="159.50"></text></g><g><title>type_collecting (560,756 samples, 0.87%)</title><rect x="59.9600%" y="197" width="0.8745%" height="15" fill="rgb(235,201,11)"/><text x="60.2100%" y="207.50"></text></g><g><title>collect_mod_item_types (552,316 samples, 0.86%)</title><rect x="59.9731%" y="181" width="0.8613%" height="15" fill="rgb(207,46,11)"/><text x="60.2231%" y="191.50"></text></g><g><title>adt_def (90,430 samples, 0.14%)</title><rect x="61.9129%" y="133" width="0.1410%" height="15" fill="rgb(241,35,35)"/><text x="62.1629%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (88,800 samples, 0.14%)</title><rect x="61.9154%" y="117" width="0.1385%" height="15" fill="rgb(243,32,47)"/><text x="62.1654%" y="127.50"></text></g><g><title>item_attrs (69,650 samples, 0.11%)</title><rect x="61.9453%" y="101" width="0.1086%" height="15" fill="rgb(247,202,23)"/><text x="62.1953%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (67,830 samples, 0.11%)</title><rect x="61.9481%" y="85" width="0.1058%" height="15" fill="rgb(219,102,11)"/><text x="62.1981%" y="95.50"></text></g><g><title>adt_sized_constraint (104,291 samples, 0.16%)</title><rect x="62.0920%" y="117" width="0.1626%" height="15" fill="rgb(243,110,44)"/><text x="62.3420%" y="127.50"></text></g><g><title>adt_sized_constraint (156,262 samples, 0.24%)</title><rect x="62.0539%" y="133" width="0.2437%" height="15" fill="rgb(222,74,54)"/><text x="62.3039%" y="143.50"></text></g><g><title>adt_sized_constraint (272,172 samples, 0.42%)</title><rect x="61.8979%" y="149" width="0.4245%" height="15" fill="rgb(216,99,12)"/><text x="62.1479%" y="159.50"></text></g><g><title>evaluate_obligation (416,454 samples, 0.65%)</title><rect x="61.7320%" y="165" width="0.6495%" height="15" fill="rgb(226,22,26)"/><text x="61.9820%" y="175.50"></text></g><g><title>implied_outlives_bounds (111,152 samples, 0.17%)</title><rect x="62.3814%" y="165" width="0.1733%" height="15" fill="rgb(217,163,10)"/><text x="62.6314%" y="175.50"></text></g><g><title>param_env (190,101 samples, 0.30%)</title><rect x="62.5548%" y="165" width="0.2965%" height="15" fill="rgb(213,25,53)"/><text x="62.8048%" y="175.50"></text></g><g><title>predicates_of (90,951 samples, 0.14%)</title><rect x="62.8512%" y="165" width="0.1418%" height="15" fill="rgb(252,105,26)"/><text x="63.1012%" y="175.50"></text></g><g><title>predicates_defined_on (76,331 samples, 0.12%)</title><rect x="62.8740%" y="149" width="0.1190%" height="15" fill="rgb(220,39,43)"/><text x="63.1240%" y="159.50"></text></g><g><title>region_scope_tree (125,900 samples, 0.20%)</title><rect x="62.9931%" y="165" width="0.1963%" height="15" fill="rgb(229,68,48)"/><text x="63.2431%" y="175.50"></text></g><g><title>analysis (40,062,647 samples, 62.48%)</title><rect x="0.8423%" y="229" width="62.4781%" height="15" fill="rgb(252,8,32)"/><text x="1.0923%" y="239.50">analysis</text></g><g><title>type_check_crate (21,466,529 samples, 33.48%)</title><rect x="29.8431%" y="213" width="33.4773%" height="15" fill="rgb(223,20,43)"/><text x="30.0931%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,592,107 samples, 2.48%)</title><rect x="60.8375%" y="197" width="2.4829%" height="15" fill="rgb(229,81,49)"/><text x="61.0875%" y="207.50">wf..</text></g><g><title>check_item_well_formed (1,542,537 samples, 2.41%)</title><rect x="60.9148%" y="181" width="2.4056%" height="15" fill="rgb(236,28,36)"/><text x="61.1648%" y="191.50">ch..</text></g><g><title>trait_impls_of (84,001 samples, 0.13%)</title><rect x="63.1894%" y="165" width="0.1310%" height="15" fill="rgb(249,185,26)"/><text x="63.4394%" y="175.50"></text></g><g><title>codegen_crate (375,095 samples, 0.58%)</title><rect x="63.3358%" y="229" width="0.5850%" height="15" fill="rgb(249,174,33)"/><text x="63.5858%" y="239.50"></text></g><g><title>AST_validation (101,072 samples, 0.16%)</title><rect x="64.1883%" y="213" width="0.1576%" height="15" fill="rgb(233,201,37)"/><text x="64.4383%" y="223.50"></text></g><g><title>crate_injection (82,791 samples, 0.13%)</title><rect x="64.3882%" y="213" width="0.1291%" height="15" fill="rgb(221,78,26)"/><text x="64.6382%" y="223.50"></text></g><g><title>metadata_register_crate (2,028,302 samples, 3.16%)</title><rect x="78.5192%" y="181" width="3.1632%" height="15" fill="rgb(250,127,30)"/><text x="78.7692%" y="191.50">met..</text></g><g><title>metadata_register_crate (757,018 samples, 1.18%)</title><rect x="80.5018%" y="165" width="1.1806%" height="15" fill="rgb(230,49,44)"/><text x="80.7518%" y="175.50"></text></g><g><title>macro_expand_crate (11,116,563 samples, 17.34%)</title><rect x="64.5173%" y="213" width="17.3364%" height="15" fill="rgb(229,67,23)"/><text x="64.7673%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (11,100,453 samples, 17.31%)</title><rect x="64.5424%" y="197" width="17.3113%" height="15" fill="rgb(249,83,47)"/><text x="64.7924%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (109,832 samples, 0.17%)</title><rect x="81.6824%" y="181" width="0.1713%" height="15" fill="rgb(215,43,3)"/><text x="81.9324%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (108,092 samples, 0.17%)</title><rect x="81.8576%" y="213" width="0.1686%" height="15" fill="rgb(238,154,13)"/><text x="82.1076%" y="223.50"></text></g><g><title>finalize_macro_resolutions (114,122 samples, 0.18%)</title><rect x="82.1073%" y="197" width="0.1780%" height="15" fill="rgb(219,56,2)"/><text x="82.3573%" y="207.50"></text></g><g><title>late_resolve_crate (4,112,036 samples, 6.41%)</title><rect x="82.2853%" y="197" width="6.4128%" height="15" fill="rgb(233,0,4)"/><text x="82.5353%" y="207.50">late_res..</text></g><g><title>configure_and_expand (15,942,218 samples, 24.86%)</title><rect x="63.9208%" y="229" width="24.8621%" height="15" fill="rgb(235,30,7)"/><text x="64.1708%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (4,332,568 samples, 6.76%)</title><rect x="82.0261%" y="213" width="6.7567%" height="15" fill="rgb(250,79,13)"/><text x="82.2761%" y="223.50">resolve_c..</text></g><g><title>early_lint_checks (158,042 samples, 0.25%)</title><rect x="88.9044%" y="229" width="0.2465%" height="15" fill="rgb(211,146,34)"/><text x="89.1544%" y="239.50"></text></g><g><title>free_global_ctxt (2,637,149 samples, 4.11%)</title><rect x="89.1509%" y="229" width="4.1127%" height="15" fill="rgb(228,22,38)"/><text x="89.4009%" y="239.50">free..</text></g><g><title>crate_hash (69,441 samples, 0.11%)</title><rect x="93.7580%" y="213" width="0.1083%" height="15" fill="rgb(235,168,5)"/><text x="94.0080%" y="223.50"></text></g><g><title>generate_crate_metadata (476,045 samples, 0.74%)</title><rect x="93.2635%" y="229" width="0.7424%" height="15" fill="rgb(221,155,16)"/><text x="93.5135%" y="239.50"></text></g><g><title>hir_lowering (943,770 samples, 1.47%)</title><rect x="94.0059%" y="229" width="1.4718%" height="15" fill="rgb(215,215,53)"/><text x="94.2559%" y="239.50"></text></g><g><title>parse_crate (1,773,300 samples, 2.77%)</title><rect x="95.5550%" y="229" width="2.7655%" height="15" fill="rgb(223,4,10)"/><text x="95.8050%" y="239.50">pa..</text></g><g><title>prepare_outputs (191,122 samples, 0.30%)</title><rect x="98.3322%" y="229" width="0.2981%" height="15" fill="rgb(234,103,6)"/><text x="98.5822%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (495,215 samples, 0.77%)</title><rect x="98.6303%" y="229" width="0.7723%" height="15" fill="rgb(227,97,0)"/><text x="98.8803%" y="239.50"></text></g><g><title>setup_global_ctxt (84,110 samples, 0.13%)</title><rect x="99.4199%" y="229" width="0.1312%" height="15" fill="rgb(234,150,53)"/><text x="99.6699%" y="239.50"></text></g><g><title>all (64,122,686 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (64,122,686 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (287,883 samples, 0.45%)</title><rect x="99.5510%" y="229" width="0.4490%" height="15" fill="rgb(237,53,32)"/><text x="99.8010%" y="239.50"></text></g></svg></svg>