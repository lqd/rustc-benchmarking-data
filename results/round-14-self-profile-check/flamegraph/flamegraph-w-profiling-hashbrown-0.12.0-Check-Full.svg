<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (806,378 samples, 0.13%)</title><rect x="14.0830%" y="149" width="0.1311%" height="15" fill="rgb(227,0,7)"/><text x="14.3330%" y="159.50"></text></g><g><title>param_env (1,054,125 samples, 0.17%)</title><rect x="16.0920%" y="117" width="0.1714%" height="15" fill="rgb(217,0,24)"/><text x="16.3420%" y="127.50"></text></g><g><title>item_attrs (806,158 samples, 0.13%)</title><rect x="16.9139%" y="85" width="0.1311%" height="15" fill="rgb(221,193,54)"/><text x="17.1639%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (778,777 samples, 0.13%)</title><rect x="16.9184%" y="69" width="0.1266%" height="15" fill="rgb(248,212,6)"/><text x="17.1684%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,191,183 samples, 0.19%)</title><rect x="16.8590%" y="101" width="0.1937%" height="15" fill="rgb(208,68,35)"/><text x="17.1090%" y="111.50"></text></g><g><title>is_copy_raw (894,939 samples, 0.15%)</title><rect x="19.9213%" y="85" width="0.1455%" height="15" fill="rgb(232,128,0)"/><text x="20.1713%" y="95.50"></text></g><g><title>evaluate_obligation (702,219 samples, 0.11%)</title><rect x="19.9526%" y="69" width="0.1142%" height="15" fill="rgb(207,160,47)"/><text x="20.2026%" y="79.50"></text></g><g><title>needs_drop_raw (6,726,981 samples, 1.09%)</title><rect x="20.0668%" y="85" width="1.0937%" height="15" fill="rgb(228,23,34)"/><text x="20.3168%" y="95.50"></text></g><g><title>is_copy_raw (5,188,436 samples, 0.84%)</title><rect x="20.3169%" y="69" width="0.8436%" height="15" fill="rgb(218,30,26)"/><text x="20.5669%" y="79.50"></text></g><g><title>evaluate_obligation (4,018,242 samples, 0.65%)</title><rect x="20.5072%" y="53" width="0.6533%" height="15" fill="rgb(220,122,19)"/><text x="20.7572%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (2,675,327 samples, 0.43%)</title><rect x="21.4229%" y="69" width="0.4350%" height="15" fill="rgb(250,228,42)"/><text x="21.6729%" y="79.50"></text></g><g><title>resolve_instance (5,069,430 samples, 0.82%)</title><rect x="21.1605%" y="85" width="0.8242%" height="15" fill="rgb(240,193,28)"/><text x="21.4105%" y="95.50"></text></g><g><title>thir_body (6,248,242 samples, 1.02%)</title><rect x="22.0226%" y="85" width="1.0159%" height="15" fill="rgb(216,20,37)"/><text x="22.2726%" y="95.50"></text></g><g><title>mir_const (48,240,863 samples, 7.84%)</title><rect x="15.2283%" y="133" width="7.8433%" height="15" fill="rgb(206,188,39)"/><text x="15.4783%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (41,874,567 samples, 6.81%)</title><rect x="16.2634%" y="117" width="6.8083%" height="15" fill="rgb(217,207,13)"/><text x="16.5134%" y="127.50">unsafety_..</text></g><g><title>mir_built (37,019,927 samples, 6.02%)</title><rect x="17.0527%" y="101" width="6.0190%" height="15" fill="rgb(231,73,38)"/><text x="17.3027%" y="111.50">mir_built</text></g><g><title>mir_const (931,934 samples, 0.15%)</title><rect x="23.2397%" y="117" width="0.1515%" height="15" fill="rgb(225,20,46)"/><text x="23.4897%" y="127.50"></text></g><g><title>unsafety_check_result (731,800 samples, 0.12%)</title><rect x="23.2723%" y="101" width="0.1190%" height="15" fill="rgb(210,31,41)"/><text x="23.5223%" y="111.50"></text></g><g><title>mir_built (653,920 samples, 0.11%)</title><rect x="23.2849%" y="85" width="0.1063%" height="15" fill="rgb(221,200,47)"/><text x="23.5349%" y="95.50"></text></g><g><title>mir_const_qualif (1,991,936 samples, 0.32%)</title><rect x="23.0716%" y="133" width="0.3239%" height="15" fill="rgb(226,26,5)"/><text x="23.3216%" y="143.50"></text></g><g><title>mir_promoted (55,432,665 samples, 9.01%)</title><rect x="14.3829%" y="149" width="9.0126%" height="15" fill="rgb(249,33,26)"/><text x="14.6329%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,709,839 samples, 0.28%)</title><rect x="23.3965%" y="149" width="0.2780%" height="15" fill="rgb(235,183,28)"/><text x="23.6465%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,373,939 samples, 0.55%)</title><rect x="23.6745%" y="149" width="0.5486%" height="15" fill="rgb(221,5,38)"/><text x="23.9245%" y="159.50"></text></g><g><title>normalize_projection_ty (1,947,436 samples, 0.32%)</title><rect x="23.9064%" y="133" width="0.3166%" height="15" fill="rgb(247,18,42)"/><text x="24.1564%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,447,076 samples, 0.24%)</title><rect x="24.2230%" y="149" width="0.2353%" height="15" fill="rgb(241,131,45)"/><text x="24.4730%" y="159.50"></text></g><g><title>normalize_projection_ty (645,309 samples, 0.10%)</title><rect x="24.3534%" y="133" width="0.1049%" height="15" fill="rgb(249,31,29)"/><text x="24.6034%" y="143.50"></text></g><g><title>type_op_prove_predicate (24,020,330 samples, 3.91%)</title><rect x="24.4899%" y="149" width="3.9054%" height="15" fill="rgb(225,111,53)"/><text x="24.7399%" y="159.50">type..</text></g><g><title>MIR_borrow_checking (172,298,129 samples, 28.01%)</title><rect x="0.3840%" y="181" width="28.0134%" height="15" fill="rgb(238,160,17)"/><text x="0.6340%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (171,281,182 samples, 27.85%)</title><rect x="0.5494%" y="165" width="27.8481%" height="15" fill="rgb(214,148,48)"/><text x="0.7994%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,056,541 samples, 0.17%)</title><rect x="28.3975%" y="181" width="0.1718%" height="15" fill="rgb(232,36,49)"/><text x="28.6475%" y="191.50"></text></g><g><title>hir_module_items (1,209,545 samples, 0.20%)</title><rect x="28.5692%" y="181" width="0.1967%" height="15" fill="rgb(209,103,24)"/><text x="28.8192%" y="191.50"></text></g><g><title>codegen_fn_attrs (726,790 samples, 0.12%)</title><rect x="29.1107%" y="117" width="0.1182%" height="15" fill="rgb(229,88,8)"/><text x="29.3607%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,595,701 samples, 0.26%)</title><rect x="28.9779%" y="149" width="0.2594%" height="15" fill="rgb(213,181,19)"/><text x="29.2279%" y="159.50"></text></g><g><title>should_inherit_track_caller (1,290,776 samples, 0.21%)</title><rect x="29.0275%" y="133" width="0.2099%" height="15" fill="rgb(254,191,54)"/><text x="29.2775%" y="143.50"></text></g><g><title>check_mod_attrs (2,856,703 samples, 0.46%)</title><rect x="28.7729%" y="165" width="0.4645%" height="15" fill="rgb(241,83,37)"/><text x="29.0229%" y="175.50"></text></g><g><title>check_mod_const_bodies (758,770 samples, 0.12%)</title><rect x="29.2374%" y="165" width="0.1234%" height="15" fill="rgb(233,36,39)"/><text x="29.4874%" y="175.50"></text></g><g><title>lookup_deprecation_entry (716,068 samples, 0.12%)</title><rect x="29.5835%" y="149" width="0.1164%" height="15" fill="rgb(226,3,54)"/><text x="29.8335%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,808,580 samples, 0.29%)</title><rect x="29.4370%" y="165" width="0.2941%" height="15" fill="rgb(245,192,40)"/><text x="29.6870%" y="175.50"></text></g><g><title>misc_checking_1 (6,112,618 samples, 0.99%)</title><rect x="28.7660%" y="181" width="0.9938%" height="15" fill="rgb(238,167,29)"/><text x="29.0160%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (3,402,498 samples, 0.55%)</title><rect x="29.7601%" y="165" width="0.5532%" height="15" fill="rgb(232,182,51)"/><text x="30.0101%" y="175.50"></text></g><g><title>check_mod_liveness (2,869,920 samples, 0.47%)</title><rect x="29.8467%" y="149" width="0.4666%" height="15" fill="rgb(231,60,39)"/><text x="30.0967%" y="159.50"></text></g><g><title>type_uninhabited_from (660,735 samples, 0.11%)</title><rect x="30.2059%" y="133" width="0.1074%" height="15" fill="rgb(208,69,12)"/><text x="30.4559%" y="143.50"></text></g><g><title>misc_checking_2 (6,679,485 samples, 1.09%)</title><rect x="29.7598%" y="181" width="1.0860%" height="15" fill="rgb(235,93,37)"/><text x="30.0098%" y="191.50"></text></g><g><title>match_checking (3,275,087 samples, 0.53%)</title><rect x="30.3133%" y="165" width="0.5325%" height="15" fill="rgb(213,116,39)"/><text x="30.5633%" y="175.50"></text></g><g><title>check_match (3,020,904 samples, 0.49%)</title><rect x="30.3546%" y="149" width="0.4912%" height="15" fill="rgb(222,207,29)"/><text x="30.6046%" y="159.50"></text></g><g><title>check_private_in_public (1,398,166 samples, 0.23%)</title><rect x="30.8479%" y="165" width="0.2273%" height="15" fill="rgb(206,96,30)"/><text x="31.0979%" y="175.50"></text></g><g><title>death_checking (2,309,886 samples, 0.38%)</title><rect x="31.0752%" y="165" width="0.3756%" height="15" fill="rgb(218,138,4)"/><text x="31.3252%" y="175.50"></text></g><g><title>param_env (923,851 samples, 0.15%)</title><rect x="31.8671%" y="133" width="0.1502%" height="15" fill="rgb(250,191,14)"/><text x="32.1171%" y="143.50"></text></g><g><title>crate_lints (3,984,754 samples, 0.65%)</title><rect x="31.4513%" y="149" width="0.6479%" height="15" fill="rgb(239,60,40)"/><text x="31.7013%" y="159.50"></text></g><g><title>lint_checking (6,819,125 samples, 1.11%)</title><rect x="31.4508%" y="165" width="1.1087%" height="15" fill="rgb(206,27,48)"/><text x="31.7008%" y="175.50"></text></g><g><title>module_lints (2,831,091 samples, 0.46%)</title><rect x="32.0992%" y="149" width="0.4603%" height="15" fill="rgb(225,35,8)"/><text x="32.3492%" y="159.50"></text></g><g><title>lint_mod (2,818,121 samples, 0.46%)</title><rect x="32.1013%" y="133" width="0.4582%" height="15" fill="rgb(250,213,24)"/><text x="32.3513%" y="143.50"></text></g><g><title>privacy_access_levels (2,386,666 samples, 0.39%)</title><rect x="32.5595%" y="165" width="0.3880%" height="15" fill="rgb(247,123,22)"/><text x="32.8095%" y="175.50"></text></g><g><title>privacy_checking_modules (6,305,661 samples, 1.03%)</title><rect x="32.9475%" y="165" width="1.0252%" height="15" fill="rgb(231,138,38)"/><text x="33.1975%" y="175.50"></text></g><g><title>check_mod_privacy (6,295,841 samples, 1.02%)</title><rect x="32.9491%" y="149" width="1.0236%" height="15" fill="rgb(231,145,46)"/><text x="33.1991%" y="159.50"></text></g><g><title>misc_checking_3 (19,309,366 samples, 3.14%)</title><rect x="30.8458%" y="181" width="3.1395%" height="15" fill="rgb(251,118,11)"/><text x="31.0958%" y="191.50">mis..</text></g><g><title>impl_parent (1,799,696 samples, 0.29%)</title><rect x="35.0007%" y="117" width="0.2926%" height="15" fill="rgb(217,147,25)"/><text x="35.2507%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,054,889 samples, 0.17%)</title><rect x="35.1218%" y="101" width="0.1715%" height="15" fill="rgb(247,81,37)"/><text x="35.3718%" y="111.50"></text></g><g><title>impl_trait_ref (4,071,828 samples, 0.66%)</title><rect x="35.2935%" y="117" width="0.6620%" height="15" fill="rgb(209,12,38)"/><text x="35.5435%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,107,664 samples, 0.51%)</title><rect x="35.4503%" y="101" width="0.5053%" height="15" fill="rgb(227,1,9)"/><text x="35.7003%" y="111.50"></text></g><g><title>item_attrs (952,150 samples, 0.15%)</title><rect x="35.9555%" y="117" width="0.1548%" height="15" fill="rgb(248,47,43)"/><text x="36.2055%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (899,200 samples, 0.15%)</title><rect x="35.9641%" y="101" width="0.1462%" height="15" fill="rgb(221,10,30)"/><text x="36.2141%" y="111.50"></text></g><g><title>trait_impls_of (674,527 samples, 0.11%)</title><rect x="36.2055%" y="117" width="0.1097%" height="15" fill="rgb(210,229,1)"/><text x="36.4555%" y="127.50"></text></g><g><title>coherent_trait (14,026,646 samples, 2.28%)</title><rect x="34.0580%" y="149" width="2.2806%" height="15" fill="rgb(222,148,37)"/><text x="34.3080%" y="159.50">c..</text></g><g><title>specialization_graph_of (13,614,001 samples, 2.21%)</title><rect x="34.1251%" y="133" width="2.2135%" height="15" fill="rgb(234,67,33)"/><text x="34.3751%" y="143.50">s..</text></g><g><title>coherence_checking (14,340,560 samples, 2.33%)</title><rect x="34.0527%" y="165" width="2.3316%" height="15" fill="rgb(247,98,35)"/><text x="34.3027%" y="175.50">c..</text></g><g><title>associated_item (709,629 samples, 0.12%)</title><rect x="54.9799%" y="101" width="0.1154%" height="15" fill="rgb(247,138,52)"/><text x="55.2299%" y="111.50"></text></g><g><title>associated_items (1,036,403 samples, 0.17%)</title><rect x="54.9354%" y="117" width="0.1685%" height="15" fill="rgb(213,79,30)"/><text x="55.1854%" y="127.50"></text></g><g><title>dropck_outlives (2,172,666 samples, 0.35%)</title><rect x="55.1345%" y="117" width="0.3532%" height="15" fill="rgb(246,177,23)"/><text x="55.3845%" y="127.50"></text></g><g><title>evaluate_obligation (8,399,692 samples, 1.37%)</title><rect x="55.4882%" y="117" width="1.3657%" height="15" fill="rgb(230,62,27)"/><text x="55.7382%" y="127.50"></text></g><g><title>method_autoderef_steps (3,280,294 samples, 0.53%)</title><rect x="57.0874%" y="117" width="0.5333%" height="15" fill="rgb(216,154,8)"/><text x="57.3374%" y="127.50"></text></g><g><title>evaluate_obligation (1,522,067 samples, 0.25%)</title><rect x="57.3733%" y="101" width="0.2475%" height="15" fill="rgb(244,35,45)"/><text x="57.6233%" y="111.50"></text></g><g><title>predicates_of (655,337 samples, 0.11%)</title><rect x="57.7348%" y="117" width="0.1065%" height="15" fill="rgb(251,115,12)"/><text x="57.9848%" y="127.50"></text></g><g><title>evaluate_obligation (3,159,376 samples, 0.51%)</title><rect x="63.6344%" y="101" width="0.5137%" height="15" fill="rgb(240,54,50)"/><text x="63.8844%" y="111.50"></text></g><g><title>is_copy_raw (1,016,998 samples, 0.17%)</title><rect x="64.2395%" y="101" width="0.1654%" height="15" fill="rgb(233,84,52)"/><text x="64.4895%" y="111.50"></text></g><g><title>evaluate_obligation (815,306 samples, 0.13%)</title><rect x="64.2723%" y="85" width="0.1326%" height="15" fill="rgb(207,117,47)"/><text x="64.5223%" y="95.50"></text></g><g><title>method_autoderef_steps (1,146,084 samples, 0.19%)</title><rect x="64.4314%" y="101" width="0.1863%" height="15" fill="rgb(249,43,39)"/><text x="64.6814%" y="111.50"></text></g><g><title>typeck (41,966,375 samples, 6.82%)</title><rect x="57.8788%" y="117" width="6.8232%" height="15" fill="rgb(209,38,44)"/><text x="58.1288%" y="127.50">typeck</text></g><g><title>item_bodies_checking (174,135,688 samples, 28.31%)</title><rect x="36.4240%" y="165" width="28.3122%" height="15" fill="rgb(236,212,23)"/><text x="36.6740%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (174,131,608 samples, 28.31%)</title><rect x="36.4247%" y="149" width="28.3115%" height="15" fill="rgb(242,79,21)"/><text x="36.6747%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (173,443,284 samples, 28.20%)</title><rect x="36.5366%" y="133" width="28.1996%" height="15" fill="rgb(211,96,35)"/><text x="36.7866%" y="143.50">typeck</text></g><g><title>mir_borrowck (747,378 samples, 0.12%)</title><rect x="66.4269%" y="101" width="0.1215%" height="15" fill="rgb(253,215,40)"/><text x="66.6769%" y="111.50"></text></g><g><title>mir_built (4,245,798 samples, 0.69%)</title><rect x="66.6085%" y="53" width="0.6903%" height="15" fill="rgb(211,81,21)"/><text x="66.8585%" y="63.50"></text></g><g><title>typeck (3,684,662 samples, 0.60%)</title><rect x="66.6997%" y="37" width="0.5991%" height="15" fill="rgb(208,190,38)"/><text x="66.9497%" y="47.50"></text></g><g><title>mir_const (4,816,984 samples, 0.78%)</title><rect x="66.5561%" y="85" width="0.7832%" height="15" fill="rgb(235,213,38)"/><text x="66.8061%" y="95.50"></text></g><g><title>unsafety_check_result (4,544,341 samples, 0.74%)</title><rect x="66.6004%" y="69" width="0.7389%" height="15" fill="rgb(237,122,38)"/><text x="66.8504%" y="79.50"></text></g><g><title>mir_promoted (4,868,774 samples, 0.79%)</title><rect x="66.5484%" y="101" width="0.7916%" height="15" fill="rgb(244,218,35)"/><text x="66.7984%" y="111.50"></text></g><g><title>type_of (6,939,039 samples, 1.13%)</title><rect x="66.2724%" y="133" width="1.1282%" height="15" fill="rgb(240,68,47)"/><text x="66.5224%" y="143.50"></text></g><g><title>mir_borrowck (6,926,939 samples, 1.13%)</title><rect x="66.2743%" y="117" width="1.1262%" height="15" fill="rgb(210,16,53)"/><text x="66.5243%" y="127.50"></text></g><g><title>item_types_checking (16,915,329 samples, 2.75%)</title><rect x="64.7363%" y="165" width="2.7502%" height="15" fill="rgb(235,124,12)"/><text x="64.9863%" y="175.50">it..</text></g><g><title>check_mod_item_types (16,901,269 samples, 2.75%)</title><rect x="64.7385%" y="149" width="2.7479%" height="15" fill="rgb(224,169,11)"/><text x="64.9885%" y="159.50">ch..</text></g><g><title>fn_sig (1,556,667 samples, 0.25%)</title><rect x="67.7634%" y="133" width="0.2531%" height="15" fill="rgb(250,166,2)"/><text x="68.0134%" y="143.50"></text></g><g><title>is_late_bound_map (1,683,777 samples, 0.27%)</title><rect x="68.1480%" y="117" width="0.2738%" height="15" fill="rgb(242,216,29)"/><text x="68.3980%" y="127.50"></text></g><g><title>resolve_lifetimes (1,563,204 samples, 0.25%)</title><rect x="68.1676%" y="101" width="0.2542%" height="15" fill="rgb(230,116,27)"/><text x="68.4176%" y="111.50"></text></g><g><title>named_region_map (1,233,394 samples, 0.20%)</title><rect x="68.4218%" y="117" width="0.2005%" height="15" fill="rgb(228,99,48)"/><text x="68.6718%" y="127.50"></text></g><g><title>resolve_lifetimes (1,143,154 samples, 0.19%)</title><rect x="68.4364%" y="101" width="0.1859%" height="15" fill="rgb(253,11,6)"/><text x="68.6864%" y="111.50"></text></g><g><title>lint_levels (891,230 samples, 0.14%)</title><rect x="68.4774%" y="85" width="0.1449%" height="15" fill="rgb(247,143,39)"/><text x="68.7274%" y="95.50"></text></g><g><title>generics_of (3,802,022 samples, 0.62%)</title><rect x="68.0165%" y="133" width="0.6182%" height="15" fill="rgb(236,97,10)"/><text x="68.2665%" y="143.50"></text></g><g><title>late_bound_vars_map (1,203,324 samples, 0.20%)</title><rect x="69.2045%" y="85" width="0.1956%" height="15" fill="rgb(233,208,19)"/><text x="69.4545%" y="95.50"></text></g><g><title>resolve_lifetimes (1,120,263 samples, 0.18%)</title><rect x="69.2180%" y="69" width="0.1821%" height="15" fill="rgb(216,164,2)"/><text x="69.4680%" y="79.50"></text></g><g><title>explicit_predicates_of (3,415,031 samples, 0.56%)</title><rect x="68.8577%" y="101" width="0.5552%" height="15" fill="rgb(220,129,5)"/><text x="69.1077%" y="111.50"></text></g><g><title>predicates_of (6,084,154 samples, 0.99%)</title><rect x="68.6724%" y="133" width="0.9892%" height="15" fill="rgb(242,17,10)"/><text x="68.9224%" y="143.50"></text></g><g><title>predicates_defined_on (5,743,179 samples, 0.93%)</title><rect x="68.7278%" y="117" width="0.9338%" height="15" fill="rgb(242,107,0)"/><text x="68.9778%" y="127.50"></text></g><g><title>inferred_outlives_of (1,529,378 samples, 0.25%)</title><rect x="69.4130%" y="101" width="0.2487%" height="15" fill="rgb(251,28,31)"/><text x="69.6630%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,407,375 samples, 0.23%)</title><rect x="69.4328%" y="85" width="0.2288%" height="15" fill="rgb(233,223,10)"/><text x="69.6828%" y="95.50"></text></g><g><title>type_of (714,996 samples, 0.12%)</title><rect x="69.5454%" y="69" width="0.1162%" height="15" fill="rgb(215,21,27)"/><text x="69.7954%" y="79.50"></text></g><g><title>type_collecting (14,289,239 samples, 2.32%)</title><rect x="67.4876%" y="165" width="2.3232%" height="15" fill="rgb(232,23,21)"/><text x="67.7376%" y="175.50">t..</text></g><g><title>collect_mod_item_types (14,271,479 samples, 2.32%)</title><rect x="67.4905%" y="149" width="2.3204%" height="15" fill="rgb(244,5,23)"/><text x="67.7405%" y="159.50">c..</text></g><g><title>type_of (884,887 samples, 0.14%)</title><rect x="69.6670%" y="133" width="0.1439%" height="15" fill="rgb(226,81,46)"/><text x="69.9170%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,801,640 samples, 0.29%)</title><rect x="73.6958%" y="133" width="0.2929%" height="15" fill="rgb(247,70,30)"/><text x="73.9458%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,784,750 samples, 0.29%)</title><rect x="73.6985%" y="117" width="0.2902%" height="15" fill="rgb(212,68,19)"/><text x="73.9485%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,783,170 samples, 0.29%)</title><rect x="73.6988%" y="101" width="0.2899%" height="15" fill="rgb(240,187,13)"/><text x="73.9488%" y="111.50"></text></g><g><title>evaluate_obligation (3,048,511 samples, 0.50%)</title><rect x="73.9887%" y="133" width="0.4956%" height="15" fill="rgb(223,113,26)"/><text x="74.2387%" y="143.50"></text></g><g><title>implied_outlives_bounds (2,995,760 samples, 0.49%)</title><rect x="74.4876%" y="133" width="0.4871%" height="15" fill="rgb(206,192,2)"/><text x="74.7376%" y="143.50"></text></g><g><title>param_env (3,594,316 samples, 0.58%)</title><rect x="75.0424%" y="133" width="0.5844%" height="15" fill="rgb(241,108,4)"/><text x="75.2924%" y="143.50"></text></g><g><title>region_scope_tree (2,310,058 samples, 0.38%)</title><rect x="75.6341%" y="133" width="0.3756%" height="15" fill="rgb(247,173,49)"/><text x="75.8841%" y="143.50"></text></g><g><title>check_impl_item_well_formed (36,619,433 samples, 5.95%)</title><rect x="70.0620%" y="149" width="5.9538%" height="15" fill="rgb(224,114,35)"/><text x="70.3120%" y="159.50">check_im..</text></g><g><title>evaluate_obligation (706,636 samples, 0.11%)</title><rect x="78.5928%" y="133" width="0.1149%" height="15" fill="rgb(245,159,27)"/><text x="78.8428%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,140,236 samples, 0.19%)</title><rect x="78.7247%" y="133" width="0.1854%" height="15" fill="rgb(245,172,44)"/><text x="78.9747%" y="143.50"></text></g><g><title>param_env (2,280,174 samples, 0.37%)</title><rect x="78.9101%" y="133" width="0.3707%" height="15" fill="rgb(236,23,11)"/><text x="79.1601%" y="143.50"></text></g><g><title>check_item_well_formed (21,244,011 samples, 3.45%)</title><rect x="76.0158%" y="149" width="3.4540%" height="15" fill="rgb(205,117,38)"/><text x="76.2658%" y="159.50">che..</text></g><g><title>variances_of (646,807 samples, 0.11%)</title><rect x="79.3647%" y="133" width="0.1052%" height="15" fill="rgb(237,72,25)"/><text x="79.6147%" y="143.50"></text></g><g><title>crate_variances (626,597 samples, 0.10%)</title><rect x="79.3679%" y="117" width="0.1019%" height="15" fill="rgb(244,70,9)"/><text x="79.6179%" y="127.50"></text></g><g><title>analysis (488,269,417 samples, 79.39%)</title><rect x="0.1475%" y="197" width="79.3863%" height="15" fill="rgb(217,125,39)"/><text x="0.3975%" y="207.50">analysis</text></g><g><title>type_check_crate (280,148,499 samples, 45.55%)</title><rect x="33.9853%" y="181" width="45.5485%" height="15" fill="rgb(235,36,10)"/><text x="34.2353%" y="191.50">type_check_crate</text></g><g><title>wf_checking (59,754,865 samples, 9.72%)</title><rect x="69.8184%" y="165" width="9.7154%" height="15" fill="rgb(251,123,47)"/><text x="70.0684%" y="175.50">wf_checking</text></g><g><title>AST_validation (908,040 samples, 0.15%)</title><rect x="79.6327%" y="181" width="0.1476%" height="15" fill="rgb(221,13,13)"/><text x="79.8827%" y="191.50"></text></g><g><title>macro_expand_crate (68,380,741 samples, 11.12%)</title><rect x="79.8541%" y="181" width="11.1178%" height="15" fill="rgb(238,131,9)"/><text x="80.1041%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (68,366,111 samples, 11.12%)</title><rect x="79.8565%" y="165" width="11.1154%" height="15" fill="rgb(211,50,8)"/><text x="80.1065%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,506,198 samples, 0.41%)</title><rect x="90.5645%" y="149" width="0.4075%" height="15" fill="rgb(245,182,24)"/><text x="90.8145%" y="159.50"></text></g><g><title>late_resolve_crate (11,762,521 samples, 1.91%)</title><rect x="91.0765%" y="165" width="1.9124%" height="15" fill="rgb(242,14,37)"/><text x="91.3265%" y="175.50">l..</text></g><g><title>resolve_check_unused (631,897 samples, 0.10%)</title><rect x="92.9975%" y="165" width="0.1027%" height="15" fill="rgb(246,228,12)"/><text x="93.2475%" y="175.50"></text></g><g><title>configure_and_expand (83,364,869 samples, 13.55%)</title><rect x="79.5950%" y="197" width="13.5541%" height="15" fill="rgb(213,55,15)"/><text x="79.8450%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (13,200,718 samples, 2.15%)</title><rect x="91.0028%" y="181" width="2.1463%" height="15" fill="rgb(209,9,3)"/><text x="91.2528%" y="191.50">r..</text></g><g><title>drop_ast (2,273,386 samples, 0.37%)</title><rect x="93.1491%" y="197" width="0.3696%" height="15" fill="rgb(230,59,30)"/><text x="93.3991%" y="207.50"></text></g><g><title>early_lint_checks (2,571,089 samples, 0.42%)</title><rect x="93.5218%" y="197" width="0.4180%" height="15" fill="rgb(209,121,21)"/><text x="93.7718%" y="207.50"></text></g><g><title>free_global_ctxt (5,640,013 samples, 0.92%)</title><rect x="93.9398%" y="197" width="0.9170%" height="15" fill="rgb(220,109,13)"/><text x="94.1898%" y="207.50"></text></g><g><title>generate_crate_metadata (8,368,103 samples, 1.36%)</title><rect x="94.8568%" y="197" width="1.3605%" height="15" fill="rgb(232,18,1)"/><text x="95.1068%" y="207.50"></text></g><g><title>hir_lowering (19,072,821 samples, 3.10%)</title><rect x="96.2173%" y="197" width="3.1010%" height="15" fill="rgb(215,41,42)"/><text x="96.4673%" y="207.50">hir..</text></g><g><title>parse_crate (951,481 samples, 0.15%)</title><rect x="99.3561%" y="197" width="0.1547%" height="15" fill="rgb(224,123,36)"/><text x="99.6061%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,935,182 samples, 0.31%)</title><rect x="99.5504%" y="197" width="0.3146%" height="15" fill="rgb(240,125,3)"/><text x="99.8004%" y="207.50"></text></g><g><title>all (615,055,029 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (615,055,029 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (733,748 samples, 0.12%)</title><rect x="99.8807%" y="197" width="0.1193%" height="15" fill="rgb(238,207,15)"/><text x="100.1307%" y="207.50"></text></g></svg></svg>