<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (487,225 samples, 0.16%)</title><rect x="14.1881%" y="149" width="0.1555%" height="15" fill="rgb(227,0,7)"/><text x="14.4381%" y="159.50"></text></g><g><title>param_env (543,316 samples, 0.17%)</title><rect x="16.1007%" y="117" width="0.1734%" height="15" fill="rgb(217,0,24)"/><text x="16.3507%" y="127.50"></text></g><g><title>item_attrs (397,244 samples, 0.13%)</title><rect x="16.7891%" y="85" width="0.1268%" height="15" fill="rgb(221,193,54)"/><text x="17.0391%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (373,734 samples, 0.12%)</title><rect x="16.7966%" y="69" width="0.1193%" height="15" fill="rgb(248,212,6)"/><text x="17.0466%" y="79.50"></text></g><g><title>codegen_fn_attrs (635,435 samples, 0.20%)</title><rect x="16.7253%" y="101" width="0.2028%" height="15" fill="rgb(208,68,35)"/><text x="16.9753%" y="111.50"></text></g><g><title>is_copy_raw (856,599 samples, 0.27%)</title><rect x="19.6944%" y="85" width="0.2734%" height="15" fill="rgb(232,128,0)"/><text x="19.9444%" y="95.50"></text></g><g><title>evaluate_obligation (672,075 samples, 0.21%)</title><rect x="19.7533%" y="69" width="0.2145%" height="15" fill="rgb(207,160,47)"/><text x="20.0033%" y="79.50"></text></g><g><title>adt_drop_tys (334,363 samples, 0.11%)</title><rect x="20.1503%" y="53" width="0.1067%" height="15" fill="rgb(228,23,34)"/><text x="20.4003%" y="63.50"></text></g><g><title>adt_drop_tys (587,916 samples, 0.19%)</title><rect x="20.1353%" y="69" width="0.1876%" height="15" fill="rgb(218,30,26)"/><text x="20.3853%" y="79.50"></text></g><g><title>is_copy_raw (5,793,463 samples, 1.85%)</title><rect x="20.3230%" y="69" width="1.8489%" height="15" fill="rgb(220,122,19)"/><text x="20.5730%" y="79.50">i..</text></g><g><title>evaluate_obligation (4,971,495 samples, 1.59%)</title><rect x="20.5853%" y="53" width="1.5866%" height="15" fill="rgb(250,228,42)"/><text x="20.8353%" y="63.50"></text></g><g><title>needs_drop_raw (6,913,115 samples, 2.21%)</title><rect x="19.9683%" y="85" width="2.2063%" height="15" fill="rgb(240,193,28)"/><text x="20.2183%" y="95.50">n..</text></g><g><title>codegen_fulfill_obligation (991,780 samples, 0.32%)</title><rect x="22.3408%" y="69" width="0.3165%" height="15" fill="rgb(216,20,37)"/><text x="22.5908%" y="79.50"></text></g><g><title>impl_parent (542,066 samples, 0.17%)</title><rect x="22.9199%" y="53" width="0.1730%" height="15" fill="rgb(206,188,39)"/><text x="23.1699%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (350,905 samples, 0.11%)</title><rect x="22.9809%" y="37" width="0.1120%" height="15" fill="rgb(217,207,13)"/><text x="23.2309%" y="47.50"></text></g><g><title>specialization_graph_of (1,933,501 samples, 0.62%)</title><rect x="22.6793%" y="69" width="0.6171%" height="15" fill="rgb(231,73,38)"/><text x="22.9293%" y="79.50"></text></g><g><title>impl_trait_ref (637,787 samples, 0.20%)</title><rect x="23.0929%" y="53" width="0.2035%" height="15" fill="rgb(225,20,46)"/><text x="23.3429%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (560,576 samples, 0.18%)</title><rect x="23.1175%" y="37" width="0.1789%" height="15" fill="rgb(210,31,41)"/><text x="23.3675%" y="47.50"></text></g><g><title>resolve_instance (3,636,865 samples, 1.16%)</title><rect x="22.1748%" y="85" width="1.1607%" height="15" fill="rgb(221,200,47)"/><text x="22.4248%" y="95.50"></text></g><g><title>thir_body (2,975,056 samples, 0.95%)</title><rect x="23.3570%" y="85" width="0.9495%" height="15" fill="rgb(226,26,5)"/><text x="23.6070%" y="95.50"></text></g><g><title>mir_const (28,328,567 samples, 9.04%)</title><rect x="15.3217%" y="133" width="9.0408%" height="15" fill="rgb(249,33,26)"/><text x="15.5717%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (25,344,311 samples, 8.09%)</title><rect x="16.2741%" y="117" width="8.0884%" height="15" fill="rgb(235,183,28)"/><text x="16.5241%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (23,295,228 samples, 7.43%)</title><rect x="16.9280%" y="101" width="7.4345%" height="15" fill="rgb(221,5,38)"/><text x="17.1780%" y="111.50">mir_built</text></g><g><title>mir_promoted (31,169,905 samples, 9.95%)</title><rect x="14.4506%" y="149" width="9.9476%" height="15" fill="rgb(247,18,42)"/><text x="14.7006%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,225,363 samples, 0.71%)</title><rect x="24.3982%" y="149" width="0.7102%" height="15" fill="rgb(241,131,45)"/><text x="24.6482%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,707,009 samples, 1.18%)</title><rect x="25.1084%" y="149" width="1.1831%" height="15" fill="rgb(249,31,29)"/><text x="25.3584%" y="159.50"></text></g><g><title>normalize_projection_ty (2,208,802 samples, 0.70%)</title><rect x="25.5866%" y="133" width="0.7049%" height="15" fill="rgb(225,111,53)"/><text x="25.8366%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,758,936 samples, 0.56%)</title><rect x="26.2915%" y="149" width="0.5613%" height="15" fill="rgb(238,160,17)"/><text x="26.5415%" y="159.50"></text></g><g><title>normalize_projection_ty (1,133,181 samples, 0.36%)</title><rect x="26.4912%" y="133" width="0.3616%" height="15" fill="rgb(214,148,48)"/><text x="26.7412%" y="143.50"></text></g><g><title>type_op_normalize_ty (892,459 samples, 0.28%)</title><rect x="26.8528%" y="149" width="0.2848%" height="15" fill="rgb(232,36,49)"/><text x="27.1028%" y="159.50"></text></g><g><title>normalize_projection_ty (401,934 samples, 0.13%)</title><rect x="27.0094%" y="133" width="0.1283%" height="15" fill="rgb(209,103,24)"/><text x="27.2594%" y="143.50"></text></g><g><title>type_op_prove_predicate (11,669,580 samples, 3.72%)</title><rect x="27.1377%" y="149" width="3.7242%" height="15" fill="rgb(229,88,8)"/><text x="27.3877%" y="159.50">type..</text></g><g><title>evaluate_obligation (921,693 samples, 0.29%)</title><rect x="30.5677%" y="133" width="0.2942%" height="15" fill="rgb(213,181,19)"/><text x="30.8177%" y="143.50"></text></g><g><title>MIR_borrow_checking (95,435,724 samples, 30.46%)</title><rect x="0.4105%" y="181" width="30.4575%" height="15" fill="rgb(254,191,54)"/><text x="0.6605%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (95,121,488 samples, 30.36%)</title><rect x="0.5108%" y="165" width="30.3572%" height="15" fill="rgb(241,83,37)"/><text x="0.7608%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (378,835 samples, 0.12%)</title><rect x="30.8969%" y="181" width="0.1209%" height="15" fill="rgb(233,36,39)"/><text x="31.1469%" y="191.50"></text></g><g><title>item_attrs (420,146 samples, 0.13%)</title><rect x="31.3595%" y="101" width="0.1341%" height="15" fill="rgb(226,3,54)"/><text x="31.6095%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (400,406 samples, 0.13%)</title><rect x="31.3658%" y="85" width="0.1278%" height="15" fill="rgb(245,192,40)"/><text x="31.6158%" y="95.50"></text></g><g><title>codegen_fn_attrs (645,190 samples, 0.21%)</title><rect x="31.3331%" y="117" width="0.2059%" height="15" fill="rgb(238,167,29)"/><text x="31.5831%" y="127.50"></text></g><g><title>should_inherit_track_caller (875,133 samples, 0.28%)</title><rect x="31.2648%" y="133" width="0.2793%" height="15" fill="rgb(232,182,51)"/><text x="31.5148%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,093,746 samples, 0.35%)</title><rect x="31.2013%" y="149" width="0.3491%" height="15" fill="rgb(231,60,39)"/><text x="31.4513%" y="159.50"></text></g><g><title>check_mod_attrs (1,632,898 samples, 0.52%)</title><rect x="31.0293%" y="165" width="0.5211%" height="15" fill="rgb(208,69,12)"/><text x="31.2793%" y="175.50"></text></g><g><title>lookup_deprecation_entry (322,423 samples, 0.10%)</title><rect x="31.8051%" y="149" width="0.1029%" height="15" fill="rgb(235,93,37)"/><text x="32.0551%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (775,289 samples, 0.25%)</title><rect x="31.6924%" y="165" width="0.2474%" height="15" fill="rgb(213,116,39)"/><text x="31.9424%" y="175.50"></text></g><g><title>misc_checking_1 (2,972,163 samples, 0.95%)</title><rect x="31.0180%" y="181" width="0.9485%" height="15" fill="rgb(222,207,29)"/><text x="31.2680%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,504,306 samples, 0.48%)</title><rect x="31.9671%" y="165" width="0.4801%" height="15" fill="rgb(206,96,30)"/><text x="32.2171%" y="175.50"></text></g><g><title>check_mod_liveness (1,291,965 samples, 0.41%)</title><rect x="32.0349%" y="149" width="0.4123%" height="15" fill="rgb(218,138,4)"/><text x="32.2849%" y="159.50"></text></g><g><title>type_uninhabited_from (414,527 samples, 0.13%)</title><rect x="32.3149%" y="133" width="0.1323%" height="15" fill="rgb(250,191,14)"/><text x="32.5649%" y="143.50"></text></g><g><title>misc_checking_2 (3,403,537 samples, 1.09%)</title><rect x="31.9665%" y="181" width="1.0862%" height="15" fill="rgb(239,60,40)"/><text x="32.2165%" y="191.50"></text></g><g><title>match_checking (1,897,371 samples, 0.61%)</title><rect x="32.4472%" y="165" width="0.6055%" height="15" fill="rgb(206,27,48)"/><text x="32.6972%" y="175.50"></text></g><g><title>check_match (1,818,271 samples, 0.58%)</title><rect x="32.4724%" y="149" width="0.5803%" height="15" fill="rgb(225,35,8)"/><text x="32.7224%" y="159.50"></text></g><g><title>check_private_in_public (514,075 samples, 0.16%)</title><rect x="33.0563%" y="165" width="0.1641%" height="15" fill="rgb(250,213,24)"/><text x="33.3063%" y="175.50"></text></g><g><title>death_checking (821,910 samples, 0.26%)</title><rect x="33.2204%" y="165" width="0.2623%" height="15" fill="rgb(247,123,22)"/><text x="33.4704%" y="175.50"></text></g><g><title>param_env (703,479 samples, 0.22%)</title><rect x="33.9056%" y="133" width="0.2245%" height="15" fill="rgb(231,138,38)"/><text x="34.1556%" y="143.50"></text></g><g><title>predicates_of (349,475 samples, 0.11%)</title><rect x="34.0186%" y="117" width="0.1115%" height="15" fill="rgb(231,145,46)"/><text x="34.2686%" y="127.50"></text></g><g><title>impl_parent (540,125 samples, 0.17%)</title><rect x="34.5281%" y="101" width="0.1724%" height="15" fill="rgb(251,118,11)"/><text x="34.7781%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (323,902 samples, 0.10%)</title><rect x="34.5971%" y="85" width="0.1034%" height="15" fill="rgb(217,147,25)"/><text x="34.8471%" y="95.50"></text></g><g><title>specialization_graph_of (2,748,281 samples, 0.88%)</title><rect x="34.1518%" y="117" width="0.8771%" height="15" fill="rgb(247,81,37)"/><text x="34.4018%" y="127.50"></text></g><g><title>impl_trait_ref (1,029,072 samples, 0.33%)</title><rect x="34.7005%" y="101" width="0.3284%" height="15" fill="rgb(209,12,38)"/><text x="34.9505%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (803,937 samples, 0.26%)</title><rect x="34.7723%" y="85" width="0.2566%" height="15" fill="rgb(227,1,9)"/><text x="35.0223%" y="95.50"></text></g><g><title>resolve_instance (2,819,622 samples, 0.90%)</title><rect x="34.1301%" y="133" width="0.8999%" height="15" fill="rgb(248,47,43)"/><text x="34.3801%" y="143.50"></text></g><g><title>crate_lints (6,037,338 samples, 1.93%)</title><rect x="33.4835%" y="149" width="1.9268%" height="15" fill="rgb(221,10,30)"/><text x="33.7335%" y="159.50">c..</text></g><g><title>type_of (1,171,440 samples, 0.37%)</title><rect x="35.0364%" y="133" width="0.3739%" height="15" fill="rgb(210,229,1)"/><text x="35.2864%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (925,038 samples, 0.30%)</title><rect x="35.1151%" y="117" width="0.2952%" height="15" fill="rgb(222,148,37)"/><text x="35.3651%" y="127.50"></text></g><g><title>layout_of (317,605 samples, 0.10%)</title><rect x="35.8119%" y="69" width="0.1014%" height="15" fill="rgb(234,67,33)"/><text x="36.0619%" y="79.50"></text></g><g><title>layout_of (469,596 samples, 0.15%)</title><rect x="35.7677%" y="117" width="0.1499%" height="15" fill="rgb(247,98,35)"/><text x="36.0177%" y="127.50"></text></g><g><title>layout_of (439,115 samples, 0.14%)</title><rect x="35.7775%" y="101" width="0.1401%" height="15" fill="rgb(247,138,52)"/><text x="36.0275%" y="111.50"></text></g><g><title>layout_of (390,865 samples, 0.12%)</title><rect x="35.7929%" y="85" width="0.1247%" height="15" fill="rgb(213,79,30)"/><text x="36.0429%" y="95.50"></text></g><g><title>lint_checking (7,630,525 samples, 2.44%)</title><rect x="33.4827%" y="165" width="2.4352%" height="15" fill="rgb(246,177,23)"/><text x="33.7327%" y="175.50">li..</text></g><g><title>module_lints (1,590,597 samples, 0.51%)</title><rect x="35.4103%" y="149" width="0.5076%" height="15" fill="rgb(230,62,27)"/><text x="35.6603%" y="159.50"></text></g><g><title>lint_mod (1,580,437 samples, 0.50%)</title><rect x="35.4135%" y="133" width="0.5044%" height="15" fill="rgb(216,154,8)"/><text x="35.6635%" y="143.50"></text></g><g><title>privacy_access_levels (750,198 samples, 0.24%)</title><rect x="35.9179%" y="165" width="0.2394%" height="15" fill="rgb(244,35,45)"/><text x="36.1679%" y="175.50"></text></g><g><title>privacy_checking_modules (2,698,850 samples, 0.86%)</title><rect x="36.1573%" y="165" width="0.8613%" height="15" fill="rgb(251,115,12)"/><text x="36.4073%" y="175.50"></text></g><g><title>check_mod_privacy (2,690,550 samples, 0.86%)</title><rect x="36.1600%" y="149" width="0.8587%" height="15" fill="rgb(240,54,50)"/><text x="36.4100%" y="159.50"></text></g><g><title>misc_checking_3 (12,457,209 samples, 3.98%)</title><rect x="33.0527%" y="181" width="3.9756%" height="15" fill="rgb(233,84,52)"/><text x="33.3027%" y="191.50">misc..</text></g><g><title>impl_parent (1,113,252 samples, 0.36%)</title><rect x="37.7238%" y="117" width="0.3553%" height="15" fill="rgb(207,117,47)"/><text x="37.9738%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (713,790 samples, 0.23%)</title><rect x="37.8513%" y="101" width="0.2278%" height="15" fill="rgb(249,43,39)"/><text x="38.1013%" y="111.50"></text></g><g><title>impl_trait_ref (3,451,099 samples, 1.10%)</title><rect x="38.0791%" y="117" width="1.1014%" height="15" fill="rgb(209,38,44)"/><text x="38.3291%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,046,784 samples, 0.97%)</title><rect x="38.2081%" y="101" width="0.9724%" height="15" fill="rgb(236,212,23)"/><text x="38.4581%" y="111.50"></text></g><g><title>trait_impls_of (459,587 samples, 0.15%)</title><rect x="39.1889%" y="117" width="0.1467%" height="15" fill="rgb(242,79,21)"/><text x="39.4389%" y="127.50"></text></g><g><title>coherent_trait (7,052,359 samples, 2.25%)</title><rect x="37.0858%" y="149" width="2.2507%" height="15" fill="rgb(211,96,35)"/><text x="37.3358%" y="159.50">c..</text></g><g><title>specialization_graph_of (7,032,239 samples, 2.24%)</title><rect x="37.0922%" y="133" width="2.2443%" height="15" fill="rgb(253,215,40)"/><text x="37.3422%" y="143.50">s..</text></g><g><title>coherence_checking (7,153,020 samples, 2.28%)</title><rect x="37.0774%" y="165" width="2.2828%" height="15" fill="rgb(211,81,21)"/><text x="37.3274%" y="175.50">c..</text></g><g><title>associated_item (568,769 samples, 0.18%)</title><rect x="62.6971%" y="101" width="0.1815%" height="15" fill="rgb(208,190,38)"/><text x="62.9471%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (444,387 samples, 0.14%)</title><rect x="62.7368%" y="85" width="0.1418%" height="15" fill="rgb(235,213,38)"/><text x="62.9868%" y="95.50"></text></g><g><title>associated_items (866,340 samples, 0.28%)</title><rect x="62.6196%" y="117" width="0.2765%" height="15" fill="rgb(237,122,38)"/><text x="62.8696%" y="127.50"></text></g><g><title>adt_def (418,194 samples, 0.13%)</title><rect x="63.4893%" y="85" width="0.1335%" height="15" fill="rgb(244,218,35)"/><text x="63.7393%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (416,094 samples, 0.13%)</title><rect x="63.4899%" y="69" width="0.1328%" height="15" fill="rgb(240,68,47)"/><text x="63.7399%" y="79.50"></text></g><g><title>item_attrs (385,564 samples, 0.12%)</title><rect x="63.4997%" y="53" width="0.1230%" height="15" fill="rgb(210,16,53)"/><text x="63.7497%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (383,504 samples, 0.12%)</title><rect x="63.5003%" y="37" width="0.1224%" height="15" fill="rgb(235,124,12)"/><text x="63.7503%" y="47.50"></text></g><g><title>adt_dtorck_constraint (578,126 samples, 0.18%)</title><rect x="63.6767%" y="37" width="0.1845%" height="15" fill="rgb(224,169,11)"/><text x="63.9267%" y="47.50"></text></g><g><title>adt_dtorck_constraint (645,397 samples, 0.21%)</title><rect x="63.6575%" y="53" width="0.2060%" height="15" fill="rgb(250,166,2)"/><text x="63.9075%" y="63.50"></text></g><g><title>adt_dtorck_constraint (678,008 samples, 0.22%)</title><rect x="63.6490%" y="69" width="0.2164%" height="15" fill="rgb(242,216,29)"/><text x="63.8990%" y="79.50"></text></g><g><title>adt_dtorck_constraint (737,839 samples, 0.24%)</title><rect x="63.6339%" y="85" width="0.2355%" height="15" fill="rgb(230,116,27)"/><text x="63.8839%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,301,623 samples, 0.42%)</title><rect x="63.4643%" y="101" width="0.4154%" height="15" fill="rgb(228,99,48)"/><text x="63.7143%" y="111.50"></text></g><g><title>dropck_outlives (3,455,328 samples, 1.10%)</title><rect x="62.9499%" y="117" width="1.1027%" height="15" fill="rgb(253,11,6)"/><text x="63.1999%" y="127.50"></text></g><g><title>normalize_projection_ty (541,946 samples, 0.17%)</title><rect x="63.8797%" y="101" width="0.1730%" height="15" fill="rgb(247,143,39)"/><text x="64.1297%" y="111.50"></text></g><g><title>generics_of (1,026,712 samples, 0.33%)</title><rect x="66.3096%" y="101" width="0.3277%" height="15" fill="rgb(236,97,10)"/><text x="66.5596%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (826,231 samples, 0.26%)</title><rect x="66.3736%" y="85" width="0.2637%" height="15" fill="rgb(233,208,19)"/><text x="66.6236%" y="95.50"></text></g><g><title>impl_trait_ref (899,061 samples, 0.29%)</title><rect x="66.6627%" y="101" width="0.2869%" height="15" fill="rgb(216,164,2)"/><text x="66.9127%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (715,219 samples, 0.23%)</title><rect x="66.7214%" y="85" width="0.2283%" height="15" fill="rgb(220,129,5)"/><text x="66.9714%" y="95.50"></text></g><g><title>predicates_of (433,542 samples, 0.14%)</title><rect x="66.9561%" y="101" width="0.1384%" height="15" fill="rgb(242,17,10)"/><text x="67.2061%" y="111.50"></text></g><g><title>specializes (497,356 samples, 0.16%)</title><rect x="67.0945%" y="101" width="0.1587%" height="15" fill="rgb(242,107,0)"/><text x="67.3445%" y="111.50"></text></g><g><title>trait_impls_of (759,221 samples, 0.24%)</title><rect x="67.2593%" y="101" width="0.2423%" height="15" fill="rgb(251,28,31)"/><text x="67.5093%" y="111.50"></text></g><g><title>evaluate_obligation (10,816,942 samples, 3.45%)</title><rect x="64.0526%" y="117" width="3.4521%" height="15" fill="rgb(233,223,10)"/><text x="64.3026%" y="127.50">eva..</text></g><g><title>evaluate_obligation (521,928 samples, 0.17%)</title><rect x="68.1362%" y="101" width="0.1666%" height="15" fill="rgb(215,21,27)"/><text x="68.3862%" y="111.50"></text></g><g><title>method_autoderef_steps (1,096,964 samples, 0.35%)</title><rect x="67.9589%" y="117" width="0.3501%" height="15" fill="rgb(232,23,21)"/><text x="68.2089%" y="127.50"></text></g><g><title>predicates_of (724,755 samples, 0.23%)</title><rect x="68.3788%" y="117" width="0.2313%" height="15" fill="rgb(244,5,23)"/><text x="68.6288%" y="127.50"></text></g><g><title>predicates_defined_on (492,462 samples, 0.16%)</title><rect x="68.4530%" y="101" width="0.1572%" height="15" fill="rgb(226,81,46)"/><text x="68.7030%" y="111.50"></text></g><g><title>evaluate_obligation (910,049 samples, 0.29%)</title><rect x="71.6413%" y="101" width="0.2904%" height="15" fill="rgb(247,70,30)"/><text x="71.8913%" y="111.50"></text></g><g><title>is_copy_raw (694,388 samples, 0.22%)</title><rect x="71.9455%" y="101" width="0.2216%" height="15" fill="rgb(212,68,19)"/><text x="72.1955%" y="111.50"></text></g><g><title>evaluate_obligation (600,916 samples, 0.19%)</title><rect x="71.9754%" y="85" width="0.1918%" height="15" fill="rgb(240,187,13)"/><text x="72.2254%" y="95.50"></text></g><g><title>typeck (11,018,203 samples, 3.52%)</title><rect x="68.7082%" y="117" width="3.5164%" height="15" fill="rgb(223,113,26)"/><text x="68.9582%" y="127.50">typ..</text></g><g><title>item_bodies_checking (103,052,579 samples, 32.89%)</title><rect x="39.3795%" y="165" width="32.8883%" height="15" fill="rgb(206,192,2)"/><text x="39.6295%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (103,048,549 samples, 32.89%)</title><rect x="39.3808%" y="149" width="32.8870%" height="15" fill="rgb(241,108,4)"/><text x="39.6308%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (102,813,047 samples, 32.81%)</title><rect x="39.4559%" y="133" width="32.8119%" height="15" fill="rgb(247,173,49)"/><text x="39.7059%" y="143.50">typeck</text></g><g><title>adt_destructor (345,235 samples, 0.11%)</title><rect x="74.2400%" y="133" width="0.1102%" height="15" fill="rgb(224,114,35)"/><text x="74.4900%" y="143.50"></text></g><g><title>coherent_trait (334,664 samples, 0.11%)</title><rect x="74.2433%" y="117" width="0.1068%" height="15" fill="rgb(245,159,27)"/><text x="74.4933%" y="127.50"></text></g><g><title>specialization_graph_of (332,424 samples, 0.11%)</title><rect x="74.2441%" y="101" width="0.1061%" height="15" fill="rgb(245,172,44)"/><text x="74.4941%" y="111.50"></text></g><g><title>evaluate_obligation (541,917 samples, 0.17%)</title><rect x="74.3589%" y="133" width="0.1729%" height="15" fill="rgb(236,23,11)"/><text x="74.6089%" y="143.50"></text></g><g><title>item_types_checking (7,858,677 samples, 2.51%)</title><rect x="72.2678%" y="165" width="2.5080%" height="15" fill="rgb(205,117,38)"/><text x="72.5178%" y="175.50">it..</text></g><g><title>check_mod_item_types (7,848,317 samples, 2.50%)</title><rect x="72.2711%" y="149" width="2.5047%" height="15" fill="rgb(237,72,25)"/><text x="72.5211%" y="159.50">ch..</text></g><g><title>fn_sig (1,293,895 samples, 0.41%)</title><rect x="74.9654%" y="133" width="0.4129%" height="15" fill="rgb(244,70,9)"/><text x="75.2154%" y="143.50"></text></g><g><title>lint_levels (456,515 samples, 0.15%)</title><rect x="75.7132%" y="85" width="0.1457%" height="15" fill="rgb(217,125,39)"/><text x="75.9632%" y="95.50"></text></g><g><title>is_late_bound_map (1,244,896 samples, 0.40%)</title><rect x="75.4625%" y="117" width="0.3973%" height="15" fill="rgb(235,36,10)"/><text x="75.7125%" y="127.50"></text></g><g><title>resolve_lifetimes (1,211,126 samples, 0.39%)</title><rect x="75.4733%" y="101" width="0.3865%" height="15" fill="rgb(251,123,47)"/><text x="75.7233%" y="111.50"></text></g><g><title>generics_of (1,648,229 samples, 0.53%)</title><rect x="75.3784%" y="133" width="0.5260%" height="15" fill="rgb(221,13,13)"/><text x="75.6284%" y="143.50"></text></g><g><title>explicit_predicates_of (672,918 samples, 0.21%)</title><rect x="76.0138%" y="101" width="0.2148%" height="15" fill="rgb(238,131,9)"/><text x="76.2638%" y="111.50"></text></g><g><title>predicates_of (1,436,616 samples, 0.46%)</title><rect x="75.9233%" y="133" width="0.4585%" height="15" fill="rgb(211,50,8)"/><text x="76.1733%" y="143.50"></text></g><g><title>predicates_defined_on (1,328,513 samples, 0.42%)</title><rect x="75.9578%" y="117" width="0.4240%" height="15" fill="rgb(245,182,24)"/><text x="76.2078%" y="127.50"></text></g><g><title>inferred_outlives_of (480,195 samples, 0.15%)</title><rect x="76.2286%" y="101" width="0.1532%" height="15" fill="rgb(242,14,37)"/><text x="76.4786%" y="111.50"></text></g><g><title>inferred_outlives_crate (442,285 samples, 0.14%)</title><rect x="76.2407%" y="85" width="0.1412%" height="15" fill="rgb(246,228,12)"/><text x="76.4907%" y="95.50"></text></g><g><title>type_collecting (5,296,019 samples, 1.69%)</title><rect x="74.7780%" y="165" width="1.6902%" height="15" fill="rgb(213,55,15)"/><text x="75.0280%" y="175.50"></text></g><g><title>collect_mod_item_types (5,278,479 samples, 1.68%)</title><rect x="74.7836%" y="149" width="1.6846%" height="15" fill="rgb(209,9,3)"/><text x="75.0336%" y="159.50"></text></g><g><title>evaluate_obligation (960,464 samples, 0.31%)</title><rect x="79.0070%" y="133" width="0.3065%" height="15" fill="rgb(230,59,30)"/><text x="79.2570%" y="143.50"></text></g><g><title>implied_outlives_bounds (706,083 samples, 0.23%)</title><rect x="79.3215%" y="133" width="0.2253%" height="15" fill="rgb(209,121,21)"/><text x="79.5715%" y="143.50"></text></g><g><title>object_safety_violations (438,825 samples, 0.14%)</title><rect x="79.5502%" y="133" width="0.1400%" height="15" fill="rgb(220,109,13)"/><text x="79.8002%" y="143.50"></text></g><g><title>param_env (1,118,923 samples, 0.36%)</title><rect x="79.6908%" y="133" width="0.3571%" height="15" fill="rgb(232,18,1)"/><text x="79.9408%" y="143.50"></text></g><g><title>region_scope_tree (935,746 samples, 0.30%)</title><rect x="80.0848%" y="133" width="0.2986%" height="15" fill="rgb(215,41,42)"/><text x="80.3348%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,861,338 samples, 3.79%)</title><rect x="76.6264%" y="149" width="3.7854%" height="15" fill="rgb(224,123,36)"/><text x="76.8764%" y="159.50">chec..</text></g><g><title>evaluate_obligation (453,328 samples, 0.14%)</title><rect x="81.1070%" y="133" width="0.1447%" height="15" fill="rgb(240,125,3)"/><text x="81.3570%" y="143.50"></text></g><g><title>param_env (378,323 samples, 0.12%)</title><rect x="81.3233%" y="133" width="0.1207%" height="15" fill="rgb(205,98,50)"/><text x="81.5733%" y="143.50"></text></g><g><title>check_item_well_formed (3,671,915 samples, 1.17%)</title><rect x="80.4119%" y="149" width="1.1719%" height="15" fill="rgb(205,185,37)"/><text x="80.6619%" y="159.50"></text></g><g><title>adt_sized_constraint (340,004 samples, 0.11%)</title><rect x="81.6956%" y="117" width="0.1085%" height="15" fill="rgb(238,207,15)"/><text x="81.9456%" y="127.50"></text></g><g><title>evaluate_obligation (573,336 samples, 0.18%)</title><rect x="81.6471%" y="133" width="0.1830%" height="15" fill="rgb(213,199,42)"/><text x="81.8971%" y="143.50"></text></g><g><title>analysis (255,833,221 samples, 81.65%)</title><rect x="0.2138%" y="197" width="81.6469%" height="15" fill="rgb(235,201,11)"/><text x="0.4638%" y="207.50">analysis</text></g><g><title>type_check_crate (140,478,136 samples, 44.83%)</title><rect x="37.0283%" y="181" width="44.8323%" height="15" fill="rgb(207,46,11)"/><text x="37.2783%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,884,048 samples, 5.39%)</title><rect x="76.4723%" y="165" width="5.3884%" height="15" fill="rgb(241,35,35)"/><text x="76.7223%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (867,700 samples, 0.28%)</title><rect x="81.5837%" y="149" width="0.2769%" height="15" fill="rgb(243,32,47)"/><text x="81.8337%" y="159.50"></text></g><g><title>codegen_crate (431,585 samples, 0.14%)</title><rect x="81.8626%" y="197" width="0.1377%" height="15" fill="rgb(247,202,23)"/><text x="82.1126%" y="207.50"></text></g><g><title>metadata_load_macro (424,246 samples, 0.14%)</title><rect x="91.3123%" y="149" width="0.1354%" height="15" fill="rgb(219,102,11)"/><text x="91.5623%" y="159.50"></text></g><g><title>metadata_register_crate (4,270,178 samples, 1.36%)</title><rect x="91.4477%" y="149" width="1.3628%" height="15" fill="rgb(243,110,44)"/><text x="91.6977%" y="159.50"></text></g><g><title>metadata_register_crate (3,036,572 samples, 0.97%)</title><rect x="91.8414%" y="133" width="0.9691%" height="15" fill="rgb(222,74,54)"/><text x="92.0914%" y="143.50"></text></g><g><title>macro_expand_crate (33,625,854 samples, 10.73%)</title><rect x="82.1786%" y="181" width="10.7314%" height="15" fill="rgb(216,99,12)"/><text x="82.4286%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (33,606,554 samples, 10.73%)</title><rect x="82.1848%" y="165" width="10.7252%" height="15" fill="rgb(226,22,26)"/><text x="82.4348%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (3,843,283 samples, 1.23%)</title><rect x="93.0081%" y="165" width="1.2265%" height="15" fill="rgb(217,163,10)"/><text x="93.2581%" y="175.50"></text></g><g><title>configure_and_expand (38,548,829 samples, 12.30%)</title><rect x="82.0003%" y="197" width="12.3025%" height="15" fill="rgb(213,25,53)"/><text x="82.2503%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (4,329,408 samples, 1.38%)</title><rect x="92.9211%" y="181" width="1.3817%" height="15" fill="rgb(252,105,26)"/><text x="93.1711%" y="191.50"></text></g><g><title>drop_ast (343,404 samples, 0.11%)</title><rect x="94.3028%" y="197" width="0.1096%" height="15" fill="rgb(220,39,43)"/><text x="94.5528%" y="207.50"></text></g><g><title>early_lint_checks (717,958 samples, 0.23%)</title><rect x="94.4187%" y="197" width="0.2291%" height="15" fill="rgb(229,68,48)"/><text x="94.6687%" y="207.50"></text></g><g><title>free_global_ctxt (5,013,876 samples, 1.60%)</title><rect x="94.6479%" y="197" width="1.6001%" height="15" fill="rgb(252,8,32)"/><text x="94.8979%" y="207.50"></text></g><g><title>generate_crate_metadata (2,319,836 samples, 0.74%)</title><rect x="96.2480%" y="197" width="0.7404%" height="15" fill="rgb(223,20,43)"/><text x="96.4980%" y="207.50"></text></g><g><title>hir_lowering (7,165,400 samples, 2.29%)</title><rect x="96.9883%" y="197" width="2.2868%" height="15" fill="rgb(229,81,49)"/><text x="97.2383%" y="207.50">h..</text></g><g><title>self_profile_alloc_query_strings (1,210,964 samples, 0.39%)</title><rect x="99.4542%" y="197" width="0.3865%" height="15" fill="rgb(236,28,36)"/><text x="99.7042%" y="207.50"></text></g><g><title>all (313,341,052 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (313,341,052 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (392,154 samples, 0.13%)</title><rect x="99.8748%" y="197" width="0.1252%" height="15" fill="rgb(233,201,37)"/><text x="100.1248%" y="207.50"></text></g></svg></svg>