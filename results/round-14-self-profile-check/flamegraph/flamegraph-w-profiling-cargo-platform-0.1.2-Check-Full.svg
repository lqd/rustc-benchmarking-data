<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (364,161 samples, 0.21%)</title><rect x="14.7201%" y="101" width="0.2110%" height="15" fill="rgb(227,0,7)"/><text x="14.9701%" y="111.50"></text></g><g><title>item_attrs (343,977 samples, 0.20%)</title><rect x="15.4860%" y="69" width="0.1993%" height="15" fill="rgb(217,0,24)"/><text x="15.7360%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (332,987 samples, 0.19%)</title><rect x="15.4923%" y="53" width="0.1929%" height="15" fill="rgb(221,193,54)"/><text x="15.7423%" y="63.50"></text></g><g><title>codegen_fn_attrs (468,029 samples, 0.27%)</title><rect x="15.4279%" y="85" width="0.2712%" height="15" fill="rgb(248,212,6)"/><text x="15.6779%" y="95.50"></text></g><g><title>adt_drop_tys (235,594 samples, 0.14%)</title><rect x="18.6898%" y="37" width="0.1365%" height="15" fill="rgb(208,68,35)"/><text x="18.9398%" y="47.50"></text></g><g><title>adt_drop_tys (369,704 samples, 0.21%)</title><rect x="18.6733%" y="53" width="0.2142%" height="15" fill="rgb(232,128,0)"/><text x="18.9233%" y="63.50"></text></g><g><title>is_copy_raw (938,230 samples, 0.54%)</title><rect x="18.8875%" y="53" width="0.5436%" height="15" fill="rgb(207,160,47)"/><text x="19.1375%" y="63.50"></text></g><g><title>evaluate_obligation (809,859 samples, 0.47%)</title><rect x="18.9619%" y="37" width="0.4692%" height="15" fill="rgb(228,23,34)"/><text x="19.2119%" y="47.50"></text></g><g><title>needs_drop_raw (1,428,514 samples, 0.83%)</title><rect x="18.6082%" y="69" width="0.8276%" height="15" fill="rgb(218,30,26)"/><text x="18.8582%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (279,843 samples, 0.16%)</title><rect x="19.5753%" y="53" width="0.1621%" height="15" fill="rgb(220,122,19)"/><text x="19.8253%" y="63.50"></text></g><g><title>specialization_graph_of (231,412 samples, 0.13%)</title><rect x="19.7737%" y="53" width="0.1341%" height="15" fill="rgb(250,228,42)"/><text x="20.0237%" y="63.50"></text></g><g><title>resolve_instance (868,069 samples, 0.50%)</title><rect x="19.4513%" y="69" width="0.5029%" height="15" fill="rgb(240,193,28)"/><text x="19.7013%" y="79.50"></text></g><g><title>thir_body (1,902,129 samples, 1.10%)</title><rect x="19.9751%" y="69" width="1.1020%" height="15" fill="rgb(216,20,37)"/><text x="20.2251%" y="79.50"></text></g><g><title>mir_const (12,225,350 samples, 7.08%)</title><rect x="14.0124%" y="117" width="7.0831%" height="15" fill="rgb(206,188,39)"/><text x="14.2624%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (10,639,818 samples, 6.16%)</title><rect x="14.9310%" y="101" width="6.1645%" height="15" fill="rgb(217,207,13)"/><text x="15.1810%" y="111.50">unsafety..</text></g><g><title>mir_built (9,314,269 samples, 5.40%)</title><rect x="15.6990%" y="85" width="5.3965%" height="15" fill="rgb(231,73,38)"/><text x="15.9490%" y="95.50">mir_bui..</text></g><g><title>mir_promoted (13,654,506 samples, 7.91%)</title><rect x="13.2120%" y="133" width="7.9111%" height="15" fill="rgb(225,20,46)"/><text x="13.4620%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (569,574 samples, 0.33%)</title><rect x="21.1231%" y="133" width="0.3300%" height="15" fill="rgb(210,31,41)"/><text x="21.3731%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (620,725 samples, 0.36%)</title><rect x="21.4531%" y="133" width="0.3596%" height="15" fill="rgb(221,200,47)"/><text x="21.7031%" y="143.50"></text></g><g><title>normalize_projection_ty (358,093 samples, 0.21%)</title><rect x="21.6053%" y="117" width="0.2075%" height="15" fill="rgb(226,26,5)"/><text x="21.8553%" y="127.50"></text></g><g><title>type_op_normalize_predicate (358,162 samples, 0.21%)</title><rect x="21.8128%" y="133" width="0.2075%" height="15" fill="rgb(249,33,26)"/><text x="22.0628%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,240,915 samples, 1.88%)</title><rect x="22.0586%" y="133" width="1.8777%" height="15" fill="rgb(235,183,28)"/><text x="22.3086%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (40,222,434 samples, 23.30%)</title><rect x="0.6509%" y="165" width="23.3040%" height="15" fill="rgb(221,5,38)"/><text x="0.9009%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (40,092,513 samples, 23.23%)</title><rect x="0.7262%" y="149" width="23.2287%" height="15" fill="rgb(247,18,42)"/><text x="0.9762%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (224,773 samples, 0.13%)</title><rect x="23.9739%" y="165" width="0.1302%" height="15" fill="rgb(241,131,45)"/><text x="24.2239%" y="175.50"></text></g><g><title>should_inherit_track_caller (248,982 samples, 0.14%)</title><rect x="24.3971%" y="117" width="0.1443%" height="15" fill="rgb(249,31,29)"/><text x="24.6471%" y="127.50"></text></g><g><title>codegen_fn_attrs (425,804 samples, 0.25%)</title><rect x="24.3070%" y="133" width="0.2467%" height="15" fill="rgb(225,111,53)"/><text x="24.5570%" y="143.50"></text></g><g><title>check_mod_attrs (754,909 samples, 0.44%)</title><rect x="24.1164%" y="149" width="0.4374%" height="15" fill="rgb(238,160,17)"/><text x="24.3664%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (453,414 samples, 0.26%)</title><rect x="24.6966%" y="149" width="0.2627%" height="15" fill="rgb(214,148,48)"/><text x="24.9466%" y="159.50"></text></g><g><title>misc_checking_1 (1,520,597 samples, 0.88%)</title><rect x="24.1044%" y="165" width="0.8810%" height="15" fill="rgb(232,36,49)"/><text x="24.3544%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (539,986 samples, 0.31%)</title><rect x="24.9865%" y="149" width="0.3129%" height="15" fill="rgb(209,103,24)"/><text x="25.2365%" y="159.50"></text></g><g><title>check_mod_liveness (390,233 samples, 0.23%)</title><rect x="25.0732%" y="133" width="0.2261%" height="15" fill="rgb(229,88,8)"/><text x="25.3232%" y="143.50"></text></g><g><title>misc_checking_2 (1,977,772 samples, 1.15%)</title><rect x="24.9854%" y="165" width="1.1459%" height="15" fill="rgb(213,181,19)"/><text x="25.2354%" y="175.50"></text></g><g><title>match_checking (1,436,016 samples, 0.83%)</title><rect x="25.2993%" y="149" width="0.8320%" height="15" fill="rgb(254,191,54)"/><text x="25.5493%" y="159.50"></text></g><g><title>check_match (1,399,206 samples, 0.81%)</title><rect x="25.3207%" y="133" width="0.8107%" height="15" fill="rgb(241,83,37)"/><text x="25.5707%" y="143.50"></text></g><g><title>check_private_in_public (258,473 samples, 0.15%)</title><rect x="26.1381%" y="149" width="0.1498%" height="15" fill="rgb(233,36,39)"/><text x="26.3881%" y="159.50"></text></g><g><title>death_checking (624,467 samples, 0.36%)</title><rect x="26.2878%" y="149" width="0.3618%" height="15" fill="rgb(226,3,54)"/><text x="26.5378%" y="159.50"></text></g><g><title>item_attrs (217,703 samples, 0.13%)</title><rect x="26.5235%" y="133" width="0.1261%" height="15" fill="rgb(245,192,40)"/><text x="26.7735%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (215,413 samples, 0.12%)</title><rect x="26.5248%" y="117" width="0.1248%" height="15" fill="rgb(238,167,29)"/><text x="26.7748%" y="127.50"></text></g><g><title>crate_lints (2,397,766 samples, 1.39%)</title><rect x="26.6506%" y="133" width="1.3892%" height="15" fill="rgb(232,182,51)"/><text x="26.9006%" y="143.50"></text></g><g><title>type_of (1,145,359 samples, 0.66%)</title><rect x="27.3763%" y="117" width="0.6636%" height="15" fill="rgb(231,60,39)"/><text x="27.6263%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (904,688 samples, 0.52%)</title><rect x="27.5157%" y="101" width="0.5242%" height="15" fill="rgb(208,69,12)"/><text x="27.7657%" y="111.50"></text></g><g><title>lint_checking (3,284,626 samples, 1.90%)</title><rect x="26.6496%" y="149" width="1.9030%" height="15" fill="rgb(235,93,37)"/><text x="26.8996%" y="159.50">l..</text></g><g><title>module_lints (885,150 samples, 0.51%)</title><rect x="28.0398%" y="133" width="0.5128%" height="15" fill="rgb(213,116,39)"/><text x="28.2898%" y="143.50"></text></g><g><title>lint_mod (880,120 samples, 0.51%)</title><rect x="28.0428%" y="117" width="0.5099%" height="15" fill="rgb(222,207,29)"/><text x="28.2928%" y="127.50"></text></g><g><title>privacy_access_levels (352,194 samples, 0.20%)</title><rect x="28.5527%" y="149" width="0.2041%" height="15" fill="rgb(206,96,30)"/><text x="28.8027%" y="159.50"></text></g><g><title>privacy_checking_modules (1,310,505 samples, 0.76%)</title><rect x="28.7567%" y="149" width="0.7593%" height="15" fill="rgb(218,138,4)"/><text x="29.0067%" y="159.50"></text></g><g><title>check_mod_privacy (1,307,475 samples, 0.76%)</title><rect x="28.7585%" y="133" width="0.7575%" height="15" fill="rgb(250,191,14)"/><text x="29.0085%" y="143.50"></text></g><g><title>misc_checking_3 (5,855,065 samples, 3.39%)</title><rect x="26.1313%" y="165" width="3.3923%" height="15" fill="rgb(239,60,40)"/><text x="26.3813%" y="175.50">mis..</text></g><g><title>impl_parent (2,682,225 samples, 1.55%)</title><rect x="32.2841%" y="101" width="1.5540%" height="15" fill="rgb(206,27,48)"/><text x="32.5341%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,567,294 samples, 0.91%)</title><rect x="32.9300%" y="85" width="0.9081%" height="15" fill="rgb(225,35,8)"/><text x="33.1800%" y="95.50"></text></g><g><title>impl_trait_ref (5,992,125 samples, 3.47%)</title><rect x="33.8381%" y="101" width="3.4717%" height="15" fill="rgb(250,213,24)"/><text x="34.0881%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,663,402 samples, 2.70%)</title><rect x="34.6079%" y="85" width="2.7019%" height="15" fill="rgb(247,123,22)"/><text x="34.8579%" y="95.50">me..</text></g><g><title>coherent_trait (14,302,338 samples, 8.29%)</title><rect x="29.5761%" y="133" width="8.2864%" height="15" fill="rgb(231,138,38)"/><text x="29.8261%" y="143.50">coherent_tra..</text></g><g><title>specialization_graph_of (14,275,038 samples, 8.27%)</title><rect x="29.5919%" y="117" width="8.2706%" height="15" fill="rgb(231,145,46)"/><text x="29.8419%" y="127.50">specializati..</text></g><g><title>trait_impls_of (950,750 samples, 0.55%)</title><rect x="37.3117%" y="101" width="0.5508%" height="15" fill="rgb(251,118,11)"/><text x="37.5617%" y="111.50"></text></g><g><title>implementations_of_trait (268,091 samples, 0.16%)</title><rect x="37.7072%" y="85" width="0.1553%" height="15" fill="rgb(217,147,25)"/><text x="37.9572%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (204,681 samples, 0.12%)</title><rect x="37.7440%" y="69" width="0.1186%" height="15" fill="rgb(247,81,37)"/><text x="37.9940%" y="79.50"></text></g><g><title>coherence_checking (14,391,699 samples, 8.34%)</title><rect x="29.5624%" y="149" width="8.3382%" height="15" fill="rgb(209,12,38)"/><text x="29.8124%" y="159.50">coherence_ch..</text></g><g><title>adt_def (440,985 samples, 0.26%)</title><rect x="59.3763%" y="85" width="0.2555%" height="15" fill="rgb(227,1,9)"/><text x="59.6263%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (438,705 samples, 0.25%)</title><rect x="59.3776%" y="69" width="0.2542%" height="15" fill="rgb(248,47,43)"/><text x="59.6276%" y="79.50"></text></g><g><title>item_attrs (413,435 samples, 0.24%)</title><rect x="59.3923%" y="53" width="0.2395%" height="15" fill="rgb(221,10,30)"/><text x="59.6423%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (405,945 samples, 0.24%)</title><rect x="59.3966%" y="37" width="0.2352%" height="15" fill="rgb(210,229,1)"/><text x="59.6466%" y="47.50"></text></g><g><title>adt_sized_constraint (455,485 samples, 0.26%)</title><rect x="59.3698%" y="101" width="0.2639%" height="15" fill="rgb(222,148,37)"/><text x="59.6198%" y="111.50"></text></g><g><title>associated_item (193,365 samples, 0.11%)</title><rect x="59.6842%" y="85" width="0.1120%" height="15" fill="rgb(234,67,33)"/><text x="59.9342%" y="95.50"></text></g><g><title>associated_items (285,215 samples, 0.17%)</title><rect x="59.6392%" y="101" width="0.1652%" height="15" fill="rgb(247,98,35)"/><text x="59.8892%" y="111.50"></text></g><g><title>adt_dtorck_constraint (218,052 samples, 0.13%)</title><rect x="60.0173%" y="85" width="0.1263%" height="15" fill="rgb(247,138,52)"/><text x="60.2673%" y="95.50"></text></g><g><title>dropck_outlives (560,015 samples, 0.32%)</title><rect x="59.8561%" y="101" width="0.3245%" height="15" fill="rgb(213,79,30)"/><text x="60.1061%" y="111.50"></text></g><g><title>predicates_of (322,365 samples, 0.19%)</title><rect x="61.3004%" y="85" width="0.1868%" height="15" fill="rgb(246,177,23)"/><text x="61.5504%" y="95.50"></text></g><g><title>predicates_defined_on (205,651 samples, 0.12%)</title><rect x="61.3680%" y="69" width="0.1191%" height="15" fill="rgb(230,62,27)"/><text x="61.6180%" y="79.50"></text></g><g><title>specializes (238,441 samples, 0.14%)</title><rect x="61.4872%" y="85" width="0.1381%" height="15" fill="rgb(216,154,8)"/><text x="61.7372%" y="95.50"></text></g><g><title>evaluate_obligation (2,672,037 samples, 1.55%)</title><rect x="60.1806%" y="101" width="1.5481%" height="15" fill="rgb(244,35,45)"/><text x="60.4306%" y="111.50"></text></g><g><title>item_attrs (176,002 samples, 0.10%)</title><rect x="62.0006%" y="101" width="0.1020%" height="15" fill="rgb(251,115,12)"/><text x="62.2506%" y="111.50"></text></g><g><title>evaluate_obligation (205,402 samples, 0.12%)</title><rect x="62.2665%" y="85" width="0.1190%" height="15" fill="rgb(240,54,50)"/><text x="62.5165%" y="95.50"></text></g><g><title>method_autoderef_steps (417,153 samples, 0.24%)</title><rect x="62.1495%" y="101" width="0.2417%" height="15" fill="rgb(233,84,52)"/><text x="62.3995%" y="111.50"></text></g><g><title>predicates_of (331,741 samples, 0.19%)</title><rect x="62.5171%" y="101" width="0.1922%" height="15" fill="rgb(207,117,47)"/><text x="62.7671%" y="111.50"></text></g><g><title>predicates_defined_on (236,211 samples, 0.14%)</title><rect x="62.5724%" y="85" width="0.1369%" height="15" fill="rgb(249,43,39)"/><text x="62.8224%" y="95.50"></text></g><g><title>associated_item (291,854 samples, 0.17%)</title><rect x="64.6971%" y="69" width="0.1691%" height="15" fill="rgb(209,38,44)"/><text x="64.9471%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (231,024 samples, 0.13%)</title><rect x="64.7323%" y="53" width="0.1339%" height="15" fill="rgb(236,212,23)"/><text x="64.9823%" y="63.50"></text></g><g><title>associated_items (437,625 samples, 0.25%)</title><rect x="64.6278%" y="85" width="0.2535%" height="15" fill="rgb(242,79,21)"/><text x="64.8778%" y="95.50"></text></g><g><title>evaluate_obligation (531,636 samples, 0.31%)</title><rect x="64.9238%" y="85" width="0.3080%" height="15" fill="rgb(211,96,35)"/><text x="65.1738%" y="95.50"></text></g><g><title>is_copy_raw (189,601 samples, 0.11%)</title><rect x="65.3655%" y="85" width="0.1099%" height="15" fill="rgb(253,215,40)"/><text x="65.6155%" y="95.50"></text></g><g><title>evaluate_obligation (178,741 samples, 0.10%)</title><rect x="65.3718%" y="69" width="0.1036%" height="15" fill="rgb(211,81,21)"/><text x="65.6218%" y="79.50"></text></g><g><title>typeck (5,270,649 samples, 3.05%)</title><rect x="62.7966%" y="101" width="3.0537%" height="15" fill="rgb(208,190,38)"/><text x="63.0466%" y="111.50">typ..</text></g><g><title>visibility (217,272 samples, 0.13%)</title><rect x="65.7244%" y="85" width="0.1259%" height="15" fill="rgb(235,213,38)"/><text x="65.9744%" y="95.50"></text></g><g><title>item_bodies_checking (48,270,723 samples, 27.97%)</title><rect x="37.9220%" y="149" width="27.9669%" height="15" fill="rgb(237,122,38)"/><text x="38.1720%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (48,267,203 samples, 27.96%)</title><rect x="37.9240%" y="133" width="27.9649%" height="15" fill="rgb(244,218,35)"/><text x="38.1740%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (48,176,882 samples, 27.91%)</title><rect x="37.9763%" y="117" width="27.9126%" height="15" fill="rgb(240,68,47)"/><text x="38.2263%" y="127.50">typeck</text></g><g><title>adt_destructor (340,954 samples, 0.20%)</title><rect x="66.5654%" y="117" width="0.1975%" height="15" fill="rgb(210,16,53)"/><text x="66.8154%" y="127.50"></text></g><g><title>coherent_trait (333,464 samples, 0.19%)</title><rect x="66.5697%" y="101" width="0.1932%" height="15" fill="rgb(235,124,12)"/><text x="66.8197%" y="111.50"></text></g><g><title>specialization_graph_of (331,684 samples, 0.19%)</title><rect x="66.5708%" y="85" width="0.1922%" height="15" fill="rgb(224,169,11)"/><text x="66.8208%" y="95.50"></text></g><g><title>item_types_checking (1,766,560 samples, 1.02%)</title><rect x="65.8889%" y="149" width="1.0235%" height="15" fill="rgb(250,166,2)"/><text x="66.1389%" y="159.50"></text></g><g><title>check_mod_item_types (1,762,200 samples, 1.02%)</title><rect x="65.8914%" y="133" width="1.0210%" height="15" fill="rgb(242,216,29)"/><text x="66.1414%" y="143.50"></text></g><g><title>fn_sig (504,124 samples, 0.29%)</title><rect x="67.1141%" y="117" width="0.2921%" height="15" fill="rgb(230,116,27)"/><text x="67.3641%" y="127.50"></text></g><g><title>named_region_map (606,221 samples, 0.35%)</title><rect x="67.5621%" y="101" width="0.3512%" height="15" fill="rgb(228,99,48)"/><text x="67.8121%" y="111.50"></text></g><g><title>resolve_lifetimes (578,380 samples, 0.34%)</title><rect x="67.5782%" y="85" width="0.3351%" height="15" fill="rgb(253,11,6)"/><text x="67.8282%" y="95.50"></text></g><g><title>lint_levels (229,093 samples, 0.13%)</title><rect x="67.7806%" y="69" width="0.1327%" height="15" fill="rgb(247,143,39)"/><text x="68.0306%" y="79.50"></text></g><g><title>generics_of (890,965 samples, 0.52%)</title><rect x="67.4062%" y="117" width="0.5162%" height="15" fill="rgb(236,97,10)"/><text x="67.6562%" y="127.50"></text></g><g><title>predicates_of (697,586 samples, 0.40%)</title><rect x="67.9683%" y="117" width="0.4042%" height="15" fill="rgb(233,208,19)"/><text x="68.2183%" y="127.50"></text></g><g><title>predicates_defined_on (636,886 samples, 0.37%)</title><rect x="68.0035%" y="101" width="0.3690%" height="15" fill="rgb(216,164,2)"/><text x="68.2535%" y="111.50"></text></g><g><title>inferred_outlives_of (381,794 samples, 0.22%)</title><rect x="68.1513%" y="85" width="0.2212%" height="15" fill="rgb(220,129,5)"/><text x="68.4013%" y="95.50"></text></g><g><title>inferred_outlives_crate (356,774 samples, 0.21%)</title><rect x="68.1658%" y="69" width="0.2067%" height="15" fill="rgb(242,17,10)"/><text x="68.4158%" y="79.50"></text></g><g><title>type_of (197,043 samples, 0.11%)</title><rect x="68.2583%" y="53" width="0.1142%" height="15" fill="rgb(242,107,0)"/><text x="68.5083%" y="63.50"></text></g><g><title>type_collecting (2,646,240 samples, 1.53%)</title><rect x="66.9133%" y="149" width="1.5332%" height="15" fill="rgb(251,28,31)"/><text x="67.1633%" y="159.50"></text></g><g><title>collect_mod_item_types (2,636,799 samples, 1.53%)</title><rect x="66.9188%" y="133" width="1.5277%" height="15" fill="rgb(233,223,10)"/><text x="67.1688%" y="143.50"></text></g><g><title>evaluate_obligation (462,787 samples, 0.27%)</title><rect x="69.6964%" y="117" width="0.2681%" height="15" fill="rgb(215,21,27)"/><text x="69.9464%" y="127.50"></text></g><g><title>implied_outlives_bounds (228,311 samples, 0.13%)</title><rect x="69.9702%" y="117" width="0.1323%" height="15" fill="rgb(232,23,21)"/><text x="70.2202%" y="127.50"></text></g><g><title>param_env (233,383 samples, 0.14%)</title><rect x="70.1318%" y="117" width="0.1352%" height="15" fill="rgb(244,5,23)"/><text x="70.3818%" y="127.50"></text></g><g><title>region_scope_tree (737,235 samples, 0.43%)</title><rect x="70.2990%" y="117" width="0.4271%" height="15" fill="rgb(226,81,46)"/><text x="70.5490%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,746,439 samples, 2.17%)</title><rect x="68.5817%" y="133" width="2.1706%" height="15" fill="rgb(247,70,30)"/><text x="68.8317%" y="143.50">c..</text></g><g><title>evaluate_obligation (554,576 samples, 0.32%)</title><rect x="71.5440%" y="117" width="0.3213%" height="15" fill="rgb(212,68,19)"/><text x="71.7940%" y="127.50"></text></g><g><title>param_env (334,954 samples, 0.19%)</title><rect x="71.9166%" y="117" width="0.1941%" height="15" fill="rgb(240,187,13)"/><text x="72.1666%" y="127.50"></text></g><g><title>analysis (124,054,391 samples, 71.87%)</title><rect x="0.3985%" y="181" width="71.8743%" height="15" fill="rgb(223,113,26)"/><text x="0.6485%" y="191.50">analysis</text></g><g><title>type_check_crate (73,784,606 samples, 42.75%)</title><rect x="29.5236%" y="165" width="42.7491%" height="15" fill="rgb(206,192,2)"/><text x="29.7736%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,599,623 samples, 3.82%)</title><rect x="68.4490%" y="149" width="3.8237%" height="15" fill="rgb(241,108,4)"/><text x="68.6990%" y="159.50">wf_c..</text></g><g><title>check_item_well_formed (2,624,249 samples, 1.52%)</title><rect x="70.7523%" y="133" width="1.5204%" height="15" fill="rgb(247,173,49)"/><text x="71.0023%" y="143.50"></text></g><g><title>codegen_crate (402,015 samples, 0.23%)</title><rect x="72.2796%" y="181" width="0.2329%" height="15" fill="rgb(224,114,35)"/><text x="72.5296%" y="191.50"></text></g><g><title>AST_validation (241,472 samples, 0.14%)</title><rect x="72.6462%" y="165" width="0.1399%" height="15" fill="rgb(245,159,27)"/><text x="72.8962%" y="175.50"></text></g><g><title>metadata_load_macro (280,155 samples, 0.16%)</title><rect x="85.7893%" y="133" width="0.1623%" height="15" fill="rgb(245,172,44)"/><text x="86.0393%" y="143.50"></text></g><g><title>metadata_register_crate (2,749,820 samples, 1.59%)</title><rect x="85.9516%" y="133" width="1.5932%" height="15" fill="rgb(236,23,11)"/><text x="86.2016%" y="143.50"></text></g><g><title>metadata_register_crate (1,026,801 samples, 0.59%)</title><rect x="86.9499%" y="117" width="0.5949%" height="15" fill="rgb(205,117,38)"/><text x="87.1999%" y="127.50"></text></g><g><title>macro_expand_crate (25,514,202 samples, 14.78%)</title><rect x="72.8909%" y="165" width="14.7823%" height="15" fill="rgb(237,72,25)"/><text x="73.1409%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (25,489,801 samples, 14.77%)</title><rect x="72.9051%" y="149" width="14.7682%" height="15" fill="rgb(244,70,9)"/><text x="73.1551%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (221,792 samples, 0.13%)</title><rect x="87.5448%" y="133" width="0.1285%" height="15" fill="rgb(217,125,39)"/><text x="87.7948%" y="143.50"></text></g><g><title>finalize_macro_resolutions (263,743 samples, 0.15%)</title><rect x="87.7896%" y="149" width="0.1528%" height="15" fill="rgb(235,36,10)"/><text x="88.0396%" y="159.50"></text></g><g><title>late_resolve_crate (6,888,976 samples, 3.99%)</title><rect x="87.9425%" y="149" width="3.9913%" height="15" fill="rgb(251,123,47)"/><text x="88.1925%" y="159.50">late..</text></g><g><title>metadata_register_crate (3,005,653 samples, 1.74%)</title><rect x="90.1924%" y="133" width="1.7414%" height="15" fill="rgb(221,13,13)"/><text x="90.4424%" y="143.50"></text></g><g><title>metadata_register_crate (2,583,469 samples, 1.50%)</title><rect x="90.4370%" y="117" width="1.4968%" height="15" fill="rgb(238,131,9)"/><text x="90.6870%" y="127.50"></text></g><g><title>configure_and_expand (33,695,432 samples, 19.52%)</title><rect x="72.5126%" y="181" width="19.5224%" height="15" fill="rgb(211,50,8)"/><text x="72.7626%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (7,391,932 samples, 4.28%)</title><rect x="87.7522%" y="165" width="4.2827%" height="15" fill="rgb(245,182,24)"/><text x="88.0022%" y="175.50">resol..</text></g><g><title>drop_ast (239,952 samples, 0.14%)</title><rect x="92.0349%" y="181" width="0.1390%" height="15" fill="rgb(242,14,37)"/><text x="92.2849%" y="191.50"></text></g><g><title>early_lint_checks (514,406 samples, 0.30%)</title><rect x="92.1841%" y="181" width="0.2980%" height="15" fill="rgb(246,228,12)"/><text x="92.4341%" y="191.50"></text></g><g><title>free_global_ctxt (3,984,664 samples, 2.31%)</title><rect x="92.4821%" y="181" width="2.3086%" height="15" fill="rgb(213,55,15)"/><text x="92.7321%" y="191.50">f..</text></g><g><title>generate_crate_metadata (1,615,998 samples, 0.94%)</title><rect x="94.7907%" y="181" width="0.9363%" height="15" fill="rgb(209,9,3)"/><text x="95.0407%" y="191.50"></text></g><g><title>hir_lowering (4,008,784 samples, 2.32%)</title><rect x="95.7270%" y="181" width="2.3226%" height="15" fill="rgb(230,59,30)"/><text x="95.9770%" y="191.50">h..</text></g><g><title>parse_crate (1,789,150 samples, 1.04%)</title><rect x="98.0837%" y="181" width="1.0366%" height="15" fill="rgb(209,121,21)"/><text x="98.3337%" y="191.50"></text></g><g><title>prepare_outputs (188,732 samples, 0.11%)</title><rect x="99.1264%" y="181" width="0.1093%" height="15" fill="rgb(220,109,13)"/><text x="99.3764%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (925,200 samples, 0.54%)</title><rect x="99.2358%" y="181" width="0.5360%" height="15" fill="rgb(232,18,1)"/><text x="99.4858%" y="191.50"></text></g><g><title>all (172,599,177 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (172,599,177 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (293,343 samples, 0.17%)</title><rect x="99.8300%" y="181" width="0.1700%" height="15" fill="rgb(240,125,3)"/><text x="100.0800%" y="191.50"></text></g></svg></svg>