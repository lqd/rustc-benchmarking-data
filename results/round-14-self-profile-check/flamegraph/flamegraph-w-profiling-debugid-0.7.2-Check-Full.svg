<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (218,762 samples, 0.17%)</title><rect x="8.6068%" y="117" width="0.1651%" height="15" fill="rgb(227,0,7)"/><text x="8.8568%" y="127.50"></text></g><g><title>item_attrs (181,992 samples, 0.14%)</title><rect x="9.1144%" y="85" width="0.1374%" height="15" fill="rgb(217,0,24)"/><text x="9.3644%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (174,482 samples, 0.13%)</title><rect x="9.1201%" y="69" width="0.1317%" height="15" fill="rgb(221,193,54)"/><text x="9.3701%" y="79.50"></text></g><g><title>codegen_fn_attrs (276,162 samples, 0.21%)</title><rect x="9.0585%" y="101" width="0.2085%" height="15" fill="rgb(248,212,6)"/><text x="9.3085%" y="111.50"></text></g><g><title>adt_drop_tys (200,001 samples, 0.15%)</title><rect x="11.0182%" y="69" width="0.1510%" height="15" fill="rgb(208,68,35)"/><text x="11.2682%" y="79.50"></text></g><g><title>needs_drop_raw (918,460 samples, 0.69%)</title><rect x="10.9720%" y="85" width="0.6933%" height="15" fill="rgb(232,128,0)"/><text x="11.2220%" y="95.50"></text></g><g><title>is_copy_raw (657,269 samples, 0.50%)</title><rect x="11.1692%" y="69" width="0.4962%" height="15" fill="rgb(207,160,47)"/><text x="11.4192%" y="79.50"></text></g><g><title>evaluate_obligation (571,118 samples, 0.43%)</title><rect x="11.2342%" y="53" width="0.4311%" height="15" fill="rgb(228,23,34)"/><text x="11.4842%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (307,753 samples, 0.23%)</title><rect x="11.8663%" y="69" width="0.2323%" height="15" fill="rgb(218,30,26)"/><text x="12.1163%" y="79.50"></text></g><g><title>impl_item_implementor_ids (166,811 samples, 0.13%)</title><rect x="12.1099%" y="69" width="0.1259%" height="15" fill="rgb(220,122,19)"/><text x="12.3599%" y="79.50"></text></g><g><title>associated_items (138,661 samples, 0.10%)</title><rect x="12.1311%" y="53" width="0.1047%" height="15" fill="rgb(250,228,42)"/><text x="12.3811%" y="63.50"></text></g><g><title>impl_parent (232,911 samples, 0.18%)</title><rect x="12.7989%" y="53" width="0.1758%" height="15" fill="rgb(240,193,28)"/><text x="13.0489%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (150,040 samples, 0.11%)</title><rect x="12.8614%" y="37" width="0.1133%" height="15" fill="rgb(216,20,37)"/><text x="13.1114%" y="47.50"></text></g><g><title>specialization_graph_of (1,465,337 samples, 1.11%)</title><rect x="12.2366%" y="69" width="1.1062%" height="15" fill="rgb(206,188,39)"/><text x="12.4866%" y="79.50"></text></g><g><title>impl_trait_ref (487,577 samples, 0.37%)</title><rect x="12.9747%" y="53" width="0.3681%" height="15" fill="rgb(217,207,13)"/><text x="13.2247%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (417,747 samples, 0.32%)</title><rect x="13.0274%" y="37" width="0.3154%" height="15" fill="rgb(231,73,38)"/><text x="13.2774%" y="47.50"></text></g><g><title>resolve_instance (2,289,144 samples, 1.73%)</title><rect x="11.6848%" y="85" width="1.7280%" height="15" fill="rgb(225,20,46)"/><text x="11.9348%" y="95.50"></text></g><g><title>thir_body (804,637 samples, 0.61%)</title><rect x="13.4288%" y="85" width="0.6074%" height="15" fill="rgb(210,31,41)"/><text x="13.6788%" y="95.50"></text></g><g><title>mir_const (7,929,943 samples, 5.99%)</title><rect x="8.0612%" y="133" width="5.9862%" height="15" fill="rgb(221,200,47)"/><text x="8.3112%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (6,988,352 samples, 5.28%)</title><rect x="8.7720%" y="117" width="5.2754%" height="15" fill="rgb(226,26,5)"/><text x="9.0220%" y="127.50">unsafe..</text></g><g><title>mir_built (6,332,696 samples, 4.78%)</title><rect x="9.2669%" y="101" width="4.7804%" height="15" fill="rgb(249,33,26)"/><text x="9.5169%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (8,716,371 samples, 6.58%)</title><rect x="7.5659%" y="149" width="6.5798%" height="15" fill="rgb(235,183,28)"/><text x="7.8159%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (247,221 samples, 0.19%)</title><rect x="14.1467%" y="149" width="0.1866%" height="15" fill="rgb(221,5,38)"/><text x="14.3967%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (266,291 samples, 0.20%)</title><rect x="14.3333%" y="149" width="0.2010%" height="15" fill="rgb(247,18,42)"/><text x="14.5833%" y="159.50"></text></g><g><title>normalize_projection_ty (157,070 samples, 0.12%)</title><rect x="14.4158%" y="133" width="0.1186%" height="15" fill="rgb(241,131,45)"/><text x="14.6658%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,308,198 samples, 0.99%)</title><rect x="14.6117%" y="149" width="0.9875%" height="15" fill="rgb(249,31,29)"/><text x="14.8617%" y="159.50"></text></g><g><title>MIR_borrow_checking (19,522,648 samples, 14.74%)</title><rect x="0.8683%" y="181" width="14.7373%" height="15" fill="rgb(225,111,53)"/><text x="1.1183%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (19,414,926 samples, 14.66%)</title><rect x="0.9496%" y="165" width="14.6560%" height="15" fill="rgb(238,160,17)"/><text x="1.1996%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (151,642 samples, 0.11%)</title><rect x="15.6056%" y="181" width="0.1145%" height="15" fill="rgb(214,148,48)"/><text x="15.8556%" y="191.50"></text></g><g><title>hir_module_items (299,013 samples, 0.23%)</title><rect x="15.7200%" y="181" width="0.2257%" height="15" fill="rgb(232,36,49)"/><text x="15.9700%" y="191.50"></text></g><g><title>get_lang_items (140,022 samples, 0.11%)</title><rect x="16.5928%" y="101" width="0.1057%" height="15" fill="rgb(209,103,24)"/><text x="16.8428%" y="111.50"></text></g><g><title>item_attrs (163,133 samples, 0.12%)</title><rect x="16.6985%" y="101" width="0.1231%" height="15" fill="rgb(229,88,8)"/><text x="16.9485%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (147,973 samples, 0.11%)</title><rect x="16.7099%" y="85" width="0.1117%" height="15" fill="rgb(213,181,19)"/><text x="16.9599%" y="95.50"></text></g><g><title>codegen_fn_attrs (501,056 samples, 0.38%)</title><rect x="16.5343%" y="117" width="0.3782%" height="15" fill="rgb(254,191,54)"/><text x="16.7843%" y="127.50"></text></g><g><title>codegen_fn_attrs (835,959 samples, 0.63%)</title><rect x="16.2915%" y="149" width="0.6311%" height="15" fill="rgb(241,83,37)"/><text x="16.5415%" y="159.50"></text></g><g><title>should_inherit_track_caller (734,727 samples, 0.55%)</title><rect x="16.3679%" y="133" width="0.5546%" height="15" fill="rgb(233,36,39)"/><text x="16.6179%" y="143.50"></text></g><g><title>check_mod_attrs (1,271,505 samples, 0.96%)</title><rect x="15.9631%" y="165" width="0.9598%" height="15" fill="rgb(226,3,54)"/><text x="16.2131%" y="175.50"></text></g><g><title>check_mod_const_bodies (223,643 samples, 0.17%)</title><rect x="16.9229%" y="165" width="0.1688%" height="15" fill="rgb(245,192,40)"/><text x="17.1729%" y="175.50"></text></g><g><title>lookup_deprecation_entry (223,802 samples, 0.17%)</title><rect x="17.4274%" y="149" width="0.1689%" height="15" fill="rgb(238,167,29)"/><text x="17.6774%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (731,628 samples, 0.55%)</title><rect x="17.1821%" y="165" width="0.5523%" height="15" fill="rgb(232,182,51)"/><text x="17.4321%" y="175.50"></text></g><g><title>misc_checking_1 (2,473,518 samples, 1.87%)</title><rect x="15.9461%" y="181" width="1.8672%" height="15" fill="rgb(231,60,39)"/><text x="16.1961%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (265,003 samples, 0.20%)</title><rect x="17.8146%" y="165" width="0.2000%" height="15" fill="rgb(208,69,12)"/><text x="18.0646%" y="175.50"></text></g><g><title>check_mod_liveness (197,282 samples, 0.15%)</title><rect x="17.8657%" y="149" width="0.1489%" height="15" fill="rgb(235,93,37)"/><text x="18.1157%" y="159.50"></text></g><g><title>misc_checking_2 (684,288 samples, 0.52%)</title><rect x="17.8133%" y="181" width="0.5166%" height="15" fill="rgb(213,116,39)"/><text x="18.0633%" y="191.50"></text></g><g><title>match_checking (417,525 samples, 0.32%)</title><rect x="18.0147%" y="165" width="0.3152%" height="15" fill="rgb(222,207,29)"/><text x="18.2647%" y="175.50"></text></g><g><title>check_match (391,895 samples, 0.30%)</title><rect x="18.0340%" y="149" width="0.2958%" height="15" fill="rgb(206,96,30)"/><text x="18.2840%" y="159.50"></text></g><g><title>check_private_in_public (164,152 samples, 0.12%)</title><rect x="18.3367%" y="165" width="0.1239%" height="15" fill="rgb(218,138,4)"/><text x="18.5867%" y="175.50"></text></g><g><title>death_checking (803,259 samples, 0.61%)</title><rect x="18.4606%" y="165" width="0.6064%" height="15" fill="rgb(250,191,14)"/><text x="18.7106%" y="175.50"></text></g><g><title>item_attrs (521,527 samples, 0.39%)</title><rect x="18.6733%" y="149" width="0.3937%" height="15" fill="rgb(239,60,40)"/><text x="18.9233%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (518,647 samples, 0.39%)</title><rect x="18.6755%" y="133" width="0.3915%" height="15" fill="rgb(206,27,48)"/><text x="18.9255%" y="143.50"></text></g><g><title>crate_lints (1,727,439 samples, 1.30%)</title><rect x="19.0679%" y="149" width="1.3040%" height="15" fill="rgb(225,35,8)"/><text x="19.3179%" y="159.50"></text></g><g><title>type_of (1,052,110 samples, 0.79%)</title><rect x="19.5777%" y="133" width="0.7942%" height="15" fill="rgb(250,213,24)"/><text x="19.8277%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (808,917 samples, 0.61%)</title><rect x="19.7613%" y="117" width="0.6106%" height="15" fill="rgb(247,123,22)"/><text x="20.0113%" y="127.50"></text></g><g><title>lint_checking (1,994,252 samples, 1.51%)</title><rect x="19.0670%" y="165" width="1.5054%" height="15" fill="rgb(231,138,38)"/><text x="19.3170%" y="175.50"></text></g><g><title>module_lints (265,593 samples, 0.20%)</title><rect x="20.3719%" y="149" width="0.2005%" height="15" fill="rgb(231,145,46)"/><text x="20.6219%" y="159.50"></text></g><g><title>lint_mod (262,973 samples, 0.20%)</title><rect x="20.3739%" y="133" width="0.1985%" height="15" fill="rgb(251,118,11)"/><text x="20.6239%" y="143.50"></text></g><g><title>privacy_access_levels (222,392 samples, 0.17%)</title><rect x="20.5724%" y="165" width="0.1679%" height="15" fill="rgb(217,147,25)"/><text x="20.8224%" y="175.50"></text></g><g><title>privacy_checking_modules (599,097 samples, 0.45%)</title><rect x="20.7403%" y="165" width="0.4522%" height="15" fill="rgb(247,81,37)"/><text x="20.9903%" y="175.50"></text></g><g><title>check_mod_privacy (597,447 samples, 0.45%)</title><rect x="20.7415%" y="149" width="0.4510%" height="15" fill="rgb(209,12,38)"/><text x="20.9915%" y="159.50"></text></g><g><title>misc_checking_3 (3,804,732 samples, 2.87%)</title><rect x="18.3298%" y="181" width="2.8721%" height="15" fill="rgb(227,1,9)"/><text x="18.5798%" y="191.50">mi..</text></g><g><title>impl_trait_ref (243,273 samples, 0.18%)</title><rect x="21.5392%" y="85" width="0.1836%" height="15" fill="rgb(248,47,43)"/><text x="21.7892%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (208,393 samples, 0.16%)</title><rect x="21.5655%" y="69" width="0.1573%" height="15" fill="rgb(221,10,30)"/><text x="21.8155%" y="79.50"></text></g><g><title>adt_destructor (528,046 samples, 0.40%)</title><rect x="21.3567%" y="133" width="0.3986%" height="15" fill="rgb(210,229,1)"/><text x="21.6067%" y="143.50"></text></g><g><title>coherent_trait (514,916 samples, 0.39%)</title><rect x="21.3666%" y="117" width="0.3887%" height="15" fill="rgb(222,148,37)"/><text x="21.6166%" y="127.50"></text></g><g><title>specialization_graph_of (512,676 samples, 0.39%)</title><rect x="21.3683%" y="101" width="0.3870%" height="15" fill="rgb(234,67,33)"/><text x="21.6183%" y="111.50"></text></g><g><title>is_copy_raw (272,244 samples, 0.21%)</title><rect x="21.7553%" y="133" width="0.2055%" height="15" fill="rgb(247,98,35)"/><text x="22.0053%" y="143.50"></text></g><g><title>evaluate_obligation (239,583 samples, 0.18%)</title><rect x="21.7799%" y="117" width="0.1809%" height="15" fill="rgb(247,138,52)"/><text x="22.0299%" y="127.50"></text></g><g><title>impl_parent (6,515,137 samples, 4.92%)</title><rect x="30.2389%" y="117" width="4.9182%" height="15" fill="rgb(213,79,30)"/><text x="30.4889%" y="127.50">impl_p..</text></g><g><title>metadata_decode_entry_impl_parent (2,941,502 samples, 2.22%)</title><rect x="32.9366%" y="101" width="2.2205%" height="15" fill="rgb(246,177,23)"/><text x="33.1866%" y="111.50">m..</text></g><g><title>impl_trait_ref (12,303,100 samples, 9.29%)</title><rect x="35.1571%" y="117" width="9.2874%" height="15" fill="rgb(230,62,27)"/><text x="35.4071%" y="127.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (9,613,331 samples, 7.26%)</title><rect x="37.1876%" y="101" width="7.2569%" height="15" fill="rgb(216,154,8)"/><text x="37.4376%" y="111.50">metadata_d..</text></g><g><title>trait_impls_of (2,431,715 samples, 1.84%)</title><rect x="44.4812%" y="117" width="1.8357%" height="15" fill="rgb(244,35,45)"/><text x="44.7312%" y="127.50">t..</text></g><g><title>implementations_of_trait (642,504 samples, 0.49%)</title><rect x="45.8318%" y="101" width="0.4850%" height="15" fill="rgb(251,115,12)"/><text x="46.0818%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (505,103 samples, 0.38%)</title><rect x="45.9356%" y="85" width="0.3813%" height="15" fill="rgb(240,54,50)"/><text x="46.1856%" y="95.50"></text></g><g><title>coherent_trait (33,166,941 samples, 25.04%)</title><rect x="21.2812%" y="149" width="25.0372%" height="15" fill="rgb(233,84,52)"/><text x="21.5312%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (32,180,419 samples, 24.29%)</title><rect x="22.0259%" y="133" width="24.2925%" height="15" fill="rgb(207,117,47)"/><text x="22.2759%" y="143.50">specialization_graph_of</text></g><g><title>coherence_checking (33,328,383 samples, 25.16%)</title><rect x="21.2468%" y="165" width="25.1590%" height="15" fill="rgb(249,43,39)"/><text x="21.4968%" y="175.50">coherence_checking</text></g><g><title>associated_item (662,268 samples, 0.50%)</title><rect x="58.2409%" y="101" width="0.4999%" height="15" fill="rgb(209,38,44)"/><text x="58.4909%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (358,784 samples, 0.27%)</title><rect x="58.4700%" y="85" width="0.2708%" height="15" fill="rgb(236,212,23)"/><text x="58.7200%" y="95.50"></text></g><g><title>associated_items (849,248 samples, 0.64%)</title><rect x="58.1200%" y="117" width="0.6411%" height="15" fill="rgb(242,79,21)"/><text x="58.3700%" y="127.50"></text></g><g><title>adt_dtorck_constraint (194,963 samples, 0.15%)</title><rect x="59.0592%" y="85" width="0.1472%" height="15" fill="rgb(211,96,35)"/><text x="59.3092%" y="95.50"></text></g><g><title>dropck_outlives (537,598 samples, 0.41%)</title><rect x="58.8223%" y="117" width="0.4058%" height="15" fill="rgb(253,215,40)"/><text x="59.0723%" y="127.50"></text></g><g><title>adt_dtorck_constraint (370,336 samples, 0.28%)</title><rect x="58.9485%" y="101" width="0.2796%" height="15" fill="rgb(211,81,21)"/><text x="59.1985%" y="111.50"></text></g><g><title>adt_sized_constraint (153,863 samples, 0.12%)</title><rect x="60.4156%" y="101" width="0.1161%" height="15" fill="rgb(208,190,38)"/><text x="60.6656%" y="111.50"></text></g><g><title>mir_for_ctfe (882,317 samples, 0.67%)</title><rect x="61.1942%" y="53" width="0.6660%" height="15" fill="rgb(235,213,38)"/><text x="61.4442%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (873,287 samples, 0.66%)</title><rect x="61.2011%" y="37" width="0.6592%" height="15" fill="rgb(237,122,38)"/><text x="61.4511%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,787,001 samples, 1.35%)</title><rect x="60.5336%" y="101" width="1.3490%" height="15" fill="rgb(244,218,35)"/><text x="60.7836%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,745,121 samples, 1.32%)</title><rect x="60.5652%" y="85" width="1.3174%" height="15" fill="rgb(240,68,47)"/><text x="60.8152%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,698,230 samples, 1.28%)</title><rect x="60.6006%" y="69" width="1.2820%" height="15" fill="rgb(210,16,53)"/><text x="60.8506%" y="79.50"></text></g><g><title>generics_of (144,672 samples, 0.11%)</title><rect x="61.8826%" y="101" width="0.1092%" height="15" fill="rgb(235,124,12)"/><text x="62.1326%" y="111.50"></text></g><g><title>predicates_of (337,304 samples, 0.25%)</title><rect x="62.0818%" y="101" width="0.2546%" height="15" fill="rgb(224,169,11)"/><text x="62.3318%" y="111.50"></text></g><g><title>predicates_defined_on (207,782 samples, 0.16%)</title><rect x="62.1796%" y="85" width="0.1569%" height="15" fill="rgb(250,166,2)"/><text x="62.4296%" y="95.50"></text></g><g><title>specializes (137,201 samples, 0.10%)</title><rect x="62.3920%" y="101" width="0.1036%" height="15" fill="rgb(242,216,29)"/><text x="62.6420%" y="111.50"></text></g><g><title>trait_impls_of (347,763 samples, 0.26%)</title><rect x="62.5056%" y="101" width="0.2625%" height="15" fill="rgb(230,116,27)"/><text x="62.7556%" y="111.50"></text></g><g><title>implementations_of_trait (144,542 samples, 0.11%)</title><rect x="62.6590%" y="85" width="0.1091%" height="15" fill="rgb(228,99,48)"/><text x="62.9090%" y="95.50"></text></g><g><title>evaluate_obligation (4,697,947 samples, 3.55%)</title><rect x="59.2281%" y="117" width="3.5464%" height="15" fill="rgb(253,11,6)"/><text x="59.4781%" y="127.50">eval..</text></g><g><title>generics_of (212,182 samples, 0.16%)</title><rect x="62.8957%" y="117" width="0.1602%" height="15" fill="rgb(247,143,39)"/><text x="63.1457%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (167,152 samples, 0.13%)</title><rect x="62.9297%" y="101" width="0.1262%" height="15" fill="rgb(236,97,10)"/><text x="63.1797%" y="111.50"></text></g><g><title>item_attrs (171,761 samples, 0.13%)</title><rect x="63.2735%" y="117" width="0.1297%" height="15" fill="rgb(233,208,19)"/><text x="63.5235%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (164,311 samples, 0.12%)</title><rect x="63.2791%" y="101" width="0.1240%" height="15" fill="rgb(216,164,2)"/><text x="63.5291%" y="111.50"></text></g><g><title>method_autoderef_steps (192,802 samples, 0.15%)</title><rect x="63.4639%" y="117" width="0.1455%" height="15" fill="rgb(220,129,5)"/><text x="63.7139%" y="127.50"></text></g><g><title>object_safety_violations (135,142 samples, 0.10%)</title><rect x="63.6095%" y="117" width="0.1020%" height="15" fill="rgb(242,17,10)"/><text x="63.8595%" y="127.50"></text></g><g><title>predicates_of (424,862 samples, 0.32%)</title><rect x="63.7968%" y="117" width="0.3207%" height="15" fill="rgb(242,107,0)"/><text x="64.0468%" y="127.50"></text></g><g><title>predicates_defined_on (287,861 samples, 0.22%)</title><rect x="63.9003%" y="101" width="0.2173%" height="15" fill="rgb(251,28,31)"/><text x="64.1503%" y="111.50"></text></g><g><title>typeck (688,238 samples, 0.52%)</title><rect x="64.2416%" y="117" width="0.5195%" height="15" fill="rgb(233,223,10)"/><text x="64.4916%" y="127.50"></text></g><g><title>item_bodies_checking (24,301,311 samples, 18.34%)</title><rect x="46.4637%" y="165" width="18.3447%" height="15" fill="rgb(215,21,27)"/><text x="46.7137%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (24,298,021 samples, 18.34%)</title><rect x="46.4662%" y="149" width="18.3422%" height="15" fill="rgb(232,23,21)"/><text x="46.7162%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (24,221,949 samples, 18.28%)</title><rect x="46.5236%" y="133" width="18.2847%" height="15" fill="rgb(244,5,23)"/><text x="46.7736%" y="143.50">typeck</text></g><g><title>item_types_checking (1,116,262 samples, 0.84%)</title><rect x="64.8084%" y="165" width="0.8426%" height="15" fill="rgb(226,81,46)"/><text x="65.0584%" y="175.50"></text></g><g><title>check_mod_item_types (1,113,752 samples, 0.84%)</title><rect x="64.8103%" y="149" width="0.8408%" height="15" fill="rgb(247,70,30)"/><text x="65.0603%" y="159.50"></text></g><g><title>late_bound_vars_map (206,951 samples, 0.16%)</title><rect x="66.3572%" y="117" width="0.1562%" height="15" fill="rgb(212,68,19)"/><text x="66.6072%" y="127.50"></text></g><g><title>resolve_lifetimes (164,851 samples, 0.12%)</title><rect x="66.3890%" y="101" width="0.1244%" height="15" fill="rgb(240,187,13)"/><text x="66.6390%" y="111.50"></text></g><g><title>fn_sig (658,608 samples, 0.50%)</title><rect x="66.0873%" y="133" width="0.4972%" height="15" fill="rgb(223,113,26)"/><text x="66.3373%" y="143.50"></text></g><g><title>is_late_bound_map (454,915 samples, 0.34%)</title><rect x="66.7587%" y="117" width="0.3434%" height="15" fill="rgb(206,192,2)"/><text x="67.0087%" y="127.50"></text></g><g><title>resolve_lifetimes (438,795 samples, 0.33%)</title><rect x="66.7709%" y="101" width="0.3312%" height="15" fill="rgb(241,108,4)"/><text x="67.0209%" y="111.50"></text></g><g><title>lint_levels (293,984 samples, 0.22%)</title><rect x="66.8802%" y="85" width="0.2219%" height="15" fill="rgb(247,173,49)"/><text x="67.1302%" y="95.50"></text></g><g><title>named_region_map (485,105 samples, 0.37%)</title><rect x="67.1021%" y="117" width="0.3662%" height="15" fill="rgb(224,114,35)"/><text x="67.3521%" y="127.50"></text></g><g><title>resolve_lifetimes (435,044 samples, 0.33%)</title><rect x="67.1399%" y="101" width="0.3284%" height="15" fill="rgb(245,159,27)"/><text x="67.3899%" y="111.50"></text></g><g><title>generics_of (1,204,373 samples, 0.91%)</title><rect x="66.5845%" y="133" width="0.9092%" height="15" fill="rgb(245,172,44)"/><text x="66.8345%" y="143.50"></text></g><g><title>impl_trait_ref (183,432 samples, 0.14%)</title><rect x="67.4937%" y="133" width="0.1385%" height="15" fill="rgb(236,23,11)"/><text x="67.7437%" y="143.50"></text></g><g><title>explicit_predicates_of (229,203 samples, 0.17%)</title><rect x="67.8545%" y="101" width="0.1730%" height="15" fill="rgb(205,117,38)"/><text x="68.1045%" y="111.50"></text></g><g><title>predicates_of (967,993 samples, 0.73%)</title><rect x="67.6321%" y="133" width="0.7307%" height="15" fill="rgb(237,72,25)"/><text x="67.8821%" y="143.50"></text></g><g><title>predicates_defined_on (860,162 samples, 0.65%)</title><rect x="67.7135%" y="117" width="0.6493%" height="15" fill="rgb(244,70,9)"/><text x="67.9635%" y="127.50"></text></g><g><title>inferred_outlives_of (444,226 samples, 0.34%)</title><rect x="68.0275%" y="101" width="0.3353%" height="15" fill="rgb(217,125,39)"/><text x="68.2775%" y="111.50"></text></g><g><title>inferred_outlives_crate (396,784 samples, 0.30%)</title><rect x="68.0633%" y="85" width="0.2995%" height="15" fill="rgb(235,36,10)"/><text x="68.3133%" y="95.50"></text></g><g><title>type_of (236,773 samples, 0.18%)</title><rect x="68.1841%" y="69" width="0.1787%" height="15" fill="rgb(251,123,47)"/><text x="68.4341%" y="79.50"></text></g><g><title>type_collecting (3,766,892 samples, 2.84%)</title><rect x="65.6520%" y="165" width="2.8436%" height="15" fill="rgb(221,13,13)"/><text x="65.9020%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (3,755,062 samples, 2.83%)</title><rect x="65.6610%" y="149" width="2.8346%" height="15" fill="rgb(238,131,9)"/><text x="65.9110%" y="159.50">co..</text></g><g><title>type_of (175,861 samples, 0.13%)</title><rect x="68.3629%" y="133" width="0.1328%" height="15" fill="rgb(211,50,8)"/><text x="68.6129%" y="143.50"></text></g><g><title>evaluate_obligation (285,465 samples, 0.22%)</title><rect x="69.6791%" y="133" width="0.2155%" height="15" fill="rgb(245,182,24)"/><text x="69.9291%" y="143.50"></text></g><g><title>param_env (206,651 samples, 0.16%)</title><rect x="69.9818%" y="133" width="0.1560%" height="15" fill="rgb(242,14,37)"/><text x="70.2318%" y="143.50"></text></g><g><title>region_scope_tree (331,626 samples, 0.25%)</title><rect x="70.1631%" y="133" width="0.2503%" height="15" fill="rgb(246,228,12)"/><text x="70.4131%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,386,106 samples, 1.80%)</title><rect x="68.6233%" y="149" width="1.8012%" height="15" fill="rgb(213,55,15)"/><text x="68.8733%" y="159.50">c..</text></g><g><title>adt_sized_constraint (168,312 samples, 0.13%)</title><rect x="71.4538%" y="117" width="0.1271%" height="15" fill="rgb(209,9,3)"/><text x="71.7038%" y="127.50"></text></g><g><title>evaluate_obligation (555,734 samples, 0.42%)</title><rect x="71.1652%" y="133" width="0.4195%" height="15" fill="rgb(230,59,30)"/><text x="71.4152%" y="143.50"></text></g><g><title>param_env (205,370 samples, 0.16%)</title><rect x="71.6321%" y="133" width="0.1550%" height="15" fill="rgb(209,121,21)"/><text x="71.8821%" y="143.50"></text></g><g><title>analysis (94,644,757 samples, 71.45%)</title><rect x="0.4820%" y="197" width="71.4458%" height="15" fill="rgb(220,109,13)"/><text x="0.7320%" y="207.50">analysis</text></g><g><title>type_check_crate (67,196,800 samples, 50.73%)</title><rect x="21.2020%" y="181" width="50.7257%" height="15" fill="rgb(232,18,1)"/><text x="21.4520%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,542,150 samples, 3.43%)</title><rect x="68.4989%" y="165" width="3.4288%" height="15" fill="rgb(215,41,42)"/><text x="68.7489%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (1,991,232 samples, 1.50%)</title><rect x="70.4246%" y="149" width="1.5031%" height="15" fill="rgb(224,123,36)"/><text x="70.6746%" y="159.50"></text></g><g><title>codegen_crate (359,594 samples, 0.27%)</title><rect x="71.9329%" y="197" width="0.2715%" height="15" fill="rgb(240,125,3)"/><text x="72.1829%" y="207.50"></text></g><g><title>AST_validation (202,562 samples, 0.15%)</title><rect x="72.3439%" y="181" width="0.1529%" height="15" fill="rgb(205,98,50)"/><text x="72.5939%" y="191.50"></text></g><g><title>metadata_load_macro (242,773 samples, 0.18%)</title><rect x="84.1954%" y="149" width="0.1833%" height="15" fill="rgb(205,185,37)"/><text x="84.4454%" y="159.50"></text></g><g><title>macro_expand_crate (18,209,533 samples, 13.75%)</title><rect x="72.6583%" y="181" width="13.7461%" height="15" fill="rgb(238,207,15)"/><text x="72.9083%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (18,182,193 samples, 13.73%)</title><rect x="72.6789%" y="165" width="13.7254%" height="15" fill="rgb(213,199,42)"/><text x="72.9289%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,683,450 samples, 2.03%)</title><rect x="84.3787%" y="149" width="2.0257%" height="15" fill="rgb(235,201,11)"/><text x="84.6287%" y="159.50">m..</text></g><g><title>metadata_register_crate (943,361 samples, 0.71%)</title><rect x="85.6923%" y="133" width="0.7121%" height="15" fill="rgb(207,46,11)"/><text x="85.9423%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (247,103 samples, 0.19%)</title><rect x="86.4081%" y="181" width="0.1865%" height="15" fill="rgb(241,35,35)"/><text x="86.6581%" y="191.50"></text></g><g><title>finalize_macro_resolutions (477,425 samples, 0.36%)</title><rect x="86.6441%" y="165" width="0.3604%" height="15" fill="rgb(243,32,47)"/><text x="86.8941%" y="175.50"></text></g><g><title>late_resolve_crate (3,244,127 samples, 2.45%)</title><rect x="87.0045%" y="165" width="2.4489%" height="15" fill="rgb(247,202,23)"/><text x="87.2545%" y="175.50">la..</text></g><g><title>configure_and_expand (23,015,787 samples, 17.37%)</title><rect x="72.2044%" y="197" width="17.3742%" height="15" fill="rgb(219,102,11)"/><text x="72.4544%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,952,944 samples, 2.98%)</title><rect x="86.5946%" y="181" width="2.9840%" height="15" fill="rgb(243,110,44)"/><text x="86.8446%" y="191.50">res..</text></g><g><title>drop_ast (268,103 samples, 0.20%)</title><rect x="89.5786%" y="197" width="0.2024%" height="15" fill="rgb(222,74,54)"/><text x="89.8286%" y="207.50"></text></g><g><title>early_lint_checks (615,876 samples, 0.46%)</title><rect x="89.7929%" y="197" width="0.4649%" height="15" fill="rgb(216,99,12)"/><text x="90.0429%" y="207.50"></text></g><g><title>free_global_ctxt (3,795,273 samples, 2.86%)</title><rect x="90.2578%" y="197" width="2.8650%" height="15" fill="rgb(226,22,26)"/><text x="90.5078%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (911,910 samples, 0.69%)</title><rect x="93.1228%" y="197" width="0.6884%" height="15" fill="rgb(217,163,10)"/><text x="93.3728%" y="207.50"></text></g><g><title>hir_lowering (5,006,285 samples, 3.78%)</title><rect x="93.8112%" y="197" width="3.7792%" height="15" fill="rgb(213,25,53)"/><text x="94.0612%" y="207.50">hir_..</text></g><g><title>parse_crate (1,523,627 samples, 1.15%)</title><rect x="97.6357%" y="197" width="1.1502%" height="15" fill="rgb(252,105,26)"/><text x="97.8857%" y="207.50"></text></g><g><title>prepare_outputs (321,864 samples, 0.24%)</title><rect x="98.7901%" y="197" width="0.2430%" height="15" fill="rgb(220,39,43)"/><text x="99.0401%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (854,780 samples, 0.65%)</title><rect x="99.0330%" y="197" width="0.6453%" height="15" fill="rgb(229,68,48)"/><text x="99.2830%" y="207.50"></text></g><g><title>setup_global_ctxt (141,782 samples, 0.11%)</title><rect x="99.6868%" y="197" width="0.1070%" height="15" fill="rgb(252,8,32)"/><text x="99.9368%" y="207.50"></text></g><g><title>all (132,470,789 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (132,470,789 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (273,173 samples, 0.21%)</title><rect x="99.7938%" y="197" width="0.2062%" height="15" fill="rgb(236,28,36)"/><text x="100.0438%" y="207.50"></text></g></svg></svg>