<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (849,609 samples, 0.19%)</title><rect x="20.3035%" y="117" width="0.1936%" height="15" fill="rgb(227,0,7)"/><text x="20.5535%" y="127.50"></text></g><g><title>item_attrs (567,175 samples, 0.13%)</title><rect x="21.0586%" y="85" width="0.1292%" height="15" fill="rgb(217,0,24)"/><text x="21.3086%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (547,955 samples, 0.12%)</title><rect x="21.0630%" y="69" width="0.1248%" height="15" fill="rgb(221,193,54)"/><text x="21.3130%" y="79.50"></text></g><g><title>codegen_fn_attrs (765,968 samples, 0.17%)</title><rect x="21.0201%" y="101" width="0.1745%" height="15" fill="rgb(248,212,6)"/><text x="21.2701%" y="111.50"></text></g><g><title>adt_drop_tys (1,018,492 samples, 0.23%)</title><rect x="25.4324%" y="69" width="0.2320%" height="15" fill="rgb(208,68,35)"/><text x="25.6824%" y="79.50"></text></g><g><title>is_copy_raw (1,796,093 samples, 0.41%)</title><rect x="25.6644%" y="69" width="0.4092%" height="15" fill="rgb(232,128,0)"/><text x="25.9144%" y="79.50"></text></g><g><title>evaluate_obligation (1,399,035 samples, 0.32%)</title><rect x="25.7549%" y="53" width="0.3187%" height="15" fill="rgb(207,160,47)"/><text x="26.0049%" y="63.50"></text></g><g><title>needs_drop_raw (3,204,521 samples, 0.73%)</title><rect x="25.3542%" y="85" width="0.7301%" height="15" fill="rgb(228,23,34)"/><text x="25.6042%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,281,985 samples, 0.29%)</title><rect x="26.2335%" y="69" width="0.2921%" height="15" fill="rgb(218,30,26)"/><text x="26.4835%" y="79.50"></text></g><g><title>specialization_graph_of (1,608,358 samples, 0.37%)</title><rect x="26.5801%" y="69" width="0.3664%" height="15" fill="rgb(220,122,19)"/><text x="26.8301%" y="79.50"></text></g><g><title>impl_trait_ref (594,318 samples, 0.14%)</title><rect x="26.8111%" y="53" width="0.1354%" height="15" fill="rgb(250,228,42)"/><text x="27.0611%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (510,675 samples, 0.12%)</title><rect x="26.8302%" y="37" width="0.1163%" height="15" fill="rgb(240,193,28)"/><text x="27.0802%" y="47.50"></text></g><g><title>resolve_instance (3,919,539 samples, 0.89%)</title><rect x="26.0905%" y="85" width="0.8930%" height="15" fill="rgb(216,20,37)"/><text x="26.3405%" y="95.50"></text></g><g><title>thir_body (6,648,751 samples, 1.51%)</title><rect x="27.0040%" y="85" width="1.5147%" height="15" fill="rgb(206,188,39)"/><text x="27.2540%" y="95.50"></text></g><g><title>mir_const (39,855,934 samples, 9.08%)</title><rect x="19.4527%" y="133" width="9.0801%" height="15" fill="rgb(217,207,13)"/><text x="19.7027%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (35,271,756 samples, 8.04%)</title><rect x="20.4970%" y="117" width="8.0357%" height="15" fill="rgb(231,73,38)"/><text x="20.7470%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (32,206,417 samples, 7.34%)</title><rect x="21.1954%" y="101" width="7.3374%" height="15" fill="rgb(225,20,46)"/><text x="21.4454%" y="111.50">mir_built</text></g><g><title>mir_promoted (44,591,421 samples, 10.16%)</title><rect x="18.4035%" y="149" width="10.1589%" height="15" fill="rgb(210,31,41)"/><text x="18.6535%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,433,379 samples, 0.55%)</title><rect x="28.5639%" y="149" width="0.5544%" height="15" fill="rgb(221,200,47)"/><text x="28.8139%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,356,253 samples, 0.31%)</title><rect x="29.1182%" y="149" width="0.3090%" height="15" fill="rgb(226,26,5)"/><text x="29.3682%" y="159.50"></text></g><g><title>normalize_projection_ty (822,506 samples, 0.19%)</title><rect x="29.2398%" y="133" width="0.1874%" height="15" fill="rgb(249,33,26)"/><text x="29.4898%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,159,369 samples, 0.26%)</title><rect x="29.4272%" y="149" width="0.2641%" height="15" fill="rgb(235,183,28)"/><text x="29.6772%" y="159.50"></text></g><g><title>normalize_projection_ty (566,983 samples, 0.13%)</title><rect x="29.5622%" y="133" width="0.1292%" height="15" fill="rgb(221,5,38)"/><text x="29.8122%" y="143.50"></text></g><g><title>type_op_prove_predicate (9,326,369 samples, 2.12%)</title><rect x="29.6922%" y="149" width="2.1248%" height="15" fill="rgb(247,18,42)"/><text x="29.9422%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (137,499,052 samples, 31.33%)</title><rect x="0.4958%" y="181" width="31.3254%" height="15" fill="rgb(241,131,45)"/><text x="0.7458%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (137,140,154 samples, 31.24%)</title><rect x="0.5776%" y="165" width="31.2436%" height="15" fill="rgb(249,31,29)"/><text x="0.8276%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (561,886 samples, 0.13%)</title><rect x="31.8421%" y="181" width="0.1280%" height="15" fill="rgb(225,111,53)"/><text x="32.0921%" y="191.50"></text></g><g><title>codegen_fn_attrs (487,763 samples, 0.11%)</title><rect x="32.1615%" y="149" width="0.1111%" height="15" fill="rgb(238,160,17)"/><text x="32.4115%" y="159.50"></text></g><g><title>check_mod_attrs (1,297,824 samples, 0.30%)</title><rect x="31.9770%" y="165" width="0.2957%" height="15" fill="rgb(214,148,48)"/><text x="32.2270%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,029,100 samples, 0.23%)</title><rect x="32.4135%" y="165" width="0.2345%" height="15" fill="rgb(232,36,49)"/><text x="32.6635%" y="175.50"></text></g><g><title>misc_checking_1 (3,068,395 samples, 0.70%)</title><rect x="31.9702%" y="181" width="0.6991%" height="15" fill="rgb(209,103,24)"/><text x="32.2202%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,082,783 samples, 0.47%)</title><rect x="32.6696%" y="165" width="0.4745%" height="15" fill="rgb(229,88,8)"/><text x="32.9196%" y="175.50"></text></g><g><title>check_mod_liveness (1,686,888 samples, 0.38%)</title><rect x="32.7598%" y="149" width="0.3843%" height="15" fill="rgb(213,181,19)"/><text x="33.0098%" y="159.50"></text></g><g><title>misc_checking_2 (7,188,000 samples, 1.64%)</title><rect x="32.6693%" y="181" width="1.6376%" height="15" fill="rgb(254,191,54)"/><text x="32.9193%" y="191.50"></text></g><g><title>match_checking (5,103,647 samples, 1.16%)</title><rect x="33.1441%" y="165" width="1.1627%" height="15" fill="rgb(241,83,37)"/><text x="33.3941%" y="175.50"></text></g><g><title>check_match (5,014,066 samples, 1.14%)</title><rect x="33.1645%" y="149" width="1.1423%" height="15" fill="rgb(233,36,39)"/><text x="33.4145%" y="159.50"></text></g><g><title>check_private_in_public (560,916 samples, 0.13%)</title><rect x="34.3089%" y="165" width="0.1278%" height="15" fill="rgb(226,3,54)"/><text x="34.5589%" y="175.50"></text></g><g><title>death_checking (1,484,816 samples, 0.34%)</title><rect x="34.4367%" y="165" width="0.3383%" height="15" fill="rgb(245,192,40)"/><text x="34.6867%" y="175.50"></text></g><g><title>crate_lints (3,414,818 samples, 0.78%)</title><rect x="34.7753%" y="149" width="0.7780%" height="15" fill="rgb(238,167,29)"/><text x="35.0253%" y="159.50"></text></g><g><title>type_of (1,187,357 samples, 0.27%)</title><rect x="35.2828%" y="133" width="0.2705%" height="15" fill="rgb(232,182,51)"/><text x="35.5328%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (946,635 samples, 0.22%)</title><rect x="35.3376%" y="117" width="0.2157%" height="15" fill="rgb(231,60,39)"/><text x="35.5876%" y="127.50"></text></g><g><title>lint_checking (5,664,233 samples, 1.29%)</title><rect x="34.7750%" y="165" width="1.2904%" height="15" fill="rgb(208,69,12)"/><text x="35.0250%" y="175.50"></text></g><g><title>module_lints (2,247,905 samples, 0.51%)</title><rect x="35.5533%" y="149" width="0.5121%" height="15" fill="rgb(235,93,37)"/><text x="35.8033%" y="159.50"></text></g><g><title>lint_mod (2,239,155 samples, 0.51%)</title><rect x="35.5553%" y="133" width="0.5101%" height="15" fill="rgb(213,116,39)"/><text x="35.8053%" y="143.50"></text></g><g><title>privacy_access_levels (803,288 samples, 0.18%)</title><rect x="36.0654%" y="165" width="0.1830%" height="15" fill="rgb(222,207,29)"/><text x="36.3154%" y="175.50"></text></g><g><title>privacy_checking_modules (3,761,582 samples, 0.86%)</title><rect x="36.2484%" y="165" width="0.8570%" height="15" fill="rgb(206,96,30)"/><text x="36.4984%" y="175.50"></text></g><g><title>check_mod_privacy (3,754,722 samples, 0.86%)</title><rect x="36.2500%" y="149" width="0.8554%" height="15" fill="rgb(218,138,4)"/><text x="36.5000%" y="159.50"></text></g><g><title>misc_checking_3 (12,307,377 samples, 2.80%)</title><rect x="34.3068%" y="181" width="2.8039%" height="15" fill="rgb(250,191,14)"/><text x="34.5568%" y="191.50">mi..</text></g><g><title>impl_parent (3,154,660 samples, 0.72%)</title><rect x="38.3733%" y="117" width="0.7187%" height="15" fill="rgb(239,60,40)"/><text x="38.6233%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,673,483 samples, 0.38%)</title><rect x="38.7107%" y="101" width="0.3813%" height="15" fill="rgb(206,27,48)"/><text x="38.9607%" y="111.50"></text></g><g><title>impl_trait_ref (6,509,535 samples, 1.48%)</title><rect x="39.0920%" y="117" width="1.4830%" height="15" fill="rgb(225,35,8)"/><text x="39.3420%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,017,851 samples, 1.14%)</title><rect x="39.4318%" y="101" width="1.1432%" height="15" fill="rgb(250,213,24)"/><text x="39.6818%" y="111.50"></text></g><g><title>trait_impls_of (1,037,762 samples, 0.24%)</title><rect x="40.5795%" y="117" width="0.2364%" height="15" fill="rgb(247,123,22)"/><text x="40.8295%" y="127.50"></text></g><g><title>coherent_trait (16,103,329 samples, 3.67%)</title><rect x="37.1474%" y="149" width="3.6687%" height="15" fill="rgb(231,138,38)"/><text x="37.3974%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (15,695,204 samples, 3.58%)</title><rect x="37.2404%" y="133" width="3.5757%" height="15" fill="rgb(231,145,46)"/><text x="37.4904%" y="143.50">spec..</text></g><g><title>coherence_checking (16,213,201 samples, 3.69%)</title><rect x="37.1424%" y="165" width="3.6937%" height="15" fill="rgb(251,118,11)"/><text x="37.3924%" y="175.50">cohe..</text></g><g><title>associated_items (545,677 samples, 0.12%)</title><rect x="61.2627%" y="117" width="0.1243%" height="15" fill="rgb(217,147,25)"/><text x="61.5127%" y="127.50"></text></g><g><title>adt_dtorck_constraint (512,465 samples, 0.12%)</title><rect x="61.6464%" y="53" width="0.1168%" height="15" fill="rgb(247,81,37)"/><text x="61.8964%" y="63.50"></text></g><g><title>adt_dtorck_constraint (683,627 samples, 0.16%)</title><rect x="61.6179%" y="69" width="0.1557%" height="15" fill="rgb(209,12,38)"/><text x="61.8679%" y="79.50"></text></g><g><title>adt_dtorck_constraint (801,537 samples, 0.18%)</title><rect x="61.5975%" y="85" width="0.1826%" height="15" fill="rgb(227,1,9)"/><text x="61.8475%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,105,562 samples, 0.25%)</title><rect x="61.5445%" y="101" width="0.2519%" height="15" fill="rgb(248,47,43)"/><text x="61.7945%" y="111.50"></text></g><g><title>dropck_outlives (1,738,121 samples, 0.40%)</title><rect x="61.4110%" y="117" width="0.3960%" height="15" fill="rgb(221,10,30)"/><text x="61.6610%" y="127.50"></text></g><g><title>predicates_of (695,865 samples, 0.16%)</title><rect x="62.7727%" y="101" width="0.1585%" height="15" fill="rgb(210,229,1)"/><text x="63.0227%" y="111.50"></text></g><g><title>predicates_defined_on (550,375 samples, 0.13%)</title><rect x="62.8058%" y="85" width="0.1254%" height="15" fill="rgb(222,148,37)"/><text x="63.0558%" y="95.50"></text></g><g><title>evaluate_obligation (5,268,402 samples, 1.20%)</title><rect x="61.8070%" y="117" width="1.2003%" height="15" fill="rgb(234,67,33)"/><text x="62.0570%" y="127.50"></text></g><g><title>method_autoderef_steps (806,516 samples, 0.18%)</title><rect x="63.2231%" y="117" width="0.1837%" height="15" fill="rgb(247,98,35)"/><text x="63.4731%" y="127.50"></text></g><g><title>predicates_of (509,684 samples, 0.12%)</title><rect x="63.4603%" y="117" width="0.1161%" height="15" fill="rgb(247,138,52)"/><text x="63.7103%" y="127.50"></text></g><g><title>dropck_outlives (543,886 samples, 0.12%)</title><rect x="73.4366%" y="101" width="0.1239%" height="15" fill="rgb(213,79,30)"/><text x="73.6866%" y="111.50"></text></g><g><title>evaluate_obligation (3,802,823 samples, 0.87%)</title><rect x="73.5605%" y="101" width="0.8664%" height="15" fill="rgb(246,177,23)"/><text x="73.8105%" y="111.50"></text></g><g><title>method_autoderef_steps (935,910 samples, 0.21%)</title><rect x="74.6482%" y="101" width="0.2132%" height="15" fill="rgb(230,62,27)"/><text x="74.8982%" y="111.50"></text></g><g><title>typeck (49,970,198 samples, 11.38%)</title><rect x="63.6292%" y="117" width="11.3843%" height="15" fill="rgb(216,154,8)"/><text x="63.8792%" y="127.50">typeck</text></g><g><title>item_bodies_checking (150,084,982 samples, 34.19%)</title><rect x="40.8486%" y="165" width="34.1928%" height="15" fill="rgb(244,35,45)"/><text x="41.0986%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (150,082,422 samples, 34.19%)</title><rect x="40.8491%" y="149" width="34.1922%" height="15" fill="rgb(251,115,12)"/><text x="41.0991%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (149,848,107 samples, 34.14%)</title><rect x="40.9025%" y="133" width="34.1388%" height="15" fill="rgb(240,54,50)"/><text x="41.1525%" y="143.50">typeck</text></g><g><title>item_types_checking (2,102,043 samples, 0.48%)</title><rect x="75.0413%" y="165" width="0.4789%" height="15" fill="rgb(233,84,52)"/><text x="75.2913%" y="175.50"></text></g><g><title>check_mod_item_types (2,094,643 samples, 0.48%)</title><rect x="75.0430%" y="149" width="0.4772%" height="15" fill="rgb(207,117,47)"/><text x="75.2930%" y="159.50"></text></g><g><title>fn_sig (617,196 samples, 0.14%)</title><rect x="75.6799%" y="133" width="0.1406%" height="15" fill="rgb(249,43,39)"/><text x="75.9299%" y="143.50"></text></g><g><title>named_region_map (1,684,993 samples, 0.38%)</title><rect x="75.8933%" y="117" width="0.3839%" height="15" fill="rgb(209,38,44)"/><text x="76.1433%" y="127.50"></text></g><g><title>resolve_lifetimes (1,609,532 samples, 0.37%)</title><rect x="75.9105%" y="101" width="0.3667%" height="15" fill="rgb(236,212,23)"/><text x="76.1605%" y="111.50"></text></g><g><title>lint_levels (542,666 samples, 0.12%)</title><rect x="76.1536%" y="85" width="0.1236%" height="15" fill="rgb(242,79,21)"/><text x="76.4036%" y="95.50"></text></g><g><title>generics_of (2,035,937 samples, 0.46%)</title><rect x="75.8205%" y="133" width="0.4638%" height="15" fill="rgb(211,96,35)"/><text x="76.0705%" y="143.50"></text></g><g><title>predicates_of (1,037,284 samples, 0.24%)</title><rect x="76.3051%" y="133" width="0.2363%" height="15" fill="rgb(253,215,40)"/><text x="76.5551%" y="143.50"></text></g><g><title>predicates_defined_on (912,354 samples, 0.21%)</title><rect x="76.3336%" y="117" width="0.2079%" height="15" fill="rgb(211,81,21)"/><text x="76.5836%" y="127.50"></text></g><g><title>type_collecting (4,724,983 samples, 1.08%)</title><rect x="75.5210%" y="165" width="1.0765%" height="15" fill="rgb(208,190,38)"/><text x="75.7710%" y="175.50"></text></g><g><title>collect_mod_item_types (4,709,383 samples, 1.07%)</title><rect x="75.5246%" y="149" width="1.0729%" height="15" fill="rgb(235,213,38)"/><text x="75.7746%" y="159.50"></text></g><g><title>evaluate_obligation (584,809 samples, 0.13%)</title><rect x="77.2993%" y="133" width="0.1332%" height="15" fill="rgb(237,122,38)"/><text x="77.5493%" y="143.50"></text></g><g><title>region_scope_tree (780,148 samples, 0.18%)</title><rect x="77.5776%" y="133" width="0.1777%" height="15" fill="rgb(244,218,35)"/><text x="77.8276%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,597,662 samples, 1.05%)</title><rect x="76.7194%" y="149" width="1.0475%" height="15" fill="rgb(240,68,47)"/><text x="76.9694%" y="159.50"></text></g><g><title>evaluate_obligation (1,143,958 samples, 0.26%)</title><rect x="78.4861%" y="133" width="0.2606%" height="15" fill="rgb(210,16,53)"/><text x="78.7361%" y="143.50"></text></g><g><title>param_env (684,255 samples, 0.16%)</title><rect x="78.7902%" y="133" width="0.1559%" height="15" fill="rgb(235,124,12)"/><text x="79.0402%" y="143.50"></text></g><g><title>region_scope_tree (754,611 samples, 0.17%)</title><rect x="78.9687%" y="133" width="0.1719%" height="15" fill="rgb(224,169,11)"/><text x="79.2187%" y="143.50"></text></g><g><title>check_item_well_formed (6,241,161 samples, 1.42%)</title><rect x="77.7668%" y="149" width="1.4219%" height="15" fill="rgb(250,166,2)"/><text x="78.0168%" y="159.50"></text></g><g><title>analysis (348,095,408 samples, 79.30%)</title><rect x="0.2387%" y="197" width="79.3040%" height="15" fill="rgb(242,216,29)"/><text x="0.4887%" y="207.50">analysis</text></g><g><title>type_check_crate (186,250,005 samples, 42.43%)</title><rect x="37.1107%" y="181" width="42.4320%" height="15" fill="rgb(230,116,27)"/><text x="37.3607%" y="191.50">type_check_crate</text></g><g><title>wf_checking (12,915,244 samples, 2.94%)</title><rect x="76.6003%" y="165" width="2.9424%" height="15" fill="rgb(228,99,48)"/><text x="76.8503%" y="175.50">wf..</text></g><g><title>check_trait_item_well_formed (1,553,938 samples, 0.35%)</title><rect x="79.1887%" y="149" width="0.3540%" height="15" fill="rgb(253,11,6)"/><text x="79.4387%" y="159.50"></text></g><g><title>codegen_crate (555,336 samples, 0.13%)</title><rect x="79.5446%" y="197" width="0.1265%" height="15" fill="rgb(247,143,39)"/><text x="79.7946%" y="207.50"></text></g><g><title>metadata_register_crate (2,790,011 samples, 0.64%)</title><rect x="91.6539%" y="149" width="0.6356%" height="15" fill="rgb(236,97,10)"/><text x="91.9039%" y="159.50"></text></g><g><title>metadata_register_crate (1,021,031 samples, 0.23%)</title><rect x="92.0570%" y="133" width="0.2326%" height="15" fill="rgb(233,208,19)"/><text x="92.3070%" y="143.50"></text></g><g><title>macro_expand_crate (55,696,880 samples, 12.69%)</title><rect x="79.8627%" y="181" width="12.6890%" height="15" fill="rgb(216,164,2)"/><text x="80.1127%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (55,679,380 samples, 12.69%)</title><rect x="79.8667%" y="165" width="12.6850%" height="15" fill="rgb(220,129,5)"/><text x="80.1167%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,150,573 samples, 0.26%)</title><rect x="92.2896%" y="149" width="0.2621%" height="15" fill="rgb(242,17,10)"/><text x="92.5396%" y="159.50"></text></g><g><title>finalize_macro_resolutions (499,346 samples, 0.11%)</title><rect x="92.5830%" y="165" width="0.1138%" height="15" fill="rgb(242,107,0)"/><text x="92.8330%" y="175.50"></text></g><g><title>late_resolve_crate (6,609,473 samples, 1.51%)</title><rect x="92.6967%" y="165" width="1.5058%" height="15" fill="rgb(251,28,31)"/><text x="92.9467%" y="175.50"></text></g><g><title>configure_and_expand (64,225,506 samples, 14.63%)</title><rect x="79.6711%" y="197" width="14.6320%" height="15" fill="rgb(233,223,10)"/><text x="79.9211%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,636,475 samples, 1.74%)</title><rect x="92.5634%" y="181" width="1.7398%" height="15" fill="rgb(215,21,27)"/><text x="92.8134%" y="191.50"></text></g><g><title>drop_ast (695,698 samples, 0.16%)</title><rect x="94.3032%" y="197" width="0.1585%" height="15" fill="rgb(232,23,21)"/><text x="94.5532%" y="207.50"></text></g><g><title>early_lint_checks (1,671,278 samples, 0.38%)</title><rect x="94.4662%" y="197" width="0.3808%" height="15" fill="rgb(244,5,23)"/><text x="94.7162%" y="207.50"></text></g><g><title>free_global_ctxt (5,774,634 samples, 1.32%)</title><rect x="94.8470%" y="197" width="1.3156%" height="15" fill="rgb(226,81,46)"/><text x="95.0970%" y="207.50"></text></g><g><title>generate_crate_metadata (2,471,358 samples, 0.56%)</title><rect x="96.1626%" y="197" width="0.5630%" height="15" fill="rgb(247,70,30)"/><text x="96.4126%" y="207.50"></text></g><g><title>hir_lowering (12,021,685 samples, 2.74%)</title><rect x="96.7256%" y="197" width="2.7388%" height="15" fill="rgb(212,68,19)"/><text x="96.9756%" y="207.50">hi..</text></g><g><title>parse_crate (445,515 samples, 0.10%)</title><rect x="99.4763%" y="197" width="0.1015%" height="15" fill="rgb(240,187,13)"/><text x="99.7263%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,190,303 samples, 0.27%)</title><rect x="99.6290%" y="197" width="0.2712%" height="15" fill="rgb(223,113,26)"/><text x="99.8790%" y="207.50"></text></g><g><title>all (438,937,770 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (438,937,770 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>