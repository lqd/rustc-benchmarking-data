<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (291,151 samples, 0.26%)</title><rect x="8.3707%" y="149" width="0.2580%" height="15" fill="rgb(227,0,7)"/><text x="8.6207%" y="159.50"></text></g><g><title>item_attrs (221,312 samples, 0.20%)</title><rect x="8.9660%" y="117" width="0.1961%" height="15" fill="rgb(217,0,24)"/><text x="9.2160%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (213,362 samples, 0.19%)</title><rect x="8.9731%" y="101" width="0.1890%" height="15" fill="rgb(221,193,54)"/><text x="9.2231%" y="111.50"></text></g><g><title>codegen_fn_attrs (329,923 samples, 0.29%)</title><rect x="8.8867%" y="133" width="0.2923%" height="15" fill="rgb(248,212,6)"/><text x="9.1367%" y="143.50"></text></g><g><title>adt_drop_tys (133,242 samples, 0.12%)</title><rect x="10.8740%" y="101" width="0.1181%" height="15" fill="rgb(208,68,35)"/><text x="11.1240%" y="111.50"></text></g><g><title>needs_drop_raw (727,497 samples, 0.64%)</title><rect x="10.8261%" y="117" width="0.6446%" height="15" fill="rgb(232,128,0)"/><text x="11.0761%" y="127.50"></text></g><g><title>is_copy_raw (540,125 samples, 0.48%)</title><rect x="10.9921%" y="101" width="0.4785%" height="15" fill="rgb(207,160,47)"/><text x="11.2421%" y="111.50"></text></g><g><title>evaluate_obligation (466,484 samples, 0.41%)</title><rect x="11.0573%" y="85" width="0.4133%" height="15" fill="rgb(228,23,34)"/><text x="11.3073%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (114,200 samples, 0.10%)</title><rect x="11.5841%" y="101" width="0.1012%" height="15" fill="rgb(218,30,26)"/><text x="11.8341%" y="111.50"></text></g><g><title>resolve_instance (366,272 samples, 0.32%)</title><rect x="11.4706%" y="117" width="0.3245%" height="15" fill="rgb(220,122,19)"/><text x="11.7206%" y="127.50"></text></g><g><title>thir_body (779,525 samples, 0.69%)</title><rect x="11.8118%" y="117" width="0.6907%" height="15" fill="rgb(250,228,42)"/><text x="12.0618%" y="127.50"></text></g><g><title>mir_const (5,186,225 samples, 4.59%)</title><rect x="7.9193%" y="165" width="4.5949%" height="15" fill="rgb(240,193,28)"/><text x="8.1693%" y="175.50">mir_c..</text></g><g><title>unsafety_check_result (4,385,557 samples, 3.89%)</title><rect x="8.6287%" y="149" width="3.8856%" height="15" fill="rgb(216,20,37)"/><text x="8.8787%" y="159.50">unsa..</text></g><g><title>mir_built (3,764,409 samples, 3.34%)</title><rect x="9.1790%" y="133" width="3.3352%" height="15" fill="rgb(206,188,39)"/><text x="9.4290%" y="143.50">mir..</text></g><g><title>mir_const (432,183 samples, 0.38%)</title><rect x="12.8431%" y="149" width="0.3829%" height="15" fill="rgb(217,207,13)"/><text x="13.0931%" y="159.50"></text></g><g><title>unsafety_check_result (337,401 samples, 0.30%)</title><rect x="12.9271%" y="133" width="0.2989%" height="15" fill="rgb(231,73,38)"/><text x="13.1771%" y="143.50"></text></g><g><title>mir_built (298,501 samples, 0.26%)</title><rect x="12.9616%" y="117" width="0.2645%" height="15" fill="rgb(225,20,46)"/><text x="13.2116%" y="127.50"></text></g><g><title>mir_const_qualif (863,847 samples, 0.77%)</title><rect x="12.5142%" y="165" width="0.7654%" height="15" fill="rgb(210,31,41)"/><text x="12.7642%" y="175.50"></text></g><g><title>mir_promoted (6,625,808 samples, 5.87%)</title><rect x="7.4094%" y="181" width="5.8704%" height="15" fill="rgb(221,200,47)"/><text x="7.6594%" y="191.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (171,123 samples, 0.15%)</title><rect x="13.2805%" y="181" width="0.1516%" height="15" fill="rgb(226,26,5)"/><text x="13.5305%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (257,523 samples, 0.23%)</title><rect x="13.4321%" y="181" width="0.2282%" height="15" fill="rgb(249,33,26)"/><text x="13.6821%" y="191.50"></text></g><g><title>normalize_projection_ty (170,382 samples, 0.15%)</title><rect x="13.5093%" y="165" width="0.1510%" height="15" fill="rgb(235,183,28)"/><text x="13.7593%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,233,613 samples, 1.09%)</title><rect x="13.7419%" y="181" width="1.0930%" height="15" fill="rgb(221,5,38)"/><text x="13.9919%" y="191.50"></text></g><g><title>MIR_borrow_checking (15,562,813 samples, 13.79%)</title><rect x="1.0506%" y="213" width="13.7885%" height="15" fill="rgb(247,18,42)"/><text x="1.3006%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,482,609 samples, 13.72%)</title><rect x="1.1216%" y="197" width="13.7174%" height="15" fill="rgb(241,131,45)"/><text x="1.3716%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (250,133 samples, 0.22%)</title><rect x="14.8391%" y="213" width="0.2216%" height="15" fill="rgb(249,31,29)"/><text x="15.0891%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (191,703 samples, 0.17%)</title><rect x="14.8908%" y="197" width="0.1698%" height="15" fill="rgb(225,111,53)"/><text x="15.1408%" y="207.50"></text></g><g><title>hir_module_items (244,134 samples, 0.22%)</title><rect x="15.0607%" y="213" width="0.2163%" height="15" fill="rgb(238,160,17)"/><text x="15.3107%" y="223.50"></text></g><g><title>codegen_fn_attrs (136,862 samples, 0.12%)</title><rect x="15.8297%" y="149" width="0.1213%" height="15" fill="rgb(214,148,48)"/><text x="16.0797%" y="159.50"></text></g><g><title>should_inherit_track_caller (237,213 samples, 0.21%)</title><rect x="15.7487%" y="165" width="0.2102%" height="15" fill="rgb(232,36,49)"/><text x="15.9987%" y="175.50"></text></g><g><title>codegen_fn_attrs (439,045 samples, 0.39%)</title><rect x="15.5905%" y="181" width="0.3890%" height="15" fill="rgb(209,103,24)"/><text x="15.8405%" y="191.50"></text></g><g><title>check_mod_attrs (753,687 samples, 0.67%)</title><rect x="15.3119%" y="197" width="0.6678%" height="15" fill="rgb(229,88,8)"/><text x="15.5619%" y="207.50"></text></g><g><title>check_mod_const_bodies (164,273 samples, 0.15%)</title><rect x="15.9796%" y="197" width="0.1455%" height="15" fill="rgb(213,181,19)"/><text x="16.2296%" y="207.50"></text></g><g><title>lookup_deprecation_entry (179,771 samples, 0.16%)</title><rect x="16.4551%" y="181" width="0.1593%" height="15" fill="rgb(254,191,54)"/><text x="16.7051%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (552,857 samples, 0.49%)</title><rect x="16.2303%" y="197" width="0.4898%" height="15" fill="rgb(241,83,37)"/><text x="16.4803%" y="207.50"></text></g><g><title>misc_checking_1 (1,709,849 samples, 1.51%)</title><rect x="15.2774%" y="213" width="1.5149%" height="15" fill="rgb(233,36,39)"/><text x="15.5274%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (382,105 samples, 0.34%)</title><rect x="16.7947%" y="197" width="0.3385%" height="15" fill="rgb(226,3,54)"/><text x="17.0447%" y="207.50"></text></g><g><title>check_mod_liveness (301,395 samples, 0.27%)</title><rect x="16.8662%" y="181" width="0.2670%" height="15" fill="rgb(245,192,40)"/><text x="17.1162%" y="191.50"></text></g><g><title>mir_promoted (265,653 samples, 0.24%)</title><rect x="19.5609%" y="69" width="0.2354%" height="15" fill="rgb(238,167,29)"/><text x="19.8109%" y="79.50"></text></g><g><title>mir_const_qualif (190,662 samples, 0.17%)</title><rect x="19.6274%" y="53" width="0.1689%" height="15" fill="rgb(232,182,51)"/><text x="19.8774%" y="63.50"></text></g><g><title>mir_const (157,092 samples, 0.14%)</title><rect x="19.6571%" y="37" width="0.1392%" height="15" fill="rgb(231,60,39)"/><text x="19.9071%" y="47.50"></text></g><g><title>mir_borrowck (1,213,744 samples, 1.08%)</title><rect x="18.7491%" y="85" width="1.0754%" height="15" fill="rgb(208,69,12)"/><text x="18.9991%" y="95.50"></text></g><g><title>mir_for_ctfe (1,911,662 samples, 1.69%)</title><rect x="18.1354%" y="117" width="1.6937%" height="15" fill="rgb(235,93,37)"/><text x="18.3854%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,615,809 samples, 1.43%)</title><rect x="18.3975%" y="101" width="1.4316%" height="15" fill="rgb(213,116,39)"/><text x="18.6475%" y="111.50"></text></g><g><title>mir_for_ctfe (161,662 samples, 0.14%)</title><rect x="19.9364%" y="53" width="0.1432%" height="15" fill="rgb(222,207,29)"/><text x="20.1864%" y="63.50"></text></g><g><title>eval_to_const_value_raw (268,402 samples, 0.24%)</title><rect x="19.8435%" y="101" width="0.2378%" height="15" fill="rgb(206,96,30)"/><text x="20.0935%" y="111.50"></text></g><g><title>eval_to_const_value_raw (266,102 samples, 0.24%)</title><rect x="19.8455%" y="85" width="0.2358%" height="15" fill="rgb(218,138,4)"/><text x="20.0955%" y="95.50"></text></g><g><title>eval_to_allocation_raw (261,022 samples, 0.23%)</title><rect x="19.8500%" y="69" width="0.2313%" height="15" fill="rgb(250,191,14)"/><text x="20.1000%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,704,468 samples, 2.40%)</title><rect x="17.6894%" y="165" width="2.3961%" height="15" fill="rgb(239,60,40)"/><text x="17.9394%" y="175.50">ev..</text></g><g><title>eval_to_const_value_raw (2,686,968 samples, 2.38%)</title><rect x="17.7049%" y="149" width="2.3806%" height="15" fill="rgb(206,27,48)"/><text x="17.9549%" y="159.50">ev..</text></g><g><title>eval_to_allocation_raw (2,659,908 samples, 2.36%)</title><rect x="17.7288%" y="133" width="2.3567%" height="15" fill="rgb(225,35,8)"/><text x="17.9788%" y="143.50">e..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (284,013 samples, 0.25%)</title><rect x="19.8339%" y="117" width="0.2516%" height="15" fill="rgb(250,213,24)"/><text x="20.0839%" y="127.50"></text></g><g><title>mir_const (459,384 samples, 0.41%)</title><rect x="20.3555%" y="149" width="0.4070%" height="15" fill="rgb(247,123,22)"/><text x="20.6055%" y="159.50"></text></g><g><title>unsafety_check_result (312,372 samples, 0.28%)</title><rect x="20.4858%" y="133" width="0.2768%" height="15" fill="rgb(231,138,38)"/><text x="20.7358%" y="143.50"></text></g><g><title>mir_built (204,182 samples, 0.18%)</title><rect x="20.5816%" y="117" width="0.1809%" height="15" fill="rgb(231,145,46)"/><text x="20.8316%" y="127.50"></text></g><g><title>mir_const_qualif (749,078 samples, 0.66%)</title><rect x="20.1034%" y="165" width="0.6637%" height="15" fill="rgb(251,118,11)"/><text x="20.3534%" y="175.50"></text></g><g><title>misc_checking_2 (4,576,281 samples, 4.05%)</title><rect x="16.7923%" y="213" width="4.0545%" height="15" fill="rgb(217,147,25)"/><text x="17.0423%" y="223.50">misc..</text></g><g><title>match_checking (4,191,466 samples, 3.71%)</title><rect x="17.1333%" y="197" width="3.7136%" height="15" fill="rgb(247,81,37)"/><text x="17.3833%" y="207.50">matc..</text></g><g><title>check_match (4,159,826 samples, 3.69%)</title><rect x="17.1613%" y="181" width="3.6856%" height="15" fill="rgb(209,12,38)"/><text x="17.4113%" y="191.50">chec..</text></g><g><title>check_private_in_public (142,761 samples, 0.13%)</title><rect x="20.8547%" y="197" width="0.1265%" height="15" fill="rgb(227,1,9)"/><text x="21.1047%" y="207.50"></text></g><g><title>death_checking (358,374 samples, 0.32%)</title><rect x="20.9812%" y="197" width="0.3175%" height="15" fill="rgb(248,47,43)"/><text x="21.2312%" y="207.50"></text></g><g><title>eval_to_allocation_raw (262,572 samples, 0.23%)</title><rect x="21.8009%" y="165" width="0.2326%" height="15" fill="rgb(221,10,30)"/><text x="22.0509%" y="175.50"></text></g><g><title>eval_to_allocation_raw (260,562 samples, 0.23%)</title><rect x="21.8026%" y="149" width="0.2309%" height="15" fill="rgb(210,229,1)"/><text x="22.0526%" y="159.50"></text></g><g><title>param_env (244,944 samples, 0.22%)</title><rect x="22.1130%" y="165" width="0.2170%" height="15" fill="rgb(222,148,37)"/><text x="22.3630%" y="175.50"></text></g><g><title>predicates_of (118,611 samples, 0.11%)</title><rect x="22.2249%" y="149" width="0.1051%" height="15" fill="rgb(234,67,33)"/><text x="22.4749%" y="159.50"></text></g><g><title>crate_lints (1,522,637 samples, 1.35%)</title><rect x="21.3002%" y="181" width="1.3490%" height="15" fill="rgb(247,98,35)"/><text x="21.5502%" y="191.50"></text></g><g><title>type_of (353,692 samples, 0.31%)</title><rect x="22.3359%" y="165" width="0.3134%" height="15" fill="rgb(247,138,52)"/><text x="22.5859%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (266,960 samples, 0.24%)</title><rect x="22.4127%" y="149" width="0.2365%" height="15" fill="rgb(213,79,30)"/><text x="22.6627%" y="159.50"></text></g><g><title>lint_checking (1,827,081 samples, 1.62%)</title><rect x="21.2987%" y="197" width="1.6188%" height="15" fill="rgb(246,177,23)"/><text x="21.5487%" y="207.50"></text></g><g><title>module_lints (302,694 samples, 0.27%)</title><rect x="22.6493%" y="181" width="0.2682%" height="15" fill="rgb(230,62,27)"/><text x="22.8993%" y="191.50"></text></g><g><title>lint_mod (297,443 samples, 0.26%)</title><rect x="22.6539%" y="165" width="0.2635%" height="15" fill="rgb(216,154,8)"/><text x="22.9039%" y="175.50"></text></g><g><title>privacy_access_levels (137,611 samples, 0.12%)</title><rect x="22.9174%" y="197" width="0.1219%" height="15" fill="rgb(244,35,45)"/><text x="23.1674%" y="207.50"></text></g><g><title>privacy_checking_modules (508,045 samples, 0.45%)</title><rect x="23.0394%" y="197" width="0.4501%" height="15" fill="rgb(251,115,12)"/><text x="23.2894%" y="207.50"></text></g><g><title>check_mod_privacy (503,175 samples, 0.45%)</title><rect x="23.0437%" y="181" width="0.4458%" height="15" fill="rgb(240,54,50)"/><text x="23.2937%" y="191.50"></text></g><g><title>misc_checking_3 (2,995,143 samples, 2.65%)</title><rect x="20.8469%" y="213" width="2.6537%" height="15" fill="rgb(233,84,52)"/><text x="21.0969%" y="223.50">mi..</text></g><g><title>impl_parent (1,154,784 samples, 1.02%)</title><rect x="25.2330%" y="149" width="1.0231%" height="15" fill="rgb(207,117,47)"/><text x="25.4830%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (516,117 samples, 0.46%)</title><rect x="25.7988%" y="133" width="0.4573%" height="15" fill="rgb(249,43,39)"/><text x="26.0488%" y="143.50"></text></g><g><title>impl_trait_ref (1,906,490 samples, 1.69%)</title><rect x="26.2561%" y="149" width="1.6891%" height="15" fill="rgb(209,38,44)"/><text x="26.5061%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,487,967 samples, 1.32%)</title><rect x="26.6269%" y="133" width="1.3183%" height="15" fill="rgb(236,212,23)"/><text x="26.8769%" y="143.50"></text></g><g><title>trait_impls_of (327,245 samples, 0.29%)</title><rect x="27.9563%" y="149" width="0.2899%" height="15" fill="rgb(242,79,21)"/><text x="28.2063%" y="159.50"></text></g><g><title>coherent_trait (5,276,859 samples, 4.68%)</title><rect x="23.5716%" y="181" width="4.6752%" height="15" fill="rgb(211,96,35)"/><text x="23.8216%" y="191.50">coher..</text></g><g><title>specialization_graph_of (5,077,007 samples, 4.50%)</title><rect x="23.7487%" y="165" width="4.4982%" height="15" fill="rgb(253,215,40)"/><text x="23.9987%" y="175.50">speci..</text></g><g><title>coherence_checking (5,343,250 samples, 4.73%)</title><rect x="23.5563%" y="197" width="4.7341%" height="15" fill="rgb(211,81,21)"/><text x="23.8063%" y="207.50">cohere..</text></g><g><title>associated_item (601,226 samples, 0.53%)</title><rect x="36.6998%" y="133" width="0.5327%" height="15" fill="rgb(208,190,38)"/><text x="36.9498%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (318,633 samples, 0.28%)</title><rect x="36.9502%" y="117" width="0.2823%" height="15" fill="rgb(235,213,38)"/><text x="37.2002%" y="127.50"></text></g><g><title>associated_items (726,517 samples, 0.64%)</title><rect x="36.6050%" y="149" width="0.6437%" height="15" fill="rgb(237,122,38)"/><text x="36.8550%" y="159.50"></text></g><g><title>dropck_outlives (159,241 samples, 0.14%)</title><rect x="37.2887%" y="149" width="0.1411%" height="15" fill="rgb(244,218,35)"/><text x="37.5387%" y="159.50"></text></g><g><title>generics_of (696,760 samples, 0.62%)</title><rect x="40.1805%" y="133" width="0.6173%" height="15" fill="rgb(240,68,47)"/><text x="40.4305%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (508,227 samples, 0.45%)</title><rect x="40.3476%" y="117" width="0.4503%" height="15" fill="rgb(210,16,53)"/><text x="40.5976%" y="127.50"></text></g><g><title>impl_polarity (129,703 samples, 0.11%)</title><rect x="40.8251%" y="133" width="0.1149%" height="15" fill="rgb(235,124,12)"/><text x="41.0751%" y="143.50"></text></g><g><title>impl_trait_ref (940,521 samples, 0.83%)</title><rect x="40.9401%" y="133" width="0.8333%" height="15" fill="rgb(224,169,11)"/><text x="41.1901%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (762,780 samples, 0.68%)</title><rect x="41.0975%" y="117" width="0.6758%" height="15" fill="rgb(250,166,2)"/><text x="41.3475%" y="127.50"></text></g><g><title>opt_def_kind (145,812 samples, 0.13%)</title><rect x="41.9738%" y="117" width="0.1292%" height="15" fill="rgb(242,216,29)"/><text x="42.2238%" y="127.50"></text></g><g><title>explicit_predicates_of (135,450 samples, 0.12%)</title><rect x="42.2592%" y="101" width="0.1200%" height="15" fill="rgb(230,116,27)"/><text x="42.5092%" y="111.50"></text></g><g><title>predicates_of (756,708 samples, 0.67%)</title><rect x="41.8100%" y="133" width="0.6704%" height="15" fill="rgb(228,99,48)"/><text x="42.0600%" y="143.50"></text></g><g><title>predicates_defined_on (426,014 samples, 0.38%)</title><rect x="42.1030%" y="117" width="0.3774%" height="15" fill="rgb(253,11,6)"/><text x="42.3530%" y="127.50"></text></g><g><title>inferred_outlives_of (114,253 samples, 0.10%)</title><rect x="42.3792%" y="101" width="0.1012%" height="15" fill="rgb(247,143,39)"/><text x="42.6292%" y="111.50"></text></g><g><title>specializes (2,069,866 samples, 1.83%)</title><rect x="42.4805%" y="133" width="1.8339%" height="15" fill="rgb(236,97,10)"/><text x="42.7305%" y="143.50">s..</text></g><g><title>param_env (1,218,142 samples, 1.08%)</title><rect x="43.2351%" y="117" width="1.0793%" height="15" fill="rgb(233,208,19)"/><text x="43.4851%" y="127.50"></text></g><g><title>def_span (577,794 samples, 0.51%)</title><rect x="43.8024%" y="101" width="0.5119%" height="15" fill="rgb(216,164,2)"/><text x="44.0524%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (515,853 samples, 0.46%)</title><rect x="43.8573%" y="85" width="0.4570%" height="15" fill="rgb(220,129,5)"/><text x="44.1073%" y="95.50"></text></g><g><title>trait_impls_of (178,551 samples, 0.16%)</title><rect x="44.3194%" y="133" width="0.1582%" height="15" fill="rgb(242,17,10)"/><text x="44.5694%" y="143.50"></text></g><g><title>evaluate_obligation (7,974,631 samples, 7.07%)</title><rect x="37.4298%" y="149" width="7.0654%" height="15" fill="rgb(242,107,0)"/><text x="37.6798%" y="159.50">evaluate_..</text></g><g><title>fn_sig (118,393 samples, 0.10%)</title><rect x="44.5137%" y="149" width="0.1049%" height="15" fill="rgb(251,28,31)"/><text x="44.7637%" y="159.50"></text></g><g><title>lint_levels (155,512 samples, 0.14%)</title><rect x="44.8181%" y="149" width="0.1378%" height="15" fill="rgb(233,223,10)"/><text x="45.0681%" y="159.50"></text></g><g><title>method_autoderef_steps (141,971 samples, 0.13%)</title><rect x="45.0081%" y="149" width="0.1258%" height="15" fill="rgb(215,21,27)"/><text x="45.2581%" y="159.50"></text></g><g><title>object_safety_violations (118,561 samples, 0.11%)</title><rect x="45.1339%" y="149" width="0.1050%" height="15" fill="rgb(232,23,21)"/><text x="45.3839%" y="159.50"></text></g><g><title>predicates_of (328,655 samples, 0.29%)</title><rect x="45.2887%" y="149" width="0.2912%" height="15" fill="rgb(244,5,23)"/><text x="45.5387%" y="159.50"></text></g><g><title>predicates_defined_on (228,433 samples, 0.20%)</title><rect x="45.3775%" y="133" width="0.2024%" height="15" fill="rgb(226,81,46)"/><text x="45.6275%" y="143.50"></text></g><g><title>specializes (154,271 samples, 0.14%)</title><rect x="45.5892%" y="149" width="0.1367%" height="15" fill="rgb(247,70,30)"/><text x="45.8392%" y="159.50"></text></g><g><title>associated_item (144,583 samples, 0.13%)</title><rect x="50.6857%" y="117" width="0.1281%" height="15" fill="rgb(212,68,19)"/><text x="50.9357%" y="127.50"></text></g><g><title>associated_items (226,093 samples, 0.20%)</title><rect x="50.6281%" y="133" width="0.2003%" height="15" fill="rgb(240,187,13)"/><text x="50.8781%" y="143.50"></text></g><g><title>dropck_outlives (132,792 samples, 0.12%)</title><rect x="50.8526%" y="133" width="0.1177%" height="15" fill="rgb(223,113,26)"/><text x="51.1026%" y="143.50"></text></g><g><title>evaluate_obligation (635,437 samples, 0.56%)</title><rect x="50.9702%" y="133" width="0.5630%" height="15" fill="rgb(206,192,2)"/><text x="51.2202%" y="143.50"></text></g><g><title>is_copy_raw (176,991 samples, 0.16%)</title><rect x="51.7447%" y="133" width="0.1568%" height="15" fill="rgb(241,108,4)"/><text x="51.9947%" y="143.50"></text></g><g><title>evaluate_obligation (143,621 samples, 0.13%)</title><rect x="51.7743%" y="117" width="0.1272%" height="15" fill="rgb(247,173,49)"/><text x="52.0243%" y="127.50"></text></g><g><title>predicates_of (197,324 samples, 0.17%)</title><rect x="52.0914%" y="133" width="0.1748%" height="15" fill="rgb(224,114,35)"/><text x="52.3414%" y="143.50"></text></g><g><title>predicates_defined_on (124,902 samples, 0.11%)</title><rect x="52.1556%" y="117" width="0.1107%" height="15" fill="rgb(245,159,27)"/><text x="52.4056%" y="127.50"></text></g><g><title>typeck (7,394,563 samples, 6.55%)</title><rect x="45.8026%" y="149" width="6.5515%" height="15" fill="rgb(245,172,44)"/><text x="46.0526%" y="159.50">typeck</text></g><g><title>item_bodies_checking (27,166,422 samples, 24.07%)</title><rect x="28.3201%" y="197" width="24.0692%" height="15" fill="rgb(236,23,11)"/><text x="28.5701%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (27,163,452 samples, 24.07%)</title><rect x="28.3227%" y="181" width="24.0665%" height="15" fill="rgb(205,117,38)"/><text x="28.5727%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (27,105,011 samples, 24.01%)</title><rect x="28.3745%" y="165" width="24.0148%" height="15" fill="rgb(237,72,25)"/><text x="28.6245%" y="175.50">typeck</text></g><g><title>eval_to_const_value_raw (156,472 samples, 0.14%)</title><rect x="52.7729%" y="85" width="0.1386%" height="15" fill="rgb(244,70,9)"/><text x="53.0229%" y="95.50"></text></g><g><title>eval_to_const_value_raw (146,372 samples, 0.13%)</title><rect x="52.7818%" y="69" width="0.1297%" height="15" fill="rgb(217,125,39)"/><text x="53.0318%" y="79.50"></text></g><g><title>eval_to_allocation_raw (144,732 samples, 0.13%)</title><rect x="52.7833%" y="53" width="0.1282%" height="15" fill="rgb(235,36,10)"/><text x="53.0333%" y="63.50"></text></g><g><title>layout_of (199,922 samples, 0.18%)</title><rect x="52.7390%" y="117" width="0.1771%" height="15" fill="rgb(251,123,47)"/><text x="52.9890%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (189,722 samples, 0.17%)</title><rect x="52.7480%" y="101" width="0.1681%" height="15" fill="rgb(221,13,13)"/><text x="52.9980%" y="111.50"></text></g><g><title>layout_of (219,122 samples, 0.19%)</title><rect x="52.7271%" y="133" width="0.1941%" height="15" fill="rgb(238,131,9)"/><text x="52.9771%" y="143.50"></text></g><g><title>layout_of (250,783 samples, 0.22%)</title><rect x="52.7030%" y="149" width="0.2222%" height="15" fill="rgb(211,50,8)"/><text x="52.9530%" y="159.50"></text></g><g><title>layout_of (290,733 samples, 0.26%)</title><rect x="52.6699%" y="165" width="0.2576%" height="15" fill="rgb(245,182,24)"/><text x="52.9199%" y="175.50"></text></g><g><title>item_types_checking (1,114,243 samples, 0.99%)</title><rect x="52.3892%" y="197" width="0.9872%" height="15" fill="rgb(242,14,37)"/><text x="52.6392%" y="207.50"></text></g><g><title>check_mod_item_types (1,109,163 samples, 0.98%)</title><rect x="52.3937%" y="181" width="0.9827%" height="15" fill="rgb(246,228,12)"/><text x="52.6437%" y="191.50"></text></g><g><title>typeck (490,856 samples, 0.43%)</title><rect x="52.9415%" y="165" width="0.4349%" height="15" fill="rgb(213,55,15)"/><text x="53.1915%" y="175.50"></text></g><g><title>fn_sig (342,704 samples, 0.30%)</title><rect x="53.5588%" y="165" width="0.3036%" height="15" fill="rgb(209,9,3)"/><text x="53.8088%" y="175.50"></text></g><g><title>named_region_map (186,981 samples, 0.17%)</title><rect x="53.9423%" y="149" width="0.1657%" height="15" fill="rgb(230,59,30)"/><text x="54.1923%" y="159.50"></text></g><g><title>resolve_lifetimes (165,750 samples, 0.15%)</title><rect x="53.9611%" y="133" width="0.1469%" height="15" fill="rgb(209,121,21)"/><text x="54.2111%" y="143.50"></text></g><g><title>generics_of (289,192 samples, 0.26%)</title><rect x="53.8624%" y="165" width="0.2562%" height="15" fill="rgb(220,109,13)"/><text x="54.1124%" y="175.50"></text></g><g><title>explicit_predicates_of (249,822 samples, 0.22%)</title><rect x="54.2375%" y="133" width="0.2213%" height="15" fill="rgb(232,18,1)"/><text x="54.4875%" y="143.50"></text></g><g><title>predicates_of (487,975 samples, 0.43%)</title><rect x="54.1580%" y="165" width="0.4323%" height="15" fill="rgb(215,41,42)"/><text x="54.4080%" y="175.50"></text></g><g><title>predicates_defined_on (455,695 samples, 0.40%)</title><rect x="54.1866%" y="149" width="0.4037%" height="15" fill="rgb(224,123,36)"/><text x="54.4366%" y="159.50"></text></g><g><title>inferred_outlives_of (148,432 samples, 0.13%)</title><rect x="54.4588%" y="133" width="0.1315%" height="15" fill="rgb(240,125,3)"/><text x="54.7088%" y="143.50"></text></g><g><title>inferred_outlives_crate (129,892 samples, 0.12%)</title><rect x="54.4752%" y="117" width="0.1151%" height="15" fill="rgb(205,98,50)"/><text x="54.7252%" y="127.50"></text></g><g><title>type_collecting (1,414,456 samples, 1.25%)</title><rect x="53.3788%" y="197" width="1.2532%" height="15" fill="rgb(205,185,37)"/><text x="53.6288%" y="207.50"></text></g><g><title>collect_mod_item_types (1,396,906 samples, 1.24%)</title><rect x="53.3943%" y="181" width="1.2376%" height="15" fill="rgb(238,207,15)"/><text x="53.6443%" y="191.50"></text></g><g><title>evaluate_obligation (228,442 samples, 0.20%)</title><rect x="55.2735%" y="165" width="0.2024%" height="15" fill="rgb(213,199,42)"/><text x="55.5235%" y="175.50"></text></g><g><title>region_scope_tree (128,420 samples, 0.11%)</title><rect x="55.6807%" y="165" width="0.1138%" height="15" fill="rgb(235,201,11)"/><text x="55.9307%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,202,302 samples, 1.07%)</title><rect x="54.7357%" y="181" width="1.0652%" height="15" fill="rgb(207,46,11)"/><text x="54.9857%" y="191.50"></text></g><g><title>evaluate_obligation (249,393 samples, 0.22%)</title><rect x="56.4448%" y="165" width="0.2210%" height="15" fill="rgb(241,35,35)"/><text x="56.6948%" y="175.50"></text></g><g><title>param_env (160,700 samples, 0.14%)</title><rect x="56.7389%" y="165" width="0.1424%" height="15" fill="rgb(243,32,47)"/><text x="56.9889%" y="175.50"></text></g><g><title>region_scope_tree (159,271 samples, 0.14%)</title><rect x="56.9344%" y="165" width="0.1411%" height="15" fill="rgb(247,202,23)"/><text x="57.1844%" y="175.50"></text></g><g><title>analysis (63,662,559 samples, 56.40%)</title><rect x="0.7221%" y="229" width="56.4044%" height="15" fill="rgb(219,102,11)"/><text x="0.9721%" y="239.50">analysis</text></g><g><title>type_check_crate (37,952,933 samples, 33.63%)</title><rect x="23.5005%" y="213" width="33.6259%" height="15" fill="rgb(243,110,44)"/><text x="23.7505%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,810,651 samples, 2.49%)</title><rect x="54.6363%" y="197" width="2.4902%" height="15" fill="rgb(222,74,54)"/><text x="54.8863%" y="207.50">wf..</text></g><g><title>check_item_well_formed (1,496,146 samples, 1.33%)</title><rect x="55.8009%" y="181" width="1.3256%" height="15" fill="rgb(216,99,12)"/><text x="56.0509%" y="191.50"></text></g><g><title>codegen_crate (266,003 samples, 0.24%)</title><rect x="57.1348%" y="229" width="0.2357%" height="15" fill="rgb(226,22,26)"/><text x="57.3848%" y="239.50"></text></g><g><title>AST_validation (226,813 samples, 0.20%)</title><rect x="57.5383%" y="213" width="0.2010%" height="15" fill="rgb(217,163,10)"/><text x="57.7883%" y="223.50"></text></g><g><title>crate_injection (116,561 samples, 0.10%)</title><rect x="57.8290%" y="213" width="0.1033%" height="15" fill="rgb(213,25,53)"/><text x="58.0790%" y="223.50"></text></g><g><title>metadata_load_macro (359,511 samples, 0.32%)</title><rect x="87.4485%" y="181" width="0.3185%" height="15" fill="rgb(252,105,26)"/><text x="87.6985%" y="191.50"></text></g><g><title>metadata_register_crate (217,502 samples, 0.19%)</title><rect x="87.7671%" y="181" width="0.1927%" height="15" fill="rgb(220,39,43)"/><text x="88.0171%" y="191.50"></text></g><g><title>macro_expand_crate (34,180,421 samples, 30.28%)</title><rect x="57.9323%" y="213" width="30.2835%" height="15" fill="rgb(229,68,48)"/><text x="58.1823%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (34,164,861 samples, 30.27%)</title><rect x="57.9460%" y="197" width="30.2697%" height="15" fill="rgb(252,8,32)"/><text x="58.1960%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (288,953 samples, 0.26%)</title><rect x="87.9598%" y="181" width="0.2560%" height="15" fill="rgb(223,20,43)"/><text x="88.2098%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (134,951 samples, 0.12%)</title><rect x="88.2208%" y="213" width="0.1196%" height="15" fill="rgb(229,81,49)"/><text x="88.4708%" y="223.50"></text></g><g><title>finalize_macro_resolutions (257,403 samples, 0.23%)</title><rect x="88.4415%" y="197" width="0.2281%" height="15" fill="rgb(236,28,36)"/><text x="88.6915%" y="207.50"></text></g><g><title>late_resolve_crate (2,228,475 samples, 1.97%)</title><rect x="88.6695%" y="197" width="1.9744%" height="15" fill="rgb(249,185,26)"/><text x="88.9195%" y="207.50">l..</text></g><g><title>configure_and_expand (37,726,661 samples, 33.43%)</title><rect x="57.3705%" y="229" width="33.4254%" height="15" fill="rgb(249,174,33)"/><text x="57.6205%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,771,581 samples, 2.46%)</title><rect x="88.3403%" y="213" width="2.4556%" height="15" fill="rgb(233,201,37)"/><text x="88.5903%" y="223.50">re..</text></g><g><title>drop_ast (241,523 samples, 0.21%)</title><rect x="90.7959%" y="229" width="0.2140%" height="15" fill="rgb(221,78,26)"/><text x="91.0459%" y="239.50"></text></g><g><title>early_lint_checks (484,225 samples, 0.43%)</title><rect x="91.0298%" y="229" width="0.4290%" height="15" fill="rgb(250,127,30)"/><text x="91.2798%" y="239.50"></text></g><g><title>free_global_ctxt (2,385,297 samples, 2.11%)</title><rect x="91.4588%" y="229" width="2.1133%" height="15" fill="rgb(230,49,44)"/><text x="91.7088%" y="239.50">f..</text></g><g><title>mir_for_ctfe (114,791 samples, 0.10%)</title><rect x="94.2935%" y="213" width="0.1017%" height="15" fill="rgb(229,67,23)"/><text x="94.5435%" y="223.50"></text></g><g><title>generate_crate_metadata (974,021 samples, 0.86%)</title><rect x="93.5722%" y="229" width="0.8630%" height="15" fill="rgb(249,83,47)"/><text x="93.8222%" y="239.50"></text></g><g><title>hir_lowering (3,542,369 samples, 3.14%)</title><rect x="94.4351%" y="229" width="3.1385%" height="15" fill="rgb(215,43,3)"/><text x="94.6851%" y="239.50">hir..</text></g><g><title>parse_crate (1,100,882 samples, 0.98%)</title><rect x="97.6143%" y="229" width="0.9754%" height="15" fill="rgb(238,154,13)"/><text x="97.8643%" y="239.50"></text></g><g><title>prepare_outputs (295,933 samples, 0.26%)</title><rect x="98.5970%" y="229" width="0.2622%" height="15" fill="rgb(219,56,2)"/><text x="98.8470%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (821,969 samples, 0.73%)</title><rect x="98.8592%" y="229" width="0.7283%" height="15" fill="rgb(233,0,4)"/><text x="99.1092%" y="239.50"></text></g><g><title>setup_global_ctxt (125,252 samples, 0.11%)</title><rect x="99.5967%" y="229" width="0.1110%" height="15" fill="rgb(235,30,7)"/><text x="99.8467%" y="239.50"></text></g><g><title>all (112,868,088 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (112,868,088 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (329,904 samples, 0.29%)</title><rect x="99.7077%" y="229" width="0.2923%" height="15" fill="rgb(228,22,38)"/><text x="99.9577%" y="239.50"></text></g></svg></svg>