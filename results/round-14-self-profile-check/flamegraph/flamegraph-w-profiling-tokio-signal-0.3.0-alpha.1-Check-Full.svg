<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (146,832 samples, 0.14%)</title><rect x="9.6906%" y="197" width="0.1406%" height="15" fill="rgb(227,0,7)"/><text x="9.9406%" y="207.50"></text></g><g><title>param_env (366,287 samples, 0.35%)</title><rect x="11.2488%" y="165" width="0.3506%" height="15" fill="rgb(217,0,24)"/><text x="11.4988%" y="175.50"></text></g><g><title>item_attrs (297,042 samples, 0.28%)</title><rect x="12.0936%" y="133" width="0.2844%" height="15" fill="rgb(221,193,54)"/><text x="12.3436%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (278,992 samples, 0.27%)</title><rect x="12.1109%" y="117" width="0.2671%" height="15" fill="rgb(248,212,6)"/><text x="12.3609%" y="127.50"></text></g><g><title>codegen_fn_attrs (437,143 samples, 0.42%)</title><rect x="11.9817%" y="149" width="0.4185%" height="15" fill="rgb(208,68,35)"/><text x="12.2317%" y="159.50"></text></g><g><title>adt_drop_tys (115,312 samples, 0.11%)</title><rect x="14.4786%" y="101" width="0.1104%" height="15" fill="rgb(232,128,0)"/><text x="14.7286%" y="111.50"></text></g><g><title>is_copy_raw (182,171 samples, 0.17%)</title><rect x="14.5889%" y="101" width="0.1744%" height="15" fill="rgb(207,160,47)"/><text x="14.8389%" y="111.50"></text></g><g><title>evaluate_obligation (145,181 samples, 0.14%)</title><rect x="14.6244%" y="85" width="0.1390%" height="15" fill="rgb(228,23,34)"/><text x="14.8744%" y="95.50"></text></g><g><title>param_env (159,090 samples, 0.15%)</title><rect x="14.7633%" y="101" width="0.1523%" height="15" fill="rgb(218,30,26)"/><text x="15.0133%" y="111.50"></text></g><g><title>adt_drop_tys (504,554 samples, 0.48%)</title><rect x="14.4339%" y="117" width="0.4830%" height="15" fill="rgb(220,122,19)"/><text x="14.6839%" y="127.50"></text></g><g><title>needs_drop_raw (1,478,566 samples, 1.42%)</title><rect x="14.3061%" y="133" width="1.4154%" height="15" fill="rgb(250,228,42)"/><text x="14.5561%" y="143.50"></text></g><g><title>is_copy_raw (840,460 samples, 0.80%)</title><rect x="14.9169%" y="117" width="0.8046%" height="15" fill="rgb(240,193,28)"/><text x="15.1669%" y="127.50"></text></g><g><title>evaluate_obligation (689,418 samples, 0.66%)</title><rect x="15.0615%" y="101" width="0.6600%" height="15" fill="rgb(216,20,37)"/><text x="15.3115%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (522,178 samples, 0.50%)</title><rect x="15.9730%" y="117" width="0.4999%" height="15" fill="rgb(206,188,39)"/><text x="16.2230%" y="127.50"></text></g><g><title>impl_parent (219,942 samples, 0.21%)</title><rect x="16.8494%" y="101" width="0.2106%" height="15" fill="rgb(217,207,13)"/><text x="17.0994%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (149,581 samples, 0.14%)</title><rect x="16.9168%" y="85" width="0.1432%" height="15" fill="rgb(231,73,38)"/><text x="17.1668%" y="95.50"></text></g><g><title>specialization_graph_of (1,084,282 samples, 1.04%)</title><rect x="16.5299%" y="117" width="1.0380%" height="15" fill="rgb(225,20,46)"/><text x="16.7799%" y="127.50"></text></g><g><title>impl_trait_ref (530,604 samples, 0.51%)</title><rect x="17.0600%" y="101" width="0.5079%" height="15" fill="rgb(210,31,41)"/><text x="17.3100%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (462,873 samples, 0.44%)</title><rect x="17.1248%" y="85" width="0.4431%" height="15" fill="rgb(221,200,47)"/><text x="17.3748%" y="95.50"></text></g><g><title>resolve_instance (2,013,852 samples, 1.93%)</title><rect x="15.7215%" y="133" width="1.9279%" height="15" fill="rgb(226,26,5)"/><text x="15.9715%" y="143.50">r..</text></g><g><title>thir_body (759,287 samples, 0.73%)</title><rect x="17.6750%" y="133" width="0.7269%" height="15" fill="rgb(249,33,26)"/><text x="17.9250%" y="143.50"></text></g><g><title>mir_const (8,177,298 samples, 7.83%)</title><rect x="10.5896%" y="181" width="7.8282%" height="15" fill="rgb(235,183,28)"/><text x="10.8396%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (7,122,422 samples, 6.82%)</title><rect x="11.5994%" y="165" width="6.8183%" height="15" fill="rgb(221,5,38)"/><text x="11.8494%" y="175.50">unsafety_..</text></g><g><title>mir_built (6,286,006 samples, 6.02%)</title><rect x="12.4001%" y="149" width="6.0176%" height="15" fill="rgb(247,18,42)"/><text x="12.6501%" y="159.50">mir_built</text></g><g><title>has_structural_eq_impls (229,112 samples, 0.22%)</title><rect x="18.5960%" y="165" width="0.2193%" height="15" fill="rgb(241,131,45)"/><text x="18.8460%" y="175.50"></text></g><g><title>evaluate_obligation (209,972 samples, 0.20%)</title><rect x="18.6143%" y="149" width="0.2010%" height="15" fill="rgb(249,31,29)"/><text x="18.8643%" y="159.50"></text></g><g><title>trait_impls_of (183,622 samples, 0.18%)</title><rect x="18.6396%" y="133" width="0.1758%" height="15" fill="rgb(225,111,53)"/><text x="18.8896%" y="143.50"></text></g><g><title>mir_const_qualif (635,898 samples, 0.61%)</title><rect x="18.4178%" y="181" width="0.6087%" height="15" fill="rgb(238,160,17)"/><text x="18.6678%" y="191.50"></text></g><g><title>mir_promoted (9,513,094 samples, 9.11%)</title><rect x="9.9207%" y="197" width="9.1069%" height="15" fill="rgb(214,148,48)"/><text x="10.1707%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (535,977 samples, 0.51%)</title><rect x="19.0279%" y="197" width="0.5131%" height="15" fill="rgb(232,36,49)"/><text x="19.2779%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (600,824 samples, 0.58%)</title><rect x="19.5410%" y="197" width="0.5752%" height="15" fill="rgb(209,103,24)"/><text x="19.7910%" y="207.50"></text></g><g><title>normalize_projection_ty (391,672 samples, 0.37%)</title><rect x="19.7412%" y="181" width="0.3749%" height="15" fill="rgb(229,88,8)"/><text x="19.9912%" y="191.50"></text></g><g><title>type_op_normalize_predicate (369,425 samples, 0.35%)</title><rect x="20.1162%" y="197" width="0.3537%" height="15" fill="rgb(213,181,19)"/><text x="20.3662%" y="207.50"></text></g><g><title>normalize_projection_ty (236,413 samples, 0.23%)</title><rect x="20.2435%" y="181" width="0.2263%" height="15" fill="rgb(254,191,54)"/><text x="20.4935%" y="191.50"></text></g><g><title>type_op_prove_predicate (2,461,539 samples, 2.36%)</title><rect x="20.5285%" y="197" width="2.3564%" height="15" fill="rgb(241,83,37)"/><text x="20.7785%" y="207.50">t..</text></g><g><title>MIR_borrow_checking (23,109,118 samples, 22.12%)</title><rect x="0.7765%" y="229" width="22.1225%" height="15" fill="rgb(233,36,39)"/><text x="1.0265%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (23,013,417 samples, 22.03%)</title><rect x="0.8681%" y="213" width="22.0309%" height="15" fill="rgb(226,3,54)"/><text x="1.1181%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (166,822 samples, 0.16%)</title><rect x="22.8990%" y="229" width="0.1597%" height="15" fill="rgb(245,192,40)"/><text x="23.1490%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (114,222 samples, 0.11%)</title><rect x="22.9494%" y="213" width="0.1093%" height="15" fill="rgb(238,167,29)"/><text x="23.1994%" y="223.50"></text></g><g><title>hir_module_items (167,152 samples, 0.16%)</title><rect x="23.0587%" y="229" width="0.1600%" height="15" fill="rgb(232,182,51)"/><text x="23.3087%" y="239.50"></text></g><g><title>codegen_fn_attrs (200,632 samples, 0.19%)</title><rect x="23.5403%" y="165" width="0.1921%" height="15" fill="rgb(231,60,39)"/><text x="23.7903%" y="175.50"></text></g><g><title>codegen_fn_attrs (339,074 samples, 0.32%)</title><rect x="23.4130%" y="197" width="0.3246%" height="15" fill="rgb(208,69,12)"/><text x="23.6630%" y="207.50"></text></g><g><title>should_inherit_track_caller (279,703 samples, 0.27%)</title><rect x="23.4699%" y="181" width="0.2678%" height="15" fill="rgb(235,93,37)"/><text x="23.7199%" y="191.50"></text></g><g><title>check_mod_attrs (517,586 samples, 0.50%)</title><rect x="23.2422%" y="213" width="0.4955%" height="15" fill="rgb(213,116,39)"/><text x="23.4922%" y="223.50"></text></g><g><title>lookup_deprecation_entry (145,681 samples, 0.14%)</title><rect x="24.0503%" y="197" width="0.1395%" height="15" fill="rgb(222,207,29)"/><text x="24.3003%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (418,496 samples, 0.40%)</title><rect x="23.8838%" y="213" width="0.4006%" height="15" fill="rgb(206,96,30)"/><text x="24.1338%" y="223.50"></text></g><g><title>misc_checking_1 (1,171,403 samples, 1.12%)</title><rect x="23.2193%" y="229" width="1.1214%" height="15" fill="rgb(218,138,4)"/><text x="23.4693%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (370,554 samples, 0.35%)</title><rect x="24.3422%" y="213" width="0.3547%" height="15" fill="rgb(250,191,14)"/><text x="24.5922%" y="223.50"></text></g><g><title>check_mod_liveness (296,164 samples, 0.28%)</title><rect x="24.4134%" y="197" width="0.2835%" height="15" fill="rgb(239,60,40)"/><text x="24.6634%" y="207.50"></text></g><g><title>misc_checking_2 (775,548 samples, 0.74%)</title><rect x="24.3407%" y="229" width="0.7424%" height="15" fill="rgb(206,27,48)"/><text x="24.5907%" y="239.50"></text></g><g><title>match_checking (403,424 samples, 0.39%)</title><rect x="24.6970%" y="213" width="0.3862%" height="15" fill="rgb(225,35,8)"/><text x="24.9470%" y="223.50"></text></g><g><title>check_match (378,974 samples, 0.36%)</title><rect x="24.7204%" y="197" width="0.3628%" height="15" fill="rgb(250,213,24)"/><text x="24.9704%" y="207.50"></text></g><g><title>check_private_in_public (187,942 samples, 0.18%)</title><rect x="25.0928%" y="213" width="0.1799%" height="15" fill="rgb(247,123,22)"/><text x="25.3428%" y="223.50"></text></g><g><title>death_checking (390,654 samples, 0.37%)</title><rect x="25.2727%" y="213" width="0.3740%" height="15" fill="rgb(231,138,38)"/><text x="25.5227%" y="223.50"></text></g><g><title>fn_abi_of_instance (124,151 samples, 0.12%)</title><rect x="26.9583%" y="85" width="0.1189%" height="15" fill="rgb(231,145,46)"/><text x="27.2083%" y="95.50"></text></g><g><title>eval_to_const_value_raw (258,023 samples, 0.25%)</title><rect x="27.1298%" y="69" width="0.2470%" height="15" fill="rgb(251,118,11)"/><text x="27.3798%" y="79.50"></text></g><g><title>eval_to_const_value_raw (257,153 samples, 0.25%)</title><rect x="27.1307%" y="53" width="0.2462%" height="15" fill="rgb(217,147,25)"/><text x="27.3807%" y="63.50"></text></g><g><title>eval_to_allocation_raw (255,183 samples, 0.24%)</title><rect x="27.1325%" y="37" width="0.2443%" height="15" fill="rgb(247,81,37)"/><text x="27.3825%" y="47.50"></text></g><g><title>eval_to_const_value_raw (495,166 samples, 0.47%)</title><rect x="26.9069%" y="133" width="0.4740%" height="15" fill="rgb(209,12,38)"/><text x="27.1569%" y="143.50"></text></g><g><title>eval_to_const_value_raw (494,076 samples, 0.47%)</title><rect x="26.9080%" y="117" width="0.4730%" height="15" fill="rgb(227,1,9)"/><text x="27.1580%" y="127.50"></text></g><g><title>eval_to_allocation_raw (492,546 samples, 0.47%)</title><rect x="26.9094%" y="101" width="0.4715%" height="15" fill="rgb(248,47,43)"/><text x="27.1594%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (265,623 samples, 0.25%)</title><rect x="27.1267%" y="85" width="0.2543%" height="15" fill="rgb(221,10,30)"/><text x="27.3767%" y="95.50"></text></g><g><title>eval_to_allocation_raw (657,388 samples, 0.63%)</title><rect x="26.7531%" y="181" width="0.6293%" height="15" fill="rgb(210,229,1)"/><text x="27.0031%" y="191.50"></text></g><g><title>eval_to_allocation_raw (646,258 samples, 0.62%)</title><rect x="26.7638%" y="165" width="0.6187%" height="15" fill="rgb(222,148,37)"/><text x="27.0138%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (505,156 samples, 0.48%)</title><rect x="26.8989%" y="149" width="0.4836%" height="15" fill="rgb(234,67,33)"/><text x="27.1489%" y="159.50"></text></g><g><title>param_env (404,994 samples, 0.39%)</title><rect x="27.4177%" y="181" width="0.3877%" height="15" fill="rgb(247,98,35)"/><text x="27.6677%" y="191.50"></text></g><g><title>predicates_of (202,432 samples, 0.19%)</title><rect x="27.6116%" y="165" width="0.1938%" height="15" fill="rgb(247,138,52)"/><text x="27.8616%" y="175.50"></text></g><g><title>predicates_defined_on (162,302 samples, 0.16%)</title><rect x="27.6501%" y="149" width="0.1554%" height="15" fill="rgb(213,79,30)"/><text x="27.9001%" y="159.50"></text></g><g><title>crate_lints (3,559,999 samples, 3.41%)</title><rect x="25.6485%" y="197" width="3.4080%" height="15" fill="rgb(246,177,23)"/><text x="25.8985%" y="207.50">cra..</text></g><g><title>type_of (1,296,835 samples, 1.24%)</title><rect x="27.8150%" y="181" width="1.2415%" height="15" fill="rgb(230,62,27)"/><text x="28.0650%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (994,201 samples, 0.95%)</title><rect x="28.1047%" y="165" width="0.9518%" height="15" fill="rgb(216,154,8)"/><text x="28.3547%" y="175.50"></text></g><g><title>lint_checking (3,857,983 samples, 3.69%)</title><rect x="25.6467%" y="213" width="3.6933%" height="15" fill="rgb(244,35,45)"/><text x="25.8967%" y="223.50">lint..</text></g><g><title>module_lints (296,154 samples, 0.28%)</title><rect x="29.0565%" y="197" width="0.2835%" height="15" fill="rgb(251,115,12)"/><text x="29.3065%" y="207.50"></text></g><g><title>lint_mod (291,104 samples, 0.28%)</title><rect x="29.0613%" y="181" width="0.2787%" height="15" fill="rgb(240,54,50)"/><text x="29.3113%" y="191.50"></text></g><g><title>privacy_access_levels (136,311 samples, 0.13%)</title><rect x="29.3400%" y="213" width="0.1305%" height="15" fill="rgb(233,84,52)"/><text x="29.5900%" y="223.50"></text></g><g><title>privacy_checking_modules (668,597 samples, 0.64%)</title><rect x="29.4705%" y="213" width="0.6401%" height="15" fill="rgb(207,117,47)"/><text x="29.7205%" y="223.50"></text></g><g><title>check_mod_privacy (664,997 samples, 0.64%)</title><rect x="29.4739%" y="197" width="0.6366%" height="15" fill="rgb(249,43,39)"/><text x="29.7239%" y="207.50"></text></g><g><title>misc_checking_3 (5,265,398 samples, 5.04%)</title><rect x="25.0832%" y="229" width="5.0406%" height="15" fill="rgb(209,38,44)"/><text x="25.3332%" y="239.50">misc_c..</text></g><g><title>impl_parent (1,282,482 samples, 1.23%)</title><rect x="32.0223%" y="165" width="1.2277%" height="15" fill="rgb(236,212,23)"/><text x="32.2723%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (864,899 samples, 0.83%)</title><rect x="32.4221%" y="149" width="0.8280%" height="15" fill="rgb(242,79,21)"/><text x="32.6721%" y="159.50"></text></g><g><title>impl_trait_ref (3,571,232 samples, 3.42%)</title><rect x="33.2500%" y="165" width="3.4188%" height="15" fill="rgb(211,96,35)"/><text x="33.5000%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,151,740 samples, 3.02%)</title><rect x="33.6516%" y="149" width="3.0172%" height="15" fill="rgb(253,215,40)"/><text x="33.9016%" y="159.50">met..</text></g><g><title>coherent_trait (7,209,921 samples, 6.90%)</title><rect x="30.2026%" y="197" width="6.9021%" height="15" fill="rgb(211,81,21)"/><text x="30.4526%" y="207.50">coherent_..</text></g><g><title>specialization_graph_of (7,197,141 samples, 6.89%)</title><rect x="30.2149%" y="181" width="6.8899%" height="15" fill="rgb(208,190,38)"/><text x="30.4649%" y="191.50">specializ..</text></g><g><title>trait_impls_of (453,746 samples, 0.43%)</title><rect x="36.6703%" y="165" width="0.4344%" height="15" fill="rgb(235,213,38)"/><text x="36.9203%" y="175.50"></text></g><g><title>implementations_of_trait (167,432 samples, 0.16%)</title><rect x="36.9444%" y="149" width="0.1603%" height="15" fill="rgb(237,122,38)"/><text x="37.1944%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (110,582 samples, 0.11%)</title><rect x="36.9988%" y="133" width="0.1059%" height="15" fill="rgb(244,218,35)"/><text x="37.2488%" y="143.50"></text></g><g><title>coherence_checking (7,339,892 samples, 7.03%)</title><rect x="30.1865%" y="213" width="7.0265%" height="15" fill="rgb(240,68,47)"/><text x="30.4365%" y="223.50">coherence..</text></g><g><title>associated_item (350,523 samples, 0.34%)</title><rect x="46.9849%" y="149" width="0.3356%" height="15" fill="rgb(210,16,53)"/><text x="47.2349%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (288,803 samples, 0.28%)</title><rect x="47.0440%" y="133" width="0.2765%" height="15" fill="rgb(235,124,12)"/><text x="47.2940%" y="143.50"></text></g><g><title>associated_items (484,986 samples, 0.46%)</title><rect x="46.8836%" y="165" width="0.4643%" height="15" fill="rgb(224,169,11)"/><text x="47.1336%" y="175.50"></text></g><g><title>dropck_outlives (383,226 samples, 0.37%)</title><rect x="47.3837%" y="165" width="0.3669%" height="15" fill="rgb(250,166,2)"/><text x="47.6337%" y="175.50"></text></g><g><title>adt_dtorck_constraint (157,511 samples, 0.15%)</title><rect x="47.5998%" y="149" width="0.1508%" height="15" fill="rgb(242,216,29)"/><text x="47.8498%" y="159.50"></text></g><g><title>evaluate_obligation (1,531,964 samples, 1.47%)</title><rect x="47.7506%" y="165" width="1.4666%" height="15" fill="rgb(230,116,27)"/><text x="48.0006%" y="175.50"></text></g><g><title>trait_impls_of (342,551 samples, 0.33%)</title><rect x="48.8892%" y="149" width="0.3279%" height="15" fill="rgb(228,99,48)"/><text x="49.1392%" y="159.50"></text></g><g><title>implementations_of_trait (149,760 samples, 0.14%)</title><rect x="49.0738%" y="133" width="0.1434%" height="15" fill="rgb(253,11,6)"/><text x="49.3238%" y="143.50"></text></g><g><title>item_attrs (111,610 samples, 0.11%)</title><rect x="49.4576%" y="165" width="0.1068%" height="15" fill="rgb(247,143,39)"/><text x="49.7076%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (107,050 samples, 0.10%)</title><rect x="49.4619%" y="149" width="0.1025%" height="15" fill="rgb(236,97,10)"/><text x="49.7119%" y="159.50"></text></g><g><title>evaluate_obligation (258,073 samples, 0.25%)</title><rect x="49.8773%" y="149" width="0.2471%" height="15" fill="rgb(233,208,19)"/><text x="50.1273%" y="159.50"></text></g><g><title>method_autoderef_steps (558,279 samples, 0.53%)</title><rect x="49.6128%" y="165" width="0.5344%" height="15" fill="rgb(216,164,2)"/><text x="49.8628%" y="175.50"></text></g><g><title>object_safety_violations (136,882 samples, 0.13%)</title><rect x="50.1472%" y="165" width="0.1310%" height="15" fill="rgb(220,129,5)"/><text x="50.3972%" y="175.50"></text></g><g><title>predicates_of (222,620 samples, 0.21%)</title><rect x="50.3262%" y="165" width="0.2131%" height="15" fill="rgb(242,17,10)"/><text x="50.5762%" y="175.50"></text></g><g><title>predicates_defined_on (158,940 samples, 0.15%)</title><rect x="50.3871%" y="149" width="0.1522%" height="15" fill="rgb(242,107,0)"/><text x="50.6371%" y="159.50"></text></g><g><title>associated_item (194,630 samples, 0.19%)</title><rect x="57.4375%" y="133" width="0.1863%" height="15" fill="rgb(251,28,31)"/><text x="57.6875%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (154,950 samples, 0.15%)</title><rect x="57.4755%" y="117" width="0.1483%" height="15" fill="rgb(233,223,10)"/><text x="57.7255%" y="127.50"></text></g><g><title>associated_items (302,321 samples, 0.29%)</title><rect x="57.3525%" y="149" width="0.2894%" height="15" fill="rgb(215,21,27)"/><text x="57.6025%" y="159.50"></text></g><g><title>adt_dtorck_constraint (121,451 samples, 0.12%)</title><rect x="57.8256%" y="133" width="0.1163%" height="15" fill="rgb(232,23,21)"/><text x="58.0756%" y="143.50"></text></g><g><title>dropck_outlives (272,022 samples, 0.26%)</title><rect x="57.6909%" y="149" width="0.2604%" height="15" fill="rgb(244,5,23)"/><text x="57.9409%" y="159.50"></text></g><g><title>adt_def (126,142 samples, 0.12%)</title><rect x="59.2156%" y="117" width="0.1208%" height="15" fill="rgb(226,81,46)"/><text x="59.4656%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (124,112 samples, 0.12%)</title><rect x="59.2175%" y="101" width="0.1188%" height="15" fill="rgb(247,70,30)"/><text x="59.4675%" y="111.50"></text></g><g><title>adt_sized_constraint (146,843 samples, 0.14%)</title><rect x="59.2042%" y="133" width="0.1406%" height="15" fill="rgb(212,68,19)"/><text x="59.4542%" y="143.50"></text></g><g><title>predicates_of (145,702 samples, 0.14%)</title><rect x="59.5282%" y="133" width="0.1395%" height="15" fill="rgb(240,187,13)"/><text x="59.7782%" y="143.50"></text></g><g><title>evaluate_obligation (2,492,057 samples, 2.39%)</title><rect x="57.9513%" y="149" width="2.3857%" height="15" fill="rgb(223,113,26)"/><text x="58.2013%" y="159.50">ev..</text></g><g><title>trait_impls_of (689,528 samples, 0.66%)</title><rect x="59.6768%" y="133" width="0.6601%" height="15" fill="rgb(206,192,2)"/><text x="59.9268%" y="143.50"></text></g><g><title>implementations_of_trait (294,993 samples, 0.28%)</title><rect x="60.0545%" y="117" width="0.2824%" height="15" fill="rgb(241,108,4)"/><text x="60.3045%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (147,393 samples, 0.14%)</title><rect x="60.1958%" y="101" width="0.1411%" height="15" fill="rgb(247,173,49)"/><text x="60.4458%" y="111.50"></text></g><g><title>fn_sig (109,862 samples, 0.11%)</title><rect x="60.3531%" y="149" width="0.1052%" height="15" fill="rgb(224,114,35)"/><text x="60.6031%" y="159.50"></text></g><g><title>is_copy_raw (417,806 samples, 0.40%)</title><rect x="60.6837%" y="149" width="0.4000%" height="15" fill="rgb(245,159,27)"/><text x="60.9337%" y="159.50"></text></g><g><title>evaluate_obligation (377,295 samples, 0.36%)</title><rect x="60.7224%" y="133" width="0.3612%" height="15" fill="rgb(245,172,44)"/><text x="60.9724%" y="143.50"></text></g><g><title>trait_impls_of (196,612 samples, 0.19%)</title><rect x="60.8954%" y="117" width="0.1882%" height="15" fill="rgb(236,23,11)"/><text x="61.1454%" y="127.50"></text></g><g><title>item_attrs (111,450 samples, 0.11%)</title><rect x="61.0836%" y="149" width="0.1067%" height="15" fill="rgb(205,117,38)"/><text x="61.3336%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (106,430 samples, 0.10%)</title><rect x="61.0884%" y="133" width="0.1019%" height="15" fill="rgb(237,72,25)"/><text x="61.3384%" y="143.50"></text></g><g><title>evaluate_obligation (183,402 samples, 0.18%)</title><rect x="61.4443%" y="133" width="0.1756%" height="15" fill="rgb(244,70,9)"/><text x="61.6943%" y="143.50"></text></g><g><title>method_autoderef_steps (393,164 samples, 0.38%)</title><rect x="61.2502%" y="149" width="0.3764%" height="15" fill="rgb(217,125,39)"/><text x="61.5002%" y="159.50"></text></g><g><title>explicit_predicates_of (313,954 samples, 0.30%)</title><rect x="61.7992%" y="117" width="0.3005%" height="15" fill="rgb(235,36,10)"/><text x="62.0492%" y="127.50"></text></g><g><title>predicates_of (506,146 samples, 0.48%)</title><rect x="61.6518%" y="149" width="0.4845%" height="15" fill="rgb(251,123,47)"/><text x="61.9018%" y="159.50"></text></g><g><title>predicates_defined_on (414,305 samples, 0.40%)</title><rect x="61.7397%" y="133" width="0.3966%" height="15" fill="rgb(221,13,13)"/><text x="61.9897%" y="143.50"></text></g><g><title>trait_impls_of (114,472 samples, 0.11%)</title><rect x="62.1449%" y="149" width="0.1096%" height="15" fill="rgb(238,131,9)"/><text x="62.3949%" y="159.50"></text></g><g><title>typeck (12,288,548 samples, 11.76%)</title><rect x="50.6142%" y="165" width="11.7639%" height="15" fill="rgb(211,50,8)"/><text x="50.8642%" y="175.50">typeck</text></g><g><title>item_bodies_checking (26,293,102 samples, 25.17%)</title><rect x="37.2412%" y="213" width="25.1705%" height="15" fill="rgb(245,182,24)"/><text x="37.4912%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (26,289,552 samples, 25.17%)</title><rect x="37.2446%" y="197" width="25.1671%" height="15" fill="rgb(242,14,37)"/><text x="37.4946%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (26,227,592 samples, 25.11%)</title><rect x="37.3039%" y="181" width="25.1078%" height="15" fill="rgb(246,228,12)"/><text x="37.5539%" y="191.50">typeck</text></g><g><title>impl_trait_ref (218,283 samples, 0.21%)</title><rect x="63.3775%" y="133" width="0.2090%" height="15" fill="rgb(213,55,15)"/><text x="63.6275%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (187,513 samples, 0.18%)</title><rect x="63.4070%" y="117" width="0.1795%" height="15" fill="rgb(209,9,3)"/><text x="63.6570%" y="127.50"></text></g><g><title>adt_destructor (499,966 samples, 0.48%)</title><rect x="63.1646%" y="181" width="0.4786%" height="15" fill="rgb(230,59,30)"/><text x="63.4146%" y="191.50"></text></g><g><title>coherent_trait (493,516 samples, 0.47%)</title><rect x="63.1708%" y="165" width="0.4724%" height="15" fill="rgb(209,121,21)"/><text x="63.4208%" y="175.50"></text></g><g><title>specialization_graph_of (491,646 samples, 0.47%)</title><rect x="63.1726%" y="149" width="0.4707%" height="15" fill="rgb(220,109,13)"/><text x="63.4226%" y="159.50"></text></g><g><title>layout_of (123,371 samples, 0.12%)</title><rect x="63.7728%" y="149" width="0.1181%" height="15" fill="rgb(232,18,1)"/><text x="64.0228%" y="159.50"></text></g><g><title>layout_of (161,602 samples, 0.15%)</title><rect x="63.7443%" y="165" width="0.1547%" height="15" fill="rgb(215,41,42)"/><text x="63.9943%" y="175.50"></text></g><g><title>layout_of (180,852 samples, 0.17%)</title><rect x="63.7304%" y="181" width="0.1731%" height="15" fill="rgb(224,123,36)"/><text x="63.9804%" y="191.50"></text></g><g><title>adt_dtorck_constraint (228,752 samples, 0.22%)</title><rect x="64.4104%" y="133" width="0.2190%" height="15" fill="rgb(240,125,3)"/><text x="64.6604%" y="143.50"></text></g><g><title>adt_dtorck_constraint (435,294 samples, 0.42%)</title><rect x="64.2641%" y="149" width="0.4167%" height="15" fill="rgb(205,98,50)"/><text x="64.5141%" y="159.50"></text></g><g><title>dropck_outlives (499,636 samples, 0.48%)</title><rect x="64.2172%" y="165" width="0.4783%" height="15" fill="rgb(205,185,37)"/><text x="64.4672%" y="175.50"></text></g><g><title>typeck (850,280 samples, 0.81%)</title><rect x="63.9412%" y="181" width="0.8140%" height="15" fill="rgb(238,207,15)"/><text x="64.1912%" y="191.50"></text></g><g><title>item_types_checking (2,448,908 samples, 2.34%)</title><rect x="62.4117%" y="213" width="2.3444%" height="15" fill="rgb(213,199,42)"/><text x="62.6617%" y="223.50">i..</text></g><g><title>check_mod_item_types (2,443,778 samples, 2.34%)</title><rect x="62.4166%" y="197" width="2.3394%" height="15" fill="rgb(235,201,11)"/><text x="62.6666%" y="207.50">c..</text></g><g><title>fn_sig (412,385 samples, 0.39%)</title><rect x="64.9816%" y="181" width="0.3948%" height="15" fill="rgb(207,46,11)"/><text x="65.2316%" y="191.50"></text></g><g><title>named_region_map (370,014 samples, 0.35%)</title><rect x="65.4626%" y="165" width="0.3542%" height="15" fill="rgb(241,35,35)"/><text x="65.7126%" y="175.50"></text></g><g><title>resolve_lifetimes (350,484 samples, 0.34%)</title><rect x="65.4813%" y="149" width="0.3355%" height="15" fill="rgb(243,32,47)"/><text x="65.7313%" y="159.50"></text></g><g><title>lint_levels (112,772 samples, 0.11%)</title><rect x="65.7088%" y="133" width="0.1080%" height="15" fill="rgb(247,202,23)"/><text x="65.9588%" y="143.50"></text></g><g><title>generics_of (473,916 samples, 0.45%)</title><rect x="65.3764%" y="181" width="0.4537%" height="15" fill="rgb(219,102,11)"/><text x="65.6264%" y="191.50"></text></g><g><title>explicit_predicates_of (211,023 samples, 0.20%)</title><rect x="65.9591%" y="149" width="0.2020%" height="15" fill="rgb(243,110,44)"/><text x="66.2091%" y="159.50"></text></g><g><title>predicates_of (610,029 samples, 0.58%)</title><rect x="65.8610%" y="181" width="0.5840%" height="15" fill="rgb(222,74,54)"/><text x="66.1110%" y="191.50"></text></g><g><title>predicates_defined_on (569,458 samples, 0.55%)</title><rect x="65.8999%" y="165" width="0.5451%" height="15" fill="rgb(216,99,12)"/><text x="66.1499%" y="175.50"></text></g><g><title>inferred_outlives_of (296,514 samples, 0.28%)</title><rect x="66.1612%" y="149" width="0.2839%" height="15" fill="rgb(226,22,26)"/><text x="66.4112%" y="159.50"></text></g><g><title>inferred_outlives_crate (276,233 samples, 0.26%)</title><rect x="66.1806%" y="133" width="0.2644%" height="15" fill="rgb(217,163,10)"/><text x="66.4306%" y="143.50"></text></g><g><title>type_of (131,740 samples, 0.13%)</title><rect x="66.3189%" y="117" width="0.1261%" height="15" fill="rgb(213,25,53)"/><text x="66.5689%" y="127.50"></text></g><g><title>type_collecting (1,871,231 samples, 1.79%)</title><rect x="64.7600%" y="213" width="1.7913%" height="15" fill="rgb(252,105,26)"/><text x="65.0100%" y="223.50">t..</text></g><g><title>collect_mod_item_types (1,855,691 samples, 1.78%)</title><rect x="64.7749%" y="197" width="1.7765%" height="15" fill="rgb(220,39,43)"/><text x="65.0249%" y="207.50">c..</text></g><g><title>adt_sized_constraint (145,181 samples, 0.14%)</title><rect x="68.5128%" y="133" width="0.1390%" height="15" fill="rgb(229,68,48)"/><text x="68.7628%" y="143.50"></text></g><g><title>adt_sized_constraint (195,662 samples, 0.19%)</title><rect x="68.4708%" y="149" width="0.1873%" height="15" fill="rgb(252,8,32)"/><text x="68.7208%" y="159.50"></text></g><g><title>adt_sized_constraint (242,734 samples, 0.23%)</title><rect x="68.4271%" y="165" width="0.2324%" height="15" fill="rgb(223,20,43)"/><text x="68.6771%" y="175.50"></text></g><g><title>evaluate_obligation (771,089 samples, 0.74%)</title><rect x="67.9789%" y="181" width="0.7382%" height="15" fill="rgb(229,81,49)"/><text x="68.2289%" y="191.50"></text></g><g><title>implied_outlives_bounds (197,433 samples, 0.19%)</title><rect x="68.7414%" y="181" width="0.1890%" height="15" fill="rgb(236,28,36)"/><text x="68.9914%" y="191.50"></text></g><g><title>param_env (159,312 samples, 0.15%)</title><rect x="68.9304%" y="181" width="0.1525%" height="15" fill="rgb(249,185,26)"/><text x="69.1804%" y="191.50"></text></g><g><title>region_scope_tree (207,313 samples, 0.20%)</title><rect x="69.1422%" y="181" width="0.1985%" height="15" fill="rgb(249,174,33)"/><text x="69.3922%" y="191.50"></text></g><g><title>check_impl_item_well_formed (2,755,869 samples, 2.64%)</title><rect x="66.7046%" y="197" width="2.6382%" height="15" fill="rgb(233,201,37)"/><text x="66.9546%" y="207.50">ch..</text></g><g><title>adt_def (125,452 samples, 0.12%)</title><rect x="70.8281%" y="133" width="0.1201%" height="15" fill="rgb(221,78,26)"/><text x="71.0781%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (123,412 samples, 0.12%)</title><rect x="70.8301%" y="117" width="0.1181%" height="15" fill="rgb(250,127,30)"/><text x="71.0801%" y="127.50"></text></g><g><title>adt_sized_constraint (132,201 samples, 0.13%)</title><rect x="70.9482%" y="133" width="0.1266%" height="15" fill="rgb(230,49,44)"/><text x="71.1982%" y="143.50"></text></g><g><title>adt_sized_constraint (274,363 samples, 0.26%)</title><rect x="70.8206%" y="149" width="0.2626%" height="15" fill="rgb(229,67,23)"/><text x="71.0706%" y="159.50"></text></g><g><title>adt_sized_constraint (346,823 samples, 0.33%)</title><rect x="70.7576%" y="165" width="0.3320%" height="15" fill="rgb(249,83,47)"/><text x="71.0076%" y="175.50"></text></g><g><title>trait_impls_of (163,872 samples, 0.16%)</title><rect x="71.2261%" y="165" width="0.1569%" height="15" fill="rgb(215,43,3)"/><text x="71.4761%" y="175.50"></text></g><g><title>evaluate_obligation (1,313,595 samples, 1.26%)</title><rect x="70.1457%" y="181" width="1.2575%" height="15" fill="rgb(238,154,13)"/><text x="70.3957%" y="191.50"></text></g><g><title>implied_outlives_bounds (115,583 samples, 0.11%)</title><rect x="71.4132%" y="181" width="0.1106%" height="15" fill="rgb(219,56,2)"/><text x="71.6632%" y="191.50"></text></g><g><title>param_env (224,123 samples, 0.21%)</title><rect x="71.5241%" y="181" width="0.2146%" height="15" fill="rgb(233,0,4)"/><text x="71.7741%" y="191.50"></text></g><g><title>check_item_well_formed (2,654,187 samples, 2.54%)</title><rect x="69.3428%" y="197" width="2.5409%" height="15" fill="rgb(235,30,7)"/><text x="69.5928%" y="207.50">ch..</text></g><g><title>analysis (74,845,922 samples, 71.65%)</title><rect x="0.5572%" y="245" width="71.6504%" height="15" fill="rgb(250,79,13)"/><text x="0.8072%" y="255.50">analysis</text></g><g><title>type_check_crate (43,960,759 samples, 42.08%)</title><rect x="30.1237%" y="229" width="42.0838%" height="15" fill="rgb(211,146,34)"/><text x="30.3737%" y="239.50">type_check_crate</text></g><g><title>wf_checking (5,903,425 samples, 5.65%)</title><rect x="66.5562%" y="213" width="5.6514%" height="15" fill="rgb(228,22,38)"/><text x="66.8062%" y="223.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (338,374 samples, 0.32%)</title><rect x="71.8837%" y="197" width="0.3239%" height="15" fill="rgb(235,168,5)"/><text x="72.1337%" y="207.50"></text></g><g><title>codegen_crate (534,226 samples, 0.51%)</title><rect x="72.2140%" y="245" width="0.5114%" height="15" fill="rgb(221,155,16)"/><text x="72.4640%" y="255.50"></text></g><g><title>AST_validation (122,952 samples, 0.12%)</title><rect x="72.8612%" y="229" width="0.1177%" height="15" fill="rgb(215,215,53)"/><text x="73.1112%" y="239.50"></text></g><g><title>metadata_load_macro (214,743 samples, 0.21%)</title><rect x="86.8806%" y="197" width="0.2056%" height="15" fill="rgb(223,4,10)"/><text x="87.1306%" y="207.50"></text></g><g><title>metadata_register_crate (2,457,847 samples, 2.35%)</title><rect x="87.0861%" y="197" width="2.3529%" height="15" fill="rgb(234,103,6)"/><text x="87.3361%" y="207.50">m..</text></g><g><title>metadata_register_crate (1,299,105 samples, 1.24%)</title><rect x="88.1954%" y="181" width="1.2436%" height="15" fill="rgb(227,97,0)"/><text x="88.4454%" y="191.50"></text></g><g><title>metadata_register_crate (439,653 samples, 0.42%)</title><rect x="89.0182%" y="165" width="0.4209%" height="15" fill="rgb(234,150,53)"/><text x="89.2682%" y="175.50"></text></g><g><title>macro_expand_crate (17,218,021 samples, 16.48%)</title><rect x="73.1026%" y="229" width="16.4829%" height="15" fill="rgb(228,201,54)"/><text x="73.3526%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (17,200,321 samples, 16.47%)</title><rect x="73.1196%" y="213" width="16.4659%" height="15" fill="rgb(222,22,37)"/><text x="73.3696%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (153,002 samples, 0.15%)</title><rect x="89.4391%" y="197" width="0.1465%" height="15" fill="rgb(237,53,32)"/><text x="89.6891%" y="207.50"></text></g><g><title>finalize_imports (115,681 samples, 0.11%)</title><rect x="89.6555%" y="213" width="0.1107%" height="15" fill="rgb(233,25,53)"/><text x="89.9055%" y="223.50"></text></g><g><title>late_resolve_crate (1,465,356 samples, 1.40%)</title><rect x="89.8185%" y="213" width="1.4028%" height="15" fill="rgb(210,40,34)"/><text x="90.0685%" y="223.50"></text></g><g><title>configure_and_expand (19,421,386 samples, 18.59%)</title><rect x="72.7254%" y="245" width="18.5922%" height="15" fill="rgb(241,220,44)"/><text x="72.9754%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,740,559 samples, 1.67%)</title><rect x="89.6514%" y="229" width="1.6662%" height="15" fill="rgb(235,28,35)"/><text x="89.9014%" y="239.50"></text></g><g><title>drop_ast (141,681 samples, 0.14%)</title><rect x="91.3176%" y="245" width="0.1356%" height="15" fill="rgb(210,56,17)"/><text x="91.5676%" y="255.50"></text></g><g><title>early_lint_checks (271,044 samples, 0.26%)</title><rect x="91.4755%" y="245" width="0.2595%" height="15" fill="rgb(224,130,29)"/><text x="91.7255%" y="255.50"></text></g><g><title>free_global_ctxt (3,817,822 samples, 3.65%)</title><rect x="91.7350%" y="245" width="3.6548%" height="15" fill="rgb(235,212,8)"/><text x="91.9850%" y="255.50">free..</text></g><g><title>generate_crate_metadata (1,012,201 samples, 0.97%)</title><rect x="95.3898%" y="245" width="0.9690%" height="15" fill="rgb(223,33,50)"/><text x="95.6398%" y="255.50"></text></g><g><title>hir_lowering (2,015,722 samples, 1.93%)</title><rect x="96.3588%" y="245" width="1.9297%" height="15" fill="rgb(219,149,13)"/><text x="96.6088%" y="255.50">h..</text></g><g><title>parse_crate (292,884 samples, 0.28%)</title><rect x="98.3495%" y="245" width="0.2804%" height="15" fill="rgb(250,156,29)"/><text x="98.5995%" y="255.50"></text></g><g><title>prepare_outputs (189,752 samples, 0.18%)</title><rect x="98.6358%" y="245" width="0.1817%" height="15" fill="rgb(216,193,19)"/><text x="98.8858%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (808,479 samples, 0.77%)</title><rect x="98.8175%" y="245" width="0.7740%" height="15" fill="rgb(216,135,14)"/><text x="99.0675%" y="255.50"></text></g><g><title>all (104,459,951 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(241,47,5)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (104,459,951 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,42,35)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (318,794 samples, 0.31%)</title><rect x="99.6948%" y="245" width="0.3052%" height="15" fill="rgb(231,13,6)"/><text x="99.9448%" y="255.50"></text></g></svg></svg>