<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (133,011 samples, 0.22%)</title><rect x="6.3602%" y="149" width="0.2175%" height="15" fill="rgb(227,0,7)"/><text x="6.6102%" y="159.50"></text></g><g><title>item_attrs (134,243 samples, 0.22%)</title><rect x="6.7970%" y="117" width="0.2195%" height="15" fill="rgb(217,0,24)"/><text x="7.0470%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (130,213 samples, 0.21%)</title><rect x="6.8036%" y="101" width="0.2129%" height="15" fill="rgb(221,193,54)"/><text x="7.0536%" y="111.50"></text></g><g><title>codegen_fn_attrs (188,034 samples, 0.31%)</title><rect x="6.7273%" y="133" width="0.3075%" height="15" fill="rgb(248,212,6)"/><text x="6.9773%" y="143.50"></text></g><g><title>adt_drop_tys (69,561 samples, 0.11%)</title><rect x="8.0283%" y="85" width="0.1137%" height="15" fill="rgb(208,68,35)"/><text x="8.2783%" y="95.50"></text></g><g><title>is_copy_raw (90,811 samples, 0.15%)</title><rect x="8.1434%" y="85" width="0.1485%" height="15" fill="rgb(232,128,0)"/><text x="8.3934%" y="95.50"></text></g><g><title>evaluate_obligation (78,011 samples, 0.13%)</title><rect x="8.1643%" y="69" width="0.1276%" height="15" fill="rgb(207,160,47)"/><text x="8.4143%" y="79.50"></text></g><g><title>adt_drop_tys (231,244 samples, 0.38%)</title><rect x="7.9994%" y="101" width="0.3781%" height="15" fill="rgb(228,23,34)"/><text x="8.2494%" y="111.50"></text></g><g><title>needs_drop_raw (823,590 samples, 1.35%)</title><rect x="7.9339%" y="117" width="1.3468%" height="15" fill="rgb(218,30,26)"/><text x="8.1839%" y="127.50"></text></g><g><title>is_copy_raw (552,315 samples, 0.90%)</title><rect x="8.3775%" y="101" width="0.9032%" height="15" fill="rgb(220,122,19)"/><text x="8.6275%" y="111.50"></text></g><g><title>evaluate_obligation (499,715 samples, 0.82%)</title><rect x="8.4635%" y="85" width="0.8172%" height="15" fill="rgb(250,228,42)"/><text x="8.7135%" y="95.50"></text></g><g><title>trait_impls_of (175,722 samples, 0.29%)</title><rect x="8.9934%" y="69" width="0.2873%" height="15" fill="rgb(240,193,28)"/><text x="9.2434%" y="79.50"></text></g><g><title>specialization_graph_of (126,811 samples, 0.21%)</title><rect x="9.4060%" y="101" width="0.2074%" height="15" fill="rgb(216,20,37)"/><text x="9.6560%" y="111.50"></text></g><g><title>resolve_instance (227,873 samples, 0.37%)</title><rect x="9.2807%" y="117" width="0.3726%" height="15" fill="rgb(206,188,39)"/><text x="9.5307%" y="127.50"></text></g><g><title>thir_body (163,322 samples, 0.27%)</title><rect x="9.6586%" y="117" width="0.2671%" height="15" fill="rgb(217,207,13)"/><text x="9.9086%" y="127.50"></text></g><g><title>mir_const (2,366,728 samples, 3.87%)</title><rect x="6.0591%" y="165" width="3.8702%" height="15" fill="rgb(231,73,38)"/><text x="6.3091%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (2,049,584 samples, 3.35%)</title><rect x="6.5777%" y="149" width="3.3516%" height="15" fill="rgb(225,20,46)"/><text x="6.8277%" y="159.50">uns..</text></g><g><title>mir_built (1,770,050 samples, 2.89%)</title><rect x="7.0348%" y="133" width="2.8944%" height="15" fill="rgb(210,31,41)"/><text x="7.2848%" y="143.50">mi..</text></g><g><title>mir_promoted (2,792,301 samples, 4.57%)</title><rect x="5.7050%" y="181" width="4.5661%" height="15" fill="rgb(221,200,47)"/><text x="5.9550%" y="191.50">mir_p..</text></g><g><title>mir_const_qualif (209,032 samples, 0.34%)</title><rect x="9.9292%" y="165" width="0.3418%" height="15" fill="rgb(226,26,5)"/><text x="10.1792%" y="175.50"></text></g><g><title>mir_const (168,321 samples, 0.28%)</title><rect x="9.9958%" y="149" width="0.2752%" height="15" fill="rgb(249,33,26)"/><text x="10.2458%" y="159.50"></text></g><g><title>unsafety_check_result (108,351 samples, 0.18%)</title><rect x="10.0938%" y="133" width="0.1772%" height="15" fill="rgb(235,183,28)"/><text x="10.3438%" y="143.50"></text></g><g><title>mir_built (76,600 samples, 0.13%)</title><rect x="10.1458%" y="117" width="0.1253%" height="15" fill="rgb(221,5,38)"/><text x="10.3958%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (153,500 samples, 0.25%)</title><rect x="10.2710%" y="181" width="0.2510%" height="15" fill="rgb(247,18,42)"/><text x="10.5210%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (100,861 samples, 0.16%)</title><rect x="10.5220%" y="181" width="0.1649%" height="15" fill="rgb(241,131,45)"/><text x="10.7720%" y="191.50"></text></g><g><title>type_op_normalize_predicate (76,671 samples, 0.13%)</title><rect x="10.6870%" y="181" width="0.1254%" height="15" fill="rgb(249,31,29)"/><text x="10.9370%" y="191.50"></text></g><g><title>type_op_prove_predicate (568,584 samples, 0.93%)</title><rect x="10.8123%" y="181" width="0.9298%" height="15" fill="rgb(225,111,53)"/><text x="11.0623%" y="191.50"></text></g><g><title>MIR_borrow_checking (6,360,382 samples, 10.40%)</title><rect x="1.3592%" y="213" width="10.4007%" height="15" fill="rgb(238,160,17)"/><text x="1.6092%" y="223.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (6,343,262 samples, 10.37%)</title><rect x="1.3872%" y="197" width="10.3727%" height="15" fill="rgb(214,148,48)"/><text x="1.6372%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (117,131 samples, 0.19%)</title><rect x="11.7599%" y="213" width="0.1915%" height="15" fill="rgb(232,36,49)"/><text x="12.0099%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (97,031 samples, 0.16%)</title><rect x="11.7928%" y="197" width="0.1587%" height="15" fill="rgb(209,103,24)"/><text x="12.0428%" y="207.50"></text></g><g><title>hir_module_items (139,151 samples, 0.23%)</title><rect x="11.9514%" y="213" width="0.2275%" height="15" fill="rgb(229,88,8)"/><text x="12.2014%" y="223.50"></text></g><g><title>get_lang_items (90,711 samples, 0.15%)</title><rect x="12.4993%" y="165" width="0.1483%" height="15" fill="rgb(213,181,19)"/><text x="12.7493%" y="175.50"></text></g><g><title>codegen_fn_attrs (80,741 samples, 0.13%)</title><rect x="12.7589%" y="149" width="0.1320%" height="15" fill="rgb(254,191,54)"/><text x="13.0089%" y="159.50"></text></g><g><title>should_inherit_track_caller (151,352 samples, 0.25%)</title><rect x="12.6476%" y="165" width="0.2475%" height="15" fill="rgb(241,83,37)"/><text x="12.8976%" y="175.50"></text></g><g><title>codegen_fn_attrs (321,585 samples, 0.53%)</title><rect x="12.4194%" y="181" width="0.5259%" height="15" fill="rgb(233,36,39)"/><text x="12.6694%" y="191.50"></text></g><g><title>check_mod_attrs (449,875 samples, 0.74%)</title><rect x="12.2102%" y="197" width="0.7357%" height="15" fill="rgb(226,3,54)"/><text x="12.4602%" y="207.50"></text></g><g><title>lookup_deprecation_entry (108,821 samples, 0.18%)</title><rect x="13.2964%" y="181" width="0.1779%" height="15" fill="rgb(245,192,40)"/><text x="13.5464%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (339,574 samples, 0.56%)</title><rect x="13.0954%" y="197" width="0.5553%" height="15" fill="rgb(238,167,29)"/><text x="13.3454%" y="207.50"></text></g><g><title>misc_checking_1 (949,661 samples, 1.55%)</title><rect x="12.1803%" y="213" width="1.5529%" height="15" fill="rgb(232,182,51)"/><text x="12.4303%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (139,551 samples, 0.23%)</title><rect x="13.7355%" y="197" width="0.2282%" height="15" fill="rgb(231,60,39)"/><text x="13.9855%" y="207.50"></text></g><g><title>check_mod_liveness (115,271 samples, 0.19%)</title><rect x="13.7752%" y="181" width="0.1885%" height="15" fill="rgb(208,69,12)"/><text x="14.0252%" y="191.50"></text></g><g><title>misc_checking_2 (280,703 samples, 0.46%)</title><rect x="13.7332%" y="213" width="0.4590%" height="15" fill="rgb(235,93,37)"/><text x="13.9832%" y="223.50"></text></g><g><title>match_checking (139,742 samples, 0.23%)</title><rect x="13.9637%" y="197" width="0.2285%" height="15" fill="rgb(213,116,39)"/><text x="14.2137%" y="207.50"></text></g><g><title>check_match (133,902 samples, 0.22%)</title><rect x="13.9733%" y="181" width="0.2190%" height="15" fill="rgb(222,207,29)"/><text x="14.2233%" y="191.50"></text></g><g><title>death_checking (93,331 samples, 0.15%)</title><rect x="14.2963%" y="197" width="0.1526%" height="15" fill="rgb(206,96,30)"/><text x="14.5463%" y="207.50"></text></g><g><title>eval_to_const_value_raw (140,991 samples, 0.23%)</title><rect x="15.2566%" y="165" width="0.2306%" height="15" fill="rgb(218,138,4)"/><text x="15.5066%" y="175.50"></text></g><g><title>eval_to_const_value_raw (138,241 samples, 0.23%)</title><rect x="15.2611%" y="149" width="0.2261%" height="15" fill="rgb(250,191,14)"/><text x="15.5111%" y="159.50"></text></g><g><title>eval_to_allocation_raw (131,931 samples, 0.22%)</title><rect x="15.2714%" y="133" width="0.2157%" height="15" fill="rgb(239,60,40)"/><text x="15.5214%" y="143.50"></text></g><g><title>param_env (144,391 samples, 0.24%)</title><rect x="15.4872%" y="165" width="0.2361%" height="15" fill="rgb(206,27,48)"/><text x="15.7372%" y="175.50"></text></g><g><title>predicates_of (85,091 samples, 0.14%)</title><rect x="15.5841%" y="149" width="0.1391%" height="15" fill="rgb(225,35,8)"/><text x="15.8341%" y="159.50"></text></g><g><title>predicates_defined_on (63,611 samples, 0.10%)</title><rect x="15.6193%" y="133" width="0.1040%" height="15" fill="rgb(250,213,24)"/><text x="15.8693%" y="143.50"></text></g><g><title>crate_lints (2,043,493 samples, 3.34%)</title><rect x="14.4515%" y="181" width="3.3416%" height="15" fill="rgb(247,123,22)"/><text x="14.7015%" y="191.50">cra..</text></g><g><title>type_of (1,261,396 samples, 2.06%)</title><rect x="15.7304%" y="165" width="2.0627%" height="15" fill="rgb(231,138,38)"/><text x="15.9804%" y="175.50">t..</text></g><g><title>metadata_decode_entry_type_of (802,913 samples, 1.31%)</title><rect x="16.4801%" y="149" width="1.3130%" height="15" fill="rgb(231,145,46)"/><text x="16.7301%" y="159.50"></text></g><g><title>lint_checking (2,123,764 samples, 3.47%)</title><rect x="14.4490%" y="197" width="3.4729%" height="15" fill="rgb(251,118,11)"/><text x="14.6990%" y="207.50">lin..</text></g><g><title>module_lints (78,721 samples, 0.13%)</title><rect x="17.7931%" y="181" width="0.1287%" height="15" fill="rgb(217,147,25)"/><text x="18.0431%" y="191.50"></text></g><g><title>lint_mod (75,751 samples, 0.12%)</title><rect x="17.7979%" y="165" width="0.1239%" height="15" fill="rgb(247,81,37)"/><text x="18.0479%" y="175.50"></text></g><g><title>privacy_checking_modules (152,211 samples, 0.25%)</title><rect x="18.0216%" y="197" width="0.2489%" height="15" fill="rgb(209,12,38)"/><text x="18.2716%" y="207.50"></text></g><g><title>check_mod_privacy (150,711 samples, 0.25%)</title><rect x="18.0241%" y="181" width="0.2464%" height="15" fill="rgb(227,1,9)"/><text x="18.2741%" y="191.50"></text></g><g><title>misc_checking_3 (2,508,897 samples, 4.10%)</title><rect x="14.1922%" y="213" width="4.1026%" height="15" fill="rgb(248,47,43)"/><text x="14.4422%" y="223.50">misc..</text></g><g><title>impl_parent (1,467,947 samples, 2.40%)</title><rect x="22.1961%" y="149" width="2.4004%" height="15" fill="rgb(221,10,30)"/><text x="22.4461%" y="159.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (857,712 samples, 1.40%)</title><rect x="23.1940%" y="133" width="1.4026%" height="15" fill="rgb(210,229,1)"/><text x="23.4440%" y="143.50"></text></g><g><title>impl_trait_ref (5,532,518 samples, 9.05%)</title><rect x="24.5966%" y="149" width="9.0470%" height="15" fill="rgb(222,148,37)"/><text x="24.8466%" y="159.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,921,003 samples, 8.05%)</title><rect x="25.5965%" y="133" width="8.0470%" height="15" fill="rgb(234,67,33)"/><text x="25.8465%" y="143.50">metadata_de..</text></g><g><title>coherent_trait (9,840,019 samples, 16.09%)</title><rect x="18.3796%" y="181" width="16.0908%" height="15" fill="rgb(247,98,35)"/><text x="18.6296%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (9,827,529 samples, 16.07%)</title><rect x="18.4000%" y="165" width="16.0703%" height="15" fill="rgb(247,138,52)"/><text x="18.6500%" y="175.50">specialization_graph_of</text></g><g><title>trait_impls_of (503,327 samples, 0.82%)</title><rect x="33.6473%" y="149" width="0.8231%" height="15" fill="rgb(213,79,30)"/><text x="33.8973%" y="159.50"></text></g><g><title>implementations_of_trait (118,932 samples, 0.19%)</title><rect x="34.2759%" y="133" width="0.1945%" height="15" fill="rgb(246,177,23)"/><text x="34.5259%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (86,472 samples, 0.14%)</title><rect x="34.3289%" y="117" width="0.1414%" height="15" fill="rgb(230,62,27)"/><text x="34.5789%" y="127.50"></text></g><g><title>coherence_checking (9,907,690 samples, 16.20%)</title><rect x="18.3519%" y="197" width="16.2014%" height="15" fill="rgb(216,154,8)"/><text x="18.6019%" y="207.50">coherence_checking</text></g><g><title>associated_item (281,414 samples, 0.46%)</title><rect x="41.6780%" y="133" width="0.4602%" height="15" fill="rgb(244,35,45)"/><text x="41.9280%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (221,272 samples, 0.36%)</title><rect x="41.7763%" y="117" width="0.3618%" height="15" fill="rgb(251,115,12)"/><text x="42.0263%" y="127.50"></text></g><g><title>associated_items (407,554 samples, 0.67%)</title><rect x="41.5014%" y="149" width="0.6664%" height="15" fill="rgb(240,54,50)"/><text x="41.7514%" y="159.50"></text></g><g><title>adt_def (79,100 samples, 0.13%)</title><rect x="42.4982%" y="117" width="0.1293%" height="15" fill="rgb(233,84,52)"/><text x="42.7482%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (76,980 samples, 0.13%)</title><rect x="42.5016%" y="101" width="0.1259%" height="15" fill="rgb(207,117,47)"/><text x="42.7516%" y="111.50"></text></g><g><title>adt_def (106,532 samples, 0.17%)</title><rect x="42.7494%" y="85" width="0.1742%" height="15" fill="rgb(249,43,39)"/><text x="42.9994%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (105,842 samples, 0.17%)</title><rect x="42.7506%" y="69" width="0.1731%" height="15" fill="rgb(209,38,44)"/><text x="43.0006%" y="79.50"></text></g><g><title>item_attrs (83,371 samples, 0.14%)</title><rect x="42.7873%" y="53" width="0.1363%" height="15" fill="rgb(236,212,23)"/><text x="43.0373%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (82,561 samples, 0.14%)</title><rect x="42.7886%" y="37" width="0.1350%" height="15" fill="rgb(242,79,21)"/><text x="43.0386%" y="47.50"></text></g><g><title>adt_dtorck_constraint (91,982 samples, 0.15%)</title><rect x="42.9385%" y="85" width="0.1504%" height="15" fill="rgb(211,96,35)"/><text x="43.1885%" y="95.50"></text></g><g><title>adt_dtorck_constraint (234,515 samples, 0.38%)</title><rect x="42.7279%" y="101" width="0.3835%" height="15" fill="rgb(253,215,40)"/><text x="42.9779%" y="111.50"></text></g><g><title>adt_dtorck_constraint (287,575 samples, 0.47%)</title><rect x="42.6654%" y="117" width="0.4703%" height="15" fill="rgb(211,81,21)"/><text x="42.9154%" y="127.50"></text></g><g><title>dropck_outlives (584,565 samples, 0.96%)</title><rect x="42.2370%" y="149" width="0.9559%" height="15" fill="rgb(208,190,38)"/><text x="42.4870%" y="159.50"></text></g><g><title>adt_dtorck_constraint (470,945 samples, 0.77%)</title><rect x="42.4228%" y="133" width="0.7701%" height="15" fill="rgb(235,213,38)"/><text x="42.6728%" y="143.50"></text></g><g><title>adt_def (120,372 samples, 0.20%)</title><rect x="44.0176%" y="117" width="0.1968%" height="15" fill="rgb(237,122,38)"/><text x="44.2676%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (118,582 samples, 0.19%)</title><rect x="44.0205%" y="101" width="0.1939%" height="15" fill="rgb(244,218,35)"/><text x="44.2705%" y="111.50"></text></g><g><title>item_attrs (93,532 samples, 0.15%)</title><rect x="44.0615%" y="85" width="0.1529%" height="15" fill="rgb(240,68,47)"/><text x="44.3115%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (91,522 samples, 0.15%)</title><rect x="44.0648%" y="69" width="0.1497%" height="15" fill="rgb(210,16,53)"/><text x="44.3148%" y="79.50"></text></g><g><title>adt_sized_constraint (149,524 samples, 0.24%)</title><rect x="44.0023%" y="133" width="0.2445%" height="15" fill="rgb(235,124,12)"/><text x="44.2523%" y="143.50"></text></g><g><title>impl_trait_ref (71,711 samples, 0.12%)</title><rect x="44.3263%" y="133" width="0.1173%" height="15" fill="rgb(224,169,11)"/><text x="44.5763%" y="143.50"></text></g><g><title>predicates_of (81,332 samples, 0.13%)</title><rect x="44.4532%" y="133" width="0.1330%" height="15" fill="rgb(250,166,2)"/><text x="44.7032%" y="143.50"></text></g><g><title>evaluate_obligation (1,262,813 samples, 2.06%)</title><rect x="43.1929%" y="149" width="2.0650%" height="15" fill="rgb(242,216,29)"/><text x="43.4429%" y="159.50">e..</text></g><g><title>trait_impls_of (405,172 samples, 0.66%)</title><rect x="44.5954%" y="133" width="0.6626%" height="15" fill="rgb(230,116,27)"/><text x="44.8454%" y="143.50"></text></g><g><title>implementations_of_trait (149,510 samples, 0.24%)</title><rect x="45.0135%" y="117" width="0.2445%" height="15" fill="rgb(228,99,48)"/><text x="45.2635%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (95,490 samples, 0.16%)</title><rect x="45.1018%" y="101" width="0.1561%" height="15" fill="rgb(253,11,6)"/><text x="45.3518%" y="111.50"></text></g><g><title>fn_sig (84,730 samples, 0.14%)</title><rect x="45.2879%" y="149" width="0.1386%" height="15" fill="rgb(247,143,39)"/><text x="45.5379%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (74,120 samples, 0.12%)</title><rect x="45.3053%" y="133" width="0.1212%" height="15" fill="rgb(236,97,10)"/><text x="45.5553%" y="143.50"></text></g><g><title>generics_of (80,251 samples, 0.13%)</title><rect x="45.4265%" y="149" width="0.1312%" height="15" fill="rgb(233,208,19)"/><text x="45.6765%" y="159.50"></text></g><g><title>impl_item_implementor_ids (62,890 samples, 0.10%)</title><rect x="45.5577%" y="149" width="0.1028%" height="15" fill="rgb(216,164,2)"/><text x="45.8077%" y="159.50"></text></g><g><title>item_attrs (122,533 samples, 0.20%)</title><rect x="45.7497%" y="149" width="0.2004%" height="15" fill="rgb(220,129,5)"/><text x="45.9997%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (116,813 samples, 0.19%)</title><rect x="45.7591%" y="133" width="0.1910%" height="15" fill="rgb(242,17,10)"/><text x="46.0091%" y="143.50"></text></g><g><title>evaluate_obligation (108,771 samples, 0.18%)</title><rect x="46.2044%" y="133" width="0.1779%" height="15" fill="rgb(242,107,0)"/><text x="46.4544%" y="143.50"></text></g><g><title>method_autoderef_steps (217,203 samples, 0.36%)</title><rect x="46.0430%" y="149" width="0.3552%" height="15" fill="rgb(251,28,31)"/><text x="46.2930%" y="159.50"></text></g><g><title>evaluate_obligation (75,131 samples, 0.12%)</title><rect x="46.4547%" y="133" width="0.1229%" height="15" fill="rgb(233,223,10)"/><text x="46.7047%" y="143.50"></text></g><g><title>object_safety_violations (155,181 samples, 0.25%)</title><rect x="46.3982%" y="149" width="0.2538%" height="15" fill="rgb(215,21,27)"/><text x="46.6482%" y="159.50"></text></g><g><title>explicit_predicates_of (95,140 samples, 0.16%)</title><rect x="46.9165%" y="117" width="0.1556%" height="15" fill="rgb(232,23,21)"/><text x="47.1665%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (75,280 samples, 0.12%)</title><rect x="46.9490%" y="101" width="0.1231%" height="15" fill="rgb(244,5,23)"/><text x="47.1990%" y="111.50"></text></g><g><title>predicates_of (276,272 samples, 0.45%)</title><rect x="46.6870%" y="149" width="0.4518%" height="15" fill="rgb(226,81,46)"/><text x="46.9370%" y="159.50"></text></g><g><title>predicates_defined_on (194,450 samples, 0.32%)</title><rect x="46.8208%" y="133" width="0.3180%" height="15" fill="rgb(247,70,30)"/><text x="47.0708%" y="143.50"></text></g><g><title>item_bodies_checking (7,789,807 samples, 12.74%)</title><rect x="34.5763%" y="197" width="12.7382%" height="15" fill="rgb(212,68,19)"/><text x="34.8263%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (7,786,357 samples, 12.73%)</title><rect x="34.5820%" y="181" width="12.7325%" height="15" fill="rgb(240,187,13)"/><text x="34.8320%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (7,773,537 samples, 12.71%)</title><rect x="34.6029%" y="165" width="12.7116%" height="15" fill="rgb(223,113,26)"/><text x="34.8529%" y="175.50">typeck</text></g><g><title>generics_of (461,577 samples, 0.75%)</title><rect x="52.3440%" y="133" width="0.7548%" height="15" fill="rgb(206,192,2)"/><text x="52.5940%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (322,074 samples, 0.53%)</title><rect x="52.5721%" y="117" width="0.5267%" height="15" fill="rgb(241,108,4)"/><text x="52.8221%" y="127.50"></text></g><g><title>impl_polarity (102,591 samples, 0.17%)</title><rect x="53.1324%" y="133" width="0.1678%" height="15" fill="rgb(247,173,49)"/><text x="53.3824%" y="143.50"></text></g><g><title>impl_trait_ref (674,018 samples, 1.10%)</title><rect x="53.3002%" y="133" width="1.1022%" height="15" fill="rgb(224,114,35)"/><text x="53.5502%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (542,498 samples, 0.89%)</title><rect x="53.5152%" y="117" width="0.8871%" height="15" fill="rgb(245,159,27)"/><text x="53.7652%" y="127.50"></text></g><g><title>opt_def_kind (121,422 samples, 0.20%)</title><rect x="54.6874%" y="117" width="0.1986%" height="15" fill="rgb(245,172,44)"/><text x="54.9374%" y="127.50"></text></g><g><title>metadata_decode_entry_opt_def_kind (67,930 samples, 0.11%)</title><rect x="54.7749%" y="101" width="0.1111%" height="15" fill="rgb(236,23,11)"/><text x="55.0249%" y="111.50"></text></g><g><title>explicit_predicates_of (100,081 samples, 0.16%)</title><rect x="55.4848%" y="101" width="0.1637%" height="15" fill="rgb(205,117,38)"/><text x="55.7348%" y="111.50"></text></g><g><title>predicates_of (824,199 samples, 1.35%)</title><rect x="54.4569%" y="133" width="1.3478%" height="15" fill="rgb(237,72,25)"/><text x="54.7069%" y="143.50"></text></g><g><title>predicates_defined_on (561,796 samples, 0.92%)</title><rect x="54.8860%" y="117" width="0.9187%" height="15" fill="rgb(244,70,9)"/><text x="55.1360%" y="127.50"></text></g><g><title>inferred_outlives_of (95,520 samples, 0.16%)</title><rect x="55.6484%" y="101" width="0.1562%" height="15" fill="rgb(217,125,39)"/><text x="55.8984%" y="111.50"></text></g><g><title>specializes (1,958,101 samples, 3.20%)</title><rect x="55.8046%" y="133" width="3.2020%" height="15" fill="rgb(235,36,10)"/><text x="56.0546%" y="143.50">spe..</text></g><g><title>param_env (1,191,743 samples, 1.95%)</title><rect x="57.0578%" y="117" width="1.9488%" height="15" fill="rgb(251,123,47)"/><text x="57.3078%" y="127.50">p..</text></g><g><title>def_span (621,309 samples, 1.02%)</title><rect x="57.9906%" y="101" width="1.0160%" height="15" fill="rgb(221,13,13)"/><text x="58.2406%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (563,717 samples, 0.92%)</title><rect x="58.0848%" y="85" width="0.9218%" height="15" fill="rgb(238,131,9)"/><text x="58.3348%" y="95.50"></text></g><g><title>trait_impls_of (68,411 samples, 0.11%)</title><rect x="59.0098%" y="133" width="0.1119%" height="15" fill="rgb(211,50,8)"/><text x="59.2598%" y="143.50"></text></g><g><title>evaluate_obligation (6,164,008 samples, 10.08%)</title><rect x="49.0555%" y="149" width="10.0796%" height="15" fill="rgb(245,182,24)"/><text x="49.3055%" y="159.50">evaluate_obliga..</text></g><g><title>specializes (142,022 samples, 0.23%)</title><rect x="59.2494%" y="149" width="0.2322%" height="15" fill="rgb(242,14,37)"/><text x="59.4994%" y="159.50"></text></g><g><title>item_types_checking (7,464,073 samples, 12.21%)</title><rect x="47.3145%" y="197" width="12.2055%" height="15" fill="rgb(246,228,12)"/><text x="47.5645%" y="207.50">item_types_checking</text></g><g><title>check_mod_item_types (7,461,813 samples, 12.20%)</title><rect x="47.3182%" y="181" width="12.2018%" height="15" fill="rgb(213,55,15)"/><text x="47.5682%" y="191.50">check_mod_item_typ..</text></g><g><title>typeck (7,300,542 samples, 11.94%)</title><rect x="47.5819%" y="165" width="11.9381%" height="15" fill="rgb(209,9,3)"/><text x="47.8319%" y="175.50">typeck</text></g><g><title>fn_sig (113,962 samples, 0.19%)</title><rect x="59.7208%" y="165" width="0.1864%" height="15" fill="rgb(230,59,30)"/><text x="59.9708%" y="175.50"></text></g><g><title>named_region_map (252,292 samples, 0.41%)</title><rect x="59.9811%" y="149" width="0.4126%" height="15" fill="rgb(209,121,21)"/><text x="60.2311%" y="159.50"></text></g><g><title>resolve_lifetimes (241,692 samples, 0.40%)</title><rect x="59.9984%" y="133" width="0.3952%" height="15" fill="rgb(220,109,13)"/><text x="60.2484%" y="143.50"></text></g><g><title>lint_levels (75,461 samples, 0.12%)</title><rect x="60.2702%" y="117" width="0.1234%" height="15" fill="rgb(232,18,1)"/><text x="60.5202%" y="127.50"></text></g><g><title>generics_of (312,822 samples, 0.51%)</title><rect x="59.9072%" y="165" width="0.5115%" height="15" fill="rgb(215,41,42)"/><text x="60.1572%" y="175.50"></text></g><g><title>explicit_predicates_of (70,480 samples, 0.12%)</title><rect x="60.5474%" y="133" width="0.1153%" height="15" fill="rgb(224,123,36)"/><text x="60.7974%" y="143.50"></text></g><g><title>predicates_of (286,803 samples, 0.47%)</title><rect x="60.4777%" y="165" width="0.4690%" height="15" fill="rgb(240,125,3)"/><text x="60.7277%" y="175.50"></text></g><g><title>predicates_defined_on (270,753 samples, 0.44%)</title><rect x="60.5039%" y="149" width="0.4427%" height="15" fill="rgb(205,98,50)"/><text x="60.7539%" y="159.50"></text></g><g><title>inferred_outlives_of (173,672 samples, 0.28%)</title><rect x="60.6627%" y="133" width="0.2840%" height="15" fill="rgb(205,185,37)"/><text x="60.9127%" y="143.50"></text></g><g><title>inferred_outlives_crate (159,112 samples, 0.26%)</title><rect x="60.6865%" y="117" width="0.2602%" height="15" fill="rgb(238,207,15)"/><text x="60.9365%" y="127.50"></text></g><g><title>type_of (93,441 samples, 0.15%)</title><rect x="60.7939%" y="101" width="0.1528%" height="15" fill="rgb(213,199,42)"/><text x="61.0439%" y="111.50"></text></g><g><title>type_collecting (954,310 samples, 1.56%)</title><rect x="59.5229%" y="197" width="1.5605%" height="15" fill="rgb(235,201,11)"/><text x="59.7729%" y="207.50"></text></g><g><title>collect_mod_item_types (944,850 samples, 1.55%)</title><rect x="59.5383%" y="181" width="1.5451%" height="15" fill="rgb(207,46,11)"/><text x="59.7883%" y="191.50"></text></g><g><title>type_of (83,622 samples, 0.14%)</title><rect x="60.9467%" y="165" width="0.1367%" height="15" fill="rgb(241,35,35)"/><text x="61.1967%" y="175.50"></text></g><g><title>adt_sized_constraint (73,271 samples, 0.12%)</title><rect x="61.8343%" y="133" width="0.1198%" height="15" fill="rgb(243,32,47)"/><text x="62.0843%" y="143.50"></text></g><g><title>adt_sized_constraint (100,661 samples, 0.16%)</title><rect x="61.7904%" y="149" width="0.1646%" height="15" fill="rgb(247,202,23)"/><text x="62.0404%" y="159.50"></text></g><g><title>evaluate_obligation (225,343 samples, 0.37%)</title><rect x="61.6434%" y="165" width="0.3685%" height="15" fill="rgb(219,102,11)"/><text x="61.8934%" y="175.50"></text></g><g><title>implied_outlives_bounds (80,200 samples, 0.13%)</title><rect x="62.0119%" y="165" width="0.1311%" height="15" fill="rgb(243,110,44)"/><text x="62.2619%" y="175.50"></text></g><g><title>check_impl_item_well_formed (747,759 samples, 1.22%)</title><rect x="61.1599%" y="181" width="1.2228%" height="15" fill="rgb(222,74,54)"/><text x="61.4099%" y="191.50"></text></g><g><title>adt_sized_constraint (69,880 samples, 0.11%)</title><rect x="62.9793%" y="117" width="0.1143%" height="15" fill="rgb(216,99,12)"/><text x="63.2293%" y="127.50"></text></g><g><title>adt_sized_constraint (86,890 samples, 0.14%)</title><rect x="62.9525%" y="133" width="0.1421%" height="15" fill="rgb(226,22,26)"/><text x="63.2025%" y="143.50"></text></g><g><title>adt_sized_constraint (115,861 samples, 0.19%)</title><rect x="62.9062%" y="149" width="0.1895%" height="15" fill="rgb(217,163,10)"/><text x="63.1562%" y="159.50"></text></g><g><title>evaluate_obligation (205,022 samples, 0.34%)</title><rect x="62.7622%" y="165" width="0.3353%" height="15" fill="rgb(213,25,53)"/><text x="63.0122%" y="175.50"></text></g><g><title>param_env (116,641 samples, 0.19%)</title><rect x="63.1566%" y="165" width="0.1907%" height="15" fill="rgb(252,105,26)"/><text x="63.4066%" y="175.50"></text></g><g><title>analysis (38,156,305 samples, 62.39%)</title><rect x="1.0676%" y="229" width="62.3946%" height="15" fill="rgb(220,39,43)"/><text x="1.3176%" y="239.50">analysis</text></g><g><title>type_check_crate (27,621,257 samples, 45.17%)</title><rect x="18.2949%" y="213" width="45.1673%" height="15" fill="rgb(229,68,48)"/><text x="18.5449%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,453,706 samples, 2.38%)</title><rect x="61.0850%" y="197" width="2.3772%" height="15" fill="rgb(252,8,32)"/><text x="61.3350%" y="207.50">wf..</text></g><g><title>check_item_well_formed (660,107 samples, 1.08%)</title><rect x="62.3827%" y="181" width="1.0794%" height="15" fill="rgb(223,20,43)"/><text x="62.6327%" y="191.50"></text></g><g><title>codegen_crate (330,794 samples, 0.54%)</title><rect x="63.4786%" y="229" width="0.5409%" height="15" fill="rgb(229,81,49)"/><text x="63.7286%" y="239.50"></text></g><g><title>AST_validation (108,121 samples, 0.18%)</title><rect x="64.3369%" y="213" width="0.1768%" height="15" fill="rgb(236,28,36)"/><text x="64.5869%" y="223.50"></text></g><g><title>crate_injection (77,481 samples, 0.13%)</title><rect x="64.5825%" y="213" width="0.1267%" height="15" fill="rgb(249,185,26)"/><text x="64.8325%" y="223.50"></text></g><g><title>metadata_load_macro (109,691 samples, 0.18%)</title><rect x="79.8193%" y="181" width="0.1794%" height="15" fill="rgb(249,174,33)"/><text x="80.0693%" y="191.50"></text></g><g><title>macro_expand_crate (11,794,342 samples, 19.29%)</title><rect x="64.7092%" y="213" width="19.2865%" height="15" fill="rgb(233,201,37)"/><text x="64.9592%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (11,773,412 samples, 19.25%)</title><rect x="64.7434%" y="197" width="19.2523%" height="15" fill="rgb(221,78,26)"/><text x="64.9934%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,444,338 samples, 4.00%)</title><rect x="79.9987%" y="181" width="3.9971%" height="15" fill="rgb(250,127,30)"/><text x="80.2487%" y="191.50">meta..</text></g><g><title>metadata_register_crate (860,269 samples, 1.41%)</title><rect x="82.5890%" y="165" width="1.4067%" height="15" fill="rgb(230,49,44)"/><text x="82.8390%" y="175.50"></text></g><g><title>metadata_register_crate (66,942 samples, 0.11%)</title><rect x="83.8863%" y="149" width="0.1095%" height="15" fill="rgb(229,67,23)"/><text x="84.1363%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (106,842 samples, 0.17%)</title><rect x="84.0023%" y="213" width="0.1747%" height="15" fill="rgb(249,83,47)"/><text x="84.2523%" y="223.50"></text></g><g><title>finalize_macro_resolutions (274,583 samples, 0.45%)</title><rect x="84.2728%" y="197" width="0.4490%" height="15" fill="rgb(215,43,3)"/><text x="84.5228%" y="207.50"></text></g><g><title>late_resolve_crate (1,577,657 samples, 2.58%)</title><rect x="84.7218%" y="197" width="2.5798%" height="15" fill="rgb(238,154,13)"/><text x="84.9718%" y="207.50">la..</text></g><g><title>configure_and_expand (14,291,079 samples, 23.37%)</title><rect x="64.0195%" y="229" width="23.3693%" height="15" fill="rgb(219,56,2)"/><text x="64.2695%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,964,112 samples, 3.21%)</title><rect x="84.1770%" y="213" width="3.2118%" height="15" fill="rgb(233,0,4)"/><text x="84.4270%" y="223.50">res..</text></g><g><title>drop_ast (68,011 samples, 0.11%)</title><rect x="87.3888%" y="229" width="0.1112%" height="15" fill="rgb(235,30,7)"/><text x="87.6388%" y="239.50"></text></g><g><title>early_lint_checks (209,142 samples, 0.34%)</title><rect x="87.5266%" y="229" width="0.3420%" height="15" fill="rgb(250,79,13)"/><text x="87.7766%" y="239.50"></text></g><g><title>free_global_ctxt (3,048,104 samples, 4.98%)</title><rect x="87.8686%" y="229" width="4.9844%" height="15" fill="rgb(211,146,34)"/><text x="88.1186%" y="239.50">free_g..</text></g><g><title>crate_hash (67,170 samples, 0.11%)</title><rect x="93.3474%" y="213" width="0.1098%" height="15" fill="rgb(228,22,38)"/><text x="93.5974%" y="223.50"></text></g><g><title>generate_crate_metadata (432,994 samples, 0.71%)</title><rect x="92.8530%" y="229" width="0.7080%" height="15" fill="rgb(235,168,5)"/><text x="93.1030%" y="239.50"></text></g><g><title>hir_lowering (1,133,633 samples, 1.85%)</title><rect x="93.5610%" y="229" width="1.8538%" height="15" fill="rgb(221,155,16)"/><text x="93.8110%" y="239.50">h..</text></g><g><title>parse_crate (1,496,886 samples, 2.45%)</title><rect x="95.4958%" y="229" width="2.4478%" height="15" fill="rgb(215,215,53)"/><text x="95.7458%" y="239.50">pa..</text></g><g><title>prepare_outputs (266,023 samples, 0.44%)</title><rect x="97.9564%" y="229" width="0.4350%" height="15" fill="rgb(223,4,10)"/><text x="98.2064%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (578,256 samples, 0.95%)</title><rect x="98.3914%" y="229" width="0.9456%" height="15" fill="rgb(234,103,6)"/><text x="98.6414%" y="239.50"></text></g><g><title>setup_global_ctxt (120,111 samples, 0.20%)</title><rect x="99.3553%" y="229" width="0.1964%" height="15" fill="rgb(227,97,0)"/><text x="99.6053%" y="239.50"></text></g><g><title>all (61,153,261 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (61,153,261 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (274,133 samples, 0.45%)</title><rect x="99.5517%" y="229" width="0.4483%" height="15" fill="rgb(222,22,37)"/><text x="99.8017%" y="239.50"></text></g></svg></svg>