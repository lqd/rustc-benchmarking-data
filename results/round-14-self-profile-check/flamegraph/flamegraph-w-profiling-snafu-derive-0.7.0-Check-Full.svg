<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (766,909 samples, 0.10%)</title><rect x="15.0009%" y="197" width="0.1009%" height="15" fill="rgb(227,0,7)"/><text x="15.2509%" y="207.50"></text></g><g><title>codegen_fn_attrs (1,002,659 samples, 0.13%)</title><rect x="15.5040%" y="181" width="0.1319%" height="15" fill="rgb(217,0,24)"/><text x="15.7540%" y="191.50"></text></g><g><title>adt_drop_tys (839,479 samples, 0.11%)</title><rect x="18.7475%" y="133" width="0.1104%" height="15" fill="rgb(221,193,54)"/><text x="18.9975%" y="143.50"></text></g><g><title>adt_drop_tys (1,962,572 samples, 0.26%)</title><rect x="18.7268%" y="149" width="0.2581%" height="15" fill="rgb(248,212,6)"/><text x="18.9768%" y="159.50"></text></g><g><title>is_copy_raw (4,166,443 samples, 0.55%)</title><rect x="18.9850%" y="149" width="0.5480%" height="15" fill="rgb(208,68,35)"/><text x="19.2350%" y="159.50"></text></g><g><title>evaluate_obligation (3,342,446 samples, 0.44%)</title><rect x="19.0933%" y="133" width="0.4396%" height="15" fill="rgb(232,128,0)"/><text x="19.3433%" y="143.50"></text></g><g><title>needs_drop_raw (7,215,795 samples, 0.95%)</title><rect x="18.6135%" y="165" width="0.9490%" height="15" fill="rgb(207,160,47)"/><text x="18.8635%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (3,990,036 samples, 0.52%)</title><rect x="19.7126%" y="149" width="0.5248%" height="15" fill="rgb(228,23,34)"/><text x="19.9626%" y="159.50"></text></g><g><title>specialization_graph_of (2,048,985 samples, 0.27%)</title><rect x="20.2693%" y="149" width="0.2695%" height="15" fill="rgb(218,30,26)"/><text x="20.5193%" y="159.50"></text></g><g><title>impl_trait_ref (996,296 samples, 0.13%)</title><rect x="20.4078%" y="133" width="0.1310%" height="15" fill="rgb(220,122,19)"/><text x="20.6578%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (852,364 samples, 0.11%)</title><rect x="20.4267%" y="117" width="0.1121%" height="15" fill="rgb(250,228,42)"/><text x="20.6767%" y="127.50"></text></g><g><title>resolve_instance (7,761,063 samples, 1.02%)</title><rect x="19.5625%" y="165" width="1.0207%" height="15" fill="rgb(240,193,28)"/><text x="19.8125%" y="175.50"></text></g><g><title>thir_body (8,546,669 samples, 1.12%)</title><rect x="20.6051%" y="165" width="1.1241%" height="15" fill="rgb(216,20,37)"/><text x="20.8551%" y="175.50"></text></g><g><title>mir_const (56,322,825 samples, 7.41%)</title><rect x="14.3394%" y="213" width="7.4076%" height="15" fill="rgb(206,188,39)"/><text x="14.5894%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (50,526,065 samples, 6.65%)</title><rect x="15.1018%" y="197" width="6.6452%" height="15" fill="rgb(217,207,13)"/><text x="15.3518%" y="207.50">unsafety_..</text></g><g><title>mir_built (46,461,093 samples, 6.11%)</title><rect x="15.6364%" y="181" width="6.1106%" height="15" fill="rgb(231,73,38)"/><text x="15.8864%" y="191.50">mir_built</text></g><g><title>mir_const_qualif (1,613,295 samples, 0.21%)</title><rect x="21.7469%" y="213" width="0.2122%" height="15" fill="rgb(225,20,46)"/><text x="21.9969%" y="223.50"></text></g><g><title>mir_promoted (63,332,425 samples, 8.33%)</title><rect x="13.6297%" y="229" width="8.3295%" height="15" fill="rgb(210,31,41)"/><text x="13.8797%" y="239.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,227,345 samples, 0.29%)</title><rect x="21.9601%" y="229" width="0.2929%" height="15" fill="rgb(221,200,47)"/><text x="22.2101%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (2,541,824 samples, 0.33%)</title><rect x="22.2530%" y="229" width="0.3343%" height="15" fill="rgb(226,26,5)"/><text x="22.5030%" y="239.50"></text></g><g><title>normalize_projection_ty (1,692,126 samples, 0.22%)</title><rect x="22.3648%" y="213" width="0.2225%" height="15" fill="rgb(249,33,26)"/><text x="22.6148%" y="223.50"></text></g><g><title>type_op_normalize_predicate (5,809,737 samples, 0.76%)</title><rect x="22.5873%" y="229" width="0.7641%" height="15" fill="rgb(235,183,28)"/><text x="22.8373%" y="239.50"></text></g><g><title>normalize_projection_ty (2,970,371 samples, 0.39%)</title><rect x="22.9608%" y="213" width="0.3907%" height="15" fill="rgb(221,5,38)"/><text x="23.2108%" y="223.50"></text></g><g><title>type_op_prove_predicate (18,537,609 samples, 2.44%)</title><rect x="23.3544%" y="229" width="2.4381%" height="15" fill="rgb(247,18,42)"/><text x="23.6044%" y="239.50">ty..</text></g><g><title>evaluate_obligation (1,596,676 samples, 0.21%)</title><rect x="25.5824%" y="213" width="0.2100%" height="15" fill="rgb(241,131,45)"/><text x="25.8324%" y="223.50"></text></g><g><title>MIR_borrow_checking (192,932,320 samples, 25.37%)</title><rect x="0.4202%" y="261" width="25.3745%" height="15" fill="rgb(249,31,29)"/><text x="0.6702%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (192,275,633 samples, 25.29%)</title><rect x="0.5065%" y="245" width="25.2881%" height="15" fill="rgb(225,111,53)"/><text x="0.7565%" y="255.50">mir_borrowck</text></g><g><title>hir_module_items (902,889 samples, 0.12%)</title><rect x="25.8742%" y="261" width="0.1187%" height="15" fill="rgb(238,160,17)"/><text x="26.1242%" y="271.50"></text></g><g><title>codegen_fn_attrs (850,899 samples, 0.11%)</title><rect x="26.1603%" y="229" width="0.1119%" height="15" fill="rgb(214,148,48)"/><text x="26.4103%" y="239.50"></text></g><g><title>check_mod_attrs (2,085,614 samples, 0.27%)</title><rect x="25.9979%" y="245" width="0.2743%" height="15" fill="rgb(232,36,49)"/><text x="26.2479%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (1,130,754 samples, 0.15%)</title><rect x="26.3961%" y="245" width="0.1487%" height="15" fill="rgb(209,103,24)"/><text x="26.6461%" y="255.50"></text></g><g><title>misc_checking_1 (4,364,339 samples, 0.57%)</title><rect x="25.9930%" y="261" width="0.5740%" height="15" fill="rgb(229,88,8)"/><text x="26.2430%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (3,831,932 samples, 0.50%)</title><rect x="26.5673%" y="245" width="0.5040%" height="15" fill="rgb(213,181,19)"/><text x="26.8173%" y="255.50"></text></g><g><title>check_mod_liveness (3,241,438 samples, 0.43%)</title><rect x="26.6450%" y="229" width="0.4263%" height="15" fill="rgb(254,191,54)"/><text x="26.8950%" y="239.50"></text></g><g><title>misc_checking_2 (8,399,533 samples, 1.10%)</title><rect x="26.5670%" y="261" width="1.1047%" height="15" fill="rgb(241,83,37)"/><text x="26.8170%" y="271.50"></text></g><g><title>match_checking (4,565,531 samples, 0.60%)</title><rect x="27.0713%" y="245" width="0.6005%" height="15" fill="rgb(233,36,39)"/><text x="27.3213%" y="255.50"></text></g><g><title>check_match (4,393,379 samples, 0.58%)</title><rect x="27.0939%" y="229" width="0.5778%" height="15" fill="rgb(226,3,54)"/><text x="27.3439%" y="239.50"></text></g><g><title>check_private_in_public (1,055,642 samples, 0.14%)</title><rect x="27.6734%" y="245" width="0.1388%" height="15" fill="rgb(245,192,40)"/><text x="27.9234%" y="255.50"></text></g><g><title>death_checking (1,883,741 samples, 0.25%)</title><rect x="27.8123%" y="245" width="0.2477%" height="15" fill="rgb(238,167,29)"/><text x="28.0623%" y="255.50"></text></g><g><title>eval_to_const_value_raw (765,467 samples, 0.10%)</title><rect x="28.4230%" y="213" width="0.1007%" height="15" fill="rgb(232,182,51)"/><text x="28.6730%" y="223.50"></text></g><g><title>param_env (959,043 samples, 0.13%)</title><rect x="28.5236%" y="213" width="0.1261%" height="15" fill="rgb(231,60,39)"/><text x="28.7736%" y="223.50"></text></g><g><title>crate_lints (4,704,632 samples, 0.62%)</title><rect x="28.0605%" y="229" width="0.6188%" height="15" fill="rgb(208,69,12)"/><text x="28.3105%" y="239.50"></text></g><g><title>layout_of (1,138,595 samples, 0.15%)</title><rect x="29.3306%" y="37" width="0.1497%" height="15" fill="rgb(235,93,37)"/><text x="29.5806%" y="47.50"></text></g><g><title>layout_of (1,464,636 samples, 0.19%)</title><rect x="29.3034%" y="53" width="0.1926%" height="15" fill="rgb(213,116,39)"/><text x="29.5534%" y="63.50"></text></g><g><title>layout_of (1,861,021 samples, 0.24%)</title><rect x="29.2775%" y="69" width="0.2448%" height="15" fill="rgb(222,207,29)"/><text x="29.5275%" y="79.50"></text></g><g><title>layout_of (2,003,271 samples, 0.26%)</title><rect x="29.2616%" y="85" width="0.2635%" height="15" fill="rgb(206,96,30)"/><text x="29.5116%" y="95.50"></text></g><g><title>layout_of (2,194,513 samples, 0.29%)</title><rect x="29.2473%" y="101" width="0.2886%" height="15" fill="rgb(218,138,4)"/><text x="29.4973%" y="111.50"></text></g><g><title>layout_of (2,294,945 samples, 0.30%)</title><rect x="29.2383%" y="117" width="0.3018%" height="15" fill="rgb(250,191,14)"/><text x="29.4883%" y="127.50"></text></g><g><title>layout_of (2,443,886 samples, 0.32%)</title><rect x="29.2205%" y="149" width="0.3214%" height="15" fill="rgb(239,60,40)"/><text x="29.4705%" y="159.50"></text></g><g><title>layout_of (2,366,326 samples, 0.31%)</title><rect x="29.2307%" y="133" width="0.3112%" height="15" fill="rgb(206,27,48)"/><text x="29.4807%" y="143.50"></text></g><g><title>layout_of (2,562,629 samples, 0.34%)</title><rect x="29.2051%" y="181" width="0.3370%" height="15" fill="rgb(225,35,8)"/><text x="29.4551%" y="191.50"></text></g><g><title>layout_of (2,516,268 samples, 0.33%)</title><rect x="29.2112%" y="165" width="0.3309%" height="15" fill="rgb(250,213,24)"/><text x="29.4612%" y="175.50"></text></g><g><title>layout_of (2,636,109 samples, 0.35%)</title><rect x="29.1956%" y="197" width="0.3467%" height="15" fill="rgb(247,123,22)"/><text x="29.4456%" y="207.50"></text></g><g><title>lint_checking (11,271,176 samples, 1.48%)</title><rect x="28.0600%" y="245" width="1.4824%" height="15" fill="rgb(231,138,38)"/><text x="28.3100%" y="255.50"></text></g><g><title>module_lints (6,562,734 samples, 0.86%)</title><rect x="28.6793%" y="229" width="0.8631%" height="15" fill="rgb(231,145,46)"/><text x="28.9293%" y="239.50"></text></g><g><title>lint_mod (6,551,114 samples, 0.86%)</title><rect x="28.6808%" y="213" width="0.8616%" height="15" fill="rgb(251,118,11)"/><text x="28.9308%" y="223.50"></text></g><g><title>privacy_access_levels (919,240 samples, 0.12%)</title><rect x="29.5424%" y="245" width="0.1209%" height="15" fill="rgb(217,147,25)"/><text x="29.7924%" y="255.50"></text></g><g><title>privacy_checking_modules (6,264,899 samples, 0.82%)</title><rect x="29.6633%" y="245" width="0.8240%" height="15" fill="rgb(247,81,37)"/><text x="29.9133%" y="255.50"></text></g><g><title>check_mod_privacy (6,256,619 samples, 0.82%)</title><rect x="29.6644%" y="229" width="0.8229%" height="15" fill="rgb(209,12,38)"/><text x="29.9144%" y="239.50"></text></g><g><title>misc_checking_3 (21,434,968 samples, 2.82%)</title><rect x="27.6718%" y="261" width="2.8191%" height="15" fill="rgb(227,1,9)"/><text x="27.9218%" y="271.50">mi..</text></g><g><title>impl_parent (2,639,998 samples, 0.35%)</title><rect x="31.2392%" y="197" width="0.3472%" height="15" fill="rgb(248,47,43)"/><text x="31.4892%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,437,049 samples, 0.19%)</title><rect x="31.3974%" y="181" width="0.1890%" height="15" fill="rgb(221,10,30)"/><text x="31.6474%" y="191.50"></text></g><g><title>impl_trait_ref (5,691,625 samples, 0.75%)</title><rect x="31.5864%" y="197" width="0.7486%" height="15" fill="rgb(210,229,1)"/><text x="31.8364%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,465,606 samples, 0.59%)</title><rect x="31.7477%" y="181" width="0.5873%" height="15" fill="rgb(222,148,37)"/><text x="31.9977%" y="191.50"></text></g><g><title>trait_impls_of (859,179 samples, 0.11%)</title><rect x="32.3390%" y="197" width="0.1130%" height="15" fill="rgb(234,67,33)"/><text x="32.5890%" y="207.50"></text></g><g><title>coherent_trait (14,353,270 samples, 1.89%)</title><rect x="30.5643%" y="229" width="1.8877%" height="15" fill="rgb(247,98,35)"/><text x="30.8143%" y="239.50">c..</text></g><g><title>specialization_graph_of (13,119,646 samples, 1.73%)</title><rect x="30.7266%" y="213" width="1.7255%" height="15" fill="rgb(247,138,52)"/><text x="30.9766%" y="223.50"></text></g><g><title>coherence_checking (14,570,912 samples, 1.92%)</title><rect x="30.5608%" y="245" width="1.9164%" height="15" fill="rgb(213,79,30)"/><text x="30.8108%" y="255.50">c..</text></g><g><title>associated_items (773,879 samples, 0.10%)</title><rect x="45.9899%" y="197" width="0.1018%" height="15" fill="rgb(246,177,23)"/><text x="46.2399%" y="207.50"></text></g><g><title>adt_dtorck_constraint (971,320 samples, 0.13%)</title><rect x="46.9239%" y="117" width="0.1277%" height="15" fill="rgb(230,62,27)"/><text x="47.1739%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,246,864 samples, 0.16%)</title><rect x="46.8928%" y="133" width="0.1640%" height="15" fill="rgb(216,154,8)"/><text x="47.1428%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,809,871 samples, 0.24%)</title><rect x="46.8313%" y="149" width="0.2380%" height="15" fill="rgb(244,35,45)"/><text x="47.0813%" y="159.50"></text></g><g><title>adt_dtorck_constraint (2,449,559 samples, 0.32%)</title><rect x="46.7611%" y="165" width="0.3222%" height="15" fill="rgb(251,115,12)"/><text x="47.0111%" y="175.50"></text></g><g><title>dropck_outlives (7,475,026 samples, 0.98%)</title><rect x="46.1169%" y="197" width="0.9831%" height="15" fill="rgb(240,54,50)"/><text x="46.3669%" y="207.50"></text></g><g><title>adt_dtorck_constraint (3,252,666 samples, 0.43%)</title><rect x="46.6722%" y="181" width="0.4278%" height="15" fill="rgb(233,84,52)"/><text x="46.9222%" y="191.50"></text></g><g><title>evaluate_obligation (6,546,559 samples, 0.86%)</title><rect x="47.1000%" y="197" width="0.8610%" height="15" fill="rgb(207,117,47)"/><text x="47.3500%" y="207.50"></text></g><g><title>method_autoderef_steps (1,243,953 samples, 0.16%)</title><rect x="48.1368%" y="197" width="0.1636%" height="15" fill="rgb(249,43,39)"/><text x="48.3868%" y="207.50"></text></g><g><title>predicates_of (842,239 samples, 0.11%)</title><rect x="48.3676%" y="197" width="0.1108%" height="15" fill="rgb(209,38,44)"/><text x="48.6176%" y="207.50"></text></g><g><title>dropck_outlives (5,920,904 samples, 0.78%)</title><rect x="59.4501%" y="181" width="0.7787%" height="15" fill="rgb(236,212,23)"/><text x="59.7001%" y="191.50"></text></g><g><title>evaluate_obligation (6,032,118 samples, 0.79%)</title><rect x="60.2288%" y="181" width="0.7933%" height="15" fill="rgb(242,79,21)"/><text x="60.4788%" y="191.50"></text></g><g><title>is_copy_raw (1,026,820 samples, 0.14%)</title><rect x="61.1610%" y="181" width="0.1350%" height="15" fill="rgb(211,96,35)"/><text x="61.4110%" y="191.50"></text></g><g><title>evaluate_obligation (786,008 samples, 0.10%)</title><rect x="61.1927%" y="165" width="0.1034%" height="15" fill="rgb(253,215,40)"/><text x="61.4427%" y="175.50"></text></g><g><title>evaluate_obligation (1,218,979 samples, 0.16%)</title><rect x="61.4671%" y="165" width="0.1603%" height="15" fill="rgb(211,81,21)"/><text x="61.7171%" y="175.50"></text></g><g><title>method_autoderef_steps (2,393,108 samples, 0.31%)</title><rect x="61.3152%" y="181" width="0.3147%" height="15" fill="rgb(208,190,38)"/><text x="61.5652%" y="191.50"></text></g><g><title>typeck (100,541,422 samples, 13.22%)</title><rect x="48.5374%" y="197" width="13.2232%" height="15" fill="rgb(235,213,38)"/><text x="48.7874%" y="207.50">typeck</text></g><g><title>item_bodies_checking (222,684,270 samples, 29.29%)</title><rect x="32.4914%" y="245" width="29.2874%" height="15" fill="rgb(237,122,38)"/><text x="32.7414%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (222,680,110 samples, 29.29%)</title><rect x="32.4920%" y="229" width="29.2869%" height="15" fill="rgb(244,218,35)"/><text x="32.7420%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (222,321,328 samples, 29.24%)</title><rect x="32.5391%" y="213" width="29.2397%" height="15" fill="rgb(240,68,47)"/><text x="32.7891%" y="223.50">typeck</text></g><g><title>mir_borrowck (962,080 samples, 0.13%)</title><rect x="62.6148%" y="181" width="0.1265%" height="15" fill="rgb(210,16,53)"/><text x="62.8648%" y="191.50"></text></g><g><title>mir_built (3,753,792 samples, 0.49%)</title><rect x="62.7645%" y="133" width="0.4937%" height="15" fill="rgb(235,124,12)"/><text x="63.0145%" y="143.50"></text></g><g><title>typeck (3,614,411 samples, 0.48%)</title><rect x="62.7828%" y="117" width="0.4754%" height="15" fill="rgb(224,169,11)"/><text x="63.0328%" y="127.50"></text></g><g><title>mir_const (4,293,748 samples, 0.56%)</title><rect x="62.7484%" y="165" width="0.5647%" height="15" fill="rgb(250,166,2)"/><text x="62.9984%" y="175.50"></text></g><g><title>unsafety_check_result (4,199,607 samples, 0.55%)</title><rect x="62.7608%" y="149" width="0.5523%" height="15" fill="rgb(242,216,29)"/><text x="63.0108%" y="159.50"></text></g><g><title>mir_promoted (4,353,309 samples, 0.57%)</title><rect x="62.7414%" y="181" width="0.5725%" height="15" fill="rgb(230,116,27)"/><text x="62.9914%" y="191.50"></text></g><g><title>type_of (6,153,039 samples, 0.81%)</title><rect x="62.5154%" y="213" width="0.8092%" height="15" fill="rgb(228,99,48)"/><text x="62.7654%" y="223.50"></text></g><g><title>mir_borrowck (5,879,046 samples, 0.77%)</title><rect x="62.5514%" y="197" width="0.7732%" height="15" fill="rgb(253,11,6)"/><text x="62.8014%" y="207.50"></text></g><g><title>typeck (1,344,994 samples, 0.18%)</title><rect x="63.3247%" y="213" width="0.1769%" height="15" fill="rgb(247,143,39)"/><text x="63.5747%" y="223.50"></text></g><g><title>item_types_checking (13,099,286 samples, 1.72%)</title><rect x="61.7789%" y="245" width="1.7228%" height="15" fill="rgb(236,97,10)"/><text x="62.0289%" y="255.50"></text></g><g><title>check_mod_item_types (13,085,856 samples, 1.72%)</title><rect x="61.7806%" y="229" width="1.7211%" height="15" fill="rgb(233,208,19)"/><text x="62.0306%" y="239.50"></text></g><g><title>fn_sig (1,054,720 samples, 0.14%)</title><rect x="63.6618%" y="213" width="0.1387%" height="15" fill="rgb(216,164,2)"/><text x="63.9118%" y="223.50"></text></g><g><title>named_region_map (918,511 samples, 0.12%)</title><rect x="63.9555%" y="197" width="0.1208%" height="15" fill="rgb(220,129,5)"/><text x="64.2055%" y="207.50"></text></g><g><title>resolve_lifetimes (848,581 samples, 0.11%)</title><rect x="63.9647%" y="181" width="0.1116%" height="15" fill="rgb(242,17,10)"/><text x="64.2147%" y="191.50"></text></g><g><title>generics_of (2,143,653 samples, 0.28%)</title><rect x="63.8005%" y="213" width="0.2819%" height="15" fill="rgb(242,107,0)"/><text x="64.0505%" y="223.50"></text></g><g><title>late_bound_vars_map (1,263,656 samples, 0.17%)</title><rect x="64.2441%" y="165" width="0.1662%" height="15" fill="rgb(251,28,31)"/><text x="64.4941%" y="175.50"></text></g><g><title>resolve_lifetimes (1,251,235 samples, 0.16%)</title><rect x="64.2457%" y="149" width="0.1646%" height="15" fill="rgb(233,223,10)"/><text x="64.4957%" y="159.50"></text></g><g><title>lint_levels (1,088,332 samples, 0.14%)</title><rect x="64.2671%" y="133" width="0.1431%" height="15" fill="rgb(215,21,27)"/><text x="64.5171%" y="143.50"></text></g><g><title>explicit_predicates_of (1,855,375 samples, 0.24%)</title><rect x="64.1797%" y="181" width="0.2440%" height="15" fill="rgb(232,23,21)"/><text x="64.4297%" y="191.50"></text></g><g><title>predicates_of (3,654,716 samples, 0.48%)</title><rect x="64.0968%" y="213" width="0.4807%" height="15" fill="rgb(244,5,23)"/><text x="64.3468%" y="223.50"></text></g><g><title>predicates_defined_on (3,401,302 samples, 0.45%)</title><rect x="64.1302%" y="197" width="0.4473%" height="15" fill="rgb(226,81,46)"/><text x="64.3802%" y="207.50"></text></g><g><title>inferred_outlives_of (1,168,852 samples, 0.15%)</title><rect x="64.4238%" y="181" width="0.1537%" height="15" fill="rgb(247,70,30)"/><text x="64.6738%" y="191.50"></text></g><g><title>inferred_outlives_crate (1,086,182 samples, 0.14%)</title><rect x="64.4346%" y="165" width="0.1429%" height="15" fill="rgb(212,68,19)"/><text x="64.6846%" y="175.50"></text></g><g><title>type_collecting (8,721,066 samples, 1.15%)</title><rect x="63.5032%" y="245" width="1.1470%" height="15" fill="rgb(240,187,13)"/><text x="63.7532%" y="255.50"></text></g><g><title>collect_mod_item_types (8,701,066 samples, 1.14%)</title><rect x="63.5058%" y="229" width="1.1444%" height="15" fill="rgb(223,113,26)"/><text x="63.7558%" y="239.50"></text></g><g><title>evaluate_obligation (1,286,256 samples, 0.17%)</title><rect x="65.4099%" y="213" width="0.1692%" height="15" fill="rgb(206,192,2)"/><text x="65.6599%" y="223.50"></text></g><g><title>param_env (766,882 samples, 0.10%)</title><rect x="65.6957%" y="213" width="0.1009%" height="15" fill="rgb(241,108,4)"/><text x="65.9457%" y="223.50"></text></g><g><title>region_scope_tree (2,269,046 samples, 0.30%)</title><rect x="65.8033%" y="213" width="0.2984%" height="15" fill="rgb(247,173,49)"/><text x="66.0533%" y="223.50"></text></g><g><title>check_impl_item_well_formed (10,218,874 samples, 1.34%)</title><rect x="64.7685%" y="229" width="1.3440%" height="15" fill="rgb(224,114,35)"/><text x="65.0185%" y="239.50"></text></g><g><title>adt_sized_constraint (823,687 samples, 0.11%)</title><rect x="66.9968%" y="181" width="0.1083%" height="15" fill="rgb(245,159,27)"/><text x="67.2468%" y="191.50"></text></g><g><title>adt_sized_constraint (1,230,152 samples, 0.16%)</title><rect x="66.9473%" y="197" width="0.1618%" height="15" fill="rgb(245,172,44)"/><text x="67.1973%" y="207.50"></text></g><g><title>evaluate_obligation (2,599,023 samples, 0.34%)</title><rect x="66.7804%" y="213" width="0.3418%" height="15" fill="rgb(236,23,11)"/><text x="67.0304%" y="223.50"></text></g><g><title>param_env (1,015,382 samples, 0.13%)</title><rect x="67.1748%" y="213" width="0.1335%" height="15" fill="rgb(205,117,38)"/><text x="67.4248%" y="223.50"></text></g><g><title>check_item_well_formed (9,944,232 samples, 1.31%)</title><rect x="66.1125%" y="229" width="1.3079%" height="15" fill="rgb(237,72,25)"/><text x="66.3625%" y="239.50"></text></g><g><title>analysis (511,633,539 samples, 67.29%)</title><rect x="0.2038%" y="277" width="67.2901%" height="15" fill="rgb(244,70,9)"/><text x="0.4538%" y="287.50">analysis</text></g><g><title>type_check_crate (281,348,763 samples, 37.00%)</title><rect x="30.4909%" y="261" width="37.0030%" height="15" fill="rgb(217,125,39)"/><text x="30.7409%" y="271.50">type_check_crate</text></g><g><title>wf_checking (21,595,881 samples, 2.84%)</title><rect x="64.6536%" y="245" width="2.8403%" height="15" fill="rgb(235,36,10)"/><text x="64.9036%" y="255.50">wf..</text></g><g><title>metadata_load_macro (777,814 samples, 0.10%)</title><rect x="91.3279%" y="229" width="0.1023%" height="15" fill="rgb(251,123,47)"/><text x="91.5779%" y="239.50"></text></g><g><title>metadata_register_crate (2,633,981 samples, 0.35%)</title><rect x="91.4302%" y="229" width="0.3464%" height="15" fill="rgb(221,13,13)"/><text x="91.6802%" y="239.50"></text></g><g><title>metadata_register_crate (939,931 samples, 0.12%)</title><rect x="91.6530%" y="213" width="0.1236%" height="15" fill="rgb(238,131,9)"/><text x="91.9030%" y="223.50"></text></g><g><title>macro_expand_crate (183,305,661 samples, 24.11%)</title><rect x="67.7365%" y="261" width="24.1084%" height="15" fill="rgb(211,50,8)"/><text x="67.9865%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (183,279,121 samples, 24.10%)</title><rect x="67.7400%" y="245" width="24.1049%" height="15" fill="rgb(245,182,24)"/><text x="67.9900%" y="255.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (928,001 samples, 0.12%)</title><rect x="91.8451%" y="261" width="0.1221%" height="15" fill="rgb(242,14,37)"/><text x="92.0951%" y="271.50"></text></g><g><title>finalize_macro_resolutions (2,732,501 samples, 0.36%)</title><rect x="92.1015%" y="245" width="0.3594%" height="15" fill="rgb(246,228,12)"/><text x="92.3515%" y="255.50"></text></g><g><title>late_resolve_crate (10,168,133 samples, 1.34%)</title><rect x="92.4609%" y="245" width="1.3373%" height="15" fill="rgb(213,55,15)"/><text x="92.7109%" y="255.50"></text></g><g><title>configure_and_expand (200,587,314 samples, 26.38%)</title><rect x="67.5603%" y="277" width="26.3813%" height="15" fill="rgb(209,9,3)"/><text x="67.8103%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (14,283,269 samples, 1.88%)</title><rect x="92.0631%" y="261" width="1.8785%" height="15" fill="rgb(230,59,30)"/><text x="92.3131%" y="271.50">r..</text></g><g><title>drop_ast (1,229,013 samples, 0.16%)</title><rect x="93.9416%" y="277" width="0.1616%" height="15" fill="rgb(209,121,21)"/><text x="94.1916%" y="287.50"></text></g><g><title>early_lint_checks (3,253,937 samples, 0.43%)</title><rect x="94.1063%" y="277" width="0.4280%" height="15" fill="rgb(220,109,13)"/><text x="94.3563%" y="287.50"></text></g><g><title>free_global_ctxt (7,103,130 samples, 0.93%)</title><rect x="94.5342%" y="277" width="0.9342%" height="15" fill="rgb(232,18,1)"/><text x="94.7842%" y="287.50"></text></g><g><title>hir_lowering (18,228,833 samples, 2.40%)</title><rect x="95.4978%" y="277" width="2.3975%" height="15" fill="rgb(215,41,42)"/><text x="95.7478%" y="287.50">hi..</text></g><g><title>parse_crate (13,566,942 samples, 1.78%)</title><rect x="97.9051%" y="277" width="1.7843%" height="15" fill="rgb(224,123,36)"/><text x="98.1551%" y="287.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,603,388 samples, 0.21%)</title><rect x="99.7231%" y="277" width="0.2109%" height="15" fill="rgb(240,125,3)"/><text x="99.9731%" y="287.50"></text></g><g><title>all (760,340,360 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (760,340,360 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="303.50">rustc</text></g></svg></svg>