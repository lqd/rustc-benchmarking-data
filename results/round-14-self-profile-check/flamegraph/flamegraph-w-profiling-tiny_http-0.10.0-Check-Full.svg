<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (404,514 samples, 0.11%)</title><rect x="14.0810%" y="149" width="0.1132%" height="15" fill="rgb(227,0,7)"/><text x="14.3310%" y="159.50"></text></g><g><title>param_env (936,613 samples, 0.26%)</title><rect x="16.0864%" y="117" width="0.2620%" height="15" fill="rgb(217,0,24)"/><text x="16.3364%" y="127.50"></text></g><g><title>item_attrs (982,720 samples, 0.27%)</title><rect x="16.9637%" y="85" width="0.2749%" height="15" fill="rgb(221,193,54)"/><text x="17.2137%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (949,529 samples, 0.27%)</title><rect x="16.9730%" y="69" width="0.2656%" height="15" fill="rgb(248,212,6)"/><text x="17.2230%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,330,581 samples, 0.37%)</title><rect x="16.8843%" y="101" width="0.3722%" height="15" fill="rgb(208,68,35)"/><text x="17.1343%" y="111.50"></text></g><g><title>is_copy_raw (662,250 samples, 0.19%)</title><rect x="20.4183%" y="85" width="0.1853%" height="15" fill="rgb(232,128,0)"/><text x="20.6683%" y="95.50"></text></g><g><title>evaluate_obligation (599,199 samples, 0.17%)</title><rect x="20.4360%" y="69" width="0.1676%" height="15" fill="rgb(207,160,47)"/><text x="20.6860%" y="79.50"></text></g><g><title>is_copy_raw (367,807 samples, 0.10%)</title><rect x="20.8612%" y="53" width="0.1029%" height="15" fill="rgb(228,23,34)"/><text x="21.1112%" y="63.50"></text></g><g><title>adt_drop_tys (1,036,452 samples, 0.29%)</title><rect x="20.7762%" y="69" width="0.2899%" height="15" fill="rgb(218,30,26)"/><text x="21.0262%" y="79.50"></text></g><g><title>is_copy_raw (4,043,015 samples, 1.13%)</title><rect x="21.0661%" y="69" width="1.1310%" height="15" fill="rgb(220,122,19)"/><text x="21.3161%" y="79.50"></text></g><g><title>evaluate_obligation (3,270,493 samples, 0.91%)</title><rect x="21.2822%" y="53" width="0.9149%" height="15" fill="rgb(250,228,42)"/><text x="21.5322%" y="63.50"></text></g><g><title>needs_drop_raw (5,709,923 samples, 1.60%)</title><rect x="20.6047%" y="85" width="1.5974%" height="15" fill="rgb(240,193,28)"/><text x="20.8547%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,185,136 samples, 0.33%)</title><rect x="22.4612%" y="69" width="0.3315%" height="15" fill="rgb(216,20,37)"/><text x="22.7112%" y="79.50"></text></g><g><title>specialization_graph_of (456,555 samples, 0.13%)</title><rect x="22.8776%" y="69" width="0.1277%" height="15" fill="rgb(206,188,39)"/><text x="23.1276%" y="79.50"></text></g><g><title>resolve_instance (3,124,504 samples, 0.87%)</title><rect x="22.2133%" y="85" width="0.8741%" height="15" fill="rgb(217,207,13)"/><text x="22.4633%" y="95.50"></text></g><g><title>thir_body (4,287,537 samples, 1.20%)</title><rect x="23.1182%" y="85" width="1.1994%" height="15" fill="rgb(231,73,38)"/><text x="23.3682%" y="95.50"></text></g><g><title>mir_const (32,698,653 samples, 9.15%)</title><rect x="15.1943%" y="133" width="9.1475%" height="15" fill="rgb(225,20,46)"/><text x="15.4443%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (28,573,288 samples, 7.99%)</title><rect x="16.3484%" y="117" width="7.9934%" height="15" fill="rgb(210,31,41)"/><text x="16.5984%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (25,327,111 samples, 7.09%)</title><rect x="17.2565%" y="101" width="7.0853%" height="15" fill="rgb(221,200,47)"/><text x="17.5065%" y="111.50">mir_built</text></g><g><title>has_structural_eq_impls (462,796 samples, 0.13%)</title><rect x="24.4075%" y="117" width="0.1295%" height="15" fill="rgb(226,26,5)"/><text x="24.6575%" y="127.50"></text></g><g><title>evaluate_obligation (378,035 samples, 0.11%)</title><rect x="24.4312%" y="101" width="0.1058%" height="15" fill="rgb(249,33,26)"/><text x="24.6812%" y="111.50"></text></g><g><title>mir_const (485,385 samples, 0.14%)</title><rect x="24.5869%" y="117" width="0.1358%" height="15" fill="rgb(235,183,28)"/><text x="24.8369%" y="127.50"></text></g><g><title>unsafety_check_result (459,275 samples, 0.13%)</title><rect x="24.5942%" y="101" width="0.1285%" height="15" fill="rgb(221,5,38)"/><text x="24.8442%" y="111.50"></text></g><g><title>mir_built (426,264 samples, 0.12%)</title><rect x="24.6035%" y="85" width="0.1192%" height="15" fill="rgb(247,18,42)"/><text x="24.8535%" y="95.50"></text></g><g><title>mir_const_qualif (1,366,137 samples, 0.38%)</title><rect x="24.3418%" y="133" width="0.3822%" height="15" fill="rgb(241,131,45)"/><text x="24.5918%" y="143.50"></text></g><g><title>mir_promoted (37,299,043 samples, 10.43%)</title><rect x="14.2899%" y="149" width="10.4345%" height="15" fill="rgb(249,31,29)"/><text x="14.5399%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,401,872 samples, 0.67%)</title><rect x="24.7255%" y="149" width="0.6719%" height="15" fill="rgb(225,111,53)"/><text x="24.9755%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,238,949 samples, 0.63%)</title><rect x="25.3975%" y="149" width="0.6264%" height="15" fill="rgb(238,160,17)"/><text x="25.6475%" y="159.50"></text></g><g><title>normalize_projection_ty (1,435,890 samples, 0.40%)</title><rect x="25.6221%" y="133" width="0.4017%" height="15" fill="rgb(214,148,48)"/><text x="25.8721%" y="143.50"></text></g><g><title>type_op_normalize_predicate (906,415 samples, 0.25%)</title><rect x="26.0238%" y="149" width="0.2536%" height="15" fill="rgb(232,36,49)"/><text x="26.2738%" y="159.50"></text></g><g><title>normalize_projection_ty (459,536 samples, 0.13%)</title><rect x="26.1488%" y="133" width="0.1286%" height="15" fill="rgb(209,103,24)"/><text x="26.3988%" y="143.50"></text></g><g><title>type_op_prove_predicate (11,451,568 samples, 3.20%)</title><rect x="26.2774%" y="149" width="3.2036%" height="15" fill="rgb(229,88,8)"/><text x="26.5274%" y="159.50">typ..</text></g><g><title>evaluate_obligation (581,277 samples, 0.16%)</title><rect x="29.3184%" y="133" width="0.1626%" height="15" fill="rgb(213,181,19)"/><text x="29.5684%" y="143.50"></text></g><g><title>MIR_borrow_checking (103,770,705 samples, 29.03%)</title><rect x="0.4571%" y="181" width="29.0301%" height="15" fill="rgb(254,191,54)"/><text x="0.7071%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (103,285,252 samples, 28.89%)</title><rect x="0.5929%" y="165" width="28.8942%" height="15" fill="rgb(241,83,37)"/><text x="0.8429%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (389,704 samples, 0.11%)</title><rect x="29.4871%" y="181" width="0.1090%" height="15" fill="rgb(233,36,39)"/><text x="29.7371%" y="191.50"></text></g><g><title>hir_module_items (595,696 samples, 0.17%)</title><rect x="29.5961%" y="181" width="0.1666%" height="15" fill="rgb(226,3,54)"/><text x="29.8461%" y="191.50"></text></g><g><title>codegen_fn_attrs (466,167 samples, 0.13%)</title><rect x="30.0902%" y="117" width="0.1304%" height="15" fill="rgb(245,192,40)"/><text x="30.3402%" y="127.50"></text></g><g><title>codegen_fn_attrs (902,870 samples, 0.25%)</title><rect x="29.9748%" y="149" width="0.2526%" height="15" fill="rgb(238,167,29)"/><text x="30.2248%" y="159.50"></text></g><g><title>should_inherit_track_caller (776,859 samples, 0.22%)</title><rect x="30.0100%" y="133" width="0.2173%" height="15" fill="rgb(232,182,51)"/><text x="30.2600%" y="143.50"></text></g><g><title>check_mod_attrs (1,614,336 samples, 0.45%)</title><rect x="29.7758%" y="165" width="0.4516%" height="15" fill="rgb(231,60,39)"/><text x="30.0258%" y="175.50"></text></g><g><title>check_mod_const_bodies (382,813 samples, 0.11%)</title><rect x="30.2274%" y="165" width="0.1071%" height="15" fill="rgb(208,69,12)"/><text x="30.4774%" y="175.50"></text></g><g><title>lookup_deprecation_entry (366,175 samples, 0.10%)</title><rect x="30.5424%" y="149" width="0.1024%" height="15" fill="rgb(235,93,37)"/><text x="30.7924%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,048,844 samples, 0.29%)</title><rect x="30.4059%" y="165" width="0.2934%" height="15" fill="rgb(213,116,39)"/><text x="30.6559%" y="175.50"></text></g><g><title>misc_checking_1 (3,490,329 samples, 0.98%)</title><rect x="29.7629%" y="181" width="0.9764%" height="15" fill="rgb(222,207,29)"/><text x="30.0129%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,072,323 samples, 0.58%)</title><rect x="30.7398%" y="165" width="0.5797%" height="15" fill="rgb(206,96,30)"/><text x="30.9898%" y="175.50"></text></g><g><title>check_mod_liveness (1,733,690 samples, 0.49%)</title><rect x="30.8346%" y="149" width="0.4850%" height="15" fill="rgb(218,138,4)"/><text x="31.0846%" y="159.50"></text></g><g><title>type_uninhabited_from (583,456 samples, 0.16%)</title><rect x="31.1564%" y="133" width="0.1632%" height="15" fill="rgb(250,191,14)"/><text x="31.4064%" y="143.50"></text></g><g><title>type_uninhabited_from (402,945 samples, 0.11%)</title><rect x="31.2069%" y="117" width="0.1127%" height="15" fill="rgb(239,60,40)"/><text x="31.4569%" y="127.50"></text></g><g><title>misc_checking_2 (4,702,952 samples, 1.32%)</title><rect x="30.7393%" y="181" width="1.3157%" height="15" fill="rgb(206,27,48)"/><text x="30.9893%" y="191.50"></text></g><g><title>match_checking (2,628,829 samples, 0.74%)</title><rect x="31.3196%" y="165" width="0.7354%" height="15" fill="rgb(225,35,8)"/><text x="31.5696%" y="175.50"></text></g><g><title>check_match (2,507,597 samples, 0.70%)</title><rect x="31.3535%" y="149" width="0.7015%" height="15" fill="rgb(250,213,24)"/><text x="31.6035%" y="159.50"></text></g><g><title>check_private_in_public (767,739 samples, 0.21%)</title><rect x="32.0580%" y="165" width="0.2148%" height="15" fill="rgb(247,123,22)"/><text x="32.3080%" y="175.50"></text></g><g><title>death_checking (1,571,147 samples, 0.44%)</title><rect x="32.2728%" y="165" width="0.4395%" height="15" fill="rgb(231,138,38)"/><text x="32.5228%" y="175.50"></text></g><g><title>eval_to_const_value_raw (741,869 samples, 0.21%)</title><rect x="33.2585%" y="69" width="0.2075%" height="15" fill="rgb(231,145,46)"/><text x="33.5085%" y="79.50"></text></g><g><title>eval_to_const_value_raw (740,429 samples, 0.21%)</title><rect x="33.2589%" y="53" width="0.2071%" height="15" fill="rgb(251,118,11)"/><text x="33.5089%" y="63.50"></text></g><g><title>eval_to_allocation_raw (736,579 samples, 0.21%)</title><rect x="33.2600%" y="37" width="0.2061%" height="15" fill="rgb(217,147,25)"/><text x="33.5100%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,014,051 samples, 0.28%)</title><rect x="33.1849%" y="133" width="0.2837%" height="15" fill="rgb(247,81,37)"/><text x="33.4349%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,012,531 samples, 0.28%)</title><rect x="33.1854%" y="117" width="0.2833%" height="15" fill="rgb(209,12,38)"/><text x="33.4354%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,010,911 samples, 0.28%)</title><rect x="33.1858%" y="101" width="0.2828%" height="15" fill="rgb(227,1,9)"/><text x="33.4358%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (760,339 samples, 0.21%)</title><rect x="33.2559%" y="85" width="0.2127%" height="15" fill="rgb(248,47,43)"/><text x="33.5059%" y="95.50"></text></g><g><title>param_env (1,235,985 samples, 0.35%)</title><rect x="33.4686%" y="133" width="0.3458%" height="15" fill="rgb(221,10,30)"/><text x="33.7186%" y="143.50"></text></g><g><title>predicates_of (687,457 samples, 0.19%)</title><rect x="33.6221%" y="117" width="0.1923%" height="15" fill="rgb(210,229,1)"/><text x="33.8721%" y="127.50"></text></g><g><title>predicates_defined_on (600,556 samples, 0.17%)</title><rect x="33.6464%" y="101" width="0.1680%" height="15" fill="rgb(222,148,37)"/><text x="33.8964%" y="111.50"></text></g><g><title>crate_lints (5,372,940 samples, 1.50%)</title><rect x="32.7131%" y="149" width="1.5031%" height="15" fill="rgb(234,67,33)"/><text x="32.9631%" y="159.50"></text></g><g><title>type_of (1,192,283 samples, 0.33%)</title><rect x="33.8827%" y="133" width="0.3335%" height="15" fill="rgb(247,98,35)"/><text x="34.1327%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (943,190 samples, 0.26%)</title><rect x="33.9523%" y="117" width="0.2639%" height="15" fill="rgb(247,138,52)"/><text x="34.2023%" y="127.50"></text></g><g><title>layout_of (405,875 samples, 0.11%)</title><rect x="34.7152%" y="101" width="0.1135%" height="15" fill="rgb(213,79,30)"/><text x="34.9652%" y="111.50"></text></g><g><title>layout_of (392,275 samples, 0.11%)</title><rect x="34.7190%" y="85" width="0.1097%" height="15" fill="rgb(246,177,23)"/><text x="34.9690%" y="95.50"></text></g><g><title>layout_of (448,155 samples, 0.13%)</title><rect x="34.7038%" y="117" width="0.1254%" height="15" fill="rgb(230,62,27)"/><text x="34.9538%" y="127.50"></text></g><g><title>lint_checking (7,567,564 samples, 2.12%)</title><rect x="32.7123%" y="165" width="2.1170%" height="15" fill="rgb(216,154,8)"/><text x="32.9623%" y="175.50">l..</text></g><g><title>module_lints (2,191,754 samples, 0.61%)</title><rect x="34.2162%" y="149" width="0.6131%" height="15" fill="rgb(244,35,45)"/><text x="34.4662%" y="159.50"></text></g><g><title>lint_mod (2,177,574 samples, 0.61%)</title><rect x="34.2202%" y="133" width="0.6092%" height="15" fill="rgb(251,115,12)"/><text x="34.4702%" y="143.50"></text></g><g><title>privacy_access_levels (831,649 samples, 0.23%)</title><rect x="34.8293%" y="165" width="0.2327%" height="15" fill="rgb(240,54,50)"/><text x="35.0793%" y="175.50"></text></g><g><title>privacy_checking_modules (3,397,818 samples, 0.95%)</title><rect x="35.0620%" y="165" width="0.9505%" height="15" fill="rgb(233,84,52)"/><text x="35.3120%" y="175.50"></text></g><g><title>check_mod_privacy (3,388,138 samples, 0.95%)</title><rect x="35.0647%" y="149" width="0.9478%" height="15" fill="rgb(207,117,47)"/><text x="35.3147%" y="159.50"></text></g><g><title>misc_checking_3 (14,182,058 samples, 3.97%)</title><rect x="32.0550%" y="181" width="3.9675%" height="15" fill="rgb(249,43,39)"/><text x="32.3050%" y="191.50">misc..</text></g><g><title>impl_parent (3,286,414 samples, 0.92%)</title><rect x="37.8204%" y="117" width="0.9194%" height="15" fill="rgb(209,38,44)"/><text x="38.0704%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,872,379 samples, 0.52%)</title><rect x="38.2160%" y="101" width="0.5238%" height="15" fill="rgb(236,212,23)"/><text x="38.4660%" y="111.50"></text></g><g><title>impl_trait_ref (7,292,832 samples, 2.04%)</title><rect x="38.7398%" y="117" width="2.0402%" height="15" fill="rgb(242,79,21)"/><text x="38.9898%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,283,107 samples, 1.48%)</title><rect x="39.3020%" y="101" width="1.4780%" height="15" fill="rgb(211,96,35)"/><text x="39.5520%" y="111.50"></text></g><g><title>trait_impls_of (1,242,722 samples, 0.35%)</title><rect x="40.7930%" y="117" width="0.3477%" height="15" fill="rgb(253,215,40)"/><text x="41.0430%" y="127.50"></text></g><g><title>implementations_of_trait (394,535 samples, 0.11%)</title><rect x="41.0303%" y="101" width="0.1104%" height="15" fill="rgb(211,81,21)"/><text x="41.2803%" y="111.50"></text></g><g><title>coherent_trait (18,021,249 samples, 5.04%)</title><rect x="36.0996%" y="149" width="5.0415%" height="15" fill="rgb(208,190,38)"/><text x="36.3496%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (17,499,822 samples, 4.90%)</title><rect x="36.2455%" y="133" width="4.8956%" height="15" fill="rgb(235,213,38)"/><text x="36.4955%" y="143.50">specia..</text></g><g><title>coherence_checking (18,199,582 samples, 5.09%)</title><rect x="36.0896%" y="165" width="5.0914%" height="15" fill="rgb(237,122,38)"/><text x="36.3396%" y="175.50">cohere..</text></g><g><title>associated_item (843,280 samples, 0.24%)</title><rect x="55.5826%" y="101" width="0.2359%" height="15" fill="rgb(244,218,35)"/><text x="55.8326%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (508,766 samples, 0.14%)</title><rect x="55.6762%" y="85" width="0.1423%" height="15" fill="rgb(240,68,47)"/><text x="55.9262%" y="95.50"></text></g><g><title>associated_items (1,164,045 samples, 0.33%)</title><rect x="55.5066%" y="117" width="0.3256%" height="15" fill="rgb(210,16,53)"/><text x="55.7566%" y="127.50"></text></g><g><title>adt_dtorck_constraint (488,854 samples, 0.14%)</title><rect x="56.3557%" y="85" width="0.1368%" height="15" fill="rgb(235,124,12)"/><text x="56.6057%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,085,224 samples, 0.30%)</title><rect x="56.2266%" y="101" width="0.3036%" height="15" fill="rgb(224,169,11)"/><text x="56.4766%" y="111.50"></text></g><g><title>dropck_outlives (2,389,524 samples, 0.67%)</title><rect x="55.8701%" y="117" width="0.6685%" height="15" fill="rgb(250,166,2)"/><text x="56.1201%" y="127.50"></text></g><g><title>predicates_of (393,305 samples, 0.11%)</title><rect x="57.6512%" y="101" width="0.1100%" height="15" fill="rgb(242,216,29)"/><text x="57.9012%" y="111.50"></text></g><g><title>evaluate_obligation (4,746,867 samples, 1.33%)</title><rect x="56.5385%" y="117" width="1.3279%" height="15" fill="rgb(230,116,27)"/><text x="56.7885%" y="127.50"></text></g><g><title>evaluate_obligation (612,885 samples, 0.17%)</title><rect x="58.3491%" y="101" width="0.1715%" height="15" fill="rgb(228,99,48)"/><text x="58.5991%" y="111.50"></text></g><g><title>method_autoderef_steps (1,242,820 samples, 0.35%)</title><rect x="58.1774%" y="117" width="0.3477%" height="15" fill="rgb(253,11,6)"/><text x="58.4274%" y="127.50"></text></g><g><title>predicates_of (786,467 samples, 0.22%)</title><rect x="58.5741%" y="117" width="0.2200%" height="15" fill="rgb(247,143,39)"/><text x="58.8241%" y="127.50"></text></g><g><title>predicates_defined_on (380,823 samples, 0.11%)</title><rect x="58.6876%" y="101" width="0.1065%" height="15" fill="rgb(236,97,10)"/><text x="58.9376%" y="111.50"></text></g><g><title>associated_item (687,118 samples, 0.19%)</title><rect x="70.5328%" y="85" width="0.1922%" height="15" fill="rgb(233,208,19)"/><text x="70.7828%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (546,897 samples, 0.15%)</title><rect x="70.5720%" y="69" width="0.1530%" height="15" fill="rgb(216,164,2)"/><text x="70.8220%" y="79.50"></text></g><g><title>associated_items (1,011,099 samples, 0.28%)</title><rect x="70.4584%" y="101" width="0.2829%" height="15" fill="rgb(220,129,5)"/><text x="70.7084%" y="111.50"></text></g><g><title>adt_dtorck_constraint (441,286 samples, 0.12%)</title><rect x="71.0509%" y="85" width="0.1235%" height="15" fill="rgb(242,17,10)"/><text x="71.3009%" y="95.50"></text></g><g><title>dropck_outlives (1,460,995 samples, 0.41%)</title><rect x="70.7786%" y="101" width="0.4087%" height="15" fill="rgb(242,107,0)"/><text x="71.0286%" y="111.50"></text></g><g><title>generics_of (584,174 samples, 0.16%)</title><rect x="72.7377%" y="85" width="0.1634%" height="15" fill="rgb(251,28,31)"/><text x="72.9877%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (433,021 samples, 0.12%)</title><rect x="72.7800%" y="69" width="0.1211%" height="15" fill="rgb(233,223,10)"/><text x="73.0300%" y="79.50"></text></g><g><title>evaluate_obligation (7,002,233 samples, 1.96%)</title><rect x="71.1874%" y="101" width="1.9589%" height="15" fill="rgb(215,21,27)"/><text x="71.4374%" y="111.50">e..</text></g><g><title>generics_of (1,234,925 samples, 0.35%)</title><rect x="73.2197%" y="101" width="0.3455%" height="15" fill="rgb(232,23,21)"/><text x="73.4697%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (942,629 samples, 0.26%)</title><rect x="73.3015%" y="85" width="0.2637%" height="15" fill="rgb(244,5,23)"/><text x="73.5515%" y="95.50"></text></g><g><title>is_copy_raw (734,030 samples, 0.21%)</title><rect x="73.6891%" y="101" width="0.2053%" height="15" fill="rgb(226,81,46)"/><text x="73.9391%" y="111.50"></text></g><g><title>evaluate_obligation (596,018 samples, 0.17%)</title><rect x="73.7277%" y="85" width="0.1667%" height="15" fill="rgb(247,70,30)"/><text x="73.9777%" y="95.50"></text></g><g><title>evaluate_obligation (682,279 samples, 0.19%)</title><rect x="74.1652%" y="85" width="0.1909%" height="15" fill="rgb(212,68,19)"/><text x="74.4152%" y="95.50"></text></g><g><title>method_autoderef_steps (1,367,070 samples, 0.38%)</title><rect x="73.9807%" y="101" width="0.3824%" height="15" fill="rgb(240,187,13)"/><text x="74.2307%" y="111.50"></text></g><g><title>predicates_of (677,009 samples, 0.19%)</title><rect x="74.3766%" y="101" width="0.1894%" height="15" fill="rgb(223,113,26)"/><text x="74.6266%" y="111.50"></text></g><g><title>predicates_defined_on (477,135 samples, 0.13%)</title><rect x="74.4325%" y="85" width="0.1335%" height="15" fill="rgb(206,192,2)"/><text x="74.6825%" y="95.50"></text></g><g><title>typeck (56,563,247 samples, 15.82%)</title><rect x="58.8426%" y="117" width="15.8237%" height="15" fill="rgb(241,108,4)"/><text x="59.0926%" y="127.50">typeck</text></g><g><title>item_bodies_checking (119,720,081 samples, 33.49%)</title><rect x="41.2071%" y="165" width="33.4919%" height="15" fill="rgb(247,173,49)"/><text x="41.4571%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (119,716,241 samples, 33.49%)</title><rect x="41.2081%" y="149" width="33.4908%" height="15" fill="rgb(224,114,35)"/><text x="41.4581%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (119,428,376 samples, 33.41%)</title><rect x="41.2887%" y="133" width="33.4103%" height="15" fill="rgb(245,159,27)"/><text x="41.5387%" y="143.50">typeck</text></g><g><title>item_types_checking (5,187,769 samples, 1.45%)</title><rect x="74.6990%" y="165" width="1.4513%" height="15" fill="rgb(245,172,44)"/><text x="74.9490%" y="175.50"></text></g><g><title>check_mod_item_types (5,174,599 samples, 1.45%)</title><rect x="74.7027%" y="149" width="1.4476%" height="15" fill="rgb(236,23,11)"/><text x="74.9527%" y="159.50"></text></g><g><title>typeck (2,097,253 samples, 0.59%)</title><rect x="75.5636%" y="133" width="0.5867%" height="15" fill="rgb(205,117,38)"/><text x="75.8136%" y="143.50"></text></g><g><title>fn_sig (809,509 samples, 0.23%)</title><rect x="76.4044%" y="133" width="0.2265%" height="15" fill="rgb(237,72,25)"/><text x="76.6544%" y="143.50"></text></g><g><title>named_region_map (607,287 samples, 0.17%)</title><rect x="76.7333%" y="117" width="0.1699%" height="15" fill="rgb(244,70,9)"/><text x="76.9833%" y="127.50"></text></g><g><title>resolve_lifetimes (556,066 samples, 0.16%)</title><rect x="76.7477%" y="101" width="0.1556%" height="15" fill="rgb(217,125,39)"/><text x="76.9977%" y="111.50"></text></g><g><title>generics_of (1,010,770 samples, 0.28%)</title><rect x="76.6309%" y="133" width="0.2828%" height="15" fill="rgb(235,36,10)"/><text x="76.8809%" y="143.50"></text></g><g><title>late_bound_vars_map (1,004,290 samples, 0.28%)</title><rect x="77.2008%" y="85" width="0.2810%" height="15" fill="rgb(251,123,47)"/><text x="77.4508%" y="95.50"></text></g><g><title>resolve_lifetimes (976,080 samples, 0.27%)</title><rect x="77.2087%" y="69" width="0.2731%" height="15" fill="rgb(221,13,13)"/><text x="77.4587%" y="79.50"></text></g><g><title>lint_levels (534,116 samples, 0.15%)</title><rect x="77.3323%" y="53" width="0.1494%" height="15" fill="rgb(238,131,9)"/><text x="77.5823%" y="63.50"></text></g><g><title>explicit_predicates_of (1,470,028 samples, 0.41%)</title><rect x="77.0806%" y="101" width="0.4112%" height="15" fill="rgb(211,50,8)"/><text x="77.3306%" y="111.50"></text></g><g><title>predicates_of (3,123,597 samples, 0.87%)</title><rect x="76.9459%" y="133" width="0.8738%" height="15" fill="rgb(245,182,24)"/><text x="77.1959%" y="143.50"></text></g><g><title>predicates_defined_on (2,941,686 samples, 0.82%)</title><rect x="76.9968%" y="117" width="0.8229%" height="15" fill="rgb(242,14,37)"/><text x="77.2468%" y="127.50"></text></g><g><title>inferred_outlives_of (1,172,123 samples, 0.33%)</title><rect x="77.4918%" y="101" width="0.3279%" height="15" fill="rgb(246,228,12)"/><text x="77.7418%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,111,893 samples, 0.31%)</title><rect x="77.5087%" y="85" width="0.3111%" height="15" fill="rgb(213,55,15)"/><text x="77.7587%" y="95.50"></text></g><g><title>type_of (666,126 samples, 0.19%)</title><rect x="77.6334%" y="69" width="0.1864%" height="15" fill="rgb(209,9,3)"/><text x="77.8834%" y="79.50"></text></g><g><title>type_collecting (6,290,480 samples, 1.76%)</title><rect x="76.1533%" y="165" width="1.7598%" height="15" fill="rgb(230,59,30)"/><text x="76.4033%" y="175.50"></text></g><g><title>collect_mod_item_types (6,273,110 samples, 1.75%)</title><rect x="76.1582%" y="149" width="1.7549%" height="15" fill="rgb(209,121,21)"/><text x="76.4082%" y="159.50"></text></g><g><title>evaluate_obligation (1,290,108 samples, 0.36%)</title><rect x="79.7687%" y="133" width="0.3609%" height="15" fill="rgb(220,109,13)"/><text x="80.0187%" y="143.50"></text></g><g><title>implied_outlives_bounds (764,602 samples, 0.21%)</title><rect x="80.1305%" y="133" width="0.2139%" height="15" fill="rgb(232,18,1)"/><text x="80.3805%" y="143.50"></text></g><g><title>object_safety_violations (393,255 samples, 0.11%)</title><rect x="80.3444%" y="133" width="0.1100%" height="15" fill="rgb(215,41,42)"/><text x="80.5944%" y="143.50"></text></g><g><title>param_env (854,677 samples, 0.24%)</title><rect x="80.4545%" y="133" width="0.2391%" height="15" fill="rgb(224,123,36)"/><text x="80.7045%" y="143.50"></text></g><g><title>region_scope_tree (1,302,282 samples, 0.36%)</title><rect x="80.7085%" y="133" width="0.3643%" height="15" fill="rgb(240,125,3)"/><text x="80.9585%" y="143.50"></text></g><g><title>check_impl_item_well_formed (10,452,208 samples, 2.92%)</title><rect x="78.1636%" y="149" width="2.9240%" height="15" fill="rgb(205,98,50)"/><text x="78.4136%" y="159.50">ch..</text></g><g><title>adt_sized_constraint (417,528 samples, 0.12%)</title><rect x="82.7157%" y="101" width="0.1168%" height="15" fill="rgb(205,185,37)"/><text x="82.9657%" y="111.50"></text></g><g><title>adt_sized_constraint (657,439 samples, 0.18%)</title><rect x="82.6529%" y="117" width="0.1839%" height="15" fill="rgb(238,207,15)"/><text x="82.9029%" y="127.50"></text></g><g><title>evaluate_obligation (2,545,092 samples, 0.71%)</title><rect x="82.1988%" y="133" width="0.7120%" height="15" fill="rgb(213,199,42)"/><text x="82.4488%" y="143.50"></text></g><g><title>object_safety_violations (754,919 samples, 0.21%)</title><rect x="83.0022%" y="133" width="0.2112%" height="15" fill="rgb(235,201,11)"/><text x="83.2522%" y="143.50"></text></g><g><title>param_env (764,017 samples, 0.21%)</title><rect x="83.2134%" y="133" width="0.2137%" height="15" fill="rgb(207,46,11)"/><text x="83.4634%" y="143.50"></text></g><g><title>analysis (298,056,356 samples, 83.38%)</title><rect x="0.2231%" y="197" width="83.3818%" height="15" fill="rgb(241,35,35)"/><text x="0.4731%" y="207.50">analysis</text></g><g><title>type_check_crate (170,088,182 samples, 47.58%)</title><rect x="36.0225%" y="181" width="47.5825%" height="15" fill="rgb(243,32,47)"/><text x="36.2725%" y="191.50">type_check_crate</text></g><g><title>wf_checking (20,329,706 samples, 5.69%)</title><rect x="77.9177%" y="165" width="5.6873%" height="15" fill="rgb(247,202,23)"/><text x="78.1677%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (8,998,596 samples, 2.52%)</title><rect x="81.0876%" y="149" width="2.5174%" height="15" fill="rgb(219,102,11)"/><text x="81.3376%" y="159.50">ch..</text></g><g><title>codegen_crate (425,855 samples, 0.12%)</title><rect x="83.6070%" y="197" width="0.1191%" height="15" fill="rgb(243,110,44)"/><text x="83.8570%" y="207.50"></text></g><g><title>metadata_register_crate (2,217,266 samples, 0.62%)</title><rect x="90.6923%" y="149" width="0.6203%" height="15" fill="rgb(222,74,54)"/><text x="90.9423%" y="159.50"></text></g><g><title>metadata_register_crate (935,028 samples, 0.26%)</title><rect x="91.0510%" y="133" width="0.2616%" height="15" fill="rgb(216,99,12)"/><text x="91.3010%" y="143.50"></text></g><g><title>macro_expand_crate (26,909,290 samples, 7.53%)</title><rect x="83.9287%" y="181" width="7.5279%" height="15" fill="rgb(226,22,26)"/><text x="84.1787%" y="191.50">macro_expa..</text></g><g><title>expand_crate (26,897,590 samples, 7.52%)</title><rect x="83.9320%" y="165" width="7.5247%" height="15" fill="rgb(217,163,10)"/><text x="84.1820%" y="175.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (515,005 samples, 0.14%)</title><rect x="91.3125%" y="149" width="0.1441%" height="15" fill="rgb(213,25,53)"/><text x="91.5625%" y="159.50"></text></g><g><title>late_resolve_crate (5,189,378 samples, 1.45%)</title><rect x="91.6340%" y="165" width="1.4517%" height="15" fill="rgb(252,105,26)"/><text x="91.8840%" y="175.50"></text></g><g><title>configure_and_expand (33,823,167 samples, 9.46%)</title><rect x="83.7261%" y="197" width="9.4621%" height="15" fill="rgb(220,39,43)"/><text x="83.9761%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (6,045,798 samples, 1.69%)</title><rect x="91.4969%" y="181" width="1.6913%" height="15" fill="rgb(229,68,48)"/><text x="91.7469%" y="191.50"></text></g><g><title>drop_ast (538,676 samples, 0.15%)</title><rect x="93.1882%" y="197" width="0.1507%" height="15" fill="rgb(252,8,32)"/><text x="93.4382%" y="207.50"></text></g><g><title>early_lint_checks (1,145,732 samples, 0.32%)</title><rect x="93.3445%" y="197" width="0.3205%" height="15" fill="rgb(223,20,43)"/><text x="93.5945%" y="207.50"></text></g><g><title>free_global_ctxt (5,804,464 samples, 1.62%)</title><rect x="93.6650%" y="197" width="1.6238%" height="15" fill="rgb(229,81,49)"/><text x="93.9150%" y="207.50"></text></g><g><title>generate_crate_metadata (3,463,149 samples, 0.97%)</title><rect x="95.2888%" y="197" width="0.9688%" height="15" fill="rgb(236,28,36)"/><text x="95.5388%" y="207.50"></text></g><g><title>hir_lowering (9,423,465 samples, 2.64%)</title><rect x="96.2576%" y="197" width="2.6362%" height="15" fill="rgb(249,185,26)"/><text x="96.5076%" y="207.50">hi..</text></g><g><title>parse_crate (1,339,255 samples, 0.37%)</title><rect x="98.9213%" y="197" width="0.3747%" height="15" fill="rgb(249,174,33)"/><text x="99.1713%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,715,909 samples, 0.48%)</title><rect x="99.3574%" y="197" width="0.4800%" height="15" fill="rgb(233,201,37)"/><text x="99.6074%" y="207.50"></text></g><g><title>all (357,459,587 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (357,459,587 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (479,015 samples, 0.13%)</title><rect x="99.8660%" y="197" width="0.1340%" height="15" fill="rgb(230,49,44)"/><text x="100.1160%" y="207.50"></text></g></svg></svg>