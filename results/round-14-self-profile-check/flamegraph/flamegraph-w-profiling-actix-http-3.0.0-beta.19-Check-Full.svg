<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (4,622,976 samples, 0.21%)</title><rect x="13.5735%" y="165" width="0.2120%" height="15" fill="rgb(227,0,7)"/><text x="13.8235%" y="175.50"></text></g><g><title>param_env (2,541,658 samples, 0.12%)</title><rect x="15.2926%" y="133" width="0.1165%" height="15" fill="rgb(217,0,24)"/><text x="15.5426%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,953,892 samples, 0.14%)</title><rect x="15.8476%" y="117" width="0.1355%" height="15" fill="rgb(221,193,54)"/><text x="16.0976%" y="127.50"></text></g><g><title>adt_drop_tys (2,667,028 samples, 0.12%)</title><rect x="18.6291%" y="85" width="0.1223%" height="15" fill="rgb(248,212,6)"/><text x="18.8791%" y="95.50"></text></g><g><title>is_copy_raw (20,196,400 samples, 0.93%)</title><rect x="18.7518%" y="85" width="0.9261%" height="15" fill="rgb(208,68,35)"/><text x="19.0018%" y="95.50"></text></g><g><title>evaluate_obligation (15,259,403 samples, 0.70%)</title><rect x="18.9782%" y="69" width="0.6997%" height="15" fill="rgb(232,128,0)"/><text x="19.2282%" y="79.50"></text></g><g><title>needs_drop_raw (25,778,161 samples, 1.18%)</title><rect x="18.5067%" y="101" width="1.1821%" height="15" fill="rgb(207,160,47)"/><text x="18.7567%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (6,846,890 samples, 0.31%)</title><rect x="19.8658%" y="85" width="0.3140%" height="15" fill="rgb(228,23,34)"/><text x="20.1158%" y="95.50"></text></g><g><title>resolve_instance (14,250,499 samples, 0.65%)</title><rect x="19.6905%" y="101" width="0.6535%" height="15" fill="rgb(218,30,26)"/><text x="19.9405%" y="111.50"></text></g><g><title>thir_body (20,656,280 samples, 0.95%)</title><rect x="20.3680%" y="101" width="0.9472%" height="15" fill="rgb(220,122,19)"/><text x="20.6180%" y="111.50"></text></g><g><title>mir_const (147,650,814 samples, 6.77%)</title><rect x="14.6494%" y="149" width="6.7705%" height="15" fill="rgb(250,228,42)"/><text x="14.8994%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (131,082,788 samples, 6.01%)</title><rect x="15.4091%" y="133" width="6.0108%" height="15" fill="rgb(240,193,28)"/><text x="15.6591%" y="143.50">unsafety..</text></g><g><title>mir_built (118,561,405 samples, 5.44%)</title><rect x="15.9833%" y="117" width="5.4366%" height="15" fill="rgb(216,20,37)"/><text x="16.2333%" y="127.50">mir_bui..</text></g><g><title>mir_const (5,282,861 samples, 0.24%)</title><rect x="21.5680%" y="133" width="0.2422%" height="15" fill="rgb(206,188,39)"/><text x="21.8180%" y="143.50"></text></g><g><title>unsafety_check_result (4,125,040 samples, 0.19%)</title><rect x="21.6211%" y="117" width="0.1892%" height="15" fill="rgb(217,207,13)"/><text x="21.8711%" y="127.50"></text></g><g><title>mir_built (3,648,843 samples, 0.17%)</title><rect x="21.6429%" y="101" width="0.1673%" height="15" fill="rgb(231,73,38)"/><text x="21.8929%" y="111.50"></text></g><g><title>mir_const_qualif (8,752,586 samples, 0.40%)</title><rect x="21.4199%" y="149" width="0.4013%" height="15" fill="rgb(225,20,46)"/><text x="21.6699%" y="159.50"></text></g><g><title>mir_promoted (172,147,521 samples, 7.89%)</title><rect x="13.9278%" y="165" width="7.8938%" height="15" fill="rgb(210,31,41)"/><text x="14.1778%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (14,643,009 samples, 0.67%)</title><rect x="21.8226%" y="165" width="0.6715%" height="15" fill="rgb(221,200,47)"/><text x="22.0726%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (13,175,844 samples, 0.60%)</title><rect x="22.4940%" y="165" width="0.6042%" height="15" fill="rgb(226,26,5)"/><text x="22.7440%" y="175.50"></text></g><g><title>normalize_projection_ty (6,635,018 samples, 0.30%)</title><rect x="22.7939%" y="149" width="0.3042%" height="15" fill="rgb(249,33,26)"/><text x="23.0439%" y="159.50"></text></g><g><title>type_op_normalize_predicate (7,767,291 samples, 0.36%)</title><rect x="23.1044%" y="165" width="0.3562%" height="15" fill="rgb(235,183,28)"/><text x="23.3544%" y="175.50"></text></g><g><title>normalize_projection_ty (2,332,012 samples, 0.11%)</title><rect x="23.3537%" y="149" width="0.1069%" height="15" fill="rgb(221,5,38)"/><text x="23.6037%" y="159.50"></text></g><g><title>type_op_normalize_ty (8,244,361 samples, 0.38%)</title><rect x="23.4606%" y="165" width="0.3780%" height="15" fill="rgb(247,18,42)"/><text x="23.7106%" y="175.50"></text></g><g><title>normalize_projection_ty (3,159,711 samples, 0.14%)</title><rect x="23.6938%" y="149" width="0.1449%" height="15" fill="rgb(241,131,45)"/><text x="23.9438%" y="159.50"></text></g><g><title>type_op_prove_predicate (62,768,338 samples, 2.88%)</title><rect x="23.8386%" y="165" width="2.8782%" height="15" fill="rgb(249,31,29)"/><text x="24.0886%" y="175.50">ty..</text></g><g><title>MIR_borrow_checking (572,310,802 samples, 26.24%)</title><rect x="0.4758%" y="197" width="26.2433%" height="15" fill="rgb(225,111,53)"/><text x="0.7258%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (569,668,728 samples, 26.12%)</title><rect x="0.5970%" y="181" width="26.1222%" height="15" fill="rgb(238,160,17)"/><text x="0.8470%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (3,889,092 samples, 0.18%)</title><rect x="26.7191%" y="197" width="0.1783%" height="15" fill="rgb(214,148,48)"/><text x="26.9691%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,597,562 samples, 0.12%)</title><rect x="26.7784%" y="181" width="0.1191%" height="15" fill="rgb(232,36,49)"/><text x="27.0284%" y="191.50"></text></g><g><title>hir_module_items (3,698,974 samples, 0.17%)</title><rect x="26.8975%" y="197" width="0.1696%" height="15" fill="rgb(209,103,24)"/><text x="27.1475%" y="207.50"></text></g><g><title>codegen_fn_attrs (4,097,668 samples, 0.19%)</title><rect x="27.2688%" y="165" width="0.1879%" height="15" fill="rgb(229,88,8)"/><text x="27.5188%" y="175.50"></text></g><g><title>should_inherit_track_caller (3,475,801 samples, 0.16%)</title><rect x="27.2973%" y="149" width="0.1594%" height="15" fill="rgb(213,181,19)"/><text x="27.5473%" y="159.50"></text></g><g><title>check_mod_attrs (8,336,085 samples, 0.38%)</title><rect x="27.0744%" y="181" width="0.3823%" height="15" fill="rgb(254,191,54)"/><text x="27.3244%" y="191.50"></text></g><g><title>lint_levels (4,699,691 samples, 0.22%)</title><rect x="27.7717%" y="165" width="0.2155%" height="15" fill="rgb(241,83,37)"/><text x="28.0217%" y="175.50"></text></g><g><title>lookup_deprecation_entry (3,048,362 samples, 0.14%)</title><rect x="27.9872%" y="165" width="0.1398%" height="15" fill="rgb(233,36,39)"/><text x="28.2372%" y="175.50"></text></g><g><title>stability_index (2,521,518 samples, 0.12%)</title><rect x="28.0113%" y="149" width="0.1156%" height="15" fill="rgb(226,3,54)"/><text x="28.2613%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (10,441,116 samples, 0.48%)</title><rect x="27.6617%" y="181" width="0.4788%" height="15" fill="rgb(245,192,40)"/><text x="27.9117%" y="191.50"></text></g><g><title>misc_checking_1 (24,240,559 samples, 1.11%)</title><rect x="27.0671%" y="197" width="1.1116%" height="15" fill="rgb(238,167,29)"/><text x="27.3171%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (11,775,951 samples, 0.54%)</title><rect x="28.1788%" y="181" width="0.5400%" height="15" fill="rgb(232,182,51)"/><text x="28.4288%" y="191.50"></text></g><g><title>check_mod_liveness (9,947,221 samples, 0.46%)</title><rect x="28.2627%" y="165" width="0.4561%" height="15" fill="rgb(231,60,39)"/><text x="28.5127%" y="175.50"></text></g><g><title>type_uninhabited_from (3,269,881 samples, 0.15%)</title><rect x="28.5689%" y="149" width="0.1499%" height="15" fill="rgb(208,69,12)"/><text x="28.8189%" y="159.50"></text></g><g><title>type_uninhabited_from (2,540,096 samples, 0.12%)</title><rect x="28.6023%" y="133" width="0.1165%" height="15" fill="rgb(235,93,37)"/><text x="28.8523%" y="143.50"></text></g><g><title>misc_checking_2 (38,334,815 samples, 1.76%)</title><rect x="28.1787%" y="197" width="1.7578%" height="15" fill="rgb(213,116,39)"/><text x="28.4287%" y="207.50"></text></g><g><title>match_checking (26,555,164 samples, 1.22%)</title><rect x="28.7188%" y="181" width="1.2177%" height="15" fill="rgb(222,207,29)"/><text x="28.9688%" y="191.50"></text></g><g><title>check_match (25,352,689 samples, 1.16%)</title><rect x="28.7740%" y="165" width="1.1625%" height="15" fill="rgb(206,96,30)"/><text x="29.0240%" y="175.50"></text></g><g><title>visible_parent_map (8,473,993 samples, 0.39%)</title><rect x="29.5479%" y="149" width="0.3886%" height="15" fill="rgb(218,138,4)"/><text x="29.7979%" y="159.50"></text></g><g><title>module_children (7,607,506 samples, 0.35%)</title><rect x="29.5877%" y="133" width="0.3488%" height="15" fill="rgb(250,191,14)"/><text x="29.8377%" y="143.50"></text></g><g><title>metadata_decode_entry_module_children (7,451,555 samples, 0.34%)</title><rect x="29.5948%" y="117" width="0.3417%" height="15" fill="rgb(239,60,40)"/><text x="29.8448%" y="127.50"></text></g><g><title>check_private_in_public (6,479,151 samples, 0.30%)</title><rect x="29.9376%" y="181" width="0.2971%" height="15" fill="rgb(206,27,48)"/><text x="30.1876%" y="191.50"></text></g><g><title>death_checking (10,370,185 samples, 0.48%)</title><rect x="30.2347%" y="181" width="0.4755%" height="15" fill="rgb(225,35,8)"/><text x="30.4847%" y="191.50"></text></g><g><title>eval_to_const_value_raw (3,137,914 samples, 0.14%)</title><rect x="31.1757%" y="149" width="0.1439%" height="15" fill="rgb(250,213,24)"/><text x="31.4257%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,106,494 samples, 0.14%)</title><rect x="31.1771%" y="133" width="0.1424%" height="15" fill="rgb(247,123,22)"/><text x="31.4271%" y="143.50"></text></g><g><title>eval_to_allocation_raw (3,054,901 samples, 0.14%)</title><rect x="31.1795%" y="117" width="0.1401%" height="15" fill="rgb(231,138,38)"/><text x="31.4295%" y="127.50"></text></g><g><title>param_env (6,547,105 samples, 0.30%)</title><rect x="31.3196%" y="149" width="0.3002%" height="15" fill="rgb(231,145,46)"/><text x="31.5696%" y="159.50"></text></g><g><title>predicates_of (3,133,940 samples, 0.14%)</title><rect x="31.4761%" y="133" width="0.1437%" height="15" fill="rgb(251,118,11)"/><text x="31.7261%" y="143.50"></text></g><g><title>predicates_defined_on (2,606,351 samples, 0.12%)</title><rect x="31.5003%" y="117" width="0.1195%" height="15" fill="rgb(217,147,25)"/><text x="31.7503%" y="127.50"></text></g><g><title>crate_lints (22,159,945 samples, 1.02%)</title><rect x="30.7104%" y="165" width="1.0161%" height="15" fill="rgb(247,81,37)"/><text x="30.9604%" y="175.50"></text></g><g><title>lint_checking (35,568,243 samples, 1.63%)</title><rect x="30.7102%" y="181" width="1.6310%" height="15" fill="rgb(209,12,38)"/><text x="30.9602%" y="191.50"></text></g><g><title>module_lints (13,404,958 samples, 0.61%)</title><rect x="31.7265%" y="165" width="0.6147%" height="15" fill="rgb(227,1,9)"/><text x="31.9765%" y="175.50"></text></g><g><title>lint_mod (13,350,878 samples, 0.61%)</title><rect x="31.7290%" y="149" width="0.6122%" height="15" fill="rgb(248,47,43)"/><text x="31.9790%" y="159.50"></text></g><g><title>privacy_access_levels (10,037,082 samples, 0.46%)</title><rect x="32.3412%" y="181" width="0.4603%" height="15" fill="rgb(221,10,30)"/><text x="32.5912%" y="191.50"></text></g><g><title>privacy_checking_modules (23,892,454 samples, 1.10%)</title><rect x="32.8014%" y="181" width="1.0956%" height="15" fill="rgb(210,229,1)"/><text x="33.0514%" y="191.50"></text></g><g><title>check_mod_privacy (23,840,653 samples, 1.09%)</title><rect x="32.8038%" y="165" width="1.0932%" height="15" fill="rgb(222,148,37)"/><text x="33.0538%" y="175.50"></text></g><g><title>misc_checking_3 (86,581,738 samples, 3.97%)</title><rect x="29.9365%" y="197" width="3.9702%" height="15" fill="rgb(234,67,33)"/><text x="30.1865%" y="207.50">misc..</text></g><g><title>eval_to_const_value_raw (2,996,043 samples, 0.14%)</title><rect x="34.0336%" y="149" width="0.1374%" height="15" fill="rgb(247,98,35)"/><text x="34.2836%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,980,273 samples, 0.14%)</title><rect x="34.0343%" y="133" width="0.1367%" height="15" fill="rgb(247,138,52)"/><text x="34.2843%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,977,643 samples, 0.14%)</title><rect x="34.0344%" y="117" width="0.1365%" height="15" fill="rgb(213,79,30)"/><text x="34.2844%" y="127.50"></text></g><g><title>impl_parent (6,757,665 samples, 0.31%)</title><rect x="34.7966%" y="133" width="0.3099%" height="15" fill="rgb(246,177,23)"/><text x="35.0466%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (3,706,846 samples, 0.17%)</title><rect x="34.9365%" y="117" width="0.1700%" height="15" fill="rgb(230,62,27)"/><text x="35.1865%" y="127.50"></text></g><g><title>impl_trait_ref (13,337,822 samples, 0.61%)</title><rect x="35.1066%" y="133" width="0.6116%" height="15" fill="rgb(216,154,8)"/><text x="35.3566%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (10,255,316 samples, 0.47%)</title><rect x="35.2480%" y="117" width="0.4703%" height="15" fill="rgb(244,35,45)"/><text x="35.4980%" y="127.50"></text></g><g><title>trait_impls_of (4,396,725 samples, 0.20%)</title><rect x="35.7419%" y="133" width="0.2016%" height="15" fill="rgb(251,115,12)"/><text x="35.9919%" y="143.50"></text></g><g><title>coherent_trait (42,637,902 samples, 1.96%)</title><rect x="33.9898%" y="165" width="1.9552%" height="15" fill="rgb(240,54,50)"/><text x="34.2398%" y="175.50">c..</text></g><g><title>specialization_graph_of (38,316,235 samples, 1.76%)</title><rect x="34.1880%" y="149" width="1.7570%" height="15" fill="rgb(233,84,52)"/><text x="34.4380%" y="159.50"></text></g><g><title>coherence_checking (43,911,586 samples, 2.01%)</title><rect x="33.9863%" y="181" width="2.0136%" height="15" fill="rgb(207,117,47)"/><text x="34.2363%" y="191.50">c..</text></g><g><title>associated_items (2,571,030 samples, 0.12%)</title><rect x="54.1031%" y="133" width="0.1179%" height="15" fill="rgb(249,43,39)"/><text x="54.3531%" y="143.50"></text></g><g><title>dropck_outlives (11,745,027 samples, 0.54%)</title><rect x="54.2541%" y="133" width="0.5386%" height="15" fill="rgb(209,38,44)"/><text x="54.5041%" y="143.50"></text></g><g><title>trait_impls_of (2,344,158 samples, 0.11%)</title><rect x="56.3542%" y="117" width="0.1075%" height="15" fill="rgb(236,212,23)"/><text x="56.6042%" y="127.50"></text></g><g><title>evaluate_obligation (35,368,062 samples, 1.62%)</title><rect x="54.8430%" y="133" width="1.6218%" height="15" fill="rgb(242,79,21)"/><text x="55.0930%" y="143.50"></text></g><g><title>evaluate_obligation (5,735,950 samples, 0.26%)</title><rect x="57.0232%" y="117" width="0.2630%" height="15" fill="rgb(211,96,35)"/><text x="57.2732%" y="127.50"></text></g><g><title>method_autoderef_steps (13,621,344 samples, 0.62%)</title><rect x="56.6646%" y="133" width="0.6246%" height="15" fill="rgb(253,215,40)"/><text x="56.9146%" y="143.50"></text></g><g><title>dropck_outlives (10,276,083 samples, 0.47%)</title><rect x="63.0692%" y="117" width="0.4712%" height="15" fill="rgb(211,81,21)"/><text x="63.3192%" y="127.50"></text></g><g><title>evaluate_obligation (13,848,315 samples, 0.64%)</title><rect x="63.5752%" y="117" width="0.6350%" height="15" fill="rgb(208,190,38)"/><text x="63.8252%" y="127.50"></text></g><g><title>is_copy_raw (4,192,557 samples, 0.19%)</title><rect x="64.3078%" y="117" width="0.1922%" height="15" fill="rgb(235,213,38)"/><text x="64.5578%" y="127.50"></text></g><g><title>evaluate_obligation (2,522,620 samples, 0.12%)</title><rect x="64.3844%" y="101" width="0.1157%" height="15" fill="rgb(237,122,38)"/><text x="64.6344%" y="111.50"></text></g><g><title>evaluate_obligation (3,069,846 samples, 0.14%)</title><rect x="64.6877%" y="101" width="0.1408%" height="15" fill="rgb(244,218,35)"/><text x="64.9377%" y="111.50"></text></g><g><title>method_autoderef_steps (6,835,323 samples, 0.31%)</title><rect x="64.5160%" y="117" width="0.3134%" height="15" fill="rgb(240,68,47)"/><text x="64.7660%" y="127.50"></text></g><g><title>typeck (162,073,724 samples, 7.43%)</title><rect x="57.4743%" y="133" width="7.4319%" height="15" fill="rgb(210,16,53)"/><text x="57.7243%" y="143.50">typeck</text></g><g><title>item_bodies_checking (630,020,741 samples, 28.89%)</title><rect x="36.0405%" y="181" width="28.8896%" height="15" fill="rgb(235,124,12)"/><text x="36.2905%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (630,014,891 samples, 28.89%)</title><rect x="36.0408%" y="165" width="28.8893%" height="15" fill="rgb(224,169,11)"/><text x="36.2908%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (626,836,360 samples, 28.74%)</title><rect x="36.1865%" y="149" width="28.7436%" height="15" fill="rgb(250,166,2)"/><text x="36.4365%" y="159.50">typeck</text></g><g><title>mir_borrowck (2,241,014 samples, 0.10%)</title><rect x="67.1550%" y="101" width="0.1028%" height="15" fill="rgb(242,216,29)"/><text x="67.4050%" y="111.50"></text></g><g><title>mir_borrowck (11,358,285 samples, 0.52%)</title><rect x="66.9493%" y="117" width="0.5208%" height="15" fill="rgb(230,116,27)"/><text x="67.1993%" y="127.50"></text></g><g><title>dropck_outlives (2,686,948 samples, 0.12%)</title><rect x="68.5078%" y="37" width="0.1232%" height="15" fill="rgb(228,99,48)"/><text x="68.7578%" y="47.50"></text></g><g><title>evaluate_obligation (2,648,928 samples, 0.12%)</title><rect x="68.6318%" y="37" width="0.1215%" height="15" fill="rgb(253,11,6)"/><text x="68.8818%" y="47.50"></text></g><g><title>mir_built (31,504,188 samples, 1.44%)</title><rect x="67.4845%" y="69" width="1.4446%" height="15" fill="rgb(247,143,39)"/><text x="67.7345%" y="79.50"></text></g><g><title>typeck (29,984,071 samples, 1.37%)</title><rect x="67.5542%" y="53" width="1.3749%" height="15" fill="rgb(236,97,10)"/><text x="67.8042%" y="63.50"></text></g><g><title>mir_const (34,493,102 samples, 1.58%)</title><rect x="67.4738%" y="101" width="1.5817%" height="15" fill="rgb(233,208,19)"/><text x="67.7238%" y="111.50"></text></g><g><title>unsafety_check_result (34,308,700 samples, 1.57%)</title><rect x="67.4822%" y="85" width="1.5732%" height="15" fill="rgb(216,164,2)"/><text x="67.7322%" y="95.50"></text></g><g><title>unsafety_check_result (2,754,972 samples, 0.13%)</title><rect x="68.9291%" y="69" width="0.1263%" height="15" fill="rgb(220,129,5)"/><text x="69.1791%" y="79.50"></text></g><g><title>mir_promoted (34,578,872 samples, 1.59%)</title><rect x="67.4701%" y="117" width="1.5856%" height="15" fill="rgb(242,17,10)"/><text x="67.7201%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,538,696 samples, 0.12%)</title><rect x="69.0603%" y="117" width="0.1164%" height="15" fill="rgb(242,107,0)"/><text x="69.3103%" y="127.50"></text></g><g><title>type_of (60,857,989 samples, 2.79%)</title><rect x="66.6332%" y="149" width="2.7906%" height="15" fill="rgb(251,28,31)"/><text x="66.8832%" y="159.50">ty..</text></g><g><title>mir_borrowck (59,720,699 samples, 2.74%)</title><rect x="66.6853%" y="133" width="2.7385%" height="15" fill="rgb(233,223,10)"/><text x="66.9353%" y="143.50">mi..</text></g><g><title>type_op_prove_predicate (5,261,618 samples, 0.24%)</title><rect x="69.1825%" y="117" width="0.2413%" height="15" fill="rgb(215,21,27)"/><text x="69.4325%" y="127.50"></text></g><g><title>item_types_checking (103,084,731 samples, 4.73%)</title><rect x="64.9301%" y="181" width="4.7270%" height="15" fill="rgb(232,23,21)"/><text x="65.1801%" y="191.50">item_t..</text></g><g><title>check_mod_item_types (103,009,430 samples, 4.72%)</title><rect x="64.9336%" y="165" width="4.7235%" height="15" fill="rgb(244,5,23)"/><text x="65.1836%" y="175.50">check_..</text></g><g><title>typeck (5,086,566 samples, 0.23%)</title><rect x="69.4238%" y="149" width="0.2332%" height="15" fill="rgb(226,81,46)"/><text x="69.6738%" y="159.50"></text></g><g><title>fn_sig (5,001,256 samples, 0.23%)</title><rect x="69.9096%" y="149" width="0.2293%" height="15" fill="rgb(247,70,30)"/><text x="70.1596%" y="159.50"></text></g><g><title>named_region_map (3,673,288 samples, 0.17%)</title><rect x="70.2754%" y="133" width="0.1684%" height="15" fill="rgb(212,68,19)"/><text x="70.5254%" y="143.50"></text></g><g><title>resolve_lifetimes (3,356,556 samples, 0.15%)</title><rect x="70.2899%" y="117" width="0.1539%" height="15" fill="rgb(240,187,13)"/><text x="70.5399%" y="127.50"></text></g><g><title>generics_of (6,859,036 samples, 0.31%)</title><rect x="70.1389%" y="149" width="0.3145%" height="15" fill="rgb(223,113,26)"/><text x="70.3889%" y="159.50"></text></g><g><title>late_bound_vars_map (2,320,882 samples, 0.11%)</title><rect x="70.8160%" y="101" width="0.1064%" height="15" fill="rgb(206,192,2)"/><text x="71.0660%" y="111.50"></text></g><g><title>resolve_lifetimes (2,204,221 samples, 0.10%)</title><rect x="70.8214%" y="85" width="0.1011%" height="15" fill="rgb(241,108,4)"/><text x="71.0714%" y="95.50"></text></g><g><title>explicit_predicates_of (8,684,389 samples, 0.40%)</title><rect x="70.6103%" y="117" width="0.3982%" height="15" fill="rgb(247,173,49)"/><text x="70.8603%" y="127.50"></text></g><g><title>predicates_of (17,378,251 samples, 0.80%)</title><rect x="70.4842%" y="149" width="0.7969%" height="15" fill="rgb(224,114,35)"/><text x="70.7342%" y="159.50"></text></g><g><title>predicates_defined_on (16,305,419 samples, 0.75%)</title><rect x="70.5334%" y="133" width="0.7477%" height="15" fill="rgb(245,159,27)"/><text x="70.7834%" y="143.50"></text></g><g><title>inferred_outlives_of (5,945,235 samples, 0.27%)</title><rect x="71.0085%" y="117" width="0.2726%" height="15" fill="rgb(245,172,44)"/><text x="71.2585%" y="127.50"></text></g><g><title>inferred_outlives_crate (5,577,292 samples, 0.26%)</title><rect x="71.0254%" y="101" width="0.2557%" height="15" fill="rgb(236,23,11)"/><text x="71.2754%" y="111.50"></text></g><g><title>type_of (2,831,541 samples, 0.13%)</title><rect x="71.1513%" y="85" width="0.1298%" height="15" fill="rgb(205,117,38)"/><text x="71.4013%" y="95.50"></text></g><g><title>type_collecting (37,184,051 samples, 1.71%)</title><rect x="69.6598%" y="181" width="1.7051%" height="15" fill="rgb(237,72,25)"/><text x="69.9098%" y="191.50"></text></g><g><title>collect_mod_item_types (37,123,000 samples, 1.70%)</title><rect x="69.6626%" y="165" width="1.7023%" height="15" fill="rgb(244,70,9)"/><text x="69.9126%" y="175.50"></text></g><g><title>evaluate_obligation (8,948,800 samples, 0.41%)</title><rect x="73.9583%" y="149" width="0.4103%" height="15" fill="rgb(217,125,39)"/><text x="74.2083%" y="159.50"></text></g><g><title>implied_outlives_bounds (6,070,171 samples, 0.28%)</title><rect x="74.3803%" y="149" width="0.2783%" height="15" fill="rgb(235,36,10)"/><text x="74.6303%" y="159.50"></text></g><g><title>param_env (8,245,787 samples, 0.38%)</title><rect x="74.6670%" y="149" width="0.3781%" height="15" fill="rgb(251,123,47)"/><text x="74.9170%" y="159.50"></text></g><g><title>region_scope_tree (6,900,781 samples, 0.32%)</title><rect x="75.0502%" y="149" width="0.3164%" height="15" fill="rgb(221,13,13)"/><text x="75.3002%" y="159.50"></text></g><g><title>check_impl_item_well_formed (83,002,276 samples, 3.81%)</title><rect x="71.5793%" y="165" width="3.8061%" height="15" fill="rgb(238,131,9)"/><text x="71.8293%" y="175.50">chec..</text></g><g><title>evaluate_obligation (9,394,981 samples, 0.43%)</title><rect x="77.3208%" y="149" width="0.4308%" height="15" fill="rgb(211,50,8)"/><text x="77.5708%" y="159.50"></text></g><g><title>implied_outlives_bounds (2,323,096 samples, 0.11%)</title><rect x="77.7685%" y="149" width="0.1065%" height="15" fill="rgb(245,182,24)"/><text x="78.0185%" y="159.50"></text></g><g><title>param_env (6,692,634 samples, 0.31%)</title><rect x="77.9439%" y="149" width="0.3069%" height="15" fill="rgb(242,14,37)"/><text x="78.1939%" y="159.50"></text></g><g><title>check_item_well_formed (65,181,473 samples, 2.99%)</title><rect x="75.3854%" y="165" width="2.9889%" height="15" fill="rgb(246,228,12)"/><text x="75.6354%" y="175.50">che..</text></g><g><title>analysis (1,707,158,268 samples, 78.28%)</title><rect x="0.2752%" y="213" width="78.2818%" height="15" fill="rgb(213,55,15)"/><text x="0.5252%" y="223.50">analysis</text></g><g><title>type_check_crate (973,727,643 samples, 44.65%)</title><rect x="33.9067%" y="197" width="44.6503%" height="15" fill="rgb(209,9,3)"/><text x="34.1567%" y="207.50">type_check_crate</text></g><g><title>wf_checking (156,681,803 samples, 7.18%)</title><rect x="71.3724%" y="181" width="7.1846%" height="15" fill="rgb(230,59,30)"/><text x="71.6224%" y="191.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,985,602 samples, 0.18%)</title><rect x="78.3742%" y="165" width="0.1828%" height="15" fill="rgb(209,121,21)"/><text x="78.6242%" y="175.50"></text></g><g><title>AST_validation (3,512,729 samples, 0.16%)</title><rect x="78.6070%" y="197" width="0.1611%" height="15" fill="rgb(220,109,13)"/><text x="78.8570%" y="207.50"></text></g><g><title>complete_gated_feature_checking (2,482,018 samples, 0.11%)</title><rect x="78.7681%" y="197" width="0.1138%" height="15" fill="rgb(232,18,1)"/><text x="79.0181%" y="207.50"></text></g><g><title>metadata_register_crate (6,789,586 samples, 0.31%)</title><rect x="90.9115%" y="165" width="0.3113%" height="15" fill="rgb(215,41,42)"/><text x="91.1615%" y="175.50"></text></g><g><title>macro_expand_crate (272,956,200 samples, 12.52%)</title><rect x="78.8849%" y="197" width="12.5164%" height="15" fill="rgb(224,123,36)"/><text x="79.1349%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (272,938,880 samples, 12.52%)</title><rect x="78.8857%" y="181" width="12.5156%" height="15" fill="rgb(240,125,3)"/><text x="79.1357%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (3,892,091 samples, 0.18%)</title><rect x="91.2228%" y="165" width="0.1785%" height="15" fill="rgb(205,98,50)"/><text x="91.4728%" y="175.50"></text></g><g><title>late_resolve_crate (27,797,358 samples, 1.27%)</title><rect x="91.5467%" y="181" width="1.2746%" height="15" fill="rgb(205,185,37)"/><text x="91.7967%" y="191.50"></text></g><g><title>resolve_check_unused (2,234,044 samples, 0.10%)</title><rect x="92.8339%" y="181" width="0.1024%" height="15" fill="rgb(238,207,15)"/><text x="93.0839%" y="191.50"></text></g><g><title>configure_and_expand (314,690,201 samples, 14.43%)</title><rect x="78.5971%" y="213" width="14.4301%" height="15" fill="rgb(213,199,42)"/><text x="78.8471%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (35,311,000 samples, 1.62%)</title><rect x="91.4081%" y="197" width="1.6192%" height="15" fill="rgb(235,201,11)"/><text x="91.6581%" y="207.50"></text></g><g><title>drop_ast (5,558,532 samples, 0.25%)</title><rect x="93.0273%" y="213" width="0.2549%" height="15" fill="rgb(207,46,11)"/><text x="93.2773%" y="223.50"></text></g><g><title>early_lint_checks (8,735,657 samples, 0.40%)</title><rect x="93.2838%" y="213" width="0.4006%" height="15" fill="rgb(241,35,35)"/><text x="93.5338%" y="223.50"></text></g><g><title>free_global_ctxt (17,987,099 samples, 0.82%)</title><rect x="93.6843%" y="213" width="0.8248%" height="15" fill="rgb(243,32,47)"/><text x="93.9343%" y="223.50"></text></g><g><title>is_copy_raw (2,679,498 samples, 0.12%)</title><rect x="96.4260%" y="149" width="0.1229%" height="15" fill="rgb(247,202,23)"/><text x="96.6760%" y="159.50"></text></g><g><title>needs_drop_raw (3,115,583 samples, 0.14%)</title><rect x="96.4115%" y="165" width="0.1429%" height="15" fill="rgb(219,102,11)"/><text x="96.6615%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,171,243 samples, 0.47%)</title><rect x="96.1556%" y="181" width="0.4664%" height="15" fill="rgb(243,110,44)"/><text x="96.4056%" y="191.50"></text></g><g><title>optimized_mir (15,610,982 samples, 0.72%)</title><rect x="95.9074%" y="197" width="0.7158%" height="15" fill="rgb(222,74,54)"/><text x="96.1574%" y="207.50"></text></g><g><title>generate_crate_metadata (46,919,709 samples, 2.15%)</title><rect x="94.5091%" y="213" width="2.1515%" height="15" fill="rgb(216,99,12)"/><text x="94.7591%" y="223.50">g..</text></g><g><title>hir_lowering (63,683,454 samples, 2.92%)</title><rect x="96.6606%" y="213" width="2.9202%" height="15" fill="rgb(226,22,26)"/><text x="96.9106%" y="223.50">hi..</text></g><g><title>self_profile_alloc_query_strings (5,827,805 samples, 0.27%)</title><rect x="99.6372%" y="213" width="0.2672%" height="15" fill="rgb(217,163,10)"/><text x="99.8872%" y="223.50"></text></g><g><title>all (2,180,786,429 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (2,180,786,429 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>