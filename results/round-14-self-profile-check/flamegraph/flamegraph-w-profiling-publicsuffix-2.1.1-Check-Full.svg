<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (314,914 samples, 0.20%)</title><rect x="12.3439%" y="117" width="0.2031%" height="15" fill="rgb(227,0,7)"/><text x="12.5939%" y="127.50"></text></g><g><title>item_attrs (267,683 samples, 0.17%)</title><rect x="13.0530%" y="85" width="0.1727%" height="15" fill="rgb(217,0,24)"/><text x="13.3030%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (259,043 samples, 0.17%)</title><rect x="13.0586%" y="69" width="0.1671%" height="15" fill="rgb(221,193,54)"/><text x="13.3086%" y="79.50"></text></g><g><title>codegen_fn_attrs (385,034 samples, 0.25%)</title><rect x="12.9906%" y="101" width="0.2483%" height="15" fill="rgb(248,212,6)"/><text x="13.2406%" y="111.50"></text></g><g><title>is_copy_raw (187,742 samples, 0.12%)</title><rect x="15.9265%" y="85" width="0.1211%" height="15" fill="rgb(208,68,35)"/><text x="16.1765%" y="95.50"></text></g><g><title>adt_drop_tys (210,694 samples, 0.14%)</title><rect x="16.1508%" y="53" width="0.1359%" height="15" fill="rgb(232,128,0)"/><text x="16.4008%" y="63.50"></text></g><g><title>adt_drop_tys (552,477 samples, 0.36%)</title><rect x="16.1220%" y="69" width="0.3563%" height="15" fill="rgb(207,160,47)"/><text x="16.3720%" y="79.50"></text></g><g><title>is_copy_raw (728,118 samples, 0.47%)</title><rect x="16.4783%" y="69" width="0.4696%" height="15" fill="rgb(228,23,34)"/><text x="16.7283%" y="79.50"></text></g><g><title>evaluate_obligation (604,165 samples, 0.39%)</title><rect x="16.5582%" y="53" width="0.3897%" height="15" fill="rgb(218,30,26)"/><text x="16.8082%" y="63.50"></text></g><g><title>needs_drop_raw (1,460,408 samples, 0.94%)</title><rect x="16.0497%" y="85" width="0.9419%" height="15" fill="rgb(220,122,19)"/><text x="16.2997%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (428,916 samples, 0.28%)</title><rect x="17.2113%" y="69" width="0.2766%" height="15" fill="rgb(250,228,42)"/><text x="17.4613%" y="79.50"></text></g><g><title>impl_parent (344,504 samples, 0.22%)</title><rect x="18.1822%" y="53" width="0.2222%" height="15" fill="rgb(240,193,28)"/><text x="18.4322%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (226,681 samples, 0.15%)</title><rect x="18.2582%" y="37" width="0.1462%" height="15" fill="rgb(216,20,37)"/><text x="18.5082%" y="47.50"></text></g><g><title>specialization_graph_of (2,452,376 samples, 1.58%)</title><rect x="17.5990%" y="69" width="1.5818%" height="15" fill="rgb(206,188,39)"/><text x="17.8490%" y="79.50"></text></g><g><title>impl_trait_ref (1,203,723 samples, 0.78%)</title><rect x="18.4044%" y="53" width="0.7764%" height="15" fill="rgb(217,207,13)"/><text x="18.6544%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,079,841 samples, 0.70%)</title><rect x="18.4843%" y="37" width="0.6965%" height="15" fill="rgb(231,73,38)"/><text x="18.7343%" y="47.50"></text></g><g><title>resolve_instance (3,478,175 samples, 2.24%)</title><rect x="17.0084%" y="85" width="2.2434%" height="15" fill="rgb(225,20,46)"/><text x="17.2584%" y="95.50">r..</text></g><g><title>thir_body (1,423,744 samples, 0.92%)</title><rect x="19.2782%" y="85" width="0.9183%" height="15" fill="rgb(210,31,41)"/><text x="19.5282%" y="95.50"></text></g><g><title>mir_const (13,375,862 samples, 8.63%)</title><rect x="11.5850%" y="133" width="8.6273%" height="15" fill="rgb(221,200,47)"/><text x="11.8350%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (11,884,195 samples, 7.67%)</title><rect x="12.5471%" y="117" width="7.6652%" height="15" fill="rgb(226,26,5)"/><text x="12.7971%" y="127.50">unsafety_c..</text></g><g><title>mir_built (10,811,516 samples, 6.97%)</title><rect x="13.2389%" y="101" width="6.9733%" height="15" fill="rgb(249,33,26)"/><text x="13.4889%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (208,862 samples, 0.13%)</title><rect x="20.2122%" y="133" width="0.1347%" height="15" fill="rgb(235,183,28)"/><text x="20.4622%" y="143.50"></text></g><g><title>mir_promoted (14,724,144 samples, 9.50%)</title><rect x="10.8503%" y="149" width="9.4969%" height="15" fill="rgb(221,5,38)"/><text x="11.1003%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (276,785 samples, 0.18%)</title><rect x="20.3472%" y="149" width="0.1785%" height="15" fill="rgb(247,18,42)"/><text x="20.5972%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (515,868 samples, 0.33%)</title><rect x="20.5257%" y="149" width="0.3327%" height="15" fill="rgb(241,131,45)"/><text x="20.7757%" y="159.50"></text></g><g><title>normalize_projection_ty (337,906 samples, 0.22%)</title><rect x="20.6405%" y="133" width="0.2179%" height="15" fill="rgb(249,31,29)"/><text x="20.8905%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,514,536 samples, 1.62%)</title><rect x="20.9588%" y="149" width="1.6218%" height="15" fill="rgb(225,111,53)"/><text x="21.2088%" y="159.50"></text></g><g><title>evaluate_obligation (169,453 samples, 0.11%)</title><rect x="22.4714%" y="133" width="0.1093%" height="15" fill="rgb(238,160,17)"/><text x="22.7214%" y="143.50"></text></g><g><title>MIR_borrow_checking (33,921,169 samples, 21.88%)</title><rect x="0.7081%" y="181" width="21.8788%" height="15" fill="rgb(214,148,48)"/><text x="0.9581%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (33,744,278 samples, 21.76%)</title><rect x="0.8222%" y="165" width="21.7647%" height="15" fill="rgb(232,36,49)"/><text x="1.0722%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (189,972 samples, 0.12%)</title><rect x="22.5869%" y="181" width="0.1225%" height="15" fill="rgb(209,103,24)"/><text x="22.8369%" y="191.50"></text></g><g><title>hir_module_items (223,403 samples, 0.14%)</title><rect x="22.7094%" y="181" width="0.1441%" height="15" fill="rgb(229,88,8)"/><text x="22.9594%" y="191.50"></text></g><g><title>codegen_fn_attrs (284,625 samples, 0.18%)</title><rect x="23.2096%" y="117" width="0.1836%" height="15" fill="rgb(213,181,19)"/><text x="23.4596%" y="127.50"></text></g><g><title>codegen_fn_attrs (513,906 samples, 0.33%)</title><rect x="23.0675%" y="149" width="0.3315%" height="15" fill="rgb(254,191,54)"/><text x="23.3175%" y="159.50"></text></g><g><title>should_inherit_track_caller (444,365 samples, 0.29%)</title><rect x="23.1123%" y="133" width="0.2866%" height="15" fill="rgb(241,83,37)"/><text x="23.3623%" y="143.50"></text></g><g><title>check_mod_attrs (825,358 samples, 0.53%)</title><rect x="22.8667%" y="165" width="0.5323%" height="15" fill="rgb(233,36,39)"/><text x="23.1167%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (432,286 samples, 0.28%)</title><rect x="23.5523%" y="165" width="0.2788%" height="15" fill="rgb(226,3,54)"/><text x="23.8023%" y="175.50"></text></g><g><title>misc_checking_1 (1,573,307 samples, 1.01%)</title><rect x="22.8538%" y="181" width="1.0148%" height="15" fill="rgb(245,192,40)"/><text x="23.1038%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (469,705 samples, 0.30%)</title><rect x="23.8695%" y="165" width="0.3030%" height="15" fill="rgb(238,167,29)"/><text x="24.1195%" y="175.50"></text></g><g><title>check_mod_liveness (352,013 samples, 0.23%)</title><rect x="23.9454%" y="149" width="0.2270%" height="15" fill="rgb(232,182,51)"/><text x="24.1954%" y="159.50"></text></g><g><title>misc_checking_2 (1,292,595 samples, 0.83%)</title><rect x="23.8685%" y="181" width="0.8337%" height="15" fill="rgb(231,60,39)"/><text x="24.1185%" y="191.50"></text></g><g><title>match_checking (821,440 samples, 0.53%)</title><rect x="24.1724%" y="165" width="0.5298%" height="15" fill="rgb(208,69,12)"/><text x="24.4224%" y="175.50"></text></g><g><title>check_match (781,449 samples, 0.50%)</title><rect x="24.1982%" y="149" width="0.5040%" height="15" fill="rgb(235,93,37)"/><text x="24.4482%" y="159.50"></text></g><g><title>check_private_in_public (265,243 samples, 0.17%)</title><rect x="24.7091%" y="165" width="0.1711%" height="15" fill="rgb(213,116,39)"/><text x="24.9591%" y="175.50"></text></g><g><title>death_checking (662,748 samples, 0.43%)</title><rect x="24.8802%" y="165" width="0.4275%" height="15" fill="rgb(222,207,29)"/><text x="25.1302%" y="175.50"></text></g><g><title>item_attrs (222,602 samples, 0.14%)</title><rect x="25.1640%" y="149" width="0.1436%" height="15" fill="rgb(206,96,30)"/><text x="25.4140%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (220,262 samples, 0.14%)</title><rect x="25.1656%" y="133" width="0.1421%" height="15" fill="rgb(218,138,4)"/><text x="25.4156%" y="143.50"></text></g><g><title>eval_to_const_value_raw (272,633 samples, 0.18%)</title><rect x="25.8742%" y="133" width="0.1758%" height="15" fill="rgb(250,191,14)"/><text x="26.1242%" y="143.50"></text></g><g><title>eval_to_const_value_raw (261,783 samples, 0.17%)</title><rect x="25.8812%" y="117" width="0.1688%" height="15" fill="rgb(239,60,40)"/><text x="26.1312%" y="127.50"></text></g><g><title>eval_to_allocation_raw (250,393 samples, 0.16%)</title><rect x="25.8885%" y="101" width="0.1615%" height="15" fill="rgb(206,27,48)"/><text x="26.1385%" y="111.50"></text></g><g><title>param_env (169,042 samples, 0.11%)</title><rect x="26.0500%" y="133" width="0.1090%" height="15" fill="rgb(225,35,8)"/><text x="26.3000%" y="143.50"></text></g><g><title>crate_lints (2,476,428 samples, 1.60%)</title><rect x="25.3086%" y="149" width="1.5973%" height="15" fill="rgb(250,213,24)"/><text x="25.5586%" y="159.50"></text></g><g><title>type_of (1,147,625 samples, 0.74%)</title><rect x="26.1656%" y="133" width="0.7402%" height="15" fill="rgb(247,123,22)"/><text x="26.4156%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (910,820 samples, 0.59%)</title><rect x="26.3184%" y="117" width="0.5875%" height="15" fill="rgb(231,138,38)"/><text x="26.5684%" y="127.50"></text></g><g><title>lint_checking (3,114,735 samples, 2.01%)</title><rect x="25.3076%" y="165" width="2.0090%" height="15" fill="rgb(231,145,46)"/><text x="25.5576%" y="175.50">l..</text></g><g><title>module_lints (636,857 samples, 0.41%)</title><rect x="26.9058%" y="149" width="0.4108%" height="15" fill="rgb(251,118,11)"/><text x="27.1558%" y="159.50"></text></g><g><title>lint_mod (631,917 samples, 0.41%)</title><rect x="26.9090%" y="133" width="0.4076%" height="15" fill="rgb(217,147,25)"/><text x="27.1590%" y="143.50"></text></g><g><title>privacy_access_levels (286,183 samples, 0.18%)</title><rect x="27.3166%" y="165" width="0.1846%" height="15" fill="rgb(247,81,37)"/><text x="27.5666%" y="175.50"></text></g><g><title>privacy_checking_modules (1,053,362 samples, 0.68%)</title><rect x="27.5012%" y="165" width="0.6794%" height="15" fill="rgb(209,12,38)"/><text x="27.7512%" y="175.50"></text></g><g><title>check_mod_privacy (1,050,392 samples, 0.68%)</title><rect x="27.5031%" y="149" width="0.6775%" height="15" fill="rgb(227,1,9)"/><text x="27.7531%" y="159.50"></text></g><g><title>misc_checking_3 (5,413,861 samples, 3.49%)</title><rect x="24.7022%" y="181" width="3.4919%" height="15" fill="rgb(248,47,43)"/><text x="24.9522%" y="191.50">mis..</text></g><g><title>impl_trait_ref (182,291 samples, 0.12%)</title><rect x="28.3809%" y="85" width="0.1176%" height="15" fill="rgb(221,10,30)"/><text x="28.6309%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (161,451 samples, 0.10%)</title><rect x="28.3944%" y="69" width="0.1041%" height="15" fill="rgb(210,229,1)"/><text x="28.6444%" y="79.50"></text></g><g><title>adt_destructor (357,004 samples, 0.23%)</title><rect x="28.2881%" y="133" width="0.2303%" height="15" fill="rgb(222,148,37)"/><text x="28.5381%" y="143.50"></text></g><g><title>coherent_trait (354,334 samples, 0.23%)</title><rect x="28.2898%" y="117" width="0.2285%" height="15" fill="rgb(234,67,33)"/><text x="28.5398%" y="127.50"></text></g><g><title>specialization_graph_of (353,044 samples, 0.23%)</title><rect x="28.2907%" y="101" width="0.2277%" height="15" fill="rgb(247,98,35)"/><text x="28.5407%" y="111.50"></text></g><g><title>impl_parent (3,024,578 samples, 1.95%)</title><rect x="31.9532%" y="117" width="1.9508%" height="15" fill="rgb(247,138,52)"/><text x="32.2032%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,764,462 samples, 1.14%)</title><rect x="32.7660%" y="101" width="1.1381%" height="15" fill="rgb(213,79,30)"/><text x="33.0160%" y="111.50"></text></g><g><title>impl_trait_ref (6,042,750 samples, 3.90%)</title><rect x="33.9041%" y="117" width="3.8975%" height="15" fill="rgb(246,177,23)"/><text x="34.1541%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,772,337 samples, 3.08%)</title><rect x="34.7235%" y="101" width="3.0781%" height="15" fill="rgb(230,62,27)"/><text x="34.9735%" y="111.50">met..</text></g><g><title>trait_impls_of (1,150,212 samples, 0.74%)</title><rect x="37.8130%" y="117" width="0.7419%" height="15" fill="rgb(216,154,8)"/><text x="38.0630%" y="127.50"></text></g><g><title>implementations_of_trait (343,913 samples, 0.22%)</title><rect x="38.3330%" y="101" width="0.2218%" height="15" fill="rgb(244,35,45)"/><text x="38.5830%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (256,851 samples, 0.17%)</title><rect x="38.3892%" y="85" width="0.1657%" height="15" fill="rgb(251,115,12)"/><text x="38.6392%" y="95.50"></text></g><g><title>coherent_trait (15,963,768 samples, 10.30%)</title><rect x="28.2590%" y="149" width="10.2964%" height="15" fill="rgb(240,54,50)"/><text x="28.5090%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (15,423,372 samples, 9.95%)</title><rect x="28.6075%" y="133" width="9.9479%" height="15" fill="rgb(233,84,52)"/><text x="28.8575%" y="143.50">specialization..</text></g><g><title>coherence_checking (16,060,479 samples, 10.36%)</title><rect x="28.2431%" y="165" width="10.3588%" height="15" fill="rgb(207,117,47)"/><text x="28.4931%" y="175.50">coherence_check..</text></g><g><title>associated_item (515,556 samples, 0.33%)</title><rect x="53.2850%" y="101" width="0.3325%" height="15" fill="rgb(249,43,39)"/><text x="53.5350%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (407,186 samples, 0.26%)</title><rect x="53.3549%" y="85" width="0.2626%" height="15" fill="rgb(209,38,44)"/><text x="53.6049%" y="95.50"></text></g><g><title>associated_items (734,988 samples, 0.47%)</title><rect x="53.1610%" y="117" width="0.4741%" height="15" fill="rgb(236,212,23)"/><text x="53.4110%" y="127.50"></text></g><g><title>adt_dtorck_constraint (260,302 samples, 0.17%)</title><rect x="53.7925%" y="101" width="0.1679%" height="15" fill="rgb(242,79,21)"/><text x="54.0425%" y="111.50"></text></g><g><title>dropck_outlives (454,365 samples, 0.29%)</title><rect x="53.6789%" y="117" width="0.2931%" height="15" fill="rgb(211,96,35)"/><text x="53.9289%" y="127.50"></text></g><g><title>generics_of (165,293 samples, 0.11%)</title><rect x="55.0101%" y="101" width="0.1066%" height="15" fill="rgb(253,215,40)"/><text x="55.2601%" y="111.50"></text></g><g><title>predicates_of (408,313 samples, 0.26%)</title><rect x="55.2253%" y="101" width="0.2634%" height="15" fill="rgb(211,81,21)"/><text x="55.4753%" y="111.50"></text></g><g><title>predicates_defined_on (256,743 samples, 0.17%)</title><rect x="55.3231%" y="85" width="0.1656%" height="15" fill="rgb(208,190,38)"/><text x="55.5731%" y="95.50"></text></g><g><title>specializes (388,835 samples, 0.25%)</title><rect x="55.4887%" y="101" width="0.2508%" height="15" fill="rgb(235,213,38)"/><text x="55.7387%" y="111.50"></text></g><g><title>param_env (249,552 samples, 0.16%)</title><rect x="55.5785%" y="85" width="0.1610%" height="15" fill="rgb(237,122,38)"/><text x="55.8285%" y="95.50"></text></g><g><title>trait_impls_of (339,853 samples, 0.22%)</title><rect x="55.7448%" y="101" width="0.2192%" height="15" fill="rgb(244,218,35)"/><text x="55.9948%" y="111.50"></text></g><g><title>evaluate_obligation (3,089,412 samples, 1.99%)</title><rect x="53.9720%" y="117" width="1.9926%" height="15" fill="rgb(240,68,47)"/><text x="54.2220%" y="127.50">e..</text></g><g><title>method_autoderef_steps (156,230 samples, 0.10%)</title><rect x="56.3801%" y="117" width="0.1008%" height="15" fill="rgb(210,16,53)"/><text x="56.6301%" y="127.50"></text></g><g><title>predicates_of (326,882 samples, 0.21%)</title><rect x="56.6069%" y="117" width="0.2108%" height="15" fill="rgb(235,124,12)"/><text x="56.8569%" y="127.50"></text></g><g><title>predicates_defined_on (234,221 samples, 0.15%)</title><rect x="56.6666%" y="101" width="0.1511%" height="15" fill="rgb(224,169,11)"/><text x="56.9166%" y="111.50"></text></g><g><title>associated_item (490,316 samples, 0.32%)</title><rect x="59.8845%" y="85" width="0.3162%" height="15" fill="rgb(250,166,2)"/><text x="60.1345%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (459,506 samples, 0.30%)</title><rect x="59.9043%" y="69" width="0.2964%" height="15" fill="rgb(242,216,29)"/><text x="60.1543%" y="79.50"></text></g><g><title>associated_items (556,446 samples, 0.36%)</title><rect x="59.8484%" y="101" width="0.3589%" height="15" fill="rgb(230,116,27)"/><text x="60.0984%" y="111.50"></text></g><g><title>adt_dtorck_constraint (226,183 samples, 0.15%)</title><rect x="60.2877%" y="85" width="0.1459%" height="15" fill="rgb(228,99,48)"/><text x="60.5377%" y="95.50"></text></g><g><title>dropck_outlives (555,596 samples, 0.36%)</title><rect x="60.2211%" y="101" width="0.3584%" height="15" fill="rgb(253,11,6)"/><text x="60.4711%" y="111.50"></text></g><g><title>normalize_projection_ty (226,262 samples, 0.15%)</title><rect x="60.4335%" y="85" width="0.1459%" height="15" fill="rgb(247,143,39)"/><text x="60.6835%" y="95.50"></text></g><g><title>evaluate_obligation (891,707 samples, 0.58%)</title><rect x="60.5795%" y="101" width="0.5751%" height="15" fill="rgb(236,97,10)"/><text x="60.8295%" y="111.50"></text></g><g><title>predicates_of (212,721 samples, 0.14%)</title><rect x="61.4449%" y="101" width="0.1372%" height="15" fill="rgb(233,208,19)"/><text x="61.6949%" y="111.50"></text></g><g><title>typeck (7,371,064 samples, 4.75%)</title><rect x="56.9059%" y="117" width="4.7543%" height="15" fill="rgb(216,164,2)"/><text x="57.1559%" y="127.50">typeck</text></g><g><title>item_bodies_checking (36,024,482 samples, 23.24%)</title><rect x="38.6284%" y="165" width="23.2354%" height="15" fill="rgb(220,129,5)"/><text x="38.8784%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (36,021,532 samples, 23.23%)</title><rect x="38.6303%" y="149" width="23.2335%" height="15" fill="rgb(242,17,10)"/><text x="38.8803%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (35,903,911 samples, 23.16%)</title><rect x="38.7062%" y="133" width="23.1576%" height="15" fill="rgb(242,107,0)"/><text x="38.9562%" y="143.50">typeck</text></g><g><title>visibility (251,882 samples, 0.16%)</title><rect x="61.7013%" y="117" width="0.1625%" height="15" fill="rgb(251,28,31)"/><text x="61.9513%" y="127.50"></text></g><g><title>item_types_checking (1,987,053 samples, 1.28%)</title><rect x="61.8638%" y="165" width="1.2816%" height="15" fill="rgb(233,223,10)"/><text x="62.1138%" y="175.50"></text></g><g><title>check_mod_item_types (1,983,032 samples, 1.28%)</title><rect x="61.8664%" y="149" width="1.2790%" height="15" fill="rgb(215,21,27)"/><text x="62.1164%" y="159.50"></text></g><g><title>typeck (253,932 samples, 0.16%)</title><rect x="62.9816%" y="133" width="0.1638%" height="15" fill="rgb(232,23,21)"/><text x="63.2316%" y="143.50"></text></g><g><title>fn_sig (384,045 samples, 0.25%)</title><rect x="63.3813%" y="133" width="0.2477%" height="15" fill="rgb(244,5,23)"/><text x="63.6313%" y="143.50"></text></g><g><title>named_region_map (609,355 samples, 0.39%)</title><rect x="63.8106%" y="117" width="0.3930%" height="15" fill="rgb(226,81,46)"/><text x="64.0606%" y="127.50"></text></g><g><title>resolve_lifetimes (576,915 samples, 0.37%)</title><rect x="63.8315%" y="101" width="0.3721%" height="15" fill="rgb(247,70,30)"/><text x="64.0815%" y="111.50"></text></g><g><title>lint_levels (209,843 samples, 0.14%)</title><rect x="64.0683%" y="85" width="0.1353%" height="15" fill="rgb(212,68,19)"/><text x="64.3183%" y="95.50"></text></g><g><title>generics_of (916,257 samples, 0.59%)</title><rect x="63.6290%" y="133" width="0.5910%" height="15" fill="rgb(240,187,13)"/><text x="63.8790%" y="143.50"></text></g><g><title>explicit_predicates_of (159,913 samples, 0.10%)</title><rect x="64.3912%" y="101" width="0.1031%" height="15" fill="rgb(223,113,26)"/><text x="64.6412%" y="111.50"></text></g><g><title>predicates_of (528,678 samples, 0.34%)</title><rect x="64.2713%" y="133" width="0.3410%" height="15" fill="rgb(206,192,2)"/><text x="64.5213%" y="143.50"></text></g><g><title>predicates_defined_on (458,205 samples, 0.30%)</title><rect x="64.3167%" y="117" width="0.2955%" height="15" fill="rgb(241,108,4)"/><text x="64.5667%" y="127.50"></text></g><g><title>inferred_outlives_of (182,812 samples, 0.12%)</title><rect x="64.4944%" y="101" width="0.1179%" height="15" fill="rgb(247,173,49)"/><text x="64.7444%" y="111.50"></text></g><g><title>type_collecting (2,518,499 samples, 1.62%)</title><rect x="63.1465%" y="165" width="1.6244%" height="15" fill="rgb(224,114,35)"/><text x="63.3965%" y="175.50"></text></g><g><title>collect_mod_item_types (2,509,319 samples, 1.62%)</title><rect x="63.1525%" y="149" width="1.6185%" height="15" fill="rgb(245,159,27)"/><text x="63.4025%" y="159.50"></text></g><g><title>type_of (224,193 samples, 0.14%)</title><rect x="64.6263%" y="133" width="0.1446%" height="15" fill="rgb(245,172,44)"/><text x="64.8763%" y="143.50"></text></g><g><title>adt_sized_constraint (207,653 samples, 0.13%)</title><rect x="66.6211%" y="117" width="0.1339%" height="15" fill="rgb(236,23,11)"/><text x="66.8711%" y="127.50"></text></g><g><title>evaluate_obligation (816,290 samples, 0.53%)</title><rect x="66.3629%" y="133" width="0.5265%" height="15" fill="rgb(205,117,38)"/><text x="66.6129%" y="143.50"></text></g><g><title>trait_impls_of (195,732 samples, 0.13%)</title><rect x="66.7632%" y="117" width="0.1262%" height="15" fill="rgb(237,72,25)"/><text x="67.0132%" y="127.50"></text></g><g><title>implied_outlives_bounds (170,561 samples, 0.11%)</title><rect x="66.8972%" y="133" width="0.1100%" height="15" fill="rgb(244,70,9)"/><text x="67.1472%" y="143.50"></text></g><g><title>param_env (322,762 samples, 0.21%)</title><rect x="67.0072%" y="133" width="0.2082%" height="15" fill="rgb(217,125,39)"/><text x="67.2572%" y="143.50"></text></g><g><title>region_scope_tree (564,441 samples, 0.36%)</title><rect x="67.2342%" y="133" width="0.3641%" height="15" fill="rgb(235,36,10)"/><text x="67.4842%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,176,977 samples, 2.69%)</title><rect x="64.9439%" y="149" width="2.6941%" height="15" fill="rgb(251,123,47)"/><text x="65.1939%" y="159.50">ch..</text></g><g><title>evaluate_obligation (809,419 samples, 0.52%)</title><rect x="68.5042%" y="133" width="0.5221%" height="15" fill="rgb(221,13,13)"/><text x="68.7542%" y="143.50"></text></g><g><title>param_env (322,473 samples, 0.21%)</title><rect x="69.0864%" y="133" width="0.2080%" height="15" fill="rgb(238,131,9)"/><text x="69.3364%" y="143.50"></text></g><g><title>check_item_well_formed (2,782,849 samples, 1.79%)</title><rect x="67.6380%" y="149" width="1.7949%" height="15" fill="rgb(211,50,8)"/><text x="67.8880%" y="159.50">c..</text></g><g><title>analysis (107,036,597 samples, 69.04%)</title><rect x="0.4763%" y="197" width="69.0374%" height="15" fill="rgb(245,182,24)"/><text x="0.7263%" y="207.50">analysis</text></g><g><title>type_check_crate (64,062,496 samples, 41.32%)</title><rect x="28.1941%" y="181" width="41.3196%" height="15" fill="rgb(242,14,37)"/><text x="28.4441%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,346,252 samples, 4.74%)</title><rect x="64.7754%" y="165" width="4.7382%" height="15" fill="rgb(246,228,12)"/><text x="65.0254%" y="175.50">wf_che..</text></g><g><title>codegen_crate (713,438 samples, 0.46%)</title><rect x="69.5214%" y="197" width="0.4602%" height="15" fill="rgb(213,55,15)"/><text x="69.7714%" y="207.50"></text></g><g><title>AST_validation (382,494 samples, 0.25%)</title><rect x="70.1287%" y="181" width="0.2467%" height="15" fill="rgb(209,9,3)"/><text x="70.3787%" y="191.50"></text></g><g><title>metadata_load_macro (277,173 samples, 0.18%)</title><rect x="84.6487%" y="149" width="0.1788%" height="15" fill="rgb(230,59,30)"/><text x="84.8987%" y="159.50"></text></g><g><title>metadata_register_crate (2,763,041 samples, 1.78%)</title><rect x="84.8274%" y="149" width="1.7821%" height="15" fill="rgb(209,121,21)"/><text x="85.0774%" y="159.50">m..</text></g><g><title>metadata_register_crate (961,881 samples, 0.62%)</title><rect x="85.9892%" y="133" width="0.6204%" height="15" fill="rgb(220,109,13)"/><text x="86.2392%" y="143.50"></text></g><g><title>macro_expand_crate (25,148,011 samples, 16.22%)</title><rect x="70.4801%" y="181" width="16.2202%" height="15" fill="rgb(232,18,1)"/><text x="70.7301%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (25,129,671 samples, 16.21%)</title><rect x="70.4919%" y="165" width="16.2084%" height="15" fill="rgb(215,41,42)"/><text x="70.7419%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (239,543 samples, 0.15%)</title><rect x="86.7040%" y="181" width="0.1545%" height="15" fill="rgb(224,123,36)"/><text x="86.9540%" y="191.50"></text></g><g><title>finalize_macro_resolutions (407,264 samples, 0.26%)</title><rect x="86.9337%" y="165" width="0.2627%" height="15" fill="rgb(240,125,3)"/><text x="87.1837%" y="175.50"></text></g><g><title>late_resolve_crate (4,075,536 samples, 2.63%)</title><rect x="87.1964%" y="165" width="2.6287%" height="15" fill="rgb(205,98,50)"/><text x="87.4464%" y="175.50">la..</text></g><g><title>metadata_register_crate (377,175 samples, 0.24%)</title><rect x="89.5818%" y="149" width="0.2433%" height="15" fill="rgb(205,185,37)"/><text x="89.8318%" y="159.50"></text></g><g><title>metadata_register_crate (173,742 samples, 0.11%)</title><rect x="89.7130%" y="133" width="0.1121%" height="15" fill="rgb(238,207,15)"/><text x="89.9630%" y="143.50"></text></g><g><title>configure_and_expand (30,900,925 samples, 19.93%)</title><rect x="69.9816%" y="197" width="19.9307%" height="15" fill="rgb(213,199,42)"/><text x="70.2316%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,734,713 samples, 3.05%)</title><rect x="86.8585%" y="181" width="3.0538%" height="15" fill="rgb(235,201,11)"/><text x="87.1085%" y="191.50">res..</text></g><g><title>drop_ast (215,282 samples, 0.14%)</title><rect x="89.9123%" y="197" width="0.1389%" height="15" fill="rgb(207,46,11)"/><text x="90.1623%" y="207.50"></text></g><g><title>early_lint_checks (430,705 samples, 0.28%)</title><rect x="90.0633%" y="197" width="0.2778%" height="15" fill="rgb(241,35,35)"/><text x="90.3133%" y="207.50"></text></g><g><title>free_global_ctxt (4,025,525 samples, 2.60%)</title><rect x="90.3411%" y="197" width="2.5964%" height="15" fill="rgb(243,32,47)"/><text x="90.5911%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,542,297 samples, 0.99%)</title><rect x="92.9375%" y="197" width="0.9948%" height="15" fill="rgb(247,202,23)"/><text x="93.1875%" y="207.50"></text></g><g><title>hir_lowering (3,611,331 samples, 2.33%)</title><rect x="93.9323%" y="197" width="2.3293%" height="15" fill="rgb(219,102,11)"/><text x="94.1823%" y="207.50">h..</text></g><g><title>parse_crate (4,017,135 samples, 2.59%)</title><rect x="96.2963%" y="197" width="2.5910%" height="15" fill="rgb(243,110,44)"/><text x="96.5463%" y="207.50">pa..</text></g><g><title>prepare_outputs (172,262 samples, 0.11%)</title><rect x="98.8934%" y="197" width="0.1111%" height="15" fill="rgb(222,74,54)"/><text x="99.1434%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,108,243 samples, 0.71%)</title><rect x="99.0045%" y="197" width="0.7148%" height="15" fill="rgb(216,99,12)"/><text x="99.2545%" y="207.50"></text></g><g><title>all (155,041,494 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (155,041,494 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (341,174 samples, 0.22%)</title><rect x="99.7799%" y="197" width="0.2201%" height="15" fill="rgb(213,25,53)"/><text x="100.0299%" y="207.50"></text></g></svg></svg>