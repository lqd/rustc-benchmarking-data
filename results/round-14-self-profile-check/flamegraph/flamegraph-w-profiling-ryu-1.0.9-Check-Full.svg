<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (110,431 samples, 0.10%)</title><rect x="12.3080%" y="181" width="0.1021%" height="15" fill="rgb(227,0,7)"/><text x="12.5580%" y="191.50"></text></g><g><title>param_env (134,410 samples, 0.12%)</title><rect x="14.1612%" y="149" width="0.1243%" height="15" fill="rgb(217,0,24)"/><text x="14.4112%" y="159.50"></text></g><g><title>item_attrs (145,532 samples, 0.13%)</title><rect x="14.7350%" y="117" width="0.1345%" height="15" fill="rgb(221,193,54)"/><text x="14.9850%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (141,542 samples, 0.13%)</title><rect x="14.7387%" y="101" width="0.1308%" height="15" fill="rgb(248,212,6)"/><text x="14.9887%" y="111.50"></text></g><g><title>codegen_fn_attrs (222,823 samples, 0.21%)</title><rect x="14.6762%" y="133" width="0.2060%" height="15" fill="rgb(208,68,35)"/><text x="14.9262%" y="143.50"></text></g><g><title>is_copy_raw (256,785 samples, 0.24%)</title><rect x="18.2233%" y="117" width="0.2374%" height="15" fill="rgb(232,128,0)"/><text x="18.4733%" y="127.50"></text></g><g><title>evaluate_obligation (217,204 samples, 0.20%)</title><rect x="18.2599%" y="101" width="0.2008%" height="15" fill="rgb(207,160,47)"/><text x="18.5099%" y="111.50"></text></g><g><title>needs_drop_raw (112,600 samples, 0.10%)</title><rect x="18.4651%" y="117" width="0.1041%" height="15" fill="rgb(228,23,34)"/><text x="18.7151%" y="127.50"></text></g><g><title>thir_body (1,656,510 samples, 1.53%)</title><rect x="18.6763%" y="117" width="1.5313%" height="15" fill="rgb(218,30,26)"/><text x="18.9263%" y="127.50"></text></g><g><title>mir_const (7,485,535 samples, 6.92%)</title><rect x="13.2958%" y="165" width="6.9197%" height="15" fill="rgb(220,122,19)"/><text x="13.5458%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (6,414,963 samples, 5.93%)</title><rect x="14.2855%" y="149" width="5.9301%" height="15" fill="rgb(250,228,42)"/><text x="14.5355%" y="159.50">unsafety..</text></g><g><title>mir_built (5,769,485 samples, 5.33%)</title><rect x="14.8822%" y="133" width="5.3334%" height="15" fill="rgb(240,193,28)"/><text x="15.1322%" y="143.50">mir_bui..</text></g><g><title>thir_body (1,293,886 samples, 1.20%)</title><rect x="21.4224%" y="101" width="1.1961%" height="15" fill="rgb(216,20,37)"/><text x="21.6724%" y="111.50"></text></g><g><title>lit_to_const (261,952 samples, 0.24%)</title><rect x="22.3763%" y="85" width="0.2422%" height="15" fill="rgb(206,188,39)"/><text x="22.6263%" y="95.50"></text></g><g><title>mir_promoted (11,044,537 samples, 10.21%)</title><rect x="12.4145%" y="181" width="10.2097%" height="15" fill="rgb(217,207,13)"/><text x="12.6645%" y="191.50">mir_promoted</text></g><g><title>mir_const_qualif (2,605,572 samples, 2.41%)</title><rect x="20.2156%" y="165" width="2.4086%" height="15" fill="rgb(231,73,38)"/><text x="20.4656%" y="175.50">mi..</text></g><g><title>mir_const (2,454,210 samples, 2.27%)</title><rect x="20.3555%" y="149" width="2.2687%" height="15" fill="rgb(225,20,46)"/><text x="20.6055%" y="159.50">m..</text></g><g><title>unsafety_check_result (2,270,809 samples, 2.10%)</title><rect x="20.5250%" y="133" width="2.0992%" height="15" fill="rgb(210,31,41)"/><text x="20.7750%" y="143.50">u..</text></g><g><title>mir_built (2,196,447 samples, 2.03%)</title><rect x="20.5938%" y="117" width="2.0304%" height="15" fill="rgb(221,200,47)"/><text x="20.8438%" y="127.50">m..</text></g><g><title>type_op_ascribe_user_type (129,982 samples, 0.12%)</title><rect x="22.6253%" y="181" width="0.1202%" height="15" fill="rgb(226,26,5)"/><text x="22.8753%" y="191.50"></text></g><g><title>MIR_borrow_checking (24,203,771 samples, 22.37%)</title><rect x="0.9149%" y="213" width="22.3743%" height="15" fill="rgb(249,33,26)"/><text x="1.1649%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,102,409 samples, 22.28%)</title><rect x="1.0086%" y="197" width="22.2806%" height="15" fill="rgb(235,183,28)"/><text x="1.2586%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (485,675 samples, 0.45%)</title><rect x="22.8403%" y="181" width="0.4490%" height="15" fill="rgb(221,5,38)"/><text x="23.0903%" y="191.50"></text></g><g><title>MIR_effect_checking (1,007,711 samples, 0.93%)</title><rect x="23.2892%" y="213" width="0.9315%" height="15" fill="rgb(247,18,42)"/><text x="23.5392%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (886,739 samples, 0.82%)</title><rect x="23.4011%" y="197" width="0.8197%" height="15" fill="rgb(241,131,45)"/><text x="23.6511%" y="207.50"></text></g><g><title>hir_module_items (189,010 samples, 0.17%)</title><rect x="24.2208%" y="213" width="0.1747%" height="15" fill="rgb(249,31,29)"/><text x="24.4708%" y="223.50"></text></g><g><title>codegen_fn_attrs (198,802 samples, 0.18%)</title><rect x="24.7808%" y="181" width="0.1838%" height="15" fill="rgb(225,111,53)"/><text x="25.0308%" y="191.50"></text></g><g><title>check_mod_attrs (578,188 samples, 0.53%)</title><rect x="24.4301%" y="197" width="0.5345%" height="15" fill="rgb(238,160,17)"/><text x="24.6801%" y="207.50"></text></g><g><title>check_mod_const_bodies (117,841 samples, 0.11%)</title><rect x="24.9646%" y="197" width="0.1089%" height="15" fill="rgb(214,148,48)"/><text x="25.2146%" y="207.50"></text></g><g><title>lookup_deprecation_entry (122,742 samples, 0.11%)</title><rect x="25.2961%" y="181" width="0.1135%" height="15" fill="rgb(232,36,49)"/><text x="25.5461%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (298,393 samples, 0.28%)</title><rect x="25.1667%" y="197" width="0.2758%" height="15" fill="rgb(209,103,24)"/><text x="25.4167%" y="207.50"></text></g><g><title>misc_checking_1 (1,183,093 samples, 1.09%)</title><rect x="24.3961%" y="213" width="1.0937%" height="15" fill="rgb(229,88,8)"/><text x="24.6461%" y="223.50"></text></g><g><title>check_mod_intrinsics (144,662 samples, 0.13%)</title><rect x="25.5029%" y="181" width="0.1337%" height="15" fill="rgb(213,181,19)"/><text x="25.7529%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (656,637 samples, 0.61%)</title><rect x="25.4910%" y="197" width="0.6070%" height="15" fill="rgb(254,191,54)"/><text x="25.7410%" y="207.50"></text></g><g><title>check_mod_liveness (499,115 samples, 0.46%)</title><rect x="25.6366%" y="181" width="0.4614%" height="15" fill="rgb(241,83,37)"/><text x="25.8866%" y="191.50"></text></g><g><title>misc_checking_2 (1,084,862 samples, 1.00%)</title><rect x="25.4897%" y="213" width="1.0029%" height="15" fill="rgb(233,36,39)"/><text x="25.7397%" y="223.50"></text></g><g><title>match_checking (426,815 samples, 0.39%)</title><rect x="26.0980%" y="197" width="0.3946%" height="15" fill="rgb(226,3,54)"/><text x="26.3480%" y="207.50"></text></g><g><title>check_match (398,825 samples, 0.37%)</title><rect x="26.1239%" y="181" width="0.3687%" height="15" fill="rgb(245,192,40)"/><text x="26.3739%" y="191.50"></text></g><g><title>check_private_in_public (160,252 samples, 0.15%)</title><rect x="26.5017%" y="197" width="0.1481%" height="15" fill="rgb(238,167,29)"/><text x="26.7517%" y="207.50"></text></g><g><title>death_checking (329,794 samples, 0.30%)</title><rect x="26.6498%" y="197" width="0.3049%" height="15" fill="rgb(232,182,51)"/><text x="26.8998%" y="207.50"></text></g><g><title>eval_to_allocation_raw (1,804,139 samples, 1.67%)</title><rect x="27.6591%" y="165" width="1.6678%" height="15" fill="rgb(231,60,39)"/><text x="27.9091%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,801,889 samples, 1.67%)</title><rect x="27.6611%" y="149" width="1.6657%" height="15" fill="rgb(208,69,12)"/><text x="27.9111%" y="159.50"></text></g><g><title>mir_for_ctfe (150,792 samples, 0.14%)</title><rect x="29.1874%" y="133" width="0.1394%" height="15" fill="rgb(235,93,37)"/><text x="29.4374%" y="143.50"></text></g><g><title>eval_to_const_value_raw (365,416 samples, 0.34%)</title><rect x="29.3268%" y="165" width="0.3378%" height="15" fill="rgb(213,116,39)"/><text x="29.5768%" y="175.50"></text></g><g><title>eval_to_const_value_raw (352,056 samples, 0.33%)</title><rect x="29.3392%" y="149" width="0.3254%" height="15" fill="rgb(222,207,29)"/><text x="29.5892%" y="159.50"></text></g><g><title>eval_to_allocation_raw (327,514 samples, 0.30%)</title><rect x="29.3619%" y="133" width="0.3028%" height="15" fill="rgb(206,96,30)"/><text x="29.6119%" y="143.50"></text></g><g><title>param_env (497,603 samples, 0.46%)</title><rect x="29.6646%" y="165" width="0.4600%" height="15" fill="rgb(218,138,4)"/><text x="29.9146%" y="175.50"></text></g><g><title>predicates_of (123,980 samples, 0.11%)</title><rect x="30.0100%" y="149" width="0.1146%" height="15" fill="rgb(250,191,14)"/><text x="30.2600%" y="159.50"></text></g><g><title>crate_lints (4,064,906 samples, 3.76%)</title><rect x="26.9563%" y="181" width="3.7577%" height="15" fill="rgb(239,60,40)"/><text x="27.2063%" y="191.50">crat..</text></g><g><title>type_of (568,456 samples, 0.53%)</title><rect x="30.1885%" y="165" width="0.5255%" height="15" fill="rgb(206,27,48)"/><text x="30.4385%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (487,104 samples, 0.45%)</title><rect x="30.2637%" y="149" width="0.4503%" height="15" fill="rgb(225,35,8)"/><text x="30.5137%" y="159.50"></text></g><g><title>lint_checking (4,934,895 samples, 4.56%)</title><rect x="26.9547%" y="197" width="4.5619%" height="15" fill="rgb(250,213,24)"/><text x="27.2047%" y="207.50">lint_..</text></g><g><title>module_lints (868,229 samples, 0.80%)</title><rect x="30.7140%" y="181" width="0.8026%" height="15" fill="rgb(247,123,22)"/><text x="30.9640%" y="191.50"></text></g><g><title>lint_mod (857,579 samples, 0.79%)</title><rect x="30.7238%" y="165" width="0.7928%" height="15" fill="rgb(231,138,38)"/><text x="30.9738%" y="175.50"></text></g><g><title>privacy_access_levels (211,522 samples, 0.20%)</title><rect x="31.5166%" y="197" width="0.1955%" height="15" fill="rgb(231,145,46)"/><text x="31.7666%" y="207.50"></text></g><g><title>privacy_checking_modules (655,258 samples, 0.61%)</title><rect x="31.7121%" y="197" width="0.6057%" height="15" fill="rgb(251,118,11)"/><text x="31.9621%" y="207.50"></text></g><g><title>check_mod_privacy (648,458 samples, 0.60%)</title><rect x="31.7184%" y="181" width="0.5994%" height="15" fill="rgb(217,147,25)"/><text x="31.9684%" y="191.50"></text></g><g><title>misc_checking_3 (6,319,601 samples, 5.84%)</title><rect x="26.4926%" y="213" width="5.8419%" height="15" fill="rgb(247,81,37)"/><text x="26.7426%" y="223.50">misc_ch..</text></g><g><title>is_copy_raw (300,543 samples, 0.28%)</title><rect x="32.4615%" y="165" width="0.2778%" height="15" fill="rgb(209,12,38)"/><text x="32.7115%" y="175.50"></text></g><g><title>evaluate_obligation (282,473 samples, 0.26%)</title><rect x="32.4782%" y="149" width="0.2611%" height="15" fill="rgb(227,1,9)"/><text x="32.7282%" y="159.50"></text></g><g><title>impl_parent (294,263 samples, 0.27%)</title><rect x="33.2623%" y="149" width="0.2720%" height="15" fill="rgb(248,47,43)"/><text x="33.5123%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (182,692 samples, 0.17%)</title><rect x="33.3654%" y="133" width="0.1689%" height="15" fill="rgb(221,10,30)"/><text x="33.6154%" y="143.50"></text></g><g><title>impl_trait_ref (813,962 samples, 0.75%)</title><rect x="33.5343%" y="149" width="0.7524%" height="15" fill="rgb(210,229,1)"/><text x="33.7843%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (701,391 samples, 0.65%)</title><rect x="33.6384%" y="133" width="0.6484%" height="15" fill="rgb(222,148,37)"/><text x="33.8884%" y="143.50"></text></g><g><title>coherent_trait (2,139,004 samples, 1.98%)</title><rect x="32.4039%" y="181" width="1.9773%" height="15" fill="rgb(234,67,33)"/><text x="32.6539%" y="191.50">c..</text></g><g><title>specialization_graph_of (1,676,339 samples, 1.55%)</title><rect x="32.8316%" y="165" width="1.5496%" height="15" fill="rgb(247,98,35)"/><text x="33.0816%" y="175.50"></text></g><g><title>coherence_checking (2,184,614 samples, 2.02%)</title><rect x="32.3926%" y="197" width="2.0195%" height="15" fill="rgb(247,138,52)"/><text x="32.6426%" y="207.50">c..</text></g><g><title>associated_item (540,332 samples, 0.50%)</title><rect x="57.4569%" y="133" width="0.4995%" height="15" fill="rgb(213,79,30)"/><text x="57.7069%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (432,741 samples, 0.40%)</title><rect x="57.5564%" y="117" width="0.4000%" height="15" fill="rgb(246,177,23)"/><text x="57.8064%" y="127.50"></text></g><g><title>associated_items (719,384 samples, 0.67%)</title><rect x="57.3173%" y="149" width="0.6650%" height="15" fill="rgb(230,62,27)"/><text x="57.5673%" y="159.50"></text></g><g><title>generics_of (801,210 samples, 0.74%)</title><rect x="61.4224%" y="133" width="0.7406%" height="15" fill="rgb(216,154,8)"/><text x="61.6724%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (623,339 samples, 0.58%)</title><rect x="61.5869%" y="117" width="0.5762%" height="15" fill="rgb(244,35,45)"/><text x="61.8369%" y="127.50"></text></g><g><title>impl_item_implementor_ids (140,200 samples, 0.13%)</title><rect x="62.1631%" y="133" width="0.1296%" height="15" fill="rgb(251,115,12)"/><text x="62.4131%" y="143.50"></text></g><g><title>associated_items (118,560 samples, 0.11%)</title><rect x="62.1831%" y="117" width="0.1096%" height="15" fill="rgb(240,54,50)"/><text x="62.4331%" y="127.50"></text></g><g><title>impl_polarity (115,842 samples, 0.11%)</title><rect x="62.2927%" y="133" width="0.1071%" height="15" fill="rgb(233,84,52)"/><text x="62.5427%" y="143.50"></text></g><g><title>impl_trait_ref (942,628 samples, 0.87%)</title><rect x="62.3998%" y="133" width="0.8714%" height="15" fill="rgb(207,117,47)"/><text x="62.6498%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (767,523 samples, 0.71%)</title><rect x="62.5617%" y="117" width="0.7095%" height="15" fill="rgb(249,43,39)"/><text x="62.8117%" y="127.50"></text></g><g><title>opt_def_kind (121,201 samples, 0.11%)</title><rect x="63.4728%" y="117" width="0.1120%" height="15" fill="rgb(209,38,44)"/><text x="63.7228%" y="127.50"></text></g><g><title>explicit_predicates_of (108,280 samples, 0.10%)</title><rect x="63.7211%" y="101" width="0.1001%" height="15" fill="rgb(236,212,23)"/><text x="63.9711%" y="111.50"></text></g><g><title>predicates_of (631,643 samples, 0.58%)</title><rect x="63.3297%" y="133" width="0.5839%" height="15" fill="rgb(242,79,21)"/><text x="63.5797%" y="143.50"></text></g><g><title>predicates_defined_on (355,651 samples, 0.33%)</title><rect x="63.5848%" y="117" width="0.3288%" height="15" fill="rgb(211,96,35)"/><text x="63.8348%" y="127.50"></text></g><g><title>specializes (1,819,716 samples, 1.68%)</title><rect x="63.9136%" y="133" width="1.6822%" height="15" fill="rgb(253,215,40)"/><text x="64.1636%" y="143.50"></text></g><g><title>param_env (1,115,822 samples, 1.03%)</title><rect x="64.5643%" y="117" width="1.0315%" height="15" fill="rgb(211,81,21)"/><text x="64.8143%" y="127.50"></text></g><g><title>def_span (485,695 samples, 0.45%)</title><rect x="65.1467%" y="101" width="0.4490%" height="15" fill="rgb(208,190,38)"/><text x="65.3967%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (432,994 samples, 0.40%)</title><rect x="65.1955%" y="85" width="0.4003%" height="15" fill="rgb(235,213,38)"/><text x="65.4455%" y="95.50"></text></g><g><title>trait_impls_of (426,483 samples, 0.39%)</title><rect x="65.6151%" y="133" width="0.3942%" height="15" fill="rgb(237,122,38)"/><text x="65.8651%" y="143.50"></text></g><g><title>implementations_of_trait (151,761 samples, 0.14%)</title><rect x="65.8690%" y="117" width="0.1403%" height="15" fill="rgb(244,218,35)"/><text x="66.1190%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (136,431 samples, 0.13%)</title><rect x="65.8832%" y="101" width="0.1261%" height="15" fill="rgb(240,68,47)"/><text x="66.1332%" y="111.50"></text></g><g><title>evaluate_obligation (8,600,452 samples, 7.95%)</title><rect x="58.0959%" y="149" width="7.9504%" height="15" fill="rgb(210,16,53)"/><text x="58.3459%" y="159.50">evaluate_ob..</text></g><g><title>generics_of (367,893 samples, 0.34%)</title><rect x="66.1575%" y="149" width="0.3401%" height="15" fill="rgb(235,124,12)"/><text x="66.4075%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (286,932 samples, 0.27%)</title><rect x="66.2323%" y="133" width="0.2652%" height="15" fill="rgb(224,169,11)"/><text x="66.4823%" y="143.50"></text></g><g><title>impl_item_implementor_ids (130,801 samples, 0.12%)</title><rect x="66.4982%" y="149" width="0.1209%" height="15" fill="rgb(250,166,2)"/><text x="66.7482%" y="159.50"></text></g><g><title>associated_items (111,431 samples, 0.10%)</title><rect x="66.5161%" y="133" width="0.1030%" height="15" fill="rgb(242,216,29)"/><text x="66.7661%" y="143.50"></text></g><g><title>impl_trait_ref (192,333 samples, 0.18%)</title><rect x="66.6271%" y="149" width="0.1778%" height="15" fill="rgb(230,116,27)"/><text x="66.8771%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (138,002 samples, 0.13%)</title><rect x="66.6774%" y="133" width="0.1276%" height="15" fill="rgb(228,99,48)"/><text x="66.9274%" y="143.50"></text></g><g><title>item_attrs (141,031 samples, 0.13%)</title><rect x="66.8167%" y="149" width="0.1304%" height="15" fill="rgb(253,11,6)"/><text x="67.0667%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (137,091 samples, 0.13%)</title><rect x="66.8204%" y="133" width="0.1267%" height="15" fill="rgb(247,143,39)"/><text x="67.0704%" y="143.50"></text></g><g><title>lint_levels (329,014 samples, 0.30%)</title><rect x="66.9471%" y="149" width="0.3041%" height="15" fill="rgb(236,97,10)"/><text x="67.1971%" y="159.50"></text></g><g><title>method_autoderef_steps (123,652 samples, 0.11%)</title><rect x="67.2857%" y="149" width="0.1143%" height="15" fill="rgb(233,208,19)"/><text x="67.5357%" y="159.50"></text></g><g><title>predicates_of (361,867 samples, 0.33%)</title><rect x="67.4687%" y="149" width="0.3345%" height="15" fill="rgb(216,164,2)"/><text x="67.7187%" y="159.50"></text></g><g><title>predicates_defined_on (226,295 samples, 0.21%)</title><rect x="67.5940%" y="133" width="0.2092%" height="15" fill="rgb(220,129,5)"/><text x="67.8440%" y="143.50"></text></g><g><title>specializes (109,531 samples, 0.10%)</title><rect x="67.8119%" y="149" width="0.1013%" height="15" fill="rgb(242,17,10)"/><text x="68.0619%" y="159.50"></text></g><g><title>item_bodies_checking (36,370,195 samples, 33.62%)</title><rect x="34.4263%" y="197" width="33.6211%" height="15" fill="rgb(242,107,0)"/><text x="34.6763%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (36,367,155 samples, 33.62%)</title><rect x="34.4291%" y="181" width="33.6183%" height="15" fill="rgb(251,28,31)"/><text x="34.6791%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (36,308,253 samples, 33.56%)</title><rect x="34.4836%" y="165" width="33.5638%" height="15" fill="rgb(233,223,10)"/><text x="34.7336%" y="175.50">typeck</text></g><g><title>evaluate_obligation (108,461 samples, 0.10%)</title><rect x="70.8929%" y="149" width="0.1003%" height="15" fill="rgb(215,21,27)"/><text x="71.1429%" y="159.50"></text></g><g><title>item_types_checking (3,241,397 samples, 3.00%)</title><rect x="68.0474%" y="197" width="2.9964%" height="15" fill="rgb(232,23,21)"/><text x="68.2974%" y="207.50">ite..</text></g><g><title>check_mod_item_types (3,233,867 samples, 2.99%)</title><rect x="68.0544%" y="181" width="2.9894%" height="15" fill="rgb(244,5,23)"/><text x="68.3044%" y="191.50">che..</text></g><g><title>typeck (3,019,166 samples, 2.79%)</title><rect x="68.2529%" y="165" width="2.7910%" height="15" fill="rgb(226,81,46)"/><text x="68.5029%" y="175.50">ty..</text></g><g><title>fn_sig (270,084 samples, 0.25%)</title><rect x="71.2615%" y="165" width="0.2497%" height="15" fill="rgb(247,70,30)"/><text x="71.5115%" y="175.50"></text></g><g><title>late_bound_vars_map (207,402 samples, 0.19%)</title><rect x="71.3194%" y="149" width="0.1917%" height="15" fill="rgb(212,68,19)"/><text x="71.5694%" y="159.50"></text></g><g><title>resolve_lifetimes (189,182 samples, 0.17%)</title><rect x="71.3363%" y="133" width="0.1749%" height="15" fill="rgb(240,187,13)"/><text x="71.5863%" y="143.50"></text></g><g><title>predicates_of (321,623 samples, 0.30%)</title><rect x="71.6117%" y="165" width="0.2973%" height="15" fill="rgb(223,113,26)"/><text x="71.8617%" y="175.50"></text></g><g><title>predicates_defined_on (292,283 samples, 0.27%)</title><rect x="71.6389%" y="149" width="0.2702%" height="15" fill="rgb(206,192,2)"/><text x="71.8889%" y="159.50"></text></g><g><title>inferred_outlives_of (158,481 samples, 0.15%)</title><rect x="71.7626%" y="133" width="0.1465%" height="15" fill="rgb(241,108,4)"/><text x="72.0126%" y="143.50"></text></g><g><title>inferred_outlives_crate (143,461 samples, 0.13%)</title><rect x="71.7764%" y="117" width="0.1326%" height="15" fill="rgb(247,173,49)"/><text x="72.0264%" y="127.50"></text></g><g><title>type_collecting (1,111,412 samples, 1.03%)</title><rect x="71.0463%" y="197" width="1.0274%" height="15" fill="rgb(224,114,35)"/><text x="71.2963%" y="207.50"></text></g><g><title>collect_mod_item_types (1,089,562 samples, 1.01%)</title><rect x="71.0665%" y="181" width="1.0072%" height="15" fill="rgb(245,159,27)"/><text x="71.3165%" y="191.50"></text></g><g><title>type_of (120,102 samples, 0.11%)</title><rect x="71.9627%" y="165" width="0.1110%" height="15" fill="rgb(245,172,44)"/><text x="72.2127%" y="175.50"></text></g><g><title>check_impl_item_well_formed (475,184 samples, 0.44%)</title><rect x="72.2022%" y="181" width="0.4393%" height="15" fill="rgb(236,23,11)"/><text x="72.4522%" y="191.50"></text></g><g><title>mir_const_qualif (157,752 samples, 0.15%)</title><rect x="73.4627%" y="117" width="0.1458%" height="15" fill="rgb(205,117,38)"/><text x="73.7127%" y="127.50"></text></g><g><title>mir_const (135,571 samples, 0.13%)</title><rect x="73.4832%" y="101" width="0.1253%" height="15" fill="rgb(237,72,25)"/><text x="73.7332%" y="111.50"></text></g><g><title>mir_borrowck (431,354 samples, 0.40%)</title><rect x="73.7491%" y="85" width="0.3987%" height="15" fill="rgb(244,70,9)"/><text x="73.9991%" y="95.50"></text></g><g><title>mir_for_ctfe (584,187 samples, 0.54%)</title><rect x="73.6085%" y="117" width="0.5400%" height="15" fill="rgb(217,125,39)"/><text x="73.8585%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (539,477 samples, 0.50%)</title><rect x="73.6498%" y="101" width="0.4987%" height="15" fill="rgb(235,36,10)"/><text x="73.8998%" y="111.50"></text></g><g><title>mir_for_ctfe (146,142 samples, 0.14%)</title><rect x="74.2614%" y="53" width="0.1351%" height="15" fill="rgb(251,123,47)"/><text x="74.5114%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (133,202 samples, 0.12%)</title><rect x="74.2733%" y="37" width="0.1231%" height="15" fill="rgb(221,13,13)"/><text x="74.5233%" y="47.50"></text></g><g><title>eval_to_const_value_raw (304,823 samples, 0.28%)</title><rect x="74.1599%" y="101" width="0.2818%" height="15" fill="rgb(238,131,9)"/><text x="74.4099%" y="111.50"></text></g><g><title>eval_to_const_value_raw (302,293 samples, 0.28%)</title><rect x="74.1622%" y="85" width="0.2794%" height="15" fill="rgb(211,50,8)"/><text x="74.4122%" y="95.50"></text></g><g><title>eval_to_allocation_raw (296,333 samples, 0.27%)</title><rect x="74.1677%" y="69" width="0.2739%" height="15" fill="rgb(245,182,24)"/><text x="74.4177%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (321,773 samples, 0.30%)</title><rect x="74.1490%" y="117" width="0.2975%" height="15" fill="rgb(242,14,37)"/><text x="74.3990%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,319,864 samples, 1.22%)</title><rect x="73.3313%" y="165" width="1.2201%" height="15" fill="rgb(246,228,12)"/><text x="73.5813%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,305,914 samples, 1.21%)</title><rect x="73.3442%" y="149" width="1.2072%" height="15" fill="rgb(213,55,15)"/><text x="73.5942%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,302,394 samples, 1.20%)</title><rect x="73.3475%" y="133" width="1.2040%" height="15" fill="rgb(209,9,3)"/><text x="73.5975%" y="143.50"></text></g><g><title>typeck (113,611 samples, 0.11%)</title><rect x="74.4464%" y="117" width="0.1050%" height="15" fill="rgb(230,59,30)"/><text x="74.6964%" y="127.50"></text></g><g><title>evaluate_obligation (179,102 samples, 0.17%)</title><rect x="74.5514%" y="165" width="0.1656%" height="15" fill="rgb(209,121,21)"/><text x="74.8014%" y="175.50"></text></g><g><title>param_env (191,513 samples, 0.18%)</title><rect x="74.7756%" y="165" width="0.1770%" height="15" fill="rgb(220,109,13)"/><text x="75.0256%" y="175.50"></text></g><g><title>region_scope_tree (617,916 samples, 0.57%)</title><rect x="74.9652%" y="165" width="0.5712%" height="15" fill="rgb(232,18,1)"/><text x="75.2152%" y="175.50"></text></g><g><title>check_item_well_formed (3,168,408 samples, 2.93%)</title><rect x="72.6415%" y="181" width="2.9289%" height="15" fill="rgb(215,41,42)"/><text x="72.8915%" y="191.50">ch..</text></g><g><title>analysis (81,299,657 samples, 75.15%)</title><rect x="0.5044%" y="229" width="75.1545%" height="15" fill="rgb(224,123,36)"/><text x="0.7544%" y="239.50">analysis</text></g><g><title>type_check_crate (46,866,942 samples, 43.32%)</title><rect x="32.3345%" y="213" width="43.3244%" height="15" fill="rgb(240,125,3)"/><text x="32.5845%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,871,463 samples, 3.58%)</title><rect x="72.0801%" y="197" width="3.5788%" height="15" fill="rgb(205,98,50)"/><text x="72.3301%" y="207.50">wf_c..</text></g><g><title>codegen_crate (325,283 samples, 0.30%)</title><rect x="75.6652%" y="229" width="0.3007%" height="15" fill="rgb(205,185,37)"/><text x="75.9152%" y="239.50"></text></g><g><title>AST_validation (174,162 samples, 0.16%)</title><rect x="76.0854%" y="213" width="0.1610%" height="15" fill="rgb(238,207,15)"/><text x="76.3354%" y="223.50"></text></g><g><title>macro_expand_crate (12,894,444 samples, 11.92%)</title><rect x="76.3811%" y="213" width="11.9198%" height="15" fill="rgb(213,199,42)"/><text x="76.6311%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (12,879,023 samples, 11.91%)</title><rect x="76.3953%" y="197" width="11.9055%" height="15" fill="rgb(235,201,11)"/><text x="76.6453%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (410,036 samples, 0.38%)</title><rect x="87.9218%" y="181" width="0.3790%" height="15" fill="rgb(207,46,11)"/><text x="88.1718%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (128,292 samples, 0.12%)</title><rect x="88.3038%" y="213" width="0.1186%" height="15" fill="rgb(241,35,35)"/><text x="88.5538%" y="223.50"></text></g><g><title>finalize_imports (162,082 samples, 0.15%)</title><rect x="88.4268%" y="197" width="0.1498%" height="15" fill="rgb(243,32,47)"/><text x="88.6768%" y="207.50"></text></g><g><title>late_resolve_crate (2,311,825 samples, 2.14%)</title><rect x="88.6197%" y="197" width="2.1371%" height="15" fill="rgb(247,202,23)"/><text x="88.8697%" y="207.50">l..</text></g><g><title>configure_and_expand (16,163,000 samples, 14.94%)</title><rect x="75.9659%" y="229" width="14.9413%" height="15" fill="rgb(219,102,11)"/><text x="76.2159%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,687,930 samples, 2.48%)</title><rect x="88.4224%" y="213" width="2.4848%" height="15" fill="rgb(243,110,44)"/><text x="88.6724%" y="223.50">re..</text></g><g><title>drop_ast (273,763 samples, 0.25%)</title><rect x="90.9072%" y="229" width="0.2531%" height="15" fill="rgb(222,74,54)"/><text x="91.1572%" y="239.50"></text></g><g><title>early_lint_checks (761,318 samples, 0.70%)</title><rect x="91.1739%" y="229" width="0.7038%" height="15" fill="rgb(216,99,12)"/><text x="91.4239%" y="239.50"></text></g><g><title>free_global_ctxt (2,597,209 samples, 2.40%)</title><rect x="91.8776%" y="229" width="2.4009%" height="15" fill="rgb(226,22,26)"/><text x="92.1276%" y="239.50">fr..</text></g><g><title>generate_crate_metadata (1,131,783 samples, 1.05%)</title><rect x="94.2785%" y="229" width="1.0462%" height="15" fill="rgb(217,163,10)"/><text x="94.5285%" y="239.50"></text></g><g><title>hir_lowering (3,405,009 samples, 3.15%)</title><rect x="95.3248%" y="229" width="3.1476%" height="15" fill="rgb(213,25,53)"/><text x="95.5748%" y="239.50">hir..</text></g><g><title>parse_crate (323,644 samples, 0.30%)</title><rect x="98.5156%" y="229" width="0.2992%" height="15" fill="rgb(252,105,26)"/><text x="98.7656%" y="239.50"></text></g><g><title>prepare_outputs (175,972 samples, 0.16%)</title><rect x="98.8202%" y="229" width="0.1627%" height="15" fill="rgb(220,39,43)"/><text x="99.0702%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (656,048 samples, 0.61%)</title><rect x="98.9828%" y="229" width="0.6065%" height="15" fill="rgb(229,68,48)"/><text x="99.2328%" y="239.50"></text></g><g><title>all (108,176,667 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (108,176,667 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (355,994 samples, 0.33%)</title><rect x="99.6709%" y="229" width="0.3291%" height="15" fill="rgb(229,81,49)"/><text x="99.9209%" y="239.50"></text></g></svg></svg>