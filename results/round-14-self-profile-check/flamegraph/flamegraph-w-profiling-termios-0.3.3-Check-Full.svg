<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (389,554 samples, 0.39%)</title><rect x="9.3680%" y="149" width="0.3855%" height="15" fill="rgb(227,0,7)"/><text x="9.6180%" y="159.50"></text></g><g><title>resolve_lifetimes (225,112 samples, 0.22%)</title><rect x="9.5307%" y="133" width="0.2228%" height="15" fill="rgb(217,0,24)"/><text x="9.7807%" y="143.50"></text></g><g><title>adt_drop_tys (111,011 samples, 0.11%)</title><rect x="11.8655%" y="69" width="0.1099%" height="15" fill="rgb(221,193,54)"/><text x="12.1155%" y="79.50"></text></g><g><title>needs_drop_raw (223,253 samples, 0.22%)</title><rect x="11.8531%" y="85" width="0.2210%" height="15" fill="rgb(248,212,6)"/><text x="12.1031%" y="95.50"></text></g><g><title>resolve_instance (121,611 samples, 0.12%)</title><rect x="12.0740%" y="85" width="0.1204%" height="15" fill="rgb(208,68,35)"/><text x="12.3240%" y="95.50"></text></g><g><title>thir_body (386,242 samples, 0.38%)</title><rect x="12.2109%" y="85" width="0.3823%" height="15" fill="rgb(232,128,0)"/><text x="12.4609%" y="95.50"></text></g><g><title>mir_const (2,155,603 samples, 2.13%)</title><rect x="10.4659%" y="133" width="2.1334%" height="15" fill="rgb(207,160,47)"/><text x="10.7159%" y="143.50">m..</text></g><g><title>unsafety_check_result (1,832,520 samples, 1.81%)</title><rect x="10.7856%" y="117" width="1.8136%" height="15" fill="rgb(228,23,34)"/><text x="11.0356%" y="127.50">u..</text></g><g><title>mir_built (1,680,630 samples, 1.66%)</title><rect x="10.9359%" y="101" width="1.6633%" height="15" fill="rgb(218,30,26)"/><text x="11.1859%" y="111.50"></text></g><g><title>thir_body (312,177 samples, 0.31%)</title><rect x="14.7845%" y="69" width="0.3090%" height="15" fill="rgb(220,122,19)"/><text x="15.0345%" y="79.50"></text></g><g><title>mir_promoted (5,421,599 samples, 5.37%)</title><rect x="9.7535%" y="149" width="5.3657%" height="15" fill="rgb(250,228,42)"/><text x="10.0035%" y="159.50">mir_pro..</text></g><g><title>mir_const_qualif (2,546,269 samples, 2.52%)</title><rect x="12.5992%" y="133" width="2.5200%" height="15" fill="rgb(240,193,28)"/><text x="12.8492%" y="143.50">mi..</text></g><g><title>mir_const (2,152,786 samples, 2.13%)</title><rect x="12.9887%" y="117" width="2.1306%" height="15" fill="rgb(216,20,37)"/><text x="13.2387%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,501,020 samples, 1.49%)</title><rect x="13.6337%" y="101" width="1.4856%" height="15" fill="rgb(206,188,39)"/><text x="13.8837%" y="111.50"></text></g><g><title>mir_built (1,313,607 samples, 1.30%)</title><rect x="13.8192%" y="85" width="1.3001%" height="15" fill="rgb(217,207,13)"/><text x="14.0692%" y="95.50"></text></g><g><title>type_op_prove_predicate (338,783 samples, 0.34%)</title><rect x="15.2041%" y="149" width="0.3353%" height="15" fill="rgb(231,73,38)"/><text x="15.4541%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,330,150 samples, 14.18%)</title><rect x="1.3591%" y="181" width="14.1825%" height="15" fill="rgb(225,20,46)"/><text x="1.6091%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,115,756 samples, 13.97%)</title><rect x="1.5713%" y="165" width="13.9703%" height="15" fill="rgb(210,31,41)"/><text x="1.8213%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,308,264 samples, 1.29%)</title><rect x="15.5416%" y="181" width="1.2948%" height="15" fill="rgb(221,200,47)"/><text x="15.7916%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,180,013 samples, 1.17%)</title><rect x="15.6685%" y="165" width="1.1679%" height="15" fill="rgb(226,26,5)"/><text x="15.9185%" y="175.50"></text></g><g><title>hir_module_items (477,316 samples, 0.47%)</title><rect x="16.8364%" y="181" width="0.4724%" height="15" fill="rgb(249,33,26)"/><text x="17.0864%" y="191.50"></text></g><g><title>get_lang_items (159,812 samples, 0.16%)</title><rect x="17.8106%" y="133" width="0.1582%" height="15" fill="rgb(235,183,28)"/><text x="18.0606%" y="143.50"></text></g><g><title>codegen_fn_attrs (135,031 samples, 0.13%)</title><rect x="18.0990%" y="117" width="0.1336%" height="15" fill="rgb(221,5,38)"/><text x="18.3490%" y="127.50"></text></g><g><title>should_inherit_track_caller (276,641 samples, 0.27%)</title><rect x="17.9687%" y="133" width="0.2738%" height="15" fill="rgb(247,18,42)"/><text x="18.2187%" y="143.50"></text></g><g><title>codegen_fn_attrs (580,815 samples, 0.57%)</title><rect x="17.7000%" y="149" width="0.5748%" height="15" fill="rgb(241,131,45)"/><text x="17.9500%" y="159.50"></text></g><g><title>check_mod_attrs (936,101 samples, 0.93%)</title><rect x="17.3486%" y="165" width="0.9265%" height="15" fill="rgb(249,31,29)"/><text x="17.5986%" y="175.50"></text></g><g><title>check_mod_const_bodies (191,912 samples, 0.19%)</title><rect x="18.2751%" y="165" width="0.1899%" height="15" fill="rgb(225,111,53)"/><text x="18.5251%" y="175.50"></text></g><g><title>lint_levels (265,423 samples, 0.26%)</title><rect x="18.8696%" y="149" width="0.2627%" height="15" fill="rgb(238,160,17)"/><text x="19.1196%" y="159.50"></text></g><g><title>lookup_deprecation_entry (203,681 samples, 0.20%)</title><rect x="19.1323%" y="149" width="0.2016%" height="15" fill="rgb(214,148,48)"/><text x="19.3823%" y="159.50"></text></g><g><title>stability_index (126,311 samples, 0.13%)</title><rect x="19.2089%" y="133" width="0.1250%" height="15" fill="rgb(232,36,49)"/><text x="19.4589%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (867,898 samples, 0.86%)</title><rect x="18.5834%" y="165" width="0.8590%" height="15" fill="rgb(209,103,24)"/><text x="18.8334%" y="175.50"></text></g><g><title>looking_for_derive_registrar (198,232 samples, 0.20%)</title><rect x="19.4447%" y="165" width="0.1962%" height="15" fill="rgb(229,88,8)"/><text x="19.6947%" y="175.50"></text></g><g><title>proc_macro_decls_static (184,132 samples, 0.18%)</title><rect x="19.4586%" y="149" width="0.1822%" height="15" fill="rgb(213,181,19)"/><text x="19.7086%" y="159.50"></text></g><g><title>misc_checking_1 (2,366,976 samples, 2.34%)</title><rect x="17.3091%" y="181" width="2.3426%" height="15" fill="rgb(254,191,54)"/><text x="17.5591%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (182,622 samples, 0.18%)</title><rect x="19.6529%" y="165" width="0.1807%" height="15" fill="rgb(241,83,37)"/><text x="19.9029%" y="175.50"></text></g><g><title>check_mod_liveness (127,221 samples, 0.13%)</title><rect x="19.7077%" y="149" width="0.1259%" height="15" fill="rgb(233,36,39)"/><text x="19.9577%" y="159.50"></text></g><g><title>misc_checking_2 (487,046 samples, 0.48%)</title><rect x="19.6517%" y="181" width="0.4820%" height="15" fill="rgb(226,3,54)"/><text x="19.9017%" y="191.50"></text></g><g><title>match_checking (303,224 samples, 0.30%)</title><rect x="19.8336%" y="165" width="0.3001%" height="15" fill="rgb(245,192,40)"/><text x="20.0836%" y="175.50"></text></g><g><title>check_match (256,513 samples, 0.25%)</title><rect x="19.8798%" y="149" width="0.2539%" height="15" fill="rgb(238,167,29)"/><text x="20.1298%" y="159.50"></text></g><g><title>check_private_in_public (190,742 samples, 0.19%)</title><rect x="20.1410%" y="165" width="0.1888%" height="15" fill="rgb(232,182,51)"/><text x="20.3910%" y="175.50"></text></g><g><title>codegen_fn_attrs (152,241 samples, 0.15%)</title><rect x="20.6994%" y="149" width="0.1507%" height="15" fill="rgb(231,60,39)"/><text x="20.9494%" y="159.50"></text></g><g><title>death_checking (679,748 samples, 0.67%)</title><rect x="20.3297%" y="165" width="0.6727%" height="15" fill="rgb(208,69,12)"/><text x="20.5797%" y="175.50"></text></g><g><title>item_attrs (118,162 samples, 0.12%)</title><rect x="20.8855%" y="149" width="0.1169%" height="15" fill="rgb(235,93,37)"/><text x="21.1355%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (116,852 samples, 0.12%)</title><rect x="20.8868%" y="133" width="0.1156%" height="15" fill="rgb(213,116,39)"/><text x="21.1368%" y="143.50"></text></g><g><title>mir_for_ctfe (447,864 samples, 0.44%)</title><rect x="22.7341%" y="85" width="0.4432%" height="15" fill="rgb(222,207,29)"/><text x="22.9841%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,302,196 samples, 1.29%)</title><rect x="21.9002%" y="133" width="1.2888%" height="15" fill="rgb(206,96,30)"/><text x="22.1502%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,205,916 samples, 1.19%)</title><rect x="21.9955%" y="117" width="1.1935%" height="15" fill="rgb(218,138,4)"/><text x="22.2455%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,080,725 samples, 1.07%)</title><rect x="22.1194%" y="101" width="1.0696%" height="15" fill="rgb(250,191,14)"/><text x="22.3694%" y="111.50"></text></g><g><title>param_env (730,638 samples, 0.72%)</title><rect x="23.1890%" y="133" width="0.7231%" height="15" fill="rgb(239,60,40)"/><text x="23.4390%" y="143.50"></text></g><g><title>predicates_of (460,514 samples, 0.46%)</title><rect x="23.4563%" y="117" width="0.4558%" height="15" fill="rgb(206,27,48)"/><text x="23.7063%" y="127.50"></text></g><g><title>predicates_defined_on (422,924 samples, 0.42%)</title><rect x="23.4935%" y="101" width="0.4186%" height="15" fill="rgb(225,35,8)"/><text x="23.7435%" y="111.50"></text></g><g><title>crate_lints (4,020,424 samples, 3.98%)</title><rect x="21.0042%" y="149" width="3.9790%" height="15" fill="rgb(250,213,24)"/><text x="21.2542%" y="159.50">crat..</text></g><g><title>type_of (1,075,553 samples, 1.06%)</title><rect x="23.9188%" y="133" width="1.0645%" height="15" fill="rgb(247,123,22)"/><text x="24.1688%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (845,552 samples, 0.84%)</title><rect x="24.1464%" y="117" width="0.8368%" height="15" fill="rgb(231,138,38)"/><text x="24.3964%" y="127.50"></text></g><g><title>lint_checking (4,252,247 samples, 4.21%)</title><rect x="21.0025%" y="165" width="4.2084%" height="15" fill="rgb(231,145,46)"/><text x="21.2525%" y="175.50">lint_..</text></g><g><title>module_lints (230,053 samples, 0.23%)</title><rect x="24.9832%" y="149" width="0.2277%" height="15" fill="rgb(251,118,11)"/><text x="25.2332%" y="159.50"></text></g><g><title>lint_mod (225,843 samples, 0.22%)</title><rect x="24.9874%" y="133" width="0.2235%" height="15" fill="rgb(217,147,25)"/><text x="25.2374%" y="143.50"></text></g><g><title>privacy_access_levels (181,012 samples, 0.18%)</title><rect x="25.2109%" y="165" width="0.1791%" height="15" fill="rgb(247,81,37)"/><text x="25.4609%" y="175.50"></text></g><g><title>privacy_checking_modules (334,104 samples, 0.33%)</title><rect x="25.3901%" y="165" width="0.3307%" height="15" fill="rgb(209,12,38)"/><text x="25.6401%" y="175.50"></text></g><g><title>check_mod_privacy (331,184 samples, 0.33%)</title><rect x="25.3930%" y="149" width="0.3278%" height="15" fill="rgb(227,1,9)"/><text x="25.6430%" y="159.50"></text></g><g><title>misc_checking_3 (5,656,523 samples, 5.60%)</title><rect x="20.1337%" y="181" width="5.5982%" height="15" fill="rgb(248,47,43)"/><text x="20.3837%" y="191.50">misc_ch..</text></g><g><title>impl_trait_ref (224,773 samples, 0.22%)</title><rect x="26.0271%" y="85" width="0.2225%" height="15" fill="rgb(221,10,30)"/><text x="26.2771%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (205,873 samples, 0.20%)</title><rect x="26.0458%" y="69" width="0.2038%" height="15" fill="rgb(210,229,1)"/><text x="26.2958%" y="79.50"></text></g><g><title>adt_destructor (388,724 samples, 0.38%)</title><rect x="25.8928%" y="133" width="0.3847%" height="15" fill="rgb(222,148,37)"/><text x="26.1428%" y="143.50"></text></g><g><title>coherent_trait (385,784 samples, 0.38%)</title><rect x="25.8957%" y="117" width="0.3818%" height="15" fill="rgb(234,67,33)"/><text x="26.1457%" y="127.50"></text></g><g><title>specialization_graph_of (384,334 samples, 0.38%)</title><rect x="25.8972%" y="101" width="0.3804%" height="15" fill="rgb(247,98,35)"/><text x="26.1472%" y="111.50"></text></g><g><title>mir_const_qualif (122,211 samples, 0.12%)</title><rect x="26.4080%" y="85" width="0.1210%" height="15" fill="rgb(247,138,52)"/><text x="26.6580%" y="95.50"></text></g><g><title>mir_borrowck (297,953 samples, 0.29%)</title><rect x="26.6264%" y="53" width="0.2949%" height="15" fill="rgb(213,79,30)"/><text x="26.8764%" y="63.50"></text></g><g><title>mir_for_ctfe (396,954 samples, 0.39%)</title><rect x="26.5289%" y="85" width="0.3929%" height="15" fill="rgb(246,177,23)"/><text x="26.7789%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (362,464 samples, 0.36%)</title><rect x="26.5631%" y="69" width="0.3587%" height="15" fill="rgb(230,62,27)"/><text x="26.8131%" y="79.50"></text></g><g><title>eval_to_const_value_raw (185,632 samples, 0.18%)</title><rect x="26.9287%" y="69" width="0.1837%" height="15" fill="rgb(216,154,8)"/><text x="27.1787%" y="79.50"></text></g><g><title>eval_to_const_value_raw (184,112 samples, 0.18%)</title><rect x="26.9302%" y="53" width="0.1822%" height="15" fill="rgb(244,35,45)"/><text x="27.1802%" y="63.50"></text></g><g><title>eval_to_allocation_raw (180,882 samples, 0.18%)</title><rect x="26.9334%" y="37" width="0.1790%" height="15" fill="rgb(251,115,12)"/><text x="27.1834%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (195,292 samples, 0.19%)</title><rect x="26.9221%" y="85" width="0.1933%" height="15" fill="rgb(240,54,50)"/><text x="27.1721%" y="95.50"></text></g><g><title>eval_to_const_value_raw (987,191 samples, 0.98%)</title><rect x="26.2776%" y="133" width="0.9770%" height="15" fill="rgb(233,84,52)"/><text x="26.5276%" y="143.50"></text></g><g><title>eval_to_const_value_raw (975,921 samples, 0.97%)</title><rect x="26.2887%" y="117" width="0.9659%" height="15" fill="rgb(207,117,47)"/><text x="26.5387%" y="127.50"></text></g><g><title>eval_to_allocation_raw (974,701 samples, 0.96%)</title><rect x="26.2899%" y="101" width="0.9647%" height="15" fill="rgb(249,43,39)"/><text x="26.5399%" y="111.50"></text></g><g><title>typeck (140,611 samples, 0.14%)</title><rect x="27.1154%" y="85" width="0.1392%" height="15" fill="rgb(209,38,44)"/><text x="27.3654%" y="95.50"></text></g><g><title>is_copy_raw (174,442 samples, 0.17%)</title><rect x="27.2546%" y="133" width="0.1726%" height="15" fill="rgb(236,212,23)"/><text x="27.5046%" y="143.50"></text></g><g><title>evaluate_obligation (149,172 samples, 0.15%)</title><rect x="27.2796%" y="117" width="0.1476%" height="15" fill="rgb(242,79,21)"/><text x="27.5296%" y="127.50"></text></g><g><title>impl_parent (2,867,566 samples, 2.84%)</title><rect x="31.9463%" y="117" width="2.8380%" height="15" fill="rgb(211,96,35)"/><text x="32.1963%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,493,234 samples, 1.48%)</title><rect x="33.3065%" y="101" width="1.4778%" height="15" fill="rgb(253,215,40)"/><text x="33.5565%" y="111.50"></text></g><g><title>impl_trait_ref (5,805,572 samples, 5.75%)</title><rect x="34.7843%" y="117" width="5.7457%" height="15" fill="rgb(211,81,21)"/><text x="35.0343%" y="127.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,707,796 samples, 4.66%)</title><rect x="35.8708%" y="101" width="4.6593%" height="15" fill="rgb(208,190,38)"/><text x="36.1208%" y="111.50">metad..</text></g><g><title>coherent_trait (15,853,436 samples, 15.69%)</title><rect x="25.8301%" y="149" width="15.6901%" height="15" fill="rgb(235,213,38)"/><text x="26.0801%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (14,156,036 samples, 14.01%)</title><rect x="27.5100%" y="133" width="14.0102%" height="15" fill="rgb(237,122,38)"/><text x="27.7600%" y="143.50">specialization_graph_..</text></g><g><title>trait_impls_of (998,959 samples, 0.99%)</title><rect x="40.5315%" y="117" width="0.9887%" height="15" fill="rgb(244,218,35)"/><text x="40.7815%" y="127.50"></text></g><g><title>implementations_of_trait (234,721 samples, 0.23%)</title><rect x="41.2879%" y="101" width="0.2323%" height="15" fill="rgb(240,68,47)"/><text x="41.5379%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (194,521 samples, 0.19%)</title><rect x="41.3276%" y="85" width="0.1925%" height="15" fill="rgb(210,16,53)"/><text x="41.5776%" y="95.50"></text></g><g><title>coherence_checking (15,943,827 samples, 15.78%)</title><rect x="25.8126%" y="165" width="15.7795%" height="15" fill="rgb(235,124,12)"/><text x="26.0626%" y="175.50">coherence_checking</text></g><g><title>dropck_outlives (183,392 samples, 0.18%)</title><rect x="47.1654%" y="117" width="0.1815%" height="15" fill="rgb(224,169,11)"/><text x="47.4154%" y="127.50"></text></g><g><title>adt_dtorck_constraint (146,342 samples, 0.14%)</title><rect x="47.2021%" y="101" width="0.1448%" height="15" fill="rgb(250,166,2)"/><text x="47.4521%" y="111.50"></text></g><g><title>mir_borrowck (141,941 samples, 0.14%)</title><rect x="47.5347%" y="37" width="0.1405%" height="15" fill="rgb(242,216,29)"/><text x="47.7847%" y="47.50"></text></g><g><title>mir_for_ctfe (215,452 samples, 0.21%)</title><rect x="47.4626%" y="69" width="0.2132%" height="15" fill="rgb(230,116,27)"/><text x="47.7126%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (195,402 samples, 0.19%)</title><rect x="47.4825%" y="53" width="0.1934%" height="15" fill="rgb(228,99,48)"/><text x="47.7325%" y="63.50"></text></g><g><title>eval_to_const_value_raw (332,854 samples, 0.33%)</title><rect x="47.3469%" y="117" width="0.3294%" height="15" fill="rgb(253,11,6)"/><text x="47.5969%" y="127.50"></text></g><g><title>eval_to_const_value_raw (330,644 samples, 0.33%)</title><rect x="47.3491%" y="101" width="0.3272%" height="15" fill="rgb(247,143,39)"/><text x="47.5991%" y="111.50"></text></g><g><title>eval_to_allocation_raw (325,214 samples, 0.32%)</title><rect x="47.3545%" y="85" width="0.3219%" height="15" fill="rgb(236,97,10)"/><text x="47.6045%" y="95.50"></text></g><g><title>evaluate_obligation (351,205 samples, 0.35%)</title><rect x="47.6764%" y="117" width="0.3476%" height="15" fill="rgb(233,208,19)"/><text x="47.9264%" y="127.50"></text></g><g><title>object_safety_violations (118,672 samples, 0.12%)</title><rect x="48.2201%" y="117" width="0.1174%" height="15" fill="rgb(216,164,2)"/><text x="48.4701%" y="127.50"></text></g><g><title>predicates_of (123,311 samples, 0.12%)</title><rect x="48.3791%" y="117" width="0.1220%" height="15" fill="rgb(220,129,5)"/><text x="48.6291%" y="127.50"></text></g><g><title>predicates_defined_on (103,461 samples, 0.10%)</title><rect x="48.3988%" y="101" width="0.1024%" height="15" fill="rgb(242,17,10)"/><text x="48.6488%" y="111.50"></text></g><g><title>item_bodies_checking (7,006,488 samples, 6.93%)</title><rect x="41.6426%" y="165" width="6.9343%" height="15" fill="rgb(242,107,0)"/><text x="41.8926%" y="175.50">item_bodi..</text></g><g><title>typeck_item_bodies (7,004,608 samples, 6.93%)</title><rect x="41.6445%" y="149" width="6.9324%" height="15" fill="rgb(251,28,31)"/><text x="41.8945%" y="159.50">typeck_it..</text></g><g><title>typeck (6,962,517 samples, 6.89%)</title><rect x="41.6861%" y="133" width="6.8908%" height="15" fill="rgb(233,223,10)"/><text x="41.9361%" y="143.50">typeck</text></g><g><title>item_types_checking (1,616,178 samples, 1.60%)</title><rect x="48.5769%" y="165" width="1.5995%" height="15" fill="rgb(215,21,27)"/><text x="48.8269%" y="175.50"></text></g><g><title>check_mod_item_types (1,612,448 samples, 1.60%)</title><rect x="48.5806%" y="149" width="1.5958%" height="15" fill="rgb(232,23,21)"/><text x="48.8306%" y="159.50"></text></g><g><title>typeck (1,174,884 samples, 1.16%)</title><rect x="49.0136%" y="133" width="1.1628%" height="15" fill="rgb(244,5,23)"/><text x="49.2636%" y="143.50"></text></g><g><title>late_bound_vars_map (146,510 samples, 0.15%)</title><rect x="51.0333%" y="117" width="0.1450%" height="15" fill="rgb(226,81,46)"/><text x="51.2833%" y="127.50"></text></g><g><title>resolve_lifetimes (109,310 samples, 0.11%)</title><rect x="51.0701%" y="101" width="0.1082%" height="15" fill="rgb(247,70,30)"/><text x="51.3201%" y="111.50"></text></g><g><title>fn_sig (463,872 samples, 0.46%)</title><rect x="50.7881%" y="133" width="0.4591%" height="15" fill="rgb(212,68,19)"/><text x="51.0381%" y="143.50"></text></g><g><title>named_region_map (334,685 samples, 0.33%)</title><rect x="51.4729%" y="117" width="0.3312%" height="15" fill="rgb(240,187,13)"/><text x="51.7229%" y="127.50"></text></g><g><title>resolve_lifetimes (304,584 samples, 0.30%)</title><rect x="51.5027%" y="101" width="0.3014%" height="15" fill="rgb(223,113,26)"/><text x="51.7527%" y="111.50"></text></g><g><title>generics_of (609,409 samples, 0.60%)</title><rect x="51.2472%" y="133" width="0.6031%" height="15" fill="rgb(206,192,2)"/><text x="51.4972%" y="143.50"></text></g><g><title>explicit_predicates_of (253,532 samples, 0.25%)</title><rect x="52.3835%" y="101" width="0.2509%" height="15" fill="rgb(241,108,4)"/><text x="52.6335%" y="111.50"></text></g><g><title>predicates_of (926,780 samples, 0.92%)</title><rect x="51.9455%" y="133" width="0.9172%" height="15" fill="rgb(247,173,49)"/><text x="52.1955%" y="143.50"></text></g><g><title>predicates_defined_on (747,816 samples, 0.74%)</title><rect x="52.1227%" y="117" width="0.7401%" height="15" fill="rgb(224,114,35)"/><text x="52.3727%" y="127.50"></text></g><g><title>inferred_outlives_of (230,732 samples, 0.23%)</title><rect x="52.6344%" y="101" width="0.2284%" height="15" fill="rgb(245,159,27)"/><text x="52.8844%" y="111.50"></text></g><g><title>inferred_outlives_crate (173,512 samples, 0.17%)</title><rect x="52.6910%" y="85" width="0.1717%" height="15" fill="rgb(245,172,44)"/><text x="52.9410%" y="95.50"></text></g><g><title>type_collecting (2,920,102 samples, 2.89%)</title><rect x="50.1784%" y="165" width="2.8900%" height="15" fill="rgb(236,23,11)"/><text x="50.4284%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (2,903,592 samples, 2.87%)</title><rect x="50.1947%" y="149" width="2.8737%" height="15" fill="rgb(205,117,38)"/><text x="50.4447%" y="159.50">co..</text></g><g><title>type_of (207,762 samples, 0.21%)</title><rect x="52.8628%" y="133" width="0.2056%" height="15" fill="rgb(237,72,25)"/><text x="53.1128%" y="143.50"></text></g><g><title>adt_sized_constraint (121,422 samples, 0.12%)</title><rect x="53.7471%" y="117" width="0.1202%" height="15" fill="rgb(244,70,9)"/><text x="53.9971%" y="127.50"></text></g><g><title>evaluate_obligation (251,043 samples, 0.25%)</title><rect x="53.6618%" y="133" width="0.2485%" height="15" fill="rgb(217,125,39)"/><text x="53.9118%" y="143.50"></text></g><g><title>check_impl_item_well_formed (895,538 samples, 0.89%)</title><rect x="53.2497%" y="149" width="0.8863%" height="15" fill="rgb(235,36,10)"/><text x="53.4997%" y="159.50"></text></g><g><title>evaluate_obligation (138,352 samples, 0.14%)</title><rect x="55.3689%" y="133" width="0.1369%" height="15" fill="rgb(251,123,47)"/><text x="55.6189%" y="143.50"></text></g><g><title>param_env (458,604 samples, 0.45%)</title><rect x="55.5308%" y="133" width="0.4539%" height="15" fill="rgb(221,13,13)"/><text x="55.7808%" y="143.50"></text></g><g><title>region_scope_tree (195,375 samples, 0.19%)</title><rect x="56.0490%" y="133" width="0.1934%" height="15" fill="rgb(238,131,9)"/><text x="56.2990%" y="143.50"></text></g><g><title>analysis (55,961,133 samples, 55.38%)</title><rect x="0.9031%" y="197" width="55.3845%" height="15" fill="rgb(211,50,8)"/><text x="1.1531%" y="207.50">analysis</text></g><g><title>type_check_crate (30,873,783 samples, 30.56%)</title><rect x="25.7320%" y="181" width="30.5556%" height="15" fill="rgb(245,182,24)"/><text x="25.9820%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,238,686 samples, 3.21%)</title><rect x="53.0823%" y="165" width="3.2053%" height="15" fill="rgb(242,14,37)"/><text x="53.3323%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (2,173,985 samples, 2.15%)</title><rect x="54.1360%" y="149" width="2.1516%" height="15" fill="rgb(246,228,12)"/><text x="54.3860%" y="159.50">c..</text></g><g><title>codegen_crate (347,644 samples, 0.34%)</title><rect x="56.2977%" y="197" width="0.3441%" height="15" fill="rgb(213,55,15)"/><text x="56.5477%" y="207.50"></text></g><g><title>AST_validation (198,922 samples, 0.20%)</title><rect x="56.8299%" y="181" width="0.1969%" height="15" fill="rgb(209,9,3)"/><text x="57.0799%" y="191.50"></text></g><g><title>metadata_load_macro (131,580 samples, 0.13%)</title><rect x="80.3022%" y="149" width="0.1302%" height="15" fill="rgb(230,59,30)"/><text x="80.5522%" y="159.50"></text></g><g><title>metadata_register_crate (2,755,811 samples, 2.73%)</title><rect x="80.4324%" y="149" width="2.7274%" height="15" fill="rgb(209,121,21)"/><text x="80.6824%" y="159.50">me..</text></g><g><title>metadata_register_crate (979,233 samples, 0.97%)</title><rect x="82.1907%" y="133" width="0.9691%" height="15" fill="rgb(220,109,13)"/><text x="82.4407%" y="143.50"></text></g><g><title>macro_expand_crate (26,378,364 samples, 26.11%)</title><rect x="57.1878%" y="181" width="26.1065%" height="15" fill="rgb(232,18,1)"/><text x="57.4378%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (26,353,573 samples, 26.08%)</title><rect x="57.2123%" y="165" width="26.0820%" height="15" fill="rgb(215,41,42)"/><text x="57.4623%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (135,851 samples, 0.13%)</title><rect x="83.1599%" y="149" width="0.1345%" height="15" fill="rgb(224,123,36)"/><text x="83.4099%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (118,621 samples, 0.12%)</title><rect x="83.2997%" y="181" width="0.1174%" height="15" fill="rgb(240,125,3)"/><text x="83.5497%" y="191.50"></text></g><g><title>finalize_imports (316,744 samples, 0.31%)</title><rect x="83.4290%" y="165" width="0.3135%" height="15" fill="rgb(205,98,50)"/><text x="83.6790%" y="175.50"></text></g><g><title>finalize_macro_resolutions (311,313 samples, 0.31%)</title><rect x="83.7425%" y="165" width="0.3081%" height="15" fill="rgb(205,185,37)"/><text x="83.9925%" y="175.50"></text></g><g><title>late_resolve_crate (2,351,647 samples, 2.33%)</title><rect x="84.0506%" y="165" width="2.3274%" height="15" fill="rgb(238,207,15)"/><text x="84.3006%" y="175.50">l..</text></g><g><title>configure_and_expand (30,269,657 samples, 29.96%)</title><rect x="56.6417%" y="197" width="29.9577%" height="15" fill="rgb(213,199,42)"/><text x="56.8917%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,215,486 samples, 3.18%)</title><rect x="83.4171%" y="181" width="3.1824%" height="15" fill="rgb(235,201,11)"/><text x="83.6671%" y="191.50">res..</text></g><g><title>drop_ast (231,732 samples, 0.23%)</title><rect x="86.5995%" y="197" width="0.2293%" height="15" fill="rgb(207,46,11)"/><text x="86.8495%" y="207.50"></text></g><g><title>early_lint_checks (585,446 samples, 0.58%)</title><rect x="86.8426%" y="197" width="0.5794%" height="15" fill="rgb(241,35,35)"/><text x="87.0926%" y="207.50"></text></g><g><title>free_global_ctxt (2,959,443 samples, 2.93%)</title><rect x="87.4221%" y="197" width="2.9289%" height="15" fill="rgb(243,32,47)"/><text x="87.6721%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,214,403 samples, 1.20%)</title><rect x="90.3510%" y="197" width="1.2019%" height="15" fill="rgb(247,202,23)"/><text x="90.6010%" y="207.50"></text></g><g><title>hir_lowering (4,436,069 samples, 4.39%)</title><rect x="91.5529%" y="197" width="4.3904%" height="15" fill="rgb(219,102,11)"/><text x="91.8029%" y="207.50">hir_l..</text></g><g><title>parse_crate (2,421,737 samples, 2.40%)</title><rect x="95.9843%" y="197" width="2.3968%" height="15" fill="rgb(243,110,44)"/><text x="96.2343%" y="207.50">pa..</text></g><g><title>prepare_outputs (368,114 samples, 0.36%)</title><rect x="98.3896%" y="197" width="0.3643%" height="15" fill="rgb(222,74,54)"/><text x="98.6396%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (730,298 samples, 0.72%)</title><rect x="98.7539%" y="197" width="0.7228%" height="15" fill="rgb(216,99,12)"/><text x="99.0039%" y="207.50"></text></g><g><title>setup_global_ctxt (140,741 samples, 0.14%)</title><rect x="99.4850%" y="197" width="0.1393%" height="15" fill="rgb(226,22,26)"/><text x="99.7350%" y="207.50"></text></g><g><title>all (101,041,195 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (101,041,195 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (379,635 samples, 0.38%)</title><rect x="99.6243%" y="197" width="0.3757%" height="15" fill="rgb(252,105,26)"/><text x="99.8743%" y="207.50"></text></g></svg></svg>