<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (68,811 samples, 0.13%)</title><rect x="8.1118%" y="133" width="0.1302%" height="15" fill="rgb(227,0,7)"/><text x="8.3618%" y="143.50"></text></g><g><title>item_attrs (77,350 samples, 0.15%)</title><rect x="8.3621%" y="101" width="0.1464%" height="15" fill="rgb(217,0,24)"/><text x="8.6121%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (75,260 samples, 0.14%)</title><rect x="8.3661%" y="85" width="0.1424%" height="15" fill="rgb(221,193,54)"/><text x="8.6161%" y="95.50"></text></g><g><title>codegen_fn_attrs (93,840 samples, 0.18%)</title><rect x="8.3341%" y="117" width="0.1776%" height="15" fill="rgb(248,212,6)"/><text x="8.5841%" y="127.50"></text></g><g><title>adt_drop_tys (71,851 samples, 0.14%)</title><rect x="9.2485%" y="69" width="0.1360%" height="15" fill="rgb(208,68,35)"/><text x="9.4985%" y="79.50"></text></g><g><title>adt_drop_tys (122,361 samples, 0.23%)</title><rect x="9.2337%" y="85" width="0.2316%" height="15" fill="rgb(232,128,0)"/><text x="9.4837%" y="95.50"></text></g><g><title>needs_drop_raw (231,992 samples, 0.44%)</title><rect x="9.2053%" y="101" width="0.4390%" height="15" fill="rgb(207,160,47)"/><text x="9.4553%" y="111.50"></text></g><g><title>is_copy_raw (94,601 samples, 0.18%)</title><rect x="9.4653%" y="85" width="0.1790%" height="15" fill="rgb(228,23,34)"/><text x="9.7153%" y="95.50"></text></g><g><title>evaluate_obligation (80,371 samples, 0.15%)</title><rect x="9.4922%" y="69" width="0.1521%" height="15" fill="rgb(218,30,26)"/><text x="9.7422%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (150,162 samples, 0.28%)</title><rect x="9.7175%" y="85" width="0.2842%" height="15" fill="rgb(220,122,19)"/><text x="9.9675%" y="95.50"></text></g><g><title>impl_parent (68,441 samples, 0.13%)</title><rect x="10.1645%" y="69" width="0.1295%" height="15" fill="rgb(250,228,42)"/><text x="10.4145%" y="79.50"></text></g><g><title>specialization_graph_of (356,164 samples, 0.67%)</title><rect x="10.0056%" y="85" width="0.6740%" height="15" fill="rgb(240,193,28)"/><text x="10.2556%" y="95.50"></text></g><g><title>impl_trait_ref (203,761 samples, 0.39%)</title><rect x="10.2940%" y="69" width="0.3856%" height="15" fill="rgb(216,20,37)"/><text x="10.5440%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (184,361 samples, 0.35%)</title><rect x="10.3307%" y="53" width="0.3489%" height="15" fill="rgb(206,188,39)"/><text x="10.5807%" y="63.50"></text></g><g><title>resolve_instance (565,397 samples, 1.07%)</title><rect x="9.6443%" y="101" width="1.0700%" height="15" fill="rgb(217,207,13)"/><text x="9.8943%" y="111.50"></text></g><g><title>thir_body (154,802 samples, 0.29%)</title><rect x="10.7261%" y="101" width="0.2930%" height="15" fill="rgb(231,73,38)"/><text x="10.9761%" y="111.50"></text></g><g><title>mir_const (1,678,220 samples, 3.18%)</title><rect x="7.8515%" y="149" width="3.1760%" height="15" fill="rgb(225,20,46)"/><text x="8.1015%" y="159.50">mir..</text></g><g><title>unsafety_check_result (1,471,846 samples, 2.79%)</title><rect x="8.2420%" y="133" width="2.7855%" height="15" fill="rgb(210,31,41)"/><text x="8.4920%" y="143.50">un..</text></g><g><title>mir_built (1,329,335 samples, 2.52%)</title><rect x="8.5117%" y="117" width="2.5158%" height="15" fill="rgb(221,200,47)"/><text x="8.7617%" y="127.50">mi..</text></g><g><title>thir_body (1,492,956 samples, 2.83%)</title><rect x="13.7279%" y="85" width="2.8254%" height="15" fill="rgb(226,26,5)"/><text x="13.9779%" y="95.50">th..</text></g><g><title>lit_to_const (176,030 samples, 0.33%)</title><rect x="16.2202%" y="69" width="0.3331%" height="15" fill="rgb(249,33,26)"/><text x="16.4702%" y="79.50"></text></g><g><title>mir_promoted (5,196,788 samples, 9.83%)</title><rect x="6.7203%" y="165" width="9.8349%" height="15" fill="rgb(235,183,28)"/><text x="6.9703%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (2,920,843 samples, 5.53%)</title><rect x="11.0275%" y="149" width="5.5277%" height="15" fill="rgb(221,5,38)"/><text x="11.2775%" y="159.50">mir_con..</text></g><g><title>mir_const (2,838,402 samples, 5.37%)</title><rect x="11.1835%" y="133" width="5.3717%" height="15" fill="rgb(247,18,42)"/><text x="11.4335%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (2,737,071 samples, 5.18%)</title><rect x="11.3753%" y="117" width="5.1799%" height="15" fill="rgb(241,131,45)"/><text x="11.6253%" y="127.50">unsafe..</text></g><g><title>mir_built (2,669,250 samples, 5.05%)</title><rect x="11.5036%" y="101" width="5.0516%" height="15" fill="rgb(249,31,29)"/><text x="11.7536%" y="111.50">mir_bu..</text></g><g><title>type_op_normalize_predicate (188,891 samples, 0.36%)</title><rect x="16.5917%" y="165" width="0.3575%" height="15" fill="rgb(225,111,53)"/><text x="16.8417%" y="175.50"></text></g><g><title>normalize_projection_ty (88,680 samples, 0.17%)</title><rect x="16.7814%" y="149" width="0.1678%" height="15" fill="rgb(238,160,17)"/><text x="17.0314%" y="159.50"></text></g><g><title>MIR_borrow_checking (8,469,054 samples, 16.03%)</title><rect x="1.5336%" y="197" width="16.0277%" height="15" fill="rgb(214,148,48)"/><text x="1.7836%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,448,813 samples, 15.99%)</title><rect x="1.5719%" y="181" width="15.9894%" height="15" fill="rgb(232,36,49)"/><text x="1.8219%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (323,427 samples, 0.61%)</title><rect x="16.9492%" y="165" width="0.6121%" height="15" fill="rgb(209,103,24)"/><text x="17.1992%" y="175.50"></text></g><g><title>MIR_effect_checking (149,872 samples, 0.28%)</title><rect x="17.5613%" y="197" width="0.2836%" height="15" fill="rgb(229,88,8)"/><text x="17.8113%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (129,432 samples, 0.24%)</title><rect x="17.6000%" y="181" width="0.2450%" height="15" fill="rgb(213,181,19)"/><text x="17.8500%" y="191.50"></text></g><g><title>hir_module_items (92,932 samples, 0.18%)</title><rect x="17.8449%" y="197" width="0.1759%" height="15" fill="rgb(254,191,54)"/><text x="18.0949%" y="207.50"></text></g><g><title>codegen_fn_attrs (136,201 samples, 0.26%)</title><rect x="18.4684%" y="165" width="0.2578%" height="15" fill="rgb(241,83,37)"/><text x="18.7184%" y="175.50"></text></g><g><title>check_mod_attrs (353,794 samples, 0.67%)</title><rect x="18.0570%" y="181" width="0.6696%" height="15" fill="rgb(233,36,39)"/><text x="18.3070%" y="191.50"></text></g><g><title>lookup_deprecation_entry (57,700 samples, 0.11%)</title><rect x="18.9921%" y="165" width="0.1092%" height="15" fill="rgb(226,3,54)"/><text x="19.2421%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (148,412 samples, 0.28%)</title><rect x="18.8863%" y="181" width="0.2809%" height="15" fill="rgb(245,192,40)"/><text x="19.1363%" y="191.50"></text></g><g><title>misc_checking_1 (640,897 samples, 1.21%)</title><rect x="18.0214%" y="197" width="1.2129%" height="15" fill="rgb(238,167,29)"/><text x="18.2714%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (171,802 samples, 0.33%)</title><rect x="19.2368%" y="181" width="0.3251%" height="15" fill="rgb(232,182,51)"/><text x="19.4868%" y="191.50"></text></g><g><title>check_mod_liveness (121,571 samples, 0.23%)</title><rect x="19.3319%" y="165" width="0.2301%" height="15" fill="rgb(231,60,39)"/><text x="19.5819%" y="175.50"></text></g><g><title>misc_checking_2 (360,764 samples, 0.68%)</title><rect x="19.2343%" y="197" width="0.6827%" height="15" fill="rgb(208,69,12)"/><text x="19.4843%" y="207.50"></text></g><g><title>match_checking (187,642 samples, 0.36%)</title><rect x="19.5620%" y="181" width="0.3551%" height="15" fill="rgb(235,93,37)"/><text x="19.8120%" y="191.50"></text></g><g><title>check_match (180,662 samples, 0.34%)</title><rect x="19.5752%" y="165" width="0.3419%" height="15" fill="rgb(213,116,39)"/><text x="19.8252%" y="175.50"></text></g><g><title>check_private_in_public (62,730 samples, 0.12%)</title><rect x="19.9341%" y="181" width="0.1187%" height="15" fill="rgb(222,207,29)"/><text x="20.1841%" y="191.50"></text></g><g><title>death_checking (129,612 samples, 0.25%)</title><rect x="20.0528%" y="181" width="0.2453%" height="15" fill="rgb(206,96,30)"/><text x="20.3028%" y="191.50"></text></g><g><title>eval_to_const_value_raw (3,136,035 samples, 5.93%)</title><rect x="22.7376%" y="85" width="5.9350%" height="15" fill="rgb(218,138,4)"/><text x="22.9876%" y="95.50">eval_to_..</text></g><g><title>eval_to_const_value_raw (3,134,985 samples, 5.93%)</title><rect x="22.7396%" y="69" width="5.9330%" height="15" fill="rgb(250,191,14)"/><text x="22.9896%" y="79.50">eval_to_..</text></g><g><title>eval_to_allocation_raw (3,133,155 samples, 5.93%)</title><rect x="22.7430%" y="53" width="5.9295%" height="15" fill="rgb(239,60,40)"/><text x="22.9930%" y="63.50">eval_to_..</text></g><g><title>promoted_mir (644,757 samples, 1.22%)</title><rect x="27.4523%" y="37" width="1.2202%" height="15" fill="rgb(206,27,48)"/><text x="27.7023%" y="47.50"></text></g><g><title>eval_to_const_value_raw (4,113,935 samples, 7.79%)</title><rect x="20.8931%" y="149" width="7.7856%" height="15" fill="rgb(225,35,8)"/><text x="21.1431%" y="159.50">eval_to_con..</text></g><g><title>eval_to_const_value_raw (4,105,505 samples, 7.77%)</title><rect x="20.9090%" y="133" width="7.7697%" height="15" fill="rgb(250,213,24)"/><text x="21.1590%" y="143.50">eval_to_con..</text></g><g><title>eval_to_allocation_raw (4,099,475 samples, 7.76%)</title><rect x="20.9205%" y="117" width="7.7583%" height="15" fill="rgb(247,123,22)"/><text x="21.1705%" y="127.50">eval_to_all..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,146,135 samples, 5.95%)</title><rect x="22.7247%" y="101" width="5.9541%" height="15" fill="rgb(231,138,38)"/><text x="22.9747%" y="111.50">try_norm..</text></g><g><title>param_env (130,631 samples, 0.25%)</title><rect x="28.6787%" y="149" width="0.2472%" height="15" fill="rgb(231,145,46)"/><text x="28.9287%" y="159.50"></text></g><g><title>predicates_of (59,131 samples, 0.11%)</title><rect x="28.8140%" y="133" width="0.1119%" height="15" fill="rgb(251,118,11)"/><text x="29.0640%" y="143.50"></text></g><g><title>crate_lints (4,559,341 samples, 8.63%)</title><rect x="20.3007%" y="165" width="8.6286%" height="15" fill="rgb(217,147,25)"/><text x="20.5507%" y="175.50">crate_lints</text></g><g><title>lint_checking (5,042,906 samples, 9.54%)</title><rect x="20.2981%" y="181" width="9.5437%" height="15" fill="rgb(247,81,37)"/><text x="20.5481%" y="191.50">lint_checking</text></g><g><title>module_lints (482,155 samples, 0.91%)</title><rect x="28.9293%" y="165" width="0.9125%" height="15" fill="rgb(209,12,38)"/><text x="29.1793%" y="175.50"></text></g><g><title>lint_mod (479,165 samples, 0.91%)</title><rect x="28.9350%" y="149" width="0.9068%" height="15" fill="rgb(227,1,9)"/><text x="29.1850%" y="159.50"></text></g><g><title>privacy_access_levels (70,081 samples, 0.13%)</title><rect x="29.8418%" y="181" width="0.1326%" height="15" fill="rgb(248,47,43)"/><text x="30.0918%" y="191.50"></text></g><g><title>privacy_checking_modules (297,223 samples, 0.56%)</title><rect x="29.9744%" y="181" width="0.5625%" height="15" fill="rgb(221,10,30)"/><text x="30.2244%" y="191.50"></text></g><g><title>check_mod_privacy (295,303 samples, 0.56%)</title><rect x="29.9781%" y="165" width="0.5589%" height="15" fill="rgb(210,229,1)"/><text x="30.2281%" y="175.50"></text></g><g><title>misc_checking_3 (5,620,812 samples, 10.64%)</title><rect x="19.9171%" y="197" width="10.6374%" height="15" fill="rgb(222,148,37)"/><text x="20.1671%" y="207.50">misc_checking_3</text></g><g><title>coherent_trait (66,031 samples, 0.12%)</title><rect x="30.6341%" y="165" width="0.1250%" height="15" fill="rgb(234,67,33)"/><text x="30.8841%" y="175.50"></text></g><g><title>specialization_graph_of (57,490 samples, 0.11%)</title><rect x="30.6502%" y="149" width="0.1088%" height="15" fill="rgb(247,98,35)"/><text x="30.9002%" y="159.50"></text></g><g><title>coherence_checking (108,001 samples, 0.20%)</title><rect x="30.6132%" y="181" width="0.2044%" height="15" fill="rgb(247,138,52)"/><text x="30.8632%" y="191.50"></text></g><g><title>adt_sized_constraint (55,500 samples, 0.11%)</title><rect x="35.2398%" y="101" width="0.1050%" height="15" fill="rgb(213,79,30)"/><text x="35.4898%" y="111.50"></text></g><g><title>adt_sized_constraint (102,001 samples, 0.19%)</title><rect x="35.1590%" y="117" width="0.1930%" height="15" fill="rgb(246,177,23)"/><text x="35.4090%" y="127.50"></text></g><g><title>associated_item (264,213 samples, 0.50%)</title><rect x="35.5197%" y="101" width="0.5000%" height="15" fill="rgb(230,62,27)"/><text x="35.7697%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (207,102 samples, 0.39%)</title><rect x="35.6278%" y="85" width="0.3919%" height="15" fill="rgb(216,154,8)"/><text x="35.8778%" y="95.50"></text></g><g><title>associated_items (360,634 samples, 0.68%)</title><rect x="35.3601%" y="117" width="0.6825%" height="15" fill="rgb(244,35,45)"/><text x="35.6101%" y="127.50"></text></g><g><title>coherent_trait (58,151 samples, 0.11%)</title><rect x="36.2045%" y="53" width="0.1101%" height="15" fill="rgb(251,115,12)"/><text x="36.4545%" y="63.50"></text></g><g><title>specialization_graph_of (56,711 samples, 0.11%)</title><rect x="36.2072%" y="37" width="0.1073%" height="15" fill="rgb(240,54,50)"/><text x="36.4572%" y="47.50"></text></g><g><title>adt_destructor (69,701 samples, 0.13%)</title><rect x="36.1911%" y="85" width="0.1319%" height="15" fill="rgb(233,84,52)"/><text x="36.4411%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (68,271 samples, 0.13%)</title><rect x="36.1938%" y="69" width="0.1292%" height="15" fill="rgb(207,117,47)"/><text x="36.4438%" y="79.50"></text></g><g><title>dropck_outlives (164,931 samples, 0.31%)</title><rect x="36.0834%" y="117" width="0.3121%" height="15" fill="rgb(249,43,39)"/><text x="36.3334%" y="127.50"></text></g><g><title>adt_dtorck_constraint (125,511 samples, 0.24%)</title><rect x="36.1580%" y="101" width="0.2375%" height="15" fill="rgb(209,38,44)"/><text x="36.4080%" y="111.50"></text></g><g><title>associated_item (58,621 samples, 0.11%)</title><rect x="37.0232%" y="69" width="0.1109%" height="15" fill="rgb(236,212,23)"/><text x="37.2732%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (58,131 samples, 0.11%)</title><rect x="37.0241%" y="53" width="0.1100%" height="15" fill="rgb(242,79,21)"/><text x="37.2741%" y="63.50"></text></g><g><title>impl_item_implementor_ids (62,071 samples, 0.12%)</title><rect x="37.0181%" y="101" width="0.1175%" height="15" fill="rgb(211,96,35)"/><text x="37.2681%" y="111.50"></text></g><g><title>associated_items (60,931 samples, 0.12%)</title><rect x="37.0202%" y="85" width="0.1153%" height="15" fill="rgb(253,215,40)"/><text x="37.2702%" y="95.50"></text></g><g><title>trait_impls_of (80,281 samples, 0.15%)</title><rect x="37.3027%" y="101" width="0.1519%" height="15" fill="rgb(211,81,21)"/><text x="37.5527%" y="111.50"></text></g><g><title>evaluate_obligation (560,215 samples, 1.06%)</title><rect x="36.3956%" y="117" width="1.0602%" height="15" fill="rgb(208,190,38)"/><text x="36.6456%" y="127.50"></text></g><g><title>fn_sig (53,630 samples, 0.10%)</title><rect x="37.4666%" y="117" width="0.1015%" height="15" fill="rgb(235,213,38)"/><text x="37.7166%" y="127.50"></text></g><g><title>explicit_predicates_of (56,200 samples, 0.11%)</title><rect x="37.9164%" y="53" width="0.1064%" height="15" fill="rgb(237,122,38)"/><text x="38.1664%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (54,820 samples, 0.10%)</title><rect x="37.9190%" y="37" width="0.1037%" height="15" fill="rgb(244,218,35)"/><text x="38.1690%" y="47.50"></text></g><g><title>predicates_of (67,620 samples, 0.13%)</title><rect x="37.8982%" y="85" width="0.1280%" height="15" fill="rgb(240,68,47)"/><text x="38.1482%" y="95.50"></text></g><g><title>predicates_defined_on (61,400 samples, 0.12%)</title><rect x="37.9100%" y="69" width="0.1162%" height="15" fill="rgb(210,16,53)"/><text x="38.1600%" y="79.50"></text></g><g><title>is_copy_raw (173,892 samples, 0.33%)</title><rect x="37.7503%" y="117" width="0.3291%" height="15" fill="rgb(235,124,12)"/><text x="38.0003%" y="127.50"></text></g><g><title>evaluate_obligation (160,922 samples, 0.30%)</title><rect x="37.7748%" y="101" width="0.3045%" height="15" fill="rgb(224,169,11)"/><text x="38.0248%" y="111.50"></text></g><g><title>method_autoderef_steps (98,071 samples, 0.19%)</title><rect x="38.1073%" y="117" width="0.1856%" height="15" fill="rgb(250,166,2)"/><text x="38.3573%" y="127.50"></text></g><g><title>explicit_predicates_of (65,002 samples, 0.12%)</title><rect x="38.4068%" y="85" width="0.1230%" height="15" fill="rgb(242,216,29)"/><text x="38.6568%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (57,422 samples, 0.11%)</title><rect x="38.4212%" y="69" width="0.1087%" height="15" fill="rgb(230,116,27)"/><text x="38.6712%" y="79.50"></text></g><g><title>predicates_of (134,323 samples, 0.25%)</title><rect x="38.3050%" y="117" width="0.2542%" height="15" fill="rgb(228,99,48)"/><text x="38.5550%" y="127.50"></text></g><g><title>predicates_defined_on (103,852 samples, 0.20%)</title><rect x="38.3626%" y="101" width="0.1965%" height="15" fill="rgb(253,11,6)"/><text x="38.6126%" y="111.50"></text></g><g><title>typeck (3,673,531 samples, 6.95%)</title><rect x="31.8216%" y="133" width="6.9522%" height="15" fill="rgb(247,143,39)"/><text x="32.0716%" y="143.50">typeck</text></g><g><title>item_bodies_checking (4,191,916 samples, 7.93%)</title><rect x="30.8434%" y="181" width="7.9332%" height="15" fill="rgb(236,97,10)"/><text x="31.0934%" y="191.50">item_bodies..</text></g><g><title>typeck_item_bodies (4,190,026 samples, 7.93%)</title><rect x="30.8470%" y="165" width="7.9296%" height="15" fill="rgb(233,208,19)"/><text x="31.0970%" y="175.50">typeck_item..</text></g><g><title>typeck (4,182,316 samples, 7.92%)</title><rect x="30.8616%" y="149" width="7.9150%" height="15" fill="rgb(216,164,2)"/><text x="31.1116%" y="159.50">typeck</text></g><g><title>item_types_checking (4,398,859 samples, 8.32%)</title><rect x="38.7766%" y="181" width="8.3249%" height="15" fill="rgb(220,129,5)"/><text x="39.0266%" y="191.50">item_types_c..</text></g><g><title>check_mod_item_types (4,395,779 samples, 8.32%)</title><rect x="38.7824%" y="165" width="8.3190%" height="15" fill="rgb(242,17,10)"/><text x="39.0324%" y="175.50">check_mod_it..</text></g><g><title>typeck (4,306,258 samples, 8.15%)</title><rect x="38.9518%" y="149" width="8.1496%" height="15" fill="rgb(242,107,0)"/><text x="39.2018%" y="159.50">typeck</text></g><g><title>late_bound_vars_map (61,621 samples, 0.12%)</title><rect x="47.3838%" y="133" width="0.1166%" height="15" fill="rgb(251,28,31)"/><text x="47.6338%" y="143.50"></text></g><g><title>fn_sig (128,711 samples, 0.24%)</title><rect x="47.2947%" y="149" width="0.2436%" height="15" fill="rgb(233,223,10)"/><text x="47.5447%" y="159.50"></text></g><g><title>is_late_bound_map (149,122 samples, 0.28%)</title><rect x="47.6354%" y="133" width="0.2822%" height="15" fill="rgb(215,21,27)"/><text x="47.8854%" y="143.50"></text></g><g><title>resolve_lifetimes (146,902 samples, 0.28%)</title><rect x="47.6396%" y="117" width="0.2780%" height="15" fill="rgb(232,23,21)"/><text x="47.8896%" y="127.50"></text></g><g><title>lint_levels (116,972 samples, 0.22%)</title><rect x="47.6963%" y="101" width="0.2214%" height="15" fill="rgb(244,5,23)"/><text x="47.9463%" y="111.50"></text></g><g><title>generics_of (228,524 samples, 0.43%)</title><rect x="47.5383%" y="149" width="0.4325%" height="15" fill="rgb(226,81,46)"/><text x="47.7883%" y="159.50"></text></g><g><title>predicates_of (76,580 samples, 0.14%)</title><rect x="47.9961%" y="149" width="0.1449%" height="15" fill="rgb(247,70,30)"/><text x="48.2461%" y="159.50"></text></g><g><title>predicates_defined_on (67,660 samples, 0.13%)</title><rect x="48.0130%" y="133" width="0.1280%" height="15" fill="rgb(212,68,19)"/><text x="48.2630%" y="143.50"></text></g><g><title>type_collecting (638,167 samples, 1.21%)</title><rect x="47.1046%" y="181" width="1.2077%" height="15" fill="rgb(240,187,13)"/><text x="47.3546%" y="191.50"></text></g><g><title>collect_mod_item_types (627,167 samples, 1.19%)</title><rect x="47.1254%" y="165" width="1.1869%" height="15" fill="rgb(223,113,26)"/><text x="47.3754%" y="175.50"></text></g><g><title>check_impl_item_well_formed (120,342 samples, 0.23%)</title><rect x="48.3943%" y="165" width="0.2277%" height="15" fill="rgb(206,192,2)"/><text x="48.6443%" y="175.50"></text></g><g><title>evaluate_obligation (109,921 samples, 0.21%)</title><rect x="49.1935%" y="149" width="0.2080%" height="15" fill="rgb(241,108,4)"/><text x="49.4435%" y="159.50"></text></g><g><title>implied_outlives_bounds (59,251 samples, 0.11%)</title><rect x="49.4029%" y="149" width="0.1121%" height="15" fill="rgb(247,173,49)"/><text x="49.6529%" y="159.50"></text></g><g><title>param_env (131,541 samples, 0.25%)</title><rect x="49.5150%" y="149" width="0.2489%" height="15" fill="rgb(224,114,35)"/><text x="49.7650%" y="159.50"></text></g><g><title>region_scope_tree (202,793 samples, 0.38%)</title><rect x="49.7970%" y="149" width="0.3838%" height="15" fill="rgb(245,159,27)"/><text x="50.0470%" y="159.50"></text></g><g><title>check_item_well_formed (824,118 samples, 1.56%)</title><rect x="48.6221%" y="165" width="1.5596%" height="15" fill="rgb(245,172,44)"/><text x="48.8721%" y="175.50"></text></g><g><title>evaluate_obligation (78,681 samples, 0.15%)</title><rect x="50.4306%" y="149" width="0.1489%" height="15" fill="rgb(236,23,11)"/><text x="50.6806%" y="159.50"></text></g><g><title>analysis (26,172,630 samples, 49.53%)</title><rect x="1.1203%" y="213" width="49.5318%" height="15" fill="rgb(205,117,38)"/><text x="1.3703%" y="223.50">analysis</text></g><g><title>type_check_crate (10,619,558 samples, 20.10%)</title><rect x="30.5545%" y="197" width="20.0975%" height="15" fill="rgb(237,72,25)"/><text x="30.8045%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,235,514 samples, 2.34%)</title><rect x="48.3138%" y="181" width="2.3382%" height="15" fill="rgb(244,70,9)"/><text x="48.5638%" y="191.50">w..</text></g><g><title>check_trait_item_well_formed (248,523 samples, 0.47%)</title><rect x="50.1817%" y="165" width="0.4703%" height="15" fill="rgb(217,125,39)"/><text x="50.4317%" y="175.50"></text></g><g><title>codegen_crate (277,143 samples, 0.52%)</title><rect x="50.6740%" y="213" width="0.5245%" height="15" fill="rgb(235,36,10)"/><text x="50.9240%" y="223.50"></text></g><g><title>AST_validation (130,861 samples, 0.25%)</title><rect x="51.5888%" y="197" width="0.2477%" height="15" fill="rgb(251,123,47)"/><text x="51.8388%" y="207.50"></text></g><g><title>complete_gated_feature_checking (76,861 samples, 0.15%)</title><rect x="51.8365%" y="197" width="0.1455%" height="15" fill="rgb(221,13,13)"/><text x="52.0865%" y="207.50"></text></g><g><title>crate_injection (93,991 samples, 0.18%)</title><rect x="51.9820%" y="197" width="0.1779%" height="15" fill="rgb(238,131,9)"/><text x="52.2320%" y="207.50"></text></g><g><title>metadata_register_crate (214,144 samples, 0.41%)</title><rect x="81.2006%" y="165" width="0.4053%" height="15" fill="rgb(211,50,8)"/><text x="81.4506%" y="175.50"></text></g><g><title>macro_expand_crate (15,975,407 samples, 30.23%)</title><rect x="52.1598%" y="197" width="30.2335%" height="15" fill="rgb(245,182,24)"/><text x="52.4098%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (15,960,927 samples, 30.21%)</title><rect x="52.1872%" y="181" width="30.2061%" height="15" fill="rgb(242,14,37)"/><text x="52.4372%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (416,075 samples, 0.79%)</title><rect x="81.6059%" y="165" width="0.7874%" height="15" fill="rgb(246,228,12)"/><text x="81.8559%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (123,521 samples, 0.23%)</title><rect x="82.4003%" y="197" width="0.2338%" height="15" fill="rgb(213,55,15)"/><text x="82.6503%" y="207.50"></text></g><g><title>finalize_imports (171,131 samples, 0.32%)</title><rect x="82.6477%" y="181" width="0.3239%" height="15" fill="rgb(209,9,3)"/><text x="82.8977%" y="191.50"></text></g><g><title>late_resolve_crate (492,445 samples, 0.93%)</title><rect x="82.9956%" y="181" width="0.9320%" height="15" fill="rgb(230,59,30)"/><text x="83.2456%" y="191.50"></text></g><g><title>resolve_check_unused (54,001 samples, 0.10%)</title><rect x="83.9472%" y="181" width="0.1022%" height="15" fill="rgb(209,121,21)"/><text x="84.1972%" y="191.50"></text></g><g><title>configure_and_expand (17,406,263 samples, 32.94%)</title><rect x="51.1985%" y="213" width="32.9414%" height="15" fill="rgb(220,109,13)"/><text x="51.4485%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (795,678 samples, 1.51%)</title><rect x="82.6341%" y="197" width="1.5058%" height="15" fill="rgb(232,18,1)"/><text x="82.8841%" y="207.50"></text></g><g><title>drop_ast (148,372 samples, 0.28%)</title><rect x="84.1399%" y="213" width="0.2808%" height="15" fill="rgb(215,41,42)"/><text x="84.3899%" y="223.50"></text></g><g><title>early_lint_checks (459,515 samples, 0.87%)</title><rect x="84.4479%" y="213" width="0.8696%" height="15" fill="rgb(224,123,36)"/><text x="84.6979%" y="223.50"></text></g><g><title>free_global_ctxt (1,288,435 samples, 2.44%)</title><rect x="85.3175%" y="213" width="2.4384%" height="15" fill="rgb(240,125,3)"/><text x="85.5675%" y="223.50">fr..</text></g><g><title>crate_hash (60,371 samples, 0.11%)</title><rect x="91.7109%" y="197" width="0.1143%" height="15" fill="rgb(205,98,50)"/><text x="91.9609%" y="207.50"></text></g><g><title>generate_crate_metadata (2,206,005 samples, 4.17%)</title><rect x="87.7559%" y="213" width="4.1749%" height="15" fill="rgb(205,185,37)"/><text x="88.0059%" y="223.50">gener..</text></g><g><title>hir_lowering (2,211,485 samples, 4.19%)</title><rect x="91.9308%" y="213" width="4.1852%" height="15" fill="rgb(238,207,15)"/><text x="92.1808%" y="223.50">hir_l..</text></g><g><title>parse_crate (897,980 samples, 1.70%)</title><rect x="96.1850%" y="213" width="1.6994%" height="15" fill="rgb(213,199,42)"/><text x="96.4350%" y="223.50"></text></g><g><title>prepare_outputs (254,663 samples, 0.48%)</title><rect x="97.9001%" y="213" width="0.4820%" height="15" fill="rgb(235,201,11)"/><text x="98.1501%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (372,924 samples, 0.71%)</title><rect x="98.3820%" y="213" width="0.7058%" height="15" fill="rgb(207,46,11)"/><text x="98.6320%" y="223.50"></text></g><g><title>setup_global_ctxt (93,661 samples, 0.18%)</title><rect x="99.1066%" y="213" width="0.1773%" height="15" fill="rgb(241,35,35)"/><text x="99.3566%" y="223.50"></text></g><g><title>all (52,840,076 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (52,840,076 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (378,434 samples, 0.72%)</title><rect x="99.2838%" y="213" width="0.7162%" height="15" fill="rgb(219,102,11)"/><text x="99.5338%" y="223.50"></text></g></svg></svg>