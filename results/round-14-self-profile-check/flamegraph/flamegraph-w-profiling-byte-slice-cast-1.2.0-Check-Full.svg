<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (292,845 samples, 0.11%)</title><rect x="13.8544%" y="133" width="0.1106%" height="15" fill="rgb(227,0,7)"/><text x="14.1044%" y="143.50"></text></g><g><title>is_copy_raw (780,688 samples, 0.29%)</title><rect x="18.6520%" y="69" width="0.2948%" height="15" fill="rgb(217,0,24)"/><text x="18.9020%" y="79.50"></text></g><g><title>evaluate_obligation (610,945 samples, 0.23%)</title><rect x="18.7161%" y="53" width="0.2307%" height="15" fill="rgb(221,193,54)"/><text x="18.9661%" y="63.50"></text></g><g><title>needs_drop_raw (717,877 samples, 0.27%)</title><rect x="18.9483%" y="69" width="0.2711%" height="15" fill="rgb(248,212,6)"/><text x="19.1983%" y="79.50"></text></g><g><title>is_copy_raw (615,067 samples, 0.23%)</title><rect x="18.9871%" y="53" width="0.2323%" height="15" fill="rgb(208,68,35)"/><text x="19.2371%" y="63.50"></text></g><g><title>evaluate_obligation (559,767 samples, 0.21%)</title><rect x="19.0080%" y="37" width="0.2114%" height="15" fill="rgb(232,128,0)"/><text x="19.2580%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (307,655 samples, 0.12%)</title><rect x="19.4101%" y="53" width="0.1162%" height="15" fill="rgb(207,160,47)"/><text x="19.6601%" y="63.50"></text></g><g><title>resolve_instance (881,050 samples, 0.33%)</title><rect x="19.2194%" y="69" width="0.3327%" height="15" fill="rgb(228,23,34)"/><text x="19.4694%" y="79.50"></text></g><g><title>thir_body (2,931,411 samples, 1.11%)</title><rect x="19.5676%" y="69" width="1.1069%" height="15" fill="rgb(218,30,26)"/><text x="19.8176%" y="79.50"></text></g><g><title>mir_const (14,957,598 samples, 5.65%)</title><rect x="15.0364%" y="117" width="5.6482%" height="15" fill="rgb(220,122,19)"/><text x="15.2864%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (13,130,332 samples, 4.96%)</title><rect x="15.7264%" y="101" width="4.9582%" height="15" fill="rgb(250,228,42)"/><text x="15.9764%" y="111.50">unsafe..</text></g><g><title>mir_built (11,822,963 samples, 4.46%)</title><rect x="16.2201%" y="85" width="4.4645%" height="15" fill="rgb(240,193,28)"/><text x="16.4701%" y="95.50">mir_b..</text></g><g><title>thir_body (506,183 samples, 0.19%)</title><rect x="22.0943%" y="53" width="0.1911%" height="15" fill="rgb(216,20,37)"/><text x="22.3443%" y="63.50"></text></g><g><title>mir_promoted (22,078,116 samples, 8.34%)</title><rect x="13.9650%" y="133" width="8.3370%" height="15" fill="rgb(206,188,39)"/><text x="14.2150%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (4,283,161 samples, 1.62%)</title><rect x="20.6846%" y="117" width="1.6174%" height="15" fill="rgb(217,207,13)"/><text x="20.9346%" y="127.50"></text></g><g><title>mir_const (3,526,957 samples, 1.33%)</title><rect x="20.9701%" y="101" width="1.3318%" height="15" fill="rgb(231,73,38)"/><text x="21.2201%" y="111.50"></text></g><g><title>unsafety_check_result (2,436,884 samples, 0.92%)</title><rect x="21.3818%" y="85" width="0.9202%" height="15" fill="rgb(225,20,46)"/><text x="21.6318%" y="95.50"></text></g><g><title>mir_built (2,105,330 samples, 0.79%)</title><rect x="21.5070%" y="69" width="0.7950%" height="15" fill="rgb(210,31,41)"/><text x="21.7570%" y="79.50"></text></g><g><title>type_op_prove_predicate (7,597,110 samples, 2.87%)</title><rect x="22.4834%" y="133" width="2.8688%" height="15" fill="rgb(221,200,47)"/><text x="22.7334%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (65,693,856 samples, 24.81%)</title><rect x="0.5509%" y="165" width="24.8068%" height="15" fill="rgb(226,26,5)"/><text x="0.8009%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (65,178,910 samples, 24.61%)</title><rect x="0.7453%" y="149" width="24.6124%" height="15" fill="rgb(249,33,26)"/><text x="0.9953%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,232,915 samples, 0.84%)</title><rect x="25.3577%" y="165" width="0.8432%" height="15" fill="rgb(235,183,28)"/><text x="25.6077%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,939,861 samples, 0.73%)</title><rect x="25.4684%" y="149" width="0.7325%" height="15" fill="rgb(221,5,38)"/><text x="25.7184%" y="159.50"></text></g><g><title>hir_module_items (374,624 samples, 0.14%)</title><rect x="26.2009%" y="165" width="0.1415%" height="15" fill="rgb(247,18,42)"/><text x="26.4509%" y="175.50"></text></g><g><title>should_inherit_track_caller (288,553 samples, 0.11%)</title><rect x="26.6228%" y="117" width="0.1090%" height="15" fill="rgb(241,131,45)"/><text x="26.8728%" y="127.50"></text></g><g><title>codegen_fn_attrs (532,217 samples, 0.20%)</title><rect x="26.5368%" y="133" width="0.2010%" height="15" fill="rgb(249,31,29)"/><text x="26.7868%" y="143.50"></text></g><g><title>check_mod_attrs (1,028,521 samples, 0.39%)</title><rect x="26.3494%" y="149" width="0.3884%" height="15" fill="rgb(225,111,53)"/><text x="26.5994%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (554,686 samples, 0.21%)</title><rect x="26.8859%" y="149" width="0.2095%" height="15" fill="rgb(238,160,17)"/><text x="27.1359%" y="159.50"></text></g><g><title>misc_checking_1 (2,057,643 samples, 0.78%)</title><rect x="26.3426%" y="165" width="0.7770%" height="15" fill="rgb(214,148,48)"/><text x="26.5926%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,060,382 samples, 0.40%)</title><rect x="27.1202%" y="149" width="0.4004%" height="15" fill="rgb(232,36,49)"/><text x="27.3702%" y="159.50"></text></g><g><title>check_mod_liveness (865,900 samples, 0.33%)</title><rect x="27.1936%" y="133" width="0.3270%" height="15" fill="rgb(209,103,24)"/><text x="27.4436%" y="143.50"></text></g><g><title>misc_checking_2 (2,309,596 samples, 0.87%)</title><rect x="27.1196%" y="165" width="0.8721%" height="15" fill="rgb(229,88,8)"/><text x="27.3696%" y="175.50"></text></g><g><title>match_checking (1,247,643 samples, 0.47%)</title><rect x="27.5206%" y="149" width="0.4711%" height="15" fill="rgb(213,181,19)"/><text x="27.7706%" y="159.50"></text></g><g><title>check_match (1,125,741 samples, 0.43%)</title><rect x="27.5666%" y="133" width="0.4251%" height="15" fill="rgb(254,191,54)"/><text x="27.8166%" y="143.50"></text></g><g><title>check_private_in_public (370,904 samples, 0.14%)</title><rect x="27.9959%" y="149" width="0.1401%" height="15" fill="rgb(241,83,37)"/><text x="28.2459%" y="159.50"></text></g><g><title>death_checking (741,068 samples, 0.28%)</title><rect x="28.1360%" y="149" width="0.2798%" height="15" fill="rgb(233,36,39)"/><text x="28.3860%" y="159.50"></text></g><g><title>crate_lints (2,594,729 samples, 0.98%)</title><rect x="28.4164%" y="133" width="0.9798%" height="15" fill="rgb(226,3,54)"/><text x="28.6664%" y="143.50"></text></g><g><title>type_of (1,152,362 samples, 0.44%)</title><rect x="28.9611%" y="117" width="0.4351%" height="15" fill="rgb(245,192,40)"/><text x="29.2111%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (919,480 samples, 0.35%)</title><rect x="29.0490%" y="101" width="0.3472%" height="15" fill="rgb(238,167,29)"/><text x="29.2990%" y="111.50"></text></g><g><title>lint_checking (3,832,523 samples, 1.45%)</title><rect x="28.4158%" y="149" width="1.4472%" height="15" fill="rgb(232,182,51)"/><text x="28.6658%" y="159.50"></text></g><g><title>module_lints (1,236,114 samples, 0.47%)</title><rect x="29.3962%" y="133" width="0.4668%" height="15" fill="rgb(231,60,39)"/><text x="29.6462%" y="143.50"></text></g><g><title>lint_mod (1,232,814 samples, 0.47%)</title><rect x="29.3975%" y="117" width="0.4655%" height="15" fill="rgb(208,69,12)"/><text x="29.6475%" y="127.50"></text></g><g><title>privacy_access_levels (625,846 samples, 0.24%)</title><rect x="29.8630%" y="149" width="0.2363%" height="15" fill="rgb(235,93,37)"/><text x="30.1130%" y="159.50"></text></g><g><title>privacy_checking_modules (2,018,942 samples, 0.76%)</title><rect x="30.0993%" y="149" width="0.7624%" height="15" fill="rgb(213,116,39)"/><text x="30.3493%" y="159.50"></text></g><g><title>check_mod_privacy (2,017,162 samples, 0.76%)</title><rect x="30.1000%" y="133" width="0.7617%" height="15" fill="rgb(222,207,29)"/><text x="30.3500%" y="143.50"></text></g><g><title>misc_checking_3 (7,625,034 samples, 2.88%)</title><rect x="27.9917%" y="165" width="2.8793%" height="15" fill="rgb(206,96,30)"/><text x="28.2417%" y="175.50">mi..</text></g><g><title>impl_parent (1,973,840 samples, 0.75%)</title><rect x="32.5654%" y="101" width="0.7453%" height="15" fill="rgb(218,138,4)"/><text x="32.8154%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,196,546 samples, 0.45%)</title><rect x="32.8589%" y="85" width="0.4518%" height="15" fill="rgb(250,191,14)"/><text x="33.1089%" y="95.50"></text></g><g><title>impl_trait_ref (4,727,593 samples, 1.79%)</title><rect x="33.3107%" y="101" width="1.7852%" height="15" fill="rgb(239,60,40)"/><text x="33.5607%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,906,406 samples, 1.48%)</title><rect x="33.6208%" y="85" width="1.4751%" height="15" fill="rgb(206,27,48)"/><text x="33.8708%" y="95.50"></text></g><g><title>coherent_trait (11,644,398 samples, 4.40%)</title><rect x="30.9475%" y="133" width="4.3971%" height="15" fill="rgb(225,35,8)"/><text x="31.1975%" y="143.50">coher..</text></g><g><title>specialization_graph_of (11,611,238 samples, 4.38%)</title><rect x="30.9600%" y="117" width="4.3846%" height="15" fill="rgb(250,213,24)"/><text x="31.2100%" y="127.50">speci..</text></g><g><title>trait_impls_of (656,265 samples, 0.25%)</title><rect x="35.0967%" y="101" width="0.2478%" height="15" fill="rgb(247,123,22)"/><text x="35.3467%" y="111.50"></text></g><g><title>coherence_checking (11,757,350 samples, 4.44%)</title><rect x="30.9397%" y="149" width="4.4397%" height="15" fill="rgb(231,138,38)"/><text x="31.1897%" y="159.50">coher..</text></g><g><title>dropck_outlives (558,647 samples, 0.21%)</title><rect x="60.8467%" y="101" width="0.2110%" height="15" fill="rgb(231,145,46)"/><text x="61.0967%" y="111.50"></text></g><g><title>evaluate_obligation (4,523,133 samples, 1.71%)</title><rect x="61.0576%" y="101" width="1.7080%" height="15" fill="rgb(251,118,11)"/><text x="61.3076%" y="111.50"></text></g><g><title>method_autoderef_steps (1,326,817 samples, 0.50%)</title><rect x="62.9386%" y="101" width="0.5010%" height="15" fill="rgb(217,147,25)"/><text x="63.1886%" y="111.50"></text></g><g><title>evaluate_obligation (638,858 samples, 0.24%)</title><rect x="63.1983%" y="85" width="0.2412%" height="15" fill="rgb(247,81,37)"/><text x="63.4483%" y="95.50"></text></g><g><title>explicit_predicates_of (464,995 samples, 0.18%)</title><rect x="63.9747%" y="53" width="0.1756%" height="15" fill="rgb(209,12,38)"/><text x="64.2247%" y="63.50"></text></g><g><title>param_env (1,692,704 samples, 0.64%)</title><rect x="63.5253%" y="101" width="0.6392%" height="15" fill="rgb(227,1,9)"/><text x="63.7753%" y="111.50"></text></g><g><title>predicates_of (796,307 samples, 0.30%)</title><rect x="63.8637%" y="85" width="0.3007%" height="15" fill="rgb(248,47,43)"/><text x="64.1137%" y="95.50"></text></g><g><title>predicates_defined_on (676,346 samples, 0.26%)</title><rect x="63.9090%" y="69" width="0.2554%" height="15" fill="rgb(221,10,30)"/><text x="64.1590%" y="79.50"></text></g><g><title>predicates_of (356,864 samples, 0.13%)</title><rect x="64.1858%" y="101" width="0.1348%" height="15" fill="rgb(210,229,1)"/><text x="64.4358%" y="111.50"></text></g><g><title>predicates_defined_on (281,983 samples, 0.11%)</title><rect x="64.2140%" y="85" width="0.1065%" height="15" fill="rgb(222,148,37)"/><text x="64.4640%" y="95.50"></text></g><g><title>region_scope_tree (325,751 samples, 0.12%)</title><rect x="64.3205%" y="101" width="0.1230%" height="15" fill="rgb(234,67,33)"/><text x="64.5705%" y="111.50"></text></g><g><title>item_bodies_checking (77,117,622 samples, 29.12%)</title><rect x="35.4054%" y="149" width="29.1206%" height="15" fill="rgb(247,98,35)"/><text x="35.6554%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (77,114,362 samples, 29.12%)</title><rect x="35.4066%" y="133" width="29.1194%" height="15" fill="rgb(247,138,52)"/><text x="35.6566%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (76,732,148 samples, 28.98%)</title><rect x="35.5510%" y="117" width="28.9750%" height="15" fill="rgb(213,79,30)"/><text x="35.8010%" y="127.50">typeck</text></g><g><title>adt_destructor (439,385 samples, 0.17%)</title><rect x="65.5672%" y="117" width="0.1659%" height="15" fill="rgb(246,177,23)"/><text x="65.8172%" y="127.50"></text></g><g><title>coherent_trait (436,285 samples, 0.16%)</title><rect x="65.5683%" y="101" width="0.1647%" height="15" fill="rgb(230,62,27)"/><text x="65.8183%" y="111.50"></text></g><g><title>specialization_graph_of (433,885 samples, 0.16%)</title><rect x="65.5692%" y="85" width="0.1638%" height="15" fill="rgb(216,154,8)"/><text x="65.8192%" y="95.50"></text></g><g><title>item_types_checking (3,454,708 samples, 1.30%)</title><rect x="64.5260%" y="149" width="1.3045%" height="15" fill="rgb(244,35,45)"/><text x="64.7760%" y="159.50"></text></g><g><title>check_mod_item_types (3,452,138 samples, 1.30%)</title><rect x="64.5270%" y="133" width="1.3036%" height="15" fill="rgb(251,115,12)"/><text x="64.7770%" y="143.50"></text></g><g><title>fn_sig (460,004 samples, 0.17%)</title><rect x="66.0570%" y="117" width="0.1737%" height="15" fill="rgb(240,54,50)"/><text x="66.3070%" y="127.50"></text></g><g><title>named_region_map (1,547,208 samples, 0.58%)</title><rect x="66.3308%" y="101" width="0.5842%" height="15" fill="rgb(233,84,52)"/><text x="66.5808%" y="111.50"></text></g><g><title>resolve_lifetimes (1,473,794 samples, 0.56%)</title><rect x="66.3586%" y="85" width="0.5565%" height="15" fill="rgb(207,117,47)"/><text x="66.6086%" y="95.50"></text></g><g><title>lint_levels (579,777 samples, 0.22%)</title><rect x="66.6962%" y="69" width="0.2189%" height="15" fill="rgb(249,43,39)"/><text x="66.9462%" y="79.50"></text></g><g><title>generics_of (1,850,360 samples, 0.70%)</title><rect x="66.2307%" y="117" width="0.6987%" height="15" fill="rgb(209,38,44)"/><text x="66.4807%" y="127.50"></text></g><g><title>explicit_predicates_of (595,496 samples, 0.22%)</title><rect x="67.0882%" y="85" width="0.2249%" height="15" fill="rgb(236,212,23)"/><text x="67.3382%" y="95.50"></text></g><g><title>predicates_of (1,030,382 samples, 0.39%)</title><rect x="66.9685%" y="117" width="0.3891%" height="15" fill="rgb(242,79,21)"/><text x="67.2185%" y="127.50"></text></g><g><title>predicates_defined_on (909,457 samples, 0.34%)</title><rect x="67.0141%" y="101" width="0.3434%" height="15" fill="rgb(211,96,35)"/><text x="67.2641%" y="111.50"></text></g><g><title>type_collecting (4,460,669 samples, 1.68%)</title><rect x="65.8309%" y="149" width="1.6844%" height="15" fill="rgb(253,215,40)"/><text x="66.0809%" y="159.50"></text></g><g><title>collect_mod_item_types (4,453,479 samples, 1.68%)</title><rect x="65.8336%" y="133" width="1.6817%" height="15" fill="rgb(211,81,21)"/><text x="66.0836%" y="143.50"></text></g><g><title>type_of (354,394 samples, 0.13%)</title><rect x="67.3815%" y="117" width="0.1338%" height="15" fill="rgb(208,190,38)"/><text x="67.6315%" y="127.50"></text></g><g><title>evaluate_obligation (634,999 samples, 0.24%)</title><rect x="69.7460%" y="117" width="0.2398%" height="15" fill="rgb(235,213,38)"/><text x="69.9960%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,257,482 samples, 0.47%)</title><rect x="69.9858%" y="117" width="0.4748%" height="15" fill="rgb(237,122,38)"/><text x="70.2358%" y="127.50"></text></g><g><title>param_env (780,287 samples, 0.29%)</title><rect x="70.4606%" y="117" width="0.2946%" height="15" fill="rgb(244,218,35)"/><text x="70.7106%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,005,357 samples, 3.40%)</title><rect x="67.7512%" y="133" width="3.4005%" height="15" fill="rgb(240,68,47)"/><text x="68.0012%" y="143.50">che..</text></g><g><title>region_scope_tree (1,029,824 samples, 0.39%)</title><rect x="70.7628%" y="117" width="0.3889%" height="15" fill="rgb(210,16,53)"/><text x="71.0128%" y="127.50"></text></g><g><title>evaluate_obligation (606,179 samples, 0.23%)</title><rect x="72.5189%" y="117" width="0.2289%" height="15" fill="rgb(235,124,12)"/><text x="72.7689%" y="127.50"></text></g><g><title>param_env (639,247 samples, 0.24%)</title><rect x="72.8165%" y="117" width="0.2414%" height="15" fill="rgb(224,169,11)"/><text x="73.0665%" y="127.50"></text></g><g><title>check_item_well_formed (5,346,729 samples, 2.02%)</title><rect x="71.1517%" y="133" width="2.0190%" height="15" fill="rgb(250,166,2)"/><text x="71.4017%" y="143.50">c..</text></g><g><title>analysis (193,597,879 samples, 73.11%)</title><rect x="0.3153%" y="181" width="73.1051%" height="15" fill="rgb(242,216,29)"/><text x="0.5653%" y="191.50">analysis</text></g><g><title>type_check_crate (112,679,844 samples, 42.55%)</title><rect x="30.8710%" y="165" width="42.5494%" height="15" fill="rgb(230,116,27)"/><text x="31.1210%" y="175.50">type_check_crate</text></g><g><title>wf_checking (15,613,272 samples, 5.90%)</title><rect x="67.5246%" y="149" width="5.8958%" height="15" fill="rgb(228,99,48)"/><text x="67.7746%" y="159.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (661,198 samples, 0.25%)</title><rect x="73.1707%" y="133" width="0.2497%" height="15" fill="rgb(253,11,6)"/><text x="73.4207%" y="143.50"></text></g><g><title>codegen_crate (354,944 samples, 0.13%)</title><rect x="73.4246%" y="181" width="0.1340%" height="15" fill="rgb(247,143,39)"/><text x="73.6746%" y="191.50"></text></g><g><title>AST_validation (706,448 samples, 0.27%)</title><rect x="73.6286%" y="165" width="0.2668%" height="15" fill="rgb(236,97,10)"/><text x="73.8786%" y="175.50"></text></g><g><title>macro_expand_crate (33,898,364 samples, 12.80%)</title><rect x="73.9644%" y="165" width="12.8005%" height="15" fill="rgb(233,208,19)"/><text x="74.2144%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (33,884,064 samples, 12.80%)</title><rect x="73.9698%" y="149" width="12.7951%" height="15" fill="rgb(216,164,2)"/><text x="74.2198%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,335,396 samples, 0.88%)</title><rect x="85.8829%" y="133" width="0.8819%" height="15" fill="rgb(220,129,5)"/><text x="86.1329%" y="143.50"></text></g><g><title>metadata_register_crate (875,289 samples, 0.33%)</title><rect x="86.4343%" y="117" width="0.3305%" height="15" fill="rgb(242,17,10)"/><text x="86.6843%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (417,994 samples, 0.16%)</title><rect x="86.7664%" y="165" width="0.1578%" height="15" fill="rgb(242,107,0)"/><text x="87.0164%" y="175.50"></text></g><g><title>finalize_macro_resolutions (275,703 samples, 0.10%)</title><rect x="86.9417%" y="149" width="0.1041%" height="15" fill="rgb(251,28,31)"/><text x="87.1917%" y="159.50"></text></g><g><title>late_resolve_crate (8,454,333 samples, 3.19%)</title><rect x="87.0458%" y="149" width="3.1925%" height="15" fill="rgb(233,223,10)"/><text x="87.2958%" y="159.50">lat..</text></g><g><title>configure_and_expand (44,356,310 samples, 16.75%)</title><rect x="73.5587%" y="181" width="16.7495%" height="15" fill="rgb(215,21,27)"/><text x="73.8087%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (8,961,309 samples, 3.38%)</title><rect x="86.9243%" y="165" width="3.3839%" height="15" fill="rgb(232,23,21)"/><text x="87.1743%" y="175.50">res..</text></g><g><title>drop_ast (488,225 samples, 0.18%)</title><rect x="90.3082%" y="181" width="0.1844%" height="15" fill="rgb(244,5,23)"/><text x="90.5582%" y="191.50"></text></g><g><title>early_lint_checks (1,126,653 samples, 0.43%)</title><rect x="90.4986%" y="181" width="0.4254%" height="15" fill="rgb(226,81,46)"/><text x="90.7486%" y="191.50"></text></g><g><title>free_global_ctxt (4,501,321 samples, 1.70%)</title><rect x="90.9240%" y="181" width="1.6998%" height="15" fill="rgb(247,70,30)"/><text x="91.1740%" y="191.50"></text></g><g><title>mir_for_ctfe (844,341 samples, 0.32%)</title><rect x="93.6026%" y="165" width="0.3188%" height="15" fill="rgb(212,68,19)"/><text x="93.8526%" y="175.50"></text></g><g><title>generate_crate_metadata (3,655,090 samples, 1.38%)</title><rect x="92.6238%" y="181" width="1.3802%" height="15" fill="rgb(240,187,13)"/><text x="92.8738%" y="191.50"></text></g><g><title>hir_lowering (8,233,171 samples, 3.11%)</title><rect x="94.0040%" y="181" width="3.1090%" height="15" fill="rgb(223,113,26)"/><text x="94.2540%" y="191.50">hir..</text></g><g><title>parse_crate (5,829,825 samples, 2.20%)</title><rect x="97.1347%" y="181" width="2.2014%" height="15" fill="rgb(206,192,2)"/><text x="97.3847%" y="191.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,051,901 samples, 0.40%)</title><rect x="99.4143%" y="181" width="0.3972%" height="15" fill="rgb(241,108,4)"/><text x="99.6643%" y="191.50"></text></g><g><title>all (264,821,477 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (264,821,477 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (398,665 samples, 0.15%)</title><rect x="99.8495%" y="181" width="0.1505%" height="15" fill="rgb(245,159,27)"/><text x="100.0995%" y="191.50"></text></g></svg></svg>