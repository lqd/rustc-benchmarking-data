<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fulfill_obligation (4,777,393 samples, 0.12%)</title><rect x="11.4300%" y="37" width="0.1240%" height="15" fill="rgb(227,0,7)"/><text x="11.6800%" y="47.50"></text></g><g><title>resolve_instance (10,015,420 samples, 0.26%)</title><rect x="11.3296%" y="53" width="0.2599%" height="15" fill="rgb(217,0,24)"/><text x="11.5796%" y="63.50"></text></g><g><title>thir_body (29,788,228 samples, 0.77%)</title><rect x="11.6165%" y="53" width="0.7730%" height="15" fill="rgb(221,193,54)"/><text x="11.8665%" y="63.50"></text></g><g><title>mir_const (160,651,160 samples, 4.17%)</title><rect x="8.2359%" y="101" width="4.1690%" height="15" fill="rgb(248,212,6)"/><text x="8.4859%" y="111.50">mir_c..</text></g><g><title>unsafety_check_result (136,251,121 samples, 3.54%)</title><rect x="8.8691%" y="85" width="3.5358%" height="15" fill="rgb(208,68,35)"/><text x="9.1191%" y="95.50">uns..</text></g><g><title>mir_built (121,587,819 samples, 3.16%)</title><rect x="9.2496%" y="69" width="3.1553%" height="15" fill="rgb(232,128,0)"/><text x="9.4996%" y="79.50">mir..</text></g><g><title>mir_const_qualif (5,086,227 samples, 0.13%)</title><rect x="12.4049%" y="101" width="0.1320%" height="15" fill="rgb(207,160,47)"/><text x="12.6549%" y="111.50"></text></g><g><title>mir_promoted (187,915,775 samples, 4.88%)</title><rect x="7.6604%" y="117" width="4.8765%" height="15" fill="rgb(228,23,34)"/><text x="7.9104%" y="127.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (6,220,149 samples, 0.16%)</title><rect x="12.5370%" y="117" width="0.1614%" height="15" fill="rgb(218,30,26)"/><text x="12.7870%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (10,837,936 samples, 0.28%)</title><rect x="12.6984%" y="117" width="0.2813%" height="15" fill="rgb(220,122,19)"/><text x="12.9484%" y="127.50"></text></g><g><title>type_op_normalize_ty (9,232,376 samples, 0.24%)</title><rect x="12.9877%" y="117" width="0.2396%" height="15" fill="rgb(250,228,42)"/><text x="13.2377%" y="127.50"></text></g><g><title>normalize_projection_ty (5,695,779 samples, 0.15%)</title><rect x="13.0795%" y="101" width="0.1478%" height="15" fill="rgb(240,193,28)"/><text x="13.3295%" y="111.50"></text></g><g><title>type_op_prove_predicate (7,061,012 samples, 0.18%)</title><rect x="13.2273%" y="117" width="0.1832%" height="15" fill="rgb(216,20,37)"/><text x="13.4773%" y="127.50"></text></g><g><title>MIR_borrow_checking (503,589,195 samples, 13.07%)</title><rect x="0.3425%" y="149" width="13.0685%" height="15" fill="rgb(206,188,39)"/><text x="0.5925%" y="159.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (498,106,438 samples, 12.93%)</title><rect x="0.4848%" y="133" width="12.9262%" height="15" fill="rgb(217,207,13)"/><text x="0.7348%" y="143.50">mir_borrowck</text></g><g><title>hir_module_items (7,419,902 samples, 0.19%)</title><rect x="13.5061%" y="149" width="0.1926%" height="15" fill="rgb(231,73,38)"/><text x="13.7561%" y="159.50"></text></g><g><title>codegen_fn_attrs (8,178,143 samples, 0.21%)</title><rect x="13.9995%" y="117" width="0.2122%" height="15" fill="rgb(225,20,46)"/><text x="14.2495%" y="127.50"></text></g><g><title>check_mod_attrs (35,212,533 samples, 0.91%)</title><rect x="13.6999%" y="133" width="0.9138%" height="15" fill="rgb(210,31,41)"/><text x="13.9499%" y="143.50"></text></g><g><title>lint_levels (15,455,771 samples, 0.40%)</title><rect x="14.2126%" y="117" width="0.4011%" height="15" fill="rgb(221,200,47)"/><text x="14.4626%" y="127.50"></text></g><g><title>check_mod_const_bodies (6,497,222 samples, 0.17%)</title><rect x="14.6137%" y="133" width="0.1686%" height="15" fill="rgb(226,26,5)"/><text x="14.8637%" y="143.50"></text></g><g><title>lookup_deprecation_entry (4,397,058 samples, 0.11%)</title><rect x="15.0147%" y="117" width="0.1141%" height="15" fill="rgb(249,33,26)"/><text x="15.2647%" y="127.50"></text></g><g><title>stability_index (4,237,007 samples, 0.11%)</title><rect x="15.0189%" y="101" width="0.1100%" height="15" fill="rgb(235,183,28)"/><text x="15.2689%" y="111.50"></text></g><g><title>check_mod_unstable_api_usage (9,228,582 samples, 0.24%)</title><rect x="14.8949%" y="133" width="0.2395%" height="15" fill="rgb(221,5,38)"/><text x="15.1449%" y="143.50"></text></g><g><title>misc_checking_1 (57,248,286 samples, 1.49%)</title><rect x="13.6986%" y="149" width="1.4856%" height="15" fill="rgb(247,18,42)"/><text x="13.9486%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (12,745,812 samples, 0.33%)</title><rect x="15.1844%" y="133" width="0.3308%" height="15" fill="rgb(241,131,45)"/><text x="15.4344%" y="143.50"></text></g><g><title>check_mod_liveness (8,938,050 samples, 0.23%)</title><rect x="15.2832%" y="117" width="0.2319%" height="15" fill="rgb(249,31,29)"/><text x="15.5332%" y="127.50"></text></g><g><title>misc_checking_2 (28,461,976 samples, 0.74%)</title><rect x="15.1843%" y="149" width="0.7386%" height="15" fill="rgb(225,111,53)"/><text x="15.4343%" y="159.50"></text></g><g><title>match_checking (15,711,474 samples, 0.41%)</title><rect x="15.5151%" y="133" width="0.4077%" height="15" fill="rgb(238,160,17)"/><text x="15.7651%" y="143.50"></text></g><g><title>check_match (14,054,811 samples, 0.36%)</title><rect x="15.5581%" y="117" width="0.3647%" height="15" fill="rgb(214,148,48)"/><text x="15.8081%" y="127.50"></text></g><g><title>check_private_in_public (11,271,495 samples, 0.29%)</title><rect x="15.9235%" y="133" width="0.2925%" height="15" fill="rgb(232,36,49)"/><text x="16.1735%" y="143.50"></text></g><g><title>death_checking (14,369,639 samples, 0.37%)</title><rect x="16.2160%" y="133" width="0.3729%" height="15" fill="rgb(209,103,24)"/><text x="16.4660%" y="143.50"></text></g><g><title>param_env (5,658,544 samples, 0.15%)</title><rect x="17.2052%" y="101" width="0.1468%" height="15" fill="rgb(229,88,8)"/><text x="17.4552%" y="111.50"></text></g><g><title>crate_lints (30,751,752 samples, 0.80%)</title><rect x="16.5890%" y="117" width="0.7980%" height="15" fill="rgb(213,181,19)"/><text x="16.8390%" y="127.50"></text></g><g><title>lint_checking (46,042,772 samples, 1.19%)</title><rect x="16.5889%" y="133" width="1.1948%" height="15" fill="rgb(254,191,54)"/><text x="16.8389%" y="143.50"></text></g><g><title>module_lints (15,287,280 samples, 0.40%)</title><rect x="17.3870%" y="117" width="0.3967%" height="15" fill="rgb(241,83,37)"/><text x="17.6370%" y="127.50"></text></g><g><title>lint_mod (15,271,310 samples, 0.40%)</title><rect x="17.3874%" y="101" width="0.3963%" height="15" fill="rgb(233,36,39)"/><text x="17.6374%" y="111.50"></text></g><g><title>privacy_access_levels (13,649,202 samples, 0.35%)</title><rect x="17.7837%" y="133" width="0.3542%" height="15" fill="rgb(226,3,54)"/><text x="18.0337%" y="143.50"></text></g><g><title>privacy_checking_modules (29,292,826 samples, 0.76%)</title><rect x="18.1379%" y="133" width="0.7602%" height="15" fill="rgb(245,192,40)"/><text x="18.3879%" y="143.50"></text></g><g><title>check_mod_privacy (29,279,986 samples, 0.76%)</title><rect x="18.1383%" y="117" width="0.7598%" height="15" fill="rgb(238,167,29)"/><text x="18.3883%" y="127.50"></text></g><g><title>misc_checking_3 (115,097,139 samples, 2.99%)</title><rect x="15.9229%" y="149" width="2.9868%" height="15" fill="rgb(232,182,51)"/><text x="16.1729%" y="159.50">mis..</text></g><g><title>impl_parent (4,478,009 samples, 0.12%)</title><rect x="19.8659%" y="85" width="0.1162%" height="15" fill="rgb(231,60,39)"/><text x="20.1159%" y="95.50"></text></g><g><title>impl_trait_ref (10,126,823 samples, 0.26%)</title><rect x="19.9822%" y="85" width="0.2628%" height="15" fill="rgb(208,69,12)"/><text x="20.2322%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,974,855 samples, 0.21%)</title><rect x="20.0380%" y="69" width="0.2070%" height="15" fill="rgb(235,93,37)"/><text x="20.2880%" y="79.50"></text></g><g><title>item_attrs (3,910,396 samples, 0.10%)</title><rect x="20.2450%" y="85" width="0.1015%" height="15" fill="rgb(213,116,39)"/><text x="20.4950%" y="95.50"></text></g><g><title>coherent_trait (55,679,439 samples, 1.44%)</title><rect x="19.0364%" y="117" width="1.4449%" height="15" fill="rgb(222,207,29)"/><text x="19.2864%" y="127.50"></text></g><g><title>specialization_graph_of (55,497,387 samples, 1.44%)</title><rect x="19.0412%" y="101" width="1.4402%" height="15" fill="rgb(206,96,30)"/><text x="19.2912%" y="111.50"></text></g><g><title>coherence_checking (57,680,171 samples, 1.50%)</title><rect x="19.0348%" y="133" width="1.4968%" height="15" fill="rgb(218,138,4)"/><text x="19.2848%" y="143.50"></text></g><g><title>evaluate_obligation (7,728,362 samples, 0.20%)</title><rect x="32.9274%" y="85" width="0.2006%" height="15" fill="rgb(250,191,14)"/><text x="33.1774%" y="95.50"></text></g><g><title>typeck (7,505,062 samples, 0.19%)</title><rect x="33.2860%" y="85" width="0.1948%" height="15" fill="rgb(239,60,40)"/><text x="33.5360%" y="95.50"></text></g><g><title>item_bodies_checking (498,388,997 samples, 12.93%)</title><rect x="20.5766%" y="133" width="12.9335%" height="15" fill="rgb(206,27,48)"/><text x="20.8266%" y="143.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (498,384,617 samples, 12.93%)</title><rect x="20.5767%" y="117" width="12.9334%" height="15" fill="rgb(225,35,8)"/><text x="20.8267%" y="127.50">typeck_item_bodies</text></g><g><title>typeck (493,821,855 samples, 12.81%)</title><rect x="20.6951%" y="101" width="12.8150%" height="15" fill="rgb(250,213,24)"/><text x="20.9451%" y="111.50">typeck</text></g><g><title>type_of (4,236,837 samples, 0.11%)</title><rect x="35.1187%" y="101" width="0.1099%" height="15" fill="rgb(247,123,22)"/><text x="35.3687%" y="111.50"></text></g><g><title>mir_borrowck (4,229,287 samples, 0.11%)</title><rect x="35.1189%" y="85" width="0.1098%" height="15" fill="rgb(231,138,38)"/><text x="35.3689%" y="95.50"></text></g><g><title>item_types_checking (68,309,189 samples, 1.77%)</title><rect x="33.5101%" y="133" width="1.7727%" height="15" fill="rgb(231,145,46)"/><text x="33.7601%" y="143.50">i..</text></g><g><title>check_mod_item_types (68,299,399 samples, 1.77%)</title><rect x="33.5104%" y="117" width="1.7724%" height="15" fill="rgb(251,118,11)"/><text x="33.7604%" y="127.50">c..</text></g><g><title>fn_sig (12,705,556 samples, 0.33%)</title><rect x="35.5329%" y="101" width="0.3297%" height="15" fill="rgb(217,147,25)"/><text x="35.7829%" y="111.50"></text></g><g><title>named_region_map (10,679,157 samples, 0.28%)</title><rect x="36.0407%" y="85" width="0.2771%" height="15" fill="rgb(247,81,37)"/><text x="36.2907%" y="95.50"></text></g><g><title>resolve_lifetimes (9,650,022 samples, 0.25%)</title><rect x="36.0674%" y="69" width="0.2504%" height="15" fill="rgb(209,12,38)"/><text x="36.3174%" y="79.50"></text></g><g><title>generics_of (18,011,235 samples, 0.47%)</title><rect x="35.8627%" y="101" width="0.4674%" height="15" fill="rgb(227,1,9)"/><text x="36.1127%" y="111.50"></text></g><g><title>predicates_of (9,486,518 samples, 0.25%)</title><rect x="36.3592%" y="101" width="0.2462%" height="15" fill="rgb(248,47,43)"/><text x="36.6092%" y="111.50"></text></g><g><title>predicates_defined_on (7,163,093 samples, 0.19%)</title><rect x="36.4195%" y="85" width="0.1859%" height="15" fill="rgb(221,10,30)"/><text x="36.6695%" y="95.50"></text></g><g><title>type_collecting (54,207,183 samples, 1.41%)</title><rect x="35.2843%" y="133" width="1.4067%" height="15" fill="rgb(210,229,1)"/><text x="35.5343%" y="143.50"></text></g><g><title>collect_mod_item_types (54,189,953 samples, 1.41%)</title><rect x="35.2848%" y="117" width="1.4063%" height="15" fill="rgb(222,148,37)"/><text x="35.5348%" y="127.50"></text></g><g><title>param_env (8,758,028 samples, 0.23%)</title><rect x="38.2301%" y="101" width="0.2273%" height="15" fill="rgb(234,67,33)"/><text x="38.4801%" y="111.50"></text></g><g><title>region_scope_tree (10,412,814 samples, 0.27%)</title><rect x="38.4604%" y="101" width="0.2702%" height="15" fill="rgb(247,98,35)"/><text x="38.7104%" y="111.50"></text></g><g><title>check_impl_item_well_formed (70,804,970 samples, 1.84%)</title><rect x="36.8933%" y="117" width="1.8374%" height="15" fill="rgb(247,138,52)"/><text x="37.1433%" y="127.50">c..</text></g><g><title>evaluate_obligation (12,131,252 samples, 0.31%)</title><rect x="40.6103%" y="101" width="0.3148%" height="15" fill="rgb(213,79,30)"/><text x="40.8603%" y="111.50"></text></g><g><title>param_env (9,945,926 samples, 0.26%)</title><rect x="40.9777%" y="101" width="0.2581%" height="15" fill="rgb(246,177,23)"/><text x="41.2277%" y="111.50"></text></g><g><title>region_scope_tree (5,226,727 samples, 0.14%)</title><rect x="41.2477%" y="101" width="0.1356%" height="15" fill="rgb(230,62,27)"/><text x="41.4977%" y="111.50"></text></g><g><title>analysis (1,590,922,995 samples, 41.29%)</title><rect x="0.1253%" y="165" width="41.2854%" height="15" fill="rgb(216,154,8)"/><text x="0.3753%" y="175.50">analysis</text></g><g><title>type_check_crate (867,072,703 samples, 22.50%)</title><rect x="18.9097%" y="149" width="22.5011%" height="15" fill="rgb(244,35,45)"/><text x="19.1597%" y="159.50">type_check_crate</text></g><g><title>wf_checking (181,324,704 samples, 4.71%)</title><rect x="36.7053%" y="133" width="4.7055%" height="15" fill="rgb(251,115,12)"/><text x="36.9553%" y="143.50">wf_ch..</text></g><g><title>check_item_well_formed (103,276,861 samples, 2.68%)</title><rect x="38.7307%" y="117" width="2.6801%" height="15" fill="rgb(240,54,50)"/><text x="38.9807%" y="127.50">ch..</text></g><g><title>AST_validation (16,515,614 samples, 0.43%)</title><rect x="41.4279%" y="149" width="0.4286%" height="15" fill="rgb(233,84,52)"/><text x="41.6779%" y="159.50"></text></g><g><title>complete_gated_feature_checking (5,308,660 samples, 0.14%)</title><rect x="41.8565%" y="149" width="0.1378%" height="15" fill="rgb(207,117,47)"/><text x="42.1065%" y="159.50"></text></g><g><title>macro_expand_crate (1,896,321,768 samples, 49.21%)</title><rect x="41.9966%" y="149" width="49.2107%" height="15" fill="rgb(249,43,39)"/><text x="42.2466%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (1,896,288,788 samples, 49.21%)</title><rect x="41.9974%" y="133" width="49.2099%" height="15" fill="rgb(209,38,44)"/><text x="42.2474%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (8,481,264 samples, 0.22%)</title><rect x="90.9872%" y="117" width="0.2201%" height="15" fill="rgb(236,212,23)"/><text x="91.2372%" y="127.50"></text></g><g><title>metadata_register_crate (6,332,102 samples, 0.16%)</title><rect x="91.0430%" y="101" width="0.1643%" height="15" fill="rgb(242,79,21)"/><text x="91.2930%" y="111.50"></text></g><g><title>finalize_macro_resolutions (5,310,688 samples, 0.14%)</title><rect x="91.2809%" y="133" width="0.1378%" height="15" fill="rgb(211,96,35)"/><text x="91.5309%" y="143.50"></text></g><g><title>late_resolve_crate (59,362,040 samples, 1.54%)</title><rect x="91.4187%" y="133" width="1.5405%" height="15" fill="rgb(253,215,40)"/><text x="91.6687%" y="143.50"></text></g><g><title>resolve_check_unused (4,137,406 samples, 0.11%)</title><rect x="92.9621%" y="133" width="0.1074%" height="15" fill="rgb(211,81,21)"/><text x="93.2121%" y="143.50"></text></g><g><title>configure_and_expand (1,994,059,504 samples, 51.75%)</title><rect x="41.4218%" y="165" width="51.7471%" height="15" fill="rgb(208,190,38)"/><text x="41.6718%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (74,326,945 samples, 1.93%)</title><rect x="91.2401%" y="149" width="1.9288%" height="15" fill="rgb(235,213,38)"/><text x="91.4901%" y="159.50">r..</text></g><g><title>drop_ast (21,135,865 samples, 0.55%)</title><rect x="93.1689%" y="165" width="0.5485%" height="15" fill="rgb(237,122,38)"/><text x="93.4189%" y="175.50"></text></g><g><title>early_lint_checks (22,422,069 samples, 0.58%)</title><rect x="93.7181%" y="165" width="0.5819%" height="15" fill="rgb(244,218,35)"/><text x="93.9681%" y="175.50"></text></g><g><title>free_global_ctxt (19,217,613 samples, 0.50%)</title><rect x="94.3000%" y="165" width="0.4987%" height="15" fill="rgb(240,68,47)"/><text x="94.5500%" y="175.50"></text></g><g><title>generate_crate_metadata (40,487,720 samples, 1.05%)</title><rect x="94.7987%" y="165" width="1.0507%" height="15" fill="rgb(210,16,53)"/><text x="95.0487%" y="175.50"></text></g><g><title>hir_lowering (116,762,777 samples, 3.03%)</title><rect x="95.8494%" y="165" width="3.0301%" height="15" fill="rgb(235,124,12)"/><text x="96.0994%" y="175.50">hir..</text></g><g><title>parse_crate (33,254,169 samples, 0.86%)</title><rect x="98.9044%" y="165" width="0.8630%" height="15" fill="rgb(224,169,11)"/><text x="99.1544%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (6,349,701 samples, 0.16%)</title><rect x="99.7762%" y="165" width="0.1648%" height="15" fill="rgb(250,166,2)"/><text x="100.0262%" y="175.50"></text></g><g><title>all (3,853,471,750 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (3,853,471,750 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>