<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (11,146,259 samples, 0.43%)</title><rect x="14.3545%" y="85" width="0.4272%" height="15" fill="rgb(227,0,7)"/><text x="14.6045%" y="95.50"></text></g><g><title>evaluate_obligation (9,084,982 samples, 0.35%)</title><rect x="14.4335%" y="69" width="0.3482%" height="15" fill="rgb(217,0,24)"/><text x="14.6835%" y="79.50"></text></g><g><title>needs_drop_raw (14,445,914 samples, 0.55%)</title><rect x="14.2295%" y="101" width="0.5537%" height="15" fill="rgb(221,193,54)"/><text x="14.4795%" y="111.50"></text></g><g><title>resolve_instance (6,365,061 samples, 0.24%)</title><rect x="14.7832%" y="101" width="0.2440%" height="15" fill="rgb(248,212,6)"/><text x="15.0332%" y="111.50"></text></g><g><title>thir_body (23,529,286 samples, 0.90%)</title><rect x="15.0441%" y="101" width="0.9019%" height="15" fill="rgb(208,68,35)"/><text x="15.2941%" y="111.50"></text></g><g><title>mir_const (130,033,707 samples, 4.98%)</title><rect x="10.9724%" y="149" width="4.9841%" height="15" fill="rgb(232,128,0)"/><text x="11.2224%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (114,398,443 samples, 4.38%)</title><rect x="11.5717%" y="133" width="4.3849%" height="15" fill="rgb(207,160,47)"/><text x="11.8217%" y="143.50">unsaf..</text></g><g><title>mir_built (104,157,194 samples, 3.99%)</title><rect x="11.9642%" y="117" width="3.9923%" height="15" fill="rgb(228,23,34)"/><text x="12.2142%" y="127.50">mir_..</text></g><g><title>mir_promoted (148,425,517 samples, 5.69%)</title><rect x="10.3268%" y="165" width="5.6891%" height="15" fill="rgb(218,30,26)"/><text x="10.5768%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (9,269,460 samples, 0.36%)</title><rect x="16.0162%" y="165" width="0.3553%" height="15" fill="rgb(220,122,19)"/><text x="16.2662%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (6,442,289 samples, 0.25%)</title><rect x="16.3715%" y="165" width="0.2469%" height="15" fill="rgb(250,228,42)"/><text x="16.6215%" y="175.50"></text></g><g><title>normalize_projection_ty (4,288,119 samples, 0.16%)</title><rect x="16.4541%" y="149" width="0.1644%" height="15" fill="rgb(240,193,28)"/><text x="16.7041%" y="159.50"></text></g><g><title>type_op_normalize_predicate (4,851,544 samples, 0.19%)</title><rect x="16.6185%" y="165" width="0.1860%" height="15" fill="rgb(216,20,37)"/><text x="16.8685%" y="175.50"></text></g><g><title>normalize_projection_ty (3,459,081 samples, 0.13%)</title><rect x="16.6718%" y="149" width="0.1326%" height="15" fill="rgb(206,188,39)"/><text x="16.9218%" y="159.50"></text></g><g><title>type_op_prove_predicate (35,313,336 samples, 1.35%)</title><rect x="16.8248%" y="165" width="1.3535%" height="15" fill="rgb(217,207,13)"/><text x="17.0748%" y="175.50"></text></g><g><title>MIR_borrow_checking (464,192,379 samples, 17.79%)</title><rect x="0.3866%" y="197" width="17.7923%" height="15" fill="rgb(231,73,38)"/><text x="0.6366%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (461,852,995 samples, 17.70%)</title><rect x="0.4763%" y="181" width="17.7027%" height="15" fill="rgb(225,20,46)"/><text x="0.7263%" y="191.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (2,857,519 samples, 0.11%)</title><rect x="18.4951%" y="165" width="0.1095%" height="15" fill="rgb(210,31,41)"/><text x="18.7451%" y="175.50"></text></g><g><title>check_mod_attrs (7,300,082 samples, 0.28%)</title><rect x="18.3248%" y="181" width="0.2798%" height="15" fill="rgb(221,200,47)"/><text x="18.5748%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (4,085,366 samples, 0.16%)</title><rect x="18.7370%" y="181" width="0.1566%" height="15" fill="rgb(226,26,5)"/><text x="18.9870%" y="191.50"></text></g><g><title>misc_checking_1 (15,188,209 samples, 0.58%)</title><rect x="18.3225%" y="197" width="0.5822%" height="15" fill="rgb(249,33,26)"/><text x="18.5725%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (9,877,661 samples, 0.38%)</title><rect x="18.9048%" y="181" width="0.3786%" height="15" fill="rgb(235,183,28)"/><text x="19.1548%" y="191.50"></text></g><g><title>check_mod_liveness (8,435,243 samples, 0.32%)</title><rect x="18.9601%" y="165" width="0.3233%" height="15" fill="rgb(221,5,38)"/><text x="19.2101%" y="175.50"></text></g><g><title>misc_checking_2 (20,556,209 samples, 0.79%)</title><rect x="18.9046%" y="197" width="0.7879%" height="15" fill="rgb(247,18,42)"/><text x="19.1546%" y="207.50"></text></g><g><title>match_checking (10,674,668 samples, 0.41%)</title><rect x="19.2834%" y="181" width="0.4092%" height="15" fill="rgb(241,131,45)"/><text x="19.5334%" y="191.50"></text></g><g><title>check_match (10,027,629 samples, 0.38%)</title><rect x="19.3082%" y="165" width="0.3844%" height="15" fill="rgb(249,31,29)"/><text x="19.5582%" y="175.50"></text></g><g><title>check_private_in_public (3,572,960 samples, 0.14%)</title><rect x="19.6940%" y="181" width="0.1370%" height="15" fill="rgb(225,111,53)"/><text x="19.9440%" y="191.50"></text></g><g><title>death_checking (5,474,812 samples, 0.21%)</title><rect x="19.8309%" y="181" width="0.2098%" height="15" fill="rgb(238,160,17)"/><text x="20.0809%" y="191.50"></text></g><g><title>crate_lints (12,480,499 samples, 0.48%)</title><rect x="20.0409%" y="165" width="0.4784%" height="15" fill="rgb(214,148,48)"/><text x="20.2909%" y="175.50"></text></g><g><title>lint_checking (22,355,369 samples, 0.86%)</title><rect x="20.0407%" y="181" width="0.8569%" height="15" fill="rgb(232,36,49)"/><text x="20.2907%" y="191.50"></text></g><g><title>module_lints (9,871,100 samples, 0.38%)</title><rect x="20.5193%" y="165" width="0.3784%" height="15" fill="rgb(209,103,24)"/><text x="20.7693%" y="175.50"></text></g><g><title>lint_mod (9,853,590 samples, 0.38%)</title><rect x="20.5199%" y="149" width="0.3777%" height="15" fill="rgb(229,88,8)"/><text x="20.7699%" y="159.50"></text></g><g><title>privacy_access_levels (6,749,685 samples, 0.26%)</title><rect x="20.8976%" y="181" width="0.2587%" height="15" fill="rgb(213,181,19)"/><text x="21.1476%" y="191.50"></text></g><g><title>privacy_checking_modules (17,539,876 samples, 0.67%)</title><rect x="21.1563%" y="181" width="0.6723%" height="15" fill="rgb(254,191,54)"/><text x="21.4063%" y="191.50"></text></g><g><title>check_mod_privacy (17,525,216 samples, 0.67%)</title><rect x="21.1569%" y="165" width="0.6717%" height="15" fill="rgb(241,83,37)"/><text x="21.4069%" y="175.50"></text></g><g><title>misc_checking_3 (55,926,396 samples, 2.14%)</title><rect x="19.6926%" y="197" width="2.1436%" height="15" fill="rgb(233,36,39)"/><text x="19.9426%" y="207.50">m..</text></g><g><title>impl_parent (3,158,505 samples, 0.12%)</title><rect x="22.2133%" y="133" width="0.1211%" height="15" fill="rgb(226,3,54)"/><text x="22.4633%" y="143.50"></text></g><g><title>impl_trait_ref (6,989,102 samples, 0.27%)</title><rect x="22.3343%" y="133" width="0.2679%" height="15" fill="rgb(245,192,40)"/><text x="22.5843%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,518,768 samples, 0.21%)</title><rect x="22.3907%" y="117" width="0.2115%" height="15" fill="rgb(238,167,29)"/><text x="22.6407%" y="127.50"></text></g><g><title>coherent_trait (20,363,368 samples, 0.78%)</title><rect x="21.8704%" y="165" width="0.7805%" height="15" fill="rgb(232,182,51)"/><text x="22.1204%" y="175.50"></text></g><g><title>specialization_graph_of (19,828,692 samples, 0.76%)</title><rect x="21.8909%" y="149" width="0.7600%" height="15" fill="rgb(231,60,39)"/><text x="22.1409%" y="159.50"></text></g><g><title>coherence_checking (20,889,944 samples, 0.80%)</title><rect x="21.8692%" y="181" width="0.8007%" height="15" fill="rgb(208,69,12)"/><text x="22.1192%" y="191.50"></text></g><g><title>dropck_outlives (3,989,099 samples, 0.15%)</title><rect x="40.4497%" y="133" width="0.1529%" height="15" fill="rgb(235,93,37)"/><text x="40.6997%" y="143.50"></text></g><g><title>evaluate_obligation (22,762,185 samples, 0.87%)</title><rect x="40.6030%" y="133" width="0.8725%" height="15" fill="rgb(213,116,39)"/><text x="40.8530%" y="143.50"></text></g><g><title>method_autoderef_steps (5,547,817 samples, 0.21%)</title><rect x="41.5624%" y="133" width="0.2126%" height="15" fill="rgb(222,207,29)"/><text x="41.8124%" y="143.50"></text></g><g><title>evaluate_obligation (5,700,932 samples, 0.22%)</title><rect x="43.4738%" y="117" width="0.2185%" height="15" fill="rgb(206,96,30)"/><text x="43.7238%" y="127.50"></text></g><g><title>typeck (50,910,598 samples, 1.95%)</title><rect x="41.8859%" y="133" width="1.9514%" height="15" fill="rgb(218,138,4)"/><text x="42.1359%" y="143.50">t..</text></g><g><title>item_bodies_checking (552,409,696 samples, 21.17%)</title><rect x="22.6847%" y="181" width="21.1737%" height="15" fill="rgb(250,191,14)"/><text x="22.9347%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (552,404,906 samples, 21.17%)</title><rect x="22.6849%" y="165" width="21.1735%" height="15" fill="rgb(239,60,40)"/><text x="22.9349%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (550,574,250 samples, 21.10%)</title><rect x="22.7550%" y="149" width="21.1033%" height="15" fill="rgb(206,27,48)"/><text x="23.0050%" y="159.50">typeck</text></g><g><title>type_op_prove_predicate (2,613,823 samples, 0.10%)</title><rect x="46.1604%" y="53" width="0.1002%" height="15" fill="rgb(225,35,8)"/><text x="46.4104%" y="63.50"></text></g><g><title>mir_borrowck (8,981,430 samples, 0.34%)</title><rect x="45.9170%" y="69" width="0.3443%" height="15" fill="rgb(250,213,24)"/><text x="46.1670%" y="79.50"></text></g><g><title>mir_borrowck (41,188,011 samples, 1.58%)</title><rect x="45.0104%" y="85" width="1.5787%" height="15" fill="rgb(247,123,22)"/><text x="45.2604%" y="95.50"></text></g><g><title>type_op_prove_predicate (5,365,013 samples, 0.21%)</title><rect x="46.3834%" y="69" width="0.2056%" height="15" fill="rgb(231,138,38)"/><text x="46.6334%" y="79.50"></text></g><g><title>type_op_normalize_predicate (4,273,526 samples, 0.16%)</title><rect x="46.7033%" y="85" width="0.1638%" height="15" fill="rgb(231,145,46)"/><text x="46.9533%" y="95.50"></text></g><g><title>normalize_projection_ty (2,759,342 samples, 0.11%)</title><rect x="46.7613%" y="69" width="0.1058%" height="15" fill="rgb(251,118,11)"/><text x="47.0113%" y="79.50"></text></g><g><title>mir_borrowck (72,222,807 samples, 2.77%)</title><rect x="44.5198%" y="101" width="2.7683%" height="15" fill="rgb(217,147,25)"/><text x="44.7698%" y="111.50">mi..</text></g><g><title>type_op_prove_predicate (10,340,606 samples, 0.40%)</title><rect x="46.8918%" y="85" width="0.3964%" height="15" fill="rgb(247,81,37)"/><text x="47.1418%" y="95.50"></text></g><g><title>type_op_normalize_predicate (8,848,828 samples, 0.34%)</title><rect x="47.3074%" y="101" width="0.3392%" height="15" fill="rgb(209,12,38)"/><text x="47.5574%" y="111.50"></text></g><g><title>normalize_projection_ty (7,174,860 samples, 0.28%)</title><rect x="47.3716%" y="85" width="0.2750%" height="15" fill="rgb(227,1,9)"/><text x="47.6216%" y="95.50"></text></g><g><title>type_op_prove_predicate (24,790,783 samples, 0.95%)</title><rect x="47.6612%" y="101" width="0.9502%" height="15" fill="rgb(248,47,43)"/><text x="47.9112%" y="111.50"></text></g><g><title>mir_borrowck (111,705,069 samples, 4.28%)</title><rect x="44.3301%" y="117" width="4.2816%" height="15" fill="rgb(221,10,30)"/><text x="44.5801%" y="127.50">mir_b..</text></g><g><title>evaluate_obligation (17,702,394 samples, 0.68%)</title><rect x="83.4979%" y="37" width="0.6785%" height="15" fill="rgb(210,229,1)"/><text x="83.7479%" y="47.50"></text></g><g><title>mir_built (933,129,081 samples, 35.77%)</title><rect x="48.6261%" y="69" width="35.7665%" height="15" fill="rgb(222,148,37)"/><text x="48.8761%" y="79.50">mir_built</text></g><g><title>typeck (931,999,429 samples, 35.72%)</title><rect x="48.6694%" y="53" width="35.7232%" height="15" fill="rgb(234,67,33)"/><text x="48.9194%" y="63.50">typeck</text></g><g><title>mir_built (2,617,639 samples, 0.10%)</title><rect x="84.4283%" y="37" width="0.1003%" height="15" fill="rgb(247,98,35)"/><text x="84.6783%" y="47.50"></text></g><g><title>mir_const (939,390,052 samples, 36.01%)</title><rect x="48.6157%" y="101" width="36.0065%" height="15" fill="rgb(247,138,52)"/><text x="48.8657%" y="111.50">mir_const</text></g><g><title>unsafety_check_result (939,230,490 samples, 36.00%)</title><rect x="48.6218%" y="85" width="36.0004%" height="15" fill="rgb(213,79,30)"/><text x="48.8718%" y="95.50">unsafety_check_result</text></g><g><title>unsafety_check_result (5,990,408 samples, 0.23%)</title><rect x="84.3926%" y="69" width="0.2296%" height="15" fill="rgb(246,177,23)"/><text x="84.6426%" y="79.50"></text></g><g><title>unsafety_check_result (5,089,127 samples, 0.20%)</title><rect x="84.4271%" y="53" width="0.1951%" height="15" fill="rgb(230,62,27)"/><text x="84.6771%" y="63.50"></text></g><g><title>mir_promoted (939,501,763 samples, 36.01%)</title><rect x="48.6117%" y="117" width="36.0108%" height="15" fill="rgb(216,154,8)"/><text x="48.8617%" y="127.50">mir_promoted</text></g><g><title>type_of (1,053,468,496 samples, 40.38%)</title><rect x="44.2664%" y="149" width="40.3791%" height="15" fill="rgb(244,35,45)"/><text x="44.5164%" y="159.50">type_of</text></g><g><title>mir_borrowck (1,053,397,586 samples, 40.38%)</title><rect x="44.2691%" y="133" width="40.3764%" height="15" fill="rgb(251,115,12)"/><text x="44.5191%" y="143.50">mir_borrowck</text></g><g><title>item_types_checking (1,064,152,657 samples, 40.79%)</title><rect x="43.8584%" y="181" width="40.7886%" height="15" fill="rgb(240,54,50)"/><text x="44.1084%" y="191.50">item_types_checking</text></g><g><title>check_mod_item_types (1,064,131,577 samples, 40.79%)</title><rect x="43.8592%" y="165" width="40.7878%" height="15" fill="rgb(233,84,52)"/><text x="44.1092%" y="175.50">check_mod_item_types</text></g><g><title>fn_sig (3,297,183 samples, 0.13%)</title><rect x="84.7820%" y="149" width="0.1264%" height="15" fill="rgb(207,117,47)"/><text x="85.0320%" y="159.50"></text></g><g><title>is_late_bound_map (3,542,719 samples, 0.14%)</title><rect x="84.9674%" y="133" width="0.1358%" height="15" fill="rgb(249,43,39)"/><text x="85.2174%" y="143.50"></text></g><g><title>resolve_lifetimes (3,335,077 samples, 0.13%)</title><rect x="84.9754%" y="117" width="0.1278%" height="15" fill="rgb(209,38,44)"/><text x="85.2254%" y="127.50"></text></g><g><title>named_region_map (9,449,659 samples, 0.36%)</title><rect x="85.1032%" y="133" width="0.3622%" height="15" fill="rgb(236,212,23)"/><text x="85.3532%" y="143.50"></text></g><g><title>resolve_lifetimes (9,266,188 samples, 0.36%)</title><rect x="85.1103%" y="117" width="0.3552%" height="15" fill="rgb(242,79,21)"/><text x="85.3603%" y="127.50"></text></g><g><title>lint_levels (7,253,541 samples, 0.28%)</title><rect x="85.1874%" y="101" width="0.2780%" height="15" fill="rgb(211,96,35)"/><text x="85.4374%" y="111.50"></text></g><g><title>generics_of (14,673,472 samples, 0.56%)</title><rect x="84.9084%" y="149" width="0.5624%" height="15" fill="rgb(253,215,40)"/><text x="85.1584%" y="159.50"></text></g><g><title>explicit_predicates_of (4,144,113 samples, 0.16%)</title><rect x="85.5394%" y="117" width="0.1588%" height="15" fill="rgb(211,81,21)"/><text x="85.7894%" y="127.50"></text></g><g><title>predicates_of (7,037,777 samples, 0.27%)</title><rect x="85.4810%" y="149" width="0.2698%" height="15" fill="rgb(208,190,38)"/><text x="85.7310%" y="159.50"></text></g><g><title>predicates_defined_on (6,437,769 samples, 0.25%)</title><rect x="85.5040%" y="133" width="0.2468%" height="15" fill="rgb(235,213,38)"/><text x="85.7540%" y="143.50"></text></g><g><title>type_collecting (29,967,445 samples, 1.15%)</title><rect x="84.6474%" y="181" width="1.1486%" height="15" fill="rgb(237,122,38)"/><text x="84.8974%" y="191.50"></text></g><g><title>collect_mod_item_types (29,931,394 samples, 1.15%)</title><rect x="84.6488%" y="165" width="1.1473%" height="15" fill="rgb(244,218,35)"/><text x="84.8988%" y="175.50"></text></g><g><title>evaluate_obligation (5,729,183 samples, 0.22%)</title><rect x="87.0144%" y="149" width="0.2196%" height="15" fill="rgb(240,68,47)"/><text x="87.2644%" y="159.50"></text></g><g><title>implied_outlives_bounds (3,151,900 samples, 0.12%)</title><rect x="87.2347%" y="149" width="0.1208%" height="15" fill="rgb(210,16,53)"/><text x="87.4847%" y="159.50"></text></g><g><title>param_env (4,929,489 samples, 0.19%)</title><rect x="87.3803%" y="149" width="0.1889%" height="15" fill="rgb(235,124,12)"/><text x="87.6303%" y="159.50"></text></g><g><title>region_scope_tree (5,937,889 samples, 0.23%)</title><rect x="87.5714%" y="149" width="0.2276%" height="15" fill="rgb(224,169,11)"/><text x="87.8214%" y="159.50"></text></g><g><title>check_impl_item_well_formed (49,560,276 samples, 1.90%)</title><rect x="85.9014%" y="165" width="1.8996%" height="15" fill="rgb(250,166,2)"/><text x="86.1514%" y="175.50">c..</text></g><g><title>check_item_well_formed (21,268,274 samples, 0.82%)</title><rect x="87.8010%" y="165" width="0.8152%" height="15" fill="rgb(242,216,29)"/><text x="88.0510%" y="175.50"></text></g><g><title>analysis (2,321,008,527 samples, 88.96%)</title><rect x="0.2426%" y="213" width="88.9635%" height="15" fill="rgb(230,116,27)"/><text x="0.4926%" y="223.50">analysis</text></g><g><title>type_check_crate (1,757,642,530 samples, 67.37%)</title><rect x="21.8362%" y="197" width="67.3699%" height="15" fill="rgb(228,99,48)"/><text x="22.0862%" y="207.50">type_check_crate</text></g><g><title>wf_checking (88,855,002 samples, 3.41%)</title><rect x="85.8003%" y="181" width="3.4058%" height="15" fill="rgb(253,11,6)"/><text x="86.0503%" y="191.50">wf_..</text></g><g><title>check_trait_item_well_formed (15,387,972 samples, 0.59%)</title><rect x="88.6162%" y="165" width="0.5898%" height="15" fill="rgb(247,143,39)"/><text x="88.8662%" y="175.50"></text></g><g><title>AST_validation (3,921,964 samples, 0.15%)</title><rect x="89.2315%" y="197" width="0.1503%" height="15" fill="rgb(236,97,10)"/><text x="89.4815%" y="207.50"></text></g><g><title>macro_expand_crate (135,557,075 samples, 5.20%)</title><rect x="89.4571%" y="197" width="5.1959%" height="15" fill="rgb(233,208,19)"/><text x="89.7071%" y="207.50">macro_..</text></g><g><title>expand_crate (135,540,175 samples, 5.20%)</title><rect x="89.4577%" y="181" width="5.1952%" height="15" fill="rgb(216,164,2)"/><text x="89.7077%" y="191.50">expand..</text></g><g><title>late_resolve_crate (25,441,934 samples, 0.98%)</title><rect x="94.7374%" y="181" width="0.9752%" height="15" fill="rgb(220,129,5)"/><text x="94.9874%" y="191.50"></text></g><g><title>configure_and_expand (172,727,861 samples, 6.62%)</title><rect x="89.2237%" y="213" width="6.6206%" height="15" fill="rgb(242,17,10)"/><text x="89.4737%" y="223.50">configure..</text></g><g><title>resolve_crate (30,989,617 samples, 1.19%)</title><rect x="94.6565%" y="197" width="1.1878%" height="15" fill="rgb(242,107,0)"/><text x="94.9065%" y="207.50"></text></g><g><title>drop_ast (5,433,731 samples, 0.21%)</title><rect x="95.8443%" y="213" width="0.2083%" height="15" fill="rgb(251,28,31)"/><text x="96.0943%" y="223.50"></text></g><g><title>early_lint_checks (10,091,243 samples, 0.39%)</title><rect x="96.0537%" y="213" width="0.3868%" height="15" fill="rgb(233,223,10)"/><text x="96.3037%" y="223.50"></text></g><g><title>free_global_ctxt (13,820,445 samples, 0.53%)</title><rect x="96.4405%" y="213" width="0.5297%" height="15" fill="rgb(215,21,27)"/><text x="96.6905%" y="223.50"></text></g><g><title>generate_crate_metadata (17,974,221 samples, 0.69%)</title><rect x="96.9702%" y="213" width="0.6889%" height="15" fill="rgb(232,23,21)"/><text x="97.2202%" y="223.50"></text></g><g><title>hir_lowering (54,996,965 samples, 2.11%)</title><rect x="97.6592%" y="213" width="2.1080%" height="15" fill="rgb(244,5,23)"/><text x="97.9092%" y="223.50">h..</text></g><g><title>self_profile_alloc_query_strings (3,310,667 samples, 0.13%)</title><rect x="99.8188%" y="213" width="0.1269%" height="15" fill="rgb(226,81,46)"/><text x="100.0688%" y="223.50"></text></g><g><title>all (2,608,944,856 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (2,608,944,856 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>