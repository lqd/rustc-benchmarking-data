<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (956,550 samples, 0.12%)</title><rect x="14.3212%" y="165" width="0.1160%" height="15" fill="rgb(227,0,7)"/><text x="14.5712%" y="175.50"></text></g><g><title>param_env (919,178 samples, 0.11%)</title><rect x="16.4193%" y="133" width="0.1114%" height="15" fill="rgb(217,0,24)"/><text x="16.6693%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,007,119 samples, 0.12%)</title><rect x="17.0999%" y="117" width="0.1221%" height="15" fill="rgb(221,193,54)"/><text x="17.3499%" y="127.50"></text></g><g><title>is_copy_raw (5,541,386 samples, 0.67%)</title><rect x="20.7294%" y="85" width="0.6719%" height="15" fill="rgb(248,212,6)"/><text x="20.9794%" y="95.50"></text></g><g><title>evaluate_obligation (4,337,802 samples, 0.53%)</title><rect x="20.8753%" y="69" width="0.5259%" height="15" fill="rgb(208,68,35)"/><text x="21.1253%" y="79.50"></text></g><g><title>needs_drop_raw (7,604,575 samples, 0.92%)</title><rect x="20.5515%" y="101" width="0.9220%" height="15" fill="rgb(232,128,0)"/><text x="20.8015%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,685,223 samples, 0.45%)</title><rect x="21.6952%" y="85" width="0.4468%" height="15" fill="rgb(207,160,47)"/><text x="21.9452%" y="95.50"></text></g><g><title>specialization_graph_of (964,231 samples, 0.12%)</title><rect x="22.2211%" y="85" width="0.1169%" height="15" fill="rgb(228,23,34)"/><text x="22.4711%" y="95.50"></text></g><g><title>resolve_instance (7,439,582 samples, 0.90%)</title><rect x="21.4772%" y="101" width="0.9020%" height="15" fill="rgb(218,30,26)"/><text x="21.7272%" y="111.50"></text></g><g><title>thir_body (9,642,457 samples, 1.17%)</title><rect x="22.4189%" y="101" width="1.1691%" height="15" fill="rgb(220,122,19)"/><text x="22.6689%" y="111.50"></text></g><g><title>mir_const (67,434,796 samples, 8.18%)</title><rect x="15.4486%" y="149" width="8.1760%" height="15" fill="rgb(250,228,42)"/><text x="15.6986%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (58,510,043 samples, 7.09%)</title><rect x="16.5307%" y="133" width="7.0940%" height="15" fill="rgb(240,193,28)"/><text x="16.7807%" y="143.50">unsafety_c..</text></g><g><title>mir_built (52,808,675 samples, 6.40%)</title><rect x="17.2220%" y="117" width="6.4027%" height="15" fill="rgb(216,20,37)"/><text x="17.4720%" y="127.50">mir_built</text></g><g><title>mir_const (1,462,218 samples, 0.18%)</title><rect x="23.8010%" y="133" width="0.1773%" height="15" fill="rgb(206,188,39)"/><text x="24.0510%" y="143.50"></text></g><g><title>unsafety_check_result (1,153,274 samples, 0.14%)</title><rect x="23.8385%" y="117" width="0.1398%" height="15" fill="rgb(217,207,13)"/><text x="24.0885%" y="127.50"></text></g><g><title>mir_built (1,031,264 samples, 0.13%)</title><rect x="23.8533%" y="101" width="0.1250%" height="15" fill="rgb(231,73,38)"/><text x="24.1033%" y="111.50"></text></g><g><title>mir_const_qualif (3,029,774 samples, 0.37%)</title><rect x="23.6247%" y="149" width="0.3673%" height="15" fill="rgb(225,20,46)"/><text x="23.8747%" y="159.50"></text></g><g><title>mir_promoted (78,702,597 samples, 9.54%)</title><rect x="14.4650%" y="165" width="9.5422%" height="15" fill="rgb(210,31,41)"/><text x="14.7150%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,267,373 samples, 0.27%)</title><rect x="24.0084%" y="165" width="0.2749%" height="15" fill="rgb(221,200,47)"/><text x="24.2584%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (2,099,742 samples, 0.25%)</title><rect x="24.2833%" y="165" width="0.2546%" height="15" fill="rgb(226,26,5)"/><text x="24.5333%" y="175.50"></text></g><g><title>normalize_projection_ty (1,306,313 samples, 0.16%)</title><rect x="24.3795%" y="149" width="0.1584%" height="15" fill="rgb(249,33,26)"/><text x="24.6295%" y="159.50"></text></g><g><title>type_op_normalize_predicate (2,819,516 samples, 0.34%)</title><rect x="24.5379%" y="165" width="0.3418%" height="15" fill="rgb(235,183,28)"/><text x="24.7879%" y="175.50"></text></g><g><title>normalize_projection_ty (1,757,079 samples, 0.21%)</title><rect x="24.6667%" y="149" width="0.2130%" height="15" fill="rgb(221,5,38)"/><text x="24.9167%" y="159.50"></text></g><g><title>type_op_prove_predicate (21,876,930 samples, 2.65%)</title><rect x="24.9087%" y="165" width="2.6524%" height="15" fill="rgb(247,18,42)"/><text x="25.1587%" y="175.50">ty..</text></g><g><title>evaluate_obligation (2,040,047 samples, 0.25%)</title><rect x="27.3138%" y="149" width="0.2473%" height="15" fill="rgb(241,131,45)"/><text x="27.5638%" y="159.50"></text></g><g><title>MIR_borrow_checking (223,237,625 samples, 27.07%)</title><rect x="0.4968%" y="197" width="27.0661%" height="15" fill="rgb(249,31,29)"/><text x="0.7468%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (221,601,513 samples, 26.87%)</title><rect x="0.6952%" y="181" width="26.8678%" height="15" fill="rgb(225,111,53)"/><text x="0.9452%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,477,316 samples, 0.18%)</title><rect x="27.5629%" y="197" width="0.1791%" height="15" fill="rgb(238,160,17)"/><text x="27.8129%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (836,148 samples, 0.10%)</title><rect x="27.6407%" y="181" width="0.1014%" height="15" fill="rgb(214,148,48)"/><text x="27.8907%" y="191.50"></text></g><g><title>hir_module_items (1,919,442 samples, 0.23%)</title><rect x="27.7421%" y="197" width="0.2327%" height="15" fill="rgb(232,36,49)"/><text x="27.9921%" y="207.50"></text></g><g><title>should_inherit_track_caller (1,433,812 samples, 0.17%)</title><rect x="28.3442%" y="149" width="0.1738%" height="15" fill="rgb(209,103,24)"/><text x="28.5942%" y="159.50"></text></g><g><title>codegen_fn_attrs (2,265,621 samples, 0.27%)</title><rect x="28.2464%" y="165" width="0.2747%" height="15" fill="rgb(229,88,8)"/><text x="28.4964%" y="175.50"></text></g><g><title>check_mod_attrs (4,375,602 samples, 0.53%)</title><rect x="27.9906%" y="181" width="0.5305%" height="15" fill="rgb(213,181,19)"/><text x="28.2406%" y="191.50"></text></g><g><title>check_mod_const_bodies (1,181,395 samples, 0.14%)</title><rect x="28.5211%" y="181" width="0.1432%" height="15" fill="rgb(254,191,54)"/><text x="28.7711%" y="191.50"></text></g><g><title>lookup_deprecation_entry (1,193,186 samples, 0.14%)</title><rect x="28.9001%" y="165" width="0.1447%" height="15" fill="rgb(241,83,37)"/><text x="29.1501%" y="175.50"></text></g><g><title>stability_index (1,038,692 samples, 0.13%)</title><rect x="28.9188%" y="149" width="0.1259%" height="15" fill="rgb(233,36,39)"/><text x="29.1688%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,454,598 samples, 0.30%)</title><rect x="28.7689%" y="181" width="0.2976%" height="15" fill="rgb(226,3,54)"/><text x="29.0189%" y="191.50"></text></g><g><title>misc_checking_1 (9,399,405 samples, 1.14%)</title><rect x="27.9749%" y="197" width="1.1396%" height="15" fill="rgb(245,192,40)"/><text x="28.2249%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (4,075,195 samples, 0.49%)</title><rect x="29.1149%" y="181" width="0.4941%" height="15" fill="rgb(238,167,29)"/><text x="29.3649%" y="191.50"></text></g><g><title>check_mod_liveness (3,243,463 samples, 0.39%)</title><rect x="29.2157%" y="165" width="0.3932%" height="15" fill="rgb(232,182,51)"/><text x="29.4657%" y="175.50"></text></g><g><title>type_uninhabited_from (861,409 samples, 0.10%)</title><rect x="29.5045%" y="149" width="0.1044%" height="15" fill="rgb(231,60,39)"/><text x="29.7545%" y="159.50"></text></g><g><title>misc_checking_2 (18,393,675 samples, 2.23%)</title><rect x="29.1145%" y="197" width="2.2301%" height="15" fill="rgb(208,69,12)"/><text x="29.3645%" y="207.50">m..</text></g><g><title>match_checking (14,315,319 samples, 1.74%)</title><rect x="29.6089%" y="181" width="1.7356%" height="15" fill="rgb(235,93,37)"/><text x="29.8589%" y="191.50"></text></g><g><title>check_match (13,740,042 samples, 1.67%)</title><rect x="29.6787%" y="165" width="1.6659%" height="15" fill="rgb(213,116,39)"/><text x="29.9287%" y="175.50"></text></g><g><title>visible_parent_map (7,430,312 samples, 0.90%)</title><rect x="30.4437%" y="149" width="0.9009%" height="15" fill="rgb(222,207,29)"/><text x="30.6937%" y="159.50"></text></g><g><title>module_children (6,828,395 samples, 0.83%)</title><rect x="30.5167%" y="133" width="0.8279%" height="15" fill="rgb(206,96,30)"/><text x="30.7667%" y="143.50"></text></g><g><title>metadata_decode_entry_module_children (6,734,975 samples, 0.82%)</title><rect x="30.5280%" y="117" width="0.8166%" height="15" fill="rgb(218,138,4)"/><text x="30.7780%" y="127.50"></text></g><g><title>check_private_in_public (2,153,154 samples, 0.26%)</title><rect x="31.3465%" y="181" width="0.2611%" height="15" fill="rgb(250,191,14)"/><text x="31.5965%" y="191.50"></text></g><g><title>death_checking (3,954,195 samples, 0.48%)</title><rect x="31.6075%" y="181" width="0.4794%" height="15" fill="rgb(239,60,40)"/><text x="31.8575%" y="191.50"></text></g><g><title>param_env (1,845,757 samples, 0.22%)</title><rect x="32.5927%" y="149" width="0.2238%" height="15" fill="rgb(206,27,48)"/><text x="32.8427%" y="159.50"></text></g><g><title>predicates_of (836,671 samples, 0.10%)</title><rect x="32.7151%" y="133" width="0.1014%" height="15" fill="rgb(225,35,8)"/><text x="32.9651%" y="143.50"></text></g><g><title>crate_lints (7,738,466 samples, 0.94%)</title><rect x="32.0873%" y="165" width="0.9382%" height="15" fill="rgb(250,213,24)"/><text x="32.3373%" y="175.50"></text></g><g><title>type_of (1,562,419 samples, 0.19%)</title><rect x="32.8361%" y="149" width="0.1894%" height="15" fill="rgb(247,123,22)"/><text x="33.0861%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,070,884 samples, 0.13%)</title><rect x="32.8957%" y="133" width="0.1298%" height="15" fill="rgb(231,138,38)"/><text x="33.1457%" y="143.50"></text></g><g><title>lint_checking (12,746,052 samples, 1.55%)</title><rect x="32.0869%" y="181" width="1.5454%" height="15" fill="rgb(231,145,46)"/><text x="32.3369%" y="191.50"></text></g><g><title>module_lints (5,004,366 samples, 0.61%)</title><rect x="33.0256%" y="165" width="0.6067%" height="15" fill="rgb(251,118,11)"/><text x="33.2756%" y="175.50"></text></g><g><title>lint_mod (4,953,725 samples, 0.60%)</title><rect x="33.0317%" y="149" width="0.6006%" height="15" fill="rgb(217,147,25)"/><text x="33.2817%" y="159.50"></text></g><g><title>privacy_access_levels (3,912,813 samples, 0.47%)</title><rect x="33.6323%" y="181" width="0.4744%" height="15" fill="rgb(247,81,37)"/><text x="33.8823%" y="191.50"></text></g><g><title>privacy_checking_modules (8,905,148 samples, 1.08%)</title><rect x="34.1067%" y="181" width="1.0797%" height="15" fill="rgb(209,12,38)"/><text x="34.3567%" y="191.50"></text></g><g><title>check_mod_privacy (8,863,708 samples, 1.07%)</title><rect x="34.1118%" y="165" width="1.0747%" height="15" fill="rgb(227,1,9)"/><text x="34.3618%" y="175.50"></text></g><g><title>misc_checking_3 (31,782,023 samples, 3.85%)</title><rect x="31.3446%" y="197" width="3.8534%" height="15" fill="rgb(248,47,43)"/><text x="31.5946%" y="207.50">misc..</text></g><g><title>impl_parent (3,905,042 samples, 0.47%)</title><rect x="36.2668%" y="133" width="0.4735%" height="15" fill="rgb(221,10,30)"/><text x="36.5168%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,229,706 samples, 0.27%)</title><rect x="36.4699%" y="117" width="0.2703%" height="15" fill="rgb(210,229,1)"/><text x="36.7199%" y="127.50"></text></g><g><title>impl_trait_ref (8,398,401 samples, 1.02%)</title><rect x="36.7404%" y="133" width="1.0183%" height="15" fill="rgb(222,148,37)"/><text x="36.9904%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,373,698 samples, 0.77%)</title><rect x="36.9859%" y="117" width="0.7728%" height="15" fill="rgb(234,67,33)"/><text x="37.2359%" y="127.50"></text></g><g><title>trait_impls_of (1,780,141 samples, 0.22%)</title><rect x="37.7706%" y="133" width="0.2158%" height="15" fill="rgb(247,98,35)"/><text x="38.0206%" y="143.50"></text></g><g><title>coherent_trait (22,236,317 samples, 2.70%)</title><rect x="35.2907%" y="165" width="2.6960%" height="15" fill="rgb(247,138,52)"/><text x="35.5407%" y="175.50">co..</text></g><g><title>specialization_graph_of (21,567,591 samples, 2.61%)</title><rect x="35.3717%" y="149" width="2.6149%" height="15" fill="rgb(213,79,30)"/><text x="35.6217%" y="159.50">sp..</text></g><g><title>coherence_checking (23,019,036 samples, 2.79%)</title><rect x="35.2852%" y="181" width="2.7909%" height="15" fill="rgb(246,177,23)"/><text x="35.5352%" y="191.50">co..</text></g><g><title>dropck_outlives (1,915,008 samples, 0.23%)</title><rect x="56.1248%" y="133" width="0.2322%" height="15" fill="rgb(230,62,27)"/><text x="56.3748%" y="143.50"></text></g><g><title>predicates_of (886,309 samples, 0.11%)</title><rect x="57.3577%" y="117" width="0.1075%" height="15" fill="rgb(216,154,8)"/><text x="57.6077%" y="127.50"></text></g><g><title>specializes (1,201,597 samples, 0.15%)</title><rect x="57.4652%" y="117" width="0.1457%" height="15" fill="rgb(244,35,45)"/><text x="57.7152%" y="127.50"></text></g><g><title>evaluate_obligation (10,664,740 samples, 1.29%)</title><rect x="56.3570%" y="133" width="1.2930%" height="15" fill="rgb(251,115,12)"/><text x="56.6070%" y="143.50"></text></g><g><title>method_autoderef_steps (1,124,781 samples, 0.14%)</title><rect x="57.8253%" y="133" width="0.1364%" height="15" fill="rgb(240,54,50)"/><text x="58.0753%" y="143.50"></text></g><g><title>predicates_of (944,980 samples, 0.11%)</title><rect x="58.0280%" y="133" width="0.1146%" height="15" fill="rgb(233,84,52)"/><text x="58.2780%" y="143.50"></text></g><g><title>dropck_outlives (1,575,050 samples, 0.19%)</title><rect x="64.0779%" y="117" width="0.1910%" height="15" fill="rgb(207,117,47)"/><text x="64.3279%" y="127.50"></text></g><g><title>evaluate_obligation (6,050,293 samples, 0.73%)</title><rect x="64.2689%" y="117" width="0.7336%" height="15" fill="rgb(249,43,39)"/><text x="64.5189%" y="127.50"></text></g><g><title>is_copy_raw (1,359,522 samples, 0.16%)</title><rect x="65.0988%" y="117" width="0.1648%" height="15" fill="rgb(209,38,44)"/><text x="65.3488%" y="127.50"></text></g><g><title>evaluate_obligation (996,670 samples, 0.12%)</title><rect x="65.1428%" y="101" width="0.1208%" height="15" fill="rgb(236,212,23)"/><text x="65.3928%" y="111.50"></text></g><g><title>method_autoderef_steps (1,626,428 samples, 0.20%)</title><rect x="65.2805%" y="117" width="0.1972%" height="15" fill="rgb(242,79,21)"/><text x="65.5305%" y="127.50"></text></g><g><title>typeck (60,774,134 samples, 7.37%)</title><rect x="58.1789%" y="133" width="7.3685%" height="15" fill="rgb(211,96,35)"/><text x="58.4289%" y="143.50">typeck</text></g><g><title>item_bodies_checking (226,513,312 samples, 27.46%)</title><rect x="38.1293%" y="181" width="27.4633%" height="15" fill="rgb(253,215,40)"/><text x="38.3793%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (226,509,532 samples, 27.46%)</title><rect x="38.1297%" y="165" width="27.4628%" height="15" fill="rgb(211,81,21)"/><text x="38.3797%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (225,386,852 samples, 27.33%)</title><rect x="38.2659%" y="149" width="27.3267%" height="15" fill="rgb(208,190,38)"/><text x="38.5159%" y="159.50">typeck</text></g><g><title>mir_borrowck (1,251,354 samples, 0.15%)</title><rect x="68.6931%" y="101" width="0.1517%" height="15" fill="rgb(235,213,38)"/><text x="68.9431%" y="111.50"></text></g><g><title>type_op_prove_predicate (899,120 samples, 0.11%)</title><rect x="68.9233%" y="101" width="0.1090%" height="15" fill="rgb(237,122,38)"/><text x="69.1733%" y="111.50"></text></g><g><title>mir_borrowck (5,221,199 samples, 0.63%)</title><rect x="68.3994%" y="117" width="0.6330%" height="15" fill="rgb(244,218,35)"/><text x="68.6494%" y="127.50"></text></g><g><title>specialization_graph_of (1,239,504 samples, 0.15%)</title><rect x="69.3132%" y="37" width="0.1503%" height="15" fill="rgb(240,68,47)"/><text x="69.5632%" y="47.50"></text></g><g><title>resolve_instance (1,681,429 samples, 0.20%)</title><rect x="69.2625%" y="53" width="0.2039%" height="15" fill="rgb(210,16,53)"/><text x="69.5125%" y="63.50"></text></g><g><title>dropck_outlives (1,642,009 samples, 0.20%)</title><rect x="70.8709%" y="37" width="0.1991%" height="15" fill="rgb(235,124,12)"/><text x="71.1209%" y="47.50"></text></g><g><title>evaluate_obligation (1,858,411 samples, 0.23%)</title><rect x="71.0700%" y="37" width="0.2253%" height="15" fill="rgb(224,169,11)"/><text x="71.3200%" y="47.50"></text></g><g><title>mir_built (19,411,355 samples, 2.35%)</title><rect x="69.1558%" y="69" width="2.3535%" height="15" fill="rgb(250,166,2)"/><text x="69.4058%" y="79.50">m..</text></g><g><title>typeck (16,684,135 samples, 2.02%)</title><rect x="69.4864%" y="53" width="2.0228%" height="15" fill="rgb(242,216,29)"/><text x="69.7364%" y="63.50">t..</text></g><g><title>mir_built (1,502,276 samples, 0.18%)</title><rect x="71.5349%" y="53" width="0.1821%" height="15" fill="rgb(230,116,27)"/><text x="71.7849%" y="63.50"></text></g><g><title>mir_const (22,321,106 samples, 2.71%)</title><rect x="69.0529%" y="101" width="2.7063%" height="15" fill="rgb(228,99,48)"/><text x="69.3029%" y="111.50">mi..</text></g><g><title>unsafety_check_result (21,684,640 samples, 2.63%)</title><rect x="69.1301%" y="85" width="2.6291%" height="15" fill="rgb(253,11,6)"/><text x="69.3801%" y="95.50">un..</text></g><g><title>unsafety_check_result (2,061,643 samples, 0.25%)</title><rect x="71.5093%" y="69" width="0.2500%" height="15" fill="rgb(247,143,39)"/><text x="71.7593%" y="79.50"></text></g><g><title>mir_promoted (22,505,449 samples, 2.73%)</title><rect x="69.0325%" y="117" width="2.7286%" height="15" fill="rgb(236,97,10)"/><text x="69.2825%" y="127.50">mi..</text></g><g><title>item_types_checking (53,567,297 samples, 6.49%)</title><rect x="65.5926%" y="181" width="6.4947%" height="15" fill="rgb(233,208,19)"/><text x="65.8426%" y="191.50">item_type..</text></g><g><title>check_mod_item_types (53,495,267 samples, 6.49%)</title><rect x="65.6013%" y="165" width="6.4860%" height="15" fill="rgb(216,164,2)"/><text x="65.8513%" y="175.50">check_mo..</text></g><g><title>type_of (35,225,819 samples, 4.27%)</title><rect x="67.8164%" y="149" width="4.2709%" height="15" fill="rgb(220,129,5)"/><text x="68.0664%" y="159.50">type_..</text></g><g><title>mir_borrowck (35,157,828 samples, 4.26%)</title><rect x="67.8246%" y="133" width="4.2627%" height="15" fill="rgb(242,17,10)"/><text x="68.0746%" y="143.50">mir_b..</text></g><g><title>type_op_prove_predicate (1,875,497 samples, 0.23%)</title><rect x="71.8599%" y="117" width="0.2274%" height="15" fill="rgb(242,107,0)"/><text x="72.1099%" y="127.50"></text></g><g><title>fn_sig (2,522,698 samples, 0.31%)</title><rect x="72.4618%" y="149" width="0.3059%" height="15" fill="rgb(251,28,31)"/><text x="72.7118%" y="159.50"></text></g><g><title>lint_levels (1,766,640 samples, 0.21%)</title><rect x="73.0332%" y="101" width="0.2142%" height="15" fill="rgb(233,223,10)"/><text x="73.2832%" y="111.50"></text></g><g><title>is_late_bound_map (2,606,078 samples, 0.32%)</title><rect x="72.9315%" y="133" width="0.3160%" height="15" fill="rgb(215,21,27)"/><text x="73.1815%" y="143.50"></text></g><g><title>resolve_lifetimes (2,537,067 samples, 0.31%)</title><rect x="72.9399%" y="117" width="0.3076%" height="15" fill="rgb(232,23,21)"/><text x="73.1899%" y="127.50"></text></g><g><title>named_region_map (3,677,239 samples, 0.45%)</title><rect x="73.2475%" y="133" width="0.4458%" height="15" fill="rgb(244,5,23)"/><text x="73.4975%" y="143.50"></text></g><g><title>resolve_lifetimes (3,393,927 samples, 0.41%)</title><rect x="73.2818%" y="117" width="0.4115%" height="15" fill="rgb(226,81,46)"/><text x="73.5318%" y="127.50"></text></g><g><title>generics_of (7,802,378 samples, 0.95%)</title><rect x="72.7676%" y="149" width="0.9460%" height="15" fill="rgb(247,70,30)"/><text x="73.0176%" y="159.50"></text></g><g><title>explicit_predicates_of (2,343,759 samples, 0.28%)</title><rect x="73.9525%" y="117" width="0.2842%" height="15" fill="rgb(212,68,19)"/><text x="74.2025%" y="127.50"></text></g><g><title>predicates_of (4,694,354 samples, 0.57%)</title><rect x="73.7699%" y="149" width="0.5692%" height="15" fill="rgb(240,187,13)"/><text x="74.0199%" y="159.50"></text></g><g><title>predicates_defined_on (4,106,131 samples, 0.50%)</title><rect x="73.8412%" y="133" width="0.4978%" height="15" fill="rgb(223,113,26)"/><text x="74.0912%" y="143.50"></text></g><g><title>inferred_outlives_of (844,502 samples, 0.10%)</title><rect x="74.2367%" y="117" width="0.1024%" height="15" fill="rgb(206,192,2)"/><text x="74.4867%" y="127.50"></text></g><g><title>type_collecting (19,549,368 samples, 2.37%)</title><rect x="72.0890%" y="181" width="2.3702%" height="15" fill="rgb(241,108,4)"/><text x="72.3390%" y="191.50">ty..</text></g><g><title>collect_mod_item_types (19,242,155 samples, 2.33%)</title><rect x="72.1262%" y="165" width="2.3330%" height="15" fill="rgb(247,173,49)"/><text x="72.3762%" y="175.50">c..</text></g><g><title>evaluate_obligation (3,991,894 samples, 0.48%)</title><rect x="77.3283%" y="149" width="0.4840%" height="15" fill="rgb(224,114,35)"/><text x="77.5783%" y="159.50"></text></g><g><title>implied_outlives_bounds (1,936,648 samples, 0.23%)</title><rect x="77.8153%" y="149" width="0.2348%" height="15" fill="rgb(245,159,27)"/><text x="78.0653%" y="159.50"></text></g><g><title>param_env (3,226,592 samples, 0.39%)</title><rect x="78.0501%" y="149" width="0.3912%" height="15" fill="rgb(245,172,44)"/><text x="78.3001%" y="159.50"></text></g><g><title>region_scope_tree (3,924,567 samples, 0.48%)</title><rect x="78.4642%" y="149" width="0.4758%" height="15" fill="rgb(236,23,11)"/><text x="78.7142%" y="159.50"></text></g><g><title>check_impl_item_well_formed (34,802,611 samples, 4.22%)</title><rect x="74.7312%" y="165" width="4.2196%" height="15" fill="rgb(205,117,38)"/><text x="74.9812%" y="175.50">check..</text></g><g><title>evaluate_obligation (4,789,782 samples, 0.58%)</title><rect x="80.3305%" y="149" width="0.5807%" height="15" fill="rgb(237,72,25)"/><text x="80.5805%" y="159.50"></text></g><g><title>param_env (2,624,851 samples, 0.32%)</title><rect x="81.0013%" y="149" width="0.3182%" height="15" fill="rgb(244,70,9)"/><text x="81.2513%" y="159.50"></text></g><g><title>check_item_well_formed (20,747,476 samples, 2.52%)</title><rect x="78.9508%" y="165" width="2.5155%" height="15" fill="rgb(217,125,39)"/><text x="79.2008%" y="175.50">ch..</text></g><g><title>analysis (671,021,371 samples, 81.36%)</title><rect x="0.2390%" y="213" width="81.3571%" height="15" fill="rgb(235,36,10)"/><text x="0.4890%" y="223.50">analysis</text></g><g><title>type_check_crate (382,685,021 samples, 46.40%)</title><rect x="35.1980%" y="197" width="46.3981%" height="15" fill="rgb(251,123,47)"/><text x="35.4480%" y="207.50">type_check_crate</text></g><g><title>wf_checking (58,777,324 samples, 7.13%)</title><rect x="74.4697%" y="181" width="7.1264%" height="15" fill="rgb(221,13,13)"/><text x="74.7197%" y="191.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,070,570 samples, 0.13%)</title><rect x="81.4663%" y="165" width="0.1298%" height="15" fill="rgb(238,131,9)"/><text x="81.7163%" y="175.50"></text></g><g><title>AST_validation (904,310 samples, 0.11%)</title><rect x="81.6786%" y="197" width="0.1096%" height="15" fill="rgb(211,50,8)"/><text x="81.9286%" y="207.50"></text></g><g><title>metadata_register_crate (1,759,550 samples, 0.21%)</title><rect x="90.4215%" y="165" width="0.2133%" height="15" fill="rgb(245,182,24)"/><text x="90.6715%" y="175.50"></text></g><g><title>macro_expand_crate (74,314,397 samples, 9.01%)</title><rect x="81.8597%" y="197" width="9.0101%" height="15" fill="rgb(242,14,37)"/><text x="82.1097%" y="207.50">macro_expand_..</text></g><g><title>expand_crate (74,290,667 samples, 9.01%)</title><rect x="81.8626%" y="181" width="9.0073%" height="15" fill="rgb(246,228,12)"/><text x="82.1126%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,938,674 samples, 0.24%)</title><rect x="90.6348%" y="165" width="0.2351%" height="15" fill="rgb(213,55,15)"/><text x="90.8848%" y="175.50"></text></g><g><title>finalize_macro_resolutions (938,610 samples, 0.11%)</title><rect x="90.9197%" y="181" width="0.1138%" height="15" fill="rgb(209,9,3)"/><text x="91.1697%" y="191.50"></text></g><g><title>late_resolve_crate (12,078,885 samples, 1.46%)</title><rect x="91.0335%" y="181" width="1.4645%" height="15" fill="rgb(230,59,30)"/><text x="91.2835%" y="191.50"></text></g><g><title>configure_and_expand (90,714,790 samples, 11.00%)</title><rect x="81.6510%" y="213" width="10.9986%" height="15" fill="rgb(209,121,21)"/><text x="81.9010%" y="223.50">configure_and_ex..</text></g><g><title>resolve_crate (14,589,332 samples, 1.77%)</title><rect x="90.8807%" y="197" width="1.7689%" height="15" fill="rgb(220,109,13)"/><text x="91.1307%" y="207.50"></text></g><g><title>drop_ast (1,682,039 samples, 0.20%)</title><rect x="92.6496%" y="213" width="0.2039%" height="15" fill="rgb(232,18,1)"/><text x="92.8996%" y="223.50"></text></g><g><title>early_lint_checks (3,659,001 samples, 0.44%)</title><rect x="92.8563%" y="213" width="0.4436%" height="15" fill="rgb(215,41,42)"/><text x="93.1063%" y="223.50"></text></g><g><title>free_global_ctxt (8,648,426 samples, 1.05%)</title><rect x="93.2999%" y="213" width="1.0486%" height="15" fill="rgb(224,123,36)"/><text x="93.5499%" y="223.50"></text></g><g><title>mir_for_ctfe (1,409,148 samples, 0.17%)</title><rect x="95.5945%" y="197" width="0.1709%" height="15" fill="rgb(240,125,3)"/><text x="95.8445%" y="207.50"></text></g><g><title>generate_crate_metadata (12,675,361 samples, 1.54%)</title><rect x="94.3485%" y="213" width="1.5368%" height="15" fill="rgb(205,98,50)"/><text x="94.5985%" y="223.50"></text></g><g><title>hir_lowering (29,101,304 samples, 3.53%)</title><rect x="95.8853%" y="213" width="3.5283%" height="15" fill="rgb(205,185,37)"/><text x="96.1353%" y="223.50">hir..</text></g><g><title>self_profile_alloc_query_strings (2,849,072 samples, 0.35%)</title><rect x="99.5294%" y="213" width="0.3454%" height="15" fill="rgb(238,207,15)"/><text x="99.7794%" y="223.50"></text></g><g><title>all (824,785,383 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (824,785,383 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (873,090 samples, 0.11%)</title><rect x="99.8941%" y="213" width="0.1059%" height="15" fill="rgb(207,46,11)"/><text x="100.1441%" y="223.50"></text></g></svg></svg>