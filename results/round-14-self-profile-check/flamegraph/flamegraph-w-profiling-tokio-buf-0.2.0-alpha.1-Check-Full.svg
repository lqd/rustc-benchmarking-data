<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (254,784 samples, 0.49%)</title><rect x="5.6414%" y="69" width="0.4874%" height="15" fill="rgb(227,0,7)"/><text x="5.8914%" y="79.50"></text></g><g><title>evaluate_obligation (248,403 samples, 0.48%)</title><rect x="5.6536%" y="53" width="0.4752%" height="15" fill="rgb(217,0,24)"/><text x="5.9036%" y="63.50"></text></g><g><title>trait_impls_of (182,712 samples, 0.35%)</title><rect x="5.7793%" y="37" width="0.3496%" height="15" fill="rgb(221,193,54)"/><text x="6.0293%" y="47.50"></text></g><g><title>adt_drop_tys (65,521 samples, 0.13%)</title><rect x="6.1457%" y="53" width="0.1254%" height="15" fill="rgb(248,212,6)"/><text x="6.3957%" y="63.50"></text></g><g><title>needs_drop_raw (100,331 samples, 0.19%)</title><rect x="6.1288%" y="69" width="0.1919%" height="15" fill="rgb(208,68,35)"/><text x="6.3788%" y="79.50"></text></g><g><title>resolve_instance (164,392 samples, 0.31%)</title><rect x="6.3208%" y="69" width="0.3145%" height="15" fill="rgb(232,128,0)"/><text x="6.5708%" y="79.50"></text></g><g><title>thir_body (92,200 samples, 0.18%)</title><rect x="6.6449%" y="69" width="0.1764%" height="15" fill="rgb(207,160,47)"/><text x="6.8949%" y="79.50"></text></g><g><title>mir_const (1,238,013 samples, 2.37%)</title><rect x="4.4586%" y="117" width="2.3685%" height="15" fill="rgb(228,23,34)"/><text x="4.7086%" y="127.50">mi..</text></g><g><title>unsafety_check_result (1,046,271 samples, 2.00%)</title><rect x="4.8255%" y="101" width="2.0017%" height="15" fill="rgb(218,30,26)"/><text x="5.0755%" y="111.50">u..</text></g><g><title>mir_built (936,900 samples, 1.79%)</title><rect x="5.0347%" y="85" width="1.7924%" height="15" fill="rgb(220,122,19)"/><text x="5.2847%" y="95.50">m..</text></g><g><title>mir_promoted (1,380,055 samples, 2.64%)</title><rect x="4.2060%" y="133" width="2.6403%" height="15" fill="rgb(250,228,42)"/><text x="4.4560%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (61,800 samples, 0.12%)</title><rect x="6.8463%" y="133" width="0.1182%" height="15" fill="rgb(240,193,28)"/><text x="7.0963%" y="143.50"></text></g><g><title>type_op_prove_predicate (207,103 samples, 0.40%)</title><rect x="6.9645%" y="133" width="0.3962%" height="15" fill="rgb(216,20,37)"/><text x="7.2145%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,943,903 samples, 5.63%)</title><rect x="1.7330%" y="165" width="5.6322%" height="15" fill="rgb(206,188,39)"/><text x="1.9830%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (2,929,223 samples, 5.60%)</title><rect x="1.7611%" y="149" width="5.6041%" height="15" fill="rgb(217,207,13)"/><text x="2.0111%" y="159.50">mir_bor..</text></g><g><title>hir_module_items (130,691 samples, 0.25%)</title><rect x="7.3739%" y="165" width="0.2500%" height="15" fill="rgb(231,73,38)"/><text x="7.6239%" y="175.50"></text></g><g><title>get_lang_items (95,732 samples, 0.18%)</title><rect x="8.0699%" y="117" width="0.1832%" height="15" fill="rgb(225,20,46)"/><text x="8.3199%" y="127.50"></text></g><g><title>associated_item (60,071 samples, 0.11%)</title><rect x="8.3018%" y="101" width="0.1149%" height="15" fill="rgb(210,31,41)"/><text x="8.5518%" y="111.50"></text></g><g><title>codegen_fn_attrs (81,531 samples, 0.16%)</title><rect x="8.4168%" y="101" width="0.1560%" height="15" fill="rgb(221,200,47)"/><text x="8.6668%" y="111.50"></text></g><g><title>should_inherit_track_caller (171,603 samples, 0.33%)</title><rect x="8.2531%" y="117" width="0.3283%" height="15" fill="rgb(226,26,5)"/><text x="8.5031%" y="127.50"></text></g><g><title>codegen_fn_attrs (365,045 samples, 0.70%)</title><rect x="7.9496%" y="133" width="0.6984%" height="15" fill="rgb(249,33,26)"/><text x="8.1996%" y="143.50"></text></g><g><title>check_mod_attrs (502,496 samples, 0.96%)</title><rect x="7.6879%" y="149" width="0.9614%" height="15" fill="rgb(235,183,28)"/><text x="7.9379%" y="159.50"></text></g><g><title>check_mod_const_bodies (66,892 samples, 0.13%)</title><rect x="8.6493%" y="149" width="0.1280%" height="15" fill="rgb(221,5,38)"/><text x="8.8993%" y="159.50"></text></g><g><title>lint_levels (78,711 samples, 0.15%)</title><rect x="9.0693%" y="133" width="0.1506%" height="15" fill="rgb(247,18,42)"/><text x="9.3193%" y="143.50"></text></g><g><title>lookup_deprecation_entry (113,830 samples, 0.22%)</title><rect x="9.2199%" y="133" width="0.2178%" height="15" fill="rgb(241,131,45)"/><text x="9.4699%" y="143.50"></text></g><g><title>lookup_stability (59,031 samples, 0.11%)</title><rect x="9.4377%" y="133" width="0.1129%" height="15" fill="rgb(249,31,29)"/><text x="9.6877%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (391,304 samples, 0.75%)</title><rect x="8.8590%" y="149" width="0.7486%" height="15" fill="rgb(225,111,53)"/><text x="9.1090%" y="159.50"></text></g><g><title>misc_checking_1 (1,083,632 samples, 2.07%)</title><rect x="7.6248%" y="165" width="2.0732%" height="15" fill="rgb(238,160,17)"/><text x="7.8748%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (62,801 samples, 0.12%)</title><rect x="9.7006%" y="149" width="0.1201%" height="15" fill="rgb(214,148,48)"/><text x="9.9506%" y="159.50"></text></g><g><title>misc_checking_2 (168,822 samples, 0.32%)</title><rect x="9.6980%" y="165" width="0.3230%" height="15" fill="rgb(232,36,49)"/><text x="9.9480%" y="175.50"></text></g><g><title>match_checking (104,661 samples, 0.20%)</title><rect x="9.8207%" y="149" width="0.2002%" height="15" fill="rgb(209,103,24)"/><text x="10.0707%" y="159.50"></text></g><g><title>check_match (99,491 samples, 0.19%)</title><rect x="9.8306%" y="133" width="0.1903%" height="15" fill="rgb(229,88,8)"/><text x="10.0806%" y="143.50"></text></g><g><title>death_checking (156,582 samples, 0.30%)</title><rect x="10.1211%" y="149" width="0.2996%" height="15" fill="rgb(213,181,19)"/><text x="10.3711%" y="159.50"></text></g><g><title>item_attrs (88,871 samples, 0.17%)</title><rect x="10.2506%" y="133" width="0.1700%" height="15" fill="rgb(254,191,54)"/><text x="10.5006%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (87,941 samples, 0.17%)</title><rect x="10.2524%" y="117" width="0.1682%" height="15" fill="rgb(241,83,37)"/><text x="10.5024%" y="127.50"></text></g><g><title>param_env (54,871 samples, 0.10%)</title><rect x="11.3317%" y="117" width="0.1050%" height="15" fill="rgb(233,36,39)"/><text x="11.5817%" y="127.50"></text></g><g><title>crate_lints (1,559,227 samples, 2.98%)</title><rect x="10.4232%" y="133" width="2.9831%" height="15" fill="rgb(226,3,54)"/><text x="10.6732%" y="143.50">cra..</text></g><g><title>type_of (1,029,481 samples, 1.97%)</title><rect x="11.4367%" y="117" width="1.9696%" height="15" fill="rgb(245,192,40)"/><text x="11.6867%" y="127.50">t..</text></g><g><title>metadata_decode_entry_type_of (798,957 samples, 1.53%)</title><rect x="11.8777%" y="101" width="1.5285%" height="15" fill="rgb(238,167,29)"/><text x="12.1277%" y="111.50"></text></g><g><title>lint_checking (1,634,308 samples, 3.13%)</title><rect x="10.4207%" y="149" width="3.1267%" height="15" fill="rgb(232,182,51)"/><text x="10.6707%" y="159.50">lin..</text></g><g><title>module_lints (73,741 samples, 0.14%)</title><rect x="13.4063%" y="133" width="0.1411%" height="15" fill="rgb(231,60,39)"/><text x="13.6563%" y="143.50"></text></g><g><title>lint_mod (71,331 samples, 0.14%)</title><rect x="13.4109%" y="117" width="0.1365%" height="15" fill="rgb(208,69,12)"/><text x="13.6609%" y="127.50"></text></g><g><title>privacy_access_levels (55,220 samples, 0.11%)</title><rect x="13.5474%" y="149" width="0.1056%" height="15" fill="rgb(235,93,37)"/><text x="13.7974%" y="159.50"></text></g><g><title>privacy_checking_modules (103,131 samples, 0.20%)</title><rect x="13.6530%" y="149" width="0.1973%" height="15" fill="rgb(213,116,39)"/><text x="13.9030%" y="159.50"></text></g><g><title>check_mod_privacy (100,741 samples, 0.19%)</title><rect x="13.6576%" y="133" width="0.1927%" height="15" fill="rgb(222,207,29)"/><text x="13.9076%" y="143.50"></text></g><g><title>misc_checking_3 (2,009,872 samples, 3.85%)</title><rect x="10.0210%" y="165" width="3.8452%" height="15" fill="rgb(206,96,30)"/><text x="10.2710%" y="175.50">misc..</text></g><g><title>impl_parent (2,397,547 samples, 4.59%)</title><rect x="21.6324%" y="101" width="4.5869%" height="15" fill="rgb(218,138,4)"/><text x="21.8824%" y="111.50">impl_..</text></g><g><title>metadata_decode_entry_impl_parent (1,463,936 samples, 2.80%)</title><rect x="23.4186%" y="85" width="2.8007%" height="15" fill="rgb(250,191,14)"/><text x="23.6686%" y="95.50">me..</text></g><g><title>impl_trait_ref (7,403,218 samples, 14.16%)</title><rect x="26.2193%" y="101" width="14.1636%" height="15" fill="rgb(239,60,40)"/><text x="26.4693%" y="111.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,460,991 samples, 12.36%)</title><rect x="28.0220%" y="85" width="12.3609%" height="15" fill="rgb(206,27,48)"/><text x="28.2720%" y="95.50">metadata_decode_en..</text></g><g><title>coherent_trait (14,717,154 samples, 28.16%)</title><rect x="13.9572%" y="133" width="28.1563%" height="15" fill="rgb(225,35,8)"/><text x="14.2072%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (14,705,254 samples, 28.13%)</title><rect x="13.9800%" y="117" width="28.1336%" height="15" fill="rgb(250,213,24)"/><text x="14.2300%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (901,790 samples, 1.73%)</title><rect x="40.3883%" y="101" width="1.7253%" height="15" fill="rgb(247,123,22)"/><text x="40.6383%" y="111.50"></text></g><g><title>implementations_of_trait (193,981 samples, 0.37%)</title><rect x="41.7424%" y="85" width="0.3711%" height="15" fill="rgb(231,138,38)"/><text x="41.9924%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (164,331 samples, 0.31%)</title><rect x="41.7991%" y="69" width="0.3144%" height="15" fill="rgb(231,145,46)"/><text x="42.0491%" y="79.50"></text></g><g><title>coherence_checking (14,782,205 samples, 28.28%)</title><rect x="13.9243%" y="149" width="28.2808%" height="15" fill="rgb(251,118,11)"/><text x="14.1743%" y="159.50">coherence_checking</text></g><g><title>associated_item (73,930 samples, 0.14%)</title><rect x="46.0647%" y="85" width="0.1414%" height="15" fill="rgb(217,147,25)"/><text x="46.3147%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (58,570 samples, 0.11%)</title><rect x="46.0941%" y="69" width="0.1121%" height="15" fill="rgb(247,81,37)"/><text x="46.3441%" y="79.50"></text></g><g><title>associated_items (115,880 samples, 0.22%)</title><rect x="45.9972%" y="101" width="0.2217%" height="15" fill="rgb(209,12,38)"/><text x="46.2472%" y="111.50"></text></g><g><title>dropck_outlives (58,511 samples, 0.11%)</title><rect x="46.2398%" y="101" width="0.1119%" height="15" fill="rgb(227,1,9)"/><text x="46.4898%" y="111.50"></text></g><g><title>predicates_of (79,830 samples, 0.15%)</title><rect x="46.8101%" y="85" width="0.1527%" height="15" fill="rgb(248,47,43)"/><text x="47.0601%" y="95.50"></text></g><g><title>predicates_defined_on (54,160 samples, 0.10%)</title><rect x="46.8592%" y="69" width="0.1036%" height="15" fill="rgb(221,10,30)"/><text x="47.1092%" y="79.50"></text></g><g><title>evaluate_obligation (484,204 samples, 0.93%)</title><rect x="46.3517%" y="101" width="0.9264%" height="15" fill="rgb(210,229,1)"/><text x="46.6017%" y="111.50"></text></g><g><title>trait_impls_of (162,712 samples, 0.31%)</title><rect x="46.9668%" y="85" width="0.3113%" height="15" fill="rgb(222,148,37)"/><text x="47.2168%" y="95.50"></text></g><g><title>implementations_of_trait (58,192 samples, 0.11%)</title><rect x="47.1667%" y="69" width="0.1113%" height="15" fill="rgb(234,67,33)"/><text x="47.4167%" y="79.50"></text></g><g><title>impl_item_implementor_ids (52,271 samples, 0.10%)</title><rect x="47.3996%" y="101" width="0.1000%" height="15" fill="rgb(247,98,35)"/><text x="47.6496%" y="111.50"></text></g><g><title>item_attrs (54,701 samples, 0.10%)</title><rect x="47.5674%" y="101" width="0.1047%" height="15" fill="rgb(247,138,52)"/><text x="47.8174%" y="111.50"></text></g><g><title>evaluate_obligation (66,291 samples, 0.13%)</title><rect x="47.8512%" y="85" width="0.1268%" height="15" fill="rgb(213,79,30)"/><text x="48.1012%" y="95.50"></text></g><g><title>object_safety_violations (160,561 samples, 0.31%)</title><rect x="47.7713%" y="101" width="0.3072%" height="15" fill="rgb(246,177,23)"/><text x="48.0213%" y="111.50"></text></g><g><title>explicit_predicates_of (68,711 samples, 0.13%)</title><rect x="48.1953%" y="69" width="0.1315%" height="15" fill="rgb(230,62,27)"/><text x="48.4453%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (62,711 samples, 0.12%)</title><rect x="48.2068%" y="53" width="0.1200%" height="15" fill="rgb(216,154,8)"/><text x="48.4568%" y="63.50"></text></g><g><title>predicates_of (135,711 samples, 0.26%)</title><rect x="48.1040%" y="101" width="0.2596%" height="15" fill="rgb(244,35,45)"/><text x="48.3540%" y="111.50"></text></g><g><title>predicates_defined_on (109,531 samples, 0.21%)</title><rect x="48.1541%" y="85" width="0.2096%" height="15" fill="rgb(251,115,12)"/><text x="48.4041%" y="95.50"></text></g><g><title>trait_impls_of (117,361 samples, 0.22%)</title><rect x="48.3728%" y="101" width="0.2245%" height="15" fill="rgb(240,54,50)"/><text x="48.6228%" y="111.50"></text></g><g><title>item_bodies_checking (3,363,578 samples, 6.44%)</title><rect x="42.2562%" y="149" width="6.4351%" height="15" fill="rgb(233,84,52)"/><text x="42.5062%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (3,361,608 samples, 6.43%)</title><rect x="42.2600%" y="133" width="6.4313%" height="15" fill="rgb(207,117,47)"/><text x="42.5100%" y="143.50">typeck_i..</text></g><g><title>typeck (3,349,228 samples, 6.41%)</title><rect x="42.2837%" y="117" width="6.4076%" height="15" fill="rgb(249,43,39)"/><text x="42.5337%" y="127.50">typeck</text></g><g><title>impl_trait_ref (136,873 samples, 0.26%)</title><rect x="49.1599%" y="69" width="0.2619%" height="15" fill="rgb(209,38,44)"/><text x="49.4099%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (117,672 samples, 0.23%)</title><rect x="49.1967%" y="53" width="0.2251%" height="15" fill="rgb(236,212,23)"/><text x="49.4467%" y="63.50"></text></g><g><title>adt_destructor (304,033 samples, 0.58%)</title><rect x="48.9031%" y="117" width="0.5817%" height="15" fill="rgb(242,79,21)"/><text x="49.1531%" y="127.50"></text></g><g><title>coherent_trait (299,293 samples, 0.57%)</title><rect x="48.9122%" y="101" width="0.5726%" height="15" fill="rgb(211,96,35)"/><text x="49.1622%" y="111.50"></text></g><g><title>specialization_graph_of (297,723 samples, 0.57%)</title><rect x="48.9152%" y="85" width="0.5696%" height="15" fill="rgb(253,215,40)"/><text x="49.1652%" y="95.50"></text></g><g><title>item_types_checking (449,224 samples, 0.86%)</title><rect x="48.6913%" y="149" width="0.8594%" height="15" fill="rgb(211,81,21)"/><text x="48.9413%" y="159.50"></text></g><g><title>check_mod_item_types (446,844 samples, 0.85%)</title><rect x="48.6959%" y="133" width="0.8549%" height="15" fill="rgb(208,190,38)"/><text x="48.9459%" y="143.50"></text></g><g><title>type_of (113,340 samples, 0.22%)</title><rect x="50.3267%" y="101" width="0.2168%" height="15" fill="rgb(235,213,38)"/><text x="50.5767%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (87,950 samples, 0.17%)</title><rect x="50.3753%" y="85" width="0.1683%" height="15" fill="rgb(237,122,38)"/><text x="50.6253%" y="95.50"></text></g><g><title>fn_sig (360,564 samples, 0.69%)</title><rect x="49.8759%" y="117" width="0.6898%" height="15" fill="rgb(244,218,35)"/><text x="50.1259%" y="127.50"></text></g><g><title>named_region_map (68,441 samples, 0.13%)</title><rect x="50.7088%" y="101" width="0.1309%" height="15" fill="rgb(240,68,47)"/><text x="50.9588%" y="111.50"></text></g><g><title>resolve_lifetimes (58,841 samples, 0.11%)</title><rect x="50.7272%" y="85" width="0.1126%" height="15" fill="rgb(210,16,53)"/><text x="50.9772%" y="95.50"></text></g><g><title>generics_of (155,043 samples, 0.30%)</title><rect x="50.5657%" y="117" width="0.2966%" height="15" fill="rgb(235,124,12)"/><text x="50.8157%" y="127.50"></text></g><g><title>late_bound_vars_map (106,731 samples, 0.20%)</title><rect x="51.2637%" y="85" width="0.2042%" height="15" fill="rgb(224,169,11)"/><text x="51.5137%" y="95.50"></text></g><g><title>resolve_lifetimes (91,941 samples, 0.18%)</title><rect x="51.2920%" y="69" width="0.1759%" height="15" fill="rgb(250,166,2)"/><text x="51.5420%" y="79.50"></text></g><g><title>explicit_item_bounds (183,132 samples, 0.35%)</title><rect x="51.1265%" y="101" width="0.3504%" height="15" fill="rgb(242,216,29)"/><text x="51.3765%" y="111.50"></text></g><g><title>item_bounds (309,534 samples, 0.59%)</title><rect x="50.9070%" y="117" width="0.5922%" height="15" fill="rgb(230,116,27)"/><text x="51.1570%" y="127.50"></text></g><g><title>explicit_predicates_of (88,300 samples, 0.17%)</title><rect x="51.6096%" y="85" width="0.1689%" height="15" fill="rgb(228,99,48)"/><text x="51.8596%" y="95.50"></text></g><g><title>predicates_of (209,941 samples, 0.40%)</title><rect x="51.4992%" y="117" width="0.4017%" height="15" fill="rgb(253,11,6)"/><text x="51.7492%" y="127.50"></text></g><g><title>predicates_defined_on (186,231 samples, 0.36%)</title><rect x="51.5445%" y="101" width="0.3563%" height="15" fill="rgb(247,143,39)"/><text x="51.7945%" y="111.50"></text></g><g><title>inferred_outlives_of (63,920 samples, 0.12%)</title><rect x="51.7785%" y="85" width="0.1223%" height="15" fill="rgb(236,97,10)"/><text x="52.0285%" y="95.50"></text></g><g><title>super_predicates_of (60,361 samples, 0.12%)</title><rect x="51.9008%" y="117" width="0.1155%" height="15" fill="rgb(233,208,19)"/><text x="52.1508%" y="127.50"></text></g><g><title>type_collecting (1,304,294 samples, 2.50%)</title><rect x="49.5529%" y="149" width="2.4953%" height="15" fill="rgb(216,164,2)"/><text x="49.8029%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (1,291,064 samples, 2.47%)</title><rect x="49.5782%" y="133" width="2.4700%" height="15" fill="rgb(220,129,5)"/><text x="49.8282%" y="143.50">co..</text></g><g><title>evaluate_obligation (195,763 samples, 0.37%)</title><rect x="52.6122%" y="117" width="0.3745%" height="15" fill="rgb(242,17,10)"/><text x="52.8622%" y="127.50"></text></g><g><title>check_impl_item_well_formed (585,756 samples, 1.12%)</title><rect x="52.1133%" y="133" width="1.1206%" height="15" fill="rgb(242,107,0)"/><text x="52.3633%" y="143.50"></text></g><g><title>param_env (103,281 samples, 0.20%)</title><rect x="53.8024%" y="117" width="0.1976%" height="15" fill="rgb(251,28,31)"/><text x="54.0524%" y="127.50"></text></g><g><title>check_item_well_formed (465,965 samples, 0.89%)</title><rect x="53.2340%" y="133" width="0.8915%" height="15" fill="rgb(233,223,10)"/><text x="53.4840%" y="143.50"></text></g><g><title>analysis (27,937,451 samples, 53.45%)</title><rect x="1.3833%" y="181" width="53.4489%" height="15" fill="rgb(215,21,27)"/><text x="1.6333%" y="191.50">analysis</text></g><g><title>type_check_crate (21,412,708 samples, 40.97%)</title><rect x="13.8662%" y="165" width="40.9660%" height="15" fill="rgb(232,23,21)"/><text x="14.1162%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,454,146 samples, 2.78%)</title><rect x="52.0502%" y="149" width="2.7820%" height="15" fill="rgb(244,5,23)"/><text x="52.3002%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (369,404 samples, 0.71%)</title><rect x="54.1254%" y="133" width="0.7067%" height="15" fill="rgb(226,81,46)"/><text x="54.3754%" y="143.50"></text></g><g><title>codegen_crate (369,874 samples, 0.71%)</title><rect x="54.8524%" y="181" width="0.7076%" height="15" fill="rgb(247,70,30)"/><text x="55.1024%" y="191.50"></text></g><g><title>AST_validation (112,562 samples, 0.22%)</title><rect x="55.9851%" y="165" width="0.2153%" height="15" fill="rgb(212,68,19)"/><text x="56.2351%" y="175.50"></text></g><g><title>crate_injection (75,410 samples, 0.14%)</title><rect x="56.2890%" y="165" width="0.1443%" height="15" fill="rgb(240,187,13)"/><text x="56.5390%" y="175.50"></text></g><g><title>metadata_load_macro (229,890 samples, 0.44%)</title><rect x="78.3492%" y="133" width="0.4398%" height="15" fill="rgb(223,113,26)"/><text x="78.5992%" y="143.50"></text></g><g><title>metadata_register_crate (2,951,723 samples, 5.65%)</title><rect x="78.7891%" y="133" width="5.6471%" height="15" fill="rgb(206,192,2)"/><text x="79.0391%" y="143.50">metadat..</text></g><g><title>metadata_register_crate (1,109,392 samples, 2.12%)</title><rect x="82.3137%" y="117" width="2.1224%" height="15" fill="rgb(241,108,4)"/><text x="82.5637%" y="127.50">m..</text></g><g><title>metadata_register_crate (103,872 samples, 0.20%)</title><rect x="84.2375%" y="101" width="0.1987%" height="15" fill="rgb(247,173,49)"/><text x="84.4875%" y="111.50"></text></g><g><title>macro_expand_crate (14,665,773 samples, 28.06%)</title><rect x="56.4332%" y="165" width="28.0580%" height="15" fill="rgb(224,114,35)"/><text x="56.6832%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (14,639,512 samples, 28.01%)</title><rect x="56.4835%" y="149" width="28.0078%" height="15" fill="rgb(245,159,27)"/><text x="56.7335%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (114,221 samples, 0.22%)</title><rect x="84.5136%" y="165" width="0.2185%" height="15" fill="rgb(245,172,44)"/><text x="84.7636%" y="175.50"></text></g><g><title>finalize_macro_resolutions (102,542 samples, 0.20%)</title><rect x="84.8446%" y="149" width="0.1962%" height="15" fill="rgb(236,23,11)"/><text x="85.0946%" y="159.50"></text></g><g><title>late_resolve_crate (1,389,265 samples, 2.66%)</title><rect x="85.0408%" y="149" width="2.6579%" height="15" fill="rgb(205,117,38)"/><text x="85.2908%" y="159.50">la..</text></g><g><title>configure_and_expand (16,854,867 samples, 32.25%)</title><rect x="55.5601%" y="181" width="32.2461%" height="15" fill="rgb(237,72,25)"/><text x="55.8101%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,606,777 samples, 3.07%)</title><rect x="84.7322%" y="165" width="3.0740%" height="15" fill="rgb(244,70,9)"/><text x="84.9822%" y="175.50">res..</text></g><g><title>drop_ast (69,701 samples, 0.13%)</title><rect x="87.8062%" y="181" width="0.1333%" height="15" fill="rgb(217,125,39)"/><text x="88.0562%" y="191.50"></text></g><g><title>early_lint_checks (181,102 samples, 0.35%)</title><rect x="87.9734%" y="181" width="0.3465%" height="15" fill="rgb(235,36,10)"/><text x="88.2234%" y="191.50"></text></g><g><title>free_global_ctxt (2,658,039 samples, 5.09%)</title><rect x="88.3199%" y="181" width="5.0853%" height="15" fill="rgb(251,123,47)"/><text x="88.5699%" y="191.50">free_g..</text></g><g><title>crate_hash (73,481 samples, 0.14%)</title><rect x="93.9111%" y="165" width="0.1406%" height="15" fill="rgb(221,13,13)"/><text x="94.1611%" y="175.50"></text></g><g><title>generate_crate_metadata (404,365 samples, 0.77%)</title><rect x="93.4051%" y="181" width="0.7736%" height="15" fill="rgb(238,131,9)"/><text x="93.6551%" y="191.50"></text></g><g><title>hir_lowering (1,058,892 samples, 2.03%)</title><rect x="94.1787%" y="181" width="2.0258%" height="15" fill="rgb(211,50,8)"/><text x="94.4287%" y="191.50">h..</text></g><g><title>parse_crate (671,338 samples, 1.28%)</title><rect x="96.2997%" y="181" width="1.2844%" height="15" fill="rgb(245,182,24)"/><text x="96.5497%" y="191.50"></text></g><g><title>prepare_outputs (338,934 samples, 0.65%)</title><rect x="97.6040%" y="181" width="0.6484%" height="15" fill="rgb(242,14,37)"/><text x="97.8540%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (453,766 samples, 0.87%)</title><rect x="98.2524%" y="181" width="0.8681%" height="15" fill="rgb(246,228,12)"/><text x="98.5024%" y="191.50"></text></g><g><title>setup_global_ctxt (154,381 samples, 0.30%)</title><rect x="99.1407%" y="181" width="0.2954%" height="15" fill="rgb(213,55,15)"/><text x="99.3907%" y="191.50"></text></g><g><title>all (52,269,452 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (52,269,452 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (294,763 samples, 0.56%)</title><rect x="99.4361%" y="181" width="0.5639%" height="15" fill="rgb(209,121,21)"/><text x="99.6861%" y="191.50"></text></g></svg></svg>