<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (459,040 samples, 0.16%)</title><rect x="13.4962%" y="197" width="0.1599%" height="15" fill="rgb(227,0,7)"/><text x="13.7462%" y="207.50"></text></g><g><title>param_env (729,414 samples, 0.25%)</title><rect x="15.4251%" y="165" width="0.2541%" height="15" fill="rgb(217,0,24)"/><text x="15.6751%" y="175.50"></text></g><g><title>item_attrs (577,094 samples, 0.20%)</title><rect x="16.2227%" y="133" width="0.2010%" height="15" fill="rgb(221,193,54)"/><text x="16.4727%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (552,794 samples, 0.19%)</title><rect x="16.2311%" y="117" width="0.1926%" height="15" fill="rgb(248,212,6)"/><text x="16.4811%" y="127.50"></text></g><g><title>codegen_fn_attrs (838,848 samples, 0.29%)</title><rect x="16.1461%" y="149" width="0.2922%" height="15" fill="rgb(208,68,35)"/><text x="16.3961%" y="159.50"></text></g><g><title>is_copy_raw (287,612 samples, 0.10%)</title><rect x="19.2946%" y="101" width="0.1002%" height="15" fill="rgb(232,128,0)"/><text x="19.5446%" y="111.50"></text></g><g><title>param_env (378,098 samples, 0.13%)</title><rect x="19.3948%" y="101" width="0.1317%" height="15" fill="rgb(207,160,47)"/><text x="19.6448%" y="111.50"></text></g><g><title>adt_drop_tys (1,007,182 samples, 0.35%)</title><rect x="19.2023%" y="117" width="0.3508%" height="15" fill="rgb(228,23,34)"/><text x="19.4523%" y="127.50"></text></g><g><title>is_copy_raw (1,969,989 samples, 0.69%)</title><rect x="19.5542%" y="117" width="0.6862%" height="15" fill="rgb(218,30,26)"/><text x="19.8042%" y="127.50"></text></g><g><title>evaluate_obligation (1,530,522 samples, 0.53%)</title><rect x="19.7073%" y="101" width="0.5331%" height="15" fill="rgb(220,122,19)"/><text x="19.9573%" y="111.50"></text></g><g><title>needs_drop_raw (3,409,699 samples, 1.19%)</title><rect x="19.0720%" y="133" width="1.1877%" height="15" fill="rgb(250,228,42)"/><text x="19.3220%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (970,402 samples, 0.34%)</title><rect x="20.4603%" y="117" width="0.3380%" height="15" fill="rgb(240,193,28)"/><text x="20.7103%" y="127.50"></text></g><g><title>specialization_graph_of (1,352,255 samples, 0.47%)</title><rect x="20.8499%" y="117" width="0.4710%" height="15" fill="rgb(216,20,37)"/><text x="21.0999%" y="127.50"></text></g><g><title>impl_trait_ref (684,678 samples, 0.24%)</title><rect x="21.0825%" y="101" width="0.2385%" height="15" fill="rgb(206,188,39)"/><text x="21.3325%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (598,978 samples, 0.21%)</title><rect x="21.1123%" y="85" width="0.2086%" height="15" fill="rgb(217,207,13)"/><text x="21.3623%" y="95.50"></text></g><g><title>resolve_instance (3,238,637 samples, 1.13%)</title><rect x="20.2642%" y="133" width="1.1281%" height="15" fill="rgb(231,73,38)"/><text x="20.5142%" y="143.50"></text></g><g><title>thir_body (2,730,858 samples, 0.95%)</title><rect x="21.4304%" y="133" width="0.9513%" height="15" fill="rgb(225,20,46)"/><text x="21.6804%" y="143.50"></text></g><g><title>mir_const (22,394,086 samples, 7.80%)</title><rect x="14.6059%" y="181" width="7.8008%" height="15" fill="rgb(210,31,41)"/><text x="14.8559%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (19,312,933 samples, 6.73%)</title><rect x="15.6792%" y="165" width="6.7275%" height="15" fill="rgb(221,200,47)"/><text x="15.9292%" y="175.50">unsafety_..</text></g><g><title>mir_built (17,133,583 samples, 5.97%)</title><rect x="16.4383%" y="149" width="5.9683%" height="15" fill="rgb(226,26,5)"/><text x="16.6883%" y="159.50">mir_built</text></g><g><title>mir_const_qualif (573,596 samples, 0.20%)</title><rect x="22.4067%" y="181" width="0.1998%" height="15" fill="rgb(249,33,26)"/><text x="22.6567%" y="191.50"></text></g><g><title>mir_promoted (25,292,865 samples, 8.81%)</title><rect x="13.7960%" y="197" width="8.8105%" height="15" fill="rgb(235,183,28)"/><text x="14.0460%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,404,595 samples, 0.49%)</title><rect x="22.6066%" y="197" width="0.4893%" height="15" fill="rgb(221,5,38)"/><text x="22.8566%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,179,174 samples, 0.41%)</title><rect x="23.0958%" y="197" width="0.4108%" height="15" fill="rgb(247,18,42)"/><text x="23.3458%" y="207.50"></text></g><g><title>normalize_projection_ty (774,609 samples, 0.27%)</title><rect x="23.2368%" y="181" width="0.2698%" height="15" fill="rgb(241,131,45)"/><text x="23.4868%" y="191.50"></text></g><g><title>type_op_prove_predicate (7,744,731 samples, 2.70%)</title><rect x="23.6088%" y="197" width="2.6978%" height="15" fill="rgb(249,31,29)"/><text x="23.8588%" y="207.50">ty..</text></g><g><title>MIR_borrow_checking (73,374,389 samples, 25.56%)</title><rect x="0.7592%" y="229" width="25.5593%" height="15" fill="rgb(225,111,53)"/><text x="1.0092%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (72,975,893 samples, 25.42%)</title><rect x="0.8980%" y="213" width="25.4204%" height="15" fill="rgb(238,160,17)"/><text x="1.1480%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (419,474 samples, 0.15%)</title><rect x="26.3184%" y="229" width="0.1461%" height="15" fill="rgb(214,148,48)"/><text x="26.5684%" y="239.50"></text></g><g><title>hir_module_items (663,647 samples, 0.23%)</title><rect x="26.4645%" y="229" width="0.2312%" height="15" fill="rgb(232,36,49)"/><text x="26.7145%" y="239.50"></text></g><g><title>should_inherit_track_caller (746,863 samples, 0.26%)</title><rect x="27.2137%" y="181" width="0.2602%" height="15" fill="rgb(209,103,24)"/><text x="27.4637%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,268,137 samples, 0.44%)</title><rect x="27.0419%" y="197" width="0.4417%" height="15" fill="rgb(229,88,8)"/><text x="27.2919%" y="207.50"></text></g><g><title>check_mod_attrs (2,185,593 samples, 0.76%)</title><rect x="26.7224%" y="213" width="0.7613%" height="15" fill="rgb(213,181,19)"/><text x="26.9724%" y="223.50"></text></g><g><title>check_mod_const_bodies (526,704 samples, 0.18%)</title><rect x="27.4838%" y="213" width="0.1835%" height="15" fill="rgb(254,191,54)"/><text x="27.7338%" y="223.50"></text></g><g><title>lookup_deprecation_entry (501,105 samples, 0.17%)</title><rect x="27.9848%" y="197" width="0.1746%" height="15" fill="rgb(241,83,37)"/><text x="28.2348%" y="207.50"></text></g><g><title>stability_index (356,094 samples, 0.12%)</title><rect x="28.0353%" y="181" width="0.1240%" height="15" fill="rgb(233,36,39)"/><text x="28.2853%" y="191.50"></text></g><g><title>lookup_stability (408,044 samples, 0.14%)</title><rect x="28.1593%" y="197" width="0.1421%" height="15" fill="rgb(226,3,54)"/><text x="28.4093%" y="207.50"></text></g><g><title>metadata_decode_entry_lookup_stability (368,253 samples, 0.13%)</title><rect x="28.1732%" y="181" width="0.1283%" height="15" fill="rgb(245,192,40)"/><text x="28.4232%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (1,604,430 samples, 0.56%)</title><rect x="27.7787%" y="213" width="0.5589%" height="15" fill="rgb(238,167,29)"/><text x="28.0287%" y="223.50"></text></g><g><title>misc_checking_1 (4,876,064 samples, 1.70%)</title><rect x="26.6959%" y="229" width="1.6985%" height="15" fill="rgb(232,182,51)"/><text x="26.9459%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,224,093 samples, 0.43%)</title><rect x="28.3950%" y="213" width="0.4264%" height="15" fill="rgb(231,60,39)"/><text x="28.6450%" y="223.50"></text></g><g><title>check_mod_liveness (999,310 samples, 0.35%)</title><rect x="28.4733%" y="197" width="0.3481%" height="15" fill="rgb(208,69,12)"/><text x="28.7233%" y="207.50"></text></g><g><title>type_uninhabited_from (305,623 samples, 0.11%)</title><rect x="28.7150%" y="181" width="0.1065%" height="15" fill="rgb(235,93,37)"/><text x="28.9650%" y="191.50"></text></g><g><title>misc_checking_2 (2,794,281 samples, 0.97%)</title><rect x="28.3944%" y="229" width="0.9734%" height="15" fill="rgb(213,116,39)"/><text x="28.6444%" y="239.50"></text></g><g><title>match_checking (1,568,318 samples, 0.55%)</title><rect x="28.8214%" y="213" width="0.5463%" height="15" fill="rgb(222,207,29)"/><text x="29.0714%" y="223.50"></text></g><g><title>check_match (1,471,788 samples, 0.51%)</title><rect x="28.8551%" y="197" width="0.5127%" height="15" fill="rgb(206,96,30)"/><text x="29.1051%" y="207.50"></text></g><g><title>check_private_in_public (541,786 samples, 0.19%)</title><rect x="29.3715%" y="213" width="0.1887%" height="15" fill="rgb(218,138,4)"/><text x="29.6215%" y="223.50"></text></g><g><title>death_checking (1,043,662 samples, 0.36%)</title><rect x="29.5602%" y="213" width="0.3635%" height="15" fill="rgb(250,191,14)"/><text x="29.8102%" y="223.50"></text></g><g><title>eval_to_allocation_raw (297,874 samples, 0.10%)</title><rect x="30.4569%" y="181" width="0.1038%" height="15" fill="rgb(239,60,40)"/><text x="30.7069%" y="191.50"></text></g><g><title>eval_to_allocation_raw (296,864 samples, 0.10%)</title><rect x="30.4573%" y="165" width="0.1034%" height="15" fill="rgb(206,27,48)"/><text x="30.7073%" y="175.50"></text></g><g><title>eval_to_const_value_raw (380,274 samples, 0.13%)</title><rect x="30.5607%" y="181" width="0.1325%" height="15" fill="rgb(225,35,8)"/><text x="30.8107%" y="191.50"></text></g><g><title>eval_to_const_value_raw (376,344 samples, 0.13%)</title><rect x="30.5621%" y="165" width="0.1311%" height="15" fill="rgb(250,213,24)"/><text x="30.8121%" y="175.50"></text></g><g><title>eval_to_allocation_raw (368,054 samples, 0.13%)</title><rect x="30.5649%" y="149" width="0.1282%" height="15" fill="rgb(247,123,22)"/><text x="30.8149%" y="159.50"></text></g><g><title>param_env (574,207 samples, 0.20%)</title><rect x="30.6932%" y="181" width="0.2000%" height="15" fill="rgb(231,138,38)"/><text x="30.9432%" y="191.50"></text></g><g><title>crate_lints (4,272,598 samples, 1.49%)</title><rect x="29.9244%" y="197" width="1.4883%" height="15" fill="rgb(231,145,46)"/><text x="30.1744%" y="207.50"></text></g><g><title>type_of (1,392,668 samples, 0.49%)</title><rect x="30.9276%" y="181" width="0.4851%" height="15" fill="rgb(251,118,11)"/><text x="31.1776%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,100,363 samples, 0.38%)</title><rect x="31.0294%" y="165" width="0.3833%" height="15" fill="rgb(217,147,25)"/><text x="31.2794%" y="175.50"></text></g><g><title>lint_checking (5,455,851 samples, 1.90%)</title><rect x="29.9237%" y="213" width="1.9005%" height="15" fill="rgb(247,81,37)"/><text x="30.1737%" y="223.50">l..</text></g><g><title>module_lints (1,181,283 samples, 0.41%)</title><rect x="31.4128%" y="197" width="0.4115%" height="15" fill="rgb(209,12,38)"/><text x="31.6628%" y="207.50"></text></g><g><title>lint_mod (1,167,633 samples, 0.41%)</title><rect x="31.4175%" y="181" width="0.4067%" height="15" fill="rgb(227,1,9)"/><text x="31.6675%" y="191.50"></text></g><g><title>privacy_access_levels (659,088 samples, 0.23%)</title><rect x="31.8242%" y="213" width="0.2296%" height="15" fill="rgb(248,47,43)"/><text x="32.0742%" y="223.50"></text></g><g><title>privacy_checking_modules (2,219,225 samples, 0.77%)</title><rect x="32.0538%" y="213" width="0.7730%" height="15" fill="rgb(221,10,30)"/><text x="32.3038%" y="223.50"></text></g><g><title>check_mod_privacy (2,209,965 samples, 0.77%)</title><rect x="32.0571%" y="197" width="0.7698%" height="15" fill="rgb(210,229,1)"/><text x="32.3071%" y="207.50"></text></g><g><title>misc_checking_3 (9,956,362 samples, 3.47%)</title><rect x="29.3678%" y="229" width="3.4682%" height="15" fill="rgb(222,148,37)"/><text x="29.6178%" y="239.50">mis..</text></g><g><title>adt_destructor (316,254 samples, 0.11%)</title><rect x="32.9223%" y="181" width="0.1102%" height="15" fill="rgb(234,67,33)"/><text x="33.1723%" y="191.50"></text></g><g><title>coherent_trait (307,234 samples, 0.11%)</title><rect x="32.9255%" y="165" width="0.1070%" height="15" fill="rgb(247,98,35)"/><text x="33.1755%" y="175.50"></text></g><g><title>specialization_graph_of (306,134 samples, 0.11%)</title><rect x="32.9258%" y="149" width="0.1066%" height="15" fill="rgb(247,138,52)"/><text x="33.1758%" y="159.50"></text></g><g><title>adt_def (355,124 samples, 0.12%)</title><rect x="35.1611%" y="149" width="0.1237%" height="15" fill="rgb(213,79,30)"/><text x="35.4111%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (354,824 samples, 0.12%)</title><rect x="35.1612%" y="133" width="0.1236%" height="15" fill="rgb(246,177,23)"/><text x="35.4112%" y="143.50"></text></g><g><title>item_attrs (349,433 samples, 0.12%)</title><rect x="35.1630%" y="117" width="0.1217%" height="15" fill="rgb(230,62,27)"/><text x="35.4130%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (349,033 samples, 0.12%)</title><rect x="35.1632%" y="101" width="0.1216%" height="15" fill="rgb(216,154,8)"/><text x="35.4132%" y="111.50"></text></g><g><title>adt_sized_constraint (385,694 samples, 0.13%)</title><rect x="35.1592%" y="165" width="0.1344%" height="15" fill="rgb(244,35,45)"/><text x="35.4092%" y="175.50"></text></g><g><title>impl_parent (3,384,949 samples, 1.18%)</title><rect x="35.2973%" y="165" width="1.1791%" height="15" fill="rgb(251,115,12)"/><text x="35.5473%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,951,042 samples, 0.68%)</title><rect x="35.7968%" y="149" width="0.6796%" height="15" fill="rgb(240,54,50)"/><text x="36.0468%" y="159.50"></text></g><g><title>impl_trait_ref (6,747,943 samples, 2.35%)</title><rect x="36.4775%" y="165" width="2.3506%" height="15" fill="rgb(233,84,52)"/><text x="36.7275%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,096,972 samples, 1.78%)</title><rect x="37.0526%" y="149" width="1.7755%" height="15" fill="rgb(207,117,47)"/><text x="37.3026%" y="159.50">m..</text></g><g><title>trait_impls_of (1,319,452 samples, 0.46%)</title><rect x="38.8609%" y="165" width="0.4596%" height="15" fill="rgb(249,43,39)"/><text x="39.1109%" y="175.50"></text></g><g><title>implementations_of_trait (425,652 samples, 0.15%)</title><rect x="39.1723%" y="149" width="0.1483%" height="15" fill="rgb(209,38,44)"/><text x="39.4223%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (304,462 samples, 0.11%)</title><rect x="39.2145%" y="133" width="0.1061%" height="15" fill="rgb(236,212,23)"/><text x="39.4645%" y="143.50"></text></g><g><title>coherent_trait (18,410,336 samples, 6.41%)</title><rect x="32.9079%" y="197" width="6.4131%" height="15" fill="rgb(242,79,21)"/><text x="33.1579%" y="207.50">coherent..</text></g><g><title>specialization_graph_of (18,025,121 samples, 6.28%)</title><rect x="33.0421%" y="181" width="6.2789%" height="15" fill="rgb(211,96,35)"/><text x="33.2921%" y="191.50">speciali..</text></g><g><title>coherence_checking (18,541,456 samples, 6.46%)</title><rect x="32.8986%" y="213" width="6.4587%" height="15" fill="rgb(253,215,40)"/><text x="33.1486%" y="223.50">coherenc..</text></g><g><title>associated_item (305,055 samples, 0.11%)</title><rect x="53.2392%" y="149" width="0.1063%" height="15" fill="rgb(211,81,21)"/><text x="53.4892%" y="159.50"></text></g><g><title>associated_items (503,547 samples, 0.18%)</title><rect x="53.1848%" y="165" width="0.1754%" height="15" fill="rgb(208,190,38)"/><text x="53.4348%" y="175.50"></text></g><g><title>adt_def (313,752 samples, 0.11%)</title><rect x="53.7399%" y="133" width="0.1093%" height="15" fill="rgb(235,213,38)"/><text x="53.9899%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (308,262 samples, 0.11%)</title><rect x="53.7418%" y="117" width="0.1074%" height="15" fill="rgb(237,122,38)"/><text x="53.9918%" y="127.50"></text></g><g><title>adt_dtorck_constraint (352,963 samples, 0.12%)</title><rect x="54.1398%" y="37" width="0.1230%" height="15" fill="rgb(244,218,35)"/><text x="54.3898%" y="47.50"></text></g><g><title>adt_dtorck_constraint (444,396 samples, 0.15%)</title><rect x="54.1104%" y="53" width="0.1548%" height="15" fill="rgb(240,68,47)"/><text x="54.3604%" y="63.50"></text></g><g><title>adt_dtorck_constraint (510,526 samples, 0.18%)</title><rect x="54.0885%" y="69" width="0.1778%" height="15" fill="rgb(210,16,53)"/><text x="54.3385%" y="79.50"></text></g><g><title>adt_dtorck_constraint (654,309 samples, 0.23%)</title><rect x="54.0396%" y="85" width="0.2279%" height="15" fill="rgb(235,124,12)"/><text x="54.2896%" y="95.50"></text></g><g><title>adt_dtorck_constraint (785,770 samples, 0.27%)</title><rect x="53.9976%" y="101" width="0.2737%" height="15" fill="rgb(224,169,11)"/><text x="54.2476%" y="111.50"></text></g><g><title>adt_dtorck_constraint (914,430 samples, 0.32%)</title><rect x="53.9582%" y="117" width="0.3185%" height="15" fill="rgb(250,166,2)"/><text x="54.2082%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,178,535 samples, 0.41%)</title><rect x="53.8765%" y="133" width="0.4105%" height="15" fill="rgb(242,216,29)"/><text x="54.1265%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,775,280 samples, 0.62%)</title><rect x="53.6905%" y="149" width="0.6184%" height="15" fill="rgb(230,116,27)"/><text x="53.9405%" y="159.50"></text></g><g><title>dropck_outlives (2,775,480 samples, 0.97%)</title><rect x="53.4032%" y="165" width="0.9668%" height="15" fill="rgb(228,99,48)"/><text x="53.6532%" y="175.50"></text></g><g><title>evaluate_obligation (2,029,687 samples, 0.71%)</title><rect x="54.3701%" y="165" width="0.7070%" height="15" fill="rgb(253,11,6)"/><text x="54.6201%" y="175.50"></text></g><g><title>evaluate_obligation (382,901 samples, 0.13%)</title><rect x="55.5596%" y="149" width="0.1334%" height="15" fill="rgb(247,143,39)"/><text x="55.8096%" y="159.50"></text></g><g><title>method_autoderef_steps (763,846 samples, 0.27%)</title><rect x="55.4325%" y="165" width="0.2661%" height="15" fill="rgb(236,97,10)"/><text x="55.6825%" y="175.50"></text></g><g><title>predicates_of (826,860 samples, 0.29%)</title><rect x="55.8219%" y="165" width="0.2880%" height="15" fill="rgb(233,208,19)"/><text x="56.0719%" y="175.50"></text></g><g><title>predicates_defined_on (630,958 samples, 0.22%)</title><rect x="55.8901%" y="149" width="0.2198%" height="15" fill="rgb(216,164,2)"/><text x="56.1401%" y="159.50"></text></g><g><title>inferred_outlives_of (295,502 samples, 0.10%)</title><rect x="56.0070%" y="133" width="0.1029%" height="15" fill="rgb(220,129,5)"/><text x="56.2570%" y="143.50"></text></g><g><title>associated_item (500,528 samples, 0.17%)</title><rect x="62.5973%" y="133" width="0.1744%" height="15" fill="rgb(242,17,10)"/><text x="62.8473%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (391,957 samples, 0.14%)</title><rect x="62.6351%" y="117" width="0.1365%" height="15" fill="rgb(242,107,0)"/><text x="62.8851%" y="127.50"></text></g><g><title>associated_items (712,862 samples, 0.25%)</title><rect x="62.5343%" y="149" width="0.2483%" height="15" fill="rgb(251,28,31)"/><text x="62.7843%" y="159.50"></text></g><g><title>dropck_outlives (542,415 samples, 0.19%)</title><rect x="62.8169%" y="149" width="0.1889%" height="15" fill="rgb(233,223,10)"/><text x="63.0669%" y="159.50"></text></g><g><title>evaluate_obligation (2,538,001 samples, 0.88%)</title><rect x="63.0059%" y="149" width="0.8841%" height="15" fill="rgb(215,21,27)"/><text x="63.2559%" y="159.50"></text></g><g><title>trait_impls_of (346,814 samples, 0.12%)</title><rect x="63.7691%" y="133" width="0.1208%" height="15" fill="rgb(232,23,21)"/><text x="64.0191%" y="143.50"></text></g><g><title>is_copy_raw (689,278 samples, 0.24%)</title><rect x="64.0596%" y="149" width="0.2401%" height="15" fill="rgb(244,5,23)"/><text x="64.3096%" y="159.50"></text></g><g><title>evaluate_obligation (552,175 samples, 0.19%)</title><rect x="64.1073%" y="133" width="0.1923%" height="15" fill="rgb(226,81,46)"/><text x="64.3573%" y="143.50"></text></g><g><title>evaluate_obligation (300,194 samples, 0.10%)</title><rect x="64.4682%" y="133" width="0.1046%" height="15" fill="rgb(247,70,30)"/><text x="64.7182%" y="143.50"></text></g><g><title>method_autoderef_steps (656,667 samples, 0.23%)</title><rect x="64.3505%" y="149" width="0.2287%" height="15" fill="rgb(212,68,19)"/><text x="64.6005%" y="159.50"></text></g><g><title>predicates_of (371,551 samples, 0.13%)</title><rect x="64.5907%" y="149" width="0.1294%" height="15" fill="rgb(240,187,13)"/><text x="64.8407%" y="159.50"></text></g><g><title>typeck (24,714,426 samples, 8.61%)</title><rect x="56.1855%" y="165" width="8.6090%" height="15" fill="rgb(223,113,26)"/><text x="56.4355%" y="175.50">typeck</text></g><g><title>item_bodies_checking (73,075,974 samples, 25.46%)</title><rect x="39.3804%" y="213" width="25.4553%" height="15" fill="rgb(206,192,2)"/><text x="39.6304%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (73,072,604 samples, 25.45%)</title><rect x="39.3816%" y="197" width="25.4541%" height="15" fill="rgb(241,108,4)"/><text x="39.6316%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (72,831,701 samples, 25.37%)</title><rect x="39.4655%" y="181" width="25.3702%" height="15" fill="rgb(247,173,49)"/><text x="39.7155%" y="191.50">typeck</text></g><g><title>typeck (804,389 samples, 0.28%)</title><rect x="65.4935%" y="181" width="0.2802%" height="15" fill="rgb(224,114,35)"/><text x="65.7435%" y="191.50"></text></g><g><title>item_types_checking (2,693,520 samples, 0.94%)</title><rect x="64.8357%" y="213" width="0.9383%" height="15" fill="rgb(245,159,27)"/><text x="65.0857%" y="223.50"></text></g><g><title>check_mod_item_types (2,681,099 samples, 0.93%)</title><rect x="64.8400%" y="197" width="0.9339%" height="15" fill="rgb(245,172,44)"/><text x="65.0900%" y="207.50"></text></g><g><title>late_bound_vars_map (390,775 samples, 0.14%)</title><rect x="66.3438%" y="165" width="0.1361%" height="15" fill="rgb(236,23,11)"/><text x="66.5938%" y="175.50"></text></g><g><title>resolve_lifetimes (336,734 samples, 0.12%)</title><rect x="66.3626%" y="149" width="0.1173%" height="15" fill="rgb(205,117,38)"/><text x="66.6126%" y="159.50"></text></g><g><title>fn_sig (1,056,300 samples, 0.37%)</title><rect x="66.1286%" y="181" width="0.3680%" height="15" fill="rgb(237,72,25)"/><text x="66.3786%" y="191.50"></text></g><g><title>is_late_bound_map (606,607 samples, 0.21%)</title><rect x="66.6529%" y="165" width="0.2113%" height="15" fill="rgb(244,70,9)"/><text x="66.9029%" y="175.50"></text></g><g><title>resolve_lifetimes (570,307 samples, 0.20%)</title><rect x="66.6655%" y="149" width="0.1987%" height="15" fill="rgb(217,125,39)"/><text x="66.9155%" y="159.50"></text></g><g><title>named_region_map (633,035 samples, 0.22%)</title><rect x="66.8642%" y="165" width="0.2205%" height="15" fill="rgb(235,36,10)"/><text x="67.1142%" y="175.50"></text></g><g><title>resolve_lifetimes (565,335 samples, 0.20%)</title><rect x="66.8878%" y="149" width="0.1969%" height="15" fill="rgb(251,123,47)"/><text x="67.1378%" y="159.50"></text></g><g><title>generics_of (1,731,670 samples, 0.60%)</title><rect x="66.4965%" y="181" width="0.6032%" height="15" fill="rgb(221,13,13)"/><text x="66.7465%" y="191.50"></text></g><g><title>explicit_predicates_of (523,442 samples, 0.18%)</title><rect x="67.3262%" y="149" width="0.1823%" height="15" fill="rgb(238,131,9)"/><text x="67.5762%" y="159.50"></text></g><g><title>late_bound_vars_map (611,177 samples, 0.21%)</title><rect x="67.9978%" y="85" width="0.2129%" height="15" fill="rgb(211,50,8)"/><text x="68.2478%" y="95.50"></text></g><g><title>resolve_lifetimes (608,997 samples, 0.21%)</title><rect x="67.9985%" y="69" width="0.2121%" height="15" fill="rgb(245,182,24)"/><text x="68.2485%" y="79.50"></text></g><g><title>lint_levels (558,126 samples, 0.19%)</title><rect x="68.0163%" y="53" width="0.1944%" height="15" fill="rgb(242,14,37)"/><text x="68.2663%" y="63.50"></text></g><g><title>predicates_of (3,246,314 samples, 1.13%)</title><rect x="67.1432%" y="181" width="1.1308%" height="15" fill="rgb(246,228,12)"/><text x="67.3932%" y="191.50"></text></g><g><title>predicates_defined_on (3,049,331 samples, 1.06%)</title><rect x="67.2118%" y="165" width="1.0622%" height="15" fill="rgb(213,55,15)"/><text x="67.4618%" y="175.50"></text></g><g><title>inferred_outlives_of (2,197,285 samples, 0.77%)</title><rect x="67.5086%" y="149" width="0.7654%" height="15" fill="rgb(209,9,3)"/><text x="67.7586%" y="159.50"></text></g><g><title>inferred_outlives_crate (2,129,214 samples, 0.74%)</title><rect x="67.5323%" y="133" width="0.7417%" height="15" fill="rgb(230,59,30)"/><text x="67.7823%" y="143.50"></text></g><g><title>type_of (1,567,657 samples, 0.55%)</title><rect x="67.7279%" y="117" width="0.5461%" height="15" fill="rgb(209,121,21)"/><text x="67.9779%" y="127.50"></text></g><g><title>type_of (993,950 samples, 0.35%)</title><rect x="67.9277%" y="101" width="0.3462%" height="15" fill="rgb(220,109,13)"/><text x="68.1777%" y="111.50"></text></g><g><title>type_collecting (7,544,015 samples, 2.63%)</title><rect x="65.7760%" y="213" width="2.6279%" height="15" fill="rgb(232,18,1)"/><text x="66.0260%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (7,523,354 samples, 2.62%)</title><rect x="65.7832%" y="197" width="2.6207%" height="15" fill="rgb(215,41,42)"/><text x="66.0332%" y="207.50">co..</text></g><g><title>type_of (373,034 samples, 0.13%)</title><rect x="68.2740%" y="181" width="0.1299%" height="15" fill="rgb(224,123,36)"/><text x="68.5240%" y="191.50"></text></g><g><title>evaluate_obligation (1,265,080 samples, 0.44%)</title><rect x="70.3989%" y="181" width="0.4407%" height="15" fill="rgb(240,125,3)"/><text x="70.6489%" y="191.50"></text></g><g><title>implied_outlives_bounds (569,804 samples, 0.20%)</title><rect x="70.8462%" y="181" width="0.1985%" height="15" fill="rgb(205,98,50)"/><text x="71.0962%" y="191.50"></text></g><g><title>object_safety_violations (521,856 samples, 0.18%)</title><rect x="71.0447%" y="181" width="0.1818%" height="15" fill="rgb(205,185,37)"/><text x="71.2947%" y="191.50"></text></g><g><title>param_env (683,934 samples, 0.24%)</title><rect x="71.2264%" y="181" width="0.2382%" height="15" fill="rgb(238,207,15)"/><text x="71.4764%" y="191.50"></text></g><g><title>region_scope_tree (971,460 samples, 0.34%)</title><rect x="71.4791%" y="181" width="0.3384%" height="15" fill="rgb(213,199,42)"/><text x="71.7291%" y="191.50"></text></g><g><title>check_impl_item_well_formed (9,398,640 samples, 3.27%)</title><rect x="68.5784%" y="197" width="3.2739%" height="15" fill="rgb(235,201,11)"/><text x="68.8284%" y="207.50">che..</text></g><g><title>adt_sized_constraint (348,173 samples, 0.12%)</title><rect x="73.8772%" y="149" width="0.1213%" height="15" fill="rgb(207,46,11)"/><text x="74.1272%" y="159.50"></text></g><g><title>adt_sized_constraint (607,484 samples, 0.21%)</title><rect x="73.7947%" y="165" width="0.2116%" height="15" fill="rgb(241,35,35)"/><text x="74.0447%" y="175.50"></text></g><g><title>evaluate_obligation (3,637,550 samples, 1.27%)</title><rect x="72.9014%" y="181" width="1.2671%" height="15" fill="rgb(243,32,47)"/><text x="73.1514%" y="191.50"></text></g><g><title>param_env (490,534 samples, 0.17%)</title><rect x="74.3401%" y="181" width="0.1709%" height="15" fill="rgb(247,202,23)"/><text x="74.5901%" y="191.50"></text></g><g><title>analysis (213,206,338 samples, 74.27%)</title><rect x="0.3924%" y="245" width="74.2683%" height="15" fill="rgb(219,102,11)"/><text x="0.6424%" y="255.50">analysis</text></g><g><title>type_check_crate (120,068,739 samples, 41.82%)</title><rect x="32.8360%" y="229" width="41.8248%" height="15" fill="rgb(243,110,44)"/><text x="33.0860%" y="239.50">type_check_crate</text></g><g><title>wf_checking (17,945,871 samples, 6.25%)</title><rect x="68.4095%" y="213" width="6.2513%" height="15" fill="rgb(222,74,54)"/><text x="68.6595%" y="223.50">wf_check..</text></g><g><title>check_item_well_formed (8,062,126 samples, 2.81%)</title><rect x="71.8524%" y="197" width="2.8084%" height="15" fill="rgb(216,99,12)"/><text x="72.1024%" y="207.50">ch..</text></g><g><title>codegen_crate (623,437 samples, 0.22%)</title><rect x="74.6640%" y="245" width="0.2172%" height="15" fill="rgb(226,22,26)"/><text x="74.9140%" y="255.50"></text></g><g><title>AST_validation (420,774 samples, 0.15%)</title><rect x="74.9480%" y="229" width="0.1466%" height="15" fill="rgb(217,163,10)"/><text x="75.1980%" y="239.50"></text></g><g><title>metadata_load_macro (593,697 samples, 0.21%)</title><rect x="86.1462%" y="197" width="0.2068%" height="15" fill="rgb(213,25,53)"/><text x="86.3962%" y="207.50"></text></g><g><title>metadata_register_crate (2,411,067 samples, 0.84%)</title><rect x="86.3530%" y="197" width="0.8399%" height="15" fill="rgb(252,105,26)"/><text x="86.6030%" y="207.50"></text></g><g><title>metadata_register_crate (889,811 samples, 0.31%)</title><rect x="86.8830%" y="181" width="0.3100%" height="15" fill="rgb(220,39,43)"/><text x="87.1330%" y="191.50"></text></g><g><title>macro_expand_crate (35,085,222 samples, 12.22%)</title><rect x="75.2069%" y="229" width="12.2216%" height="15" fill="rgb(229,68,48)"/><text x="75.4569%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (35,070,232 samples, 12.22%)</title><rect x="75.2121%" y="213" width="12.2164%" height="15" fill="rgb(252,8,32)"/><text x="75.4621%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (676,286 samples, 0.24%)</title><rect x="87.1929%" y="197" width="0.2356%" height="15" fill="rgb(223,20,43)"/><text x="87.4429%" y="207.50"></text></g><g><title>finalize_macro_resolutions (311,123 samples, 0.11%)</title><rect x="87.6051%" y="213" width="0.1084%" height="15" fill="rgb(229,81,49)"/><text x="87.8551%" y="223.50"></text></g><g><title>late_resolve_crate (6,727,975 samples, 2.34%)</title><rect x="87.7135%" y="213" width="2.3436%" height="15" fill="rgb(236,28,36)"/><text x="87.9635%" y="223.50">l..</text></g><g><title>configure_and_expand (44,009,541 samples, 15.33%)</title><rect x="74.8812%" y="245" width="15.3303%" height="15" fill="rgb(249,185,26)"/><text x="75.1312%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (7,747,876 samples, 2.70%)</title><rect x="87.5126%" y="229" width="2.6989%" height="15" fill="rgb(249,174,33)"/><text x="87.7626%" y="239.50">re..</text></g><g><title>drop_ast (800,759 samples, 0.28%)</title><rect x="90.2115%" y="245" width="0.2789%" height="15" fill="rgb(233,201,37)"/><text x="90.4615%" y="255.50"></text></g><g><title>early_lint_checks (1,418,716 samples, 0.49%)</title><rect x="90.4975%" y="245" width="0.4942%" height="15" fill="rgb(221,78,26)"/><text x="90.7475%" y="255.50"></text></g><g><title>free_global_ctxt (5,187,338 samples, 1.81%)</title><rect x="90.9917%" y="245" width="1.8070%" height="15" fill="rgb(250,127,30)"/><text x="91.2417%" y="255.50">f..</text></g><g><title>generate_crate_metadata (2,404,116 samples, 0.84%)</title><rect x="92.7986%" y="245" width="0.8375%" height="15" fill="rgb(230,49,44)"/><text x="93.0486%" y="255.50"></text></g><g><title>hir_lowering (11,673,170 samples, 4.07%)</title><rect x="93.6361%" y="245" width="4.0662%" height="15" fill="rgb(229,67,23)"/><text x="93.8861%" y="255.50">hir_..</text></g><g><title>parse_crate (4,323,018 samples, 1.51%)</title><rect x="97.7254%" y="245" width="1.5059%" height="15" fill="rgb(249,83,47)"/><text x="97.9754%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,364,785 samples, 0.48%)</title><rect x="99.3302%" y="245" width="0.4754%" height="15" fill="rgb(215,43,3)"/><text x="99.5802%" y="255.50"></text></g><g><title>all (287,075,641 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (287,075,641 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (418,635 samples, 0.15%)</title><rect x="99.8542%" y="245" width="0.1458%" height="15" fill="rgb(233,0,4)"/><text x="100.1042%" y="255.50"></text></g></svg></svg>