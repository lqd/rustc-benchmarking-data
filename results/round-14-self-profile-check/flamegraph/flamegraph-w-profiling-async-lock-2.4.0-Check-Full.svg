<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (292,725 samples, 0.19%)</title><rect x="9.0950%" y="181" width="0.1858%" height="15" fill="rgb(227,0,7)"/><text x="9.3450%" y="191.50"></text></g><g><title>is_copy_raw (223,905 samples, 0.14%)</title><rect x="9.1386%" y="165" width="0.1421%" height="15" fill="rgb(217,0,24)"/><text x="9.3886%" y="175.50"></text></g><g><title>evaluate_obligation (180,585 samples, 0.11%)</title><rect x="9.1661%" y="149" width="0.1146%" height="15" fill="rgb(221,193,54)"/><text x="9.4161%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (206,910 samples, 0.13%)</title><rect x="9.3796%" y="165" width="0.1313%" height="15" fill="rgb(248,212,6)"/><text x="9.6296%" y="175.50"></text></g><g><title>resolve_instance (471,713 samples, 0.30%)</title><rect x="9.2808%" y="181" width="0.2994%" height="15" fill="rgb(208,68,35)"/><text x="9.5308%" y="191.50"></text></g><g><title>thir_body (802,531 samples, 0.51%)</title><rect x="9.5940%" y="181" width="0.5095%" height="15" fill="rgb(232,128,0)"/><text x="9.8440%" y="191.50"></text></g><g><title>mir_const (4,741,913 samples, 3.01%)</title><rect x="7.1013%" y="229" width="3.0102%" height="15" fill="rgb(207,160,47)"/><text x="7.3513%" y="239.50">mir..</text></g><g><title>unsafety_check_result (4,037,011 samples, 2.56%)</title><rect x="7.5488%" y="213" width="2.5627%" height="15" fill="rgb(228,23,34)"/><text x="7.7988%" y="223.50">un..</text></g><g><title>mir_built (3,524,936 samples, 2.24%)</title><rect x="7.8738%" y="197" width="2.2376%" height="15" fill="rgb(218,30,26)"/><text x="8.1238%" y="207.50">m..</text></g><g><title>mir_const (409,752 samples, 0.26%)</title><rect x="10.4480%" y="213" width="0.2601%" height="15" fill="rgb(220,122,19)"/><text x="10.6980%" y="223.50"></text></g><g><title>unsafety_check_result (335,362 samples, 0.21%)</title><rect x="10.4953%" y="197" width="0.2129%" height="15" fill="rgb(250,228,42)"/><text x="10.7453%" y="207.50"></text></g><g><title>mir_built (298,431 samples, 0.19%)</title><rect x="10.5187%" y="181" width="0.1894%" height="15" fill="rgb(240,193,28)"/><text x="10.7687%" y="191.50"></text></g><g><title>mir_promoted (6,362,670 samples, 4.04%)</title><rect x="6.6902%" y="245" width="4.0391%" height="15" fill="rgb(216,20,37)"/><text x="6.9402%" y="255.50">mir_..</text></g><g><title>mir_const_qualif (973,129 samples, 0.62%)</title><rect x="10.1115%" y="229" width="0.6177%" height="15" fill="rgb(206,188,39)"/><text x="10.3615%" y="239.50"></text></g><g><title>type_op_ascribe_user_type (248,750 samples, 0.16%)</title><rect x="10.7292%" y="245" width="0.1579%" height="15" fill="rgb(217,207,13)"/><text x="10.9792%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (362,135 samples, 0.23%)</title><rect x="10.8871%" y="245" width="0.2299%" height="15" fill="rgb(231,73,38)"/><text x="11.1371%" y="255.50"></text></g><g><title>normalize_projection_ty (189,752 samples, 0.12%)</title><rect x="10.9966%" y="229" width="0.1205%" height="15" fill="rgb(225,20,46)"/><text x="11.2466%" y="239.50"></text></g><g><title>type_op_prove_predicate (1,260,085 samples, 0.80%)</title><rect x="11.1387%" y="245" width="0.7999%" height="15" fill="rgb(210,31,41)"/><text x="11.3887%" y="255.50"></text></g><g><title>MIR_borrow_checking (17,983,768 samples, 11.42%)</title><rect x="0.5249%" y="277" width="11.4162%" height="15" fill="rgb(221,200,47)"/><text x="0.7749%" y="287.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (17,857,257 samples, 11.34%)</title><rect x="0.6052%" y="261" width="11.3359%" height="15" fill="rgb(226,26,5)"/><text x="0.8552%" y="271.50">mir_borrowck</text></g><g><title>MIR_effect_checking (394,165 samples, 0.25%)</title><rect x="11.9411%" y="277" width="0.2502%" height="15" fill="rgb(249,33,26)"/><text x="12.1911%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (328,503 samples, 0.21%)</title><rect x="11.9828%" y="261" width="0.2085%" height="15" fill="rgb(235,183,28)"/><text x="12.2328%" y="271.50"></text></g><g><title>hir_module_items (202,241 samples, 0.13%)</title><rect x="12.1913%" y="277" width="0.1284%" height="15" fill="rgb(221,5,38)"/><text x="12.4413%" y="287.50"></text></g><g><title>codegen_fn_attrs (163,591 samples, 0.10%)</title><rect x="12.6008%" y="213" width="0.1038%" height="15" fill="rgb(247,18,42)"/><text x="12.8508%" y="223.50"></text></g><g><title>codegen_fn_attrs (326,801 samples, 0.21%)</title><rect x="12.5022%" y="245" width="0.2075%" height="15" fill="rgb(241,131,45)"/><text x="12.7522%" y="255.50"></text></g><g><title>should_inherit_track_caller (272,441 samples, 0.17%)</title><rect x="12.5367%" y="229" width="0.1729%" height="15" fill="rgb(249,31,29)"/><text x="12.7867%" y="239.50"></text></g><g><title>check_mod_attrs (591,127 samples, 0.38%)</title><rect x="12.3345%" y="261" width="0.3753%" height="15" fill="rgb(225,111,53)"/><text x="12.5845%" y="271.50"></text></g><g><title>lint_levels (158,212 samples, 0.10%)</title><rect x="13.0050%" y="245" width="0.1004%" height="15" fill="rgb(238,160,17)"/><text x="13.2550%" y="255.50"></text></g><g><title>lookup_deprecation_entry (195,822 samples, 0.12%)</title><rect x="13.1055%" y="245" width="0.1243%" height="15" fill="rgb(214,148,48)"/><text x="13.3555%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (659,956 samples, 0.42%)</title><rect x="12.8630%" y="261" width="0.4189%" height="15" fill="rgb(232,36,49)"/><text x="13.1130%" y="271.50"></text></g><g><title>misc_checking_1 (1,574,038 samples, 1.00%)</title><rect x="12.3200%" y="277" width="0.9992%" height="15" fill="rgb(209,103,24)"/><text x="12.5700%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (582,837 samples, 0.37%)</title><rect x="13.3201%" y="261" width="0.3700%" height="15" fill="rgb(229,88,8)"/><text x="13.5701%" y="271.50"></text></g><g><title>check_mod_liveness (462,505 samples, 0.29%)</title><rect x="13.3965%" y="245" width="0.2936%" height="15" fill="rgb(213,181,19)"/><text x="13.6465%" y="255.50"></text></g><g><title>misc_checking_2 (1,107,593 samples, 0.70%)</title><rect x="13.3192%" y="277" width="0.7031%" height="15" fill="rgb(254,191,54)"/><text x="13.5692%" y="287.50"></text></g><g><title>match_checking (523,396 samples, 0.33%)</title><rect x="13.6901%" y="261" width="0.3323%" height="15" fill="rgb(241,83,37)"/><text x="13.9401%" y="271.50"></text></g><g><title>check_match (485,155 samples, 0.31%)</title><rect x="13.7144%" y="245" width="0.3080%" height="15" fill="rgb(233,36,39)"/><text x="13.9644%" y="255.50"></text></g><g><title>check_private_in_public (289,424 samples, 0.18%)</title><rect x="14.0271%" y="261" width="0.1837%" height="15" fill="rgb(226,3,54)"/><text x="14.2771%" y="271.50"></text></g><g><title>death_checking (568,126 samples, 0.36%)</title><rect x="14.2108%" y="261" width="0.3606%" height="15" fill="rgb(245,192,40)"/><text x="14.4608%" y="271.50"></text></g><g><title>param_env (308,584 samples, 0.20%)</title><rect x="15.3304%" y="229" width="0.1959%" height="15" fill="rgb(238,167,29)"/><text x="15.5804%" y="239.50"></text></g><g><title>crate_lints (2,631,829 samples, 1.67%)</title><rect x="14.5726%" y="245" width="1.6707%" height="15" fill="rgb(232,182,51)"/><text x="14.8226%" y="255.50"></text></g><g><title>type_of (1,085,154 samples, 0.69%)</title><rect x="15.5544%" y="229" width="0.6889%" height="15" fill="rgb(231,60,39)"/><text x="15.8044%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (855,151 samples, 0.54%)</title><rect x="15.7004%" y="213" width="0.5429%" height="15" fill="rgb(208,69,12)"/><text x="15.9504%" y="223.50"></text></g><g><title>lint_checking (3,193,095 samples, 2.03%)</title><rect x="14.5715%" y="261" width="2.0270%" height="15" fill="rgb(235,93,37)"/><text x="14.8215%" y="271.50">l..</text></g><g><title>module_lints (559,536 samples, 0.36%)</title><rect x="16.2433%" y="245" width="0.3552%" height="15" fill="rgb(213,116,39)"/><text x="16.4933%" y="255.50"></text></g><g><title>lint_mod (554,196 samples, 0.35%)</title><rect x="16.2466%" y="229" width="0.3518%" height="15" fill="rgb(222,207,29)"/><text x="16.4966%" y="239.50"></text></g><g><title>privacy_access_levels (581,866 samples, 0.37%)</title><rect x="16.5985%" y="261" width="0.3694%" height="15" fill="rgb(206,96,30)"/><text x="16.8485%" y="271.50"></text></g><g><title>privacy_checking_modules (1,140,323 samples, 0.72%)</title><rect x="16.9678%" y="261" width="0.7239%" height="15" fill="rgb(218,138,4)"/><text x="17.2178%" y="271.50"></text></g><g><title>check_mod_privacy (1,136,243 samples, 0.72%)</title><rect x="16.9704%" y="245" width="0.7213%" height="15" fill="rgb(250,191,14)"/><text x="17.2204%" y="255.50"></text></g><g><title>misc_checking_3 (5,793,754 samples, 3.68%)</title><rect x="14.0223%" y="277" width="3.6779%" height="15" fill="rgb(239,60,40)"/><text x="14.2723%" y="287.50">misc..</text></g><g><title>impl_parent (1,768,699 samples, 1.12%)</title><rect x="19.6874%" y="213" width="1.1228%" height="15" fill="rgb(206,27,48)"/><text x="19.9374%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,092,168 samples, 0.69%)</title><rect x="20.1168%" y="197" width="0.6933%" height="15" fill="rgb(225,35,8)"/><text x="20.3668%" y="207.50"></text></g><g><title>impl_trait_ref (4,487,399 samples, 2.85%)</title><rect x="20.8112%" y="213" width="2.8486%" height="15" fill="rgb(250,213,24)"/><text x="21.0612%" y="223.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,838,234 samples, 2.44%)</title><rect x="21.2233%" y="197" width="2.4365%" height="15" fill="rgb(247,123,22)"/><text x="21.4733%" y="207.50">me..</text></g><g><title>trait_impls_of (576,197 samples, 0.37%)</title><rect x="23.6801%" y="213" width="0.3658%" height="15" fill="rgb(231,138,38)"/><text x="23.9301%" y="223.50"></text></g><g><title>implementations_of_trait (171,880 samples, 0.11%)</title><rect x="23.9368%" y="197" width="0.1091%" height="15" fill="rgb(231,145,46)"/><text x="24.1868%" y="207.50"></text></g><g><title>coherent_trait (9,902,529 samples, 6.29%)</title><rect x="17.7603%" y="245" width="6.2862%" height="15" fill="rgb(251,118,11)"/><text x="18.0103%" y="255.50">coherent..</text></g><g><title>specialization_graph_of (9,883,429 samples, 6.27%)</title><rect x="17.7725%" y="229" width="6.2740%" height="15" fill="rgb(217,147,25)"/><text x="18.0225%" y="239.50">speciali..</text></g><g><title>coherence_checking (9,996,981 samples, 6.35%)</title><rect x="17.7506%" y="261" width="6.3461%" height="15" fill="rgb(247,81,37)"/><text x="18.0006%" y="271.50">coherenc..</text></g><g><title>dropck_outlives (258,242 samples, 0.16%)</title><rect x="34.2969%" y="213" width="0.1639%" height="15" fill="rgb(209,12,38)"/><text x="34.5469%" y="223.50"></text></g><g><title>evaluate_obligation (628,145 samples, 0.40%)</title><rect x="34.4608%" y="213" width="0.3987%" height="15" fill="rgb(227,1,9)"/><text x="34.7108%" y="223.50"></text></g><g><title>predicates_of (180,041 samples, 0.11%)</title><rect x="35.2558%" y="213" width="0.1143%" height="15" fill="rgb(248,47,43)"/><text x="35.5058%" y="223.50"></text></g><g><title>item_bodies_checking (17,819,507 samples, 11.31%)</title><rect x="24.1281%" y="261" width="11.3119%" height="15" fill="rgb(221,10,30)"/><text x="24.3781%" y="271.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (17,816,457 samples, 11.31%)</title><rect x="24.1300%" y="245" width="11.3100%" height="15" fill="rgb(210,229,1)"/><text x="24.3800%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (17,719,635 samples, 11.25%)</title><rect x="24.1915%" y="229" width="11.2485%" height="15" fill="rgb(222,148,37)"/><text x="24.4415%" y="239.50">typeck</text></g><g><title>explicit_item_bounds (180,591 samples, 0.11%)</title><rect x="36.5983%" y="229" width="0.1146%" height="15" fill="rgb(234,67,33)"/><text x="36.8483%" y="239.50"></text></g><g><title>mir_borrowck (348,023 samples, 0.22%)</title><rect x="42.9768%" y="181" width="0.2209%" height="15" fill="rgb(247,98,35)"/><text x="43.2268%" y="191.50"></text></g><g><title>mir_const (621,247 samples, 0.39%)</title><rect x="43.4781%" y="165" width="0.3944%" height="15" fill="rgb(247,138,52)"/><text x="43.7281%" y="175.50"></text></g><g><title>mir_promoted (1,069,920 samples, 0.68%)</title><rect x="43.1977%" y="181" width="0.6792%" height="15" fill="rgb(213,79,30)"/><text x="43.4477%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (319,164 samples, 0.20%)</title><rect x="43.8894%" y="181" width="0.2026%" height="15" fill="rgb(246,177,23)"/><text x="44.1394%" y="191.50"></text></g><g><title>normalize_projection_ty (177,392 samples, 0.11%)</title><rect x="43.9794%" y="165" width="0.1126%" height="15" fill="rgb(230,62,27)"/><text x="44.2294%" y="175.50"></text></g><g><title>type_op_prove_predicate (595,356 samples, 0.38%)</title><rect x="44.1316%" y="181" width="0.3779%" height="15" fill="rgb(216,154,8)"/><text x="44.3816%" y="191.50"></text></g><g><title>mir_borrowck (9,591,214 samples, 6.09%)</title><rect x="38.4243%" y="197" width="6.0885%" height="15" fill="rgb(244,35,45)"/><text x="38.6743%" y="207.50">mir_borr..</text></g><g><title>associated_item (716,688 samples, 0.45%)</title><rect x="54.6941%" y="101" width="0.4550%" height="15" fill="rgb(251,115,12)"/><text x="54.9441%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (641,357 samples, 0.41%)</title><rect x="54.7419%" y="85" width="0.4071%" height="15" fill="rgb(240,54,50)"/><text x="54.9919%" y="95.50"></text></g><g><title>associated_items (865,980 samples, 0.55%)</title><rect x="54.6142%" y="117" width="0.5497%" height="15" fill="rgb(233,84,52)"/><text x="54.8642%" y="127.50"></text></g><g><title>adt_def (163,242 samples, 0.10%)</title><rect x="55.3797%" y="85" width="0.1036%" height="15" fill="rgb(207,117,47)"/><text x="55.6297%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (159,842 samples, 0.10%)</title><rect x="55.3818%" y="69" width="0.1015%" height="15" fill="rgb(249,43,39)"/><text x="55.6318%" y="79.50"></text></g><g><title>adt_destructor (265,663 samples, 0.17%)</title><rect x="55.6196%" y="69" width="0.1686%" height="15" fill="rgb(209,38,44)"/><text x="55.8696%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_destructor (248,353 samples, 0.16%)</title><rect x="55.6305%" y="53" width="0.1577%" height="15" fill="rgb(236,212,23)"/><text x="55.8805%" y="63.50"></text></g><g><title>type_of (235,783 samples, 0.15%)</title><rect x="55.6385%" y="37" width="0.1497%" height="15" fill="rgb(242,79,21)"/><text x="55.8885%" y="47.50"></text></g><g><title>adt_dtorck_constraint (572,776 samples, 0.36%)</title><rect x="55.5468%" y="85" width="0.3636%" height="15" fill="rgb(211,96,35)"/><text x="55.7968%" y="95.50"></text></g><g><title>dropck_outlives (1,179,864 samples, 0.75%)</title><rect x="55.1923%" y="117" width="0.7490%" height="15" fill="rgb(253,215,40)"/><text x="55.4423%" y="127.50"></text></g><g><title>adt_dtorck_constraint (959,841 samples, 0.61%)</title><rect x="55.3320%" y="101" width="0.6093%" height="15" fill="rgb(211,81,21)"/><text x="55.5820%" y="111.50"></text></g><g><title>adt_sized_constraint (157,942 samples, 0.10%)</title><rect x="56.7961%" y="101" width="0.1003%" height="15" fill="rgb(208,190,38)"/><text x="57.0461%" y="111.50"></text></g><g><title>generics_of (262,157 samples, 0.17%)</title><rect x="56.8964%" y="101" width="0.1664%" height="15" fill="rgb(235,213,38)"/><text x="57.1464%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (205,516 samples, 0.13%)</title><rect x="56.9323%" y="85" width="0.1305%" height="15" fill="rgb(237,122,38)"/><text x="57.1823%" y="95.50"></text></g><g><title>impl_trait_ref (306,052 samples, 0.19%)</title><rect x="57.0991%" y="101" width="0.1943%" height="15" fill="rgb(244,218,35)"/><text x="57.3491%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (245,501 samples, 0.16%)</title><rect x="57.1375%" y="85" width="0.1558%" height="15" fill="rgb(240,68,47)"/><text x="57.3875%" y="95.50"></text></g><g><title>predicates_of (172,021 samples, 0.11%)</title><rect x="57.3081%" y="101" width="0.1092%" height="15" fill="rgb(210,16,53)"/><text x="57.5581%" y="111.50"></text></g><g><title>specializes (366,994 samples, 0.23%)</title><rect x="57.4173%" y="101" width="0.2330%" height="15" fill="rgb(235,124,12)"/><text x="57.6673%" y="111.50"></text></g><g><title>param_env (225,623 samples, 0.14%)</title><rect x="57.5070%" y="85" width="0.1432%" height="15" fill="rgb(224,169,11)"/><text x="57.7570%" y="95.50"></text></g><g><title>trait_impls_of (388,165 samples, 0.25%)</title><rect x="57.6602%" y="101" width="0.2464%" height="15" fill="rgb(250,166,2)"/><text x="57.9102%" y="111.50"></text></g><g><title>implementations_of_trait (171,351 samples, 0.11%)</title><rect x="57.7978%" y="85" width="0.1088%" height="15" fill="rgb(242,216,29)"/><text x="58.0478%" y="95.50"></text></g><g><title>evaluate_obligation (3,103,818 samples, 1.97%)</title><rect x="55.9436%" y="117" width="1.9703%" height="15" fill="rgb(230,116,27)"/><text x="56.1936%" y="127.50">e..</text></g><g><title>is_copy_raw (535,376 samples, 0.34%)</title><rect x="58.2096%" y="117" width="0.3399%" height="15" fill="rgb(228,99,48)"/><text x="58.4596%" y="127.50"></text></g><g><title>evaluate_obligation (438,305 samples, 0.28%)</title><rect x="58.2712%" y="101" width="0.2782%" height="15" fill="rgb(253,11,6)"/><text x="58.5212%" y="111.50"></text></g><g><title>method_autoderef_steps (171,883 samples, 0.11%)</title><rect x="58.7572%" y="117" width="0.1091%" height="15" fill="rgb(247,143,39)"/><text x="59.0072%" y="127.50"></text></g><g><title>predicates_of (276,451 samples, 0.18%)</title><rect x="58.9158%" y="117" width="0.1755%" height="15" fill="rgb(236,97,10)"/><text x="59.1658%" y="127.50"></text></g><g><title>predicates_defined_on (192,491 samples, 0.12%)</title><rect x="58.9691%" y="101" width="0.1222%" height="15" fill="rgb(233,208,19)"/><text x="59.2191%" y="111.50"></text></g><g><title>mir_built (23,011,686 samples, 14.61%)</title><rect x="44.7209%" y="149" width="14.6079%" height="15" fill="rgb(216,164,2)"/><text x="44.9709%" y="159.50">mir_built</text></g><g><title>typeck (22,291,959 samples, 14.15%)</title><rect x="45.1778%" y="133" width="14.1510%" height="15" fill="rgb(220,129,5)"/><text x="45.4278%" y="143.50">typeck</text></g><g><title>codegen_fn_attrs (182,472 samples, 0.12%)</title><rect x="59.4924%" y="133" width="0.1158%" height="15" fill="rgb(242,17,10)"/><text x="59.7424%" y="143.50"></text></g><g><title>is_copy_raw (167,932 samples, 0.11%)</title><rect x="60.7388%" y="101" width="0.1066%" height="15" fill="rgb(242,107,0)"/><text x="60.9888%" y="111.50"></text></g><g><title>needs_drop_raw (248,982 samples, 0.16%)</title><rect x="60.6878%" y="117" width="0.1581%" height="15" fill="rgb(251,28,31)"/><text x="60.9378%" y="127.50"></text></g><g><title>thir_body (575,745 samples, 0.37%)</title><rect x="60.8597%" y="117" width="0.3655%" height="15" fill="rgb(233,223,10)"/><text x="61.1097%" y="127.50"></text></g><g><title>mir_built (2,561,558 samples, 1.63%)</title><rect x="59.6083%" y="133" width="1.6261%" height="15" fill="rgb(215,21,27)"/><text x="59.8583%" y="143.50"></text></g><g><title>mir_const (26,376,712 samples, 16.74%)</title><rect x="44.5856%" y="181" width="16.7441%" height="15" fill="rgb(232,23,21)"/><text x="44.8356%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (26,217,422 samples, 16.64%)</title><rect x="44.6867%" y="165" width="16.6429%" height="15" fill="rgb(244,5,23)"/><text x="44.9367%" y="175.50">unsafety_check_result</text></g><g><title>unsafety_check_result (3,151,786 samples, 2.00%)</title><rect x="59.3289%" y="149" width="2.0008%" height="15" fill="rgb(226,81,46)"/><text x="59.5789%" y="159.50">u..</text></g><g><title>mir_promoted (26,505,383 samples, 16.83%)</title><rect x="44.5129%" y="197" width="16.8257%" height="15" fill="rgb(247,70,30)"/><text x="44.7629%" y="207.50">mir_promoted</text></g><g><title>type_of (39,491,086 samples, 25.07%)</title><rect x="36.7866%" y="229" width="25.0691%" height="15" fill="rgb(212,68,19)"/><text x="37.0366%" y="239.50">type_of</text></g><g><title>mir_borrowck (39,466,836 samples, 25.05%)</title><rect x="36.8020%" y="213" width="25.0537%" height="15" fill="rgb(240,187,13)"/><text x="37.0520%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (574,616 samples, 0.36%)</title><rect x="61.4909%" y="197" width="0.3648%" height="15" fill="rgb(223,113,26)"/><text x="61.7409%" y="207.50"></text></g><g><title>item_types_checking (41,646,470 samples, 26.44%)</title><rect x="35.4400%" y="261" width="26.4374%" height="15" fill="rgb(206,192,2)"/><text x="35.6900%" y="271.50">item_types_checking</text></g><g><title>check_mod_item_types (41,637,730 samples, 26.43%)</title><rect x="35.4455%" y="245" width="26.4318%" height="15" fill="rgb(241,108,4)"/><text x="35.6955%" y="255.50">check_mod_item_types</text></g><g><title>fn_sig (413,225 samples, 0.26%)</title><rect x="62.1231%" y="229" width="0.2623%" height="15" fill="rgb(247,173,49)"/><text x="62.3731%" y="239.50"></text></g><g><title>is_late_bound_map (308,336 samples, 0.20%)</title><rect x="62.4935%" y="213" width="0.1957%" height="15" fill="rgb(224,114,35)"/><text x="62.7435%" y="223.50"></text></g><g><title>resolve_lifetimes (275,013 samples, 0.17%)</title><rect x="62.5147%" y="197" width="0.1746%" height="15" fill="rgb(245,159,27)"/><text x="62.7647%" y="207.50"></text></g><g><title>named_region_map (195,083 samples, 0.12%)</title><rect x="62.6893%" y="213" width="0.1238%" height="15" fill="rgb(245,172,44)"/><text x="62.9393%" y="223.50"></text></g><g><title>resolve_lifetimes (178,551 samples, 0.11%)</title><rect x="62.6998%" y="197" width="0.1133%" height="15" fill="rgb(236,23,11)"/><text x="62.9498%" y="207.50"></text></g><g><title>generics_of (692,660 samples, 0.44%)</title><rect x="62.3855%" y="229" width="0.4397%" height="15" fill="rgb(205,117,38)"/><text x="62.6355%" y="239.50"></text></g><g><title>explicit_predicates_of (362,225 samples, 0.23%)</title><rect x="62.9923%" y="197" width="0.2299%" height="15" fill="rgb(237,72,25)"/><text x="63.2423%" y="207.50"></text></g><g><title>predicates_of (909,640 samples, 0.58%)</title><rect x="62.8718%" y="229" width="0.5774%" height="15" fill="rgb(244,70,9)"/><text x="63.1218%" y="239.50"></text></g><g><title>predicates_defined_on (840,120 samples, 0.53%)</title><rect x="62.9159%" y="213" width="0.5333%" height="15" fill="rgb(217,125,39)"/><text x="63.1659%" y="223.50"></text></g><g><title>inferred_outlives_of (357,604 samples, 0.23%)</title><rect x="63.2222%" y="197" width="0.2270%" height="15" fill="rgb(235,36,10)"/><text x="63.4722%" y="207.50"></text></g><g><title>inferred_outlives_crate (330,504 samples, 0.21%)</title><rect x="63.2394%" y="181" width="0.2098%" height="15" fill="rgb(251,123,47)"/><text x="63.4894%" y="191.50"></text></g><g><title>type_of (173,962 samples, 0.11%)</title><rect x="63.3388%" y="165" width="0.1104%" height="15" fill="rgb(221,13,13)"/><text x="63.5888%" y="175.50"></text></g><g><title>type_collecting (2,644,419 samples, 1.68%)</title><rect x="61.8791%" y="261" width="1.6787%" height="15" fill="rgb(238,131,9)"/><text x="62.1291%" y="271.50"></text></g><g><title>collect_mod_item_types (2,633,379 samples, 1.67%)</title><rect x="61.8861%" y="245" width="1.6717%" height="15" fill="rgb(211,50,8)"/><text x="62.1361%" y="255.50"></text></g><g><title>type_of (171,080 samples, 0.11%)</title><rect x="63.4492%" y="229" width="0.1086%" height="15" fill="rgb(245,182,24)"/><text x="63.6992%" y="239.50"></text></g><g><title>evaluate_obligation (854,099 samples, 0.54%)</title><rect x="65.4246%" y="229" width="0.5422%" height="15" fill="rgb(242,14,37)"/><text x="65.6746%" y="239.50"></text></g><g><title>implied_outlives_bounds (440,268 samples, 0.28%)</title><rect x="65.9759%" y="229" width="0.2795%" height="15" fill="rgb(246,228,12)"/><text x="66.2259%" y="239.50"></text></g><g><title>param_env (344,382 samples, 0.22%)</title><rect x="66.2554%" y="229" width="0.2186%" height="15" fill="rgb(213,55,15)"/><text x="66.5054%" y="239.50"></text></g><g><title>region_scope_tree (643,318 samples, 0.41%)</title><rect x="66.4857%" y="229" width="0.4084%" height="15" fill="rgb(209,9,3)"/><text x="66.7357%" y="239.50"></text></g><g><title>check_impl_item_well_formed (4,948,481 samples, 3.14%)</title><rect x="63.7532%" y="245" width="3.1413%" height="15" fill="rgb(230,59,30)"/><text x="64.0032%" y="255.50">che..</text></g><g><title>evaluate_obligation (160,541 samples, 0.10%)</title><rect x="68.3654%" y="229" width="0.1019%" height="15" fill="rgb(209,121,21)"/><text x="68.6154%" y="239.50"></text></g><g><title>implied_outlives_bounds (208,224 samples, 0.13%)</title><rect x="68.4852%" y="229" width="0.1322%" height="15" fill="rgb(220,109,13)"/><text x="68.7352%" y="239.50"></text></g><g><title>param_env (450,325 samples, 0.29%)</title><rect x="68.6176%" y="229" width="0.2859%" height="15" fill="rgb(232,18,1)"/><text x="68.8676%" y="239.50"></text></g><g><title>analysis (108,378,398 samples, 68.80%)</title><rect x="0.3193%" y="293" width="68.7991%" height="15" fill="rgb(215,41,42)"/><text x="0.5693%" y="303.50">analysis</text></g><g><title>type_check_crate (80,998,345 samples, 51.42%)</title><rect x="17.7002%" y="277" width="51.4181%" height="15" fill="rgb(224,123,36)"/><text x="17.9502%" y="287.50">type_check_crate</text></g><g><title>wf_checking (8,752,087 samples, 5.56%)</title><rect x="63.5625%" y="261" width="5.5559%" height="15" fill="rgb(240,125,3)"/><text x="63.8125%" y="271.50">wf_chec..</text></g><g><title>check_item_well_formed (3,503,184 samples, 2.22%)</title><rect x="66.8946%" y="245" width="2.2238%" height="15" fill="rgb(205,98,50)"/><text x="67.1446%" y="255.50">c..</text></g><g><title>codegen_crate (346,404 samples, 0.22%)</title><rect x="69.1228%" y="293" width="0.2199%" height="15" fill="rgb(205,185,37)"/><text x="69.3728%" y="303.50"></text></g><g><title>AST_validation (247,483 samples, 0.16%)</title><rect x="69.4389%" y="277" width="0.1571%" height="15" fill="rgb(238,207,15)"/><text x="69.6889%" y="287.50"></text></g><g><title>metadata_register_crate (2,502,839 samples, 1.59%)</title><rect x="82.2743%" y="245" width="1.5888%" height="15" fill="rgb(213,199,42)"/><text x="82.5243%" y="255.50"></text></g><g><title>metadata_register_crate (1,023,792 samples, 0.65%)</title><rect x="83.2132%" y="229" width="0.6499%" height="15" fill="rgb(235,201,11)"/><text x="83.4632%" y="239.50"></text></g><g><title>macro_expand_crate (22,674,231 samples, 14.39%)</title><rect x="69.7128%" y="277" width="14.3937%" height="15" fill="rgb(207,46,11)"/><text x="69.9628%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (22,654,931 samples, 14.38%)</title><rect x="69.7251%" y="261" width="14.3815%" height="15" fill="rgb(241,35,35)"/><text x="69.9751%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (383,445 samples, 0.24%)</title><rect x="83.8631%" y="245" width="0.2434%" height="15" fill="rgb(243,32,47)"/><text x="84.1131%" y="255.50"></text></g><g><title>finalize_imports (165,581 samples, 0.11%)</title><rect x="84.1645%" y="261" width="0.1051%" height="15" fill="rgb(247,202,23)"/><text x="84.4145%" y="271.50"></text></g><g><title>late_resolve_crate (3,653,831 samples, 2.32%)</title><rect x="84.3338%" y="261" width="2.3195%" height="15" fill="rgb(219,102,11)"/><text x="84.5838%" y="271.50">l..</text></g><g><title>configure_and_expand (27,491,234 samples, 17.45%)</title><rect x="69.3427%" y="293" width="17.4516%" height="15" fill="rgb(243,110,44)"/><text x="69.5927%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (4,150,876 samples, 2.63%)</title><rect x="84.1593%" y="277" width="2.6350%" height="15" fill="rgb(222,74,54)"/><text x="84.4093%" y="287.50">re..</text></g><g><title>drop_ast (175,222 samples, 0.11%)</title><rect x="86.7943%" y="293" width="0.1112%" height="15" fill="rgb(216,99,12)"/><text x="87.0443%" y="303.50"></text></g><g><title>early_lint_checks (378,024 samples, 0.24%)</title><rect x="86.9142%" y="293" width="0.2400%" height="15" fill="rgb(226,22,26)"/><text x="87.1642%" y="303.50"></text></g><g><title>free_global_ctxt (3,607,439 samples, 2.29%)</title><rect x="87.1542%" y="293" width="2.2900%" height="15" fill="rgb(217,163,10)"/><text x="87.4042%" y="303.50">f..</text></g><g><title>layout_of (241,812 samples, 0.15%)</title><rect x="93.3969%" y="261" width="0.1535%" height="15" fill="rgb(213,25,53)"/><text x="93.6469%" y="271.50"></text></g><g><title>layout_of (177,712 samples, 0.11%)</title><rect x="93.4376%" y="245" width="0.1128%" height="15" fill="rgb(252,105,26)"/><text x="93.6876%" y="255.50"></text></g><g><title>is_copy_raw (422,666 samples, 0.27%)</title><rect x="95.8095%" y="229" width="0.2683%" height="15" fill="rgb(220,39,43)"/><text x="96.0595%" y="239.50"></text></g><g><title>evaluate_obligation (347,135 samples, 0.22%)</title><rect x="95.8574%" y="213" width="0.2204%" height="15" fill="rgb(229,68,48)"/><text x="96.1074%" y="223.50"></text></g><g><title>needs_drop_raw (520,407 samples, 0.33%)</title><rect x="95.7489%" y="245" width="0.3304%" height="15" fill="rgb(252,8,32)"/><text x="95.9989%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,032,886 samples, 2.56%)</title><rect x="93.5504%" y="261" width="2.5601%" height="15" fill="rgb(223,20,43)"/><text x="93.8004%" y="271.50">mi..</text></g><g><title>optimized_mir (8,326,350 samples, 5.29%)</title><rect x="90.8302%" y="277" width="5.2856%" height="15" fill="rgb(229,81,49)"/><text x="91.0802%" y="287.50">optimi..</text></g><g><title>generate_crate_metadata (10,548,496 samples, 6.70%)</title><rect x="89.4442%" y="293" width="6.6962%" height="15" fill="rgb(236,28,36)"/><text x="89.6942%" y="303.50">generate_..</text></g><g><title>hir_lowering (4,069,855 samples, 2.58%)</title><rect x="96.1404%" y="293" width="2.5836%" height="15" fill="rgb(249,185,26)"/><text x="96.3904%" y="303.50">hi..</text></g><g><title>parse_crate (288,183 samples, 0.18%)</title><rect x="98.7645%" y="293" width="0.1829%" height="15" fill="rgb(249,174,33)"/><text x="99.0145%" y="303.50"></text></g><g><title>prepare_outputs (264,723 samples, 0.17%)</title><rect x="98.9519%" y="293" width="0.1680%" height="15" fill="rgb(233,201,37)"/><text x="99.2019%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (861,840 samples, 0.55%)</title><rect x="99.1200%" y="293" width="0.5471%" height="15" fill="rgb(221,78,26)"/><text x="99.3700%" y="303.50"></text></g><g><title>all (157,528,721 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (157,528,721 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (445,185 samples, 0.28%)</title><rect x="99.7174%" y="293" width="0.2826%" height="15" fill="rgb(229,67,23)"/><text x="99.9674%" y="303.50"></text></g></svg></svg>