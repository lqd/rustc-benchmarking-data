<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (2,418,013 samples, 0.11%)</title><rect x="19.6384%" y="133" width="0.1095%" height="15" fill="rgb(227,0,7)"/><text x="19.8884%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,832,030 samples, 0.13%)</title><rect x="20.3749%" y="117" width="0.1282%" height="15" fill="rgb(217,0,24)"/><text x="20.6249%" y="127.50"></text></g><g><title>is_copy_raw (14,200,886 samples, 0.64%)</title><rect x="24.4367%" y="85" width="0.6430%" height="15" fill="rgb(221,193,54)"/><text x="24.6867%" y="95.50"></text></g><g><title>evaluate_obligation (11,522,442 samples, 0.52%)</title><rect x="24.5579%" y="69" width="0.5217%" height="15" fill="rgb(248,212,6)"/><text x="24.8079%" y="79.50"></text></g><g><title>needs_drop_raw (18,411,155 samples, 0.83%)</title><rect x="24.2469%" y="101" width="0.8336%" height="15" fill="rgb(208,68,35)"/><text x="24.4969%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (7,172,451 samples, 0.32%)</title><rect x="25.2705%" y="85" width="0.3248%" height="15" fill="rgb(232,128,0)"/><text x="25.5205%" y="95.50"></text></g><g><title>resolve_instance (13,725,024 samples, 0.62%)</title><rect x="25.0822%" y="101" width="0.6215%" height="15" fill="rgb(207,160,47)"/><text x="25.3322%" y="111.50"></text></g><g><title>thir_body (35,825,789 samples, 1.62%)</title><rect x="25.7385%" y="101" width="1.6222%" height="15" fill="rgb(228,23,34)"/><text x="25.9885%" y="111.50"></text></g><g><title>mir_const (192,560,287 samples, 8.72%)</title><rect x="18.6617%" y="149" width="8.7189%" height="15" fill="rgb(218,30,26)"/><text x="18.9117%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (168,571,183 samples, 7.63%)</title><rect x="19.7479%" y="133" width="7.6327%" height="15" fill="rgb(220,122,19)"/><text x="19.9979%" y="143.50">unsafety_c..</text></g><g><title>mir_built (151,889,823 samples, 6.88%)</title><rect x="20.5032%" y="117" width="6.8774%" height="15" fill="rgb(250,228,42)"/><text x="20.7532%" y="127.50">mir_built</text></g><g><title>mir_const (2,777,675 samples, 0.13%)</title><rect x="27.4999%" y="133" width="0.1258%" height="15" fill="rgb(240,193,28)"/><text x="27.7499%" y="143.50"></text></g><g><title>unsafety_check_result (2,239,529 samples, 0.10%)</title><rect x="27.5243%" y="117" width="0.1014%" height="15" fill="rgb(216,20,37)"/><text x="27.7743%" y="127.50"></text></g><g><title>mir_const_qualif (5,425,085 samples, 0.25%)</title><rect x="27.3806%" y="149" width="0.2456%" height="15" fill="rgb(206,188,39)"/><text x="27.6306%" y="159.50"></text></g><g><title>mir_promoted (221,390,626 samples, 10.02%)</title><rect x="17.6020%" y="165" width="10.0243%" height="15" fill="rgb(217,207,13)"/><text x="17.8520%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (7,261,029 samples, 0.33%)</title><rect x="27.6270%" y="165" width="0.3288%" height="15" fill="rgb(231,73,38)"/><text x="27.8770%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (10,196,161 samples, 0.46%)</title><rect x="27.9558%" y="165" width="0.4617%" height="15" fill="rgb(225,20,46)"/><text x="28.2058%" y="175.50"></text></g><g><title>normalize_projection_ty (6,501,058 samples, 0.29%)</title><rect x="28.1231%" y="149" width="0.2944%" height="15" fill="rgb(210,31,41)"/><text x="28.3731%" y="159.50"></text></g><g><title>type_op_normalize_predicate (6,839,444 samples, 0.31%)</title><rect x="28.4175%" y="165" width="0.3097%" height="15" fill="rgb(221,200,47)"/><text x="28.6675%" y="175.50"></text></g><g><title>normalize_projection_ty (3,742,065 samples, 0.17%)</title><rect x="28.5577%" y="149" width="0.1694%" height="15" fill="rgb(226,26,5)"/><text x="28.8077%" y="159.50"></text></g><g><title>type_op_prove_predicate (43,619,427 samples, 1.98%)</title><rect x="28.7411%" y="165" width="1.9750%" height="15" fill="rgb(249,33,26)"/><text x="28.9911%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (670,622,495 samples, 30.37%)</title><rect x="0.3528%" y="197" width="30.3651%" height="15" fill="rgb(235,183,28)"/><text x="0.6028%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (667,507,217 samples, 30.22%)</title><rect x="0.4939%" y="181" width="30.2240%" height="15" fill="rgb(221,5,38)"/><text x="0.7439%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,220,745 samples, 0.10%)</title><rect x="30.7179%" y="197" width="0.1006%" height="15" fill="rgb(247,18,42)"/><text x="30.9679%" y="207.50"></text></g><g><title>hir_module_items (4,344,162 samples, 0.20%)</title><rect x="30.8184%" y="197" width="0.1967%" height="15" fill="rgb(241,131,45)"/><text x="31.0684%" y="207.50"></text></g><g><title>codegen_fn_attrs (3,655,436 samples, 0.17%)</title><rect x="31.2928%" y="165" width="0.1655%" height="15" fill="rgb(249,31,29)"/><text x="31.5428%" y="175.50"></text></g><g><title>should_inherit_track_caller (3,017,386 samples, 0.14%)</title><rect x="31.3217%" y="149" width="0.1366%" height="15" fill="rgb(225,111,53)"/><text x="31.5717%" y="159.50"></text></g><g><title>check_mod_attrs (9,395,498 samples, 0.43%)</title><rect x="31.0329%" y="181" width="0.4254%" height="15" fill="rgb(238,160,17)"/><text x="31.2829%" y="191.50"></text></g><g><title>check_mod_const_bodies (2,483,646 samples, 0.11%)</title><rect x="31.4583%" y="181" width="0.1125%" height="15" fill="rgb(214,148,48)"/><text x="31.7083%" y="191.50"></text></g><g><title>check_mod_loops (2,641,937 samples, 0.12%)</title><rect x="31.5708%" y="181" width="0.1196%" height="15" fill="rgb(232,36,49)"/><text x="31.8208%" y="191.50"></text></g><g><title>lookup_deprecation_entry (3,803,981 samples, 0.17%)</title><rect x="31.8162%" y="165" width="0.1722%" height="15" fill="rgb(209,103,24)"/><text x="32.0662%" y="175.50"></text></g><g><title>stability_index (3,573,750 samples, 0.16%)</title><rect x="31.8266%" y="149" width="0.1618%" height="15" fill="rgb(229,88,8)"/><text x="32.0766%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (6,543,403 samples, 0.30%)</title><rect x="31.7033%" y="181" width="0.2963%" height="15" fill="rgb(213,181,19)"/><text x="31.9533%" y="191.50"></text></g><g><title>misc_checking_1 (22,678,393 samples, 1.03%)</title><rect x="31.0152%" y="197" width="1.0269%" height="15" fill="rgb(254,191,54)"/><text x="31.2652%" y="207.50"></text></g><g><title>check_mod_intrinsics (2,550,896 samples, 0.12%)</title><rect x="32.0455%" y="165" width="0.1155%" height="15" fill="rgb(241,83,37)"/><text x="32.2955%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (13,111,706 samples, 0.59%)</title><rect x="32.0422%" y="181" width="0.5937%" height="15" fill="rgb(233,36,39)"/><text x="32.2922%" y="191.50"></text></g><g><title>check_mod_liveness (10,487,209 samples, 0.47%)</title><rect x="32.1610%" y="165" width="0.4748%" height="15" fill="rgb(226,3,54)"/><text x="32.4110%" y="175.50"></text></g><g><title>misc_checking_2 (46,115,085 samples, 2.09%)</title><rect x="32.0420%" y="197" width="2.0880%" height="15" fill="rgb(245,192,40)"/><text x="32.2920%" y="207.50">m..</text></g><g><title>match_checking (33,000,099 samples, 1.49%)</title><rect x="32.6358%" y="181" width="1.4942%" height="15" fill="rgb(238,167,29)"/><text x="32.8858%" y="191.50"></text></g><g><title>check_match (31,960,706 samples, 1.45%)</title><rect x="32.6829%" y="165" width="1.4471%" height="15" fill="rgb(232,182,51)"/><text x="32.9329%" y="175.50"></text></g><g><title>check_private_in_public (7,979,178 samples, 0.36%)</title><rect x="34.1312%" y="181" width="0.3613%" height="15" fill="rgb(231,60,39)"/><text x="34.3812%" y="191.50"></text></g><g><title>death_checking (12,220,557 samples, 0.55%)</title><rect x="34.4924%" y="181" width="0.5533%" height="15" fill="rgb(208,69,12)"/><text x="34.7424%" y="191.50"></text></g><g><title>eval_to_const_value_raw (2,695,231 samples, 0.12%)</title><rect x="35.7153%" y="101" width="0.1220%" height="15" fill="rgb(235,93,37)"/><text x="35.9653%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,680,381 samples, 0.12%)</title><rect x="35.7160%" y="85" width="0.1214%" height="15" fill="rgb(213,116,39)"/><text x="35.9660%" y="95.50"></text></g><g><title>eval_to_allocation_raw (2,645,910 samples, 0.12%)</title><rect x="35.7176%" y="69" width="0.1198%" height="15" fill="rgb(222,207,29)"/><text x="35.9676%" y="79.50"></text></g><g><title>eval_to_allocation_raw (4,422,162 samples, 0.20%)</title><rect x="35.6383%" y="149" width="0.2002%" height="15" fill="rgb(206,96,30)"/><text x="35.8883%" y="159.50"></text></g><g><title>eval_to_allocation_raw (4,391,772 samples, 0.20%)</title><rect x="35.6397%" y="133" width="0.1989%" height="15" fill="rgb(218,138,4)"/><text x="35.8897%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,803,253 samples, 0.13%)</title><rect x="35.7116%" y="117" width="0.1269%" height="15" fill="rgb(250,191,14)"/><text x="35.9616%" y="127.50"></text></g><g><title>param_env (6,323,305 samples, 0.29%)</title><rect x="35.8479%" y="149" width="0.2863%" height="15" fill="rgb(239,60,40)"/><text x="36.0979%" y="159.50"></text></g><g><title>predicates_of (3,050,659 samples, 0.14%)</title><rect x="35.9961%" y="133" width="0.1381%" height="15" fill="rgb(206,27,48)"/><text x="36.2461%" y="143.50"></text></g><g><title>predicates_defined_on (2,526,705 samples, 0.11%)</title><rect x="36.0198%" y="117" width="0.1144%" height="15" fill="rgb(225,35,8)"/><text x="36.2698%" y="127.50"></text></g><g><title>crate_lints (26,381,545 samples, 1.19%)</title><rect x="35.0460%" y="165" width="1.1945%" height="15" fill="rgb(250,213,24)"/><text x="35.2960%" y="175.50"></text></g><g><title>lint_checking (43,884,090 samples, 1.99%)</title><rect x="35.0458%" y="181" width="1.9870%" height="15" fill="rgb(247,123,22)"/><text x="35.2958%" y="191.50">l..</text></g><g><title>module_lints (17,498,545 samples, 0.79%)</title><rect x="36.2405%" y="165" width="0.7923%" height="15" fill="rgb(231,138,38)"/><text x="36.4905%" y="175.50"></text></g><g><title>lint_mod (17,438,304 samples, 0.79%)</title><rect x="36.2432%" y="149" width="0.7896%" height="15" fill="rgb(231,145,46)"/><text x="36.4932%" y="159.50"></text></g><g><title>privacy_access_levels (16,578,095 samples, 0.75%)</title><rect x="37.0328%" y="181" width="0.7506%" height="15" fill="rgb(251,118,11)"/><text x="37.2828%" y="191.50"></text></g><g><title>privacy_checking_modules (27,648,129 samples, 1.25%)</title><rect x="37.7834%" y="181" width="1.2519%" height="15" fill="rgb(217,147,25)"/><text x="38.0334%" y="191.50"></text></g><g><title>check_mod_privacy (27,592,179 samples, 1.25%)</title><rect x="37.7860%" y="165" width="1.2493%" height="15" fill="rgb(247,81,37)"/><text x="38.0360%" y="175.50"></text></g><g><title>misc_checking_3 (108,570,662 samples, 4.92%)</title><rect x="34.1301%" y="197" width="4.9160%" height="15" fill="rgb(209,12,38)"/><text x="34.3801%" y="207.50">misc_c..</text></g><g><title>impl_parent (3,418,444 samples, 0.15%)</title><rect x="39.5109%" y="133" width="0.1548%" height="15" fill="rgb(227,1,9)"/><text x="39.7609%" y="143.50"></text></g><g><title>impl_trait_ref (6,850,465 samples, 0.31%)</title><rect x="39.6658%" y="133" width="0.3102%" height="15" fill="rgb(248,47,43)"/><text x="39.9158%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,408,563 samples, 0.24%)</title><rect x="39.7311%" y="117" width="0.2449%" height="15" fill="rgb(221,10,30)"/><text x="39.9811%" y="127.50"></text></g><g><title>coherent_trait (19,468,419 samples, 0.88%)</title><rect x="39.1684%" y="165" width="0.8815%" height="15" fill="rgb(210,229,1)"/><text x="39.4184%" y="175.50"></text></g><g><title>specialization_graph_of (18,715,370 samples, 0.85%)</title><rect x="39.2025%" y="149" width="0.8474%" height="15" fill="rgb(222,148,37)"/><text x="39.4525%" y="159.50"></text></g><g><title>coherence_checking (20,425,209 samples, 0.92%)</title><rect x="39.1665%" y="181" width="0.9248%" height="15" fill="rgb(234,67,33)"/><text x="39.4165%" y="191.50"></text></g><g><title>dropck_outlives (5,700,994 samples, 0.26%)</title><rect x="64.2788%" y="133" width="0.2581%" height="15" fill="rgb(247,98,35)"/><text x="64.5288%" y="143.50"></text></g><g><title>evaluate_obligation (24,039,117 samples, 1.09%)</title><rect x="64.6114%" y="133" width="1.0885%" height="15" fill="rgb(247,138,52)"/><text x="64.8614%" y="143.50"></text></g><g><title>generics_of (2,262,620 samples, 0.10%)</title><rect x="65.7437%" y="133" width="0.1024%" height="15" fill="rgb(213,79,30)"/><text x="65.9937%" y="143.50"></text></g><g><title>evaluate_obligation (2,631,124 samples, 0.12%)</title><rect x="66.0619%" y="117" width="0.1191%" height="15" fill="rgb(246,177,23)"/><text x="66.3119%" y="127.50"></text></g><g><title>method_autoderef_steps (5,409,937 samples, 0.24%)</title><rect x="65.9365%" y="133" width="0.2450%" height="15" fill="rgb(230,62,27)"/><text x="66.1865%" y="143.50"></text></g><g><title>evaluate_obligation (8,590,929 samples, 0.39%)</title><rect x="74.4628%" y="117" width="0.3890%" height="15" fill="rgb(216,154,8)"/><text x="74.7128%" y="127.50"></text></g><g><title>method_autoderef_steps (3,080,905 samples, 0.14%)</title><rect x="74.9692%" y="117" width="0.1395%" height="15" fill="rgb(244,35,45)"/><text x="75.2192%" y="127.50"></text></g><g><title>typeck (194,196,451 samples, 8.79%)</title><rect x="66.3731%" y="133" width="8.7930%" height="15" fill="rgb(251,115,12)"/><text x="66.6231%" y="143.50">typeck</text></g><g><title>item_bodies_checking (774,424,533 samples, 35.07%)</title><rect x="40.1291%" y="181" width="35.0651%" height="15" fill="rgb(240,54,50)"/><text x="40.3791%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (774,420,463 samples, 35.06%)</title><rect x="40.1292%" y="165" width="35.0649%" height="15" fill="rgb(233,84,52)"/><text x="40.3792%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (771,550,059 samples, 34.93%)</title><rect x="40.2592%" y="149" width="34.9349%" height="15" fill="rgb(207,117,47)"/><text x="40.5092%" y="159.50">typeck</text></g><g><title>mir_built (4,377,019 samples, 0.20%)</title><rect x="76.0242%" y="69" width="0.1982%" height="15" fill="rgb(249,43,39)"/><text x="76.2742%" y="79.50"></text></g><g><title>typeck (3,021,643 samples, 0.14%)</title><rect x="76.0856%" y="53" width="0.1368%" height="15" fill="rgb(209,38,44)"/><text x="76.3356%" y="63.50"></text></g><g><title>mir_const (4,740,093 samples, 0.21%)</title><rect x="76.0149%" y="101" width="0.2146%" height="15" fill="rgb(236,212,23)"/><text x="76.2649%" y="111.50"></text></g><g><title>unsafety_check_result (4,626,962 samples, 0.21%)</title><rect x="76.0200%" y="85" width="0.2095%" height="15" fill="rgb(242,79,21)"/><text x="76.2700%" y="95.50"></text></g><g><title>mir_promoted (4,801,144 samples, 0.22%)</title><rect x="76.0123%" y="117" width="0.2174%" height="15" fill="rgb(211,96,35)"/><text x="76.2623%" y="127.50"></text></g><g><title>type_of (6,991,528 samples, 0.32%)</title><rect x="75.9312%" y="149" width="0.3166%" height="15" fill="rgb(253,215,40)"/><text x="76.1812%" y="159.50"></text></g><g><title>mir_borrowck (6,930,958 samples, 0.31%)</title><rect x="75.9340%" y="133" width="0.3138%" height="15" fill="rgb(211,81,21)"/><text x="76.1840%" y="143.50"></text></g><g><title>item_types_checking (29,115,525 samples, 1.32%)</title><rect x="75.1942%" y="181" width="1.3183%" height="15" fill="rgb(208,190,38)"/><text x="75.4442%" y="191.50"></text></g><g><title>check_mod_item_types (29,061,885 samples, 1.32%)</title><rect x="75.1966%" y="165" width="1.3159%" height="15" fill="rgb(235,213,38)"/><text x="75.4466%" y="175.50"></text></g><g><title>typeck (5,845,723 samples, 0.26%)</title><rect x="76.2478%" y="149" width="0.2647%" height="15" fill="rgb(237,122,38)"/><text x="76.4978%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,386,347 samples, 0.11%)</title><rect x="76.8157%" y="149" width="0.1081%" height="15" fill="rgb(244,218,35)"/><text x="77.0657%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,370,827 samples, 0.11%)</title><rect x="76.8164%" y="133" width="0.1073%" height="15" fill="rgb(240,68,47)"/><text x="77.0664%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,365,317 samples, 0.11%)</title><rect x="76.8167%" y="117" width="0.1071%" height="15" fill="rgb(210,16,53)"/><text x="77.0667%" y="127.50"></text></g><g><title>fn_sig (6,097,127 samples, 0.28%)</title><rect x="76.9238%" y="149" width="0.2761%" height="15" fill="rgb(235,124,12)"/><text x="77.1738%" y="159.50"></text></g><g><title>lint_levels (6,131,438 samples, 0.28%)</title><rect x="77.6674%" y="101" width="0.2776%" height="15" fill="rgb(224,169,11)"/><text x="77.9174%" y="111.50"></text></g><g><title>named_region_map (13,683,064 samples, 0.62%)</title><rect x="77.3257%" y="133" width="0.6196%" height="15" fill="rgb(250,166,2)"/><text x="77.5757%" y="143.50"></text></g><g><title>resolve_lifetimes (13,184,432 samples, 0.60%)</title><rect x="77.3482%" y="117" width="0.5970%" height="15" fill="rgb(242,216,29)"/><text x="77.5982%" y="127.50"></text></g><g><title>generics_of (16,705,813 samples, 0.76%)</title><rect x="77.1998%" y="149" width="0.7564%" height="15" fill="rgb(230,116,27)"/><text x="77.4498%" y="159.50"></text></g><g><title>explicit_predicates_of (2,235,857 samples, 0.10%)</title><rect x="78.1605%" y="117" width="0.1012%" height="15" fill="rgb(228,99,48)"/><text x="78.4105%" y="127.50"></text></g><g><title>predicates_of (11,074,968 samples, 0.50%)</title><rect x="77.9830%" y="149" width="0.5015%" height="15" fill="rgb(253,11,6)"/><text x="78.2330%" y="159.50"></text></g><g><title>predicates_defined_on (9,634,765 samples, 0.44%)</title><rect x="78.0482%" y="133" width="0.4363%" height="15" fill="rgb(247,143,39)"/><text x="78.2982%" y="143.50"></text></g><g><title>inferred_outlives_of (4,917,545 samples, 0.22%)</title><rect x="78.2618%" y="117" width="0.2227%" height="15" fill="rgb(236,97,10)"/><text x="78.5118%" y="127.50"></text></g><g><title>inferred_outlives_crate (4,474,399 samples, 0.20%)</title><rect x="78.2818%" y="101" width="0.2026%" height="15" fill="rgb(233,208,19)"/><text x="78.5318%" y="111.50"></text></g><g><title>type_of (2,250,854 samples, 0.10%)</title><rect x="78.3825%" y="85" width="0.1019%" height="15" fill="rgb(216,164,2)"/><text x="78.6325%" y="95.50"></text></g><g><title>type_collecting (44,916,331 samples, 2.03%)</title><rect x="76.5156%" y="181" width="2.0338%" height="15" fill="rgb(220,129,5)"/><text x="76.7656%" y="191.50">t..</text></g><g><title>collect_mod_item_types (44,841,760 samples, 2.03%)</title><rect x="76.5190%" y="165" width="2.0304%" height="15" fill="rgb(242,17,10)"/><text x="76.7690%" y="175.50">c..</text></g><g><title>evaluate_obligation (5,821,248 samples, 0.26%)</title><rect x="80.2103%" y="149" width="0.2636%" height="15" fill="rgb(242,107,0)"/><text x="80.4603%" y="159.50"></text></g><g><title>implied_outlives_bounds (3,112,012 samples, 0.14%)</title><rect x="80.4758%" y="149" width="0.1409%" height="15" fill="rgb(251,28,31)"/><text x="80.7258%" y="159.50"></text></g><g><title>param_env (4,368,302 samples, 0.20%)</title><rect x="80.6651%" y="149" width="0.1978%" height="15" fill="rgb(233,223,10)"/><text x="80.9151%" y="159.50"></text></g><g><title>region_scope_tree (9,921,252 samples, 0.45%)</title><rect x="80.8671%" y="149" width="0.4492%" height="15" fill="rgb(215,21,27)"/><text x="81.1171%" y="159.50"></text></g><g><title>check_impl_item_well_formed (56,643,244 samples, 2.56%)</title><rect x="78.7579%" y="165" width="2.5647%" height="15" fill="rgb(232,23,21)"/><text x="79.0079%" y="175.50">ch..</text></g><g><title>mir_for_ctfe (2,565,828 samples, 0.12%)</title><rect x="82.4436%" y="37" width="0.1162%" height="15" fill="rgb(244,5,23)"/><text x="82.6936%" y="47.50"></text></g><g><title>eval_to_const_value_raw (3,493,639 samples, 0.16%)</title><rect x="82.4324%" y="85" width="0.1582%" height="15" fill="rgb(226,81,46)"/><text x="82.6824%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,489,369 samples, 0.16%)</title><rect x="82.4326%" y="69" width="0.1580%" height="15" fill="rgb(247,70,30)"/><text x="82.6826%" y="79.50"></text></g><g><title>eval_to_allocation_raw (3,482,819 samples, 0.16%)</title><rect x="82.4329%" y="53" width="0.1577%" height="15" fill="rgb(212,68,19)"/><text x="82.6829%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,527,269 samples, 0.16%)</title><rect x="82.4315%" y="101" width="0.1597%" height="15" fill="rgb(240,187,13)"/><text x="82.6815%" y="111.50"></text></g><g><title>eval_to_const_value_raw (4,587,552 samples, 0.21%)</title><rect x="82.3936%" y="149" width="0.2077%" height="15" fill="rgb(223,113,26)"/><text x="82.6436%" y="159.50"></text></g><g><title>eval_to_const_value_raw (4,584,092 samples, 0.21%)</title><rect x="82.3938%" y="133" width="0.2076%" height="15" fill="rgb(206,192,2)"/><text x="82.6438%" y="143.50"></text></g><g><title>eval_to_allocation_raw (4,580,202 samples, 0.21%)</title><rect x="82.3940%" y="117" width="0.2074%" height="15" fill="rgb(241,108,4)"/><text x="82.6440%" y="127.50"></text></g><g><title>evaluate_obligation (11,666,581 samples, 0.53%)</title><rect x="82.6013%" y="149" width="0.5282%" height="15" fill="rgb(247,173,49)"/><text x="82.8513%" y="159.50"></text></g><g><title>param_env (4,083,263 samples, 0.18%)</title><rect x="83.2676%" y="149" width="0.1849%" height="15" fill="rgb(224,114,35)"/><text x="83.5176%" y="159.50"></text></g><g><title>check_item_well_formed (49,815,537 samples, 2.26%)</title><rect x="81.3226%" y="165" width="2.2556%" height="15" fill="rgb(245,159,27)"/><text x="81.5726%" y="175.50">c..</text></g><g><title>analysis (1,849,234,280 samples, 83.73%)</title><rect x="0.0736%" y="213" width="83.7313%" height="15" fill="rgb(245,172,44)"/><text x="0.3236%" y="223.50">analysis</text></g><g><title>type_check_crate (988,514,862 samples, 44.76%)</title><rect x="39.0460%" y="197" width="44.7589%" height="15" fill="rgb(236,23,11)"/><text x="39.2960%" y="207.50">type_check_crate</text></g><g><title>wf_checking (115,813,062 samples, 5.24%)</title><rect x="78.5610%" y="181" width="5.2439%" height="15" fill="rgb(205,117,38)"/><text x="78.8110%" y="191.50">wf_che..</text></g><g><title>check_trait_item_well_formed (5,005,822 samples, 0.23%)</title><rect x="83.5782%" y="165" width="0.2267%" height="15" fill="rgb(237,72,25)"/><text x="83.8282%" y="175.50"></text></g><g><title>AST_validation (3,802,762 samples, 0.17%)</title><rect x="83.8349%" y="197" width="0.1722%" height="15" fill="rgb(244,70,9)"/><text x="84.0849%" y="207.50"></text></g><g><title>complete_gated_feature_checking (3,064,525 samples, 0.14%)</title><rect x="84.0071%" y="197" width="0.1388%" height="15" fill="rgb(217,125,39)"/><text x="84.2571%" y="207.50"></text></g><g><title>macro_expand_crate (156,060,823 samples, 7.07%)</title><rect x="84.1495%" y="197" width="7.0663%" height="15" fill="rgb(235,36,10)"/><text x="84.3995%" y="207.50">macro_exp..</text></g><g><title>expand_crate (156,041,461 samples, 7.07%)</title><rect x="84.1503%" y="181" width="7.0654%" height="15" fill="rgb(251,123,47)"/><text x="84.4003%" y="191.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (3,506,331 samples, 0.16%)</title><rect x="91.0570%" y="165" width="0.1588%" height="15" fill="rgb(221,13,13)"/><text x="91.3070%" y="175.50"></text></g><g><title>late_resolve_crate (34,091,430 samples, 1.54%)</title><rect x="91.3595%" y="181" width="1.5436%" height="15" fill="rgb(238,131,9)"/><text x="91.6095%" y="191.50"></text></g><g><title>resolve_check_unused (2,673,420 samples, 0.12%)</title><rect x="92.9282%" y="181" width="0.1210%" height="15" fill="rgb(211,50,8)"/><text x="93.1782%" y="191.50"></text></g><g><title>resolve_postprocess (2,413,927 samples, 0.11%)</title><rect x="93.0493%" y="181" width="0.1093%" height="15" fill="rgb(245,182,24)"/><text x="93.2993%" y="191.50"></text></g><g><title>configure_and_expand (206,141,011 samples, 9.33%)</title><rect x="83.8248%" y="213" width="9.3338%" height="15" fill="rgb(242,14,37)"/><text x="84.0748%" y="223.50">configure_and..</text></g><g><title>resolve_crate (42,657,106 samples, 1.93%)</title><rect x="91.2272%" y="197" width="1.9315%" height="15" fill="rgb(246,228,12)"/><text x="91.4772%" y="207.50">r..</text></g><g><title>drop_ast (8,012,859 samples, 0.36%)</title><rect x="93.1587%" y="213" width="0.3628%" height="15" fill="rgb(213,55,15)"/><text x="93.4087%" y="223.50"></text></g><g><title>early_lint_checks (10,351,416 samples, 0.47%)</title><rect x="93.5229%" y="213" width="0.4687%" height="15" fill="rgb(209,9,3)"/><text x="93.7729%" y="223.50"></text></g><g><title>free_global_ctxt (19,500,747 samples, 0.88%)</title><rect x="93.9916%" y="213" width="0.8830%" height="15" fill="rgb(230,59,30)"/><text x="94.2416%" y="223.50"></text></g><g><title>generate_crate_metadata (25,808,327 samples, 1.17%)</title><rect x="94.8745%" y="213" width="1.1686%" height="15" fill="rgb(209,121,21)"/><text x="95.1245%" y="223.50"></text></g><g><title>hir_lowering (77,655,036 samples, 3.52%)</title><rect x="96.0431%" y="213" width="3.5161%" height="15" fill="rgb(220,109,13)"/><text x="96.2931%" y="223.50">hir..</text></g><g><title>self_profile_alloc_query_strings (5,116,357 samples, 0.23%)</title><rect x="99.6779%" y="213" width="0.2317%" height="15" fill="rgb(232,18,1)"/><text x="99.9279%" y="223.50"></text></g><g><title>all (2,208,534,069 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (2,208,534,069 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>