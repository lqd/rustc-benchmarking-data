<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (245,313 samples, 0.17%)</title><rect x="6.1259%" y="117" width="0.1711%" height="15" fill="rgb(227,0,7)"/><text x="6.3759%" y="127.50"></text></g><g><title>item_attrs (187,881 samples, 0.13%)</title><rect x="6.5273%" y="85" width="0.1310%" height="15" fill="rgb(217,0,24)"/><text x="6.7773%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (180,451 samples, 0.13%)</title><rect x="6.5325%" y="69" width="0.1258%" height="15" fill="rgb(221,193,54)"/><text x="6.7825%" y="79.50"></text></g><g><title>codegen_fn_attrs (271,081 samples, 0.19%)</title><rect x="6.4820%" y="101" width="0.1890%" height="15" fill="rgb(248,212,6)"/><text x="6.7320%" y="111.50"></text></g><g><title>is_copy_raw (168,081 samples, 0.12%)</title><rect x="8.0763%" y="53" width="0.1172%" height="15" fill="rgb(208,68,35)"/><text x="8.3263%" y="63.50"></text></g><g><title>adt_drop_tys (361,843 samples, 0.25%)</title><rect x="8.0365%" y="69" width="0.2523%" height="15" fill="rgb(232,128,0)"/><text x="8.2865%" y="79.50"></text></g><g><title>is_copy_raw (1,071,354 samples, 0.75%)</title><rect x="8.2888%" y="69" width="0.7471%" height="15" fill="rgb(207,160,47)"/><text x="8.5388%" y="79.50"></text></g><g><title>evaluate_obligation (914,272 samples, 0.64%)</title><rect x="8.3984%" y="53" width="0.6376%" height="15" fill="rgb(228,23,34)"/><text x="8.6484%" y="63.50"></text></g><g><title>needs_drop_raw (1,550,288 samples, 1.08%)</title><rect x="7.9682%" y="85" width="1.0811%" height="15" fill="rgb(218,30,26)"/><text x="8.2182%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (246,323 samples, 0.17%)</title><rect x="9.1677%" y="69" width="0.1718%" height="15" fill="rgb(220,122,19)"/><text x="9.4177%" y="79.50"></text></g><g><title>specialization_graph_of (567,507 samples, 0.40%)</title><rect x="9.3632%" y="69" width="0.3958%" height="15" fill="rgb(250,228,42)"/><text x="9.6132%" y="79.50"></text></g><g><title>impl_trait_ref (234,784 samples, 0.16%)</title><rect x="9.5952%" y="53" width="0.1637%" height="15" fill="rgb(240,193,28)"/><text x="9.8452%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (200,543 samples, 0.14%)</title><rect x="9.6191%" y="37" width="0.1399%" height="15" fill="rgb(216,20,37)"/><text x="9.8691%" y="47.50"></text></g><g><title>resolve_instance (1,047,220 samples, 0.73%)</title><rect x="9.0670%" y="85" width="0.7303%" height="15" fill="rgb(206,188,39)"/><text x="9.3170%" y="95.50"></text></g><g><title>thir_body (594,556 samples, 0.41%)</title><rect x="9.8086%" y="85" width="0.4146%" height="15" fill="rgb(217,207,13)"/><text x="10.0586%" y="95.50"></text></g><g><title>mir_const (6,392,341 samples, 4.46%)</title><rect x="5.7850%" y="133" width="4.4579%" height="15" fill="rgb(231,73,38)"/><text x="6.0350%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (5,658,160 samples, 3.95%)</title><rect x="6.2970%" y="117" width="3.9459%" height="15" fill="rgb(225,20,46)"/><text x="6.5470%" y="127.50">unsa..</text></g><g><title>mir_built (5,121,845 samples, 3.57%)</title><rect x="6.6710%" y="101" width="3.5719%" height="15" fill="rgb(210,31,41)"/><text x="6.9210%" y="111.50">mir_..</text></g><g><title>mir_promoted (6,863,088 samples, 4.79%)</title><rect x="5.4888%" y="149" width="4.7862%" height="15" fill="rgb(221,200,47)"/><text x="5.7388%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (339,264 samples, 0.24%)</title><rect x="10.2753%" y="149" width="0.2366%" height="15" fill="rgb(226,26,5)"/><text x="10.5253%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (782,759 samples, 0.55%)</title><rect x="10.5119%" y="149" width="0.5459%" height="15" fill="rgb(249,33,26)"/><text x="10.7619%" y="159.50"></text></g><g><title>normalize_projection_ty (533,966 samples, 0.37%)</title><rect x="10.6854%" y="133" width="0.3724%" height="15" fill="rgb(235,183,28)"/><text x="10.9354%" y="143.50"></text></g><g><title>type_op_normalize_predicate (310,891 samples, 0.22%)</title><rect x="11.0578%" y="149" width="0.2168%" height="15" fill="rgb(221,5,38)"/><text x="11.3078%" y="159.50"></text></g><g><title>normalize_projection_ty (198,970 samples, 0.14%)</title><rect x="11.1358%" y="133" width="0.1388%" height="15" fill="rgb(247,18,42)"/><text x="11.3858%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,793,827 samples, 1.25%)</title><rect x="11.2870%" y="149" width="1.2510%" height="15" fill="rgb(241,131,45)"/><text x="11.5370%" y="159.50"></text></g><g><title>MIR_borrow_checking (16,907,490 samples, 11.79%)</title><rect x="0.7570%" y="181" width="11.7910%" height="15" fill="rgb(249,31,29)"/><text x="1.0070%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (16,844,899 samples, 11.75%)</title><rect x="0.8006%" y="165" width="11.7473%" height="15" fill="rgb(225,111,53)"/><text x="1.0506%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (206,143 samples, 0.14%)</title><rect x="12.5992%" y="181" width="0.1438%" height="15" fill="rgb(238,160,17)"/><text x="12.8492%" y="191.50"></text></g><g><title>should_inherit_track_caller (188,872 samples, 0.13%)</title><rect x="12.9600%" y="133" width="0.1317%" height="15" fill="rgb(214,148,48)"/><text x="13.2100%" y="143.50"></text></g><g><title>codegen_fn_attrs (333,894 samples, 0.23%)</title><rect x="12.8721%" y="149" width="0.2329%" height="15" fill="rgb(232,36,49)"/><text x="13.1221%" y="159.50"></text></g><g><title>check_mod_attrs (500,175 samples, 0.35%)</title><rect x="12.7562%" y="165" width="0.3488%" height="15" fill="rgb(209,103,24)"/><text x="13.0062%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (306,012 samples, 0.21%)</title><rect x="13.1954%" y="165" width="0.2134%" height="15" fill="rgb(229,88,8)"/><text x="13.4454%" y="175.50"></text></g><g><title>misc_checking_1 (1,002,921 samples, 0.70%)</title><rect x="12.7434%" y="181" width="0.6994%" height="15" fill="rgb(213,181,19)"/><text x="12.9934%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (401,134 samples, 0.28%)</title><rect x="13.4446%" y="165" width="0.2797%" height="15" fill="rgb(254,191,54)"/><text x="13.6946%" y="175.50"></text></g><g><title>check_mod_liveness (336,724 samples, 0.23%)</title><rect x="13.4895%" y="149" width="0.2348%" height="15" fill="rgb(241,83,37)"/><text x="13.7395%" y="159.50"></text></g><g><title>fn_abi_of_instance (218,563 samples, 0.15%)</title><rect x="14.6154%" y="85" width="0.1524%" height="15" fill="rgb(233,36,39)"/><text x="14.8654%" y="95.50"></text></g><g><title>layout_of (163,932 samples, 0.11%)</title><rect x="14.8140%" y="85" width="0.1143%" height="15" fill="rgb(226,3,54)"/><text x="15.0640%" y="95.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (452,835 samples, 0.32%)</title><rect x="14.9533%" y="69" width="0.3158%" height="15" fill="rgb(245,192,40)"/><text x="15.2033%" y="79.50"></text></g><g><title>mir_borrowck (507,736 samples, 0.35%)</title><rect x="15.3598%" y="53" width="0.3541%" height="15" fill="rgb(238,167,29)"/><text x="15.6098%" y="63.50"></text></g><g><title>mir_for_ctfe (1,127,242 samples, 0.79%)</title><rect x="14.9283%" y="85" width="0.7861%" height="15" fill="rgb(232,182,51)"/><text x="15.1783%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (638,527 samples, 0.45%)</title><rect x="15.2691%" y="69" width="0.4453%" height="15" fill="rgb(231,60,39)"/><text x="15.5191%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,452,847 samples, 1.71%)</title><rect x="14.0468%" y="133" width="1.7106%" height="15" fill="rgb(208,69,12)"/><text x="14.2968%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,451,327 samples, 1.71%)</title><rect x="14.0479%" y="117" width="1.7095%" height="15" fill="rgb(235,93,37)"/><text x="14.2979%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,447,226 samples, 1.71%)</title><rect x="14.0508%" y="101" width="1.7066%" height="15" fill="rgb(213,116,39)"/><text x="14.3008%" y="111.50"></text></g><g><title>mir_const (207,722 samples, 0.14%)</title><rect x="15.9051%" y="117" width="0.1449%" height="15" fill="rgb(222,207,29)"/><text x="16.1551%" y="127.50"></text></g><g><title>mir_const_qualif (416,325 samples, 0.29%)</title><rect x="15.7821%" y="133" width="0.2903%" height="15" fill="rgb(206,96,30)"/><text x="16.0321%" y="143.50"></text></g><g><title>misc_checking_2 (3,813,342 samples, 2.66%)</title><rect x="13.4428%" y="181" width="2.6594%" height="15" fill="rgb(218,138,4)"/><text x="13.6928%" y="191.50">mi..</text></g><g><title>match_checking (3,409,588 samples, 2.38%)</title><rect x="13.7244%" y="165" width="2.3778%" height="15" fill="rgb(250,191,14)"/><text x="13.9744%" y="175.50">ma..</text></g><g><title>check_match (3,385,638 samples, 2.36%)</title><rect x="13.7411%" y="149" width="2.3611%" height="15" fill="rgb(239,60,40)"/><text x="13.9911%" y="159.50">ch..</text></g><g><title>death_checking (428,805 samples, 0.30%)</title><rect x="16.2048%" y="165" width="0.2990%" height="15" fill="rgb(206,27,48)"/><text x="16.4548%" y="175.50"></text></g><g><title>item_attrs (183,662 samples, 0.13%)</title><rect x="16.3758%" y="149" width="0.1281%" height="15" fill="rgb(225,35,8)"/><text x="16.6258%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (181,772 samples, 0.13%)</title><rect x="16.3771%" y="133" width="0.1268%" height="15" fill="rgb(250,213,24)"/><text x="16.6271%" y="143.50"></text></g><g><title>param_env (278,004 samples, 0.19%)</title><rect x="16.8214%" y="133" width="0.1939%" height="15" fill="rgb(247,123,22)"/><text x="17.0714%" y="143.50"></text></g><g><title>crate_lints (1,175,733 samples, 0.82%)</title><rect x="16.5049%" y="149" width="0.8199%" height="15" fill="rgb(231,138,38)"/><text x="16.7549%" y="159.50"></text></g><g><title>type_of (433,584 samples, 0.30%)</title><rect x="17.0225%" y="133" width="0.3024%" height="15" fill="rgb(231,145,46)"/><text x="17.2725%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (336,193 samples, 0.23%)</title><rect x="17.0904%" y="117" width="0.2345%" height="15" fill="rgb(251,118,11)"/><text x="17.3404%" y="127.50"></text></g><g><title>lint_checking (1,449,826 samples, 1.01%)</title><rect x="16.5039%" y="165" width="1.0111%" height="15" fill="rgb(217,147,25)"/><text x="16.7539%" y="175.50"></text></g><g><title>module_lints (272,573 samples, 0.19%)</title><rect x="17.3249%" y="149" width="0.1901%" height="15" fill="rgb(247,81,37)"/><text x="17.5749%" y="159.50"></text></g><g><title>lint_mod (269,383 samples, 0.19%)</title><rect x="17.3271%" y="133" width="0.1879%" height="15" fill="rgb(209,12,38)"/><text x="17.5771%" y="143.50"></text></g><g><title>privacy_access_levels (159,431 samples, 0.11%)</title><rect x="17.5149%" y="165" width="0.1112%" height="15" fill="rgb(227,1,9)"/><text x="17.7649%" y="175.50"></text></g><g><title>privacy_checking_modules (534,816 samples, 0.37%)</title><rect x="17.6261%" y="165" width="0.3730%" height="15" fill="rgb(248,47,43)"/><text x="17.8761%" y="175.50"></text></g><g><title>check_mod_privacy (532,446 samples, 0.37%)</title><rect x="17.6278%" y="149" width="0.3713%" height="15" fill="rgb(221,10,30)"/><text x="17.8778%" y="159.50"></text></g><g><title>misc_checking_3 (2,732,950 samples, 1.91%)</title><rect x="16.1021%" y="181" width="1.9059%" height="15" fill="rgb(210,229,1)"/><text x="16.3521%" y="191.50">m..</text></g><g><title>adt_destructor (170,402 samples, 0.12%)</title><rect x="18.1004%" y="133" width="0.1188%" height="15" fill="rgb(222,148,37)"/><text x="18.3504%" y="143.50"></text></g><g><title>coherent_trait (162,392 samples, 0.11%)</title><rect x="18.1060%" y="117" width="0.1132%" height="15" fill="rgb(234,67,33)"/><text x="18.3560%" y="127.50"></text></g><g><title>specialization_graph_of (161,462 samples, 0.11%)</title><rect x="18.1067%" y="101" width="0.1126%" height="15" fill="rgb(247,98,35)"/><text x="18.3567%" y="111.50"></text></g><g><title>impl_parent (1,509,816 samples, 1.05%)</title><rect x="20.3787%" y="117" width="1.0529%" height="15" fill="rgb(247,138,52)"/><text x="20.6287%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (866,521 samples, 0.60%)</title><rect x="20.8273%" y="101" width="0.6043%" height="15" fill="rgb(213,79,30)"/><text x="21.0773%" y="111.50"></text></g><g><title>impl_trait_ref (2,845,188 samples, 1.98%)</title><rect x="21.4323%" y="117" width="1.9842%" height="15" fill="rgb(246,177,23)"/><text x="21.6823%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,185,613 samples, 1.52%)</title><rect x="21.8923%" y="101" width="1.5242%" height="15" fill="rgb(230,62,27)"/><text x="22.1423%" y="111.50"></text></g><g><title>trait_impls_of (688,786 samples, 0.48%)</title><rect x="23.4763%" y="117" width="0.4803%" height="15" fill="rgb(216,154,8)"/><text x="23.7263%" y="127.50"></text></g><g><title>implementations_of_trait (228,221 samples, 0.16%)</title><rect x="23.7975%" y="101" width="0.1592%" height="15" fill="rgb(244,35,45)"/><text x="24.0475%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (167,121 samples, 0.12%)</title><rect x="23.8401%" y="85" width="0.1165%" height="15" fill="rgb(251,115,12)"/><text x="24.0901%" y="95.50"></text></g><g><title>coherent_trait (8,440,265 samples, 5.89%)</title><rect x="18.0714%" y="149" width="5.8861%" height="15" fill="rgb(240,54,50)"/><text x="18.3214%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (8,114,071 samples, 5.66%)</title><rect x="18.2989%" y="133" width="5.6586%" height="15" fill="rgb(233,84,52)"/><text x="18.5489%" y="143.50">special..</text></g><g><title>coherence_checking (8,541,955 samples, 5.96%)</title><rect x="18.0516%" y="165" width="5.9570%" height="15" fill="rgb(207,117,47)"/><text x="18.3016%" y="175.50">coherenc..</text></g><g><title>associated_items (198,400 samples, 0.14%)</title><rect x="29.3499%" y="117" width="0.1384%" height="15" fill="rgb(249,43,39)"/><text x="29.5999%" y="127.50"></text></g><g><title>eval_to_const_value_raw (180,633 samples, 0.13%)</title><rect x="29.6088%" y="117" width="0.1260%" height="15" fill="rgb(209,38,44)"/><text x="29.8588%" y="127.50"></text></g><g><title>eval_to_const_value_raw (178,872 samples, 0.12%)</title><rect x="29.6100%" y="101" width="0.1247%" height="15" fill="rgb(236,212,23)"/><text x="29.8600%" y="111.50"></text></g><g><title>eval_to_allocation_raw (174,421 samples, 0.12%)</title><rect x="29.6132%" y="85" width="0.1216%" height="15" fill="rgb(242,79,21)"/><text x="29.8632%" y="95.50"></text></g><g><title>evaluate_obligation (915,381 samples, 0.64%)</title><rect x="29.7348%" y="117" width="0.6384%" height="15" fill="rgb(211,96,35)"/><text x="29.9848%" y="127.50"></text></g><g><title>method_autoderef_steps (172,403 samples, 0.12%)</title><rect x="30.5760%" y="117" width="0.1202%" height="15" fill="rgb(253,215,40)"/><text x="30.8260%" y="127.50"></text></g><g><title>predicates_of (160,504 samples, 0.11%)</title><rect x="30.8101%" y="117" width="0.1119%" height="15" fill="rgb(211,81,21)"/><text x="31.0601%" y="127.50"></text></g><g><title>adt_def (381,015 samples, 0.27%)</title><rect x="36.3607%" y="85" width="0.2657%" height="15" fill="rgb(208,190,38)"/><text x="36.6107%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (379,205 samples, 0.26%)</title><rect x="36.3620%" y="69" width="0.2645%" height="15" fill="rgb(235,213,38)"/><text x="36.6120%" y="79.50"></text></g><g><title>item_attrs (355,264 samples, 0.25%)</title><rect x="36.3787%" y="53" width="0.2478%" height="15" fill="rgb(237,122,38)"/><text x="36.6287%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (352,984 samples, 0.25%)</title><rect x="36.3802%" y="37" width="0.2462%" height="15" fill="rgb(244,218,35)"/><text x="36.6302%" y="47.50"></text></g><g><title>adt_sized_constraint (403,485 samples, 0.28%)</title><rect x="36.3521%" y="101" width="0.2814%" height="15" fill="rgb(240,68,47)"/><text x="36.6021%" y="111.50"></text></g><g><title>associated_item (508,957 samples, 0.35%)</title><rect x="36.7567%" y="85" width="0.3549%" height="15" fill="rgb(210,16,53)"/><text x="37.0067%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (402,327 samples, 0.28%)</title><rect x="36.8311%" y="69" width="0.2806%" height="15" fill="rgb(235,124,12)"/><text x="37.0811%" y="79.50"></text></g><g><title>associated_items (694,757 samples, 0.48%)</title><rect x="36.6502%" y="101" width="0.4845%" height="15" fill="rgb(224,169,11)"/><text x="36.9002%" y="111.50"></text></g><g><title>adt_dtorck_constraint (194,242 samples, 0.14%)</title><rect x="37.2569%" y="85" width="0.1355%" height="15" fill="rgb(250,166,2)"/><text x="37.5069%" y="95.50"></text></g><g><title>dropck_outlives (440,284 samples, 0.31%)</title><rect x="37.1631%" y="101" width="0.3070%" height="15" fill="rgb(242,216,29)"/><text x="37.4131%" y="111.50"></text></g><g><title>adt_sized_constraint (209,021 samples, 0.15%)</title><rect x="67.5501%" y="85" width="0.1458%" height="15" fill="rgb(230,116,27)"/><text x="67.8001%" y="95.50"></text></g><g><title>eval_to_const_value_raw (180,281 samples, 0.13%)</title><rect x="67.6979%" y="85" width="0.1257%" height="15" fill="rgb(228,99,48)"/><text x="67.9479%" y="95.50"></text></g><g><title>eval_to_const_value_raw (164,521 samples, 0.11%)</title><rect x="67.7089%" y="69" width="0.1147%" height="15" fill="rgb(253,11,6)"/><text x="67.9589%" y="79.50"></text></g><g><title>eval_to_allocation_raw (160,061 samples, 0.11%)</title><rect x="67.7120%" y="53" width="0.1116%" height="15" fill="rgb(247,143,39)"/><text x="67.9620%" y="63.50"></text></g><g><title>explicit_predicates_of (195,722 samples, 0.14%)</title><rect x="68.0384%" y="53" width="0.1365%" height="15" fill="rgb(236,97,10)"/><text x="68.2884%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (180,602 samples, 0.13%)</title><rect x="68.0489%" y="37" width="0.1259%" height="15" fill="rgb(233,208,19)"/><text x="68.2989%" y="47.50"></text></g><g><title>predicates_of (339,446 samples, 0.24%)</title><rect x="67.9517%" y="85" width="0.2367%" height="15" fill="rgb(216,164,2)"/><text x="68.2017%" y="95.50"></text></g><g><title>predicates_defined_on (265,793 samples, 0.19%)</title><rect x="68.0031%" y="69" width="0.1854%" height="15" fill="rgb(220,129,5)"/><text x="68.2531%" y="79.50"></text></g><g><title>trait_impls_of (273,602 samples, 0.19%)</title><rect x="68.2183%" y="85" width="0.1908%" height="15" fill="rgb(242,17,10)"/><text x="68.4683%" y="95.50"></text></g><g><title>evaluate_obligation (44,380,773 samples, 30.95%)</title><rect x="37.4701%" y="101" width="30.9503%" height="15" fill="rgb(242,107,0)"/><text x="37.7201%" y="111.50">evaluate_obligation</text></g><g><title>impl_item_implementor_ids (166,740 samples, 0.12%)</title><rect x="68.5707%" y="101" width="0.1163%" height="15" fill="rgb(251,28,31)"/><text x="68.8207%" y="111.50"></text></g><g><title>associated_items (144,510 samples, 0.10%)</title><rect x="68.5862%" y="85" width="0.1008%" height="15" fill="rgb(233,223,10)"/><text x="68.8362%" y="95.50"></text></g><g><title>method_autoderef_steps (224,442 samples, 0.16%)</title><rect x="68.9323%" y="101" width="0.1565%" height="15" fill="rgb(215,21,27)"/><text x="69.1823%" y="111.50"></text></g><g><title>explicit_predicates_of (205,922 samples, 0.14%)</title><rect x="69.2465%" y="69" width="0.1436%" height="15" fill="rgb(232,23,21)"/><text x="69.4965%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (174,972 samples, 0.12%)</title><rect x="69.2681%" y="53" width="0.1220%" height="15" fill="rgb(244,5,23)"/><text x="69.5181%" y="63.50"></text></g><g><title>predicates_of (459,175 samples, 0.32%)</title><rect x="69.1022%" y="101" width="0.3202%" height="15" fill="rgb(226,81,46)"/><text x="69.3522%" y="111.50"></text></g><g><title>predicates_defined_on (330,303 samples, 0.23%)</title><rect x="69.1921%" y="85" width="0.2303%" height="15" fill="rgb(247,70,30)"/><text x="69.4421%" y="95.50"></text></g><g><title>typeck (55,391,421 samples, 38.63%)</title><rect x="30.9837%" y="117" width="38.6289%" height="15" fill="rgb(212,68,19)"/><text x="31.2337%" y="127.50">typeck</text></g><g><title>item_bodies_checking (65,385,263 samples, 45.60%)</title><rect x="24.0298%" y="165" width="45.5985%" height="15" fill="rgb(240,187,13)"/><text x="24.2798%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (65,381,893 samples, 45.60%)</title><rect x="24.0322%" y="149" width="45.5961%" height="15" fill="rgb(223,113,26)"/><text x="24.2822%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (65,336,632 samples, 45.56%)</title><rect x="24.0637%" y="133" width="45.5645%" height="15" fill="rgb(206,192,2)"/><text x="24.3137%" y="143.50">typeck</text></g><g><title>item_types_checking (1,786,260 samples, 1.25%)</title><rect x="69.6283%" y="165" width="1.2457%" height="15" fill="rgb(241,108,4)"/><text x="69.8783%" y="175.50"></text></g><g><title>check_mod_item_types (1,783,220 samples, 1.24%)</title><rect x="69.6304%" y="149" width="1.2436%" height="15" fill="rgb(247,173,49)"/><text x="69.8804%" y="159.50"></text></g><g><title>typeck (537,336 samples, 0.37%)</title><rect x="70.4993%" y="133" width="0.3747%" height="15" fill="rgb(224,114,35)"/><text x="70.7493%" y="143.50"></text></g><g><title>fn_sig (173,944 samples, 0.12%)</title><rect x="71.0053%" y="133" width="0.1213%" height="15" fill="rgb(245,159,27)"/><text x="71.2553%" y="143.50"></text></g><g><title>named_region_map (187,921 samples, 0.13%)</title><rect x="71.2543%" y="117" width="0.1311%" height="15" fill="rgb(245,172,44)"/><text x="71.5043%" y="127.50"></text></g><g><title>resolve_lifetimes (168,711 samples, 0.12%)</title><rect x="71.2677%" y="101" width="0.1177%" height="15" fill="rgb(236,23,11)"/><text x="71.5177%" y="111.50"></text></g><g><title>generics_of (382,463 samples, 0.27%)</title><rect x="71.1266%" y="133" width="0.2667%" height="15" fill="rgb(205,117,38)"/><text x="71.3766%" y="143.50"></text></g><g><title>explicit_predicates_of (153,142 samples, 0.11%)</title><rect x="71.4973%" y="101" width="0.1068%" height="15" fill="rgb(237,72,25)"/><text x="71.7473%" y="111.50"></text></g><g><title>predicates_of (271,433 samples, 0.19%)</title><rect x="71.4405%" y="133" width="0.1893%" height="15" fill="rgb(244,70,9)"/><text x="71.6905%" y="143.50"></text></g><g><title>predicates_defined_on (241,703 samples, 0.17%)</title><rect x="71.4612%" y="117" width="0.1686%" height="15" fill="rgb(217,125,39)"/><text x="71.7112%" y="127.50"></text></g><g><title>named_region_map (146,613 samples, 0.10%)</title><rect x="71.6768%" y="117" width="0.1022%" height="15" fill="rgb(235,36,10)"/><text x="71.9268%" y="127.50"></text></g><g><title>resolve_lifetimes (144,413 samples, 0.10%)</title><rect x="71.6783%" y="101" width="0.1007%" height="15" fill="rgb(251,123,47)"/><text x="71.9283%" y="111.50"></text></g><g><title>type_collecting (1,303,794 samples, 0.91%)</title><rect x="70.8758%" y="165" width="0.9092%" height="15" fill="rgb(221,13,13)"/><text x="71.1258%" y="175.50"></text></g><g><title>collect_mod_item_types (1,292,424 samples, 0.90%)</title><rect x="70.8838%" y="149" width="0.9013%" height="15" fill="rgb(238,131,9)"/><text x="71.1338%" y="159.50"></text></g><g><title>type_of (222,713 samples, 0.16%)</title><rect x="71.6298%" y="133" width="0.1553%" height="15" fill="rgb(211,50,8)"/><text x="71.8798%" y="143.50"></text></g><g><title>evaluate_obligation (241,583 samples, 0.17%)</title><rect x="72.5508%" y="133" width="0.1685%" height="15" fill="rgb(245,182,24)"/><text x="72.8008%" y="143.50"></text></g><g><title>param_env (144,781 samples, 0.10%)</title><rect x="72.7988%" y="133" width="0.1010%" height="15" fill="rgb(242,14,37)"/><text x="73.0488%" y="143.50"></text></g><g><title>region_scope_tree (199,055 samples, 0.14%)</title><rect x="72.9366%" y="133" width="0.1388%" height="15" fill="rgb(246,228,12)"/><text x="73.1866%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,734,143 samples, 1.21%)</title><rect x="71.8740%" y="149" width="1.2094%" height="15" fill="rgb(213,55,15)"/><text x="72.1240%" y="159.50"></text></g><g><title>evaluate_obligation (284,875 samples, 0.20%)</title><rect x="73.7927%" y="133" width="0.1987%" height="15" fill="rgb(209,9,3)"/><text x="74.0427%" y="143.50"></text></g><g><title>param_env (173,780 samples, 0.12%)</title><rect x="74.0627%" y="133" width="0.1212%" height="15" fill="rgb(230,59,30)"/><text x="74.3127%" y="143.50"></text></g><g><title>analysis (105,913,156 samples, 73.86%)</title><rect x="0.5788%" y="197" width="73.8618%" height="15" fill="rgb(209,121,21)"/><text x="0.8288%" y="207.50">analysis</text></g><g><title>type_check_crate (80,920,736 samples, 56.43%)</title><rect x="18.0080%" y="181" width="56.4326%" height="15" fill="rgb(220,109,13)"/><text x="18.2580%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,805,043 samples, 2.65%)</title><rect x="71.7871%" y="165" width="2.6536%" height="15" fill="rgb(232,18,1)"/><text x="72.0371%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,946,259 samples, 1.36%)</title><rect x="73.0834%" y="149" width="1.3573%" height="15" fill="rgb(215,41,42)"/><text x="73.3334%" y="159.50"></text></g><g><title>codegen_crate (373,894 samples, 0.26%)</title><rect x="74.4489%" y="197" width="0.2607%" height="15" fill="rgb(224,123,36)"/><text x="74.6989%" y="207.50"></text></g><g><title>AST_validation (213,082 samples, 0.15%)</title><rect x="74.8827%" y="181" width="0.1486%" height="15" fill="rgb(240,125,3)"/><text x="75.1327%" y="191.50"></text></g><g><title>metadata_load_macro (292,631 samples, 0.20%)</title><rect x="88.6347%" y="149" width="0.2041%" height="15" fill="rgb(205,98,50)"/><text x="88.8847%" y="159.50"></text></g><g><title>metadata_register_crate (1,158,274 samples, 0.81%)</title><rect x="88.8387%" y="149" width="0.8078%" height="15" fill="rgb(205,185,37)"/><text x="89.0887%" y="159.50"></text></g><g><title>metadata_register_crate (420,317 samples, 0.29%)</title><rect x="89.3534%" y="133" width="0.2931%" height="15" fill="rgb(238,207,15)"/><text x="89.6034%" y="143.50"></text></g><g><title>metadata_register_crate (151,343 samples, 0.11%)</title><rect x="89.5409%" y="117" width="0.1055%" height="15" fill="rgb(213,199,42)"/><text x="89.7909%" y="127.50"></text></g><g><title>macro_expand_crate (20,861,504 samples, 14.55%)</title><rect x="75.1666%" y="181" width="14.5484%" height="15" fill="rgb(235,201,11)"/><text x="75.4166%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (20,845,074 samples, 14.54%)</title><rect x="75.1780%" y="165" width="14.5370%" height="15" fill="rgb(207,46,11)"/><text x="75.4280%" y="175.50">expand_crate</text></g><g><title>finalize_macro_resolutions (230,843 samples, 0.16%)</title><rect x="89.8992%" y="165" width="0.1610%" height="15" fill="rgb(241,35,35)"/><text x="90.1492%" y="175.50"></text></g><g><title>late_resolve_crate (2,417,017 samples, 1.69%)</title><rect x="90.0601%" y="165" width="1.6856%" height="15" fill="rgb(243,32,47)"/><text x="90.3101%" y="175.50"></text></g><g><title>configure_and_expand (24,590,096 samples, 17.15%)</title><rect x="74.7097%" y="197" width="17.1487%" height="15" fill="rgb(247,202,23)"/><text x="74.9597%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,959,304 samples, 2.06%)</title><rect x="89.7946%" y="181" width="2.0638%" height="15" fill="rgb(219,102,11)"/><text x="90.0446%" y="191.50">r..</text></g><g><title>drop_ast (175,212 samples, 0.12%)</title><rect x="91.8583%" y="197" width="0.1222%" height="15" fill="rgb(243,110,44)"/><text x="92.1083%" y="207.50"></text></g><g><title>early_lint_checks (378,634 samples, 0.26%)</title><rect x="91.9947%" y="197" width="0.2641%" height="15" fill="rgb(222,74,54)"/><text x="92.2447%" y="207.50"></text></g><g><title>free_global_ctxt (2,362,907 samples, 1.65%)</title><rect x="92.2587%" y="197" width="1.6478%" height="15" fill="rgb(216,99,12)"/><text x="92.5087%" y="207.50"></text></g><g><title>generate_crate_metadata (1,204,544 samples, 0.84%)</title><rect x="93.9066%" y="197" width="0.8400%" height="15" fill="rgb(226,22,26)"/><text x="94.1566%" y="207.50"></text></g><g><title>hir_lowering (3,217,346 samples, 2.24%)</title><rect x="94.7466%" y="197" width="2.2437%" height="15" fill="rgb(217,163,10)"/><text x="94.9966%" y="207.50">h..</text></g><g><title>parse_crate (1,353,075 samples, 0.94%)</title><rect x="97.0181%" y="197" width="0.9436%" height="15" fill="rgb(213,25,53)"/><text x="97.2681%" y="207.50"></text></g><g><title>prepare_outputs (344,744 samples, 0.24%)</title><rect x="97.9686%" y="197" width="0.2404%" height="15" fill="rgb(252,105,26)"/><text x="98.2186%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (827,529 samples, 0.58%)</title><rect x="98.2090%" y="197" width="0.5771%" height="15" fill="rgb(220,39,43)"/><text x="98.4590%" y="207.50"></text></g><g><title>all (143,393,596 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (143,393,596 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (1,602,528 samples, 1.12%)</title><rect x="98.8824%" y="197" width="1.1176%" height="15" fill="rgb(223,20,43)"/><text x="99.1324%" y="207.50"></text></g></svg></svg>