<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (245,112 samples, 0.13%)</title><rect x="13.0863%" y="165" width="0.1337%" height="15" fill="rgb(227,0,7)"/><text x="13.3363%" y="175.50"></text></g><g><title>param_env (641,489 samples, 0.35%)</title><rect x="14.6899%" y="133" width="0.3499%" height="15" fill="rgb(217,0,24)"/><text x="14.9399%" y="143.50"></text></g><g><title>item_attrs (638,877 samples, 0.35%)</title><rect x="15.5474%" y="101" width="0.3485%" height="15" fill="rgb(221,193,54)"/><text x="15.7974%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (616,897 samples, 0.34%)</title><rect x="15.5594%" y="85" width="0.3365%" height="15" fill="rgb(248,212,6)"/><text x="15.8094%" y="95.50"></text></g><g><title>codegen_fn_attrs (854,359 samples, 0.47%)</title><rect x="15.4512%" y="117" width="0.4660%" height="15" fill="rgb(208,68,35)"/><text x="15.7012%" y="127.50"></text></g><g><title>adt_drop_tys (281,662 samples, 0.15%)</title><rect x="18.4479%" y="69" width="0.1536%" height="15" fill="rgb(232,128,0)"/><text x="18.6979%" y="79.50"></text></g><g><title>param_env (190,181 samples, 0.10%)</title><rect x="18.7046%" y="69" width="0.1037%" height="15" fill="rgb(207,160,47)"/><text x="18.9546%" y="79.50"></text></g><g><title>adt_drop_tys (771,106 samples, 0.42%)</title><rect x="18.4136%" y="85" width="0.4206%" height="15" fill="rgb(228,23,34)"/><text x="18.6636%" y="95.50"></text></g><g><title>is_copy_raw (1,058,125 samples, 0.58%)</title><rect x="18.8342%" y="85" width="0.5772%" height="15" fill="rgb(218,30,26)"/><text x="19.0842%" y="95.50"></text></g><g><title>evaluate_obligation (865,169 samples, 0.47%)</title><rect x="18.9395%" y="69" width="0.4719%" height="15" fill="rgb(220,122,19)"/><text x="19.1895%" y="79.50"></text></g><g><title>needs_drop_raw (2,033,382 samples, 1.11%)</title><rect x="18.3156%" y="101" width="1.1091%" height="15" fill="rgb(250,228,42)"/><text x="18.5656%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (229,261 samples, 0.13%)</title><rect x="19.5548%" y="85" width="0.1251%" height="15" fill="rgb(240,193,28)"/><text x="19.8048%" y="95.50"></text></g><g><title>impl_parent (742,868 samples, 0.41%)</title><rect x="20.4069%" y="69" width="0.4052%" height="15" fill="rgb(216,20,37)"/><text x="20.6569%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (468,584 samples, 0.26%)</title><rect x="20.5565%" y="53" width="0.2556%" height="15" fill="rgb(206,188,39)"/><text x="20.8065%" y="63.50"></text></g><g><title>specialization_graph_of (3,440,579 samples, 1.88%)</title><rect x="19.7194%" y="85" width="1.8767%" height="15" fill="rgb(217,207,13)"/><text x="19.9694%" y="95.50">s..</text></g><g><title>impl_trait_ref (1,437,415 samples, 0.78%)</title><rect x="20.8121%" y="69" width="0.7841%" height="15" fill="rgb(231,73,38)"/><text x="21.0621%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,167,472 samples, 0.64%)</title><rect x="20.9593%" y="53" width="0.6368%" height="15" fill="rgb(225,20,46)"/><text x="21.2093%" y="63.50"></text></g><g><title>resolve_instance (4,081,952 samples, 2.23%)</title><rect x="19.4247%" y="101" width="2.2266%" height="15" fill="rgb(210,31,41)"/><text x="19.6747%" y="111.50">r..</text></g><g><title>thir_body (1,859,707 samples, 1.01%)</title><rect x="21.6776%" y="101" width="1.0144%" height="15" fill="rgb(221,200,47)"/><text x="21.9276%" y="111.50"></text></g><g><title>mir_const (15,953,305 samples, 8.70%)</title><rect x="14.0082%" y="149" width="8.7020%" height="15" fill="rgb(226,26,5)"/><text x="14.2582%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (14,062,086 samples, 7.67%)</title><rect x="15.0398%" y="133" width="7.6704%" height="15" fill="rgb(249,33,26)"/><text x="15.2898%" y="143.50">unsafety_ch..</text></g><g><title>mir_built (12,453,465 samples, 6.79%)</title><rect x="15.9172%" y="117" width="6.7930%" height="15" fill="rgb(235,183,28)"/><text x="16.1672%" y="127.50">mir_built</text></g><g><title>mir_promoted (17,376,034 samples, 9.48%)</title><rect x="13.2552%" y="165" width="9.4781%" height="15" fill="rgb(221,5,38)"/><text x="13.5052%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (732,238 samples, 0.40%)</title><rect x="22.7333%" y="165" width="0.3994%" height="15" fill="rgb(247,18,42)"/><text x="22.9833%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (879,447 samples, 0.48%)</title><rect x="23.1327%" y="165" width="0.4797%" height="15" fill="rgb(241,131,45)"/><text x="23.3827%" y="175.50"></text></g><g><title>normalize_projection_ty (534,033 samples, 0.29%)</title><rect x="23.3211%" y="149" width="0.2913%" height="15" fill="rgb(249,31,29)"/><text x="23.5711%" y="159.50"></text></g><g><title>type_op_normalize_predicate (385,284 samples, 0.21%)</title><rect x="23.6124%" y="165" width="0.2102%" height="15" fill="rgb(225,111,53)"/><text x="23.8624%" y="175.50"></text></g><g><title>type_op_prove_predicate (3,954,358 samples, 2.16%)</title><rect x="23.8226%" y="165" width="2.1570%" height="15" fill="rgb(238,160,17)"/><text x="24.0726%" y="175.50">t..</text></g><g><title>evaluate_obligation (190,211 samples, 0.10%)</title><rect x="25.8758%" y="149" width="0.1038%" height="15" fill="rgb(214,148,48)"/><text x="26.1258%" y="159.50"></text></g><g><title>MIR_borrow_checking (46,174,960 samples, 25.19%)</title><rect x="0.7985%" y="197" width="25.1869%" height="15" fill="rgb(232,36,49)"/><text x="1.0485%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (46,046,048 samples, 25.12%)</title><rect x="0.8689%" y="181" width="25.1166%" height="15" fill="rgb(209,103,24)"/><text x="1.1189%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (285,123 samples, 0.16%)</title><rect x="26.0036%" y="197" width="0.1555%" height="15" fill="rgb(229,88,8)"/><text x="26.2536%" y="207.50"></text></g><g><title>should_inherit_track_caller (218,813 samples, 0.12%)</title><rect x="26.5582%" y="149" width="0.1194%" height="15" fill="rgb(213,181,19)"/><text x="26.8082%" y="159.50"></text></g><g><title>codegen_fn_attrs (468,566 samples, 0.26%)</title><rect x="26.4356%" y="165" width="0.2556%" height="15" fill="rgb(254,191,54)"/><text x="26.6856%" y="175.50"></text></g><g><title>check_mod_attrs (946,931 samples, 0.52%)</title><rect x="26.1748%" y="181" width="0.5165%" height="15" fill="rgb(241,83,37)"/><text x="26.4248%" y="191.50"></text></g><g><title>check_mod_const_bodies (219,032 samples, 0.12%)</title><rect x="26.6914%" y="181" width="0.1195%" height="15" fill="rgb(233,36,39)"/><text x="26.9414%" y="191.50"></text></g><g><title>lookup_deprecation_entry (235,454 samples, 0.13%)</title><rect x="27.0756%" y="165" width="0.1284%" height="15" fill="rgb(226,3,54)"/><text x="27.3256%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (714,928 samples, 0.39%)</title><rect x="26.9030%" y="181" width="0.3900%" height="15" fill="rgb(245,192,40)"/><text x="27.1530%" y="191.50"></text></g><g><title>misc_checking_1 (2,138,683 samples, 1.17%)</title><rect x="26.1594%" y="197" width="1.1666%" height="15" fill="rgb(238,167,29)"/><text x="26.4094%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (731,618 samples, 0.40%)</title><rect x="27.3269%" y="181" width="0.3991%" height="15" fill="rgb(232,182,51)"/><text x="27.5769%" y="191.50"></text></g><g><title>check_mod_liveness (611,967 samples, 0.33%)</title><rect x="27.3922%" y="165" width="0.3338%" height="15" fill="rgb(231,60,39)"/><text x="27.6422%" y="175.50"></text></g><g><title>type_uninhabited_from (183,692 samples, 0.10%)</title><rect x="27.6258%" y="149" width="0.1002%" height="15" fill="rgb(208,69,12)"/><text x="27.8758%" y="159.50"></text></g><g><title>misc_checking_2 (1,500,926 samples, 0.82%)</title><rect x="27.3260%" y="197" width="0.8187%" height="15" fill="rgb(235,93,37)"/><text x="27.5760%" y="207.50"></text></g><g><title>match_checking (767,688 samples, 0.42%)</title><rect x="27.7260%" y="181" width="0.4187%" height="15" fill="rgb(213,116,39)"/><text x="27.9760%" y="191.50"></text></g><g><title>check_match (738,138 samples, 0.40%)</title><rect x="27.7421%" y="165" width="0.4026%" height="15" fill="rgb(222,207,29)"/><text x="27.9921%" y="175.50"></text></g><g><title>death_checking (397,435 samples, 0.22%)</title><rect x="28.2493%" y="181" width="0.2168%" height="15" fill="rgb(206,96,30)"/><text x="28.4993%" y="191.50"></text></g><g><title>crate_lints (2,222,654 samples, 1.21%)</title><rect x="28.4669%" y="165" width="1.2124%" height="15" fill="rgb(218,138,4)"/><text x="28.7169%" y="175.50"></text></g><g><title>type_of (1,122,952 samples, 0.61%)</title><rect x="29.0667%" y="149" width="0.6125%" height="15" fill="rgb(250,191,14)"/><text x="29.3167%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (883,027 samples, 0.48%)</title><rect x="29.1976%" y="133" width="0.4817%" height="15" fill="rgb(239,60,40)"/><text x="29.4476%" y="143.50"></text></g><g><title>lint_checking (2,890,721 samples, 1.58%)</title><rect x="28.4660%" y="181" width="1.5768%" height="15" fill="rgb(206,27,48)"/><text x="28.7160%" y="191.50"></text></g><g><title>module_lints (666,587 samples, 0.36%)</title><rect x="29.6792%" y="165" width="0.3636%" height="15" fill="rgb(225,35,8)"/><text x="29.9292%" y="175.50"></text></g><g><title>lint_mod (663,987 samples, 0.36%)</title><rect x="29.6807%" y="149" width="0.3622%" height="15" fill="rgb(250,213,24)"/><text x="29.9307%" y="159.50"></text></g><g><title>privacy_access_levels (221,622 samples, 0.12%)</title><rect x="30.0428%" y="181" width="0.1209%" height="15" fill="rgb(247,123,22)"/><text x="30.2928%" y="191.50"></text></g><g><title>privacy_checking_modules (1,111,833 samples, 0.61%)</title><rect x="30.1637%" y="181" width="0.6065%" height="15" fill="rgb(231,138,38)"/><text x="30.4137%" y="191.50"></text></g><g><title>check_mod_privacy (1,109,943 samples, 0.61%)</title><rect x="30.1648%" y="165" width="0.6054%" height="15" fill="rgb(231,145,46)"/><text x="30.4148%" y="175.50"></text></g><g><title>misc_checking_3 (4,826,083 samples, 2.63%)</title><rect x="28.1447%" y="197" width="2.6325%" height="15" fill="rgb(251,118,11)"/><text x="28.3947%" y="207.50">mi..</text></g><g><title>impl_parent (2,138,146 samples, 1.17%)</title><rect x="33.0367%" y="133" width="1.1663%" height="15" fill="rgb(217,147,25)"/><text x="33.2867%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,113,970 samples, 0.61%)</title><rect x="33.5954%" y="117" width="0.6076%" height="15" fill="rgb(247,81,37)"/><text x="33.8454%" y="127.50"></text></g><g><title>impl_trait_ref (6,433,231 samples, 3.51%)</title><rect x="34.2030%" y="133" width="3.5091%" height="15" fill="rgb(209,12,38)"/><text x="34.4530%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,454,763 samples, 2.98%)</title><rect x="34.7367%" y="117" width="2.9754%" height="15" fill="rgb(227,1,9)"/><text x="34.9867%" y="127.50">met..</text></g><g><title>coherent_trait (13,307,997 samples, 7.26%)</title><rect x="30.8241%" y="165" width="7.2591%" height="15" fill="rgb(248,47,43)"/><text x="31.0741%" y="175.50">coherent_t..</text></g><g><title>specialization_graph_of (13,293,507 samples, 7.25%)</title><rect x="30.8320%" y="149" width="7.2512%" height="15" fill="rgb(221,10,30)"/><text x="31.0820%" y="159.50">specializa..</text></g><g><title>trait_impls_of (677,588 samples, 0.37%)</title><rect x="37.7136%" y="133" width="0.3696%" height="15" fill="rgb(210,229,1)"/><text x="37.9636%" y="143.50"></text></g><g><title>coherence_checking (13,393,328 samples, 7.31%)</title><rect x="30.8137%" y="181" width="7.3056%" height="15" fill="rgb(222,148,37)"/><text x="31.0637%" y="191.50">coherence_..</text></g><g><title>associated_item (498,313 samples, 0.27%)</title><rect x="45.8606%" y="117" width="0.2718%" height="15" fill="rgb(234,67,33)"/><text x="46.1106%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (390,413 samples, 0.21%)</title><rect x="45.9195%" y="101" width="0.2130%" height="15" fill="rgb(247,98,35)"/><text x="46.1695%" y="111.50"></text></g><g><title>associated_items (727,405 samples, 0.40%)</title><rect x="45.7575%" y="133" width="0.3968%" height="15" fill="rgb(247,138,52)"/><text x="46.0075%" y="143.50"></text></g><g><title>adt_dtorck_constraint (319,636 samples, 0.17%)</title><rect x="46.5199%" y="85" width="0.1744%" height="15" fill="rgb(213,79,30)"/><text x="46.7699%" y="95.50"></text></g><g><title>adt_dtorck_constraint (463,007 samples, 0.25%)</title><rect x="46.4613%" y="101" width="0.2526%" height="15" fill="rgb(246,177,23)"/><text x="46.7113%" y="111.50"></text></g><g><title>dropck_outlives (1,013,542 samples, 0.55%)</title><rect x="46.1897%" y="133" width="0.5529%" height="15" fill="rgb(230,62,27)"/><text x="46.4397%" y="143.50"></text></g><g><title>adt_dtorck_constraint (812,831 samples, 0.44%)</title><rect x="46.2992%" y="117" width="0.4434%" height="15" fill="rgb(216,154,8)"/><text x="46.5492%" y="127.50"></text></g><g><title>adt_def (278,143 samples, 0.15%)</title><rect x="47.2024%" y="69" width="0.1517%" height="15" fill="rgb(244,35,45)"/><text x="47.4524%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (277,393 samples, 0.15%)</title><rect x="47.2028%" y="53" width="0.1513%" height="15" fill="rgb(251,115,12)"/><text x="47.4528%" y="63.50"></text></g><g><title>adt_sized_constraint (295,133 samples, 0.16%)</title><rect x="47.2003%" y="85" width="0.1610%" height="15" fill="rgb(240,54,50)"/><text x="47.4503%" y="95.50"></text></g><g><title>adt_sized_constraint (425,464 samples, 0.23%)</title><rect x="47.1324%" y="101" width="0.2321%" height="15" fill="rgb(233,84,52)"/><text x="47.3824%" y="111.50"></text></g><g><title>adt_sized_constraint (511,434 samples, 0.28%)</title><rect x="47.0867%" y="117" width="0.2790%" height="15" fill="rgb(207,117,47)"/><text x="47.3367%" y="127.50"></text></g><g><title>evaluate_obligation (1,793,090 samples, 0.98%)</title><rect x="46.7425%" y="133" width="0.9781%" height="15" fill="rgb(249,43,39)"/><text x="46.9925%" y="143.50"></text></g><g><title>trait_impls_of (301,975 samples, 0.16%)</title><rect x="47.5559%" y="117" width="0.1647%" height="15" fill="rgb(209,38,44)"/><text x="47.8059%" y="127.50"></text></g><g><title>evaluate_obligation (296,213 samples, 0.16%)</title><rect x="48.0744%" y="117" width="0.1616%" height="15" fill="rgb(236,212,23)"/><text x="48.3244%" y="127.50"></text></g><g><title>method_autoderef_steps (492,594 samples, 0.27%)</title><rect x="47.9788%" y="133" width="0.2687%" height="15" fill="rgb(242,79,21)"/><text x="48.2288%" y="143.50"></text></g><g><title>predicates_of (288,476 samples, 0.16%)</title><rect x="48.2715%" y="133" width="0.1574%" height="15" fill="rgb(211,96,35)"/><text x="48.5215%" y="143.50"></text></g><g><title>predicates_defined_on (200,643 samples, 0.11%)</title><rect x="48.3194%" y="117" width="0.1094%" height="15" fill="rgb(253,215,40)"/><text x="48.5694%" y="127.50"></text></g><g><title>associated_item (313,695 samples, 0.17%)</title><rect x="64.3745%" y="101" width="0.1711%" height="15" fill="rgb(211,81,21)"/><text x="64.6245%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (247,973 samples, 0.14%)</title><rect x="64.4103%" y="85" width="0.1353%" height="15" fill="rgb(208,190,38)"/><text x="64.6603%" y="95.50"></text></g><g><title>associated_items (454,865 samples, 0.25%)</title><rect x="64.3100%" y="117" width="0.2481%" height="15" fill="rgb(235,213,38)"/><text x="64.5600%" y="127.50"></text></g><g><title>adt_def (497,438 samples, 0.27%)</title><rect x="64.7636%" y="85" width="0.2713%" height="15" fill="rgb(237,122,38)"/><text x="65.0136%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (494,438 samples, 0.27%)</title><rect x="64.7652%" y="69" width="0.2697%" height="15" fill="rgb(244,218,35)"/><text x="65.0152%" y="79.50"></text></g><g><title>item_attrs (439,755 samples, 0.24%)</title><rect x="64.7950%" y="53" width="0.2399%" height="15" fill="rgb(240,68,47)"/><text x="65.0450%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (436,645 samples, 0.24%)</title><rect x="64.7967%" y="37" width="0.2382%" height="15" fill="rgb(210,16,53)"/><text x="65.0467%" y="47.50"></text></g><g><title>adt_dtorck_constraint (414,844 samples, 0.23%)</title><rect x="65.1082%" y="69" width="0.2263%" height="15" fill="rgb(235,124,12)"/><text x="65.3582%" y="79.50"></text></g><g><title>type_of (213,642 samples, 0.12%)</title><rect x="65.2179%" y="53" width="0.1165%" height="15" fill="rgb(224,169,11)"/><text x="65.4679%" y="63.50"></text></g><g><title>adt_dtorck_constraint (545,937 samples, 0.30%)</title><rect x="65.0570%" y="85" width="0.2978%" height="15" fill="rgb(250,166,2)"/><text x="65.3070%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,206,695 samples, 0.66%)</title><rect x="64.7269%" y="101" width="0.6582%" height="15" fill="rgb(242,216,29)"/><text x="64.9769%" y="111.50"></text></g><g><title>dropck_outlives (1,467,587 samples, 0.80%)</title><rect x="64.6118%" y="117" width="0.8005%" height="15" fill="rgb(230,116,27)"/><text x="64.8618%" y="127.50"></text></g><g><title>adt_sized_constraint (199,071 samples, 0.11%)</title><rect x="66.6804%" y="101" width="0.1086%" height="15" fill="rgb(228,99,48)"/><text x="66.9304%" y="111.50"></text></g><g><title>impl_trait_ref (191,573 samples, 0.10%)</title><rect x="66.9203%" y="101" width="0.1045%" height="15" fill="rgb(253,11,6)"/><text x="67.1703%" y="111.50"></text></g><g><title>predicates_of (300,502 samples, 0.16%)</title><rect x="67.0336%" y="101" width="0.1639%" height="15" fill="rgb(247,143,39)"/><text x="67.2836%" y="111.50"></text></g><g><title>specializes (348,616 samples, 0.19%)</title><rect x="67.1975%" y="101" width="0.1902%" height="15" fill="rgb(236,97,10)"/><text x="67.4475%" y="111.50"></text></g><g><title>param_env (190,424 samples, 0.10%)</title><rect x="67.2838%" y="85" width="0.1039%" height="15" fill="rgb(233,208,19)"/><text x="67.5338%" y="95.50"></text></g><g><title>trait_impls_of (671,626 samples, 0.37%)</title><rect x="67.3968%" y="101" width="0.3664%" height="15" fill="rgb(216,164,2)"/><text x="67.6468%" y="111.50"></text></g><g><title>implementations_of_trait (223,280 samples, 0.12%)</title><rect x="67.6413%" y="85" width="0.1218%" height="15" fill="rgb(220,129,5)"/><text x="67.8913%" y="95.50"></text></g><g><title>evaluate_obligation (4,313,290 samples, 2.35%)</title><rect x="65.4123%" y="117" width="2.3528%" height="15" fill="rgb(242,17,10)"/><text x="65.6623%" y="127.50">e..</text></g><g><title>fn_sig (260,336 samples, 0.14%)</title><rect x="67.7762%" y="117" width="0.1420%" height="15" fill="rgb(242,107,0)"/><text x="68.0262%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (230,856 samples, 0.13%)</title><rect x="67.7923%" y="101" width="0.1259%" height="15" fill="rgb(251,28,31)"/><text x="68.0423%" y="111.50"></text></g><g><title>generics_of (230,470 samples, 0.13%)</title><rect x="67.9182%" y="117" width="0.1257%" height="15" fill="rgb(233,223,10)"/><text x="68.1682%" y="127.50"></text></g><g><title>impl_item_implementor_ids (194,601 samples, 0.11%)</title><rect x="68.0442%" y="117" width="0.1061%" height="15" fill="rgb(215,21,27)"/><text x="68.2942%" y="127.50"></text></g><g><title>is_copy_raw (331,505 samples, 0.18%)</title><rect x="68.2517%" y="117" width="0.1808%" height="15" fill="rgb(232,23,21)"/><text x="68.5017%" y="127.50"></text></g><g><title>evaluate_obligation (280,733 samples, 0.15%)</title><rect x="68.2794%" y="101" width="0.1531%" height="15" fill="rgb(244,5,23)"/><text x="68.5294%" y="111.50"></text></g><g><title>item_attrs (238,022 samples, 0.13%)</title><rect x="68.4325%" y="117" width="0.1298%" height="15" fill="rgb(226,81,46)"/><text x="68.6825%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (228,832 samples, 0.12%)</title><rect x="68.4376%" y="101" width="0.1248%" height="15" fill="rgb(247,70,30)"/><text x="68.6876%" y="111.50"></text></g><g><title>evaluate_obligation (348,263 samples, 0.19%)</title><rect x="68.8000%" y="101" width="0.1900%" height="15" fill="rgb(212,68,19)"/><text x="69.0500%" y="111.50"></text></g><g><title>method_autoderef_steps (698,615 samples, 0.38%)</title><rect x="68.6135%" y="117" width="0.3811%" height="15" fill="rgb(240,187,13)"/><text x="68.8635%" y="127.50"></text></g><g><title>explicit_predicates_of (242,806 samples, 0.13%)</title><rect x="69.1799%" y="85" width="0.1324%" height="15" fill="rgb(223,113,26)"/><text x="69.4299%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (199,006 samples, 0.11%)</title><rect x="69.2038%" y="69" width="0.1086%" height="15" fill="rgb(206,192,2)"/><text x="69.4538%" y="79.50"></text></g><g><title>predicates_of (611,071 samples, 0.33%)</title><rect x="69.0178%" y="117" width="0.3333%" height="15" fill="rgb(241,108,4)"/><text x="69.2678%" y="127.50"></text></g><g><title>predicates_defined_on (445,730 samples, 0.24%)</title><rect x="69.1079%" y="101" width="0.2431%" height="15" fill="rgb(247,173,49)"/><text x="69.3579%" y="111.50"></text></g><g><title>typeck (38,474,826 samples, 20.99%)</title><rect x="48.5187%" y="133" width="20.9868%" height="15" fill="rgb(224,114,35)"/><text x="48.7687%" y="143.50">typeck</text></g><g><title>item_bodies_checking (57,575,306 samples, 31.41%)</title><rect x="38.1370%" y="181" width="31.4055%" height="15" fill="rgb(245,159,27)"/><text x="38.3870%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,571,216 samples, 31.40%)</title><rect x="38.1392%" y="165" width="31.4032%" height="15" fill="rgb(245,172,44)"/><text x="38.3892%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (57,503,586 samples, 31.37%)</title><rect x="38.1761%" y="149" width="31.3663%" height="15" fill="rgb(236,23,11)"/><text x="38.4261%" y="159.50">typeck</text></g><g><title>impl_trait_ref (390,596 samples, 0.21%)</title><rect x="69.8750%" y="101" width="0.2131%" height="15" fill="rgb(205,117,38)"/><text x="70.1250%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (348,275 samples, 0.19%)</title><rect x="69.8980%" y="85" width="0.1900%" height="15" fill="rgb(237,72,25)"/><text x="70.1480%" y="95.50"></text></g><g><title>adt_destructor (722,808 samples, 0.39%)</title><rect x="69.7291%" y="149" width="0.3943%" height="15" fill="rgb(244,70,9)"/><text x="69.9791%" y="159.50"></text></g><g><title>coherent_trait (708,988 samples, 0.39%)</title><rect x="69.7366%" y="133" width="0.3867%" height="15" fill="rgb(217,125,39)"/><text x="69.9866%" y="143.50"></text></g><g><title>specialization_graph_of (705,338 samples, 0.38%)</title><rect x="69.7386%" y="117" width="0.3847%" height="15" fill="rgb(235,36,10)"/><text x="69.9886%" y="127.50"></text></g><g><title>item_types_checking (1,221,864 samples, 0.67%)</title><rect x="69.5425%" y="181" width="0.6665%" height="15" fill="rgb(251,123,47)"/><text x="69.7925%" y="191.50"></text></g><g><title>check_mod_item_types (1,217,174 samples, 0.66%)</title><rect x="69.5450%" y="165" width="0.6639%" height="15" fill="rgb(221,13,13)"/><text x="69.7950%" y="175.50"></text></g><g><title>fn_sig (245,032 samples, 0.13%)</title><rect x="70.4445%" y="149" width="0.1337%" height="15" fill="rgb(238,131,9)"/><text x="70.6945%" y="159.50"></text></g><g><title>named_region_map (819,422 samples, 0.45%)</title><rect x="70.6679%" y="133" width="0.4470%" height="15" fill="rgb(211,50,8)"/><text x="70.9179%" y="143.50"></text></g><g><title>resolve_lifetimes (794,961 samples, 0.43%)</title><rect x="70.6812%" y="117" width="0.4336%" height="15" fill="rgb(245,182,24)"/><text x="70.9312%" y="127.50"></text></g><g><title>lint_levels (293,353 samples, 0.16%)</title><rect x="70.9548%" y="101" width="0.1600%" height="15" fill="rgb(242,14,37)"/><text x="71.2048%" y="111.50"></text></g><g><title>generics_of (1,000,233 samples, 0.55%)</title><rect x="70.5782%" y="149" width="0.5456%" height="15" fill="rgb(246,228,12)"/><text x="70.8282%" y="159.50"></text></g><g><title>explicit_predicates_of (281,611 samples, 0.15%)</title><rect x="71.2254%" y="117" width="0.1536%" height="15" fill="rgb(213,55,15)"/><text x="71.4754%" y="127.50"></text></g><g><title>predicates_of (845,467 samples, 0.46%)</title><rect x="71.1388%" y="149" width="0.4612%" height="15" fill="rgb(209,9,3)"/><text x="71.3888%" y="159.50"></text></g><g><title>predicates_defined_on (784,597 samples, 0.43%)</title><rect x="71.1720%" y="133" width="0.4280%" height="15" fill="rgb(230,59,30)"/><text x="71.4220%" y="143.50"></text></g><g><title>inferred_outlives_of (405,134 samples, 0.22%)</title><rect x="71.3790%" y="117" width="0.2210%" height="15" fill="rgb(209,121,21)"/><text x="71.6290%" y="127.50"></text></g><g><title>inferred_outlives_crate (376,884 samples, 0.21%)</title><rect x="71.3944%" y="101" width="0.2056%" height="15" fill="rgb(220,109,13)"/><text x="71.6444%" y="111.50"></text></g><g><title>type_of (202,644 samples, 0.11%)</title><rect x="71.4895%" y="85" width="0.1105%" height="15" fill="rgb(232,18,1)"/><text x="71.7395%" y="95.50"></text></g><g><title>type_collecting (2,667,869 samples, 1.46%)</title><rect x="70.2103%" y="181" width="1.4552%" height="15" fill="rgb(215,41,42)"/><text x="70.4603%" y="191.50"></text></g><g><title>collect_mod_item_types (2,652,589 samples, 1.45%)</title><rect x="70.2187%" y="165" width="1.4469%" height="15" fill="rgb(224,123,36)"/><text x="70.4687%" y="175.50"></text></g><g><title>evaluate_obligation (521,947 samples, 0.28%)</title><rect x="72.9469%" y="149" width="0.2847%" height="15" fill="rgb(240,125,3)"/><text x="73.1969%" y="159.50"></text></g><g><title>implied_outlives_bounds (232,504 samples, 0.13%)</title><rect x="73.2317%" y="149" width="0.1268%" height="15" fill="rgb(205,98,50)"/><text x="73.4817%" y="159.50"></text></g><g><title>param_env (346,363 samples, 0.19%)</title><rect x="73.3585%" y="149" width="0.1889%" height="15" fill="rgb(205,185,37)"/><text x="73.6085%" y="159.50"></text></g><g><title>check_impl_item_well_formed (4,115,103 samples, 2.24%)</title><rect x="71.8045%" y="165" width="2.2447%" height="15" fill="rgb(238,207,15)"/><text x="72.0545%" y="175.50">c..</text></g><g><title>region_scope_tree (874,672 samples, 0.48%)</title><rect x="73.5720%" y="149" width="0.4771%" height="15" fill="rgb(213,199,42)"/><text x="73.8220%" y="159.50"></text></g><g><title>adt_def (184,013 samples, 0.10%)</title><rect x="74.6006%" y="117" width="0.1004%" height="15" fill="rgb(235,201,11)"/><text x="74.8506%" y="127.50"></text></g><g><title>adt_sized_constraint (221,802 samples, 0.12%)</title><rect x="74.7654%" y="101" width="0.1210%" height="15" fill="rgb(207,46,11)"/><text x="75.0154%" y="111.50"></text></g><g><title>adt_sized_constraint (345,754 samples, 0.19%)</title><rect x="74.7010%" y="117" width="0.1886%" height="15" fill="rgb(241,35,35)"/><text x="74.9510%" y="127.50"></text></g><g><title>adt_sized_constraint (572,717 samples, 0.31%)</title><rect x="74.5908%" y="133" width="0.3124%" height="15" fill="rgb(243,32,47)"/><text x="74.8408%" y="143.50"></text></g><g><title>evaluate_obligation (919,170 samples, 0.50%)</title><rect x="74.4308%" y="149" width="0.5014%" height="15" fill="rgb(247,202,23)"/><text x="74.6808%" y="159.50"></text></g><g><title>param_env (272,833 samples, 0.15%)</title><rect x="74.9701%" y="149" width="0.1488%" height="15" fill="rgb(219,102,11)"/><text x="75.2201%" y="159.50"></text></g><g><title>analysis (137,176,475 samples, 74.83%)</title><rect x="0.4391%" y="213" width="74.8253%" height="15" fill="rgb(243,110,44)"/><text x="0.6891%" y="223.50">analysis</text></g><g><title>type_check_crate (81,557,942 samples, 44.49%)</title><rect x="30.7772%" y="197" width="44.4872%" height="15" fill="rgb(222,74,54)"/><text x="31.0272%" y="207.50">type_check_crate</text></g><g><title>wf_checking (6,590,992 samples, 3.60%)</title><rect x="71.6692%" y="181" width="3.5952%" height="15" fill="rgb(216,99,12)"/><text x="71.9192%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (2,227,955 samples, 1.22%)</title><rect x="74.0491%" y="165" width="1.2153%" height="15" fill="rgb(226,22,26)"/><text x="74.2991%" y="175.50"></text></g><g><title>codegen_crate (372,274 samples, 0.20%)</title><rect x="75.2705%" y="213" width="0.2031%" height="15" fill="rgb(217,163,10)"/><text x="75.5205%" y="223.50"></text></g><g><title>AST_validation (195,942 samples, 0.11%)</title><rect x="75.5767%" y="197" width="0.1069%" height="15" fill="rgb(213,25,53)"/><text x="75.8267%" y="207.50"></text></g><g><title>metadata_load_macro (309,524 samples, 0.17%)</title><rect x="84.0412%" y="165" width="0.1688%" height="15" fill="rgb(252,105,26)"/><text x="84.2912%" y="175.50"></text></g><g><title>macro_expand_crate (17,742,846 samples, 9.68%)</title><rect x="75.8111%" y="197" width="9.6781%" height="15" fill="rgb(220,39,43)"/><text x="76.0611%" y="207.50">macro_expand_c..</text></g><g><title>expand_crate (17,728,496 samples, 9.67%)</title><rect x="75.8189%" y="181" width="9.6703%" height="15" fill="rgb(229,68,48)"/><text x="76.0689%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (2,345,127 samples, 1.28%)</title><rect x="84.2100%" y="165" width="1.2792%" height="15" fill="rgb(252,8,32)"/><text x="84.4600%" y="175.50"></text></g><g><title>metadata_register_crate (841,220 samples, 0.46%)</title><rect x="85.0304%" y="149" width="0.4589%" height="15" fill="rgb(223,20,43)"/><text x="85.2804%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (467,675 samples, 0.26%)</title><rect x="85.4917%" y="197" width="0.2551%" height="15" fill="rgb(229,81,49)"/><text x="85.7417%" y="207.50"></text></g><g><title>finalize_macro_resolutions (207,693 samples, 0.11%)</title><rect x="85.7913%" y="181" width="0.1133%" height="15" fill="rgb(236,28,36)"/><text x="86.0413%" y="191.50"></text></g><g><title>late_resolve_crate (4,703,211 samples, 2.57%)</title><rect x="85.9046%" y="181" width="2.5654%" height="15" fill="rgb(249,185,26)"/><text x="86.1546%" y="191.50">la..</text></g><g><title>configure_and_expand (24,048,385 samples, 13.12%)</title><rect x="75.4735%" y="213" width="13.1176%" height="15" fill="rgb(249,174,33)"/><text x="75.7235%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (5,214,527 samples, 2.84%)</title><rect x="85.7468%" y="197" width="2.8444%" height="15" fill="rgb(233,201,37)"/><text x="85.9968%" y="207.50">re..</text></g><g><title>drop_ast (386,724 samples, 0.21%)</title><rect x="88.5911%" y="213" width="0.2109%" height="15" fill="rgb(221,78,26)"/><text x="88.8411%" y="223.50"></text></g><g><title>early_lint_checks (876,190 samples, 0.48%)</title><rect x="88.8148%" y="213" width="0.4779%" height="15" fill="rgb(250,127,30)"/><text x="89.0648%" y="223.50"></text></g><g><title>free_global_ctxt (3,997,285 samples, 2.18%)</title><rect x="89.2927%" y="213" width="2.1804%" height="15" fill="rgb(230,49,44)"/><text x="89.5427%" y="223.50">f..</text></g><g><title>generate_crate_metadata (750,868 samples, 0.41%)</title><rect x="91.4731%" y="213" width="0.4096%" height="15" fill="rgb(229,67,23)"/><text x="91.7231%" y="223.50"></text></g><g><title>hir_lowering (5,786,484 samples, 3.16%)</title><rect x="91.8827%" y="213" width="3.1563%" height="15" fill="rgb(249,83,47)"/><text x="92.1327%" y="223.50">hir..</text></g><g><title>parse_crate (7,531,762 samples, 4.11%)</title><rect x="95.0688%" y="213" width="4.1083%" height="15" fill="rgb(215,43,3)"/><text x="95.3188%" y="223.50">pars..</text></g><g><title>prepare_outputs (287,024 samples, 0.16%)</title><rect x="99.1814%" y="213" width="0.1566%" height="15" fill="rgb(238,154,13)"/><text x="99.4314%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (793,249 samples, 0.43%)</title><rect x="99.3379%" y="213" width="0.4327%" height="15" fill="rgb(219,56,2)"/><text x="99.5879%" y="223.50"></text></g><g><title>all (183,328,935 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (183,328,935 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (274,493 samples, 0.15%)</title><rect x="99.8503%" y="213" width="0.1497%" height="15" fill="rgb(250,79,13)"/><text x="100.1003%" y="223.50"></text></g></svg></svg>