<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (409,783 samples, 0.17%)</title><rect x="13.9006%" y="165" width="0.1714%" height="15" fill="rgb(227,0,7)"/><text x="14.1506%" y="175.50"></text></g><g><title>param_env (333,721 samples, 0.14%)</title><rect x="16.0013%" y="133" width="0.1396%" height="15" fill="rgb(217,0,24)"/><text x="16.2513%" y="143.50"></text></g><g><title>codegen_fn_attrs (333,087 samples, 0.14%)</title><rect x="16.6188%" y="117" width="0.1394%" height="15" fill="rgb(221,193,54)"/><text x="16.8688%" y="127.50"></text></g><g><title>is_copy_raw (360,707 samples, 0.15%)</title><rect x="19.5334%" y="101" width="0.1509%" height="15" fill="rgb(248,212,6)"/><text x="19.7834%" y="111.50"></text></g><g><title>evaluate_obligation (298,627 samples, 0.12%)</title><rect x="19.5594%" y="85" width="0.1249%" height="15" fill="rgb(208,68,35)"/><text x="19.8094%" y="95.50"></text></g><g><title>needs_drop_raw (792,059 samples, 0.33%)</title><rect x="19.6856%" y="101" width="0.3314%" height="15" fill="rgb(232,128,0)"/><text x="19.9356%" y="111.50"></text></g><g><title>is_copy_raw (582,887 samples, 0.24%)</title><rect x="19.7731%" y="85" width="0.2439%" height="15" fill="rgb(207,160,47)"/><text x="20.0231%" y="95.50"></text></g><g><title>evaluate_obligation (458,185 samples, 0.19%)</title><rect x="19.8253%" y="69" width="0.1917%" height="15" fill="rgb(228,23,34)"/><text x="20.0753%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (797,947 samples, 0.33%)</title><rect x="20.2954%" y="85" width="0.3338%" height="15" fill="rgb(218,30,26)"/><text x="20.5454%" y="95.50"></text></g><g><title>impl_parent (292,874 samples, 0.12%)</title><rect x="20.6894%" y="69" width="0.1225%" height="15" fill="rgb(220,122,19)"/><text x="20.9394%" y="79.50"></text></g><g><title>specialization_graph_of (541,246 samples, 0.23%)</title><rect x="20.6480%" y="85" width="0.2264%" height="15" fill="rgb(250,228,42)"/><text x="20.8980%" y="95.50"></text></g><g><title>resolve_instance (2,131,832 samples, 0.89%)</title><rect x="20.0170%" y="101" width="0.8919%" height="15" fill="rgb(240,193,28)"/><text x="20.2670%" y="111.50"></text></g><g><title>thir_body (2,762,654 samples, 1.16%)</title><rect x="20.9349%" y="101" width="1.1558%" height="15" fill="rgb(216,20,37)"/><text x="21.1849%" y="111.50"></text></g><g><title>mir_const (16,611,852 samples, 6.95%)</title><rect x="15.1572%" y="149" width="6.9499%" height="15" fill="rgb(206,188,39)"/><text x="15.4072%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (14,260,477 samples, 5.97%)</title><rect x="16.1410%" y="133" width="5.9661%" height="15" fill="rgb(217,207,13)"/><text x="16.3910%" y="143.50">unsafety..</text></g><g><title>mir_built (12,785,116 samples, 5.35%)</title><rect x="16.7582%" y="117" width="5.3489%" height="15" fill="rgb(231,73,38)"/><text x="17.0082%" y="127.50">mir_bui..</text></g><g><title>thir_body (525,484 samples, 0.22%)</title><rect x="23.7964%" y="85" width="0.2198%" height="15" fill="rgb(225,20,46)"/><text x="24.0464%" y="95.50"></text></g><g><title>mir_const (3,333,196 samples, 1.39%)</title><rect x="22.6340%" y="133" width="1.3945%" height="15" fill="rgb(210,31,41)"/><text x="22.8840%" y="143.50"></text></g><g><title>unsafety_check_result (2,559,008 samples, 1.07%)</title><rect x="22.9579%" y="117" width="1.0706%" height="15" fill="rgb(221,200,47)"/><text x="23.2079%" y="127.50"></text></g><g><title>mir_built (2,202,284 samples, 0.92%)</title><rect x="23.1071%" y="101" width="0.9214%" height="15" fill="rgb(226,26,5)"/><text x="23.3571%" y="111.50"></text></g><g><title>mir_const (389,303 samples, 0.16%)</title><rect x="24.1348%" y="117" width="0.1629%" height="15" fill="rgb(249,33,26)"/><text x="24.3848%" y="127.50"></text></g><g><title>unsafety_check_result (317,842 samples, 0.13%)</title><rect x="24.1646%" y="101" width="0.1330%" height="15" fill="rgb(235,183,28)"/><text x="24.4146%" y="111.50"></text></g><g><title>mir_built (281,582 samples, 0.12%)</title><rect x="24.1798%" y="85" width="0.1178%" height="15" fill="rgb(221,5,38)"/><text x="24.4298%" y="95.50"></text></g><g><title>mir_const_qualif (647,118 samples, 0.27%)</title><rect x="24.0285%" y="133" width="0.2707%" height="15" fill="rgb(247,18,42)"/><text x="24.2785%" y="143.50"></text></g><g><title>mir_promoted (24,458,978 samples, 10.23%)</title><rect x="14.0851%" y="165" width="10.2329%" height="15" fill="rgb(241,131,45)"/><text x="14.3351%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (5,284,624 samples, 2.21%)</title><rect x="22.1071%" y="149" width="2.2109%" height="15" fill="rgb(249,31,29)"/><text x="22.3571%" y="159.50">m..</text></g><g><title>type_op_ascribe_user_type (394,174 samples, 0.16%)</title><rect x="24.3258%" y="165" width="0.1649%" height="15" fill="rgb(225,111,53)"/><text x="24.5758%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (978,464 samples, 0.41%)</title><rect x="24.4907%" y="165" width="0.4094%" height="15" fill="rgb(238,160,17)"/><text x="24.7407%" y="175.50"></text></g><g><title>normalize_projection_ty (556,239 samples, 0.23%)</title><rect x="24.6674%" y="149" width="0.2327%" height="15" fill="rgb(214,148,48)"/><text x="24.9174%" y="159.50"></text></g><g><title>type_op_normalize_predicate (630,116 samples, 0.26%)</title><rect x="24.9001%" y="165" width="0.2636%" height="15" fill="rgb(232,36,49)"/><text x="25.1501%" y="175.50"></text></g><g><title>normalize_projection_ty (414,255 samples, 0.17%)</title><rect x="24.9904%" y="149" width="0.1733%" height="15" fill="rgb(209,103,24)"/><text x="25.2404%" y="159.50"></text></g><g><title>type_op_normalize_ty (1,177,391 samples, 0.49%)</title><rect x="25.1637%" y="165" width="0.4926%" height="15" fill="rgb(229,88,8)"/><text x="25.4137%" y="175.50"></text></g><g><title>normalize_projection_ty (758,187 samples, 0.32%)</title><rect x="25.3391%" y="149" width="0.3172%" height="15" fill="rgb(213,181,19)"/><text x="25.5891%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,619,152 samples, 1.10%)</title><rect x="25.6563%" y="165" width="1.0958%" height="15" fill="rgb(254,191,54)"/><text x="25.9063%" y="175.50"></text></g><g><title>MIR_borrow_checking (62,363,684 samples, 26.09%)</title><rect x="0.6623%" y="197" width="26.0910%" height="15" fill="rgb(241,83,37)"/><text x="0.9123%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (61,856,521 samples, 25.88%)</title><rect x="0.8745%" y="181" width="25.8788%" height="15" fill="rgb(233,36,39)"/><text x="1.1245%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,163,434 samples, 0.91%)</title><rect x="26.7533%" y="197" width="0.9051%" height="15" fill="rgb(226,3,54)"/><text x="27.0033%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,885,949 samples, 0.79%)</title><rect x="26.8694%" y="181" width="0.7890%" height="15" fill="rgb(245,192,40)"/><text x="27.1194%" y="191.50"></text></g><g><title>hir_module_items (508,694 samples, 0.21%)</title><rect x="27.6584%" y="197" width="0.2128%" height="15" fill="rgb(238,167,29)"/><text x="27.9084%" y="207.50"></text></g><g><title>codegen_fn_attrs (339,873 samples, 0.14%)</title><rect x="28.2806%" y="133" width="0.1422%" height="15" fill="rgb(232,182,51)"/><text x="28.5306%" y="143.50"></text></g><g><title>codegen_fn_attrs (716,854 samples, 0.30%)</title><rect x="28.1307%" y="165" width="0.2999%" height="15" fill="rgb(231,60,39)"/><text x="28.3807%" y="175.50"></text></g><g><title>should_inherit_track_caller (599,424 samples, 0.25%)</title><rect x="28.1799%" y="149" width="0.2508%" height="15" fill="rgb(208,69,12)"/><text x="28.4299%" y="159.50"></text></g><g><title>check_mod_attrs (1,304,395 samples, 0.55%)</title><rect x="27.8850%" y="181" width="0.5457%" height="15" fill="rgb(235,93,37)"/><text x="28.1350%" y="191.50"></text></g><g><title>check_mod_const_bodies (313,314 samples, 0.13%)</title><rect x="28.4307%" y="181" width="0.1311%" height="15" fill="rgb(213,116,39)"/><text x="28.6807%" y="191.50"></text></g><g><title>lint_levels (308,533 samples, 0.13%)</title><rect x="28.7670%" y="165" width="0.1291%" height="15" fill="rgb(222,207,29)"/><text x="29.0170%" y="175.50"></text></g><g><title>lookup_deprecation_entry (352,214 samples, 0.15%)</title><rect x="28.8961%" y="165" width="0.1474%" height="15" fill="rgb(206,96,30)"/><text x="29.1461%" y="175.50"></text></g><g><title>stability_index (300,014 samples, 0.13%)</title><rect x="28.9179%" y="149" width="0.1255%" height="15" fill="rgb(218,138,4)"/><text x="29.1679%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,087,112 samples, 0.45%)</title><rect x="28.6349%" y="181" width="0.4548%" height="15" fill="rgb(250,191,14)"/><text x="28.8849%" y="191.50"></text></g><g><title>misc_checking_1 (3,021,604 samples, 1.26%)</title><rect x="27.8714%" y="197" width="1.2641%" height="15" fill="rgb(239,60,40)"/><text x="28.1214%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,142,753 samples, 0.48%)</title><rect x="29.1363%" y="181" width="0.4781%" height="15" fill="rgb(206,27,48)"/><text x="29.3863%" y="191.50"></text></g><g><title>check_mod_liveness (919,189 samples, 0.38%)</title><rect x="29.2298%" y="165" width="0.3846%" height="15" fill="rgb(225,35,8)"/><text x="29.4798%" y="175.50"></text></g><g><title>misc_checking_2 (2,515,858 samples, 1.05%)</title><rect x="29.1356%" y="197" width="1.0526%" height="15" fill="rgb(250,213,24)"/><text x="29.3856%" y="207.50"></text></g><g><title>match_checking (1,371,445 samples, 0.57%)</title><rect x="29.6144%" y="181" width="0.5738%" height="15" fill="rgb(247,123,22)"/><text x="29.8644%" y="191.50"></text></g><g><title>check_match (1,239,772 samples, 0.52%)</title><rect x="29.6695%" y="165" width="0.5187%" height="15" fill="rgb(231,138,38)"/><text x="29.9195%" y="175.50"></text></g><g><title>check_private_in_public (570,396 samples, 0.24%)</title><rect x="30.1926%" y="181" width="0.2386%" height="15" fill="rgb(231,145,46)"/><text x="30.4426%" y="191.50"></text></g><g><title>death_checking (1,026,641 samples, 0.43%)</title><rect x="30.4312%" y="181" width="0.4295%" height="15" fill="rgb(251,118,11)"/><text x="30.6812%" y="191.50"></text></g><g><title>eval_to_const_value_raw (820,157 samples, 0.34%)</title><rect x="31.7068%" y="85" width="0.3431%" height="15" fill="rgb(217,147,25)"/><text x="31.9568%" y="95.50"></text></g><g><title>eval_to_const_value_raw (781,227 samples, 0.33%)</title><rect x="31.7230%" y="69" width="0.3268%" height="15" fill="rgb(247,81,37)"/><text x="31.9730%" y="79.50"></text></g><g><title>eval_to_allocation_raw (732,327 samples, 0.31%)</title><rect x="31.7435%" y="53" width="0.3064%" height="15" fill="rgb(209,12,38)"/><text x="31.9935%" y="63.50"></text></g><g><title>mir_for_ctfe (430,274 samples, 0.18%)</title><rect x="31.8699%" y="37" width="0.1800%" height="15" fill="rgb(227,1,9)"/><text x="32.1199%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,507,506 samples, 0.63%)</title><rect x="31.4260%" y="149" width="0.6307%" height="15" fill="rgb(248,47,43)"/><text x="31.6760%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,486,785 samples, 0.62%)</title><rect x="31.4346%" y="133" width="0.6220%" height="15" fill="rgb(221,10,30)"/><text x="31.6846%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,455,884 samples, 0.61%)</title><rect x="31.4476%" y="117" width="0.6091%" height="15" fill="rgb(210,229,1)"/><text x="31.6976%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (947,090 samples, 0.40%)</title><rect x="31.6604%" y="101" width="0.3962%" height="15" fill="rgb(222,148,37)"/><text x="31.9104%" y="111.50"></text></g><g><title>param_env (504,325 samples, 0.21%)</title><rect x="32.0567%" y="149" width="0.2110%" height="15" fill="rgb(234,67,33)"/><text x="32.3067%" y="159.50"></text></g><g><title>crate_lints (3,740,522 samples, 1.56%)</title><rect x="30.8614%" y="165" width="1.5649%" height="15" fill="rgb(247,98,35)"/><text x="31.1114%" y="175.50"></text></g><g><title>type_of (371,593 samples, 0.16%)</title><rect x="32.2709%" y="149" width="0.1555%" height="15" fill="rgb(247,138,52)"/><text x="32.5209%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (293,821 samples, 0.12%)</title><rect x="32.3034%" y="133" width="0.1229%" height="15" fill="rgb(213,79,30)"/><text x="32.5534%" y="143.50"></text></g><g><title>lint_checking (4,718,123 samples, 1.97%)</title><rect x="30.8607%" y="181" width="1.9739%" height="15" fill="rgb(246,177,23)"/><text x="31.1107%" y="191.50">l..</text></g><g><title>module_lints (975,861 samples, 0.41%)</title><rect x="32.4263%" y="165" width="0.4083%" height="15" fill="rgb(230,62,27)"/><text x="32.6763%" y="175.50"></text></g><g><title>lint_mod (967,289 samples, 0.40%)</title><rect x="32.4299%" y="149" width="0.4047%" height="15" fill="rgb(216,154,8)"/><text x="32.6799%" y="159.50"></text></g><g><title>privacy_access_levels (862,270 samples, 0.36%)</title><rect x="32.8346%" y="181" width="0.3607%" height="15" fill="rgb(244,35,45)"/><text x="33.0846%" y="191.50"></text></g><g><title>privacy_checking_modules (1,828,920 samples, 0.77%)</title><rect x="33.1954%" y="181" width="0.7652%" height="15" fill="rgb(251,115,12)"/><text x="33.4454%" y="191.50"></text></g><g><title>check_mod_privacy (1,822,830 samples, 0.76%)</title><rect x="33.1979%" y="165" width="0.7626%" height="15" fill="rgb(240,54,50)"/><text x="33.4479%" y="175.50"></text></g><g><title>misc_checking_3 (9,041,801 samples, 3.78%)</title><rect x="30.1881%" y="197" width="3.7828%" height="15" fill="rgb(233,84,52)"/><text x="30.4381%" y="207.50">misc..</text></g><g><title>impl_parent (1,716,197 samples, 0.72%)</title><rect x="36.2903%" y="133" width="0.7180%" height="15" fill="rgb(207,117,47)"/><text x="36.5403%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (813,919 samples, 0.34%)</title><rect x="36.6678%" y="117" width="0.3405%" height="15" fill="rgb(249,43,39)"/><text x="36.9178%" y="127.50"></text></g><g><title>impl_trait_ref (2,919,307 samples, 1.22%)</title><rect x="37.0083%" y="133" width="1.2213%" height="15" fill="rgb(209,38,44)"/><text x="37.2583%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,221,531 samples, 0.93%)</title><rect x="37.3002%" y="117" width="0.9294%" height="15" fill="rgb(236,212,23)"/><text x="37.5502%" y="127.50"></text></g><g><title>item_attrs (960,290 samples, 0.40%)</title><rect x="38.2296%" y="133" width="0.4018%" height="15" fill="rgb(242,79,21)"/><text x="38.4796%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (902,409 samples, 0.38%)</title><rect x="38.2538%" y="117" width="0.3775%" height="15" fill="rgb(211,96,35)"/><text x="38.5038%" y="127.50"></text></g><g><title>predicates_of (814,429 samples, 0.34%)</title><rect x="38.6314%" y="133" width="0.3407%" height="15" fill="rgb(253,215,40)"/><text x="38.8814%" y="143.50"></text></g><g><title>predicates_defined_on (404,763 samples, 0.17%)</title><rect x="38.8028%" y="117" width="0.1693%" height="15" fill="rgb(211,81,21)"/><text x="39.0528%" y="127.50"></text></g><g><title>trait_impls_of (513,624 samples, 0.21%)</title><rect x="38.9729%" y="133" width="0.2149%" height="15" fill="rgb(208,190,38)"/><text x="39.2229%" y="143.50"></text></g><g><title>coherent_trait (12,365,018 samples, 5.17%)</title><rect x="34.0764%" y="165" width="5.1731%" height="15" fill="rgb(235,213,38)"/><text x="34.3264%" y="175.50">cohere..</text></g><g><title>specialization_graph_of (12,010,595 samples, 5.02%)</title><rect x="34.2247%" y="149" width="5.0249%" height="15" fill="rgb(237,122,38)"/><text x="34.4747%" y="159.50">specia..</text></g><g><title>coherence_checking (12,528,420 samples, 5.24%)</title><rect x="34.0625%" y="181" width="5.2415%" height="15" fill="rgb(244,218,35)"/><text x="34.3125%" y="191.50">cohere..</text></g><g><title>associated_item (452,213 samples, 0.19%)</title><rect x="60.8118%" y="117" width="0.1892%" height="15" fill="rgb(240,68,47)"/><text x="61.0618%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (375,313 samples, 0.16%)</title><rect x="60.8439%" y="101" width="0.1570%" height="15" fill="rgb(210,16,53)"/><text x="61.0939%" y="111.50"></text></g><g><title>associated_items (603,757 samples, 0.25%)</title><rect x="60.7574%" y="133" width="0.2526%" height="15" fill="rgb(235,124,12)"/><text x="61.0074%" y="143.50"></text></g><g><title>eval_to_const_value_raw (381,124 samples, 0.16%)</title><rect x="61.1423%" y="133" width="0.1595%" height="15" fill="rgb(224,169,11)"/><text x="61.3923%" y="143.50"></text></g><g><title>eval_to_const_value_raw (359,184 samples, 0.15%)</title><rect x="61.1515%" y="117" width="0.1503%" height="15" fill="rgb(250,166,2)"/><text x="61.4015%" y="127.50"></text></g><g><title>eval_to_allocation_raw (345,024 samples, 0.14%)</title><rect x="61.1574%" y="101" width="0.1443%" height="15" fill="rgb(242,216,29)"/><text x="61.4074%" y="111.50"></text></g><g><title>generics_of (960,742 samples, 0.40%)</title><rect x="64.0027%" y="117" width="0.4019%" height="15" fill="rgb(230,116,27)"/><text x="64.2527%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (680,977 samples, 0.28%)</title><rect x="64.1197%" y="101" width="0.2849%" height="15" fill="rgb(228,99,48)"/><text x="64.3697%" y="111.50"></text></g><g><title>impl_trait_ref (915,532 samples, 0.38%)</title><rect x="64.5724%" y="117" width="0.3830%" height="15" fill="rgb(253,11,6)"/><text x="64.8224%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (755,609 samples, 0.32%)</title><rect x="64.6393%" y="101" width="0.3161%" height="15" fill="rgb(247,143,39)"/><text x="64.8893%" y="111.50"></text></g><g><title>predicates_of (1,434,900 samples, 0.60%)</title><rect x="64.9877%" y="117" width="0.6003%" height="15" fill="rgb(236,97,10)"/><text x="65.2377%" y="127.50"></text></g><g><title>predicates_defined_on (681,638 samples, 0.29%)</title><rect x="65.3028%" y="101" width="0.2852%" height="15" fill="rgb(233,208,19)"/><text x="65.5528%" y="111.50"></text></g><g><title>specializes (3,420,866 samples, 1.43%)</title><rect x="65.5880%" y="117" width="1.4312%" height="15" fill="rgb(216,164,2)"/><text x="65.8380%" y="127.50"></text></g><g><title>param_env (1,937,571 samples, 0.81%)</title><rect x="66.2085%" y="101" width="0.8106%" height="15" fill="rgb(220,129,5)"/><text x="66.4585%" y="111.50"></text></g><g><title>def_span (802,589 samples, 0.34%)</title><rect x="66.6834%" y="85" width="0.3358%" height="15" fill="rgb(242,17,10)"/><text x="66.9334%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (700,848 samples, 0.29%)</title><rect x="66.7259%" y="69" width="0.2932%" height="15" fill="rgb(242,107,0)"/><text x="66.9759%" y="79.50"></text></g><g><title>trait_impls_of (288,103 samples, 0.12%)</title><rect x="67.0250%" y="117" width="0.1205%" height="15" fill="rgb(251,28,31)"/><text x="67.2750%" y="127.50"></text></g><g><title>evaluate_obligation (14,017,783 samples, 5.86%)</title><rect x="61.3018%" y="133" width="5.8646%" height="15" fill="rgb(233,223,10)"/><text x="61.5518%" y="143.50">evaluat..</text></g><g><title>method_autoderef_steps (300,572 samples, 0.13%)</title><rect x="67.5347%" y="133" width="0.1257%" height="15" fill="rgb(215,21,27)"/><text x="67.7847%" y="143.50"></text></g><g><title>param_env (256,464 samples, 0.11%)</title><rect x="67.6928%" y="133" width="0.1073%" height="15" fill="rgb(232,23,21)"/><text x="67.9428%" y="143.50"></text></g><g><title>predicates_of (366,454 samples, 0.15%)</title><rect x="67.8245%" y="133" width="0.1533%" height="15" fill="rgb(244,5,23)"/><text x="68.0745%" y="143.50"></text></g><g><title>predicates_defined_on (256,262 samples, 0.11%)</title><rect x="67.8706%" y="117" width="0.1072%" height="15" fill="rgb(226,81,46)"/><text x="68.1206%" y="127.50"></text></g><g><title>evaluate_obligation (623,758 samples, 0.26%)</title><rect x="69.3695%" y="117" width="0.2610%" height="15" fill="rgb(247,70,30)"/><text x="69.6195%" y="127.50"></text></g><g><title>method_autoderef_steps (257,813 samples, 0.11%)</title><rect x="69.7003%" y="117" width="0.1079%" height="15" fill="rgb(212,68,19)"/><text x="69.9503%" y="127.50"></text></g><g><title>typeck (4,120,626 samples, 1.72%)</title><rect x="68.1057%" y="133" width="1.7239%" height="15" fill="rgb(240,187,13)"/><text x="68.3557%" y="143.50"></text></g><g><title>item_bodies_checking (72,966,563 samples, 30.53%)</title><rect x="39.3629%" y="181" width="30.5269%" height="15" fill="rgb(223,113,26)"/><text x="39.6129%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (72,963,223 samples, 30.53%)</title><rect x="39.3643%" y="165" width="30.5255%" height="15" fill="rgb(206,192,2)"/><text x="39.6143%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (72,625,240 samples, 30.38%)</title><rect x="39.5057%" y="149" width="30.3841%" height="15" fill="rgb(241,108,4)"/><text x="39.7557%" y="159.50">typeck</text></g><g><title>item_types_checking (5,923,005 samples, 2.48%)</title><rect x="69.8898%" y="181" width="2.4780%" height="15" fill="rgb(247,173,49)"/><text x="70.1398%" y="191.50">it..</text></g><g><title>check_mod_item_types (5,915,885 samples, 2.48%)</title><rect x="69.8928%" y="165" width="2.4750%" height="15" fill="rgb(224,114,35)"/><text x="70.1428%" y="175.50">ch..</text></g><g><title>typeck (1,053,781 samples, 0.44%)</title><rect x="71.9270%" y="149" width="0.4409%" height="15" fill="rgb(245,159,27)"/><text x="72.1770%" y="159.50"></text></g><g><title>late_bound_vars_map (275,970 samples, 0.12%)</title><rect x="72.9394%" y="133" width="0.1155%" height="15" fill="rgb(245,172,44)"/><text x="73.1894%" y="143.50"></text></g><g><title>fn_sig (971,761 samples, 0.41%)</title><rect x="72.6917%" y="149" width="0.4066%" height="15" fill="rgb(236,23,11)"/><text x="72.9417%" y="159.50"></text></g><g><title>is_late_bound_map (500,953 samples, 0.21%)</title><rect x="73.2424%" y="133" width="0.2096%" height="15" fill="rgb(205,117,38)"/><text x="73.4924%" y="143.50"></text></g><g><title>resolve_lifetimes (456,383 samples, 0.19%)</title><rect x="73.2611%" y="117" width="0.1909%" height="15" fill="rgb(237,72,25)"/><text x="73.5111%" y="127.50"></text></g><g><title>named_region_map (411,726 samples, 0.17%)</title><rect x="73.4520%" y="133" width="0.1723%" height="15" fill="rgb(244,70,9)"/><text x="73.7020%" y="143.50"></text></g><g><title>resolve_lifetimes (370,556 samples, 0.16%)</title><rect x="73.4692%" y="117" width="0.1550%" height="15" fill="rgb(217,125,39)"/><text x="73.7192%" y="127.50"></text></g><g><title>generics_of (1,301,876 samples, 0.54%)</title><rect x="73.0983%" y="149" width="0.5447%" height="15" fill="rgb(235,36,10)"/><text x="73.3483%" y="159.50"></text></g><g><title>impl_trait_ref (257,182 samples, 0.11%)</title><rect x="73.6429%" y="149" width="0.1076%" height="15" fill="rgb(251,123,47)"/><text x="73.8929%" y="159.50"></text></g><g><title>explicit_predicates_of (357,095 samples, 0.15%)</title><rect x="73.9349%" y="117" width="0.1494%" height="15" fill="rgb(221,13,13)"/><text x="74.1849%" y="127.50"></text></g><g><title>predicates_of (881,350 samples, 0.37%)</title><rect x="73.7505%" y="149" width="0.3687%" height="15" fill="rgb(238,131,9)"/><text x="74.0005%" y="159.50"></text></g><g><title>predicates_defined_on (711,708 samples, 0.30%)</title><rect x="73.8215%" y="133" width="0.2978%" height="15" fill="rgb(211,50,8)"/><text x="74.0715%" y="143.50"></text></g><g><title>type_collecting (4,505,451 samples, 1.88%)</title><rect x="72.3702%" y="181" width="1.8849%" height="15" fill="rgb(245,182,24)"/><text x="72.6202%" y="191.50">t..</text></g><g><title>collect_mod_item_types (4,486,701 samples, 1.88%)</title><rect x="72.3780%" y="165" width="1.8771%" height="15" fill="rgb(242,14,37)"/><text x="72.6280%" y="175.50">c..</text></g><g><title>type_of (285,623 samples, 0.12%)</title><rect x="74.1356%" y="149" width="0.1195%" height="15" fill="rgb(246,228,12)"/><text x="74.3856%" y="159.50"></text></g><g><title>evaluate_obligation (288,612 samples, 0.12%)</title><rect x="76.5338%" y="149" width="0.1207%" height="15" fill="rgb(213,55,15)"/><text x="76.7838%" y="159.50"></text></g><g><title>param_env (977,663 samples, 0.41%)</title><rect x="76.7662%" y="149" width="0.4090%" height="15" fill="rgb(209,9,3)"/><text x="77.0162%" y="159.50"></text></g><g><title>region_scope_tree (945,712 samples, 0.40%)</title><rect x="77.1994%" y="149" width="0.3957%" height="15" fill="rgb(230,59,30)"/><text x="77.4494%" y="159.50"></text></g><g><title>check_impl_item_well_formed (7,389,527 samples, 3.09%)</title><rect x="74.5112%" y="165" width="3.0915%" height="15" fill="rgb(209,121,21)"/><text x="74.7612%" y="175.50">che..</text></g><g><title>evaluate_obligation (622,237 samples, 0.26%)</title><rect x="79.2923%" y="149" width="0.2603%" height="15" fill="rgb(220,109,13)"/><text x="79.5423%" y="159.50"></text></g><g><title>param_env (602,769 samples, 0.25%)</title><rect x="79.5982%" y="149" width="0.2522%" height="15" fill="rgb(232,18,1)"/><text x="79.8482%" y="159.50"></text></g><g><title>region_scope_tree (319,563 samples, 0.13%)</title><rect x="79.9121%" y="149" width="0.1337%" height="15" fill="rgb(215,41,42)"/><text x="80.1621%" y="159.50"></text></g><g><title>check_item_well_formed (5,938,634 samples, 2.48%)</title><rect x="77.6028%" y="165" width="2.4845%" height="15" fill="rgb(224,123,36)"/><text x="77.8528%" y="175.50">ch..</text></g><g><title>analysis (191,044,618 samples, 79.93%)</title><rect x="0.3916%" y="213" width="79.9270%" height="15" fill="rgb(240,125,3)"/><text x="0.6416%" y="223.50">analysis</text></g><g><title>type_check_crate (110,782,064 samples, 46.35%)</title><rect x="33.9709%" y="197" width="46.3477%" height="15" fill="rgb(205,98,50)"/><text x="34.2209%" y="207.50">type_check_crate</text></g><g><title>wf_checking (14,466,451 samples, 6.05%)</title><rect x="74.2663%" y="181" width="6.0523%" height="15" fill="rgb(205,185,37)"/><text x="74.5163%" y="191.50">wf_check..</text></g><g><title>check_trait_item_well_formed (552,967 samples, 0.23%)</title><rect x="80.0873%" y="165" width="0.2313%" height="15" fill="rgb(238,207,15)"/><text x="80.3373%" y="175.50"></text></g><g><title>codegen_crate (312,093 samples, 0.13%)</title><rect x="80.3212%" y="213" width="0.1306%" height="15" fill="rgb(213,199,42)"/><text x="80.5712%" y="223.50"></text></g><g><title>AST_validation (473,095 samples, 0.20%)</title><rect x="80.5034%" y="197" width="0.1979%" height="15" fill="rgb(235,201,11)"/><text x="80.7534%" y="207.50"></text></g><g><title>macro_expand_crate (24,185,339 samples, 10.12%)</title><rect x="80.7855%" y="197" width="10.1184%" height="15" fill="rgb(207,46,11)"/><text x="81.0355%" y="207.50">macro_expand_cr..</text></g><g><title>expand_crate (24,169,799 samples, 10.11%)</title><rect x="80.7920%" y="181" width="10.1119%" height="15" fill="rgb(241,35,35)"/><text x="81.0420%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (788,088 samples, 0.33%)</title><rect x="90.5742%" y="165" width="0.3297%" height="15" fill="rgb(243,32,47)"/><text x="90.8242%" y="175.50"></text></g><g><title>late_resolve_crate (3,007,004 samples, 1.26%)</title><rect x="91.0494%" y="181" width="1.2580%" height="15" fill="rgb(247,202,23)"/><text x="91.2994%" y="191.50"></text></g><g><title>configure_and_expand (28,574,548 samples, 11.95%)</title><rect x="80.4517%" y="213" width="11.9547%" height="15" fill="rgb(219,102,11)"/><text x="80.7017%" y="223.50">configure_and_expa..</text></g><g><title>resolve_crate (3,515,000 samples, 1.47%)</title><rect x="90.9358%" y="197" width="1.4706%" height="15" fill="rgb(243,110,44)"/><text x="91.1858%" y="207.50"></text></g><g><title>drop_ast (651,827 samples, 0.27%)</title><rect x="92.4064%" y="213" width="0.2727%" height="15" fill="rgb(222,74,54)"/><text x="92.6564%" y="223.50"></text></g><g><title>early_lint_checks (880,540 samples, 0.37%)</title><rect x="92.6860%" y="213" width="0.3684%" height="15" fill="rgb(216,99,12)"/><text x="92.9360%" y="223.50"></text></g><g><title>free_global_ctxt (3,481,029 samples, 1.46%)</title><rect x="93.0544%" y="213" width="1.4564%" height="15" fill="rgb(226,22,26)"/><text x="93.3044%" y="223.50"></text></g><g><title>mir_for_ctfe (533,676 samples, 0.22%)</title><rect x="95.6653%" y="197" width="0.2233%" height="15" fill="rgb(217,163,10)"/><text x="95.9153%" y="207.50"></text></g><g><title>generate_crate_metadata (3,449,688 samples, 1.44%)</title><rect x="94.5107%" y="213" width="1.4432%" height="15" fill="rgb(213,25,53)"/><text x="94.7607%" y="223.50"></text></g><g><title>hir_lowering (7,032,398 samples, 2.94%)</title><rect x="95.9539%" y="213" width="2.9421%" height="15" fill="rgb(252,105,26)"/><text x="96.2039%" y="223.50">hi..</text></g><g><title>parse_crate (468,325 samples, 0.20%)</title><rect x="98.9266%" y="213" width="0.1959%" height="15" fill="rgb(220,39,43)"/><text x="99.1766%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,324,245 samples, 0.55%)</title><rect x="99.2099%" y="213" width="0.5540%" height="15" fill="rgb(229,68,48)"/><text x="99.4599%" y="223.50"></text></g><g><title>all (239,023,892 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (239,023,892 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (461,865 samples, 0.19%)</title><rect x="99.8068%" y="213" width="0.1932%" height="15" fill="rgb(229,81,49)"/><text x="100.0568%" y="223.50"></text></g></svg></svg>