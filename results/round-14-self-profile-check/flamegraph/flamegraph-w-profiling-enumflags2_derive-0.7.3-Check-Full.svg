<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (372,331 samples, 0.18%)</title><rect x="12.8934%" y="197" width="0.1773%" height="15" fill="rgb(227,0,7)"/><text x="13.1434%" y="207.50"></text></g><g><title>item_attrs (333,254 samples, 0.16%)</title><rect x="13.3935%" y="165" width="0.1587%" height="15" fill="rgb(217,0,24)"/><text x="13.6435%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (320,144 samples, 0.15%)</title><rect x="13.3997%" y="149" width="0.1525%" height="15" fill="rgb(221,193,54)"/><text x="13.6497%" y="159.50"></text></g><g><title>codegen_fn_attrs (481,025 samples, 0.23%)</title><rect x="13.3385%" y="181" width="0.2291%" height="15" fill="rgb(248,212,6)"/><text x="13.5885%" y="191.50"></text></g><g><title>adt_drop_tys (520,100 samples, 0.25%)</title><rect x="16.2123%" y="149" width="0.2477%" height="15" fill="rgb(208,68,35)"/><text x="16.4623%" y="159.50"></text></g><g><title>is_copy_raw (952,297 samples, 0.45%)</title><rect x="16.4600%" y="149" width="0.4535%" height="15" fill="rgb(232,128,0)"/><text x="16.7100%" y="159.50"></text></g><g><title>evaluate_obligation (786,125 samples, 0.37%)</title><rect x="16.5392%" y="133" width="0.3744%" height="15" fill="rgb(207,160,47)"/><text x="16.7892%" y="143.50"></text></g><g><title>needs_drop_raw (1,640,439 samples, 0.78%)</title><rect x="16.1345%" y="165" width="0.7813%" height="15" fill="rgb(228,23,34)"/><text x="16.3845%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (458,194 samples, 0.22%)</title><rect x="16.9760%" y="149" width="0.2182%" height="15" fill="rgb(218,30,26)"/><text x="17.2260%" y="159.50"></text></g><g><title>impl_parent (668,286 samples, 0.32%)</title><rect x="17.5919%" y="133" width="0.3183%" height="15" fill="rgb(220,122,19)"/><text x="17.8419%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (473,884 samples, 0.23%)</title><rect x="17.6845%" y="117" width="0.2257%" height="15" fill="rgb(250,228,42)"/><text x="17.9345%" y="127.50"></text></g><g><title>specialization_graph_of (3,438,129 samples, 1.64%)</title><rect x="17.2047%" y="149" width="1.6374%" height="15" fill="rgb(240,193,28)"/><text x="17.4547%" y="159.50"></text></g><g><title>impl_trait_ref (1,956,843 samples, 0.93%)</title><rect x="17.9102%" y="133" width="0.9319%" height="15" fill="rgb(216,20,37)"/><text x="18.1602%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,754,531 samples, 0.84%)</title><rect x="18.0065%" y="117" width="0.8356%" height="15" fill="rgb(206,188,39)"/><text x="18.2565%" y="127.50"></text></g><g><title>resolve_instance (4,088,047 samples, 1.95%)</title><rect x="16.9157%" y="165" width="1.9469%" height="15" fill="rgb(217,207,13)"/><text x="17.1657%" y="175.50">r..</text></g><g><title>thir_body (2,102,885 samples, 1.00%)</title><rect x="18.8720%" y="165" width="1.0015%" height="15" fill="rgb(231,73,38)"/><text x="19.1220%" y="175.50"></text></g><g><title>mir_const (15,577,382 samples, 7.42%)</title><rect x="12.4636%" y="213" width="7.4187%" height="15" fill="rgb(225,20,46)"/><text x="12.7136%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (14,302,529 samples, 6.81%)</title><rect x="13.0707%" y="197" width="6.8116%" height="15" fill="rgb(210,31,41)"/><text x="13.3207%" y="207.50">unsafety_..</text></g><g><title>mir_built (13,255,479 samples, 6.31%)</title><rect x="13.5694%" y="181" width="6.3129%" height="15" fill="rgb(221,200,47)"/><text x="13.8194%" y="191.50">mir_built</text></g><g><title>mir_promoted (17,103,290 samples, 8.15%)</title><rect x="12.0023%" y="229" width="8.1454%" height="15" fill="rgb(226,26,5)"/><text x="12.2523%" y="239.50">mir_promoted</text></g><g><title>mir_const_qualif (557,367 samples, 0.27%)</title><rect x="19.8823%" y="213" width="0.2654%" height="15" fill="rgb(249,33,26)"/><text x="20.1323%" y="223.50"></text></g><g><title>type_op_ascribe_user_type (1,016,033 samples, 0.48%)</title><rect x="20.1520%" y="229" width="0.4839%" height="15" fill="rgb(235,183,28)"/><text x="20.4020%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (627,257 samples, 0.30%)</title><rect x="20.6359%" y="229" width="0.2987%" height="15" fill="rgb(221,5,38)"/><text x="20.8859%" y="239.50"></text></g><g><title>normalize_projection_ty (404,274 samples, 0.19%)</title><rect x="20.7421%" y="213" width="0.1925%" height="15" fill="rgb(247,18,42)"/><text x="20.9921%" y="223.50"></text></g><g><title>type_op_normalize_predicate (812,688 samples, 0.39%)</title><rect x="20.9346%" y="229" width="0.3870%" height="15" fill="rgb(241,131,45)"/><text x="21.1846%" y="239.50"></text></g><g><title>normalize_projection_ty (477,413 samples, 0.23%)</title><rect x="21.0943%" y="213" width="0.2274%" height="15" fill="rgb(249,31,29)"/><text x="21.3443%" y="223.50"></text></g><g><title>type_op_prove_predicate (2,791,289 samples, 1.33%)</title><rect x="21.3216%" y="229" width="1.3293%" height="15" fill="rgb(225,111,53)"/><text x="21.5716%" y="239.50"></text></g><g><title>MIR_borrow_checking (46,430,428 samples, 22.11%)</title><rect x="0.5428%" y="261" width="22.1124%" height="15" fill="rgb(238,160,17)"/><text x="0.7928%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (46,378,757 samples, 22.09%)</title><rect x="0.5674%" y="245" width="22.0878%" height="15" fill="rgb(214,148,48)"/><text x="0.8174%" y="255.50">mir_borrowck</text></g><g><title>check_mod_attrs (521,865 samples, 0.25%)</title><rect x="22.7913%" y="245" width="0.2485%" height="15" fill="rgb(232,36,49)"/><text x="23.0413%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (325,264 samples, 0.15%)</title><rect x="23.1194%" y="245" width="0.1549%" height="15" fill="rgb(209,103,24)"/><text x="23.3694%" y="255.50"></text></g><g><title>misc_checking_1 (1,069,912 samples, 0.51%)</title><rect x="22.7848%" y="261" width="0.5095%" height="15" fill="rgb(229,88,8)"/><text x="23.0348%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (842,019 samples, 0.40%)</title><rect x="23.2951%" y="245" width="0.4010%" height="15" fill="rgb(213,181,19)"/><text x="23.5451%" y="255.50"></text></g><g><title>check_mod_liveness (699,768 samples, 0.33%)</title><rect x="23.3629%" y="229" width="0.3333%" height="15" fill="rgb(254,191,54)"/><text x="23.6129%" y="239.50"></text></g><g><title>misc_checking_2 (1,580,767 samples, 0.75%)</title><rect x="23.2944%" y="261" width="0.7528%" height="15" fill="rgb(241,83,37)"/><text x="23.5444%" y="271.50"></text></g><g><title>match_checking (737,168 samples, 0.35%)</title><rect x="23.6961%" y="245" width="0.3511%" height="15" fill="rgb(233,36,39)"/><text x="23.9461%" y="255.50"></text></g><g><title>check_match (721,927 samples, 0.34%)</title><rect x="23.7034%" y="229" width="0.3438%" height="15" fill="rgb(226,3,54)"/><text x="23.9534%" y="239.50"></text></g><g><title>death_checking (274,973 samples, 0.13%)</title><rect x="24.1109%" y="245" width="0.1310%" height="15" fill="rgb(245,192,40)"/><text x="24.3609%" y="255.50"></text></g><g><title>eval_to_const_value_raw (409,065 samples, 0.19%)</title><rect x="24.5393%" y="165" width="0.1948%" height="15" fill="rgb(238,167,29)"/><text x="24.7893%" y="175.50"></text></g><g><title>eval_to_const_value_raw (408,265 samples, 0.19%)</title><rect x="24.5396%" y="149" width="0.1944%" height="15" fill="rgb(232,182,51)"/><text x="24.7896%" y="159.50"></text></g><g><title>eval_to_allocation_raw (406,255 samples, 0.19%)</title><rect x="24.5406%" y="133" width="0.1935%" height="15" fill="rgb(231,60,39)"/><text x="24.7906%" y="143.50"></text></g><g><title>eval_to_allocation_raw (453,965 samples, 0.22%)</title><rect x="24.5188%" y="213" width="0.2162%" height="15" fill="rgb(208,69,12)"/><text x="24.7688%" y="223.50"></text></g><g><title>eval_to_allocation_raw (452,975 samples, 0.22%)</title><rect x="24.5193%" y="197" width="0.2157%" height="15" fill="rgb(235,93,37)"/><text x="24.7693%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (419,045 samples, 0.20%)</title><rect x="24.5354%" y="181" width="0.1996%" height="15" fill="rgb(213,116,39)"/><text x="24.7854%" y="191.50"></text></g><g><title>impl_parent (735,888 samples, 0.35%)</title><rect x="25.4236%" y="181" width="0.3505%" height="15" fill="rgb(222,207,29)"/><text x="25.6736%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (465,057 samples, 0.22%)</title><rect x="25.5526%" y="165" width="0.2215%" height="15" fill="rgb(206,96,30)"/><text x="25.8026%" y="175.50"></text></g><g><title>specialization_graph_of (3,711,991 samples, 1.77%)</title><rect x="24.9162%" y="197" width="1.7678%" height="15" fill="rgb(218,138,4)"/><text x="25.1662%" y="207.50"></text></g><g><title>impl_trait_ref (1,910,632 samples, 0.91%)</title><rect x="25.7741%" y="181" width="0.9099%" height="15" fill="rgb(250,191,14)"/><text x="26.0241%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,622,878 samples, 0.77%)</title><rect x="25.9111%" y="165" width="0.7729%" height="15" fill="rgb(239,60,40)"/><text x="26.1611%" y="175.50"></text></g><g><title>resolve_instance (3,777,872 samples, 1.80%)</title><rect x="24.8860%" y="213" width="1.7992%" height="15" fill="rgb(206,27,48)"/><text x="25.1360%" y="223.50">r..</text></g><g><title>crate_lints (5,149,857 samples, 2.45%)</title><rect x="24.2427%" y="229" width="2.4526%" height="15" fill="rgb(225,35,8)"/><text x="24.4927%" y="239.50">cr..</text></g><g><title>lint_checking (6,001,367 samples, 2.86%)</title><rect x="24.2418%" y="245" width="2.8581%" height="15" fill="rgb(250,213,24)"/><text x="24.4918%" y="255.50">li..</text></g><g><title>module_lints (849,580 samples, 0.40%)</title><rect x="26.6953%" y="229" width="0.4046%" height="15" fill="rgb(247,123,22)"/><text x="26.9453%" y="239.50"></text></g><g><title>lint_mod (845,580 samples, 0.40%)</title><rect x="26.6973%" y="213" width="0.4027%" height="15" fill="rgb(231,138,38)"/><text x="26.9473%" y="223.50"></text></g><g><title>privacy_checking_modules (1,169,023 samples, 0.56%)</title><rect x="27.1677%" y="245" width="0.5567%" height="15" fill="rgb(231,145,46)"/><text x="27.4177%" y="255.50"></text></g><g><title>check_mod_privacy (1,167,443 samples, 0.56%)</title><rect x="27.1684%" y="229" width="0.5560%" height="15" fill="rgb(251,118,11)"/><text x="27.4184%" y="239.50"></text></g><g><title>misc_checking_3 (7,738,767 samples, 3.69%)</title><rect x="24.0472%" y="261" width="3.6856%" height="15" fill="rgb(217,147,25)"/><text x="24.2972%" y="271.50">misc..</text></g><g><title>impl_trait_ref (326,145 samples, 0.16%)</title><rect x="27.9329%" y="197" width="0.1553%" height="15" fill="rgb(247,81,37)"/><text x="28.1829%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (272,963 samples, 0.13%)</title><rect x="27.9582%" y="181" width="0.1300%" height="15" fill="rgb(209,12,38)"/><text x="28.2082%" y="191.50"></text></g><g><title>coherent_trait (749,798 samples, 0.36%)</title><rect x="27.7623%" y="229" width="0.3571%" height="15" fill="rgb(227,1,9)"/><text x="28.0123%" y="239.50"></text></g><g><title>specialization_graph_of (745,518 samples, 0.36%)</title><rect x="27.7643%" y="213" width="0.3551%" height="15" fill="rgb(248,47,43)"/><text x="28.0143%" y="223.50"></text></g><g><title>coherence_checking (793,799 samples, 0.38%)</title><rect x="27.7578%" y="245" width="0.3780%" height="15" fill="rgb(221,10,30)"/><text x="28.0078%" y="255.50"></text></g><g><title>associated_items (292,213 samples, 0.14%)</title><rect x="32.3807%" y="197" width="0.1392%" height="15" fill="rgb(210,229,1)"/><text x="32.6307%" y="207.50"></text></g><g><title>adt_dtorck_constraint (298,113 samples, 0.14%)</title><rect x="32.6905%" y="165" width="0.1420%" height="15" fill="rgb(222,148,37)"/><text x="32.9405%" y="175.50"></text></g><g><title>dropck_outlives (649,685 samples, 0.31%)</title><rect x="32.5360%" y="197" width="0.3094%" height="15" fill="rgb(234,67,33)"/><text x="32.7860%" y="207.50"></text></g><g><title>adt_dtorck_constraint (404,975 samples, 0.19%)</title><rect x="32.6525%" y="181" width="0.1929%" height="15" fill="rgb(247,98,35)"/><text x="32.9025%" y="191.50"></text></g><g><title>generics_of (536,706 samples, 0.26%)</title><rect x="34.0979%" y="181" width="0.2556%" height="15" fill="rgb(247,138,52)"/><text x="34.3479%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (387,274 samples, 0.18%)</title><rect x="34.1691%" y="165" width="0.1844%" height="15" fill="rgb(213,79,30)"/><text x="34.4191%" y="175.50"></text></g><g><title>impl_trait_ref (986,919 samples, 0.47%)</title><rect x="34.4141%" y="181" width="0.4700%" height="15" fill="rgb(246,177,23)"/><text x="34.6641%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (844,758 samples, 0.40%)</title><rect x="34.4818%" y="165" width="0.4023%" height="15" fill="rgb(230,62,27)"/><text x="34.7318%" y="175.50"></text></g><g><title>predicates_of (947,300 samples, 0.45%)</title><rect x="34.9030%" y="181" width="0.4512%" height="15" fill="rgb(216,154,8)"/><text x="35.1530%" y="191.50"></text></g><g><title>predicates_defined_on (626,616 samples, 0.30%)</title><rect x="35.0557%" y="165" width="0.2984%" height="15" fill="rgb(244,35,45)"/><text x="35.3057%" y="175.50"></text></g><g><title>specializes (1,922,650 samples, 0.92%)</title><rect x="35.3542%" y="181" width="0.9157%" height="15" fill="rgb(251,115,12)"/><text x="35.6042%" y="191.50"></text></g><g><title>param_env (1,167,223 samples, 0.56%)</title><rect x="35.7139%" y="165" width="0.5559%" height="15" fill="rgb(240,54,50)"/><text x="35.9639%" y="175.50"></text></g><g><title>def_span (574,248 samples, 0.27%)</title><rect x="35.9963%" y="149" width="0.2735%" height="15" fill="rgb(233,84,52)"/><text x="36.2463%" y="159.50"></text></g><g><title>metadata_decode_entry_def_span (517,238 samples, 0.25%)</title><rect x="36.0235%" y="133" width="0.2463%" height="15" fill="rgb(207,117,47)"/><text x="36.2735%" y="143.50"></text></g><g><title>trait_impls_of (516,756 samples, 0.25%)</title><rect x="36.2744%" y="181" width="0.2461%" height="15" fill="rgb(249,43,39)"/><text x="36.5244%" y="191.50"></text></g><g><title>evaluate_obligation (7,725,545 samples, 3.68%)</title><rect x="32.8454%" y="197" width="3.6793%" height="15" fill="rgb(209,38,44)"/><text x="33.0954%" y="207.50">eval..</text></g><g><title>predicates_of (304,827 samples, 0.15%)</title><rect x="36.8309%" y="197" width="0.1452%" height="15" fill="rgb(236,212,23)"/><text x="37.0809%" y="207.50"></text></g><g><title>associated_item (348,306 samples, 0.17%)</title><rect x="51.7747%" y="165" width="0.1659%" height="15" fill="rgb(242,79,21)"/><text x="52.0247%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (279,986 samples, 0.13%)</title><rect x="51.8072%" y="149" width="0.1333%" height="15" fill="rgb(211,96,35)"/><text x="52.0572%" y="159.50"></text></g><g><title>associated_items (490,568 samples, 0.23%)</title><rect x="51.7205%" y="181" width="0.2336%" height="15" fill="rgb(253,215,40)"/><text x="51.9705%" y="191.50"></text></g><g><title>adt_def (220,712 samples, 0.11%)</title><rect x="52.3785%" y="149" width="0.1051%" height="15" fill="rgb(211,81,21)"/><text x="52.6285%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (212,702 samples, 0.10%)</title><rect x="52.3824%" y="133" width="0.1013%" height="15" fill="rgb(208,190,38)"/><text x="52.6324%" y="143.50"></text></g><g><title>adt_def (279,932 samples, 0.13%)</title><rect x="53.1706%" y="69" width="0.1333%" height="15" fill="rgb(235,213,38)"/><text x="53.4206%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (267,312 samples, 0.13%)</title><rect x="53.1766%" y="53" width="0.1273%" height="15" fill="rgb(237,122,38)"/><text x="53.4266%" y="63.50"></text></g><g><title>adt_def (215,303 samples, 0.10%)</title><rect x="53.4776%" y="37" width="0.1025%" height="15" fill="rgb(244,218,35)"/><text x="53.7276%" y="47.50"></text></g><g><title>adt_dtorck_constraint (435,236 samples, 0.21%)</title><rect x="53.4330%" y="53" width="0.2073%" height="15" fill="rgb(240,68,47)"/><text x="53.6830%" y="63.50"></text></g><g><title>adt_dtorck_constraint (727,069 samples, 0.35%)</title><rect x="53.3177%" y="69" width="0.3463%" height="15" fill="rgb(210,16,53)"/><text x="53.5677%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,262,345 samples, 0.60%)</title><rect x="53.0969%" y="85" width="0.6012%" height="15" fill="rgb(235,124,12)"/><text x="53.3469%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,455,716 samples, 0.69%)</title><rect x="53.0186%" y="101" width="0.6933%" height="15" fill="rgb(224,169,11)"/><text x="53.2686%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,773,511 samples, 0.84%)</title><rect x="52.8893%" y="117" width="0.8446%" height="15" fill="rgb(250,166,2)"/><text x="53.1393%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,168,304 samples, 1.03%)</title><rect x="52.7391%" y="133" width="1.0327%" height="15" fill="rgb(242,216,29)"/><text x="52.9891%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,778,123 samples, 1.32%)</title><rect x="52.5091%" y="149" width="1.3231%" height="15" fill="rgb(230,116,27)"/><text x="52.7591%" y="159.50"></text></g><g><title>def_span (259,123 samples, 0.12%)</title><rect x="53.8322%" y="149" width="0.1234%" height="15" fill="rgb(228,99,48)"/><text x="54.0822%" y="159.50"></text></g><g><title>adt_dtorck_constraint (3,588,920 samples, 1.71%)</title><rect x="52.2790%" y="165" width="1.7092%" height="15" fill="rgb(253,11,6)"/><text x="52.5290%" y="175.50"></text></g><g><title>dropck_outlives (4,219,814 samples, 2.01%)</title><rect x="51.9956%" y="181" width="2.0097%" height="15" fill="rgb(247,143,39)"/><text x="52.2456%" y="191.50">d..</text></g><g><title>adt_sized_constraint (318,534 samples, 0.15%)</title><rect x="54.9705%" y="165" width="0.1517%" height="15" fill="rgb(236,97,10)"/><text x="55.2205%" y="175.50"></text></g><g><title>specializes (437,746 samples, 0.21%)</title><rect x="55.3071%" y="165" width="0.2085%" height="15" fill="rgb(233,208,19)"/><text x="55.5571%" y="175.50"></text></g><g><title>evaluate_obligation (3,810,764 samples, 1.81%)</title><rect x="54.0053%" y="181" width="1.8149%" height="15" fill="rgb(216,164,2)"/><text x="54.2553%" y="191.50">e..</text></g><g><title>trait_impls_of (630,399 samples, 0.30%)</title><rect x="55.5199%" y="165" width="0.3002%" height="15" fill="rgb(220,129,5)"/><text x="55.7699%" y="175.50"></text></g><g><title>implementations_of_trait (214,691 samples, 0.10%)</title><rect x="55.7179%" y="149" width="0.1022%" height="15" fill="rgb(242,17,10)"/><text x="55.9679%" y="159.50"></text></g><g><title>is_copy_raw (423,264 samples, 0.20%)</title><rect x="56.1529%" y="181" width="0.2016%" height="15" fill="rgb(242,107,0)"/><text x="56.4029%" y="191.50"></text></g><g><title>evaluate_obligation (360,183 samples, 0.17%)</title><rect x="56.1830%" y="165" width="0.1715%" height="15" fill="rgb(251,28,31)"/><text x="56.4330%" y="175.50"></text></g><g><title>method_autoderef_steps (577,723 samples, 0.28%)</title><rect x="56.4298%" y="181" width="0.2751%" height="15" fill="rgb(233,223,10)"/><text x="56.6798%" y="191.50"></text></g><g><title>evaluate_obligation (265,401 samples, 0.13%)</title><rect x="56.5785%" y="165" width="0.1264%" height="15" fill="rgb(215,21,27)"/><text x="56.8285%" y="175.50"></text></g><g><title>predicates_of (523,635 samples, 0.25%)</title><rect x="56.7153%" y="181" width="0.2494%" height="15" fill="rgb(232,23,21)"/><text x="56.9653%" y="191.50"></text></g><g><title>predicates_defined_on (357,142 samples, 0.17%)</title><rect x="56.7946%" y="165" width="0.1701%" height="15" fill="rgb(244,5,23)"/><text x="57.0446%" y="175.50"></text></g><g><title>typeck (42,024,689 samples, 20.01%)</title><rect x="37.0705%" y="197" width="20.0142%" height="15" fill="rgb(226,81,46)"/><text x="37.3205%" y="207.50">typeck</text></g><g><title>item_bodies_checking (60,808,738 samples, 28.96%)</title><rect x="28.1400%" y="245" width="28.9601%" height="15" fill="rgb(247,70,30)"/><text x="28.3900%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (60,805,268 samples, 28.96%)</title><rect x="28.1417%" y="229" width="28.9584%" height="15" fill="rgb(212,68,19)"/><text x="28.3917%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (60,780,548 samples, 28.95%)</title><rect x="28.1534%" y="213" width="28.9467%" height="15" fill="rgb(240,187,13)"/><text x="28.4034%" y="223.50">typeck</text></g><g><title>impl_trait_ref (353,934 samples, 0.17%)</title><rect x="57.2408%" y="165" width="0.1686%" height="15" fill="rgb(223,113,26)"/><text x="57.4908%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (328,082 samples, 0.16%)</title><rect x="57.2531%" y="149" width="0.1562%" height="15" fill="rgb(206,192,2)"/><text x="57.5031%" y="159.50"></text></g><g><title>adt_destructor (581,556 samples, 0.28%)</title><rect x="57.1468%" y="213" width="0.2770%" height="15" fill="rgb(241,108,4)"/><text x="57.3968%" y="223.50"></text></g><g><title>coherent_trait (578,026 samples, 0.28%)</title><rect x="57.1484%" y="197" width="0.2753%" height="15" fill="rgb(247,173,49)"/><text x="57.3984%" y="207.50"></text></g><g><title>specialization_graph_of (576,466 samples, 0.27%)</title><rect x="57.1492%" y="181" width="0.2745%" height="15" fill="rgb(224,114,35)"/><text x="57.3992%" y="191.50"></text></g><g><title>typeck (488,155 samples, 0.23%)</title><rect x="57.4665%" y="213" width="0.2325%" height="15" fill="rgb(245,159,27)"/><text x="57.7165%" y="223.50"></text></g><g><title>item_types_checking (1,258,535 samples, 0.60%)</title><rect x="57.1001%" y="245" width="0.5994%" height="15" fill="rgb(245,172,44)"/><text x="57.3501%" y="255.50"></text></g><g><title>check_mod_item_types (1,256,524 samples, 0.60%)</title><rect x="57.1011%" y="229" width="0.5984%" height="15" fill="rgb(236,23,11)"/><text x="57.3511%" y="239.50"></text></g><g><title>named_region_map (435,475 samples, 0.21%)</title><rect x="57.9571%" y="197" width="0.2074%" height="15" fill="rgb(205,117,38)"/><text x="58.2071%" y="207.50"></text></g><g><title>resolve_lifetimes (430,025 samples, 0.20%)</title><rect x="57.9597%" y="181" width="0.2048%" height="15" fill="rgb(237,72,25)"/><text x="58.2097%" y="191.50"></text></g><g><title>lint_levels (250,192 samples, 0.12%)</title><rect x="58.0453%" y="165" width="0.1192%" height="15" fill="rgb(244,70,9)"/><text x="58.2953%" y="175.50"></text></g><g><title>generics_of (666,188 samples, 0.32%)</title><rect x="57.8483%" y="213" width="0.3173%" height="15" fill="rgb(217,125,39)"/><text x="58.0983%" y="223.50"></text></g><g><title>predicates_of (277,114 samples, 0.13%)</title><rect x="58.1695%" y="213" width="0.1320%" height="15" fill="rgb(235,36,10)"/><text x="58.4195%" y="223.50"></text></g><g><title>predicates_defined_on (259,604 samples, 0.12%)</title><rect x="58.1778%" y="197" width="0.1236%" height="15" fill="rgb(251,123,47)"/><text x="58.4278%" y="207.50"></text></g><g><title>type_collecting (1,339,895 samples, 0.64%)</title><rect x="57.7007%" y="245" width="0.6381%" height="15" fill="rgb(221,13,13)"/><text x="57.9507%" y="255.50"></text></g><g><title>collect_mod_item_types (1,332,965 samples, 0.63%)</title><rect x="57.7040%" y="229" width="0.6348%" height="15" fill="rgb(238,131,9)"/><text x="57.9540%" y="239.50"></text></g><g><title>check_impl_item_well_formed (288,623 samples, 0.14%)</title><rect x="58.3878%" y="229" width="0.1375%" height="15" fill="rgb(211,50,8)"/><text x="58.6378%" y="239.50"></text></g><g><title>adt_sized_constraint (219,242 samples, 0.10%)</title><rect x="58.9531%" y="181" width="0.1044%" height="15" fill="rgb(245,182,24)"/><text x="59.2031%" y="191.50"></text></g><g><title>adt_sized_constraint (369,863 samples, 0.18%)</title><rect x="58.8833%" y="197" width="0.1761%" height="15" fill="rgb(242,14,37)"/><text x="59.1333%" y="207.50"></text></g><g><title>evaluate_obligation (667,327 samples, 0.32%)</title><rect x="58.7845%" y="213" width="0.3178%" height="15" fill="rgb(246,228,12)"/><text x="59.0345%" y="223.50"></text></g><g><title>region_scope_tree (472,644 samples, 0.23%)</title><rect x="59.2614%" y="213" width="0.2251%" height="15" fill="rgb(213,55,15)"/><text x="59.5114%" y="223.50"></text></g><g><title>analysis (124,310,347 samples, 59.20%)</title><rect x="0.3370%" y="277" width="59.2026%" height="15" fill="rgb(209,9,3)"/><text x="0.5870%" y="287.50">analysis</text></g><g><title>type_check_crate (66,786,266 samples, 31.81%)</title><rect x="27.7328%" y="261" width="31.8069%" height="15" fill="rgb(230,59,30)"/><text x="27.9828%" y="271.50">type_check_crate</text></g><g><title>wf_checking (2,518,938 samples, 1.20%)</title><rect x="58.3400%" y="245" width="1.1996%" height="15" fill="rgb(209,121,21)"/><text x="58.5900%" y="255.50"></text></g><g><title>check_item_well_formed (2,130,054 samples, 1.01%)</title><rect x="58.5252%" y="229" width="1.0144%" height="15" fill="rgb(220,109,13)"/><text x="58.7752%" y="239.50"></text></g><g><title>codegen_crate (417,904 samples, 0.20%)</title><rect x="59.5443%" y="277" width="0.1990%" height="15" fill="rgb(232,18,1)"/><text x="59.7943%" y="287.50"></text></g><g><title>metadata_load_macro (742,586 samples, 0.35%)</title><rect x="90.2311%" y="229" width="0.3537%" height="15" fill="rgb(215,41,42)"/><text x="90.4811%" y="239.50"></text></g><g><title>macro_expand_crate (65,759,114 samples, 31.32%)</title><rect x="59.9385%" y="261" width="31.3177%" height="15" fill="rgb(224,123,36)"/><text x="60.1885%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (65,741,514 samples, 31.31%)</title><rect x="59.9469%" y="245" width="31.3093%" height="15" fill="rgb(240,125,3)"/><text x="60.1969%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (1,409,875 samples, 0.67%)</title><rect x="90.5848%" y="229" width="0.6715%" height="15" fill="rgb(205,98,50)"/><text x="90.8348%" y="239.50"></text></g><g><title>metadata_register_crate (491,515 samples, 0.23%)</title><rect x="91.0222%" y="213" width="0.2341%" height="15" fill="rgb(205,185,37)"/><text x="91.2722%" y="223.50"></text></g><g><title>maybe_create_a_macro_crate (447,485 samples, 0.21%)</title><rect x="91.2568%" y="261" width="0.2131%" height="15" fill="rgb(238,207,15)"/><text x="91.5068%" y="271.50"></text></g><g><title>finalize_macro_resolutions (681,327 samples, 0.32%)</title><rect x="91.6372%" y="245" width="0.3245%" height="15" fill="rgb(213,199,42)"/><text x="91.8872%" y="255.50"></text></g><g><title>late_resolve_crate (3,368,918 samples, 1.60%)</title><rect x="91.9617%" y="245" width="1.6044%" height="15" fill="rgb(235,201,11)"/><text x="92.2117%" y="255.50"></text></g><g><title>configure_and_expand (71,176,994 samples, 33.90%)</title><rect x="59.7433%" y="277" width="33.8979%" height="15" fill="rgb(207,46,11)"/><text x="59.9933%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (4,412,999 samples, 2.10%)</title><rect x="91.5396%" y="261" width="2.1017%" height="15" fill="rgb(241,35,35)"/><text x="91.7896%" y="271.50">r..</text></g><g><title>drop_ast (247,512 samples, 0.12%)</title><rect x="93.6413%" y="277" width="0.1179%" height="15" fill="rgb(243,32,47)"/><text x="93.8913%" y="287.50"></text></g><g><title>early_lint_checks (681,978 samples, 0.32%)</title><rect x="93.7675%" y="277" width="0.3248%" height="15" fill="rgb(247,202,23)"/><text x="94.0175%" y="287.50"></text></g><g><title>free_global_ctxt (4,117,755 samples, 1.96%)</title><rect x="94.0923%" y="277" width="1.9611%" height="15" fill="rgb(219,102,11)"/><text x="94.3423%" y="287.50">f..</text></g><g><title>hir_lowering (3,787,282 samples, 1.80%)</title><rect x="96.1291%" y="277" width="1.8037%" height="15" fill="rgb(243,110,44)"/><text x="96.3791%" y="287.50">h..</text></g><g><title>parse_crate (2,768,571 samples, 1.32%)</title><rect x="97.9635%" y="277" width="1.3185%" height="15" fill="rgb(222,74,54)"/><text x="98.2135%" y="287.50"></text></g><g><title>prepare_outputs (212,582 samples, 0.10%)</title><rect x="99.2848%" y="277" width="0.1012%" height="15" fill="rgb(216,99,12)"/><text x="99.5348%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (853,500 samples, 0.41%)</title><rect x="99.3860%" y="277" width="0.4065%" height="15" fill="rgb(226,22,26)"/><text x="99.6360%" y="287.50"></text></g><g><title>all (209,974,341 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (209,974,341 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (326,974 samples, 0.16%)</title><rect x="99.8443%" y="277" width="0.1557%" height="15" fill="rgb(252,105,26)"/><text x="100.0943%" y="287.50"></text></g></svg></svg>