<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (165,080 samples, 0.13%)</title><rect x="7.3043%" y="213" width="0.1284%" height="15" fill="rgb(227,0,7)"/><text x="7.5543%" y="223.50"></text></g><g><title>param_env (343,605 samples, 0.27%)</title><rect x="8.3409%" y="181" width="0.2672%" height="15" fill="rgb(217,0,24)"/><text x="8.5909%" y="191.50"></text></g><g><title>item_attrs (167,341 samples, 0.13%)</title><rect x="8.8958%" y="149" width="0.1301%" height="15" fill="rgb(221,193,54)"/><text x="9.1458%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (160,231 samples, 0.12%)</title><rect x="8.9013%" y="133" width="0.1246%" height="15" fill="rgb(248,212,6)"/><text x="9.1513%" y="143.50"></text></g><g><title>codegen_fn_attrs (270,882 samples, 0.21%)</title><rect x="8.8311%" y="165" width="0.2107%" height="15" fill="rgb(208,68,35)"/><text x="9.0811%" y="175.50"></text></g><g><title>adt_drop_tys (313,763 samples, 0.24%)</title><rect x="10.3072%" y="133" width="0.2440%" height="15" fill="rgb(232,128,0)"/><text x="10.5572%" y="143.50"></text></g><g><title>is_copy_raw (829,361 samples, 0.64%)</title><rect x="10.5512%" y="133" width="0.6450%" height="15" fill="rgb(207,160,47)"/><text x="10.8012%" y="143.50"></text></g><g><title>evaluate_obligation (694,688 samples, 0.54%)</title><rect x="10.6560%" y="117" width="0.5403%" height="15" fill="rgb(228,23,34)"/><text x="10.9060%" y="127.50"></text></g><g><title>needs_drop_raw (1,269,044 samples, 0.99%)</title><rect x="10.2129%" y="149" width="0.9869%" height="15" fill="rgb(218,30,26)"/><text x="10.4629%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (301,231 samples, 0.23%)</title><rect x="11.3008%" y="133" width="0.2343%" height="15" fill="rgb(220,122,19)"/><text x="11.5508%" y="143.50"></text></g><g><title>impl_parent (451,977 samples, 0.35%)</title><rect x="12.1043%" y="117" width="0.3515%" height="15" fill="rgb(250,228,42)"/><text x="12.3543%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (280,692 samples, 0.22%)</title><rect x="12.2375%" y="101" width="0.2183%" height="15" fill="rgb(240,193,28)"/><text x="12.4875%" y="111.50"></text></g><g><title>specialization_graph_of (1,699,469 samples, 1.32%)</title><rect x="11.5891%" y="133" width="1.3217%" height="15" fill="rgb(216,20,37)"/><text x="11.8391%" y="143.50"></text></g><g><title>impl_trait_ref (585,026 samples, 0.45%)</title><rect x="12.4558%" y="117" width="0.4550%" height="15" fill="rgb(206,188,39)"/><text x="12.7058%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (416,625 samples, 0.32%)</title><rect x="12.5867%" y="101" width="0.3240%" height="15" fill="rgb(217,207,13)"/><text x="12.8367%" y="111.50"></text></g><g><title>resolve_instance (2,259,743 samples, 1.76%)</title><rect x="11.1998%" y="149" width="1.7574%" height="15" fill="rgb(231,73,38)"/><text x="11.4498%" y="159.50"></text></g><g><title>thir_body (473,837 samples, 0.37%)</title><rect x="12.9731%" y="149" width="0.3685%" height="15" fill="rgb(225,20,46)"/><text x="13.2231%" y="159.50"></text></g><g><title>mir_const (7,045,896 samples, 5.48%)</title><rect x="7.9268%" y="197" width="5.4796%" height="15" fill="rgb(210,31,41)"/><text x="8.1768%" y="207.50">mir_con..</text></g><g><title>unsafety_check_result (6,169,835 samples, 4.80%)</title><rect x="8.6081%" y="181" width="4.7983%" height="15" fill="rgb(221,200,47)"/><text x="8.8581%" y="191.50">unsafe..</text></g><g><title>mir_built (5,612,290 samples, 4.36%)</title><rect x="9.0417%" y="165" width="4.3647%" height="15" fill="rgb(226,26,5)"/><text x="9.2917%" y="175.50">mir_b..</text></g><g><title>mir_promoted (7,620,255 samples, 5.93%)</title><rect x="7.4982%" y="213" width="5.9263%" height="15" fill="rgb(249,33,26)"/><text x="7.7482%" y="223.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (797,339 samples, 0.62%)</title><rect x="13.4245%" y="213" width="0.6201%" height="15" fill="rgb(235,183,28)"/><text x="13.6745%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (462,344 samples, 0.36%)</title><rect x="14.0446%" y="213" width="0.3596%" height="15" fill="rgb(221,5,38)"/><text x="14.2946%" y="223.50"></text></g><g><title>normalize_projection_ty (235,062 samples, 0.18%)</title><rect x="14.2213%" y="197" width="0.1828%" height="15" fill="rgb(247,18,42)"/><text x="14.4713%" y="207.50"></text></g><g><title>type_op_normalize_predicate (257,741 samples, 0.20%)</title><rect x="14.4041%" y="213" width="0.2004%" height="15" fill="rgb(241,131,45)"/><text x="14.6541%" y="223.50"></text></g><g><title>type_op_normalize_ty (287,774 samples, 0.22%)</title><rect x="14.6046%" y="213" width="0.2238%" height="15" fill="rgb(249,31,29)"/><text x="14.8546%" y="223.50"></text></g><g><title>type_op_prove_predicate (3,182,508 samples, 2.48%)</title><rect x="14.8284%" y="213" width="2.4750%" height="15" fill="rgb(225,111,53)"/><text x="15.0784%" y="223.50">ty..</text></g><g><title>MIR_borrow_checking (21,230,546 samples, 16.51%)</title><rect x="0.8003%" y="245" width="16.5110%" height="15" fill="rgb(238,160,17)"/><text x="1.0503%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,167,406 samples, 16.46%)</title><rect x="0.8494%" y="229" width="16.4619%" height="15" fill="rgb(214,148,48)"/><text x="1.0994%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (254,243 samples, 0.20%)</title><rect x="17.3239%" y="245" width="0.1977%" height="15" fill="rgb(232,36,49)"/><text x="17.5739%" y="255.50"></text></g><g><title>item_attrs (159,533 samples, 0.12%)</title><rect x="18.0102%" y="165" width="0.1241%" height="15" fill="rgb(209,103,24)"/><text x="18.2602%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (151,443 samples, 0.12%)</title><rect x="18.0165%" y="149" width="0.1178%" height="15" fill="rgb(229,88,8)"/><text x="18.2665%" y="159.50"></text></g><g><title>codegen_fn_attrs (276,354 samples, 0.21%)</title><rect x="17.9767%" y="181" width="0.2149%" height="15" fill="rgb(213,181,19)"/><text x="18.2267%" y="191.50"></text></g><g><title>should_inherit_track_caller (402,385 samples, 0.31%)</title><rect x="17.8849%" y="197" width="0.3129%" height="15" fill="rgb(254,191,54)"/><text x="18.1349%" y="207.50"></text></g><g><title>codegen_fn_attrs (626,507 samples, 0.49%)</title><rect x="17.7296%" y="213" width="0.4872%" height="15" fill="rgb(241,83,37)"/><text x="17.9796%" y="223.50"></text></g><g><title>check_mod_attrs (862,069 samples, 0.67%)</title><rect x="17.5465%" y="229" width="0.6704%" height="15" fill="rgb(233,36,39)"/><text x="17.7965%" y="239.50"></text></g><g><title>check_mod_const_bodies (130,892 samples, 0.10%)</title><rect x="18.2169%" y="229" width="0.1018%" height="15" fill="rgb(226,3,54)"/><text x="18.4669%" y="239.50"></text></g><g><title>lookup_deprecation_entry (230,833 samples, 0.18%)</title><rect x="18.5880%" y="213" width="0.1795%" height="15" fill="rgb(245,192,40)"/><text x="18.8380%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (626,097 samples, 0.49%)</title><rect x="18.3848%" y="229" width="0.4869%" height="15" fill="rgb(238,167,29)"/><text x="18.6348%" y="239.50"></text></g><g><title>misc_checking_1 (1,810,300 samples, 1.41%)</title><rect x="17.5220%" y="245" width="1.4079%" height="15" fill="rgb(232,182,51)"/><text x="17.7720%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (370,164 samples, 0.29%)</title><rect x="18.9311%" y="229" width="0.2879%" height="15" fill="rgb(231,60,39)"/><text x="19.1811%" y="239.50"></text></g><g><title>check_mod_liveness (319,644 samples, 0.25%)</title><rect x="18.9704%" y="213" width="0.2486%" height="15" fill="rgb(208,69,12)"/><text x="19.2204%" y="223.50"></text></g><g><title>type_uninhabited_from (148,891 samples, 0.12%)</title><rect x="19.1032%" y="197" width="0.1158%" height="15" fill="rgb(235,93,37)"/><text x="19.3532%" y="207.50"></text></g><g><title>misc_checking_2 (758,578 samples, 0.59%)</title><rect x="18.9299%" y="245" width="0.5899%" height="15" fill="rgb(213,116,39)"/><text x="19.1799%" y="255.50"></text></g><g><title>match_checking (386,824 samples, 0.30%)</title><rect x="19.2190%" y="229" width="0.3008%" height="15" fill="rgb(222,207,29)"/><text x="19.4690%" y="239.50"></text></g><g><title>check_match (369,274 samples, 0.29%)</title><rect x="19.2327%" y="213" width="0.2872%" height="15" fill="rgb(206,96,30)"/><text x="19.4827%" y="223.50"></text></g><g><title>check_private_in_public (142,952 samples, 0.11%)</title><rect x="19.5274%" y="229" width="0.1112%" height="15" fill="rgb(218,138,4)"/><text x="19.7774%" y="239.50"></text></g><g><title>death_checking (273,233 samples, 0.21%)</title><rect x="19.6386%" y="229" width="0.2125%" height="15" fill="rgb(250,191,14)"/><text x="19.8886%" y="239.50"></text></g><g><title>param_env (223,381 samples, 0.17%)</title><rect x="20.6407%" y="197" width="0.1737%" height="15" fill="rgb(239,60,40)"/><text x="20.8907%" y="207.50"></text></g><g><title>crate_lints (2,812,782 samples, 2.19%)</title><rect x="19.8524%" y="213" width="2.1875%" height="15" fill="rgb(206,27,48)"/><text x="20.1024%" y="223.50">c..</text></g><g><title>type_of (1,532,050 samples, 1.19%)</title><rect x="20.8484%" y="197" width="1.1915%" height="15" fill="rgb(225,35,8)"/><text x="21.0984%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (1,163,386 samples, 0.90%)</title><rect x="21.1351%" y="181" width="0.9048%" height="15" fill="rgb(250,213,24)"/><text x="21.3851%" y="191.50"></text></g><g><title>lint_checking (3,060,994 samples, 2.38%)</title><rect x="19.8511%" y="229" width="2.3805%" height="15" fill="rgb(247,123,22)"/><text x="20.1011%" y="239.50">li..</text></g><g><title>module_lints (246,552 samples, 0.19%)</title><rect x="22.0398%" y="213" width="0.1917%" height="15" fill="rgb(231,138,38)"/><text x="22.2898%" y="223.50"></text></g><g><title>lint_mod (242,772 samples, 0.19%)</title><rect x="22.0428%" y="197" width="0.1888%" height="15" fill="rgb(231,145,46)"/><text x="22.2928%" y="207.50"></text></g><g><title>privacy_access_levels (149,522 samples, 0.12%)</title><rect x="22.2316%" y="229" width="0.1163%" height="15" fill="rgb(251,118,11)"/><text x="22.4816%" y="239.50"></text></g><g><title>privacy_checking_modules (677,868 samples, 0.53%)</title><rect x="22.3479%" y="229" width="0.5272%" height="15" fill="rgb(217,147,25)"/><text x="22.5979%" y="239.50"></text></g><g><title>check_mod_privacy (675,548 samples, 0.53%)</title><rect x="22.3497%" y="213" width="0.5254%" height="15" fill="rgb(247,81,37)"/><text x="22.5997%" y="223.50"></text></g><g><title>misc_checking_3 (4,332,379 samples, 3.37%)</title><rect x="19.5198%" y="245" width="3.3693%" height="15" fill="rgb(209,12,38)"/><text x="19.7698%" y="255.50">mis..</text></g><g><title>adt_def (197,972 samples, 0.15%)</title><rect x="26.8480%" y="101" width="0.1540%" height="15" fill="rgb(227,1,9)"/><text x="27.0980%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (197,742 samples, 0.15%)</title><rect x="26.8482%" y="85" width="0.1538%" height="15" fill="rgb(248,47,43)"/><text x="27.0982%" y="95.50"></text></g><g><title>adt_sized_constraint (243,212 samples, 0.19%)</title><rect x="26.8451%" y="117" width="0.1891%" height="15" fill="rgb(221,10,30)"/><text x="27.0951%" y="127.50"></text></g><g><title>adt_sized_constraint (248,212 samples, 0.19%)</title><rect x="26.8423%" y="133" width="0.1930%" height="15" fill="rgb(210,229,1)"/><text x="27.0923%" y="143.50"></text></g><g><title>adt_sized_constraint (252,903 samples, 0.20%)</title><rect x="26.8394%" y="149" width="0.1967%" height="15" fill="rgb(222,148,37)"/><text x="27.0894%" y="159.50"></text></g><g><title>adt_sized_constraint (268,203 samples, 0.21%)</title><rect x="26.8295%" y="181" width="0.2086%" height="15" fill="rgb(234,67,33)"/><text x="27.0795%" y="191.50"></text></g><g><title>adt_sized_constraint (264,053 samples, 0.21%)</title><rect x="26.8327%" y="165" width="0.2054%" height="15" fill="rgb(247,98,35)"/><text x="27.0827%" y="175.50"></text></g><g><title>impl_parent (3,203,833 samples, 2.49%)</title><rect x="27.0404%" y="181" width="2.4916%" height="15" fill="rgb(247,138,52)"/><text x="27.2904%" y="191.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,828,978 samples, 1.42%)</title><rect x="28.1096%" y="165" width="1.4224%" height="15" fill="rgb(213,79,30)"/><text x="28.3596%" y="175.50"></text></g><g><title>impl_trait_ref (8,154,776 samples, 6.34%)</title><rect x="29.5334%" y="181" width="6.3420%" height="15" fill="rgb(246,177,23)"/><text x="29.7834%" y="191.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,743,279 samples, 5.24%)</title><rect x="30.6311%" y="165" width="5.2442%" height="15" fill="rgb(230,62,27)"/><text x="30.8811%" y="175.50">metada..</text></g><g><title>trait_impls_of (1,475,718 samples, 1.15%)</title><rect x="35.9139%" y="181" width="1.1477%" height="15" fill="rgb(216,154,8)"/><text x="36.1639%" y="191.50"></text></g><g><title>implementations_of_trait (484,908 samples, 0.38%)</title><rect x="36.6844%" y="165" width="0.3771%" height="15" fill="rgb(244,35,45)"/><text x="36.9344%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (296,375 samples, 0.23%)</title><rect x="36.8311%" y="149" width="0.2305%" height="15" fill="rgb(251,115,12)"/><text x="37.0811%" y="159.50"></text></g><g><title>coherent_trait (18,146,392 samples, 14.11%)</title><rect x="22.9501%" y="213" width="14.1124%" height="15" fill="rgb(240,54,50)"/><text x="23.2001%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (18,121,982 samples, 14.09%)</title><rect x="22.9691%" y="197" width="14.0934%" height="15" fill="rgb(233,84,52)"/><text x="23.2191%" y="207.50">specialization_graph_..</text></g><g><title>coherence_checking (18,228,944 samples, 14.18%)</title><rect x="22.9291%" y="229" width="14.1766%" height="15" fill="rgb(207,117,47)"/><text x="23.1791%" y="239.50">coherence_checking</text></g><g><title>associated_items (130,952 samples, 0.10%)</title><rect x="43.1315%" y="181" width="0.1018%" height="15" fill="rgb(249,43,39)"/><text x="43.3815%" y="191.50"></text></g><g><title>dropck_outlives (262,722 samples, 0.20%)</title><rect x="43.2685%" y="181" width="0.2043%" height="15" fill="rgb(209,38,44)"/><text x="43.5185%" y="191.50"></text></g><g><title>evaluate_obligation (776,068 samples, 0.60%)</title><rect x="43.4728%" y="181" width="0.6035%" height="15" fill="rgb(236,212,23)"/><text x="43.7228%" y="191.50"></text></g><g><title>evaluate_obligation (268,124 samples, 0.21%)</title><rect x="44.5148%" y="165" width="0.2085%" height="15" fill="rgb(242,79,21)"/><text x="44.7648%" y="175.50"></text></g><g><title>method_autoderef_steps (608,008 samples, 0.47%)</title><rect x="44.2568%" y="181" width="0.4728%" height="15" fill="rgb(211,96,35)"/><text x="44.5068%" y="191.50"></text></g><g><title>predicates_of (136,111 samples, 0.11%)</title><rect x="44.7623%" y="181" width="0.1059%" height="15" fill="rgb(253,215,40)"/><text x="45.0123%" y="191.50"></text></g><g><title>associated_item (260,404 samples, 0.20%)</title><rect x="51.5033%" y="149" width="0.2025%" height="15" fill="rgb(211,81,21)"/><text x="51.7533%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (201,083 samples, 0.16%)</title><rect x="51.5494%" y="133" width="0.1564%" height="15" fill="rgb(208,190,38)"/><text x="51.7994%" y="143.50"></text></g><g><title>associated_items (385,974 samples, 0.30%)</title><rect x="51.4227%" y="165" width="0.3002%" height="15" fill="rgb(235,213,38)"/><text x="51.6727%" y="175.50"></text></g><g><title>adt_def (171,632 samples, 0.13%)</title><rect x="52.1015%" y="133" width="0.1335%" height="15" fill="rgb(237,122,38)"/><text x="52.3515%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (168,842 samples, 0.13%)</title><rect x="52.1037%" y="117" width="0.1313%" height="15" fill="rgb(244,218,35)"/><text x="52.3537%" y="127.50"></text></g><g><title>item_attrs (130,172 samples, 0.10%)</title><rect x="52.1337%" y="101" width="0.1012%" height="15" fill="rgb(240,68,47)"/><text x="52.3837%" y="111.50"></text></g><g><title>adt_def (210,842 samples, 0.16%)</title><rect x="52.2686%" y="117" width="0.1640%" height="15" fill="rgb(210,16,53)"/><text x="52.5186%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (209,692 samples, 0.16%)</title><rect x="52.2695%" y="101" width="0.1631%" height="15" fill="rgb(235,124,12)"/><text x="52.5195%" y="111.50"></text></g><g><title>adt_dtorck_constraint (153,012 samples, 0.12%)</title><rect x="52.4922%" y="101" width="0.1190%" height="15" fill="rgb(224,169,11)"/><text x="52.7422%" y="111.50"></text></g><g><title>adt_dtorck_constraint (228,503 samples, 0.18%)</title><rect x="52.4410%" y="117" width="0.1777%" height="15" fill="rgb(250,166,2)"/><text x="52.6910%" y="127.50"></text></g><g><title>adt_dtorck_constraint (508,196 samples, 0.40%)</title><rect x="52.2498%" y="133" width="0.3952%" height="15" fill="rgb(242,216,29)"/><text x="52.4998%" y="143.50"></text></g><g><title>adt_dtorck_constraint (803,469 samples, 0.62%)</title><rect x="52.0560%" y="149" width="0.6249%" height="15" fill="rgb(230,116,27)"/><text x="52.3060%" y="159.50"></text></g><g><title>dropck_outlives (1,349,836 samples, 1.05%)</title><rect x="51.7567%" y="165" width="1.0498%" height="15" fill="rgb(228,99,48)"/><text x="52.0067%" y="175.50"></text></g><g><title>normalize_projection_ty (161,582 samples, 0.13%)</title><rect x="52.6808%" y="149" width="0.1257%" height="15" fill="rgb(253,11,6)"/><text x="52.9308%" y="159.50"></text></g><g><title>adt_def (380,735 samples, 0.30%)</title><rect x="53.9357%" y="85" width="0.2961%" height="15" fill="rgb(247,143,39)"/><text x="54.1857%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (380,475 samples, 0.30%)</title><rect x="53.9359%" y="69" width="0.2959%" height="15" fill="rgb(236,97,10)"/><text x="54.1859%" y="79.50"></text></g><g><title>item_attrs (376,635 samples, 0.29%)</title><rect x="53.9389%" y="53" width="0.2929%" height="15" fill="rgb(233,208,19)"/><text x="54.1889%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (376,085 samples, 0.29%)</title><rect x="53.9393%" y="37" width="0.2925%" height="15" fill="rgb(216,164,2)"/><text x="54.1893%" y="47.50"></text></g><g><title>adt_sized_constraint (383,495 samples, 0.30%)</title><rect x="53.9345%" y="101" width="0.2982%" height="15" fill="rgb(220,129,5)"/><text x="54.1845%" y="111.50"></text></g><g><title>adt_sized_constraint (411,875 samples, 0.32%)</title><rect x="53.9151%" y="117" width="0.3203%" height="15" fill="rgb(242,17,10)"/><text x="54.1651%" y="127.50"></text></g><g><title>adt_sized_constraint (420,185 samples, 0.33%)</title><rect x="53.9103%" y="133" width="0.3268%" height="15" fill="rgb(242,107,0)"/><text x="54.1603%" y="143.50"></text></g><g><title>adt_sized_constraint (468,036 samples, 0.36%)</title><rect x="53.8735%" y="149" width="0.3640%" height="15" fill="rgb(251,28,31)"/><text x="54.1235%" y="159.50"></text></g><g><title>predicates_of (132,131 samples, 0.10%)</title><rect x="54.3674%" y="149" width="0.1028%" height="15" fill="rgb(233,223,10)"/><text x="54.6174%" y="159.50"></text></g><g><title>evaluate_obligation (2,718,349 samples, 2.11%)</title><rect x="52.8083%" y="165" width="2.1141%" height="15" fill="rgb(215,21,27)"/><text x="53.0583%" y="175.50">e..</text></g><g><title>trait_impls_of (569,705 samples, 0.44%)</title><rect x="54.4793%" y="149" width="0.4431%" height="15" fill="rgb(232,23,21)"/><text x="54.7293%" y="159.50"></text></g><g><title>implementations_of_trait (226,642 samples, 0.18%)</title><rect x="54.7461%" y="133" width="0.1763%" height="15" fill="rgb(244,5,23)"/><text x="54.9961%" y="143.50"></text></g><g><title>is_copy_raw (614,415 samples, 0.48%)</title><rect x="55.1872%" y="165" width="0.4778%" height="15" fill="rgb(226,81,46)"/><text x="55.4372%" y="175.50"></text></g><g><title>evaluate_obligation (523,465 samples, 0.41%)</title><rect x="55.2579%" y="149" width="0.4071%" height="15" fill="rgb(247,70,30)"/><text x="55.5079%" y="159.50"></text></g><g><title>trait_impls_of (209,543 samples, 0.16%)</title><rect x="55.5021%" y="133" width="0.1630%" height="15" fill="rgb(212,68,19)"/><text x="55.7521%" y="143.50"></text></g><g><title>method_autoderef_steps (154,080 samples, 0.12%)</title><rect x="55.8408%" y="165" width="0.1198%" height="15" fill="rgb(240,187,13)"/><text x="56.0908%" y="175.50"></text></g><g><title>predicates_of (256,553 samples, 0.20%)</title><rect x="55.9937%" y="165" width="0.1995%" height="15" fill="rgb(223,113,26)"/><text x="56.2437%" y="175.50"></text></g><g><title>predicates_defined_on (168,271 samples, 0.13%)</title><rect x="56.0624%" y="149" width="0.1309%" height="15" fill="rgb(206,192,2)"/><text x="56.3124%" y="159.50"></text></g><g><title>typeck (14,763,995 samples, 11.48%)</title><rect x="44.9085%" y="181" width="11.4819%" height="15" fill="rgb(241,108,4)"/><text x="45.1585%" y="191.50">typeck</text></g><g><title>item_bodies_checking (24,774,536 samples, 19.27%)</title><rect x="37.1443%" y="229" width="19.2671%" height="15" fill="rgb(247,173,49)"/><text x="37.3943%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (24,771,186 samples, 19.26%)</title><rect x="37.1469%" y="213" width="19.2645%" height="15" fill="rgb(224,114,35)"/><text x="37.3969%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (24,728,396 samples, 19.23%)</title><rect x="37.1802%" y="197" width="19.2312%" height="15" fill="rgb(245,159,27)"/><text x="37.4302%" y="207.50">typeck</text></g><g><title>impl_parent (131,452 samples, 0.10%)</title><rect x="57.3688%" y="149" width="0.1022%" height="15" fill="rgb(245,172,44)"/><text x="57.6188%" y="159.50"></text></g><g><title>impl_trait_ref (387,714 samples, 0.30%)</title><rect x="57.4711%" y="149" width="0.3015%" height="15" fill="rgb(236,23,11)"/><text x="57.7211%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (338,924 samples, 0.26%)</title><rect x="57.5090%" y="133" width="0.2636%" height="15" fill="rgb(205,117,38)"/><text x="57.7590%" y="143.50"></text></g><g><title>adt_destructor (810,369 samples, 0.63%)</title><rect x="57.2021%" y="197" width="0.6302%" height="15" fill="rgb(237,72,25)"/><text x="57.4521%" y="207.50"></text></g><g><title>coherent_trait (805,169 samples, 0.63%)</title><rect x="57.2062%" y="181" width="0.6262%" height="15" fill="rgb(244,70,9)"/><text x="57.4562%" y="191.50"></text></g><g><title>specialization_graph_of (803,299 samples, 0.62%)</title><rect x="57.2076%" y="165" width="0.6247%" height="15" fill="rgb(217,125,39)"/><text x="57.4576%" y="175.50"></text></g><g><title>item_types_checking (1,967,072 samples, 1.53%)</title><rect x="56.4114%" y="229" width="1.5298%" height="15" fill="rgb(235,36,10)"/><text x="56.6614%" y="239.50"></text></g><g><title>check_mod_item_types (1,963,412 samples, 1.53%)</title><rect x="56.4143%" y="213" width="1.5269%" height="15" fill="rgb(251,123,47)"/><text x="56.6643%" y="223.50"></text></g><g><title>fn_sig (402,803 samples, 0.31%)</title><rect x="58.2097%" y="197" width="0.3133%" height="15" fill="rgb(221,13,13)"/><text x="58.4597%" y="207.50"></text></g><g><title>generics_of (248,635 samples, 0.19%)</title><rect x="58.5229%" y="197" width="0.1934%" height="15" fill="rgb(238,131,9)"/><text x="58.7729%" y="207.50"></text></g><g><title>late_bound_vars_map (466,856 samples, 0.36%)</title><rect x="59.1217%" y="149" width="0.3631%" height="15" fill="rgb(211,50,8)"/><text x="59.3717%" y="159.50"></text></g><g><title>resolve_lifetimes (450,865 samples, 0.35%)</title><rect x="59.1342%" y="133" width="0.3506%" height="15" fill="rgb(245,182,24)"/><text x="59.3842%" y="143.50"></text></g><g><title>lint_levels (147,931 samples, 0.12%)</title><rect x="59.3698%" y="117" width="0.1150%" height="15" fill="rgb(242,14,37)"/><text x="59.6198%" y="127.50"></text></g><g><title>explicit_predicates_of (892,500 samples, 0.69%)</title><rect x="58.8962%" y="165" width="0.6941%" height="15" fill="rgb(246,228,12)"/><text x="59.1462%" y="175.50"></text></g><g><title>predicates_of (1,470,707 samples, 1.14%)</title><rect x="58.7724%" y="197" width="1.1438%" height="15" fill="rgb(213,55,15)"/><text x="59.0224%" y="207.50"></text></g><g><title>predicates_defined_on (1,409,674 samples, 1.10%)</title><rect x="58.8199%" y="181" width="1.0963%" height="15" fill="rgb(209,9,3)"/><text x="59.0699%" y="191.50"></text></g><g><title>inferred_outlives_of (419,054 samples, 0.33%)</title><rect x="59.5903%" y="165" width="0.3259%" height="15" fill="rgb(230,59,30)"/><text x="59.8403%" y="175.50"></text></g><g><title>inferred_outlives_crate (390,574 samples, 0.30%)</title><rect x="59.6124%" y="149" width="0.3037%" height="15" fill="rgb(209,121,21)"/><text x="59.8624%" y="159.50"></text></g><g><title>type_of (233,522 samples, 0.18%)</title><rect x="59.7346%" y="133" width="0.1816%" height="15" fill="rgb(220,109,13)"/><text x="59.9846%" y="143.50"></text></g><g><title>type_of (193,772 samples, 0.15%)</title><rect x="59.7655%" y="117" width="0.1507%" height="15" fill="rgb(232,18,1)"/><text x="60.0155%" y="127.50"></text></g><g><title>type_collecting (3,158,775 samples, 2.46%)</title><rect x="57.9431%" y="229" width="2.4566%" height="15" fill="rgb(215,41,42)"/><text x="58.1931%" y="239.50">ty..</text></g><g><title>collect_mod_item_types (3,138,885 samples, 2.44%)</title><rect x="57.9586%" y="213" width="2.4411%" height="15" fill="rgb(224,123,36)"/><text x="58.2086%" y="223.50">co..</text></g><g><title>type_of (621,728 samples, 0.48%)</title><rect x="59.9162%" y="197" width="0.4835%" height="15" fill="rgb(240,125,3)"/><text x="60.1662%" y="207.50"></text></g><g><title>evaluate_obligation (648,486 samples, 0.50%)</title><rect x="61.8076%" y="197" width="0.5043%" height="15" fill="rgb(205,98,50)"/><text x="62.0576%" y="207.50"></text></g><g><title>implied_outlives_bounds (217,804 samples, 0.17%)</title><rect x="62.3278%" y="197" width="0.1694%" height="15" fill="rgb(205,185,37)"/><text x="62.5778%" y="207.50"></text></g><g><title>param_env (230,330 samples, 0.18%)</title><rect x="62.4971%" y="197" width="0.1791%" height="15" fill="rgb(238,207,15)"/><text x="62.7471%" y="207.50"></text></g><g><title>region_scope_tree (186,043 samples, 0.14%)</title><rect x="62.7079%" y="197" width="0.1447%" height="15" fill="rgb(213,199,42)"/><text x="62.9579%" y="207.50"></text></g><g><title>check_impl_item_well_formed (3,037,141 samples, 2.36%)</title><rect x="60.4931%" y="213" width="2.3620%" height="15" fill="rgb(235,201,11)"/><text x="60.7431%" y="223.50">ch..</text></g><g><title>evaluate_obligation (212,993 samples, 0.17%)</title><rect x="63.7243%" y="197" width="0.1656%" height="15" fill="rgb(207,46,11)"/><text x="63.9743%" y="207.50"></text></g><g><title>evaluate_obligation (247,243 samples, 0.19%)</title><rect x="64.1277%" y="181" width="0.1923%" height="15" fill="rgb(241,35,35)"/><text x="64.3777%" y="191.50"></text></g><g><title>layout_of (173,652 samples, 0.14%)</title><rect x="64.3640%" y="181" width="0.1350%" height="15" fill="rgb(243,32,47)"/><text x="64.6140%" y="191.50"></text></g><g><title>object_safety_violations (719,077 samples, 0.56%)</title><rect x="64.0056%" y="197" width="0.5592%" height="15" fill="rgb(247,202,23)"/><text x="64.2556%" y="207.50"></text></g><g><title>param_env (206,790 samples, 0.16%)</title><rect x="64.5648%" y="197" width="0.1608%" height="15" fill="rgb(219,102,11)"/><text x="64.8148%" y="207.50"></text></g><g><title>trait_impls_of (173,153 samples, 0.13%)</title><rect x="64.8231%" y="197" width="0.1347%" height="15" fill="rgb(243,110,44)"/><text x="65.0731%" y="207.50"></text></g><g><title>analysis (82,906,332 samples, 64.48%)</title><rect x="0.5477%" y="261" width="64.4761%" height="15" fill="rgb(222,74,54)"/><text x="0.7977%" y="271.50">analysis</text></g><g><title>type_check_crate (54,178,693 samples, 42.13%)</title><rect x="22.8891%" y="245" width="42.1347%" height="15" fill="rgb(216,99,12)"/><text x="23.1391%" y="255.50">type_check_crate</text></g><g><title>wf_checking (5,943,535 samples, 4.62%)</title><rect x="60.4015%" y="229" width="4.6223%" height="15" fill="rgb(226,22,26)"/><text x="60.6515%" y="239.50">wf_ch..</text></g><g><title>check_item_well_formed (2,788,693 samples, 2.17%)</title><rect x="62.8550%" y="213" width="2.1688%" height="15" fill="rgb(217,163,10)"/><text x="63.1050%" y="223.50">c..</text></g><g><title>codegen_crate (487,926 samples, 0.38%)</title><rect x="65.0306%" y="261" width="0.3795%" height="15" fill="rgb(213,25,53)"/><text x="65.2806%" y="271.50"></text></g><g><title>AST_validation (144,671 samples, 0.11%)</title><rect x="65.5812%" y="245" width="0.1125%" height="15" fill="rgb(252,105,26)"/><text x="65.8312%" y="255.50"></text></g><g><title>metadata_load_macro (182,201 samples, 0.14%)</title><rect x="78.5019%" y="213" width="0.1417%" height="15" fill="rgb(220,39,43)"/><text x="78.7519%" y="223.50"></text></g><g><title>metadata_register_crate (11,855,472 samples, 9.22%)</title><rect x="78.6436%" y="213" width="9.2200%" height="15" fill="rgb(229,68,48)"/><text x="78.8936%" y="223.50">metadata_regi..</text></g><g><title>metadata_register_crate (9,387,376 samples, 7.30%)</title><rect x="80.5630%" y="197" width="7.3005%" height="15" fill="rgb(252,8,32)"/><text x="80.8130%" y="207.50">metadata_r..</text></g><g><title>metadata_register_crate (6,756,025 samples, 5.25%)</title><rect x="82.6094%" y="181" width="5.2541%" height="15" fill="rgb(223,20,43)"/><text x="82.8594%" y="191.50">metada..</text></g><g><title>macro_expand_crate (28,501,317 samples, 22.17%)</title><rect x="65.8093%" y="245" width="22.1654%" height="15" fill="rgb(229,81,49)"/><text x="66.0593%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (28,477,026 samples, 22.15%)</title><rect x="65.8282%" y="229" width="22.1465%" height="15" fill="rgb(236,28,36)"/><text x="66.0782%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (142,952 samples, 0.11%)</title><rect x="87.8636%" y="213" width="0.1112%" height="15" fill="rgb(249,185,26)"/><text x="88.1136%" y="223.50"></text></g><g><title>finalize_imports (154,402 samples, 0.12%)</title><rect x="88.0439%" y="229" width="0.1201%" height="15" fill="rgb(249,174,33)"/><text x="88.2939%" y="239.50"></text></g><g><title>late_resolve_crate (2,333,746 samples, 1.81%)</title><rect x="88.2162%" y="229" width="1.8149%" height="15" fill="rgb(233,201,37)"/><text x="88.4662%" y="239.50">l..</text></g><g><title>configure_and_expand (31,802,983 samples, 24.73%)</title><rect x="65.4100%" y="261" width="24.7331%" height="15" fill="rgb(221,78,26)"/><text x="65.6600%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (2,708,841 samples, 2.11%)</title><rect x="88.0365%" y="245" width="2.1067%" height="15" fill="rgb(250,127,30)"/><text x="88.2865%" y="255.50">r..</text></g><g><title>drop_ast (172,041 samples, 0.13%)</title><rect x="90.1431%" y="261" width="0.1338%" height="15" fill="rgb(230,49,44)"/><text x="90.3931%" y="271.50"></text></g><g><title>early_lint_checks (320,553 samples, 0.25%)</title><rect x="90.2942%" y="261" width="0.2493%" height="15" fill="rgb(229,67,23)"/><text x="90.5442%" y="271.50"></text></g><g><title>free_global_ctxt (3,876,593 samples, 3.01%)</title><rect x="90.5435%" y="261" width="3.0148%" height="15" fill="rgb(249,83,47)"/><text x="90.7935%" y="271.50">fre..</text></g><g><title>layout_of (183,513 samples, 0.14%)</title><rect x="94.9852%" y="101" width="0.1427%" height="15" fill="rgb(215,43,3)"/><text x="95.2352%" y="111.50"></text></g><g><title>layout_of (257,023 samples, 0.20%)</title><rect x="94.9565%" y="117" width="0.1999%" height="15" fill="rgb(238,154,13)"/><text x="95.2065%" y="127.50"></text></g><g><title>layout_of (351,685 samples, 0.27%)</title><rect x="94.9099%" y="133" width="0.2735%" height="15" fill="rgb(219,56,2)"/><text x="95.1599%" y="143.50"></text></g><g><title>layout_of (379,345 samples, 0.30%)</title><rect x="94.8946%" y="149" width="0.2950%" height="15" fill="rgb(233,0,4)"/><text x="95.1446%" y="159.50"></text></g><g><title>layout_of (401,085 samples, 0.31%)</title><rect x="94.8866%" y="165" width="0.3119%" height="15" fill="rgb(235,30,7)"/><text x="95.1366%" y="175.50"></text></g><g><title>layout_of (443,285 samples, 0.34%)</title><rect x="94.8574%" y="229" width="0.3447%" height="15" fill="rgb(250,79,13)"/><text x="95.1074%" y="239.50"></text></g><g><title>layout_of (432,695 samples, 0.34%)</title><rect x="94.8657%" y="213" width="0.3365%" height="15" fill="rgb(211,146,34)"/><text x="95.1157%" y="223.50"></text></g><g><title>layout_of (419,845 samples, 0.33%)</title><rect x="94.8757%" y="197" width="0.3265%" height="15" fill="rgb(228,22,38)"/><text x="95.1257%" y="207.50"></text></g><g><title>layout_of (413,665 samples, 0.32%)</title><rect x="94.8805%" y="181" width="0.3217%" height="15" fill="rgb(235,168,5)"/><text x="95.1305%" y="191.50"></text></g><g><title>is_copy_raw (312,794 samples, 0.24%)</title><rect x="95.8775%" y="197" width="0.2433%" height="15" fill="rgb(221,155,16)"/><text x="96.1275%" y="207.50"></text></g><g><title>evaluate_obligation (240,273 samples, 0.19%)</title><rect x="95.9339%" y="181" width="0.1869%" height="15" fill="rgb(215,215,53)"/><text x="96.1839%" y="191.50"></text></g><g><title>needs_drop_raw (372,294 samples, 0.29%)</title><rect x="95.8400%" y="213" width="0.2895%" height="15" fill="rgb(223,4,10)"/><text x="96.0900%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,291,555 samples, 1.00%)</title><rect x="95.2022%" y="229" width="1.0044%" height="15" fill="rgb(234,103,6)"/><text x="95.4522%" y="239.50"></text></g><g><title>optimized_mir (2,422,677 samples, 1.88%)</title><rect x="94.3250%" y="245" width="1.8841%" height="15" fill="rgb(227,97,0)"/><text x="94.5750%" y="255.50">o..</text></g><g><title>generate_crate_metadata (3,427,878 samples, 2.67%)</title><rect x="93.5583%" y="261" width="2.6659%" height="15" fill="rgb(234,150,53)"/><text x="93.8083%" y="271.50">ge..</text></g><g><title>hir_lowering (2,856,052 samples, 2.22%)</title><rect x="96.2241%" y="261" width="2.2211%" height="15" fill="rgb(228,201,54)"/><text x="96.4741%" y="271.50">h..</text></g><g><title>parse_crate (354,424 samples, 0.28%)</title><rect x="98.4926%" y="261" width="0.2756%" height="15" fill="rgb(222,22,37)"/><text x="98.7426%" y="271.50"></text></g><g><title>prepare_outputs (279,203 samples, 0.22%)</title><rect x="98.7750%" y="261" width="0.2171%" height="15" fill="rgb(237,53,32)"/><text x="99.0250%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (847,529 samples, 0.66%)</title><rect x="98.9921%" y="261" width="0.6591%" height="15" fill="rgb(233,25,53)"/><text x="99.2421%" y="271.50"></text></g><g><title>all (128,584,601 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(210,40,34)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (128,584,601 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(241,220,44)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (322,544 samples, 0.25%)</title><rect x="99.7492%" y="261" width="0.2508%" height="15" fill="rgb(235,28,35)"/><text x="99.9992%" y="271.50"></text></g></svg></svg>