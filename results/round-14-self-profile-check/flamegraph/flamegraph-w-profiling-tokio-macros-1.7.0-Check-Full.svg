<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (408,702 samples, 0.25%)</title><rect x="11.2346%" y="181" width="0.2466%" height="15" fill="rgb(227,0,7)"/><text x="11.4846%" y="191.50"></text></g><g><title>item_attrs (323,032 samples, 0.19%)</title><rect x="11.8759%" y="149" width="0.1949%" height="15" fill="rgb(217,0,24)"/><text x="12.1259%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (311,082 samples, 0.19%)</title><rect x="11.8831%" y="133" width="0.1877%" height="15" fill="rgb(221,193,54)"/><text x="12.1331%" y="143.50"></text></g><g><title>codegen_fn_attrs (461,684 samples, 0.28%)</title><rect x="11.8078%" y="165" width="0.2785%" height="15" fill="rgb(248,212,6)"/><text x="12.0578%" y="175.50"></text></g><g><title>adt_drop_tys (186,661 samples, 0.11%)</title><rect x="14.6049%" y="117" width="0.1126%" height="15" fill="rgb(208,68,35)"/><text x="14.8549%" y="127.50"></text></g><g><title>adt_drop_tys (508,073 samples, 0.31%)</title><rect x="14.5754%" y="133" width="0.3065%" height="15" fill="rgb(232,128,0)"/><text x="14.8254%" y="143.50"></text></g><g><title>needs_drop_raw (1,556,956 samples, 0.94%)</title><rect x="14.4913%" y="149" width="0.9393%" height="15" fill="rgb(207,160,47)"/><text x="14.7413%" y="159.50"></text></g><g><title>is_copy_raw (909,492 samples, 0.55%)</title><rect x="14.8819%" y="133" width="0.5487%" height="15" fill="rgb(228,23,34)"/><text x="15.1319%" y="143.50"></text></g><g><title>evaluate_obligation (770,099 samples, 0.46%)</title><rect x="14.9660%" y="117" width="0.4646%" height="15" fill="rgb(218,30,26)"/><text x="15.2160%" y="127.50"></text></g><g><title>impl_parent (516,545 samples, 0.31%)</title><rect x="16.1476%" y="117" width="0.3116%" height="15" fill="rgb(220,122,19)"/><text x="16.3976%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (317,054 samples, 0.19%)</title><rect x="16.2679%" y="101" width="0.1913%" height="15" fill="rgb(250,228,42)"/><text x="16.5179%" y="111.50"></text></g><g><title>specialization_graph_of (2,797,519 samples, 1.69%)</title><rect x="15.6098%" y="133" width="1.6877%" height="15" fill="rgb(240,193,28)"/><text x="15.8598%" y="143.50"></text></g><g><title>impl_trait_ref (1,389,486 samples, 0.84%)</title><rect x="16.4592%" y="117" width="0.8383%" height="15" fill="rgb(216,20,37)"/><text x="16.7092%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,191,553 samples, 0.72%)</title><rect x="16.5786%" y="101" width="0.7188%" height="15" fill="rgb(206,188,39)"/><text x="16.8286%" y="111.50"></text></g><g><title>resolve_instance (3,153,404 samples, 1.90%)</title><rect x="15.4306%" y="149" width="1.9024%" height="15" fill="rgb(217,207,13)"/><text x="15.6806%" y="159.50">r..</text></g><g><title>thir_body (1,527,047 samples, 0.92%)</title><rect x="17.3508%" y="149" width="0.9212%" height="15" fill="rgb(231,73,38)"/><text x="17.6008%" y="159.50"></text></g><g><title>mir_const (12,638,717 samples, 7.62%)</title><rect x="10.6611%" y="197" width="7.6248%" height="15" fill="rgb(225,20,46)"/><text x="10.9111%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (11,279,393 samples, 6.80%)</title><rect x="11.4812%" y="181" width="6.8047%" height="15" fill="rgb(210,31,41)"/><text x="11.7312%" y="191.50">unsafety_..</text></g><g><title>mir_built (10,276,322 samples, 6.20%)</title><rect x="12.0863%" y="165" width="6.1996%" height="15" fill="rgb(221,200,47)"/><text x="12.3363%" y="175.50">mir_built</text></g><g><title>mir_const (204,913 samples, 0.12%)</title><rect x="18.5421%" y="181" width="0.1236%" height="15" fill="rgb(226,26,5)"/><text x="18.7921%" y="191.50"></text></g><g><title>unsafety_check_result (182,273 samples, 0.11%)</title><rect x="18.5557%" y="165" width="0.1100%" height="15" fill="rgb(249,33,26)"/><text x="18.8057%" y="175.50"></text></g><g><title>mir_built (166,582 samples, 0.10%)</title><rect x="18.5652%" y="149" width="0.1005%" height="15" fill="rgb(235,183,28)"/><text x="18.8152%" y="159.50"></text></g><g><title>mir_promoted (14,339,820 samples, 8.65%)</title><rect x="10.0392%" y="213" width="8.6510%" height="15" fill="rgb(221,5,38)"/><text x="10.2892%" y="223.50">mir_promoted</text></g><g><title>mir_const_qualif (670,097 samples, 0.40%)</title><rect x="18.2859%" y="197" width="0.4043%" height="15" fill="rgb(247,18,42)"/><text x="18.5359%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (694,067 samples, 0.42%)</title><rect x="18.6932%" y="213" width="0.4187%" height="15" fill="rgb(241,131,45)"/><text x="18.9432%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (593,408 samples, 0.36%)</title><rect x="19.1119%" y="213" width="0.3580%" height="15" fill="rgb(249,31,29)"/><text x="19.3619%" y="223.50"></text></g><g><title>normalize_projection_ty (374,744 samples, 0.23%)</title><rect x="19.2438%" y="197" width="0.2261%" height="15" fill="rgb(225,111,53)"/><text x="19.4938%" y="207.50"></text></g><g><title>type_op_normalize_predicate (232,202 samples, 0.14%)</title><rect x="19.4699%" y="213" width="0.1401%" height="15" fill="rgb(238,160,17)"/><text x="19.7199%" y="223.50"></text></g><g><title>type_op_prove_predicate (1,805,186 samples, 1.09%)</title><rect x="19.6100%" y="213" width="1.0890%" height="15" fill="rgb(214,148,48)"/><text x="19.8600%" y="223.50"></text></g><g><title>MIR_borrow_checking (33,266,550 samples, 20.07%)</title><rect x="0.6330%" y="245" width="20.0693%" height="15" fill="rgb(232,36,49)"/><text x="0.8830%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (33,176,666 samples, 20.02%)</title><rect x="0.6872%" y="229" width="20.0150%" height="15" fill="rgb(209,103,24)"/><text x="0.9372%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (166,571 samples, 0.10%)</title><rect x="20.7023%" y="245" width="0.1005%" height="15" fill="rgb(229,88,8)"/><text x="20.9523%" y="255.50"></text></g><g><title>codegen_fn_attrs (247,793 samples, 0.15%)</title><rect x="21.0561%" y="213" width="0.1495%" height="15" fill="rgb(213,181,19)"/><text x="21.3061%" y="223.50"></text></g><g><title>check_mod_attrs (491,774 samples, 0.30%)</title><rect x="20.9089%" y="229" width="0.2967%" height="15" fill="rgb(254,191,54)"/><text x="21.1589%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (335,105 samples, 0.20%)</title><rect x="21.3056%" y="229" width="0.2022%" height="15" fill="rgb(241,83,37)"/><text x="21.5556%" y="239.50"></text></g><g><title>misc_checking_1 (1,053,972 samples, 0.64%)</title><rect x="20.8956%" y="245" width="0.6358%" height="15" fill="rgb(233,36,39)"/><text x="21.1456%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (730,249 samples, 0.44%)</title><rect x="21.5324%" y="229" width="0.4405%" height="15" fill="rgb(226,3,54)"/><text x="21.7824%" y="239.50"></text></g><g><title>check_mod_liveness (608,127 samples, 0.37%)</title><rect x="21.6061%" y="213" width="0.3669%" height="15" fill="rgb(245,192,40)"/><text x="21.8561%" y="223.50"></text></g><g><title>misc_checking_2 (1,611,668 samples, 0.97%)</title><rect x="21.5315%" y="245" width="0.9723%" height="15" fill="rgb(238,167,29)"/><text x="21.7815%" y="255.50"></text></g><g><title>match_checking (879,849 samples, 0.53%)</title><rect x="21.9730%" y="229" width="0.5308%" height="15" fill="rgb(232,182,51)"/><text x="22.2230%" y="239.50"></text></g><g><title>check_match (857,049 samples, 0.52%)</title><rect x="21.9867%" y="213" width="0.5170%" height="15" fill="rgb(231,60,39)"/><text x="22.2367%" y="223.50"></text></g><g><title>death_checking (341,544 samples, 0.21%)</title><rect x="22.5860%" y="229" width="0.2060%" height="15" fill="rgb(208,69,12)"/><text x="22.8360%" y="239.50"></text></g><g><title>eval_to_const_value_raw (590,076 samples, 0.36%)</title><rect x="23.0932%" y="149" width="0.3560%" height="15" fill="rgb(235,93,37)"/><text x="23.3432%" y="159.50"></text></g><g><title>eval_to_const_value_raw (589,456 samples, 0.36%)</title><rect x="23.0935%" y="133" width="0.3556%" height="15" fill="rgb(213,116,39)"/><text x="23.3435%" y="143.50"></text></g><g><title>eval_to_allocation_raw (587,706 samples, 0.35%)</title><rect x="23.0946%" y="117" width="0.3546%" height="15" fill="rgb(222,207,29)"/><text x="23.3446%" y="127.50"></text></g><g><title>eval_to_allocation_raw (656,158 samples, 0.40%)</title><rect x="23.0541%" y="197" width="0.3959%" height="15" fill="rgb(206,96,30)"/><text x="23.3041%" y="207.50"></text></g><g><title>eval_to_allocation_raw (655,188 samples, 0.40%)</title><rect x="23.0547%" y="181" width="0.3953%" height="15" fill="rgb(218,138,4)"/><text x="23.3047%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (597,897 samples, 0.36%)</title><rect x="23.0892%" y="165" width="0.3607%" height="15" fill="rgb(250,191,14)"/><text x="23.3392%" y="175.50"></text></g><g><title>eval_to_const_value_raw (219,983 samples, 0.13%)</title><rect x="23.4500%" y="197" width="0.1327%" height="15" fill="rgb(239,60,40)"/><text x="23.7000%" y="207.50"></text></g><g><title>eval_to_const_value_raw (216,953 samples, 0.13%)</title><rect x="23.4518%" y="181" width="0.1309%" height="15" fill="rgb(206,27,48)"/><text x="23.7018%" y="191.50"></text></g><g><title>eval_to_allocation_raw (209,743 samples, 0.13%)</title><rect x="23.4561%" y="165" width="0.1265%" height="15" fill="rgb(225,35,8)"/><text x="23.7061%" y="175.50"></text></g><g><title>param_env (205,652 samples, 0.12%)</title><rect x="23.5827%" y="197" width="0.1241%" height="15" fill="rgb(250,213,24)"/><text x="23.8327%" y="207.50"></text></g><g><title>crate_lints (1,595,188 samples, 0.96%)</title><rect x="22.7930%" y="213" width="0.9624%" height="15" fill="rgb(247,123,22)"/><text x="23.0430%" y="223.50"></text></g><g><title>lint_checking (2,134,794 samples, 1.29%)</title><rect x="22.7921%" y="229" width="1.2879%" height="15" fill="rgb(231,138,38)"/><text x="23.0421%" y="239.50"></text></g><g><title>module_lints (538,066 samples, 0.32%)</title><rect x="23.7554%" y="213" width="0.3246%" height="15" fill="rgb(231,145,46)"/><text x="24.0054%" y="223.50"></text></g><g><title>lint_mod (533,856 samples, 0.32%)</title><rect x="23.7579%" y="197" width="0.3221%" height="15" fill="rgb(251,118,11)"/><text x="24.0079%" y="207.50"></text></g><g><title>privacy_checking_modules (976,711 samples, 0.59%)</title><rect x="24.1515%" y="229" width="0.5892%" height="15" fill="rgb(217,147,25)"/><text x="24.4015%" y="239.50"></text></g><g><title>check_mod_privacy (973,601 samples, 0.59%)</title><rect x="24.1533%" y="213" width="0.5874%" height="15" fill="rgb(247,81,37)"/><text x="24.4033%" y="223.50"></text></g><g><title>misc_checking_3 (3,726,942 samples, 2.25%)</title><rect x="22.5038%" y="245" width="2.2484%" height="15" fill="rgb(209,12,38)"/><text x="22.7538%" y="255.50">m..</text></g><g><title>adt_destructor (341,873 samples, 0.21%)</title><rect x="24.8106%" y="197" width="0.2062%" height="15" fill="rgb(227,1,9)"/><text x="25.0606%" y="207.50"></text></g><g><title>coherent_trait (334,723 samples, 0.20%)</title><rect x="24.8149%" y="181" width="0.2019%" height="15" fill="rgb(248,47,43)"/><text x="25.0649%" y="191.50"></text></g><g><title>specialization_graph_of (333,753 samples, 0.20%)</title><rect x="24.8155%" y="165" width="0.2013%" height="15" fill="rgb(221,10,30)"/><text x="25.0655%" y="175.50"></text></g><g><title>impl_parent (1,822,560 samples, 1.10%)</title><rect x="26.5320%" y="181" width="1.0995%" height="15" fill="rgb(210,229,1)"/><text x="26.7820%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (957,737 samples, 0.58%)</title><rect x="27.0538%" y="165" width="0.5778%" height="15" fill="rgb(222,148,37)"/><text x="27.3038%" y="175.50"></text></g><g><title>impl_trait_ref (3,942,931 samples, 2.38%)</title><rect x="27.6315%" y="181" width="2.3787%" height="15" fill="rgb(234,67,33)"/><text x="27.8815%" y="191.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,319,795 samples, 2.00%)</title><rect x="28.0075%" y="165" width="2.0028%" height="15" fill="rgb(247,98,35)"/><text x="28.2575%" y="175.50">m..</text></g><g><title>coherent_trait (9,147,512 samples, 5.52%)</title><rect x="24.7936%" y="213" width="5.5186%" height="15" fill="rgb(247,138,52)"/><text x="25.0436%" y="223.50">coheren..</text></g><g><title>specialization_graph_of (8,665,976 samples, 5.23%)</title><rect x="25.0841%" y="197" width="5.2281%" height="15" fill="rgb(213,79,30)"/><text x="25.3341%" y="207.50">specia..</text></g><g><title>trait_impls_of (500,445 samples, 0.30%)</title><rect x="30.0103%" y="181" width="0.3019%" height="15" fill="rgb(246,177,23)"/><text x="30.2603%" y="191.50"></text></g><g><title>coherence_checking (9,197,562 samples, 5.55%)</title><rect x="24.7853%" y="229" width="5.5488%" height="15" fill="rgb(230,62,27)"/><text x="25.0353%" y="239.50">coheren..</text></g><g><title>associated_items (185,293 samples, 0.11%)</title><rect x="35.3214%" y="181" width="0.1118%" height="15" fill="rgb(216,154,8)"/><text x="35.5714%" y="191.50"></text></g><g><title>adt_def (359,693 samples, 0.22%)</title><rect x="35.7475%" y="101" width="0.2170%" height="15" fill="rgb(244,35,45)"/><text x="35.9975%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (358,873 samples, 0.22%)</title><rect x="35.7480%" y="85" width="0.2165%" height="15" fill="rgb(251,115,12)"/><text x="35.9980%" y="95.50"></text></g><g><title>item_attrs (342,483 samples, 0.21%)</title><rect x="35.7579%" y="69" width="0.2066%" height="15" fill="rgb(240,54,50)"/><text x="36.0079%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (341,553 samples, 0.21%)</title><rect x="35.7584%" y="53" width="0.2061%" height="15" fill="rgb(233,84,52)"/><text x="36.0084%" y="63.50"></text></g><g><title>adt_dtorck_constraint (394,444 samples, 0.24%)</title><rect x="35.7418%" y="117" width="0.2380%" height="15" fill="rgb(207,117,47)"/><text x="35.9918%" y="127.50"></text></g><g><title>adt_dtorck_constraint (495,685 samples, 0.30%)</title><rect x="35.6879%" y="133" width="0.2990%" height="15" fill="rgb(249,43,39)"/><text x="35.9379%" y="143.50"></text></g><g><title>adt_dtorck_constraint (576,707 samples, 0.35%)</title><rect x="35.6513%" y="149" width="0.3479%" height="15" fill="rgb(209,38,44)"/><text x="35.9013%" y="159.50"></text></g><g><title>dropck_outlives (917,950 samples, 0.55%)</title><rect x="35.4610%" y="181" width="0.5538%" height="15" fill="rgb(236,212,23)"/><text x="35.7110%" y="191.50"></text></g><g><title>adt_dtorck_constraint (677,977 samples, 0.41%)</title><rect x="35.6058%" y="165" width="0.4090%" height="15" fill="rgb(242,79,21)"/><text x="35.8558%" y="175.50"></text></g><g><title>evaluate_obligation (668,157 samples, 0.40%)</title><rect x="36.0148%" y="181" width="0.4031%" height="15" fill="rgb(211,96,35)"/><text x="36.2648%" y="191.50"></text></g><g><title>predicates_of (200,583 samples, 0.12%)</title><rect x="36.6761%" y="181" width="0.1210%" height="15" fill="rgb(253,215,40)"/><text x="36.9261%" y="191.50"></text></g><g><title>associated_item (433,027 samples, 0.26%)</title><rect x="48.5490%" y="149" width="0.2612%" height="15" fill="rgb(211,81,21)"/><text x="48.7990%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (342,775 samples, 0.21%)</title><rect x="48.6034%" y="133" width="0.2068%" height="15" fill="rgb(208,190,38)"/><text x="48.8534%" y="143.50"></text></g><g><title>associated_items (630,290 samples, 0.38%)</title><rect x="48.4490%" y="165" width="0.3802%" height="15" fill="rgb(235,213,38)"/><text x="48.6990%" y="175.50"></text></g><g><title>adt_def (350,953 samples, 0.21%)</title><rect x="49.4802%" y="133" width="0.2117%" height="15" fill="rgb(237,122,38)"/><text x="49.7302%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (342,002 samples, 0.21%)</title><rect x="49.4856%" y="117" width="0.2063%" height="15" fill="rgb(244,218,35)"/><text x="49.7356%" y="127.50"></text></g><g><title>item_attrs (224,031 samples, 0.14%)</title><rect x="49.5567%" y="101" width="0.1352%" height="15" fill="rgb(240,68,47)"/><text x="49.8067%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (214,831 samples, 0.13%)</title><rect x="49.5623%" y="85" width="0.1296%" height="15" fill="rgb(210,16,53)"/><text x="49.8123%" y="95.50"></text></g><g><title>adt_def (334,004 samples, 0.20%)</title><rect x="49.8529%" y="117" width="0.2015%" height="15" fill="rgb(235,124,12)"/><text x="50.1029%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (322,904 samples, 0.19%)</title><rect x="49.8596%" y="101" width="0.1948%" height="15" fill="rgb(224,169,11)"/><text x="50.1096%" y="111.50"></text></g><g><title>item_attrs (207,343 samples, 0.13%)</title><rect x="49.9293%" y="85" width="0.1251%" height="15" fill="rgb(250,166,2)"/><text x="50.1793%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (196,392 samples, 0.12%)</title><rect x="49.9359%" y="69" width="0.1185%" height="15" fill="rgb(242,216,29)"/><text x="50.1859%" y="79.50"></text></g><g><title>adt_def (214,022 samples, 0.13%)</title><rect x="50.1825%" y="101" width="0.1291%" height="15" fill="rgb(230,116,27)"/><text x="50.4325%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (208,042 samples, 0.13%)</title><rect x="50.1861%" y="85" width="0.1255%" height="15" fill="rgb(228,99,48)"/><text x="50.4361%" y="95.50"></text></g><g><title>adt_def (376,383 samples, 0.23%)</title><rect x="50.6102%" y="85" width="0.2271%" height="15" fill="rgb(253,11,6)"/><text x="50.8602%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (363,073 samples, 0.22%)</title><rect x="50.6182%" y="69" width="0.2190%" height="15" fill="rgb(247,143,39)"/><text x="50.8682%" y="79.50"></text></g><g><title>item_attrs (239,841 samples, 0.14%)</title><rect x="50.6926%" y="53" width="0.1447%" height="15" fill="rgb(236,97,10)"/><text x="50.9426%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (226,351 samples, 0.14%)</title><rect x="50.7007%" y="37" width="0.1366%" height="15" fill="rgb(233,208,19)"/><text x="50.9507%" y="47.50"></text></g><g><title>adt_def (196,053 samples, 0.12%)</title><rect x="50.9451%" y="69" width="0.1183%" height="15" fill="rgb(216,164,2)"/><text x="51.1951%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (188,233 samples, 0.11%)</title><rect x="50.9498%" y="53" width="0.1136%" height="15" fill="rgb(220,129,5)"/><text x="51.1998%" y="63.50"></text></g><g><title>adt_def (207,732 samples, 0.13%)</title><rect x="51.1466%" y="53" width="0.1253%" height="15" fill="rgb(242,17,10)"/><text x="51.3966%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (198,192 samples, 0.12%)</title><rect x="51.1524%" y="37" width="0.1196%" height="15" fill="rgb(242,107,0)"/><text x="51.4024%" y="47.50"></text></g><g><title>adt_dtorck_constraint (510,266 samples, 0.31%)</title><rect x="51.0912%" y="69" width="0.3078%" height="15" fill="rgb(251,28,31)"/><text x="51.3412%" y="79.50"></text></g><g><title>adt_dtorck_constraint (928,560 samples, 0.56%)</title><rect x="50.8776%" y="85" width="0.5602%" height="15" fill="rgb(233,223,10)"/><text x="51.1276%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,932,491 samples, 1.17%)</title><rect x="50.3431%" y="101" width="1.1658%" height="15" fill="rgb(215,21,27)"/><text x="50.5931%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,453,998 samples, 1.48%)</title><rect x="50.0840%" y="117" width="1.4805%" height="15" fill="rgb(232,23,21)"/><text x="50.3340%" y="127.50"></text></g><g><title>adt_dtorck_constraint (3,152,467 samples, 1.90%)</title><rect x="49.7289%" y="133" width="1.9018%" height="15" fill="rgb(244,5,23)"/><text x="49.9789%" y="143.50">a..</text></g><g><title>dropck_outlives (4,650,605 samples, 2.81%)</title><rect x="48.8807%" y="165" width="2.8056%" height="15" fill="rgb(226,81,46)"/><text x="49.1307%" y="175.50">dr..</text></g><g><title>adt_dtorck_constraint (3,867,702 samples, 2.33%)</title><rect x="49.3530%" y="149" width="2.3333%" height="15" fill="rgb(247,70,30)"/><text x="49.6030%" y="159.50">a..</text></g><g><title>predicates_of (283,191 samples, 0.17%)</title><rect x="52.8214%" y="149" width="0.1708%" height="15" fill="rgb(212,68,19)"/><text x="53.0714%" y="159.50"></text></g><g><title>predicates_defined_on (166,171 samples, 0.10%)</title><rect x="52.8920%" y="133" width="0.1002%" height="15" fill="rgb(240,187,13)"/><text x="53.1420%" y="143.50"></text></g><g><title>evaluate_obligation (3,241,531 samples, 1.96%)</title><rect x="51.6864%" y="165" width="1.9556%" height="15" fill="rgb(223,113,26)"/><text x="51.9364%" y="175.50">e..</text></g><g><title>trait_impls_of (963,129 samples, 0.58%)</title><rect x="53.0609%" y="149" width="0.5810%" height="15" fill="rgb(206,192,2)"/><text x="53.3109%" y="159.50"></text></g><g><title>implementations_of_trait (329,530 samples, 0.20%)</title><rect x="53.4431%" y="133" width="0.1988%" height="15" fill="rgb(241,108,4)"/><text x="53.6931%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (216,160 samples, 0.13%)</title><rect x="53.5115%" y="117" width="0.1304%" height="15" fill="rgb(247,173,49)"/><text x="53.7615%" y="127.50"></text></g><g><title>fn_sig (181,234 samples, 0.11%)</title><rect x="53.6879%" y="165" width="0.1093%" height="15" fill="rgb(224,114,35)"/><text x="53.9379%" y="175.50"></text></g><g><title>lint_levels (231,452 samples, 0.14%)</title><rect x="54.2179%" y="165" width="0.1396%" height="15" fill="rgb(245,159,27)"/><text x="54.4679%" y="175.50"></text></g><g><title>evaluate_obligation (293,323 samples, 0.18%)</title><rect x="54.5216%" y="149" width="0.1770%" height="15" fill="rgb(245,172,44)"/><text x="54.7716%" y="159.50"></text></g><g><title>method_autoderef_steps (501,785 samples, 0.30%)</title><rect x="54.4015%" y="165" width="0.3027%" height="15" fill="rgb(236,23,11)"/><text x="54.6515%" y="175.50"></text></g><g><title>explicit_predicates_of (174,401 samples, 0.11%)</title><rect x="54.9148%" y="133" width="0.1052%" height="15" fill="rgb(205,117,38)"/><text x="55.1648%" y="143.50"></text></g><g><title>predicates_of (561,286 samples, 0.34%)</title><rect x="54.7238%" y="165" width="0.3386%" height="15" fill="rgb(237,72,25)"/><text x="54.9738%" y="175.50"></text></g><g><title>predicates_defined_on (365,656 samples, 0.22%)</title><rect x="54.8418%" y="149" width="0.2206%" height="15" fill="rgb(244,70,9)"/><text x="55.0918%" y="159.50"></text></g><g><title>typeck (30,436,539 samples, 18.36%)</title><rect x="36.8419%" y="181" width="18.3620%" height="15" fill="rgb(217,125,39)"/><text x="37.0919%" y="191.50">typeck</text></g><g><title>item_bodies_checking (41,228,728 samples, 24.87%)</title><rect x="30.3454%" y="229" width="24.8727%" height="15" fill="rgb(235,36,10)"/><text x="30.5954%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (41,225,768 samples, 24.87%)</title><rect x="30.3472%" y="213" width="24.8709%" height="15" fill="rgb(251,123,47)"/><text x="30.5972%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (41,183,068 samples, 24.85%)</title><rect x="30.3730%" y="197" width="24.8452%" height="15" fill="rgb(221,13,13)"/><text x="30.6230%" y="207.50">typeck</text></g><g><title>item_types_checking (1,098,913 samples, 0.66%)</title><rect x="55.2181%" y="229" width="0.6630%" height="15" fill="rgb(238,131,9)"/><text x="55.4681%" y="239.50"></text></g><g><title>check_mod_item_types (1,095,093 samples, 0.66%)</title><rect x="55.2204%" y="213" width="0.6607%" height="15" fill="rgb(211,50,8)"/><text x="55.4704%" y="223.50"></text></g><g><title>typeck (926,580 samples, 0.56%)</title><rect x="55.3221%" y="197" width="0.5590%" height="15" fill="rgb(245,182,24)"/><text x="55.5721%" y="207.50"></text></g><g><title>fn_sig (325,074 samples, 0.20%)</title><rect x="55.9860%" y="197" width="0.1961%" height="15" fill="rgb(242,14,37)"/><text x="56.2360%" y="207.50"></text></g><g><title>predicates_of (205,583 samples, 0.12%)</title><rect x="56.2799%" y="197" width="0.1240%" height="15" fill="rgb(246,228,12)"/><text x="56.5299%" y="207.50"></text></g><g><title>predicates_defined_on (186,753 samples, 0.11%)</title><rect x="56.2912%" y="181" width="0.1127%" height="15" fill="rgb(213,55,15)"/><text x="56.5412%" y="191.50"></text></g><g><title>type_collecting (946,751 samples, 0.57%)</title><rect x="55.8826%" y="229" width="0.5712%" height="15" fill="rgb(209,9,3)"/><text x="56.1326%" y="239.50"></text></g><g><title>collect_mod_item_types (937,641 samples, 0.57%)</title><rect x="55.8881%" y="213" width="0.5657%" height="15" fill="rgb(230,59,30)"/><text x="56.1381%" y="223.50"></text></g><g><title>evaluate_obligation (322,995 samples, 0.19%)</title><rect x="56.6917%" y="197" width="0.1949%" height="15" fill="rgb(209,121,21)"/><text x="56.9417%" y="207.50"></text></g><g><title>check_impl_item_well_formed (834,400 samples, 0.50%)</title><rect x="56.5144%" y="213" width="0.5034%" height="15" fill="rgb(220,109,13)"/><text x="56.7644%" y="223.50"></text></g><g><title>adt_sized_constraint (182,102 samples, 0.11%)</title><rect x="57.4407%" y="165" width="0.1099%" height="15" fill="rgb(232,18,1)"/><text x="57.6907%" y="175.50"></text></g><g><title>adt_sized_constraint (248,923 samples, 0.15%)</title><rect x="57.4046%" y="181" width="0.1502%" height="15" fill="rgb(215,41,42)"/><text x="57.6546%" y="191.50"></text></g><g><title>evaluate_obligation (443,545 samples, 0.27%)</title><rect x="57.3203%" y="197" width="0.2676%" height="15" fill="rgb(224,123,36)"/><text x="57.5703%" y="207.50"></text></g><g><title>region_scope_tree (332,493 samples, 0.20%)</title><rect x="57.7216%" y="197" width="0.2006%" height="15" fill="rgb(240,125,3)"/><text x="57.9716%" y="207.50"></text></g><g><title>analysis (95,302,400 samples, 57.49%)</title><rect x="0.4430%" y="261" width="57.4946%" height="15" fill="rgb(205,98,50)"/><text x="0.6930%" y="271.50">analysis</text></g><g><title>type_check_crate (55,007,822 samples, 33.19%)</title><rect x="24.7522%" y="245" width="33.1855%" height="15" fill="rgb(205,185,37)"/><text x="25.0022%" y="255.50">type_check_crate</text></g><g><title>wf_checking (2,456,297 samples, 1.48%)</title><rect x="56.4558%" y="229" width="1.4819%" height="15" fill="rgb(238,207,15)"/><text x="56.7058%" y="239.50"></text></g><g><title>check_item_well_formed (1,524,686 samples, 0.92%)</title><rect x="57.0178%" y="213" width="0.9198%" height="15" fill="rgb(213,199,42)"/><text x="57.2678%" y="223.50"></text></g><g><title>codegen_crate (572,636 samples, 0.35%)</title><rect x="57.9443%" y="261" width="0.3455%" height="15" fill="rgb(235,201,11)"/><text x="58.1943%" y="271.50"></text></g><g><title>metadata_load_macro (1,794,322 samples, 1.08%)</title><rect x="88.4704%" y="213" width="1.0825%" height="15" fill="rgb(207,46,11)"/><text x="88.7204%" y="223.50"></text></g><g><title>metadata_register_crate (2,920,632 samples, 1.76%)</title><rect x="89.5529%" y="213" width="1.7620%" height="15" fill="rgb(241,35,35)"/><text x="89.8029%" y="223.50"></text></g><g><title>metadata_register_crate (1,006,379 samples, 0.61%)</title><rect x="90.7078%" y="197" width="0.6071%" height="15" fill="rgb(243,32,47)"/><text x="90.9578%" y="207.50"></text></g><g><title>macro_expand_crate (54,491,836 samples, 32.87%)</title><rect x="58.6079%" y="245" width="32.8742%" height="15" fill="rgb(247,202,23)"/><text x="58.8579%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (54,472,736 samples, 32.86%)</title><rect x="58.6194%" y="229" width="32.8627%" height="15" fill="rgb(219,102,11)"/><text x="58.8694%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (277,163 samples, 0.17%)</title><rect x="91.3149%" y="213" width="0.1672%" height="15" fill="rgb(243,110,44)"/><text x="91.5649%" y="223.50"></text></g><g><title>maybe_create_a_macro_crate (368,704 samples, 0.22%)</title><rect x="91.4829%" y="245" width="0.2224%" height="15" fill="rgb(222,74,54)"/><text x="91.7329%" y="255.50"></text></g><g><title>finalize_macro_resolutions (360,845 samples, 0.22%)</title><rect x="91.8261%" y="229" width="0.2177%" height="15" fill="rgb(216,99,12)"/><text x="92.0761%" y="239.50"></text></g><g><title>late_resolve_crate (2,919,292 samples, 1.76%)</title><rect x="92.0438%" y="229" width="1.7612%" height="15" fill="rgb(226,22,26)"/><text x="92.2938%" y="239.50"></text></g><g><title>configure_and_expand (58,995,506 samples, 35.59%)</title><rect x="58.2897%" y="261" width="35.5912%" height="15" fill="rgb(217,163,10)"/><text x="58.5397%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (3,457,718 samples, 2.09%)</title><rect x="91.7949%" y="245" width="2.0860%" height="15" fill="rgb(213,25,53)"/><text x="92.0449%" y="255.50">r..</text></g><g><title>drop_ast (180,852 samples, 0.11%)</title><rect x="93.8809%" y="261" width="0.1091%" height="15" fill="rgb(252,105,26)"/><text x="94.1309%" y="271.50"></text></g><g><title>early_lint_checks (460,336 samples, 0.28%)</title><rect x="94.0025%" y="261" width="0.2777%" height="15" fill="rgb(220,39,43)"/><text x="94.2525%" y="271.50"></text></g><g><title>free_global_ctxt (3,817,083 samples, 2.30%)</title><rect x="94.2802%" y="261" width="2.3028%" height="15" fill="rgb(229,68,48)"/><text x="94.5302%" y="271.50">f..</text></g><g><title>generate_crate_metadata (192,612 samples, 0.12%)</title><rect x="96.5830%" y="261" width="0.1162%" height="15" fill="rgb(252,8,32)"/><text x="96.8330%" y="271.50"></text></g><g><title>hir_lowering (2,740,170 samples, 1.65%)</title><rect x="96.6992%" y="261" width="1.6531%" height="15" fill="rgb(223,20,43)"/><text x="96.9492%" y="271.50"></text></g><g><title>parse_crate (1,267,074 samples, 0.76%)</title><rect x="98.3857%" y="261" width="0.7644%" height="15" fill="rgb(229,81,49)"/><text x="98.6357%" y="271.50"></text></g><g><title>prepare_outputs (180,172 samples, 0.11%)</title><rect x="99.1562%" y="261" width="0.1087%" height="15" fill="rgb(236,28,36)"/><text x="99.4062%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (815,839 samples, 0.49%)</title><rect x="99.2649%" y="261" width="0.4922%" height="15" fill="rgb(249,185,26)"/><text x="99.5149%" y="271.50"></text></g><g><title>all (165,758,734 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (165,758,734 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (306,504 samples, 0.18%)</title><rect x="99.8151%" y="261" width="0.1849%" height="15" fill="rgb(221,78,26)"/><text x="100.0651%" y="271.50"></text></g></svg></svg>