<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (304,535 samples, 0.17%)</title><rect x="8.5436%" y="181" width="0.1718%" height="15" fill="rgb(227,0,7)"/><text x="8.7936%" y="191.50"></text></g><g><title>item_attrs (239,931 samples, 0.14%)</title><rect x="9.0189%" y="149" width="0.1353%" height="15" fill="rgb(217,0,24)"/><text x="9.2689%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (230,471 samples, 0.13%)</title><rect x="9.0242%" y="133" width="0.1300%" height="15" fill="rgb(221,193,54)"/><text x="9.2742%" y="143.50"></text></g><g><title>codegen_fn_attrs (354,781 samples, 0.20%)</title><rect x="8.9689%" y="165" width="0.2001%" height="15" fill="rgb(248,212,6)"/><text x="9.2189%" y="175.50"></text></g><g><title>adt_drop_tys (202,503 samples, 0.11%)</title><rect x="11.1265%" y="101" width="0.1142%" height="15" fill="rgb(208,68,35)"/><text x="11.3765%" y="111.50"></text></g><g><title>adt_drop_tys (308,056 samples, 0.17%)</title><rect x="11.1174%" y="117" width="0.1738%" height="15" fill="rgb(232,128,0)"/><text x="11.3674%" y="127.50"></text></g><g><title>adt_drop_tys (632,729 samples, 0.36%)</title><rect x="11.0913%" y="133" width="0.3569%" height="15" fill="rgb(207,160,47)"/><text x="11.3413%" y="143.50"></text></g><g><title>needs_drop_raw (1,611,778 samples, 0.91%)</title><rect x="11.0234%" y="149" width="0.9091%" height="15" fill="rgb(228,23,34)"/><text x="11.2734%" y="159.50"></text></g><g><title>is_copy_raw (858,607 samples, 0.48%)</title><rect x="11.4482%" y="133" width="0.4843%" height="15" fill="rgb(218,30,26)"/><text x="11.6982%" y="143.50"></text></g><g><title>evaluate_obligation (745,696 samples, 0.42%)</title><rect x="11.5119%" y="117" width="0.4206%" height="15" fill="rgb(220,122,19)"/><text x="11.7619%" y="127.50"></text></g><g><title>impl_parent (667,279 samples, 0.38%)</title><rect x="12.7751%" y="117" width="0.3764%" height="15" fill="rgb(250,228,42)"/><text x="13.0251%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (394,096 samples, 0.22%)</title><rect x="12.9292%" y="101" width="0.2223%" height="15" fill="rgb(240,193,28)"/><text x="13.1792%" y="111.50"></text></g><g><title>specialization_graph_of (3,609,430 samples, 2.04%)</title><rect x="12.1656%" y="133" width="2.0359%" height="15" fill="rgb(216,20,37)"/><text x="12.4156%" y="143.50">s..</text></g><g><title>impl_trait_ref (1,861,609 samples, 1.05%)</title><rect x="13.1515%" y="117" width="1.0501%" height="15" fill="rgb(206,188,39)"/><text x="13.4015%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,341,594 samples, 0.76%)</title><rect x="13.4448%" y="101" width="0.7567%" height="15" fill="rgb(217,207,13)"/><text x="13.6948%" y="111.50"></text></g><g><title>resolve_instance (4,102,264 samples, 2.31%)</title><rect x="11.9325%" y="149" width="2.3139%" height="15" fill="rgb(231,73,38)"/><text x="12.1825%" y="159.50">r..</text></g><g><title>thir_body (1,224,175 samples, 0.69%)</title><rect x="14.2589%" y="149" width="0.6905%" height="15" fill="rgb(225,20,46)"/><text x="14.5089%" y="159.50"></text></g><g><title>mir_const (12,114,693 samples, 6.83%)</title><rect x="8.1249%" y="197" width="6.8334%" height="15" fill="rgb(210,31,41)"/><text x="8.3749%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (11,067,853 samples, 6.24%)</title><rect x="8.7154%" y="181" width="6.2429%" height="15" fill="rgb(221,200,47)"/><text x="8.9654%" y="191.50">unsafety..</text></g><g><title>mir_built (10,263,724 samples, 5.79%)</title><rect x="9.1690%" y="165" width="5.7894%" height="15" fill="rgb(226,26,5)"/><text x="9.4190%" y="175.50">mir_bui..</text></g><g><title>mir_promoted (13,319,278 samples, 7.51%)</title><rect x="7.6576%" y="213" width="7.5129%" height="15" fill="rgb(249,33,26)"/><text x="7.9076%" y="223.50">mir_promot..</text></g><g><title>mir_const_qualif (376,066 samples, 0.21%)</title><rect x="14.9584%" y="197" width="0.2121%" height="15" fill="rgb(235,183,28)"/><text x="15.2084%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (492,836 samples, 0.28%)</title><rect x="15.1705%" y="213" width="0.2780%" height="15" fill="rgb(221,5,38)"/><text x="15.4205%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (538,235 samples, 0.30%)</title><rect x="15.4485%" y="213" width="0.3036%" height="15" fill="rgb(247,18,42)"/><text x="15.6985%" y="223.50"></text></g><g><title>normalize_projection_ty (326,934 samples, 0.18%)</title><rect x="15.5677%" y="197" width="0.1844%" height="15" fill="rgb(241,131,45)"/><text x="15.8177%" y="207.50"></text></g><g><title>type_op_normalize_predicate (259,483 samples, 0.15%)</title><rect x="15.7521%" y="213" width="0.1464%" height="15" fill="rgb(249,31,29)"/><text x="16.0021%" y="223.50"></text></g><g><title>type_op_prove_predicate (1,938,421 samples, 1.09%)</title><rect x="15.9173%" y="213" width="1.0934%" height="15" fill="rgb(225,111,53)"/><text x="16.1673%" y="223.50"></text></g><g><title>MIR_borrow_checking (29,124,793 samples, 16.43%)</title><rect x="0.5913%" y="245" width="16.4282%" height="15" fill="rgb(238,160,17)"/><text x="0.8413%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (29,058,833 samples, 16.39%)</title><rect x="0.6285%" y="229" width="16.3910%" height="15" fill="rgb(214,148,48)"/><text x="0.8785%" y="239.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (339,784 samples, 0.19%)</title><rect x="17.3726%" y="213" width="0.1917%" height="15" fill="rgb(232,36,49)"/><text x="17.6226%" y="223.50"></text></g><g><title>check_mod_attrs (652,777 samples, 0.37%)</title><rect x="17.1961%" y="229" width="0.3682%" height="15" fill="rgb(209,103,24)"/><text x="17.4461%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (328,564 samples, 0.19%)</title><rect x="17.6449%" y="229" width="0.1853%" height="15" fill="rgb(229,88,8)"/><text x="17.8949%" y="239.50"></text></g><g><title>misc_checking_1 (1,189,493 samples, 0.67%)</title><rect x="17.1853%" y="245" width="0.6709%" height="15" fill="rgb(213,181,19)"/><text x="17.4353%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (636,997 samples, 0.36%)</title><rect x="17.8572%" y="229" width="0.3593%" height="15" fill="rgb(254,191,54)"/><text x="18.1072%" y="239.50"></text></g><g><title>check_mod_liveness (536,026 samples, 0.30%)</title><rect x="17.9141%" y="213" width="0.3024%" height="15" fill="rgb(241,83,37)"/><text x="18.1641%" y="223.50"></text></g><g><title>type_uninhabited_from (219,801 samples, 0.12%)</title><rect x="18.0925%" y="197" width="0.1240%" height="15" fill="rgb(233,36,39)"/><text x="18.3425%" y="207.50"></text></g><g><title>type_uninhabited_from (183,491 samples, 0.10%)</title><rect x="18.1130%" y="181" width="0.1035%" height="15" fill="rgb(226,3,54)"/><text x="18.3630%" y="191.50"></text></g><g><title>misc_checking_2 (1,333,334 samples, 0.75%)</title><rect x="17.8562%" y="245" width="0.7521%" height="15" fill="rgb(245,192,40)"/><text x="18.1062%" y="255.50"></text></g><g><title>match_checking (694,597 samples, 0.39%)</title><rect x="18.2165%" y="229" width="0.3918%" height="15" fill="rgb(238,167,29)"/><text x="18.4665%" y="239.50"></text></g><g><title>check_match (676,007 samples, 0.38%)</title><rect x="18.2270%" y="213" width="0.3813%" height="15" fill="rgb(232,182,51)"/><text x="18.4770%" y="223.50"></text></g><g><title>death_checking (373,204 samples, 0.21%)</title><rect x="18.6967%" y="229" width="0.2105%" height="15" fill="rgb(231,60,39)"/><text x="18.9467%" y="239.50"></text></g><g><title>eval_to_const_value_raw (663,508 samples, 0.37%)</title><rect x="19.3978%" y="149" width="0.3743%" height="15" fill="rgb(208,69,12)"/><text x="19.6478%" y="159.50"></text></g><g><title>eval_to_const_value_raw (662,788 samples, 0.37%)</title><rect x="19.3982%" y="133" width="0.3739%" height="15" fill="rgb(235,93,37)"/><text x="19.6482%" y="143.50"></text></g><g><title>eval_to_allocation_raw (660,948 samples, 0.37%)</title><rect x="19.3993%" y="117" width="0.3728%" height="15" fill="rgb(213,116,39)"/><text x="19.6493%" y="127.50"></text></g><g><title>eval_to_allocation_raw (753,378 samples, 0.42%)</title><rect x="19.3482%" y="197" width="0.4250%" height="15" fill="rgb(222,207,29)"/><text x="19.5982%" y="207.50"></text></g><g><title>eval_to_allocation_raw (752,608 samples, 0.42%)</title><rect x="19.3487%" y="181" width="0.4245%" height="15" fill="rgb(206,96,30)"/><text x="19.5987%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (673,208 samples, 0.38%)</title><rect x="19.3935%" y="165" width="0.3797%" height="15" fill="rgb(218,138,4)"/><text x="19.6435%" y="175.50"></text></g><g><title>param_env (213,103 samples, 0.12%)</title><rect x="19.8661%" y="197" width="0.1202%" height="15" fill="rgb(250,191,14)"/><text x="20.1161%" y="207.50"></text></g><g><title>impl_parent (824,295 samples, 0.46%)</title><rect x="20.9289%" y="165" width="0.4650%" height="15" fill="rgb(239,60,40)"/><text x="21.1789%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (493,653 samples, 0.28%)</title><rect x="21.1154%" y="149" width="0.2785%" height="15" fill="rgb(206,27,48)"/><text x="21.3654%" y="159.50"></text></g><g><title>specialization_graph_of (4,085,165 samples, 2.30%)</title><rect x="20.0352%" y="181" width="2.3043%" height="15" fill="rgb(225,35,8)"/><text x="20.2852%" y="191.50">s..</text></g><g><title>impl_trait_ref (1,676,539 samples, 0.95%)</title><rect x="21.3938%" y="165" width="0.9457%" height="15" fill="rgb(250,213,24)"/><text x="21.6438%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,124,432 samples, 0.63%)</title><rect x="21.7052%" y="149" width="0.6342%" height="15" fill="rgb(247,123,22)"/><text x="21.9552%" y="159.50"></text></g><g><title>resolve_instance (4,174,956 samples, 2.35%)</title><rect x="19.9863%" y="197" width="2.3549%" height="15" fill="rgb(231,138,38)"/><text x="20.2363%" y="207.50">r..</text></g><g><title>crate_lints (6,098,497 samples, 3.44%)</title><rect x="18.9087%" y="213" width="3.4399%" height="15" fill="rgb(231,145,46)"/><text x="19.1587%" y="223.50">cra..</text></g><g><title>lint_checking (6,599,662 samples, 3.72%)</title><rect x="18.9072%" y="229" width="3.7226%" height="15" fill="rgb(251,118,11)"/><text x="19.1572%" y="239.50">lint..</text></g><g><title>module_lints (498,575 samples, 0.28%)</title><rect x="22.3486%" y="213" width="0.2812%" height="15" fill="rgb(217,147,25)"/><text x="22.5986%" y="223.50"></text></g><g><title>lint_mod (494,225 samples, 0.28%)</title><rect x="22.3511%" y="197" width="0.2788%" height="15" fill="rgb(247,81,37)"/><text x="22.6011%" y="207.50"></text></g><g><title>privacy_checking_modules (795,959 samples, 0.45%)</title><rect x="22.6874%" y="229" width="0.4490%" height="15" fill="rgb(209,12,38)"/><text x="22.9374%" y="239.50"></text></g><g><title>check_mod_privacy (793,699 samples, 0.45%)</title><rect x="22.6886%" y="213" width="0.4477%" height="15" fill="rgb(227,1,9)"/><text x="22.9386%" y="223.50"></text></g><g><title>misc_checking_3 (8,040,219 samples, 4.54%)</title><rect x="18.6083%" y="245" width="4.5352%" height="15" fill="rgb(248,47,43)"/><text x="18.8583%" y="255.50">misc_..</text></g><g><title>impl_parent (2,340,217 samples, 1.32%)</title><rect x="25.4721%" y="181" width="1.3200%" height="15" fill="rgb(221,10,30)"/><text x="25.7221%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,398,300 samples, 0.79%)</title><rect x="26.0034%" y="165" width="0.7887%" height="15" fill="rgb(210,229,1)"/><text x="26.2534%" y="175.50"></text></g><g><title>impl_trait_ref (5,557,944 samples, 3.14%)</title><rect x="26.7928%" y="181" width="3.1350%" height="15" fill="rgb(222,148,37)"/><text x="27.0428%" y="191.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,423,572 samples, 2.50%)</title><rect x="27.4327%" y="165" width="2.4952%" height="15" fill="rgb(234,67,33)"/><text x="27.6827%" y="175.50">me..</text></g><g><title>trait_impls_of (921,672 samples, 0.52%)</title><rect x="29.9654%" y="181" width="0.5199%" height="15" fill="rgb(247,98,35)"/><text x="30.2154%" y="191.50"></text></g><g><title>implementations_of_trait (299,505 samples, 0.17%)</title><rect x="30.3163%" y="165" width="0.1689%" height="15" fill="rgb(247,138,52)"/><text x="30.5663%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (220,925 samples, 0.12%)</title><rect x="30.3607%" y="149" width="0.1246%" height="15" fill="rgb(213,79,30)"/><text x="30.6107%" y="159.50"></text></g><g><title>coherent_trait (12,942,313 samples, 7.30%)</title><rect x="23.1854%" y="213" width="7.3003%" height="15" fill="rgb(246,177,23)"/><text x="23.4354%" y="223.50">coherent_t..</text></g><g><title>specialization_graph_of (12,926,063 samples, 7.29%)</title><rect x="23.1946%" y="197" width="7.2911%" height="15" fill="rgb(230,62,27)"/><text x="23.4446%" y="207.50">specializa..</text></g><g><title>coherence_checking (13,010,203 samples, 7.34%)</title><rect x="23.1742%" y="229" width="7.3385%" height="15" fill="rgb(216,154,8)"/><text x="23.4242%" y="239.50">coherence_..</text></g><g><title>associated_item (316,844 samples, 0.18%)</title><rect x="36.9690%" y="165" width="0.1787%" height="15" fill="rgb(244,35,45)"/><text x="37.2190%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (246,722 samples, 0.14%)</title><rect x="37.0086%" y="149" width="0.1392%" height="15" fill="rgb(251,115,12)"/><text x="37.2586%" y="159.50"></text></g><g><title>associated_items (467,616 samples, 0.26%)</title><rect x="36.8988%" y="181" width="0.2638%" height="15" fill="rgb(240,54,50)"/><text x="37.1488%" y="191.50"></text></g><g><title>adt_def (1,316,654 samples, 0.74%)</title><rect x="38.0728%" y="149" width="0.7427%" height="15" fill="rgb(233,84,52)"/><text x="38.3228%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (1,304,014 samples, 0.74%)</title><rect x="38.0799%" y="133" width="0.7355%" height="15" fill="rgb(207,117,47)"/><text x="38.3299%" y="143.50"></text></g><g><title>item_attrs (273,543 samples, 0.15%)</title><rect x="38.6611%" y="117" width="0.1543%" height="15" fill="rgb(249,43,39)"/><text x="38.9111%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (260,003 samples, 0.15%)</title><rect x="38.6688%" y="101" width="0.1467%" height="15" fill="rgb(209,38,44)"/><text x="38.9188%" y="111.50"></text></g><g><title>adt_def (332,917 samples, 0.19%)</title><rect x="38.9978%" y="133" width="0.1878%" height="15" fill="rgb(236,212,23)"/><text x="39.2478%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (321,787 samples, 0.18%)</title><rect x="39.0040%" y="117" width="0.1815%" height="15" fill="rgb(242,79,21)"/><text x="39.2540%" y="127.50"></text></g><g><title>item_attrs (190,995 samples, 0.11%)</title><rect x="39.0778%" y="101" width="0.1077%" height="15" fill="rgb(211,96,35)"/><text x="39.3278%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (179,415 samples, 0.10%)</title><rect x="39.0843%" y="85" width="0.1012%" height="15" fill="rgb(253,215,40)"/><text x="39.3343%" y="95.50"></text></g><g><title>adt_def (377,803 samples, 0.21%)</title><rect x="39.3200%" y="117" width="0.2131%" height="15" fill="rgb(211,81,21)"/><text x="39.5700%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (369,323 samples, 0.21%)</title><rect x="39.3248%" y="101" width="0.2083%" height="15" fill="rgb(208,190,38)"/><text x="39.5748%" y="111.50"></text></g><g><title>adt_def (455,246 samples, 0.26%)</title><rect x="39.8521%" y="85" width="0.2568%" height="15" fill="rgb(235,213,38)"/><text x="40.1021%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (446,986 samples, 0.25%)</title><rect x="39.8567%" y="69" width="0.2521%" height="15" fill="rgb(237,122,38)"/><text x="40.1067%" y="79.50"></text></g><g><title>item_attrs (184,902 samples, 0.10%)</title><rect x="40.0046%" y="53" width="0.1043%" height="15" fill="rgb(244,218,35)"/><text x="40.2546%" y="63.50"></text></g><g><title>adt_def (293,032 samples, 0.17%)</title><rect x="40.2109%" y="69" width="0.1653%" height="15" fill="rgb(240,68,47)"/><text x="40.4609%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (282,051 samples, 0.16%)</title><rect x="40.2170%" y="53" width="0.1591%" height="15" fill="rgb(210,16,53)"/><text x="40.4670%" y="63.50"></text></g><g><title>adt_dtorck_constraint (350,184 samples, 0.20%)</title><rect x="40.5499%" y="37" width="0.1975%" height="15" fill="rgb(235,124,12)"/><text x="40.7999%" y="47.50"></text></g><g><title>adt_dtorck_constraint (518,417 samples, 0.29%)</title><rect x="40.4695%" y="53" width="0.2924%" height="15" fill="rgb(224,169,11)"/><text x="40.7195%" y="63.50"></text></g><g><title>adt_dtorck_constraint (655,938 samples, 0.37%)</title><rect x="40.4058%" y="69" width="0.3700%" height="15" fill="rgb(250,166,2)"/><text x="40.6558%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,207,982 samples, 0.68%)</title><rect x="40.1383%" y="85" width="0.6814%" height="15" fill="rgb(242,216,29)"/><text x="40.3883%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,950,961 samples, 1.10%)</title><rect x="39.7714%" y="101" width="1.1005%" height="15" fill="rgb(230,116,27)"/><text x="40.0214%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,438,159 samples, 1.38%)</title><rect x="39.5570%" y="117" width="1.3753%" height="15" fill="rgb(228,99,48)"/><text x="39.8070%" y="127.50"></text></g><g><title>adt_dtorck_constraint (3,128,194 samples, 1.76%)</title><rect x="39.2175%" y="133" width="1.7645%" height="15" fill="rgb(253,11,6)"/><text x="39.4675%" y="143.50"></text></g><g><title>adt_dtorck_constraint (3,905,655 samples, 2.20%)</title><rect x="38.8583%" y="149" width="2.2030%" height="15" fill="rgb(247,143,39)"/><text x="39.1083%" y="159.50">a..</text></g><g><title>dropck_outlives (7,007,978 samples, 3.95%)</title><rect x="37.1969%" y="181" width="3.9529%" height="15" fill="rgb(236,97,10)"/><text x="37.4469%" y="191.50">drop..</text></g><g><title>adt_dtorck_constraint (5,956,669 samples, 3.36%)</title><rect x="37.7899%" y="165" width="3.3599%" height="15" fill="rgb(233,208,19)"/><text x="38.0399%" y="175.50">adt..</text></g><g><title>evaluate_obligation (1,630,850 samples, 0.92%)</title><rect x="41.1498%" y="181" width="0.9199%" height="15" fill="rgb(216,164,2)"/><text x="41.3998%" y="191.50"></text></g><g><title>trait_impls_of (399,356 samples, 0.23%)</title><rect x="41.8445%" y="165" width="0.2253%" height="15" fill="rgb(220,129,5)"/><text x="42.0945%" y="175.50"></text></g><g><title>method_autoderef_steps (207,383 samples, 0.12%)</title><rect x="42.3770%" y="181" width="0.1170%" height="15" fill="rgb(242,17,10)"/><text x="42.6270%" y="191.50"></text></g><g><title>predicates_of (344,161 samples, 0.19%)</title><rect x="42.5103%" y="181" width="0.1941%" height="15" fill="rgb(242,107,0)"/><text x="42.7603%" y="191.50"></text></g><g><title>predicates_defined_on (225,290 samples, 0.13%)</title><rect x="42.5774%" y="165" width="0.1271%" height="15" fill="rgb(251,28,31)"/><text x="42.8274%" y="175.50"></text></g><g><title>associated_item (248,513 samples, 0.14%)</title><rect x="49.2365%" y="149" width="0.1402%" height="15" fill="rgb(233,223,10)"/><text x="49.4865%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (190,263 samples, 0.11%)</title><rect x="49.2694%" y="133" width="0.1073%" height="15" fill="rgb(215,21,27)"/><text x="49.5194%" y="143.50"></text></g><g><title>associated_items (388,715 samples, 0.22%)</title><rect x="49.1721%" y="165" width="0.2193%" height="15" fill="rgb(232,23,21)"/><text x="49.4221%" y="175.50"></text></g><g><title>dropck_outlives (542,156 samples, 0.31%)</title><rect x="49.4230%" y="165" width="0.3058%" height="15" fill="rgb(244,5,23)"/><text x="49.6730%" y="175.50"></text></g><g><title>adt_dtorck_constraint (194,373 samples, 0.11%)</title><rect x="49.6191%" y="149" width="0.1096%" height="15" fill="rgb(226,81,46)"/><text x="49.8691%" y="159.50"></text></g><g><title>evaluate_obligation (1,877,213 samples, 1.06%)</title><rect x="49.7288%" y="165" width="1.0589%" height="15" fill="rgb(247,70,30)"/><text x="49.9788%" y="175.50"></text></g><g><title>trait_impls_of (655,746 samples, 0.37%)</title><rect x="50.4177%" y="149" width="0.3699%" height="15" fill="rgb(212,68,19)"/><text x="50.6677%" y="159.50"></text></g><g><title>implementations_of_trait (241,324 samples, 0.14%)</title><rect x="50.6515%" y="133" width="0.1361%" height="15" fill="rgb(240,187,13)"/><text x="50.9015%" y="143.50"></text></g><g><title>is_copy_raw (265,962 samples, 0.15%)</title><rect x="50.9755%" y="165" width="0.1500%" height="15" fill="rgb(223,113,26)"/><text x="51.2255%" y="175.50"></text></g><g><title>evaluate_obligation (250,832 samples, 0.14%)</title><rect x="50.9840%" y="149" width="0.1415%" height="15" fill="rgb(206,192,2)"/><text x="51.2340%" y="159.50"></text></g><g><title>trait_impls_of (198,012 samples, 0.11%)</title><rect x="51.0138%" y="133" width="0.1117%" height="15" fill="rgb(241,108,4)"/><text x="51.2638%" y="143.50"></text></g><g><title>method_autoderef_steps (398,173 samples, 0.22%)</title><rect x="51.1646%" y="165" width="0.2246%" height="15" fill="rgb(247,173,49)"/><text x="51.4146%" y="175.50"></text></g><g><title>evaluate_obligation (178,371 samples, 0.10%)</title><rect x="51.2886%" y="149" width="0.1006%" height="15" fill="rgb(224,114,35)"/><text x="51.5386%" y="159.50"></text></g><g><title>predicates_of (289,112 samples, 0.16%)</title><rect x="51.3987%" y="165" width="0.1631%" height="15" fill="rgb(245,159,27)"/><text x="51.6487%" y="175.50"></text></g><g><title>predicates_defined_on (200,732 samples, 0.11%)</title><rect x="51.4486%" y="149" width="0.1132%" height="15" fill="rgb(245,172,44)"/><text x="51.6986%" y="159.50"></text></g><g><title>typeck (15,641,283 samples, 8.82%)</title><rect x="42.7982%" y="181" width="8.8226%" height="15" fill="rgb(236,23,11)"/><text x="43.0482%" y="191.50">typeck</text></g><g><title>item_bodies_checking (37,449,514 samples, 21.12%)</title><rect x="30.5243%" y="229" width="21.1238%" height="15" fill="rgb(205,117,38)"/><text x="30.7743%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (37,445,824 samples, 21.12%)</title><rect x="30.5264%" y="213" width="21.1217%" height="15" fill="rgb(237,72,25)"/><text x="30.7764%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (37,405,164 samples, 21.10%)</title><rect x="30.5493%" y="197" width="21.0988%" height="15" fill="rgb(244,70,9)"/><text x="30.7993%" y="207.50">typeck</text></g><g><title>impl_trait_ref (200,941 samples, 0.11%)</title><rect x="52.5637%" y="69" width="0.1133%" height="15" fill="rgb(217,125,39)"/><text x="52.8137%" y="79.50"></text></g><g><title>coherent_trait (454,615 samples, 0.26%)</title><rect x="52.4622%" y="101" width="0.2564%" height="15" fill="rgb(235,36,10)"/><text x="52.7122%" y="111.50"></text></g><g><title>specialization_graph_of (452,145 samples, 0.26%)</title><rect x="52.4636%" y="85" width="0.2550%" height="15" fill="rgb(251,123,47)"/><text x="52.7136%" y="95.50"></text></g><g><title>adt_destructor (460,875 samples, 0.26%)</title><rect x="52.4595%" y="133" width="0.2600%" height="15" fill="rgb(221,13,13)"/><text x="52.7095%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (460,375 samples, 0.26%)</title><rect x="52.4598%" y="117" width="0.2597%" height="15" fill="rgb(238,131,9)"/><text x="52.7098%" y="127.50"></text></g><g><title>adt_dtorck_constraint (466,925 samples, 0.26%)</title><rect x="52.4563%" y="149" width="0.2634%" height="15" fill="rgb(211,50,8)"/><text x="52.7063%" y="159.50"></text></g><g><title>dropck_outlives (494,365 samples, 0.28%)</title><rect x="52.4415%" y="181" width="0.2789%" height="15" fill="rgb(245,182,24)"/><text x="52.6915%" y="191.50"></text></g><g><title>adt_dtorck_constraint (475,745 samples, 0.27%)</title><rect x="52.4520%" y="165" width="0.2683%" height="15" fill="rgb(242,14,37)"/><text x="52.7020%" y="175.50"></text></g><g><title>item_types_checking (2,067,283 samples, 1.17%)</title><rect x="51.6481%" y="229" width="1.1661%" height="15" fill="rgb(246,228,12)"/><text x="51.8981%" y="239.50"></text></g><g><title>check_mod_item_types (2,063,673 samples, 1.16%)</title><rect x="51.6501%" y="213" width="1.1640%" height="15" fill="rgb(213,55,15)"/><text x="51.9001%" y="223.50"></text></g><g><title>typeck (1,367,056 samples, 0.77%)</title><rect x="52.0431%" y="197" width="0.7711%" height="15" fill="rgb(209,9,3)"/><text x="52.2931%" y="207.50"></text></g><g><title>fn_sig (388,175 samples, 0.22%)</title><rect x="52.9124%" y="197" width="0.2190%" height="15" fill="rgb(230,59,30)"/><text x="53.1624%" y="207.50"></text></g><g><title>named_region_map (256,714 samples, 0.14%)</title><rect x="53.1833%" y="181" width="0.1448%" height="15" fill="rgb(209,121,21)"/><text x="53.4333%" y="191.50"></text></g><g><title>resolve_lifetimes (250,494 samples, 0.14%)</title><rect x="53.1868%" y="165" width="0.1413%" height="15" fill="rgb(220,109,13)"/><text x="53.4368%" y="175.50"></text></g><g><title>generics_of (358,935 samples, 0.20%)</title><rect x="53.1313%" y="197" width="0.2025%" height="15" fill="rgb(232,18,1)"/><text x="53.3813%" y="207.50"></text></g><g><title>predicates_of (368,642 samples, 0.21%)</title><rect x="53.3511%" y="197" width="0.2079%" height="15" fill="rgb(215,41,42)"/><text x="53.6011%" y="207.50"></text></g><g><title>predicates_defined_on (343,792 samples, 0.19%)</title><rect x="53.3652%" y="181" width="0.1939%" height="15" fill="rgb(224,123,36)"/><text x="53.6152%" y="191.50"></text></g><g><title>inferred_outlives_of (217,312 samples, 0.12%)</title><rect x="53.4365%" y="165" width="0.1226%" height="15" fill="rgb(240,125,3)"/><text x="53.6865%" y="175.50"></text></g><g><title>inferred_outlives_crate (201,062 samples, 0.11%)</title><rect x="53.4457%" y="149" width="0.1134%" height="15" fill="rgb(205,98,50)"/><text x="53.6957%" y="159.50"></text></g><g><title>type_collecting (1,383,296 samples, 0.78%)</title><rect x="52.8157%" y="229" width="0.7803%" height="15" fill="rgb(205,185,37)"/><text x="53.0657%" y="239.50"></text></g><g><title>collect_mod_item_types (1,373,875 samples, 0.77%)</title><rect x="52.8210%" y="213" width="0.7749%" height="15" fill="rgb(238,207,15)"/><text x="53.0710%" y="223.50"></text></g><g><title>adt_def (379,004 samples, 0.21%)</title><rect x="54.2085%" y="117" width="0.2138%" height="15" fill="rgb(213,199,42)"/><text x="54.4585%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (378,754 samples, 0.21%)</title><rect x="54.2086%" y="101" width="0.2136%" height="15" fill="rgb(235,201,11)"/><text x="54.4586%" y="111.50"></text></g><g><title>item_attrs (370,934 samples, 0.21%)</title><rect x="54.2131%" y="85" width="0.2092%" height="15" fill="rgb(207,46,11)"/><text x="54.4631%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (370,614 samples, 0.21%)</title><rect x="54.2132%" y="69" width="0.2090%" height="15" fill="rgb(241,35,35)"/><text x="54.4632%" y="79.50"></text></g><g><title>adt_sized_constraint (394,464 samples, 0.22%)</title><rect x="54.2079%" y="133" width="0.2225%" height="15" fill="rgb(243,32,47)"/><text x="54.4579%" y="143.50"></text></g><g><title>adt_sized_constraint (531,446 samples, 0.30%)</title><rect x="54.1328%" y="149" width="0.2998%" height="15" fill="rgb(247,202,23)"/><text x="54.3828%" y="159.50"></text></g><g><title>adt_sized_constraint (648,527 samples, 0.37%)</title><rect x="54.0693%" y="165" width="0.3658%" height="15" fill="rgb(219,102,11)"/><text x="54.3193%" y="175.50"></text></g><g><title>adt_sized_constraint (774,789 samples, 0.44%)</title><rect x="54.0021%" y="181" width="0.4370%" height="15" fill="rgb(243,110,44)"/><text x="54.2521%" y="191.50"></text></g><g><title>evaluate_obligation (943,781 samples, 0.53%)</title><rect x="53.9285%" y="197" width="0.5323%" height="15" fill="rgb(222,74,54)"/><text x="54.1785%" y="207.50"></text></g><g><title>region_scope_tree (274,915 samples, 0.16%)</title><rect x="54.5662%" y="197" width="0.1551%" height="15" fill="rgb(216,99,12)"/><text x="54.8162%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,915,913 samples, 1.08%)</title><rect x="53.6544%" y="213" width="1.0807%" height="15" fill="rgb(226,22,26)"/><text x="53.9044%" y="223.50"></text></g><g><title>adt_def (249,112 samples, 0.14%)</title><rect x="55.4665%" y="117" width="0.1405%" height="15" fill="rgb(217,163,10)"/><text x="55.7165%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (240,882 samples, 0.14%)</title><rect x="55.4711%" y="101" width="0.1359%" height="15" fill="rgb(213,25,53)"/><text x="55.7211%" y="111.50"></text></g><g><title>adt_sized_constraint (434,455 samples, 0.25%)</title><rect x="55.4504%" y="133" width="0.2451%" height="15" fill="rgb(252,105,26)"/><text x="55.7004%" y="143.50"></text></g><g><title>adt_sized_constraint (560,836 samples, 0.32%)</title><rect x="55.3871%" y="149" width="0.3163%" height="15" fill="rgb(220,39,43)"/><text x="55.6371%" y="159.50"></text></g><g><title>adt_sized_constraint (705,457 samples, 0.40%)</title><rect x="55.3142%" y="165" width="0.3979%" height="15" fill="rgb(229,68,48)"/><text x="55.5642%" y="175.50"></text></g><g><title>adt_sized_constraint (917,000 samples, 0.52%)</title><rect x="55.2048%" y="181" width="0.5172%" height="15" fill="rgb(252,8,32)"/><text x="55.4548%" y="191.50"></text></g><g><title>evaluate_obligation (1,263,253 samples, 0.71%)</title><rect x="55.0734%" y="197" width="0.7126%" height="15" fill="rgb(223,20,43)"/><text x="55.3234%" y="207.50"></text></g><g><title>analysis (98,593,650 samples, 55.61%)</title><rect x="0.4149%" y="261" width="55.6128%" height="15" fill="rgb(229,81,49)"/><text x="0.6649%" y="271.50">analysis</text></g><g><title>type_check_crate (58,299,064 samples, 32.88%)</title><rect x="23.1435%" y="245" width="32.8842%" height="15" fill="rgb(236,28,36)"/><text x="23.3935%" y="255.50">type_check_crate</text></g><g><title>wf_checking (4,308,148 samples, 2.43%)</title><rect x="53.5976%" y="229" width="2.4301%" height="15" fill="rgb(249,185,26)"/><text x="53.8476%" y="239.50">wf..</text></g><g><title>check_item_well_formed (2,291,654 samples, 1.29%)</title><rect x="54.7351%" y="213" width="1.2926%" height="15" fill="rgb(249,174,33)"/><text x="54.9851%" y="223.50"></text></g><g><title>codegen_crate (723,248 samples, 0.41%)</title><rect x="56.0354%" y="261" width="0.4080%" height="15" fill="rgb(233,201,37)"/><text x="56.2854%" y="271.50"></text></g><g><title>metadata_load_macro (1,139,882 samples, 0.64%)</title><rect x="88.6606%" y="213" width="0.6430%" height="15" fill="rgb(221,78,26)"/><text x="88.9106%" y="223.50"></text></g><g><title>metadata_register_crate (4,166,826 samples, 2.35%)</title><rect x="89.3036%" y="213" width="2.3503%" height="15" fill="rgb(250,127,30)"/><text x="89.5536%" y="223.50">m..</text></g><g><title>metadata_register_crate (1,807,979 samples, 1.02%)</title><rect x="90.6341%" y="197" width="1.0198%" height="15" fill="rgb(230,49,44)"/><text x="90.8841%" y="207.50"></text></g><g><title>metadata_register_crate (281,613 samples, 0.16%)</title><rect x="91.4951%" y="181" width="0.1588%" height="15" fill="rgb(229,67,23)"/><text x="91.7451%" y="191.50"></text></g><g><title>macro_expand_crate (62,074,456 samples, 35.01%)</title><rect x="56.7406%" y="245" width="35.0138%" height="15" fill="rgb(249,83,47)"/><text x="56.9906%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (62,050,696 samples, 35.00%)</title><rect x="56.7540%" y="229" width="35.0004%" height="15" fill="rgb(215,43,3)"/><text x="57.0040%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (178,192 samples, 0.10%)</title><rect x="91.6539%" y="213" width="0.1005%" height="15" fill="rgb(238,154,13)"/><text x="91.9039%" y="223.50"></text></g><g><title>maybe_create_a_macro_crate (356,124 samples, 0.20%)</title><rect x="91.7550%" y="245" width="0.2009%" height="15" fill="rgb(219,56,2)"/><text x="92.0050%" y="255.50"></text></g><g><title>finalize_imports (217,812 samples, 0.12%)</title><rect x="92.0468%" y="229" width="0.1229%" height="15" fill="rgb(233,0,4)"/><text x="92.2968%" y="239.50"></text></g><g><title>finalize_macro_resolutions (430,685 samples, 0.24%)</title><rect x="92.1697%" y="229" width="0.2429%" height="15" fill="rgb(235,30,7)"/><text x="92.4197%" y="239.50"></text></g><g><title>late_resolve_crate (2,592,839 samples, 1.46%)</title><rect x="92.4126%" y="229" width="1.4625%" height="15" fill="rgb(250,79,13)"/><text x="92.6626%" y="239.50"></text></g><g><title>configure_and_expand (66,471,184 samples, 37.49%)</title><rect x="56.4434%" y="261" width="37.4938%" height="15" fill="rgb(211,146,34)"/><text x="56.6934%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (3,356,667 samples, 1.89%)</title><rect x="92.0438%" y="245" width="1.8934%" height="15" fill="rgb(228,22,38)"/><text x="92.2938%" y="255.50">r..</text></g><g><title>early_lint_checks (412,715 samples, 0.23%)</title><rect x="94.0338%" y="261" width="0.2328%" height="15" fill="rgb(235,168,5)"/><text x="94.2838%" y="271.50"></text></g><g><title>free_global_ctxt (4,580,842 samples, 2.58%)</title><rect x="94.2666%" y="261" width="2.5839%" height="15" fill="rgb(221,155,16)"/><text x="94.5166%" y="271.50">fr..</text></g><g><title>generate_crate_metadata (204,012 samples, 0.12%)</title><rect x="96.8505%" y="261" width="0.1151%" height="15" fill="rgb(215,215,53)"/><text x="97.1005%" y="271.50"></text></g><g><title>hir_lowering (2,682,409 samples, 1.51%)</title><rect x="96.9656%" y="261" width="1.5130%" height="15" fill="rgb(223,4,10)"/><text x="97.2156%" y="271.50"></text></g><g><title>parse_crate (1,053,312 samples, 0.59%)</title><rect x="98.5218%" y="261" width="0.5941%" height="15" fill="rgb(234,103,6)"/><text x="98.7718%" y="271.50"></text></g><g><title>prepare_outputs (179,271 samples, 0.10%)</title><rect x="99.1222%" y="261" width="0.1011%" height="15" fill="rgb(227,97,0)"/><text x="99.3722%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (993,351 samples, 0.56%)</title><rect x="99.2233%" y="261" width="0.5603%" height="15" fill="rgb(234,150,53)"/><text x="99.4733%" y="271.50"></text></g><g><title>all (177,285,821 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (177,285,821 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (269,773 samples, 0.15%)</title><rect x="99.8478%" y="261" width="0.1522%" height="15" fill="rgb(237,53,32)"/><text x="100.0978%" y="271.50"></text></g></svg></svg>