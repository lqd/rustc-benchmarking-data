<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (156,161 samples, 0.21%)</title><rect x="13.7277%" y="117" width="0.2113%" height="15" fill="rgb(227,0,7)"/><text x="13.9777%" y="127.50"></text></g><g><title>item_attrs (116,691 samples, 0.16%)</title><rect x="14.3132%" y="85" width="0.1579%" height="15" fill="rgb(217,0,24)"/><text x="14.5632%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (112,011 samples, 0.15%)</title><rect x="14.3195%" y="69" width="0.1515%" height="15" fill="rgb(221,193,54)"/><text x="14.5695%" y="79.50"></text></g><g><title>codegen_fn_attrs (184,674 samples, 0.25%)</title><rect x="14.2375%" y="101" width="0.2499%" height="15" fill="rgb(248,212,6)"/><text x="14.4875%" y="111.50"></text></g><g><title>is_copy_raw (114,872 samples, 0.16%)</title><rect x="17.0465%" y="53" width="0.1554%" height="15" fill="rgb(208,68,35)"/><text x="17.2965%" y="63.50"></text></g><g><title>evaluate_obligation (97,252 samples, 0.13%)</title><rect x="17.0703%" y="37" width="0.1316%" height="15" fill="rgb(232,128,0)"/><text x="17.3203%" y="47.50"></text></g><g><title>param_env (74,541 samples, 0.10%)</title><rect x="17.2019%" y="53" width="0.1009%" height="15" fill="rgb(207,160,47)"/><text x="17.4519%" y="63.50"></text></g><g><title>adt_drop_tys (262,783 samples, 0.36%)</title><rect x="16.9910%" y="69" width="0.3555%" height="15" fill="rgb(228,23,34)"/><text x="17.2410%" y="79.50"></text></g><g><title>predicates_of (87,181 samples, 0.12%)</title><rect x="18.2635%" y="37" width="0.1180%" height="15" fill="rgb(218,30,26)"/><text x="18.5135%" y="47.50"></text></g><g><title>is_copy_raw (881,640 samples, 1.19%)</title><rect x="17.3466%" y="69" width="1.1928%" height="15" fill="rgb(220,122,19)"/><text x="17.5966%" y="79.50"></text></g><g><title>evaluate_obligation (790,348 samples, 1.07%)</title><rect x="17.4701%" y="53" width="1.0693%" height="15" fill="rgb(250,228,42)"/><text x="17.7201%" y="63.50"></text></g><g><title>trait_impls_of (114,231 samples, 0.15%)</title><rect x="18.3848%" y="37" width="0.1546%" height="15" fill="rgb(240,193,28)"/><text x="18.6348%" y="47.50"></text></g><g><title>needs_drop_raw (1,235,524 samples, 1.67%)</title><rect x="16.8768%" y="85" width="1.6716%" height="15" fill="rgb(216,20,37)"/><text x="17.1268%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (158,942 samples, 0.22%)</title><rect x="18.7237%" y="69" width="0.2150%" height="15" fill="rgb(206,188,39)"/><text x="18.9737%" y="79.50"></text></g><g><title>impl_parent (519,582 samples, 0.70%)</title><rect x="20.2700%" y="53" width="0.7030%" height="15" fill="rgb(217,207,13)"/><text x="20.5200%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (344,602 samples, 0.47%)</title><rect x="20.5068%" y="37" width="0.4662%" height="15" fill="rgb(231,73,38)"/><text x="20.7568%" y="47.50"></text></g><g><title>specialization_graph_of (3,001,973 samples, 4.06%)</title><rect x="19.0315%" y="69" width="4.0616%" height="15" fill="rgb(225,20,46)"/><text x="19.2815%" y="79.50">spec..</text></g><g><title>impl_trait_ref (1,566,982 samples, 2.12%)</title><rect x="20.9730%" y="53" width="2.1201%" height="15" fill="rgb(210,31,41)"/><text x="21.2230%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,389,179 samples, 1.88%)</title><rect x="21.2136%" y="37" width="1.8795%" height="15" fill="rgb(221,200,47)"/><text x="21.4636%" y="47.50">m..</text></g><g><title>resolve_instance (3,401,696 samples, 4.60%)</title><rect x="18.5485%" y="85" width="4.6024%" height="15" fill="rgb(226,26,5)"/><text x="18.7985%" y="95.50">resol..</text></g><g><title>thir_body (594,957 samples, 0.80%)</title><rect x="23.1588%" y="85" width="0.8050%" height="15" fill="rgb(249,33,26)"/><text x="23.4088%" y="95.50"></text></g><g><title>mir_const (7,975,622 samples, 10.79%)</title><rect x="13.1789%" y="133" width="10.7908%" height="15" fill="rgb(235,183,28)"/><text x="13.4289%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,413,843 samples, 10.03%)</title><rect x="13.9390%" y="117" width="10.0307%" height="15" fill="rgb(221,5,38)"/><text x="14.1890%" y="127.50">unsafety_check_..</text></g><g><title>mir_built (7,008,507 samples, 9.48%)</title><rect x="14.4874%" y="101" width="9.4823%" height="15" fill="rgb(247,18,42)"/><text x="14.7374%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (187,242 samples, 0.25%)</title><rect x="23.9697%" y="133" width="0.2533%" height="15" fill="rgb(241,131,45)"/><text x="24.2197%" y="143.50"></text></g><g><title>mir_const (147,302 samples, 0.20%)</title><rect x="24.0238%" y="117" width="0.1993%" height="15" fill="rgb(249,31,29)"/><text x="24.2738%" y="127.50"></text></g><g><title>unsafety_check_result (91,811 samples, 0.12%)</title><rect x="24.0988%" y="101" width="0.1242%" height="15" fill="rgb(225,111,53)"/><text x="24.3488%" y="111.50"></text></g><g><title>mir_promoted (8,667,538 samples, 11.73%)</title><rect x="12.4966%" y="149" width="11.7269%" height="15" fill="rgb(238,160,17)"/><text x="12.7466%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (478,585 samples, 0.65%)</title><rect x="24.2235%" y="149" width="0.6475%" height="15" fill="rgb(214,148,48)"/><text x="24.4735%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (281,060 samples, 0.38%)</title><rect x="24.8710%" y="149" width="0.3803%" height="15" fill="rgb(232,36,49)"/><text x="25.1210%" y="159.50"></text></g><g><title>normalize_projection_ty (180,230 samples, 0.24%)</title><rect x="25.0074%" y="133" width="0.2438%" height="15" fill="rgb(209,103,24)"/><text x="25.2574%" y="143.50"></text></g><g><title>type_op_normalize_predicate (100,053 samples, 0.14%)</title><rect x="25.2513%" y="149" width="0.1354%" height="15" fill="rgb(229,88,8)"/><text x="25.5013%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,980,133 samples, 2.68%)</title><rect x="25.3867%" y="149" width="2.6791%" height="15" fill="rgb(213,181,19)"/><text x="25.6367%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (19,984,444 samples, 27.04%)</title><rect x="1.0435%" y="181" width="27.0384%" height="15" fill="rgb(254,191,54)"/><text x="1.2935%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (19,956,512 samples, 27.00%)</title><rect x="1.0813%" y="165" width="27.0006%" height="15" fill="rgb(241,83,37)"/><text x="1.3313%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (118,801 samples, 0.16%)</title><rect x="28.0819%" y="181" width="0.1607%" height="15" fill="rgb(233,36,39)"/><text x="28.3319%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (93,791 samples, 0.13%)</title><rect x="28.1157%" y="165" width="0.1269%" height="15" fill="rgb(226,3,54)"/><text x="28.3657%" y="175.50"></text></g><g><title>hir_module_items (93,342 samples, 0.13%)</title><rect x="28.2426%" y="181" width="0.1263%" height="15" fill="rgb(245,192,40)"/><text x="28.4926%" y="191.50"></text></g><g><title>should_inherit_track_caller (90,971 samples, 0.12%)</title><rect x="28.7164%" y="133" width="0.1231%" height="15" fill="rgb(238,167,29)"/><text x="28.9664%" y="143.50"></text></g><g><title>codegen_fn_attrs (199,912 samples, 0.27%)</title><rect x="28.5955%" y="149" width="0.2705%" height="15" fill="rgb(232,182,51)"/><text x="28.8455%" y="159.50"></text></g><g><title>check_mod_attrs (348,125 samples, 0.47%)</title><rect x="28.3952%" y="165" width="0.4710%" height="15" fill="rgb(231,60,39)"/><text x="28.6452%" y="175.50"></text></g><g><title>lookup_deprecation_entry (88,751 samples, 0.12%)</title><rect x="29.1151%" y="149" width="0.1201%" height="15" fill="rgb(208,69,12)"/><text x="29.3651%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (230,172 samples, 0.31%)</title><rect x="28.9894%" y="165" width="0.3114%" height="15" fill="rgb(235,93,37)"/><text x="29.2394%" y="175.50"></text></g><g><title>misc_checking_1 (724,848 samples, 0.98%)</title><rect x="28.3696%" y="181" width="0.9807%" height="15" fill="rgb(213,116,39)"/><text x="28.6196%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (345,034 samples, 0.47%)</title><rect x="29.3521%" y="165" width="0.4668%" height="15" fill="rgb(222,207,29)"/><text x="29.6021%" y="175.50"></text></g><g><title>check_mod_liveness (287,013 samples, 0.39%)</title><rect x="29.4306%" y="149" width="0.3883%" height="15" fill="rgb(206,96,30)"/><text x="29.6806%" y="159.50"></text></g><g><title>type_uninhabited_from (85,182 samples, 0.12%)</title><rect x="29.7037%" y="133" width="0.1152%" height="15" fill="rgb(218,138,4)"/><text x="29.9537%" y="143.50"></text></g><g><title>misc_checking_2 (686,938 samples, 0.93%)</title><rect x="29.3503%" y="181" width="0.9294%" height="15" fill="rgb(250,191,14)"/><text x="29.6003%" y="191.50"></text></g><g><title>match_checking (340,594 samples, 0.46%)</title><rect x="29.8189%" y="165" width="0.4608%" height="15" fill="rgb(239,60,40)"/><text x="30.0689%" y="175.50"></text></g><g><title>check_match (331,994 samples, 0.45%)</title><rect x="29.8306%" y="149" width="0.4492%" height="15" fill="rgb(206,27,48)"/><text x="30.0806%" y="159.50"></text></g><g><title>check_private_in_public (84,581 samples, 0.11%)</title><rect x="30.2925%" y="165" width="0.1144%" height="15" fill="rgb(225,35,8)"/><text x="30.5425%" y="175.50"></text></g><g><title>death_checking (191,322 samples, 0.26%)</title><rect x="30.4070%" y="165" width="0.2589%" height="15" fill="rgb(250,213,24)"/><text x="30.6570%" y="175.50"></text></g><g><title>eval_to_const_value_raw (122,602 samples, 0.17%)</title><rect x="31.4089%" y="133" width="0.1659%" height="15" fill="rgb(247,123,22)"/><text x="31.6589%" y="143.50"></text></g><g><title>eval_to_const_value_raw (119,922 samples, 0.16%)</title><rect x="31.4125%" y="117" width="0.1623%" height="15" fill="rgb(231,138,38)"/><text x="31.6625%" y="127.50"></text></g><g><title>eval_to_allocation_raw (113,702 samples, 0.15%)</title><rect x="31.4210%" y="101" width="0.1538%" height="15" fill="rgb(231,145,46)"/><text x="31.6710%" y="111.50"></text></g><g><title>param_env (119,110 samples, 0.16%)</title><rect x="31.5748%" y="133" width="0.1612%" height="15" fill="rgb(251,118,11)"/><text x="31.8248%" y="143.50"></text></g><g><title>crate_lints (2,715,940 samples, 3.67%)</title><rect x="30.6686%" y="149" width="3.6746%" height="15" fill="rgb(217,147,25)"/><text x="30.9186%" y="159.50">crat..</text></g><g><title>type_of (1,923,473 samples, 2.60%)</title><rect x="31.7408%" y="133" width="2.6024%" height="15" fill="rgb(247,81,37)"/><text x="31.9908%" y="143.50">ty..</text></g><g><title>metadata_decode_entry_type_of (1,681,601 samples, 2.28%)</title><rect x="32.0680%" y="117" width="2.2752%" height="15" fill="rgb(209,12,38)"/><text x="32.3180%" y="127.50">m..</text></g><g><title>lint_checking (2,971,853 samples, 4.02%)</title><rect x="30.6658%" y="165" width="4.0208%" height="15" fill="rgb(227,1,9)"/><text x="30.9158%" y="175.50">lint..</text></g><g><title>module_lints (253,873 samples, 0.34%)</title><rect x="34.3432%" y="149" width="0.3435%" height="15" fill="rgb(248,47,43)"/><text x="34.5932%" y="159.50"></text></g><g><title>lint_mod (250,963 samples, 0.34%)</title><rect x="34.3471%" y="133" width="0.3395%" height="15" fill="rgb(221,10,30)"/><text x="34.5971%" y="143.50"></text></g><g><title>privacy_access_levels (90,071 samples, 0.12%)</title><rect x="34.6867%" y="165" width="0.1219%" height="15" fill="rgb(210,229,1)"/><text x="34.9367%" y="175.50"></text></g><g><title>privacy_checking_modules (451,295 samples, 0.61%)</title><rect x="34.8085%" y="165" width="0.6106%" height="15" fill="rgb(222,148,37)"/><text x="35.0585%" y="175.50"></text></g><g><title>check_mod_privacy (449,425 samples, 0.61%)</title><rect x="34.8110%" y="149" width="0.6081%" height="15" fill="rgb(234,67,33)"/><text x="35.0610%" y="159.50"></text></g><g><title>misc_checking_3 (3,815,753 samples, 5.16%)</title><rect x="30.2797%" y="181" width="5.1626%" height="15" fill="rgb(247,98,35)"/><text x="30.5297%" y="191.50">misc_c..</text></g><g><title>impl_parent (355,465 samples, 0.48%)</title><rect x="35.9587%" y="117" width="0.4809%" height="15" fill="rgb(247,138,52)"/><text x="36.2087%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (279,715 samples, 0.38%)</title><rect x="36.0611%" y="101" width="0.3784%" height="15" fill="rgb(213,79,30)"/><text x="36.3111%" y="111.50"></text></g><g><title>impl_trait_ref (937,688 samples, 1.27%)</title><rect x="36.4396%" y="117" width="1.2687%" height="15" fill="rgb(246,177,23)"/><text x="36.6896%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (860,318 samples, 1.16%)</title><rect x="36.5443%" y="101" width="1.1640%" height="15" fill="rgb(230,62,27)"/><text x="36.7943%" y="111.50"></text></g><g><title>coherent_trait (1,728,829 samples, 2.34%)</title><rect x="35.5126%" y="149" width="2.3391%" height="15" fill="rgb(216,154,8)"/><text x="35.7626%" y="159.50">c..</text></g><g><title>specialization_graph_of (1,722,408 samples, 2.33%)</title><rect x="35.5213%" y="133" width="2.3304%" height="15" fill="rgb(244,35,45)"/><text x="35.7713%" y="143.50">s..</text></g><g><title>trait_impls_of (106,001 samples, 0.14%)</title><rect x="37.7083%" y="117" width="0.1434%" height="15" fill="rgb(251,115,12)"/><text x="37.9583%" y="127.50"></text></g><g><title>coherence_checking (1,774,990 samples, 2.40%)</title><rect x="35.4916%" y="165" width="2.4015%" height="15" fill="rgb(240,54,50)"/><text x="35.7416%" y="175.50">co..</text></g><g><title>adt_def (107,443 samples, 0.15%)</title><rect x="61.1401%" y="101" width="0.1454%" height="15" fill="rgb(233,84,52)"/><text x="61.3901%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (104,393 samples, 0.14%)</title><rect x="61.1442%" y="85" width="0.1412%" height="15" fill="rgb(207,117,47)"/><text x="61.3942%" y="95.50"></text></g><g><title>adt_sized_constraint (137,393 samples, 0.19%)</title><rect x="61.1179%" y="117" width="0.1859%" height="15" fill="rgb(249,43,39)"/><text x="61.3679%" y="127.50"></text></g><g><title>associated_item (489,285 samples, 0.66%)</title><rect x="61.4726%" y="101" width="0.6620%" height="15" fill="rgb(209,38,44)"/><text x="61.7226%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (413,675 samples, 0.56%)</title><rect x="61.5749%" y="85" width="0.5597%" height="15" fill="rgb(236,212,23)"/><text x="61.8249%" y="95.50"></text></g><g><title>associated_items (637,017 samples, 0.86%)</title><rect x="61.3128%" y="117" width="0.8619%" height="15" fill="rgb(242,79,21)"/><text x="61.5628%" y="127.50"></text></g><g><title>adt_dtorck_constraint (106,941 samples, 0.14%)</title><rect x="62.8483%" y="69" width="0.1447%" height="15" fill="rgb(211,96,35)"/><text x="63.0983%" y="79.50"></text></g><g><title>adt_dtorck_constraint (165,682 samples, 0.22%)</title><rect x="62.7858%" y="85" width="0.2242%" height="15" fill="rgb(253,215,40)"/><text x="63.0358%" y="95.50"></text></g><g><title>adt_dtorck_constraint (332,113 samples, 0.45%)</title><rect x="62.6070%" y="101" width="0.4493%" height="15" fill="rgb(211,81,21)"/><text x="62.8570%" y="111.50"></text></g><g><title>dropck_outlives (644,948 samples, 0.87%)</title><rect x="62.2629%" y="117" width="0.8726%" height="15" fill="rgb(208,190,38)"/><text x="62.5129%" y="127.50"></text></g><g><title>adt_def (164,170 samples, 0.22%)</title><rect x="64.5612%" y="85" width="0.2221%" height="15" fill="rgb(235,213,38)"/><text x="64.8112%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (160,930 samples, 0.22%)</title><rect x="64.5655%" y="69" width="0.2177%" height="15" fill="rgb(237,122,38)"/><text x="64.8155%" y="79.50"></text></g><g><title>item_attrs (121,110 samples, 0.16%)</title><rect x="64.6194%" y="53" width="0.1639%" height="15" fill="rgb(244,218,35)"/><text x="64.8694%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (117,140 samples, 0.16%)</title><rect x="64.6248%" y="37" width="0.1585%" height="15" fill="rgb(240,68,47)"/><text x="64.8748%" y="47.50"></text></g><g><title>adt_sized_constraint (265,782 samples, 0.36%)</title><rect x="64.5356%" y="101" width="0.3596%" height="15" fill="rgb(210,16,53)"/><text x="64.7856%" y="111.50"></text></g><g><title>predicates_of (146,881 samples, 0.20%)</title><rect x="65.0658%" y="101" width="0.1987%" height="15" fill="rgb(235,124,12)"/><text x="65.3158%" y="111.50"></text></g><g><title>predicates_defined_on (80,831 samples, 0.11%)</title><rect x="65.1552%" y="85" width="0.1094%" height="15" fill="rgb(224,169,11)"/><text x="65.4052%" y="95.50"></text></g><g><title>specializes (89,701 samples, 0.12%)</title><rect x="65.2646%" y="101" width="0.1214%" height="15" fill="rgb(250,166,2)"/><text x="65.5146%" y="111.50"></text></g><g><title>param_env (80,141 samples, 0.11%)</title><rect x="65.2775%" y="85" width="0.1084%" height="15" fill="rgb(242,216,29)"/><text x="65.5275%" y="95.50"></text></g><g><title>evaluate_obligation (2,236,885 samples, 3.03%)</title><rect x="63.1355%" y="117" width="3.0264%" height="15" fill="rgb(230,116,27)"/><text x="63.3855%" y="127.50">eva..</text></g><g><title>trait_impls_of (564,718 samples, 0.76%)</title><rect x="65.3979%" y="101" width="0.7640%" height="15" fill="rgb(228,99,48)"/><text x="65.6479%" y="111.50"></text></g><g><title>implementations_of_trait (184,981 samples, 0.25%)</title><rect x="65.9116%" y="85" width="0.2503%" height="15" fill="rgb(253,11,6)"/><text x="66.1616%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (122,831 samples, 0.17%)</title><rect x="65.9957%" y="69" width="0.1662%" height="15" fill="rgb(247,143,39)"/><text x="66.2457%" y="79.50"></text></g><g><title>fn_sig (111,412 samples, 0.15%)</title><rect x="66.2057%" y="117" width="0.1507%" height="15" fill="rgb(236,97,10)"/><text x="66.4557%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (99,191 samples, 0.13%)</title><rect x="66.2222%" y="101" width="0.1342%" height="15" fill="rgb(233,208,19)"/><text x="66.4722%" y="111.50"></text></g><g><title>generics_of (129,771 samples, 0.18%)</title><rect x="66.3564%" y="117" width="0.1756%" height="15" fill="rgb(216,164,2)"/><text x="66.6064%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (92,551 samples, 0.13%)</title><rect x="66.4068%" y="101" width="0.1252%" height="15" fill="rgb(220,129,5)"/><text x="66.6568%" y="111.50"></text></g><g><title>impl_item_implementor_ids (86,741 samples, 0.12%)</title><rect x="66.5320%" y="117" width="0.1174%" height="15" fill="rgb(242,17,10)"/><text x="66.7820%" y="127.50"></text></g><g><title>associated_items (76,011 samples, 0.10%)</title><rect x="66.5465%" y="101" width="0.1028%" height="15" fill="rgb(242,107,0)"/><text x="66.7965%" y="111.50"></text></g><g><title>item_attrs (102,151 samples, 0.14%)</title><rect x="66.7494%" y="117" width="0.1382%" height="15" fill="rgb(251,28,31)"/><text x="66.9994%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,151 samples, 0.13%)</title><rect x="66.7575%" y="101" width="0.1301%" height="15" fill="rgb(233,223,10)"/><text x="67.0075%" y="111.50"></text></g><g><title>evaluate_obligation (206,484 samples, 0.28%)</title><rect x="67.1694%" y="101" width="0.2794%" height="15" fill="rgb(215,21,27)"/><text x="67.4194%" y="111.50"></text></g><g><title>method_autoderef_steps (367,156 samples, 0.50%)</title><rect x="66.9744%" y="117" width="0.4968%" height="15" fill="rgb(232,23,21)"/><text x="67.2244%" y="127.50"></text></g><g><title>explicit_predicates_of (178,364 samples, 0.24%)</title><rect x="67.7767%" y="85" width="0.2413%" height="15" fill="rgb(244,5,23)"/><text x="68.0267%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (149,684 samples, 0.20%)</title><rect x="67.8155%" y="69" width="0.2025%" height="15" fill="rgb(226,81,46)"/><text x="68.0655%" y="79.50"></text></g><g><title>predicates_of (435,875 samples, 0.59%)</title><rect x="67.5016%" y="117" width="0.5897%" height="15" fill="rgb(247,70,30)"/><text x="67.7516%" y="127.50"></text></g><g><title>predicates_defined_on (311,794 samples, 0.42%)</title><rect x="67.6695%" y="101" width="0.4218%" height="15" fill="rgb(212,68,19)"/><text x="67.9195%" y="111.50"></text></g><g><title>type_of (91,821 samples, 0.12%)</title><rect x="68.1083%" y="117" width="0.1242%" height="15" fill="rgb(240,187,13)"/><text x="68.3583%" y="127.50"></text></g><g><title>item_bodies_checking (22,461,601 samples, 30.39%)</title><rect x="37.9136%" y="165" width="30.3899%" height="15" fill="rgb(223,113,26)"/><text x="38.1636%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,458,501 samples, 30.39%)</title><rect x="37.9178%" y="149" width="30.3857%" height="15" fill="rgb(206,192,2)"/><text x="38.1678%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (22,437,871 samples, 30.36%)</title><rect x="37.9457%" y="133" width="30.3578%" height="15" fill="rgb(241,108,4)"/><text x="38.1957%" y="143.50">typeck</text></g><g><title>impl_trait_ref (195,022 samples, 0.26%)</title><rect x="68.6654%" y="85" width="0.2639%" height="15" fill="rgb(247,173,49)"/><text x="68.9154%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (172,142 samples, 0.23%)</title><rect x="68.6964%" y="69" width="0.2329%" height="15" fill="rgb(224,114,35)"/><text x="68.9464%" y="79.50"></text></g><g><title>adt_destructor (393,824 samples, 0.53%)</title><rect x="68.4439%" y="133" width="0.5328%" height="15" fill="rgb(245,159,27)"/><text x="68.6939%" y="143.50"></text></g><g><title>coherent_trait (389,554 samples, 0.53%)</title><rect x="68.4497%" y="117" width="0.5271%" height="15" fill="rgb(245,172,44)"/><text x="68.6997%" y="127.50"></text></g><g><title>specialization_graph_of (388,114 samples, 0.53%)</title><rect x="68.4516%" y="101" width="0.5251%" height="15" fill="rgb(236,23,11)"/><text x="68.7016%" y="111.50"></text></g><g><title>item_types_checking (632,197 samples, 0.86%)</title><rect x="68.3035%" y="165" width="0.8553%" height="15" fill="rgb(205,117,38)"/><text x="68.5535%" y="175.50"></text></g><g><title>check_mod_item_types (629,647 samples, 0.85%)</title><rect x="68.3069%" y="149" width="0.8519%" height="15" fill="rgb(237,72,25)"/><text x="68.5569%" y="159.50"></text></g><g><title>typeck (87,760 samples, 0.12%)</title><rect x="69.0401%" y="133" width="0.1187%" height="15" fill="rgb(244,70,9)"/><text x="69.2901%" y="143.50"></text></g><g><title>is_late_bound_map (290,983 samples, 0.39%)</title><rect x="69.4612%" y="117" width="0.3937%" height="15" fill="rgb(217,125,39)"/><text x="69.7112%" y="127.50"></text></g><g><title>resolve_lifetimes (276,413 samples, 0.37%)</title><rect x="69.4809%" y="101" width="0.3740%" height="15" fill="rgb(235,36,10)"/><text x="69.7309%" y="111.50"></text></g><g><title>lint_levels (136,681 samples, 0.18%)</title><rect x="69.6700%" y="85" width="0.1849%" height="15" fill="rgb(251,123,47)"/><text x="69.9200%" y="95.50"></text></g><g><title>generics_of (394,605 samples, 0.53%)</title><rect x="69.3948%" y="133" width="0.5339%" height="15" fill="rgb(221,13,13)"/><text x="69.6448%" y="143.50"></text></g><g><title>explicit_predicates_of (105,192 samples, 0.14%)</title><rect x="69.9920%" y="101" width="0.1423%" height="15" fill="rgb(238,131,9)"/><text x="70.2420%" y="111.50"></text></g><g><title>predicates_of (300,124 samples, 0.41%)</title><rect x="69.9462%" y="133" width="0.4061%" height="15" fill="rgb(211,50,8)"/><text x="70.1962%" y="143.50"></text></g><g><title>predicates_defined_on (287,924 samples, 0.39%)</title><rect x="69.9627%" y="117" width="0.3896%" height="15" fill="rgb(245,182,24)"/><text x="70.2127%" y="127.50"></text></g><g><title>inferred_outlives_of (161,082 samples, 0.22%)</title><rect x="70.1343%" y="101" width="0.2179%" height="15" fill="rgb(242,14,37)"/><text x="70.3843%" y="111.50"></text></g><g><title>inferred_outlives_crate (149,762 samples, 0.20%)</title><rect x="70.1496%" y="85" width="0.2026%" height="15" fill="rgb(246,228,12)"/><text x="70.3996%" y="95.50"></text></g><g><title>type_collecting (949,130 samples, 1.28%)</title><rect x="69.1610%" y="165" width="1.2841%" height="15" fill="rgb(213,55,15)"/><text x="69.4110%" y="175.50"></text></g><g><title>collect_mod_item_types (941,830 samples, 1.27%)</title><rect x="69.1709%" y="149" width="1.2743%" height="15" fill="rgb(209,9,3)"/><text x="69.4209%" y="159.50"></text></g><g><title>evaluate_obligation (167,012 samples, 0.23%)</title><rect x="71.0263%" y="133" width="0.2260%" height="15" fill="rgb(230,59,30)"/><text x="71.2763%" y="143.50"></text></g><g><title>check_impl_item_well_formed (768,548 samples, 1.04%)</title><rect x="70.5274%" y="149" width="1.0398%" height="15" fill="rgb(209,121,21)"/><text x="70.7774%" y="159.50"></text></g><g><title>evaluate_obligation (92,770 samples, 0.13%)</title><rect x="72.2960%" y="133" width="0.1255%" height="15" fill="rgb(220,109,13)"/><text x="72.5460%" y="143.50"></text></g><g><title>implied_outlives_bounds (102,011 samples, 0.14%)</title><rect x="72.4245%" y="133" width="0.1380%" height="15" fill="rgb(232,18,1)"/><text x="72.6745%" y="143.50"></text></g><g><title>param_env (167,182 samples, 0.23%)</title><rect x="72.5625%" y="133" width="0.2262%" height="15" fill="rgb(215,41,42)"/><text x="72.8125%" y="143.50"></text></g><g><title>region_scope_tree (99,270 samples, 0.13%)</title><rect x="72.8343%" y="133" width="0.1343%" height="15" fill="rgb(224,123,36)"/><text x="73.0843%" y="143.50"></text></g><g><title>trait_impls_of (182,462 samples, 0.25%)</title><rect x="72.9711%" y="133" width="0.2469%" height="15" fill="rgb(240,125,3)"/><text x="73.2211%" y="143.50"></text></g><g><title>analysis (53,576,639 samples, 72.49%)</title><rect x="0.7880%" y="197" width="72.4877%" height="15" fill="rgb(205,98,50)"/><text x="1.0380%" y="207.50">analysis</text></g><g><title>type_check_crate (27,963,122 samples, 37.83%)</title><rect x="35.4423%" y="181" width="37.8333%" height="15" fill="rgb(205,185,37)"/><text x="35.6923%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,090,763 samples, 2.83%)</title><rect x="70.4469%" y="165" width="2.8287%" height="15" fill="rgb(238,207,15)"/><text x="70.6969%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,262,735 samples, 1.71%)</title><rect x="71.5672%" y="149" width="1.7084%" height="15" fill="rgb(213,199,42)"/><text x="71.8172%" y="159.50"></text></g><g><title>codegen_crate (384,274 samples, 0.52%)</title><rect x="73.2878%" y="197" width="0.5199%" height="15" fill="rgb(235,201,11)"/><text x="73.5378%" y="207.50"></text></g><g><title>metadata_load_macro (147,950 samples, 0.20%)</title><rect x="86.2360%" y="149" width="0.2002%" height="15" fill="rgb(207,46,11)"/><text x="86.4860%" y="159.50"></text></g><g><title>metadata_register_crate (1,293,104 samples, 1.75%)</title><rect x="86.4362%" y="149" width="1.7495%" height="15" fill="rgb(241,35,35)"/><text x="86.6862%" y="159.50"></text></g><g><title>metadata_register_crate (475,836 samples, 0.64%)</title><rect x="87.5420%" y="133" width="0.6438%" height="15" fill="rgb(243,32,47)"/><text x="87.7920%" y="143.50"></text></g><g><title>macro_expand_crate (10,347,766 samples, 14.00%)</title><rect x="74.2719%" y="181" width="14.0002%" height="15" fill="rgb(247,202,23)"/><text x="74.5219%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (10,335,206 samples, 13.98%)</title><rect x="74.2889%" y="165" width="13.9832%" height="15" fill="rgb(219,102,11)"/><text x="74.5389%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (145,432 samples, 0.20%)</title><rect x="88.2763%" y="181" width="0.1968%" height="15" fill="rgb(243,110,44)"/><text x="88.5263%" y="191.50"></text></g><g><title>late_resolve_crate (745,288 samples, 1.01%)</title><rect x="88.5746%" y="165" width="1.0084%" height="15" fill="rgb(222,74,54)"/><text x="88.8246%" y="175.50"></text></g><g><title>configure_and_expand (11,712,671 samples, 15.85%)</title><rect x="73.8077%" y="197" width="15.8469%" height="15" fill="rgb(216,99,12)"/><text x="74.0577%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (873,300 samples, 1.18%)</title><rect x="88.4731%" y="181" width="1.1816%" height="15" fill="rgb(226,22,26)"/><text x="88.7231%" y="191.50"></text></g><g><title>drop_ast (90,681 samples, 0.12%)</title><rect x="89.6546%" y="197" width="0.1227%" height="15" fill="rgb(217,163,10)"/><text x="89.9046%" y="207.50"></text></g><g><title>early_lint_checks (196,622 samples, 0.27%)</title><rect x="89.7987%" y="197" width="0.2660%" height="15" fill="rgb(213,25,53)"/><text x="90.0487%" y="207.50"></text></g><g><title>free_global_ctxt (2,956,043 samples, 4.00%)</title><rect x="90.0647%" y="197" width="3.9994%" height="15" fill="rgb(252,105,26)"/><text x="90.3147%" y="207.50">free..</text></g><g><title>generate_crate_metadata (570,406 samples, 0.77%)</title><rect x="94.0642%" y="197" width="0.7717%" height="15" fill="rgb(220,39,43)"/><text x="94.3142%" y="207.50"></text></g><g><title>hir_lowering (1,506,947 samples, 2.04%)</title><rect x="94.8359%" y="197" width="2.0389%" height="15" fill="rgb(229,68,48)"/><text x="95.0859%" y="207.50">h..</text></g><g><title>parse_crate (1,194,563 samples, 1.62%)</title><rect x="96.9377%" y="197" width="1.6162%" height="15" fill="rgb(252,8,32)"/><text x="97.1877%" y="207.50"></text></g><g><title>prepare_outputs (159,722 samples, 0.22%)</title><rect x="98.5626%" y="197" width="0.2161%" height="15" fill="rgb(223,20,43)"/><text x="98.8126%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (492,226 samples, 0.67%)</title><rect x="98.7787%" y="197" width="0.6660%" height="15" fill="rgb(229,81,49)"/><text x="99.0287%" y="207.50"></text></g><g><title>setup_global_ctxt (89,371 samples, 0.12%)</title><rect x="99.4594%" y="197" width="0.1209%" height="15" fill="rgb(236,28,36)"/><text x="99.7094%" y="207.50"></text></g><g><title>all (73,911,387 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (73,911,387 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (310,203 samples, 0.42%)</title><rect x="99.5803%" y="197" width="0.4197%" height="15" fill="rgb(233,201,37)"/><text x="99.8303%" y="207.50"></text></g></svg></svg>