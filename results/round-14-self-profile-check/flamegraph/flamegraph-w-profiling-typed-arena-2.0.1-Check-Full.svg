<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (304,423 samples, 0.34%)</title><rect x="9.7804%" y="117" width="0.3373%" height="15" fill="rgb(227,0,7)"/><text x="10.0304%" y="127.50"></text></g><g><title>item_attrs (316,334 samples, 0.35%)</title><rect x="10.4979%" y="85" width="0.3505%" height="15" fill="rgb(217,0,24)"/><text x="10.7479%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (307,524 samples, 0.34%)</title><rect x="10.5077%" y="69" width="0.3407%" height="15" fill="rgb(221,193,54)"/><text x="10.7577%" y="79.50"></text></g><g><title>codegen_fn_attrs (415,845 samples, 0.46%)</title><rect x="10.4010%" y="101" width="0.4607%" height="15" fill="rgb(248,212,6)"/><text x="10.6510%" y="111.50"></text></g><g><title>is_copy_raw (101,811 samples, 0.11%)</title><rect x="12.5597%" y="53" width="0.1128%" height="15" fill="rgb(208,68,35)"/><text x="12.8097%" y="63.50"></text></g><g><title>adt_drop_tys (254,383 samples, 0.28%)</title><rect x="12.4785%" y="69" width="0.2818%" height="15" fill="rgb(232,128,0)"/><text x="12.7285%" y="79.50"></text></g><g><title>needs_drop_raw (699,128 samples, 0.77%)</title><rect x="12.3998%" y="85" width="0.7745%" height="15" fill="rgb(207,160,47)"/><text x="12.6498%" y="95.50"></text></g><g><title>is_copy_raw (373,684 samples, 0.41%)</title><rect x="12.7604%" y="69" width="0.4140%" height="15" fill="rgb(228,23,34)"/><text x="13.0104%" y="79.50"></text></g><g><title>evaluate_obligation (297,584 samples, 0.33%)</title><rect x="12.8447%" y="53" width="0.3297%" height="15" fill="rgb(218,30,26)"/><text x="13.0947%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (164,284 samples, 0.18%)</title><rect x="13.3352%" y="69" width="0.1820%" height="15" fill="rgb(220,122,19)"/><text x="13.5852%" y="79.50"></text></g><g><title>specialization_graph_of (307,613 samples, 0.34%)</title><rect x="13.5500%" y="69" width="0.3408%" height="15" fill="rgb(250,228,42)"/><text x="13.8000%" y="79.50"></text></g><g><title>impl_trait_ref (147,622 samples, 0.16%)</title><rect x="13.7272%" y="53" width="0.1635%" height="15" fill="rgb(240,193,28)"/><text x="13.9772%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (128,032 samples, 0.14%)</title><rect x="13.7489%" y="37" width="0.1418%" height="15" fill="rgb(216,20,37)"/><text x="13.9989%" y="47.50"></text></g><g><title>resolve_instance (734,469 samples, 0.81%)</title><rect x="13.1743%" y="85" width="0.8137%" height="15" fill="rgb(206,188,39)"/><text x="13.4243%" y="95.50"></text></g><g><title>thir_body (545,305 samples, 0.60%)</title><rect x="13.9996%" y="85" width="0.6041%" height="15" fill="rgb(217,207,13)"/><text x="14.2496%" y="95.50"></text></g><g><title>mir_const (4,808,915 samples, 5.33%)</title><rect x="9.2892%" y="133" width="5.3276%" height="15" fill="rgb(231,73,38)"/><text x="9.5392%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (4,061,155 samples, 4.50%)</title><rect x="10.1176%" y="117" width="4.4992%" height="15" fill="rgb(225,20,46)"/><text x="10.3676%" y="127.50">unsaf..</text></g><g><title>mir_built (3,389,548 samples, 3.76%)</title><rect x="10.8617%" y="101" width="3.7552%" height="15" fill="rgb(210,31,41)"/><text x="11.1117%" y="111.50">mir_..</text></g><g><title>mir_promoted (5,402,940 samples, 5.99%)</title><rect x="8.8556%" y="149" width="5.9857%" height="15" fill="rgb(221,200,47)"/><text x="9.1056%" y="159.50">mir_prom..</text></g><g><title>mir_const_qualif (202,652 samples, 0.22%)</title><rect x="14.6168%" y="133" width="0.2245%" height="15" fill="rgb(226,26,5)"/><text x="14.8668%" y="143.50"></text></g><g><title>mir_const (146,022 samples, 0.16%)</title><rect x="14.6796%" y="117" width="0.1618%" height="15" fill="rgb(249,33,26)"/><text x="14.9296%" y="127.50"></text></g><g><title>unsafety_check_result (99,861 samples, 0.11%)</title><rect x="14.7307%" y="101" width="0.1106%" height="15" fill="rgb(235,183,28)"/><text x="14.9807%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (169,542 samples, 0.19%)</title><rect x="14.8413%" y="149" width="0.1878%" height="15" fill="rgb(221,5,38)"/><text x="15.0913%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (544,806 samples, 0.60%)</title><rect x="15.0292%" y="149" width="0.6036%" height="15" fill="rgb(247,18,42)"/><text x="15.2792%" y="159.50"></text></g><g><title>normalize_projection_ty (343,911 samples, 0.38%)</title><rect x="15.2517%" y="133" width="0.3810%" height="15" fill="rgb(241,131,45)"/><text x="15.5017%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,500,946 samples, 1.66%)</title><rect x="15.7065%" y="149" width="1.6628%" height="15" fill="rgb(249,31,29)"/><text x="15.9565%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,715,623 samples, 16.30%)</title><rect x="1.0766%" y="181" width="16.3029%" height="15" fill="rgb(225,111,53)"/><text x="1.3266%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,673,922 samples, 16.26%)</title><rect x="1.1228%" y="165" width="16.2567%" height="15" fill="rgb(238,160,17)"/><text x="1.3728%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (121,042 samples, 0.13%)</title><rect x="17.3795%" y="181" width="0.1341%" height="15" fill="rgb(214,148,48)"/><text x="17.6295%" y="191.50"></text></g><g><title>hir_module_items (165,692 samples, 0.18%)</title><rect x="17.5136%" y="181" width="0.1836%" height="15" fill="rgb(232,36,49)"/><text x="17.7636%" y="191.50"></text></g><g><title>get_lang_items (109,482 samples, 0.12%)</title><rect x="18.0627%" y="133" width="0.1213%" height="15" fill="rgb(209,103,24)"/><text x="18.3127%" y="143.50"></text></g><g><title>codegen_fn_attrs (96,831 samples, 0.11%)</title><rect x="18.2800%" y="117" width="0.1073%" height="15" fill="rgb(229,88,8)"/><text x="18.5300%" y="127.50"></text></g><g><title>should_inherit_track_caller (188,533 samples, 0.21%)</title><rect x="18.1840%" y="133" width="0.2089%" height="15" fill="rgb(213,181,19)"/><text x="18.4340%" y="143.50"></text></g><g><title>codegen_fn_attrs (418,925 samples, 0.46%)</title><rect x="17.9619%" y="149" width="0.4641%" height="15" fill="rgb(254,191,54)"/><text x="18.2119%" y="159.50"></text></g><g><title>check_mod_attrs (628,377 samples, 0.70%)</title><rect x="17.7303%" y="165" width="0.6962%" height="15" fill="rgb(241,83,37)"/><text x="17.9803%" y="175.50"></text></g><g><title>check_mod_const_bodies (92,631 samples, 0.10%)</title><rect x="18.4264%" y="165" width="0.1026%" height="15" fill="rgb(233,36,39)"/><text x="18.6764%" y="175.50"></text></g><g><title>lookup_deprecation_entry (138,952 samples, 0.15%)</title><rect x="18.7699%" y="149" width="0.1539%" height="15" fill="rgb(226,3,54)"/><text x="19.0199%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (410,014 samples, 0.45%)</title><rect x="18.6004%" y="165" width="0.4542%" height="15" fill="rgb(245,192,40)"/><text x="18.8504%" y="175.50"></text></g><g><title>misc_checking_1 (1,263,364 samples, 1.40%)</title><rect x="17.6978%" y="181" width="1.3996%" height="15" fill="rgb(238,167,29)"/><text x="17.9478%" y="191.50"></text></g><g><title>check_mod_intrinsics (163,152 samples, 0.18%)</title><rect x="19.1038%" y="149" width="0.1807%" height="15" fill="rgb(232,182,51)"/><text x="19.3538%" y="159.50"></text></g><g><title>layout_of (107,552 samples, 0.12%)</title><rect x="19.1654%" y="133" width="0.1192%" height="15" fill="rgb(231,60,39)"/><text x="19.4154%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (399,964 samples, 0.44%)</title><rect x="19.0992%" y="165" width="0.4431%" height="15" fill="rgb(208,69,12)"/><text x="19.3492%" y="175.50"></text></g><g><title>check_mod_liveness (232,622 samples, 0.26%)</title><rect x="19.2845%" y="149" width="0.2577%" height="15" fill="rgb(235,93,37)"/><text x="19.5345%" y="159.50"></text></g><g><title>misc_checking_2 (664,537 samples, 0.74%)</title><rect x="19.0975%" y="181" width="0.7362%" height="15" fill="rgb(213,116,39)"/><text x="19.3475%" y="191.50"></text></g><g><title>match_checking (263,053 samples, 0.29%)</title><rect x="19.5423%" y="165" width="0.2914%" height="15" fill="rgb(222,207,29)"/><text x="19.7923%" y="175.50"></text></g><g><title>check_match (250,873 samples, 0.28%)</title><rect x="19.5558%" y="149" width="0.2779%" height="15" fill="rgb(206,96,30)"/><text x="19.8058%" y="159.50"></text></g><g><title>death_checking (125,561 samples, 0.14%)</title><rect x="19.9327%" y="165" width="0.1391%" height="15" fill="rgb(218,138,4)"/><text x="20.1827%" y="175.50"></text></g><g><title>eval_to_const_value_raw (159,582 samples, 0.18%)</title><rect x="20.6401%" y="133" width="0.1768%" height="15" fill="rgb(250,191,14)"/><text x="20.8901%" y="143.50"></text></g><g><title>eval_to_const_value_raw (150,572 samples, 0.17%)</title><rect x="20.6501%" y="117" width="0.1668%" height="15" fill="rgb(239,60,40)"/><text x="20.9001%" y="127.50"></text></g><g><title>eval_to_allocation_raw (144,492 samples, 0.16%)</title><rect x="20.6569%" y="101" width="0.1601%" height="15" fill="rgb(206,27,48)"/><text x="20.9069%" y="111.50"></text></g><g><title>trait_impls_of (215,933 samples, 0.24%)</title><rect x="20.8819%" y="133" width="0.2392%" height="15" fill="rgb(225,35,8)"/><text x="21.1319%" y="143.50"></text></g><g><title>crate_lints (3,026,683 samples, 3.35%)</title><rect x="20.0740%" y="149" width="3.3531%" height="15" fill="rgb(250,213,24)"/><text x="20.3240%" y="159.50">cra..</text></g><g><title>type_of (2,073,913 samples, 2.30%)</title><rect x="21.1296%" y="133" width="2.2976%" height="15" fill="rgb(247,123,22)"/><text x="21.3796%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (1,824,820 samples, 2.02%)</title><rect x="21.4055%" y="117" width="2.0216%" height="15" fill="rgb(231,138,38)"/><text x="21.6555%" y="127.50">m..</text></g><g><title>lint_checking (3,314,607 samples, 3.67%)</title><rect x="20.0718%" y="165" width="3.6721%" height="15" fill="rgb(231,145,46)"/><text x="20.3218%" y="175.50">lint..</text></g><g><title>module_lints (285,924 samples, 0.32%)</title><rect x="23.4272%" y="149" width="0.3168%" height="15" fill="rgb(251,118,11)"/><text x="23.6772%" y="159.50"></text></g><g><title>lint_mod (283,164 samples, 0.31%)</title><rect x="23.4303%" y="133" width="0.3137%" height="15" fill="rgb(217,147,25)"/><text x="23.6803%" y="143.50"></text></g><g><title>privacy_access_levels (98,961 samples, 0.11%)</title><rect x="23.7440%" y="165" width="0.1096%" height="15" fill="rgb(247,81,37)"/><text x="23.9940%" y="175.50"></text></g><g><title>privacy_checking_modules (362,034 samples, 0.40%)</title><rect x="23.8536%" y="165" width="0.4011%" height="15" fill="rgb(209,12,38)"/><text x="24.1036%" y="175.50"></text></g><g><title>check_mod_privacy (360,324 samples, 0.40%)</title><rect x="23.8555%" y="149" width="0.3992%" height="15" fill="rgb(227,1,9)"/><text x="24.1055%" y="159.50"></text></g><g><title>misc_checking_3 (4,000,564 samples, 4.43%)</title><rect x="19.8337%" y="181" width="4.4321%" height="15" fill="rgb(248,47,43)"/><text x="20.0837%" y="191.50">misc_..</text></g><g><title>impl_parent (632,820 samples, 0.70%)</title><rect x="25.3096%" y="117" width="0.7011%" height="15" fill="rgb(221,10,30)"/><text x="25.5596%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (419,306 samples, 0.46%)</title><rect x="25.5461%" y="101" width="0.4645%" height="15" fill="rgb(210,229,1)"/><text x="25.7961%" y="111.50"></text></g><g><title>impl_trait_ref (1,915,171 samples, 2.12%)</title><rect x="26.0107%" y="117" width="2.1217%" height="15" fill="rgb(222,148,37)"/><text x="26.2607%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,704,618 samples, 1.89%)</title><rect x="26.2439%" y="101" width="1.8885%" height="15" fill="rgb(234,67,33)"/><text x="26.4939%" y="111.50">m..</text></g><g><title>coherent_trait (3,652,100 samples, 4.05%)</title><rect x="24.3278%" y="149" width="4.0460%" height="15" fill="rgb(247,98,35)"/><text x="24.5778%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (3,641,740 samples, 4.03%)</title><rect x="24.3393%" y="133" width="4.0345%" height="15" fill="rgb(247,138,52)"/><text x="24.5893%" y="143.50">spec..</text></g><g><title>trait_impls_of (217,882 samples, 0.24%)</title><rect x="28.1324%" y="117" width="0.2414%" height="15" fill="rgb(213,79,30)"/><text x="28.3824%" y="127.50"></text></g><g><title>coherence_checking (3,725,842 samples, 4.13%)</title><rect x="24.3089%" y="165" width="4.1277%" height="15" fill="rgb(246,177,23)"/><text x="24.5589%" y="175.50">cohe..</text></g><g><title>adt_sized_constraint (159,371 samples, 0.18%)</title><rect x="43.5095%" y="117" width="0.1766%" height="15" fill="rgb(230,62,27)"/><text x="43.7595%" y="127.50"></text></g><g><title>associated_item (546,758 samples, 0.61%)</title><rect x="43.9527%" y="101" width="0.6057%" height="15" fill="rgb(216,154,8)"/><text x="44.2027%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (413,515 samples, 0.46%)</title><rect x="44.1003%" y="85" width="0.4581%" height="15" fill="rgb(244,35,45)"/><text x="44.3503%" y="95.50"></text></g><g><title>associated_items (818,029 samples, 0.91%)</title><rect x="43.6914%" y="117" width="0.9063%" height="15" fill="rgb(251,115,12)"/><text x="43.9414%" y="127.50"></text></g><g><title>adt_dtorck_constraint (158,902 samples, 0.18%)</title><rect x="44.9984%" y="69" width="0.1760%" height="15" fill="rgb(240,54,50)"/><text x="45.2484%" y="79.50"></text></g><g><title>adt_dtorck_constraint (257,292 samples, 0.29%)</title><rect x="44.9177%" y="85" width="0.2850%" height="15" fill="rgb(233,84,52)"/><text x="45.1677%" y="95.50"></text></g><g><title>adt_dtorck_constraint (345,952 samples, 0.38%)</title><rect x="44.8436%" y="101" width="0.3833%" height="15" fill="rgb(207,117,47)"/><text x="45.0936%" y="111.50"></text></g><g><title>dropck_outlives (497,184 samples, 0.55%)</title><rect x="44.6837%" y="117" width="0.5508%" height="15" fill="rgb(249,43,39)"/><text x="44.9337%" y="127.50"></text></g><g><title>generics_of (398,904 samples, 0.44%)</title><rect x="47.5823%" y="101" width="0.4419%" height="15" fill="rgb(209,38,44)"/><text x="47.8323%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (299,203 samples, 0.33%)</title><rect x="47.6927%" y="85" width="0.3315%" height="15" fill="rgb(236,212,23)"/><text x="47.9427%" y="95.50"></text></g><g><title>impl_trait_ref (642,085 samples, 0.71%)</title><rect x="48.1280%" y="101" width="0.7113%" height="15" fill="rgb(242,79,21)"/><text x="48.3780%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (542,344 samples, 0.60%)</title><rect x="48.2385%" y="85" width="0.6008%" height="15" fill="rgb(211,96,35)"/><text x="48.4885%" y="95.50"></text></g><g><title>predicates_of (594,340 samples, 0.66%)</title><rect x="48.8725%" y="101" width="0.6584%" height="15" fill="rgb(253,215,40)"/><text x="49.1225%" y="111.50"></text></g><g><title>predicates_defined_on (447,525 samples, 0.50%)</title><rect x="49.0351%" y="85" width="0.4958%" height="15" fill="rgb(211,81,21)"/><text x="49.2851%" y="95.50"></text></g><g><title>inferred_outlives_of (283,893 samples, 0.31%)</title><rect x="49.2164%" y="69" width="0.3145%" height="15" fill="rgb(208,190,38)"/><text x="49.4664%" y="79.50"></text></g><g><title>specializes (514,355 samples, 0.57%)</title><rect x="49.5309%" y="101" width="0.5698%" height="15" fill="rgb(235,213,38)"/><text x="49.7809%" y="111.50"></text></g><g><title>param_env (327,772 samples, 0.36%)</title><rect x="49.7376%" y="85" width="0.3631%" height="15" fill="rgb(237,122,38)"/><text x="49.9876%" y="95.50"></text></g><g><title>def_span (152,551 samples, 0.17%)</title><rect x="49.9318%" y="69" width="0.1690%" height="15" fill="rgb(244,218,35)"/><text x="50.1818%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (137,571 samples, 0.15%)</title><rect x="49.9484%" y="53" width="0.1524%" height="15" fill="rgb(240,68,47)"/><text x="50.1984%" y="63.50"></text></g><g><title>trait_impls_of (558,119 samples, 0.62%)</title><rect x="50.1176%" y="101" width="0.6183%" height="15" fill="rgb(210,16,53)"/><text x="50.3676%" y="111.50"></text></g><g><title>implementations_of_trait (211,634 samples, 0.23%)</title><rect x="50.5014%" y="85" width="0.2345%" height="15" fill="rgb(235,124,12)"/><text x="50.7514%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (134,673 samples, 0.15%)</title><rect x="50.5867%" y="69" width="0.1492%" height="15" fill="rgb(224,169,11)"/><text x="50.8367%" y="79.50"></text></g><g><title>evaluate_obligation (4,978,391 samples, 5.52%)</title><rect x="45.2345%" y="117" width="5.5154%" height="15" fill="rgb(250,166,2)"/><text x="45.4845%" y="127.50">evaluat..</text></g><g><title>fn_sig (158,232 samples, 0.18%)</title><rect x="50.7834%" y="117" width="0.1753%" height="15" fill="rgb(242,216,29)"/><text x="51.0334%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (137,182 samples, 0.15%)</title><rect x="50.8068%" y="101" width="0.1520%" height="15" fill="rgb(230,116,27)"/><text x="51.0568%" y="111.50"></text></g><g><title>generics_of (799,900 samples, 0.89%)</title><rect x="50.9587%" y="117" width="0.8862%" height="15" fill="rgb(228,99,48)"/><text x="51.2087%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (636,868 samples, 0.71%)</title><rect x="51.1394%" y="101" width="0.7056%" height="15" fill="rgb(253,11,6)"/><text x="51.3894%" y="111.50"></text></g><g><title>associated_item (93,232 samples, 0.10%)</title><rect x="51.9247%" y="85" width="0.1033%" height="15" fill="rgb(247,143,39)"/><text x="52.1747%" y="95.50"></text></g><g><title>impl_item_implementor_ids (176,853 samples, 0.20%)</title><rect x="51.8449%" y="117" width="0.1959%" height="15" fill="rgb(236,97,10)"/><text x="52.0949%" y="127.50"></text></g><g><title>associated_items (155,122 samples, 0.17%)</title><rect x="51.8690%" y="101" width="0.1719%" height="15" fill="rgb(233,208,19)"/><text x="52.1190%" y="111.50"></text></g><g><title>impl_trait_ref (772,550 samples, 0.86%)</title><rect x="52.0644%" y="117" width="0.8559%" height="15" fill="rgb(216,164,2)"/><text x="52.3144%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (660,230 samples, 0.73%)</title><rect x="52.1888%" y="101" width="0.7314%" height="15" fill="rgb(220,129,5)"/><text x="52.4388%" y="111.50"></text></g><g><title>item_attrs (302,195 samples, 0.33%)</title><rect x="52.9534%" y="117" width="0.3348%" height="15" fill="rgb(242,17,10)"/><text x="53.2034%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (293,035 samples, 0.32%)</title><rect x="52.9636%" y="101" width="0.3246%" height="15" fill="rgb(242,107,0)"/><text x="53.2136%" y="111.50"></text></g><g><title>evaluate_obligation (290,866 samples, 0.32%)</title><rect x="53.6674%" y="101" width="0.3222%" height="15" fill="rgb(251,28,31)"/><text x="53.9174%" y="111.50"></text></g><g><title>method_autoderef_steps (575,851 samples, 0.64%)</title><rect x="53.3640%" y="117" width="0.6380%" height="15" fill="rgb(233,223,10)"/><text x="53.6140%" y="127.50"></text></g><g><title>explicit_predicates_of (148,234 samples, 0.16%)</title><rect x="54.3498%" y="85" width="0.1642%" height="15" fill="rgb(215,21,27)"/><text x="54.5998%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (108,653 samples, 0.12%)</title><rect x="54.3936%" y="69" width="0.1204%" height="15" fill="rgb(232,23,21)"/><text x="54.6436%" y="79.50"></text></g><g><title>predicates_of (501,838 samples, 0.56%)</title><rect x="54.0406%" y="117" width="0.5560%" height="15" fill="rgb(244,5,23)"/><text x="54.2906%" y="127.50"></text></g><g><title>predicates_defined_on (328,796 samples, 0.36%)</title><rect x="54.2323%" y="101" width="0.3643%" height="15" fill="rgb(226,81,46)"/><text x="54.4823%" y="111.50"></text></g><g><title>specializes (160,352 samples, 0.18%)</title><rect x="54.5966%" y="117" width="0.1776%" height="15" fill="rgb(247,70,30)"/><text x="54.8466%" y="127.50"></text></g><g><title>trait_impls_of (95,691 samples, 0.11%)</title><rect x="54.7841%" y="117" width="0.1060%" height="15" fill="rgb(212,68,19)"/><text x="55.0341%" y="127.50"></text></g><g><title>evaluate_obligation (380,486 samples, 0.42%)</title><rect x="58.0838%" y="101" width="0.4215%" height="15" fill="rgb(240,187,13)"/><text x="58.3338%" y="111.50"></text></g><g><title>is_copy_raw (180,571 samples, 0.20%)</title><rect x="58.6154%" y="101" width="0.2000%" height="15" fill="rgb(223,113,26)"/><text x="58.8654%" y="111.50"></text></g><g><title>evaluate_obligation (167,571 samples, 0.19%)</title><rect x="58.6298%" y="85" width="0.1856%" height="15" fill="rgb(206,192,2)"/><text x="58.8798%" y="95.50"></text></g><g><title>trait_impls_of (134,301 samples, 0.15%)</title><rect x="58.6667%" y="69" width="0.1488%" height="15" fill="rgb(241,108,4)"/><text x="58.9167%" y="79.50"></text></g><g><title>method_autoderef_steps (131,571 samples, 0.15%)</title><rect x="58.8291%" y="101" width="0.1458%" height="15" fill="rgb(247,173,49)"/><text x="59.0791%" y="111.50"></text></g><g><title>typeck (3,699,449 samples, 4.10%)</title><rect x="54.9828%" y="117" width="4.0985%" height="15" fill="rgb(224,114,35)"/><text x="55.2328%" y="127.50">type..</text></g><g><title>item_bodies_checking (27,659,567 samples, 30.64%)</title><rect x="28.4709%" y="165" width="30.6430%" height="15" fill="rgb(245,159,27)"/><text x="28.7209%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (27,656,207 samples, 30.64%)</title><rect x="28.4746%" y="149" width="30.6393%" height="15" fill="rgb(245,172,44)"/><text x="28.7246%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (27,625,817 samples, 30.61%)</title><rect x="28.5083%" y="133" width="30.6056%" height="15" fill="rgb(236,23,11)"/><text x="28.7583%" y="143.50">typeck</text></g><g><title>impl_parent (96,162 samples, 0.11%)</title><rect x="59.8950%" y="85" width="0.1065%" height="15" fill="rgb(205,117,38)"/><text x="60.1450%" y="95.50"></text></g><g><title>impl_trait_ref (731,749 samples, 0.81%)</title><rect x="60.0016%" y="85" width="0.8107%" height="15" fill="rgb(237,72,25)"/><text x="60.2516%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (687,318 samples, 0.76%)</title><rect x="60.0508%" y="69" width="0.7615%" height="15" fill="rgb(244,70,9)"/><text x="60.3008%" y="79.50"></text></g><g><title>adt_destructor (1,052,052 samples, 1.17%)</title><rect x="59.7019%" y="133" width="1.1655%" height="15" fill="rgb(217,125,39)"/><text x="59.9519%" y="143.50"></text></g><g><title>coherent_trait (1,045,752 samples, 1.16%)</title><rect x="59.7089%" y="117" width="1.1585%" height="15" fill="rgb(235,36,10)"/><text x="59.9589%" y="127.50"></text></g><g><title>specialization_graph_of (1,042,862 samples, 1.16%)</title><rect x="59.7121%" y="101" width="1.1553%" height="15" fill="rgb(251,123,47)"/><text x="59.9621%" y="111.50"></text></g><g><title>item_types_checking (1,953,622 samples, 2.16%)</title><rect x="59.1139%" y="165" width="2.1643%" height="15" fill="rgb(221,13,13)"/><text x="59.3639%" y="175.50">i..</text></g><g><title>check_mod_item_types (1,949,042 samples, 2.16%)</title><rect x="59.1190%" y="149" width="2.1593%" height="15" fill="rgb(238,131,9)"/><text x="59.3690%" y="159.50">c..</text></g><g><title>typeck (158,602 samples, 0.18%)</title><rect x="61.1025%" y="133" width="0.1757%" height="15" fill="rgb(211,50,8)"/><text x="61.3525%" y="143.50"></text></g><g><title>late_bound_vars_map (322,683 samples, 0.36%)</title><rect x="61.6439%" y="117" width="0.3575%" height="15" fill="rgb(245,182,24)"/><text x="61.8939%" y="127.50"></text></g><g><title>resolve_lifetimes (312,573 samples, 0.35%)</title><rect x="61.6551%" y="101" width="0.3463%" height="15" fill="rgb(242,14,37)"/><text x="61.9051%" y="111.50"></text></g><g><title>lint_levels (124,871 samples, 0.14%)</title><rect x="61.8631%" y="85" width="0.1383%" height="15" fill="rgb(246,228,12)"/><text x="62.1131%" y="95.50"></text></g><g><title>fn_sig (483,306 samples, 0.54%)</title><rect x="61.5187%" y="133" width="0.5354%" height="15" fill="rgb(213,55,15)"/><text x="61.7687%" y="143.50"></text></g><g><title>generics_of (208,704 samples, 0.23%)</title><rect x="62.0542%" y="133" width="0.2312%" height="15" fill="rgb(209,9,3)"/><text x="62.3042%" y="143.50"></text></g><g><title>explicit_predicates_of (164,282 samples, 0.18%)</title><rect x="62.4132%" y="101" width="0.1820%" height="15" fill="rgb(230,59,30)"/><text x="62.6632%" y="111.50"></text></g><g><title>predicates_of (702,788 samples, 0.78%)</title><rect x="62.3107%" y="133" width="0.7786%" height="15" fill="rgb(209,121,21)"/><text x="62.5607%" y="143.50"></text></g><g><title>predicates_defined_on (663,338 samples, 0.73%)</title><rect x="62.3544%" y="117" width="0.7349%" height="15" fill="rgb(220,109,13)"/><text x="62.6044%" y="127.50"></text></g><g><title>inferred_outlives_of (445,996 samples, 0.49%)</title><rect x="62.5952%" y="101" width="0.4941%" height="15" fill="rgb(232,18,1)"/><text x="62.8452%" y="111.50"></text></g><g><title>inferred_outlives_crate (424,655 samples, 0.47%)</title><rect x="62.6188%" y="85" width="0.4705%" height="15" fill="rgb(215,41,42)"/><text x="62.8688%" y="95.50"></text></g><g><title>type_of (214,233 samples, 0.24%)</title><rect x="62.8519%" y="69" width="0.2373%" height="15" fill="rgb(224,123,36)"/><text x="63.1019%" y="79.50"></text></g><g><title>type_collecting (1,752,300 samples, 1.94%)</title><rect x="61.2796%" y="165" width="1.9413%" height="15" fill="rgb(240,125,3)"/><text x="61.5296%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,741,910 samples, 1.93%)</title><rect x="61.2911%" y="149" width="1.9298%" height="15" fill="rgb(205,98,50)"/><text x="61.5411%" y="159.50">c..</text></g><g><title>type_of (118,820 samples, 0.13%)</title><rect x="63.0893%" y="133" width="0.1316%" height="15" fill="rgb(205,185,37)"/><text x="63.3393%" y="143.50"></text></g><g><title>adt_def (123,661 samples, 0.14%)</title><rect x="64.9424%" y="117" width="0.1370%" height="15" fill="rgb(238,207,15)"/><text x="65.1924%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (122,891 samples, 0.14%)</title><rect x="64.9433%" y="101" width="0.1361%" height="15" fill="rgb(213,199,42)"/><text x="65.1933%" y="111.50"></text></g><g><title>item_attrs (113,031 samples, 0.13%)</title><rect x="64.9542%" y="85" width="0.1252%" height="15" fill="rgb(235,201,11)"/><text x="65.2042%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (112,011 samples, 0.12%)</title><rect x="64.9553%" y="69" width="0.1241%" height="15" fill="rgb(207,46,11)"/><text x="65.2053%" y="79.50"></text></g><g><title>adt_sized_constraint (168,342 samples, 0.19%)</title><rect x="64.9365%" y="133" width="0.1865%" height="15" fill="rgb(241,35,35)"/><text x="65.1865%" y="143.50"></text></g><g><title>evaluate_obligation (413,453 samples, 0.46%)</title><rect x="65.1314%" y="133" width="0.4580%" height="15" fill="rgb(243,32,47)"/><text x="65.3814%" y="143.50"></text></g><g><title>implied_outlives_bounds (261,552 samples, 0.29%)</title><rect x="65.5973%" y="133" width="0.2898%" height="15" fill="rgb(247,202,23)"/><text x="65.8473%" y="143.50"></text></g><g><title>param_env (252,174 samples, 0.28%)</title><rect x="65.8871%" y="133" width="0.2794%" height="15" fill="rgb(219,102,11)"/><text x="66.1371%" y="143.50"></text></g><g><title>region_scope_tree (360,994 samples, 0.40%)</title><rect x="66.2594%" y="133" width="0.3999%" height="15" fill="rgb(243,110,44)"/><text x="66.5094%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,006,354 samples, 3.33%)</title><rect x="63.3770%" y="149" width="3.3306%" height="15" fill="rgb(222,74,54)"/><text x="63.6270%" y="159.50">che..</text></g><g><title>adt_def (153,362 samples, 0.17%)</title><rect x="67.6211%" y="117" width="0.1699%" height="15" fill="rgb(216,99,12)"/><text x="67.8711%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (151,122 samples, 0.17%)</title><rect x="67.6236%" y="101" width="0.1674%" height="15" fill="rgb(226,22,26)"/><text x="67.8736%" y="111.50"></text></g><g><title>item_attrs (128,702 samples, 0.14%)</title><rect x="67.6485%" y="85" width="0.1426%" height="15" fill="rgb(217,163,10)"/><text x="67.8985%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (126,842 samples, 0.14%)</title><rect x="67.6505%" y="69" width="0.1405%" height="15" fill="rgb(213,25,53)"/><text x="67.9005%" y="79.50"></text></g><g><title>adt_sized_constraint (171,851 samples, 0.19%)</title><rect x="67.7910%" y="117" width="0.1904%" height="15" fill="rgb(252,105,26)"/><text x="68.0410%" y="127.50"></text></g><g><title>adt_sized_constraint (344,724 samples, 0.38%)</title><rect x="67.6071%" y="133" width="0.3819%" height="15" fill="rgb(220,39,43)"/><text x="67.8571%" y="143.50"></text></g><g><title>evaluate_obligation (196,382 samples, 0.22%)</title><rect x="67.9890%" y="133" width="0.2176%" height="15" fill="rgb(229,68,48)"/><text x="68.2390%" y="143.50"></text></g><g><title>param_env (279,924 samples, 0.31%)</title><rect x="68.3105%" y="133" width="0.3101%" height="15" fill="rgb(252,8,32)"/><text x="68.5605%" y="143.50"></text></g><g><title>analysis (61,402,721 samples, 68.03%)</title><rect x="0.7646%" y="197" width="68.0257%" height="15" fill="rgb(223,20,43)"/><text x="1.0146%" y="207.50">analysis</text></g><g><title>type_check_crate (40,189,657 samples, 44.52%)</title><rect x="24.2658%" y="181" width="44.5246%" height="15" fill="rgb(229,81,49)"/><text x="24.5158%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,024,995 samples, 5.57%)</title><rect x="63.2233%" y="165" width="5.5670%" height="15" fill="rgb(236,28,36)"/><text x="63.4733%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (1,879,960 samples, 2.08%)</title><rect x="66.7076%" y="149" width="2.0827%" height="15" fill="rgb(249,185,26)"/><text x="66.9576%" y="159.50">c..</text></g><g><title>variances_of (92,121 samples, 0.10%)</title><rect x="68.6883%" y="133" width="0.1021%" height="15" fill="rgb(249,174,33)"/><text x="68.9383%" y="143.50"></text></g><g><title>codegen_crate (347,414 samples, 0.38%)</title><rect x="68.8007%" y="197" width="0.3849%" height="15" fill="rgb(233,201,37)"/><text x="69.0507%" y="207.50"></text></g><g><title>AST_validation (133,711 samples, 0.15%)</title><rect x="69.3884%" y="181" width="0.1481%" height="15" fill="rgb(221,78,26)"/><text x="69.6384%" y="191.50"></text></g><g><title>metadata_load_macro (188,822 samples, 0.21%)</title><rect x="80.8490%" y="149" width="0.2092%" height="15" fill="rgb(250,127,30)"/><text x="81.0990%" y="159.50"></text></g><g><title>macro_expand_crate (12,702,562 samples, 14.07%)</title><rect x="69.6876%" y="181" width="14.0727%" height="15" fill="rgb(230,49,44)"/><text x="69.9376%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,688,711 samples, 14.06%)</title><rect x="69.7029%" y="165" width="14.0573%" height="15" fill="rgb(229,67,23)"/><text x="69.9529%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,438,977 samples, 2.70%)</title><rect x="81.0582%" y="149" width="2.7020%" height="15" fill="rgb(249,83,47)"/><text x="81.3082%" y="159.50">me..</text></g><g><title>metadata_register_crate (863,270 samples, 0.96%)</title><rect x="82.8039%" y="133" width="0.9564%" height="15" fill="rgb(215,43,3)"/><text x="83.0539%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (205,192 samples, 0.23%)</title><rect x="83.7653%" y="181" width="0.2273%" height="15" fill="rgb(238,154,13)"/><text x="84.0153%" y="191.50"></text></g><g><title>finalize_macro_resolutions (274,623 samples, 0.30%)</title><rect x="84.0397%" y="165" width="0.3042%" height="15" fill="rgb(219,56,2)"/><text x="84.2897%" y="175.50"></text></g><g><title>late_resolve_crate (2,621,069 samples, 2.90%)</title><rect x="84.3440%" y="165" width="2.9038%" height="15" fill="rgb(233,0,4)"/><text x="84.5940%" y="175.50">la..</text></g><g><title>configure_and_expand (16,402,063 samples, 18.17%)</title><rect x="69.1856%" y="197" width="18.1712%" height="15" fill="rgb(235,30,7)"/><text x="69.4356%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,036,694 samples, 3.36%)</title><rect x="83.9926%" y="181" width="3.3642%" height="15" fill="rgb(250,79,13)"/><text x="84.2426%" y="191.50">res..</text></g><g><title>drop_ast (161,072 samples, 0.18%)</title><rect x="87.3568%" y="197" width="0.1784%" height="15" fill="rgb(211,146,34)"/><text x="87.6068%" y="207.50"></text></g><g><title>early_lint_checks (389,844 samples, 0.43%)</title><rect x="87.5515%" y="197" width="0.4319%" height="15" fill="rgb(228,22,38)"/><text x="87.8015%" y="207.50"></text></g><g><title>free_global_ctxt (3,095,615 samples, 3.43%)</title><rect x="87.9834%" y="197" width="3.4295%" height="15" fill="rgb(235,168,5)"/><text x="88.2334%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (541,616 samples, 0.60%)</title><rect x="91.4129%" y="197" width="0.6000%" height="15" fill="rgb(221,155,16)"/><text x="91.6629%" y="207.50"></text></g><g><title>hir_lowering (2,522,848 samples, 2.79%)</title><rect x="92.0129%" y="197" width="2.7950%" height="15" fill="rgb(215,215,53)"/><text x="92.2629%" y="207.50">hi..</text></g><g><title>parse_crate (3,432,659 samples, 3.80%)</title><rect x="94.8572%" y="197" width="3.8029%" height="15" fill="rgb(223,4,10)"/><text x="95.1072%" y="207.50">pars..</text></g><g><title>prepare_outputs (253,393 samples, 0.28%)</title><rect x="98.6689%" y="197" width="0.2807%" height="15" fill="rgb(234,103,6)"/><text x="98.9189%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (557,086 samples, 0.62%)</title><rect x="98.9496%" y="197" width="0.6172%" height="15" fill="rgb(227,97,0)"/><text x="99.1996%" y="207.50"></text></g><g><title>setup_global_ctxt (110,761 samples, 0.12%)</title><rect x="99.5780%" y="197" width="0.1227%" height="15" fill="rgb(234,150,53)"/><text x="99.8280%" y="207.50"></text></g><g><title>all (90,263,952 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (90,263,952 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (270,133 samples, 0.30%)</title><rect x="99.7007%" y="197" width="0.2993%" height="15" fill="rgb(237,53,32)"/><text x="99.9507%" y="207.50"></text></g></svg></svg>