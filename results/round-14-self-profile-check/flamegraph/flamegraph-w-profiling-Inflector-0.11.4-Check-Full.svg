<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (377,553 samples, 0.21%)</title><rect x="14.6213%" y="181" width="0.2147%" height="15" fill="rgb(227,0,7)"/><text x="14.8713%" y="191.50"></text></g><g><title>item_attrs (345,003 samples, 0.20%)</title><rect x="15.3225%" y="149" width="0.1962%" height="15" fill="rgb(217,0,24)"/><text x="15.5725%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (333,563 samples, 0.19%)</title><rect x="15.3290%" y="133" width="0.1897%" height="15" fill="rgb(221,193,54)"/><text x="15.5790%" y="143.50"></text></g><g><title>codegen_fn_attrs (459,144 samples, 0.26%)</title><rect x="15.2684%" y="165" width="0.2611%" height="15" fill="rgb(248,212,6)"/><text x="15.5184%" y="175.50"></text></g><g><title>adt_drop_tys (373,162 samples, 0.21%)</title><rect x="18.0327%" y="133" width="0.2122%" height="15" fill="rgb(208,68,35)"/><text x="18.2827%" y="143.50"></text></g><g><title>is_copy_raw (548,886 samples, 0.31%)</title><rect x="18.2448%" y="133" width="0.3121%" height="15" fill="rgb(232,128,0)"/><text x="18.4948%" y="143.50"></text></g><g><title>evaluate_obligation (497,005 samples, 0.28%)</title><rect x="18.2743%" y="117" width="0.2826%" height="15" fill="rgb(207,160,47)"/><text x="18.5243%" y="127.50"></text></g><g><title>needs_drop_raw (994,480 samples, 0.57%)</title><rect x="18.0032%" y="149" width="0.5655%" height="15" fill="rgb(228,23,34)"/><text x="18.2532%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (411,167 samples, 0.23%)</title><rect x="18.7473%" y="133" width="0.2338%" height="15" fill="rgb(218,30,26)"/><text x="18.9973%" y="143.50"></text></g><g><title>impl_parent (1,382,997 samples, 0.79%)</title><rect x="20.0900%" y="117" width="0.7864%" height="15" fill="rgb(220,122,19)"/><text x="20.3400%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (903,280 samples, 0.51%)</title><rect x="20.3628%" y="101" width="0.5136%" height="15" fill="rgb(250,228,42)"/><text x="20.6128%" y="111.50"></text></g><g><title>specialization_graph_of (7,595,624 samples, 4.32%)</title><rect x="19.0284%" y="133" width="4.3190%" height="15" fill="rgb(240,193,28)"/><text x="19.2784%" y="143.50">speci..</text></g><g><title>impl_trait_ref (4,345,617 samples, 2.47%)</title><rect x="20.8764%" y="117" width="2.4710%" height="15" fill="rgb(216,20,37)"/><text x="21.1264%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,635,926 samples, 2.07%)</title><rect x="21.2799%" y="101" width="2.0674%" height="15" fill="rgb(206,188,39)"/><text x="21.5299%" y="111.50">m..</text></g><g><title>resolve_instance (8,523,113 samples, 4.85%)</title><rect x="18.5686%" y="149" width="4.8463%" height="15" fill="rgb(217,207,13)"/><text x="18.8186%" y="159.50">resolv..</text></g><g><title>thir_body (1,715,058 samples, 0.98%)</title><rect x="23.4430%" y="149" width="0.9752%" height="15" fill="rgb(231,73,38)"/><text x="23.6930%" y="159.50"></text></g><g><title>mir_const (18,647,085 samples, 10.60%)</title><rect x="13.8336%" y="197" width="10.6029%" height="15" fill="rgb(225,20,46)"/><text x="14.0836%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (16,884,186 samples, 9.60%)</title><rect x="14.8360%" y="181" width="9.6005%" height="15" fill="rgb(210,31,41)"/><text x="15.0860%" y="191.50">unsafety_check..</text></g><g><title>mir_built (15,664,640 samples, 8.91%)</title><rect x="15.5295%" y="165" width="8.9071%" height="15" fill="rgb(221,200,47)"/><text x="15.7795%" y="175.50">mir_built</text></g><g><title>has_structural_eq_impls (218,663 samples, 0.12%)</title><rect x="24.6160%" y="181" width="0.1243%" height="15" fill="rgb(226,26,5)"/><text x="24.8660%" y="191.50"></text></g><g><title>evaluate_obligation (189,612 samples, 0.11%)</title><rect x="24.6325%" y="165" width="0.1078%" height="15" fill="rgb(249,33,26)"/><text x="24.8825%" y="175.50"></text></g><g><title>thir_body (219,392 samples, 0.12%)</title><rect x="24.8598%" y="133" width="0.1247%" height="15" fill="rgb(235,183,28)"/><text x="25.1098%" y="143.50"></text></g><g><title>mir_const (357,854 samples, 0.20%)</title><rect x="24.7818%" y="181" width="0.2035%" height="15" fill="rgb(221,5,38)"/><text x="25.0318%" y="191.50"></text></g><g><title>unsafety_check_result (324,863 samples, 0.18%)</title><rect x="24.8006%" y="165" width="0.1847%" height="15" fill="rgb(247,18,42)"/><text x="25.0506%" y="175.50"></text></g><g><title>mir_built (311,673 samples, 0.18%)</title><rect x="24.8081%" y="149" width="0.1772%" height="15" fill="rgb(241,131,45)"/><text x="25.0581%" y="159.50"></text></g><g><title>mir_const_qualif (1,030,983 samples, 0.59%)</title><rect x="24.4366%" y="197" width="0.5862%" height="15" fill="rgb(249,31,29)"/><text x="24.6866%" y="207.50"></text></g><g><title>mir_promoted (21,127,981 samples, 12.01%)</title><rect x="13.0094%" y="213" width="12.0136%" height="15" fill="rgb(225,111,53)"/><text x="13.2594%" y="223.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (220,553 samples, 0.13%)</title><rect x="25.0255%" y="213" width="0.1254%" height="15" fill="rgb(238,160,17)"/><text x="25.2755%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (446,263 samples, 0.25%)</title><rect x="25.1509%" y="213" width="0.2538%" height="15" fill="rgb(214,148,48)"/><text x="25.4009%" y="223.50"></text></g><g><title>normalize_projection_ty (284,912 samples, 0.16%)</title><rect x="25.2427%" y="197" width="0.1620%" height="15" fill="rgb(232,36,49)"/><text x="25.4927%" y="207.50"></text></g><g><title>type_op_prove_predicate (1,566,270 samples, 0.89%)</title><rect x="25.5023%" y="213" width="0.8906%" height="15" fill="rgb(209,103,24)"/><text x="25.7523%" y="223.50"></text></g><g><title>MIR_borrow_checking (45,273,583 samples, 25.74%)</title><rect x="0.6525%" y="245" width="25.7431%" height="15" fill="rgb(229,88,8)"/><text x="0.9025%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (45,024,110 samples, 25.60%)</title><rect x="0.7944%" y="229" width="25.6012%" height="15" fill="rgb(213,181,19)"/><text x="1.0444%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (213,873 samples, 0.12%)</title><rect x="26.3956%" y="245" width="0.1216%" height="15" fill="rgb(254,191,54)"/><text x="26.6456%" y="255.50"></text></g><g><title>hir_module_items (245,344 samples, 0.14%)</title><rect x="26.5172%" y="245" width="0.1395%" height="15" fill="rgb(241,83,37)"/><text x="26.7672%" y="255.50"></text></g><g><title>should_inherit_track_caller (198,102 samples, 0.11%)</title><rect x="27.0080%" y="197" width="0.1126%" height="15" fill="rgb(233,36,39)"/><text x="27.2580%" y="207.50"></text></g><g><title>codegen_fn_attrs (436,206 samples, 0.25%)</title><rect x="26.8822%" y="213" width="0.2480%" height="15" fill="rgb(226,3,54)"/><text x="27.1322%" y="223.50"></text></g><g><title>check_mod_attrs (781,060 samples, 0.44%)</title><rect x="26.6862%" y="229" width="0.4441%" height="15" fill="rgb(245,192,40)"/><text x="26.9362%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (303,483 samples, 0.17%)</title><rect x="27.2832%" y="229" width="0.1726%" height="15" fill="rgb(238,167,29)"/><text x="27.5332%" y="239.50"></text></g><g><title>misc_checking_1 (1,482,396 samples, 0.84%)</title><rect x="26.6571%" y="245" width="0.8429%" height="15" fill="rgb(232,182,51)"/><text x="26.9071%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (571,716 samples, 0.33%)</title><rect x="27.5008%" y="229" width="0.3251%" height="15" fill="rgb(231,60,39)"/><text x="27.7508%" y="239.50"></text></g><g><title>check_mod_liveness (442,556 samples, 0.25%)</title><rect x="27.5742%" y="213" width="0.2516%" height="15" fill="rgb(208,69,12)"/><text x="27.8242%" y="223.50"></text></g><g><title>misc_checking_2 (1,152,903 samples, 0.66%)</title><rect x="27.5000%" y="245" width="0.6556%" height="15" fill="rgb(235,93,37)"/><text x="27.7500%" y="255.50"></text></g><g><title>match_checking (579,777 samples, 0.33%)</title><rect x="27.8259%" y="229" width="0.3297%" height="15" fill="rgb(213,116,39)"/><text x="28.0759%" y="239.50"></text></g><g><title>check_match (531,477 samples, 0.30%)</title><rect x="27.8533%" y="213" width="0.3022%" height="15" fill="rgb(222,207,29)"/><text x="28.1033%" y="223.50"></text></g><g><title>check_private_in_public (201,862 samples, 0.11%)</title><rect x="28.1615%" y="229" width="0.1148%" height="15" fill="rgb(206,96,30)"/><text x="28.4115%" y="239.50"></text></g><g><title>death_checking (396,655 samples, 0.23%)</title><rect x="28.2763%" y="229" width="0.2255%" height="15" fill="rgb(218,138,4)"/><text x="28.5263%" y="239.50"></text></g><g><title>eval_to_const_value_raw (295,763 samples, 0.17%)</title><rect x="29.0955%" y="85" width="0.1682%" height="15" fill="rgb(250,191,14)"/><text x="29.3455%" y="95.50"></text></g><g><title>eval_to_const_value_raw (294,873 samples, 0.17%)</title><rect x="29.0960%" y="69" width="0.1677%" height="15" fill="rgb(239,60,40)"/><text x="29.3460%" y="79.50"></text></g><g><title>eval_to_allocation_raw (292,893 samples, 0.17%)</title><rect x="29.0971%" y="53" width="0.1665%" height="15" fill="rgb(206,27,48)"/><text x="29.3471%" y="63.50"></text></g><g><title>eval_to_const_value_raw (459,655 samples, 0.26%)</title><rect x="29.0051%" y="149" width="0.2614%" height="15" fill="rgb(225,35,8)"/><text x="29.2551%" y="159.50"></text></g><g><title>eval_to_const_value_raw (458,325 samples, 0.26%)</title><rect x="29.0059%" y="133" width="0.2606%" height="15" fill="rgb(250,213,24)"/><text x="29.2559%" y="143.50"></text></g><g><title>eval_to_allocation_raw (456,975 samples, 0.26%)</title><rect x="29.0067%" y="117" width="0.2598%" height="15" fill="rgb(247,123,22)"/><text x="29.2567%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (303,944 samples, 0.17%)</title><rect x="29.0937%" y="101" width="0.1728%" height="15" fill="rgb(231,138,38)"/><text x="29.3437%" y="111.50"></text></g><g><title>eval_to_allocation_raw (653,236 samples, 0.37%)</title><rect x="28.8955%" y="197" width="0.3714%" height="15" fill="rgb(231,145,46)"/><text x="29.1455%" y="207.50"></text></g><g><title>eval_to_allocation_raw (646,256 samples, 0.37%)</title><rect x="28.8995%" y="181" width="0.3675%" height="15" fill="rgb(251,118,11)"/><text x="29.1495%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (468,505 samples, 0.27%)</title><rect x="29.0005%" y="165" width="0.2664%" height="15" fill="rgb(217,147,25)"/><text x="29.2505%" y="175.50"></text></g><g><title>eval_to_const_value_raw (535,586 samples, 0.30%)</title><rect x="29.2669%" y="197" width="0.3045%" height="15" fill="rgb(247,81,37)"/><text x="29.5169%" y="207.50"></text></g><g><title>eval_to_const_value_raw (534,836 samples, 0.30%)</title><rect x="29.2674%" y="181" width="0.3041%" height="15" fill="rgb(209,12,38)"/><text x="29.5174%" y="191.50"></text></g><g><title>eval_to_allocation_raw (533,416 samples, 0.30%)</title><rect x="29.2682%" y="165" width="0.3033%" height="15" fill="rgb(227,1,9)"/><text x="29.5182%" y="175.50"></text></g><g><title>param_env (754,189 samples, 0.43%)</title><rect x="29.5715%" y="197" width="0.4288%" height="15" fill="rgb(248,47,43)"/><text x="29.8215%" y="207.50"></text></g><g><title>predicates_of (468,435 samples, 0.27%)</title><rect x="29.7340%" y="181" width="0.2664%" height="15" fill="rgb(221,10,30)"/><text x="29.9840%" y="191.50"></text></g><g><title>predicates_defined_on (422,224 samples, 0.24%)</title><rect x="29.7602%" y="165" width="0.2401%" height="15" fill="rgb(210,229,1)"/><text x="30.0102%" y="175.50"></text></g><g><title>crate_lints (2,677,890 samples, 1.52%)</title><rect x="28.5028%" y="213" width="1.5227%" height="15" fill="rgb(222,148,37)"/><text x="28.7528%" y="223.50"></text></g><g><title>lint_checking (3,244,566 samples, 1.84%)</title><rect x="28.5018%" y="229" width="1.8449%" height="15" fill="rgb(234,67,33)"/><text x="28.7518%" y="239.50">l..</text></g><g><title>module_lints (564,856 samples, 0.32%)</title><rect x="30.0255%" y="213" width="0.3212%" height="15" fill="rgb(247,98,35)"/><text x="30.2755%" y="223.50"></text></g><g><title>lint_mod (551,096 samples, 0.31%)</title><rect x="30.0333%" y="197" width="0.3134%" height="15" fill="rgb(247,138,52)"/><text x="30.2833%" y="207.50"></text></g><g><title>privacy_access_levels (273,853 samples, 0.16%)</title><rect x="30.3467%" y="229" width="0.1557%" height="15" fill="rgb(213,79,30)"/><text x="30.5967%" y="239.50"></text></g><g><title>privacy_checking_modules (916,390 samples, 0.52%)</title><rect x="30.5024%" y="229" width="0.5211%" height="15" fill="rgb(246,177,23)"/><text x="30.7524%" y="239.50"></text></g><g><title>check_mod_privacy (906,710 samples, 0.52%)</title><rect x="30.5079%" y="213" width="0.5156%" height="15" fill="rgb(230,62,27)"/><text x="30.7579%" y="223.50"></text></g><g><title>misc_checking_3 (5,065,006 samples, 2.88%)</title><rect x="28.1555%" y="245" width="2.8800%" height="15" fill="rgb(216,154,8)"/><text x="28.4055%" y="255.50">mi..</text></g><g><title>coherent_trait (403,094 samples, 0.23%)</title><rect x="31.0941%" y="213" width="0.2292%" height="15" fill="rgb(244,35,45)"/><text x="31.3441%" y="223.50"></text></g><g><title>specialization_graph_of (395,254 samples, 0.22%)</title><rect x="31.0986%" y="197" width="0.2247%" height="15" fill="rgb(251,115,12)"/><text x="31.3486%" y="207.50"></text></g><g><title>coherence_checking (516,915 samples, 0.29%)</title><rect x="31.0874%" y="229" width="0.2939%" height="15" fill="rgb(240,54,50)"/><text x="31.3374%" y="239.50"></text></g><g><title>associated_item (1,479,305 samples, 0.84%)</title><rect x="50.2266%" y="165" width="0.8411%" height="15" fill="rgb(233,84,52)"/><text x="50.4766%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (1,145,328 samples, 0.65%)</title><rect x="50.4165%" y="149" width="0.6512%" height="15" fill="rgb(207,117,47)"/><text x="50.6665%" y="159.50"></text></g><g><title>associated_items (2,069,003 samples, 1.18%)</title><rect x="49.9300%" y="181" width="1.1765%" height="15" fill="rgb(249,43,39)"/><text x="50.1800%" y="191.50"></text></g><g><title>dropck_outlives (351,015 samples, 0.20%)</title><rect x="51.1529%" y="181" width="0.1996%" height="15" fill="rgb(209,38,44)"/><text x="51.4029%" y="191.50"></text></g><g><title>predicates_of (221,874 samples, 0.13%)</title><rect x="52.2469%" y="165" width="0.1262%" height="15" fill="rgb(236,212,23)"/><text x="52.4969%" y="175.50"></text></g><g><title>specializes (286,290 samples, 0.16%)</title><rect x="52.3730%" y="165" width="0.1628%" height="15" fill="rgb(242,79,21)"/><text x="52.6230%" y="175.50"></text></g><g><title>param_env (181,360 samples, 0.10%)</title><rect x="52.4327%" y="149" width="0.1031%" height="15" fill="rgb(211,96,35)"/><text x="52.6827%" y="159.50"></text></g><g><title>trait_impls_of (849,352 samples, 0.48%)</title><rect x="52.5447%" y="165" width="0.4830%" height="15" fill="rgb(253,215,40)"/><text x="52.7947%" y="175.50"></text></g><g><title>implementations_of_trait (314,005 samples, 0.18%)</title><rect x="52.8491%" y="149" width="0.1785%" height="15" fill="rgb(211,81,21)"/><text x="53.0991%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (209,805 samples, 0.12%)</title><rect x="52.9084%" y="133" width="0.1193%" height="15" fill="rgb(208,190,38)"/><text x="53.1584%" y="143.50"></text></g><g><title>evaluate_obligation (2,946,872 samples, 1.68%)</title><rect x="51.3525%" y="181" width="1.6756%" height="15" fill="rgb(235,213,38)"/><text x="51.6025%" y="191.50"></text></g><g><title>fn_sig (185,673 samples, 0.11%)</title><rect x="53.0412%" y="181" width="0.1056%" height="15" fill="rgb(237,122,38)"/><text x="53.2912%" y="191.50"></text></g><g><title>impl_item_implementor_ids (440,223 samples, 0.25%)</title><rect x="53.2270%" y="181" width="0.2503%" height="15" fill="rgb(244,218,35)"/><text x="53.4770%" y="191.50"></text></g><g><title>associated_items (179,420 samples, 0.10%)</title><rect x="53.3753%" y="165" width="0.1020%" height="15" fill="rgb(240,68,47)"/><text x="53.6253%" y="175.50"></text></g><g><title>evaluate_obligation (301,296 samples, 0.17%)</title><rect x="53.8692%" y="165" width="0.1713%" height="15" fill="rgb(210,16,53)"/><text x="54.1192%" y="175.50"></text></g><g><title>method_autoderef_steps (768,511 samples, 0.44%)</title><rect x="53.6123%" y="181" width="0.4370%" height="15" fill="rgb(235,124,12)"/><text x="53.8623%" y="191.50"></text></g><g><title>predicates_of (397,926 samples, 0.23%)</title><rect x="54.1029%" y="181" width="0.2263%" height="15" fill="rgb(224,169,11)"/><text x="54.3529%" y="191.50"></text></g><g><title>predicates_defined_on (273,226 samples, 0.16%)</title><rect x="54.1738%" y="165" width="0.1554%" height="15" fill="rgb(250,166,2)"/><text x="54.4238%" y="175.50"></text></g><g><title>item_bodies_checking (40,566,101 samples, 23.07%)</title><rect x="31.4030%" y="229" width="23.0664%" height="15" fill="rgb(242,216,29)"/><text x="31.6530%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (40,562,121 samples, 23.06%)</title><rect x="31.4052%" y="213" width="23.0641%" height="15" fill="rgb(230,116,27)"/><text x="31.6552%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (40,404,351 samples, 22.97%)</title><rect x="31.4950%" y="197" width="22.9744%" height="15" fill="rgb(228,99,48)"/><text x="31.7450%" y="207.50">typeck</text></g><g><title>impl_trait_ref (243,073 samples, 0.14%)</title><rect x="55.0590%" y="149" width="0.1382%" height="15" fill="rgb(253,11,6)"/><text x="55.3090%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (223,243 samples, 0.13%)</title><rect x="55.0702%" y="133" width="0.1269%" height="15" fill="rgb(247,143,39)"/><text x="55.3202%" y="143.50"></text></g><g><title>adt_destructor (432,845 samples, 0.25%)</title><rect x="54.9672%" y="197" width="0.2461%" height="15" fill="rgb(236,97,10)"/><text x="55.2172%" y="207.50"></text></g><g><title>coherent_trait (428,685 samples, 0.24%)</title><rect x="54.9696%" y="181" width="0.2438%" height="15" fill="rgb(233,208,19)"/><text x="55.2196%" y="191.50"></text></g><g><title>specialization_graph_of (425,775 samples, 0.24%)</title><rect x="54.9712%" y="165" width="0.2421%" height="15" fill="rgb(216,164,2)"/><text x="55.2212%" y="175.50"></text></g><g><title>layout_of (190,382 samples, 0.11%)</title><rect x="55.2725%" y="165" width="0.1083%" height="15" fill="rgb(220,129,5)"/><text x="55.5225%" y="175.50"></text></g><g><title>layout_of (228,713 samples, 0.13%)</title><rect x="55.2532%" y="197" width="0.1300%" height="15" fill="rgb(242,17,10)"/><text x="55.5032%" y="207.50"></text></g><g><title>layout_of (208,533 samples, 0.12%)</title><rect x="55.2647%" y="181" width="0.1186%" height="15" fill="rgb(242,107,0)"/><text x="55.5147%" y="191.50"></text></g><g><title>adt_def (944,499 samples, 0.54%)</title><rect x="55.8670%" y="149" width="0.5371%" height="15" fill="rgb(251,28,31)"/><text x="56.1170%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (940,129 samples, 0.53%)</title><rect x="55.8695%" y="133" width="0.5346%" height="15" fill="rgb(233,223,10)"/><text x="56.1195%" y="143.50"></text></g><g><title>adt_def (251,423 samples, 0.14%)</title><rect x="56.5482%" y="117" width="0.1430%" height="15" fill="rgb(215,21,27)"/><text x="56.7982%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (248,392 samples, 0.14%)</title><rect x="56.5500%" y="101" width="0.1412%" height="15" fill="rgb(232,23,21)"/><text x="56.8000%" y="111.50"></text></g><g><title>adt_dtorck_constraint (194,991 samples, 0.11%)</title><rect x="57.0074%" y="37" width="0.1109%" height="15" fill="rgb(244,5,23)"/><text x="57.2574%" y="47.50"></text></g><g><title>adt_dtorck_constraint (319,155 samples, 0.18%)</title><rect x="56.9415%" y="53" width="0.1815%" height="15" fill="rgb(226,81,46)"/><text x="57.1915%" y="63.50"></text></g><g><title>adt_dtorck_constraint (418,535 samples, 0.24%)</title><rect x="56.8911%" y="69" width="0.2380%" height="15" fill="rgb(247,70,30)"/><text x="57.1411%" y="79.50"></text></g><g><title>adt_dtorck_constraint (521,925 samples, 0.30%)</title><rect x="56.8339%" y="85" width="0.2968%" height="15" fill="rgb(212,68,19)"/><text x="57.0839%" y="95.50"></text></g><g><title>adt_dtorck_constraint (680,887 samples, 0.39%)</title><rect x="56.7451%" y="101" width="0.3872%" height="15" fill="rgb(240,187,13)"/><text x="56.9951%" y="111.50"></text></g><g><title>adt_dtorck_constraint (763,548 samples, 0.43%)</title><rect x="56.7036%" y="117" width="0.4342%" height="15" fill="rgb(223,113,26)"/><text x="56.9536%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,118,642 samples, 0.64%)</title><rect x="56.5251%" y="133" width="0.6361%" height="15" fill="rgb(206,192,2)"/><text x="56.7751%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,313,774 samples, 0.75%)</title><rect x="56.4237%" y="149" width="0.7470%" height="15" fill="rgb(241,108,4)"/><text x="56.6737%" y="159.50"></text></g><g><title>dropck_outlives (2,472,198 samples, 1.41%)</title><rect x="55.7931%" y="181" width="1.4057%" height="15" fill="rgb(247,173,49)"/><text x="56.0431%" y="191.50"></text></g><g><title>adt_dtorck_constraint (2,411,367 samples, 1.37%)</title><rect x="55.8277%" y="165" width="1.3711%" height="15" fill="rgb(224,114,35)"/><text x="56.0777%" y="175.50"></text></g><g><title>item_types_checking (4,900,915 samples, 2.79%)</title><rect x="54.4693%" y="229" width="2.7867%" height="15" fill="rgb(245,159,27)"/><text x="54.7193%" y="239.50">it..</text></g><g><title>check_mod_item_types (4,885,925 samples, 2.78%)</title><rect x="54.4779%" y="213" width="2.7782%" height="15" fill="rgb(245,172,44)"/><text x="54.7279%" y="223.50">ch..</text></g><g><title>typeck (3,287,077 samples, 1.87%)</title><rect x="55.3870%" y="197" width="1.8691%" height="15" fill="rgb(236,23,11)"/><text x="55.6370%" y="207.50">t..</text></g><g><title>lint_levels (251,043 samples, 0.14%)</title><rect x="57.2561%" y="229" width="0.1427%" height="15" fill="rgb(205,117,38)"/><text x="57.5061%" y="239.50"></text></g><g><title>fn_sig (306,853 samples, 0.17%)</title><rect x="57.6015%" y="197" width="0.1745%" height="15" fill="rgb(237,72,25)"/><text x="57.8515%" y="207.50"></text></g><g><title>named_region_map (488,258 samples, 0.28%)</title><rect x="57.8670%" y="181" width="0.2776%" height="15" fill="rgb(244,70,9)"/><text x="58.1170%" y="191.50"></text></g><g><title>resolve_lifetimes (432,418 samples, 0.25%)</title><rect x="57.8988%" y="165" width="0.2459%" height="15" fill="rgb(217,125,39)"/><text x="58.1488%" y="175.50"></text></g><g><title>generics_of (668,281 samples, 0.38%)</title><rect x="57.7760%" y="197" width="0.3800%" height="15" fill="rgb(235,36,10)"/><text x="58.0260%" y="207.50"></text></g><g><title>predicates_of (314,935 samples, 0.18%)</title><rect x="58.1680%" y="197" width="0.1791%" height="15" fill="rgb(251,123,47)"/><text x="58.4180%" y="207.50"></text></g><g><title>predicates_defined_on (250,354 samples, 0.14%)</title><rect x="58.2047%" y="181" width="0.1424%" height="15" fill="rgb(221,13,13)"/><text x="58.4547%" y="191.50"></text></g><g><title>type_collecting (1,878,321 samples, 1.07%)</title><rect x="57.4012%" y="229" width="1.0680%" height="15" fill="rgb(238,131,9)"/><text x="57.6512%" y="239.50"></text></g><g><title>collect_mod_item_types (1,856,601 samples, 1.06%)</title><rect x="57.4136%" y="213" width="1.0557%" height="15" fill="rgb(211,50,8)"/><text x="57.6636%" y="223.50"></text></g><g><title>type_of (180,001 samples, 0.10%)</title><rect x="58.3669%" y="197" width="0.1024%" height="15" fill="rgb(245,182,24)"/><text x="58.6169%" y="207.50"></text></g><g><title>evaluate_obligation (314,833 samples, 0.18%)</title><rect x="59.3693%" y="197" width="0.1790%" height="15" fill="rgb(242,14,37)"/><text x="59.6193%" y="207.50"></text></g><g><title>param_env (246,473 samples, 0.14%)</title><rect x="59.5920%" y="197" width="0.1401%" height="15" fill="rgb(246,228,12)"/><text x="59.8420%" y="207.50"></text></g><g><title>check_impl_item_well_formed (2,144,413 samples, 1.22%)</title><rect x="58.6031%" y="213" width="1.2193%" height="15" fill="rgb(213,55,15)"/><text x="58.8531%" y="223.50"></text></g><g><title>adt_sized_constraint (181,811 samples, 0.10%)</title><rect x="61.6119%" y="181" width="0.1034%" height="15" fill="rgb(209,9,3)"/><text x="61.8619%" y="191.50"></text></g><g><title>trait_impls_of (236,493 samples, 0.13%)</title><rect x="61.8919%" y="181" width="0.1345%" height="15" fill="rgb(230,59,30)"/><text x="62.1419%" y="191.50"></text></g><g><title>evaluate_obligation (3,092,615 samples, 1.76%)</title><rect x="60.5777%" y="197" width="1.7585%" height="15" fill="rgb(209,121,21)"/><text x="60.8277%" y="207.50"></text></g><g><title>type_of (544,956 samples, 0.31%)</title><rect x="62.0263%" y="181" width="0.3099%" height="15" fill="rgb(220,109,13)"/><text x="62.2763%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (487,865 samples, 0.28%)</title><rect x="62.0588%" y="165" width="0.2774%" height="15" fill="rgb(232,18,1)"/><text x="62.3088%" y="175.50"></text></g><g><title>param_env (342,103 samples, 0.19%)</title><rect x="62.4046%" y="197" width="0.1945%" height="15" fill="rgb(215,41,42)"/><text x="62.6546%" y="207.50"></text></g><g><title>region_scope_tree (332,184 samples, 0.19%)</title><rect x="62.6170%" y="197" width="0.1889%" height="15" fill="rgb(224,123,36)"/><text x="62.8670%" y="207.50"></text></g><g><title>check_item_well_formed (5,303,630 samples, 3.02%)</title><rect x="59.8225%" y="213" width="3.0157%" height="15" fill="rgb(240,125,3)"/><text x="60.0725%" y="223.50">che..</text></g><g><title>analysis (110,677,641 samples, 62.93%)</title><rect x="0.4487%" y="261" width="62.9326%" height="15" fill="rgb(205,98,50)"/><text x="0.6987%" y="271.50">analysis</text></g><g><title>type_check_crate (56,885,463 samples, 32.35%)</title><rect x="31.0355%" y="245" width="32.3457%" height="15" fill="rgb(205,185,37)"/><text x="31.2855%" y="255.50">type_check_crate</text></g><g><title>wf_checking (8,629,086 samples, 4.91%)</title><rect x="58.4747%" y="229" width="4.9066%" height="15" fill="rgb(238,207,15)"/><text x="58.7247%" y="239.50">wf_che..</text></g><g><title>check_trait_item_well_formed (955,131 samples, 0.54%)</title><rect x="62.8382%" y="213" width="0.5431%" height="15" fill="rgb(213,199,42)"/><text x="63.0882%" y="223.50"></text></g><g><title>codegen_crate (650,487 samples, 0.37%)</title><rect x="63.3881%" y="261" width="0.3699%" height="15" fill="rgb(235,201,11)"/><text x="63.6381%" y="271.50"></text></g><g><title>AST_validation (251,143 samples, 0.14%)</title><rect x="63.8820%" y="245" width="0.1428%" height="15" fill="rgb(207,46,11)"/><text x="64.1320%" y="255.50"></text></g><g><title>metadata_load_macro (210,972 samples, 0.12%)</title><rect x="88.1546%" y="213" width="0.1200%" height="15" fill="rgb(241,35,35)"/><text x="88.4046%" y="223.50"></text></g><g><title>metadata_register_crate (2,983,463 samples, 1.70%)</title><rect x="88.2745%" y="213" width="1.6964%" height="15" fill="rgb(243,32,47)"/><text x="88.5245%" y="223.50"></text></g><g><title>metadata_register_crate (1,090,793 samples, 0.62%)</title><rect x="89.3507%" y="197" width="0.6202%" height="15" fill="rgb(247,202,23)"/><text x="89.6007%" y="207.50"></text></g><g><title>macro_expand_crate (46,771,841 samples, 26.60%)</title><rect x="64.1312%" y="245" width="26.5950%" height="15" fill="rgb(219,102,11)"/><text x="64.3812%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (46,757,761 samples, 26.59%)</title><rect x="64.1393%" y="229" width="26.5870%" height="15" fill="rgb(243,110,44)"/><text x="64.3893%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,328,283 samples, 0.76%)</title><rect x="89.9710%" y="213" width="0.7553%" height="15" fill="rgb(222,74,54)"/><text x="90.2210%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (206,732 samples, 0.12%)</title><rect x="90.7285%" y="245" width="0.1176%" height="15" fill="rgb(216,99,12)"/><text x="90.9785%" y="255.50"></text></g><g><title>late_resolve_crate (1,868,671 samples, 1.06%)</title><rect x="90.9646%" y="229" width="1.0625%" height="15" fill="rgb(226,22,26)"/><text x="91.2146%" y="239.50"></text></g><g><title>configure_and_expand (49,876,724 samples, 28.36%)</title><rect x="63.7580%" y="261" width="28.3605%" height="15" fill="rgb(217,163,10)"/><text x="64.0080%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (2,237,714 samples, 1.27%)</title><rect x="90.8461%" y="245" width="1.2724%" height="15" fill="rgb(213,25,53)"/><text x="91.0961%" y="255.50"></text></g><g><title>drop_ast (384,195 samples, 0.22%)</title><rect x="92.1185%" y="261" width="0.2185%" height="15" fill="rgb(252,105,26)"/><text x="92.3685%" y="271.50"></text></g><g><title>early_lint_checks (656,897 samples, 0.37%)</title><rect x="92.3469%" y="261" width="0.3735%" height="15" fill="rgb(220,39,43)"/><text x="92.5969%" y="271.50"></text></g><g><title>free_global_ctxt (3,994,035 samples, 2.27%)</title><rect x="92.7204%" y="261" width="2.2711%" height="15" fill="rgb(229,68,48)"/><text x="92.9704%" y="271.50">f..</text></g><g><title>generate_crate_metadata (1,503,027 samples, 0.85%)</title><rect x="94.9915%" y="261" width="0.8546%" height="15" fill="rgb(252,8,32)"/><text x="95.2415%" y="271.50"></text></g><g><title>hir_lowering (3,779,962 samples, 2.15%)</title><rect x="95.8461%" y="261" width="2.1493%" height="15" fill="rgb(223,20,43)"/><text x="96.0961%" y="271.50">h..</text></g><g><title>parse_crate (1,871,650 samples, 1.06%)</title><rect x="98.0371%" y="261" width="1.0642%" height="15" fill="rgb(229,81,49)"/><text x="98.2871%" y="271.50"></text></g><g><title>prepare_outputs (207,593 samples, 0.12%)</title><rect x="99.1059%" y="261" width="0.1180%" height="15" fill="rgb(236,28,36)"/><text x="99.3559%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (857,750 samples, 0.49%)</title><rect x="99.2239%" y="261" width="0.4877%" height="15" fill="rgb(249,185,26)"/><text x="99.4739%" y="271.50"></text></g><g><title>all (175,866,986 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (175,866,986 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (383,524 samples, 0.22%)</title><rect x="99.7819%" y="261" width="0.2181%" height="15" fill="rgb(221,78,26)"/><text x="100.0319%" y="271.50"></text></g></svg></svg>