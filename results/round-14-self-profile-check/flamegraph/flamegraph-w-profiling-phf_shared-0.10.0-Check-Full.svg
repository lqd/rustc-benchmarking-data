<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (253,864 samples, 0.17%)</title><rect x="14.3029%" y="149" width="0.1689%" height="15" fill="rgb(227,0,7)"/><text x="14.5529%" y="159.50"></text></g><g><title>item_attrs (179,621 samples, 0.12%)</title><rect x="16.7341%" y="85" width="0.1195%" height="15" fill="rgb(217,0,24)"/><text x="16.9841%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (173,071 samples, 0.12%)</title><rect x="16.7385%" y="69" width="0.1151%" height="15" fill="rgb(221,193,54)"/><text x="16.9885%" y="79.50"></text></g><g><title>codegen_fn_attrs (263,472 samples, 0.18%)</title><rect x="16.6870%" y="101" width="0.1753%" height="15" fill="rgb(248,212,6)"/><text x="16.9370%" y="111.50"></text></g><g><title>is_copy_raw (723,830 samples, 0.48%)</title><rect x="18.8453%" y="85" width="0.4815%" height="15" fill="rgb(208,68,35)"/><text x="19.0953%" y="95.50"></text></g><g><title>evaluate_obligation (638,949 samples, 0.43%)</title><rect x="18.9018%" y="69" width="0.4250%" height="15" fill="rgb(232,128,0)"/><text x="19.1518%" y="79.50"></text></g><g><title>needs_drop_raw (243,512 samples, 0.16%)</title><rect x="19.3284%" y="85" width="0.1620%" height="15" fill="rgb(207,160,47)"/><text x="19.5784%" y="95.50"></text></g><g><title>is_copy_raw (163,971 samples, 0.11%)</title><rect x="19.3813%" y="69" width="0.1091%" height="15" fill="rgb(228,23,34)"/><text x="19.6313%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (187,442 samples, 0.12%)</title><rect x="19.6394%" y="69" width="0.1247%" height="15" fill="rgb(218,30,26)"/><text x="19.8894%" y="79.50"></text></g><g><title>impl_parent (867,002 samples, 0.58%)</title><rect x="20.3728%" y="53" width="0.5767%" height="15" fill="rgb(220,122,19)"/><text x="20.6228%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (436,496 samples, 0.29%)</title><rect x="20.6592%" y="37" width="0.2904%" height="15" fill="rgb(250,228,42)"/><text x="20.9092%" y="47.50"></text></g><g><title>specialization_graph_of (3,409,519 samples, 2.27%)</title><rect x="19.8379%" y="69" width="2.2680%" height="15" fill="rgb(240,193,28)"/><text x="20.0879%" y="79.50">s..</text></g><g><title>impl_trait_ref (1,738,398 samples, 1.16%)</title><rect x="20.9495%" y="53" width="1.1564%" height="15" fill="rgb(216,20,37)"/><text x="21.1995%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,546,377 samples, 1.03%)</title><rect x="21.0773%" y="37" width="1.0286%" height="15" fill="rgb(206,188,39)"/><text x="21.3273%" y="47.50"></text></g><g><title>resolve_instance (4,007,434 samples, 2.67%)</title><rect x="19.4904%" y="85" width="2.6657%" height="15" fill="rgb(217,207,13)"/><text x="19.7404%" y="95.50">re..</text></g><g><title>thir_body (944,130 samples, 0.63%)</title><rect x="22.1889%" y="85" width="0.6280%" height="15" fill="rgb(231,73,38)"/><text x="22.4389%" y="95.50"></text></g><g><title>mir_const (11,042,627 samples, 7.35%)</title><rect x="15.4933%" y="133" width="7.3454%" height="15" fill="rgb(225,20,46)"/><text x="15.7433%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (9,844,224 samples, 6.55%)</title><rect x="16.2904%" y="117" width="6.5482%" height="15" fill="rgb(210,31,41)"/><text x="16.5404%" y="127.50">unsafety_..</text></g><g><title>mir_built (8,984,499 samples, 5.98%)</title><rect x="16.8623%" y="101" width="5.9764%" height="15" fill="rgb(221,200,47)"/><text x="17.1123%" y="111.50">mir_built</text></g><g><title>thir_body (157,012 samples, 0.10%)</title><rect x="24.1011%" y="69" width="0.1044%" height="15" fill="rgb(226,26,5)"/><text x="24.3511%" y="79.50"></text></g><g><title>mir_promoted (14,655,230 samples, 9.75%)</title><rect x="14.4717%" y="149" width="9.7485%" height="15" fill="rgb(249,33,26)"/><text x="14.7217%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (2,076,874 samples, 1.38%)</title><rect x="22.8387%" y="133" width="1.3815%" height="15" fill="rgb(235,183,28)"/><text x="23.0887%" y="143.50"></text></g><g><title>mir_const (1,620,909 samples, 1.08%)</title><rect x="23.1420%" y="117" width="1.0782%" height="15" fill="rgb(221,5,38)"/><text x="23.3920%" y="127.50"></text></g><g><title>unsafety_check_result (1,123,994 samples, 0.75%)</title><rect x="23.4725%" y="101" width="0.7477%" height="15" fill="rgb(247,18,42)"/><text x="23.7225%" y="111.50"></text></g><g><title>mir_built (968,654 samples, 0.64%)</title><rect x="23.5758%" y="85" width="0.6443%" height="15" fill="rgb(241,131,45)"/><text x="23.8258%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (436,446 samples, 0.29%)</title><rect x="24.2326%" y="149" width="0.2903%" height="15" fill="rgb(249,31,29)"/><text x="24.4826%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (197,040 samples, 0.13%)</title><rect x="24.5229%" y="149" width="0.1311%" height="15" fill="rgb(225,111,53)"/><text x="24.7729%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,365,937 samples, 2.24%)</title><rect x="24.6539%" y="149" width="2.2390%" height="15" fill="rgb(238,160,17)"/><text x="24.9039%" y="159.50">t..</text></g><g><title>evaluate_obligation (264,492 samples, 0.18%)</title><rect x="26.7170%" y="133" width="0.1759%" height="15" fill="rgb(214,148,48)"/><text x="26.9670%" y="143.50"></text></g><g><title>MIR_borrow_checking (39,348,901 samples, 26.17%)</title><rect x="0.7199%" y="181" width="26.1743%" height="15" fill="rgb(232,36,49)"/><text x="0.9699%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (38,947,638 samples, 25.91%)</title><rect x="0.9868%" y="165" width="25.9074%" height="15" fill="rgb(209,103,24)"/><text x="1.2368%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,015,931 samples, 0.68%)</title><rect x="26.8942%" y="181" width="0.6758%" height="15" fill="rgb(229,88,8)"/><text x="27.1442%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (869,121 samples, 0.58%)</title><rect x="26.9919%" y="165" width="0.5781%" height="15" fill="rgb(213,181,19)"/><text x="27.2419%" y="175.50"></text></g><g><title>hir_module_items (261,813 samples, 0.17%)</title><rect x="27.5700%" y="181" width="0.1742%" height="15" fill="rgb(254,191,54)"/><text x="27.8200%" y="191.50"></text></g><g><title>should_inherit_track_caller (188,153 samples, 0.13%)</title><rect x="28.0635%" y="133" width="0.1252%" height="15" fill="rgb(241,83,37)"/><text x="28.3135%" y="143.50"></text></g><g><title>codegen_fn_attrs (427,426 samples, 0.28%)</title><rect x="27.9154%" y="149" width="0.2843%" height="15" fill="rgb(233,36,39)"/><text x="28.1654%" y="159.50"></text></g><g><title>check_mod_attrs (667,527 samples, 0.44%)</title><rect x="27.7557%" y="165" width="0.4440%" height="15" fill="rgb(226,3,54)"/><text x="28.0057%" y="175.50"></text></g><g><title>check_mod_const_bodies (192,082 samples, 0.13%)</title><rect x="28.1997%" y="165" width="0.1278%" height="15" fill="rgb(245,192,40)"/><text x="28.4497%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (296,523 samples, 0.20%)</title><rect x="28.3821%" y="165" width="0.1972%" height="15" fill="rgb(238,167,29)"/><text x="28.6321%" y="175.50"></text></g><g><title>misc_checking_1 (1,326,615 samples, 0.88%)</title><rect x="27.7445%" y="181" width="0.8824%" height="15" fill="rgb(232,182,51)"/><text x="27.9945%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (424,595 samples, 0.28%)</title><rect x="28.6278%" y="165" width="0.2824%" height="15" fill="rgb(231,60,39)"/><text x="28.8778%" y="175.50"></text></g><g><title>check_mod_liveness (337,124 samples, 0.22%)</title><rect x="28.6860%" y="149" width="0.2243%" height="15" fill="rgb(208,69,12)"/><text x="28.9360%" y="159.50"></text></g><g><title>misc_checking_2 (968,671 samples, 0.64%)</title><rect x="28.6269%" y="181" width="0.6443%" height="15" fill="rgb(235,93,37)"/><text x="28.8769%" y="191.50"></text></g><g><title>match_checking (542,746 samples, 0.36%)</title><rect x="28.9102%" y="165" width="0.3610%" height="15" fill="rgb(213,116,39)"/><text x="29.1602%" y="175.50"></text></g><g><title>check_match (462,915 samples, 0.31%)</title><rect x="28.9633%" y="149" width="0.3079%" height="15" fill="rgb(222,207,29)"/><text x="29.2133%" y="159.50"></text></g><g><title>check_private_in_public (275,583 samples, 0.18%)</title><rect x="29.2782%" y="165" width="0.1833%" height="15" fill="rgb(206,96,30)"/><text x="29.5282%" y="175.50"></text></g><g><title>death_checking (421,185 samples, 0.28%)</title><rect x="29.4615%" y="165" width="0.2802%" height="15" fill="rgb(218,138,4)"/><text x="29.7115%" y="175.50"></text></g><g><title>crate_lints (3,057,734 samples, 2.03%)</title><rect x="29.7428%" y="149" width="2.0340%" height="15" fill="rgb(250,191,14)"/><text x="29.9928%" y="159.50">c..</text></g><g><title>type_of (2,218,426 samples, 1.48%)</title><rect x="30.3011%" y="133" width="1.4757%" height="15" fill="rgb(239,60,40)"/><text x="30.5511%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,967,553 samples, 1.31%)</title><rect x="30.4680%" y="117" width="1.3088%" height="15" fill="rgb(206,27,48)"/><text x="30.7180%" y="127.50"></text></g><g><title>lint_checking (3,463,439 samples, 2.30%)</title><rect x="29.7417%" y="165" width="2.3038%" height="15" fill="rgb(225,35,8)"/><text x="29.9917%" y="175.50">l..</text></g><g><title>module_lints (404,035 samples, 0.27%)</title><rect x="31.7767%" y="149" width="0.2688%" height="15" fill="rgb(250,213,24)"/><text x="32.0267%" y="159.50"></text></g><g><title>lint_mod (400,715 samples, 0.27%)</title><rect x="31.7790%" y="133" width="0.2665%" height="15" fill="rgb(247,123,22)"/><text x="32.0290%" y="143.50"></text></g><g><title>privacy_access_levels (424,605 samples, 0.28%)</title><rect x="32.0455%" y="165" width="0.2824%" height="15" fill="rgb(231,138,38)"/><text x="32.2955%" y="175.50"></text></g><g><title>privacy_checking_modules (977,331 samples, 0.65%)</title><rect x="32.3279%" y="165" width="0.6501%" height="15" fill="rgb(231,145,46)"/><text x="32.5779%" y="175.50"></text></g><g><title>check_mod_privacy (975,621 samples, 0.65%)</title><rect x="32.3291%" y="149" width="0.6490%" height="15" fill="rgb(251,118,11)"/><text x="32.5791%" y="159.50"></text></g><g><title>misc_checking_3 (5,584,683 samples, 3.71%)</title><rect x="29.2713%" y="181" width="3.7149%" height="15" fill="rgb(217,147,25)"/><text x="29.5213%" y="191.50">misc..</text></g><g><title>coherent_trait (1,535,948 samples, 1.02%)</title><rect x="33.0736%" y="149" width="1.0217%" height="15" fill="rgb(247,81,37)"/><text x="33.3236%" y="159.50"></text></g><g><title>specialization_graph_of (1,519,908 samples, 1.01%)</title><rect x="33.0843%" y="133" width="1.0110%" height="15" fill="rgb(209,12,38)"/><text x="33.3343%" y="143.50"></text></g><g><title>coherence_checking (1,623,538 samples, 1.08%)</title><rect x="33.0669%" y="165" width="1.0800%" height="15" fill="rgb(227,1,9)"/><text x="33.3169%" y="175.50"></text></g><g><title>associated_item (1,084,643 samples, 0.72%)</title><rect x="50.9212%" y="101" width="0.7215%" height="15" fill="rgb(248,47,43)"/><text x="51.1712%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (848,781 samples, 0.56%)</title><rect x="51.0781%" y="85" width="0.5646%" height="15" fill="rgb(221,10,30)"/><text x="51.3281%" y="95.50"></text></g><g><title>associated_items (1,723,208 samples, 1.15%)</title><rect x="50.5253%" y="117" width="1.1463%" height="15" fill="rgb(210,229,1)"/><text x="50.7753%" y="127.50"></text></g><g><title>dropck_outlives (203,872 samples, 0.14%)</title><rect x="51.7022%" y="117" width="0.1356%" height="15" fill="rgb(222,148,37)"/><text x="51.9522%" y="127.50"></text></g><g><title>impl_trait_ref (160,060 samples, 0.11%)</title><rect x="52.5773%" y="101" width="0.1065%" height="15" fill="rgb(234,67,33)"/><text x="52.8273%" y="111.50"></text></g><g><title>predicates_of (224,393 samples, 0.15%)</title><rect x="52.6937%" y="101" width="0.1493%" height="15" fill="rgb(247,98,35)"/><text x="52.9437%" y="111.50"></text></g><g><title>specializes (331,512 samples, 0.22%)</title><rect x="52.8430%" y="101" width="0.2205%" height="15" fill="rgb(247,138,52)"/><text x="53.0930%" y="111.50"></text></g><g><title>param_env (252,691 samples, 0.17%)</title><rect x="52.8954%" y="85" width="0.1681%" height="15" fill="rgb(213,79,30)"/><text x="53.1454%" y="95.50"></text></g><g><title>def_span (170,320 samples, 0.11%)</title><rect x="52.9502%" y="69" width="0.1133%" height="15" fill="rgb(246,177,23)"/><text x="53.2002%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (161,210 samples, 0.11%)</title><rect x="52.9562%" y="53" width="0.1072%" height="15" fill="rgb(230,62,27)"/><text x="53.2062%" y="63.50"></text></g><g><title>trait_impls_of (539,937 samples, 0.36%)</title><rect x="53.0708%" y="101" width="0.3592%" height="15" fill="rgb(216,154,8)"/><text x="53.3208%" y="111.50"></text></g><g><title>implementations_of_trait (187,382 samples, 0.12%)</title><rect x="53.3053%" y="85" width="0.1246%" height="15" fill="rgb(244,35,45)"/><text x="53.5553%" y="95.50"></text></g><g><title>evaluate_obligation (2,399,089 samples, 1.60%)</title><rect x="51.8378%" y="117" width="1.5958%" height="15" fill="rgb(251,115,12)"/><text x="52.0878%" y="127.50"></text></g><g><title>method_autoderef_steps (298,865 samples, 0.20%)</title><rect x="53.8100%" y="117" width="0.1988%" height="15" fill="rgb(240,54,50)"/><text x="54.0600%" y="127.50"></text></g><g><title>explicit_predicates_of (238,592 samples, 0.16%)</title><rect x="54.5317%" y="69" width="0.1587%" height="15" fill="rgb(233,84,52)"/><text x="54.7817%" y="79.50"></text></g><g><title>param_env (976,130 samples, 0.65%)</title><rect x="54.0560%" y="117" width="0.6493%" height="15" fill="rgb(207,117,47)"/><text x="54.3060%" y="127.50"></text></g><g><title>predicates_of (425,425 samples, 0.28%)</title><rect x="54.4223%" y="101" width="0.2830%" height="15" fill="rgb(249,43,39)"/><text x="54.6723%" y="111.50"></text></g><g><title>predicates_defined_on (363,594 samples, 0.24%)</title><rect x="54.4635%" y="85" width="0.2419%" height="15" fill="rgb(209,38,44)"/><text x="54.7135%" y="95.50"></text></g><g><title>predicates_of (296,445 samples, 0.20%)</title><rect x="54.7269%" y="117" width="0.1972%" height="15" fill="rgb(236,212,23)"/><text x="54.9769%" y="127.50"></text></g><g><title>predicates_defined_on (201,704 samples, 0.13%)</title><rect x="54.7899%" y="101" width="0.1342%" height="15" fill="rgb(242,79,21)"/><text x="55.0399%" y="111.50"></text></g><g><title>region_scope_tree (215,592 samples, 0.14%)</title><rect x="54.9241%" y="117" width="0.1434%" height="15" fill="rgb(211,96,35)"/><text x="55.1741%" y="127.50"></text></g><g><title>item_bodies_checking (31,573,922 samples, 21.00%)</title><rect x="34.1902%" y="165" width="21.0025%" height="15" fill="rgb(253,215,40)"/><text x="34.4402%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (31,570,852 samples, 21.00%)</title><rect x="34.1922%" y="149" width="21.0005%" height="15" fill="rgb(211,81,21)"/><text x="34.4422%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (31,281,581 samples, 20.81%)</title><rect x="34.3846%" y="133" width="20.8081%" height="15" fill="rgb(208,190,38)"/><text x="34.6346%" y="143.50">typeck</text></g><g><title>impl_trait_ref (321,672 samples, 0.21%)</title><rect x="57.0832%" y="85" width="0.2140%" height="15" fill="rgb(235,213,38)"/><text x="57.3332%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (302,452 samples, 0.20%)</title><rect x="57.0960%" y="69" width="0.2012%" height="15" fill="rgb(237,122,38)"/><text x="57.3460%" y="79.50"></text></g><g><title>adt_destructor (532,036 samples, 0.35%)</title><rect x="56.9632%" y="133" width="0.3539%" height="15" fill="rgb(244,218,35)"/><text x="57.2132%" y="143.50"></text></g><g><title>coherent_trait (529,036 samples, 0.35%)</title><rect x="56.9652%" y="117" width="0.3519%" height="15" fill="rgb(240,68,47)"/><text x="57.2152%" y="127.50"></text></g><g><title>specialization_graph_of (527,116 samples, 0.35%)</title><rect x="56.9665%" y="101" width="0.3506%" height="15" fill="rgb(210,16,53)"/><text x="57.2165%" y="111.50"></text></g><g><title>item_types_checking (3,404,069 samples, 2.26%)</title><rect x="55.1927%" y="165" width="2.2643%" height="15" fill="rgb(235,124,12)"/><text x="55.4427%" y="175.50">i..</text></g><g><title>check_mod_item_types (3,401,959 samples, 2.26%)</title><rect x="55.1941%" y="149" width="2.2629%" height="15" fill="rgb(224,169,11)"/><text x="55.4441%" y="159.50">c..</text></g><g><title>impl_item_implementor_ids (196,282 samples, 0.13%)</title><rect x="57.3265%" y="133" width="0.1306%" height="15" fill="rgb(250,166,2)"/><text x="57.5765%" y="143.50"></text></g><g><title>fn_sig (442,917 samples, 0.29%)</title><rect x="57.7878%" y="133" width="0.2946%" height="15" fill="rgb(242,216,29)"/><text x="58.0378%" y="143.50"></text></g><g><title>is_late_bound_map (152,963 samples, 0.10%)</title><rect x="58.2475%" y="117" width="0.1017%" height="15" fill="rgb(230,116,27)"/><text x="58.4975%" y="127.50"></text></g><g><title>named_region_map (701,824 samples, 0.47%)</title><rect x="58.3492%" y="117" width="0.4668%" height="15" fill="rgb(228,99,48)"/><text x="58.5992%" y="127.50"></text></g><g><title>resolve_lifetimes (631,294 samples, 0.42%)</title><rect x="58.3962%" y="101" width="0.4199%" height="15" fill="rgb(253,11,6)"/><text x="58.6462%" y="111.50"></text></g><g><title>generics_of (1,133,009 samples, 0.75%)</title><rect x="58.0825%" y="133" width="0.7537%" height="15" fill="rgb(247,143,39)"/><text x="58.3325%" y="143.50"></text></g><g><title>explicit_predicates_of (327,753 samples, 0.22%)</title><rect x="59.0833%" y="101" width="0.2180%" height="15" fill="rgb(236,97,10)"/><text x="59.3333%" y="111.50"></text></g><g><title>predicates_of (678,657 samples, 0.45%)</title><rect x="58.8939%" y="133" width="0.4514%" height="15" fill="rgb(233,208,19)"/><text x="59.1439%" y="143.50"></text></g><g><title>predicates_defined_on (569,446 samples, 0.38%)</title><rect x="58.9665%" y="117" width="0.3788%" height="15" fill="rgb(216,164,2)"/><text x="59.2165%" y="127.50"></text></g><g><title>type_collecting (3,172,686 samples, 2.11%)</title><rect x="57.4583%" y="165" width="2.1104%" height="15" fill="rgb(220,129,5)"/><text x="57.7083%" y="175.50">t..</text></g><g><title>collect_mod_item_types (3,162,356 samples, 2.10%)</title><rect x="57.4652%" y="149" width="2.1036%" height="15" fill="rgb(242,17,10)"/><text x="57.7152%" y="159.50">c..</text></g><g><title>type_of (309,021 samples, 0.21%)</title><rect x="59.3632%" y="133" width="0.2056%" height="15" fill="rgb(242,107,0)"/><text x="59.6132%" y="143.50"></text></g><g><title>evaluate_obligation (1,678,874 samples, 1.12%)</title><rect x="63.2448%" y="133" width="1.1168%" height="15" fill="rgb(251,28,31)"/><text x="63.4948%" y="143.50"></text></g><g><title>implied_outlives_bounds (634,354 samples, 0.42%)</title><rect x="64.3615%" y="133" width="0.4220%" height="15" fill="rgb(233,223,10)"/><text x="64.6115%" y="143.50"></text></g><g><title>param_env (639,407 samples, 0.43%)</title><rect x="64.7835%" y="133" width="0.4253%" height="15" fill="rgb(215,21,27)"/><text x="65.0335%" y="143.50"></text></g><g><title>check_impl_item_well_formed (8,498,162 samples, 5.65%)</title><rect x="59.8668%" y="149" width="5.6529%" height="15" fill="rgb(232,23,21)"/><text x="60.1168%" y="159.50">check_i..</text></g><g><title>region_scope_tree (467,276 samples, 0.31%)</title><rect x="65.2088%" y="133" width="0.3108%" height="15" fill="rgb(244,5,23)"/><text x="65.4588%" y="143.50"></text></g><g><title>evaluate_obligation (2,501,435 samples, 1.66%)</title><rect x="67.3498%" y="133" width="1.6639%" height="15" fill="rgb(226,81,46)"/><text x="67.5998%" y="143.50"></text></g><g><title>implied_outlives_bounds (197,603 samples, 0.13%)</title><rect x="69.0488%" y="133" width="0.1314%" height="15" fill="rgb(247,70,30)"/><text x="69.2988%" y="143.50"></text></g><g><title>param_env (710,060 samples, 0.47%)</title><rect x="69.1803%" y="133" width="0.4723%" height="15" fill="rgb(212,68,19)"/><text x="69.4303%" y="143.50"></text></g><g><title>check_item_well_formed (6,401,071 samples, 4.26%)</title><rect x="65.5197%" y="149" width="4.2579%" height="15" fill="rgb(240,187,13)"/><text x="65.7697%" y="159.50">check..</text></g><g><title>analysis (104,667,832 samples, 69.62%)</title><rect x="0.4987%" y="197" width="69.6236%" height="15" fill="rgb(223,113,26)"/><text x="0.7487%" y="207.50">analysis</text></g><g><title>type_check_crate (55,828,175 samples, 37.14%)</title><rect x="32.9861%" y="181" width="37.1361%" height="15" fill="rgb(206,192,2)"/><text x="33.2361%" y="191.50">type_check_crate</text></g><g><title>wf_checking (15,849,737 samples, 10.54%)</title><rect x="59.5792%" y="165" width="10.5430%" height="15" fill="rgb(241,108,4)"/><text x="59.8292%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (518,155 samples, 0.34%)</title><rect x="69.7776%" y="149" width="0.3447%" height="15" fill="rgb(247,173,49)"/><text x="70.0276%" y="159.50"></text></g><g><title>codegen_crate (641,067 samples, 0.43%)</title><rect x="70.1305%" y="197" width="0.4264%" height="15" fill="rgb(224,114,35)"/><text x="70.3805%" y="207.50"></text></g><g><title>AST_validation (195,842 samples, 0.13%)</title><rect x="70.7010%" y="181" width="0.1303%" height="15" fill="rgb(245,159,27)"/><text x="70.9510%" y="191.50"></text></g><g><title>metadata_load_macro (318,385 samples, 0.21%)</title><rect x="86.4018%" y="149" width="0.2118%" height="15" fill="rgb(245,172,44)"/><text x="86.6518%" y="159.50"></text></g><g><title>macro_expand_crate (26,264,104 samples, 17.47%)</title><rect x="70.9315%" y="181" width="17.4705%" height="15" fill="rgb(236,23,11)"/><text x="71.1815%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (26,248,884 samples, 17.46%)</title><rect x="70.9417%" y="165" width="17.4604%" height="15" fill="rgb(205,117,38)"/><text x="71.1917%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,688,610 samples, 1.79%)</title><rect x="86.6136%" y="149" width="1.7884%" height="15" fill="rgb(237,72,25)"/><text x="86.8636%" y="159.50">m..</text></g><g><title>metadata_register_crate (949,960 samples, 0.63%)</title><rect x="87.7702%" y="133" width="0.6319%" height="15" fill="rgb(244,70,9)"/><text x="88.0202%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (179,192 samples, 0.12%)</title><rect x="88.4048%" y="181" width="0.1192%" height="15" fill="rgb(217,125,39)"/><text x="88.6548%" y="191.50"></text></g><g><title>finalize_imports (285,843 samples, 0.19%)</title><rect x="88.5278%" y="165" width="0.1901%" height="15" fill="rgb(235,36,10)"/><text x="88.7778%" y="175.50"></text></g><g><title>late_resolve_crate (2,348,227 samples, 1.56%)</title><rect x="88.7935%" y="165" width="1.5620%" height="15" fill="rgb(251,123,47)"/><text x="89.0435%" y="175.50"></text></g><g><title>configure_and_expand (29,855,144 samples, 19.86%)</title><rect x="70.5569%" y="197" width="19.8592%" height="15" fill="rgb(221,13,13)"/><text x="70.8069%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,844,592 samples, 1.89%)</title><rect x="88.5239%" y="181" width="1.8922%" height="15" fill="rgb(238,131,9)"/><text x="88.7739%" y="191.50">r..</text></g><g><title>drop_ast (221,543 samples, 0.15%)</title><rect x="90.4161%" y="197" width="0.1474%" height="15" fill="rgb(211,50,8)"/><text x="90.6661%" y="207.50"></text></g><g><title>early_lint_checks (281,653 samples, 0.19%)</title><rect x="90.5739%" y="197" width="0.1874%" height="15" fill="rgb(245,182,24)"/><text x="90.8239%" y="207.50"></text></g><g><title>free_global_ctxt (3,532,399 samples, 2.35%)</title><rect x="90.7612%" y="197" width="2.3497%" height="15" fill="rgb(242,14,37)"/><text x="91.0112%" y="207.50">f..</text></g><g><title>mir_for_ctfe (274,612 samples, 0.18%)</title><rect x="94.2390%" y="181" width="0.1827%" height="15" fill="rgb(246,228,12)"/><text x="94.4890%" y="191.50"></text></g><g><title>generate_crate_metadata (2,103,923 samples, 1.40%)</title><rect x="93.1109%" y="197" width="1.3995%" height="15" fill="rgb(213,55,15)"/><text x="93.3609%" y="207.50"></text></g><g><title>hir_lowering (3,588,290 samples, 2.39%)</title><rect x="94.5104%" y="197" width="2.3869%" height="15" fill="rgb(209,9,3)"/><text x="94.7604%" y="207.50">hi..</text></g><g><title>parse_crate (3,061,014 samples, 2.04%)</title><rect x="96.9314%" y="197" width="2.0361%" height="15" fill="rgb(230,59,30)"/><text x="97.1814%" y="207.50">p..</text></g><g><title>prepare_outputs (190,953 samples, 0.13%)</title><rect x="98.9740%" y="197" width="0.1270%" height="15" fill="rgb(209,121,21)"/><text x="99.2240%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (847,220 samples, 0.56%)</title><rect x="99.1010%" y="197" width="0.5636%" height="15" fill="rgb(220,109,13)"/><text x="99.3510%" y="207.50"></text></g><g><title>all (150,333,903 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (150,333,903 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (398,295 samples, 0.26%)</title><rect x="99.7351%" y="197" width="0.2649%" height="15" fill="rgb(224,123,36)"/><text x="99.9851%" y="207.50"></text></g></svg></svg>