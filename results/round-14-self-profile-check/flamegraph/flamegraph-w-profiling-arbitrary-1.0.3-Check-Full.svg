<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,111,256 samples, 0.11%)</title><rect x="16.0980%" y="133" width="0.1119%" height="15" fill="rgb(227,0,7)"/><text x="16.3480%" y="143.50"></text></g><g><title>is_sized_raw (5,428,331 samples, 0.55%)</title><rect x="16.2495%" y="133" width="0.5464%" height="15" fill="rgb(217,0,24)"/><text x="16.4995%" y="143.50"></text></g><g><title>evaluate_obligation (3,723,482 samples, 0.37%)</title><rect x="16.4212%" y="117" width="0.3748%" height="15" fill="rgb(221,193,54)"/><text x="16.6712%" y="127.50"></text></g><g><title>is_copy_raw (43,939,693 samples, 4.42%)</title><rect x="22.6654%" y="53" width="4.4231%" height="15" fill="rgb(248,212,6)"/><text x="22.9154%" y="63.50">is_co..</text></g><g><title>evaluate_obligation (36,080,958 samples, 3.63%)</title><rect x="23.4564%" y="37" width="3.6320%" height="15" fill="rgb(208,68,35)"/><text x="23.7064%" y="47.50">eval..</text></g><g><title>needs_drop_raw (46,504,681 samples, 4.68%)</title><rect x="22.4075%" y="69" width="4.6813%" height="15" fill="rgb(232,128,0)"/><text x="22.6575%" y="79.50">needs..</text></g><g><title>codegen_fulfill_obligation (4,711,362 samples, 0.47%)</title><rect x="27.2236%" y="53" width="0.4743%" height="15" fill="rgb(207,160,47)"/><text x="27.4736%" y="63.50"></text></g><g><title>resolve_instance (7,200,969 samples, 0.72%)</title><rect x="27.0887%" y="69" width="0.7249%" height="15" fill="rgb(228,23,34)"/><text x="27.3387%" y="79.50"></text></g><g><title>thir_body (9,952,911 samples, 1.00%)</title><rect x="27.8288%" y="69" width="1.0019%" height="15" fill="rgb(218,30,26)"/><text x="28.0788%" y="79.50"></text></g><g><title>mir_const (111,637,688 samples, 11.24%)</title><rect x="17.6041%" y="117" width="11.2377%" height="15" fill="rgb(220,122,19)"/><text x="17.8541%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (103,088,132 samples, 10.38%)</title><rect x="18.4647%" y="101" width="10.3771%" height="15" fill="rgb(250,228,42)"/><text x="18.7147%" y="111.50">unsafety_check_..</text></g><g><title>mir_built (97,815,874 samples, 9.85%)</title><rect x="18.9954%" y="85" width="9.8463%" height="15" fill="rgb(240,193,28)"/><text x="19.2454%" y="95.50">mir_built</text></g><g><title>mir_promoted (120,334,189 samples, 12.11%)</title><rect x="16.8234%" y="133" width="12.1131%" height="15" fill="rgb(216,20,37)"/><text x="17.0734%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (24,600,564 samples, 2.48%)</title><rect x="28.9371%" y="133" width="2.4763%" height="15" fill="rgb(206,188,39)"/><text x="29.1871%" y="143.50">ty..</text></g><g><title>type_op_normalize_fn_sig (20,008,419 samples, 2.01%)</title><rect x="31.4134%" y="133" width="2.0141%" height="15" fill="rgb(217,207,13)"/><text x="31.6634%" y="143.50">t..</text></g><g><title>normalize_projection_ty (13,275,686 samples, 1.34%)</title><rect x="32.0911%" y="117" width="1.3364%" height="15" fill="rgb(231,73,38)"/><text x="32.3411%" y="127.50"></text></g><g><title>type_op_normalize_predicate (18,311,580 samples, 1.84%)</title><rect x="33.4275%" y="133" width="1.8433%" height="15" fill="rgb(225,20,46)"/><text x="33.6775%" y="143.50">t..</text></g><g><title>normalize_projection_ty (13,010,007 samples, 1.31%)</title><rect x="33.9611%" y="117" width="1.3096%" height="15" fill="rgb(210,31,41)"/><text x="34.2111%" y="127.50"></text></g><g><title>type_op_prove_predicate (61,063,349 samples, 6.15%)</title><rect x="35.2984%" y="133" width="6.1468%" height="15" fill="rgb(221,200,47)"/><text x="35.5484%" y="143.50">type_op_..</text></g><g><title>MIR_borrow_checking (409,259,686 samples, 41.20%)</title><rect x="0.2490%" y="165" width="41.1969%" height="15" fill="rgb(226,26,5)"/><text x="0.4990%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (408,532,540 samples, 41.12%)</title><rect x="0.3222%" y="149" width="41.1237%" height="15" fill="rgb(249,33,26)"/><text x="0.5722%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,036,061 samples, 0.10%)</title><rect x="41.5095%" y="165" width="0.1043%" height="15" fill="rgb(235,183,28)"/><text x="41.7595%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,039,095 samples, 0.10%)</title><rect x="41.8187%" y="133" width="0.1046%" height="15" fill="rgb(221,5,38)"/><text x="42.0687%" y="143.50"></text></g><g><title>check_mod_attrs (3,042,892 samples, 0.31%)</title><rect x="41.6170%" y="149" width="0.3063%" height="15" fill="rgb(247,18,42)"/><text x="41.8670%" y="159.50"></text></g><g><title>lint_levels (2,438,717 samples, 0.25%)</title><rect x="42.0930%" y="133" width="0.2455%" height="15" fill="rgb(241,131,45)"/><text x="42.3430%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,877,134 samples, 0.39%)</title><rect x="42.0225%" y="149" width="0.3903%" height="15" fill="rgb(249,31,29)"/><text x="42.2725%" y="159.50"></text></g><g><title>misc_checking_1 (8,051,119 samples, 0.81%)</title><rect x="41.6138%" y="165" width="0.8104%" height="15" fill="rgb(225,111,53)"/><text x="41.8638%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,366,588 samples, 0.44%)</title><rect x="42.4245%" y="149" width="0.4395%" height="15" fill="rgb(238,160,17)"/><text x="42.6745%" y="159.50"></text></g><g><title>check_mod_liveness (3,784,730 samples, 0.38%)</title><rect x="42.4830%" y="133" width="0.3810%" height="15" fill="rgb(214,148,48)"/><text x="42.7330%" y="143.50"></text></g><g><title>misc_checking_2 (10,157,562 samples, 1.02%)</title><rect x="42.4243%" y="165" width="1.0225%" height="15" fill="rgb(232,36,49)"/><text x="42.6743%" y="175.50"></text></g><g><title>match_checking (5,788,904 samples, 0.58%)</title><rect x="42.8640%" y="149" width="0.5827%" height="15" fill="rgb(209,103,24)"/><text x="43.1140%" y="159.50"></text></g><g><title>check_match (5,618,864 samples, 0.57%)</title><rect x="42.8811%" y="133" width="0.5656%" height="15" fill="rgb(229,88,8)"/><text x="43.1311%" y="143.50"></text></g><g><title>death_checking (1,781,520 samples, 0.18%)</title><rect x="43.5429%" y="149" width="0.1793%" height="15" fill="rgb(213,181,19)"/><text x="43.7929%" y="159.50"></text></g><g><title>crate_lints (5,238,977 samples, 0.53%)</title><rect x="43.7225%" y="133" width="0.5274%" height="15" fill="rgb(254,191,54)"/><text x="43.9725%" y="143.50"></text></g><g><title>type_of (1,203,715 samples, 0.12%)</title><rect x="44.1287%" y="117" width="0.1212%" height="15" fill="rgb(241,83,37)"/><text x="44.3787%" y="127.50"></text></g><g><title>lint_checking (10,601,847 samples, 1.07%)</title><rect x="43.7222%" y="149" width="1.0672%" height="15" fill="rgb(233,36,39)"/><text x="43.9722%" y="159.50"></text></g><g><title>module_lints (5,360,000 samples, 0.54%)</title><rect x="44.2499%" y="133" width="0.5395%" height="15" fill="rgb(226,3,54)"/><text x="44.4999%" y="143.50"></text></g><g><title>lint_mod (5,352,090 samples, 0.54%)</title><rect x="44.2507%" y="117" width="0.5388%" height="15" fill="rgb(245,192,40)"/><text x="44.5007%" y="127.50"></text></g><g><title>privacy_access_levels (1,710,709 samples, 0.17%)</title><rect x="44.7894%" y="149" width="0.1722%" height="15" fill="rgb(238,167,29)"/><text x="45.0394%" y="159.50"></text></g><g><title>privacy_checking_modules (7,449,242 samples, 0.75%)</title><rect x="44.9616%" y="149" width="0.7499%" height="15" fill="rgb(232,182,51)"/><text x="45.2116%" y="159.50"></text></g><g><title>check_mod_privacy (7,443,942 samples, 0.75%)</title><rect x="44.9622%" y="133" width="0.7493%" height="15" fill="rgb(231,60,39)"/><text x="45.2122%" y="143.50"></text></g><g><title>misc_checking_3 (22,582,560 samples, 2.27%)</title><rect x="43.4467%" y="165" width="2.2732%" height="15" fill="rgb(208,69,12)"/><text x="43.6967%" y="175.50">m..</text></g><g><title>impl_parent (1,777,867 samples, 0.18%)</title><rect x="46.0597%" y="101" width="0.1790%" height="15" fill="rgb(235,93,37)"/><text x="46.3097%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,096,552 samples, 0.11%)</title><rect x="46.1283%" y="85" width="0.1104%" height="15" fill="rgb(213,116,39)"/><text x="46.3783%" y="95.50"></text></g><g><title>impl_trait_ref (4,412,979 samples, 0.44%)</title><rect x="46.2387%" y="101" width="0.4442%" height="15" fill="rgb(222,207,29)"/><text x="46.4887%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,520,291 samples, 0.35%)</title><rect x="46.3286%" y="85" width="0.3544%" height="15" fill="rgb(206,96,30)"/><text x="46.5786%" y="95.50"></text></g><g><title>coherent_trait (9,804,968 samples, 0.99%)</title><rect x="45.7528%" y="133" width="0.9870%" height="15" fill="rgb(218,138,4)"/><text x="46.0028%" y="143.50"></text></g><g><title>specialization_graph_of (9,449,275 samples, 0.95%)</title><rect x="45.7886%" y="117" width="0.9512%" height="15" fill="rgb(250,191,14)"/><text x="46.0386%" y="127.50"></text></g><g><title>coherence_checking (9,952,620 samples, 1.00%)</title><rect x="45.7501%" y="149" width="1.0019%" height="15" fill="rgb(239,60,40)"/><text x="46.0001%" y="159.50"></text></g><g><title>associated_item (2,016,823 samples, 0.20%)</title><rect x="79.9610%" y="85" width="0.2030%" height="15" fill="rgb(206,27,48)"/><text x="80.2110%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,612,653 samples, 0.16%)</title><rect x="80.0017%" y="69" width="0.1623%" height="15" fill="rgb(225,35,8)"/><text x="80.2517%" y="79.50"></text></g><g><title>associated_items (2,832,617 samples, 0.29%)</title><rect x="79.8906%" y="101" width="0.2851%" height="15" fill="rgb(250,213,24)"/><text x="80.1406%" y="111.50"></text></g><g><title>dropck_outlives (7,381,317 samples, 0.74%)</title><rect x="80.2086%" y="101" width="0.7430%" height="15" fill="rgb(247,123,22)"/><text x="80.4586%" y="111.50"></text></g><g><title>mir_borrowck (1,078,122 samples, 0.11%)</title><rect x="81.1446%" y="37" width="0.1085%" height="15" fill="rgb(231,138,38)"/><text x="81.3946%" y="47.50"></text></g><g><title>mir_for_ctfe (1,590,498 samples, 0.16%)</title><rect x="81.0935%" y="69" width="0.1601%" height="15" fill="rgb(231,145,46)"/><text x="81.3435%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,455,227 samples, 0.15%)</title><rect x="81.1071%" y="53" width="0.1465%" height="15" fill="rgb(251,118,11)"/><text x="81.3571%" y="63.50"></text></g><g><title>eval_to_const_value_raw (3,017,194 samples, 0.30%)</title><rect x="80.9516%" y="101" width="0.3037%" height="15" fill="rgb(217,147,25)"/><text x="81.2016%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,975,803 samples, 0.30%)</title><rect x="80.9558%" y="85" width="0.2996%" height="15" fill="rgb(247,81,37)"/><text x="81.2058%" y="95.50"></text></g><g><title>specializes (1,381,254 samples, 0.14%)</title><rect x="82.1102%" y="85" width="0.1390%" height="15" fill="rgb(209,12,38)"/><text x="82.3602%" y="95.50"></text></g><g><title>evaluate_obligation (10,490,374 samples, 1.06%)</title><rect x="81.2553%" y="101" width="1.0560%" height="15" fill="rgb(227,1,9)"/><text x="81.5053%" y="111.50"></text></g><g><title>evaluate_obligation (1,070,872 samples, 0.11%)</title><rect x="83.8499%" y="85" width="0.1078%" height="15" fill="rgb(248,47,43)"/><text x="84.0999%" y="95.50"></text></g><g><title>typeck (12,502,559 samples, 1.26%)</title><rect x="82.8775%" y="101" width="1.2585%" height="15" fill="rgb(221,10,30)"/><text x="83.1275%" y="111.50"></text></g><g><title>item_bodies_checking (371,592,029 samples, 37.41%)</title><rect x="46.7669%" y="149" width="37.4052%" height="15" fill="rgb(210,229,1)"/><text x="47.0169%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (371,587,549 samples, 37.40%)</title><rect x="46.7674%" y="133" width="37.4047%" height="15" fill="rgb(222,148,37)"/><text x="47.0174%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (371,091,252 samples, 37.35%)</title><rect x="46.8173%" y="117" width="37.3548%" height="15" fill="rgb(234,67,33)"/><text x="47.0673%" y="127.50">typeck</text></g><g><title>item_types_checking (5,649,793 samples, 0.57%)</title><rect x="84.1721%" y="149" width="0.5687%" height="15" fill="rgb(247,98,35)"/><text x="84.4221%" y="159.50"></text></g><g><title>check_mod_item_types (5,644,383 samples, 0.57%)</title><rect x="84.1726%" y="133" width="0.5682%" height="15" fill="rgb(247,138,52)"/><text x="84.4226%" y="143.50"></text></g><g><title>fn_sig (1,293,703 samples, 0.13%)</title><rect x="84.8812%" y="117" width="0.1302%" height="15" fill="rgb(213,79,30)"/><text x="85.1312%" y="127.50"></text></g><g><title>resolve_lifetimes (2,024,189 samples, 0.20%)</title><rect x="85.0751%" y="85" width="0.2038%" height="15" fill="rgb(246,177,23)"/><text x="85.3251%" y="95.50"></text></g><g><title>is_late_bound_map (2,168,371 samples, 0.22%)</title><rect x="85.0632%" y="101" width="0.2183%" height="15" fill="rgb(230,62,27)"/><text x="85.3132%" y="111.50"></text></g><g><title>generics_of (2,836,646 samples, 0.29%)</title><rect x="85.0115%" y="117" width="0.2855%" height="15" fill="rgb(216,154,8)"/><text x="85.2615%" y="127.50"></text></g><g><title>explicit_predicates_of (1,174,633 samples, 0.12%)</title><rect x="85.3730%" y="85" width="0.1182%" height="15" fill="rgb(244,35,45)"/><text x="85.6230%" y="95.50"></text></g><g><title>predicates_of (1,926,577 samples, 0.19%)</title><rect x="85.3215%" y="117" width="0.1939%" height="15" fill="rgb(251,115,12)"/><text x="85.5715%" y="127.50"></text></g><g><title>predicates_defined_on (1,733,636 samples, 0.17%)</title><rect x="85.3409%" y="101" width="0.1745%" height="15" fill="rgb(240,54,50)"/><text x="85.5909%" y="111.50"></text></g><g><title>type_collecting (8,683,746 samples, 0.87%)</title><rect x="84.7413%" y="149" width="0.8741%" height="15" fill="rgb(233,84,52)"/><text x="84.9913%" y="159.50"></text></g><g><title>collect_mod_item_types (8,670,526 samples, 0.87%)</title><rect x="84.7426%" y="133" width="0.8728%" height="15" fill="rgb(207,117,47)"/><text x="84.9926%" y="143.50"></text></g><g><title>evaluate_obligation (1,055,022 samples, 0.11%)</title><rect x="87.1242%" y="117" width="0.1062%" height="15" fill="rgb(249,43,39)"/><text x="87.3742%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,677,873 samples, 0.17%)</title><rect x="87.2341%" y="117" width="0.1689%" height="15" fill="rgb(209,38,44)"/><text x="87.4841%" y="127.50"></text></g><g><title>param_env (2,506,777 samples, 0.25%)</title><rect x="87.4030%" y="117" width="0.2523%" height="15" fill="rgb(236,212,23)"/><text x="87.6530%" y="127.50"></text></g><g><title>region_scope_tree (2,987,186 samples, 0.30%)</title><rect x="87.6591%" y="117" width="0.3007%" height="15" fill="rgb(242,79,21)"/><text x="87.9091%" y="127.50"></text></g><g><title>check_impl_item_well_formed (22,578,486 samples, 2.27%)</title><rect x="85.7148%" y="133" width="2.2728%" height="15" fill="rgb(211,96,35)"/><text x="85.9648%" y="143.50">c..</text></g><g><title>adt_sized_constraint (1,131,496 samples, 0.11%)</title><rect x="89.2400%" y="117" width="0.1139%" height="15" fill="rgb(253,215,40)"/><text x="89.4900%" y="127.50"></text></g><g><title>evaluate_obligation (4,008,288 samples, 0.40%)</title><rect x="89.3539%" y="117" width="0.4035%" height="15" fill="rgb(211,81,21)"/><text x="89.6039%" y="127.50"></text></g><g><title>check_item_well_formed (20,264,320 samples, 2.04%)</title><rect x="87.9876%" y="133" width="2.0398%" height="15" fill="rgb(208,190,38)"/><text x="88.2376%" y="143.50">c..</text></g><g><title>analysis (894,436,021 samples, 90.04%)</title><rect x="0.0735%" y="181" width="90.0357%" height="15" fill="rgb(235,213,38)"/><text x="0.3235%" y="191.50">analysis</text></g><g><title>type_check_crate (440,973,856 samples, 44.39%)</title><rect x="45.7199%" y="165" width="44.3893%" height="15" fill="rgb(237,122,38)"/><text x="45.9699%" y="175.50">type_check_crate</text></g><g><title>wf_checking (44,611,643 samples, 4.49%)</title><rect x="85.6186%" y="149" width="4.4907%" height="15" fill="rgb(244,218,35)"/><text x="85.8686%" y="159.50">wf_ch..</text></g><g><title>metadata_register_crate (2,275,195 samples, 0.23%)</title><rect x="93.8553%" y="133" width="0.2290%" height="15" fill="rgb(240,68,47)"/><text x="94.1053%" y="143.50"></text></g><g><title>macro_expand_crate (38,225,062 samples, 3.85%)</title><rect x="90.2644%" y="165" width="3.8478%" height="15" fill="rgb(210,16,53)"/><text x="90.5144%" y="175.50">macr..</text></g><g><title>expand_crate (38,202,552 samples, 3.85%)</title><rect x="90.2667%" y="149" width="3.8455%" height="15" fill="rgb(235,124,12)"/><text x="90.5167%" y="159.50">expa..</text></g><g><title>late_resolve_crate (7,284,811 samples, 0.73%)</title><rect x="94.1928%" y="149" width="0.7333%" height="15" fill="rgb(224,169,11)"/><text x="94.4428%" y="159.50"></text></g><g><title>configure_and_expand (47,866,160 samples, 4.82%)</title><rect x="90.1558%" y="181" width="4.8183%" height="15" fill="rgb(250,166,2)"/><text x="90.4058%" y="191.50">config..</text></g><g><title>resolve_crate (8,022,889 samples, 0.81%)</title><rect x="94.1665%" y="165" width="0.8076%" height="15" fill="rgb(242,216,29)"/><text x="94.4165%" y="175.50"></text></g><g><title>drop_ast (1,419,885 samples, 0.14%)</title><rect x="94.9741%" y="181" width="0.1429%" height="15" fill="rgb(230,116,27)"/><text x="95.2241%" y="191.50"></text></g><g><title>early_lint_checks (1,847,271 samples, 0.19%)</title><rect x="95.1188%" y="181" width="0.1859%" height="15" fill="rgb(228,99,48)"/><text x="95.3688%" y="191.50"></text></g><g><title>free_global_ctxt (7,963,018 samples, 0.80%)</title><rect x="95.3047%" y="181" width="0.8016%" height="15" fill="rgb(253,11,6)"/><text x="95.5547%" y="191.50"></text></g><g><title>generate_crate_metadata (5,578,582 samples, 0.56%)</title><rect x="96.1063%" y="181" width="0.5616%" height="15" fill="rgb(247,143,39)"/><text x="96.3563%" y="191.50"></text></g><g><title>hir_lowering (21,051,203 samples, 2.12%)</title><rect x="96.6678%" y="181" width="2.1191%" height="15" fill="rgb(236,97,10)"/><text x="96.9178%" y="191.50">h..</text></g><g><title>parse_crate (9,226,502 samples, 0.93%)</title><rect x="98.7952%" y="181" width="0.9288%" height="15" fill="rgb(233,208,19)"/><text x="99.0452%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,916,241 samples, 0.19%)</title><rect x="99.7455%" y="181" width="0.1929%" height="15" fill="rgb(216,164,2)"/><text x="99.9955%" y="191.50"></text></g><g><title>all (993,423,695 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (993,423,695 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>