<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (16,928,396 samples, 0.43%)</title><rect x="22.8221%" y="53" width="0.4262%" height="15" fill="rgb(227,0,7)"/><text x="23.0721%" y="63.50"></text></g><g><title>evaluate_obligation (13,653,738 samples, 0.34%)</title><rect x="22.9045%" y="37" width="0.3438%" height="15" fill="rgb(217,0,24)"/><text x="23.1545%" y="47.50"></text></g><g><title>needs_drop_raw (22,408,631 samples, 0.56%)</title><rect x="22.6908%" y="69" width="0.5642%" height="15" fill="rgb(221,193,54)"/><text x="22.9408%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (6,364,970 samples, 0.16%)</title><rect x="23.3409%" y="53" width="0.1603%" height="15" fill="rgb(248,212,6)"/><text x="23.5909%" y="63.50"></text></g><g><title>resolve_instance (11,083,992 samples, 0.28%)</title><rect x="23.2562%" y="69" width="0.2791%" height="15" fill="rgb(208,68,35)"/><text x="23.5062%" y="79.50"></text></g><g><title>thir_body (53,354,211 samples, 1.34%)</title><rect x="23.5611%" y="69" width="1.3434%" height="15" fill="rgb(232,128,0)"/><text x="23.8111%" y="79.50"></text></g><g><title>mir_const (289,831,610 samples, 7.30%)</title><rect x="17.6265%" y="117" width="7.2978%" height="15" fill="rgb(207,160,47)"/><text x="17.8765%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (253,446,289 samples, 6.38%)</title><rect x="18.5426%" y="101" width="6.3816%" height="15" fill="rgb(228,23,34)"/><text x="18.7926%" y="111.50">unsafety..</text></g><g><title>mir_built (229,933,012 samples, 5.79%)</title><rect x="19.1347%" y="85" width="5.7896%" height="15" fill="rgb(218,30,26)"/><text x="19.3847%" y="95.50">mir_bui..</text></g><g><title>mir_promoted (327,297,376 samples, 8.24%)</title><rect x="16.7524%" y="133" width="8.2411%" height="15" fill="rgb(220,122,19)"/><text x="17.0024%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (10,790,272 samples, 0.27%)</title><rect x="24.9939%" y="133" width="0.2717%" height="15" fill="rgb(250,228,42)"/><text x="25.2439%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (12,676,920 samples, 0.32%)</title><rect x="25.2656%" y="133" width="0.3192%" height="15" fill="rgb(240,193,28)"/><text x="25.5156%" y="143.50"></text></g><g><title>normalize_projection_ty (8,120,838 samples, 0.20%)</title><rect x="25.3803%" y="117" width="0.2045%" height="15" fill="rgb(216,20,37)"/><text x="25.6303%" y="127.50"></text></g><g><title>type_op_normalize_predicate (10,012,998 samples, 0.25%)</title><rect x="25.5848%" y="133" width="0.2521%" height="15" fill="rgb(206,188,39)"/><text x="25.8348%" y="143.50"></text></g><g><title>normalize_projection_ty (6,360,465 samples, 0.16%)</title><rect x="25.6767%" y="117" width="0.1602%" height="15" fill="rgb(217,207,13)"/><text x="25.9267%" y="127.50"></text></g><g><title>type_op_prove_predicate (58,260,968 samples, 1.47%)</title><rect x="25.8409%" y="133" width="1.4670%" height="15" fill="rgb(231,73,38)"/><text x="26.0909%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,073,793,879 samples, 27.04%)</title><rect x="0.2733%" y="165" width="27.0374%" height="15" fill="rgb(225,20,46)"/><text x="0.5233%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,065,934,440 samples, 26.84%)</title><rect x="0.4712%" y="149" width="26.8396%" height="15" fill="rgb(210,31,41)"/><text x="0.7212%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (5,599,185 samples, 0.14%)</title><rect x="27.3713%" y="165" width="0.1410%" height="15" fill="rgb(221,200,47)"/><text x="27.6213%" y="175.50"></text></g><g><title>codegen_fn_attrs (4,913,675 samples, 0.12%)</title><rect x="27.7515%" y="133" width="0.1237%" height="15" fill="rgb(226,26,5)"/><text x="28.0015%" y="143.50"></text></g><g><title>check_mod_attrs (14,307,757 samples, 0.36%)</title><rect x="27.5150%" y="149" width="0.3603%" height="15" fill="rgb(249,33,26)"/><text x="27.7650%" y="159.50"></text></g><g><title>check_mod_const_bodies (4,661,206 samples, 0.12%)</title><rect x="27.8753%" y="149" width="0.1174%" height="15" fill="rgb(235,183,28)"/><text x="28.1253%" y="159.50"></text></g><g><title>lint_levels (10,173,794 samples, 0.26%)</title><rect x="28.1919%" y="133" width="0.2562%" height="15" fill="rgb(221,5,38)"/><text x="28.4419%" y="143.50"></text></g><g><title>lookup_deprecation_entry (5,593,630 samples, 0.14%)</title><rect x="28.4481%" y="133" width="0.1408%" height="15" fill="rgb(247,18,42)"/><text x="28.6981%" y="143.50"></text></g><g><title>stability_index (5,331,389 samples, 0.13%)</title><rect x="28.4547%" y="117" width="0.1342%" height="15" fill="rgb(241,131,45)"/><text x="28.7047%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (19,906,333 samples, 0.50%)</title><rect x="28.0928%" y="149" width="0.5012%" height="15" fill="rgb(249,31,29)"/><text x="28.3428%" y="159.50"></text></g><g><title>misc_checking_1 (44,024,006 samples, 1.11%)</title><rect x="27.5123%" y="165" width="1.1085%" height="15" fill="rgb(225,111,53)"/><text x="27.7623%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (17,754,650 samples, 0.45%)</title><rect x="28.6209%" y="149" width="0.4471%" height="15" fill="rgb(238,160,17)"/><text x="28.8709%" y="159.50"></text></g><g><title>check_mod_liveness (13,791,844 samples, 0.35%)</title><rect x="28.7206%" y="133" width="0.3473%" height="15" fill="rgb(214,148,48)"/><text x="28.9706%" y="143.50"></text></g><g><title>misc_checking_2 (90,588,791 samples, 2.28%)</title><rect x="28.6208%" y="165" width="2.2810%" height="15" fill="rgb(232,36,49)"/><text x="28.8708%" y="175.50">m..</text></g><g><title>match_checking (72,830,451 samples, 1.83%)</title><rect x="29.0679%" y="149" width="1.8338%" height="15" fill="rgb(209,103,24)"/><text x="29.3179%" y="159.50">m..</text></g><g><title>check_match (70,984,554 samples, 1.79%)</title><rect x="29.1144%" y="133" width="1.7873%" height="15" fill="rgb(229,88,8)"/><text x="29.3644%" y="143.50">c..</text></g><g><title>check_private_in_public (10,317,337 samples, 0.26%)</title><rect x="30.9024%" y="149" width="0.2598%" height="15" fill="rgb(213,181,19)"/><text x="31.1524%" y="159.50"></text></g><g><title>death_checking (14,350,522 samples, 0.36%)</title><rect x="31.1622%" y="149" width="0.3613%" height="15" fill="rgb(254,191,54)"/><text x="31.4122%" y="159.50"></text></g><g><title>crate_lints (24,555,236 samples, 0.62%)</title><rect x="31.5236%" y="133" width="0.6183%" height="15" fill="rgb(241,83,37)"/><text x="31.7736%" y="143.50"></text></g><g><title>lint_checking (51,051,315 samples, 1.29%)</title><rect x="31.5235%" y="149" width="1.2854%" height="15" fill="rgb(233,36,39)"/><text x="31.7735%" y="159.50"></text></g><g><title>module_lints (26,492,518 samples, 0.67%)</title><rect x="32.1419%" y="133" width="0.6671%" height="15" fill="rgb(226,3,54)"/><text x="32.3919%" y="143.50"></text></g><g><title>lint_mod (26,451,808 samples, 0.67%)</title><rect x="32.1429%" y="117" width="0.6660%" height="15" fill="rgb(245,192,40)"/><text x="32.3929%" y="127.50"></text></g><g><title>privacy_access_levels (12,488,551 samples, 0.31%)</title><rect x="32.8090%" y="149" width="0.3145%" height="15" fill="rgb(238,167,29)"/><text x="33.0590%" y="159.50"></text></g><g><title>privacy_checking_modules (44,019,426 samples, 1.11%)</title><rect x="33.1234%" y="149" width="1.1084%" height="15" fill="rgb(232,182,51)"/><text x="33.3734%" y="159.50"></text></g><g><title>check_mod_privacy (43,985,606 samples, 1.11%)</title><rect x="33.1243%" y="133" width="1.1075%" height="15" fill="rgb(231,60,39)"/><text x="33.3743%" y="143.50"></text></g><g><title>misc_checking_3 (132,563,024 samples, 3.34%)</title><rect x="30.9017%" y="165" width="3.3379%" height="15" fill="rgb(208,69,12)"/><text x="31.1517%" y="175.50">mis..</text></g><g><title>impl_trait_ref (6,455,813 samples, 0.16%)</title><rect x="34.5504%" y="101" width="0.1626%" height="15" fill="rgb(235,93,37)"/><text x="34.8004%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,168,611 samples, 0.13%)</title><rect x="34.5828%" y="85" width="0.1301%" height="15" fill="rgb(213,116,39)"/><text x="34.8328%" y="95.50"></text></g><g><title>coherent_trait (18,077,653 samples, 0.46%)</title><rect x="34.2908%" y="133" width="0.4552%" height="15" fill="rgb(222,207,29)"/><text x="34.5408%" y="143.50"></text></g><g><title>specialization_graph_of (16,724,759 samples, 0.42%)</title><rect x="34.3249%" y="117" width="0.4211%" height="15" fill="rgb(206,96,30)"/><text x="34.5749%" y="127.50"></text></g><g><title>coherence_checking (19,051,734 samples, 0.48%)</title><rect x="34.2900%" y="149" width="0.4797%" height="15" fill="rgb(218,138,4)"/><text x="34.5400%" y="159.50"></text></g><g><title>dropck_outlives (4,957,657 samples, 0.12%)</title><rect x="56.7314%" y="101" width="0.1248%" height="15" fill="rgb(250,191,14)"/><text x="56.9814%" y="111.50"></text></g><g><title>evaluate_obligation (24,155,814 samples, 0.61%)</title><rect x="56.8642%" y="101" width="0.6082%" height="15" fill="rgb(239,60,40)"/><text x="57.1142%" y="111.50"></text></g><g><title>method_autoderef_steps (4,775,234 samples, 0.12%)</title><rect x="57.5383%" y="101" width="0.1202%" height="15" fill="rgb(206,27,48)"/><text x="57.7883%" y="111.50"></text></g><g><title>dropck_outlives (5,304,580 samples, 0.13%)</title><rect x="78.9215%" y="85" width="0.1336%" height="15" fill="rgb(225,35,8)"/><text x="79.1715%" y="95.50"></text></g><g><title>evaluate_obligation (26,309,567 samples, 0.66%)</title><rect x="79.0605%" y="85" width="0.6625%" height="15" fill="rgb(250,213,24)"/><text x="79.3105%" y="95.50"></text></g><g><title>is_copy_raw (5,416,062 samples, 0.14%)</title><rect x="79.8055%" y="85" width="0.1364%" height="15" fill="rgb(247,123,22)"/><text x="80.0555%" y="95.50"></text></g><g><title>typeck (887,266,063 samples, 22.34%)</title><rect x="57.7523%" y="101" width="22.3408%" height="15" fill="rgb(231,138,38)"/><text x="58.0023%" y="111.50">typeck</text></g><g><title>item_bodies_checking (1,799,995,073 samples, 45.32%)</title><rect x="34.7944%" y="149" width="45.3227%" height="15" fill="rgb(231,145,46)"/><text x="35.0444%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,799,991,023 samples, 45.32%)</title><rect x="34.7945%" y="133" width="45.3226%" height="15" fill="rgb(251,118,11)"/><text x="35.0445%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,794,190,502 samples, 45.18%)</title><rect x="34.9406%" y="117" width="45.1766%" height="15" fill="rgb(217,147,25)"/><text x="35.1906%" y="127.50">typeck</text></g><g><title>type_of (4,677,462 samples, 0.12%)</title><rect x="80.6865%" y="117" width="0.1178%" height="15" fill="rgb(247,81,37)"/><text x="80.9365%" y="127.50"></text></g><g><title>mir_borrowck (4,640,342 samples, 0.12%)</title><rect x="80.6874%" y="101" width="0.1168%" height="15" fill="rgb(209,12,38)"/><text x="80.9374%" y="111.50"></text></g><g><title>item_types_checking (27,900,494 samples, 0.70%)</title><rect x="80.1171%" y="149" width="0.7025%" height="15" fill="rgb(227,1,9)"/><text x="80.3671%" y="159.50"></text></g><g><title>check_mod_item_types (27,870,903 samples, 0.70%)</title><rect x="80.1179%" y="133" width="0.7018%" height="15" fill="rgb(248,47,43)"/><text x="80.3679%" y="143.50"></text></g><g><title>fn_sig (7,990,897 samples, 0.20%)</title><rect x="81.0629%" y="117" width="0.2012%" height="15" fill="rgb(221,10,30)"/><text x="81.3129%" y="127.50"></text></g><g><title>resolve_lifetimes (15,079,580 samples, 0.38%)</title><rect x="81.3989%" y="85" width="0.3797%" height="15" fill="rgb(210,229,1)"/><text x="81.6489%" y="95.50"></text></g><g><title>is_late_bound_map (16,432,937 samples, 0.41%)</title><rect x="81.3650%" y="101" width="0.4138%" height="15" fill="rgb(222,148,37)"/><text x="81.6150%" y="111.50"></text></g><g><title>generics_of (24,393,678 samples, 0.61%)</title><rect x="81.2641%" y="117" width="0.6142%" height="15" fill="rgb(234,67,33)"/><text x="81.5141%" y="127.50"></text></g><g><title>predicates_of (13,599,057 samples, 0.34%)</title><rect x="81.9029%" y="117" width="0.3424%" height="15" fill="rgb(247,98,35)"/><text x="82.1529%" y="127.50"></text></g><g><title>predicates_defined_on (11,701,047 samples, 0.29%)</title><rect x="81.9507%" y="101" width="0.2946%" height="15" fill="rgb(247,138,52)"/><text x="82.2007%" y="111.50"></text></g><g><title>inferred_outlives_of (5,731,574 samples, 0.14%)</title><rect x="82.1010%" y="85" width="0.1443%" height="15" fill="rgb(213,79,30)"/><text x="82.3510%" y="95.50"></text></g><g><title>inferred_outlives_crate (5,124,228 samples, 0.13%)</title><rect x="82.1163%" y="69" width="0.1290%" height="15" fill="rgb(246,177,23)"/><text x="82.3663%" y="79.50"></text></g><g><title>type_collecting (59,159,126 samples, 1.49%)</title><rect x="80.8200%" y="149" width="1.4896%" height="15" fill="rgb(230,62,27)"/><text x="81.0700%" y="159.50"></text></g><g><title>collect_mod_item_types (59,114,826 samples, 1.49%)</title><rect x="80.8211%" y="133" width="1.4885%" height="15" fill="rgb(216,154,8)"/><text x="81.0711%" y="143.50"></text></g><g><title>evaluate_obligation (5,363,074 samples, 0.14%)</title><rect x="83.2564%" y="117" width="0.1350%" height="15" fill="rgb(244,35,45)"/><text x="83.5064%" y="127.50"></text></g><g><title>param_env (4,363,424 samples, 0.11%)</title><rect x="83.4826%" y="117" width="0.1099%" height="15" fill="rgb(251,115,12)"/><text x="83.7326%" y="127.50"></text></g><g><title>region_scope_tree (12,340,186 samples, 0.31%)</title><rect x="83.5941%" y="117" width="0.3107%" height="15" fill="rgb(240,54,50)"/><text x="83.8441%" y="127.50"></text></g><g><title>check_impl_item_well_formed (57,413,677 samples, 1.45%)</title><rect x="82.4613%" y="133" width="1.4456%" height="15" fill="rgb(233,84,52)"/><text x="82.7113%" y="143.50"></text></g><g><title>evaluate_obligation (4,858,309 samples, 0.12%)</title><rect x="85.1425%" y="117" width="0.1223%" height="15" fill="rgb(207,117,47)"/><text x="85.3925%" y="127.50"></text></g><g><title>param_env (7,931,889 samples, 0.20%)</title><rect x="85.3059%" y="117" width="0.1997%" height="15" fill="rgb(249,43,39)"/><text x="85.5559%" y="127.50"></text></g><g><title>region_scope_tree (4,487,246 samples, 0.11%)</title><rect x="85.5088%" y="117" width="0.1130%" height="15" fill="rgb(209,38,44)"/><text x="85.7588%" y="127.50"></text></g><g><title>check_item_well_formed (70,092,962 samples, 1.76%)</title><rect x="83.9069%" y="133" width="1.7649%" height="15" fill="rgb(236,212,23)"/><text x="84.1569%" y="143.50"></text></g><g><title>analysis (3,401,759,301 samples, 85.65%)</title><rect x="0.0398%" y="181" width="85.6541%" height="15" fill="rgb(242,79,21)"/><text x="0.2898%" y="191.50">analysis</text></g><g><title>type_check_crate (2,043,511,226 samples, 51.45%)</title><rect x="34.2396%" y="165" width="51.4543%" height="15" fill="rgb(211,96,35)"/><text x="34.4896%" y="175.50">type_check_crate</text></g><g><title>wf_checking (134,142,252 samples, 3.38%)</title><rect x="82.3163%" y="149" width="3.3776%" height="15" fill="rgb(253,215,40)"/><text x="82.5663%" y="159.50">wf_..</text></g><g><title>AST_validation (5,773,735 samples, 0.15%)</title><rect x="85.7139%" y="165" width="0.1454%" height="15" fill="rgb(211,81,21)"/><text x="85.9639%" y="175.50"></text></g><g><title>complete_gated_feature_checking (4,684,213 samples, 0.12%)</title><rect x="85.8593%" y="165" width="0.1179%" height="15" fill="rgb(208,190,38)"/><text x="86.1093%" y="175.50"></text></g><g><title>macro_expand_crate (260,949,220 samples, 6.57%)</title><rect x="85.9784%" y="165" width="6.5705%" height="15" fill="rgb(235,213,38)"/><text x="86.2284%" y="175.50">macro_exp..</text></g><g><title>expand_crate (260,934,520 samples, 6.57%)</title><rect x="85.9788%" y="149" width="6.5702%" height="15" fill="rgb(237,122,38)"/><text x="86.2288%" y="159.50">expand_cr..</text></g><g><title>late_resolve_crate (46,518,904 samples, 1.17%)</title><rect x="92.6507%" y="149" width="1.1713%" height="15" fill="rgb(244,218,35)"/><text x="92.9007%" y="159.50"></text></g><g><title>resolve_check_unused (3,977,045 samples, 0.10%)</title><rect x="93.8333%" y="149" width="0.1001%" height="15" fill="rgb(240,68,47)"/><text x="94.0833%" y="159.50"></text></g><g><title>configure_and_expand (330,262,261 samples, 8.32%)</title><rect x="85.7100%" y="181" width="8.3158%" height="15" fill="rgb(210,16,53)"/><text x="85.9600%" y="191.50">configure_an..</text></g><g><title>resolve_crate (58,551,750 samples, 1.47%)</title><rect x="92.5515%" y="165" width="1.4743%" height="15" fill="rgb(235,124,12)"/><text x="92.8015%" y="175.50"></text></g><g><title>drop_ast (13,016,236 samples, 0.33%)</title><rect x="94.0258%" y="181" width="0.3277%" height="15" fill="rgb(224,169,11)"/><text x="94.2758%" y="191.50"></text></g><g><title>early_lint_checks (15,415,513 samples, 0.39%)</title><rect x="94.3542%" y="181" width="0.3882%" height="15" fill="rgb(250,166,2)"/><text x="94.6042%" y="191.50"></text></g><g><title>free_global_ctxt (24,740,959 samples, 0.62%)</title><rect x="94.7424%" y="181" width="0.6230%" height="15" fill="rgb(242,216,29)"/><text x="94.9924%" y="191.50"></text></g><g><title>generate_crate_metadata (56,933,171 samples, 1.43%)</title><rect x="95.3653%" y="181" width="1.4335%" height="15" fill="rgb(230,116,27)"/><text x="95.6153%" y="191.50"></text></g><g><title>hir_lowering (111,339,335 samples, 2.80%)</title><rect x="96.7989%" y="181" width="2.8035%" height="15" fill="rgb(228,99,48)"/><text x="97.0489%" y="191.50">hi..</text></g><g><title>self_profile_alloc_query_strings (6,210,390 samples, 0.16%)</title><rect x="99.6392%" y="181" width="0.1564%" height="15" fill="rgb(253,11,6)"/><text x="99.8892%" y="191.50"></text></g><g><title>all (3,971,506,261 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (3,971,506,261 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (7,849,158 samples, 0.20%)</title><rect x="99.8024%" y="181" width="0.1976%" height="15" fill="rgb(233,208,19)"/><text x="100.0524%" y="191.50"></text></g></svg></svg>