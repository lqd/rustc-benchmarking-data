<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (95,580 samples, 0.17%)</title><rect x="6.6614%" y="197" width="0.1660%" height="15" fill="rgb(227,0,7)"/><text x="6.9114%" y="207.50"></text></g><g><title>item_attrs (61,151 samples, 0.11%)</title><rect x="7.0855%" y="165" width="0.1062%" height="15" fill="rgb(217,0,24)"/><text x="7.3355%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (58,630 samples, 0.10%)</title><rect x="7.0899%" y="149" width="0.1018%" height="15" fill="rgb(221,193,54)"/><text x="7.3399%" y="159.50"></text></g><g><title>codegen_fn_attrs (103,451 samples, 0.18%)</title><rect x="7.0261%" y="181" width="0.1796%" height="15" fill="rgb(248,212,6)"/><text x="7.2761%" y="191.50"></text></g><g><title>adt_drop_tys (99,632 samples, 0.17%)</title><rect x="8.5948%" y="117" width="0.1730%" height="15" fill="rgb(208,68,35)"/><text x="8.8448%" y="127.50"></text></g><g><title>is_copy_raw (105,111 samples, 0.18%)</title><rect x="8.7678%" y="117" width="0.1825%" height="15" fill="rgb(232,128,0)"/><text x="9.0178%" y="127.50"></text></g><g><title>evaluate_obligation (92,301 samples, 0.16%)</title><rect x="8.7900%" y="101" width="0.1603%" height="15" fill="rgb(207,160,47)"/><text x="9.0400%" y="111.50"></text></g><g><title>adt_drop_tys (289,634 samples, 0.50%)</title><rect x="8.5620%" y="133" width="0.5029%" height="15" fill="rgb(228,23,34)"/><text x="8.8120%" y="143.50"></text></g><g><title>param_env (66,021 samples, 0.11%)</title><rect x="8.9503%" y="117" width="0.1146%" height="15" fill="rgb(218,30,26)"/><text x="9.2003%" y="127.50"></text></g><g><title>adt_drop_tys (439,487 samples, 0.76%)</title><rect x="8.5137%" y="149" width="0.7631%" height="15" fill="rgb(220,122,19)"/><text x="8.7637%" y="159.50"></text></g><g><title>param_env (65,831 samples, 0.11%)</title><rect x="9.1625%" y="133" width="0.1143%" height="15" fill="rgb(250,228,42)"/><text x="9.4125%" y="143.50"></text></g><g><title>needs_drop_raw (932,662 samples, 1.62%)</title><rect x="8.4257%" y="165" width="1.6194%" height="15" fill="rgb(240,193,28)"/><text x="8.6757%" y="175.50"></text></g><g><title>is_copy_raw (442,473 samples, 0.77%)</title><rect x="9.2768%" y="149" width="0.7683%" height="15" fill="rgb(216,20,37)"/><text x="9.5268%" y="159.50"></text></g><g><title>evaluate_obligation (397,383 samples, 0.69%)</title><rect x="9.3551%" y="133" width="0.6900%" height="15" fill="rgb(206,188,39)"/><text x="9.6051%" y="143.50"></text></g><g><title>specialization_graph_of (77,541 samples, 0.13%)</title><rect x="10.2052%" y="149" width="0.1346%" height="15" fill="rgb(217,207,13)"/><text x="10.4552%" y="159.50"></text></g><g><title>resolve_instance (190,051 samples, 0.33%)</title><rect x="10.0450%" y="165" width="0.3300%" height="15" fill="rgb(231,73,38)"/><text x="10.2950%" y="175.50"></text></g><g><title>thir_body (218,893 samples, 0.38%)</title><rect x="10.3799%" y="165" width="0.3801%" height="15" fill="rgb(225,20,46)"/><text x="10.6299%" y="175.50"></text></g><g><title>mir_const (2,581,458 samples, 4.48%)</title><rect x="6.2810%" y="213" width="4.4821%" height="15" fill="rgb(210,31,41)"/><text x="6.5310%" y="223.50">mir_c..</text></g><g><title>unsafety_check_result (2,266,815 samples, 3.94%)</title><rect x="6.8273%" y="197" width="3.9358%" height="15" fill="rgb(221,200,47)"/><text x="7.0773%" y="207.50">unsa..</text></g><g><title>mir_built (2,048,882 samples, 3.56%)</title><rect x="7.2057%" y="181" width="3.5574%" height="15" fill="rgb(226,26,5)"/><text x="7.4557%" y="191.50">mir_..</text></g><g><title>has_structural_eq_impls (143,331 samples, 0.25%)</title><rect x="10.8629%" y="197" width="0.2489%" height="15" fill="rgb(249,33,26)"/><text x="11.1129%" y="207.50"></text></g><g><title>evaluate_obligation (133,571 samples, 0.23%)</title><rect x="10.8799%" y="181" width="0.2319%" height="15" fill="rgb(235,183,28)"/><text x="11.1299%" y="191.50"></text></g><g><title>trait_impls_of (121,101 samples, 0.21%)</title><rect x="10.9015%" y="165" width="0.2103%" height="15" fill="rgb(221,5,38)"/><text x="11.1515%" y="175.50"></text></g><g><title>is_freeze_raw (97,532 samples, 0.17%)</title><rect x="11.1132%" y="197" width="0.1693%" height="15" fill="rgb(247,18,42)"/><text x="11.3632%" y="207.50"></text></g><g><title>evaluate_obligation (94,811 samples, 0.16%)</title><rect x="11.1179%" y="181" width="0.1646%" height="15" fill="rgb(241,131,45)"/><text x="11.3679%" y="191.50"></text></g><g><title>mir_const (86,000 samples, 0.15%)</title><rect x="11.2853%" y="197" width="0.1493%" height="15" fill="rgb(249,31,29)"/><text x="11.5353%" y="207.50"></text></g><g><title>unsafety_check_result (70,020 samples, 0.12%)</title><rect x="11.3130%" y="181" width="0.1216%" height="15" fill="rgb(225,111,53)"/><text x="11.5630%" y="191.50"></text></g><g><title>mir_built (61,770 samples, 0.11%)</title><rect x="11.3274%" y="165" width="0.1073%" height="15" fill="rgb(238,160,17)"/><text x="11.5774%" y="175.50"></text></g><g><title>mir_promoted (3,217,476 samples, 5.59%)</title><rect x="5.8502%" y="229" width="5.5864%" height="15" fill="rgb(214,148,48)"/><text x="6.1002%" y="239.50">mir_pro..</text></g><g><title>mir_const_qualif (387,864 samples, 0.67%)</title><rect x="10.7632%" y="213" width="0.6734%" height="15" fill="rgb(232,36,49)"/><text x="11.0132%" y="223.50"></text></g><g><title>type_op_ascribe_user_type (102,921 samples, 0.18%)</title><rect x="11.4366%" y="229" width="0.1787%" height="15" fill="rgb(209,103,24)"/><text x="11.6866%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (124,911 samples, 0.22%)</title><rect x="11.6153%" y="229" width="0.2169%" height="15" fill="rgb(229,88,8)"/><text x="11.8653%" y="239.50"></text></g><g><title>normalize_projection_ty (85,901 samples, 0.15%)</title><rect x="11.6830%" y="213" width="0.1491%" height="15" fill="rgb(213,181,19)"/><text x="11.9330%" y="223.50"></text></g><g><title>type_op_normalize_predicate (110,732 samples, 0.19%)</title><rect x="11.8322%" y="229" width="0.1923%" height="15" fill="rgb(254,191,54)"/><text x="12.0822%" y="239.50"></text></g><g><title>normalize_projection_ty (81,761 samples, 0.14%)</title><rect x="11.8825%" y="213" width="0.1420%" height="15" fill="rgb(241,83,37)"/><text x="12.1325%" y="223.50"></text></g><g><title>type_op_prove_predicate (441,513 samples, 0.77%)</title><rect x="12.0244%" y="229" width="0.7666%" height="15" fill="rgb(233,36,39)"/><text x="12.2744%" y="239.50"></text></g><g><title>evaluate_obligation (92,511 samples, 0.16%)</title><rect x="12.6304%" y="213" width="0.1606%" height="15" fill="rgb(226,3,54)"/><text x="12.8804%" y="223.50"></text></g><g><title>MIR_borrow_checking (6,664,064 samples, 11.57%)</title><rect x="1.2353%" y="261" width="11.5707%" height="15" fill="rgb(245,192,40)"/><text x="1.4853%" y="271.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (6,654,074 samples, 11.55%)</title><rect x="1.2527%" y="245" width="11.5534%" height="15" fill="rgb(238,167,29)"/><text x="1.5027%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (108,501 samples, 0.19%)</title><rect x="12.8060%" y="261" width="0.1884%" height="15" fill="rgb(232,182,51)"/><text x="13.0560%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (89,821 samples, 0.16%)</title><rect x="12.8385%" y="245" width="0.1560%" height="15" fill="rgb(231,60,39)"/><text x="13.0885%" y="255.50"></text></g><g><title>hir_module_items (89,641 samples, 0.16%)</title><rect x="12.9944%" y="261" width="0.1556%" height="15" fill="rgb(208,69,12)"/><text x="13.2444%" y="271.50"></text></g><g><title>get_lang_items (66,860 samples, 0.12%)</title><rect x="13.4021%" y="213" width="0.1161%" height="15" fill="rgb(235,93,37)"/><text x="13.6521%" y="223.50"></text></g><g><title>codegen_fn_attrs (182,831 samples, 0.32%)</title><rect x="13.3210%" y="229" width="0.3174%" height="15" fill="rgb(213,116,39)"/><text x="13.5710%" y="239.50"></text></g><g><title>check_mod_attrs (264,283 samples, 0.46%)</title><rect x="13.1797%" y="245" width="0.4589%" height="15" fill="rgb(222,207,29)"/><text x="13.4297%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (159,921 samples, 0.28%)</title><rect x="13.7180%" y="245" width="0.2777%" height="15" fill="rgb(206,96,30)"/><text x="13.9680%" y="255.50"></text></g><g><title>misc_checking_1 (512,646 samples, 0.89%)</title><rect x="13.1511%" y="261" width="0.8901%" height="15" fill="rgb(218,138,4)"/><text x="13.4011%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (192,242 samples, 0.33%)</title><rect x="14.0438%" y="245" width="0.3338%" height="15" fill="rgb(250,191,14)"/><text x="14.2938%" y="255.50"></text></g><g><title>check_mod_liveness (163,312 samples, 0.28%)</title><rect x="14.0940%" y="229" width="0.2836%" height="15" fill="rgb(239,60,40)"/><text x="14.3440%" y="239.50"></text></g><g><title>type_uninhabited_from (73,880 samples, 0.13%)</title><rect x="14.2493%" y="213" width="0.1283%" height="15" fill="rgb(206,27,48)"/><text x="14.4993%" y="223.50"></text></g><g><title>misc_checking_2 (342,593 samples, 0.59%)</title><rect x="14.0412%" y="261" width="0.5948%" height="15" fill="rgb(225,35,8)"/><text x="14.2912%" y="271.50"></text></g><g><title>match_checking (148,881 samples, 0.26%)</title><rect x="14.3775%" y="245" width="0.2585%" height="15" fill="rgb(250,213,24)"/><text x="14.6275%" y="255.50"></text></g><g><title>check_match (144,521 samples, 0.25%)</title><rect x="14.3851%" y="229" width="0.2509%" height="15" fill="rgb(247,123,22)"/><text x="14.6351%" y="239.50"></text></g><g><title>death_checking (89,501 samples, 0.16%)</title><rect x="14.7393%" y="245" width="0.1554%" height="15" fill="rgb(231,138,38)"/><text x="14.9893%" y="255.50"></text></g><g><title>layout_of (62,920 samples, 0.11%)</title><rect x="15.4322%" y="101" width="0.1092%" height="15" fill="rgb(231,145,46)"/><text x="15.6822%" y="111.50"></text></g><g><title>fn_abi_of_instance (113,321 samples, 0.20%)</title><rect x="15.3839%" y="117" width="0.1968%" height="15" fill="rgb(251,118,11)"/><text x="15.6339%" y="127.50"></text></g><g><title>eval_to_const_value_raw (339,523 samples, 0.59%)</title><rect x="15.1871%" y="165" width="0.5895%" height="15" fill="rgb(217,147,25)"/><text x="15.4371%" y="175.50"></text></g><g><title>eval_to_const_value_raw (338,613 samples, 0.59%)</title><rect x="15.1887%" y="149" width="0.5879%" height="15" fill="rgb(247,81,37)"/><text x="15.4387%" y="159.50"></text></g><g><title>eval_to_allocation_raw (336,973 samples, 0.59%)</title><rect x="15.1916%" y="133" width="0.5851%" height="15" fill="rgb(209,12,38)"/><text x="15.4416%" y="143.50"></text></g><g><title>eval_to_allocation_raw (379,275 samples, 0.66%)</title><rect x="15.1206%" y="213" width="0.6585%" height="15" fill="rgb(227,1,9)"/><text x="15.3706%" y="223.50"></text></g><g><title>eval_to_allocation_raw (378,665 samples, 0.66%)</title><rect x="15.1217%" y="197" width="0.6575%" height="15" fill="rgb(248,47,43)"/><text x="15.3717%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (348,413 samples, 0.60%)</title><rect x="15.1742%" y="181" width="0.6049%" height="15" fill="rgb(221,10,30)"/><text x="15.4242%" y="191.50"></text></g><g><title>eval_to_const_value_raw (106,521 samples, 0.18%)</title><rect x="15.7791%" y="213" width="0.1850%" height="15" fill="rgb(210,229,1)"/><text x="16.0291%" y="223.50"></text></g><g><title>eval_to_const_value_raw (99,121 samples, 0.17%)</title><rect x="15.7920%" y="197" width="0.1721%" height="15" fill="rgb(222,148,37)"/><text x="16.0420%" y="207.50"></text></g><g><title>eval_to_allocation_raw (93,861 samples, 0.16%)</title><rect x="15.8011%" y="181" width="0.1630%" height="15" fill="rgb(234,67,33)"/><text x="16.0511%" y="191.50"></text></g><g><title>param_env (106,521 samples, 0.18%)</title><rect x="15.9641%" y="213" width="0.1850%" height="15" fill="rgb(247,98,35)"/><text x="16.2141%" y="223.50"></text></g><g><title>crate_lints (722,178 samples, 1.25%)</title><rect x="14.8973%" y="229" width="1.2539%" height="15" fill="rgb(247,138,52)"/><text x="15.1473%" y="239.50"></text></g><g><title>lint_checking (841,919 samples, 1.46%)</title><rect x="14.8947%" y="245" width="1.4618%" height="15" fill="rgb(213,79,30)"/><text x="15.1447%" y="255.50"></text></g><g><title>module_lints (118,201 samples, 0.21%)</title><rect x="16.1512%" y="229" width="0.2052%" height="15" fill="rgb(246,177,23)"/><text x="16.4012%" y="239.50"></text></g><g><title>lint_mod (116,021 samples, 0.20%)</title><rect x="16.1550%" y="213" width="0.2014%" height="15" fill="rgb(230,62,27)"/><text x="16.4050%" y="223.50"></text></g><g><title>privacy_checking_modules (190,712 samples, 0.33%)</title><rect x="16.4313%" y="245" width="0.3311%" height="15" fill="rgb(216,154,8)"/><text x="16.6813%" y="255.50"></text></g><g><title>check_mod_privacy (189,402 samples, 0.33%)</title><rect x="16.4336%" y="229" width="0.3289%" height="15" fill="rgb(244,35,45)"/><text x="16.6836%" y="239.50"></text></g><g><title>misc_checking_3 (1,232,553 samples, 2.14%)</title><rect x="14.6360%" y="261" width="2.1401%" height="15" fill="rgb(251,115,12)"/><text x="14.8860%" y="271.50">m..</text></g><g><title>impl_parent (68,100 samples, 0.12%)</title><rect x="17.1768%" y="197" width="0.1182%" height="15" fill="rgb(240,54,50)"/><text x="17.4268%" y="207.50"></text></g><g><title>impl_trait_ref (198,854 samples, 0.35%)</title><rect x="17.2950%" y="197" width="0.3453%" height="15" fill="rgb(233,84,52)"/><text x="17.5450%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (166,263 samples, 0.29%)</title><rect x="17.3516%" y="181" width="0.2887%" height="15" fill="rgb(207,117,47)"/><text x="17.6016%" y="191.50"></text></g><g><title>coherent_trait (508,456 samples, 0.88%)</title><rect x="16.8526%" y="229" width="0.8828%" height="15" fill="rgb(249,43,39)"/><text x="17.1026%" y="239.50"></text></g><g><title>specialization_graph_of (503,726 samples, 0.87%)</title><rect x="16.8608%" y="213" width="0.8746%" height="15" fill="rgb(209,38,44)"/><text x="17.1108%" y="223.50"></text></g><g><title>coherence_checking (545,226 samples, 0.95%)</title><rect x="16.8348%" y="245" width="0.9467%" height="15" fill="rgb(236,212,23)"/><text x="17.0848%" y="255.50"></text></g><g><title>adt_sized_constraint (71,371 samples, 0.12%)</title><rect x="26.3358%" y="181" width="0.1239%" height="15" fill="rgb(242,79,21)"/><text x="26.5858%" y="191.50"></text></g><g><title>adt_sized_constraint (105,131 samples, 0.18%)</title><rect x="26.2807%" y="197" width="0.1825%" height="15" fill="rgb(211,96,35)"/><text x="26.5307%" y="207.50"></text></g><g><title>associated_item (181,741 samples, 0.32%)</title><rect x="26.5772%" y="181" width="0.3156%" height="15" fill="rgb(253,215,40)"/><text x="26.8272%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (144,601 samples, 0.25%)</title><rect x="26.6417%" y="165" width="0.2511%" height="15" fill="rgb(211,81,21)"/><text x="26.8917%" y="175.50"></text></g><g><title>associated_items (250,883 samples, 0.44%)</title><rect x="26.4782%" y="197" width="0.4356%" height="15" fill="rgb(208,190,38)"/><text x="26.7282%" y="207.50"></text></g><g><title>adt_def (248,192 samples, 0.43%)</title><rect x="27.7291%" y="165" width="0.4309%" height="15" fill="rgb(235,213,38)"/><text x="27.9791%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (239,512 samples, 0.42%)</title><rect x="27.7442%" y="149" width="0.4159%" height="15" fill="rgb(237,122,38)"/><text x="27.9942%" y="159.50"></text></g><g><title>item_attrs (162,061 samples, 0.28%)</title><rect x="27.8787%" y="133" width="0.2814%" height="15" fill="rgb(244,218,35)"/><text x="28.1287%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (154,831 samples, 0.27%)</title><rect x="27.8912%" y="117" width="0.2688%" height="15" fill="rgb(240,68,47)"/><text x="28.1412%" y="127.50"></text></g><g><title>adt_def (192,601 samples, 0.33%)</title><rect x="28.4255%" y="149" width="0.3344%" height="15" fill="rgb(210,16,53)"/><text x="28.6755%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (185,411 samples, 0.32%)</title><rect x="28.4380%" y="133" width="0.3219%" height="15" fill="rgb(235,124,12)"/><text x="28.6880%" y="143.50"></text></g><g><title>item_attrs (136,320 samples, 0.24%)</title><rect x="28.5232%" y="117" width="0.2367%" height="15" fill="rgb(224,169,11)"/><text x="28.7732%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (129,810 samples, 0.23%)</title><rect x="28.5345%" y="101" width="0.2254%" height="15" fill="rgb(250,166,2)"/><text x="28.7845%" y="111.50"></text></g><g><title>adt_destructor (60,740 samples, 0.11%)</title><rect x="28.7599%" y="149" width="0.1055%" height="15" fill="rgb(242,216,29)"/><text x="29.0099%" y="159.50"></text></g><g><title>adt_def (338,044 samples, 0.59%)</title><rect x="29.0154%" y="133" width="0.5869%" height="15" fill="rgb(230,116,27)"/><text x="29.2654%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (333,554 samples, 0.58%)</title><rect x="29.0232%" y="117" width="0.5791%" height="15" fill="rgb(228,99,48)"/><text x="29.2732%" y="127.50"></text></g><g><title>item_attrs (269,163 samples, 0.47%)</title><rect x="29.1350%" y="101" width="0.4673%" height="15" fill="rgb(253,11,6)"/><text x="29.3850%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (264,403 samples, 0.46%)</title><rect x="29.1432%" y="85" width="0.4591%" height="15" fill="rgb(247,143,39)"/><text x="29.3932%" y="95.50"></text></g><g><title>adt_def (270,991 samples, 0.47%)</title><rect x="29.8623%" y="117" width="0.4705%" height="15" fill="rgb(236,97,10)"/><text x="30.1123%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (259,291 samples, 0.45%)</title><rect x="29.8826%" y="101" width="0.4502%" height="15" fill="rgb(233,208,19)"/><text x="30.1326%" y="111.50"></text></g><g><title>item_attrs (167,111 samples, 0.29%)</title><rect x="30.0427%" y="85" width="0.2902%" height="15" fill="rgb(216,164,2)"/><text x="30.2927%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (153,591 samples, 0.27%)</title><rect x="30.0662%" y="69" width="0.2667%" height="15" fill="rgb(220,129,5)"/><text x="30.3162%" y="79.50"></text></g><g><title>adt_def (62,632 samples, 0.11%)</title><rect x="30.5222%" y="101" width="0.1087%" height="15" fill="rgb(242,17,10)"/><text x="30.7722%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (60,362 samples, 0.10%)</title><rect x="30.5262%" y="85" width="0.1048%" height="15" fill="rgb(242,107,0)"/><text x="30.7762%" y="95.50"></text></g><g><title>adt_def (132,710 samples, 0.23%)</title><rect x="30.7632%" y="85" width="0.2304%" height="15" fill="rgb(251,28,31)"/><text x="31.0132%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (126,210 samples, 0.22%)</title><rect x="30.7745%" y="69" width="0.2191%" height="15" fill="rgb(233,223,10)"/><text x="31.0245%" y="79.50"></text></g><g><title>item_attrs (78,430 samples, 0.14%)</title><rect x="30.8575%" y="53" width="0.1362%" height="15" fill="rgb(215,21,27)"/><text x="31.1075%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (71,590 samples, 0.12%)</title><rect x="30.8694%" y="37" width="0.1243%" height="15" fill="rgb(232,23,21)"/><text x="31.1194%" y="47.50"></text></g><g><title>adt_dtorck_constraint (252,782 samples, 0.44%)</title><rect x="30.6587%" y="101" width="0.4389%" height="15" fill="rgb(244,5,23)"/><text x="30.9087%" y="111.50"></text></g><g><title>adt_dtorck_constraint (418,108 samples, 0.73%)</title><rect x="30.4167%" y="117" width="0.7260%" height="15" fill="rgb(226,81,46)"/><text x="30.6667%" y="127.50"></text></g><g><title>adt_dtorck_constraint (921,712 samples, 1.60%)</title><rect x="29.6474%" y="133" width="1.6004%" height="15" fill="rgb(247,70,30)"/><text x="29.8974%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,465,766 samples, 2.54%)</title><rect x="28.8653%" y="149" width="2.5450%" height="15" fill="rgb(212,68,19)"/><text x="29.1153%" y="159.50">ad..</text></g><g><title>type_of (80,920 samples, 0.14%)</title><rect x="31.2698%" y="133" width="0.1405%" height="15" fill="rgb(240,187,13)"/><text x="31.5198%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (65,390 samples, 0.11%)</title><rect x="31.2968%" y="117" width="0.1135%" height="15" fill="rgb(223,113,26)"/><text x="31.5468%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,885,282 samples, 3.27%)</title><rect x="28.2542%" y="165" width="3.2734%" height="15" fill="rgb(206,192,2)"/><text x="28.5042%" y="175.50">adt..</text></g><g><title>dropck_outlives (2,698,341 samples, 4.69%)</title><rect x="26.9992%" y="197" width="4.6851%" height="15" fill="rgb(241,108,4)"/><text x="27.2492%" y="207.50">dropc..</text></g><g><title>adt_dtorck_constraint (2,435,126 samples, 4.23%)</title><rect x="27.4563%" y="181" width="4.2281%" height="15" fill="rgb(247,173,49)"/><text x="27.7063%" y="191.50">adt_d..</text></g><g><title>type_of (61,981 samples, 0.11%)</title><rect x="31.5767%" y="165" width="0.1076%" height="15" fill="rgb(224,114,35)"/><text x="31.8267%" y="175.50"></text></g><g><title>adt_def (89,852 samples, 0.16%)</title><rect x="32.6447%" y="165" width="0.1560%" height="15" fill="rgb(245,159,27)"/><text x="32.8947%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (86,982 samples, 0.15%)</title><rect x="32.6497%" y="149" width="0.1510%" height="15" fill="rgb(245,172,44)"/><text x="32.8997%" y="159.50"></text></g><g><title>adt_sized_constraint (146,102 samples, 0.25%)</title><rect x="32.6172%" y="181" width="0.2537%" height="15" fill="rgb(236,23,11)"/><text x="32.8672%" y="191.50"></text></g><g><title>predicates_of (93,120 samples, 0.16%)</title><rect x="33.0399%" y="181" width="0.1617%" height="15" fill="rgb(205,117,38)"/><text x="33.2899%" y="191.50"></text></g><g><title>evaluate_obligation (1,425,185 samples, 2.47%)</title><rect x="31.6843%" y="197" width="2.4745%" height="15" fill="rgb(237,72,25)"/><text x="31.9343%" y="207.50">ev..</text></g><g><title>trait_impls_of (497,514 samples, 0.86%)</title><rect x="33.2950%" y="181" width="0.8638%" height="15" fill="rgb(244,70,9)"/><text x="33.5450%" y="191.50"></text></g><g><title>implementations_of_trait (162,661 samples, 0.28%)</title><rect x="33.8764%" y="165" width="0.2824%" height="15" fill="rgb(217,125,39)"/><text x="34.1264%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (97,711 samples, 0.17%)</title><rect x="33.9892%" y="149" width="0.1697%" height="15" fill="rgb(235,36,10)"/><text x="34.2392%" y="159.50"></text></g><g><title>fn_sig (107,201 samples, 0.19%)</title><rect x="34.2111%" y="197" width="0.1861%" height="15" fill="rgb(251,123,47)"/><text x="34.4611%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (96,531 samples, 0.17%)</title><rect x="34.2296%" y="181" width="0.1676%" height="15" fill="rgb(221,13,13)"/><text x="34.4796%" y="191.50"></text></g><g><title>generics_of (82,670 samples, 0.14%)</title><rect x="34.3972%" y="197" width="0.1435%" height="15" fill="rgb(238,131,9)"/><text x="34.6472%" y="207.50"></text></g><g><title>item_attrs (82,403 samples, 0.14%)</title><rect x="34.6404%" y="197" width="0.1431%" height="15" fill="rgb(211,50,8)"/><text x="34.8904%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (75,423 samples, 0.13%)</title><rect x="34.6525%" y="181" width="0.1310%" height="15" fill="rgb(245,182,24)"/><text x="34.9025%" y="191.50"></text></g><g><title>method_autoderef_steps (100,041 samples, 0.17%)</title><rect x="34.8472%" y="197" width="0.1737%" height="15" fill="rgb(242,14,37)"/><text x="35.0972%" y="207.50"></text></g><g><title>evaluate_obligation (59,381 samples, 0.10%)</title><rect x="34.9178%" y="181" width="0.1031%" height="15" fill="rgb(246,228,12)"/><text x="35.1678%" y="191.50"></text></g><g><title>explicit_predicates_of (68,731 samples, 0.12%)</title><rect x="35.3574%" y="165" width="0.1193%" height="15" fill="rgb(213,55,15)"/><text x="35.6074%" y="175.50"></text></g><g><title>predicates_of (303,823 samples, 0.53%)</title><rect x="35.0410%" y="197" width="0.5275%" height="15" fill="rgb(209,9,3)"/><text x="35.2910%" y="207.50"></text></g><g><title>predicates_defined_on (200,373 samples, 0.35%)</title><rect x="35.2206%" y="181" width="0.3479%" height="15" fill="rgb(230,59,30)"/><text x="35.4706%" y="191.50"></text></g><g><title>type_of (80,101 samples, 0.14%)</title><rect x="35.5977%" y="197" width="0.1391%" height="15" fill="rgb(209,121,21)"/><text x="35.8477%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (65,711 samples, 0.11%)</title><rect x="35.6226%" y="181" width="0.1141%" height="15" fill="rgb(220,109,13)"/><text x="35.8726%" y="191.50"></text></g><g><title>item_bodies_checking (10,375,045 samples, 18.01%)</title><rect x="17.8039%" y="245" width="18.0140%" height="15" fill="rgb(232,18,1)"/><text x="18.0539%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,372,285 samples, 18.01%)</title><rect x="17.8087%" y="229" width="18.0092%" height="15" fill="rgb(215,41,42)"/><text x="18.0587%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (10,362,495 samples, 17.99%)</title><rect x="17.8257%" y="213" width="17.9922%" height="15" fill="rgb(224,123,36)"/><text x="18.0757%" y="223.50">typeck</text></g><g><title>impl_parent (92,782 samples, 0.16%)</title><rect x="36.1784%" y="165" width="0.1611%" height="15" fill="rgb(240,125,3)"/><text x="36.4284%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (71,321 samples, 0.12%)</title><rect x="36.2157%" y="149" width="0.1238%" height="15" fill="rgb(205,98,50)"/><text x="36.4657%" y="159.50"></text></g><g><title>impl_trait_ref (365,110 samples, 0.63%)</title><rect x="36.3395%" y="165" width="0.6339%" height="15" fill="rgb(205,185,37)"/><text x="36.5895%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (342,020 samples, 0.59%)</title><rect x="36.3796%" y="149" width="0.5938%" height="15" fill="rgb(238,207,15)"/><text x="36.6296%" y="159.50"></text></g><g><title>adt_destructor (588,927 samples, 1.02%)</title><rect x="36.0069%" y="213" width="1.0225%" height="15" fill="rgb(213,199,42)"/><text x="36.2569%" y="223.50"></text></g><g><title>coherent_trait (586,197 samples, 1.02%)</title><rect x="36.0117%" y="197" width="1.0178%" height="15" fill="rgb(235,201,11)"/><text x="36.2617%" y="207.50"></text></g><g><title>specialization_graph_of (584,817 samples, 1.02%)</title><rect x="36.0141%" y="181" width="1.0154%" height="15" fill="rgb(207,46,11)"/><text x="36.2641%" y="191.50"></text></g><g><title>evaluate_obligation (77,061 samples, 0.13%)</title><rect x="37.8227%" y="197" width="0.1338%" height="15" fill="rgb(241,35,35)"/><text x="38.0727%" y="207.50"></text></g><g><title>adt_sized_constraint (68,120 samples, 0.12%)</title><rect x="37.8383%" y="181" width="0.1183%" height="15" fill="rgb(243,32,47)"/><text x="38.0883%" y="191.50"></text></g><g><title>typeck (512,185 samples, 0.89%)</title><rect x="37.2004%" y="213" width="0.8893%" height="15" fill="rgb(247,202,23)"/><text x="37.4504%" y="223.50"></text></g><g><title>item_types_checking (1,309,585 samples, 2.27%)</title><rect x="35.8179%" y="245" width="2.2738%" height="15" fill="rgb(219,102,11)"/><text x="36.0679%" y="255.50">i..</text></g><g><title>check_mod_item_types (1,307,975 samples, 2.27%)</title><rect x="35.8207%" y="229" width="2.2710%" height="15" fill="rgb(243,110,44)"/><text x="36.0707%" y="239.50">c..</text></g><g><title>fn_sig (91,791 samples, 0.16%)</title><rect x="38.2054%" y="213" width="0.1594%" height="15" fill="rgb(222,74,54)"/><text x="38.4554%" y="223.50"></text></g><g><title>named_region_map (89,961 samples, 0.16%)</title><rect x="38.4043%" y="197" width="0.1562%" height="15" fill="rgb(216,99,12)"/><text x="38.6543%" y="207.50"></text></g><g><title>resolve_lifetimes (88,131 samples, 0.15%)</title><rect x="38.4075%" y="181" width="0.1530%" height="15" fill="rgb(226,22,26)"/><text x="38.6575%" y="191.50"></text></g><g><title>generics_of (118,191 samples, 0.21%)</title><rect x="38.3648%" y="213" width="0.2052%" height="15" fill="rgb(217,163,10)"/><text x="38.6148%" y="223.50"></text></g><g><title>predicates_of (168,881 samples, 0.29%)</title><rect x="38.5911%" y="213" width="0.2932%" height="15" fill="rgb(213,25,53)"/><text x="38.8411%" y="223.50"></text></g><g><title>predicates_defined_on (163,861 samples, 0.28%)</title><rect x="38.5998%" y="197" width="0.2845%" height="15" fill="rgb(252,105,26)"/><text x="38.8498%" y="207.50"></text></g><g><title>inferred_outlives_of (124,181 samples, 0.22%)</title><rect x="38.6687%" y="181" width="0.2156%" height="15" fill="rgb(220,39,43)"/><text x="38.9187%" y="191.50"></text></g><g><title>inferred_outlives_crate (115,671 samples, 0.20%)</title><rect x="38.6835%" y="165" width="0.2008%" height="15" fill="rgb(229,68,48)"/><text x="38.9335%" y="175.50"></text></g><g><title>type_of (59,251 samples, 0.10%)</title><rect x="38.7814%" y="149" width="0.1029%" height="15" fill="rgb(252,8,32)"/><text x="39.0314%" y="159.50"></text></g><g><title>type_collecting (510,295 samples, 0.89%)</title><rect x="38.0950%" y="245" width="0.8860%" height="15" fill="rgb(223,20,43)"/><text x="38.3450%" y="255.50"></text></g><g><title>collect_mod_item_types (503,355 samples, 0.87%)</title><rect x="38.1070%" y="229" width="0.8740%" height="15" fill="rgb(229,81,49)"/><text x="38.3570%" y="239.50"></text></g><g><title>evaluate_obligation (74,080 samples, 0.13%)</title><rect x="39.1533%" y="213" width="0.1286%" height="15" fill="rgb(236,28,36)"/><text x="39.4033%" y="223.50"></text></g><g><title>adt_sized_constraint (68,030 samples, 0.12%)</title><rect x="39.1638%" y="197" width="0.1181%" height="15" fill="rgb(249,185,26)"/><text x="39.4138%" y="207.50"></text></g><g><title>check_impl_item_well_formed (224,842 samples, 0.39%)</title><rect x="39.0249%" y="229" width="0.3904%" height="15" fill="rgb(249,174,33)"/><text x="39.2749%" y="239.50"></text></g><g><title>adt_sized_constraint (66,450 samples, 0.12%)</title><rect x="40.2192%" y="181" width="0.1154%" height="15" fill="rgb(233,201,37)"/><text x="40.4692%" y="191.50"></text></g><g><title>adt_sized_constraint (116,241 samples, 0.20%)</title><rect x="40.1371%" y="197" width="0.2018%" height="15" fill="rgb(221,78,26)"/><text x="40.3871%" y="207.50"></text></g><g><title>evaluate_obligation (364,423 samples, 0.63%)</title><rect x="39.8552%" y="213" width="0.6327%" height="15" fill="rgb(250,127,30)"/><text x="40.1052%" y="223.50"></text></g><g><title>param_env (120,671 samples, 0.21%)</title><rect x="40.5622%" y="213" width="0.2095%" height="15" fill="rgb(230,49,44)"/><text x="40.8122%" y="223.50"></text></g><g><title>analysis (22,992,875 samples, 39.92%)</title><rect x="1.0173%" y="277" width="39.9221%" height="15" fill="rgb(229,67,23)"/><text x="1.2673%" y="287.50">analysis</text></g><g><title>type_check_crate (13,916,715 samples, 24.16%)</title><rect x="16.7761%" y="261" width="24.1633%" height="15" fill="rgb(249,83,47)"/><text x="17.0261%" y="271.50">type_check_crate</text></g><g><title>wf_checking (1,127,112 samples, 1.96%)</title><rect x="38.9825%" y="245" width="1.9570%" height="15" fill="rgb(215,43,3)"/><text x="39.2325%" y="255.50">w..</text></g><g><title>check_item_well_formed (877,830 samples, 1.52%)</title><rect x="39.4153%" y="229" width="1.5242%" height="15" fill="rgb(238,154,13)"/><text x="39.6653%" y="239.50"></text></g><g><title>codegen_crate (627,717 samples, 1.09%)</title><rect x="40.9574%" y="277" width="1.0899%" height="15" fill="rgb(219,56,2)"/><text x="41.2074%" y="287.50"></text></g><g><title>crate_injection (80,891 samples, 0.14%)</title><rect x="42.5472%" y="261" width="0.1404%" height="15" fill="rgb(233,0,4)"/><text x="42.7972%" y="271.50"></text></g><g><title>metadata_load_macro (1,120,063 samples, 1.94%)</title><rect x="79.7117%" y="229" width="1.9447%" height="15" fill="rgb(235,30,7)"/><text x="79.9617%" y="239.50">m..</text></g><g><title>macro_expand_crate (25,402,141 samples, 44.11%)</title><rect x="42.6876%" y="261" width="44.1053%" height="15" fill="rgb(250,79,13)"/><text x="42.9376%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (25,383,641 samples, 44.07%)</title><rect x="42.7197%" y="245" width="44.0732%" height="15" fill="rgb(211,146,34)"/><text x="42.9697%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,958,293 samples, 5.14%)</title><rect x="81.6565%" y="229" width="5.1364%" height="15" fill="rgb(228,22,38)"/><text x="81.9065%" y="239.50">metada..</text></g><g><title>metadata_register_crate (983,382 samples, 1.71%)</title><rect x="85.0855%" y="213" width="1.7074%" height="15" fill="rgb(235,168,5)"/><text x="85.3355%" y="223.50"></text></g><g><title>metadata_register_crate (78,390 samples, 0.14%)</title><rect x="86.6568%" y="197" width="0.1361%" height="15" fill="rgb(221,155,16)"/><text x="86.9068%" y="207.50"></text></g><g><title>maybe_create_a_macro_crate (183,772 samples, 0.32%)</title><rect x="86.7943%" y="261" width="0.3191%" height="15" fill="rgb(215,215,53)"/><text x="87.0443%" y="271.50"></text></g><g><title>pre_AST_expansion_lint_checks (103,331 samples, 0.18%)</title><rect x="87.1134%" y="261" width="0.1794%" height="15" fill="rgb(223,4,10)"/><text x="87.3634%" y="271.50"></text></g><g><title>finalize_imports (141,142 samples, 0.25%)</title><rect x="87.3006%" y="245" width="0.2451%" height="15" fill="rgb(234,103,6)"/><text x="87.5506%" y="255.50"></text></g><g><title>finalize_macro_resolutions (59,630 samples, 0.10%)</title><rect x="87.5456%" y="245" width="0.1035%" height="15" fill="rgb(227,97,0)"/><text x="87.7956%" y="255.50"></text></g><g><title>late_resolve_crate (1,529,888 samples, 2.66%)</title><rect x="87.6492%" y="245" width="2.6563%" height="15" fill="rgb(234,150,53)"/><text x="87.8992%" y="255.50">la..</text></g><g><title>configure_and_expand (27,831,979 samples, 48.32%)</title><rect x="42.0473%" y="277" width="48.3242%" height="15" fill="rgb(228,201,54)"/><text x="42.2973%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (1,773,170 samples, 3.08%)</title><rect x="87.2928%" y="261" width="3.0787%" height="15" fill="rgb(222,22,37)"/><text x="87.5428%" y="271.50">res..</text></g><g><title>early_lint_checks (111,401 samples, 0.19%)</title><rect x="90.4747%" y="277" width="0.1934%" height="15" fill="rgb(237,53,32)"/><text x="90.7247%" y="287.50"></text></g><g><title>free_global_ctxt (2,427,197 samples, 4.21%)</title><rect x="90.6681%" y="277" width="4.2143%" height="15" fill="rgb(233,25,53)"/><text x="90.9181%" y="287.50">free_..</text></g><g><title>crate_hash (75,611 samples, 0.13%)</title><rect x="95.0089%" y="261" width="0.1313%" height="15" fill="rgb(210,40,34)"/><text x="95.2589%" y="271.50"></text></g><g><title>generate_crate_metadata (152,272 samples, 0.26%)</title><rect x="94.8824%" y="277" width="0.2644%" height="15" fill="rgb(241,220,44)"/><text x="95.1324%" y="287.50"></text></g><g><title>hir_lowering (680,858 samples, 1.18%)</title><rect x="95.1468%" y="277" width="1.1822%" height="15" fill="rgb(235,28,35)"/><text x="95.3968%" y="287.50"></text></g><g><title>parse_crate (1,081,392 samples, 1.88%)</title><rect x="96.4084%" y="277" width="1.8776%" height="15" fill="rgb(210,56,17)"/><text x="96.6584%" y="287.50">p..</text></g><g><title>prepare_outputs (182,972 samples, 0.32%)</title><rect x="98.3031%" y="277" width="0.3177%" height="15" fill="rgb(224,130,29)"/><text x="98.5531%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (415,295 samples, 0.72%)</title><rect x="98.6208%" y="277" width="0.7211%" height="15" fill="rgb(235,212,8)"/><text x="98.8708%" y="287.50"></text></g><g><title>setup_global_ctxt (84,871 samples, 0.15%)</title><rect x="99.3615%" y="277" width="0.1474%" height="15" fill="rgb(223,33,50)"/><text x="99.6115%" y="287.50"></text></g><g><title>all (57,594,320 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(219,149,13)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (57,594,320 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(250,156,29)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (282,893 samples, 0.49%)</title><rect x="99.5088%" y="277" width="0.4912%" height="15" fill="rgb(216,193,19)"/><text x="99.7588%" y="287.50"></text></g></svg></svg>