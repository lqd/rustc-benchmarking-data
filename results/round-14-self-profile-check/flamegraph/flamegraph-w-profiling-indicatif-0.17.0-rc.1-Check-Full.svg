<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,282,704 samples, 0.32%)</title><rect x="16.7979%" y="117" width="0.3225%" height="15" fill="rgb(227,0,7)"/><text x="17.0479%" y="127.50"></text></g><g><title>item_attrs (860,952 samples, 0.22%)</title><rect x="17.8040%" y="85" width="0.2165%" height="15" fill="rgb(217,0,24)"/><text x="18.0540%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (832,172 samples, 0.21%)</title><rect x="17.8112%" y="69" width="0.2092%" height="15" fill="rgb(221,193,54)"/><text x="18.0612%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,220,297 samples, 0.31%)</title><rect x="17.7290%" y="101" width="0.3068%" height="15" fill="rgb(248,212,6)"/><text x="17.9790%" y="111.50"></text></g><g><title>adt_drop_tys (886,959 samples, 0.22%)</title><rect x="21.4804%" y="69" width="0.2230%" height="15" fill="rgb(208,68,35)"/><text x="21.7304%" y="79.50"></text></g><g><title>is_copy_raw (2,411,218 samples, 0.61%)</title><rect x="21.7034%" y="69" width="0.6062%" height="15" fill="rgb(232,128,0)"/><text x="21.9534%" y="79.50"></text></g><g><title>evaluate_obligation (1,941,173 samples, 0.49%)</title><rect x="21.8216%" y="53" width="0.4880%" height="15" fill="rgb(207,160,47)"/><text x="22.0716%" y="63.50"></text></g><g><title>needs_drop_raw (3,733,338 samples, 0.94%)</title><rect x="21.3802%" y="85" width="0.9386%" height="15" fill="rgb(228,23,34)"/><text x="21.6302%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,575,974 samples, 0.40%)</title><rect x="22.5390%" y="69" width="0.3962%" height="15" fill="rgb(218,30,26)"/><text x="22.7890%" y="79.50"></text></g><g><title>impl_parent (453,064 samples, 0.11%)</title><rect x="23.2022%" y="53" width="0.1139%" height="15" fill="rgb(220,122,19)"/><text x="23.4522%" y="63.50"></text></g><g><title>specialization_graph_of (2,187,936 samples, 0.55%)</title><rect x="22.9847%" y="69" width="0.5501%" height="15" fill="rgb(250,228,42)"/><text x="23.2347%" y="79.50"></text></g><g><title>impl_trait_ref (869,644 samples, 0.22%)</title><rect x="23.3161%" y="53" width="0.2186%" height="15" fill="rgb(240,193,28)"/><text x="23.5661%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (659,591 samples, 0.17%)</title><rect x="23.3689%" y="37" width="0.1658%" height="15" fill="rgb(216,20,37)"/><text x="23.6189%" y="47.50"></text></g><g><title>resolve_instance (5,144,565 samples, 1.29%)</title><rect x="22.3188%" y="85" width="1.2934%" height="15" fill="rgb(206,188,39)"/><text x="22.5688%" y="95.50"></text></g><g><title>thir_body (5,201,594 samples, 1.31%)</title><rect x="23.6434%" y="85" width="1.3077%" height="15" fill="rgb(217,207,13)"/><text x="23.8934%" y="95.50"></text></g><g><title>mir_const (36,042,634 samples, 9.06%)</title><rect x="15.9122%" y="133" width="9.0614%" height="15" fill="rgb(231,73,38)"/><text x="16.1622%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (31,236,999 samples, 7.85%)</title><rect x="17.1204%" y="117" width="7.8532%" height="15" fill="rgb(225,20,46)"/><text x="17.3704%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (27,595,816 samples, 6.94%)</title><rect x="18.0358%" y="101" width="6.9378%" height="15" fill="rgb(210,31,41)"/><text x="18.2858%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (729,506 samples, 0.18%)</title><rect x="24.9737%" y="133" width="0.1834%" height="15" fill="rgb(221,200,47)"/><text x="25.2237%" y="143.50"></text></g><g><title>mir_promoted (40,471,356 samples, 10.17%)</title><rect x="14.9825%" y="149" width="10.1748%" height="15" fill="rgb(226,26,5)"/><text x="15.2325%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,251,313 samples, 0.31%)</title><rect x="25.1575%" y="149" width="0.3146%" height="15" fill="rgb(249,33,26)"/><text x="25.4075%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,508,221 samples, 0.38%)</title><rect x="25.4721%" y="149" width="0.3792%" height="15" fill="rgb(235,183,28)"/><text x="25.7221%" y="159.50"></text></g><g><title>normalize_projection_ty (939,473 samples, 0.24%)</title><rect x="25.6151%" y="133" width="0.2362%" height="15" fill="rgb(221,5,38)"/><text x="25.8651%" y="143.50"></text></g><g><title>type_op_normalize_predicate (750,148 samples, 0.19%)</title><rect x="25.8513%" y="149" width="0.1886%" height="15" fill="rgb(247,18,42)"/><text x="26.1013%" y="159.50"></text></g><g><title>normalize_projection_ty (420,796 samples, 0.11%)</title><rect x="25.9341%" y="133" width="0.1058%" height="15" fill="rgb(241,131,45)"/><text x="26.1841%" y="143.50"></text></g><g><title>type_op_prove_predicate (8,071,037 samples, 2.03%)</title><rect x="26.0605%" y="149" width="2.0291%" height="15" fill="rgb(249,31,29)"/><text x="26.3105%" y="159.50">t..</text></g><g><title>evaluate_obligation (659,018 samples, 0.17%)</title><rect x="27.9239%" y="133" width="0.1657%" height="15" fill="rgb(225,111,53)"/><text x="28.1739%" y="143.50"></text></g><g><title>MIR_borrow_checking (109,874,682 samples, 27.62%)</title><rect x="0.4703%" y="181" width="27.6234%" height="15" fill="rgb(238,160,17)"/><text x="0.7203%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (109,374,346 samples, 27.50%)</title><rect x="0.5960%" y="165" width="27.4976%" height="15" fill="rgb(214,148,48)"/><text x="0.8460%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (410,655 samples, 0.10%)</title><rect x="28.0937%" y="181" width="0.1032%" height="15" fill="rgb(232,36,49)"/><text x="28.3437%" y="191.50"></text></g><g><title>hir_module_items (560,916 samples, 0.14%)</title><rect x="28.1969%" y="181" width="0.1410%" height="15" fill="rgb(209,103,24)"/><text x="28.4469%" y="191.50"></text></g><g><title>should_inherit_track_caller (541,476 samples, 0.14%)</title><rect x="28.5967%" y="133" width="0.1361%" height="15" fill="rgb(229,88,8)"/><text x="28.8467%" y="143.50"></text></g><g><title>codegen_fn_attrs (817,400 samples, 0.21%)</title><rect x="28.5325%" y="149" width="0.2055%" height="15" fill="rgb(213,181,19)"/><text x="28.7825%" y="159.50"></text></g><g><title>check_mod_attrs (1,564,497 samples, 0.39%)</title><rect x="28.3447%" y="165" width="0.3933%" height="15" fill="rgb(254,191,54)"/><text x="28.5947%" y="175.50"></text></g><g><title>lookup_deprecation_entry (398,166 samples, 0.10%)</title><rect x="29.0083%" y="149" width="0.1001%" height="15" fill="rgb(241,83,37)"/><text x="29.2583%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (984,241 samples, 0.25%)</title><rect x="28.8979%" y="165" width="0.2474%" height="15" fill="rgb(233,36,39)"/><text x="29.1479%" y="175.50"></text></g><g><title>misc_checking_1 (3,317,157 samples, 0.83%)</title><rect x="28.3381%" y="181" width="0.8340%" height="15" fill="rgb(226,3,54)"/><text x="28.5881%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,764,259 samples, 0.44%)</title><rect x="29.1726%" y="165" width="0.4435%" height="15" fill="rgb(245,192,40)"/><text x="29.4226%" y="175.50"></text></g><g><title>check_mod_liveness (1,417,206 samples, 0.36%)</title><rect x="29.2599%" y="149" width="0.3563%" height="15" fill="rgb(238,167,29)"/><text x="29.5099%" y="159.50"></text></g><g><title>misc_checking_2 (4,289,467 samples, 1.08%)</title><rect x="29.1720%" y="181" width="1.0784%" height="15" fill="rgb(232,182,51)"/><text x="29.4220%" y="191.50"></text></g><g><title>match_checking (2,522,858 samples, 0.63%)</title><rect x="29.6162%" y="165" width="0.6343%" height="15" fill="rgb(231,60,39)"/><text x="29.8662%" y="175.50"></text></g><g><title>check_match (2,402,706 samples, 0.60%)</title><rect x="29.6464%" y="149" width="0.6041%" height="15" fill="rgb(208,69,12)"/><text x="29.8964%" y="159.50"></text></g><g><title>check_private_in_public (650,747 samples, 0.16%)</title><rect x="30.2532%" y="165" width="0.1636%" height="15" fill="rgb(235,93,37)"/><text x="30.5032%" y="175.50"></text></g><g><title>death_checking (1,273,654 samples, 0.32%)</title><rect x="30.4168%" y="165" width="0.3202%" height="15" fill="rgb(213,116,39)"/><text x="30.6668%" y="175.50"></text></g><g><title>eval_to_const_value_raw (728,679 samples, 0.18%)</title><rect x="31.1722%" y="133" width="0.1832%" height="15" fill="rgb(222,207,29)"/><text x="31.4222%" y="143.50"></text></g><g><title>eval_to_const_value_raw (721,579 samples, 0.18%)</title><rect x="31.1740%" y="117" width="0.1814%" height="15" fill="rgb(206,96,30)"/><text x="31.4240%" y="127.50"></text></g><g><title>eval_to_allocation_raw (708,638 samples, 0.18%)</title><rect x="31.1773%" y="101" width="0.1782%" height="15" fill="rgb(218,138,4)"/><text x="31.4273%" y="111.50"></text></g><g><title>param_env (607,837 samples, 0.15%)</title><rect x="31.3554%" y="133" width="0.1528%" height="15" fill="rgb(250,191,14)"/><text x="31.6054%" y="143.50"></text></g><g><title>crate_lints (4,568,251 samples, 1.15%)</title><rect x="30.7376%" y="149" width="1.1485%" height="15" fill="rgb(239,60,40)"/><text x="30.9876%" y="159.50"></text></g><g><title>type_of (1,325,655 samples, 0.33%)</title><rect x="31.5528%" y="133" width="0.3333%" height="15" fill="rgb(206,27,48)"/><text x="31.8028%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,058,092 samples, 0.27%)</title><rect x="31.6200%" y="117" width="0.2660%" height="15" fill="rgb(225,35,8)"/><text x="31.8700%" y="127.50"></text></g><g><title>lint_checking (6,724,654 samples, 1.69%)</title><rect x="30.7370%" y="165" width="1.6906%" height="15" fill="rgb(250,213,24)"/><text x="30.9870%" y="175.50"></text></g><g><title>module_lints (2,154,083 samples, 0.54%)</title><rect x="31.8861%" y="149" width="0.5416%" height="15" fill="rgb(247,123,22)"/><text x="32.1361%" y="159.50"></text></g><g><title>lint_mod (2,145,903 samples, 0.54%)</title><rect x="31.8881%" y="133" width="0.5395%" height="15" fill="rgb(231,138,38)"/><text x="32.1381%" y="143.50"></text></g><g><title>privacy_access_levels (1,039,052 samples, 0.26%)</title><rect x="32.4276%" y="165" width="0.2612%" height="15" fill="rgb(231,145,46)"/><text x="32.6776%" y="175.50"></text></g><g><title>privacy_checking_modules (3,179,676 samples, 0.80%)</title><rect x="32.6888%" y="165" width="0.7994%" height="15" fill="rgb(251,118,11)"/><text x="32.9388%" y="175.50"></text></g><g><title>check_mod_privacy (3,173,996 samples, 0.80%)</title><rect x="32.6903%" y="149" width="0.7980%" height="15" fill="rgb(217,147,25)"/><text x="32.9403%" y="159.50"></text></g><g><title>misc_checking_3 (12,912,734 samples, 3.25%)</title><rect x="30.2504%" y="181" width="3.2464%" height="15" fill="rgb(247,81,37)"/><text x="30.5004%" y="191.50">mis..</text></g><g><title>adt_destructor (489,695 samples, 0.12%)</title><rect x="33.5835%" y="133" width="0.1231%" height="15" fill="rgb(209,12,38)"/><text x="33.8335%" y="143.50"></text></g><g><title>coherent_trait (477,195 samples, 0.12%)</title><rect x="33.5867%" y="117" width="0.1200%" height="15" fill="rgb(227,1,9)"/><text x="33.8367%" y="127.50"></text></g><g><title>specialization_graph_of (474,655 samples, 0.12%)</title><rect x="33.5873%" y="101" width="0.1193%" height="15" fill="rgb(248,47,43)"/><text x="33.8373%" y="111.50"></text></g><g><title>impl_parent (4,101,376 samples, 1.03%)</title><rect x="35.6920%" y="117" width="1.0311%" height="15" fill="rgb(221,10,30)"/><text x="35.9420%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,403,842 samples, 0.60%)</title><rect x="36.1187%" y="101" width="0.6043%" height="15" fill="rgb(210,229,1)"/><text x="36.3687%" y="111.50"></text></g><g><title>impl_trait_ref (8,746,073 samples, 2.20%)</title><rect x="36.7231%" y="117" width="2.1988%" height="15" fill="rgb(222,148,37)"/><text x="36.9731%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,051,334 samples, 1.77%)</title><rect x="37.1491%" y="101" width="1.7728%" height="15" fill="rgb(234,67,33)"/><text x="37.3991%" y="111.50">m..</text></g><g><title>coherent_trait (22,750,962 samples, 5.72%)</title><rect x="33.5586%" y="149" width="5.7198%" height="15" fill="rgb(247,98,35)"/><text x="33.8086%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (21,799,941 samples, 5.48%)</title><rect x="33.7977%" y="133" width="5.4807%" height="15" fill="rgb(247,138,52)"/><text x="34.0477%" y="143.50">special..</text></g><g><title>trait_impls_of (1,415,384 samples, 0.36%)</title><rect x="38.9226%" y="117" width="0.3558%" height="15" fill="rgb(213,79,30)"/><text x="39.1726%" y="127.50"></text></g><g><title>implementations_of_trait (431,175 samples, 0.11%)</title><rect x="39.1700%" y="101" width="0.1084%" height="15" fill="rgb(246,177,23)"/><text x="39.4200%" y="111.50"></text></g><g><title>coherence_checking (22,913,785 samples, 5.76%)</title><rect x="33.5501%" y="165" width="5.7607%" height="15" fill="rgb(230,62,27)"/><text x="33.8001%" y="175.50">coheren..</text></g><g><title>associated_item (826,977 samples, 0.21%)</title><rect x="60.8081%" y="101" width="0.2079%" height="15" fill="rgb(216,154,8)"/><text x="61.0581%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (663,987 samples, 0.17%)</title><rect x="60.8491%" y="85" width="0.1669%" height="15" fill="rgb(244,35,45)"/><text x="61.0991%" y="95.50"></text></g><g><title>associated_items (1,210,192 samples, 0.30%)</title><rect x="60.7280%" y="117" width="0.3043%" height="15" fill="rgb(251,115,12)"/><text x="60.9780%" y="127.50"></text></g><g><title>adt_dtorck_constraint (829,949 samples, 0.21%)</title><rect x="61.3319%" y="101" width="0.2087%" height="15" fill="rgb(240,54,50)"/><text x="61.5819%" y="111.50"></text></g><g><title>dropck_outlives (2,088,393 samples, 0.53%)</title><rect x="61.0895%" y="117" width="0.5250%" height="15" fill="rgb(233,84,52)"/><text x="61.3395%" y="127.50"></text></g><g><title>generics_of (1,173,650 samples, 0.30%)</title><rect x="63.0512%" y="101" width="0.2951%" height="15" fill="rgb(207,117,47)"/><text x="63.3012%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (936,187 samples, 0.24%)</title><rect x="63.1109%" y="85" width="0.2354%" height="15" fill="rgb(249,43,39)"/><text x="63.3609%" y="95.50"></text></g><g><title>predicates_of (773,194 samples, 0.19%)</title><rect x="63.5128%" y="101" width="0.1944%" height="15" fill="rgb(209,38,44)"/><text x="63.7628%" y="111.50"></text></g><g><title>predicates_defined_on (448,031 samples, 0.11%)</title><rect x="63.5946%" y="85" width="0.1126%" height="15" fill="rgb(236,212,23)"/><text x="63.8446%" y="95.50"></text></g><g><title>specializes (1,142,466 samples, 0.29%)</title><rect x="63.7072%" y="101" width="0.2872%" height="15" fill="rgb(242,79,21)"/><text x="63.9572%" y="111.50"></text></g><g><title>param_env (731,617 samples, 0.18%)</title><rect x="63.8105%" y="85" width="0.1839%" height="15" fill="rgb(211,96,35)"/><text x="64.0605%" y="95.50"></text></g><g><title>trait_impls_of (820,190 samples, 0.21%)</title><rect x="64.0001%" y="101" width="0.2062%" height="15" fill="rgb(253,215,40)"/><text x="64.2501%" y="111.50"></text></g><g><title>evaluate_obligation (10,336,846 samples, 2.60%)</title><rect x="61.6146%" y="117" width="2.5988%" height="15" fill="rgb(211,81,21)"/><text x="61.8646%" y="127.50">ev..</text></g><g><title>impl_trait_ref (693,788 samples, 0.17%)</title><rect x="64.4791%" y="117" width="0.1744%" height="15" fill="rgb(208,190,38)"/><text x="64.7291%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (670,976 samples, 0.17%)</title><rect x="64.4849%" y="101" width="0.1687%" height="15" fill="rgb(235,213,38)"/><text x="64.7349%" y="111.50"></text></g><g><title>evaluate_obligation (720,585 samples, 0.18%)</title><rect x="64.9984%" y="101" width="0.1812%" height="15" fill="rgb(237,122,38)"/><text x="65.2484%" y="111.50"></text></g><g><title>method_autoderef_steps (1,520,138 samples, 0.38%)</title><rect x="64.8014%" y="117" width="0.3822%" height="15" fill="rgb(244,218,35)"/><text x="65.0514%" y="127.50"></text></g><g><title>predicates_of (817,389 samples, 0.21%)</title><rect x="65.2411%" y="117" width="0.2055%" height="15" fill="rgb(240,68,47)"/><text x="65.4911%" y="127.50"></text></g><g><title>predicates_defined_on (557,746 samples, 0.14%)</title><rect x="65.3064%" y="101" width="0.1402%" height="15" fill="rgb(210,16,53)"/><text x="65.5564%" y="111.50"></text></g><g><title>adt_dtorck_constraint (440,156 samples, 0.11%)</title><rect x="70.4359%" y="85" width="0.1107%" height="15" fill="rgb(235,124,12)"/><text x="70.6859%" y="95.50"></text></g><g><title>dropck_outlives (763,559 samples, 0.19%)</title><rect x="70.3611%" y="101" width="0.1920%" height="15" fill="rgb(224,169,11)"/><text x="70.6111%" y="111.50"></text></g><g><title>own_existential_vtable_entries (592,546 samples, 0.15%)</title><rect x="71.2602%" y="85" width="0.1490%" height="15" fill="rgb(250,166,2)"/><text x="71.5102%" y="95.50"></text></g><g><title>specializes (399,143 samples, 0.10%)</title><rect x="71.4577%" y="85" width="0.1003%" height="15" fill="rgb(242,216,29)"/><text x="71.7077%" y="95.50"></text></g><g><title>trait_impls_of (411,093 samples, 0.10%)</title><rect x="71.5648%" y="85" width="0.1034%" height="15" fill="rgb(230,116,27)"/><text x="71.8148%" y="95.50"></text></g><g><title>evaluate_obligation (4,439,027 samples, 1.12%)</title><rect x="70.5530%" y="101" width="1.1160%" height="15" fill="rgb(228,99,48)"/><text x="70.8030%" y="111.50"></text></g><g><title>is_copy_raw (450,274 samples, 0.11%)</title><rect x="71.7570%" y="101" width="0.1132%" height="15" fill="rgb(253,11,6)"/><text x="72.0070%" y="111.50"></text></g><g><title>method_autoderef_steps (620,974 samples, 0.16%)</title><rect x="71.9158%" y="101" width="0.1561%" height="15" fill="rgb(247,143,39)"/><text x="72.1658%" y="111.50"></text></g><g><title>typeck (26,545,260 samples, 6.67%)</title><rect x="65.5210%" y="117" width="6.6737%" height="15" fill="rgb(236,97,10)"/><text x="65.7710%" y="127.50">typeck</text></g><g><title>item_bodies_checking (130,882,566 samples, 32.90%)</title><rect x="39.3285%" y="165" width="32.9050%" height="15" fill="rgb(233,208,19)"/><text x="39.5785%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (130,878,406 samples, 32.90%)</title><rect x="39.3295%" y="149" width="32.9039%" height="15" fill="rgb(216,164,2)"/><text x="39.5795%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (130,575,215 samples, 32.83%)</title><rect x="39.4058%" y="133" width="32.8277%" height="15" fill="rgb(220,129,5)"/><text x="39.6558%" y="143.50">typeck</text></g><g><title>evaluate_obligation (1,541,516 samples, 0.39%)</title><rect x="73.1187%" y="117" width="0.3875%" height="15" fill="rgb(242,17,10)"/><text x="73.3687%" y="127.50"></text></g><g><title>item_types_checking (5,231,458 samples, 1.32%)</title><rect x="72.2334%" y="165" width="1.3152%" height="15" fill="rgb(242,107,0)"/><text x="72.4834%" y="175.50"></text></g><g><title>check_mod_item_types (5,223,128 samples, 1.31%)</title><rect x="72.2355%" y="149" width="1.3131%" height="15" fill="rgb(251,28,31)"/><text x="72.4855%" y="159.50"></text></g><g><title>typeck (3,004,233 samples, 0.76%)</title><rect x="72.7934%" y="133" width="0.7553%" height="15" fill="rgb(233,223,10)"/><text x="73.0434%" y="143.50"></text></g><g><title>late_bound_vars_map (461,855 samples, 0.12%)</title><rect x="73.8775%" y="117" width="0.1161%" height="15" fill="rgb(215,21,27)"/><text x="74.1275%" y="127.50"></text></g><g><title>resolve_lifetimes (422,524 samples, 0.11%)</title><rect x="73.8874%" y="101" width="0.1062%" height="15" fill="rgb(232,23,21)"/><text x="74.1374%" y="111.50"></text></g><g><title>fn_sig (1,028,810 samples, 0.26%)</title><rect x="73.7462%" y="133" width="0.2587%" height="15" fill="rgb(244,5,23)"/><text x="73.9962%" y="143.50"></text></g><g><title>named_region_map (998,293 samples, 0.25%)</title><rect x="74.0998%" y="117" width="0.2510%" height="15" fill="rgb(226,81,46)"/><text x="74.3498%" y="127.50"></text></g><g><title>resolve_lifetimes (947,982 samples, 0.24%)</title><rect x="74.1125%" y="101" width="0.2383%" height="15" fill="rgb(247,70,30)"/><text x="74.3625%" y="111.50"></text></g><g><title>lint_levels (511,425 samples, 0.13%)</title><rect x="74.2222%" y="85" width="0.1286%" height="15" fill="rgb(212,68,19)"/><text x="74.4722%" y="95.50"></text></g><g><title>generics_of (1,414,275 samples, 0.36%)</title><rect x="74.0049%" y="133" width="0.3556%" height="15" fill="rgb(240,187,13)"/><text x="74.2549%" y="143.50"></text></g><g><title>explicit_predicates_of (556,847 samples, 0.14%)</title><rect x="74.4916%" y="101" width="0.1400%" height="15" fill="rgb(223,113,26)"/><text x="74.7416%" y="111.50"></text></g><g><title>predicates_of (1,744,728 samples, 0.44%)</title><rect x="74.3849%" y="133" width="0.4386%" height="15" fill="rgb(206,192,2)"/><text x="74.6349%" y="143.50"></text></g><g><title>predicates_defined_on (1,588,818 samples, 0.40%)</title><rect x="74.4241%" y="117" width="0.3994%" height="15" fill="rgb(241,108,4)"/><text x="74.6741%" y="127.50"></text></g><g><title>inferred_outlives_of (763,618 samples, 0.19%)</title><rect x="74.6316%" y="101" width="0.1920%" height="15" fill="rgb(247,173,49)"/><text x="74.8816%" y="111.50"></text></g><g><title>inferred_outlives_crate (705,108 samples, 0.18%)</title><rect x="74.6463%" y="85" width="0.1773%" height="15" fill="rgb(224,114,35)"/><text x="74.8963%" y="95.50"></text></g><g><title>type_of (442,573 samples, 0.11%)</title><rect x="74.7123%" y="69" width="0.1113%" height="15" fill="rgb(245,159,27)"/><text x="74.9623%" y="79.50"></text></g><g><title>type_collecting (5,310,850 samples, 1.34%)</title><rect x="73.5502%" y="165" width="1.3352%" height="15" fill="rgb(245,172,44)"/><text x="73.8002%" y="175.50"></text></g><g><title>collect_mod_item_types (5,295,019 samples, 1.33%)</title><rect x="73.5541%" y="149" width="1.3312%" height="15" fill="rgb(236,23,11)"/><text x="73.8041%" y="159.50"></text></g><g><title>evaluate_obligation (1,733,717 samples, 0.44%)</title><rect x="76.5470%" y="133" width="0.4359%" height="15" fill="rgb(205,117,38)"/><text x="76.7970%" y="143.50"></text></g><g><title>implied_outlives_bounds (557,560 samples, 0.14%)</title><rect x="76.9986%" y="133" width="0.1402%" height="15" fill="rgb(237,72,25)"/><text x="77.2486%" y="143.50"></text></g><g><title>param_env (933,753 samples, 0.23%)</title><rect x="77.1390%" y="133" width="0.2348%" height="15" fill="rgb(244,70,9)"/><text x="77.3890%" y="143.50"></text></g><g><title>region_scope_tree (1,668,647 samples, 0.42%)</title><rect x="77.3909%" y="133" width="0.4195%" height="15" fill="rgb(217,125,39)"/><text x="77.6409%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,162,726 samples, 2.81%)</title><rect x="75.0451%" y="149" width="2.8064%" height="15" fill="rgb(235,36,10)"/><text x="75.2951%" y="159.50">ch..</text></g><g><title>adt_sized_constraint (438,586 samples, 0.11%)</title><rect x="78.6135%" y="117" width="0.1103%" height="15" fill="rgb(251,123,47)"/><text x="78.8635%" y="127.50"></text></g><g><title>evaluate_obligation (1,063,791 samples, 0.27%)</title><rect x="78.4567%" y="133" width="0.2674%" height="15" fill="rgb(221,13,13)"/><text x="78.7067%" y="143.50"></text></g><g><title>param_env (526,456 samples, 0.13%)</title><rect x="78.7773%" y="133" width="0.1324%" height="15" fill="rgb(238,131,9)"/><text x="79.0273%" y="143.50"></text></g><g><title>check_item_well_formed (4,590,809 samples, 1.15%)</title><rect x="77.8515%" y="149" width="1.1542%" height="15" fill="rgb(211,50,8)"/><text x="78.1015%" y="159.50"></text></g><g><title>analysis (313,611,279 samples, 78.84%)</title><rect x="0.2432%" y="197" width="78.8445%" height="15" fill="rgb(245,182,24)"/><text x="0.4932%" y="207.50">analysis</text></g><g><title>type_check_crate (181,341,798 samples, 45.59%)</title><rect x="33.4968%" y="181" width="45.5908%" height="15" fill="rgb(242,14,37)"/><text x="33.7468%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,694,036 samples, 4.20%)</title><rect x="74.8906%" y="165" width="4.1970%" height="15" fill="rgb(246,228,12)"/><text x="75.1406%" y="175.50">wf_ch..</text></g><g><title>metadata_register_crate (3,070,254 samples, 0.77%)</title><rect x="91.3892%" y="149" width="0.7719%" height="15" fill="rgb(213,55,15)"/><text x="91.6392%" y="159.50"></text></g><g><title>metadata_register_crate (1,114,863 samples, 0.28%)</title><rect x="91.8808%" y="133" width="0.2803%" height="15" fill="rgb(209,9,3)"/><text x="92.1308%" y="143.50"></text></g><g><title>macro_expand_crate (52,391,603 samples, 13.17%)</title><rect x="79.3866%" y="181" width="13.1717%" height="15" fill="rgb(230,59,30)"/><text x="79.6366%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (52,377,223 samples, 13.17%)</title><rect x="79.3902%" y="165" width="13.1681%" height="15" fill="rgb(209,121,21)"/><text x="79.6402%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,579,618 samples, 0.40%)</title><rect x="92.1611%" y="149" width="0.3971%" height="15" fill="rgb(220,109,13)"/><text x="92.4111%" y="159.50"></text></g><g><title>late_resolve_crate (5,065,027 samples, 1.27%)</title><rect x="92.6629%" y="165" width="1.2734%" height="15" fill="rgb(232,18,1)"/><text x="92.9129%" y="175.50"></text></g><g><title>configure_and_expand (59,022,787 samples, 14.84%)</title><rect x="79.1869%" y="197" width="14.8388%" height="15" fill="rgb(215,41,42)"/><text x="79.4369%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,769,725 samples, 1.45%)</title><rect x="92.5751%" y="181" width="1.4506%" height="15" fill="rgb(224,123,36)"/><text x="92.8251%" y="191.50"></text></g><g><title>drop_ast (642,357 samples, 0.16%)</title><rect x="94.0257%" y="197" width="0.1615%" height="15" fill="rgb(240,125,3)"/><text x="94.2757%" y="207.50"></text></g><g><title>early_lint_checks (1,270,464 samples, 0.32%)</title><rect x="94.1921%" y="197" width="0.3194%" height="15" fill="rgb(205,98,50)"/><text x="94.4421%" y="207.50"></text></g><g><title>free_global_ctxt (6,261,939 samples, 1.57%)</title><rect x="94.5115%" y="197" width="1.5743%" height="15" fill="rgb(205,185,37)"/><text x="94.7615%" y="207.50"></text></g><g><title>generate_crate_metadata (3,071,814 samples, 0.77%)</title><rect x="96.0858%" y="197" width="0.7723%" height="15" fill="rgb(238,207,15)"/><text x="96.3358%" y="207.50"></text></g><g><title>hir_lowering (9,557,787 samples, 2.40%)</title><rect x="96.8581%" y="197" width="2.4029%" height="15" fill="rgb(213,199,42)"/><text x="97.1081%" y="207.50">hi..</text></g><g><title>parse_crate (626,577 samples, 0.16%)</title><rect x="99.2788%" y="197" width="0.1575%" height="15" fill="rgb(235,201,11)"/><text x="99.5288%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,540,887 samples, 0.39%)</title><rect x="99.4892%" y="197" width="0.3874%" height="15" fill="rgb(207,46,11)"/><text x="99.7392%" y="207.50"></text></g><g><title>all (397,759,395 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (397,759,395 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>