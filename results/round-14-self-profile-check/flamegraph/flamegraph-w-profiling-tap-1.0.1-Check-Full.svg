<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (81,401 samples, 0.12%)</title><rect x="9.7965%" y="197" width="0.1184%" height="15" fill="rgb(227,0,7)"/><text x="10.0465%" y="207.50"></text></g><g><title>is_sized_raw (247,372 samples, 0.36%)</title><rect x="9.9598%" y="197" width="0.3597%" height="15" fill="rgb(217,0,24)"/><text x="10.2098%" y="207.50"></text></g><g><title>evaluate_obligation (140,941 samples, 0.20%)</title><rect x="10.1145%" y="181" width="0.2050%" height="15" fill="rgb(221,193,54)"/><text x="10.3645%" y="191.50"></text></g><g><title>param_env (105,022 samples, 0.15%)</title><rect x="11.7690%" y="165" width="0.1527%" height="15" fill="rgb(248,212,6)"/><text x="12.0190%" y="175.50"></text></g><g><title>explicit_predicates_of (118,492 samples, 0.17%)</title><rect x="15.5924%" y="53" width="0.1723%" height="15" fill="rgb(208,68,35)"/><text x="15.8424%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (117,752 samples, 0.17%)</title><rect x="15.5935%" y="37" width="0.1712%" height="15" fill="rgb(232,128,0)"/><text x="15.8435%" y="47.50"></text></g><g><title>predicates_of (127,282 samples, 0.19%)</title><rect x="15.5819%" y="85" width="0.1851%" height="15" fill="rgb(207,160,47)"/><text x="15.8319%" y="95.50"></text></g><g><title>predicates_defined_on (122,772 samples, 0.18%)</title><rect x="15.5885%" y="69" width="0.1785%" height="15" fill="rgb(228,23,34)"/><text x="15.8385%" y="79.50"></text></g><g><title>needs_drop_raw (807,422 samples, 1.17%)</title><rect x="14.6353%" y="133" width="1.1742%" height="15" fill="rgb(218,30,26)"/><text x="14.8853%" y="143.50"></text></g><g><title>is_copy_raw (719,312 samples, 1.05%)</title><rect x="14.7634%" y="117" width="1.0460%" height="15" fill="rgb(220,122,19)"/><text x="15.0134%" y="127.50"></text></g><g><title>evaluate_obligation (562,977 samples, 0.82%)</title><rect x="14.9907%" y="101" width="0.8187%" height="15" fill="rgb(250,228,42)"/><text x="15.2407%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (211,951 samples, 0.31%)</title><rect x="15.9577%" y="117" width="0.3082%" height="15" fill="rgb(240,193,28)"/><text x="16.2077%" y="127.50"></text></g><g><title>resolve_instance (331,542 samples, 0.48%)</title><rect x="15.8094%" y="133" width="0.4821%" height="15" fill="rgb(216,20,37)"/><text x="16.0594%" y="143.50"></text></g><g><title>thir_body (450,582 samples, 0.66%)</title><rect x="16.3152%" y="133" width="0.6552%" height="15" fill="rgb(206,188,39)"/><text x="16.5652%" y="143.50"></text></g><g><title>mir_const (4,102,305 samples, 5.97%)</title><rect x="11.0181%" y="181" width="5.9657%" height="15" fill="rgb(217,207,13)"/><text x="11.2681%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (3,480,926 samples, 5.06%)</title><rect x="11.9217%" y="165" width="5.0620%" height="15" fill="rgb(231,73,38)"/><text x="12.1717%" y="175.50">unsafe..</text></g><g><title>mir_built (3,181,841 samples, 4.63%)</title><rect x="12.3566%" y="149" width="4.6271%" height="15" fill="rgb(225,20,46)"/><text x="12.6066%" y="159.50">mir_b..</text></g><g><title>mir_promoted (4,612,848 samples, 6.71%)</title><rect x="10.3195%" y="197" width="6.7081%" height="15" fill="rgb(210,31,41)"/><text x="10.5695%" y="207.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (230,913 samples, 0.34%)</title><rect x="17.0276%" y="197" width="0.3358%" height="15" fill="rgb(221,200,47)"/><text x="17.2776%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (800,571 samples, 1.16%)</title><rect x="17.3634%" y="197" width="1.1642%" height="15" fill="rgb(226,26,5)"/><text x="17.6134%" y="207.50"></text></g><g><title>normalize_projection_ty (422,737 samples, 0.61%)</title><rect x="17.9129%" y="181" width="0.6148%" height="15" fill="rgb(249,33,26)"/><text x="18.1629%" y="191.50"></text></g><g><title>type_op_normalize_predicate (79,441 samples, 0.12%)</title><rect x="18.5276%" y="197" width="0.1155%" height="15" fill="rgb(235,183,28)"/><text x="18.7776%" y="207.50"></text></g><g><title>MIR_borrow_checking (12,967,895 samples, 18.86%)</title><rect x="1.6598%" y="229" width="18.8582%" height="15" fill="rgb(221,5,38)"/><text x="1.9098%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,896,132 samples, 18.75%)</title><rect x="1.7642%" y="213" width="18.7538%" height="15" fill="rgb(247,18,42)"/><text x="2.0142%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,282,673 samples, 1.87%)</title><rect x="18.6527%" y="197" width="1.8653%" height="15" fill="rgb(241,131,45)"/><text x="18.9027%" y="207.50">t..</text></g><g><title>hir_module_items (242,222 samples, 0.35%)</title><rect x="20.5397%" y="229" width="0.3522%" height="15" fill="rgb(249,31,29)"/><text x="20.7897%" y="239.50"></text></g><g><title>get_lang_items (86,741 samples, 0.13%)</title><rect x="21.5403%" y="181" width="0.1261%" height="15" fill="rgb(225,111,53)"/><text x="21.7903%" y="191.50"></text></g><g><title>associated_item (87,070 samples, 0.13%)</title><rect x="21.7614%" y="165" width="0.1266%" height="15" fill="rgb(238,160,17)"/><text x="22.0114%" y="175.50"></text></g><g><title>should_inherit_track_caller (161,670 samples, 0.24%)</title><rect x="21.6664%" y="181" width="0.2351%" height="15" fill="rgb(214,148,48)"/><text x="21.9164%" y="191.50"></text></g><g><title>codegen_fn_attrs (432,903 samples, 0.63%)</title><rect x="21.3225%" y="197" width="0.6295%" height="15" fill="rgb(232,36,49)"/><text x="21.5725%" y="207.50"></text></g><g><title>check_mod_attrs (689,978 samples, 1.00%)</title><rect x="20.9489%" y="213" width="1.0034%" height="15" fill="rgb(209,103,24)"/><text x="21.1989%" y="223.50"></text></g><g><title>check_mod_const_bodies (150,991 samples, 0.22%)</title><rect x="21.9523%" y="213" width="0.2196%" height="15" fill="rgb(229,88,8)"/><text x="22.2023%" y="223.50"></text></g><g><title>lookup_deprecation_entry (203,432 samples, 0.30%)</title><rect x="22.6660%" y="197" width="0.2958%" height="15" fill="rgb(213,181,19)"/><text x="22.9160%" y="207.50"></text></g><g><title>stability_index (137,972 samples, 0.20%)</title><rect x="22.7612%" y="181" width="0.2006%" height="15" fill="rgb(254,191,54)"/><text x="23.0112%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (526,686 samples, 0.77%)</title><rect x="22.3001%" y="213" width="0.7659%" height="15" fill="rgb(241,83,37)"/><text x="22.5501%" y="223.50"></text></g><g><title>misc_checking_1 (1,554,667 samples, 2.26%)</title><rect x="20.8925%" y="229" width="2.2608%" height="15" fill="rgb(233,36,39)"/><text x="21.1425%" y="239.50">m..</text></g><g><title>liveness_and_intrinsic_checking (191,072 samples, 0.28%)</title><rect x="23.1551%" y="213" width="0.2779%" height="15" fill="rgb(226,3,54)"/><text x="23.4051%" y="223.50"></text></g><g><title>check_mod_liveness (153,772 samples, 0.22%)</title><rect x="23.2093%" y="197" width="0.2236%" height="15" fill="rgb(245,192,40)"/><text x="23.4593%" y="207.50"></text></g><g><title>misc_checking_2 (444,054 samples, 0.65%)</title><rect x="23.1533%" y="229" width="0.6458%" height="15" fill="rgb(238,167,29)"/><text x="23.4033%" y="239.50"></text></g><g><title>match_checking (251,752 samples, 0.37%)</title><rect x="23.4329%" y="213" width="0.3661%" height="15" fill="rgb(232,182,51)"/><text x="23.6829%" y="223.50"></text></g><g><title>check_match (233,321 samples, 0.34%)</title><rect x="23.4597%" y="197" width="0.3393%" height="15" fill="rgb(231,60,39)"/><text x="23.7097%" y="207.50"></text></g><g><title>check_private_in_public (121,161 samples, 0.18%)</title><rect x="23.8103%" y="213" width="0.1762%" height="15" fill="rgb(208,69,12)"/><text x="24.0603%" y="223.50"></text></g><g><title>death_checking (220,503 samples, 0.32%)</title><rect x="23.9865%" y="213" width="0.3207%" height="15" fill="rgb(235,93,37)"/><text x="24.2365%" y="223.50"></text></g><g><title>lint_levels (72,351 samples, 0.11%)</title><rect x="24.2019%" y="197" width="0.1052%" height="15" fill="rgb(213,116,39)"/><text x="24.4519%" y="207.50"></text></g><g><title>crate_lints (299,193 samples, 0.44%)</title><rect x="24.3091%" y="197" width="0.4351%" height="15" fill="rgb(222,207,29)"/><text x="24.5591%" y="207.50"></text></g><g><title>param_env (151,440 samples, 0.22%)</title><rect x="24.5240%" y="181" width="0.2202%" height="15" fill="rgb(206,96,30)"/><text x="24.7740%" y="191.50"></text></g><g><title>predicates_of (75,260 samples, 0.11%)</title><rect x="24.6348%" y="165" width="0.1094%" height="15" fill="rgb(218,138,4)"/><text x="24.8848%" y="175.50"></text></g><g><title>lint_checking (417,575 samples, 0.61%)</title><rect x="24.3072%" y="213" width="0.6072%" height="15" fill="rgb(250,191,14)"/><text x="24.5572%" y="223.50"></text></g><g><title>module_lints (117,032 samples, 0.17%)</title><rect x="24.7442%" y="197" width="0.1702%" height="15" fill="rgb(239,60,40)"/><text x="24.9942%" y="207.50"></text></g><g><title>lint_mod (113,342 samples, 0.16%)</title><rect x="24.7496%" y="181" width="0.1648%" height="15" fill="rgb(206,27,48)"/><text x="24.9996%" y="191.50"></text></g><g><title>privacy_access_levels (140,362 samples, 0.20%)</title><rect x="24.9144%" y="213" width="0.2041%" height="15" fill="rgb(225,35,8)"/><text x="25.1644%" y="223.50"></text></g><g><title>privacy_checking_modules (428,095 samples, 0.62%)</title><rect x="25.1185%" y="213" width="0.6225%" height="15" fill="rgb(250,213,24)"/><text x="25.3685%" y="223.50"></text></g><g><title>check_mod_privacy (425,025 samples, 0.62%)</title><rect x="25.1230%" y="197" width="0.6181%" height="15" fill="rgb(247,123,22)"/><text x="25.3730%" y="207.50"></text></g><g><title>misc_checking_3 (1,352,166 samples, 1.97%)</title><rect x="23.7990%" y="229" width="1.9663%" height="15" fill="rgb(231,138,38)"/><text x="24.0490%" y="239.50">m..</text></g><g><title>coherent_trait (113,291 samples, 0.16%)</title><rect x="25.8546%" y="197" width="0.1647%" height="15" fill="rgb(231,145,46)"/><text x="26.1046%" y="207.50"></text></g><g><title>specialization_graph_of (101,681 samples, 0.15%)</title><rect x="25.8715%" y="181" width="0.1479%" height="15" fill="rgb(251,118,11)"/><text x="26.1215%" y="191.50"></text></g><g><title>coherence_checking (187,772 samples, 0.27%)</title><rect x="25.8291%" y="213" width="0.2731%" height="15" fill="rgb(217,147,25)"/><text x="26.0791%" y="223.50"></text></g><g><title>adt_destructor (123,891 samples, 0.18%)</title><rect x="43.6904%" y="133" width="0.1802%" height="15" fill="rgb(247,81,37)"/><text x="43.9404%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (122,091 samples, 0.18%)</title><rect x="43.6930%" y="117" width="0.1775%" height="15" fill="rgb(209,12,38)"/><text x="43.9430%" y="127.50"></text></g><g><title>coherent_trait (116,261 samples, 0.17%)</title><rect x="43.7015%" y="101" width="0.1691%" height="15" fill="rgb(227,1,9)"/><text x="43.9515%" y="111.50"></text></g><g><title>specialization_graph_of (109,271 samples, 0.16%)</title><rect x="43.7117%" y="85" width="0.1589%" height="15" fill="rgb(248,47,43)"/><text x="43.9617%" y="95.50"></text></g><g><title>adt_dtorck_constraint (140,461 samples, 0.20%)</title><rect x="43.6715%" y="149" width="0.2043%" height="15" fill="rgb(221,10,30)"/><text x="43.9215%" y="159.50"></text></g><g><title>dropck_outlives (414,825 samples, 0.60%)</title><rect x="43.2966%" y="165" width="0.6032%" height="15" fill="rgb(210,229,1)"/><text x="43.5466%" y="175.50"></text></g><g><title>evaluate_obligation (1,510,346 samples, 2.20%)</title><rect x="43.8999%" y="165" width="2.1964%" height="15" fill="rgb(222,148,37)"/><text x="44.1499%" y="175.50">e..</text></g><g><title>fn_sig (71,520 samples, 0.10%)</title><rect x="46.0978%" y="165" width="0.1040%" height="15" fill="rgb(234,67,33)"/><text x="46.3478%" y="175.50"></text></g><g><title>item_attrs (92,780 samples, 0.13%)</title><rect x="46.3730%" y="165" width="0.1349%" height="15" fill="rgb(247,98,35)"/><text x="46.6230%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (84,020 samples, 0.12%)</title><rect x="46.3857%" y="149" width="0.1222%" height="15" fill="rgb(247,138,52)"/><text x="46.6357%" y="159.50"></text></g><g><title>predicates_of (105,244 samples, 0.15%)</title><rect x="46.6552%" y="165" width="0.1530%" height="15" fill="rgb(213,79,30)"/><text x="46.9052%" y="175.50"></text></g><g><title>predicates_defined_on (78,813 samples, 0.11%)</title><rect x="46.6936%" y="149" width="0.1146%" height="15" fill="rgb(246,177,23)"/><text x="46.9436%" y="159.50"></text></g><g><title>item_bodies_checking (14,296,319 samples, 20.79%)</title><rect x="26.1549%" y="213" width="20.7900%" height="15" fill="rgb(230,62,27)"/><text x="26.4049%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (14,294,189 samples, 20.79%)</title><rect x="26.1580%" y="197" width="20.7869%" height="15" fill="rgb(216,154,8)"/><text x="26.4080%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (14,203,479 samples, 20.65%)</title><rect x="26.2899%" y="181" width="20.6550%" height="15" fill="rgb(244,35,45)"/><text x="26.5399%" y="191.50">typeck</text></g><g><title>item_types_checking (1,125,012 samples, 1.64%)</title><rect x="46.9448%" y="213" width="1.6360%" height="15" fill="rgb(251,115,12)"/><text x="47.1948%" y="223.50"></text></g><g><title>check_mod_item_types (1,117,882 samples, 1.63%)</title><rect x="46.9552%" y="197" width="1.6256%" height="15" fill="rgb(240,54,50)"/><text x="47.2052%" y="207.50"></text></g><g><title>late_bound_vars_map (556,767 samples, 0.81%)</title><rect x="49.5380%" y="165" width="0.8097%" height="15" fill="rgb(233,84,52)"/><text x="49.7880%" y="175.50"></text></g><g><title>resolve_lifetimes (519,297 samples, 0.76%)</title><rect x="49.5925%" y="149" width="0.7552%" height="15" fill="rgb(207,117,47)"/><text x="49.8425%" y="159.50"></text></g><g><title>type_param_predicates (103,391 samples, 0.15%)</title><rect x="50.4064%" y="165" width="0.1504%" height="15" fill="rgb(249,43,39)"/><text x="50.6564%" y="175.50"></text></g><g><title>fn_sig (965,970 samples, 1.40%)</title><rect x="49.1534%" y="181" width="1.4047%" height="15" fill="rgb(209,38,44)"/><text x="49.4034%" y="191.50"></text></g><g><title>generics_of (216,052 samples, 0.31%)</title><rect x="50.5581%" y="181" width="0.3142%" height="15" fill="rgb(236,212,23)"/><text x="50.8081%" y="191.50"></text></g><g><title>named_region_map (94,101 samples, 0.14%)</title><rect x="52.5343%" y="133" width="0.1368%" height="15" fill="rgb(242,79,21)"/><text x="52.7843%" y="143.50"></text></g><g><title>resolve_lifetimes (76,431 samples, 0.11%)</title><rect x="52.5600%" y="117" width="0.1111%" height="15" fill="rgb(211,96,35)"/><text x="52.8100%" y="127.50"></text></g><g><title>explicit_predicates_of (1,131,143 samples, 1.64%)</title><rect x="51.2001%" y="149" width="1.6449%" height="15" fill="rgb(253,215,40)"/><text x="51.4501%" y="159.50"></text></g><g><title>predicates_of (1,336,226 samples, 1.94%)</title><rect x="50.9423%" y="181" width="1.9432%" height="15" fill="rgb(211,81,21)"/><text x="51.1923%" y="191.50">p..</text></g><g><title>predicates_defined_on (1,266,495 samples, 1.84%)</title><rect x="51.0437%" y="165" width="1.8418%" height="15" fill="rgb(208,190,38)"/><text x="51.2937%" y="175.50">p..</text></g><g><title>super_predicates_of (206,043 samples, 0.30%)</title><rect x="52.8854%" y="181" width="0.2996%" height="15" fill="rgb(235,213,38)"/><text x="53.1354%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (186,483 samples, 0.27%)</title><rect x="52.9139%" y="165" width="0.2712%" height="15" fill="rgb(237,122,38)"/><text x="53.1639%" y="175.50"></text></g><g><title>type_collecting (3,295,667 samples, 4.79%)</title><rect x="48.5833%" y="213" width="4.7926%" height="15" fill="rgb(244,218,35)"/><text x="48.8333%" y="223.50">type_c..</text></g><g><title>collect_mod_item_types (3,271,367 samples, 4.76%)</title><rect x="48.6187%" y="197" width="4.7573%" height="15" fill="rgb(240,68,47)"/><text x="48.8687%" y="207.50">collec..</text></g><g><title>type_of (118,191 samples, 0.17%)</title><rect x="53.2041%" y="181" width="0.1719%" height="15" fill="rgb(210,16,53)"/><text x="53.4541%" y="191.50"></text></g><g><title>param_env (158,383 samples, 0.23%)</title><rect x="54.7075%" y="181" width="0.2303%" height="15" fill="rgb(235,124,12)"/><text x="54.9575%" y="191.50"></text></g><g><title>check_impl_item_well_formed (890,140 samples, 1.29%)</title><rect x="53.7431%" y="197" width="1.2945%" height="15" fill="rgb(224,169,11)"/><text x="53.9931%" y="207.50"></text></g><g><title>adt_def (70,561 samples, 0.10%)</title><rect x="56.4105%" y="165" width="0.1026%" height="15" fill="rgb(250,166,2)"/><text x="56.6605%" y="175.50"></text></g><g><title>adt_sized_constraint (96,181 samples, 0.14%)</title><rect x="56.3904%" y="181" width="0.1399%" height="15" fill="rgb(242,216,29)"/><text x="56.6404%" y="191.50"></text></g><g><title>param_env (293,463 samples, 0.43%)</title><rect x="56.5805%" y="181" width="0.4268%" height="15" fill="rgb(230,116,27)"/><text x="56.8305%" y="191.50"></text></g><g><title>check_item_well_formed (1,393,625 samples, 2.03%)</title><rect x="55.0376%" y="197" width="2.0266%" height="15" fill="rgb(228,99,48)"/><text x="55.2876%" y="207.50">c..</text></g><g><title>evaluate_obligation (440,272 samples, 0.64%)</title><rect x="63.7802%" y="181" width="0.6403%" height="15" fill="rgb(253,11,6)"/><text x="64.0302%" y="191.50"></text></g><g><title>implied_outlives_bounds (491,226 samples, 0.71%)</title><rect x="64.4908%" y="181" width="0.7144%" height="15" fill="rgb(247,143,39)"/><text x="64.7408%" y="191.50"></text></g><g><title>param_env (1,080,168 samples, 1.57%)</title><rect x="65.2315%" y="181" width="1.5708%" height="15" fill="rgb(236,97,10)"/><text x="65.4815%" y="191.50"></text></g><g><title>explicit_predicates_of (69,801 samples, 0.10%)</title><rect x="66.9072%" y="149" width="0.1015%" height="15" fill="rgb(233,208,19)"/><text x="67.1572%" y="159.50"></text></g><g><title>predicates_of (163,292 samples, 0.24%)</title><rect x="66.8023%" y="181" width="0.2375%" height="15" fill="rgb(216,164,2)"/><text x="67.0523%" y="191.50"></text></g><g><title>predicates_defined_on (124,281 samples, 0.18%)</title><rect x="66.8590%" y="165" width="0.1807%" height="15" fill="rgb(220,129,5)"/><text x="67.1090%" y="175.50"></text></g><g><title>region_scope_tree (293,244 samples, 0.43%)</title><rect x="67.0398%" y="181" width="0.4264%" height="15" fill="rgb(242,17,10)"/><text x="67.2898%" y="191.50"></text></g><g><title>analysis (45,820,341 samples, 66.63%)</title><rect x="1.1521%" y="245" width="66.6328%" height="15" fill="rgb(242,107,0)"/><text x="1.4021%" y="255.50">analysis</text></g><g><title>type_check_crate (28,894,882 samples, 42.02%)</title><rect x="25.7654%" y="229" width="42.0195%" height="15" fill="rgb(251,28,31)"/><text x="26.0154%" y="239.50">type_check_crate</text></g><g><title>wf_checking (9,905,260 samples, 14.40%)</title><rect x="53.3805%" y="213" width="14.4044%" height="15" fill="rgb(233,223,10)"/><text x="53.6305%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (7,372,102 samples, 10.72%)</title><rect x="57.0642%" y="197" width="10.7207%" height="15" fill="rgb(215,21,27)"/><text x="57.3142%" y="207.50">check_trait_item..</text></g><g><title>trait_impls_of (216,881 samples, 0.32%)</title><rect x="67.4695%" y="181" width="0.3154%" height="15" fill="rgb(232,23,21)"/><text x="67.7195%" y="191.50"></text></g><g><title>implementations_of_trait (75,690 samples, 0.11%)</title><rect x="67.6748%" y="165" width="0.1101%" height="15" fill="rgb(244,5,23)"/><text x="67.9248%" y="175.50"></text></g><g><title>codegen_crate (300,283 samples, 0.44%)</title><rect x="67.7994%" y="245" width="0.4367%" height="15" fill="rgb(226,81,46)"/><text x="68.0494%" y="255.50"></text></g><g><title>AST_validation (183,012 samples, 0.27%)</title><rect x="68.5269%" y="229" width="0.2661%" height="15" fill="rgb(247,70,30)"/><text x="68.7769%" y="239.50"></text></g><g><title>crate_injection (82,091 samples, 0.12%)</title><rect x="68.8793%" y="229" width="0.1194%" height="15" fill="rgb(212,68,19)"/><text x="69.1293%" y="239.50"></text></g><g><title>metadata_register_crate (189,592 samples, 0.28%)</title><rect x="85.4487%" y="197" width="0.2757%" height="15" fill="rgb(240,187,13)"/><text x="85.6987%" y="207.50"></text></g><g><title>macro_expand_crate (11,695,190 samples, 17.01%)</title><rect x="68.9987%" y="229" width="17.0074%" height="15" fill="rgb(223,113,26)"/><text x="69.2487%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (11,672,800 samples, 16.97%)</title><rect x="69.0313%" y="213" width="16.9748%" height="15" fill="rgb(206,192,2)"/><text x="69.2813%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (193,652 samples, 0.28%)</title><rect x="85.7245%" y="197" width="0.2816%" height="15" fill="rgb(241,108,4)"/><text x="85.9745%" y="207.50"></text></g><g><title>finalize_macro_resolutions (197,702 samples, 0.29%)</title><rect x="86.1789%" y="213" width="0.2875%" height="15" fill="rgb(247,173,49)"/><text x="86.4289%" y="223.50"></text></g><g><title>late_resolve_crate (1,165,043 samples, 1.69%)</title><rect x="86.4664%" y="213" width="1.6942%" height="15" fill="rgb(224,114,35)"/><text x="86.7164%" y="223.50"></text></g><g><title>configure_and_expand (13,830,284 samples, 20.11%)</title><rect x="68.2361%" y="245" width="20.1123%" height="15" fill="rgb(245,159,27)"/><text x="68.4861%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,546,687 samples, 2.25%)</title><rect x="86.0992%" y="229" width="2.2492%" height="15" fill="rgb(245,172,44)"/><text x="86.3492%" y="239.50">r..</text></g><g><title>drop_ast (197,452 samples, 0.29%)</title><rect x="88.3484%" y="245" width="0.2871%" height="15" fill="rgb(236,23,11)"/><text x="88.5984%" y="255.50"></text></g><g><title>early_lint_checks (346,934 samples, 0.50%)</title><rect x="88.6558%" y="245" width="0.5045%" height="15" fill="rgb(205,117,38)"/><text x="88.9058%" y="255.50"></text></g><g><title>free_global_ctxt (1,087,772 samples, 1.58%)</title><rect x="89.1603%" y="245" width="1.5819%" height="15" fill="rgb(237,72,25)"/><text x="89.4103%" y="255.50"></text></g><g><title>generate_crate_metadata (956,810 samples, 1.39%)</title><rect x="90.7422%" y="245" width="1.3914%" height="15" fill="rgb(244,70,9)"/><text x="90.9922%" y="255.50"></text></g><g><title>hir_lowering (3,802,613 samples, 5.53%)</title><rect x="92.1336%" y="245" width="5.5298%" height="15" fill="rgb(217,125,39)"/><text x="92.3836%" y="255.50">hir_low..</text></g><g><title>parse_crate (417,064 samples, 0.61%)</title><rect x="97.7360%" y="245" width="0.6065%" height="15" fill="rgb(235,36,10)"/><text x="97.9860%" y="255.50"></text></g><g><title>prepare_outputs (250,393 samples, 0.36%)</title><rect x="98.3545%" y="245" width="0.3641%" height="15" fill="rgb(251,123,47)"/><text x="98.6045%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (409,145 samples, 0.59%)</title><rect x="98.7186%" y="245" width="0.5950%" height="15" fill="rgb(221,13,13)"/><text x="98.9686%" y="255.50"></text></g><g><title>setup_global_ctxt (123,201 samples, 0.18%)</title><rect x="99.3318%" y="245" width="0.1792%" height="15" fill="rgb(238,131,9)"/><text x="99.5818%" y="255.50"></text></g><g><title>all (68,765,426 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (68,765,426 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (336,294 samples, 0.49%)</title><rect x="99.5110%" y="245" width="0.4890%" height="15" fill="rgb(242,14,37)"/><text x="99.7610%" y="255.50"></text></g></svg></svg>