<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (155,972 samples, 0.15%)</title><rect x="9.4812%" y="149" width="0.1511%" height="15" fill="rgb(227,0,7)"/><text x="9.7312%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (151,202 samples, 0.15%)</title><rect x="9.4858%" y="133" width="0.1465%" height="15" fill="rgb(217,0,24)"/><text x="9.7358%" y="143.50"></text></g><g><title>codegen_fn_attrs (213,432 samples, 0.21%)</title><rect x="9.4390%" y="165" width="0.2068%" height="15" fill="rgb(221,193,54)"/><text x="9.6890%" y="175.50"></text></g><g><title>adt_drop_tys (154,652 samples, 0.15%)</title><rect x="11.4058%" y="133" width="0.1499%" height="15" fill="rgb(248,212,6)"/><text x="11.6558%" y="143.50"></text></g><g><title>is_copy_raw (603,298 samples, 0.58%)</title><rect x="11.5557%" y="133" width="0.5846%" height="15" fill="rgb(208,68,35)"/><text x="11.8057%" y="143.50"></text></g><g><title>evaluate_obligation (506,725 samples, 0.49%)</title><rect x="11.6492%" y="117" width="0.4910%" height="15" fill="rgb(232,128,0)"/><text x="11.8992%" y="127.50"></text></g><g><title>needs_drop_raw (871,482 samples, 0.84%)</title><rect x="11.3347%" y="149" width="0.8445%" height="15" fill="rgb(207,160,47)"/><text x="11.5847%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (292,553 samples, 0.28%)</title><rect x="12.2967%" y="133" width="0.2835%" height="15" fill="rgb(228,23,34)"/><text x="12.5467%" y="143.50"></text></g><g><title>impl_parent (202,613 samples, 0.20%)</title><rect x="12.8521%" y="117" width="0.1963%" height="15" fill="rgb(218,30,26)"/><text x="13.1021%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (142,731 samples, 0.14%)</title><rect x="12.9101%" y="101" width="0.1383%" height="15" fill="rgb(220,122,19)"/><text x="13.1601%" y="111.50"></text></g><g><title>specialization_graph_of (998,050 samples, 0.97%)</title><rect x="12.5947%" y="133" width="0.9671%" height="15" fill="rgb(250,228,42)"/><text x="12.8447%" y="143.50"></text></g><g><title>impl_trait_ref (529,764 samples, 0.51%)</title><rect x="13.0484%" y="117" width="0.5133%" height="15" fill="rgb(240,193,28)"/><text x="13.2984%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (468,223 samples, 0.45%)</title><rect x="13.1081%" y="101" width="0.4537%" height="15" fill="rgb(216,20,37)"/><text x="13.3581%" y="111.50"></text></g><g><title>resolve_instance (1,450,945 samples, 1.41%)</title><rect x="12.1792%" y="149" width="1.4060%" height="15" fill="rgb(206,188,39)"/><text x="12.4292%" y="159.50"></text></g><g><title>thir_body (515,517 samples, 0.50%)</title><rect x="13.5997%" y="149" width="0.4995%" height="15" fill="rgb(217,207,13)"/><text x="13.8497%" y="159.50"></text></g><g><title>mir_const (5,623,489 samples, 5.45%)</title><rect x="8.6641%" y="197" width="5.4491%" height="15" fill="rgb(231,73,38)"/><text x="8.9141%" y="207.50">mir_con..</text></g><g><title>unsafety_check_result (5,085,945 samples, 4.93%)</title><rect x="9.1850%" y="181" width="4.9283%" height="15" fill="rgb(225,20,46)"/><text x="9.4350%" y="191.50">unsafe..</text></g><g><title>mir_built (4,610,413 samples, 4.47%)</title><rect x="9.6458%" y="165" width="4.4675%" height="15" fill="rgb(210,31,41)"/><text x="9.8958%" y="175.50">mir_b..</text></g><g><title>mir_promoted (6,362,859 samples, 6.17%)</title><rect x="7.9648%" y="213" width="6.1656%" height="15" fill="rgb(221,200,47)"/><text x="8.2148%" y="223.50">mir_prom..</text></g><g><title>type_op_normalize_fn_sig (460,104 samples, 0.45%)</title><rect x="14.2103%" y="213" width="0.4458%" height="15" fill="rgb(226,26,5)"/><text x="14.4603%" y="223.50"></text></g><g><title>normalize_projection_ty (261,682 samples, 0.25%)</title><rect x="14.4026%" y="197" width="0.2536%" height="15" fill="rgb(249,33,26)"/><text x="14.6526%" y="207.50"></text></g><g><title>type_op_prove_predicate (1,665,071 samples, 1.61%)</title><rect x="14.7481%" y="213" width="1.6134%" height="15" fill="rgb(235,183,28)"/><text x="14.9981%" y="223.50"></text></g><g><title>MIR_borrow_checking (15,693,814 samples, 15.21%)</title><rect x="1.1568%" y="245" width="15.2072%" height="15" fill="rgb(221,5,38)"/><text x="1.4068%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,629,664 samples, 15.15%)</title><rect x="1.2190%" y="229" width="15.1451%" height="15" fill="rgb(247,18,42)"/><text x="1.4690%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (305,673 samples, 0.30%)</title><rect x="16.3816%" y="245" width="0.2962%" height="15" fill="rgb(241,131,45)"/><text x="16.6316%" y="255.50"></text></g><g><title>get_lang_items (142,822 samples, 0.14%)</title><rect x="17.1584%" y="197" width="0.1384%" height="15" fill="rgb(249,31,29)"/><text x="17.4084%" y="207.50"></text></g><g><title>should_inherit_track_caller (248,573 samples, 0.24%)</title><rect x="17.2968%" y="197" width="0.2409%" height="15" fill="rgb(225,111,53)"/><text x="17.5468%" y="207.50"></text></g><g><title>codegen_fn_attrs (536,807 samples, 0.52%)</title><rect x="17.0524%" y="213" width="0.5202%" height="15" fill="rgb(238,160,17)"/><text x="17.3024%" y="223.50"></text></g><g><title>check_mod_attrs (872,902 samples, 0.85%)</title><rect x="16.7269%" y="229" width="0.8458%" height="15" fill="rgb(214,148,48)"/><text x="16.9769%" y="239.50"></text></g><g><title>check_mod_const_bodies (152,131 samples, 0.15%)</title><rect x="17.5728%" y="229" width="0.1474%" height="15" fill="rgb(232,36,49)"/><text x="17.8228%" y="239.50"></text></g><g><title>lookup_deprecation_entry (213,532 samples, 0.21%)</title><rect x="18.0570%" y="213" width="0.2069%" height="15" fill="rgb(209,103,24)"/><text x="18.3070%" y="223.50"></text></g><g><title>stability_index (135,582 samples, 0.13%)</title><rect x="18.1325%" y="197" width="0.1314%" height="15" fill="rgb(229,88,8)"/><text x="18.3825%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (531,845 samples, 0.52%)</title><rect x="17.8429%" y="229" width="0.5154%" height="15" fill="rgb(213,181,19)"/><text x="18.0929%" y="239.50"></text></g><g><title>looking_for_derive_registrar (122,481 samples, 0.12%)</title><rect x="18.3605%" y="229" width="0.1187%" height="15" fill="rgb(254,191,54)"/><text x="18.6105%" y="239.50"></text></g><g><title>misc_checking_1 (1,863,041 samples, 1.81%)</title><rect x="16.6783%" y="245" width="1.8053%" height="15" fill="rgb(241,83,37)"/><text x="16.9283%" y="255.50">m..</text></g><g><title>liveness_and_intrinsic_checking (314,033 samples, 0.30%)</title><rect x="18.4849%" y="229" width="0.3043%" height="15" fill="rgb(233,36,39)"/><text x="18.7349%" y="239.50"></text></g><g><title>check_mod_liveness (253,713 samples, 0.25%)</title><rect x="18.5434%" y="213" width="0.2458%" height="15" fill="rgb(226,3,54)"/><text x="18.7934%" y="223.50"></text></g><g><title>misc_checking_2 (657,937 samples, 0.64%)</title><rect x="18.4835%" y="245" width="0.6375%" height="15" fill="rgb(245,192,40)"/><text x="18.7335%" y="255.50"></text></g><g><title>match_checking (342,454 samples, 0.33%)</title><rect x="18.7892%" y="229" width="0.3318%" height="15" fill="rgb(238,167,29)"/><text x="19.0392%" y="239.50"></text></g><g><title>check_match (323,774 samples, 0.31%)</title><rect x="18.8073%" y="213" width="0.3137%" height="15" fill="rgb(232,182,51)"/><text x="19.0573%" y="223.50"></text></g><g><title>check_private_in_public (134,051 samples, 0.13%)</title><rect x="19.1303%" y="229" width="0.1299%" height="15" fill="rgb(231,60,39)"/><text x="19.3803%" y="239.50"></text></g><g><title>death_checking (373,174 samples, 0.36%)</title><rect x="19.2602%" y="229" width="0.3616%" height="15" fill="rgb(208,69,12)"/><text x="19.5102%" y="239.50"></text></g><g><title>param_env (366,112 samples, 0.35%)</title><rect x="20.2146%" y="197" width="0.3548%" height="15" fill="rgb(235,93,37)"/><text x="20.4646%" y="207.50"></text></g><g><title>predicates_of (168,581 samples, 0.16%)</title><rect x="20.4060%" y="181" width="0.1634%" height="15" fill="rgb(213,116,39)"/><text x="20.6560%" y="191.50"></text></g><g><title>predicates_defined_on (139,900 samples, 0.14%)</title><rect x="20.4338%" y="165" width="0.1356%" height="15" fill="rgb(222,207,29)"/><text x="20.6838%" y="175.50"></text></g><g><title>trait_impls_of (216,322 samples, 0.21%)</title><rect x="20.5693%" y="197" width="0.2096%" height="15" fill="rgb(206,96,30)"/><text x="20.8193%" y="207.50"></text></g><g><title>crate_lints (2,408,797 samples, 2.33%)</title><rect x="19.6233%" y="213" width="2.3341%" height="15" fill="rgb(218,138,4)"/><text x="19.8733%" y="223.50">c..</text></g><g><title>type_of (1,210,783 samples, 1.17%)</title><rect x="20.7842%" y="197" width="1.1732%" height="15" fill="rgb(250,191,14)"/><text x="21.0342%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (970,740 samples, 0.94%)</title><rect x="21.0168%" y="181" width="0.9406%" height="15" fill="rgb(239,60,40)"/><text x="21.2668%" y="191.50"></text></g><g><title>lint_checking (2,674,740 samples, 2.59%)</title><rect x="19.6218%" y="229" width="2.5918%" height="15" fill="rgb(206,27,48)"/><text x="19.8718%" y="239.50">li..</text></g><g><title>module_lints (264,313 samples, 0.26%)</title><rect x="21.9575%" y="213" width="0.2561%" height="15" fill="rgb(225,35,8)"/><text x="22.2075%" y="223.50"></text></g><g><title>lint_mod (257,413 samples, 0.25%)</title><rect x="21.9641%" y="197" width="0.2494%" height="15" fill="rgb(250,213,24)"/><text x="22.2141%" y="207.50"></text></g><g><title>privacy_access_levels (169,042 samples, 0.16%)</title><rect x="22.2136%" y="229" width="0.1638%" height="15" fill="rgb(247,123,22)"/><text x="22.4636%" y="239.50"></text></g><g><title>privacy_checking_modules (547,146 samples, 0.53%)</title><rect x="22.3774%" y="229" width="0.5302%" height="15" fill="rgb(231,138,38)"/><text x="22.6274%" y="239.50"></text></g><g><title>check_mod_privacy (541,986 samples, 0.53%)</title><rect x="22.3824%" y="213" width="0.5252%" height="15" fill="rgb(231,145,46)"/><text x="22.6324%" y="223.50"></text></g><g><title>misc_checking_3 (3,928,363 samples, 3.81%)</title><rect x="19.1211%" y="245" width="3.8066%" height="15" fill="rgb(251,118,11)"/><text x="19.3711%" y="255.50">misc..</text></g><g><title>impl_trait_ref (150,571 samples, 0.15%)</title><rect x="23.1965%" y="149" width="0.1459%" height="15" fill="rgb(217,147,25)"/><text x="23.4465%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (131,931 samples, 0.13%)</title><rect x="23.2146%" y="133" width="0.1278%" height="15" fill="rgb(247,81,37)"/><text x="23.4646%" y="143.50"></text></g><g><title>adt_destructor (317,253 samples, 0.31%)</title><rect x="23.0622%" y="197" width="0.3074%" height="15" fill="rgb(209,12,38)"/><text x="23.3122%" y="207.50"></text></g><g><title>coherent_trait (310,063 samples, 0.30%)</title><rect x="23.0691%" y="181" width="0.3004%" height="15" fill="rgb(227,1,9)"/><text x="23.3191%" y="191.50"></text></g><g><title>specialization_graph_of (308,583 samples, 0.30%)</title><rect x="23.0706%" y="165" width="0.2990%" height="15" fill="rgb(248,47,43)"/><text x="23.3206%" y="175.50"></text></g><g><title>impl_parent (2,124,594 samples, 2.06%)</title><rect x="27.0076%" y="181" width="2.0587%" height="15" fill="rgb(221,10,30)"/><text x="27.2576%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,271,811 samples, 1.23%)</title><rect x="27.8340%" y="165" width="1.2324%" height="15" fill="rgb(210,229,1)"/><text x="28.0840%" y="175.50"></text></g><g><title>impl_trait_ref (6,207,620 samples, 6.02%)</title><rect x="29.0663%" y="181" width="6.0152%" height="15" fill="rgb(222,148,37)"/><text x="29.3163%" y="191.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,324,052 samples, 5.16%)</title><rect x="29.9225%" y="165" width="5.1590%" height="15" fill="rgb(234,67,33)"/><text x="30.1725%" y="175.50">metada..</text></g><g><title>coherent_trait (13,200,297 samples, 12.79%)</title><rect x="23.0188%" y="213" width="12.7910%" height="15" fill="rgb(247,98,35)"/><text x="23.2688%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (12,751,513 samples, 12.36%)</title><rect x="23.4537%" y="197" width="12.3562%" height="15" fill="rgb(247,138,52)"/><text x="23.7037%" y="207.50">specialization_gra..</text></g><g><title>trait_impls_of (751,660 samples, 0.73%)</title><rect x="35.0815%" y="181" width="0.7284%" height="15" fill="rgb(213,79,30)"/><text x="35.3315%" y="191.50"></text></g><g><title>implementations_of_trait (175,043 samples, 0.17%)</title><rect x="35.6402%" y="165" width="0.1696%" height="15" fill="rgb(246,177,23)"/><text x="35.8902%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (144,213 samples, 0.14%)</title><rect x="35.6701%" y="149" width="0.1397%" height="15" fill="rgb(230,62,27)"/><text x="35.9201%" y="159.50"></text></g><g><title>coherence_checking (13,312,218 samples, 12.90%)</title><rect x="22.9914%" y="229" width="12.8995%" height="15" fill="rgb(216,154,8)"/><text x="23.2414%" y="239.50">coherence_checking</text></g><g><title>adt_dtorck_constraint (163,482 samples, 0.16%)</title><rect x="44.6633%" y="165" width="0.1584%" height="15" fill="rgb(244,35,45)"/><text x="44.9133%" y="175.50"></text></g><g><title>dropck_outlives (380,104 samples, 0.37%)</title><rect x="44.4991%" y="181" width="0.3683%" height="15" fill="rgb(251,115,12)"/><text x="44.7491%" y="191.50"></text></g><g><title>adt_def (147,801 samples, 0.14%)</title><rect x="46.4606%" y="149" width="0.1432%" height="15" fill="rgb(240,54,50)"/><text x="46.7106%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (145,251 samples, 0.14%)</title><rect x="46.4630%" y="133" width="0.1407%" height="15" fill="rgb(233,84,52)"/><text x="46.7130%" y="143.50"></text></g><g><title>item_attrs (118,911 samples, 0.12%)</title><rect x="46.4886%" y="117" width="0.1152%" height="15" fill="rgb(207,117,47)"/><text x="46.7386%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (116,051 samples, 0.11%)</title><rect x="46.4913%" y="101" width="0.1125%" height="15" fill="rgb(249,43,39)"/><text x="46.7413%" y="111.50"></text></g><g><title>adt_sized_constraint (228,752 samples, 0.22%)</title><rect x="46.4490%" y="165" width="0.2217%" height="15" fill="rgb(209,38,44)"/><text x="46.6990%" y="175.50"></text></g><g><title>generics_of (810,858 samples, 0.79%)</title><rect x="46.6707%" y="165" width="0.7857%" height="15" fill="rgb(236,212,23)"/><text x="46.9207%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (687,798 samples, 0.67%)</title><rect x="46.7899%" y="149" width="0.6665%" height="15" fill="rgb(242,79,21)"/><text x="47.0399%" y="159.50"></text></g><g><title>specializes (103,391 samples, 0.10%)</title><rect x="47.5941%" y="165" width="0.1002%" height="15" fill="rgb(211,96,35)"/><text x="47.8441%" y="175.50"></text></g><g><title>trait_impls_of (210,174 samples, 0.20%)</title><rect x="47.7017%" y="165" width="0.2037%" height="15" fill="rgb(253,215,40)"/><text x="47.9517%" y="175.50"></text></g><g><title>evaluate_obligation (3,144,607 samples, 3.05%)</title><rect x="44.8674%" y="181" width="3.0471%" height="15" fill="rgb(211,81,21)"/><text x="45.1174%" y="191.50">eva..</text></g><g><title>method_autoderef_steps (262,643 samples, 0.25%)</title><rect x="48.2130%" y="181" width="0.2545%" height="15" fill="rgb(208,190,38)"/><text x="48.4630%" y="191.50"></text></g><g><title>evaluate_obligation (127,151 samples, 0.12%)</title><rect x="48.3443%" y="165" width="0.1232%" height="15" fill="rgb(235,213,38)"/><text x="48.5943%" y="175.50"></text></g><g><title>predicates_of (168,763 samples, 0.16%)</title><rect x="48.4948%" y="181" width="0.1635%" height="15" fill="rgb(237,122,38)"/><text x="48.7448%" y="191.50"></text></g><g><title>predicates_defined_on (109,811 samples, 0.11%)</title><rect x="48.5519%" y="165" width="0.1064%" height="15" fill="rgb(244,218,35)"/><text x="48.8019%" y="175.50"></text></g><g><title>evaluate_obligation (280,792 samples, 0.27%)</title><rect x="52.4690%" y="165" width="0.2721%" height="15" fill="rgb(240,68,47)"/><text x="52.7190%" y="175.50"></text></g><g><title>is_copy_raw (123,741 samples, 0.12%)</title><rect x="52.8035%" y="165" width="0.1199%" height="15" fill="rgb(210,16,53)"/><text x="53.0535%" y="175.50"></text></g><g><title>typeck (4,509,618 samples, 4.37%)</title><rect x="48.6916%" y="181" width="4.3698%" height="15" fill="rgb(235,124,12)"/><text x="48.9416%" y="191.50">typeck</text></g><g><title>item_bodies_checking (17,705,907 samples, 17.16%)</title><rect x="35.9371%" y="229" width="17.1569%" height="15" fill="rgb(224,169,11)"/><text x="36.1871%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,702,257 samples, 17.15%)</title><rect x="35.9406%" y="213" width="17.1534%" height="15" fill="rgb(250,166,2)"/><text x="36.1906%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (17,662,977 samples, 17.12%)</title><rect x="35.9787%" y="197" width="17.1153%" height="15" fill="rgb(242,216,29)"/><text x="36.2287%" y="207.50">typeck</text></g><g><title>mir_borrowck (189,662 samples, 0.18%)</title><rect x="54.2187%" y="165" width="0.1838%" height="15" fill="rgb(230,116,27)"/><text x="54.4687%" y="175.50"></text></g><g><title>associated_item (103,501 samples, 0.10%)</title><rect x="55.4004%" y="69" width="0.1003%" height="15" fill="rgb(228,99,48)"/><text x="55.6504%" y="79.50"></text></g><g><title>associated_items (147,122 samples, 0.14%)</title><rect x="55.3619%" y="85" width="0.1426%" height="15" fill="rgb(253,11,6)"/><text x="55.6119%" y="95.50"></text></g><g><title>adt_dtorck_constraint (103,461 samples, 0.10%)</title><rect x="55.5954%" y="37" width="0.1003%" height="15" fill="rgb(247,143,39)"/><text x="55.8454%" y="47.50"></text></g><g><title>adt_dtorck_constraint (132,722 samples, 0.13%)</title><rect x="55.5728%" y="53" width="0.1286%" height="15" fill="rgb(236,97,10)"/><text x="55.8228%" y="63.50"></text></g><g><title>adt_dtorck_constraint (174,423 samples, 0.17%)</title><rect x="55.5449%" y="69" width="0.1690%" height="15" fill="rgb(233,208,19)"/><text x="55.7949%" y="79.50"></text></g><g><title>dropck_outlives (430,595 samples, 0.42%)</title><rect x="55.5062%" y="85" width="0.4172%" height="15" fill="rgb(216,164,2)"/><text x="55.7562%" y="95.50"></text></g><g><title>normalize_projection_ty (216,292 samples, 0.21%)</title><rect x="55.7139%" y="69" width="0.2096%" height="15" fill="rgb(220,129,5)"/><text x="55.9639%" y="79.50"></text></g><g><title>evaluate_obligation (243,654 samples, 0.24%)</title><rect x="55.9235%" y="85" width="0.2361%" height="15" fill="rgb(242,17,10)"/><text x="56.1735%" y="95.50"></text></g><g><title>trait_impls_of (118,403 samples, 0.11%)</title><rect x="56.0449%" y="69" width="0.1147%" height="15" fill="rgb(242,107,0)"/><text x="56.2949%" y="79.50"></text></g><g><title>mir_built (1,917,851 samples, 1.86%)</title><rect x="54.5842%" y="117" width="1.8584%" height="15" fill="rgb(251,28,31)"/><text x="54.8342%" y="127.50">m..</text></g><g><title>typeck (1,768,200 samples, 1.71%)</title><rect x="54.7293%" y="101" width="1.7134%" height="15" fill="rgb(233,223,10)"/><text x="54.9793%" y="111.50"></text></g><g><title>mir_const (2,173,644 samples, 2.11%)</title><rect x="54.4511%" y="149" width="2.1063%" height="15" fill="rgb(215,21,27)"/><text x="54.7011%" y="159.50">m..</text></g><g><title>unsafety_check_result (2,079,453 samples, 2.01%)</title><rect x="54.5423%" y="133" width="2.0150%" height="15" fill="rgb(232,23,21)"/><text x="54.7923%" y="143.50">u..</text></g><g><title>unsafety_check_result (118,362 samples, 0.11%)</title><rect x="56.4426%" y="117" width="0.1147%" height="15" fill="rgb(244,5,23)"/><text x="56.6926%" y="127.50"></text></g><g><title>mir_promoted (2,228,865 samples, 2.16%)</title><rect x="54.4025%" y="165" width="2.1598%" height="15" fill="rgb(226,81,46)"/><text x="54.6525%" y="175.50">m..</text></g><g><title>item_types_checking (3,651,751 samples, 3.54%)</title><rect x="53.0940%" y="229" width="3.5385%" height="15" fill="rgb(247,70,30)"/><text x="53.3440%" y="239.50">ite..</text></g><g><title>check_mod_item_types (3,642,780 samples, 3.53%)</title><rect x="53.1027%" y="213" width="3.5298%" height="15" fill="rgb(212,68,19)"/><text x="53.3527%" y="223.50">che..</text></g><g><title>type_of (2,941,153 samples, 2.85%)</title><rect x="53.7826%" y="197" width="2.8500%" height="15" fill="rgb(240,187,13)"/><text x="54.0326%" y="207.50">ty..</text></g><g><title>mir_borrowck (2,937,823 samples, 2.85%)</title><rect x="53.7858%" y="181" width="2.8467%" height="15" fill="rgb(223,113,26)"/><text x="54.0358%" y="191.50">mi..</text></g><g><title>super_predicates_that_define_assoc_type (108,440 samples, 0.11%)</title><rect x="57.7276%" y="181" width="0.1051%" height="15" fill="rgb(206,192,2)"/><text x="57.9776%" y="191.50"></text></g><g><title>fn_sig (790,308 samples, 0.77%)</title><rect x="57.1408%" y="197" width="0.7658%" height="15" fill="rgb(241,108,4)"/><text x="57.3908%" y="207.50"></text></g><g><title>associated_items (148,172 samples, 0.14%)</title><rect x="58.6586%" y="149" width="0.1436%" height="15" fill="rgb(247,173,49)"/><text x="58.9086%" y="159.50"></text></g><g><title>named_region_map (955,129 samples, 0.93%)</title><rect x="58.1330%" y="181" width="0.9255%" height="15" fill="rgb(224,114,35)"/><text x="58.3830%" y="191.50"></text></g><g><title>resolve_lifetimes (898,549 samples, 0.87%)</title><rect x="58.1878%" y="165" width="0.8707%" height="15" fill="rgb(245,159,27)"/><text x="58.4378%" y="175.50"></text></g><g><title>lint_levels (243,852 samples, 0.24%)</title><rect x="58.8222%" y="149" width="0.2363%" height="15" fill="rgb(245,172,44)"/><text x="59.0722%" y="159.50"></text></g><g><title>generics_of (1,225,414 samples, 1.19%)</title><rect x="57.9066%" y="197" width="1.1874%" height="15" fill="rgb(236,23,11)"/><text x="58.1566%" y="207.50"></text></g><g><title>late_bound_vars_map (319,674 samples, 0.31%)</title><rect x="59.9348%" y="149" width="0.3098%" height="15" fill="rgb(205,117,38)"/><text x="60.1848%" y="159.50"></text></g><g><title>resolve_lifetimes (297,732 samples, 0.29%)</title><rect x="59.9561%" y="133" width="0.2885%" height="15" fill="rgb(237,72,25)"/><text x="60.2061%" y="143.50"></text></g><g><title>explicit_predicates_of (989,943 samples, 0.96%)</title><rect x="59.3931%" y="165" width="0.9593%" height="15" fill="rgb(244,70,9)"/><text x="59.6431%" y="175.50"></text></g><g><title>predicates_of (1,376,627 samples, 1.33%)</title><rect x="59.1595%" y="197" width="1.3339%" height="15" fill="rgb(217,125,39)"/><text x="59.4095%" y="207.50"></text></g><g><title>predicates_defined_on (1,282,437 samples, 1.24%)</title><rect x="59.2508%" y="181" width="1.2427%" height="15" fill="rgb(235,36,10)"/><text x="59.5008%" y="191.50"></text></g><g><title>inferred_outlives_of (145,622 samples, 0.14%)</title><rect x="60.3523%" y="165" width="0.1411%" height="15" fill="rgb(251,123,47)"/><text x="60.6023%" y="175.50"></text></g><g><title>super_predicates_of (190,492 samples, 0.18%)</title><rect x="60.4935%" y="197" width="0.1846%" height="15" fill="rgb(221,13,13)"/><text x="60.7435%" y="207.50"></text></g><g><title>super_predicates_that_define_assoc_type (170,262 samples, 0.16%)</title><rect x="60.5131%" y="181" width="0.1650%" height="15" fill="rgb(238,131,9)"/><text x="60.7631%" y="191.50"></text></g><g><title>type_collecting (4,329,939 samples, 4.20%)</title><rect x="56.6353%" y="229" width="4.1957%" height="15" fill="rgb(211,50,8)"/><text x="56.8853%" y="239.50">type_..</text></g><g><title>collect_mod_item_types (4,304,378 samples, 4.17%)</title><rect x="56.6601%" y="213" width="4.1709%" height="15" fill="rgb(245,182,24)"/><text x="56.9101%" y="223.50">colle..</text></g><g><title>type_of (144,772 samples, 0.14%)</title><rect x="60.6907%" y="197" width="0.1403%" height="15" fill="rgb(242,14,37)"/><text x="60.9407%" y="207.50"></text></g><g><title>evaluate_obligation (251,662 samples, 0.24%)</title><rect x="61.7020%" y="197" width="0.2439%" height="15" fill="rgb(246,228,12)"/><text x="61.9520%" y="207.50"></text></g><g><title>implied_outlives_bounds (106,120 samples, 0.10%)</title><rect x="61.9696%" y="197" width="0.1028%" height="15" fill="rgb(213,55,15)"/><text x="62.2196%" y="207.50"></text></g><g><title>region_scope_tree (112,570 samples, 0.11%)</title><rect x="62.1870%" y="197" width="0.1091%" height="15" fill="rgb(209,9,3)"/><text x="62.4370%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,367,316 samples, 1.32%)</title><rect x="60.9720%" y="213" width="1.3249%" height="15" fill="rgb(230,59,30)"/><text x="61.2220%" y="223.50"></text></g><g><title>evaluate_obligation (127,842 samples, 0.12%)</title><rect x="63.5696%" y="197" width="0.1239%" height="15" fill="rgb(209,121,21)"/><text x="63.8196%" y="207.50"></text></g><g><title>param_env (274,391 samples, 0.27%)</title><rect x="63.7750%" y="197" width="0.2659%" height="15" fill="rgb(220,109,13)"/><text x="64.0250%" y="207.50"></text></g><g><title>region_scope_tree (121,551 samples, 0.12%)</title><rect x="64.1111%" y="197" width="0.1178%" height="15" fill="rgb(232,18,1)"/><text x="64.3611%" y="207.50"></text></g><g><title>check_item_well_formed (2,106,070 samples, 2.04%)</title><rect x="62.2969%" y="213" width="2.0408%" height="15" fill="rgb(215,41,42)"/><text x="62.5469%" y="223.50">c..</text></g><g><title>evaluate_obligation (251,783 samples, 0.24%)</title><rect x="64.8174%" y="197" width="0.2440%" height="15" fill="rgb(224,123,36)"/><text x="65.0674%" y="207.50"></text></g><g><title>implied_outlives_bounds (118,042 samples, 0.11%)</title><rect x="65.0614%" y="197" width="0.1144%" height="15" fill="rgb(240,125,3)"/><text x="65.3114%" y="207.50"></text></g><g><title>analysis (66,550,420 samples, 64.49%)</title><rect x="0.7584%" y="261" width="64.4871%" height="15" fill="rgb(205,98,50)"/><text x="1.0084%" y="271.50">analysis</text></g><g><title>type_check_crate (43,671,847 samples, 42.32%)</title><rect x="22.9276%" y="245" width="42.3178%" height="15" fill="rgb(205,185,37)"/><text x="23.1776%" y="255.50">type_check_crate</text></g><g><title>wf_checking (4,553,010 samples, 4.41%)</title><rect x="60.8336%" y="229" width="4.4118%" height="15" fill="rgb(238,207,15)"/><text x="61.0836%" y="239.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (936,842 samples, 0.91%)</title><rect x="64.3377%" y="213" width="0.9078%" height="15" fill="rgb(213,199,42)"/><text x="64.5877%" y="223.50"></text></g><g><title>codegen_crate (341,494 samples, 0.33%)</title><rect x="65.2666%" y="261" width="0.3309%" height="15" fill="rgb(235,201,11)"/><text x="65.5166%" y="271.50"></text></g><g><title>AST_validation (164,512 samples, 0.16%)</title><rect x="65.8105%" y="245" width="0.1594%" height="15" fill="rgb(207,46,11)"/><text x="66.0605%" y="255.50"></text></g><g><title>metadata_load_macro (192,512 samples, 0.19%)</title><rect x="82.0388%" y="213" width="0.1865%" height="15" fill="rgb(241,35,35)"/><text x="82.2888%" y="223.50"></text></g><g><title>metadata_register_crate (2,659,160 samples, 2.58%)</title><rect x="82.2253%" y="213" width="2.5767%" height="15" fill="rgb(243,32,47)"/><text x="82.4753%" y="223.50">me..</text></g><g><title>metadata_register_crate (963,529 samples, 0.93%)</title><rect x="83.8684%" y="197" width="0.9337%" height="15" fill="rgb(247,202,23)"/><text x="84.1184%" y="207.50"></text></g><g><title>macro_expand_crate (19,548,108 samples, 18.94%)</title><rect x="66.1202%" y="245" width="18.9420%" height="15" fill="rgb(219,102,11)"/><text x="66.3702%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (19,531,078 samples, 18.93%)</title><rect x="66.1367%" y="229" width="18.9255%" height="15" fill="rgb(243,110,44)"/><text x="66.3867%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (268,501 samples, 0.26%)</title><rect x="84.8020%" y="213" width="0.2602%" height="15" fill="rgb(222,74,54)"/><text x="85.0520%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (200,412 samples, 0.19%)</title><rect x="85.0674%" y="245" width="0.1942%" height="15" fill="rgb(216,99,12)"/><text x="85.3174%" y="255.50"></text></g><g><title>finalize_imports (167,102 samples, 0.16%)</title><rect x="85.2722%" y="229" width="0.1619%" height="15" fill="rgb(226,22,26)"/><text x="85.5222%" y="239.50"></text></g><g><title>finalize_macro_resolutions (302,373 samples, 0.29%)</title><rect x="85.4341%" y="229" width="0.2930%" height="15" fill="rgb(217,163,10)"/><text x="85.6841%" y="239.50"></text></g><g><title>late_resolve_crate (2,420,337 samples, 2.35%)</title><rect x="85.7271%" y="229" width="2.3453%" height="15" fill="rgb(213,25,53)"/><text x="85.9771%" y="239.50">l..</text></g><g><title>configure_and_expand (23,348,490 samples, 22.62%)</title><rect x="65.5975%" y="261" width="22.6246%" height="15" fill="rgb(252,105,26)"/><text x="65.8475%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (3,055,264 samples, 2.96%)</title><rect x="85.2616%" y="245" width="2.9605%" height="15" fill="rgb(220,39,43)"/><text x="85.5116%" y="255.50">res..</text></g><g><title>drop_ast (194,732 samples, 0.19%)</title><rect x="88.2221%" y="261" width="0.1887%" height="15" fill="rgb(229,68,48)"/><text x="88.4721%" y="271.50"></text></g><g><title>early_lint_checks (492,115 samples, 0.48%)</title><rect x="88.4243%" y="261" width="0.4769%" height="15" fill="rgb(252,8,32)"/><text x="88.6743%" y="271.50"></text></g><g><title>free_global_ctxt (3,256,147 samples, 3.16%)</title><rect x="88.9012%" y="261" width="3.1552%" height="15" fill="rgb(223,20,43)"/><text x="89.1512%" y="271.50">fre..</text></g><g><title>generate_crate_metadata (1,001,701 samples, 0.97%)</title><rect x="92.0564%" y="261" width="0.9706%" height="15" fill="rgb(229,81,49)"/><text x="92.3064%" y="271.50"></text></g><g><title>hir_lowering (3,746,062 samples, 3.63%)</title><rect x="93.0270%" y="261" width="3.6299%" height="15" fill="rgb(236,28,36)"/><text x="93.2770%" y="271.50">hir_..</text></g><g><title>parse_crate (1,775,020 samples, 1.72%)</title><rect x="96.7163%" y="261" width="1.7200%" height="15" fill="rgb(249,185,26)"/><text x="96.9663%" y="271.50"></text></g><g><title>prepare_outputs (352,754 samples, 0.34%)</title><rect x="98.4455%" y="261" width="0.3418%" height="15" fill="rgb(249,174,33)"/><text x="98.6955%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (746,468 samples, 0.72%)</title><rect x="98.7873%" y="261" width="0.7233%" height="15" fill="rgb(233,201,37)"/><text x="99.0373%" y="271.50"></text></g><g><title>setup_global_ctxt (140,872 samples, 0.14%)</title><rect x="99.5215%" y="261" width="0.1365%" height="15" fill="rgb(221,78,26)"/><text x="99.7715%" y="271.50"></text></g><g><title>all (103,199,659 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (103,199,659 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (352,954 samples, 0.34%)</title><rect x="99.6580%" y="261" width="0.3420%" height="15" fill="rgb(229,67,23)"/><text x="99.9080%" y="271.50"></text></g></svg></svg>