<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (750,495 samples, 0.11%)</title><rect x="14.1051%" y="149" width="0.1145%" height="15" fill="rgb(227,0,7)"/><text x="14.3551%" y="159.50"></text></g><g><title>codegen_fn_attrs (813,000 samples, 0.12%)</title><rect x="16.5853%" y="101" width="0.1240%" height="15" fill="rgb(217,0,24)"/><text x="16.8353%" y="111.50"></text></g><g><title>is_copy_raw (1,668,850 samples, 0.25%)</title><rect x="20.0283%" y="69" width="0.2546%" height="15" fill="rgb(221,193,54)"/><text x="20.2783%" y="79.50"></text></g><g><title>evaluate_obligation (1,332,776 samples, 0.20%)</title><rect x="20.0795%" y="53" width="0.2033%" height="15" fill="rgb(248,212,6)"/><text x="20.3295%" y="63.50"></text></g><g><title>needs_drop_raw (2,337,488 samples, 0.36%)</title><rect x="19.9280%" y="85" width="0.3566%" height="15" fill="rgb(208,68,35)"/><text x="20.1780%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,912,573 samples, 0.29%)</title><rect x="20.4574%" y="69" width="0.2918%" height="15" fill="rgb(232,128,0)"/><text x="20.7074%" y="79.50"></text></g><g><title>specialization_graph_of (992,053 samples, 0.15%)</title><rect x="20.7746%" y="69" width="0.1513%" height="15" fill="rgb(207,160,47)"/><text x="21.0246%" y="79.50"></text></g><g><title>resolve_instance (4,406,357 samples, 0.67%)</title><rect x="20.2895%" y="85" width="0.6722%" height="15" fill="rgb(228,23,34)"/><text x="20.5395%" y="95.50"></text></g><g><title>thir_body (7,664,542 samples, 1.17%)</title><rect x="20.9867%" y="85" width="1.1693%" height="15" fill="rgb(218,30,26)"/><text x="21.2367%" y="95.50"></text></g><g><title>mir_const (45,609,030 samples, 6.96%)</title><rect x="15.2258%" y="133" width="6.9578%" height="15" fill="rgb(220,122,19)"/><text x="15.4758%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (40,011,959 samples, 6.10%)</title><rect x="16.0797%" y="117" width="6.1040%" height="15" fill="rgb(250,228,42)"/><text x="16.3297%" y="127.50">unsafety..</text></g><g><title>mir_built (35,884,130 samples, 5.47%)</title><rect x="16.7094%" y="101" width="5.4742%" height="15" fill="rgb(240,193,28)"/><text x="16.9594%" y="111.50">mir_bui..</text></g><g><title>mir_const (2,951,970 samples, 0.45%)</title><rect x="22.3719%" y="117" width="0.4503%" height="15" fill="rgb(216,20,37)"/><text x="22.6219%" y="127.50"></text></g><g><title>unsafety_check_result (2,179,179 samples, 0.33%)</title><rect x="22.4898%" y="101" width="0.3324%" height="15" fill="rgb(206,188,39)"/><text x="22.7398%" y="111.50"></text></g><g><title>mir_built (1,904,295 samples, 0.29%)</title><rect x="22.5318%" y="85" width="0.2905%" height="15" fill="rgb(217,207,13)"/><text x="22.7818%" y="95.50"></text></g><g><title>mir_promoted (56,342,649 samples, 8.60%)</title><rect x="14.2274%" y="149" width="8.5953%" height="15" fill="rgb(231,73,38)"/><text x="14.4774%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (4,189,229 samples, 0.64%)</title><rect x="22.1836%" y="133" width="0.6391%" height="15" fill="rgb(225,20,46)"/><text x="22.4336%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (807,508 samples, 0.12%)</title><rect x="22.8260%" y="149" width="0.1232%" height="15" fill="rgb(210,31,41)"/><text x="23.0760%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,230,161 samples, 0.49%)</title><rect x="22.9492%" y="149" width="0.4928%" height="15" fill="rgb(221,200,47)"/><text x="23.1992%" y="159.50"></text></g><g><title>normalize_projection_ty (2,208,683 samples, 0.34%)</title><rect x="23.1050%" y="133" width="0.3369%" height="15" fill="rgb(226,26,5)"/><text x="23.3550%" y="143.50"></text></g><g><title>type_op_normalize_ty (928,363 samples, 0.14%)</title><rect x="23.5411%" y="149" width="0.1416%" height="15" fill="rgb(249,33,26)"/><text x="23.7911%" y="159.50"></text></g><g><title>type_op_prove_predicate (8,487,852 samples, 1.29%)</title><rect x="23.6827%" y="149" width="1.2949%" height="15" fill="rgb(235,183,28)"/><text x="23.9327%" y="159.50"></text></g><g><title>evaluate_obligation (1,341,641 samples, 0.20%)</title><rect x="24.7729%" y="133" width="0.2047%" height="15" fill="rgb(221,5,38)"/><text x="25.0229%" y="143.50"></text></g><g><title>MIR_borrow_checking (160,832,554 samples, 24.54%)</title><rect x="0.4429%" y="181" width="24.5356%" height="15" fill="rgb(247,18,42)"/><text x="0.6929%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (159,607,297 samples, 24.35%)</title><rect x="0.6298%" y="165" width="24.3486%" height="15" fill="rgb(241,131,45)"/><text x="0.8798%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,053,283 samples, 0.31%)</title><rect x="24.9784%" y="181" width="0.3132%" height="15" fill="rgb(249,31,29)"/><text x="25.2284%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,536,442 samples, 0.23%)</title><rect x="25.0573%" y="165" width="0.2344%" height="15" fill="rgb(225,111,53)"/><text x="25.3073%" y="175.50"></text></g><g><title>hir_module_items (1,202,594 samples, 0.18%)</title><rect x="25.2917%" y="181" width="0.1835%" height="15" fill="rgb(238,160,17)"/><text x="25.5417%" y="191.50"></text></g><g><title>should_inherit_track_caller (1,014,145 samples, 0.15%)</title><rect x="25.7561%" y="133" width="0.1547%" height="15" fill="rgb(214,148,48)"/><text x="26.0061%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,538,842 samples, 0.23%)</title><rect x="25.6785%" y="149" width="0.2348%" height="15" fill="rgb(232,36,49)"/><text x="25.9285%" y="159.50"></text></g><g><title>check_mod_attrs (2,846,502 samples, 0.43%)</title><rect x="25.4791%" y="165" width="0.4342%" height="15" fill="rgb(209,103,24)"/><text x="25.7291%" y="175.50"></text></g><g><title>check_mod_const_bodies (810,388 samples, 0.12%)</title><rect x="25.9133%" y="165" width="0.1236%" height="15" fill="rgb(229,88,8)"/><text x="26.1633%" y="175.50"></text></g><g><title>lint_levels (1,053,722 samples, 0.16%)</title><rect x="26.2181%" y="149" width="0.1607%" height="15" fill="rgb(213,181,19)"/><text x="26.4681%" y="159.50"></text></g><g><title>lookup_deprecation_entry (699,128 samples, 0.11%)</title><rect x="26.3789%" y="149" width="0.1067%" height="15" fill="rgb(254,191,54)"/><text x="26.6289%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,687,180 samples, 0.41%)</title><rect x="26.1028%" y="165" width="0.4099%" height="15" fill="rgb(241,83,37)"/><text x="26.3528%" y="175.50"></text></g><g><title>misc_checking_1 (6,966,828 samples, 1.06%)</title><rect x="25.4752%" y="181" width="1.0628%" height="15" fill="rgb(233,36,39)"/><text x="25.7252%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (3,053,403 samples, 0.47%)</title><rect x="26.5383%" y="165" width="0.4658%" height="15" fill="rgb(226,3,54)"/><text x="26.7883%" y="175.50"></text></g><g><title>check_mod_liveness (2,488,828 samples, 0.38%)</title><rect x="26.6244%" y="149" width="0.3797%" height="15" fill="rgb(245,192,40)"/><text x="26.8744%" y="159.50"></text></g><g><title>misc_checking_2 (6,740,364 samples, 1.03%)</title><rect x="26.5380%" y="181" width="1.0283%" height="15" fill="rgb(238,167,29)"/><text x="26.7880%" y="191.50"></text></g><g><title>match_checking (3,684,971 samples, 0.56%)</title><rect x="27.0041%" y="165" width="0.5622%" height="15" fill="rgb(232,182,51)"/><text x="27.2541%" y="175.50"></text></g><g><title>check_match (3,369,290 samples, 0.51%)</title><rect x="27.0523%" y="149" width="0.5140%" height="15" fill="rgb(231,60,39)"/><text x="27.3023%" y="159.50"></text></g><g><title>check_private_in_public (1,307,935 samples, 0.20%)</title><rect x="27.5682%" y="165" width="0.1995%" height="15" fill="rgb(208,69,12)"/><text x="27.8182%" y="175.50"></text></g><g><title>death_checking (2,112,743 samples, 0.32%)</title><rect x="27.7677%" y="165" width="0.3223%" height="15" fill="rgb(235,93,37)"/><text x="28.0177%" y="175.50"></text></g><g><title>crate_lints (5,191,707 samples, 0.79%)</title><rect x="28.0905%" y="149" width="0.7920%" height="15" fill="rgb(213,116,39)"/><text x="28.3405%" y="159.50"></text></g><g><title>type_of (1,336,173 samples, 0.20%)</title><rect x="28.6787%" y="133" width="0.2038%" height="15" fill="rgb(222,207,29)"/><text x="28.9287%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,079,723 samples, 0.16%)</title><rect x="28.7178%" y="117" width="0.1647%" height="15" fill="rgb(206,96,30)"/><text x="28.9678%" y="127.50"></text></g><g><title>lint_checking (7,982,069 samples, 1.22%)</title><rect x="28.0900%" y="165" width="1.2177%" height="15" fill="rgb(218,138,4)"/><text x="28.3400%" y="175.50"></text></g><g><title>module_lints (2,787,242 samples, 0.43%)</title><rect x="28.8825%" y="149" width="0.4252%" height="15" fill="rgb(250,191,14)"/><text x="29.1325%" y="159.50"></text></g><g><title>lint_mod (2,781,752 samples, 0.42%)</title><rect x="28.8834%" y="133" width="0.4244%" height="15" fill="rgb(239,60,40)"/><text x="29.1334%" y="143.50"></text></g><g><title>privacy_access_levels (2,154,844 samples, 0.33%)</title><rect x="29.3077%" y="165" width="0.3287%" height="15" fill="rgb(206,27,48)"/><text x="29.5577%" y="175.50"></text></g><g><title>privacy_checking_modules (5,589,322 samples, 0.85%)</title><rect x="29.6365%" y="165" width="0.8527%" height="15" fill="rgb(225,35,8)"/><text x="29.8865%" y="175.50"></text></g><g><title>check_mod_privacy (5,585,842 samples, 0.85%)</title><rect x="29.6370%" y="149" width="0.8521%" height="15" fill="rgb(250,213,24)"/><text x="29.8870%" y="159.50"></text></g><g><title>misc_checking_3 (19,209,584 samples, 2.93%)</title><rect x="27.5663%" y="181" width="2.9305%" height="15" fill="rgb(247,123,22)"/><text x="27.8163%" y="191.50">mi..</text></g><g><title>adt_destructor (663,447 samples, 0.10%)</title><rect x="30.6002%" y="133" width="0.1012%" height="15" fill="rgb(231,138,38)"/><text x="30.8502%" y="143.50"></text></g><g><title>coherent_trait (658,337 samples, 0.10%)</title><rect x="30.6010%" y="117" width="0.1004%" height="15" fill="rgb(231,145,46)"/><text x="30.8510%" y="127.50"></text></g><g><title>specialization_graph_of (656,937 samples, 0.10%)</title><rect x="30.6012%" y="101" width="0.1002%" height="15" fill="rgb(251,118,11)"/><text x="30.8512%" y="111.50"></text></g><g><title>mir_for_ctfe (693,778 samples, 0.11%)</title><rect x="34.4692%" y="69" width="0.1058%" height="15" fill="rgb(217,147,25)"/><text x="34.7192%" y="79.50"></text></g><g><title>evaluate_obligation (1,712,199 samples, 0.26%)</title><rect x="34.6937%" y="53" width="0.2612%" height="15" fill="rgb(247,81,37)"/><text x="34.9437%" y="63.50"></text></g><g><title>eval_to_const_value_raw (4,229,995 samples, 0.65%)</title><rect x="34.3350%" y="117" width="0.6453%" height="15" fill="rgb(209,12,38)"/><text x="34.5850%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,213,525 samples, 0.64%)</title><rect x="34.3375%" y="101" width="0.6428%" height="15" fill="rgb(227,1,9)"/><text x="34.5875%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,204,635 samples, 0.64%)</title><rect x="34.3389%" y="85" width="0.6414%" height="15" fill="rgb(248,47,43)"/><text x="34.5889%" y="95.50"></text></g><g><title>typeck (2,655,608 samples, 0.41%)</title><rect x="34.5752%" y="69" width="0.4051%" height="15" fill="rgb(221,10,30)"/><text x="34.8252%" y="79.50"></text></g><g><title>generics_of (821,444 samples, 0.13%)</title><rect x="34.9803%" y="117" width="0.1253%" height="15" fill="rgb(210,229,1)"/><text x="35.2303%" y="127.50"></text></g><g><title>impl_parent (6,056,631 samples, 0.92%)</title><rect x="35.1056%" y="117" width="0.9240%" height="15" fill="rgb(222,148,37)"/><text x="35.3556%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (3,268,169 samples, 0.50%)</title><rect x="35.5310%" y="101" width="0.4986%" height="15" fill="rgb(234,67,33)"/><text x="35.7810%" y="111.50"></text></g><g><title>impl_trait_ref (11,388,398 samples, 1.74%)</title><rect x="36.0297%" y="117" width="1.7373%" height="15" fill="rgb(247,98,35)"/><text x="36.2797%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,651,233 samples, 1.32%)</title><rect x="36.4472%" y="101" width="1.3198%" height="15" fill="rgb(247,138,52)"/><text x="36.6972%" y="111.50"></text></g><g><title>item_attrs (4,924,853 samples, 0.75%)</title><rect x="37.7670%" y="117" width="0.7513%" height="15" fill="rgb(213,79,30)"/><text x="38.0170%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (4,408,177 samples, 0.67%)</title><rect x="37.8458%" y="101" width="0.6725%" height="15" fill="rgb(246,177,23)"/><text x="38.0958%" y="111.50"></text></g><g><title>explicit_predicates_of (757,581 samples, 0.12%)</title><rect x="38.8624%" y="85" width="0.1156%" height="15" fill="rgb(230,62,27)"/><text x="39.1124%" y="95.50"></text></g><g><title>predicates_of (3,477,849 samples, 0.53%)</title><rect x="38.5184%" y="117" width="0.5306%" height="15" fill="rgb(216,154,8)"/><text x="38.7684%" y="127.50"></text></g><g><title>predicates_defined_on (2,081,782 samples, 0.32%)</title><rect x="38.7314%" y="101" width="0.3176%" height="15" fill="rgb(244,35,45)"/><text x="38.9814%" y="111.50"></text></g><g><title>trait_impls_of (2,690,294 samples, 0.41%)</title><rect x="39.0516%" y="117" width="0.4104%" height="15" fill="rgb(251,115,12)"/><text x="39.3016%" y="127.50"></text></g><g><title>implementations_of_trait (1,064,842 samples, 0.16%)</title><rect x="39.2995%" y="101" width="0.1624%" height="15" fill="rgb(240,54,50)"/><text x="39.5495%" y="111.50"></text></g><g><title>coherent_trait (59,104,599 samples, 9.02%)</title><rect x="30.5813%" y="149" width="9.0166%" height="15" fill="rgb(233,84,52)"/><text x="30.8313%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (58,156,610 samples, 8.87%)</title><rect x="30.7259%" y="133" width="8.8720%" height="15" fill="rgb(207,117,47)"/><text x="30.9759%" y="143.50">specializatio..</text></g><g><title>type_of (891,167 samples, 0.14%)</title><rect x="39.4620%" y="117" width="0.1360%" height="15" fill="rgb(249,43,39)"/><text x="39.7120%" y="127.50"></text></g><g><title>coherence_checking (59,545,544 samples, 9.08%)</title><rect x="30.5731%" y="165" width="9.0839%" height="15" fill="rgb(209,38,44)"/><text x="30.8231%" y="175.50">coherence_che..</text></g><g><title>associated_item (1,535,157 samples, 0.23%)</title><rect x="63.2177%" y="101" width="0.2342%" height="15" fill="rgb(236,212,23)"/><text x="63.4677%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,200,793 samples, 0.18%)</title><rect x="63.2687%" y="85" width="0.1832%" height="15" fill="rgb(242,79,21)"/><text x="63.5187%" y="95.50"></text></g><g><title>associated_items (2,221,847 samples, 0.34%)</title><rect x="63.1239%" y="117" width="0.3390%" height="15" fill="rgb(211,96,35)"/><text x="63.3739%" y="127.50"></text></g><g><title>dropck_outlives (960,608 samples, 0.15%)</title><rect x="63.4850%" y="117" width="0.1465%" height="15" fill="rgb(253,215,40)"/><text x="63.7350%" y="127.50"></text></g><g><title>mir_const_qualif (1,200,236 samples, 0.18%)</title><rect x="63.7765%" y="85" width="0.1831%" height="15" fill="rgb(211,81,21)"/><text x="64.0265%" y="95.50"></text></g><g><title>mir_const (1,004,946 samples, 0.15%)</title><rect x="63.8063%" y="69" width="0.1533%" height="15" fill="rgb(208,190,38)"/><text x="64.0563%" y="79.50"></text></g><g><title>unsafety_check_result (737,309 samples, 0.11%)</title><rect x="63.8471%" y="53" width="0.1125%" height="15" fill="rgb(235,213,38)"/><text x="64.0971%" y="63.50"></text></g><g><title>mir_borrowck (2,379,128 samples, 0.36%)</title><rect x="64.1338%" y="53" width="0.3629%" height="15" fill="rgb(237,122,38)"/><text x="64.3838%" y="63.50"></text></g><g><title>mir_for_ctfe (3,542,727 samples, 0.54%)</title><rect x="63.9596%" y="85" width="0.5405%" height="15" fill="rgb(244,218,35)"/><text x="64.2096%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,214,866 samples, 0.49%)</title><rect x="64.0096%" y="69" width="0.4904%" height="15" fill="rgb(240,68,47)"/><text x="64.2596%" y="79.50"></text></g><g><title>eval_to_allocation_raw (5,897,016 samples, 0.90%)</title><rect x="63.6481%" y="101" width="0.8996%" height="15" fill="rgb(210,16,53)"/><text x="63.8981%" y="111.50"></text></g><g><title>mir_for_ctfe (850,608 samples, 0.13%)</title><rect x="64.6562%" y="69" width="0.1298%" height="15" fill="rgb(235,124,12)"/><text x="64.9062%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (841,137 samples, 0.13%)</title><rect x="64.6576%" y="53" width="0.1283%" height="15" fill="rgb(224,169,11)"/><text x="64.9076%" y="63.50"></text></g><g><title>eval_to_const_value_raw (7,594,178 samples, 1.16%)</title><rect x="63.6316%" y="117" width="1.1585%" height="15" fill="rgb(250,166,2)"/><text x="63.8816%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,588,901 samples, 0.24%)</title><rect x="64.5477%" y="101" width="0.2424%" height="15" fill="rgb(242,216,29)"/><text x="64.7977%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,552,741 samples, 0.24%)</title><rect x="64.5532%" y="85" width="0.2369%" height="15" fill="rgb(230,116,27)"/><text x="64.8032%" y="95.50"></text></g><g><title>generics_of (1,306,302 samples, 0.20%)</title><rect x="67.0692%" y="101" width="0.1993%" height="15" fill="rgb(228,99,48)"/><text x="67.3192%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (978,441 samples, 0.15%)</title><rect x="67.1192%" y="85" width="0.1493%" height="15" fill="rgb(253,11,6)"/><text x="67.3692%" y="95.50"></text></g><g><title>predicates_of (1,185,802 samples, 0.18%)</title><rect x="67.3332%" y="101" width="0.1809%" height="15" fill="rgb(247,143,39)"/><text x="67.5832%" y="111.50"></text></g><g><title>predicates_defined_on (725,357 samples, 0.11%)</title><rect x="67.4035%" y="85" width="0.1107%" height="15" fill="rgb(236,97,10)"/><text x="67.6535%" y="95.50"></text></g><g><title>specializes (1,943,344 samples, 0.30%)</title><rect x="67.5166%" y="101" width="0.2965%" height="15" fill="rgb(233,208,19)"/><text x="67.7666%" y="111.50"></text></g><g><title>param_env (916,892 samples, 0.14%)</title><rect x="67.6732%" y="85" width="0.1399%" height="15" fill="rgb(216,164,2)"/><text x="67.9232%" y="95.50"></text></g><g><title>evaluate_obligation (20,053,820 samples, 3.06%)</title><rect x="64.7901%" y="117" width="3.0593%" height="15" fill="rgb(220,129,5)"/><text x="65.0401%" y="127.50">eva..</text></g><g><title>generics_of (1,461,085 samples, 0.22%)</title><rect x="67.8964%" y="117" width="0.2229%" height="15" fill="rgb(242,17,10)"/><text x="68.1464%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (927,322 samples, 0.14%)</title><rect x="67.9778%" y="101" width="0.1415%" height="15" fill="rgb(242,107,0)"/><text x="68.2278%" y="111.50"></text></g><g><title>method_autoderef_steps (1,143,261 samples, 0.17%)</title><rect x="68.3156%" y="117" width="0.1744%" height="15" fill="rgb(251,28,31)"/><text x="68.5656%" y="127.50"></text></g><g><title>param_env (1,583,932 samples, 0.24%)</title><rect x="68.5244%" y="117" width="0.2416%" height="15" fill="rgb(233,223,10)"/><text x="68.7744%" y="127.50"></text></g><g><title>predicates_of (693,118 samples, 0.11%)</title><rect x="68.6603%" y="101" width="0.1057%" height="15" fill="rgb(215,21,27)"/><text x="68.9103%" y="111.50"></text></g><g><title>predicates_of (1,053,548 samples, 0.16%)</title><rect x="68.7920%" y="117" width="0.1607%" height="15" fill="rgb(232,23,21)"/><text x="69.0420%" y="127.50"></text></g><g><title>predicates_defined_on (680,534 samples, 0.10%)</title><rect x="68.8489%" y="101" width="0.1038%" height="15" fill="rgb(244,5,23)"/><text x="69.0989%" y="111.50"></text></g><g><title>evaluate_obligation (1,211,400 samples, 0.18%)</title><rect x="71.0786%" y="101" width="0.1848%" height="15" fill="rgb(226,81,46)"/><text x="71.3286%" y="111.50"></text></g><g><title>typeck (15,138,817 samples, 2.31%)</title><rect x="69.1315%" y="117" width="2.3095%" height="15" fill="rgb(247,70,30)"/><text x="69.3815%" y="127.50">t..</text></g><g><title>item_bodies_checking (208,371,153 samples, 31.79%)</title><rect x="39.6966%" y="165" width="31.7877%" height="15" fill="rgb(212,68,19)"/><text x="39.9466%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (208,367,423 samples, 31.79%)</title><rect x="39.6972%" y="149" width="31.7872%" height="15" fill="rgb(240,187,13)"/><text x="39.9472%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (207,514,346 samples, 31.66%)</title><rect x="39.8273%" y="133" width="31.6570%" height="15" fill="rgb(223,113,26)"/><text x="40.0773%" y="143.50">typeck</text></g><g><title>impl_item_implementor_ids (700,738 samples, 0.11%)</title><rect x="73.5084%" y="133" width="0.1069%" height="15" fill="rgb(206,192,2)"/><text x="73.7584%" y="143.50"></text></g><g><title>specializes (1,463,533 samples, 0.22%)</title><rect x="74.2423%" y="101" width="0.2233%" height="15" fill="rgb(241,108,4)"/><text x="74.4923%" y="111.50"></text></g><g><title>param_env (694,406 samples, 0.11%)</title><rect x="74.3597%" y="85" width="0.1059%" height="15" fill="rgb(247,173,49)"/><text x="74.6097%" y="95.50"></text></g><g><title>evaluate_obligation (4,318,567 samples, 0.66%)</title><rect x="73.8080%" y="117" width="0.6588%" height="15" fill="rgb(224,114,35)"/><text x="74.0580%" y="127.50"></text></g><g><title>typeck (5,649,391 samples, 0.86%)</title><rect x="73.6322%" y="133" width="0.8618%" height="15" fill="rgb(245,159,27)"/><text x="73.8822%" y="143.50"></text></g><g><title>item_types_checking (19,730,070 samples, 3.01%)</title><rect x="71.4843%" y="165" width="3.0099%" height="15" fill="rgb(245,172,44)"/><text x="71.7343%" y="175.50">ite..</text></g><g><title>check_mod_item_types (19,724,910 samples, 3.01%)</title><rect x="71.4851%" y="149" width="3.0091%" height="15" fill="rgb(236,23,11)"/><text x="71.7351%" y="159.50">che..</text></g><g><title>fn_sig (2,124,239 samples, 0.32%)</title><rect x="74.7598%" y="133" width="0.3241%" height="15" fill="rgb(205,117,38)"/><text x="75.0098%" y="143.50"></text></g><g><title>is_late_bound_map (939,947 samples, 0.14%)</title><rect x="75.2344%" y="117" width="0.1434%" height="15" fill="rgb(237,72,25)"/><text x="75.4844%" y="127.50"></text></g><g><title>resolve_lifetimes (854,226 samples, 0.13%)</title><rect x="75.2475%" y="101" width="0.1303%" height="15" fill="rgb(244,70,9)"/><text x="75.4975%" y="111.50"></text></g><g><title>named_region_map (1,474,545 samples, 0.22%)</title><rect x="75.3778%" y="117" width="0.2249%" height="15" fill="rgb(217,125,39)"/><text x="75.6278%" y="127.50"></text></g><g><title>resolve_lifetimes (1,348,283 samples, 0.21%)</title><rect x="75.3971%" y="101" width="0.2057%" height="15" fill="rgb(235,36,10)"/><text x="75.6471%" y="111.50"></text></g><g><title>generics_of (3,496,078 samples, 0.53%)</title><rect x="75.0839%" y="133" width="0.5333%" height="15" fill="rgb(251,123,47)"/><text x="75.3339%" y="143.50"></text></g><g><title>explicit_predicates_of (1,099,564 samples, 0.17%)</title><rect x="75.8488%" y="101" width="0.1677%" height="15" fill="rgb(221,13,13)"/><text x="76.0988%" y="111.50"></text></g><g><title>predicates_of (2,253,062 samples, 0.34%)</title><rect x="75.7065%" y="133" width="0.3437%" height="15" fill="rgb(238,131,9)"/><text x="75.9565%" y="143.50"></text></g><g><title>predicates_defined_on (1,903,456 samples, 0.29%)</title><rect x="75.7598%" y="117" width="0.2904%" height="15" fill="rgb(211,50,8)"/><text x="76.0098%" y="127.50"></text></g><g><title>type_collecting (10,905,002 samples, 1.66%)</title><rect x="74.4948%" y="165" width="1.6636%" height="15" fill="rgb(245,182,24)"/><text x="74.7448%" y="175.50"></text></g><g><title>collect_mod_item_types (10,892,692 samples, 1.66%)</title><rect x="74.4967%" y="149" width="1.6617%" height="15" fill="rgb(242,14,37)"/><text x="74.7467%" y="159.50"></text></g><g><title>type_of (695,150 samples, 0.11%)</title><rect x="76.0524%" y="133" width="0.1060%" height="15" fill="rgb(246,228,12)"/><text x="76.3024%" y="143.50"></text></g><g><title>evaluate_obligation (697,727 samples, 0.11%)</title><rect x="78.4969%" y="69" width="0.1064%" height="15" fill="rgb(213,55,15)"/><text x="78.7469%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,314,276 samples, 0.35%)</title><rect x="78.2615%" y="133" width="0.3531%" height="15" fill="rgb(209,9,3)"/><text x="78.5115%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,306,766 samples, 0.35%)</title><rect x="78.2627%" y="117" width="0.3519%" height="15" fill="rgb(230,59,30)"/><text x="78.5127%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,287,356 samples, 0.35%)</title><rect x="78.2656%" y="101" width="0.3489%" height="15" fill="rgb(209,121,21)"/><text x="78.5156%" y="111.50"></text></g><g><title>typeck (1,354,814 samples, 0.21%)</title><rect x="78.4079%" y="85" width="0.2067%" height="15" fill="rgb(220,109,13)"/><text x="78.6579%" y="95.50"></text></g><g><title>evaluate_obligation (1,081,589 samples, 0.17%)</title><rect x="78.6146%" y="133" width="0.1650%" height="15" fill="rgb(232,18,1)"/><text x="78.8646%" y="143.50"></text></g><g><title>implied_outlives_bounds (727,680 samples, 0.11%)</title><rect x="78.7922%" y="133" width="0.1110%" height="15" fill="rgb(215,41,42)"/><text x="79.0422%" y="143.50"></text></g><g><title>param_env (2,522,263 samples, 0.38%)</title><rect x="78.9125%" y="133" width="0.3848%" height="15" fill="rgb(224,123,36)"/><text x="79.1625%" y="143.50"></text></g><g><title>region_scope_tree (3,088,772 samples, 0.47%)</title><rect x="79.3177%" y="133" width="0.4712%" height="15" fill="rgb(240,125,3)"/><text x="79.5677%" y="143.50"></text></g><g><title>check_impl_item_well_formed (22,572,199 samples, 3.44%)</title><rect x="76.3889%" y="149" width="3.4435%" height="15" fill="rgb(205,98,50)"/><text x="76.6389%" y="159.50">che..</text></g><g><title>eval_to_const_value_raw (1,146,513 samples, 0.17%)</title><rect x="81.6298%" y="69" width="0.1749%" height="15" fill="rgb(205,185,37)"/><text x="81.8798%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,144,063 samples, 0.17%)</title><rect x="81.6301%" y="53" width="0.1745%" height="15" fill="rgb(238,207,15)"/><text x="81.8801%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,140,943 samples, 0.17%)</title><rect x="81.6306%" y="37" width="0.1741%" height="15" fill="rgb(213,199,42)"/><text x="81.8806%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,163,624 samples, 0.18%)</title><rect x="81.6280%" y="85" width="0.1775%" height="15" fill="rgb(235,201,11)"/><text x="81.8780%" y="95.50"></text></g><g><title>evaluate_obligation (703,387 samples, 0.11%)</title><rect x="81.8414%" y="69" width="0.1073%" height="15" fill="rgb(207,46,11)"/><text x="82.0914%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,650,280 samples, 0.40%)</title><rect x="81.5529%" y="133" width="0.4043%" height="15" fill="rgb(241,35,35)"/><text x="81.8029%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,646,190 samples, 0.40%)</title><rect x="81.5535%" y="117" width="0.4037%" height="15" fill="rgb(243,32,47)"/><text x="81.8035%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,640,610 samples, 0.40%)</title><rect x="81.5544%" y="101" width="0.4028%" height="15" fill="rgb(247,202,23)"/><text x="81.8044%" y="111.50"></text></g><g><title>typeck (994,321 samples, 0.15%)</title><rect x="81.8055%" y="85" width="0.1517%" height="15" fill="rgb(219,102,11)"/><text x="82.0555%" y="95.50"></text></g><g><title>evaluate_obligation (2,243,019 samples, 0.34%)</title><rect x="81.9572%" y="133" width="0.3422%" height="15" fill="rgb(243,110,44)"/><text x="82.2072%" y="143.50"></text></g><g><title>param_env (1,319,989 samples, 0.20%)</title><rect x="82.3522%" y="133" width="0.2014%" height="15" fill="rgb(222,74,54)"/><text x="82.6022%" y="143.50"></text></g><g><title>check_item_well_formed (18,631,046 samples, 2.84%)</title><rect x="79.8324%" y="149" width="2.8422%" height="15" fill="rgb(216,99,12)"/><text x="80.0824%" y="159.50">ch..</text></g><g><title>analysis (540,895,791 samples, 82.52%)</title><rect x="0.2080%" y="197" width="82.5155%" height="15" fill="rgb(226,22,26)"/><text x="0.4580%" y="207.50">analysis</text></g><g><title>type_check_crate (342,350,608 samples, 52.23%)</title><rect x="30.4968%" y="181" width="52.2268%" height="15" fill="rgb(217,163,10)"/><text x="30.7468%" y="191.50">type_check_crate</text></g><g><title>wf_checking (42,972,899 samples, 6.56%)</title><rect x="76.1679%" y="165" width="6.5557%" height="15" fill="rgb(213,25,53)"/><text x="76.4179%" y="175.50">wf_checki..</text></g><g><title>metadata_load_macro (2,902,892 samples, 0.44%)</title><rect x="89.7990%" y="149" width="0.4428%" height="15" fill="rgb(252,105,26)"/><text x="90.0490%" y="159.50"></text></g><g><title>metadata_register_crate (11,211,826 samples, 1.71%)</title><rect x="90.2418%" y="149" width="1.7104%" height="15" fill="rgb(220,39,43)"/><text x="90.4918%" y="159.50"></text></g><g><title>metadata_register_crate (10,019,801 samples, 1.53%)</title><rect x="90.4237%" y="133" width="1.5286%" height="15" fill="rgb(229,68,48)"/><text x="90.6737%" y="143.50"></text></g><g><title>metadata_register_crate (9,357,944 samples, 1.43%)</title><rect x="90.5247%" y="117" width="1.4276%" height="15" fill="rgb(252,8,32)"/><text x="90.7747%" y="127.50"></text></g><g><title>metadata_register_crate (8,671,457 samples, 1.32%)</title><rect x="90.6294%" y="101" width="1.3229%" height="15" fill="rgb(223,20,43)"/><text x="90.8794%" y="111.50"></text></g><g><title>macro_expand_crate (59,058,199 samples, 9.01%)</title><rect x="82.9592%" y="181" width="9.0095%" height="15" fill="rgb(229,81,49)"/><text x="83.2092%" y="191.50">macro_expand_..</text></g><g><title>expand_crate (59,047,239 samples, 9.01%)</title><rect x="82.9608%" y="165" width="9.0079%" height="15" fill="rgb(236,28,36)"/><text x="83.2108%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (8,329,293 samples, 1.27%)</title><rect x="92.0836%" y="165" width="1.2707%" height="15" fill="rgb(249,185,26)"/><text x="92.3336%" y="175.50"></text></g><g><title>configure_and_expand (69,809,889 samples, 10.65%)</title><rect x="82.7970%" y="197" width="10.6497%" height="15" fill="rgb(249,174,33)"/><text x="83.0470%" y="207.50">configure_and_ex..</text></g><g><title>resolve_crate (9,647,387 samples, 1.47%)</title><rect x="91.9750%" y="181" width="1.4717%" height="15" fill="rgb(233,201,37)"/><text x="92.2250%" y="191.50"></text></g><g><title>drop_ast (1,143,223 samples, 0.17%)</title><rect x="93.4468%" y="197" width="0.1744%" height="15" fill="rgb(221,78,26)"/><text x="93.6968%" y="207.50"></text></g><g><title>early_lint_checks (2,521,608 samples, 0.38%)</title><rect x="93.6254%" y="197" width="0.3847%" height="15" fill="rgb(250,127,30)"/><text x="93.8754%" y="207.50"></text></g><g><title>free_global_ctxt (8,844,499 samples, 1.35%)</title><rect x="94.0100%" y="197" width="1.3493%" height="15" fill="rgb(230,49,44)"/><text x="94.2600%" y="207.50"></text></g><g><title>generate_crate_metadata (6,470,422 samples, 0.99%)</title><rect x="95.3593%" y="197" width="0.9871%" height="15" fill="rgb(229,67,23)"/><text x="95.6093%" y="207.50"></text></g><g><title>hir_lowering (20,084,444 samples, 3.06%)</title><rect x="96.3464%" y="197" width="3.0640%" height="15" fill="rgb(249,83,47)"/><text x="96.5964%" y="207.50">hir..</text></g><g><title>self_profile_alloc_query_strings (2,754,191 samples, 0.42%)</title><rect x="99.4793%" y="197" width="0.4202%" height="15" fill="rgb(215,43,3)"/><text x="99.7293%" y="207.50"></text></g><g><title>all (655,508,049 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (655,508,049 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>