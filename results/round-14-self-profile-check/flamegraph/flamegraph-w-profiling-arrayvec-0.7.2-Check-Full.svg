<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_promoted (2,326,028 samples, 1.04%)</title><rect x="13.8231%" y="117" width="1.0399%" height="15" fill="rgb(227,0,7)"/><text x="14.0731%" y="127.50"></text></g><g><title>mir_const_qualif_const_arg (1,946,404 samples, 0.87%)</title><rect x="13.9929%" y="101" width="0.8702%" height="15" fill="rgb(217,0,24)"/><text x="14.2429%" y="111.50"></text></g><g><title>mir_const (1,638,802 samples, 0.73%)</title><rect x="14.1304%" y="85" width="0.7326%" height="15" fill="rgb(221,193,54)"/><text x="14.3804%" y="95.50"></text></g><g><title>unsafety_check_result_for_const_arg (1,100,259 samples, 0.49%)</title><rect x="14.3711%" y="69" width="0.4919%" height="15" fill="rgb(248,212,6)"/><text x="14.6211%" y="79.50"></text></g><g><title>mir_built (950,626 samples, 0.42%)</title><rect x="14.4380%" y="53" width="0.4250%" height="15" fill="rgb(208,68,35)"/><text x="14.6880%" y="63.50"></text></g><g><title>mir_borrowck_const_arg (5,778,224 samples, 2.58%)</title><rect x="12.2879%" y="133" width="2.5832%" height="15" fill="rgb(232,128,0)"/><text x="12.5379%" y="143.50">mi..</text></g><g><title>param_env (647,691 samples, 0.29%)</title><rect x="16.4914%" y="101" width="0.2896%" height="15" fill="rgb(207,160,47)"/><text x="16.7414%" y="111.50"></text></g><g><title>item_attrs (482,782 samples, 0.22%)</title><rect x="17.3480%" y="69" width="0.2158%" height="15" fill="rgb(228,23,34)"/><text x="17.5980%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (468,212 samples, 0.21%)</title><rect x="17.3545%" y="53" width="0.2093%" height="15" fill="rgb(218,30,26)"/><text x="17.6045%" y="63.50"></text></g><g><title>codegen_fn_attrs (688,625 samples, 0.31%)</title><rect x="17.2679%" y="85" width="0.3079%" height="15" fill="rgb(220,122,19)"/><text x="17.5179%" y="95.50"></text></g><g><title>is_copy_raw (320,943 samples, 0.14%)</title><rect x="20.0028%" y="69" width="0.1435%" height="15" fill="rgb(250,228,42)"/><text x="20.2528%" y="79.50"></text></g><g><title>evaluate_obligation (262,853 samples, 0.12%)</title><rect x="20.0288%" y="53" width="0.1175%" height="15" fill="rgb(240,193,28)"/><text x="20.2788%" y="63.50"></text></g><g><title>needs_drop_raw (1,667,898 samples, 0.75%)</title><rect x="20.1483%" y="69" width="0.7456%" height="15" fill="rgb(216,20,37)"/><text x="20.3983%" y="79.50"></text></g><g><title>is_copy_raw (1,314,942 samples, 0.59%)</title><rect x="20.3061%" y="53" width="0.5879%" height="15" fill="rgb(206,188,39)"/><text x="20.5561%" y="63.50"></text></g><g><title>evaluate_obligation (1,109,632 samples, 0.50%)</title><rect x="20.3979%" y="37" width="0.4961%" height="15" fill="rgb(217,207,13)"/><text x="20.6479%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (810,431 samples, 0.36%)</title><rect x="21.1992%" y="53" width="0.3623%" height="15" fill="rgb(231,73,38)"/><text x="21.4492%" y="63.50"></text></g><g><title>resolve_instance (2,001,774 samples, 0.89%)</title><rect x="20.9069%" y="69" width="0.8949%" height="15" fill="rgb(225,20,46)"/><text x="21.1569%" y="79.50"></text></g><g><title>thir_body (2,197,967 samples, 0.98%)</title><rect x="21.8280%" y="69" width="0.9826%" height="15" fill="rgb(210,31,41)"/><text x="22.0780%" y="79.50"></text></g><g><title>mir_const (15,967,208 samples, 7.14%)</title><rect x="15.6966%" y="117" width="7.1382%" height="15" fill="rgb(221,200,47)"/><text x="15.9466%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (13,541,738 samples, 6.05%)</title><rect x="16.7809%" y="101" width="6.0539%" height="15" fill="rgb(226,26,5)"/><text x="17.0309%" y="111.50">unsafety..</text></g><g><title>mir_built (11,763,861 samples, 5.26%)</title><rect x="17.5757%" y="85" width="5.2591%" height="15" fill="rgb(249,33,26)"/><text x="17.8257%" y="95.50">mir_bu..</text></g><g><title>mir_const (1,006,988 samples, 0.45%)</title><rect x="23.0724%" y="101" width="0.4502%" height="15" fill="rgb(235,183,28)"/><text x="23.3224%" y="111.50"></text></g><g><title>unsafety_check_result (769,753 samples, 0.34%)</title><rect x="23.1784%" y="85" width="0.3441%" height="15" fill="rgb(221,5,38)"/><text x="23.4284%" y="95.50"></text></g><g><title>mir_built (680,763 samples, 0.30%)</title><rect x="23.2182%" y="69" width="0.3043%" height="15" fill="rgb(247,18,42)"/><text x="23.4682%" y="79.50"></text></g><g><title>mir_const_qualif (1,719,478 samples, 0.77%)</title><rect x="22.8349%" y="117" width="0.7687%" height="15" fill="rgb(241,131,45)"/><text x="23.0849%" y="127.50"></text></g><g><title>mir_promoted (19,533,352 samples, 8.73%)</title><rect x="14.8711%" y="133" width="8.7325%" height="15" fill="rgb(249,31,29)"/><text x="15.1211%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (760,609 samples, 0.34%)</title><rect x="23.6055%" y="133" width="0.3400%" height="15" fill="rgb(225,111,53)"/><text x="23.8555%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (990,411 samples, 0.44%)</title><rect x="23.9455%" y="133" width="0.4428%" height="15" fill="rgb(238,160,17)"/><text x="24.1955%" y="143.50"></text></g><g><title>normalize_projection_ty (548,966 samples, 0.25%)</title><rect x="24.1429%" y="117" width="0.2454%" height="15" fill="rgb(214,148,48)"/><text x="24.3929%" y="127.50"></text></g><g><title>type_op_normalize_ty (508,146 samples, 0.23%)</title><rect x="24.4647%" y="133" width="0.2272%" height="15" fill="rgb(232,36,49)"/><text x="24.7147%" y="143.50"></text></g><g><title>normalize_projection_ty (343,585 samples, 0.15%)</title><rect x="24.5382%" y="117" width="0.1536%" height="15" fill="rgb(209,103,24)"/><text x="24.7882%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,874,501 samples, 1.73%)</title><rect x="24.6918%" y="133" width="1.7321%" height="15" fill="rgb(229,88,8)"/><text x="24.9418%" y="143.50"></text></g><g><title>MIR_borrow_checking (57,780,149 samples, 25.83%)</title><rect x="0.5964%" y="165" width="25.8310%" height="15" fill="rgb(213,181,19)"/><text x="0.8464%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (57,293,041 samples, 25.61%)</title><rect x="0.8141%" y="149" width="25.6132%" height="15" fill="rgb(254,191,54)"/><text x="1.0641%" y="159.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (809,129 samples, 0.36%)</title><rect x="26.8526%" y="133" width="0.3617%" height="15" fill="rgb(241,83,37)"/><text x="27.1026%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,472,907 samples, 0.66%)</title><rect x="26.5634%" y="149" width="0.6585%" height="15" fill="rgb(233,36,39)"/><text x="26.8134%" y="159.50"></text></g><g><title>MIR_effect_checking (1,800,570 samples, 0.80%)</title><rect x="26.4274%" y="165" width="0.8050%" height="15" fill="rgb(226,3,54)"/><text x="26.6774%" y="175.50"></text></g><g><title>hir_module_items (376,994 samples, 0.17%)</title><rect x="27.2323%" y="165" width="0.1685%" height="15" fill="rgb(245,192,40)"/><text x="27.4823%" y="175.50"></text></g><g><title>codegen_fn_attrs (313,594 samples, 0.14%)</title><rect x="27.8146%" y="101" width="0.1402%" height="15" fill="rgb(238,167,29)"/><text x="28.0646%" y="111.50"></text></g><g><title>should_inherit_track_caller (553,646 samples, 0.25%)</title><rect x="27.7144%" y="117" width="0.2475%" height="15" fill="rgb(232,182,51)"/><text x="27.9644%" y="127.50"></text></g><g><title>codegen_fn_attrs (814,788 samples, 0.36%)</title><rect x="27.6086%" y="133" width="0.3643%" height="15" fill="rgb(231,60,39)"/><text x="27.8586%" y="143.50"></text></g><g><title>check_mod_attrs (1,243,653 samples, 0.56%)</title><rect x="27.4169%" y="149" width="0.5560%" height="15" fill="rgb(208,69,12)"/><text x="27.6669%" y="159.50"></text></g><g><title>check_mod_const_bodies (275,232 samples, 0.12%)</title><rect x="27.9729%" y="149" width="0.1230%" height="15" fill="rgb(235,93,37)"/><text x="28.2229%" y="159.50"></text></g><g><title>lookup_deprecation_entry (308,223 samples, 0.14%)</title><rect x="28.3183%" y="133" width="0.1378%" height="15" fill="rgb(213,116,39)"/><text x="28.5683%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (836,721 samples, 0.37%)</title><rect x="28.1648%" y="149" width="0.3741%" height="15" fill="rgb(222,207,29)"/><text x="28.4148%" y="159.50"></text></g><g><title>misc_checking_1 (2,621,099 samples, 1.17%)</title><rect x="27.4011%" y="165" width="1.1718%" height="15" fill="rgb(206,96,30)"/><text x="27.6511%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (946,661 samples, 0.42%)</title><rect x="28.5738%" y="149" width="0.4232%" height="15" fill="rgb(218,138,4)"/><text x="28.8238%" y="159.50"></text></g><g><title>check_mod_liveness (752,468 samples, 0.34%)</title><rect x="28.6606%" y="133" width="0.3364%" height="15" fill="rgb(250,191,14)"/><text x="28.9106%" y="143.50"></text></g><g><title>misc_checking_2 (1,920,101 samples, 0.86%)</title><rect x="28.5729%" y="165" width="0.8584%" height="15" fill="rgb(239,60,40)"/><text x="28.8229%" y="175.50"></text></g><g><title>match_checking (971,380 samples, 0.43%)</title><rect x="28.9970%" y="149" width="0.4343%" height="15" fill="rgb(206,27,48)"/><text x="29.2470%" y="159.50"></text></g><g><title>check_match (856,809 samples, 0.38%)</title><rect x="29.0482%" y="133" width="0.3830%" height="15" fill="rgb(225,35,8)"/><text x="29.2982%" y="143.50"></text></g><g><title>check_private_in_public (439,934 samples, 0.20%)</title><rect x="29.4356%" y="149" width="0.1967%" height="15" fill="rgb(250,213,24)"/><text x="29.6856%" y="159.50"></text></g><g><title>death_checking (847,490 samples, 0.38%)</title><rect x="29.6322%" y="149" width="0.3789%" height="15" fill="rgb(247,123,22)"/><text x="29.8822%" y="159.50"></text></g><g><title>eval_to_const_value_raw (291,032 samples, 0.13%)</title><rect x="30.4863%" y="117" width="0.1301%" height="15" fill="rgb(231,138,38)"/><text x="30.7363%" y="127.50"></text></g><g><title>eval_to_const_value_raw (285,132 samples, 0.13%)</title><rect x="30.4890%" y="101" width="0.1275%" height="15" fill="rgb(231,145,46)"/><text x="30.7390%" y="111.50"></text></g><g><title>eval_to_allocation_raw (272,802 samples, 0.12%)</title><rect x="30.4945%" y="85" width="0.1220%" height="15" fill="rgb(251,118,11)"/><text x="30.7445%" y="95.50"></text></g><g><title>param_env (696,548 samples, 0.31%)</title><rect x="30.6164%" y="117" width="0.3114%" height="15" fill="rgb(217,147,25)"/><text x="30.8664%" y="127.50"></text></g><g><title>predicates_of (245,753 samples, 0.11%)</title><rect x="30.8180%" y="101" width="0.1099%" height="15" fill="rgb(247,81,37)"/><text x="31.0680%" y="111.50"></text></g><g><title>crate_lints (3,192,715 samples, 1.43%)</title><rect x="30.0119%" y="133" width="1.4273%" height="15" fill="rgb(209,12,38)"/><text x="30.2619%" y="143.50"></text></g><g><title>type_of (1,136,162 samples, 0.51%)</title><rect x="30.9313%" y="117" width="0.5079%" height="15" fill="rgb(227,1,9)"/><text x="31.1813%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (904,310 samples, 0.40%)</title><rect x="31.0349%" y="101" width="0.4043%" height="15" fill="rgb(248,47,43)"/><text x="31.2849%" y="111.50"></text></g><g><title>lint_checking (4,002,294 samples, 1.79%)</title><rect x="30.0111%" y="149" width="1.7893%" height="15" fill="rgb(221,10,30)"/><text x="30.2611%" y="159.50">l..</text></g><g><title>module_lints (807,809 samples, 0.36%)</title><rect x="31.4392%" y="133" width="0.3611%" height="15" fill="rgb(210,229,1)"/><text x="31.6892%" y="143.50"></text></g><g><title>lint_mod (800,249 samples, 0.36%)</title><rect x="31.4426%" y="117" width="0.3578%" height="15" fill="rgb(222,148,37)"/><text x="31.6926%" y="127.50"></text></g><g><title>privacy_access_levels (608,997 samples, 0.27%)</title><rect x="31.8004%" y="149" width="0.2723%" height="15" fill="rgb(234,67,33)"/><text x="32.0504%" y="159.50"></text></g><g><title>privacy_checking_modules (1,666,489 samples, 0.75%)</title><rect x="32.0726%" y="149" width="0.7450%" height="15" fill="rgb(247,98,35)"/><text x="32.3226%" y="159.50"></text></g><g><title>check_mod_privacy (1,661,399 samples, 0.74%)</title><rect x="32.0749%" y="133" width="0.7427%" height="15" fill="rgb(247,138,52)"/><text x="32.3249%" y="143.50"></text></g><g><title>misc_checking_3 (7,594,144 samples, 3.40%)</title><rect x="29.4313%" y="165" width="3.3950%" height="15" fill="rgb(213,79,30)"/><text x="29.6813%" y="175.50">mis..</text></g><g><title>adt_destructor (366,064 samples, 0.16%)</title><rect x="33.0676%" y="117" width="0.1637%" height="15" fill="rgb(246,177,23)"/><text x="33.3176%" y="127.50"></text></g><g><title>coherent_trait (362,994 samples, 0.16%)</title><rect x="33.0690%" y="101" width="0.1623%" height="15" fill="rgb(230,62,27)"/><text x="33.3190%" y="111.50"></text></g><g><title>specialization_graph_of (360,844 samples, 0.16%)</title><rect x="33.0700%" y="85" width="0.1613%" height="15" fill="rgb(216,154,8)"/><text x="33.3200%" y="95.50"></text></g><g><title>is_copy_raw (260,232 samples, 0.12%)</title><rect x="33.2313%" y="117" width="0.1163%" height="15" fill="rgb(244,35,45)"/><text x="33.4813%" y="127.50"></text></g><g><title>evaluate_obligation (237,712 samples, 0.11%)</title><rect x="33.2413%" y="101" width="0.1063%" height="15" fill="rgb(251,115,12)"/><text x="33.4913%" y="111.50"></text></g><g><title>impl_parent (3,632,280 samples, 1.62%)</title><rect x="36.4139%" y="101" width="1.6238%" height="15" fill="rgb(240,54,50)"/><text x="36.6639%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,995,191 samples, 0.89%)</title><rect x="37.1458%" y="85" width="0.8920%" height="15" fill="rgb(233,84,52)"/><text x="37.3958%" y="95.50"></text></g><g><title>impl_trait_ref (7,327,909 samples, 3.28%)</title><rect x="38.0388%" y="101" width="3.2760%" height="15" fill="rgb(207,117,47)"/><text x="38.2888%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,677,373 samples, 2.54%)</title><rect x="38.7767%" y="85" width="2.5381%" height="15" fill="rgb(249,43,39)"/><text x="39.0267%" y="95.50">me..</text></g><g><title>predicates_of (243,185 samples, 0.11%)</title><rect x="41.3868%" y="101" width="0.1087%" height="15" fill="rgb(209,38,44)"/><text x="41.6368%" y="111.50"></text></g><g><title>trait_impls_of (1,428,464 samples, 0.64%)</title><rect x="41.4955%" y="101" width="0.6386%" height="15" fill="rgb(236,212,23)"/><text x="41.7455%" y="111.50"></text></g><g><title>implementations_of_trait (428,573 samples, 0.19%)</title><rect x="41.9425%" y="85" width="0.1916%" height="15" fill="rgb(242,79,21)"/><text x="42.1925%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (305,723 samples, 0.14%)</title><rect x="41.9974%" y="69" width="0.1367%" height="15" fill="rgb(211,96,35)"/><text x="42.2474%" y="79.50"></text></g><g><title>coherent_trait (20,378,563 samples, 9.11%)</title><rect x="33.0349%" y="133" width="9.1104%" height="15" fill="rgb(253,215,40)"/><text x="33.2849%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (19,634,895 samples, 8.78%)</title><rect x="33.3674%" y="117" width="8.7779%" height="15" fill="rgb(211,81,21)"/><text x="33.6174%" y="127.50">specializati..</text></g><g><title>coherence_checking (20,549,027 samples, 9.19%)</title><rect x="33.0196%" y="149" width="9.1866%" height="15" fill="rgb(208,190,38)"/><text x="33.2696%" y="159.50">coherence_che..</text></g><g><title>associated_item (727,027 samples, 0.33%)</title><rect x="60.4208%" y="85" width="0.3250%" height="15" fill="rgb(235,213,38)"/><text x="60.6708%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (581,715 samples, 0.26%)</title><rect x="60.4858%" y="69" width="0.2601%" height="15" fill="rgb(237,122,38)"/><text x="60.7358%" y="79.50"></text></g><g><title>associated_items (1,048,802 samples, 0.47%)</title><rect x="60.2993%" y="101" width="0.4689%" height="15" fill="rgb(244,218,35)"/><text x="60.5493%" y="111.50"></text></g><g><title>adt_dtorck_constraint (329,933 samples, 0.15%)</title><rect x="60.9835%" y="85" width="0.1475%" height="15" fill="rgb(240,68,47)"/><text x="61.2335%" y="95.50"></text></g><g><title>dropck_outlives (705,625 samples, 0.32%)</title><rect x="60.8219%" y="101" width="0.3155%" height="15" fill="rgb(210,16,53)"/><text x="61.0719%" y="111.50"></text></g><g><title>predicates_of (290,155 samples, 0.13%)</title><rect x="62.5168%" y="85" width="0.1297%" height="15" fill="rgb(235,124,12)"/><text x="62.7668%" y="95.50"></text></g><g><title>specializes (415,554 samples, 0.19%)</title><rect x="62.6466%" y="85" width="0.1858%" height="15" fill="rgb(224,169,11)"/><text x="62.8966%" y="95.50"></text></g><g><title>param_env (248,803 samples, 0.11%)</title><rect x="62.7211%" y="69" width="0.1112%" height="15" fill="rgb(250,166,2)"/><text x="62.9711%" y="79.50"></text></g><g><title>trait_impls_of (396,343 samples, 0.18%)</title><rect x="62.8390%" y="85" width="0.1772%" height="15" fill="rgb(242,216,29)"/><text x="63.0890%" y="95.50"></text></g><g><title>evaluate_obligation (4,207,368 samples, 1.88%)</title><rect x="61.1373%" y="101" width="1.8809%" height="15" fill="rgb(230,116,27)"/><text x="61.3873%" y="111.50">e..</text></g><g><title>item_attrs (372,312 samples, 0.17%)</title><rect x="63.3028%" y="101" width="0.1664%" height="15" fill="rgb(228,99,48)"/><text x="63.5528%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (361,272 samples, 0.16%)</title><rect x="63.3078%" y="85" width="0.1615%" height="15" fill="rgb(253,11,6)"/><text x="63.5578%" y="95.50"></text></g><g><title>evaluate_obligation (462,226 samples, 0.21%)</title><rect x="63.8190%" y="85" width="0.2066%" height="15" fill="rgb(247,143,39)"/><text x="64.0690%" y="95.50"></text></g><g><title>method_autoderef_steps (1,126,362 samples, 0.50%)</title><rect x="63.5253%" y="101" width="0.5035%" height="15" fill="rgb(236,97,10)"/><text x="63.7753%" y="111.50"></text></g><g><title>evaluate_obligation (227,801 samples, 0.10%)</title><rect x="64.9371%" y="69" width="0.1018%" height="15" fill="rgb(233,208,19)"/><text x="65.1871%" y="79.50"></text></g><g><title>opt_const_param_of (2,521,897 samples, 1.13%)</title><rect x="64.0289%" y="101" width="1.1274%" height="15" fill="rgb(216,164,2)"/><text x="64.2789%" y="111.50"></text></g><g><title>typeck (2,416,076 samples, 1.08%)</title><rect x="64.0762%" y="85" width="1.0801%" height="15" fill="rgb(220,129,5)"/><text x="64.3262%" y="95.50"></text></g><g><title>predicates_of (524,425 samples, 0.23%)</title><rect x="65.2566%" y="101" width="0.2344%" height="15" fill="rgb(242,17,10)"/><text x="65.5066%" y="111.50"></text></g><g><title>predicates_defined_on (371,374 samples, 0.17%)</title><rect x="65.3250%" y="85" width="0.1660%" height="15" fill="rgb(242,107,0)"/><text x="65.5750%" y="95.50"></text></g><g><title>evaluate_obligation (431,168 samples, 0.19%)</title><rect x="68.0091%" y="85" width="0.1928%" height="15" fill="rgb(251,28,31)"/><text x="68.2591%" y="95.50"></text></g><g><title>typeck (6,289,317 samples, 2.81%)</title><rect x="65.5756%" y="101" width="2.8117%" height="15" fill="rgb(233,223,10)"/><text x="65.8256%" y="111.50">ty..</text></g><g><title>explicit_predicates_of (248,913 samples, 0.11%)</title><rect x="69.6074%" y="37" width="0.1113%" height="15" fill="rgb(215,21,27)"/><text x="69.8574%" y="47.50"></text></g><g><title>param_env (928,851 samples, 0.42%)</title><rect x="69.3129%" y="85" width="0.4152%" height="15" fill="rgb(232,23,21)"/><text x="69.5629%" y="95.50"></text></g><g><title>predicates_of (421,735 samples, 0.19%)</title><rect x="69.5396%" y="69" width="0.1885%" height="15" fill="rgb(244,5,23)"/><text x="69.7896%" y="79.50"></text></g><g><title>predicates_defined_on (365,025 samples, 0.16%)</title><rect x="69.5650%" y="53" width="0.1632%" height="15" fill="rgb(226,81,46)"/><text x="69.8150%" y="63.50"></text></g><g><title>typeck_const_arg (3,374,279 samples, 1.51%)</title><rect x="68.3873%" y="101" width="1.5085%" height="15" fill="rgb(247,70,30)"/><text x="68.6373%" y="111.50"></text></g><g><title>item_bodies_checking (61,963,526 samples, 27.70%)</title><rect x="42.2423%" y="149" width="27.7012%" height="15" fill="rgb(212,68,19)"/><text x="42.4923%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (61,960,256 samples, 27.70%)</title><rect x="42.2438%" y="133" width="27.6998%" height="15" fill="rgb(240,187,13)"/><text x="42.4938%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (61,633,361 samples, 27.55%)</title><rect x="42.3899%" y="117" width="27.5536%" height="15" fill="rgb(223,113,26)"/><text x="42.6399%" y="127.50">typeck</text></g><g><title>item_types_checking (4,017,834 samples, 1.80%)</title><rect x="69.9436%" y="149" width="1.7962%" height="15" fill="rgb(206,192,2)"/><text x="70.1936%" y="159.50">i..</text></g><g><title>check_mod_item_types (4,010,784 samples, 1.79%)</title><rect x="69.9467%" y="133" width="1.7930%" height="15" fill="rgb(241,108,4)"/><text x="70.1967%" y="143.50">c..</text></g><g><title>typeck (506,226 samples, 0.23%)</title><rect x="71.5134%" y="117" width="0.2263%" height="15" fill="rgb(247,173,49)"/><text x="71.7634%" y="127.50"></text></g><g><title>late_bound_vars_map (262,492 samples, 0.12%)</title><rect x="72.2998%" y="101" width="0.1173%" height="15" fill="rgb(224,114,35)"/><text x="72.5498%" y="111.50"></text></g><g><title>resolve_lifetimes (228,722 samples, 0.10%)</title><rect x="72.3149%" y="85" width="0.1023%" height="15" fill="rgb(245,159,27)"/><text x="72.5649%" y="95.50"></text></g><g><title>fn_sig (1,008,783 samples, 0.45%)</title><rect x="72.0224%" y="117" width="0.4510%" height="15" fill="rgb(245,172,44)"/><text x="72.2724%" y="127.50"></text></g><g><title>named_region_map (412,355 samples, 0.18%)</title><rect x="72.6614%" y="101" width="0.1843%" height="15" fill="rgb(236,23,11)"/><text x="72.9114%" y="111.50"></text></g><g><title>resolve_lifetimes (360,445 samples, 0.16%)</title><rect x="72.6846%" y="85" width="0.1611%" height="15" fill="rgb(205,117,38)"/><text x="72.9346%" y="95.50"></text></g><g><title>generics_of (864,480 samples, 0.39%)</title><rect x="72.4734%" y="117" width="0.3865%" height="15" fill="rgb(237,72,25)"/><text x="72.7234%" y="127.50"></text></g><g><title>late_bound_vars_map (423,615 samples, 0.19%)</title><rect x="73.2782%" y="69" width="0.1894%" height="15" fill="rgb(244,70,9)"/><text x="73.5282%" y="79.50"></text></g><g><title>resolve_lifetimes (409,175 samples, 0.18%)</title><rect x="73.2846%" y="53" width="0.1829%" height="15" fill="rgb(217,125,39)"/><text x="73.5346%" y="63.50"></text></g><g><title>lint_levels (243,193 samples, 0.11%)</title><rect x="73.3588%" y="37" width="0.1087%" height="15" fill="rgb(235,36,10)"/><text x="73.6088%" y="47.50"></text></g><g><title>explicit_predicates_of (877,278 samples, 0.39%)</title><rect x="73.0996%" y="85" width="0.3922%" height="15" fill="rgb(251,123,47)"/><text x="73.3496%" y="95.50"></text></g><g><title>predicates_of (1,451,094 samples, 0.65%)</title><rect x="72.9647%" y="117" width="0.6487%" height="15" fill="rgb(221,13,13)"/><text x="73.2147%" y="127.50"></text></g><g><title>predicates_defined_on (1,337,873 samples, 0.60%)</title><rect x="73.0153%" y="101" width="0.5981%" height="15" fill="rgb(238,131,9)"/><text x="73.2653%" y="111.50"></text></g><g><title>inferred_outlives_of (271,853 samples, 0.12%)</title><rect x="73.4918%" y="85" width="0.1215%" height="15" fill="rgb(211,50,8)"/><text x="73.7418%" y="95.50"></text></g><g><title>inferred_outlives_crate (234,522 samples, 0.10%)</title><rect x="73.5085%" y="69" width="0.1048%" height="15" fill="rgb(245,182,24)"/><text x="73.7585%" y="79.50"></text></g><g><title>type_collecting (4,507,390 samples, 2.02%)</title><rect x="71.7419%" y="149" width="2.0151%" height="15" fill="rgb(242,14,37)"/><text x="71.9919%" y="159.50">t..</text></g><g><title>collect_mod_item_types (4,491,760 samples, 2.01%)</title><rect x="71.7488%" y="133" width="2.0081%" height="15" fill="rgb(246,228,12)"/><text x="71.9988%" y="143.50">c..</text></g><g><title>type_of (296,524 samples, 0.13%)</title><rect x="73.6244%" y="117" width="0.1326%" height="15" fill="rgb(213,55,15)"/><text x="73.8744%" y="127.50"></text></g><g><title>evaluate_obligation (823,198 samples, 0.37%)</title><rect x="76.3119%" y="117" width="0.3680%" height="15" fill="rgb(209,9,3)"/><text x="76.5619%" y="127.50"></text></g><g><title>implied_outlives_bounds (470,972 samples, 0.21%)</title><rect x="76.6920%" y="117" width="0.2106%" height="15" fill="rgb(230,59,30)"/><text x="76.9420%" y="127.50"></text></g><g><title>param_env (831,341 samples, 0.37%)</title><rect x="76.9025%" y="117" width="0.3717%" height="15" fill="rgb(209,121,21)"/><text x="77.1525%" y="127.50"></text></g><g><title>region_scope_tree (740,846 samples, 0.33%)</title><rect x="77.3102%" y="117" width="0.3312%" height="15" fill="rgb(220,109,13)"/><text x="77.5602%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,116,194 samples, 3.63%)</title><rect x="74.0252%" y="133" width="3.6284%" height="15" fill="rgb(232,18,1)"/><text x="74.2752%" y="143.50">chec..</text></g><g><title>param_env (559,267 samples, 0.25%)</title><rect x="79.3757%" y="117" width="0.2500%" height="15" fill="rgb(215,41,42)"/><text x="79.6257%" y="127.50"></text></g><g><title>check_item_well_formed (4,923,811 samples, 2.20%)</title><rect x="77.6536%" y="133" width="2.2012%" height="15" fill="rgb(224,123,36)"/><text x="77.9036%" y="143.50">c..</text></g><g><title>analysis (178,748,817 samples, 79.91%)</title><rect x="0.3577%" y="181" width="79.9109%" height="15" fill="rgb(240,125,3)"/><text x="0.6077%" y="191.50">analysis</text></g><g><title>type_check_crate (106,121,394 samples, 47.44%)</title><rect x="32.8263%" y="165" width="47.4423%" height="15" fill="rgb(205,98,50)"/><text x="33.0763%" y="175.50">type_check_crate</text></g><g><title>wf_checking (14,543,581 samples, 6.50%)</title><rect x="73.7668%" y="149" width="6.5018%" height="15" fill="rgb(205,185,37)"/><text x="74.0168%" y="159.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (925,581 samples, 0.41%)</title><rect x="79.8548%" y="133" width="0.4138%" height="15" fill="rgb(238,207,15)"/><text x="80.1048%" y="143.50"></text></g><g><title>codegen_crate (423,405 samples, 0.19%)</title><rect x="80.2736%" y="181" width="0.1893%" height="15" fill="rgb(213,199,42)"/><text x="80.5236%" y="191.50"></text></g><g><title>AST_validation (245,973 samples, 0.11%)</title><rect x="80.5701%" y="165" width="0.1100%" height="15" fill="rgb(235,201,11)"/><text x="80.8201%" y="175.50"></text></g><g><title>metadata_load_macro (266,491 samples, 0.12%)</title><rect x="89.5889%" y="133" width="0.1191%" height="15" fill="rgb(207,46,11)"/><text x="89.8389%" y="143.50"></text></g><g><title>metadata_register_crate (1,345,715 samples, 0.60%)</title><rect x="89.7081%" y="133" width="0.6016%" height="15" fill="rgb(241,35,35)"/><text x="89.9581%" y="143.50"></text></g><g><title>metadata_register_crate (461,533 samples, 0.21%)</title><rect x="90.1034%" y="117" width="0.2063%" height="15" fill="rgb(243,32,47)"/><text x="90.3534%" y="127.50"></text></g><g><title>macro_expand_crate (21,697,770 samples, 9.70%)</title><rect x="80.7764%" y="165" width="9.7001%" height="15" fill="rgb(247,202,23)"/><text x="81.0264%" y="175.50">macro_expand_c..</text></g><g><title>expand_crate (21,683,100 samples, 9.69%)</title><rect x="80.7830%" y="149" width="9.6936%" height="15" fill="rgb(219,102,11)"/><text x="81.0330%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (373,284 samples, 0.17%)</title><rect x="90.3097%" y="133" width="0.1669%" height="15" fill="rgb(243,110,44)"/><text x="90.5597%" y="143.50"></text></g><g><title>late_resolve_crate (3,585,569 samples, 1.60%)</title><rect x="90.5960%" y="149" width="1.6030%" height="15" fill="rgb(222,74,54)"/><text x="90.8460%" y="159.50"></text></g><g><title>configure_and_expand (26,443,233 samples, 11.82%)</title><rect x="80.4629%" y="181" width="11.8216%" height="15" fill="rgb(216,99,12)"/><text x="80.7129%" y="191.50">configure_and_expa..</text></g><g><title>resolve_crate (3,974,813 samples, 1.78%)</title><rect x="90.5075%" y="165" width="1.7770%" height="15" fill="rgb(226,22,26)"/><text x="90.7575%" y="175.50">r..</text></g><g><title>drop_ast (421,134 samples, 0.19%)</title><rect x="92.2845%" y="181" width="0.1883%" height="15" fill="rgb(217,163,10)"/><text x="92.5345%" y="191.50"></text></g><g><title>early_lint_checks (620,767 samples, 0.28%)</title><rect x="92.4795%" y="181" width="0.2775%" height="15" fill="rgb(213,25,53)"/><text x="92.7295%" y="191.50"></text></g><g><title>free_global_ctxt (4,557,571 samples, 2.04%)</title><rect x="92.7570%" y="181" width="2.0375%" height="15" fill="rgb(252,105,26)"/><text x="93.0070%" y="191.50">f..</text></g><g><title>mir_for_ctfe_of_const_arg (255,013 samples, 0.11%)</title><rect x="95.9901%" y="149" width="0.1140%" height="15" fill="rgb(220,39,43)"/><text x="96.2401%" y="159.50"></text></g><g><title>mir_for_ctfe (487,466 samples, 0.22%)</title><rect x="95.8924%" y="165" width="0.2179%" height="15" fill="rgb(229,68,48)"/><text x="96.1424%" y="175.50"></text></g><g><title>generate_crate_metadata (3,155,505 samples, 1.41%)</title><rect x="94.7945%" y="181" width="1.4107%" height="15" fill="rgb(252,8,32)"/><text x="95.0445%" y="191.50"></text></g><g><title>hir_lowering (5,944,256 samples, 2.66%)</title><rect x="96.2052%" y="181" width="2.6574%" height="15" fill="rgb(223,20,43)"/><text x="96.4552%" y="191.50">hi..</text></g><g><title>parse_crate (470,065 samples, 0.21%)</title><rect x="98.8994%" y="181" width="0.2101%" height="15" fill="rgb(229,81,49)"/><text x="99.1494%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,255,284 samples, 0.56%)</title><rect x="99.2028%" y="181" width="0.5612%" height="15" fill="rgb(236,28,36)"/><text x="99.4528%" y="191.50"></text></g><g><title>all (223,685,204 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (223,685,204 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (411,884 samples, 0.18%)</title><rect x="99.8159%" y="181" width="0.1841%" height="15" fill="rgb(233,201,37)"/><text x="100.0659%" y="191.50"></text></g></svg></svg>