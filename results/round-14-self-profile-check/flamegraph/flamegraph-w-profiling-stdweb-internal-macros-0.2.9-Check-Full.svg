<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (583,326 samples, 0.12%)</title><rect x="12.1506%" y="181" width="0.1196%" height="15" fill="rgb(227,0,7)"/><text x="12.4006%" y="191.50"></text></g><g><title>param_env (572,507 samples, 0.12%)</title><rect x="13.6055%" y="149" width="0.1174%" height="15" fill="rgb(217,0,24)"/><text x="13.8555%" y="159.50"></text></g><g><title>item_attrs (583,239 samples, 0.12%)</title><rect x="14.1313%" y="117" width="0.1196%" height="15" fill="rgb(221,193,54)"/><text x="14.3813%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (561,359 samples, 0.12%)</title><rect x="14.1358%" y="101" width="0.1151%" height="15" fill="rgb(248,212,6)"/><text x="14.3858%" y="111.50"></text></g><g><title>codegen_fn_attrs (868,061 samples, 0.18%)</title><rect x="14.0835%" y="133" width="0.1780%" height="15" fill="rgb(208,68,35)"/><text x="14.3335%" y="143.50"></text></g><g><title>adt_drop_tys (1,056,034 samples, 0.22%)</title><rect x="17.5811%" y="101" width="0.2165%" height="15" fill="rgb(232,128,0)"/><text x="17.8311%" y="111.50"></text></g><g><title>is_copy_raw (4,010,891 samples, 0.82%)</title><rect x="17.7976%" y="101" width="0.8223%" height="15" fill="rgb(207,160,47)"/><text x="18.0476%" y="111.50"></text></g><g><title>evaluate_obligation (3,284,063 samples, 0.67%)</title><rect x="17.9466%" y="85" width="0.6733%" height="15" fill="rgb(228,23,34)"/><text x="18.1966%" y="95.50"></text></g><g><title>needs_drop_raw (5,640,470 samples, 1.16%)</title><rect x="17.4641%" y="117" width="1.1564%" height="15" fill="rgb(218,30,26)"/><text x="17.7141%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (728,688 samples, 0.15%)</title><rect x="18.7089%" y="101" width="0.1494%" height="15" fill="rgb(220,122,19)"/><text x="18.9589%" y="111.50"></text></g><g><title>impl_parent (655,613 samples, 0.13%)</title><rect x="19.1353%" y="85" width="0.1344%" height="15" fill="rgb(250,228,42)"/><text x="19.3853%" y="95.50"></text></g><g><title>specialization_graph_of (2,927,722 samples, 0.60%)</title><rect x="18.9002%" y="101" width="0.6002%" height="15" fill="rgb(240,193,28)"/><text x="19.1502%" y="111.50"></text></g><g><title>impl_trait_ref (1,125,459 samples, 0.23%)</title><rect x="19.2697%" y="85" width="0.2307%" height="15" fill="rgb(216,20,37)"/><text x="19.5197%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (837,388 samples, 0.17%)</title><rect x="19.3287%" y="69" width="0.1717%" height="15" fill="rgb(206,188,39)"/><text x="19.5787%" y="79.50"></text></g><g><title>resolve_instance (4,474,538 samples, 0.92%)</title><rect x="18.6205%" y="117" width="0.9173%" height="15" fill="rgb(217,207,13)"/><text x="18.8705%" y="127.50"></text></g><g><title>thir_body (5,284,753 samples, 1.08%)</title><rect x="19.5476%" y="117" width="1.0834%" height="15" fill="rgb(231,73,38)"/><text x="19.7976%" y="127.50"></text></g><g><title>mir_const (37,440,461 samples, 7.68%)</title><rect x="12.9972%" y="165" width="7.6757%" height="15" fill="rgb(225,20,46)"/><text x="13.2472%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (33,900,806 samples, 6.95%)</title><rect x="13.7229%" y="149" width="6.9501%" height="15" fill="rgb(210,31,41)"/><text x="13.9729%" y="159.50">unsafety_..</text></g><g><title>mir_built (31,273,822 samples, 6.41%)</title><rect x="14.2615%" y="133" width="6.4115%" height="15" fill="rgb(221,200,47)"/><text x="14.5115%" y="143.50">mir_built</text></g><g><title>mir_const (575,134 samples, 0.12%)</title><rect x="20.7737%" y="149" width="0.1179%" height="15" fill="rgb(226,26,5)"/><text x="21.0237%" y="159.50"></text></g><g><title>mir_promoted (41,712,392 samples, 8.55%)</title><rect x="12.3405%" y="181" width="8.5515%" height="15" fill="rgb(249,33,26)"/><text x="12.5905%" y="191.50">mir_promoted</text></g><g><title>mir_const_qualif (1,068,581 samples, 0.22%)</title><rect x="20.6730%" y="165" width="0.2191%" height="15" fill="rgb(235,183,28)"/><text x="20.9230%" y="175.50"></text></g><g><title>type_op_ascribe_user_type (1,502,179 samples, 0.31%)</title><rect x="20.8920%" y="181" width="0.3080%" height="15" fill="rgb(221,5,38)"/><text x="21.1420%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (2,375,363 samples, 0.49%)</title><rect x="21.2000%" y="181" width="0.4870%" height="15" fill="rgb(247,18,42)"/><text x="21.4500%" y="191.50"></text></g><g><title>normalize_projection_ty (1,354,948 samples, 0.28%)</title><rect x="21.4092%" y="165" width="0.2778%" height="15" fill="rgb(241,131,45)"/><text x="21.6592%" y="175.50"></text></g><g><title>type_op_normalize_predicate (895,148 samples, 0.18%)</title><rect x="21.6870%" y="181" width="0.1835%" height="15" fill="rgb(249,31,29)"/><text x="21.9370%" y="191.50"></text></g><g><title>normalize_projection_ty (540,465 samples, 0.11%)</title><rect x="21.7597%" y="165" width="0.1108%" height="15" fill="rgb(225,111,53)"/><text x="22.0097%" y="175.50"></text></g><g><title>type_op_normalize_ty (834,522 samples, 0.17%)</title><rect x="21.8705%" y="181" width="0.1711%" height="15" fill="rgb(238,160,17)"/><text x="22.1205%" y="191.50"></text></g><g><title>type_op_prove_predicate (7,257,655 samples, 1.49%)</title><rect x="22.0416%" y="181" width="1.4879%" height="15" fill="rgb(214,148,48)"/><text x="22.2916%" y="191.50"></text></g><g><title>evaluate_obligation (836,587 samples, 0.17%)</title><rect x="23.3580%" y="165" width="0.1715%" height="15" fill="rgb(232,36,49)"/><text x="23.6080%" y="175.50"></text></g><g><title>MIR_borrow_checking (112,622,684 samples, 23.09%)</title><rect x="0.4443%" y="213" width="23.0890%" height="15" fill="rgb(209,103,24)"/><text x="0.6943%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (112,338,907 samples, 23.03%)</title><rect x="0.5025%" y="197" width="23.0308%" height="15" fill="rgb(229,88,8)"/><text x="0.7525%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (548,587 samples, 0.11%)</title><rect x="23.6035%" y="213" width="0.1125%" height="15" fill="rgb(213,181,19)"/><text x="23.8535%" y="223.50"></text></g><g><title>codegen_fn_attrs (500,985 samples, 0.10%)</title><rect x="23.8847%" y="181" width="0.1027%" height="15" fill="rgb(254,191,54)"/><text x="24.1347%" y="191.50"></text></g><g><title>check_mod_attrs (1,287,484 samples, 0.26%)</title><rect x="23.7235%" y="197" width="0.2639%" height="15" fill="rgb(241,83,37)"/><text x="23.9735%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (915,089 samples, 0.19%)</title><rect x="24.1056%" y="197" width="0.1876%" height="15" fill="rgb(233,36,39)"/><text x="24.3556%" y="207.50"></text></g><g><title>misc_checking_1 (2,916,633 samples, 0.60%)</title><rect x="23.7161%" y="213" width="0.5979%" height="15" fill="rgb(226,3,54)"/><text x="23.9661%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (2,622,790 samples, 0.54%)</title><rect x="24.3146%" y="197" width="0.5377%" height="15" fill="rgb(245,192,40)"/><text x="24.5646%" y="207.50"></text></g><g><title>check_mod_liveness (2,216,656 samples, 0.45%)</title><rect x="24.3978%" y="181" width="0.4544%" height="15" fill="rgb(238,167,29)"/><text x="24.6478%" y="191.50"></text></g><g><title>type_uninhabited_from (707,065 samples, 0.14%)</title><rect x="24.7073%" y="165" width="0.1450%" height="15" fill="rgb(232,182,51)"/><text x="24.9573%" y="175.50"></text></g><g><title>type_uninhabited_from (592,405 samples, 0.12%)</title><rect x="24.7308%" y="149" width="0.1215%" height="15" fill="rgb(231,60,39)"/><text x="24.9808%" y="159.50"></text></g><g><title>misc_checking_2 (5,520,471 samples, 1.13%)</title><rect x="24.3140%" y="213" width="1.1318%" height="15" fill="rgb(208,69,12)"/><text x="24.5640%" y="223.50"></text></g><g><title>match_checking (2,895,031 samples, 0.59%)</title><rect x="24.8523%" y="197" width="0.5935%" height="15" fill="rgb(235,93,37)"/><text x="25.1023%" y="207.50"></text></g><g><title>check_match (2,814,400 samples, 0.58%)</title><rect x="24.8688%" y="181" width="0.5770%" height="15" fill="rgb(213,116,39)"/><text x="25.1188%" y="191.50"></text></g><g><title>check_private_in_public (533,536 samples, 0.11%)</title><rect x="25.4483%" y="197" width="0.1094%" height="15" fill="rgb(222,207,29)"/><text x="25.6983%" y="207.50"></text></g><g><title>death_checking (1,035,651 samples, 0.21%)</title><rect x="25.5576%" y="197" width="0.2123%" height="15" fill="rgb(206,96,30)"/><text x="25.8076%" y="207.50"></text></g><g><title>eval_to_const_value_raw (713,088 samples, 0.15%)</title><rect x="26.1144%" y="117" width="0.1462%" height="15" fill="rgb(218,138,4)"/><text x="26.3644%" y="127.50"></text></g><g><title>eval_to_const_value_raw (712,398 samples, 0.15%)</title><rect x="26.1146%" y="101" width="0.1461%" height="15" fill="rgb(250,191,14)"/><text x="26.3646%" y="111.50"></text></g><g><title>eval_to_allocation_raw (710,558 samples, 0.15%)</title><rect x="26.1149%" y="85" width="0.1457%" height="15" fill="rgb(239,60,40)"/><text x="26.3649%" y="95.50"></text></g><g><title>eval_to_allocation_raw (794,269 samples, 0.16%)</title><rect x="26.0981%" y="165" width="0.1628%" height="15" fill="rgb(206,27,48)"/><text x="26.3481%" y="175.50"></text></g><g><title>eval_to_allocation_raw (793,659 samples, 0.16%)</title><rect x="26.0982%" y="149" width="0.1627%" height="15" fill="rgb(225,35,8)"/><text x="26.3482%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (718,498 samples, 0.15%)</title><rect x="26.1136%" y="133" width="0.1473%" height="15" fill="rgb(250,213,24)"/><text x="26.3636%" y="143.50"></text></g><g><title>eval_to_const_value_raw (757,270 samples, 0.16%)</title><rect x="26.2609%" y="165" width="0.1552%" height="15" fill="rgb(247,123,22)"/><text x="26.5109%" y="175.50"></text></g><g><title>eval_to_const_value_raw (743,710 samples, 0.15%)</title><rect x="26.2637%" y="149" width="0.1525%" height="15" fill="rgb(231,138,38)"/><text x="26.5137%" y="159.50"></text></g><g><title>eval_to_allocation_raw (722,129 samples, 0.15%)</title><rect x="26.2681%" y="133" width="0.1480%" height="15" fill="rgb(231,145,46)"/><text x="26.5181%" y="143.50"></text></g><g><title>param_env (667,488 samples, 0.14%)</title><rect x="26.4162%" y="165" width="0.1368%" height="15" fill="rgb(251,118,11)"/><text x="26.6662%" y="175.50"></text></g><g><title>crate_lints (4,023,824 samples, 0.82%)</title><rect x="25.7704%" y="181" width="0.8249%" height="15" fill="rgb(217,147,25)"/><text x="26.0204%" y="191.50"></text></g><g><title>layout_of (969,432 samples, 0.20%)</title><rect x="27.2039%" y="53" width="0.1987%" height="15" fill="rgb(247,81,37)"/><text x="27.4539%" y="63.50"></text></g><g><title>layout_of (1,340,938 samples, 0.27%)</title><rect x="27.1524%" y="69" width="0.2749%" height="15" fill="rgb(209,12,38)"/><text x="27.4024%" y="79.50"></text></g><g><title>layout_of (1,747,390 samples, 0.36%)</title><rect x="27.1115%" y="85" width="0.3582%" height="15" fill="rgb(227,1,9)"/><text x="27.3615%" y="95.50"></text></g><g><title>layout_of (1,861,422 samples, 0.38%)</title><rect x="27.0890%" y="101" width="0.3816%" height="15" fill="rgb(248,47,43)"/><text x="27.3390%" y="111.50"></text></g><g><title>lint_checking (8,348,722 samples, 1.71%)</title><rect x="25.7700%" y="197" width="1.7116%" height="15" fill="rgb(221,10,30)"/><text x="26.0200%" y="207.50"></text></g><g><title>module_lints (4,322,538 samples, 0.89%)</title><rect x="26.5954%" y="181" width="0.8862%" height="15" fill="rgb(210,229,1)"/><text x="26.8454%" y="191.50"></text></g><g><title>lint_mod (4,309,968 samples, 0.88%)</title><rect x="26.5979%" y="165" width="0.8836%" height="15" fill="rgb(222,148,37)"/><text x="26.8479%" y="175.50"></text></g><g><title>layout_of (2,047,454 samples, 0.42%)</title><rect x="27.0618%" y="149" width="0.4198%" height="15" fill="rgb(234,67,33)"/><text x="27.3118%" y="159.50"></text></g><g><title>layout_of (1,999,832 samples, 0.41%)</title><rect x="27.0716%" y="133" width="0.4100%" height="15" fill="rgb(247,98,35)"/><text x="27.3216%" y="143.50"></text></g><g><title>layout_of (1,975,032 samples, 0.40%)</title><rect x="27.0766%" y="117" width="0.4049%" height="15" fill="rgb(247,138,52)"/><text x="27.3266%" y="127.50"></text></g><g><title>privacy_access_levels (583,877 samples, 0.12%)</title><rect x="27.4815%" y="197" width="0.1197%" height="15" fill="rgb(213,79,30)"/><text x="27.7315%" y="207.50"></text></g><g><title>privacy_checking_modules (3,730,342 samples, 0.76%)</title><rect x="27.6012%" y="197" width="0.7648%" height="15" fill="rgb(246,177,23)"/><text x="27.8512%" y="207.50"></text></g><g><title>check_mod_privacy (3,722,212 samples, 0.76%)</title><rect x="27.6029%" y="181" width="0.7631%" height="15" fill="rgb(230,62,27)"/><text x="27.8529%" y="191.50"></text></g><g><title>misc_checking_3 (14,262,209 samples, 2.92%)</title><rect x="25.4458%" y="213" width="2.9239%" height="15" fill="rgb(216,154,8)"/><text x="25.6958%" y="223.50">mi..</text></g><g><title>impl_parent (2,099,985 samples, 0.43%)</title><rect x="29.2343%" y="149" width="0.4305%" height="15" fill="rgb(244,35,45)"/><text x="29.4843%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,217,415 samples, 0.25%)</title><rect x="29.4153%" y="133" width="0.2496%" height="15" fill="rgb(251,115,12)"/><text x="29.6653%" y="143.50"></text></g><g><title>impl_trait_ref (5,690,738 samples, 1.17%)</title><rect x="29.6649%" y="149" width="1.1667%" height="15" fill="rgb(240,54,50)"/><text x="29.9149%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,631,184 samples, 0.95%)</title><rect x="29.8821%" y="133" width="0.9494%" height="15" fill="rgb(233,84,52)"/><text x="30.1321%" y="143.50"></text></g><g><title>coherent_trait (12,554,810 samples, 2.57%)</title><rect x="28.4051%" y="181" width="2.5739%" height="15" fill="rgb(207,117,47)"/><text x="28.6551%" y="191.50">co..</text></g><g><title>specialization_graph_of (12,074,804 samples, 2.48%)</title><rect x="28.5035%" y="165" width="2.4755%" height="15" fill="rgb(249,43,39)"/><text x="28.7535%" y="175.50">sp..</text></g><g><title>trait_impls_of (716,977 samples, 0.15%)</title><rect x="30.8320%" y="149" width="0.1470%" height="15" fill="rgb(209,38,44)"/><text x="31.0820%" y="159.50"></text></g><g><title>coherence_checking (12,660,941 samples, 2.60%)</title><rect x="28.4010%" y="197" width="2.5956%" height="15" fill="rgb(236,212,23)"/><text x="28.6510%" y="207.50">co..</text></g><g><title>associated_item (507,247 samples, 0.10%)</title><rect x="47.2271%" y="133" width="0.1040%" height="15" fill="rgb(242,79,21)"/><text x="47.4771%" y="143.50"></text></g><g><title>associated_items (714,189 samples, 0.15%)</title><rect x="47.1921%" y="149" width="0.1464%" height="15" fill="rgb(211,96,35)"/><text x="47.4421%" y="159.50"></text></g><g><title>dropck_outlives (3,913,249 samples, 0.80%)</title><rect x="47.3729%" y="149" width="0.8023%" height="15" fill="rgb(253,215,40)"/><text x="47.6229%" y="159.50"></text></g><g><title>evaluate_obligation (5,119,577 samples, 1.05%)</title><rect x="48.1752%" y="149" width="1.0496%" height="15" fill="rgb(211,81,21)"/><text x="48.4252%" y="159.50"></text></g><g><title>trait_impls_of (860,627 samples, 0.18%)</title><rect x="49.0483%" y="133" width="0.1764%" height="15" fill="rgb(208,190,38)"/><text x="49.2983%" y="143.50"></text></g><g><title>method_autoderef_steps (919,443 samples, 0.19%)</title><rect x="49.5402%" y="149" width="0.1885%" height="15" fill="rgb(235,213,38)"/><text x="49.7902%" y="159.50"></text></g><g><title>predicates_of (972,351 samples, 0.20%)</title><rect x="49.7928%" y="149" width="0.1993%" height="15" fill="rgb(237,122,38)"/><text x="50.0428%" y="159.50"></text></g><g><title>predicates_defined_on (613,297 samples, 0.13%)</title><rect x="49.8664%" y="133" width="0.1257%" height="15" fill="rgb(244,218,35)"/><text x="50.1164%" y="143.50"></text></g><g><title>adt_dtorck_constraint (726,329 samples, 0.15%)</title><rect x="56.7411%" y="37" width="0.1489%" height="15" fill="rgb(240,68,47)"/><text x="56.9911%" y="47.50"></text></g><g><title>adt_dtorck_constraint (979,052 samples, 0.20%)</title><rect x="56.6961%" y="53" width="0.2007%" height="15" fill="rgb(210,16,53)"/><text x="56.9461%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,215,304 samples, 0.25%)</title><rect x="56.6539%" y="69" width="0.2492%" height="15" fill="rgb(235,124,12)"/><text x="56.9039%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,610,098 samples, 0.33%)</title><rect x="56.5879%" y="85" width="0.3301%" height="15" fill="rgb(224,169,11)"/><text x="56.8379%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,064,804 samples, 0.42%)</title><rect x="56.5095%" y="101" width="0.4233%" height="15" fill="rgb(250,166,2)"/><text x="56.7595%" y="111.50"></text></g><g><title>dropck_outlives (3,806,140 samples, 0.78%)</title><rect x="56.1684%" y="133" width="0.7803%" height="15" fill="rgb(242,216,29)"/><text x="56.4184%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,763,209 samples, 0.57%)</title><rect x="56.3822%" y="117" width="0.5665%" height="15" fill="rgb(230,116,27)"/><text x="56.6322%" y="127.50"></text></g><g><title>evaluate_obligation (3,958,212 samples, 0.81%)</title><rect x="56.9487%" y="133" width="0.8115%" height="15" fill="rgb(228,99,48)"/><text x="57.1987%" y="143.50"></text></g><g><title>typeck (39,553,308 samples, 8.11%)</title><rect x="50.0419%" y="149" width="8.1089%" height="15" fill="rgb(253,11,6)"/><text x="50.2919%" y="159.50">typeck</text></g><g><title>item_bodies_checking (132,510,106 samples, 27.17%)</title><rect x="31.0070%" y="197" width="27.1662%" height="15" fill="rgb(247,143,39)"/><text x="31.2570%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (132,505,726 samples, 27.17%)</title><rect x="31.0079%" y="181" width="27.1653%" height="15" fill="rgb(236,97,10)"/><text x="31.2579%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (132,341,245 samples, 27.13%)</title><rect x="31.0416%" y="165" width="27.1315%" height="15" fill="rgb(233,208,19)"/><text x="31.2916%" y="175.50">typeck</text></g><g><title>mir_borrowck (711,488 samples, 0.15%)</title><rect x="59.1512%" y="133" width="0.1459%" height="15" fill="rgb(216,164,2)"/><text x="59.4012%" y="143.50"></text></g><g><title>specialization_graph_of (950,241 samples, 0.19%)</title><rect x="59.3762%" y="53" width="0.1948%" height="15" fill="rgb(220,129,5)"/><text x="59.6262%" y="63.50"></text></g><g><title>resolve_instance (1,001,961 samples, 0.21%)</title><rect x="59.3664%" y="69" width="0.2054%" height="15" fill="rgb(242,17,10)"/><text x="59.6164%" y="79.50"></text></g><g><title>evaluate_obligation (491,037 samples, 0.10%)</title><rect x="59.9470%" y="53" width="0.1007%" height="15" fill="rgb(242,107,0)"/><text x="60.1970%" y="63.50"></text></g><g><title>mir_built (3,886,253 samples, 0.80%)</title><rect x="59.3434%" y="85" width="0.7967%" height="15" fill="rgb(251,28,31)"/><text x="59.5934%" y="95.50"></text></g><g><title>typeck (2,713,980 samples, 0.56%)</title><rect x="59.5837%" y="69" width="0.5564%" height="15" fill="rgb(233,223,10)"/><text x="59.8337%" y="79.50"></text></g><g><title>mir_const (4,239,597 samples, 0.87%)</title><rect x="59.3080%" y="117" width="0.8692%" height="15" fill="rgb(215,21,27)"/><text x="59.5580%" y="127.50"></text></g><g><title>unsafety_check_result (4,125,825 samples, 0.85%)</title><rect x="59.3313%" y="101" width="0.8458%" height="15" fill="rgb(232,23,21)"/><text x="59.5813%" y="111.50"></text></g><g><title>mir_promoted (4,298,527 samples, 0.88%)</title><rect x="59.2971%" y="133" width="0.8812%" height="15" fill="rgb(244,5,23)"/><text x="59.5471%" y="143.50"></text></g><g><title>type_of (5,805,694 samples, 1.19%)</title><rect x="59.0111%" y="165" width="1.1902%" height="15" fill="rgb(226,81,46)"/><text x="59.2611%" y="175.50"></text></g><g><title>mir_borrowck (5,568,412 samples, 1.14%)</title><rect x="59.0597%" y="149" width="1.1416%" height="15" fill="rgb(247,70,30)"/><text x="59.3097%" y="159.50"></text></g><g><title>item_types_checking (11,363,897 samples, 2.33%)</title><rect x="58.1732%" y="197" width="2.3297%" height="15" fill="rgb(212,68,19)"/><text x="58.4232%" y="207.50">i..</text></g><g><title>check_mod_item_types (11,352,817 samples, 2.33%)</title><rect x="58.1754%" y="181" width="2.3275%" height="15" fill="rgb(240,187,13)"/><text x="58.4254%" y="191.50">c..</text></g><g><title>typeck (1,470,901 samples, 0.30%)</title><rect x="60.2013%" y="165" width="0.3016%" height="15" fill="rgb(223,113,26)"/><text x="60.4513%" y="175.50"></text></g><g><title>fn_sig (1,306,219 samples, 0.27%)</title><rect x="60.6366%" y="165" width="0.2678%" height="15" fill="rgb(206,192,2)"/><text x="60.8866%" y="175.50"></text></g><g><title>lint_levels (644,387 samples, 0.13%)</title><rect x="61.0412%" y="117" width="0.1321%" height="15" fill="rgb(241,108,4)"/><text x="61.2912%" y="127.50"></text></g><g><title>is_late_bound_map (1,083,701 samples, 0.22%)</title><rect x="60.9515%" y="149" width="0.2222%" height="15" fill="rgb(247,173,49)"/><text x="61.2015%" y="159.50"></text></g><g><title>resolve_lifetimes (1,058,561 samples, 0.22%)</title><rect x="60.9567%" y="133" width="0.2170%" height="15" fill="rgb(224,114,35)"/><text x="61.2067%" y="143.50"></text></g><g><title>generics_of (1,669,906 samples, 0.34%)</title><rect x="60.9044%" y="165" width="0.3424%" height="15" fill="rgb(245,159,27)"/><text x="61.1544%" y="175.50"></text></g><g><title>predicates_of (1,017,421 samples, 0.21%)</title><rect x="61.2609%" y="165" width="0.2086%" height="15" fill="rgb(245,172,44)"/><text x="61.5109%" y="175.50"></text></g><g><title>predicates_defined_on (912,129 samples, 0.19%)</title><rect x="61.2825%" y="149" width="0.1870%" height="15" fill="rgb(236,23,11)"/><text x="61.5325%" y="159.50"></text></g><g><title>type_collecting (4,877,395 samples, 1.00%)</title><rect x="60.5041%" y="197" width="0.9999%" height="15" fill="rgb(205,117,38)"/><text x="60.7541%" y="207.50"></text></g><g><title>collect_mod_item_types (4,853,825 samples, 1.00%)</title><rect x="60.5089%" y="181" width="0.9951%" height="15" fill="rgb(237,72,25)"/><text x="60.7589%" y="191.50"></text></g><g><title>evaluate_obligation (583,907 samples, 0.12%)</title><rect x="62.2488%" y="165" width="0.1197%" height="15" fill="rgb(244,70,9)"/><text x="62.4988%" y="175.50"></text></g><g><title>implied_outlives_bounds (554,506 samples, 0.11%)</title><rect x="62.3754%" y="165" width="0.1137%" height="15" fill="rgb(217,125,39)"/><text x="62.6254%" y="175.50"></text></g><g><title>region_scope_tree (679,701 samples, 0.14%)</title><rect x="62.6082%" y="165" width="0.1393%" height="15" fill="rgb(235,36,10)"/><text x="62.8582%" y="175.50"></text></g><g><title>check_impl_item_well_formed (5,753,023 samples, 1.18%)</title><rect x="61.5988%" y="181" width="1.1794%" height="15" fill="rgb(251,123,47)"/><text x="61.8488%" y="191.50"></text></g><g><title>adt_sized_constraint (491,406 samples, 0.10%)</title><rect x="63.3688%" y="101" width="0.1007%" height="15" fill="rgb(221,13,13)"/><text x="63.6188%" y="111.50"></text></g><g><title>adt_sized_constraint (607,337 samples, 0.12%)</title><rect x="63.3479%" y="117" width="0.1245%" height="15" fill="rgb(238,131,9)"/><text x="63.5979%" y="127.50"></text></g><g><title>adt_sized_constraint (760,198 samples, 0.16%)</title><rect x="63.3188%" y="133" width="0.1558%" height="15" fill="rgb(211,50,8)"/><text x="63.5688%" y="143.50"></text></g><g><title>adt_sized_constraint (927,180 samples, 0.19%)</title><rect x="63.2879%" y="149" width="0.1901%" height="15" fill="rgb(245,182,24)"/><text x="63.5379%" y="159.50"></text></g><g><title>evaluate_obligation (1,456,329 samples, 0.30%)</title><rect x="63.1992%" y="165" width="0.2986%" height="15" fill="rgb(242,14,37)"/><text x="63.4492%" y="175.50"></text></g><g><title>region_scope_tree (1,098,946 samples, 0.23%)</title><rect x="63.6510%" y="165" width="0.2253%" height="15" fill="rgb(246,228,12)"/><text x="63.9010%" y="175.50"></text></g><g><title>analysis (310,654,620 samples, 63.69%)</title><rect x="0.2157%" y="229" width="63.6879%" height="15" fill="rgb(213,55,15)"/><text x="0.4657%" y="239.50">analysis</text></g><g><title>type_check_crate (173,326,020 samples, 35.53%)</title><rect x="28.3697%" y="213" width="35.5339%" height="15" fill="rgb(209,9,3)"/><text x="28.6197%" y="223.50">type_check_crate</text></g><g><title>wf_checking (11,692,540 samples, 2.40%)</title><rect x="61.5065%" y="197" width="2.3971%" height="15" fill="rgb(230,59,30)"/><text x="61.7565%" y="207.50">wf..</text></g><g><title>check_item_well_formed (5,489,172 samples, 1.13%)</title><rect x="62.7783%" y="181" width="1.1253%" height="15" fill="rgb(209,121,21)"/><text x="63.0283%" y="191.50"></text></g><g><title>codegen_crate (716,288 samples, 0.15%)</title><rect x="63.9051%" y="229" width="0.1468%" height="15" fill="rgb(220,109,13)"/><text x="64.1551%" y="239.50"></text></g><g><title>metadata_load_macro (683,098 samples, 0.14%)</title><rect x="91.7291%" y="181" width="0.1400%" height="15" fill="rgb(232,18,1)"/><text x="91.9791%" y="191.50"></text></g><g><title>metadata_register_crate (4,973,445 samples, 1.02%)</title><rect x="91.8692%" y="181" width="1.0196%" height="15" fill="rgb(215,41,42)"/><text x="92.1192%" y="191.50"></text></g><g><title>macro_expand_crate (140,048,580 samples, 28.71%)</title><rect x="64.2410%" y="213" width="28.7116%" height="15" fill="rgb(224,123,36)"/><text x="64.4910%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (140,035,460 samples, 28.71%)</title><rect x="64.2436%" y="197" width="28.7090%" height="15" fill="rgb(240,125,3)"/><text x="64.4936%" y="207.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (659,368 samples, 0.14%)</title><rect x="92.9528%" y="213" width="0.1352%" height="15" fill="rgb(205,98,50)"/><text x="93.2028%" y="223.50"></text></g><g><title>finalize_macro_resolutions (1,502,767 samples, 0.31%)</title><rect x="93.1245%" y="197" width="0.3081%" height="15" fill="rgb(205,185,37)"/><text x="93.3745%" y="207.50"></text></g><g><title>late_resolve_crate (8,584,646 samples, 1.76%)</title><rect x="93.4326%" y="197" width="1.7600%" height="15" fill="rgb(238,207,15)"/><text x="93.6826%" y="207.50"></text></g><g><title>configure_and_expand (152,446,347 samples, 31.25%)</title><rect x="64.0520%" y="229" width="31.2533%" height="15" fill="rgb(213,199,42)"/><text x="64.3020%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (10,765,710 samples, 2.21%)</title><rect x="93.0982%" y="213" width="2.2071%" height="15" fill="rgb(235,201,11)"/><text x="93.3482%" y="223.50">r..</text></g><g><title>drop_ast (718,938 samples, 0.15%)</title><rect x="95.3053%" y="229" width="0.1474%" height="15" fill="rgb(207,46,11)"/><text x="95.5553%" y="239.50"></text></g><g><title>early_lint_checks (2,093,593 samples, 0.43%)</title><rect x="95.4582%" y="229" width="0.4292%" height="15" fill="rgb(241,35,35)"/><text x="95.7082%" y="239.50"></text></g><g><title>free_global_ctxt (5,866,075 samples, 1.20%)</title><rect x="95.8874%" y="229" width="1.2026%" height="15" fill="rgb(243,32,47)"/><text x="96.1374%" y="239.50"></text></g><g><title>hir_lowering (11,208,386 samples, 2.30%)</title><rect x="97.1347%" y="229" width="2.2979%" height="15" fill="rgb(247,202,23)"/><text x="97.3847%" y="239.50">h..</text></g><g><title>parse_crate (652,007 samples, 0.13%)</title><rect x="99.4481%" y="229" width="0.1337%" height="15" fill="rgb(219,102,11)"/><text x="99.6981%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,334,335 samples, 0.27%)</title><rect x="99.6321%" y="229" width="0.2736%" height="15" fill="rgb(243,110,44)"/><text x="99.8821%" y="239.50"></text></g><g><title>all (487,776,272 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (487,776,272 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>