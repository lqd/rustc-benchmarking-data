<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (2,341,901 samples, 0.23%)</title><rect x="15.4396%" y="149" width="0.2272%" height="15" fill="rgb(227,0,7)"/><text x="15.6896%" y="159.50"></text></g><g><title>evaluate_obligation (1,807,555 samples, 0.18%)</title><rect x="15.4914%" y="133" width="0.1753%" height="15" fill="rgb(217,0,24)"/><text x="15.7414%" y="143.50"></text></g><g><title>needs_drop_raw (3,413,214 samples, 0.33%)</title><rect x="15.3410%" y="165" width="0.3311%" height="15" fill="rgb(221,193,54)"/><text x="15.5910%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (1,199,005 samples, 0.12%)</title><rect x="15.7502%" y="149" width="0.1163%" height="15" fill="rgb(248,212,6)"/><text x="16.0002%" y="159.50"></text></g><g><title>resolve_instance (2,833,798 samples, 0.27%)</title><rect x="15.6722%" y="165" width="0.2749%" height="15" fill="rgb(208,68,35)"/><text x="15.9222%" y="175.50"></text></g><g><title>thir_body (4,984,454 samples, 0.48%)</title><rect x="15.9597%" y="165" width="0.4835%" height="15" fill="rgb(232,128,0)"/><text x="16.2097%" y="175.50"></text></g><g><title>mir_const (32,383,516 samples, 3.14%)</title><rect x="13.3092%" y="213" width="3.1411%" height="15" fill="rgb(207,160,47)"/><text x="13.5592%" y="223.50">mir..</text></g><g><title>unsafety_check_result (27,954,817 samples, 2.71%)</title><rect x="13.7387%" y="197" width="2.7116%" height="15" fill="rgb(228,23,34)"/><text x="13.9887%" y="207.50">un..</text></g><g><title>mir_built (24,688,554 samples, 2.39%)</title><rect x="14.0556%" y="181" width="2.3947%" height="15" fill="rgb(218,30,26)"/><text x="14.3056%" y="191.50">mi..</text></g><g><title>thir_body (41,237,001 samples, 4.00%)</title><rect x="24.7561%" y="133" width="3.9999%" height="15" fill="rgb(220,122,19)"/><text x="25.0061%" y="143.50">thir..</text></g><g><title>mir_const_qualif (125,935,631 samples, 12.22%)</title><rect x="16.5414%" y="197" width="12.2155%" height="15" fill="rgb(250,228,42)"/><text x="16.7914%" y="207.50">mir_const_qualif</text></g><g><title>mir_const (80,694,285 samples, 7.83%)</title><rect x="20.9298%" y="181" width="7.8272%" height="15" fill="rgb(240,193,28)"/><text x="21.1798%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (79,180,122 samples, 7.68%)</title><rect x="21.0766%" y="165" width="7.6803%" height="15" fill="rgb(216,20,37)"/><text x="21.3266%" y="175.50">unsafety_ch..</text></g><g><title>mir_built (78,318,306 samples, 7.60%)</title><rect x="21.1602%" y="149" width="7.5967%" height="15" fill="rgb(206,188,39)"/><text x="21.4102%" y="159.50">mir_built</text></g><g><title>mir_promoted (191,230,242 samples, 18.55%)</title><rect x="10.2114%" y="229" width="18.5490%" height="15" fill="rgb(217,207,13)"/><text x="10.4614%" y="239.50">mir_promoted</text></g><g><title>mir_const_qualif (126,910,473 samples, 12.31%)</title><rect x="16.4503%" y="213" width="12.3101%" height="15" fill="rgb(231,73,38)"/><text x="16.7003%" y="223.50">mir_const_qualif</text></g><g><title>type_op_ascribe_user_type (2,864,483 samples, 0.28%)</title><rect x="28.7604%" y="229" width="0.2778%" height="15" fill="rgb(225,20,46)"/><text x="29.0104%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (2,172,780 samples, 0.21%)</title><rect x="29.0383%" y="229" width="0.2108%" height="15" fill="rgb(210,31,41)"/><text x="29.2883%" y="239.50"></text></g><g><title>normalize_projection_ty (1,285,683 samples, 0.12%)</title><rect x="29.1243%" y="213" width="0.1247%" height="15" fill="rgb(221,200,47)"/><text x="29.3743%" y="223.50"></text></g><g><title>type_op_prove_predicate (12,006,086 samples, 1.16%)</title><rect x="29.3341%" y="229" width="1.1646%" height="15" fill="rgb(226,26,5)"/><text x="29.5841%" y="239.50"></text></g><g><title>MIR_borrow_checking (305,606,061 samples, 29.64%)</title><rect x="0.8591%" y="261" width="29.6432%" height="15" fill="rgb(249,33,26)"/><text x="1.1091%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (304,782,773 samples, 29.56%)</title><rect x="0.9389%" y="245" width="29.5634%" height="15" fill="rgb(235,183,28)"/><text x="1.1889%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,438,227 samples, 0.14%)</title><rect x="30.5023%" y="261" width="0.1395%" height="15" fill="rgb(221,5,38)"/><text x="30.7523%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,131,884 samples, 0.11%)</title><rect x="30.5321%" y="245" width="0.1098%" height="15" fill="rgb(247,18,42)"/><text x="30.7821%" y="255.50"></text></g><g><title>hir_module_items (1,683,018 samples, 0.16%)</title><rect x="30.6418%" y="261" width="0.1632%" height="15" fill="rgb(241,131,45)"/><text x="30.8918%" y="271.50"></text></g><g><title>check_mod_attrs (8,338,883 samples, 0.81%)</title><rect x="30.8126%" y="245" width="0.8089%" height="15" fill="rgb(249,31,29)"/><text x="31.0626%" y="255.50"></text></g><g><title>check_mod_const_bodies (1,094,484 samples, 0.11%)</title><rect x="31.6214%" y="245" width="0.1062%" height="15" fill="rgb(225,111,53)"/><text x="31.8714%" y="255.50"></text></g><g><title>check_mod_loops (1,348,934 samples, 0.13%)</title><rect x="31.7276%" y="245" width="0.1308%" height="15" fill="rgb(238,160,17)"/><text x="31.9776%" y="255.50"></text></g><g><title>lookup_deprecation_entry (1,433,716 samples, 0.14%)</title><rect x="31.9651%" y="229" width="0.1391%" height="15" fill="rgb(214,148,48)"/><text x="32.2151%" y="239.50"></text></g><g><title>stability_index (1,325,445 samples, 0.13%)</title><rect x="31.9756%" y="213" width="0.1286%" height="15" fill="rgb(232,36,49)"/><text x="32.2256%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (2,630,630 samples, 0.26%)</title><rect x="31.8645%" y="245" width="0.2552%" height="15" fill="rgb(209,103,24)"/><text x="32.1145%" y="255.50"></text></g><g><title>misc_checking_1 (13,772,584 samples, 1.34%)</title><rect x="30.8051%" y="261" width="1.3359%" height="15" fill="rgb(229,88,8)"/><text x="31.0551%" y="271.50"></text></g><g><title>check_mod_intrinsics (1,738,871 samples, 0.17%)</title><rect x="32.1438%" y="229" width="0.1687%" height="15" fill="rgb(213,181,19)"/><text x="32.3938%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (5,752,255 samples, 0.56%)</title><rect x="32.1414%" y="245" width="0.5580%" height="15" fill="rgb(254,191,54)"/><text x="32.3914%" y="255.50"></text></g><g><title>check_mod_liveness (3,989,194 samples, 0.39%)</title><rect x="32.3125%" y="229" width="0.3869%" height="15" fill="rgb(241,83,37)"/><text x="32.5625%" y="239.50"></text></g><g><title>misc_checking_2 (9,404,616 samples, 0.91%)</title><rect x="32.1411%" y="261" width="0.9122%" height="15" fill="rgb(233,36,39)"/><text x="32.3911%" y="271.50"></text></g><g><title>match_checking (3,648,371 samples, 0.35%)</title><rect x="32.6994%" y="245" width="0.3539%" height="15" fill="rgb(226,3,54)"/><text x="32.9494%" y="255.50"></text></g><g><title>check_match (3,461,447 samples, 0.34%)</title><rect x="32.7175%" y="229" width="0.3358%" height="15" fill="rgb(245,192,40)"/><text x="32.9675%" y="239.50"></text></g><g><title>check_private_in_public (1,946,702 samples, 0.19%)</title><rect x="33.0553%" y="245" width="0.1888%" height="15" fill="rgb(238,167,29)"/><text x="33.3053%" y="255.50"></text></g><g><title>death_checking (3,641,310 samples, 0.35%)</title><rect x="33.2441%" y="245" width="0.3532%" height="15" fill="rgb(232,182,51)"/><text x="33.4941%" y="255.50"></text></g><g><title>eval_to_const_value_raw (59,694,588 samples, 5.79%)</title><rect x="34.7585%" y="149" width="5.7903%" height="15" fill="rgb(231,60,39)"/><text x="35.0085%" y="159.50">eval_to..</text></g><g><title>eval_to_const_value_raw (59,644,578 samples, 5.79%)</title><rect x="34.7634%" y="133" width="5.7854%" height="15" fill="rgb(208,69,12)"/><text x="35.0134%" y="143.50">eval_to..</text></g><g><title>eval_to_allocation_raw (59,561,748 samples, 5.78%)</title><rect x="34.7714%" y="117" width="5.7774%" height="15" fill="rgb(235,93,37)"/><text x="35.0214%" y="127.50">eval_to..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (55,850,292 samples, 5.42%)</title><rect x="35.1314%" y="101" width="5.4174%" height="15" fill="rgb(213,116,39)"/><text x="35.3814%" y="111.50">try_nor..</text></g><g><title>eval_to_const_value_raw (55,640,230 samples, 5.40%)</title><rect x="35.1518%" y="85" width="5.3970%" height="15" fill="rgb(222,207,29)"/><text x="35.4018%" y="95.50">eval_to..</text></g><g><title>eval_to_const_value_raw (55,555,640 samples, 5.39%)</title><rect x="35.1600%" y="69" width="5.3888%" height="15" fill="rgb(206,96,30)"/><text x="35.4100%" y="79.50">eval_to..</text></g><g><title>eval_to_allocation_raw (55,425,089 samples, 5.38%)</title><rect x="35.1727%" y="53" width="5.3761%" height="15" fill="rgb(218,138,4)"/><text x="35.4227%" y="63.50">eval_to..</text></g><g><title>promoted_mir (2,875,798 samples, 0.28%)</title><rect x="40.2699%" y="37" width="0.2789%" height="15" fill="rgb(250,191,14)"/><text x="40.5199%" y="47.50"></text></g><g><title>eval_to_const_value_raw (61,235,956 samples, 5.94%)</title><rect x="34.6149%" y="213" width="5.9398%" height="15" fill="rgb(239,60,40)"/><text x="34.8649%" y="223.50">eval_to_..</text></g><g><title>eval_to_const_value_raw (61,225,365 samples, 5.94%)</title><rect x="34.6159%" y="197" width="5.9388%" height="15" fill="rgb(206,27,48)"/><text x="34.8659%" y="207.50">eval_to_..</text></g><g><title>eval_to_allocation_raw (61,221,235 samples, 5.94%)</title><rect x="34.6163%" y="181" width="5.9384%" height="15" fill="rgb(225,35,8)"/><text x="34.8663%" y="191.50">eval_to_..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (60,026,341 samples, 5.82%)</title><rect x="34.7322%" y="165" width="5.8224%" height="15" fill="rgb(250,213,24)"/><text x="34.9822%" y="175.50">try_nor..</text></g><g><title>param_env (1,064,483 samples, 0.10%)</title><rect x="40.5546%" y="213" width="0.1033%" height="15" fill="rgb(247,123,22)"/><text x="40.8046%" y="223.50"></text></g><g><title>crate_lints (74,165,050 samples, 7.19%)</title><rect x="33.5977%" y="229" width="7.1939%" height="15" fill="rgb(231,138,38)"/><text x="33.8477%" y="239.50">crate_lints</text></g><g><title>type_of (1,258,274 samples, 0.12%)</title><rect x="40.6695%" y="213" width="0.1221%" height="15" fill="rgb(231,145,46)"/><text x="40.9195%" y="223.50"></text></g><g><title>lint_checking (92,023,610 samples, 8.93%)</title><rect x="33.5973%" y="245" width="8.9261%" height="15" fill="rgb(251,118,11)"/><text x="33.8473%" y="255.50">lint_checking</text></g><g><title>module_lints (17,854,570 samples, 1.73%)</title><rect x="40.7916%" y="229" width="1.7319%" height="15" fill="rgb(217,147,25)"/><text x="41.0416%" y="239.50"></text></g><g><title>lint_mod (17,834,150 samples, 1.73%)</title><rect x="40.7936%" y="213" width="1.7299%" height="15" fill="rgb(247,81,37)"/><text x="41.0436%" y="223.50"></text></g><g><title>privacy_access_levels (2,953,943 samples, 0.29%)</title><rect x="42.5234%" y="245" width="0.2865%" height="15" fill="rgb(209,12,38)"/><text x="42.7734%" y="255.50"></text></g><g><title>privacy_checking_modules (13,086,737 samples, 1.27%)</title><rect x="42.8100%" y="245" width="1.2694%" height="15" fill="rgb(227,1,9)"/><text x="43.0600%" y="255.50"></text></g><g><title>check_mod_privacy (13,067,397 samples, 1.27%)</title><rect x="42.8118%" y="229" width="1.2675%" height="15" fill="rgb(248,47,43)"/><text x="43.0618%" y="239.50"></text></g><g><title>misc_checking_3 (113,733,423 samples, 11.03%)</title><rect x="33.0533%" y="261" width="11.0319%" height="15" fill="rgb(221,10,30)"/><text x="33.3033%" y="271.50">misc_checking_3</text></g><g><title>impl_parent (3,087,292 samples, 0.30%)</title><rect x="44.5962%" y="197" width="0.2995%" height="15" fill="rgb(210,229,1)"/><text x="44.8462%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,683,471 samples, 0.16%)</title><rect x="44.7324%" y="181" width="0.1633%" height="15" fill="rgb(222,148,37)"/><text x="44.9824%" y="191.50"></text></g><g><title>impl_trait_ref (6,014,668 samples, 0.58%)</title><rect x="44.8957%" y="197" width="0.5834%" height="15" fill="rgb(234,67,33)"/><text x="45.1457%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,818,396 samples, 0.47%)</title><rect x="45.0117%" y="181" width="0.4674%" height="15" fill="rgb(247,98,35)"/><text x="45.2617%" y="191.50"></text></g><g><title>coherent_trait (15,091,107 samples, 1.46%)</title><rect x="44.1147%" y="229" width="1.4638%" height="15" fill="rgb(247,138,52)"/><text x="44.3647%" y="239.50"></text></g><g><title>specialization_graph_of (14,674,653 samples, 1.42%)</title><rect x="44.1551%" y="213" width="1.4234%" height="15" fill="rgb(213,79,30)"/><text x="44.4051%" y="223.50"></text></g><g><title>coherence_checking (15,286,241 samples, 1.48%)</title><rect x="44.1121%" y="245" width="1.4827%" height="15" fill="rgb(246,177,23)"/><text x="44.3621%" y="255.50"></text></g><g><title>dropck_outlives (1,364,956 samples, 0.13%)</title><rect x="54.0163%" y="197" width="0.1324%" height="15" fill="rgb(230,62,27)"/><text x="54.2663%" y="207.50"></text></g><g><title>evaluate_obligation (7,095,301 samples, 0.69%)</title><rect x="54.1486%" y="197" width="0.6882%" height="15" fill="rgb(216,154,8)"/><text x="54.3986%" y="207.50"></text></g><g><title>method_autoderef_steps (1,544,142 samples, 0.15%)</title><rect x="54.9544%" y="197" width="0.1498%" height="15" fill="rgb(244,35,45)"/><text x="55.2044%" y="207.50"></text></g><g><title>evaluate_obligation (2,200,865 samples, 0.21%)</title><rect x="57.5935%" y="181" width="0.2135%" height="15" fill="rgb(251,115,12)"/><text x="57.8435%" y="191.50"></text></g><g><title>typeck (29,077,075 samples, 2.82%)</title><rect x="55.2034%" y="197" width="2.8204%" height="15" fill="rgb(240,54,50)"/><text x="55.4534%" y="207.50">ty..</text></g><g><title>item_bodies_checking (128,104,954 samples, 12.43%)</title><rect x="45.6122%" y="245" width="12.4260%" height="15" fill="rgb(233,84,52)"/><text x="45.8622%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (128,099,984 samples, 12.43%)</title><rect x="45.6127%" y="229" width="12.4255%" height="15" fill="rgb(207,117,47)"/><text x="45.8627%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (127,666,453 samples, 12.38%)</title><rect x="45.6548%" y="213" width="12.3834%" height="15" fill="rgb(249,43,39)"/><text x="45.9048%" y="223.50">typeck</text></g><g><title>item_types_checking (58,080,771 samples, 5.63%)</title><rect x="58.0382%" y="245" width="5.6337%" height="15" fill="rgb(209,38,44)"/><text x="58.2882%" y="255.50">item_ty..</text></g><g><title>check_mod_item_types (58,058,971 samples, 5.63%)</title><rect x="58.0403%" y="229" width="5.6316%" height="15" fill="rgb(236,212,23)"/><text x="58.2903%" y="239.50">check_m..</text></g><g><title>typeck (54,762,586 samples, 5.31%)</title><rect x="58.3600%" y="213" width="5.3119%" height="15" fill="rgb(242,79,21)"/><text x="58.6100%" y="223.50">typeck</text></g><g><title>generics_of (2,023,644 samples, 0.20%)</title><rect x="63.9622%" y="213" width="0.1963%" height="15" fill="rgb(211,96,35)"/><text x="64.2122%" y="223.50"></text></g><g><title>late_bound_vars_map (5,761,986 samples, 0.56%)</title><rect x="64.2979%" y="165" width="0.5589%" height="15" fill="rgb(253,215,40)"/><text x="64.5479%" y="175.50"></text></g><g><title>resolve_lifetimes (5,732,216 samples, 0.56%)</title><rect x="64.3007%" y="149" width="0.5560%" height="15" fill="rgb(211,81,21)"/><text x="64.5507%" y="159.50"></text></g><g><title>lint_levels (5,149,898 samples, 0.50%)</title><rect x="64.3572%" y="133" width="0.4995%" height="15" fill="rgb(208,190,38)"/><text x="64.6072%" y="143.50"></text></g><g><title>explicit_predicates_of (6,570,960 samples, 0.64%)</title><rect x="64.2263%" y="181" width="0.6374%" height="15" fill="rgb(235,213,38)"/><text x="64.4763%" y="191.50"></text></g><g><title>predicates_of (7,844,413 samples, 0.76%)</title><rect x="64.1698%" y="213" width="0.7609%" height="15" fill="rgb(237,122,38)"/><text x="64.4198%" y="223.50"></text></g><g><title>predicates_defined_on (7,629,892 samples, 0.74%)</title><rect x="64.1906%" y="197" width="0.7401%" height="15" fill="rgb(244,218,35)"/><text x="64.4406%" y="207.50"></text></g><g><title>named_region_map (1,616,334 samples, 0.16%)</title><rect x="64.9893%" y="197" width="0.1568%" height="15" fill="rgb(240,68,47)"/><text x="65.2393%" y="207.50"></text></g><g><title>resolve_lifetimes (1,565,633 samples, 0.15%)</title><rect x="64.9942%" y="181" width="0.1519%" height="15" fill="rgb(210,16,53)"/><text x="65.2442%" y="191.50"></text></g><g><title>type_collecting (15,193,830 samples, 1.47%)</title><rect x="63.6726%" y="245" width="1.4738%" height="15" fill="rgb(235,124,12)"/><text x="63.9226%" y="255.50"></text></g><g><title>collect_mod_item_types (15,166,110 samples, 1.47%)</title><rect x="63.6753%" y="229" width="1.4711%" height="15" fill="rgb(224,169,11)"/><text x="63.9253%" y="239.50"></text></g><g><title>type_of (2,048,268 samples, 0.20%)</title><rect x="64.9477%" y="213" width="0.1987%" height="15" fill="rgb(250,166,2)"/><text x="65.1977%" y="223.50"></text></g><g><title>evaluate_obligation (1,414,462 samples, 0.14%)</title><rect x="66.0729%" y="213" width="0.1372%" height="15" fill="rgb(242,216,29)"/><text x="66.3229%" y="223.50"></text></g><g><title>param_env (1,490,364 samples, 0.14%)</title><rect x="66.2965%" y="213" width="0.1446%" height="15" fill="rgb(230,116,27)"/><text x="66.5465%" y="223.50"></text></g><g><title>region_scope_tree (1,535,968 samples, 0.15%)</title><rect x="66.4466%" y="213" width="0.1490%" height="15" fill="rgb(228,99,48)"/><text x="66.6966%" y="223.50"></text></g><g><title>check_impl_item_well_formed (13,587,007 samples, 1.32%)</title><rect x="65.2805%" y="229" width="1.3179%" height="15" fill="rgb(253,11,6)"/><text x="65.5305%" y="239.50"></text></g><g><title>param_env (1,502,739 samples, 0.15%)</title><rect x="67.3612%" y="213" width="0.1458%" height="15" fill="rgb(247,143,39)"/><text x="67.6112%" y="223.50"></text></g><g><title>region_scope_tree (7,864,593 samples, 0.76%)</title><rect x="67.5186%" y="213" width="0.7629%" height="15" fill="rgb(236,97,10)"/><text x="67.7686%" y="223.50"></text></g><g><title>check_item_well_formed (17,673,908 samples, 1.71%)</title><rect x="66.5984%" y="229" width="1.7143%" height="15" fill="rgb(233,208,19)"/><text x="66.8484%" y="239.50"></text></g><g><title>analysis (701,004,279 samples, 68.00%)</title><rect x="0.3258%" y="277" width="67.9962%" height="15" fill="rgb(216,164,2)"/><text x="0.5758%" y="287.50">analysis</text></g><g><title>type_check_crate (249,867,928 samples, 24.24%)</title><rect x="44.0852%" y="261" width="24.2367%" height="15" fill="rgb(220,129,5)"/><text x="44.3352%" y="271.50">type_check_crate</text></g><g><title>wf_checking (32,710,576 samples, 3.17%)</title><rect x="65.1491%" y="245" width="3.1729%" height="15" fill="rgb(242,17,10)"/><text x="65.3991%" y="255.50">wf_..</text></g><g><title>AST_validation (2,001,662 samples, 0.19%)</title><rect x="68.3878%" y="261" width="0.1942%" height="15" fill="rgb(242,107,0)"/><text x="68.6378%" y="271.50"></text></g><g><title>complete_gated_feature_checking (1,959,132 samples, 0.19%)</title><rect x="68.5820%" y="261" width="0.1900%" height="15" fill="rgb(251,28,31)"/><text x="68.8320%" y="271.50"></text></g><g><title>metadata_register_crate (1,280,874 samples, 0.12%)</title><rect x="84.0513%" y="229" width="0.1242%" height="15" fill="rgb(233,223,10)"/><text x="84.3013%" y="239.50"></text></g><g><title>macro_expand_crate (166,188,152 samples, 16.12%)</title><rect x="68.7794%" y="261" width="16.1200%" height="15" fill="rgb(215,21,27)"/><text x="69.0294%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (166,153,920 samples, 16.12%)</title><rect x="68.7827%" y="245" width="16.1166%" height="15" fill="rgb(232,23,21)"/><text x="69.0327%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (7,462,561 samples, 0.72%)</title><rect x="84.1755%" y="229" width="0.7239%" height="15" fill="rgb(244,5,23)"/><text x="84.4255%" y="239.50"></text></g><g><title>late_resolve_crate (7,885,078 samples, 0.76%)</title><rect x="84.9554%" y="245" width="0.7648%" height="15" fill="rgb(226,81,46)"/><text x="85.2054%" y="255.50"></text></g><g><title>resolve_check_unused (1,736,760 samples, 0.17%)</title><rect x="85.7277%" y="245" width="0.1685%" height="15" fill="rgb(247,70,30)"/><text x="85.9777%" y="255.50"></text></g><g><title>resolve_postprocess (1,680,619 samples, 0.16%)</title><rect x="85.8962%" y="245" width="0.1630%" height="15" fill="rgb(212,68,19)"/><text x="86.1462%" y="255.50"></text></g><g><title>configure_and_expand (182,424,454 samples, 17.69%)</title><rect x="68.3645%" y="277" width="17.6948%" height="15" fill="rgb(240,187,13)"/><text x="68.6145%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (11,896,114 samples, 1.15%)</title><rect x="84.9054%" y="261" width="1.1539%" height="15" fill="rgb(223,113,26)"/><text x="85.1554%" y="271.50"></text></g><g><title>drop_ast (4,123,896 samples, 0.40%)</title><rect x="86.0593%" y="277" width="0.4000%" height="15" fill="rgb(206,192,2)"/><text x="86.3093%" y="287.50"></text></g><g><title>early_lint_checks (13,130,307 samples, 1.27%)</title><rect x="86.4617%" y="277" width="1.2736%" height="15" fill="rgb(241,108,4)"/><text x="86.7117%" y="287.50"></text></g><g><title>free_global_ctxt (15,396,083 samples, 1.49%)</title><rect x="87.7353%" y="277" width="1.4934%" height="15" fill="rgb(247,173,49)"/><text x="87.9853%" y="287.50"></text></g><g><title>generate_crate_metadata (61,748,121 samples, 5.99%)</title><rect x="89.2287%" y="277" width="5.9895%" height="15" fill="rgb(224,114,35)"/><text x="89.4787%" y="287.50">generate..</text></g><g><title>hir_lowering (43,013,011 samples, 4.17%)</title><rect x="95.2182%" y="277" width="4.1722%" height="15" fill="rgb(245,159,27)"/><text x="95.4682%" y="287.50">hir_l..</text></g><g><title>self_profile_alloc_query_strings (2,263,185 samples, 0.22%)</title><rect x="99.4961%" y="277" width="0.2195%" height="15" fill="rgb(245,172,44)"/><text x="99.7461%" y="287.50"></text></g><g><title>all (1,030,946,754 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (1,030,946,754 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (2,742,781 samples, 0.27%)</title><rect x="99.7340%" y="277" width="0.2660%" height="15" fill="rgb(237,72,25)"/><text x="99.9840%" y="287.50"></text></g></svg></svg>