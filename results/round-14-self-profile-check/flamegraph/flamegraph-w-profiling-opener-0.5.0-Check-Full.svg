<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (249,334 samples, 0.32%)</title><rect x="10.1782%" y="165" width="0.3231%" height="15" fill="rgb(227,0,7)"/><text x="10.4282%" y="175.50"></text></g><g><title>item_attrs (246,083 samples, 0.32%)</title><rect x="10.8685%" y="133" width="0.3188%" height="15" fill="rgb(217,0,24)"/><text x="11.1185%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (237,363 samples, 0.31%)</title><rect x="10.8798%" y="117" width="0.3075%" height="15" fill="rgb(221,193,54)"/><text x="11.1298%" y="127.50"></text></g><g><title>codegen_fn_attrs (335,424 samples, 0.43%)</title><rect x="10.7744%" y="149" width="0.4346%" height="15" fill="rgb(248,212,6)"/><text x="11.0244%" y="159.50"></text></g><g><title>is_copy_raw (94,691 samples, 0.12%)</title><rect x="13.1985%" y="69" width="0.1227%" height="15" fill="rgb(208,68,35)"/><text x="13.4485%" y="79.50"></text></g><g><title>evaluate_obligation (85,701 samples, 0.11%)</title><rect x="13.2102%" y="53" width="0.1110%" height="15" fill="rgb(232,128,0)"/><text x="13.4602%" y="63.50"></text></g><g><title>adt_drop_tys (182,323 samples, 0.24%)</title><rect x="13.1304%" y="85" width="0.2362%" height="15" fill="rgb(207,160,47)"/><text x="13.3804%" y="95.50"></text></g><g><title>adt_drop_tys (264,685 samples, 0.34%)</title><rect x="13.1127%" y="101" width="0.3429%" height="15" fill="rgb(228,23,34)"/><text x="13.3627%" y="111.50"></text></g><g><title>adt_drop_tys (385,757 samples, 0.50%)</title><rect x="13.0825%" y="117" width="0.4998%" height="15" fill="rgb(218,30,26)"/><text x="13.3325%" y="127.50"></text></g><g><title>needs_drop_raw (1,183,743 samples, 1.53%)</title><rect x="12.9802%" y="133" width="1.5338%" height="15" fill="rgb(220,122,19)"/><text x="13.2302%" y="143.50"></text></g><g><title>is_copy_raw (719,024 samples, 0.93%)</title><rect x="13.5823%" y="117" width="0.9316%" height="15" fill="rgb(250,228,42)"/><text x="13.8323%" y="127.50"></text></g><g><title>evaluate_obligation (612,983 samples, 0.79%)</title><rect x="13.7197%" y="101" width="0.7942%" height="15" fill="rgb(240,193,28)"/><text x="13.9697%" y="111.50"></text></g><g><title>resolve_instance (201,042 samples, 0.26%)</title><rect x="14.5139%" y="133" width="0.2605%" height="15" fill="rgb(216,20,37)"/><text x="14.7639%" y="143.50"></text></g><g><title>thir_body (559,108 samples, 0.72%)</title><rect x="14.7849%" y="133" width="0.7244%" height="15" fill="rgb(206,188,39)"/><text x="15.0349%" y="143.50"></text></g><g><title>mir_const (4,541,155 samples, 5.88%)</title><rect x="9.6347%" y="181" width="5.8839%" height="15" fill="rgb(217,207,13)"/><text x="9.8847%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (3,872,304 samples, 5.02%)</title><rect x="10.5013%" y="165" width="5.0173%" height="15" fill="rgb(231,73,38)"/><text x="10.7513%" y="175.50">unsafe..</text></g><g><title>mir_built (3,326,058 samples, 4.31%)</title><rect x="11.2090%" y="149" width="4.3095%" height="15" fill="rgb(225,20,46)"/><text x="11.4590%" y="159.50">mir_b..</text></g><g><title>mir_const_qualif (236,862 samples, 0.31%)</title><rect x="15.5185%" y="181" width="0.3069%" height="15" fill="rgb(210,31,41)"/><text x="15.7685%" y="191.50"></text></g><g><title>mir_const (184,102 samples, 0.24%)</title><rect x="15.5869%" y="165" width="0.2385%" height="15" fill="rgb(221,200,47)"/><text x="15.8369%" y="175.50"></text></g><g><title>unsafety_check_result (139,682 samples, 0.18%)</title><rect x="15.6444%" y="149" width="0.1810%" height="15" fill="rgb(226,26,5)"/><text x="15.8944%" y="159.50"></text></g><g><title>mir_built (105,071 samples, 0.14%)</title><rect x="15.6893%" y="133" width="0.1361%" height="15" fill="rgb(249,33,26)"/><text x="15.9393%" y="143.50"></text></g><g><title>mir_promoted (5,232,211 samples, 6.78%)</title><rect x="9.0465%" y="197" width="6.7793%" height="15" fill="rgb(235,183,28)"/><text x="9.2965%" y="207.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (277,842 samples, 0.36%)</title><rect x="15.8257%" y="197" width="0.3600%" height="15" fill="rgb(221,5,38)"/><text x="16.0757%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (198,715 samples, 0.26%)</title><rect x="16.1857%" y="197" width="0.2575%" height="15" fill="rgb(247,18,42)"/><text x="16.4357%" y="207.50"></text></g><g><title>normalize_projection_ty (128,642 samples, 0.17%)</title><rect x="16.2765%" y="181" width="0.1667%" height="15" fill="rgb(241,131,45)"/><text x="16.5265%" y="191.50"></text></g><g><title>type_op_normalize_predicate (176,602 samples, 0.23%)</title><rect x="16.4432%" y="197" width="0.2288%" height="15" fill="rgb(249,31,29)"/><text x="16.6932%" y="207.50"></text></g><g><title>normalize_projection_ty (120,240 samples, 0.16%)</title><rect x="16.5162%" y="181" width="0.1558%" height="15" fill="rgb(225,111,53)"/><text x="16.7662%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,185,969 samples, 1.54%)</title><rect x="16.6720%" y="197" width="1.5366%" height="15" fill="rgb(238,160,17)"/><text x="16.9220%" y="207.50"></text></g><g><title>MIR_borrow_checking (13,185,987 samples, 17.08%)</title><rect x="1.1323%" y="229" width="17.0848%" height="15" fill="rgb(214,148,48)"/><text x="1.3823%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,149,077 samples, 17.04%)</title><rect x="1.1802%" y="213" width="17.0370%" height="15" fill="rgb(232,36,49)"/><text x="1.4302%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (109,402 samples, 0.14%)</title><rect x="18.2171%" y="229" width="0.1417%" height="15" fill="rgb(209,103,24)"/><text x="18.4671%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (77,571 samples, 0.10%)</title><rect x="18.2584%" y="213" width="0.1005%" height="15" fill="rgb(229,88,8)"/><text x="18.5084%" y="223.50"></text></g><g><title>hir_module_items (161,113 samples, 0.21%)</title><rect x="18.3589%" y="229" width="0.2088%" height="15" fill="rgb(213,181,19)"/><text x="18.6089%" y="239.50"></text></g><g><title>get_lang_items (88,051 samples, 0.11%)</title><rect x="18.9435%" y="181" width="0.1141%" height="15" fill="rgb(254,191,54)"/><text x="19.1935%" y="191.50"></text></g><g><title>codegen_fn_attrs (78,200 samples, 0.10%)</title><rect x="19.1485%" y="165" width="0.1013%" height="15" fill="rgb(241,83,37)"/><text x="19.3985%" y="175.50"></text></g><g><title>should_inherit_track_caller (152,871 samples, 0.20%)</title><rect x="19.0576%" y="181" width="0.1981%" height="15" fill="rgb(233,36,39)"/><text x="19.3076%" y="191.50"></text></g><g><title>codegen_fn_attrs (343,013 samples, 0.44%)</title><rect x="18.8481%" y="197" width="0.4444%" height="15" fill="rgb(226,3,54)"/><text x="19.0981%" y="207.50"></text></g><g><title>check_mod_attrs (532,876 samples, 0.69%)</title><rect x="18.6023%" y="213" width="0.6904%" height="15" fill="rgb(245,192,40)"/><text x="18.8523%" y="223.50"></text></g><g><title>check_mod_const_bodies (83,260 samples, 0.11%)</title><rect x="19.2927%" y="213" width="0.1079%" height="15" fill="rgb(238,167,29)"/><text x="19.5427%" y="223.50"></text></g><g><title>lookup_deprecation_entry (123,041 samples, 0.16%)</title><rect x="19.7046%" y="197" width="0.1594%" height="15" fill="rgb(232,182,51)"/><text x="19.9546%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (412,985 samples, 0.54%)</title><rect x="19.4733%" y="213" width="0.5351%" height="15" fill="rgb(231,60,39)"/><text x="19.7233%" y="223.50"></text></g><g><title>misc_checking_1 (1,171,223 samples, 1.52%)</title><rect x="18.5682%" y="229" width="1.5175%" height="15" fill="rgb(208,69,12)"/><text x="18.8182%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (300,744 samples, 0.39%)</title><rect x="20.0875%" y="213" width="0.3897%" height="15" fill="rgb(235,93,37)"/><text x="20.3375%" y="223.50"></text></g><g><title>check_mod_liveness (252,683 samples, 0.33%)</title><rect x="20.1498%" y="197" width="0.3274%" height="15" fill="rgb(213,116,39)"/><text x="20.3998%" y="207.50"></text></g><g><title>type_uninhabited_from (106,591 samples, 0.14%)</title><rect x="20.3391%" y="181" width="0.1381%" height="15" fill="rgb(222,207,29)"/><text x="20.5891%" y="191.50"></text></g><g><title>type_uninhabited_from (86,391 samples, 0.11%)</title><rect x="20.3653%" y="165" width="0.1119%" height="15" fill="rgb(206,96,30)"/><text x="20.6153%" y="175.50"></text></g><g><title>misc_checking_2 (638,057 samples, 0.83%)</title><rect x="20.0857%" y="229" width="0.8267%" height="15" fill="rgb(218,138,4)"/><text x="20.3357%" y="239.50"></text></g><g><title>match_checking (335,893 samples, 0.44%)</title><rect x="20.4772%" y="213" width="0.4352%" height="15" fill="rgb(250,191,14)"/><text x="20.7272%" y="223.50"></text></g><g><title>check_match (323,413 samples, 0.42%)</title><rect x="20.4934%" y="197" width="0.4190%" height="15" fill="rgb(239,60,40)"/><text x="20.7434%" y="207.50"></text></g><g><title>check_private_in_public (77,431 samples, 0.10%)</title><rect x="20.9245%" y="213" width="0.1003%" height="15" fill="rgb(206,27,48)"/><text x="21.1745%" y="223.50"></text></g><g><title>death_checking (177,702 samples, 0.23%)</title><rect x="21.0248%" y="213" width="0.2302%" height="15" fill="rgb(225,35,8)"/><text x="21.2748%" y="223.50"></text></g><g><title>eval_to_const_value_raw (178,592 samples, 0.23%)</title><rect x="21.9716%" y="181" width="0.2314%" height="15" fill="rgb(250,213,24)"/><text x="22.2216%" y="191.50"></text></g><g><title>eval_to_const_value_raw (170,722 samples, 0.22%)</title><rect x="21.9818%" y="165" width="0.2212%" height="15" fill="rgb(247,123,22)"/><text x="22.2318%" y="175.50"></text></g><g><title>eval_to_allocation_raw (164,602 samples, 0.21%)</title><rect x="21.9897%" y="149" width="0.2133%" height="15" fill="rgb(231,138,38)"/><text x="22.2397%" y="159.50"></text></g><g><title>param_env (190,352 samples, 0.25%)</title><rect x="22.2030%" y="181" width="0.2466%" height="15" fill="rgb(231,145,46)"/><text x="22.4530%" y="191.50"></text></g><g><title>predicates_of (95,121 samples, 0.12%)</title><rect x="22.3264%" y="165" width="0.1232%" height="15" fill="rgb(251,118,11)"/><text x="22.5764%" y="175.50"></text></g><g><title>crate_lints (2,031,693 samples, 2.63%)</title><rect x="21.2571%" y="197" width="2.6324%" height="15" fill="rgb(217,147,25)"/><text x="21.5071%" y="207.50">cr..</text></g><g><title>type_of (1,102,403 samples, 1.43%)</title><rect x="22.4611%" y="181" width="1.4284%" height="15" fill="rgb(247,81,37)"/><text x="22.7111%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (855,509 samples, 1.11%)</title><rect x="22.7810%" y="165" width="1.1085%" height="15" fill="rgb(209,12,38)"/><text x="23.0310%" y="175.50"></text></g><g><title>layout_of (115,832 samples, 0.15%)</title><rect x="24.2034%" y="117" width="0.1501%" height="15" fill="rgb(227,1,9)"/><text x="24.4534%" y="127.50"></text></g><g><title>lint_checking (2,398,487 samples, 3.11%)</title><rect x="21.2551%" y="213" width="3.1077%" height="15" fill="rgb(248,47,43)"/><text x="21.5051%" y="223.50">lin..</text></g><g><title>module_lints (365,274 samples, 0.47%)</title><rect x="23.8895%" y="197" width="0.4733%" height="15" fill="rgb(221,10,30)"/><text x="24.1395%" y="207.50"></text></g><g><title>lint_mod (362,034 samples, 0.47%)</title><rect x="23.8937%" y="181" width="0.4691%" height="15" fill="rgb(210,229,1)"/><text x="24.1437%" y="191.50"></text></g><g><title>layout_of (169,942 samples, 0.22%)</title><rect x="24.1426%" y="165" width="0.2202%" height="15" fill="rgb(222,148,37)"/><text x="24.3926%" y="175.50"></text></g><g><title>layout_of (158,072 samples, 0.20%)</title><rect x="24.1579%" y="149" width="0.2048%" height="15" fill="rgb(234,67,33)"/><text x="24.4079%" y="159.50"></text></g><g><title>layout_of (147,632 samples, 0.19%)</title><rect x="24.1715%" y="133" width="0.1913%" height="15" fill="rgb(247,98,35)"/><text x="24.4215%" y="143.50"></text></g><g><title>privacy_access_levels (81,251 samples, 0.11%)</title><rect x="24.3628%" y="213" width="0.1053%" height="15" fill="rgb(247,138,52)"/><text x="24.6128%" y="223.50"></text></g><g><title>privacy_checking_modules (365,614 samples, 0.47%)</title><rect x="24.4680%" y="213" width="0.4737%" height="15" fill="rgb(213,79,30)"/><text x="24.7180%" y="223.50"></text></g><g><title>check_mod_privacy (363,374 samples, 0.47%)</title><rect x="24.4709%" y="197" width="0.4708%" height="15" fill="rgb(246,177,23)"/><text x="24.7209%" y="207.50"></text></g><g><title>misc_checking_3 (3,121,905 samples, 4.04%)</title><rect x="20.9124%" y="229" width="4.0450%" height="15" fill="rgb(230,62,27)"/><text x="21.1624%" y="239.50">misc..</text></g><g><title>impl_parent (926,153 samples, 1.20%)</title><rect x="26.5536%" y="165" width="1.2000%" height="15" fill="rgb(216,154,8)"/><text x="26.8036%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (627,468 samples, 0.81%)</title><rect x="26.9406%" y="149" width="0.8130%" height="15" fill="rgb(244,35,45)"/><text x="27.1906%" y="159.50"></text></g><g><title>impl_trait_ref (2,981,124 samples, 3.86%)</title><rect x="27.7536%" y="165" width="3.8626%" height="15" fill="rgb(251,115,12)"/><text x="28.0036%" y="175.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,681,409 samples, 3.47%)</title><rect x="28.1420%" y="149" width="3.4742%" height="15" fill="rgb(240,54,50)"/><text x="28.3920%" y="159.50">met..</text></g><g><title>coherent_trait (5,342,670 samples, 6.92%)</title><rect x="25.0231%" y="197" width="6.9224%" height="15" fill="rgb(233,84,52)"/><text x="25.2731%" y="207.50">coherent_..</text></g><g><title>specialization_graph_of (5,335,080 samples, 6.91%)</title><rect x="25.0329%" y="181" width="6.9126%" height="15" fill="rgb(207,117,47)"/><text x="25.2829%" y="191.50">specializ..</text></g><g><title>trait_impls_of (252,504 samples, 0.33%)</title><rect x="31.6183%" y="165" width="0.3272%" height="15" fill="rgb(249,43,39)"/><text x="31.8683%" y="175.50"></text></g><g><title>coherence_checking (5,377,430 samples, 6.97%)</title><rect x="25.0057%" y="213" width="6.9674%" height="15" fill="rgb(209,38,44)"/><text x="25.2557%" y="223.50">coherence..</text></g><g><title>associated_item (347,056 samples, 0.45%)</title><rect x="45.0126%" y="149" width="0.4497%" height="15" fill="rgb(236,212,23)"/><text x="45.2626%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (258,553 samples, 0.34%)</title><rect x="45.1272%" y="133" width="0.3350%" height="15" fill="rgb(242,79,21)"/><text x="45.3772%" y="143.50"></text></g><g><title>associated_items (526,737 samples, 0.68%)</title><rect x="44.8146%" y="165" width="0.6825%" height="15" fill="rgb(211,96,35)"/><text x="45.0646%" y="175.50"></text></g><g><title>adt_def (90,680 samples, 0.12%)</title><rect x="45.8997%" y="133" width="0.1175%" height="15" fill="rgb(253,215,40)"/><text x="46.1497%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (88,460 samples, 0.11%)</title><rect x="45.9026%" y="117" width="0.1146%" height="15" fill="rgb(211,81,21)"/><text x="46.1526%" y="127.50"></text></g><g><title>adt_def (94,131 samples, 0.12%)</title><rect x="46.2410%" y="85" width="0.1220%" height="15" fill="rgb(208,190,38)"/><text x="46.4910%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (93,491 samples, 0.12%)</title><rect x="46.2418%" y="69" width="0.1211%" height="15" fill="rgb(235,213,38)"/><text x="46.4918%" y="79.50"></text></g><g><title>item_attrs (78,441 samples, 0.10%)</title><rect x="46.2613%" y="53" width="0.1016%" height="15" fill="rgb(237,122,38)"/><text x="46.5113%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (77,611 samples, 0.10%)</title><rect x="46.2624%" y="37" width="0.1006%" height="15" fill="rgb(244,218,35)"/><text x="46.5124%" y="47.50"></text></g><g><title>adt_dtorck_constraint (217,492 samples, 0.28%)</title><rect x="46.2198%" y="101" width="0.2818%" height="15" fill="rgb(240,68,47)"/><text x="46.4698%" y="111.50"></text></g><g><title>adt_dtorck_constraint (303,383 samples, 0.39%)</title><rect x="46.1311%" y="117" width="0.3931%" height="15" fill="rgb(210,16,53)"/><text x="46.3811%" y="127.50"></text></g><g><title>adt_dtorck_constraint (386,804 samples, 0.50%)</title><rect x="46.0558%" y="133" width="0.5012%" height="15" fill="rgb(235,124,12)"/><text x="46.3058%" y="143.50"></text></g><g><title>dropck_outlives (806,920 samples, 1.05%)</title><rect x="45.5627%" y="165" width="1.0455%" height="15" fill="rgb(224,169,11)"/><text x="45.8127%" y="175.50"></text></g><g><title>adt_dtorck_constraint (601,206 samples, 0.78%)</title><rect x="45.8292%" y="149" width="0.7790%" height="15" fill="rgb(250,166,2)"/><text x="46.0792%" y="159.50"></text></g><g><title>adt_def (85,432 samples, 0.11%)</title><rect x="47.5911%" y="133" width="0.1107%" height="15" fill="rgb(242,216,29)"/><text x="47.8411%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (83,122 samples, 0.11%)</title><rect x="47.5941%" y="117" width="0.1077%" height="15" fill="rgb(230,116,27)"/><text x="47.8441%" y="127.50"></text></g><g><title>adt_sized_constraint (118,672 samples, 0.15%)</title><rect x="47.5736%" y="149" width="0.1538%" height="15" fill="rgb(228,99,48)"/><text x="47.8236%" y="159.50"></text></g><g><title>predicates_of (84,060 samples, 0.11%)</title><rect x="47.8414%" y="149" width="0.1089%" height="15" fill="rgb(253,11,6)"/><text x="48.0914%" y="159.50"></text></g><g><title>evaluate_obligation (1,519,115 samples, 1.97%)</title><rect x="46.6082%" y="165" width="1.9683%" height="15" fill="rgb(247,143,39)"/><text x="46.8582%" y="175.50">e..</text></g><g><title>trait_impls_of (476,614 samples, 0.62%)</title><rect x="47.9590%" y="149" width="0.6175%" height="15" fill="rgb(236,97,10)"/><text x="48.2090%" y="159.50"></text></g><g><title>implementations_of_trait (153,961 samples, 0.20%)</title><rect x="48.3770%" y="133" width="0.1995%" height="15" fill="rgb(233,208,19)"/><text x="48.6270%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (92,820 samples, 0.12%)</title><rect x="48.4562%" y="117" width="0.1203%" height="15" fill="rgb(216,164,2)"/><text x="48.7062%" y="127.50"></text></g><g><title>fn_sig (191,722 samples, 0.25%)</title><rect x="48.6122%" y="165" width="0.2484%" height="15" fill="rgb(220,129,5)"/><text x="48.8622%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (174,652 samples, 0.23%)</title><rect x="48.6344%" y="149" width="0.2263%" height="15" fill="rgb(242,17,10)"/><text x="48.8844%" y="159.50"></text></g><g><title>generics_of (91,902 samples, 0.12%)</title><rect x="48.8607%" y="165" width="0.1191%" height="15" fill="rgb(242,107,0)"/><text x="49.1107%" y="175.50"></text></g><g><title>item_attrs (169,654 samples, 0.22%)</title><rect x="49.1386%" y="165" width="0.2198%" height="15" fill="rgb(251,28,31)"/><text x="49.3886%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (162,164 samples, 0.21%)</title><rect x="49.1483%" y="149" width="0.2101%" height="15" fill="rgb(233,223,10)"/><text x="49.3983%" y="159.50"></text></g><g><title>evaluate_obligation (173,753 samples, 0.23%)</title><rect x="49.6685%" y="149" width="0.2251%" height="15" fill="rgb(215,21,27)"/><text x="49.9185%" y="159.50"></text></g><g><title>method_autoderef_steps (350,255 samples, 0.45%)</title><rect x="49.4490%" y="165" width="0.4538%" height="15" fill="rgb(232,23,21)"/><text x="49.6990%" y="175.50"></text></g><g><title>explicit_predicates_of (162,823 samples, 0.21%)</title><rect x="50.1949%" y="133" width="0.2110%" height="15" fill="rgb(244,5,23)"/><text x="50.4449%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (135,222 samples, 0.18%)</title><rect x="50.2307%" y="117" width="0.1752%" height="15" fill="rgb(226,81,46)"/><text x="50.4807%" y="127.50"></text></g><g><title>predicates_of (375,247 samples, 0.49%)</title><rect x="49.9800%" y="165" width="0.4862%" height="15" fill="rgb(247,70,30)"/><text x="50.2300%" y="175.50"></text></g><g><title>predicates_defined_on (284,095 samples, 0.37%)</title><rect x="50.0981%" y="149" width="0.3681%" height="15" fill="rgb(212,68,19)"/><text x="50.3481%" y="159.50"></text></g><g><title>type_of (84,481 samples, 0.11%)</title><rect x="50.4879%" y="165" width="0.1095%" height="15" fill="rgb(240,187,13)"/><text x="50.7379%" y="175.50"></text></g><g><title>associated_item (133,491 samples, 0.17%)</title><rect x="52.3679%" y="133" width="0.1730%" height="15" fill="rgb(223,113,26)"/><text x="52.6179%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (99,411 samples, 0.13%)</title><rect x="52.4120%" y="117" width="0.1288%" height="15" fill="rgb(206,192,2)"/><text x="52.6620%" y="127.50"></text></g><g><title>associated_items (413,474 samples, 0.54%)</title><rect x="52.3098%" y="149" width="0.5357%" height="15" fill="rgb(241,108,4)"/><text x="52.5598%" y="159.50"></text></g><g><title>associated_item_def_ids (235,132 samples, 0.30%)</title><rect x="52.5408%" y="133" width="0.3047%" height="15" fill="rgb(247,173,49)"/><text x="52.7908%" y="143.50"></text></g><g><title>adt_def (79,831 samples, 0.10%)</title><rect x="52.9323%" y="85" width="0.1034%" height="15" fill="rgb(224,114,35)"/><text x="53.1823%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (79,501 samples, 0.10%)</title><rect x="52.9328%" y="69" width="0.1030%" height="15" fill="rgb(245,159,27)"/><text x="53.1828%" y="79.50"></text></g><g><title>adt_dtorck_constraint (106,302 samples, 0.14%)</title><rect x="52.9246%" y="101" width="0.1377%" height="15" fill="rgb(245,172,44)"/><text x="53.1746%" y="111.50"></text></g><g><title>adt_dtorck_constraint (141,692 samples, 0.18%)</title><rect x="52.8902%" y="117" width="0.1836%" height="15" fill="rgb(236,23,11)"/><text x="53.1402%" y="127.50"></text></g><g><title>dropck_outlives (172,982 samples, 0.22%)</title><rect x="52.8543%" y="149" width="0.2241%" height="15" fill="rgb(205,117,38)"/><text x="53.1043%" y="159.50"></text></g><g><title>adt_dtorck_constraint (155,292 samples, 0.20%)</title><rect x="52.8772%" y="133" width="0.2012%" height="15" fill="rgb(237,72,25)"/><text x="53.1272%" y="143.50"></text></g><g><title>evaluate_obligation (139,051 samples, 0.18%)</title><rect x="53.0784%" y="149" width="0.1802%" height="15" fill="rgb(244,70,9)"/><text x="53.3284%" y="159.50"></text></g><g><title>is_copy_raw (194,583 samples, 0.25%)</title><rect x="53.3770%" y="149" width="0.2521%" height="15" fill="rgb(217,125,39)"/><text x="53.6270%" y="159.50"></text></g><g><title>evaluate_obligation (187,513 samples, 0.24%)</title><rect x="53.3862%" y="133" width="0.2430%" height="15" fill="rgb(235,36,10)"/><text x="53.6362%" y="143.50"></text></g><g><title>trait_impls_of (136,692 samples, 0.18%)</title><rect x="53.4520%" y="117" width="0.1771%" height="15" fill="rgb(251,123,47)"/><text x="53.7020%" y="127.50"></text></g><g><title>typeck (2,534,289 samples, 3.28%)</title><rect x="50.5974%" y="165" width="3.2836%" height="15" fill="rgb(221,13,13)"/><text x="50.8474%" y="175.50">typ..</text></g><g><title>item_bodies_checking (16,959,350 samples, 21.97%)</title><rect x="31.9887%" y="213" width="21.9739%" height="15" fill="rgb(238,131,9)"/><text x="32.2387%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,956,860 samples, 21.97%)</title><rect x="31.9919%" y="197" width="21.9706%" height="15" fill="rgb(211,50,8)"/><text x="32.2419%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (16,934,140 samples, 21.94%)</title><rect x="32.0213%" y="181" width="21.9412%" height="15" fill="rgb(245,182,24)"/><text x="32.2713%" y="191.50">typeck</text></g><g><title>impl_trait_ref (147,153 samples, 0.19%)</title><rect x="54.3234%" y="133" width="0.1907%" height="15" fill="rgb(242,14,37)"/><text x="54.5734%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (128,442 samples, 0.17%)</title><rect x="54.3476%" y="117" width="0.1664%" height="15" fill="rgb(246,228,12)"/><text x="54.5976%" y="127.50"></text></g><g><title>adt_destructor (317,634 samples, 0.41%)</title><rect x="54.1455%" y="181" width="0.4116%" height="15" fill="rgb(213,55,15)"/><text x="54.3955%" y="191.50"></text></g><g><title>coherent_trait (314,204 samples, 0.41%)</title><rect x="54.1500%" y="165" width="0.4071%" height="15" fill="rgb(209,9,3)"/><text x="54.4000%" y="175.50"></text></g><g><title>specialization_graph_of (312,374 samples, 0.40%)</title><rect x="54.1524%" y="149" width="0.4047%" height="15" fill="rgb(230,59,30)"/><text x="54.4024%" y="159.50"></text></g><g><title>typeck (148,602 samples, 0.19%)</title><rect x="54.5758%" y="181" width="0.1925%" height="15" fill="rgb(209,121,21)"/><text x="54.8258%" y="191.50"></text></g><g><title>item_types_checking (622,897 samples, 0.81%)</title><rect x="53.9625%" y="213" width="0.8071%" height="15" fill="rgb(220,109,13)"/><text x="54.2125%" y="223.50"></text></g><g><title>check_mod_item_types (620,167 samples, 0.80%)</title><rect x="53.9661%" y="197" width="0.8035%" height="15" fill="rgb(232,18,1)"/><text x="54.2161%" y="207.50"></text></g><g><title>fn_sig (335,582 samples, 0.43%)</title><rect x="54.9230%" y="181" width="0.4348%" height="15" fill="rgb(215,41,42)"/><text x="55.1730%" y="191.50"></text></g><g><title>type_of (92,210 samples, 0.12%)</title><rect x="55.2383%" y="165" width="0.1195%" height="15" fill="rgb(224,123,36)"/><text x="55.4883%" y="175.50"></text></g><g><title>named_region_map (195,772 samples, 0.25%)</title><rect x="55.4409%" y="165" width="0.2537%" height="15" fill="rgb(240,125,3)"/><text x="55.6909%" y="175.50"></text></g><g><title>resolve_lifetimes (189,492 samples, 0.25%)</title><rect x="55.4491%" y="149" width="0.2455%" height="15" fill="rgb(205,98,50)"/><text x="55.6991%" y="159.50"></text></g><g><title>lint_levels (89,511 samples, 0.12%)</title><rect x="55.5786%" y="133" width="0.1160%" height="15" fill="rgb(205,185,37)"/><text x="55.8286%" y="143.50"></text></g><g><title>generics_of (267,924 samples, 0.35%)</title><rect x="55.3578%" y="181" width="0.3471%" height="15" fill="rgb(238,207,15)"/><text x="55.6078%" y="191.50"></text></g><g><title>explicit_predicates_of (222,342 samples, 0.29%)</title><rect x="55.7637%" y="149" width="0.2881%" height="15" fill="rgb(213,199,42)"/><text x="56.0137%" y="159.50"></text></g><g><title>predicates_of (353,144 samples, 0.46%)</title><rect x="55.7165%" y="181" width="0.4576%" height="15" fill="rgb(235,201,11)"/><text x="55.9665%" y="191.50"></text></g><g><title>predicates_defined_on (339,733 samples, 0.44%)</title><rect x="55.7338%" y="165" width="0.4402%" height="15" fill="rgb(207,46,11)"/><text x="55.9838%" y="175.50"></text></g><g><title>inferred_outlives_of (94,321 samples, 0.12%)</title><rect x="56.0518%" y="149" width="0.1222%" height="15" fill="rgb(241,35,35)"/><text x="56.3018%" y="159.50"></text></g><g><title>inferred_outlives_crate (82,031 samples, 0.11%)</title><rect x="56.0677%" y="133" width="0.1063%" height="15" fill="rgb(243,32,47)"/><text x="56.3177%" y="143.50"></text></g><g><title>type_collecting (1,112,553 samples, 1.44%)</title><rect x="54.7731%" y="213" width="1.4415%" height="15" fill="rgb(247,202,23)"/><text x="55.0231%" y="223.50"></text></g><g><title>collect_mod_item_types (1,101,413 samples, 1.43%)</title><rect x="54.7876%" y="197" width="1.4271%" height="15" fill="rgb(219,102,11)"/><text x="55.0376%" y="207.50"></text></g><g><title>evaluate_obligation (82,421 samples, 0.11%)</title><rect x="56.4907%" y="181" width="0.1068%" height="15" fill="rgb(243,110,44)"/><text x="56.7407%" y="191.50"></text></g><g><title>evaluate_obligation (129,442 samples, 0.17%)</title><rect x="56.7966%" y="165" width="0.1677%" height="15" fill="rgb(222,74,54)"/><text x="57.0466%" y="175.50"></text></g><g><title>layout_of (93,521 samples, 0.12%)</title><rect x="57.0061%" y="165" width="0.1212%" height="15" fill="rgb(216,99,12)"/><text x="57.2561%" y="175.50"></text></g><g><title>object_safety_violations (450,345 samples, 0.58%)</title><rect x="56.6361%" y="181" width="0.5835%" height="15" fill="rgb(226,22,26)"/><text x="56.8861%" y="191.50"></text></g><g><title>check_impl_item_well_formed (781,269 samples, 1.01%)</title><rect x="56.2926%" y="197" width="1.0123%" height="15" fill="rgb(217,163,10)"/><text x="56.5426%" y="207.50"></text></g><g><title>adt_def (97,240 samples, 0.13%)</title><rect x="58.2154%" y="133" width="0.1260%" height="15" fill="rgb(213,25,53)"/><text x="58.4654%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (92,930 samples, 0.12%)</title><rect x="58.2210%" y="117" width="0.1204%" height="15" fill="rgb(252,105,26)"/><text x="58.4710%" y="127.50"></text></g><g><title>adt_sized_constraint (119,691 samples, 0.16%)</title><rect x="58.3414%" y="133" width="0.1551%" height="15" fill="rgb(220,39,43)"/><text x="58.5914%" y="143.50"></text></g><g><title>adt_sized_constraint (235,013 samples, 0.30%)</title><rect x="58.2077%" y="149" width="0.3045%" height="15" fill="rgb(229,68,48)"/><text x="58.4577%" y="159.50"></text></g><g><title>adt_sized_constraint (305,424 samples, 0.40%)</title><rect x="58.1208%" y="165" width="0.3957%" height="15" fill="rgb(252,8,32)"/><text x="58.3708%" y="175.50"></text></g><g><title>evaluate_obligation (431,365 samples, 0.56%)</title><rect x="57.9598%" y="181" width="0.5589%" height="15" fill="rgb(223,20,43)"/><text x="58.2098%" y="191.50"></text></g><g><title>implied_outlives_bounds (87,832 samples, 0.11%)</title><rect x="58.5200%" y="181" width="0.1138%" height="15" fill="rgb(229,81,49)"/><text x="58.7700%" y="191.50"></text></g><g><title>param_env (140,081 samples, 0.18%)</title><rect x="58.6338%" y="181" width="0.1815%" height="15" fill="rgb(236,28,36)"/><text x="58.8838%" y="191.50"></text></g><g><title>region_scope_tree (105,551 samples, 0.14%)</title><rect x="58.8906%" y="181" width="0.1368%" height="15" fill="rgb(249,185,26)"/><text x="59.1406%" y="191.50"></text></g><g><title>analysis (44,976,494 samples, 58.28%)</title><rect x="0.8119%" y="245" width="58.2751%" height="15" fill="rgb(249,174,33)"/><text x="1.0619%" y="255.50">analysis</text></g><g><title>type_check_crate (26,341,046 samples, 34.13%)</title><rect x="24.9574%" y="229" width="34.1295%" height="15" fill="rgb(233,201,37)"/><text x="25.2074%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,214,705 samples, 2.87%)</title><rect x="56.2174%" y="213" width="2.8695%" height="15" fill="rgb(221,78,26)"/><text x="56.4674%" y="223.50">wf..</text></g><g><title>check_item_well_formed (1,375,366 samples, 1.78%)</title><rect x="57.3049%" y="197" width="1.7820%" height="15" fill="rgb(250,127,30)"/><text x="57.5549%" y="207.50">c..</text></g><g><title>codegen_crate (552,666 samples, 0.72%)</title><rect x="59.1021%" y="245" width="0.7161%" height="15" fill="rgb(230,49,44)"/><text x="59.3521%" y="255.50"></text></g><g><title>AST_validation (186,812 samples, 0.24%)</title><rect x="60.0897%" y="229" width="0.2420%" height="15" fill="rgb(229,67,23)"/><text x="60.3397%" y="239.50"></text></g><g><title>crate_injection (94,101 samples, 0.12%)</title><rect x="60.4109%" y="229" width="0.1219%" height="15" fill="rgb(249,83,47)"/><text x="60.6609%" y="239.50"></text></g><g><title>metadata_load_macro (194,503 samples, 0.25%)</title><rect x="79.9546%" y="197" width="0.2520%" height="15" fill="rgb(215,43,3)"/><text x="80.2046%" y="207.50"></text></g><g><title>metadata_register_crate (3,033,084 samples, 3.93%)</title><rect x="80.2066%" y="197" width="3.9299%" height="15" fill="rgb(238,154,13)"/><text x="80.4566%" y="207.50">meta..</text></g><g><title>metadata_register_crate (1,032,870 samples, 1.34%)</title><rect x="82.7982%" y="181" width="1.3383%" height="15" fill="rgb(219,56,2)"/><text x="83.0482%" y="191.50"></text></g><g><title>metadata_register_crate (79,702 samples, 0.10%)</title><rect x="84.0332%" y="165" width="0.1033%" height="15" fill="rgb(233,0,4)"/><text x="84.2832%" y="175.50"></text></g><g><title>macro_expand_crate (18,276,735 samples, 23.68%)</title><rect x="60.5329%" y="229" width="23.6808%" height="15" fill="rgb(235,30,7)"/><text x="60.7829%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (18,249,194 samples, 23.65%)</title><rect x="60.5686%" y="213" width="23.6451%" height="15" fill="rgb(250,79,13)"/><text x="60.8186%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (170,272 samples, 0.22%)</title><rect x="84.2205%" y="229" width="0.2206%" height="15" fill="rgb(211,146,34)"/><text x="84.4705%" y="239.50"></text></g><g><title>finalize_imports (126,311 samples, 0.16%)</title><rect x="84.4543%" y="213" width="0.1637%" height="15" fill="rgb(228,22,38)"/><text x="84.7043%" y="223.50"></text></g><g><title>late_resolve_crate (1,813,180 samples, 2.35%)</title><rect x="84.6835%" y="213" width="2.3493%" height="15" fill="rgb(235,168,5)"/><text x="84.9335%" y="223.50">l..</text></g><g><title>configure_and_expand (21,106,936 samples, 27.35%)</title><rect x="59.8182%" y="245" width="27.3478%" height="15" fill="rgb(221,155,16)"/><text x="60.0682%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,103,013 samples, 2.72%)</title><rect x="84.4412%" y="229" width="2.7248%" height="15" fill="rgb(215,215,53)"/><text x="84.6912%" y="239.50">re..</text></g><g><title>drop_ast (107,071 samples, 0.14%)</title><rect x="87.1660%" y="245" width="0.1387%" height="15" fill="rgb(223,4,10)"/><text x="87.4160%" y="255.50"></text></g><g><title>early_lint_checks (266,583 samples, 0.35%)</title><rect x="87.3258%" y="245" width="0.3454%" height="15" fill="rgb(234,103,6)"/><text x="87.5758%" y="255.50"></text></g><g><title>free_global_ctxt (2,938,183 samples, 3.81%)</title><rect x="87.6712%" y="245" width="3.8069%" height="15" fill="rgb(227,97,0)"/><text x="87.9212%" y="255.50">free..</text></g><g><title>generate_crate_metadata (1,081,912 samples, 1.40%)</title><rect x="91.4782%" y="245" width="1.4018%" height="15" fill="rgb(234,150,53)"/><text x="91.7282%" y="255.50"></text></g><g><title>hir_lowering (2,219,365 samples, 2.88%)</title><rect x="92.8800%" y="245" width="2.8756%" height="15" fill="rgb(228,201,54)"/><text x="93.1300%" y="255.50">hi..</text></g><g><title>parse_crate (1,871,831 samples, 2.43%)</title><rect x="95.8412%" y="245" width="2.4253%" height="15" fill="rgb(222,22,37)"/><text x="96.0912%" y="255.50">pa..</text></g><g><title>prepare_outputs (330,324 samples, 0.43%)</title><rect x="98.2786%" y="245" width="0.4280%" height="15" fill="rgb(237,53,32)"/><text x="98.5286%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (538,026 samples, 0.70%)</title><rect x="98.7066%" y="245" width="0.6971%" height="15" fill="rgb(233,25,53)"/><text x="98.9566%" y="255.50"></text></g><g><title>setup_global_ctxt (129,221 samples, 0.17%)</title><rect x="99.4174%" y="245" width="0.1674%" height="15" fill="rgb(210,40,34)"/><text x="99.6674%" y="255.50"></text></g><g><title>all (77,179,615 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(241,220,44)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (77,179,615 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,28,35)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (320,434 samples, 0.42%)</title><rect x="99.5848%" y="245" width="0.4152%" height="15" fill="rgb(210,56,17)"/><text x="99.8348%" y="255.50"></text></g></svg></svg>