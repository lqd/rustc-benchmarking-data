<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (207,522 samples, 0.13%)</title><rect x="9.9625%" y="101" width="0.1278%" height="15" fill="rgb(227,0,7)"/><text x="10.2125%" y="111.50"></text></g><g><title>item_attrs (223,803 samples, 0.14%)</title><rect x="10.4837%" y="69" width="0.1378%" height="15" fill="rgb(217,0,24)"/><text x="10.7337%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (215,813 samples, 0.13%)</title><rect x="10.4886%" y="53" width="0.1329%" height="15" fill="rgb(221,193,54)"/><text x="10.7386%" y="63.50"></text></g><g><title>codegen_fn_attrs (328,194 samples, 0.20%)</title><rect x="10.4322%" y="85" width="0.2021%" height="15" fill="rgb(248,212,6)"/><text x="10.6822%" y="95.50"></text></g><g><title>adt_drop_tys (324,442 samples, 0.20%)</title><rect x="12.9468%" y="53" width="0.1998%" height="15" fill="rgb(208,68,35)"/><text x="13.1968%" y="63.50"></text></g><g><title>needs_drop_raw (1,346,574 samples, 0.83%)</title><rect x="12.8756%" y="69" width="0.8292%" height="15" fill="rgb(232,128,0)"/><text x="13.1256%" y="79.50"></text></g><g><title>is_copy_raw (906,480 samples, 0.56%)</title><rect x="13.1466%" y="53" width="0.5582%" height="15" fill="rgb(207,160,47)"/><text x="13.3966%" y="63.50"></text></g><g><title>evaluate_obligation (761,876 samples, 0.47%)</title><rect x="13.2357%" y="37" width="0.4691%" height="15" fill="rgb(228,23,34)"/><text x="13.4857%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (257,372 samples, 0.16%)</title><rect x="13.8681%" y="53" width="0.1585%" height="15" fill="rgb(218,30,26)"/><text x="14.1181%" y="63.50"></text></g><g><title>specialization_graph_of (230,742 samples, 0.14%)</title><rect x="14.0670%" y="53" width="0.1421%" height="15" fill="rgb(220,122,19)"/><text x="14.3170%" y="63.50"></text></g><g><title>resolve_instance (853,087 samples, 0.53%)</title><rect x="13.7233%" y="69" width="0.5253%" height="15" fill="rgb(250,228,42)"/><text x="13.9733%" y="79.50"></text></g><g><title>thir_body (1,398,423 samples, 0.86%)</title><rect x="14.2658%" y="69" width="0.8611%" height="15" fill="rgb(240,193,28)"/><text x="14.5158%" y="79.50"></text></g><g><title>mir_const (9,464,031 samples, 5.83%)</title><rect x="9.3100%" y="117" width="5.8277%" height="15" fill="rgb(216,20,37)"/><text x="9.5600%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (8,197,015 samples, 5.05%)</title><rect x="10.0902%" y="101" width="5.0475%" height="15" fill="rgb(206,188,39)"/><text x="10.3402%" y="111.50">unsafe..</text></g><g><title>mir_built (7,313,474 samples, 4.50%)</title><rect x="10.6343%" y="85" width="4.5035%" height="15" fill="rgb(217,207,13)"/><text x="10.8843%" y="95.50">mir_b..</text></g><g><title>mir_promoted (10,709,366 samples, 6.59%)</title><rect x="8.6857%" y="133" width="6.5946%" height="15" fill="rgb(231,73,38)"/><text x="8.9357%" y="143.50">mir_promo..</text></g><g><title>mir_const_qualif (231,353 samples, 0.14%)</title><rect x="15.1378%" y="117" width="0.1425%" height="15" fill="rgb(225,20,46)"/><text x="15.3878%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (228,595 samples, 0.14%)</title><rect x="15.2807%" y="133" width="0.1408%" height="15" fill="rgb(210,31,41)"/><text x="15.5307%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (711,611 samples, 0.44%)</title><rect x="15.4214%" y="133" width="0.4382%" height="15" fill="rgb(221,200,47)"/><text x="15.6714%" y="143.50"></text></g><g><title>normalize_projection_ty (502,898 samples, 0.31%)</title><rect x="15.5499%" y="117" width="0.3097%" height="15" fill="rgb(226,26,5)"/><text x="15.7999%" y="127.50"></text></g><g><title>type_op_normalize_predicate (218,172 samples, 0.13%)</title><rect x="15.8596%" y="133" width="0.1343%" height="15" fill="rgb(249,33,26)"/><text x="16.1096%" y="143.50"></text></g><g><title>normalize_projection_ty (162,920 samples, 0.10%)</title><rect x="15.8936%" y="117" width="0.1003%" height="15" fill="rgb(235,183,28)"/><text x="16.1436%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,559,447 samples, 0.96%)</title><rect x="15.9940%" y="133" width="0.9603%" height="15" fill="rgb(221,5,38)"/><text x="16.2440%" y="143.50"></text></g><g><title>MIR_borrow_checking (26,058,100 samples, 16.05%)</title><rect x="0.9131%" y="165" width="16.0460%" height="15" fill="rgb(247,18,42)"/><text x="1.1631%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,917,947 samples, 15.96%)</title><rect x="0.9994%" y="149" width="15.9597%" height="15" fill="rgb(241,131,45)"/><text x="1.2494%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (176,142 samples, 0.11%)</title><rect x="16.9591%" y="165" width="0.1085%" height="15" fill="rgb(249,31,29)"/><text x="17.2091%" y="175.50"></text></g><g><title>hir_module_items (333,054 samples, 0.21%)</title><rect x="17.0675%" y="165" width="0.2051%" height="15" fill="rgb(225,111,53)"/><text x="17.3175%" y="175.50"></text></g><g><title>codegen_fn_attrs (203,892 samples, 0.13%)</title><rect x="17.5849%" y="101" width="0.1256%" height="15" fill="rgb(238,160,17)"/><text x="17.8349%" y="111.50"></text></g><g><title>codegen_fn_attrs (367,164 samples, 0.23%)</title><rect x="17.4890%" y="133" width="0.2261%" height="15" fill="rgb(214,148,48)"/><text x="17.7390%" y="143.50"></text></g><g><title>should_inherit_track_caller (315,114 samples, 0.19%)</title><rect x="17.5211%" y="117" width="0.1940%" height="15" fill="rgb(232,36,49)"/><text x="17.7711%" y="127.50"></text></g><g><title>check_mod_attrs (685,799 samples, 0.42%)</title><rect x="17.2929%" y="149" width="0.4223%" height="15" fill="rgb(209,103,24)"/><text x="17.5429%" y="159.50"></text></g><g><title>lookup_deprecation_entry (262,493 samples, 0.16%)</title><rect x="17.9903%" y="133" width="0.1616%" height="15" fill="rgb(229,88,8)"/><text x="18.2403%" y="143.50"></text></g><g><title>stability_index (184,812 samples, 0.11%)</title><rect x="18.0381%" y="117" width="0.1138%" height="15" fill="rgb(213,181,19)"/><text x="18.2881%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (578,226 samples, 0.36%)</title><rect x="17.8641%" y="149" width="0.3561%" height="15" fill="rgb(254,191,54)"/><text x="18.1141%" y="159.50"></text></g><g><title>misc_checking_1 (1,639,708 samples, 1.01%)</title><rect x="17.2729%" y="165" width="1.0097%" height="15" fill="rgb(241,83,37)"/><text x="17.5229%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (508,216 samples, 0.31%)</title><rect x="18.2836%" y="149" width="0.3129%" height="15" fill="rgb(233,36,39)"/><text x="18.5336%" y="159.50"></text></g><g><title>check_mod_liveness (394,396 samples, 0.24%)</title><rect x="18.3537%" y="133" width="0.2429%" height="15" fill="rgb(226,3,54)"/><text x="18.6037%" y="143.50"></text></g><g><title>misc_checking_2 (1,118,413 samples, 0.69%)</title><rect x="18.2826%" y="165" width="0.6887%" height="15" fill="rgb(245,192,40)"/><text x="18.5326%" y="175.50"></text></g><g><title>match_checking (608,577 samples, 0.37%)</title><rect x="18.5965%" y="149" width="0.3747%" height="15" fill="rgb(238,167,29)"/><text x="18.8465%" y="159.50"></text></g><g><title>check_match (574,837 samples, 0.35%)</title><rect x="18.6173%" y="133" width="0.3540%" height="15" fill="rgb(232,182,51)"/><text x="18.8673%" y="143.50"></text></g><g><title>check_private_in_public (239,533 samples, 0.15%)</title><rect x="18.9769%" y="149" width="0.1475%" height="15" fill="rgb(231,60,39)"/><text x="19.2269%" y="159.50"></text></g><g><title>death_checking (641,347 samples, 0.39%)</title><rect x="19.1244%" y="149" width="0.3949%" height="15" fill="rgb(208,69,12)"/><text x="19.3744%" y="159.50"></text></g><g><title>item_attrs (220,443 samples, 0.14%)</title><rect x="19.3836%" y="133" width="0.1357%" height="15" fill="rgb(235,93,37)"/><text x="19.6336%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (218,293 samples, 0.13%)</title><rect x="19.3849%" y="117" width="0.1344%" height="15" fill="rgb(213,116,39)"/><text x="19.6349%" y="127.50"></text></g><g><title>eval_to_const_value_raw (224,192 samples, 0.14%)</title><rect x="20.0260%" y="117" width="0.1381%" height="15" fill="rgb(222,207,29)"/><text x="20.2760%" y="127.50"></text></g><g><title>eval_to_const_value_raw (222,542 samples, 0.14%)</title><rect x="20.0271%" y="101" width="0.1370%" height="15" fill="rgb(206,96,30)"/><text x="20.2771%" y="111.50"></text></g><g><title>eval_to_allocation_raw (217,512 samples, 0.13%)</title><rect x="20.0302%" y="85" width="0.1339%" height="15" fill="rgb(218,138,4)"/><text x="20.2802%" y="95.50"></text></g><g><title>param_env (285,793 samples, 0.18%)</title><rect x="20.1641%" y="117" width="0.1760%" height="15" fill="rgb(250,191,14)"/><text x="20.4141%" y="127.50"></text></g><g><title>crate_lints (2,427,357 samples, 1.49%)</title><rect x="19.5205%" y="133" width="1.4947%" height="15" fill="rgb(239,60,40)"/><text x="19.7705%" y="143.50"></text></g><g><title>type_of (1,087,819 samples, 0.67%)</title><rect x="20.3454%" y="117" width="0.6699%" height="15" fill="rgb(206,27,48)"/><text x="20.5954%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (855,477 samples, 0.53%)</title><rect x="20.4885%" y="101" width="0.5268%" height="15" fill="rgb(225,35,8)"/><text x="20.7385%" y="111.50"></text></g><g><title>lint_checking (2,916,643 samples, 1.80%)</title><rect x="19.5193%" y="149" width="1.7960%" height="15" fill="rgb(250,213,24)"/><text x="19.7693%" y="159.50">l..</text></g><g><title>module_lints (487,326 samples, 0.30%)</title><rect x="21.0152%" y="133" width="0.3001%" height="15" fill="rgb(247,123,22)"/><text x="21.2652%" y="143.50"></text></g><g><title>lint_mod (481,185 samples, 0.30%)</title><rect x="21.0190%" y="117" width="0.2963%" height="15" fill="rgb(231,138,38)"/><text x="21.2690%" y="127.50"></text></g><g><title>privacy_access_levels (296,493 samples, 0.18%)</title><rect x="21.3153%" y="149" width="0.1826%" height="15" fill="rgb(231,145,46)"/><text x="21.5653%" y="159.50"></text></g><g><title>privacy_checking_modules (865,910 samples, 0.53%)</title><rect x="21.4979%" y="149" width="0.5332%" height="15" fill="rgb(251,118,11)"/><text x="21.7479%" y="159.50"></text></g><g><title>check_mod_privacy (860,990 samples, 0.53%)</title><rect x="21.5009%" y="133" width="0.5302%" height="15" fill="rgb(217,147,25)"/><text x="21.7509%" y="143.50"></text></g><g><title>misc_checking_3 (4,984,956 samples, 3.07%)</title><rect x="18.9713%" y="165" width="3.0696%" height="15" fill="rgb(247,81,37)"/><text x="19.2213%" y="175.50">mis..</text></g><g><title>impl_trait_ref (224,633 samples, 0.14%)</title><rect x="22.2151%" y="69" width="0.1383%" height="15" fill="rgb(209,12,38)"/><text x="22.4651%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (205,723 samples, 0.13%)</title><rect x="22.2267%" y="53" width="0.1267%" height="15" fill="rgb(227,1,9)"/><text x="22.4767%" y="63.50"></text></g><g><title>adt_destructor (384,875 samples, 0.24%)</title><rect x="22.1335%" y="117" width="0.2370%" height="15" fill="rgb(248,47,43)"/><text x="22.3835%" y="127.50"></text></g><g><title>coherent_trait (381,155 samples, 0.23%)</title><rect x="22.1358%" y="101" width="0.2347%" height="15" fill="rgb(221,10,30)"/><text x="22.3858%" y="111.50"></text></g><g><title>specialization_graph_of (374,304 samples, 0.23%)</title><rect x="22.1400%" y="85" width="0.2305%" height="15" fill="rgb(210,229,1)"/><text x="22.3900%" y="95.50"></text></g><g><title>impl_parent (2,821,361 samples, 1.74%)</title><rect x="25.4669%" y="101" width="1.7373%" height="15" fill="rgb(222,148,37)"/><text x="25.7169%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,624,987 samples, 1.00%)</title><rect x="26.2036%" y="85" width="1.0006%" height="15" fill="rgb(234,67,33)"/><text x="26.4536%" y="95.50"></text></g><g><title>impl_trait_ref (5,953,533 samples, 3.67%)</title><rect x="27.2043%" y="101" width="3.6661%" height="15" fill="rgb(247,98,35)"/><text x="27.4543%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,512,036 samples, 2.78%)</title><rect x="28.0919%" y="85" width="2.7784%" height="15" fill="rgb(247,138,52)"/><text x="28.3419%" y="95.50">me..</text></g><g><title>trait_impls_of (972,029 samples, 0.60%)</title><rect x="30.8867%" y="101" width="0.5986%" height="15" fill="rgb(213,79,30)"/><text x="31.1367%" y="111.50"></text></g><g><title>implementations_of_trait (273,781 samples, 0.17%)</title><rect x="31.3166%" y="85" width="0.1686%" height="15" fill="rgb(246,177,23)"/><text x="31.5666%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (219,351 samples, 0.14%)</title><rect x="31.3502%" y="69" width="0.1351%" height="15" fill="rgb(230,62,27)"/><text x="31.6002%" y="79.50"></text></g><g><title>coherent_trait (15,232,710 samples, 9.38%)</title><rect x="22.1057%" y="133" width="9.3800%" height="15" fill="rgb(216,154,8)"/><text x="22.3557%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (14,648,163 samples, 9.02%)</title><rect x="22.4656%" y="117" width="9.0200%" height="15" fill="rgb(244,35,45)"/><text x="22.7156%" y="127.50">specializatio..</text></g><g><title>coherence_checking (15,323,441 samples, 9.44%)</title><rect x="22.0927%" y="149" width="9.4358%" height="15" fill="rgb(251,115,12)"/><text x="22.3427%" y="159.50">coherence_che..</text></g><g><title>associated_item (894,781 samples, 0.55%)</title><rect x="50.0188%" y="85" width="0.5510%" height="15" fill="rgb(240,54,50)"/><text x="50.2688%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (784,680 samples, 0.48%)</title><rect x="50.0866%" y="69" width="0.4832%" height="15" fill="rgb(233,84,52)"/><text x="50.3366%" y="79.50"></text></g><g><title>associated_items (1,155,376 samples, 0.71%)</title><rect x="49.8880%" y="101" width="0.7115%" height="15" fill="rgb(207,117,47)"/><text x="50.1380%" y="111.50"></text></g><g><title>adt_dtorck_constraint (199,612 samples, 0.12%)</title><rect x="50.8745%" y="69" width="0.1229%" height="15" fill="rgb(249,43,39)"/><text x="51.1245%" y="79.50"></text></g><g><title>dropck_outlives (609,706 samples, 0.38%)</title><rect x="50.6495%" y="101" width="0.3754%" height="15" fill="rgb(209,38,44)"/><text x="50.8995%" y="111.50"></text></g><g><title>adt_dtorck_constraint (372,164 samples, 0.23%)</title><rect x="50.7958%" y="85" width="0.2292%" height="15" fill="rgb(236,212,23)"/><text x="51.0458%" y="95.50"></text></g><g><title>generics_of (1,057,893 samples, 0.65%)</title><rect x="54.3216%" y="85" width="0.6514%" height="15" fill="rgb(242,79,21)"/><text x="54.5716%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (849,273 samples, 0.52%)</title><rect x="54.4500%" y="69" width="0.5230%" height="15" fill="rgb(211,96,35)"/><text x="54.7000%" y="79.50"></text></g><g><title>impl_trait_ref (1,158,445 samples, 0.71%)</title><rect x="55.0866%" y="85" width="0.7133%" height="15" fill="rgb(253,215,40)"/><text x="55.3366%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (779,833 samples, 0.48%)</title><rect x="55.3198%" y="69" width="0.4802%" height="15" fill="rgb(211,81,21)"/><text x="55.5698%" y="79.50"></text></g><g><title>predicates_of (653,781 samples, 0.40%)</title><rect x="55.8310%" y="85" width="0.4026%" height="15" fill="rgb(208,190,38)"/><text x="56.0810%" y="95.50"></text></g><g><title>predicates_defined_on (377,714 samples, 0.23%)</title><rect x="56.0010%" y="69" width="0.2326%" height="15" fill="rgb(235,213,38)"/><text x="56.2510%" y="79.50"></text></g><g><title>def_span (374,892 samples, 0.23%)</title><rect x="56.9133%" y="53" width="0.2309%" height="15" fill="rgb(237,122,38)"/><text x="57.1633%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (331,702 samples, 0.20%)</title><rect x="56.9399%" y="37" width="0.2043%" height="15" fill="rgb(244,218,35)"/><text x="57.1899%" y="47.50"></text></g><g><title>specializes (1,479,836 samples, 0.91%)</title><rect x="56.2336%" y="85" width="0.9112%" height="15" fill="rgb(240,68,47)"/><text x="56.4836%" y="95.50"></text></g><g><title>param_env (912,379 samples, 0.56%)</title><rect x="56.5831%" y="69" width="0.5618%" height="15" fill="rgb(210,16,53)"/><text x="56.8331%" y="79.50"></text></g><g><title>trait_impls_of (728,557 samples, 0.45%)</title><rect x="57.1601%" y="85" width="0.4486%" height="15" fill="rgb(235,124,12)"/><text x="57.4101%" y="95.50"></text></g><g><title>implementations_of_trait (305,563 samples, 0.19%)</title><rect x="57.4205%" y="69" width="0.1882%" height="15" fill="rgb(224,169,11)"/><text x="57.6705%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (206,193 samples, 0.13%)</title><rect x="57.4817%" y="53" width="0.1270%" height="15" fill="rgb(250,166,2)"/><text x="57.7317%" y="63.50"></text></g><g><title>evaluate_obligation (10,714,733 samples, 6.60%)</title><rect x="51.0250%" y="101" width="6.5979%" height="15" fill="rgb(242,216,29)"/><text x="51.2750%" y="111.50">evaluate_..</text></g><g><title>fn_sig (194,281 samples, 0.12%)</title><rect x="57.6514%" y="101" width="0.1196%" height="15" fill="rgb(230,116,27)"/><text x="57.9014%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (173,111 samples, 0.11%)</title><rect x="57.6644%" y="85" width="0.1066%" height="15" fill="rgb(228,99,48)"/><text x="57.9144%" y="95.50"></text></g><g><title>generics_of (728,034 samples, 0.45%)</title><rect x="57.7710%" y="101" width="0.4483%" height="15" fill="rgb(253,11,6)"/><text x="58.0210%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (561,533 samples, 0.35%)</title><rect x="57.8736%" y="85" width="0.3458%" height="15" fill="rgb(247,143,39)"/><text x="58.1236%" y="95.50"></text></g><g><title>impl_item_implementor_ids (222,092 samples, 0.14%)</title><rect x="58.2194%" y="101" width="0.1368%" height="15" fill="rgb(236,97,10)"/><text x="58.4694%" y="111.50"></text></g><g><title>associated_items (191,642 samples, 0.12%)</title><rect x="58.2381%" y="85" width="0.1180%" height="15" fill="rgb(233,208,19)"/><text x="58.4881%" y="95.50"></text></g><g><title>item_attrs (183,323 samples, 0.11%)</title><rect x="58.4327%" y="101" width="0.1129%" height="15" fill="rgb(216,164,2)"/><text x="58.6827%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (175,753 samples, 0.11%)</title><rect x="58.4373%" y="85" width="0.1082%" height="15" fill="rgb(220,129,5)"/><text x="58.6873%" y="95.50"></text></g><g><title>method_autoderef_steps (450,741 samples, 0.28%)</title><rect x="58.6066%" y="101" width="0.2776%" height="15" fill="rgb(242,17,10)"/><text x="58.8566%" y="111.50"></text></g><g><title>evaluate_obligation (224,750 samples, 0.14%)</title><rect x="58.7457%" y="85" width="0.1384%" height="15" fill="rgb(242,107,0)"/><text x="58.9957%" y="95.50"></text></g><g><title>predicates_of (523,866 samples, 0.32%)</title><rect x="59.0367%" y="101" width="0.3226%" height="15" fill="rgb(251,28,31)"/><text x="59.2867%" y="111.50"></text></g><g><title>predicates_defined_on (352,695 samples, 0.22%)</title><rect x="59.1421%" y="85" width="0.2172%" height="15" fill="rgb(233,223,10)"/><text x="59.3921%" y="95.50"></text></g><g><title>item_bodies_checking (45,746,779 samples, 28.17%)</title><rect x="31.5504%" y="149" width="28.1698%" height="15" fill="rgb(215,21,27)"/><text x="31.8004%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (45,743,929 samples, 28.17%)</title><rect x="31.5521%" y="133" width="28.1681%" height="15" fill="rgb(232,23,21)"/><text x="31.8021%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (45,644,067 samples, 28.11%)</title><rect x="31.6136%" y="117" width="28.1066%" height="15" fill="rgb(244,5,23)"/><text x="31.8636%" y="127.50">typeck</text></g><g><title>visibility (249,562 samples, 0.15%)</title><rect x="59.5665%" y="101" width="0.1537%" height="15" fill="rgb(226,81,46)"/><text x="59.8165%" y="111.50"></text></g><g><title>item_types_checking (1,341,565 samples, 0.83%)</title><rect x="59.7202%" y="149" width="0.8261%" height="15" fill="rgb(247,70,30)"/><text x="59.9702%" y="159.50"></text></g><g><title>check_mod_item_types (1,335,445 samples, 0.82%)</title><rect x="59.7240%" y="133" width="0.8223%" height="15" fill="rgb(212,68,19)"/><text x="59.9740%" y="143.50"></text></g><g><title>typeck (209,923 samples, 0.13%)</title><rect x="60.4170%" y="117" width="0.1293%" height="15" fill="rgb(240,187,13)"/><text x="60.6670%" y="127.50"></text></g><g><title>fn_sig (342,613 samples, 0.21%)</title><rect x="60.7531%" y="117" width="0.2110%" height="15" fill="rgb(223,113,26)"/><text x="61.0031%" y="127.50"></text></g><g><title>named_region_map (623,341 samples, 0.38%)</title><rect x="61.0358%" y="101" width="0.3838%" height="15" fill="rgb(206,192,2)"/><text x="61.2858%" y="111.50"></text></g><g><title>resolve_lifetimes (585,621 samples, 0.36%)</title><rect x="61.0591%" y="85" width="0.3606%" height="15" fill="rgb(241,108,4)"/><text x="61.3091%" y="95.50"></text></g><g><title>lint_levels (223,203 samples, 0.14%)</title><rect x="61.2822%" y="69" width="0.1374%" height="15" fill="rgb(247,173,49)"/><text x="61.5322%" y="79.50"></text></g><g><title>generics_of (758,271 samples, 0.47%)</title><rect x="60.9641%" y="117" width="0.4669%" height="15" fill="rgb(224,114,35)"/><text x="61.2141%" y="127.50"></text></g><g><title>explicit_predicates_of (207,752 samples, 0.13%)</title><rect x="61.5942%" y="85" width="0.1279%" height="15" fill="rgb(245,159,27)"/><text x="61.8442%" y="95.50"></text></g><g><title>predicates_of (426,804 samples, 0.26%)</title><rect x="61.5031%" y="117" width="0.2628%" height="15" fill="rgb(245,172,44)"/><text x="61.7531%" y="127.50"></text></g><g><title>predicates_defined_on (372,943 samples, 0.23%)</title><rect x="61.5363%" y="101" width="0.2296%" height="15" fill="rgb(236,23,11)"/><text x="61.7863%" y="111.50"></text></g><g><title>type_collecting (2,114,353 samples, 1.30%)</title><rect x="60.5484%" y="149" width="1.3020%" height="15" fill="rgb(205,117,38)"/><text x="60.7984%" y="159.50"></text></g><g><title>collect_mod_item_types (2,100,133 samples, 1.29%)</title><rect x="60.5572%" y="133" width="1.2932%" height="15" fill="rgb(237,72,25)"/><text x="60.8072%" y="143.50"></text></g><g><title>evaluate_obligation (296,204 samples, 0.18%)</title><rect x="62.9123%" y="117" width="0.1824%" height="15" fill="rgb(244,70,9)"/><text x="63.1623%" y="127.50"></text></g><g><title>param_env (203,841 samples, 0.13%)</title><rect x="63.1616%" y="117" width="0.1255%" height="15" fill="rgb(217,125,39)"/><text x="63.4116%" y="127.50"></text></g><g><title>region_scope_tree (404,414 samples, 0.25%)</title><rect x="63.3119%" y="117" width="0.2490%" height="15" fill="rgb(235,36,10)"/><text x="63.5619%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,560,992 samples, 1.58%)</title><rect x="62.0043%" y="133" width="1.5770%" height="15" fill="rgb(251,123,47)"/><text x="62.2543%" y="143.50"></text></g><g><title>adt_sized_constraint (234,812 samples, 0.14%)</title><rect x="64.6964%" y="101" width="0.1446%" height="15" fill="rgb(221,13,13)"/><text x="64.9464%" y="111.50"></text></g><g><title>evaluate_obligation (825,878 samples, 0.51%)</title><rect x="64.3821%" y="117" width="0.5086%" height="15" fill="rgb(238,131,9)"/><text x="64.6321%" y="127.50"></text></g><g><title>param_env (290,194 samples, 0.18%)</title><rect x="64.9401%" y="117" width="0.1787%" height="15" fill="rgb(211,50,8)"/><text x="65.1901%" y="127.50"></text></g><g><title>check_item_well_formed (2,811,010 samples, 1.73%)</title><rect x="63.5813%" y="133" width="1.7310%" height="15" fill="rgb(245,182,24)"/><text x="63.8313%" y="143.50"></text></g><g><title>evaluate_obligation (345,763 samples, 0.21%)</title><rect x="65.7258%" y="117" width="0.2129%" height="15" fill="rgb(242,14,37)"/><text x="65.9758%" y="127.50"></text></g><g><title>analysis (106,545,797 samples, 65.61%)</title><rect x="0.5450%" y="181" width="65.6085%" height="15" fill="rgb(246,228,12)"/><text x="0.7950%" y="191.50">analysis</text></g><g><title>type_check_crate (71,637,217 samples, 44.11%)</title><rect x="22.0409%" y="165" width="44.1126%" height="15" fill="rgb(213,55,15)"/><text x="22.2909%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,982,058 samples, 4.30%)</title><rect x="61.8541%" y="149" width="4.2994%" height="15" fill="rgb(209,9,3)"/><text x="62.1041%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,366,135 samples, 0.84%)</title><rect x="65.3122%" y="133" width="0.8412%" height="15" fill="rgb(230,59,30)"/><text x="65.5622%" y="143.50"></text></g><g><title>codegen_crate (542,606 samples, 0.33%)</title><rect x="66.1600%" y="181" width="0.3341%" height="15" fill="rgb(209,121,21)"/><text x="66.4100%" y="191.50"></text></g><g><title>AST_validation (401,235 samples, 0.25%)</title><rect x="66.6357%" y="165" width="0.2471%" height="15" fill="rgb(220,109,13)"/><text x="66.8857%" y="175.50"></text></g><g><title>complete_gated_feature_checking (180,882 samples, 0.11%)</title><rect x="66.8827%" y="165" width="0.1114%" height="15" fill="rgb(232,18,1)"/><text x="67.1327%" y="175.50"></text></g><g><title>metadata_load_macro (417,634 samples, 0.26%)</title><rect x="84.3866%" y="133" width="0.2572%" height="15" fill="rgb(215,41,42)"/><text x="84.6366%" y="143.50"></text></g><g><title>metadata_register_crate (1,986,381 samples, 1.22%)</title><rect x="84.6438%" y="133" width="1.2232%" height="15" fill="rgb(224,123,36)"/><text x="84.8938%" y="143.50"></text></g><g><title>metadata_register_crate (720,938 samples, 0.44%)</title><rect x="85.4230%" y="117" width="0.4439%" height="15" fill="rgb(240,125,3)"/><text x="85.6730%" y="127.50"></text></g><g><title>macro_expand_crate (31,022,756 samples, 19.10%)</title><rect x="67.0444%" y="165" width="19.1031%" height="15" fill="rgb(205,98,50)"/><text x="67.2944%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (31,005,885 samples, 19.09%)</title><rect x="67.0548%" y="149" width="19.0927%" height="15" fill="rgb(205,185,37)"/><text x="67.3048%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (455,595 samples, 0.28%)</title><rect x="85.8670%" y="133" width="0.2805%" height="15" fill="rgb(238,207,15)"/><text x="86.1170%" y="143.50"></text></g><g><title>finalize_macro_resolutions (517,836 samples, 0.32%)</title><rect x="86.3085%" y="149" width="0.3189%" height="15" fill="rgb(213,199,42)"/><text x="86.5585%" y="159.50"></text></g><g><title>late_resolve_crate (4,598,351 samples, 2.83%)</title><rect x="86.6273%" y="149" width="2.8316%" height="15" fill="rgb(235,201,11)"/><text x="86.8773%" y="159.50">la..</text></g><g><title>configure_and_expand (37,606,579 samples, 23.16%)</title><rect x="66.4941%" y="181" width="23.1573%" height="15" fill="rgb(207,46,11)"/><text x="66.7441%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (5,578,192 samples, 3.43%)</title><rect x="86.2165%" y="165" width="3.4349%" height="15" fill="rgb(241,35,35)"/><text x="86.4665%" y="175.50">res..</text></g><g><title>drop_ast (393,624 samples, 0.24%)</title><rect x="89.6514%" y="181" width="0.2424%" height="15" fill="rgb(243,32,47)"/><text x="89.9014%" y="191.50"></text></g><g><title>early_lint_checks (773,739 samples, 0.48%)</title><rect x="89.9039%" y="181" width="0.4765%" height="15" fill="rgb(247,202,23)"/><text x="90.1539%" y="191.50"></text></g><g><title>free_global_ctxt (4,109,685 samples, 2.53%)</title><rect x="90.3803%" y="181" width="2.5307%" height="15" fill="rgb(219,102,11)"/><text x="90.6303%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (1,473,746 samples, 0.91%)</title><rect x="92.9110%" y="181" width="0.9075%" height="15" fill="rgb(243,110,44)"/><text x="93.1610%" y="191.50"></text></g><g><title>hir_lowering (7,615,745 samples, 4.69%)</title><rect x="93.8185%" y="181" width="4.6896%" height="15" fill="rgb(222,74,54)"/><text x="94.0685%" y="191.50">hir_l..</text></g><g><title>parse_crate (411,244 samples, 0.25%)</title><rect x="98.5399%" y="181" width="0.2532%" height="15" fill="rgb(216,99,12)"/><text x="98.7899%" y="191.50"></text></g><g><title>prepare_outputs (358,084 samples, 0.22%)</title><rect x="98.7997%" y="181" width="0.2205%" height="15" fill="rgb(226,22,26)"/><text x="99.0497%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,117,792 samples, 0.69%)</title><rect x="99.0202%" y="181" width="0.6883%" height="15" fill="rgb(217,163,10)"/><text x="99.2702%" y="191.50"></text></g><g><title>all (162,396,338 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (162,396,338 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (337,534 samples, 0.21%)</title><rect x="99.7922%" y="181" width="0.2078%" height="15" fill="rgb(220,39,43)"/><text x="100.0422%" y="191.50"></text></g></svg></svg>