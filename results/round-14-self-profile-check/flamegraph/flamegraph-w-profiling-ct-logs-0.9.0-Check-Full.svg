<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>has_structural_eq_impls (156,862 samples, 0.40%)</title><rect x="10.2470%" y="149" width="0.3991%" height="15" fill="rgb(227,0,7)"/><text x="10.4970%" y="159.50"></text></g><g><title>evaluate_obligation (145,002 samples, 0.37%)</title><rect x="10.2772%" y="133" width="0.3690%" height="15" fill="rgb(217,0,24)"/><text x="10.5272%" y="143.50"></text></g><g><title>trait_impls_of (132,492 samples, 0.34%)</title><rect x="10.3090%" y="117" width="0.3371%" height="15" fill="rgb(221,193,54)"/><text x="10.5590%" y="127.50"></text></g><g><title>is_freeze_raw (84,861 samples, 0.22%)</title><rect x="10.6461%" y="149" width="0.2159%" height="15" fill="rgb(248,212,6)"/><text x="10.8961%" y="159.50"></text></g><g><title>evaluate_obligation (81,031 samples, 0.21%)</title><rect x="10.6559%" y="133" width="0.2062%" height="15" fill="rgb(208,68,35)"/><text x="10.9059%" y="143.50"></text></g><g><title>thir_body (845,840 samples, 2.15%)</title><rect x="12.8937%" y="101" width="2.1523%" height="15" fill="rgb(232,128,0)"/><text x="13.1437%" y="111.50">t..</text></g><g><title>lit_to_const (115,800 samples, 0.29%)</title><rect x="14.7513%" y="85" width="0.2947%" height="15" fill="rgb(207,160,47)"/><text x="15.0013%" y="95.50"></text></g><g><title>mir_promoted (3,080,634 samples, 7.84%)</title><rect x="7.2194%" y="181" width="7.8387%" height="15" fill="rgb(228,23,34)"/><text x="7.4694%" y="191.50">mir_promoted</text></g><g><title>mir_const_qualif (2,480,318 samples, 6.31%)</title><rect x="8.7469%" y="165" width="6.3112%" height="15" fill="rgb(218,30,26)"/><text x="8.9969%" y="175.50">mir_cons..</text></g><g><title>mir_const (1,649,079 samples, 4.20%)</title><rect x="10.8620%" y="149" width="4.1961%" height="15" fill="rgb(220,122,19)"/><text x="11.1120%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (1,560,278 samples, 3.97%)</title><rect x="11.0880%" y="133" width="3.9702%" height="15" fill="rgb(250,228,42)"/><text x="11.3380%" y="143.50">unsa..</text></g><g><title>mir_built (1,492,127 samples, 3.80%)</title><rect x="11.2614%" y="117" width="3.7967%" height="15" fill="rgb(240,193,28)"/><text x="11.5114%" y="127.50">mir_..</text></g><g><title>MIR_borrow_checking (5,196,468 samples, 13.22%)</title><rect x="2.0048%" y="213" width="13.2225%" height="15" fill="rgb(216,20,37)"/><text x="2.2548%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (5,193,888 samples, 13.22%)</title><rect x="2.0113%" y="197" width="13.2159%" height="15" fill="rgb(206,188,39)"/><text x="2.2613%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (66,461 samples, 0.17%)</title><rect x="15.0582%" y="181" width="0.1691%" height="15" fill="rgb(217,207,13)"/><text x="15.3082%" y="191.50"></text></g><g><title>MIR_effect_checking (118,391 samples, 0.30%)</title><rect x="15.2273%" y="213" width="0.3012%" height="15" fill="rgb(231,73,38)"/><text x="15.4773%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (108,331 samples, 0.28%)</title><rect x="15.2529%" y="197" width="0.2757%" height="15" fill="rgb(225,20,46)"/><text x="15.5029%" y="207.50"></text></g><g><title>hir_module_items (108,511 samples, 0.28%)</title><rect x="15.5285%" y="213" width="0.2761%" height="15" fill="rgb(210,31,41)"/><text x="15.7785%" y="223.50"></text></g><g><title>check_mod_attrs (199,042 samples, 0.51%)</title><rect x="15.8669%" y="197" width="0.5065%" height="15" fill="rgb(221,200,47)"/><text x="16.1169%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (102,861 samples, 0.26%)</title><rect x="16.5236%" y="197" width="0.2617%" height="15" fill="rgb(226,26,5)"/><text x="16.7736%" y="207.50"></text></g><g><title>misc_checking_1 (425,934 samples, 1.08%)</title><rect x="15.8056%" y="213" width="1.0838%" height="15" fill="rgb(249,33,26)"/><text x="16.0556%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (59,011 samples, 0.15%)</title><rect x="16.8923%" y="197" width="0.1502%" height="15" fill="rgb(235,183,28)"/><text x="17.1423%" y="207.50"></text></g><g><title>misc_checking_2 (88,781 samples, 0.23%)</title><rect x="16.8894%" y="213" width="0.2259%" height="15" fill="rgb(221,5,38)"/><text x="17.1394%" y="223.50"></text></g><g><title>death_checking (43,261 samples, 0.11%)</title><rect x="17.1871%" y="197" width="0.1101%" height="15" fill="rgb(247,18,42)"/><text x="17.4371%" y="207.50"></text></g><g><title>layout_of (47,171 samples, 0.12%)</title><rect x="20.9093%" y="69" width="0.1200%" height="15" fill="rgb(241,131,45)"/><text x="21.1593%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,245,944 samples, 3.17%)</title><rect x="18.3444%" y="117" width="3.1703%" height="15" fill="rgb(249,31,29)"/><text x="18.5944%" y="127.50">eva..</text></g><g><title>eval_to_const_value_raw (1,243,754 samples, 3.16%)</title><rect x="18.3500%" y="101" width="3.1648%" height="15" fill="rgb(225,111,53)"/><text x="18.6000%" y="111.50">eva..</text></g><g><title>eval_to_allocation_raw (1,239,754 samples, 3.15%)</title><rect x="18.3602%" y="85" width="3.1546%" height="15" fill="rgb(238,160,17)"/><text x="18.6102%" y="95.50">eva..</text></g><g><title>promoted_mir (190,752 samples, 0.49%)</title><rect x="21.0294%" y="69" width="0.4854%" height="15" fill="rgb(214,148,48)"/><text x="21.2794%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,525,057 samples, 3.88%)</title><rect x="17.6440%" y="165" width="3.8805%" height="15" fill="rgb(232,36,49)"/><text x="17.8940%" y="175.50">eval..</text></g><g><title>eval_to_allocation_raw (1,518,557 samples, 3.86%)</title><rect x="17.6605%" y="149" width="3.8640%" height="15" fill="rgb(209,103,24)"/><text x="17.9105%" y="159.50">eval..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,262,284 samples, 3.21%)</title><rect x="18.3126%" y="133" width="3.2119%" height="15" fill="rgb(229,88,8)"/><text x="18.5626%" y="143.50">try..</text></g><g><title>crate_lints (1,690,368 samples, 4.30%)</title><rect x="17.3013%" y="181" width="4.3012%" height="15" fill="rgb(213,181,19)"/><text x="17.5513%" y="191.50">crate..</text></g><g><title>lint_checking (1,852,380 samples, 4.71%)</title><rect x="17.2972%" y="197" width="4.7134%" height="15" fill="rgb(254,191,54)"/><text x="17.5472%" y="207.50">lint_..</text></g><g><title>module_lints (160,421 samples, 0.41%)</title><rect x="21.6024%" y="181" width="0.4082%" height="15" fill="rgb(241,83,37)"/><text x="21.8524%" y="191.50"></text></g><g><title>lint_mod (158,171 samples, 0.40%)</title><rect x="21.6082%" y="165" width="0.4025%" height="15" fill="rgb(233,36,39)"/><text x="21.8582%" y="175.50"></text></g><g><title>privacy_checking_modules (119,762 samples, 0.30%)</title><rect x="22.1004%" y="197" width="0.3047%" height="15" fill="rgb(226,3,54)"/><text x="22.3504%" y="207.50"></text></g><g><title>check_mod_privacy (118,872 samples, 0.30%)</title><rect x="22.1026%" y="181" width="0.3025%" height="15" fill="rgb(245,192,40)"/><text x="22.3526%" y="191.50"></text></g><g><title>misc_checking_3 (2,102,614 samples, 5.35%)</title><rect x="17.1153%" y="213" width="5.3501%" height="15" fill="rgb(238,167,29)"/><text x="17.3653%" y="223.50">misc_ch..</text></g><g><title>adt_sized_constraint (41,621 samples, 0.11%)</title><rect x="38.8488%" y="149" width="0.1059%" height="15" fill="rgb(232,182,51)"/><text x="39.0988%" y="159.50"></text></g><g><title>impl_parent (159,354 samples, 0.41%)</title><rect x="39.5462%" y="53" width="0.4055%" height="15" fill="rgb(231,60,39)"/><text x="39.7962%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (116,331 samples, 0.30%)</title><rect x="39.6556%" y="37" width="0.2960%" height="15" fill="rgb(208,69,12)"/><text x="39.9056%" y="47.50"></text></g><g><title>impl_trait_ref (574,695 samples, 1.46%)</title><rect x="39.9516%" y="53" width="1.4623%" height="15" fill="rgb(235,93,37)"/><text x="40.2016%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (537,955 samples, 1.37%)</title><rect x="40.0451%" y="37" width="1.3688%" height="15" fill="rgb(213,116,39)"/><text x="40.2951%" y="47.50"></text></g><g><title>adt_destructor (962,620 samples, 2.45%)</title><rect x="39.1424%" y="117" width="2.4494%" height="15" fill="rgb(222,207,29)"/><text x="39.3924%" y="127.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (961,950 samples, 2.45%)</title><rect x="39.1441%" y="101" width="2.4477%" height="15" fill="rgb(206,96,30)"/><text x="39.3941%" y="111.50">me..</text></g><g><title>coherent_trait (955,950 samples, 2.43%)</title><rect x="39.1593%" y="85" width="2.4324%" height="15" fill="rgb(218,138,4)"/><text x="39.4093%" y="95.50">co..</text></g><g><title>specialization_graph_of (952,200 samples, 2.42%)</title><rect x="39.1689%" y="69" width="2.4229%" height="15" fill="rgb(250,191,14)"/><text x="39.4189%" y="79.50">sp..</text></g><g><title>trait_impls_of (69,871 samples, 0.18%)</title><rect x="41.4140%" y="53" width="0.1778%" height="15" fill="rgb(239,60,40)"/><text x="41.6640%" y="63.50"></text></g><g><title>dropck_outlives (1,032,572 samples, 2.63%)</title><rect x="38.9700%" y="149" width="2.6274%" height="15" fill="rgb(206,27,48)"/><text x="39.2200%" y="159.50">dr..</text></g><g><title>adt_dtorck_constraint (976,651 samples, 2.49%)</title><rect x="39.1123%" y="133" width="2.4851%" height="15" fill="rgb(225,35,8)"/><text x="39.3623%" y="143.50">ad..</text></g><g><title>impl_trait_ref (43,950 samples, 0.11%)</title><rect x="41.6291%" y="149" width="0.1118%" height="15" fill="rgb(250,213,24)"/><text x="41.8791%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (41,810 samples, 0.11%)</title><rect x="41.6346%" y="133" width="0.1064%" height="15" fill="rgb(247,123,22)"/><text x="41.8846%" y="143.50"></text></g><g><title>trait_impls_of (39,591 samples, 0.10%)</title><rect x="41.8906%" y="149" width="0.1007%" height="15" fill="rgb(231,138,38)"/><text x="42.1406%" y="159.50"></text></g><g><title>item_types_checking (7,626,456 samples, 19.41%)</title><rect x="22.5952%" y="197" width="19.4056%" height="15" fill="rgb(231,145,46)"/><text x="22.8452%" y="207.50">item_types_checking</text></g><g><title>check_mod_item_types (7,623,816 samples, 19.40%)</title><rect x="22.6020%" y="181" width="19.3989%" height="15" fill="rgb(251,118,11)"/><text x="22.8520%" y="191.50">check_mod_item_types</text></g><g><title>typeck (7,584,195 samples, 19.30%)</title><rect x="22.7028%" y="165" width="19.2981%" height="15" fill="rgb(217,147,25)"/><text x="22.9528%" y="175.50">typeck</text></g><g><title>named_region_map (217,812 samples, 0.55%)</title><rect x="42.5770%" y="149" width="0.5542%" height="15" fill="rgb(247,81,37)"/><text x="42.8270%" y="159.50"></text></g><g><title>resolve_lifetimes (206,992 samples, 0.53%)</title><rect x="42.6045%" y="133" width="0.5267%" height="15" fill="rgb(209,12,38)"/><text x="42.8545%" y="143.50"></text></g><g><title>lint_levels (119,561 samples, 0.30%)</title><rect x="42.8270%" y="117" width="0.3042%" height="15" fill="rgb(227,1,9)"/><text x="43.0770%" y="127.50"></text></g><g><title>type_collecting (455,475 samples, 1.16%)</title><rect x="42.0024%" y="197" width="1.1590%" height="15" fill="rgb(248,47,43)"/><text x="42.2524%" y="207.50"></text></g><g><title>collect_mod_item_types (439,875 samples, 1.12%)</title><rect x="42.0421%" y="181" width="1.1193%" height="15" fill="rgb(221,10,30)"/><text x="42.2921%" y="191.50"></text></g><g><title>type_of (311,204 samples, 0.79%)</title><rect x="42.3695%" y="165" width="0.7919%" height="15" fill="rgb(210,229,1)"/><text x="42.6195%" y="175.50"></text></g><g><title>codegen_fn_attrs (39,361 samples, 0.10%)</title><rect x="44.0163%" y="165" width="0.1002%" height="15" fill="rgb(222,148,37)"/><text x="44.2663%" y="175.50"></text></g><g><title>trait_impls_of (76,371 samples, 0.19%)</title><rect x="44.7724%" y="149" width="0.1943%" height="15" fill="rgb(234,67,33)"/><text x="45.0224%" y="159.50"></text></g><g><title>evaluate_obligation (347,264 samples, 0.88%)</title><rect x="44.1165%" y="165" width="0.8836%" height="15" fill="rgb(247,98,35)"/><text x="44.3665%" y="175.50"></text></g><g><title>get_lang_items (63,611 samples, 0.16%)</title><rect x="45.0001%" y="165" width="0.1619%" height="15" fill="rgb(247,138,52)"/><text x="45.2501%" y="175.50"></text></g><g><title>param_env (177,782 samples, 0.45%)</title><rect x="45.1638%" y="165" width="0.4524%" height="15" fill="rgb(213,79,30)"/><text x="45.4138%" y="175.50"></text></g><g><title>region_scope_tree (193,872 samples, 0.49%)</title><rect x="45.6384%" y="165" width="0.4933%" height="15" fill="rgb(246,177,23)"/><text x="45.8884%" y="175.50"></text></g><g><title>analysis (17,545,357 samples, 44.64%)</title><rect x="1.4890%" y="229" width="44.6444%" height="15" fill="rgb(230,62,27)"/><text x="1.7390%" y="239.50">analysis</text></g><g><title>type_check_crate (9,301,545 samples, 23.67%)</title><rect x="22.4655%" y="213" width="23.6679%" height="15" fill="rgb(216,154,8)"/><text x="22.7155%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,167,513 samples, 2.97%)</title><rect x="43.1627%" y="197" width="2.9708%" height="15" fill="rgb(244,35,45)"/><text x="43.4127%" y="207.50">wf_..</text></g><g><title>check_item_well_formed (1,138,023 samples, 2.90%)</title><rect x="43.2377%" y="181" width="2.8957%" height="15" fill="rgb(251,115,12)"/><text x="43.4877%" y="191.50">ch..</text></g><g><title>codegen_crate (428,494 samples, 1.09%)</title><rect x="46.1557%" y="229" width="1.0903%" height="15" fill="rgb(240,54,50)"/><text x="46.4057%" y="239.50"></text></g><g><title>AST_validation (88,221 samples, 0.22%)</title><rect x="47.7273%" y="213" width="0.2245%" height="15" fill="rgb(233,84,52)"/><text x="47.9773%" y="223.50"></text></g><g><title>crate_injection (64,521 samples, 0.16%)</title><rect x="48.0316%" y="213" width="0.1642%" height="15" fill="rgb(207,117,47)"/><text x="48.2816%" y="223.50"></text></g><g><title>metadata_load_macro (53,161 samples, 0.14%)</title><rect x="67.3525%" y="181" width="0.1353%" height="15" fill="rgb(249,43,39)"/><text x="67.6025%" y="191.50"></text></g><g><title>macro_expand_crate (9,966,841 samples, 25.36%)</title><rect x="48.1958%" y="213" width="25.3608%" height="15" fill="rgb(209,38,44)"/><text x="48.4458%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (9,947,201 samples, 25.31%)</title><rect x="48.2458%" y="197" width="25.3108%" height="15" fill="rgb(236,212,23)"/><text x="48.4958%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,385,047 samples, 6.07%)</title><rect x="67.4878%" y="181" width="6.0688%" height="15" fill="rgb(242,79,21)"/><text x="67.7378%" y="191.50">metadata..</text></g><g><title>metadata_register_crate (876,100 samples, 2.23%)</title><rect x="71.3273%" y="165" width="2.2293%" height="15" fill="rgb(211,96,35)"/><text x="71.5773%" y="175.50">m..</text></g><g><title>metadata_register_crate (72,712 samples, 0.19%)</title><rect x="73.3716%" y="149" width="0.1850%" height="15" fill="rgb(253,215,40)"/><text x="73.6216%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (234,643 samples, 0.60%)</title><rect x="73.5669%" y="213" width="0.5971%" height="15" fill="rgb(211,81,21)"/><text x="73.8169%" y="223.50"></text></g><g><title>finalize_macro_resolutions (289,363 samples, 0.74%)</title><rect x="74.2150%" y="197" width="0.7363%" height="15" fill="rgb(208,190,38)"/><text x="74.4650%" y="207.50"></text></g><g><title>late_resolve_crate (747,669 samples, 1.90%)</title><rect x="74.9513%" y="197" width="1.9025%" height="15" fill="rgb(235,213,38)"/><text x="75.2013%" y="207.50">l..</text></g><g><title>metadata_register_crate (425,565 samples, 1.08%)</title><rect x="75.7709%" y="181" width="1.0829%" height="15" fill="rgb(237,122,38)"/><text x="76.0209%" y="191.50"></text></g><g><title>metadata_register_crate (270,873 samples, 0.69%)</title><rect x="76.1645%" y="165" width="0.6892%" height="15" fill="rgb(244,218,35)"/><text x="76.4145%" y="175.50"></text></g><g><title>metadata_register_crate (41,140 samples, 0.10%)</title><rect x="76.7491%" y="149" width="0.1047%" height="15" fill="rgb(240,68,47)"/><text x="76.9991%" y="159.50"></text></g><g><title>configure_and_expand (11,698,980 samples, 29.77%)</title><rect x="47.2460%" y="229" width="29.7682%" height="15" fill="rgb(210,16,53)"/><text x="47.4960%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,120,152 samples, 2.85%)</title><rect x="74.1640%" y="213" width="2.8502%" height="15" fill="rgb(235,124,12)"/><text x="74.4140%" y="223.50">re..</text></g><g><title>drop_ast (109,531 samples, 0.28%)</title><rect x="77.0142%" y="229" width="0.2787%" height="15" fill="rgb(224,169,11)"/><text x="77.2642%" y="239.50"></text></g><g><title>early_lint_checks (332,884 samples, 0.85%)</title><rect x="77.3372%" y="229" width="0.8470%" height="15" fill="rgb(250,166,2)"/><text x="77.5872%" y="239.50"></text></g><g><title>free_global_ctxt (1,735,639 samples, 4.42%)</title><rect x="78.1842%" y="229" width="4.4164%" height="15" fill="rgb(242,216,29)"/><text x="78.4342%" y="239.50">free_..</text></g><g><title>crate_hash (69,551 samples, 0.18%)</title><rect x="83.6324%" y="213" width="0.1770%" height="15" fill="rgb(230,116,27)"/><text x="83.8824%" y="223.50"></text></g><g><title>generate_crate_metadata (521,075 samples, 1.33%)</title><rect x="82.6006%" y="229" width="1.3259%" height="15" fill="rgb(228,99,48)"/><text x="82.8506%" y="239.50"></text></g><g><title>hir_lowering (1,161,153 samples, 2.95%)</title><rect x="83.9265%" y="229" width="2.9546%" height="15" fill="rgb(253,11,6)"/><text x="84.1765%" y="239.50">hir..</text></g><g><title>link (46,541 samples, 0.12%)</title><rect x="86.8810%" y="229" width="0.1184%" height="15" fill="rgb(247,143,39)"/><text x="87.1310%" y="239.50"></text></g><g><title>parse_crate (4,110,006 samples, 10.46%)</title><rect x="86.9995%" y="229" width="10.4580%" height="15" fill="rgb(236,97,10)"/><text x="87.2495%" y="239.50">parse_crate</text></g><g><title>prepare_outputs (262,133 samples, 0.67%)</title><rect x="97.4789%" y="229" width="0.6670%" height="15" fill="rgb(233,208,19)"/><text x="97.7289%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (303,224 samples, 0.77%)</title><rect x="98.1459%" y="229" width="0.7716%" height="15" fill="rgb(216,164,2)"/><text x="98.3959%" y="239.50"></text></g><g><title>setup_global_ctxt (120,362 samples, 0.31%)</title><rect x="98.9462%" y="229" width="0.3063%" height="15" fill="rgb(220,129,5)"/><text x="99.1962%" y="239.50"></text></g><g><title>all (39,300,199 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (39,300,199 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (293,794 samples, 0.75%)</title><rect x="99.2524%" y="229" width="0.7476%" height="15" fill="rgb(251,28,31)"/><text x="99.5024%" y="239.50"></text></g></svg></svg>