<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (993,370 samples, 0.17%)</title><rect x="8.8274%" y="213" width="0.1732%" height="15" fill="rgb(227,0,7)"/><text x="9.0774%" y="223.50"></text></g><g><title>param_env (867,207 samples, 0.15%)</title><rect x="10.0926%" y="181" width="0.1512%" height="15" fill="rgb(217,0,24)"/><text x="10.3426%" y="191.50"></text></g><g><title>item_attrs (645,756 samples, 0.11%)</title><rect x="10.5688%" y="149" width="0.1126%" height="15" fill="rgb(221,193,54)"/><text x="10.8188%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (621,216 samples, 0.11%)</title><rect x="10.5731%" y="133" width="0.1083%" height="15" fill="rgb(248,212,6)"/><text x="10.8231%" y="143.50"></text></g><g><title>codegen_fn_attrs (915,408 samples, 0.16%)</title><rect x="10.5288%" y="165" width="0.1596%" height="15" fill="rgb(208,68,35)"/><text x="10.7788%" y="175.50"></text></g><g><title>adt_drop_tys (1,081,429 samples, 0.19%)</title><rect x="12.6588%" y="133" width="0.1886%" height="15" fill="rgb(232,128,0)"/><text x="12.9088%" y="143.50"></text></g><g><title>is_copy_raw (5,026,857 samples, 0.88%)</title><rect x="12.8474%" y="133" width="0.8767%" height="15" fill="rgb(207,160,47)"/><text x="13.0974%" y="143.50"></text></g><g><title>evaluate_obligation (4,171,980 samples, 0.73%)</title><rect x="12.9965%" y="117" width="0.7276%" height="15" fill="rgb(228,23,34)"/><text x="13.2465%" y="127.50"></text></g><g><title>needs_drop_raw (6,776,221 samples, 1.18%)</title><rect x="12.5469%" y="149" width="1.1817%" height="15" fill="rgb(218,30,26)"/><text x="12.7969%" y="159.50"></text></g><g><title>resolve_instance (1,732,977 samples, 0.30%)</title><rect x="13.7286%" y="149" width="0.3022%" height="15" fill="rgb(220,122,19)"/><text x="13.9786%" y="159.50"></text></g><g><title>thir_body (3,631,924 samples, 0.63%)</title><rect x="14.0516%" y="149" width="0.6334%" height="15" fill="rgb(250,228,42)"/><text x="14.3016%" y="159.50"></text></g><g><title>mir_const (29,255,601 samples, 5.10%)</title><rect x="9.6140%" y="197" width="5.1020%" height="15" fill="rgb(240,193,28)"/><text x="9.8640%" y="207.50">mir_co..</text></g><g><title>unsafety_check_result (25,643,847 samples, 4.47%)</title><rect x="10.2438%" y="181" width="4.4721%" height="15" fill="rgb(216,20,37)"/><text x="10.4938%" y="191.50">unsaf..</text></g><g><title>mir_built (23,094,622 samples, 4.03%)</title><rect x="10.6884%" y="165" width="4.0276%" height="15" fill="rgb(206,188,39)"/><text x="10.9384%" y="175.50">mir_..</text></g><g><title>mir_promoted (32,799,496 samples, 5.72%)</title><rect x="9.0909%" y="213" width="5.7200%" height="15" fill="rgb(217,207,13)"/><text x="9.3409%" y="223.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (3,358,619 samples, 0.59%)</title><rect x="14.8109%" y="213" width="0.5857%" height="15" fill="rgb(231,73,38)"/><text x="15.0609%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (2,681,201 samples, 0.47%)</title><rect x="15.3966%" y="213" width="0.4676%" height="15" fill="rgb(225,20,46)"/><text x="15.6466%" y="223.50"></text></g><g><title>normalize_projection_ty (1,652,381 samples, 0.29%)</title><rect x="15.5760%" y="197" width="0.2882%" height="15" fill="rgb(210,31,41)"/><text x="15.8260%" y="207.50"></text></g><g><title>type_op_normalize_predicate (981,313 samples, 0.17%)</title><rect x="15.8642%" y="213" width="0.1711%" height="15" fill="rgb(221,200,47)"/><text x="16.1142%" y="223.50"></text></g><g><title>type_op_prove_predicate (14,093,624 samples, 2.46%)</title><rect x="16.1351%" y="213" width="2.4578%" height="15" fill="rgb(226,26,5)"/><text x="16.3851%" y="223.50">ty..</text></g><g><title>MIR_borrow_checking (104,880,002 samples, 18.29%)</title><rect x="0.3063%" y="245" width="18.2905%" height="15" fill="rgb(249,33,26)"/><text x="0.5563%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (104,441,612 samples, 18.21%)</title><rect x="0.3828%" y="229" width="18.2140%" height="15" fill="rgb(235,183,28)"/><text x="0.6328%" y="239.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (804,280 samples, 0.14%)</title><rect x="18.8777%" y="213" width="0.1403%" height="15" fill="rgb(221,5,38)"/><text x="19.1277%" y="223.50"></text></g><g><title>check_mod_attrs (1,481,694 samples, 0.26%)</title><rect x="18.7595%" y="229" width="0.2584%" height="15" fill="rgb(247,18,42)"/><text x="19.0095%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (865,382 samples, 0.15%)</title><rect x="19.1153%" y="229" width="0.1509%" height="15" fill="rgb(241,131,45)"/><text x="19.3653%" y="239.50"></text></g><g><title>misc_checking_1 (3,045,994 samples, 0.53%)</title><rect x="18.7530%" y="245" width="0.5312%" height="15" fill="rgb(249,31,29)"/><text x="19.0030%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (2,055,913 samples, 0.36%)</title><rect x="19.2846%" y="229" width="0.3585%" height="15" fill="rgb(225,111,53)"/><text x="19.5346%" y="239.50"></text></g><g><title>check_mod_liveness (1,742,268 samples, 0.30%)</title><rect x="19.3393%" y="213" width="0.3038%" height="15" fill="rgb(238,160,17)"/><text x="19.5893%" y="223.50"></text></g><g><title>type_uninhabited_from (613,614 samples, 0.11%)</title><rect x="19.5361%" y="197" width="0.1070%" height="15" fill="rgb(214,148,48)"/><text x="19.7861%" y="207.50"></text></g><g><title>misc_checking_2 (4,468,510 samples, 0.78%)</title><rect x="19.2842%" y="245" width="0.7793%" height="15" fill="rgb(232,36,49)"/><text x="19.5342%" y="255.50"></text></g><g><title>match_checking (2,410,467 samples, 0.42%)</title><rect x="19.6431%" y="229" width="0.4204%" height="15" fill="rgb(209,103,24)"/><text x="19.8931%" y="239.50"></text></g><g><title>check_match (2,294,787 samples, 0.40%)</title><rect x="19.6633%" y="213" width="0.4002%" height="15" fill="rgb(229,88,8)"/><text x="19.9133%" y="223.50"></text></g><g><title>check_private_in_public (623,677 samples, 0.11%)</title><rect x="20.0654%" y="229" width="0.1088%" height="15" fill="rgb(213,181,19)"/><text x="20.3154%" y="239.50"></text></g><g><title>death_checking (1,094,653 samples, 0.19%)</title><rect x="20.1741%" y="229" width="0.1909%" height="15" fill="rgb(254,191,54)"/><text x="20.4241%" y="239.50"></text></g><g><title>eval_to_const_value_raw (612,878 samples, 0.11%)</title><rect x="20.7054%" y="197" width="0.1069%" height="15" fill="rgb(241,83,37)"/><text x="20.9554%" y="207.50"></text></g><g><title>eval_to_const_value_raw (592,618 samples, 0.10%)</title><rect x="20.7089%" y="181" width="0.1033%" height="15" fill="rgb(233,36,39)"/><text x="20.9589%" y="191.50"></text></g><g><title>param_env (634,577 samples, 0.11%)</title><rect x="20.8122%" y="197" width="0.1107%" height="15" fill="rgb(226,3,54)"/><text x="21.0622%" y="207.50"></text></g><g><title>crate_lints (5,359,350 samples, 0.93%)</title><rect x="20.3655%" y="213" width="0.9346%" height="15" fill="rgb(245,192,40)"/><text x="20.6155%" y="223.50"></text></g><g><title>type_of (2,003,425 samples, 0.35%)</title><rect x="20.9508%" y="197" width="0.3494%" height="15" fill="rgb(238,167,29)"/><text x="21.2008%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (1,368,884 samples, 0.24%)</title><rect x="21.0614%" y="181" width="0.2387%" height="15" fill="rgb(232,182,51)"/><text x="21.3114%" y="191.50"></text></g><g><title>lint_checking (7,153,210 samples, 1.25%)</title><rect x="20.3650%" y="229" width="1.2475%" height="15" fill="rgb(231,60,39)"/><text x="20.6150%" y="239.50"></text></g><g><title>module_lints (1,791,230 samples, 0.31%)</title><rect x="21.3001%" y="213" width="0.3124%" height="15" fill="rgb(208,69,12)"/><text x="21.5501%" y="223.50"></text></g><g><title>lint_mod (1,778,080 samples, 0.31%)</title><rect x="21.3024%" y="197" width="0.3101%" height="15" fill="rgb(235,93,37)"/><text x="21.5524%" y="207.50"></text></g><g><title>privacy_access_levels (805,739 samples, 0.14%)</title><rect x="21.6125%" y="229" width="0.1405%" height="15" fill="rgb(213,116,39)"/><text x="21.8625%" y="239.50"></text></g><g><title>privacy_checking_modules (3,606,001 samples, 0.63%)</title><rect x="21.7530%" y="229" width="0.6289%" height="15" fill="rgb(222,207,29)"/><text x="22.0030%" y="239.50"></text></g><g><title>check_mod_privacy (3,597,331 samples, 0.63%)</title><rect x="21.7545%" y="213" width="0.6274%" height="15" fill="rgb(206,96,30)"/><text x="22.0045%" y="223.50"></text></g><g><title>misc_checking_3 (13,324,560 samples, 2.32%)</title><rect x="20.0635%" y="245" width="2.3237%" height="15" fill="rgb(218,138,4)"/><text x="20.3135%" y="255.50">m..</text></g><g><title>impl_parent (3,496,916 samples, 0.61%)</title><rect x="23.4459%" y="181" width="0.6098%" height="15" fill="rgb(250,191,14)"/><text x="23.6959%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,992,930 samples, 0.35%)</title><rect x="23.7082%" y="165" width="0.3476%" height="15" fill="rgb(239,60,40)"/><text x="23.9582%" y="175.50"></text></g><g><title>impl_trait_ref (8,127,506 samples, 1.42%)</title><rect x="24.0561%" y="181" width="1.4174%" height="15" fill="rgb(206,27,48)"/><text x="24.3061%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,776,770 samples, 1.18%)</title><rect x="24.2916%" y="165" width="1.1818%" height="15" fill="rgb(225,35,8)"/><text x="24.5416%" y="175.50"></text></g><g><title>trait_impls_of (1,314,376 samples, 0.23%)</title><rect x="25.4855%" y="181" width="0.2292%" height="15" fill="rgb(250,213,24)"/><text x="25.7355%" y="191.50"></text></g><g><title>coherent_trait (18,852,121 samples, 3.29%)</title><rect x="22.4272%" y="213" width="3.2877%" height="15" fill="rgb(247,123,22)"/><text x="22.6772%" y="223.50">coh..</text></g><g><title>specialization_graph_of (18,817,931 samples, 3.28%)</title><rect x="22.4332%" y="197" width="3.2817%" height="15" fill="rgb(231,138,38)"/><text x="22.6832%" y="207.50">spe..</text></g><g><title>coherence_checking (18,983,962 samples, 3.31%)</title><rect x="22.4229%" y="229" width="3.3107%" height="15" fill="rgb(231,145,46)"/><text x="22.6729%" y="239.50">coh..</text></g><g><title>associated_items (658,508 samples, 0.11%)</title><rect x="32.3171%" y="181" width="0.1148%" height="15" fill="rgb(251,118,11)"/><text x="32.5671%" y="191.50"></text></g><g><title>dropck_outlives (1,376,685 samples, 0.24%)</title><rect x="32.4435%" y="181" width="0.2401%" height="15" fill="rgb(217,147,25)"/><text x="32.6935%" y="191.50"></text></g><g><title>evaluate_obligation (3,340,507 samples, 0.58%)</title><rect x="32.6835%" y="181" width="0.5826%" height="15" fill="rgb(247,81,37)"/><text x="32.9335%" y="191.50"></text></g><g><title>adt_dtorck_constraint (651,885 samples, 0.11%)</title><rect x="42.4786%" y="149" width="0.1137%" height="15" fill="rgb(209,12,38)"/><text x="42.7286%" y="159.50"></text></g><g><title>dropck_outlives (2,105,375 samples, 0.37%)</title><rect x="42.2575%" y="165" width="0.3672%" height="15" fill="rgb(227,1,9)"/><text x="42.5075%" y="175.50"></text></g><g><title>trait_impls_of (582,948 samples, 0.10%)</title><rect x="52.9910%" y="149" width="0.1017%" height="15" fill="rgb(248,47,43)"/><text x="53.2410%" y="159.50"></text></g><g><title>evaluate_obligation (60,134,289 samples, 10.49%)</title><rect x="42.6264%" y="165" width="10.4871%" height="15" fill="rgb(221,10,30)"/><text x="42.8764%" y="175.50">evaluate_obliga..</text></g><g><title>is_copy_raw (3,094,151 samples, 0.54%)</title><rect x="53.2824%" y="165" width="0.5396%" height="15" fill="rgb(210,229,1)"/><text x="53.5324%" y="175.50"></text></g><g><title>evaluate_obligation (1,963,369 samples, 0.34%)</title><rect x="53.4796%" y="149" width="0.3424%" height="15" fill="rgb(222,148,37)"/><text x="53.7296%" y="159.50"></text></g><g><title>method_autoderef_steps (1,348,993 samples, 0.24%)</title><rect x="53.8649%" y="165" width="0.2353%" height="15" fill="rgb(234,67,33)"/><text x="54.1149%" y="175.50"></text></g><g><title>predicates_of (577,506 samples, 0.10%)</title><rect x="54.1379%" y="165" width="0.1007%" height="15" fill="rgb(247,98,35)"/><text x="54.3879%" y="175.50"></text></g><g><title>typeck (118,979,318 samples, 20.75%)</title><rect x="33.5979%" y="181" width="20.7493%" height="15" fill="rgb(247,138,52)"/><text x="33.8479%" y="191.50">typeck</text></g><g><title>item_bodies_checking (164,071,203 samples, 28.61%)</title><rect x="25.7457%" y="229" width="28.6131%" height="15" fill="rgb(213,79,30)"/><text x="25.9957%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (164,066,973 samples, 28.61%)</title><rect x="25.7464%" y="213" width="28.6123%" height="15" fill="rgb(246,177,23)"/><text x="25.9964%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (163,818,160 samples, 28.57%)</title><rect x="25.7898%" y="197" width="28.5689%" height="15" fill="rgb(230,62,27)"/><text x="26.0398%" y="207.50">typeck</text></g><g><title>mir_borrowck (749,959 samples, 0.13%)</title><rect x="56.3746%" y="149" width="0.1308%" height="15" fill="rgb(216,154,8)"/><text x="56.6246%" y="159.50"></text></g><g><title>mir_promoted (966,282 samples, 0.17%)</title><rect x="56.5054%" y="149" width="0.1685%" height="15" fill="rgb(244,35,45)"/><text x="56.7554%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,309,153 samples, 0.23%)</title><rect x="56.8336%" y="149" width="0.2283%" height="15" fill="rgb(251,115,12)"/><text x="57.0836%" y="159.50"></text></g><g><title>mir_borrowck (10,218,345 samples, 1.78%)</title><rect x="55.2811%" y="165" width="1.7820%" height="15" fill="rgb(240,54,50)"/><text x="55.5311%" y="175.50">m..</text></g><g><title>associated_items (935,670 samples, 0.16%)</title><rect x="59.7910%" y="85" width="0.1632%" height="15" fill="rgb(233,84,52)"/><text x="60.0410%" y="95.50"></text></g><g><title>adt_dtorck_constraint (956,159 samples, 0.17%)</title><rect x="60.2216%" y="37" width="0.1667%" height="15" fill="rgb(207,117,47)"/><text x="60.4716%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,492,218 samples, 0.26%)</title><rect x="60.1454%" y="53" width="0.2602%" height="15" fill="rgb(249,43,39)"/><text x="60.3954%" y="63.50"></text></g><g><title>adt_dtorck_constraint (2,308,619 samples, 0.40%)</title><rect x="60.0295%" y="69" width="0.4026%" height="15" fill="rgb(209,38,44)"/><text x="60.2795%" y="79.50"></text></g><g><title>dropck_outlives (2,805,263 samples, 0.49%)</title><rect x="59.9592%" y="85" width="0.4892%" height="15" fill="rgb(236,212,23)"/><text x="60.2092%" y="95.50"></text></g><g><title>trait_impls_of (678,007 samples, 0.12%)</title><rect x="61.1048%" y="69" width="0.1182%" height="15" fill="rgb(242,79,21)"/><text x="61.3548%" y="79.50"></text></g><g><title>evaluate_obligation (4,491,432 samples, 0.78%)</title><rect x="60.4492%" y="85" width="0.7833%" height="15" fill="rgb(211,96,35)"/><text x="60.6992%" y="95.50"></text></g><g><title>is_copy_raw (681,044 samples, 0.12%)</title><rect x="61.3230%" y="85" width="0.1188%" height="15" fill="rgb(253,215,40)"/><text x="61.5730%" y="95.50"></text></g><g><title>evaluate_obligation (581,624 samples, 0.10%)</title><rect x="61.3404%" y="69" width="0.1014%" height="15" fill="rgb(211,81,21)"/><text x="61.5904%" y="79.50"></text></g><g><title>evaluate_obligation (633,300 samples, 0.11%)</title><rect x="61.5186%" y="69" width="0.1104%" height="15" fill="rgb(208,190,38)"/><text x="61.7686%" y="79.50"></text></g><g><title>method_autoderef_steps (777,021 samples, 0.14%)</title><rect x="61.4988%" y="85" width="0.1355%" height="15" fill="rgb(235,213,38)"/><text x="61.7488%" y="95.50"></text></g><g><title>mir_built (27,456,435 samples, 4.79%)</title><rect x="57.1171%" y="117" width="4.7882%" height="15" fill="rgb(237,122,38)"/><text x="57.3671%" y="127.50">mir_bu..</text></g><g><title>typeck (26,765,869 samples, 4.67%)</title><rect x="57.2376%" y="101" width="4.6678%" height="15" fill="rgb(244,218,35)"/><text x="57.4876%" y="111.50">typeck</text></g><g><title>adt_drop_tys (649,468 samples, 0.11%)</title><rect x="62.1992%" y="69" width="0.1133%" height="15" fill="rgb(240,68,47)"/><text x="62.4492%" y="79.50"></text></g><g><title>needs_drop_raw (874,661 samples, 0.15%)</title><rect x="62.1890%" y="85" width="0.1525%" height="15" fill="rgb(210,16,53)"/><text x="62.4390%" y="95.50"></text></g><g><title>mir_built (2,568,978 samples, 0.45%)</title><rect x="61.9674%" y="101" width="0.4480%" height="15" fill="rgb(235,124,12)"/><text x="62.2174%" y="111.50"></text></g><g><title>mir_const (30,782,683 samples, 5.37%)</title><rect x="57.0827%" y="149" width="5.3683%" height="15" fill="rgb(224,169,11)"/><text x="57.3327%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (30,633,362 samples, 5.34%)</title><rect x="57.1087%" y="133" width="5.3423%" height="15" fill="rgb(250,166,2)"/><text x="57.3587%" y="143.50">unsafet..</text></g><g><title>unsafety_check_result (3,128,596 samples, 0.55%)</title><rect x="61.9054%" y="117" width="0.5456%" height="15" fill="rgb(242,216,29)"/><text x="62.1554%" y="127.50"></text></g><g><title>mir_promoted (30,904,385 samples, 5.39%)</title><rect x="57.0632%" y="165" width="5.3895%" height="15" fill="rgb(230,116,27)"/><text x="57.3132%" y="175.50">mir_pro..</text></g><g><title>type_of (43,332,223 samples, 7.56%)</title><rect x="54.9869%" y="197" width="7.5569%" height="15" fill="rgb(228,99,48)"/><text x="55.2369%" y="207.50">type_of</text></g><g><title>mir_borrowck (43,254,713 samples, 7.54%)</title><rect x="55.0004%" y="181" width="7.5434%" height="15" fill="rgb(253,11,6)"/><text x="55.2504%" y="191.50">mir_borrow..</text></g><g><title>item_types_checking (47,564,361 samples, 8.29%)</title><rect x="54.3587%" y="229" width="8.2949%" height="15" fill="rgb(247,143,39)"/><text x="54.6087%" y="239.50">item_types_c..</text></g><g><title>check_mod_item_types (47,548,481 samples, 8.29%)</title><rect x="54.3615%" y="213" width="8.2922%" height="15" fill="rgb(236,97,10)"/><text x="54.6115%" y="223.50">check_mod_it..</text></g><g><title>typeck (630,258 samples, 0.11%)</title><rect x="62.5438%" y="197" width="0.1099%" height="15" fill="rgb(233,208,19)"/><text x="62.7938%" y="207.50"></text></g><g><title>fn_sig (1,094,723 samples, 0.19%)</title><rect x="62.7830%" y="197" width="0.1909%" height="15" fill="rgb(216,164,2)"/><text x="63.0330%" y="207.50"></text></g><g><title>lint_levels (639,997 samples, 0.11%)</title><rect x="63.1146%" y="149" width="0.1116%" height="15" fill="rgb(220,129,5)"/><text x="63.3646%" y="159.50"></text></g><g><title>is_late_bound_map (1,111,090 samples, 0.19%)</title><rect x="63.0326%" y="181" width="0.1938%" height="15" fill="rgb(242,17,10)"/><text x="63.2826%" y="191.50"></text></g><g><title>resolve_lifetimes (1,091,220 samples, 0.19%)</title><rect x="63.0360%" y="165" width="0.1903%" height="15" fill="rgb(242,107,0)"/><text x="63.2860%" y="175.50"></text></g><g><title>generics_of (1,818,324 samples, 0.32%)</title><rect x="62.9739%" y="197" width="0.3171%" height="15" fill="rgb(251,28,31)"/><text x="63.2239%" y="207.50"></text></g><g><title>explicit_predicates_of (680,730 samples, 0.12%)</title><rect x="63.3721%" y="165" width="0.1187%" height="15" fill="rgb(233,223,10)"/><text x="63.6221%" y="175.50"></text></g><g><title>predicates_of (1,838,943 samples, 0.32%)</title><rect x="63.3116%" y="197" width="0.3207%" height="15" fill="rgb(215,21,27)"/><text x="63.5616%" y="207.50"></text></g><g><title>predicates_defined_on (1,706,282 samples, 0.30%)</title><rect x="63.3348%" y="181" width="0.2976%" height="15" fill="rgb(232,23,21)"/><text x="63.5848%" y="191.50"></text></g><g><title>inferred_outlives_of (811,280 samples, 0.14%)</title><rect x="63.4909%" y="165" width="0.1415%" height="15" fill="rgb(244,5,23)"/><text x="63.7409%" y="175.50"></text></g><g><title>inferred_outlives_crate (764,858 samples, 0.13%)</title><rect x="63.4989%" y="149" width="0.1334%" height="15" fill="rgb(226,81,46)"/><text x="63.7489%" y="159.50"></text></g><g><title>type_collecting (5,874,786 samples, 1.02%)</title><rect x="62.6549%" y="229" width="1.0245%" height="15" fill="rgb(247,70,30)"/><text x="62.9049%" y="239.50"></text></g><g><title>collect_mod_item_types (5,858,446 samples, 1.02%)</title><rect x="62.6577%" y="213" width="1.0217%" height="15" fill="rgb(212,68,19)"/><text x="62.9077%" y="223.50"></text></g><g><title>evaluate_obligation (1,189,986 samples, 0.21%)</title><rect x="64.6751%" y="197" width="0.2075%" height="15" fill="rgb(240,187,13)"/><text x="64.9251%" y="207.50"></text></g><g><title>implied_outlives_bounds (706,415 samples, 0.12%)</title><rect x="64.8861%" y="197" width="0.1232%" height="15" fill="rgb(223,113,26)"/><text x="65.1361%" y="207.50"></text></g><g><title>param_env (799,973 samples, 0.14%)</title><rect x="65.0597%" y="197" width="0.1395%" height="15" fill="rgb(206,192,2)"/><text x="65.3097%" y="207.50"></text></g><g><title>region_scope_tree (1,063,320 samples, 0.19%)</title><rect x="65.2165%" y="197" width="0.1854%" height="15" fill="rgb(241,108,4)"/><text x="65.4665%" y="207.50"></text></g><g><title>check_impl_item_well_formed (9,764,508 samples, 1.70%)</title><rect x="63.7798%" y="213" width="1.7029%" height="15" fill="rgb(247,173,49)"/><text x="64.0298%" y="223.50"></text></g><g><title>adt_sized_constraint (649,018 samples, 0.11%)</title><rect x="66.0898%" y="181" width="0.1132%" height="15" fill="rgb(224,114,35)"/><text x="66.3398%" y="191.50"></text></g><g><title>evaluate_obligation (1,363,754 samples, 0.24%)</title><rect x="65.9723%" y="197" width="0.2378%" height="15" fill="rgb(245,159,27)"/><text x="66.2223%" y="207.50"></text></g><g><title>param_env (587,128 samples, 0.10%)</title><rect x="66.3319%" y="197" width="0.1024%" height="15" fill="rgb(245,172,44)"/><text x="66.5819%" y="207.50"></text></g><g><title>check_item_well_formed (6,117,859 samples, 1.07%)</title><rect x="65.4827%" y="213" width="1.0669%" height="15" fill="rgb(236,23,11)"/><text x="65.7327%" y="223.50"></text></g><g><title>analysis (381,037,207 samples, 66.45%)</title><rect x="0.1737%" y="261" width="66.4507%" height="15" fill="rgb(205,117,38)"/><text x="0.4237%" y="271.50">analysis</text></g><g><title>type_check_crate (253,661,583 samples, 44.24%)</title><rect x="22.3872%" y="245" width="44.2371%" height="15" fill="rgb(237,72,25)"/><text x="22.6372%" y="255.50">type_check_crate</text></g><g><title>wf_checking (16,868,338 samples, 2.94%)</title><rect x="63.6826%" y="229" width="2.9417%" height="15" fill="rgb(244,70,9)"/><text x="63.9326%" y="239.50">wf..</text></g><g><title>codegen_crate (876,950 samples, 0.15%)</title><rect x="66.6263%" y="261" width="0.1529%" height="15" fill="rgb(217,125,39)"/><text x="66.8763%" y="271.50"></text></g><g><title>metadata_register_crate (16,933,951 samples, 2.95%)</title><rect x="88.0154%" y="213" width="2.9532%" height="15" fill="rgb(235,36,10)"/><text x="88.2654%" y="223.50">met..</text></g><g><title>metadata_register_crate (11,661,197 samples, 2.03%)</title><rect x="88.9349%" y="197" width="2.0336%" height="15" fill="rgb(251,123,47)"/><text x="89.1849%" y="207.50">m..</text></g><g><title>metadata_register_crate (9,465,528 samples, 1.65%)</title><rect x="89.3178%" y="181" width="1.6507%" height="15" fill="rgb(221,13,13)"/><text x="89.5678%" y="191.50"></text></g><g><title>macro_expand_crate (138,686,279 samples, 24.19%)</title><rect x="66.9277%" y="245" width="24.1861%" height="15" fill="rgb(238,131,9)"/><text x="67.1777%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (138,659,769 samples, 24.18%)</title><rect x="66.9323%" y="229" width="24.1815%" height="15" fill="rgb(211,50,8)"/><text x="67.1823%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (832,439 samples, 0.15%)</title><rect x="90.9686%" y="213" width="0.1452%" height="15" fill="rgb(245,182,24)"/><text x="91.2186%" y="223.50"></text></g><g><title>late_resolve_crate (5,836,685 samples, 1.02%)</title><rect x="91.2303%" y="229" width="1.0179%" height="15" fill="rgb(242,14,37)"/><text x="91.4803%" y="239.50"></text></g><g><title>configure_and_expand (146,348,235 samples, 25.52%)</title><rect x="66.7792%" y="261" width="25.5223%" height="15" fill="rgb(246,228,12)"/><text x="67.0292%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (6,589,794 samples, 1.15%)</title><rect x="91.1523%" y="245" width="1.1492%" height="15" fill="rgb(213,55,15)"/><text x="91.4023%" y="255.50"></text></g><g><title>early_lint_checks (1,240,934 samples, 0.22%)</title><rect x="92.4025%" y="261" width="0.2164%" height="15" fill="rgb(209,9,3)"/><text x="92.6525%" y="271.50"></text></g><g><title>free_global_ctxt (6,365,161 samples, 1.11%)</title><rect x="92.6189%" y="261" width="1.1100%" height="15" fill="rgb(230,59,30)"/><text x="92.8689%" y="271.50"></text></g><g><title>layout_of (805,361 samples, 0.14%)</title><rect x="95.6892%" y="165" width="0.1405%" height="15" fill="rgb(209,121,21)"/><text x="95.9392%" y="175.50"></text></g><g><title>layout_of (926,531 samples, 0.16%)</title><rect x="95.6722%" y="181" width="0.1616%" height="15" fill="rgb(220,109,13)"/><text x="95.9222%" y="191.50"></text></g><g><title>layout_of (1,017,292 samples, 0.18%)</title><rect x="95.6588%" y="197" width="0.1774%" height="15" fill="rgb(232,18,1)"/><text x="95.9088%" y="207.50"></text></g><g><title>layout_of (1,282,205 samples, 0.22%)</title><rect x="95.6130%" y="229" width="0.2236%" height="15" fill="rgb(215,41,42)"/><text x="95.8630%" y="239.50"></text></g><g><title>layout_of (1,081,322 samples, 0.19%)</title><rect x="95.6480%" y="213" width="0.1886%" height="15" fill="rgb(224,123,36)"/><text x="95.8980%" y="223.50"></text></g><g><title>is_copy_raw (955,571 samples, 0.17%)</title><rect x="97.1014%" y="197" width="0.1666%" height="15" fill="rgb(240,125,3)"/><text x="97.3514%" y="207.50"></text></g><g><title>evaluate_obligation (782,749 samples, 0.14%)</title><rect x="97.1316%" y="181" width="0.1365%" height="15" fill="rgb(205,98,50)"/><text x="97.3816%" y="191.50"></text></g><g><title>needs_drop_raw (1,665,898 samples, 0.29%)</title><rect x="97.0251%" y="213" width="0.2905%" height="15" fill="rgb(205,185,37)"/><text x="97.2751%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,610,135 samples, 1.50%)</title><rect x="95.8366%" y="229" width="1.5016%" height="15" fill="rgb(238,207,15)"/><text x="96.0866%" y="239.50"></text></g><g><title>optimized_mir (15,775,638 samples, 2.75%)</title><rect x="94.5901%" y="245" width="2.7512%" height="15" fill="rgb(213,199,42)"/><text x="94.8401%" y="255.50">op..</text></g><g><title>generate_crate_metadata (20,894,383 samples, 3.64%)</title><rect x="93.7290%" y="261" width="3.6439%" height="15" fill="rgb(235,201,11)"/><text x="93.9790%" y="271.50">gene..</text></g><g><title>hir_lowering (8,654,107 samples, 1.51%)</title><rect x="97.3728%" y="261" width="1.5092%" height="15" fill="rgb(207,46,11)"/><text x="97.6228%" y="271.50"></text></g><g><title>parse_crate (3,791,123 samples, 0.66%)</title><rect x="98.8961%" y="261" width="0.6611%" height="15" fill="rgb(241,35,35)"/><text x="99.1461%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (1,660,839 samples, 0.29%)</title><rect x="99.5952%" y="261" width="0.2896%" height="15" fill="rgb(243,32,47)"/><text x="99.8452%" y="271.50"></text></g><g><title>all (573,413,576 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (573,413,576 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="287.50">rustc</text></g></svg></svg>