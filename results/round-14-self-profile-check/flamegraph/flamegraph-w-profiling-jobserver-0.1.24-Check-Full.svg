<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (139,451 samples, 0.13%)</title><rect x="12.0250%" y="181" width="0.1251%" height="15" fill="rgb(227,0,7)"/><text x="12.2750%" y="191.50"></text></g><g><title>param_env (372,748 samples, 0.33%)</title><rect x="13.8301%" y="149" width="0.3343%" height="15" fill="rgb(217,0,24)"/><text x="14.0801%" y="159.50"></text></g><g><title>item_attrs (406,493 samples, 0.36%)</title><rect x="14.7938%" y="117" width="0.3645%" height="15" fill="rgb(221,193,54)"/><text x="15.0438%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (395,513 samples, 0.35%)</title><rect x="14.8036%" y="101" width="0.3547%" height="15" fill="rgb(248,212,6)"/><text x="15.0536%" y="111.50"></text></g><g><title>codegen_fn_attrs (555,986 samples, 0.50%)</title><rect x="14.6834%" y="133" width="0.4986%" height="15" fill="rgb(208,68,35)"/><text x="14.9334%" y="143.50"></text></g><g><title>adt_drop_tys (144,241 samples, 0.13%)</title><rect x="18.0612%" y="69" width="0.1294%" height="15" fill="rgb(232,128,0)"/><text x="18.3112%" y="79.50"></text></g><g><title>adt_drop_tys (333,263 samples, 0.30%)</title><rect x="18.0442%" y="85" width="0.2989%" height="15" fill="rgb(207,160,47)"/><text x="18.2942%" y="95.50"></text></g><g><title>param_env (129,023 samples, 0.12%)</title><rect x="18.4369%" y="85" width="0.1157%" height="15" fill="rgb(228,23,34)"/><text x="18.6869%" y="95.50"></text></g><g><title>adt_drop_tys (615,846 samples, 0.55%)</title><rect x="18.0032%" y="101" width="0.5523%" height="15" fill="rgb(218,30,26)"/><text x="18.2532%" y="111.50"></text></g><g><title>is_copy_raw (997,886 samples, 0.89%)</title><rect x="18.5555%" y="101" width="0.8949%" height="15" fill="rgb(220,122,19)"/><text x="18.8055%" y="111.50"></text></g><g><title>evaluate_obligation (828,374 samples, 0.74%)</title><rect x="18.7075%" y="85" width="0.7429%" height="15" fill="rgb(250,228,42)"/><text x="18.9575%" y="95.50"></text></g><g><title>needs_drop_raw (1,780,273 samples, 1.60%)</title><rect x="17.8689%" y="117" width="1.5965%" height="15" fill="rgb(240,193,28)"/><text x="18.1189%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (287,001 samples, 0.26%)</title><rect x="19.6877%" y="101" width="0.2574%" height="15" fill="rgb(216,20,37)"/><text x="19.9377%" y="111.50"></text></g><g><title>impl_parent (251,630 samples, 0.23%)</title><rect x="20.3888%" y="85" width="0.2257%" height="15" fill="rgb(206,188,39)"/><text x="20.6388%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (161,870 samples, 0.15%)</title><rect x="20.4693%" y="69" width="0.1452%" height="15" fill="rgb(217,207,13)"/><text x="20.7193%" y="79.50"></text></g><g><title>specialization_graph_of (1,168,531 samples, 1.05%)</title><rect x="20.0385%" y="101" width="1.0479%" height="15" fill="rgb(231,73,38)"/><text x="20.2885%" y="111.50"></text></g><g><title>impl_trait_ref (526,277 samples, 0.47%)</title><rect x="20.6144%" y="85" width="0.4720%" height="15" fill="rgb(225,20,46)"/><text x="20.8644%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (449,725 samples, 0.40%)</title><rect x="20.6831%" y="69" width="0.4033%" height="15" fill="rgb(210,31,41)"/><text x="20.9331%" y="79.50"></text></g><g><title>resolve_instance (1,909,001 samples, 1.71%)</title><rect x="19.4654%" y="117" width="1.7120%" height="15" fill="rgb(221,200,47)"/><text x="19.7154%" y="127.50"></text></g><g><title>thir_body (1,170,973 samples, 1.05%)</title><rect x="21.2033%" y="117" width="1.0501%" height="15" fill="rgb(226,26,5)"/><text x="21.4533%" y="127.50"></text></g><g><title>mir_const (10,328,091 samples, 9.26%)</title><rect x="13.0084%" y="165" width="9.2620%" height="15" fill="rgb(249,33,26)"/><text x="13.2584%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (9,039,041 samples, 8.11%)</title><rect x="14.1643%" y="149" width="8.1060%" height="15" fill="rgb(235,183,28)"/><text x="14.4143%" y="159.50">unsafety_ch..</text></g><g><title>mir_built (7,904,279 samples, 7.09%)</title><rect x="15.1820%" y="133" width="7.0884%" height="15" fill="rgb(221,5,38)"/><text x="15.4320%" y="143.50">mir_built</text></g><g><title>has_structural_eq_impls (179,592 samples, 0.16%)</title><rect x="22.4125%" y="149" width="0.1611%" height="15" fill="rgb(247,18,42)"/><text x="22.6625%" y="159.50"></text></g><g><title>evaluate_obligation (160,472 samples, 0.14%)</title><rect x="22.4296%" y="133" width="0.1439%" height="15" fill="rgb(241,131,45)"/><text x="22.6796%" y="143.50"></text></g><g><title>trait_impls_of (133,431 samples, 0.12%)</title><rect x="22.4539%" y="117" width="0.1197%" height="15" fill="rgb(249,31,29)"/><text x="22.7039%" y="127.50"></text></g><g><title>mir_const_qualif (600,726 samples, 0.54%)</title><rect x="22.2704%" y="165" width="0.5387%" height="15" fill="rgb(225,111,53)"/><text x="22.5204%" y="175.50"></text></g><g><title>mir_promoted (11,815,901 samples, 10.60%)</title><rect x="12.2145%" y="181" width="10.5963%" height="15" fill="rgb(238,160,17)"/><text x="12.4645%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (275,802 samples, 0.25%)</title><rect x="22.8112%" y="181" width="0.2473%" height="15" fill="rgb(214,148,48)"/><text x="23.0612%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (575,995 samples, 0.52%)</title><rect x="23.0585%" y="181" width="0.5165%" height="15" fill="rgb(232,36,49)"/><text x="23.3085%" y="191.50"></text></g><g><title>normalize_projection_ty (351,862 samples, 0.32%)</title><rect x="23.2595%" y="165" width="0.3155%" height="15" fill="rgb(209,103,24)"/><text x="23.5095%" y="175.50"></text></g><g><title>type_op_normalize_predicate (186,452 samples, 0.17%)</title><rect x="23.5751%" y="181" width="0.1672%" height="15" fill="rgb(229,88,8)"/><text x="23.8251%" y="191.50"></text></g><g><title>normalize_projection_ty (138,432 samples, 0.12%)</title><rect x="23.6181%" y="165" width="0.1241%" height="15" fill="rgb(213,181,19)"/><text x="23.8681%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,686,751 samples, 2.41%)</title><rect x="23.7423%" y="181" width="2.4094%" height="15" fill="rgb(254,191,54)"/><text x="23.9923%" y="191.50">ty..</text></g><g><title>evaluate_obligation (151,462 samples, 0.14%)</title><rect x="26.0159%" y="165" width="0.1358%" height="15" fill="rgb(241,83,37)"/><text x="26.2659%" y="175.50"></text></g><g><title>MIR_borrow_checking (28,394,395 samples, 25.46%)</title><rect x="0.6956%" y="213" width="25.4635%" height="15" fill="rgb(233,36,39)"/><text x="0.9456%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (28,295,934 samples, 25.38%)</title><rect x="0.7839%" y="197" width="25.3752%" height="15" fill="rgb(226,3,54)"/><text x="1.0339%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (170,342 samples, 0.15%)</title><rect x="26.1591%" y="213" width="0.1528%" height="15" fill="rgb(245,192,40)"/><text x="26.4091%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (115,031 samples, 0.10%)</title><rect x="26.2087%" y="197" width="0.1032%" height="15" fill="rgb(238,167,29)"/><text x="26.4587%" y="207.50"></text></g><g><title>hir_module_items (139,022 samples, 0.12%)</title><rect x="26.3119%" y="213" width="0.1247%" height="15" fill="rgb(232,182,51)"/><text x="26.5619%" y="223.50"></text></g><g><title>codegen_fn_attrs (160,032 samples, 0.14%)</title><rect x="26.7511%" y="149" width="0.1435%" height="15" fill="rgb(231,60,39)"/><text x="27.0011%" y="159.50"></text></g><g><title>codegen_fn_attrs (287,823 samples, 0.26%)</title><rect x="26.6414%" y="181" width="0.2581%" height="15" fill="rgb(208,69,12)"/><text x="26.8914%" y="191.50"></text></g><g><title>should_inherit_track_caller (245,082 samples, 0.22%)</title><rect x="26.6797%" y="165" width="0.2198%" height="15" fill="rgb(235,93,37)"/><text x="26.9297%" y="175.50"></text></g><g><title>check_mod_attrs (496,965 samples, 0.45%)</title><rect x="26.4540%" y="197" width="0.4457%" height="15" fill="rgb(213,116,39)"/><text x="26.7040%" y="207.50"></text></g><g><title>lookup_deprecation_entry (132,433 samples, 0.12%)</title><rect x="27.1876%" y="181" width="0.1188%" height="15" fill="rgb(222,207,29)"/><text x="27.4376%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (389,065 samples, 0.35%)</title><rect x="27.0490%" y="197" width="0.3489%" height="15" fill="rgb(206,96,30)"/><text x="27.2990%" y="207.50"></text></g><g><title>misc_checking_1 (1,113,052 samples, 1.00%)</title><rect x="26.4370%" y="213" width="0.9982%" height="15" fill="rgb(218,138,4)"/><text x="26.6870%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (490,535 samples, 0.44%)</title><rect x="27.4367%" y="197" width="0.4399%" height="15" fill="rgb(250,191,14)"/><text x="27.6867%" y="207.50"></text></g><g><title>check_mod_liveness (395,134 samples, 0.35%)</title><rect x="27.5223%" y="181" width="0.3543%" height="15" fill="rgb(239,60,40)"/><text x="27.7723%" y="191.50"></text></g><g><title>misc_checking_2 (1,206,093 samples, 1.08%)</title><rect x="27.4352%" y="213" width="1.0816%" height="15" fill="rgb(206,27,48)"/><text x="27.6852%" y="223.50"></text></g><g><title>match_checking (713,838 samples, 0.64%)</title><rect x="27.8766%" y="197" width="0.6402%" height="15" fill="rgb(225,35,8)"/><text x="28.1266%" y="207.50"></text></g><g><title>check_match (687,718 samples, 0.62%)</title><rect x="27.9001%" y="181" width="0.6167%" height="15" fill="rgb(250,213,24)"/><text x="28.1501%" y="191.50"></text></g><g><title>check_private_in_public (172,782 samples, 0.15%)</title><rect x="28.5255%" y="197" width="0.1549%" height="15" fill="rgb(247,123,22)"/><text x="28.7755%" y="207.50"></text></g><g><title>death_checking (339,324 samples, 0.30%)</title><rect x="28.6805%" y="197" width="0.3043%" height="15" fill="rgb(231,138,38)"/><text x="28.9305%" y="207.50"></text></g><g><title>eval_to_allocation_raw (419,555 samples, 0.38%)</title><rect x="29.8337%" y="165" width="0.3762%" height="15" fill="rgb(231,145,46)"/><text x="30.0837%" y="175.50"></text></g><g><title>eval_to_allocation_raw (415,145 samples, 0.37%)</title><rect x="29.8377%" y="149" width="0.3723%" height="15" fill="rgb(251,118,11)"/><text x="30.0877%" y="159.50"></text></g><g><title>param_env (166,622 samples, 0.15%)</title><rect x="30.2100%" y="165" width="0.1494%" height="15" fill="rgb(217,147,25)"/><text x="30.4600%" y="175.50"></text></g><g><title>crate_lints (2,669,980 samples, 2.39%)</title><rect x="28.9866%" y="181" width="2.3944%" height="15" fill="rgb(247,81,37)"/><text x="29.2366%" y="191.50">cr..</text></g><g><title>type_of (1,077,058 samples, 0.97%)</title><rect x="30.4151%" y="165" width="0.9659%" height="15" fill="rgb(209,12,38)"/><text x="30.6651%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (842,194 samples, 0.76%)</title><rect x="30.6258%" y="149" width="0.7553%" height="15" fill="rgb(227,1,9)"/><text x="30.8758%" y="159.50"></text></g><g><title>lint_checking (3,153,215 samples, 2.83%)</title><rect x="28.9848%" y="197" width="2.8277%" height="15" fill="rgb(248,47,43)"/><text x="29.2348%" y="207.50">li..</text></g><g><title>module_lints (481,155 samples, 0.43%)</title><rect x="31.3810%" y="181" width="0.4315%" height="15" fill="rgb(221,10,30)"/><text x="31.6310%" y="191.50"></text></g><g><title>lint_mod (477,665 samples, 0.43%)</title><rect x="31.3842%" y="165" width="0.4284%" height="15" fill="rgb(210,229,1)"/><text x="31.6342%" y="175.50"></text></g><g><title>privacy_access_levels (159,242 samples, 0.14%)</title><rect x="31.8125%" y="197" width="0.1428%" height="15" fill="rgb(222,148,37)"/><text x="32.0625%" y="207.50"></text></g><g><title>privacy_checking_modules (796,929 samples, 0.71%)</title><rect x="31.9553%" y="197" width="0.7147%" height="15" fill="rgb(234,67,33)"/><text x="32.2053%" y="207.50"></text></g><g><title>check_mod_privacy (794,249 samples, 0.71%)</title><rect x="31.9577%" y="181" width="0.7123%" height="15" fill="rgb(247,98,35)"/><text x="32.2077%" y="191.50"></text></g><g><title>misc_checking_3 (4,644,412 samples, 4.17%)</title><rect x="28.5168%" y="213" width="4.1650%" height="15" fill="rgb(247,138,52)"/><text x="28.7668%" y="223.50">misc_..</text></g><g><title>impl_parent (1,689,856 samples, 1.52%)</title><rect x="34.5783%" y="149" width="1.5154%" height="15" fill="rgb(213,79,30)"/><text x="34.8283%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (935,972 samples, 0.84%)</title><rect x="35.2543%" y="133" width="0.8394%" height="15" fill="rgb(246,177,23)"/><text x="35.5043%" y="143.50"></text></g><g><title>impl_trait_ref (4,038,319 samples, 3.62%)</title><rect x="36.0937%" y="149" width="3.6215%" height="15" fill="rgb(230,62,27)"/><text x="36.3437%" y="159.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,482,920 samples, 3.12%)</title><rect x="36.5918%" y="133" width="3.1234%" height="15" fill="rgb(216,154,8)"/><text x="36.8418%" y="143.50">met..</text></g><g><title>coherent_trait (8,196,461 samples, 7.35%)</title><rect x="32.7448%" y="181" width="7.3504%" height="15" fill="rgb(244,35,45)"/><text x="32.9948%" y="191.50">coherent_t..</text></g><g><title>specialization_graph_of (8,185,901 samples, 7.34%)</title><rect x="32.7543%" y="165" width="7.3410%" height="15" fill="rgb(251,115,12)"/><text x="33.0043%" y="175.50">specializa..</text></g><g><title>trait_impls_of (421,926 samples, 0.38%)</title><rect x="39.7169%" y="149" width="0.3784%" height="15" fill="rgb(240,54,50)"/><text x="39.9669%" y="159.50"></text></g><g><title>coherence_checking (8,245,301 samples, 7.39%)</title><rect x="32.7328%" y="197" width="7.3942%" height="15" fill="rgb(233,84,52)"/><text x="32.9828%" y="207.50">coherence_..</text></g><g><title>associated_item (446,565 samples, 0.40%)</title><rect x="54.3710%" y="133" width="0.4005%" height="15" fill="rgb(207,117,47)"/><text x="54.6210%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (360,334 samples, 0.32%)</title><rect x="54.4483%" y="117" width="0.3231%" height="15" fill="rgb(249,43,39)"/><text x="54.6983%" y="127.50"></text></g><g><title>associated_items (634,317 samples, 0.57%)</title><rect x="54.2287%" y="149" width="0.5688%" height="15" fill="rgb(209,38,44)"/><text x="54.4787%" y="159.50"></text></g><g><title>adt_destructor (127,411 samples, 0.11%)</title><rect x="55.2758%" y="85" width="0.1143%" height="15" fill="rgb(236,212,23)"/><text x="55.5258%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (125,761 samples, 0.11%)</title><rect x="55.2773%" y="69" width="0.1128%" height="15" fill="rgb(242,79,21)"/><text x="55.5273%" y="79.50"></text></g><g><title>type_of (115,241 samples, 0.10%)</title><rect x="55.2867%" y="53" width="0.1033%" height="15" fill="rgb(211,96,35)"/><text x="55.5367%" y="63.50"></text></g><g><title>metadata_decode_entry_type_of (114,181 samples, 0.10%)</title><rect x="55.2877%" y="37" width="0.1024%" height="15" fill="rgb(253,215,40)"/><text x="55.5377%" y="47.50"></text></g><g><title>adt_dtorck_constraint (230,762 samples, 0.21%)</title><rect x="55.2249%" y="101" width="0.2069%" height="15" fill="rgb(211,81,21)"/><text x="55.4749%" y="111.50"></text></g><g><title>adt_dtorck_constraint (262,162 samples, 0.24%)</title><rect x="55.2064%" y="117" width="0.2351%" height="15" fill="rgb(208,190,38)"/><text x="55.4564%" y="127.50"></text></g><g><title>adt_dtorck_constraint (403,554 samples, 0.36%)</title><rect x="55.1066%" y="133" width="0.3619%" height="15" fill="rgb(235,213,38)"/><text x="55.3566%" y="143.50"></text></g><g><title>dropck_outlives (739,946 samples, 0.66%)</title><rect x="54.8649%" y="149" width="0.6636%" height="15" fill="rgb(237,122,38)"/><text x="55.1149%" y="159.50"></text></g><g><title>adt_def (214,212 samples, 0.19%)</title><rect x="56.7824%" y="117" width="0.1921%" height="15" fill="rgb(244,218,35)"/><text x="57.0324%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (211,652 samples, 0.19%)</title><rect x="56.7847%" y="101" width="0.1898%" height="15" fill="rgb(240,68,47)"/><text x="57.0347%" y="111.50"></text></g><g><title>item_attrs (167,262 samples, 0.15%)</title><rect x="56.8245%" y="85" width="0.1500%" height="15" fill="rgb(210,16,53)"/><text x="57.0745%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (164,432 samples, 0.15%)</title><rect x="56.8271%" y="69" width="0.1475%" height="15" fill="rgb(235,124,12)"/><text x="57.0771%" y="79.50"></text></g><g><title>adt_sized_constraint (315,185 samples, 0.28%)</title><rect x="56.7722%" y="133" width="0.2827%" height="15" fill="rgb(224,169,11)"/><text x="57.0222%" y="143.50"></text></g><g><title>generics_of (173,953 samples, 0.16%)</title><rect x="57.0557%" y="133" width="0.1560%" height="15" fill="rgb(250,166,2)"/><text x="57.3057%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (141,012 samples, 0.13%)</title><rect x="57.0852%" y="117" width="0.1265%" height="15" fill="rgb(242,216,29)"/><text x="57.3352%" y="127.50"></text></g><g><title>impl_trait_ref (198,161 samples, 0.18%)</title><rect x="57.2553%" y="133" width="0.1777%" height="15" fill="rgb(230,116,27)"/><text x="57.5053%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (168,071 samples, 0.15%)</title><rect x="57.2822%" y="117" width="0.1507%" height="15" fill="rgb(228,99,48)"/><text x="57.5322%" y="127.50"></text></g><g><title>predicates_of (217,681 samples, 0.20%)</title><rect x="57.4549%" y="133" width="0.1952%" height="15" fill="rgb(253,11,6)"/><text x="57.7049%" y="143.50"></text></g><g><title>predicates_defined_on (137,321 samples, 0.12%)</title><rect x="57.5270%" y="117" width="0.1231%" height="15" fill="rgb(247,143,39)"/><text x="57.7770%" y="127.50"></text></g><g><title>specializes (116,162 samples, 0.10%)</title><rect x="57.6501%" y="133" width="0.1042%" height="15" fill="rgb(236,97,10)"/><text x="57.9001%" y="143.50"></text></g><g><title>trait_impls_of (612,786 samples, 0.55%)</title><rect x="57.7732%" y="133" width="0.5495%" height="15" fill="rgb(233,208,19)"/><text x="58.0232%" y="143.50"></text></g><g><title>implementations_of_trait (231,232 samples, 0.21%)</title><rect x="58.1154%" y="117" width="0.2074%" height="15" fill="rgb(216,164,2)"/><text x="58.3654%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (142,982 samples, 0.13%)</title><rect x="58.1945%" y="101" width="0.1282%" height="15" fill="rgb(220,129,5)"/><text x="58.4445%" y="111.50"></text></g><g><title>evaluate_obligation (3,125,249 samples, 2.80%)</title><rect x="55.5285%" y="149" width="2.8027%" height="15" fill="rgb(242,17,10)"/><text x="55.7785%" y="159.50">ev..</text></g><g><title>fn_sig (129,020 samples, 0.12%)</title><rect x="58.3656%" y="149" width="0.1157%" height="15" fill="rgb(242,107,0)"/><text x="58.6156%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (113,400 samples, 0.10%)</title><rect x="58.3797%" y="133" width="0.1017%" height="15" fill="rgb(251,28,31)"/><text x="58.6297%" y="143.50"></text></g><g><title>generics_of (139,191 samples, 0.12%)</title><rect x="58.4813%" y="149" width="0.1248%" height="15" fill="rgb(233,223,10)"/><text x="58.7313%" y="159.50"></text></g><g><title>item_attrs (222,910 samples, 0.20%)</title><rect x="58.7853%" y="149" width="0.1999%" height="15" fill="rgb(215,21,27)"/><text x="59.0353%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (213,380 samples, 0.19%)</title><rect x="58.7939%" y="133" width="0.1914%" height="15" fill="rgb(232,23,21)"/><text x="59.0439%" y="143.50"></text></g><g><title>method_autoderef_steps (177,353 samples, 0.16%)</title><rect x="59.0557%" y="149" width="0.1590%" height="15" fill="rgb(244,5,23)"/><text x="59.3057%" y="159.50"></text></g><g><title>explicit_predicates_of (135,480 samples, 0.12%)</title><rect x="59.5695%" y="117" width="0.1215%" height="15" fill="rgb(226,81,46)"/><text x="59.8195%" y="127.50"></text></g><g><title>predicates_of (466,386 samples, 0.42%)</title><rect x="59.3368%" y="149" width="0.4182%" height="15" fill="rgb(247,70,30)"/><text x="59.5868%" y="159.50"></text></g><g><title>predicates_defined_on (312,493 samples, 0.28%)</title><rect x="59.4748%" y="133" width="0.2802%" height="15" fill="rgb(212,68,19)"/><text x="59.7248%" y="143.50"></text></g><g><title>associated_item (210,225 samples, 0.19%)</title><rect x="66.7245%" y="117" width="0.1885%" height="15" fill="rgb(240,187,13)"/><text x="66.9745%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (167,014 samples, 0.15%)</title><rect x="66.7632%" y="101" width="0.1498%" height="15" fill="rgb(223,113,26)"/><text x="67.0132%" y="111.50"></text></g><g><title>associated_items (311,926 samples, 0.28%)</title><rect x="66.6511%" y="133" width="0.2797%" height="15" fill="rgb(206,192,2)"/><text x="66.9011%" y="143.50"></text></g><g><title>adt_dtorck_constraint (141,962 samples, 0.13%)</title><rect x="67.3108%" y="85" width="0.1273%" height="15" fill="rgb(241,108,4)"/><text x="67.5608%" y="95.50"></text></g><g><title>adt_dtorck_constraint (193,572 samples, 0.17%)</title><rect x="67.2750%" y="101" width="0.1736%" height="15" fill="rgb(247,173,49)"/><text x="67.5250%" y="111.50"></text></g><g><title>adt_dtorck_constraint (441,886 samples, 0.40%)</title><rect x="67.1130%" y="117" width="0.3963%" height="15" fill="rgb(224,114,35)"/><text x="67.3630%" y="127.50"></text></g><g><title>dropck_outlives (609,067 samples, 0.55%)</title><rect x="66.9723%" y="133" width="0.5462%" height="15" fill="rgb(245,159,27)"/><text x="67.2223%" y="143.50"></text></g><g><title>adt_sized_constraint (134,370 samples, 0.12%)</title><rect x="68.4424%" y="117" width="0.1205%" height="15" fill="rgb(245,172,44)"/><text x="68.6924%" y="127.50"></text></g><g><title>opt_def_kind (237,582 samples, 0.21%)</title><rect x="68.7401%" y="101" width="0.2131%" height="15" fill="rgb(236,23,11)"/><text x="68.9901%" y="111.50"></text></g><g><title>predicates_of (337,534 samples, 0.30%)</title><rect x="68.7151%" y="117" width="0.3027%" height="15" fill="rgb(205,117,38)"/><text x="68.9651%" y="127.50"></text></g><g><title>trait_impls_of (312,662 samples, 0.28%)</title><rect x="69.0938%" y="117" width="0.2804%" height="15" fill="rgb(237,72,25)"/><text x="69.3438%" y="127.50"></text></g><g><title>evaluate_obligation (2,070,100 samples, 1.86%)</title><rect x="67.5185%" y="133" width="1.8564%" height="15" fill="rgb(244,70,9)"/><text x="67.7685%" y="143.50">e..</text></g><g><title>is_copy_raw (329,715 samples, 0.30%)</title><rect x="69.7172%" y="133" width="0.2957%" height="15" fill="rgb(217,125,39)"/><text x="69.9672%" y="143.50"></text></g><g><title>evaluate_obligation (278,475 samples, 0.25%)</title><rect x="69.7632%" y="117" width="0.2497%" height="15" fill="rgb(235,36,10)"/><text x="70.0132%" y="127.50"></text></g><g><title>evaluate_obligation (214,441 samples, 0.19%)</title><rect x="70.2405%" y="117" width="0.1923%" height="15" fill="rgb(251,123,47)"/><text x="70.4905%" y="127.50"></text></g><g><title>method_autoderef_steps (387,454 samples, 0.35%)</title><rect x="70.1018%" y="133" width="0.3475%" height="15" fill="rgb(221,13,13)"/><text x="70.3518%" y="143.50"></text></g><g><title>object_safety_violations (127,871 samples, 0.11%)</title><rect x="70.4493%" y="133" width="0.1147%" height="15" fill="rgb(238,131,9)"/><text x="70.6993%" y="143.50"></text></g><g><title>predicates_of (245,023 samples, 0.22%)</title><rect x="70.5787%" y="133" width="0.2197%" height="15" fill="rgb(211,50,8)"/><text x="70.8287%" y="143.50"></text></g><g><title>predicates_defined_on (171,851 samples, 0.15%)</title><rect x="70.6443%" y="117" width="0.1541%" height="15" fill="rgb(245,182,24)"/><text x="70.8943%" y="127.50"></text></g><g><title>typeck (12,347,376 samples, 11.07%)</title><rect x="59.8715%" y="149" width="11.0729%" height="15" fill="rgb(242,14,37)"/><text x="60.1215%" y="159.50">typeck</text></g><g><title>item_bodies_checking (34,419,993 samples, 30.87%)</title><rect x="40.1457%" y="197" width="30.8672%" height="15" fill="rgb(246,228,12)"/><text x="40.3957%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (34,416,923 samples, 30.86%)</title><rect x="40.1485%" y="181" width="30.8644%" height="15" fill="rgb(213,55,15)"/><text x="40.3985%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (34,357,112 samples, 30.81%)</title><rect x="40.2021%" y="165" width="30.8108%" height="15" fill="rgb(209,9,3)"/><text x="40.4521%" y="175.50">typeck</text></g><g><title>item_types_checking (939,701 samples, 0.84%)</title><rect x="71.0129%" y="197" width="0.8427%" height="15" fill="rgb(230,59,30)"/><text x="71.2629%" y="207.50"></text></g><g><title>check_mod_item_types (936,610 samples, 0.84%)</title><rect x="71.0157%" y="181" width="0.8399%" height="15" fill="rgb(209,121,21)"/><text x="71.2657%" y="191.50"></text></g><g><title>typeck (396,275 samples, 0.36%)</title><rect x="71.5002%" y="165" width="0.3554%" height="15" fill="rgb(220,109,13)"/><text x="71.7502%" y="175.50"></text></g><g><title>late_bound_vars_map (124,232 samples, 0.11%)</title><rect x="72.2433%" y="149" width="0.1114%" height="15" fill="rgb(232,18,1)"/><text x="72.4933%" y="159.50"></text></g><g><title>resolve_lifetimes (113,941 samples, 0.10%)</title><rect x="72.2525%" y="133" width="0.1022%" height="15" fill="rgb(215,41,42)"/><text x="72.5025%" y="143.50"></text></g><g><title>fn_sig (401,614 samples, 0.36%)</title><rect x="72.0418%" y="165" width="0.3602%" height="15" fill="rgb(224,123,36)"/><text x="72.2918%" y="175.50"></text></g><g><title>named_region_map (346,063 samples, 0.31%)</title><rect x="72.4831%" y="149" width="0.3103%" height="15" fill="rgb(240,125,3)"/><text x="72.7331%" y="159.50"></text></g><g><title>resolve_lifetimes (327,893 samples, 0.29%)</title><rect x="72.4994%" y="133" width="0.2940%" height="15" fill="rgb(205,98,50)"/><text x="72.7494%" y="143.50"></text></g><g><title>lint_levels (153,952 samples, 0.14%)</title><rect x="72.6554%" y="117" width="0.1381%" height="15" fill="rgb(205,185,37)"/><text x="72.9054%" y="127.50"></text></g><g><title>generics_of (446,805 samples, 0.40%)</title><rect x="72.4019%" y="165" width="0.4007%" height="15" fill="rgb(238,207,15)"/><text x="72.6519%" y="175.50"></text></g><g><title>explicit_predicates_of (191,812 samples, 0.17%)</title><rect x="72.8986%" y="133" width="0.1720%" height="15" fill="rgb(213,199,42)"/><text x="73.1486%" y="143.50"></text></g><g><title>predicates_of (487,776 samples, 0.44%)</title><rect x="72.8281%" y="165" width="0.4374%" height="15" fill="rgb(235,201,11)"/><text x="73.0781%" y="175.50"></text></g><g><title>predicates_defined_on (457,946 samples, 0.41%)</title><rect x="72.8548%" y="149" width="0.4107%" height="15" fill="rgb(207,46,11)"/><text x="73.1048%" y="159.50"></text></g><g><title>inferred_outlives_of (217,273 samples, 0.19%)</title><rect x="73.0706%" y="133" width="0.1948%" height="15" fill="rgb(241,35,35)"/><text x="73.3206%" y="143.50"></text></g><g><title>inferred_outlives_crate (205,023 samples, 0.18%)</title><rect x="73.0816%" y="117" width="0.1839%" height="15" fill="rgb(243,32,47)"/><text x="73.3316%" y="127.50"></text></g><g><title>type_of (119,372 samples, 0.11%)</title><rect x="73.1584%" y="101" width="0.1071%" height="15" fill="rgb(247,202,23)"/><text x="73.4084%" y="111.50"></text></g><g><title>type_collecting (1,654,968 samples, 1.48%)</title><rect x="71.8579%" y="197" width="1.4841%" height="15" fill="rgb(219,102,11)"/><text x="72.1079%" y="207.50"></text></g><g><title>collect_mod_item_types (1,647,788 samples, 1.48%)</title><rect x="71.8644%" y="181" width="1.4777%" height="15" fill="rgb(243,110,44)"/><text x="72.1144%" y="191.50"></text></g><g><title>adt_sized_constraint (180,901 samples, 0.16%)</title><rect x="74.6874%" y="149" width="0.1622%" height="15" fill="rgb(222,74,54)"/><text x="74.9374%" y="159.50"></text></g><g><title>evaluate_obligation (522,705 samples, 0.47%)</title><rect x="74.4135%" y="165" width="0.4688%" height="15" fill="rgb(216,99,12)"/><text x="74.6635%" y="175.50"></text></g><g><title>implied_outlives_bounds (177,943 samples, 0.16%)</title><rect x="74.8822%" y="165" width="0.1596%" height="15" fill="rgb(226,22,26)"/><text x="75.1322%" y="175.50"></text></g><g><title>param_env (147,151 samples, 0.13%)</title><rect x="75.0418%" y="165" width="0.1320%" height="15" fill="rgb(217,163,10)"/><text x="75.2918%" y="175.50"></text></g><g><title>region_scope_tree (356,652 samples, 0.32%)</title><rect x="75.2273%" y="165" width="0.3198%" height="15" fill="rgb(213,25,53)"/><text x="75.4773%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,361,407 samples, 2.12%)</title><rect x="73.4642%" y="181" width="2.1177%" height="15" fill="rgb(252,105,26)"/><text x="73.7142%" y="191.50">c..</text></g><g><title>adt_def (112,292 samples, 0.10%)</title><rect x="76.3423%" y="133" width="0.1007%" height="15" fill="rgb(220,39,43)"/><text x="76.5923%" y="143.50"></text></g><g><title>adt_sized_constraint (164,861 samples, 0.15%)</title><rect x="76.4430%" y="133" width="0.1478%" height="15" fill="rgb(229,68,48)"/><text x="76.6930%" y="143.50"></text></g><g><title>adt_sized_constraint (303,633 samples, 0.27%)</title><rect x="76.3299%" y="149" width="0.2723%" height="15" fill="rgb(252,8,32)"/><text x="76.5799%" y="159.50"></text></g><g><title>evaluate_obligation (651,818 samples, 0.58%)</title><rect x="76.1100%" y="165" width="0.5845%" height="15" fill="rgb(223,20,43)"/><text x="76.3600%" y="175.50"></text></g><g><title>object_safety_violations (275,123 samples, 0.25%)</title><rect x="76.7842%" y="165" width="0.2467%" height="15" fill="rgb(229,81,49)"/><text x="77.0342%" y="175.50"></text></g><g><title>param_env (186,071 samples, 0.17%)</title><rect x="77.0309%" y="165" width="0.1669%" height="15" fill="rgb(236,28,36)"/><text x="77.2809%" y="175.50"></text></g><g><title>analysis (85,706,942 samples, 76.86%)</title><rect x="0.4648%" y="229" width="76.8603%" height="15" fill="rgb(249,185,26)"/><text x="0.7148%" y="239.50">analysis</text></g><g><title>type_check_crate (49,781,723 samples, 44.64%)</title><rect x="32.6818%" y="213" width="44.6433%" height="15" fill="rgb(249,174,33)"/><text x="32.9318%" y="223.50">type_check_crate</text></g><g><title>wf_checking (4,437,139 samples, 3.98%)</title><rect x="73.3459%" y="197" width="3.9791%" height="15" fill="rgb(233,201,37)"/><text x="73.5959%" y="207.50">wf_c..</text></g><g><title>check_item_well_formed (1,943,851 samples, 1.74%)</title><rect x="75.5819%" y="181" width="1.7432%" height="15" fill="rgb(221,78,26)"/><text x="75.8319%" y="191.50"></text></g><g><title>codegen_crate (393,334 samples, 0.35%)</title><rect x="77.3309%" y="229" width="0.3527%" height="15" fill="rgb(250,127,30)"/><text x="77.5809%" y="239.50"></text></g><g><title>metadata_load_macro (122,723 samples, 0.11%)</title><rect x="88.1161%" y="181" width="0.1101%" height="15" fill="rgb(230,49,44)"/><text x="88.3661%" y="191.50"></text></g><g><title>metadata_register_crate (1,293,044 samples, 1.16%)</title><rect x="88.2262%" y="181" width="1.1596%" height="15" fill="rgb(229,67,23)"/><text x="88.4762%" y="191.50"></text></g><g><title>metadata_register_crate (463,628 samples, 0.42%)</title><rect x="88.9700%" y="165" width="0.4158%" height="15" fill="rgb(249,83,47)"/><text x="89.2200%" y="175.50"></text></g><g><title>macro_expand_crate (12,785,422 samples, 11.47%)</title><rect x="77.9774%" y="213" width="11.4657%" height="15" fill="rgb(215,43,3)"/><text x="78.2274%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (12,770,462 samples, 11.45%)</title><rect x="77.9908%" y="197" width="11.4523%" height="15" fill="rgb(238,154,13)"/><text x="78.2408%" y="207.50">expand_crate</text></g><g><title>late_resolve_crate (1,657,368 samples, 1.49%)</title><rect x="89.6412%" y="197" width="1.4863%" height="15" fill="rgb(219,56,2)"/><text x="89.8912%" y="207.50"></text></g><g><title>configure_and_expand (15,075,778 samples, 13.52%)</title><rect x="77.6836%" y="229" width="13.5197%" height="15" fill="rgb(233,0,4)"/><text x="77.9336%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,861,121 samples, 1.67%)</title><rect x="89.5343%" y="213" width="1.6690%" height="15" fill="rgb(235,30,7)"/><text x="89.7843%" y="223.50"></text></g><g><title>drop_ast (142,432 samples, 0.13%)</title><rect x="91.2033%" y="229" width="0.1277%" height="15" fill="rgb(250,79,13)"/><text x="91.4533%" y="239.50"></text></g><g><title>early_lint_checks (303,293 samples, 0.27%)</title><rect x="91.3444%" y="229" width="0.2720%" height="15" fill="rgb(211,146,34)"/><text x="91.5944%" y="239.50"></text></g><g><title>free_global_ctxt (3,635,730 samples, 3.26%)</title><rect x="91.6164%" y="229" width="3.2605%" height="15" fill="rgb(228,22,38)"/><text x="91.8664%" y="239.50">fre..</text></g><g><title>generate_crate_metadata (819,209 samples, 0.73%)</title><rect x="94.8768%" y="229" width="0.7347%" height="15" fill="rgb(235,168,5)"/><text x="95.1268%" y="239.50"></text></g><g><title>hir_lowering (2,306,946 samples, 2.07%)</title><rect x="95.6115%" y="229" width="2.0688%" height="15" fill="rgb(221,155,16)"/><text x="95.8615%" y="239.50">h..</text></g><g><title>parse_crate (1,129,503 samples, 1.01%)</title><rect x="97.7296%" y="229" width="1.0129%" height="15" fill="rgb(215,215,53)"/><text x="97.9796%" y="239.50"></text></g><g><title>prepare_outputs (210,682 samples, 0.19%)</title><rect x="98.7476%" y="229" width="0.1889%" height="15" fill="rgb(223,4,10)"/><text x="98.9976%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (781,829 samples, 0.70%)</title><rect x="98.9366%" y="229" width="0.7011%" height="15" fill="rgb(234,103,6)"/><text x="99.1866%" y="239.50"></text></g><g><title>all (111,510,040 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (111,510,040 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (307,054 samples, 0.28%)</title><rect x="99.7246%" y="229" width="0.2754%" height="15" fill="rgb(228,201,54)"/><text x="99.9746%" y="239.50"></text></g></svg></svg>