<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (156,372 samples, 0.30%)</title><rect x="4.7613%" y="69" width="0.3003%" height="15" fill="rgb(227,0,7)"/><text x="5.0113%" y="79.50"></text></g><g><title>is_copy_raw (104,252 samples, 0.20%)</title><rect x="4.8614%" y="53" width="0.2002%" height="15" fill="rgb(217,0,24)"/><text x="5.1114%" y="63.50"></text></g><g><title>evaluate_obligation (91,352 samples, 0.18%)</title><rect x="4.8861%" y="37" width="0.1754%" height="15" fill="rgb(221,193,54)"/><text x="5.1361%" y="47.50"></text></g><g><title>thir_body (62,360 samples, 0.12%)</title><rect x="5.1014%" y="69" width="0.1197%" height="15" fill="rgb(248,212,6)"/><text x="5.3514%" y="79.50"></text></g><g><title>mir_const (618,637 samples, 1.19%)</title><rect x="4.0375%" y="117" width="1.1878%" height="15" fill="rgb(208,68,35)"/><text x="4.2875%" y="127.50"></text></g><g><title>unsafety_check_result (499,256 samples, 0.96%)</title><rect x="4.2667%" y="101" width="0.9586%" height="15" fill="rgb(232,128,0)"/><text x="4.5167%" y="111.50"></text></g><g><title>mir_built (427,595 samples, 0.82%)</title><rect x="4.4043%" y="85" width="0.8210%" height="15" fill="rgb(207,160,47)"/><text x="4.6543%" y="95.50"></text></g><g><title>mir_promoted (716,278 samples, 1.38%)</title><rect x="3.8620%" y="133" width="1.3753%" height="15" fill="rgb(228,23,34)"/><text x="4.1120%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (59,111 samples, 0.11%)</title><rect x="5.2373%" y="133" width="0.1135%" height="15" fill="rgb(218,30,26)"/><text x="5.4873%" y="143.50"></text></g><g><title>type_op_prove_predicate (166,881 samples, 0.32%)</title><rect x="5.3508%" y="133" width="0.3204%" height="15" fill="rgb(220,122,19)"/><text x="5.6008%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,871,891 samples, 3.59%)</title><rect x="2.0805%" y="165" width="3.5942%" height="15" fill="rgb(250,228,42)"/><text x="2.3305%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (1,866,531 samples, 3.58%)</title><rect x="2.0908%" y="149" width="3.5839%" height="15" fill="rgb(240,193,28)"/><text x="2.3408%" y="159.50">mir_..</text></g><g><title>hir_module_items (115,711 samples, 0.22%)</title><rect x="5.6806%" y="165" width="0.2222%" height="15" fill="rgb(216,20,37)"/><text x="5.9306%" y="175.50"></text></g><g><title>get_lang_items (69,150 samples, 0.13%)</title><rect x="6.2776%" y="117" width="0.1328%" height="15" fill="rgb(206,188,39)"/><text x="6.5276%" y="127.50"></text></g><g><title>codegen_fn_attrs (60,710 samples, 0.12%)</title><rect x="6.5270%" y="101" width="0.1166%" height="15" fill="rgb(217,207,13)"/><text x="6.7770%" y="111.50"></text></g><g><title>should_inherit_track_caller (124,490 samples, 0.24%)</title><rect x="6.4104%" y="117" width="0.2390%" height="15" fill="rgb(231,73,38)"/><text x="6.6604%" y="127.50"></text></g><g><title>codegen_fn_attrs (286,852 samples, 0.55%)</title><rect x="6.1569%" y="133" width="0.5508%" height="15" fill="rgb(225,20,46)"/><text x="6.4069%" y="143.50"></text></g><g><title>check_mod_attrs (390,874 samples, 0.75%)</title><rect x="5.9579%" y="149" width="0.7505%" height="15" fill="rgb(210,31,41)"/><text x="6.2079%" y="159.50"></text></g><g><title>lookup_deprecation_entry (84,100 samples, 0.16%)</title><rect x="7.0022%" y="133" width="0.1615%" height="15" fill="rgb(221,200,47)"/><text x="7.2522%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (209,882 samples, 0.40%)</title><rect x="6.8549%" y="149" width="0.4030%" height="15" fill="rgb(226,26,5)"/><text x="7.1049%" y="159.50"></text></g><g><title>misc_checking_1 (752,158 samples, 1.44%)</title><rect x="5.9035%" y="165" width="1.4442%" height="15" fill="rgb(249,33,26)"/><text x="6.1535%" y="175.50"></text></g><g><title>misc_checking_2 (142,212 samples, 0.27%)</title><rect x="7.3477%" y="165" width="0.2731%" height="15" fill="rgb(235,183,28)"/><text x="7.5977%" y="175.50"></text></g><g><title>match_checking (96,462 samples, 0.19%)</title><rect x="7.4355%" y="149" width="0.1852%" height="15" fill="rgb(221,5,38)"/><text x="7.6855%" y="159.50"></text></g><g><title>check_match (93,512 samples, 0.18%)</title><rect x="7.4412%" y="133" width="0.1796%" height="15" fill="rgb(247,18,42)"/><text x="7.6912%" y="143.50"></text></g><g><title>death_checking (73,821 samples, 0.14%)</title><rect x="7.6908%" y="149" width="0.1417%" height="15" fill="rgb(241,131,45)"/><text x="7.9408%" y="159.50"></text></g><g><title>crate_lints (1,434,036 samples, 2.75%)</title><rect x="7.8354%" y="133" width="2.7535%" height="15" fill="rgb(249,31,29)"/><text x="8.0854%" y="143.50">cr..</text></g><g><title>type_of (981,062 samples, 1.88%)</title><rect x="8.7051%" y="117" width="1.8837%" height="15" fill="rgb(225,111,53)"/><text x="8.9551%" y="127.50">t..</text></g><g><title>metadata_decode_entry_type_of (739,730 samples, 1.42%)</title><rect x="9.1685%" y="101" width="1.4204%" height="15" fill="rgb(238,160,17)"/><text x="9.4185%" y="111.50"></text></g><g><title>lint_checking (1,474,916 samples, 2.83%)</title><rect x="7.8325%" y="149" width="2.8320%" height="15" fill="rgb(214,148,48)"/><text x="8.0825%" y="159.50">li..</text></g><g><title>privacy_checking_modules (57,031 samples, 0.11%)</title><rect x="10.7445%" y="149" width="0.1095%" height="15" fill="rgb(232,36,49)"/><text x="10.9945%" y="159.50"></text></g><g><title>check_mod_privacy (56,021 samples, 0.11%)</title><rect x="10.7464%" y="133" width="0.1076%" height="15" fill="rgb(209,103,24)"/><text x="10.9964%" y="143.50"></text></g><g><title>misc_checking_3 (1,693,939 samples, 3.25%)</title><rect x="7.6208%" y="165" width="3.2525%" height="15" fill="rgb(229,88,8)"/><text x="7.8708%" y="175.50">mis..</text></g><g><title>impl_parent (973,336 samples, 1.87%)</title><rect x="13.5716%" y="101" width="1.8689%" height="15" fill="rgb(213,181,19)"/><text x="13.8216%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (647,638 samples, 1.24%)</title><rect x="14.1970%" y="85" width="1.2435%" height="15" fill="rgb(254,191,54)"/><text x="14.4470%" y="95.50"></text></g><g><title>impl_trait_ref (3,535,798 samples, 6.79%)</title><rect x="15.4406%" y="101" width="6.7891%" height="15" fill="rgb(241,83,37)"/><text x="15.6906%" y="111.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,186,095 samples, 6.12%)</title><rect x="16.1120%" y="85" width="6.1176%" height="15" fill="rgb(233,36,39)"/><text x="16.3620%" y="95.50">metadata..</text></g><g><title>coherent_trait (6,219,500 samples, 11.94%)</title><rect x="10.9420%" y="133" width="11.9421%" height="15" fill="rgb(226,3,54)"/><text x="11.1920%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (6,211,790 samples, 11.93%)</title><rect x="10.9568%" y="117" width="11.9273%" height="15" fill="rgb(245,192,40)"/><text x="11.2068%" y="127.50">specialization_gra..</text></g><g><title>trait_impls_of (339,524 samples, 0.65%)</title><rect x="22.2322%" y="101" width="0.6519%" height="15" fill="rgb(238,167,29)"/><text x="22.4822%" y="111.50"></text></g><g><title>implementations_of_trait (67,871 samples, 0.13%)</title><rect x="22.7538%" y="85" width="0.1303%" height="15" fill="rgb(232,182,51)"/><text x="23.0038%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (59,511 samples, 0.11%)</title><rect x="22.7698%" y="69" width="0.1143%" height="15" fill="rgb(231,60,39)"/><text x="23.0198%" y="79.50"></text></g><g><title>coherence_checking (6,279,160 samples, 12.06%)</title><rect x="10.9158%" y="149" width="12.0567%" height="15" fill="rgb(208,69,12)"/><text x="11.1658%" y="159.50">coherence_checking</text></g><g><title>evaluate_obligation (56,721 samples, 0.11%)</title><rect x="24.9238%" y="85" width="0.1089%" height="15" fill="rgb(235,93,37)"/><text x="25.1738%" y="95.50"></text></g><g><title>object_safety_violations (149,172 samples, 0.29%)</title><rect x="24.8550%" y="101" width="0.2864%" height="15" fill="rgb(213,116,39)"/><text x="25.1050%" y="111.50"></text></g><g><title>explicit_predicates_of (67,451 samples, 0.13%)</title><rect x="25.1897%" y="69" width="0.1295%" height="15" fill="rgb(222,207,29)"/><text x="25.4397%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (64,931 samples, 0.12%)</title><rect x="25.1945%" y="53" width="0.1247%" height="15" fill="rgb(206,96,30)"/><text x="25.4445%" y="63.50"></text></g><g><title>predicates_of (103,341 samples, 0.20%)</title><rect x="25.1469%" y="101" width="0.1984%" height="15" fill="rgb(218,138,4)"/><text x="25.3969%" y="111.50"></text></g><g><title>predicates_defined_on (90,211 samples, 0.17%)</title><rect x="25.1721%" y="85" width="0.1732%" height="15" fill="rgb(250,191,14)"/><text x="25.4221%" y="95.50"></text></g><g><title>associated_item (53,371 samples, 0.10%)</title><rect x="26.2664%" y="69" width="0.1025%" height="15" fill="rgb(239,60,40)"/><text x="26.5164%" y="79.50"></text></g><g><title>associated_items (70,831 samples, 0.14%)</title><rect x="26.2389%" y="85" width="0.1360%" height="15" fill="rgb(206,27,48)"/><text x="26.4889%" y="95.50"></text></g><g><title>is_copy_raw (148,612 samples, 0.29%)</title><rect x="26.5355%" y="85" width="0.2854%" height="15" fill="rgb(225,35,8)"/><text x="26.7855%" y="95.50"></text></g><g><title>evaluate_obligation (140,202 samples, 0.27%)</title><rect x="26.5517%" y="69" width="0.2692%" height="15" fill="rgb(250,213,24)"/><text x="26.8017%" y="79.50"></text></g><g><title>trait_impls_of (124,052 samples, 0.24%)</title><rect x="26.5827%" y="53" width="0.2382%" height="15" fill="rgb(247,123,22)"/><text x="26.8327%" y="63.50"></text></g><g><title>typeck (840,279 samples, 1.61%)</title><rect x="25.3941%" y="101" width="1.6134%" height="15" fill="rgb(231,138,38)"/><text x="25.6441%" y="111.50"></text></g><g><title>item_bodies_checking (2,088,013 samples, 4.01%)</title><rect x="23.0050%" y="149" width="4.0092%" height="15" fill="rgb(231,145,46)"/><text x="23.2550%" y="159.50">item..</text></g><g><title>typeck_item_bodies (2,086,203 samples, 4.01%)</title><rect x="23.0085%" y="133" width="4.0057%" height="15" fill="rgb(251,118,11)"/><text x="23.2585%" y="143.50">type..</text></g><g><title>typeck (2,082,443 samples, 4.00%)</title><rect x="23.0157%" y="117" width="3.9985%" height="15" fill="rgb(217,147,25)"/><text x="23.2657%" y="127.50">type..</text></g><g><title>impl_parent (57,750 samples, 0.11%)</title><rect x="27.3399%" y="69" width="0.1109%" height="15" fill="rgb(247,81,37)"/><text x="27.5899%" y="79.50"></text></g><g><title>impl_trait_ref (189,893 samples, 0.36%)</title><rect x="27.4508%" y="69" width="0.3646%" height="15" fill="rgb(209,12,38)"/><text x="27.7008%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (169,902 samples, 0.33%)</title><rect x="27.4892%" y="53" width="0.3262%" height="15" fill="rgb(227,1,9)"/><text x="27.7392%" y="63.50"></text></g><g><title>adt_destructor (351,364 samples, 0.67%)</title><rect x="27.1905%" y="117" width="0.6747%" height="15" fill="rgb(248,47,43)"/><text x="27.4405%" y="127.50"></text></g><g><title>coherent_trait (347,674 samples, 0.67%)</title><rect x="27.1976%" y="101" width="0.6676%" height="15" fill="rgb(221,10,30)"/><text x="27.4476%" y="111.50"></text></g><g><title>specialization_graph_of (346,104 samples, 0.66%)</title><rect x="27.2006%" y="85" width="0.6646%" height="15" fill="rgb(210,229,1)"/><text x="27.4506%" y="95.50"></text></g><g><title>item_types_checking (469,915 samples, 0.90%)</title><rect x="27.0143%" y="149" width="0.9023%" height="15" fill="rgb(222,148,37)"/><text x="27.2643%" y="159.50"></text></g><g><title>check_mod_item_types (468,065 samples, 0.90%)</title><rect x="27.0178%" y="133" width="0.8987%" height="15" fill="rgb(234,67,33)"/><text x="27.2678%" y="143.50"></text></g><g><title>fn_sig (102,451 samples, 0.20%)</title><rect x="28.1238%" y="117" width="0.1967%" height="15" fill="rgb(247,98,35)"/><text x="28.3738%" y="127.50"></text></g><g><title>generics_of (80,591 samples, 0.15%)</title><rect x="28.3205%" y="117" width="0.1547%" height="15" fill="rgb(247,138,52)"/><text x="28.5705%" y="127.50"></text></g><g><title>late_bound_vars_map (147,002 samples, 0.28%)</title><rect x="28.8204%" y="69" width="0.2823%" height="15" fill="rgb(213,79,30)"/><text x="29.0704%" y="79.50"></text></g><g><title>resolve_lifetimes (134,602 samples, 0.26%)</title><rect x="28.8442%" y="53" width="0.2585%" height="15" fill="rgb(246,177,23)"/><text x="29.0942%" y="63.50"></text></g><g><title>explicit_predicates_of (281,084 samples, 0.54%)</title><rect x="28.5784%" y="85" width="0.5397%" height="15" fill="rgb(230,62,27)"/><text x="28.8284%" y="95.50"></text></g><g><title>predicates_of (359,814 samples, 0.69%)</title><rect x="28.5172%" y="117" width="0.6909%" height="15" fill="rgb(216,154,8)"/><text x="28.7672%" y="127.50"></text></g><g><title>predicates_defined_on (347,724 samples, 0.67%)</title><rect x="28.5404%" y="101" width="0.6677%" height="15" fill="rgb(244,35,45)"/><text x="28.7904%" y="111.50"></text></g><g><title>type_collecting (824,139 samples, 1.58%)</title><rect x="27.9176%" y="149" width="1.5824%" height="15" fill="rgb(251,115,12)"/><text x="28.1676%" y="159.50"></text></g><g><title>collect_mod_item_types (807,729 samples, 1.55%)</title><rect x="27.9491%" y="133" width="1.5509%" height="15" fill="rgb(240,54,50)"/><text x="28.1991%" y="143.50"></text></g><g><title>type_of (118,851 samples, 0.23%)</title><rect x="29.2718%" y="117" width="0.2282%" height="15" fill="rgb(233,84,52)"/><text x="29.5218%" y="127.50"></text></g><g><title>evaluate_obligation (105,312 samples, 0.20%)</title><rect x="29.8359%" y="117" width="0.2022%" height="15" fill="rgb(207,117,47)"/><text x="30.0859%" y="127.50"></text></g><g><title>check_impl_item_well_formed (345,004 samples, 0.66%)</title><rect x="29.5335%" y="133" width="0.6624%" height="15" fill="rgb(249,43,39)"/><text x="29.7835%" y="143.50"></text></g><g><title>param_env (154,722 samples, 0.30%)</title><rect x="30.7340%" y="117" width="0.2971%" height="15" fill="rgb(209,38,44)"/><text x="30.9840%" y="127.50"></text></g><g><title>check_item_well_formed (509,435 samples, 0.98%)</title><rect x="30.1959%" y="133" width="0.9782%" height="15" fill="rgb(236,212,23)"/><text x="30.4459%" y="143.50"></text></g><g><title>implied_outlives_bounds (58,591 samples, 0.11%)</title><rect x="31.3450%" y="117" width="0.1125%" height="15" fill="rgb(242,79,21)"/><text x="31.5950%" y="127.50"></text></g><g><title>analysis (15,476,853 samples, 29.72%)</title><rect x="1.7830%" y="181" width="29.7172%" height="15" fill="rgb(211,96,35)"/><text x="2.0330%" y="191.50">analysis</text></g><g><title>type_check_crate (10,742,610 samples, 20.63%)</title><rect x="10.8733%" y="165" width="20.6269%" height="15" fill="rgb(253,215,40)"/><text x="11.1233%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,041,112 samples, 2.00%)</title><rect x="29.5012%" y="149" width="1.9990%" height="15" fill="rgb(211,81,21)"/><text x="29.7512%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (169,872 samples, 0.33%)</title><rect x="31.1741%" y="133" width="0.3262%" height="15" fill="rgb(208,190,38)"/><text x="31.4241%" y="143.50"></text></g><g><title>codegen_crate (701,998 samples, 1.35%)</title><rect x="31.5212%" y="181" width="1.3479%" height="15" fill="rgb(235,213,38)"/><text x="31.7712%" y="191.50"></text></g><g><title>AST_validation (84,351 samples, 0.16%)</title><rect x="33.3011%" y="165" width="0.1620%" height="15" fill="rgb(237,122,38)"/><text x="33.5511%" y="175.50"></text></g><g><title>crate_injection (90,711 samples, 0.17%)</title><rect x="33.5222%" y="165" width="0.1742%" height="15" fill="rgb(244,218,35)"/><text x="33.7722%" y="175.50"></text></g><g><title>metadata_load_macro (75,272 samples, 0.14%)</title><rect x="58.3726%" y="133" width="0.1445%" height="15" fill="rgb(240,68,47)"/><text x="58.6226%" y="143.50"></text></g><g><title>macro_expand_crate (15,712,956 samples, 30.17%)</title><rect x="33.6963%" y="165" width="30.1705%" height="15" fill="rgb(210,16,53)"/><text x="33.9463%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (15,695,436 samples, 30.14%)</title><rect x="33.7300%" y="149" width="30.1369%" height="15" fill="rgb(235,124,12)"/><text x="33.9800%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,786,191 samples, 5.35%)</title><rect x="58.5171%" y="133" width="5.3498%" height="15" fill="rgb(224,169,11)"/><text x="58.7671%" y="143.50">metadat..</text></g><g><title>metadata_register_crate (1,147,803 samples, 2.20%)</title><rect x="61.6630%" y="117" width="2.2039%" height="15" fill="rgb(250,166,2)"/><text x="61.9130%" y="127.50">m..</text></g><g><title>metadata_register_crate (72,741 samples, 0.14%)</title><rect x="63.7272%" y="101" width="0.1397%" height="15" fill="rgb(242,216,29)"/><text x="63.9772%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (685,008 samples, 1.32%)</title><rect x="63.9066%" y="165" width="1.3153%" height="15" fill="rgb(230,116,27)"/><text x="64.1566%" y="175.50"></text></g><g><title>late_resolve_crate (1,089,022 samples, 2.09%)</title><rect x="65.3649%" y="149" width="2.0910%" height="15" fill="rgb(228,99,48)"/><text x="65.6149%" y="159.50">l..</text></g><g><title>configure_and_expand (18,071,022 samples, 34.70%)</title><rect x="32.8691%" y="181" width="34.6983%" height="15" fill="rgb(253,11,6)"/><text x="33.1191%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,221,534 samples, 2.35%)</title><rect x="65.2219%" y="165" width="2.3455%" height="15" fill="rgb(247,143,39)"/><text x="65.4719%" y="175.50">r..</text></g><g><title>drop_ast (111,251 samples, 0.21%)</title><rect x="67.5674%" y="181" width="0.2136%" height="15" fill="rgb(236,97,10)"/><text x="67.8174%" y="191.50"></text></g><g><title>early_lint_checks (208,982 samples, 0.40%)</title><rect x="67.8167%" y="181" width="0.4013%" height="15" fill="rgb(233,208,19)"/><text x="68.0667%" y="191.50"></text></g><g><title>free_global_ctxt (2,294,226 samples, 4.41%)</title><rect x="68.2180%" y="181" width="4.4052%" height="15" fill="rgb(216,164,2)"/><text x="68.4680%" y="191.50">free_..</text></g><g><title>crate_hash (66,720 samples, 0.13%)</title><rect x="74.0439%" y="165" width="0.1281%" height="15" fill="rgb(220,129,5)"/><text x="74.2939%" y="175.50"></text></g><g><title>generate_crate_metadata (917,920 samples, 1.76%)</title><rect x="72.6232%" y="181" width="1.7625%" height="15" fill="rgb(242,17,10)"/><text x="72.8732%" y="191.50"></text></g><g><title>hir_lowering (4,432,470 samples, 8.51%)</title><rect x="74.3857%" y="181" width="8.5108%" height="15" fill="rgb(242,107,0)"/><text x="74.6357%" y="191.50">hir_lowering</text></g><g><title>parse_crate (7,632,326 samples, 14.65%)</title><rect x="82.9955%" y="181" width="14.6549%" height="15" fill="rgb(251,28,31)"/><text x="83.2455%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (357,504 samples, 0.69%)</title><rect x="97.6693%" y="181" width="0.6864%" height="15" fill="rgb(233,223,10)"/><text x="97.9193%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (350,514 samples, 0.67%)</title><rect x="98.3558%" y="181" width="0.6730%" height="15" fill="rgb(215,21,27)"/><text x="98.6058%" y="191.50"></text></g><g><title>setup_global_ctxt (157,632 samples, 0.30%)</title><rect x="99.0478%" y="181" width="0.3027%" height="15" fill="rgb(232,23,21)"/><text x="99.2978%" y="191.50"></text></g><g><title>all (52,080,463 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (52,080,463 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (338,294 samples, 0.65%)</title><rect x="99.3504%" y="181" width="0.6496%" height="15" fill="rgb(247,70,30)"/><text x="99.6004%" y="191.50"></text></g></svg></svg>