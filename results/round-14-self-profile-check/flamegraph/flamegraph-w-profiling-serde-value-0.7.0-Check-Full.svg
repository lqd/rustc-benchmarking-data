<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (595,565 samples, 0.25%)</title><rect x="16.0989%" y="117" width="0.2479%" height="15" fill="rgb(227,0,7)"/><text x="16.3489%" y="127.50"></text></g><g><title>codegen_fn_attrs (282,161 samples, 0.12%)</title><rect x="16.8449%" y="101" width="0.1174%" height="15" fill="rgb(217,0,24)"/><text x="17.0949%" y="111.50"></text></g><g><title>is_copy_raw (779,761 samples, 0.32%)</title><rect x="19.8762%" y="85" width="0.3245%" height="15" fill="rgb(221,193,54)"/><text x="20.1262%" y="95.50"></text></g><g><title>evaluate_obligation (641,239 samples, 0.27%)</title><rect x="19.9338%" y="69" width="0.2669%" height="15" fill="rgb(248,212,6)"/><text x="20.1838%" y="79.50"></text></g><g><title>adt_drop_tys (260,943 samples, 0.11%)</title><rect x="20.3144%" y="69" width="0.1086%" height="15" fill="rgb(208,68,35)"/><text x="20.5644%" y="79.50"></text></g><g><title>is_copy_raw (1,651,080 samples, 0.69%)</title><rect x="20.4231%" y="69" width="0.6872%" height="15" fill="rgb(232,128,0)"/><text x="20.6731%" y="79.50"></text></g><g><title>evaluate_obligation (1,310,017 samples, 0.55%)</title><rect x="20.5650%" y="53" width="0.5452%" height="15" fill="rgb(207,160,47)"/><text x="20.8150%" y="63.50"></text></g><g><title>needs_drop_raw (2,371,197 samples, 0.99%)</title><rect x="20.2007%" y="85" width="0.9869%" height="15" fill="rgb(228,23,34)"/><text x="20.4507%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (464,382 samples, 0.19%)</title><rect x="21.3011%" y="69" width="0.1933%" height="15" fill="rgb(218,30,26)"/><text x="21.5511%" y="79.50"></text></g><g><title>specialization_graph_of (750,440 samples, 0.31%)</title><rect x="21.5309%" y="69" width="0.3123%" height="15" fill="rgb(220,122,19)"/><text x="21.7809%" y="79.50"></text></g><g><title>impl_trait_ref (298,804 samples, 0.12%)</title><rect x="21.7189%" y="53" width="0.1244%" height="15" fill="rgb(250,228,42)"/><text x="21.9689%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (247,264 samples, 0.10%)</title><rect x="21.7403%" y="37" width="0.1029%" height="15" fill="rgb(240,193,28)"/><text x="21.9903%" y="47.50"></text></g><g><title>resolve_instance (1,660,757 samples, 0.69%)</title><rect x="21.1876%" y="85" width="0.6912%" height="15" fill="rgb(216,20,37)"/><text x="21.4376%" y="95.50"></text></g><g><title>thir_body (2,408,212 samples, 1.00%)</title><rect x="21.9079%" y="85" width="1.0023%" height="15" fill="rgb(206,188,39)"/><text x="22.1579%" y="95.50"></text></g><g><title>mir_const (18,489,258 samples, 7.70%)</title><rect x="15.2692%" y="133" width="7.6954%" height="15" fill="rgb(217,207,13)"/><text x="15.5192%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (15,900,266 samples, 6.62%)</title><rect x="16.3467%" y="117" width="6.6178%" height="15" fill="rgb(231,73,38)"/><text x="16.5967%" y="127.50">unsafety_..</text></g><g><title>mir_built (14,421,087 samples, 6.00%)</title><rect x="16.9624%" y="101" width="6.0022%" height="15" fill="rgb(225,20,46)"/><text x="17.2124%" y="111.50">mir_built</text></g><g><title>mir_promoted (20,670,749 samples, 8.60%)</title><rect x="14.4067%" y="149" width="8.6033%" height="15" fill="rgb(210,31,41)"/><text x="14.6567%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (991,941 samples, 0.41%)</title><rect x="23.0100%" y="149" width="0.4129%" height="15" fill="rgb(221,200,47)"/><text x="23.2600%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,747,757 samples, 0.73%)</title><rect x="23.4229%" y="149" width="0.7274%" height="15" fill="rgb(226,26,5)"/><text x="23.6729%" y="159.50"></text></g><g><title>normalize_projection_ty (1,105,391 samples, 0.46%)</title><rect x="23.6903%" y="133" width="0.4601%" height="15" fill="rgb(249,33,26)"/><text x="23.9403%" y="143.50"></text></g><g><title>type_op_normalize_predicate (367,923 samples, 0.15%)</title><rect x="24.1503%" y="149" width="0.1531%" height="15" fill="rgb(235,183,28)"/><text x="24.4003%" y="159.50"></text></g><g><title>type_op_normalize_ty (867,658 samples, 0.36%)</title><rect x="24.3035%" y="149" width="0.3611%" height="15" fill="rgb(221,5,38)"/><text x="24.5535%" y="159.50"></text></g><g><title>normalize_projection_ty (508,974 samples, 0.21%)</title><rect x="24.4527%" y="133" width="0.2118%" height="15" fill="rgb(247,18,42)"/><text x="24.7027%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,614,085 samples, 2.34%)</title><rect x="24.6646%" y="149" width="2.3366%" height="15" fill="rgb(241,131,45)"/><text x="24.9146%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (63,600,989 samples, 26.47%)</title><rect x="0.5338%" y="181" width="26.4713%" height="15" fill="rgb(249,31,29)"/><text x="0.7838%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (63,290,323 samples, 26.34%)</title><rect x="0.6631%" y="165" width="26.3420%" height="15" fill="rgb(225,111,53)"/><text x="0.9131%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (348,244 samples, 0.14%)</title><rect x="27.0392%" y="181" width="0.1449%" height="15" fill="rgb(238,160,17)"/><text x="27.2892%" y="191.50"></text></g><g><title>item_attrs (310,394 samples, 0.13%)</title><rect x="27.6441%" y="101" width="0.1292%" height="15" fill="rgb(214,148,48)"/><text x="27.8941%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (282,153 samples, 0.12%)</title><rect x="27.6558%" y="85" width="0.1174%" height="15" fill="rgb(232,36,49)"/><text x="27.9058%" y="95.50"></text></g><g><title>codegen_fn_attrs (799,828 samples, 0.33%)</title><rect x="27.5305%" y="117" width="0.3329%" height="15" fill="rgb(209,103,24)"/><text x="27.7805%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,187,613 samples, 0.49%)</title><rect x="27.3765%" y="149" width="0.4943%" height="15" fill="rgb(229,88,8)"/><text x="27.6265%" y="159.50"></text></g><g><title>should_inherit_track_caller (1,090,972 samples, 0.45%)</title><rect x="27.4167%" y="133" width="0.4541%" height="15" fill="rgb(213,181,19)"/><text x="27.6667%" y="143.50"></text></g><g><title>check_mod_attrs (1,626,118 samples, 0.68%)</title><rect x="27.1940%" y="165" width="0.6768%" height="15" fill="rgb(254,191,54)"/><text x="27.4440%" y="175.50"></text></g><g><title>check_mod_const_bodies (256,133 samples, 0.11%)</title><rect x="27.8708%" y="165" width="0.1066%" height="15" fill="rgb(241,83,37)"/><text x="28.1208%" y="175.50"></text></g><g><title>lookup_deprecation_entry (242,723 samples, 0.10%)</title><rect x="28.1673%" y="149" width="0.1010%" height="15" fill="rgb(233,36,39)"/><text x="28.4173%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (642,357 samples, 0.27%)</title><rect x="28.0379%" y="165" width="0.2674%" height="15" fill="rgb(226,3,54)"/><text x="28.2879%" y="175.50"></text></g><g><title>misc_checking_1 (2,737,701 samples, 1.14%)</title><rect x="27.1844%" y="181" width="1.1395%" height="15" fill="rgb(245,192,40)"/><text x="27.4344%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,033,251 samples, 0.43%)</title><rect x="28.3248%" y="165" width="0.4300%" height="15" fill="rgb(238,167,29)"/><text x="28.5748%" y="175.50"></text></g><g><title>check_mod_liveness (848,389 samples, 0.35%)</title><rect x="28.4018%" y="149" width="0.3531%" height="15" fill="rgb(232,182,51)"/><text x="28.6518%" y="159.50"></text></g><g><title>misc_checking_2 (3,352,427 samples, 1.40%)</title><rect x="28.3239%" y="181" width="1.3953%" height="15" fill="rgb(231,60,39)"/><text x="28.5739%" y="191.50"></text></g><g><title>match_checking (2,316,866 samples, 0.96%)</title><rect x="28.7549%" y="165" width="0.9643%" height="15" fill="rgb(208,69,12)"/><text x="29.0049%" y="175.50"></text></g><g><title>check_match (2,242,475 samples, 0.93%)</title><rect x="28.7858%" y="149" width="0.9333%" height="15" fill="rgb(235,93,37)"/><text x="29.0358%" y="159.50"></text></g><g><title>check_private_in_public (428,825 samples, 0.18%)</title><rect x="29.7237%" y="165" width="0.1785%" height="15" fill="rgb(213,116,39)"/><text x="29.9737%" y="175.50"></text></g><g><title>death_checking (625,807 samples, 0.26%)</title><rect x="29.9022%" y="165" width="0.2605%" height="15" fill="rgb(222,207,29)"/><text x="30.1522%" y="175.50"></text></g><g><title>crate_lints (2,762,131 samples, 1.15%)</title><rect x="30.1633%" y="149" width="1.1496%" height="15" fill="rgb(206,96,30)"/><text x="30.4133%" y="159.50"></text></g><g><title>type_of (1,380,595 samples, 0.57%)</title><rect x="30.7383%" y="133" width="0.5746%" height="15" fill="rgb(218,138,4)"/><text x="30.9883%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (913,589 samples, 0.38%)</title><rect x="30.9327%" y="117" width="0.3802%" height="15" fill="rgb(250,191,14)"/><text x="31.1827%" y="127.50"></text></g><g><title>lint_checking (3,962,454 samples, 1.65%)</title><rect x="30.1626%" y="165" width="1.6492%" height="15" fill="rgb(239,60,40)"/><text x="30.4126%" y="175.50"></text></g><g><title>module_lints (1,198,673 samples, 0.50%)</title><rect x="31.3129%" y="149" width="0.4989%" height="15" fill="rgb(206,27,48)"/><text x="31.5629%" y="159.50"></text></g><g><title>lint_mod (1,192,713 samples, 0.50%)</title><rect x="31.3154%" y="133" width="0.4964%" height="15" fill="rgb(225,35,8)"/><text x="31.5654%" y="143.50"></text></g><g><title>layout_of (290,054 samples, 0.12%)</title><rect x="31.6911%" y="117" width="0.1207%" height="15" fill="rgb(250,213,24)"/><text x="31.9411%" y="127.50"></text></g><g><title>privacy_access_levels (609,457 samples, 0.25%)</title><rect x="31.8118%" y="165" width="0.2537%" height="15" fill="rgb(247,123,22)"/><text x="32.0618%" y="175.50"></text></g><g><title>privacy_checking_modules (2,701,391 samples, 1.12%)</title><rect x="32.0655%" y="165" width="1.1243%" height="15" fill="rgb(231,138,38)"/><text x="32.3155%" y="175.50"></text></g><g><title>check_mod_privacy (2,698,151 samples, 1.12%)</title><rect x="32.0668%" y="149" width="1.1230%" height="15" fill="rgb(231,145,46)"/><text x="32.3168%" y="159.50"></text></g><g><title>misc_checking_3 (8,360,714 samples, 3.48%)</title><rect x="29.7192%" y="181" width="3.4798%" height="15" fill="rgb(251,118,11)"/><text x="29.9692%" y="191.50">mis..</text></g><g><title>impl_parent (2,715,845 samples, 1.13%)</title><rect x="34.9735%" y="117" width="1.1304%" height="15" fill="rgb(217,147,25)"/><text x="35.2235%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,475,564 samples, 0.61%)</title><rect x="35.4897%" y="101" width="0.6141%" height="15" fill="rgb(247,81,37)"/><text x="35.7397%" y="111.50"></text></g><g><title>impl_trait_ref (5,866,071 samples, 2.44%)</title><rect x="36.1038%" y="117" width="2.4415%" height="15" fill="rgb(209,12,38)"/><text x="36.3538%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,847,810 samples, 2.02%)</title><rect x="36.5277%" y="101" width="2.0177%" height="15" fill="rgb(227,1,9)"/><text x="36.7777%" y="111.50">m..</text></g><g><title>trait_impls_of (991,794 samples, 0.41%)</title><rect x="38.5550%" y="117" width="0.4128%" height="15" fill="rgb(248,47,43)"/><text x="38.8050%" y="127.50"></text></g><g><title>implementations_of_trait (347,347 samples, 0.14%)</title><rect x="38.8233%" y="101" width="0.1446%" height="15" fill="rgb(221,10,30)"/><text x="39.0733%" y="111.50"></text></g><g><title>coherent_trait (13,715,893 samples, 5.71%)</title><rect x="33.2596%" y="149" width="5.7087%" height="15" fill="rgb(210,229,1)"/><text x="33.5096%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (13,678,703 samples, 5.69%)</title><rect x="33.2751%" y="133" width="5.6932%" height="15" fill="rgb(222,148,37)"/><text x="33.5251%" y="143.50">special..</text></g><g><title>coherence_checking (13,812,494 samples, 5.75%)</title><rect x="33.2485%" y="165" width="5.7489%" height="15" fill="rgb(234,67,33)"/><text x="33.4985%" y="175.50">coheren..</text></g><g><title>associated_item (1,891,282 samples, 0.79%)</title><rect x="62.4112%" y="101" width="0.7872%" height="15" fill="rgb(247,98,35)"/><text x="62.6612%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,391,329 samples, 0.58%)</title><rect x="62.6193%" y="85" width="0.5791%" height="15" fill="rgb(247,138,52)"/><text x="62.8693%" y="95.50"></text></g><g><title>associated_items (2,400,918 samples, 1.00%)</title><rect x="62.2229%" y="117" width="0.9993%" height="15" fill="rgb(213,79,30)"/><text x="62.4729%" y="127.50"></text></g><g><title>adt_dtorck_constraint (272,892 samples, 0.11%)</title><rect x="63.4781%" y="101" width="0.1136%" height="15" fill="rgb(246,177,23)"/><text x="63.7281%" y="111.50"></text></g><g><title>dropck_outlives (856,690 samples, 0.36%)</title><rect x="63.2624%" y="117" width="0.3566%" height="15" fill="rgb(230,62,27)"/><text x="63.5124%" y="127.50"></text></g><g><title>predicates_of (663,146 samples, 0.28%)</title><rect x="65.1356%" y="101" width="0.2760%" height="15" fill="rgb(216,154,8)"/><text x="65.3856%" y="111.50"></text></g><g><title>predicates_defined_on (421,104 samples, 0.18%)</title><rect x="65.2364%" y="85" width="0.1753%" height="15" fill="rgb(244,35,45)"/><text x="65.4864%" y="95.50"></text></g><g><title>evaluate_obligation (4,610,287 samples, 1.92%)</title><rect x="63.6190%" y="117" width="1.9188%" height="15" fill="rgb(251,115,12)"/><text x="63.8690%" y="127.50">e..</text></g><g><title>evaluate_obligation (592,067 samples, 0.25%)</title><rect x="66.1137%" y="101" width="0.2464%" height="15" fill="rgb(240,54,50)"/><text x="66.3637%" y="111.50"></text></g><g><title>method_autoderef_steps (1,172,046 samples, 0.49%)</title><rect x="65.8756%" y="117" width="0.4878%" height="15" fill="rgb(233,84,52)"/><text x="66.1256%" y="127.50"></text></g><g><title>predicates_of (328,643 samples, 0.14%)</title><rect x="66.4294%" y="117" width="0.1368%" height="15" fill="rgb(207,117,47)"/><text x="66.6794%" y="127.50"></text></g><g><title>dropck_outlives (604,457 samples, 0.25%)</title><rect x="70.1172%" y="101" width="0.2516%" height="15" fill="rgb(249,43,39)"/><text x="70.3672%" y="111.50"></text></g><g><title>evaluate_obligation (749,426 samples, 0.31%)</title><rect x="70.3688%" y="101" width="0.3119%" height="15" fill="rgb(209,38,44)"/><text x="70.6188%" y="111.50"></text></g><g><title>is_copy_raw (355,244 samples, 0.15%)</title><rect x="70.7913%" y="101" width="0.1479%" height="15" fill="rgb(236,212,23)"/><text x="71.0413%" y="111.50"></text></g><g><title>evaluate_obligation (286,702 samples, 0.12%)</title><rect x="70.8198%" y="85" width="0.1193%" height="15" fill="rgb(242,79,21)"/><text x="71.0698%" y="95.50"></text></g><g><title>typeck (10,797,270 samples, 4.49%)</title><rect x="66.6468%" y="117" width="4.4939%" height="15" fill="rgb(211,96,35)"/><text x="66.8968%" y="127.50">typeck</text></g><g><title>item_bodies_checking (77,253,191 samples, 32.15%)</title><rect x="39.0235%" y="165" width="32.1534%" height="15" fill="rgb(253,215,40)"/><text x="39.2735%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (77,248,561 samples, 32.15%)</title><rect x="39.0255%" y="149" width="32.1515%" height="15" fill="rgb(211,81,21)"/><text x="39.2755%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (77,030,708 samples, 32.06%)</title><rect x="39.1161%" y="133" width="32.0608%" height="15" fill="rgb(208,190,38)"/><text x="39.3661%" y="143.50">typeck</text></g><g><title>adt_destructor (345,273 samples, 0.14%)</title><rect x="73.6727%" y="133" width="0.1437%" height="15" fill="rgb(235,213,38)"/><text x="73.9227%" y="143.50"></text></g><g><title>coherent_trait (333,523 samples, 0.14%)</title><rect x="73.6776%" y="117" width="0.1388%" height="15" fill="rgb(237,122,38)"/><text x="73.9276%" y="127.50"></text></g><g><title>specialization_graph_of (330,943 samples, 0.14%)</title><rect x="73.6787%" y="101" width="0.1377%" height="15" fill="rgb(244,218,35)"/><text x="73.9287%" y="111.50"></text></g><g><title>predicates_of (384,396 samples, 0.16%)</title><rect x="74.0800%" y="133" width="0.1600%" height="15" fill="rgb(240,68,47)"/><text x="74.3300%" y="143.50"></text></g><g><title>predicates_defined_on (301,974 samples, 0.13%)</title><rect x="74.1143%" y="117" width="0.1257%" height="15" fill="rgb(210,16,53)"/><text x="74.3643%" y="127.50"></text></g><g><title>item_types_checking (7,376,732 samples, 3.07%)</title><rect x="71.1770%" y="165" width="3.0703%" height="15" fill="rgb(235,124,12)"/><text x="71.4270%" y="175.50">ite..</text></g><g><title>check_mod_item_types (7,372,132 samples, 3.07%)</title><rect x="71.1789%" y="149" width="3.0683%" height="15" fill="rgb(224,169,11)"/><text x="71.4289%" y="159.50">che..</text></g><g><title>fn_sig (1,668,799 samples, 0.69%)</title><rect x="74.5047%" y="133" width="0.6946%" height="15" fill="rgb(250,166,2)"/><text x="74.7547%" y="143.50"></text></g><g><title>type_param_predicates (265,032 samples, 0.11%)</title><rect x="75.0890%" y="117" width="0.1103%" height="15" fill="rgb(242,216,29)"/><text x="75.3390%" y="127.50"></text></g><g><title>is_late_bound_map (384,875 samples, 0.16%)</title><rect x="75.3125%" y="117" width="0.1602%" height="15" fill="rgb(230,116,27)"/><text x="75.5625%" y="127.50"></text></g><g><title>resolve_lifetimes (374,135 samples, 0.16%)</title><rect x="75.3170%" y="101" width="0.1557%" height="15" fill="rgb(228,99,48)"/><text x="75.5670%" y="111.50"></text></g><g><title>named_region_map (588,388 samples, 0.24%)</title><rect x="75.4727%" y="117" width="0.2449%" height="15" fill="rgb(253,11,6)"/><text x="75.7227%" y="127.50"></text></g><g><title>resolve_lifetimes (565,178 samples, 0.24%)</title><rect x="75.4824%" y="101" width="0.2352%" height="15" fill="rgb(247,143,39)"/><text x="75.7324%" y="111.50"></text></g><g><title>lint_levels (240,513 samples, 0.10%)</title><rect x="75.6175%" y="85" width="0.1001%" height="15" fill="rgb(236,97,10)"/><text x="75.8675%" y="95.50"></text></g><g><title>generics_of (1,277,337 samples, 0.53%)</title><rect x="75.1993%" y="133" width="0.5316%" height="15" fill="rgb(233,208,19)"/><text x="75.4493%" y="143.50"></text></g><g><title>explicit_predicates_of (556,294 samples, 0.23%)</title><rect x="75.9145%" y="101" width="0.2315%" height="15" fill="rgb(216,164,2)"/><text x="76.1645%" y="111.50"></text></g><g><title>predicates_of (1,325,459 samples, 0.55%)</title><rect x="75.7700%" y="133" width="0.5517%" height="15" fill="rgb(220,129,5)"/><text x="76.0200%" y="143.50"></text></g><g><title>predicates_defined_on (1,187,198 samples, 0.49%)</title><rect x="75.8275%" y="117" width="0.4941%" height="15" fill="rgb(242,17,10)"/><text x="76.0775%" y="127.50"></text></g><g><title>inferred_outlives_of (421,944 samples, 0.18%)</title><rect x="76.1460%" y="101" width="0.1756%" height="15" fill="rgb(242,107,0)"/><text x="76.3960%" y="111.50"></text></g><g><title>inferred_outlives_crate (378,524 samples, 0.16%)</title><rect x="76.1641%" y="85" width="0.1575%" height="15" fill="rgb(251,28,31)"/><text x="76.4141%" y="95.50"></text></g><g><title>type_collecting (5,191,488 samples, 2.16%)</title><rect x="74.2481%" y="165" width="2.1607%" height="15" fill="rgb(233,223,10)"/><text x="74.4981%" y="175.50">t..</text></g><g><title>collect_mod_item_types (5,182,308 samples, 2.16%)</title><rect x="74.2519%" y="149" width="2.1569%" height="15" fill="rgb(215,21,27)"/><text x="74.5019%" y="159.50">c..</text></g><g><title>evaluate_obligation (600,664 samples, 0.25%)</title><rect x="79.5465%" y="133" width="0.2500%" height="15" fill="rgb(232,23,21)"/><text x="79.7965%" y="143.50"></text></g><g><title>implied_outlives_bounds (519,794 samples, 0.22%)</title><rect x="79.8190%" y="133" width="0.2163%" height="15" fill="rgb(244,5,23)"/><text x="80.0690%" y="143.50"></text></g><g><title>param_env (1,125,761 samples, 0.47%)</title><rect x="80.1259%" y="133" width="0.4686%" height="15" fill="rgb(226,81,46)"/><text x="80.3759%" y="143.50"></text></g><g><title>region_scope_tree (1,067,023 samples, 0.44%)</title><rect x="80.6682%" y="133" width="0.4441%" height="15" fill="rgb(247,70,30)"/><text x="80.9182%" y="143.50"></text></g><g><title>check_impl_item_well_formed (10,901,679 samples, 4.54%)</title><rect x="76.5982%" y="149" width="4.5374%" height="15" fill="rgb(212,68,19)"/><text x="76.8482%" y="159.50">check..</text></g><g><title>evaluate_obligation (431,988 samples, 0.18%)</title><rect x="81.7827%" y="133" width="0.1798%" height="15" fill="rgb(240,187,13)"/><text x="82.0327%" y="143.50"></text></g><g><title>param_env (264,892 samples, 0.11%)</title><rect x="82.0133%" y="133" width="0.1103%" height="15" fill="rgb(223,113,26)"/><text x="82.2633%" y="143.50"></text></g><g><title>analysis (197,040,408 samples, 82.01%)</title><rect x="0.2681%" y="197" width="82.0099%" height="15" fill="rgb(206,192,2)"/><text x="0.5181%" y="207.50">analysis</text></g><g><title>type_check_crate (117,919,395 samples, 49.08%)</title><rect x="33.1990%" y="181" width="49.0790%" height="15" fill="rgb(241,108,4)"/><text x="33.4490%" y="191.50">type_check_crate</text></g><g><title>wf_checking (14,087,887 samples, 5.86%)</title><rect x="76.4145%" y="165" width="5.8635%" height="15" fill="rgb(247,173,49)"/><text x="76.6645%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (2,744,811 samples, 1.14%)</title><rect x="81.1356%" y="149" width="1.1424%" height="15" fill="rgb(224,114,35)"/><text x="81.3856%" y="159.50"></text></g><g><title>codegen_crate (376,694 samples, 0.16%)</title><rect x="82.2806%" y="197" width="0.1568%" height="15" fill="rgb(245,159,27)"/><text x="82.5306%" y="207.50"></text></g><g><title>metadata_load_macro (255,973 samples, 0.11%)</title><rect x="89.5603%" y="149" width="0.1065%" height="15" fill="rgb(245,172,44)"/><text x="89.8103%" y="159.50"></text></g><g><title>metadata_register_crate (1,361,944 samples, 0.57%)</title><rect x="89.6668%" y="149" width="0.5669%" height="15" fill="rgb(236,23,11)"/><text x="89.9168%" y="159.50"></text></g><g><title>metadata_register_crate (470,227 samples, 0.20%)</title><rect x="90.0380%" y="133" width="0.1957%" height="15" fill="rgb(205,117,38)"/><text x="90.2880%" y="143.50"></text></g><g><title>macro_expand_crate (18,426,695 samples, 7.67%)</title><rect x="82.6433%" y="181" width="7.6693%" height="15" fill="rgb(237,72,25)"/><text x="82.8933%" y="191.50">macro_expa..</text></g><g><title>expand_crate (18,411,255 samples, 7.66%)</title><rect x="82.6497%" y="165" width="7.6629%" height="15" fill="rgb(244,70,9)"/><text x="82.8997%" y="175.50">expand_cra..</text></g><g><title>late_resolve_crate (4,175,227 samples, 1.74%)</title><rect x="90.4282%" y="165" width="1.7378%" height="15" fill="rgb(217,125,39)"/><text x="90.6782%" y="175.50"></text></g><g><title>configure_and_expand (23,573,253 samples, 9.81%)</title><rect x="82.4374%" y="197" width="9.8114%" height="15" fill="rgb(235,36,10)"/><text x="82.6874%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (4,524,531 samples, 1.88%)</title><rect x="90.3656%" y="181" width="1.8831%" height="15" fill="rgb(251,123,47)"/><text x="90.6156%" y="191.50">r..</text></g><g><title>drop_ast (418,035 samples, 0.17%)</title><rect x="92.2488%" y="197" width="0.1740%" height="15" fill="rgb(221,13,13)"/><text x="92.4988%" y="207.50"></text></g><g><title>early_lint_checks (688,697 samples, 0.29%)</title><rect x="92.4315%" y="197" width="0.2866%" height="15" fill="rgb(238,131,9)"/><text x="92.6815%" y="207.50"></text></g><g><title>free_global_ctxt (4,357,019 samples, 1.81%)</title><rect x="92.7181%" y="197" width="1.8134%" height="15" fill="rgb(211,50,8)"/><text x="92.9681%" y="207.50">f..</text></g><g><title>mir_for_ctfe (255,173 samples, 0.11%)</title><rect x="95.3756%" y="181" width="0.1062%" height="15" fill="rgb(245,182,24)"/><text x="95.6256%" y="191.50"></text></g><g><title>generate_crate_metadata (2,469,207 samples, 1.03%)</title><rect x="94.5315%" y="197" width="1.0277%" height="15" fill="rgb(242,14,37)"/><text x="94.7815%" y="207.50"></text></g><g><title>hir_lowering (6,534,573 samples, 2.72%)</title><rect x="95.5593%" y="197" width="2.7197%" height="15" fill="rgb(246,228,12)"/><text x="95.8093%" y="207.50">hi..</text></g><g><title>parse_crate (2,259,085 samples, 0.94%)</title><rect x="98.3045%" y="197" width="0.9403%" height="15" fill="rgb(213,55,15)"/><text x="98.5545%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,150,193 samples, 0.48%)</title><rect x="99.3239%" y="197" width="0.4787%" height="15" fill="rgb(209,9,3)"/><text x="99.5739%" y="207.50"></text></g><g><title>all (240,264,238 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (240,264,238 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (381,384 samples, 0.16%)</title><rect x="99.8413%" y="197" width="0.1587%" height="15" fill="rgb(220,109,13)"/><text x="100.0913%" y="207.50"></text></g></svg></svg>