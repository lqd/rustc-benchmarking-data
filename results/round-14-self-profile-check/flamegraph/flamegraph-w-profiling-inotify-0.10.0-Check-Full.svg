<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (414,692 samples, 0.13%)</title><rect x="10.5352%" y="133" width="0.1300%" height="15" fill="rgb(227,0,7)"/><text x="10.7852%" y="143.50"></text></g><g><title>param_env (355,706 samples, 0.11%)</title><rect x="12.1619%" y="101" width="0.1115%" height="15" fill="rgb(217,0,24)"/><text x="12.4119%" y="111.50"></text></g><g><title>codegen_fn_attrs (446,856 samples, 0.14%)</title><rect x="12.6115%" y="85" width="0.1401%" height="15" fill="rgb(221,193,54)"/><text x="12.8615%" y="95.50"></text></g><g><title>adt_drop_tys (376,964 samples, 0.12%)</title><rect x="15.1985%" y="53" width="0.1182%" height="15" fill="rgb(248,212,6)"/><text x="15.4485%" y="63.50"></text></g><g><title>needs_drop_raw (1,662,299 samples, 0.52%)</title><rect x="15.1502%" y="69" width="0.5210%" height="15" fill="rgb(208,68,35)"/><text x="15.4002%" y="79.50"></text></g><g><title>is_copy_raw (1,130,905 samples, 0.35%)</title><rect x="15.3168%" y="53" width="0.3545%" height="15" fill="rgb(232,128,0)"/><text x="15.5668%" y="63.50"></text></g><g><title>evaluate_obligation (960,243 samples, 0.30%)</title><rect x="15.3703%" y="37" width="0.3010%" height="15" fill="rgb(207,160,47)"/><text x="15.6203%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (405,386 samples, 0.13%)</title><rect x="15.7996%" y="53" width="0.1271%" height="15" fill="rgb(228,23,34)"/><text x="16.0496%" y="63.50"></text></g><g><title>resolve_instance (1,403,376 samples, 0.44%)</title><rect x="15.6826%" y="69" width="0.4399%" height="15" fill="rgb(218,30,26)"/><text x="15.9326%" y="79.50"></text></g><g><title>thir_body (2,738,309 samples, 0.86%)</title><rect x="16.1430%" y="69" width="0.8583%" height="15" fill="rgb(220,122,19)"/><text x="16.3930%" y="79.50"></text></g><g><title>mir_const (17,565,085 samples, 5.51%)</title><rect x="11.5100%" y="117" width="5.5056%" height="15" fill="rgb(250,228,42)"/><text x="11.7600%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (15,129,387 samples, 4.74%)</title><rect x="12.2734%" y="101" width="4.7422%" height="15" fill="rgb(240,193,28)"/><text x="12.5234%" y="111.50">unsafe..</text></g><g><title>mir_built (13,603,889 samples, 4.26%)</title><rect x="12.7516%" y="85" width="4.2640%" height="15" fill="rgb(216,20,37)"/><text x="13.0016%" y="95.50">mir_b..</text></g><g><title>thir_body (472,229 samples, 0.15%)</title><rect x="18.1027%" y="53" width="0.1480%" height="15" fill="rgb(206,188,39)"/><text x="18.3527%" y="63.50"></text></g><g><title>mir_const (2,960,612 samples, 0.93%)</title><rect x="17.3318%" y="101" width="0.9280%" height="15" fill="rgb(217,207,13)"/><text x="17.5818%" y="111.50"></text></g><g><title>unsafety_check_result (2,289,723 samples, 0.72%)</title><rect x="17.5421%" y="85" width="0.7177%" height="15" fill="rgb(231,73,38)"/><text x="17.7921%" y="95.50"></text></g><g><title>mir_built (2,002,739 samples, 0.63%)</title><rect x="17.6320%" y="69" width="0.6277%" height="15" fill="rgb(225,20,46)"/><text x="17.8820%" y="79.50"></text></g><g><title>mir_promoted (24,232,668 samples, 7.60%)</title><rect x="10.6731%" y="133" width="7.5955%" height="15" fill="rgb(210,31,41)"/><text x="10.9231%" y="143.50">mir_promot..</text></g><g><title>mir_const_qualif (3,997,799 samples, 1.25%)</title><rect x="17.0156%" y="117" width="1.2531%" height="15" fill="rgb(221,200,47)"/><text x="17.2656%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (1,165,674 samples, 0.37%)</title><rect x="18.2746%" y="133" width="0.3654%" height="15" fill="rgb(226,26,5)"/><text x="18.5246%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (490,654 samples, 0.15%)</title><rect x="18.6400%" y="133" width="0.1538%" height="15" fill="rgb(249,33,26)"/><text x="18.8900%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,812,883 samples, 0.88%)</title><rect x="18.8871%" y="133" width="0.8817%" height="15" fill="rgb(235,183,28)"/><text x="19.1371%" y="143.50"></text></g><g><title>MIR_borrow_checking (61,284,742 samples, 19.21%)</title><rect x="0.5640%" y="165" width="19.2091%" height="15" fill="rgb(221,5,38)"/><text x="0.8140%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (60,806,006 samples, 19.06%)</title><rect x="0.7141%" y="149" width="19.0591%" height="15" fill="rgb(247,18,42)"/><text x="0.9641%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,835,130 samples, 0.58%)</title><rect x="19.7732%" y="165" width="0.5752%" height="15" fill="rgb(241,131,45)"/><text x="20.0232%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,570,879 samples, 0.49%)</title><rect x="19.8560%" y="149" width="0.4924%" height="15" fill="rgb(249,31,29)"/><text x="20.1060%" y="159.50"></text></g><g><title>hir_module_items (536,546 samples, 0.17%)</title><rect x="20.3484%" y="165" width="0.1682%" height="15" fill="rgb(225,111,53)"/><text x="20.5984%" y="175.50"></text></g><g><title>should_inherit_track_caller (549,388 samples, 0.17%)</title><rect x="20.8460%" y="117" width="0.1722%" height="15" fill="rgb(238,160,17)"/><text x="21.0960%" y="127.50"></text></g><g><title>codegen_fn_attrs (814,642 samples, 0.26%)</title><rect x="20.7693%" y="133" width="0.2553%" height="15" fill="rgb(214,148,48)"/><text x="21.0193%" y="143.50"></text></g><g><title>check_mod_attrs (1,587,829 samples, 0.50%)</title><rect x="20.5270%" y="149" width="0.4977%" height="15" fill="rgb(232,36,49)"/><text x="20.7770%" y="159.50"></text></g><g><title>check_mod_const_bodies (331,313 samples, 0.10%)</title><rect x="21.0247%" y="149" width="0.1038%" height="15" fill="rgb(209,103,24)"/><text x="21.2747%" y="159.50"></text></g><g><title>lookup_deprecation_entry (361,714 samples, 0.11%)</title><rect x="21.3098%" y="133" width="0.1134%" height="15" fill="rgb(229,88,8)"/><text x="21.5598%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (917,120 samples, 0.29%)</title><rect x="21.1858%" y="149" width="0.2875%" height="15" fill="rgb(213,181,19)"/><text x="21.4358%" y="159.50"></text></g><g><title>misc_checking_1 (3,147,815 samples, 0.99%)</title><rect x="20.5167%" y="165" width="0.9867%" height="15" fill="rgb(254,191,54)"/><text x="20.7667%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,137,182 samples, 0.36%)</title><rect x="21.5038%" y="149" width="0.3564%" height="15" fill="rgb(241,83,37)"/><text x="21.7538%" y="159.50"></text></g><g><title>check_mod_liveness (896,519 samples, 0.28%)</title><rect x="21.5793%" y="133" width="0.2810%" height="15" fill="rgb(233,36,39)"/><text x="21.8293%" y="143.50"></text></g><g><title>misc_checking_2 (2,623,829 samples, 0.82%)</title><rect x="21.5033%" y="165" width="0.8224%" height="15" fill="rgb(226,3,54)"/><text x="21.7533%" y="175.50"></text></g><g><title>match_checking (1,484,947 samples, 0.47%)</title><rect x="21.8603%" y="149" width="0.4654%" height="15" fill="rgb(245,192,40)"/><text x="22.1103%" y="159.50"></text></g><g><title>check_match (1,371,584 samples, 0.43%)</title><rect x="21.8958%" y="133" width="0.4299%" height="15" fill="rgb(238,167,29)"/><text x="22.1458%" y="143.50"></text></g><g><title>check_private_in_public (527,016 samples, 0.17%)</title><rect x="22.3294%" y="149" width="0.1652%" height="15" fill="rgb(232,182,51)"/><text x="22.5794%" y="159.50"></text></g><g><title>death_checking (1,242,074 samples, 0.39%)</title><rect x="22.4946%" y="149" width="0.3893%" height="15" fill="rgb(231,60,39)"/><text x="22.7446%" y="159.50"></text></g><g><title>param_env (674,767 samples, 0.21%)</title><rect x="23.5706%" y="117" width="0.2115%" height="15" fill="rgb(208,69,12)"/><text x="23.8206%" y="127.50"></text></g><g><title>predicates_of (320,852 samples, 0.10%)</title><rect x="23.6815%" y="101" width="0.1006%" height="15" fill="rgb(235,93,37)"/><text x="23.9315%" y="111.50"></text></g><g><title>crate_lints (4,239,967 samples, 1.33%)</title><rect x="22.8847%" y="133" width="1.3290%" height="15" fill="rgb(213,116,39)"/><text x="23.1347%" y="143.50"></text></g><g><title>type_of (1,278,983 samples, 0.40%)</title><rect x="23.8128%" y="117" width="0.4009%" height="15" fill="rgb(222,207,29)"/><text x="24.0628%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,013,188 samples, 0.32%)</title><rect x="23.8961%" y="101" width="0.3176%" height="15" fill="rgb(206,96,30)"/><text x="24.1461%" y="111.50"></text></g><g><title>lint_checking (5,405,900 samples, 1.69%)</title><rect x="22.8839%" y="149" width="1.6944%" height="15" fill="rgb(218,138,4)"/><text x="23.1339%" y="159.50"></text></g><g><title>module_lints (1,163,493 samples, 0.36%)</title><rect x="24.2137%" y="133" width="0.3647%" height="15" fill="rgb(250,191,14)"/><text x="24.4637%" y="143.50"></text></g><g><title>lint_mod (1,154,943 samples, 0.36%)</title><rect x="24.2163%" y="117" width="0.3620%" height="15" fill="rgb(239,60,40)"/><text x="24.4663%" y="127.50"></text></g><g><title>privacy_access_levels (657,678 samples, 0.21%)</title><rect x="24.5784%" y="149" width="0.2061%" height="15" fill="rgb(206,27,48)"/><text x="24.8284%" y="159.50"></text></g><g><title>privacy_checking_modules (1,932,571 samples, 0.61%)</title><rect x="24.7845%" y="149" width="0.6057%" height="15" fill="rgb(225,35,8)"/><text x="25.0345%" y="159.50"></text></g><g><title>check_mod_privacy (1,927,411 samples, 0.60%)</title><rect x="24.7861%" y="133" width="0.6041%" height="15" fill="rgb(250,213,24)"/><text x="25.0361%" y="143.50"></text></g><g><title>misc_checking_3 (9,807,969 samples, 3.07%)</title><rect x="22.3257%" y="165" width="3.0742%" height="15" fill="rgb(247,123,22)"/><text x="22.5757%" y="175.50">mis..</text></g><g><title>adt_destructor (440,695 samples, 0.14%)</title><rect x="25.4984%" y="117" width="0.1381%" height="15" fill="rgb(231,138,38)"/><text x="25.7484%" y="127.50"></text></g><g><title>coherent_trait (437,725 samples, 0.14%)</title><rect x="25.4994%" y="101" width="0.1372%" height="15" fill="rgb(231,145,46)"/><text x="25.7494%" y="111.50"></text></g><g><title>specialization_graph_of (436,075 samples, 0.14%)</title><rect x="25.4999%" y="85" width="0.1367%" height="15" fill="rgb(251,118,11)"/><text x="25.7499%" y="95.50"></text></g><g><title>impl_parent (3,761,974 samples, 1.18%)</title><rect x="27.7296%" y="101" width="1.1792%" height="15" fill="rgb(217,147,25)"/><text x="27.9796%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,187,190 samples, 0.69%)</title><rect x="28.2232%" y="85" width="0.6856%" height="15" fill="rgb(247,81,37)"/><text x="28.4732%" y="95.50"></text></g><g><title>impl_trait_ref (7,533,168 samples, 2.36%)</title><rect x="28.9088%" y="101" width="2.3612%" height="15" fill="rgb(209,12,38)"/><text x="29.1588%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,747,044 samples, 1.80%)</title><rect x="29.4686%" y="85" width="1.8014%" height="15" fill="rgb(227,1,9)"/><text x="29.7186%" y="95.50">m..</text></g><g><title>coherent_trait (20,179,603 samples, 6.33%)</title><rect x="25.4765%" y="133" width="6.3251%" height="15" fill="rgb(248,47,43)"/><text x="25.7265%" y="143.50">coherent..</text></g><g><title>specialization_graph_of (19,434,085 samples, 6.09%)</title><rect x="25.7101%" y="117" width="6.0914%" height="15" fill="rgb(221,10,30)"/><text x="25.9601%" y="127.50">speciali..</text></g><g><title>trait_impls_of (1,693,547 samples, 0.53%)</title><rect x="31.2707%" y="101" width="0.5308%" height="15" fill="rgb(210,229,1)"/><text x="31.5207%" y="111.50"></text></g><g><title>implementations_of_trait (684,457 samples, 0.21%)</title><rect x="31.5870%" y="85" width="0.2145%" height="15" fill="rgb(222,148,37)"/><text x="31.8370%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (319,873 samples, 0.10%)</title><rect x="31.7013%" y="69" width="0.1003%" height="15" fill="rgb(234,67,33)"/><text x="31.9513%" y="79.50"></text></g><g><title>coherence_checking (20,502,958 samples, 6.43%)</title><rect x="25.4635%" y="149" width="6.4265%" height="15" fill="rgb(247,98,35)"/><text x="25.7135%" y="159.50">coherenc..</text></g><g><title>associated_item (576,159 samples, 0.18%)</title><rect x="49.6938%" y="85" width="0.1806%" height="15" fill="rgb(247,138,52)"/><text x="49.9438%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (466,158 samples, 0.15%)</title><rect x="49.7282%" y="69" width="0.1461%" height="15" fill="rgb(213,79,30)"/><text x="49.9782%" y="79.50"></text></g><g><title>associated_items (849,081 samples, 0.27%)</title><rect x="49.6237%" y="101" width="0.2661%" height="15" fill="rgb(246,177,23)"/><text x="49.8737%" y="111.50"></text></g><g><title>adt_dtorck_constraint (420,144 samples, 0.13%)</title><rect x="50.0380%" y="85" width="0.1317%" height="15" fill="rgb(230,62,27)"/><text x="50.2880%" y="95.50"></text></g><g><title>dropck_outlives (752,768 samples, 0.24%)</title><rect x="49.9382%" y="101" width="0.2359%" height="15" fill="rgb(216,154,8)"/><text x="50.1882%" y="111.50"></text></g><g><title>predicates_of (384,053 samples, 0.12%)</title><rect x="51.1507%" y="85" width="0.1204%" height="15" fill="rgb(244,35,45)"/><text x="51.4007%" y="95.50"></text></g><g><title>specializes (371,642 samples, 0.12%)</title><rect x="51.2711%" y="85" width="0.1165%" height="15" fill="rgb(251,115,12)"/><text x="51.5211%" y="95.50"></text></g><g><title>trait_impls_of (363,864 samples, 0.11%)</title><rect x="51.3914%" y="85" width="0.1140%" height="15" fill="rgb(240,54,50)"/><text x="51.6414%" y="95.50"></text></g><g><title>evaluate_obligation (4,255,324 samples, 1.33%)</title><rect x="50.1742%" y="101" width="1.3338%" height="15" fill="rgb(233,84,52)"/><text x="50.4242%" y="111.50"></text></g><g><title>method_autoderef_steps (419,605 samples, 0.13%)</title><rect x="51.8093%" y="101" width="0.1315%" height="15" fill="rgb(207,117,47)"/><text x="52.0593%" y="111.50"></text></g><g><title>predicates_of (526,156 samples, 0.16%)</title><rect x="52.0362%" y="101" width="0.1649%" height="15" fill="rgb(249,43,39)"/><text x="52.2862%" y="111.50"></text></g><g><title>predicates_defined_on (347,983 samples, 0.11%)</title><rect x="52.0920%" y="85" width="0.1091%" height="15" fill="rgb(209,38,44)"/><text x="52.3420%" y="95.50"></text></g><g><title>evaluate_obligation (607,363 samples, 0.19%)</title><rect x="53.2398%" y="85" width="0.1904%" height="15" fill="rgb(236,212,23)"/><text x="53.4898%" y="95.50"></text></g><g><title>typeck (4,365,469 samples, 1.37%)</title><rect x="52.2557%" y="101" width="1.3683%" height="15" fill="rgb(242,79,21)"/><text x="52.5057%" y="111.50"></text></g><g><title>item_bodies_checking (69,369,352 samples, 21.74%)</title><rect x="31.9208%" y="149" width="21.7432%" height="15" fill="rgb(211,96,35)"/><text x="32.1708%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (69,365,662 samples, 21.74%)</title><rect x="31.9220%" y="133" width="21.7420%" height="15" fill="rgb(253,215,40)"/><text x="32.1720%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (69,035,000 samples, 21.64%)</title><rect x="32.0256%" y="117" width="21.6384%" height="15" fill="rgb(211,81,21)"/><text x="32.2756%" y="127.50">typeck</text></g><g><title>item_types_checking (3,107,524 samples, 0.97%)</title><rect x="53.6640%" y="149" width="0.9740%" height="15" fill="rgb(208,190,38)"/><text x="53.9140%" y="159.50"></text></g><g><title>check_mod_item_types (3,099,664 samples, 0.97%)</title><rect x="53.6665%" y="133" width="0.9716%" height="15" fill="rgb(235,213,38)"/><text x="53.9165%" y="143.50"></text></g><g><title>typeck (427,635 samples, 0.13%)</title><rect x="54.5040%" y="117" width="0.1340%" height="15" fill="rgb(237,122,38)"/><text x="54.7540%" y="127.50"></text></g><g><title>fn_sig (876,270 samples, 0.27%)</title><rect x="54.8722%" y="117" width="0.2747%" height="15" fill="rgb(244,218,35)"/><text x="55.1222%" y="127.50"></text></g><g><title>is_late_bound_map (767,599 samples, 0.24%)</title><rect x="55.2473%" y="101" width="0.2406%" height="15" fill="rgb(240,68,47)"/><text x="55.4973%" y="111.50"></text></g><g><title>resolve_lifetimes (748,599 samples, 0.23%)</title><rect x="55.2532%" y="85" width="0.2346%" height="15" fill="rgb(210,16,53)"/><text x="55.5032%" y="95.50"></text></g><g><title>lint_levels (621,737 samples, 0.19%)</title><rect x="55.2930%" y="69" width="0.1949%" height="15" fill="rgb(235,124,12)"/><text x="55.5430%" y="79.50"></text></g><g><title>named_region_map (579,365 samples, 0.18%)</title><rect x="55.4879%" y="101" width="0.1816%" height="15" fill="rgb(224,169,11)"/><text x="55.7379%" y="111.50"></text></g><g><title>resolve_lifetimes (526,465 samples, 0.17%)</title><rect x="55.5044%" y="85" width="0.1650%" height="15" fill="rgb(250,166,2)"/><text x="55.7544%" y="95.50"></text></g><g><title>generics_of (1,709,847 samples, 0.54%)</title><rect x="55.1469%" y="117" width="0.5359%" height="15" fill="rgb(242,216,29)"/><text x="55.3969%" y="127.50"></text></g><g><title>explicit_predicates_of (401,954 samples, 0.13%)</title><rect x="55.8544%" y="85" width="0.1260%" height="15" fill="rgb(230,116,27)"/><text x="56.1044%" y="95.50"></text></g><g><title>predicates_of (1,125,834 samples, 0.35%)</title><rect x="55.7241%" y="117" width="0.3529%" height="15" fill="rgb(228,99,48)"/><text x="55.9741%" y="127.50"></text></g><g><title>predicates_defined_on (970,252 samples, 0.30%)</title><rect x="55.7728%" y="101" width="0.3041%" height="15" fill="rgb(253,11,6)"/><text x="56.0228%" y="111.50"></text></g><g><title>type_collecting (4,825,134 samples, 1.51%)</title><rect x="54.6399%" y="149" width="1.5124%" height="15" fill="rgb(247,143,39)"/><text x="54.8899%" y="159.50"></text></g><g><title>collect_mod_item_types (4,803,714 samples, 1.51%)</title><rect x="54.6466%" y="133" width="1.5057%" height="15" fill="rgb(236,97,10)"/><text x="54.8966%" y="143.50"></text></g><g><title>evaluate_obligation (942,201 samples, 0.30%)</title><rect x="57.6283%" y="117" width="0.2953%" height="15" fill="rgb(233,208,19)"/><text x="57.8783%" y="127.50"></text></g><g><title>param_env (801,739 samples, 0.25%)</title><rect x="58.0252%" y="117" width="0.2513%" height="15" fill="rgb(216,164,2)"/><text x="58.2752%" y="127.50"></text></g><g><title>region_scope_tree (1,129,383 samples, 0.35%)</title><rect x="58.3025%" y="117" width="0.3540%" height="15" fill="rgb(220,129,5)"/><text x="58.5525%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,516,431 samples, 2.36%)</title><rect x="56.3300%" y="133" width="2.3560%" height="15" fill="rgb(242,17,10)"/><text x="56.5800%" y="143.50">c..</text></g><g><title>evaluate_obligation (662,920 samples, 0.21%)</title><rect x="59.2665%" y="117" width="0.2078%" height="15" fill="rgb(242,107,0)"/><text x="59.5165%" y="127.50"></text></g><g><title>param_env (405,506 samples, 0.13%)</title><rect x="59.5195%" y="117" width="0.1271%" height="15" fill="rgb(251,28,31)"/><text x="59.7695%" y="127.50"></text></g><g><title>check_item_well_formed (3,443,669 samples, 1.08%)</title><rect x="58.6859%" y="133" width="1.0794%" height="15" fill="rgb(233,223,10)"/><text x="58.9359%" y="143.50"></text></g><g><title>analysis (191,146,966 samples, 59.91%)</title><rect x="0.3480%" y="181" width="59.9133%" height="15" fill="rgb(215,21,27)"/><text x="0.5980%" y="191.50">analysis</text></g><g><title>type_check_crate (111,221,527 samples, 34.86%)</title><rect x="25.3999%" y="165" width="34.8614%" height="15" fill="rgb(232,23,21)"/><text x="25.6499%" y="175.50">type_check_crate</text></g><g><title>wf_checking (13,087,266 samples, 4.10%)</title><rect x="56.1592%" y="149" width="4.1021%" height="15" fill="rgb(244,5,23)"/><text x="56.4092%" y="159.50">wf_c..</text></g><g><title>check_trait_item_well_formed (1,582,497 samples, 0.50%)</title><rect x="59.7653%" y="133" width="0.4960%" height="15" fill="rgb(226,81,46)"/><text x="60.0153%" y="143.50"></text></g><g><title>codegen_crate (610,867 samples, 0.19%)</title><rect x="60.2649%" y="181" width="0.1915%" height="15" fill="rgb(247,70,30)"/><text x="60.5149%" y="191.50"></text></g><g><title>AST_validation (462,416 samples, 0.14%)</title><rect x="60.5379%" y="165" width="0.1449%" height="15" fill="rgb(212,68,19)"/><text x="60.7879%" y="175.50"></text></g><g><title>metadata_load_macro (480,264 samples, 0.15%)</title><rect x="88.3760%" y="133" width="0.1505%" height="15" fill="rgb(240,187,13)"/><text x="88.6260%" y="143.50"></text></g><g><title>metadata_register_crate (7,846,517 samples, 2.46%)</title><rect x="88.5265%" y="133" width="2.4594%" height="15" fill="rgb(223,113,26)"/><text x="88.7765%" y="143.50">me..</text></g><g><title>metadata_register_crate (5,436,449 samples, 1.70%)</title><rect x="89.2819%" y="117" width="1.7040%" height="15" fill="rgb(206,192,2)"/><text x="89.5319%" y="127.50"></text></g><g><title>macro_expand_crate (96,815,377 samples, 30.35%)</title><rect x="60.7641%" y="165" width="30.3459%" height="15" fill="rgb(241,108,4)"/><text x="61.0141%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (96,800,517 samples, 30.34%)</title><rect x="60.7688%" y="149" width="30.3412%" height="15" fill="rgb(247,173,49)"/><text x="61.0188%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (395,995 samples, 0.12%)</title><rect x="90.9859%" y="133" width="0.1241%" height="15" fill="rgb(224,114,35)"/><text x="91.2359%" y="143.50"></text></g><g><title>finalize_macro_resolutions (611,597 samples, 0.19%)</title><rect x="91.2001%" y="149" width="0.1917%" height="15" fill="rgb(245,159,27)"/><text x="91.4501%" y="159.50"></text></g><g><title>late_resolve_crate (3,413,338 samples, 1.07%)</title><rect x="91.3918%" y="149" width="1.0699%" height="15" fill="rgb(245,172,44)"/><text x="91.6418%" y="159.50"></text></g><g><title>configure_and_expand (102,345,809 samples, 32.08%)</title><rect x="60.4564%" y="181" width="32.0794%" height="15" fill="rgb(236,23,11)"/><text x="60.7064%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,430,569 samples, 1.39%)</title><rect x="91.1470%" y="165" width="1.3887%" height="15" fill="rgb(205,117,38)"/><text x="91.3970%" y="175.50"></text></g><g><title>drop_ast (720,758 samples, 0.23%)</title><rect x="92.5357%" y="181" width="0.2259%" height="15" fill="rgb(237,72,25)"/><text x="92.7857%" y="191.50"></text></g><g><title>early_lint_checks (907,570 samples, 0.28%)</title><rect x="92.7688%" y="181" width="0.2845%" height="15" fill="rgb(244,70,9)"/><text x="93.0188%" y="191.50"></text></g><g><title>free_global_ctxt (5,023,356 samples, 1.57%)</title><rect x="93.0533%" y="181" width="1.5745%" height="15" fill="rgb(217,125,39)"/><text x="93.3033%" y="191.50"></text></g><g><title>eval_to_const_value_raw (802,326 samples, 0.25%)</title><rect x="96.1577%" y="133" width="0.2515%" height="15" fill="rgb(235,36,10)"/><text x="96.4077%" y="143.50"></text></g><g><title>eval_to_const_value_raw (755,166 samples, 0.24%)</title><rect x="96.1725%" y="117" width="0.2367%" height="15" fill="rgb(251,123,47)"/><text x="96.4225%" y="127.50"></text></g><g><title>eval_to_allocation_raw (676,576 samples, 0.21%)</title><rect x="96.1971%" y="101" width="0.2121%" height="15" fill="rgb(221,13,13)"/><text x="96.4471%" y="111.50"></text></g><g><title>mir_for_ctfe (2,433,410 samples, 0.76%)</title><rect x="95.6687%" y="165" width="0.7627%" height="15" fill="rgb(238,131,9)"/><text x="95.9187%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,040,100 samples, 0.33%)</title><rect x="96.1054%" y="149" width="0.3260%" height="15" fill="rgb(211,50,8)"/><text x="96.3554%" y="159.50"></text></g><g><title>generate_crate_metadata (5,925,915 samples, 1.86%)</title><rect x="94.6278%" y="181" width="1.8574%" height="15" fill="rgb(245,182,24)"/><text x="94.8778%" y="191.50">g..</text></g><g><title>hir_lowering (8,397,564 samples, 2.63%)</title><rect x="96.4853%" y="181" width="2.6321%" height="15" fill="rgb(242,14,37)"/><text x="96.7353%" y="191.50">hi..</text></g><g><title>parse_crate (434,465 samples, 0.14%)</title><rect x="99.1378%" y="181" width="0.1362%" height="15" fill="rgb(246,228,12)"/><text x="99.3878%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,446,436 samples, 0.45%)</title><rect x="99.3453%" y="181" width="0.4534%" height="15" fill="rgb(213,55,15)"/><text x="99.5953%" y="191.50"></text></g><g><title>all (319,039,329 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (319,039,329 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (511,086 samples, 0.16%)</title><rect x="99.8398%" y="181" width="0.1602%" height="15" fill="rgb(209,121,21)"/><text x="100.0898%" y="191.50"></text></g></svg></svg>