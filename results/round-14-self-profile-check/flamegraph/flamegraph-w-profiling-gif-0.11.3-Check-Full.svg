<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (580,705 samples, 0.18%)</title><rect x="14.1183%" y="101" width="0.1789%" height="15" fill="rgb(227,0,7)"/><text x="14.3683%" y="111.50"></text></g><g><title>item_attrs (576,280 samples, 0.18%)</title><rect x="14.7881%" y="69" width="0.1776%" height="15" fill="rgb(217,0,24)"/><text x="15.0381%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (557,070 samples, 0.17%)</title><rect x="14.7940%" y="53" width="0.1717%" height="15" fill="rgb(221,193,54)"/><text x="15.0440%" y="63.50"></text></g><g><title>codegen_fn_attrs (794,052 samples, 0.24%)</title><rect x="14.7334%" y="85" width="0.2447%" height="15" fill="rgb(248,212,6)"/><text x="14.9834%" y="95.50"></text></g><g><title>is_copy_raw (400,303 samples, 0.12%)</title><rect x="17.9811%" y="69" width="0.1234%" height="15" fill="rgb(208,68,35)"/><text x="18.2311%" y="79.50"></text></g><g><title>evaluate_obligation (329,343 samples, 0.10%)</title><rect x="18.0030%" y="53" width="0.1015%" height="15" fill="rgb(232,128,0)"/><text x="18.2530%" y="63.50"></text></g><g><title>adt_drop_tys (586,297 samples, 0.18%)</title><rect x="18.1997%" y="53" width="0.1807%" height="15" fill="rgb(207,160,47)"/><text x="18.4497%" y="63.50"></text></g><g><title>is_copy_raw (1,769,250 samples, 0.55%)</title><rect x="18.3803%" y="53" width="0.5452%" height="15" fill="rgb(228,23,34)"/><text x="18.6303%" y="63.50"></text></g><g><title>evaluate_obligation (1,446,636 samples, 0.45%)</title><rect x="18.4797%" y="37" width="0.4458%" height="15" fill="rgb(218,30,26)"/><text x="18.7297%" y="47.50"></text></g><g><title>needs_drop_raw (2,766,865 samples, 0.85%)</title><rect x="18.1049%" y="69" width="0.8526%" height="15" fill="rgb(220,122,19)"/><text x="18.3549%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (419,282 samples, 0.13%)</title><rect x="19.0758%" y="53" width="0.1292%" height="15" fill="rgb(250,228,42)"/><text x="19.3258%" y="63.50"></text></g><g><title>resolve_instance (1,331,523 samples, 0.41%)</title><rect x="18.9575%" y="69" width="0.4103%" height="15" fill="rgb(240,193,28)"/><text x="19.2075%" y="79.50"></text></g><g><title>thir_body (4,008,946 samples, 1.24%)</title><rect x="19.3873%" y="69" width="1.2354%" height="15" fill="rgb(216,20,37)"/><text x="19.6373%" y="79.50"></text></g><g><title>mir_const (23,551,092 samples, 7.26%)</title><rect x="13.3770%" y="117" width="7.2575%" height="15" fill="rgb(206,188,39)"/><text x="13.6270%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (20,564,873 samples, 6.34%)</title><rect x="14.2972%" y="101" width="6.3372%" height="15" fill="rgb(217,207,13)"/><text x="14.5472%" y="111.50">unsafety..</text></g><g><title>mir_built (18,352,394 samples, 5.66%)</title><rect x="14.9790%" y="85" width="5.6554%" height="15" fill="rgb(231,73,38)"/><text x="15.2290%" y="95.50">mir_bui..</text></g><g><title>mir_promoted (26,339,699 samples, 8.12%)</title><rect x="12.6334%" y="133" width="8.1168%" height="15" fill="rgb(225,20,46)"/><text x="12.8834%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (375,455 samples, 0.12%)</title><rect x="20.6345%" y="117" width="0.1157%" height="15" fill="rgb(210,31,41)"/><text x="20.8845%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (838,241 samples, 0.26%)</title><rect x="20.7518%" y="133" width="0.2583%" height="15" fill="rgb(221,200,47)"/><text x="21.0018%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,597,478 samples, 0.49%)</title><rect x="21.0101%" y="133" width="0.4923%" height="15" fill="rgb(226,26,5)"/><text x="21.2601%" y="143.50"></text></g><g><title>normalize_projection_ty (1,063,641 samples, 0.33%)</title><rect x="21.1746%" y="117" width="0.3278%" height="15" fill="rgb(249,33,26)"/><text x="21.4246%" y="127.50"></text></g><g><title>type_op_normalize_predicate (888,408 samples, 0.27%)</title><rect x="21.5024%" y="133" width="0.2738%" height="15" fill="rgb(235,183,28)"/><text x="21.7524%" y="143.50"></text></g><g><title>normalize_projection_ty (617,976 samples, 0.19%)</title><rect x="21.5857%" y="117" width="0.1904%" height="15" fill="rgb(221,5,38)"/><text x="21.8357%" y="127.50"></text></g><g><title>type_op_prove_predicate (6,707,003 samples, 2.07%)</title><rect x="21.7839%" y="133" width="2.0668%" height="15" fill="rgb(247,18,42)"/><text x="22.0339%" y="143.50">t..</text></g><g><title>evaluate_obligation (335,143 samples, 0.10%)</title><rect x="23.7475%" y="117" width="0.1033%" height="15" fill="rgb(241,131,45)"/><text x="23.9975%" y="127.50"></text></g><g><title>MIR_borrow_checking (75,750,834 samples, 23.34%)</title><rect x="0.5137%" y="165" width="23.3432%" height="15" fill="rgb(249,31,29)"/><text x="0.7637%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (75,467,402 samples, 23.26%)</title><rect x="0.6011%" y="149" width="23.2559%" height="15" fill="rgb(225,111,53)"/><text x="0.8511%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (445,755 samples, 0.14%)</title><rect x="23.9272%" y="165" width="0.1374%" height="15" fill="rgb(238,160,17)"/><text x="24.1772%" y="175.50"></text></g><g><title>should_inherit_track_caller (331,554 samples, 0.10%)</title><rect x="24.3591%" y="117" width="0.1022%" height="15" fill="rgb(214,148,48)"/><text x="24.6091%" y="127.50"></text></g><g><title>codegen_fn_attrs (560,055 samples, 0.17%)</title><rect x="24.2945%" y="133" width="0.1726%" height="15" fill="rgb(232,36,49)"/><text x="24.5445%" y="143.50"></text></g><g><title>check_mod_attrs (1,274,534 samples, 0.39%)</title><rect x="24.0743%" y="149" width="0.3928%" height="15" fill="rgb(209,103,24)"/><text x="24.3243%" y="159.50"></text></g><g><title>lookup_deprecation_entry (343,313 samples, 0.11%)</title><rect x="24.7355%" y="133" width="0.1058%" height="15" fill="rgb(229,88,8)"/><text x="24.9855%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (842,889 samples, 0.26%)</title><rect x="24.6227%" y="149" width="0.2597%" height="15" fill="rgb(213,181,19)"/><text x="24.8727%" y="159.50"></text></g><g><title>misc_checking_1 (2,746,720 samples, 0.85%)</title><rect x="24.0647%" y="165" width="0.8464%" height="15" fill="rgb(254,191,54)"/><text x="24.3147%" y="175.50"></text></g><g><title>check_mod_intrinsics (508,845 samples, 0.16%)</title><rect x="24.9152%" y="133" width="0.1568%" height="15" fill="rgb(241,83,37)"/><text x="25.1652%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (1,635,788 samples, 0.50%)</title><rect x="24.9118%" y="149" width="0.5041%" height="15" fill="rgb(233,36,39)"/><text x="25.1618%" y="159.50"></text></g><g><title>check_mod_liveness (1,115,692 samples, 0.34%)</title><rect x="25.0720%" y="133" width="0.3438%" height="15" fill="rgb(226,3,54)"/><text x="25.3220%" y="143.50"></text></g><g><title>misc_checking_2 (3,723,321 samples, 1.15%)</title><rect x="24.9112%" y="165" width="1.1474%" height="15" fill="rgb(245,192,40)"/><text x="25.1612%" y="175.50"></text></g><g><title>match_checking (2,085,563 samples, 0.64%)</title><rect x="25.4158%" y="149" width="0.6427%" height="15" fill="rgb(238,167,29)"/><text x="25.6658%" y="159.50"></text></g><g><title>check_match (2,009,422 samples, 0.62%)</title><rect x="25.4393%" y="133" width="0.6192%" height="15" fill="rgb(232,182,51)"/><text x="25.6893%" y="143.50"></text></g><g><title>check_private_in_public (557,356 samples, 0.17%)</title><rect x="26.0622%" y="149" width="0.1718%" height="15" fill="rgb(231,60,39)"/><text x="26.3122%" y="159.50"></text></g><g><title>death_checking (1,384,995 samples, 0.43%)</title><rect x="26.2340%" y="149" width="0.4268%" height="15" fill="rgb(208,69,12)"/><text x="26.4840%" y="159.50"></text></g><g><title>param_env (520,468 samples, 0.16%)</title><rect x="27.1816%" y="117" width="0.1604%" height="15" fill="rgb(235,93,37)"/><text x="27.4316%" y="127.50"></text></g><g><title>crate_lints (3,459,389 samples, 1.07%)</title><rect x="26.6614%" y="133" width="1.0660%" height="15" fill="rgb(213,116,39)"/><text x="26.9114%" y="143.50"></text></g><g><title>type_of (1,156,321 samples, 0.36%)</title><rect x="27.3711%" y="117" width="0.3563%" height="15" fill="rgb(222,207,29)"/><text x="27.6211%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (916,199 samples, 0.28%)</title><rect x="27.4451%" y="101" width="0.2823%" height="15" fill="rgb(206,96,30)"/><text x="27.6951%" y="111.50"></text></g><g><title>lint_checking (5,317,790 samples, 1.64%)</title><rect x="26.6608%" y="149" width="1.6387%" height="15" fill="rgb(218,138,4)"/><text x="26.9108%" y="159.50"></text></g><g><title>module_lints (1,856,501 samples, 0.57%)</title><rect x="27.7274%" y="133" width="0.5721%" height="15" fill="rgb(250,191,14)"/><text x="27.9774%" y="143.50"></text></g><g><title>lint_mod (1,848,011 samples, 0.57%)</title><rect x="27.7300%" y="117" width="0.5695%" height="15" fill="rgb(239,60,40)"/><text x="27.9800%" y="127.50"></text></g><g><title>privacy_access_levels (993,701 samples, 0.31%)</title><rect x="28.2995%" y="149" width="0.3062%" height="15" fill="rgb(206,27,48)"/><text x="28.5495%" y="159.50"></text></g><g><title>privacy_checking_modules (2,702,920 samples, 0.83%)</title><rect x="28.6057%" y="149" width="0.8329%" height="15" fill="rgb(225,35,8)"/><text x="28.8557%" y="159.50"></text></g><g><title>check_mod_privacy (2,697,440 samples, 0.83%)</title><rect x="28.6074%" y="133" width="0.8312%" height="15" fill="rgb(250,213,24)"/><text x="28.8574%" y="143.50"></text></g><g><title>misc_checking_3 (10,994,672 samples, 3.39%)</title><rect x="26.0585%" y="165" width="3.3881%" height="15" fill="rgb(247,123,22)"/><text x="26.3085%" y="175.50">mis..</text></g><g><title>impl_parent (2,835,790 samples, 0.87%)</title><rect x="31.0477%" y="101" width="0.8739%" height="15" fill="rgb(231,138,38)"/><text x="31.2977%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,662,863 samples, 0.51%)</title><rect x="31.4091%" y="85" width="0.5124%" height="15" fill="rgb(231,145,46)"/><text x="31.6591%" y="95.50"></text></g><g><title>impl_trait_ref (6,007,265 samples, 1.85%)</title><rect x="31.9216%" y="101" width="1.8512%" height="15" fill="rgb(251,118,11)"/><text x="32.1716%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,637,117 samples, 1.43%)</title><rect x="32.3438%" y="85" width="1.4290%" height="15" fill="rgb(217,147,25)"/><text x="32.5938%" y="95.50"></text></g><g><title>trait_impls_of (1,095,282 samples, 0.34%)</title><rect x="33.7810%" y="101" width="0.3375%" height="15" fill="rgb(247,81,37)"/><text x="34.0310%" y="111.50"></text></g><g><title>implementations_of_trait (443,275 samples, 0.14%)</title><rect x="33.9820%" y="85" width="0.1366%" height="15" fill="rgb(209,12,38)"/><text x="34.2320%" y="95.50"></text></g><g><title>coherent_trait (14,988,526 samples, 4.62%)</title><rect x="29.5000%" y="133" width="4.6188%" height="15" fill="rgb(227,1,9)"/><text x="29.7500%" y="143.50">coher..</text></g><g><title>specialization_graph_of (14,517,892 samples, 4.47%)</title><rect x="29.6451%" y="117" width="4.4738%" height="15" fill="rgb(248,47,43)"/><text x="29.8951%" y="127.50">speci..</text></g><g><title>coherence_checking (15,111,628 samples, 4.66%)</title><rect x="29.4929%" y="149" width="4.6568%" height="15" fill="rgb(221,10,30)"/><text x="29.7429%" y="159.50">coher..</text></g><g><title>associated_item (536,397 samples, 0.17%)</title><rect x="59.0470%" y="85" width="0.1653%" height="15" fill="rgb(210,229,1)"/><text x="59.2970%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (447,235 samples, 0.14%)</title><rect x="59.0745%" y="69" width="0.1378%" height="15" fill="rgb(222,148,37)"/><text x="59.3245%" y="79.50"></text></g><g><title>associated_items (778,673 samples, 0.24%)</title><rect x="58.9865%" y="101" width="0.2400%" height="15" fill="rgb(234,67,33)"/><text x="59.2365%" y="111.50"></text></g><g><title>adt_dtorck_constraint (487,486 samples, 0.15%)</title><rect x="59.4400%" y="85" width="0.1502%" height="15" fill="rgb(247,98,35)"/><text x="59.6900%" y="95.50"></text></g><g><title>dropck_outlives (1,065,216 samples, 0.33%)</title><rect x="59.2729%" y="101" width="0.3283%" height="15" fill="rgb(247,138,52)"/><text x="59.5229%" y="111.50"></text></g><g><title>generics_of (1,741,324 samples, 0.54%)</title><rect x="62.5782%" y="85" width="0.5366%" height="15" fill="rgb(213,79,30)"/><text x="62.8282%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,349,739 samples, 0.42%)</title><rect x="62.6989%" y="69" width="0.4159%" height="15" fill="rgb(246,177,23)"/><text x="62.9489%" y="79.50"></text></g><g><title>impl_trait_ref (1,859,136 samples, 0.57%)</title><rect x="63.2203%" y="85" width="0.5729%" height="15" fill="rgb(230,62,27)"/><text x="63.4703%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,300,821 samples, 0.40%)</title><rect x="63.3924%" y="69" width="0.4009%" height="15" fill="rgb(216,154,8)"/><text x="63.6424%" y="79.50"></text></g><g><title>predicates_of (1,415,595 samples, 0.44%)</title><rect x="63.8199%" y="85" width="0.4362%" height="15" fill="rgb(244,35,45)"/><text x="64.0699%" y="95.50"></text></g><g><title>predicates_defined_on (788,817 samples, 0.24%)</title><rect x="64.0131%" y="69" width="0.2431%" height="15" fill="rgb(251,115,12)"/><text x="64.2631%" y="79.50"></text></g><g><title>specializes (3,857,685 samples, 1.19%)</title><rect x="64.2561%" y="85" width="1.1888%" height="15" fill="rgb(240,54,50)"/><text x="64.5061%" y="95.50"></text></g><g><title>param_env (2,320,359 samples, 0.72%)</title><rect x="64.7299%" y="69" width="0.7150%" height="15" fill="rgb(233,84,52)"/><text x="64.9799%" y="79.50"></text></g><g><title>def_span (1,148,708 samples, 0.35%)</title><rect x="65.0909%" y="53" width="0.3540%" height="15" fill="rgb(207,117,47)"/><text x="65.3409%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (827,214 samples, 0.25%)</title><rect x="65.1900%" y="37" width="0.2549%" height="15" fill="rgb(249,43,39)"/><text x="65.4400%" y="47.50"></text></g><g><title>trait_impls_of (443,074 samples, 0.14%)</title><rect x="65.4521%" y="85" width="0.1365%" height="15" fill="rgb(209,38,44)"/><text x="65.7021%" y="95.50"></text></g><g><title>evaluate_obligation (19,477,445 samples, 6.00%)</title><rect x="59.6012%" y="101" width="6.0021%" height="15" fill="rgb(236,212,23)"/><text x="59.8512%" y="111.50">evaluate..</text></g><g><title>generics_of (835,159 samples, 0.26%)</title><rect x="65.6966%" y="101" width="0.2574%" height="15" fill="rgb(242,79,21)"/><text x="65.9466%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (628,658 samples, 0.19%)</title><rect x="65.7603%" y="85" width="0.1937%" height="15" fill="rgb(211,96,35)"/><text x="66.0103%" y="95.50"></text></g><g><title>item_attrs (655,768 samples, 0.20%)</title><rect x="66.0999%" y="101" width="0.2021%" height="15" fill="rgb(253,215,40)"/><text x="66.3499%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (644,128 samples, 0.20%)</title><rect x="66.1035%" y="85" width="0.1985%" height="15" fill="rgb(211,81,21)"/><text x="66.3535%" y="95.50"></text></g><g><title>method_autoderef_steps (864,593 samples, 0.27%)</title><rect x="66.3445%" y="101" width="0.2664%" height="15" fill="rgb(208,190,38)"/><text x="66.5945%" y="111.50"></text></g><g><title>evaluate_obligation (473,818 samples, 0.15%)</title><rect x="66.4650%" y="85" width="0.1460%" height="15" fill="rgb(235,213,38)"/><text x="66.7150%" y="95.50"></text></g><g><title>predicates_of (625,788 samples, 0.19%)</title><rect x="66.6732%" y="101" width="0.1928%" height="15" fill="rgb(237,122,38)"/><text x="66.9232%" y="111.50"></text></g><g><title>predicates_defined_on (438,827 samples, 0.14%)</title><rect x="66.7309%" y="85" width="0.1352%" height="15" fill="rgb(244,218,35)"/><text x="66.9809%" y="95.50"></text></g><g><title>specializes (419,846 samples, 0.13%)</title><rect x="66.8723%" y="101" width="0.1294%" height="15" fill="rgb(240,68,47)"/><text x="67.1223%" y="111.50"></text></g><g><title>associated_items (442,376 samples, 0.14%)</title><rect x="70.5851%" y="85" width="0.1363%" height="15" fill="rgb(210,16,53)"/><text x="70.8351%" y="95.50"></text></g><g><title>adt_dtorck_constraint (335,074 samples, 0.10%)</title><rect x="70.7841%" y="69" width="0.1033%" height="15" fill="rgb(235,124,12)"/><text x="71.0341%" y="79.50"></text></g><g><title>dropck_outlives (599,316 samples, 0.18%)</title><rect x="70.7358%" y="85" width="0.1847%" height="15" fill="rgb(224,169,11)"/><text x="70.9858%" y="95.50"></text></g><g><title>adt_sized_constraint (347,905 samples, 0.11%)</title><rect x="71.3795%" y="69" width="0.1072%" height="15" fill="rgb(250,166,2)"/><text x="71.6295%" y="79.50"></text></g><g><title>trait_impls_of (441,572 samples, 0.14%)</title><rect x="71.6020%" y="69" width="0.1361%" height="15" fill="rgb(242,216,29)"/><text x="71.8520%" y="79.50"></text></g><g><title>evaluate_obligation (2,655,547 samples, 0.82%)</title><rect x="70.9205%" y="85" width="0.8183%" height="15" fill="rgb(230,116,27)"/><text x="71.1705%" y="95.50"></text></g><g><title>generics_of (979,145 samples, 0.30%)</title><rect x="71.7731%" y="85" width="0.3017%" height="15" fill="rgb(228,99,48)"/><text x="72.0231%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (716,531 samples, 0.22%)</title><rect x="71.8540%" y="69" width="0.2208%" height="15" fill="rgb(253,11,6)"/><text x="72.1040%" y="79.50"></text></g><g><title>predicates_of (376,716 samples, 0.12%)</title><rect x="72.3361%" y="85" width="0.1161%" height="15" fill="rgb(247,143,39)"/><text x="72.5861%" y="95.50"></text></g><g><title>typeck (17,764,677 samples, 5.47%)</title><rect x="67.0566%" y="101" width="5.4743%" height="15" fill="rgb(236,97,10)"/><text x="67.3066%" y="111.50">typeck</text></g><g><title>item_bodies_checking (124,587,559 samples, 38.39%)</title><rect x="34.1691%" y="149" width="38.3926%" height="15" fill="rgb(233,208,19)"/><text x="34.4191%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (124,583,309 samples, 38.39%)</title><rect x="34.1704%" y="133" width="38.3913%" height="15" fill="rgb(216,164,2)"/><text x="34.4204%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (124,387,147 samples, 38.33%)</title><rect x="34.2309%" y="117" width="38.3309%" height="15" fill="rgb(220,129,5)"/><text x="34.4809%" y="127.50">typeck</text></g><g><title>item_types_checking (1,978,672 samples, 0.61%)</title><rect x="72.5617%" y="149" width="0.6097%" height="15" fill="rgb(242,17,10)"/><text x="72.8117%" y="159.50"></text></g><g><title>check_mod_item_types (1,971,882 samples, 0.61%)</title><rect x="72.5638%" y="133" width="0.6077%" height="15" fill="rgb(242,107,0)"/><text x="72.8138%" y="143.50"></text></g><g><title>mir_const_qualif (429,275 samples, 0.13%)</title><rect x="73.5320%" y="69" width="0.1323%" height="15" fill="rgb(251,28,31)"/><text x="73.7820%" y="79.50"></text></g><g><title>mir_const (358,392 samples, 0.11%)</title><rect x="73.5538%" y="53" width="0.1104%" height="15" fill="rgb(233,223,10)"/><text x="73.8038%" y="63.50"></text></g><g><title>mir_borrowck (909,391 samples, 0.28%)</title><rect x="73.7984%" y="37" width="0.2802%" height="15" fill="rgb(215,21,27)"/><text x="74.0484%" y="47.50"></text></g><g><title>mir_for_ctfe (1,349,514 samples, 0.42%)</title><rect x="73.6643%" y="69" width="0.4159%" height="15" fill="rgb(232,23,21)"/><text x="73.9143%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,239,183 samples, 0.38%)</title><rect x="73.6983%" y="53" width="0.3819%" height="15" fill="rgb(244,5,23)"/><text x="73.9483%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,757,091 samples, 0.85%)</title><rect x="73.4098%" y="117" width="0.8496%" height="15" fill="rgb(226,81,46)"/><text x="73.6598%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,732,769 samples, 0.84%)</title><rect x="73.4173%" y="101" width="0.8421%" height="15" fill="rgb(247,70,30)"/><text x="73.6673%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,704,239 samples, 0.83%)</title><rect x="73.4261%" y="85" width="0.8333%" height="15" fill="rgb(212,68,19)"/><text x="73.6761%" y="95.50"></text></g><g><title>typeck (578,914 samples, 0.18%)</title><rect x="74.0810%" y="69" width="0.1784%" height="15" fill="rgb(240,187,13)"/><text x="74.3310%" y="79.50"></text></g><g><title>fn_sig (741,049 samples, 0.23%)</title><rect x="74.2594%" y="117" width="0.2284%" height="15" fill="rgb(223,113,26)"/><text x="74.5094%" y="127.50"></text></g><g><title>is_late_bound_map (706,678 samples, 0.22%)</title><rect x="74.5657%" y="101" width="0.2178%" height="15" fill="rgb(206,192,2)"/><text x="74.8157%" y="111.50"></text></g><g><title>resolve_lifetimes (700,538 samples, 0.22%)</title><rect x="74.5676%" y="85" width="0.2159%" height="15" fill="rgb(241,108,4)"/><text x="74.8176%" y="95.50"></text></g><g><title>lint_levels (628,167 samples, 0.19%)</title><rect x="74.5899%" y="69" width="0.1936%" height="15" fill="rgb(247,173,49)"/><text x="74.8399%" y="79.50"></text></g><g><title>named_region_map (362,554 samples, 0.11%)</title><rect x="74.7835%" y="101" width="0.1117%" height="15" fill="rgb(224,114,35)"/><text x="75.0335%" y="111.50"></text></g><g><title>generics_of (1,350,815 samples, 0.42%)</title><rect x="74.4878%" y="117" width="0.4163%" height="15" fill="rgb(245,159,27)"/><text x="74.7378%" y="127.50"></text></g><g><title>explicit_predicates_of (619,996 samples, 0.19%)</title><rect x="75.1125%" y="85" width="0.1911%" height="15" fill="rgb(245,172,44)"/><text x="75.3625%" y="95.50"></text></g><g><title>predicates_of (1,731,660 samples, 0.53%)</title><rect x="74.9977%" y="117" width="0.5336%" height="15" fill="rgb(236,23,11)"/><text x="75.2477%" y="127.50"></text></g><g><title>predicates_defined_on (1,592,459 samples, 0.49%)</title><rect x="75.0406%" y="101" width="0.4907%" height="15" fill="rgb(205,117,38)"/><text x="75.2906%" y="111.50"></text></g><g><title>inferred_outlives_of (739,398 samples, 0.23%)</title><rect x="75.3035%" y="85" width="0.2279%" height="15" fill="rgb(237,72,25)"/><text x="75.5535%" y="95.50"></text></g><g><title>inferred_outlives_crate (688,607 samples, 0.21%)</title><rect x="75.3192%" y="69" width="0.2122%" height="15" fill="rgb(244,70,9)"/><text x="75.5692%" y="79.50"></text></g><g><title>type_of (449,136 samples, 0.14%)</title><rect x="75.3930%" y="53" width="0.1384%" height="15" fill="rgb(217,125,39)"/><text x="75.6430%" y="63.50"></text></g><g><title>type_collecting (7,906,278 samples, 2.44%)</title><rect x="73.1729%" y="149" width="2.4364%" height="15" fill="rgb(235,36,10)"/><text x="73.4229%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (7,891,448 samples, 2.43%)</title><rect x="73.1775%" y="133" width="2.4318%" height="15" fill="rgb(251,123,47)"/><text x="73.4275%" y="143.50">co..</text></g><g><title>evaluate_obligation (757,399 samples, 0.23%)</title><rect x="76.8933%" y="117" width="0.2334%" height="15" fill="rgb(221,13,13)"/><text x="77.1433%" y="127.50"></text></g><g><title>implied_outlives_bounds (390,364 samples, 0.12%)</title><rect x="77.1297%" y="117" width="0.1203%" height="15" fill="rgb(238,131,9)"/><text x="77.3797%" y="127.50"></text></g><g><title>object_safety_violations (426,835 samples, 0.13%)</title><rect x="77.2500%" y="117" width="0.1315%" height="15" fill="rgb(211,50,8)"/><text x="77.5000%" y="127.50"></text></g><g><title>param_env (537,277 samples, 0.17%)</title><rect x="77.3816%" y="117" width="0.1656%" height="15" fill="rgb(245,182,24)"/><text x="77.6316%" y="127.50"></text></g><g><title>region_scope_tree (1,408,735 samples, 0.43%)</title><rect x="77.5570%" y="117" width="0.4341%" height="15" fill="rgb(242,14,37)"/><text x="77.8070%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,297,992 samples, 2.25%)</title><rect x="75.7570%" y="133" width="2.2489%" height="15" fill="rgb(246,228,12)"/><text x="76.0070%" y="143.50">c..</text></g><g><title>evaluate_obligation (874,345 samples, 0.27%)</title><rect x="78.7129%" y="117" width="0.2694%" height="15" fill="rgb(213,55,15)"/><text x="78.9629%" y="127.50"></text></g><g><title>param_env (486,524 samples, 0.15%)</title><rect x="79.0245%" y="117" width="0.1499%" height="15" fill="rgb(209,9,3)"/><text x="79.2745%" y="127.50"></text></g><g><title>check_item_well_formed (4,138,524 samples, 1.28%)</title><rect x="78.0059%" y="133" width="1.2753%" height="15" fill="rgb(230,59,30)"/><text x="78.2559%" y="143.50"></text></g><g><title>analysis (256,669,100 samples, 79.09%)</title><rect x="0.2757%" y="181" width="79.0946%" height="15" fill="rgb(209,121,21)"/><text x="0.5257%" y="191.50">analysis</text></g><g><title>type_check_crate (162,006,995 samples, 49.92%)</title><rect x="29.4466%" y="165" width="49.9237%" height="15" fill="rgb(220,109,13)"/><text x="29.6966%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,191,966 samples, 3.76%)</title><rect x="75.6133%" y="149" width="3.7571%" height="15" fill="rgb(232,18,1)"/><text x="75.8633%" y="159.50">wf_c..</text></g><g><title>codegen_crate (375,504 samples, 0.12%)</title><rect x="79.3728%" y="181" width="0.1157%" height="15" fill="rgb(215,41,42)"/><text x="79.6228%" y="191.50"></text></g><g><title>metadata_load_macro (433,827 samples, 0.13%)</title><rect x="90.6497%" y="133" width="0.1337%" height="15" fill="rgb(224,123,36)"/><text x="90.8997%" y="143.50"></text></g><g><title>metadata_register_crate (2,328,055 samples, 0.72%)</title><rect x="90.7834%" y="133" width="0.7174%" height="15" fill="rgb(240,125,3)"/><text x="91.0334%" y="143.50"></text></g><g><title>metadata_register_crate (847,098 samples, 0.26%)</title><rect x="91.2398%" y="117" width="0.2610%" height="15" fill="rgb(205,98,50)"/><text x="91.4898%" y="127.50"></text></g><g><title>macro_expand_crate (39,104,186 samples, 12.05%)</title><rect x="79.7069%" y="165" width="12.0503%" height="15" fill="rgb(205,185,37)"/><text x="79.9569%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (39,091,006 samples, 12.05%)</title><rect x="79.7109%" y="149" width="12.0462%" height="15" fill="rgb(238,207,15)"/><text x="79.9609%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (831,869 samples, 0.26%)</title><rect x="91.5008%" y="133" width="0.2563%" height="15" fill="rgb(213,199,42)"/><text x="91.7508%" y="143.50"></text></g><g><title>late_resolve_crate (4,683,323 samples, 1.44%)</title><rect x="91.9007%" y="149" width="1.4432%" height="15" fill="rgb(235,201,11)"/><text x="92.1507%" y="159.50"></text></g><g><title>configure_and_expand (45,264,075 samples, 13.95%)</title><rect x="79.4886%" y="181" width="13.9485%" height="15" fill="rgb(207,46,11)"/><text x="79.7386%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (5,371,721 samples, 1.66%)</title><rect x="91.7817%" y="165" width="1.6553%" height="15" fill="rgb(241,35,35)"/><text x="92.0317%" y="175.50"></text></g><g><title>drop_ast (519,026 samples, 0.16%)</title><rect x="93.4370%" y="181" width="0.1599%" height="15" fill="rgb(243,32,47)"/><text x="93.6870%" y="191.50"></text></g><g><title>early_lint_checks (1,132,243 samples, 0.35%)</title><rect x="93.6026%" y="181" width="0.3489%" height="15" fill="rgb(247,202,23)"/><text x="93.8526%" y="191.50"></text></g><g><title>free_global_ctxt (5,470,771 samples, 1.69%)</title><rect x="93.9515%" y="181" width="1.6859%" height="15" fill="rgb(219,102,11)"/><text x="94.2015%" y="191.50"></text></g><g><title>generate_crate_metadata (2,748,710 samples, 0.85%)</title><rect x="95.6374%" y="181" width="0.8470%" height="15" fill="rgb(243,110,44)"/><text x="95.8874%" y="191.50"></text></g><g><title>hir_lowering (8,203,981 samples, 2.53%)</title><rect x="96.4844%" y="181" width="2.5281%" height="15" fill="rgb(222,74,54)"/><text x="96.7344%" y="191.50">hi..</text></g><g><title>parse_crate (745,288 samples, 0.23%)</title><rect x="99.0307%" y="181" width="0.2297%" height="15" fill="rgb(216,99,12)"/><text x="99.2807%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,691,409 samples, 0.52%)</title><rect x="99.3202%" y="181" width="0.5212%" height="15" fill="rgb(226,22,26)"/><text x="99.5702%" y="191.50"></text></g><g><title>all (324,508,965 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (324,508,965 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (409,325 samples, 0.13%)</title><rect x="99.8739%" y="181" width="0.1261%" height="15" fill="rgb(252,105,26)"/><text x="100.1239%" y="191.50"></text></g></svg></svg>