<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (245,992 samples, 0.12%)</title><rect x="13.8180%" y="149" width="0.1159%" height="15" fill="rgb(227,0,7)"/><text x="14.0680%" y="159.50"></text></g><g><title>param_env (666,488 samples, 0.31%)</title><rect x="16.0244%" y="117" width="0.3141%" height="15" fill="rgb(217,0,24)"/><text x="16.2744%" y="127.50"></text></g><g><title>item_attrs (358,493 samples, 0.17%)</title><rect x="16.9510%" y="85" width="0.1690%" height="15" fill="rgb(221,193,54)"/><text x="17.2010%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (338,733 samples, 0.16%)</title><rect x="16.9603%" y="69" width="0.1597%" height="15" fill="rgb(248,212,6)"/><text x="17.2103%" y="79.50"></text></g><g><title>codegen_fn_attrs (566,214 samples, 0.27%)</title><rect x="16.8699%" y="101" width="0.2669%" height="15" fill="rgb(208,68,35)"/><text x="17.1199%" y="111.50"></text></g><g><title>is_copy_raw (527,474 samples, 0.25%)</title><rect x="20.2657%" y="85" width="0.2486%" height="15" fill="rgb(232,128,0)"/><text x="20.5157%" y="95.50"></text></g><g><title>evaluate_obligation (442,474 samples, 0.21%)</title><rect x="20.3057%" y="69" width="0.2085%" height="15" fill="rgb(207,160,47)"/><text x="20.5557%" y="79.50"></text></g><g><title>adt_drop_tys (503,103 samples, 0.24%)</title><rect x="20.7115%" y="69" width="0.2371%" height="15" fill="rgb(228,23,34)"/><text x="20.9615%" y="79.50"></text></g><g><title>is_copy_raw (2,822,166 samples, 1.33%)</title><rect x="20.9486%" y="69" width="1.3302%" height="15" fill="rgb(218,30,26)"/><text x="21.1986%" y="79.50"></text></g><g><title>evaluate_obligation (2,276,449 samples, 1.07%)</title><rect x="21.2058%" y="53" width="1.0729%" height="15" fill="rgb(220,122,19)"/><text x="21.4558%" y="63.50"></text></g><g><title>needs_drop_raw (3,768,583 samples, 1.78%)</title><rect x="20.5162%" y="85" width="1.7762%" height="15" fill="rgb(250,228,42)"/><text x="20.7662%" y="95.50">n..</text></g><g><title>codegen_fulfill_obligation (1,007,164 samples, 0.47%)</title><rect x="22.6292%" y="69" width="0.4747%" height="15" fill="rgb(240,193,28)"/><text x="22.8792%" y="79.50"></text></g><g><title>impl_parent (368,944 samples, 0.17%)</title><rect x="23.3679%" y="53" width="0.1739%" height="15" fill="rgb(216,20,37)"/><text x="23.6179%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (256,003 samples, 0.12%)</title><rect x="23.4211%" y="37" width="0.1207%" height="15" fill="rgb(206,188,39)"/><text x="23.6711%" y="47.50"></text></g><g><title>specialization_graph_of (2,210,704 samples, 1.04%)</title><rect x="23.1299%" y="69" width="1.0420%" height="15" fill="rgb(217,207,13)"/><text x="23.3799%" y="79.50"></text></g><g><title>impl_trait_ref (1,336,746 samples, 0.63%)</title><rect x="23.5418%" y="53" width="0.6300%" height="15" fill="rgb(231,73,38)"/><text x="23.7918%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,221,436 samples, 0.58%)</title><rect x="23.5961%" y="37" width="0.5757%" height="15" fill="rgb(225,20,46)"/><text x="23.8461%" y="47.50"></text></g><g><title>resolve_instance (4,198,381 samples, 1.98%)</title><rect x="22.2924%" y="85" width="1.9788%" height="15" fill="rgb(210,31,41)"/><text x="22.5424%" y="95.50">r..</text></g><g><title>thir_body (2,234,063 samples, 1.05%)</title><rect x="24.3053%" y="85" width="1.0530%" height="15" fill="rgb(221,200,47)"/><text x="24.5553%" y="95.50"></text></g><g><title>mir_const (22,016,970 samples, 10.38%)</title><rect x="15.0045%" y="133" width="10.3771%" height="15" fill="rgb(226,26,5)"/><text x="15.2545%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (19,186,393 samples, 9.04%)</title><rect x="16.3386%" y="117" width="9.0430%" height="15" fill="rgb(249,33,26)"/><text x="16.5886%" y="127.50">unsafety_chec..</text></g><g><title>mir_built (17,492,861 samples, 8.24%)</title><rect x="17.1368%" y="101" width="8.2448%" height="15" fill="rgb(235,183,28)"/><text x="17.3868%" y="111.50">mir_built</text></g><g><title>mir_promoted (24,163,777 samples, 11.39%)</title><rect x="14.0553%" y="149" width="11.3889%" height="15" fill="rgb(221,5,38)"/><text x="14.3053%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,733,610 samples, 0.82%)</title><rect x="25.4442%" y="149" width="0.8171%" height="15" fill="rgb(247,18,42)"/><text x="25.6942%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,046,882 samples, 0.49%)</title><rect x="26.2613%" y="149" width="0.4934%" height="15" fill="rgb(241,131,45)"/><text x="26.5113%" y="159.50"></text></g><g><title>normalize_projection_ty (676,568 samples, 0.32%)</title><rect x="26.4359%" y="133" width="0.3189%" height="15" fill="rgb(249,31,29)"/><text x="26.6859%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,056,301 samples, 0.50%)</title><rect x="26.7547%" y="149" width="0.4979%" height="15" fill="rgb(225,111,53)"/><text x="27.0047%" y="159.50"></text></g><g><title>normalize_projection_ty (728,347 samples, 0.34%)</title><rect x="26.9093%" y="133" width="0.3433%" height="15" fill="rgb(238,160,17)"/><text x="27.1593%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,823,993 samples, 3.22%)</title><rect x="27.2590%" y="149" width="3.2163%" height="15" fill="rgb(214,148,48)"/><text x="27.5090%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (63,402,283 samples, 29.88%)</title><rect x="0.6038%" y="181" width="29.8829%" height="15" fill="rgb(232,36,49)"/><text x="0.8538%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (63,075,660 samples, 29.73%)</title><rect x="0.7577%" y="165" width="29.7290%" height="15" fill="rgb(209,103,24)"/><text x="1.0077%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (309,263 samples, 0.15%)</title><rect x="30.5256%" y="181" width="0.1458%" height="15" fill="rgb(229,88,8)"/><text x="30.7756%" y="191.50"></text></g><g><title>should_inherit_track_caller (286,764 samples, 0.14%)</title><rect x="31.0308%" y="133" width="0.1352%" height="15" fill="rgb(213,181,19)"/><text x="31.2808%" y="143.50"></text></g><g><title>codegen_fn_attrs (572,846 samples, 0.27%)</title><rect x="30.9068%" y="149" width="0.2700%" height="15" fill="rgb(254,191,54)"/><text x="31.1568%" y="159.50"></text></g><g><title>check_mod_attrs (1,032,542 samples, 0.49%)</title><rect x="30.6902%" y="165" width="0.4867%" height="15" fill="rgb(241,83,37)"/><text x="30.9402%" y="175.50"></text></g><g><title>check_mod_const_bodies (254,903 samples, 0.12%)</title><rect x="31.1769%" y="165" width="0.1201%" height="15" fill="rgb(233,36,39)"/><text x="31.4269%" y="175.50"></text></g><g><title>lookup_deprecation_entry (232,423 samples, 0.11%)</title><rect x="31.4785%" y="149" width="0.1095%" height="15" fill="rgb(226,3,54)"/><text x="31.7285%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (549,697 samples, 0.26%)</title><rect x="31.3676%" y="165" width="0.2591%" height="15" fill="rgb(245,192,40)"/><text x="31.6176%" y="175.50"></text></g><g><title>misc_checking_1 (2,106,094 samples, 0.99%)</title><rect x="30.6716%" y="181" width="0.9926%" height="15" fill="rgb(238,167,29)"/><text x="30.9216%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,498,617 samples, 0.71%)</title><rect x="31.6651%" y="165" width="0.7063%" height="15" fill="rgb(232,182,51)"/><text x="31.9151%" y="175.50"></text></g><g><title>check_mod_liveness (1,318,012 samples, 0.62%)</title><rect x="31.7502%" y="149" width="0.6212%" height="15" fill="rgb(231,60,39)"/><text x="32.0002%" y="159.50"></text></g><g><title>type_uninhabited_from (591,689 samples, 0.28%)</title><rect x="32.0925%" y="133" width="0.2789%" height="15" fill="rgb(208,69,12)"/><text x="32.3425%" y="143.50"></text></g><g><title>type_uninhabited_from (500,086 samples, 0.24%)</title><rect x="32.1357%" y="117" width="0.2357%" height="15" fill="rgb(235,93,37)"/><text x="32.3857%" y="127.50"></text></g><g><title>type_uninhabited_from (424,975 samples, 0.20%)</title><rect x="32.1711%" y="101" width="0.2003%" height="15" fill="rgb(213,116,39)"/><text x="32.4211%" y="111.50"></text></g><g><title>misc_checking_2 (2,663,711 samples, 1.26%)</title><rect x="31.6643%" y="181" width="1.2555%" height="15" fill="rgb(222,207,29)"/><text x="31.9143%" y="191.50"></text></g><g><title>match_checking (1,163,384 samples, 0.55%)</title><rect x="32.3714%" y="165" width="0.5483%" height="15" fill="rgb(206,96,30)"/><text x="32.6214%" y="175.50"></text></g><g><title>check_match (1,089,622 samples, 0.51%)</title><rect x="32.4062%" y="149" width="0.5136%" height="15" fill="rgb(218,138,4)"/><text x="32.6562%" y="159.50"></text></g><g><title>check_private_in_public (421,084 samples, 0.20%)</title><rect x="32.9246%" y="165" width="0.1985%" height="15" fill="rgb(250,191,14)"/><text x="33.1746%" y="175.50"></text></g><g><title>death_checking (743,599 samples, 0.35%)</title><rect x="33.1231%" y="165" width="0.3505%" height="15" fill="rgb(239,60,40)"/><text x="33.3731%" y="175.50"></text></g><g><title>param_env (519,767 samples, 0.24%)</title><rect x="34.0933%" y="133" width="0.2450%" height="15" fill="rgb(206,27,48)"/><text x="34.3433%" y="143.50"></text></g><g><title>predicates_of (231,694 samples, 0.11%)</title><rect x="34.2291%" y="117" width="0.1092%" height="15" fill="rgb(225,35,8)"/><text x="34.4791%" y="127.50"></text></g><g><title>crate_lints (4,322,448 samples, 2.04%)</title><rect x="33.4745%" y="149" width="2.0373%" height="15" fill="rgb(250,213,24)"/><text x="33.7245%" y="159.50">c..</text></g><g><title>type_of (2,479,067 samples, 1.17%)</title><rect x="34.3433%" y="133" width="1.1684%" height="15" fill="rgb(247,123,22)"/><text x="34.5933%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (2,229,181 samples, 1.05%)</title><rect x="34.4611%" y="117" width="1.0507%" height="15" fill="rgb(231,138,38)"/><text x="34.7111%" y="127.50"></text></g><g><title>lint_checking (5,210,299 samples, 2.46%)</title><rect x="33.4736%" y="165" width="2.4557%" height="15" fill="rgb(231,145,46)"/><text x="33.7236%" y="175.50">li..</text></g><g><title>module_lints (885,961 samples, 0.42%)</title><rect x="35.5117%" y="149" width="0.4176%" height="15" fill="rgb(251,118,11)"/><text x="35.7617%" y="159.50"></text></g><g><title>lint_mod (875,361 samples, 0.41%)</title><rect x="35.5167%" y="133" width="0.4126%" height="15" fill="rgb(217,147,25)"/><text x="35.7667%" y="143.50"></text></g><g><title>privacy_access_levels (557,216 samples, 0.26%)</title><rect x="35.9293%" y="165" width="0.2626%" height="15" fill="rgb(247,81,37)"/><text x="36.1793%" y="175.50"></text></g><g><title>privacy_checking_modules (1,806,710 samples, 0.85%)</title><rect x="36.1919%" y="165" width="0.8515%" height="15" fill="rgb(209,12,38)"/><text x="36.4419%" y="175.50"></text></g><g><title>check_mod_privacy (1,798,149 samples, 0.85%)</title><rect x="36.1960%" y="149" width="0.8475%" height="15" fill="rgb(227,1,9)"/><text x="36.4460%" y="159.50"></text></g><g><title>misc_checking_3 (8,771,399 samples, 4.13%)</title><rect x="32.9197%" y="181" width="4.1342%" height="15" fill="rgb(248,47,43)"/><text x="33.1697%" y="191.50">misc_..</text></g><g><title>impl_parent (320,415 samples, 0.15%)</title><rect x="37.2858%" y="117" width="0.1510%" height="15" fill="rgb(221,10,30)"/><text x="37.5358%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (245,244 samples, 0.12%)</title><rect x="37.3212%" y="101" width="0.1156%" height="15" fill="rgb(210,229,1)"/><text x="37.5712%" y="111.50"></text></g><g><title>impl_trait_ref (861,717 samples, 0.41%)</title><rect x="37.4368%" y="117" width="0.4061%" height="15" fill="rgb(222,148,37)"/><text x="37.6868%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (783,636 samples, 0.37%)</title><rect x="37.4736%" y="101" width="0.3693%" height="15" fill="rgb(234,67,33)"/><text x="37.7236%" y="111.50"></text></g><g><title>coherent_trait (1,639,108 samples, 0.77%)</title><rect x="37.1271%" y="149" width="0.7725%" height="15" fill="rgb(247,98,35)"/><text x="37.3771%" y="159.50"></text></g><g><title>specialization_graph_of (1,629,668 samples, 0.77%)</title><rect x="37.1315%" y="133" width="0.7681%" height="15" fill="rgb(247,138,52)"/><text x="37.3815%" y="143.50"></text></g><g><title>coherence_checking (1,731,550 samples, 0.82%)</title><rect x="37.1207%" y="165" width="0.8161%" height="15" fill="rgb(213,79,30)"/><text x="37.3707%" y="175.50"></text></g><g><title>associated_item (770,403 samples, 0.36%)</title><rect x="59.7126%" y="101" width="0.3631%" height="15" fill="rgb(246,177,23)"/><text x="59.9626%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (619,080 samples, 0.29%)</title><rect x="59.7839%" y="85" width="0.2918%" height="15" fill="rgb(230,62,27)"/><text x="60.0339%" y="95.50"></text></g><g><title>associated_items (1,302,487 samples, 0.61%)</title><rect x="59.4876%" y="117" width="0.6139%" height="15" fill="rgb(216,154,8)"/><text x="59.7376%" y="127.50"></text></g><g><title>adt_dtorck_constraint (256,152 samples, 0.12%)</title><rect x="60.7794%" y="69" width="0.1207%" height="15" fill="rgb(244,35,45)"/><text x="61.0294%" y="79.50"></text></g><g><title>adt_dtorck_constraint (355,583 samples, 0.17%)</title><rect x="60.7469%" y="85" width="0.1676%" height="15" fill="rgb(251,115,12)"/><text x="60.9969%" y="95.50"></text></g><g><title>adt_dtorck_constraint (620,197 samples, 0.29%)</title><rect x="60.6417%" y="101" width="0.2923%" height="15" fill="rgb(240,54,50)"/><text x="60.8917%" y="111.50"></text></g><g><title>dropck_outlives (1,648,464 samples, 0.78%)</title><rect x="60.1592%" y="117" width="0.7770%" height="15" fill="rgb(233,84,52)"/><text x="60.4092%" y="127.50"></text></g><g><title>adt_sized_constraint (295,525 samples, 0.14%)</title><rect x="62.5577%" y="101" width="0.1393%" height="15" fill="rgb(207,117,47)"/><text x="62.8077%" y="111.50"></text></g><g><title>generics_of (256,405 samples, 0.12%)</title><rect x="62.6987%" y="101" width="0.1208%" height="15" fill="rgb(249,43,39)"/><text x="62.9487%" y="111.50"></text></g><g><title>impl_trait_ref (370,150 samples, 0.17%)</title><rect x="62.8404%" y="101" width="0.1745%" height="15" fill="rgb(209,38,44)"/><text x="63.0904%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (312,410 samples, 0.15%)</title><rect x="62.8676%" y="85" width="0.1472%" height="15" fill="rgb(236,212,23)"/><text x="63.1176%" y="95.50"></text></g><g><title>specializes (283,194 samples, 0.13%)</title><rect x="63.1167%" y="101" width="0.1335%" height="15" fill="rgb(242,79,21)"/><text x="63.3667%" y="111.50"></text></g><g><title>trait_impls_of (636,079 samples, 0.30%)</title><rect x="63.2564%" y="101" width="0.2998%" height="15" fill="rgb(211,96,35)"/><text x="63.5064%" y="111.50"></text></g><g><title>implementations_of_trait (238,115 samples, 0.11%)</title><rect x="63.4440%" y="85" width="0.1122%" height="15" fill="rgb(253,215,40)"/><text x="63.6940%" y="95.50"></text></g><g><title>evaluate_obligation (5,570,436 samples, 2.63%)</title><rect x="60.9361%" y="117" width="2.6255%" height="15" fill="rgb(211,81,21)"/><text x="61.1861%" y="127.50">ev..</text></g><g><title>fn_sig (230,188 samples, 0.11%)</title><rect x="63.5869%" y="117" width="0.1085%" height="15" fill="rgb(208,190,38)"/><text x="63.8369%" y="127.50"></text></g><g><title>method_autoderef_steps (1,182,448 samples, 0.56%)</title><rect x="64.0387%" y="117" width="0.5573%" height="15" fill="rgb(235,213,38)"/><text x="64.2887%" y="127.50"></text></g><g><title>evaluate_obligation (499,065 samples, 0.24%)</title><rect x="64.3608%" y="101" width="0.2352%" height="15" fill="rgb(237,122,38)"/><text x="64.6108%" y="111.50"></text></g><g><title>predicates_of (639,579 samples, 0.30%)</title><rect x="64.6635%" y="117" width="0.3014%" height="15" fill="rgb(244,218,35)"/><text x="64.9135%" y="127.50"></text></g><g><title>predicates_defined_on (431,845 samples, 0.20%)</title><rect x="64.7614%" y="101" width="0.2035%" height="15" fill="rgb(240,68,47)"/><text x="65.0114%" y="111.50"></text></g><g><title>dropck_outlives (212,941 samples, 0.10%)</title><rect x="68.1661%" y="101" width="0.1004%" height="15" fill="rgb(210,16,53)"/><text x="68.4161%" y="111.50"></text></g><g><title>evaluate_obligation (1,222,213 samples, 0.58%)</title><rect x="68.2664%" y="101" width="0.5761%" height="15" fill="rgb(235,124,12)"/><text x="68.5164%" y="111.50"></text></g><g><title>trait_impls_of (525,228 samples, 0.25%)</title><rect x="68.5950%" y="85" width="0.2476%" height="15" fill="rgb(224,169,11)"/><text x="68.8450%" y="95.50"></text></g><g><title>method_autoderef_steps (245,631 samples, 0.12%)</title><rect x="69.0689%" y="101" width="0.1158%" height="15" fill="rgb(250,166,2)"/><text x="69.3189%" y="111.50"></text></g><g><title>typeck (8,927,751 samples, 4.21%)</title><rect x="65.0557%" y="117" width="4.2079%" height="15" fill="rgb(242,216,29)"/><text x="65.3057%" y="127.50">typeck</text></g><g><title>item_bodies_checking (66,499,748 samples, 31.34%)</title><rect x="37.9645%" y="165" width="31.3428%" height="15" fill="rgb(230,116,27)"/><text x="38.2145%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (66,496,898 samples, 31.34%)</title><rect x="37.9659%" y="149" width="31.3415%" height="15" fill="rgb(228,99,48)"/><text x="38.2159%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (66,270,865 samples, 31.23%)</title><rect x="38.0724%" y="133" width="31.2350%" height="15" fill="rgb(253,11,6)"/><text x="38.3224%" y="143.50">typeck</text></g><g><title>item_types_checking (863,299 samples, 0.41%)</title><rect x="69.3073%" y="165" width="0.4069%" height="15" fill="rgb(247,143,39)"/><text x="69.5573%" y="175.50"></text></g><g><title>check_mod_item_types (855,068 samples, 0.40%)</title><rect x="69.3112%" y="149" width="0.4030%" height="15" fill="rgb(236,97,10)"/><text x="69.5612%" y="159.50"></text></g><g><title>fn_sig (638,886 samples, 0.30%)</title><rect x="69.9608%" y="133" width="0.3011%" height="15" fill="rgb(233,208,19)"/><text x="70.2108%" y="143.50"></text></g><g><title>is_late_bound_map (818,990 samples, 0.39%)</title><rect x="70.3936%" y="117" width="0.3860%" height="15" fill="rgb(216,164,2)"/><text x="70.6436%" y="127.50"></text></g><g><title>resolve_lifetimes (788,640 samples, 0.37%)</title><rect x="70.4079%" y="101" width="0.3717%" height="15" fill="rgb(220,129,5)"/><text x="70.6579%" y="111.50"></text></g><g><title>lint_levels (339,893 samples, 0.16%)</title><rect x="70.6194%" y="85" width="0.1602%" height="15" fill="rgb(242,17,10)"/><text x="70.8694%" y="95.50"></text></g><g><title>generics_of (1,255,066 samples, 0.59%)</title><rect x="70.2619%" y="133" width="0.5915%" height="15" fill="rgb(242,107,0)"/><text x="70.5119%" y="143.50"></text></g><g><title>explicit_predicates_of (670,979 samples, 0.32%)</title><rect x="70.9822%" y="101" width="0.3162%" height="15" fill="rgb(251,28,31)"/><text x="71.2322%" y="111.50"></text></g><g><title>predicates_of (1,296,457 samples, 0.61%)</title><rect x="70.8642%" y="133" width="0.6110%" height="15" fill="rgb(233,223,10)"/><text x="71.1142%" y="143.50"></text></g><g><title>predicates_defined_on (1,198,696 samples, 0.56%)</title><rect x="70.9103%" y="117" width="0.5650%" height="15" fill="rgb(215,21,27)"/><text x="71.1603%" y="127.50"></text></g><g><title>inferred_outlives_of (375,136 samples, 0.18%)</title><rect x="71.2984%" y="101" width="0.1768%" height="15" fill="rgb(232,23,21)"/><text x="71.5484%" y="111.50"></text></g><g><title>inferred_outlives_crate (342,434 samples, 0.16%)</title><rect x="71.3139%" y="85" width="0.1614%" height="15" fill="rgb(244,5,23)"/><text x="71.5639%" y="95.50"></text></g><g><title>type_collecting (4,224,708 samples, 1.99%)</title><rect x="69.7165%" y="165" width="1.9912%" height="15" fill="rgb(226,81,46)"/><text x="69.9665%" y="175.50">t..</text></g><g><title>collect_mod_item_types (4,208,858 samples, 1.98%)</title><rect x="69.7239%" y="149" width="1.9837%" height="15" fill="rgb(247,70,30)"/><text x="69.9739%" y="159.50">c..</text></g><g><title>type_of (472,424 samples, 0.22%)</title><rect x="71.4850%" y="133" width="0.2227%" height="15" fill="rgb(212,68,19)"/><text x="71.7350%" y="143.50"></text></g><g><title>evaluate_obligation (1,204,834 samples, 0.57%)</title><rect x="74.4955%" y="133" width="0.5679%" height="15" fill="rgb(240,187,13)"/><text x="74.7455%" y="143.50"></text></g><g><title>implied_outlives_bounds (801,197 samples, 0.38%)</title><rect x="75.0634%" y="133" width="0.3776%" height="15" fill="rgb(223,113,26)"/><text x="75.3134%" y="143.50"></text></g><g><title>param_env (834,388 samples, 0.39%)</title><rect x="75.4427%" y="133" width="0.3933%" height="15" fill="rgb(206,192,2)"/><text x="75.6927%" y="143.50"></text></g><g><title>region_scope_tree (656,539 samples, 0.31%)</title><rect x="75.8460%" y="133" width="0.3094%" height="15" fill="rgb(241,108,4)"/><text x="76.0960%" y="143.50"></text></g><g><title>check_impl_item_well_formed (9,025,374 samples, 4.25%)</title><rect x="71.9092%" y="149" width="4.2539%" height="15" fill="rgb(247,173,49)"/><text x="72.1592%" y="159.50">check..</text></g><g><title>evaluate_obligation (371,866 samples, 0.18%)</title><rect x="77.2498%" y="133" width="0.1753%" height="15" fill="rgb(224,114,35)"/><text x="77.4998%" y="143.50"></text></g><g><title>implied_outlives_bounds (258,172 samples, 0.12%)</title><rect x="77.4370%" y="133" width="0.1217%" height="15" fill="rgb(245,159,27)"/><text x="77.6870%" y="143.50"></text></g><g><title>param_env (514,246 samples, 0.24%)</title><rect x="77.6428%" y="133" width="0.2424%" height="15" fill="rgb(245,172,44)"/><text x="77.8928%" y="143.50"></text></g><g><title>check_item_well_formed (4,187,963 samples, 1.97%)</title><rect x="76.1631%" y="149" width="1.9739%" height="15" fill="rgb(236,23,11)"/><text x="76.4131%" y="159.50">c..</text></g><g><title>analysis (165,393,292 samples, 77.95%)</title><rect x="0.3686%" y="197" width="77.9536%" height="15" fill="rgb(205,117,38)"/><text x="0.6186%" y="207.50">analysis</text></g><g><title>type_check_crate (87,558,595 samples, 41.27%)</title><rect x="37.0539%" y="181" width="41.2684%" height="15" fill="rgb(237,72,25)"/><text x="37.3039%" y="191.50">type_check_crate</text></g><g><title>wf_checking (14,022,108 samples, 6.61%)</title><rect x="71.7133%" y="165" width="6.6089%" height="15" fill="rgb(244,70,9)"/><text x="71.9633%" y="175.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (393,205 samples, 0.19%)</title><rect x="78.1369%" y="149" width="0.1853%" height="15" fill="rgb(217,125,39)"/><text x="78.3869%" y="159.50"></text></g><g><title>codegen_crate (564,297 samples, 0.27%)</title><rect x="78.3279%" y="197" width="0.2660%" height="15" fill="rgb(235,36,10)"/><text x="78.5779%" y="207.50"></text></g><g><title>metadata_register_crate (1,838,910 samples, 0.87%)</title><rect x="90.1590%" y="149" width="0.8667%" height="15" fill="rgb(251,123,47)"/><text x="90.4090%" y="159.50"></text></g><g><title>metadata_register_crate (634,597 samples, 0.30%)</title><rect x="90.7266%" y="133" width="0.2991%" height="15" fill="rgb(221,13,13)"/><text x="90.9766%" y="143.50"></text></g><g><title>macro_expand_crate (26,577,609 samples, 12.53%)</title><rect x="78.8805%" y="181" width="12.5266%" height="15" fill="rgb(238,131,9)"/><text x="79.1305%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (26,562,968 samples, 12.52%)</title><rect x="78.8874%" y="165" width="12.5197%" height="15" fill="rgb(211,50,8)"/><text x="79.1374%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (809,299 samples, 0.38%)</title><rect x="91.0257%" y="149" width="0.3814%" height="15" fill="rgb(245,182,24)"/><text x="91.2757%" y="159.50"></text></g><g><title>late_resolve_crate (2,723,930 samples, 1.28%)</title><rect x="91.5395%" y="165" width="1.2839%" height="15" fill="rgb(242,14,37)"/><text x="91.7895%" y="175.50"></text></g><g><title>configure_and_expand (30,383,221 samples, 14.32%)</title><rect x="78.5938%" y="197" width="14.3203%" height="15" fill="rgb(246,228,12)"/><text x="78.8438%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,067,534 samples, 1.45%)</title><rect x="91.4683%" y="181" width="1.4458%" height="15" fill="rgb(213,55,15)"/><text x="91.7183%" y="191.50"></text></g><g><title>drop_ast (245,213 samples, 0.12%)</title><rect x="92.9141%" y="197" width="0.1156%" height="15" fill="rgb(209,9,3)"/><text x="93.1641%" y="207.50"></text></g><g><title>early_lint_checks (517,876 samples, 0.24%)</title><rect x="93.0387%" y="197" width="0.2441%" height="15" fill="rgb(230,59,30)"/><text x="93.2887%" y="207.50"></text></g><g><title>free_global_ctxt (4,195,957 samples, 1.98%)</title><rect x="93.2828%" y="197" width="1.9776%" height="15" fill="rgb(209,121,21)"/><text x="93.5328%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,858,441 samples, 0.88%)</title><rect x="95.2604%" y="197" width="0.8759%" height="15" fill="rgb(220,109,13)"/><text x="95.5104%" y="207.50"></text></g><g><title>hir_lowering (5,638,983 samples, 2.66%)</title><rect x="96.1363%" y="197" width="2.6578%" height="15" fill="rgb(232,18,1)"/><text x="96.3863%" y="207.50">hi..</text></g><g><title>parse_crate (918,920 samples, 0.43%)</title><rect x="98.8192%" y="197" width="0.4331%" height="15" fill="rgb(215,41,42)"/><text x="99.0692%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (916,130 samples, 0.43%)</title><rect x="99.3438%" y="197" width="0.4318%" height="15" fill="rgb(224,123,36)"/><text x="99.5938%" y="207.50"></text></g><g><title>all (212,168,848 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (212,168,848 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (359,274 samples, 0.17%)</title><rect x="99.8307%" y="197" width="0.1693%" height="15" fill="rgb(205,185,37)"/><text x="100.0807%" y="207.50"></text></g></svg></svg>