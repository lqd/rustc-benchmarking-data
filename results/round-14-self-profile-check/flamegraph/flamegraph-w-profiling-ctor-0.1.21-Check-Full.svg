<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>adt_drop_tys (400,568 samples, 0.17%)</title><rect x="14.2655%" y="165" width="0.1699%" height="15" fill="rgb(227,0,7)"/><text x="14.5155%" y="175.50"></text></g><g><title>needs_drop_raw (841,940 samples, 0.36%)</title><rect x="14.2414%" y="181" width="0.3571%" height="15" fill="rgb(217,0,24)"/><text x="14.4914%" y="191.50"></text></g><g><title>is_copy_raw (384,631 samples, 0.16%)</title><rect x="14.4354%" y="165" width="0.1631%" height="15" fill="rgb(221,193,54)"/><text x="14.6854%" y="175.50"></text></g><g><title>evaluate_obligation (321,721 samples, 0.14%)</title><rect x="14.4621%" y="149" width="0.1364%" height="15" fill="rgb(248,212,6)"/><text x="14.7121%" y="159.50"></text></g><g><title>thir_body (2,297,306 samples, 0.97%)</title><rect x="14.6154%" y="181" width="0.9743%" height="15" fill="rgb(208,68,35)"/><text x="14.8654%" y="191.50"></text></g><g><title>mir_const (10,990,594 samples, 4.66%)</title><rect x="10.9305%" y="229" width="4.6612%" height="15" fill="rgb(232,128,0)"/><text x="11.1805%" y="239.50">mir_c..</text></g><g><title>unsafety_check_result (10,045,384 samples, 4.26%)</title><rect x="11.3314%" y="213" width="4.2603%" height="15" fill="rgb(207,160,47)"/><text x="11.5814%" y="223.50">unsaf..</text></g><g><title>mir_built (9,404,266 samples, 3.99%)</title><rect x="11.6033%" y="197" width="3.9884%" height="15" fill="rgb(228,23,34)"/><text x="11.8533%" y="207.50">mir_..</text></g><g><title>mir_promoted (12,320,877 samples, 5.23%)</title><rect x="10.5617%" y="245" width="5.2254%" height="15" fill="rgb(218,30,26)"/><text x="10.8117%" y="255.50">mir_pr..</text></g><g><title>mir_const_qualif (460,594 samples, 0.20%)</title><rect x="15.5917%" y="229" width="0.1953%" height="15" fill="rgb(220,122,19)"/><text x="15.8417%" y="239.50"></text></g><g><title>type_op_prove_predicate (716,589 samples, 0.30%)</title><rect x="15.9325%" y="245" width="0.3039%" height="15" fill="rgb(250,228,42)"/><text x="16.1825%" y="255.50"></text></g><g><title>MIR_borrow_checking (36,901,142 samples, 15.65%)</title><rect x="0.5891%" y="277" width="15.6501%" height="15" fill="rgb(240,193,28)"/><text x="0.8391%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (36,876,862 samples, 15.64%)</title><rect x="0.5994%" y="261" width="15.6398%" height="15" fill="rgb(216,20,37)"/><text x="0.8494%" y="271.50">mir_borrowck</text></g><g><title>check_mod_attrs (469,935 samples, 0.20%)</title><rect x="16.3515%" y="261" width="0.1993%" height="15" fill="rgb(206,188,39)"/><text x="16.6015%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (294,513 samples, 0.12%)</title><rect x="16.6149%" y="261" width="0.1249%" height="15" fill="rgb(217,207,13)"/><text x="16.8649%" y="271.50"></text></g><g><title>misc_checking_1 (962,171 samples, 0.41%)</title><rect x="16.3459%" y="277" width="0.4081%" height="15" fill="rgb(231,73,38)"/><text x="16.5959%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (709,968 samples, 0.30%)</title><rect x="16.7546%" y="261" width="0.3011%" height="15" fill="rgb(225,20,46)"/><text x="17.0046%" y="271.50"></text></g><g><title>check_mod_liveness (567,016 samples, 0.24%)</title><rect x="16.8152%" y="245" width="0.2405%" height="15" fill="rgb(210,31,41)"/><text x="17.0652%" y="255.50"></text></g><g><title>misc_checking_2 (1,290,634 samples, 0.55%)</title><rect x="16.7540%" y="277" width="0.5474%" height="15" fill="rgb(221,200,47)"/><text x="17.0040%" y="287.50"></text></g><g><title>match_checking (579,226 samples, 0.25%)</title><rect x="17.0557%" y="261" width="0.2457%" height="15" fill="rgb(226,26,5)"/><text x="17.3057%" y="271.50"></text></g><g><title>check_match (572,036 samples, 0.24%)</title><rect x="17.0587%" y="245" width="0.2426%" height="15" fill="rgb(249,33,26)"/><text x="17.3087%" y="255.50"></text></g><g><title>eval_to_const_value_raw (401,455 samples, 0.17%)</title><rect x="17.7098%" y="181" width="0.1703%" height="15" fill="rgb(235,183,28)"/><text x="17.9598%" y="191.50"></text></g><g><title>eval_to_const_value_raw (400,795 samples, 0.17%)</title><rect x="17.7101%" y="165" width="0.1700%" height="15" fill="rgb(221,5,38)"/><text x="17.9601%" y="175.50"></text></g><g><title>eval_to_allocation_raw (398,915 samples, 0.17%)</title><rect x="17.7109%" y="149" width="0.1692%" height="15" fill="rgb(247,18,42)"/><text x="17.9609%" y="159.50"></text></g><g><title>eval_to_allocation_raw (447,165 samples, 0.19%)</title><rect x="17.6911%" y="229" width="0.1896%" height="15" fill="rgb(241,131,45)"/><text x="17.9411%" y="239.50"></text></g><g><title>eval_to_allocation_raw (446,455 samples, 0.19%)</title><rect x="17.6914%" y="213" width="0.1893%" height="15" fill="rgb(249,31,29)"/><text x="17.9414%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (412,265 samples, 0.17%)</title><rect x="17.7060%" y="197" width="0.1748%" height="15" fill="rgb(225,111,53)"/><text x="17.9560%" y="207.50"></text></g><g><title>crate_lints (1,267,234 samples, 0.54%)</title><rect x="17.4189%" y="245" width="0.5374%" height="15" fill="rgb(238,160,17)"/><text x="17.6689%" y="255.50"></text></g><g><title>lint_checking (2,221,645 samples, 0.94%)</title><rect x="17.4182%" y="261" width="0.9422%" height="15" fill="rgb(214,148,48)"/><text x="17.6682%" y="271.50"></text></g><g><title>module_lints (952,771 samples, 0.40%)</title><rect x="17.9563%" y="245" width="0.4041%" height="15" fill="rgb(232,36,49)"/><text x="18.2063%" y="255.50"></text></g><g><title>lint_mod (950,701 samples, 0.40%)</title><rect x="17.9572%" y="229" width="0.4032%" height="15" fill="rgb(209,103,24)"/><text x="18.2072%" y="239.50"></text></g><g><title>privacy_checking_modules (1,140,823 samples, 0.48%)</title><rect x="18.4218%" y="261" width="0.4838%" height="15" fill="rgb(229,88,8)"/><text x="18.6718%" y="271.50"></text></g><g><title>check_mod_privacy (1,139,153 samples, 0.48%)</title><rect x="18.4225%" y="245" width="0.4831%" height="15" fill="rgb(213,181,19)"/><text x="18.6725%" y="255.50"></text></g><g><title>misc_checking_3 (3,798,473 samples, 1.61%)</title><rect x="17.3014%" y="277" width="1.6110%" height="15" fill="rgb(254,191,54)"/><text x="17.5514%" y="287.50"></text></g><g><title>associated_item (543,489 samples, 0.23%)</title><rect x="36.3411%" y="181" width="0.2305%" height="15" fill="rgb(241,83,37)"/><text x="36.5911%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (456,027 samples, 0.19%)</title><rect x="36.3782%" y="165" width="0.1934%" height="15" fill="rgb(233,36,39)"/><text x="36.6282%" y="175.50"></text></g><g><title>associated_items (702,269 samples, 0.30%)</title><rect x="36.2846%" y="197" width="0.2978%" height="15" fill="rgb(226,3,54)"/><text x="36.5346%" y="207.50"></text></g><g><title>adt_def (290,644 samples, 0.12%)</title><rect x="37.6629%" y="85" width="0.1233%" height="15" fill="rgb(245,192,40)"/><text x="37.9129%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (281,804 samples, 0.12%)</title><rect x="37.6666%" y="69" width="0.1195%" height="15" fill="rgb(238,167,29)"/><text x="37.9166%" y="79.50"></text></g><g><title>adt_def (255,164 samples, 0.11%)</title><rect x="37.9644%" y="53" width="0.1082%" height="15" fill="rgb(232,182,51)"/><text x="38.2144%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (244,494 samples, 0.10%)</title><rect x="37.9689%" y="37" width="0.1037%" height="15" fill="rgb(231,60,39)"/><text x="38.2189%" y="47.50"></text></g><g><title>adt_dtorck_constraint (547,997 samples, 0.23%)</title><rect x="37.9216%" y="69" width="0.2324%" height="15" fill="rgb(208,69,12)"/><text x="38.1716%" y="79.50"></text></g><g><title>adt_dtorck_constraint (893,008 samples, 0.38%)</title><rect x="37.8072%" y="85" width="0.3787%" height="15" fill="rgb(235,93,37)"/><text x="38.0572%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,506,317 samples, 0.64%)</title><rect x="37.5983%" y="101" width="0.6388%" height="15" fill="rgb(213,116,39)"/><text x="37.8483%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,801,060 samples, 0.76%)</title><rect x="37.5061%" y="117" width="0.7638%" height="15" fill="rgb(222,207,29)"/><text x="37.7561%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,181,054 samples, 0.93%)</title><rect x="37.3720%" y="133" width="0.9250%" height="15" fill="rgb(206,96,30)"/><text x="37.6220%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,626,512 samples, 1.11%)</title><rect x="37.2236%" y="149" width="1.1139%" height="15" fill="rgb(218,138,4)"/><text x="37.4736%" y="159.50"></text></g><g><title>def_span (265,144 samples, 0.11%)</title><rect x="38.3394%" y="149" width="0.1124%" height="15" fill="rgb(250,191,14)"/><text x="38.5894%" y="159.50"></text></g><g><title>adt_dtorck_constraint (3,475,130 samples, 1.47%)</title><rect x="37.0265%" y="165" width="1.4738%" height="15" fill="rgb(239,60,40)"/><text x="37.2765%" y="175.50"></text></g><g><title>dropck_outlives (4,607,472 samples, 1.95%)</title><rect x="36.6011%" y="197" width="1.9541%" height="15" fill="rgb(206,27,48)"/><text x="36.8511%" y="207.50">d..</text></g><g><title>adt_dtorck_constraint (4,082,876 samples, 1.73%)</title><rect x="36.8236%" y="181" width="1.7316%" height="15" fill="rgb(225,35,8)"/><text x="37.0736%" y="191.50"></text></g><g><title>adt_sized_constraint (268,644 samples, 0.11%)</title><rect x="39.0684%" y="149" width="0.1139%" height="15" fill="rgb(250,213,24)"/><text x="39.3184%" y="159.50"></text></g><g><title>adt_sized_constraint (499,686 samples, 0.21%)</title><rect x="38.9821%" y="165" width="0.2119%" height="15" fill="rgb(247,123,22)"/><text x="39.2321%" y="175.50"></text></g><g><title>adt_sized_constraint (754,558 samples, 0.32%)</title><rect x="38.8918%" y="181" width="0.3200%" height="15" fill="rgb(231,138,38)"/><text x="39.1418%" y="191.50"></text></g><g><title>evaluate_obligation (2,809,873 samples, 1.19%)</title><rect x="38.5552%" y="197" width="1.1917%" height="15" fill="rgb(231,145,46)"/><text x="38.8052%" y="207.50"></text></g><g><title>trait_impls_of (818,172 samples, 0.35%)</title><rect x="39.3999%" y="181" width="0.3470%" height="15" fill="rgb(251,118,11)"/><text x="39.6499%" y="191.50"></text></g><g><title>implementations_of_trait (274,442 samples, 0.12%)</title><rect x="39.6305%" y="165" width="0.1164%" height="15" fill="rgb(217,147,25)"/><text x="39.8805%" y="175.50"></text></g><g><title>lint_levels (268,603 samples, 0.11%)</title><rect x="39.9620%" y="197" width="0.1139%" height="15" fill="rgb(247,81,37)"/><text x="40.2120%" y="207.50"></text></g><g><title>method_autoderef_steps (316,643 samples, 0.13%)</title><rect x="40.0895%" y="197" width="0.1343%" height="15" fill="rgb(209,12,38)"/><text x="40.3395%" y="207.50"></text></g><g><title>predicates_of (365,394 samples, 0.15%)</title><rect x="40.2281%" y="197" width="0.1550%" height="15" fill="rgb(227,1,9)"/><text x="40.4781%" y="207.50"></text></g><g><title>predicates_defined_on (239,544 samples, 0.10%)</title><rect x="40.2814%" y="181" width="0.1016%" height="15" fill="rgb(248,47,43)"/><text x="40.5314%" y="191.50"></text></g><g><title>typeck (34,845,280 samples, 14.78%)</title><rect x="25.6965%" y="213" width="14.7782%" height="15" fill="rgb(221,10,30)"/><text x="25.9465%" y="223.50">typeck</text></g><g><title>item_bodies_checking (50,778,487 samples, 21.54%)</title><rect x="18.9404%" y="261" width="21.5356%" height="15" fill="rgb(210,229,1)"/><text x="19.1904%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,775,487 samples, 21.53%)</title><rect x="18.9416%" y="245" width="21.5343%" height="15" fill="rgb(222,148,37)"/><text x="19.1916%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (50,765,837 samples, 21.53%)</title><rect x="18.9457%" y="229" width="21.5302%" height="15" fill="rgb(234,67,33)"/><text x="19.1957%" y="239.50">typeck</text></g><g><title>impl_trait_ref (354,465 samples, 0.15%)</title><rect x="40.7674%" y="101" width="0.1503%" height="15" fill="rgb(247,98,35)"/><text x="41.0174%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (332,654 samples, 0.14%)</title><rect x="40.7767%" y="85" width="0.1411%" height="15" fill="rgb(247,138,52)"/><text x="41.0267%" y="95.50"></text></g><g><title>coherent_trait (594,867 samples, 0.25%)</title><rect x="40.6797%" y="133" width="0.2523%" height="15" fill="rgb(213,79,30)"/><text x="40.9297%" y="143.50"></text></g><g><title>specialization_graph_of (591,337 samples, 0.25%)</title><rect x="40.6812%" y="117" width="0.2508%" height="15" fill="rgb(246,177,23)"/><text x="40.9312%" y="127.50"></text></g><g><title>adt_destructor (602,447 samples, 0.26%)</title><rect x="40.6772%" y="165" width="0.2555%" height="15" fill="rgb(230,62,27)"/><text x="40.9272%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_destructor (601,897 samples, 0.26%)</title><rect x="40.6774%" y="149" width="0.2553%" height="15" fill="rgb(216,154,8)"/><text x="40.9274%" y="159.50"></text></g><g><title>adt_dtorck_constraint (612,727 samples, 0.26%)</title><rect x="40.6730%" y="181" width="0.2599%" height="15" fill="rgb(244,35,45)"/><text x="40.9230%" y="191.50"></text></g><g><title>dropck_outlives (642,817 samples, 0.27%)</title><rect x="40.6608%" y="213" width="0.2726%" height="15" fill="rgb(251,115,12)"/><text x="40.9108%" y="223.50"></text></g><g><title>adt_dtorck_constraint (621,077 samples, 0.26%)</title><rect x="40.6700%" y="197" width="0.2634%" height="15" fill="rgb(240,54,50)"/><text x="40.9200%" y="207.50"></text></g><g><title>item_types_checking (1,273,894 samples, 0.54%)</title><rect x="40.4760%" y="261" width="0.5403%" height="15" fill="rgb(233,84,52)"/><text x="40.7260%" y="271.50"></text></g><g><title>check_mod_item_types (1,271,964 samples, 0.54%)</title><rect x="40.4768%" y="245" width="0.5395%" height="15" fill="rgb(207,117,47)"/><text x="40.7268%" y="255.50"></text></g><g><title>typeck (1,234,224 samples, 0.52%)</title><rect x="40.4928%" y="229" width="0.5234%" height="15" fill="rgb(249,43,39)"/><text x="40.7428%" y="239.50"></text></g><g><title>fn_sig (244,942 samples, 0.10%)</title><rect x="41.0615%" y="229" width="0.1039%" height="15" fill="rgb(209,38,44)"/><text x="41.3115%" y="239.50"></text></g><g><title>type_collecting (484,565 samples, 0.21%)</title><rect x="41.0167%" y="261" width="0.2055%" height="15" fill="rgb(236,212,23)"/><text x="41.2667%" y="271.50"></text></g><g><title>collect_mod_item_types (477,455 samples, 0.20%)</title><rect x="41.0197%" y="245" width="0.2025%" height="15" fill="rgb(242,79,21)"/><text x="41.2697%" y="255.50"></text></g><g><title>evaluate_obligation (250,154 samples, 0.11%)</title><rect x="41.3906%" y="229" width="0.1061%" height="15" fill="rgb(211,96,35)"/><text x="41.6406%" y="239.50"></text></g><g><title>region_scope_tree (535,006 samples, 0.23%)</title><rect x="41.6079%" y="229" width="0.2269%" height="15" fill="rgb(253,215,40)"/><text x="41.8579%" y="239.50"></text></g><g><title>analysis (97,771,042 samples, 41.47%)</title><rect x="0.3694%" y="293" width="41.4656%" height="15" fill="rgb(211,81,21)"/><text x="0.6194%" y="303.50">analysis</text></g><g><title>type_check_crate (54,049,044 samples, 22.92%)</title><rect x="18.9123%" y="277" width="22.9227%" height="15" fill="rgb(208,190,38)"/><text x="19.1623%" y="287.50">type_check_crate</text></g><g><title>wf_checking (1,443,826 samples, 0.61%)</title><rect x="41.2227%" y="261" width="0.6123%" height="15" fill="rgb(235,213,38)"/><text x="41.4727%" y="271.50"></text></g><g><title>check_item_well_formed (1,381,995 samples, 0.59%)</title><rect x="41.2489%" y="245" width="0.5861%" height="15" fill="rgb(237,122,38)"/><text x="41.4989%" y="255.50"></text></g><g><title>codegen_crate (745,229 samples, 0.32%)</title><rect x="41.8399%" y="293" width="0.3161%" height="15" fill="rgb(244,218,35)"/><text x="42.0899%" y="303.50"></text></g><g><title>metadata_load_macro (938,130 samples, 0.40%)</title><rect x="90.9654%" y="245" width="0.3979%" height="15" fill="rgb(240,68,47)"/><text x="91.2154%" y="255.50"></text></g><g><title>macro_expand_crate (118,491,834 samples, 50.25%)</title><rect x="42.4113%" y="277" width="50.2535%" height="15" fill="rgb(210,16,53)"/><text x="42.6613%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (118,468,504 samples, 50.24%)</title><rect x="42.4212%" y="261" width="50.2436%" height="15" fill="rgb(235,124,12)"/><text x="42.6712%" y="271.50">expand_crate</text></g><g><title>metadata_register_crate (3,068,845 samples, 1.30%)</title><rect x="91.3633%" y="245" width="1.3015%" height="15" fill="rgb(224,169,11)"/><text x="91.6133%" y="255.50"></text></g><g><title>metadata_register_crate (1,096,593 samples, 0.47%)</title><rect x="92.1997%" y="229" width="0.4651%" height="15" fill="rgb(250,166,2)"/><text x="92.4497%" y="239.50"></text></g><g><title>maybe_create_a_macro_crate (442,435 samples, 0.19%)</title><rect x="92.6653%" y="277" width="0.1876%" height="15" fill="rgb(242,216,29)"/><text x="92.9153%" y="287.50"></text></g><g><title>finalize_macro_resolutions (1,375,586 samples, 0.58%)</title><rect x="93.0002%" y="261" width="0.5834%" height="15" fill="rgb(230,116,27)"/><text x="93.2502%" y="271.50"></text></g><g><title>late_resolve_crate (2,865,841 samples, 1.22%)</title><rect x="93.5836%" y="261" width="1.2154%" height="15" fill="rgb(228,99,48)"/><text x="93.8336%" y="271.50"></text></g><g><title>configure_and_expand (124,307,418 samples, 52.72%)</title><rect x="42.1559%" y="293" width="52.7199%" height="15" fill="rgb(253,11,6)"/><text x="42.4059%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (4,571,610 samples, 1.94%)</title><rect x="92.9370%" y="277" width="1.9389%" height="15" fill="rgb(247,143,39)"/><text x="93.1870%" y="287.50">r..</text></g><g><title>drop_ast (254,613 samples, 0.11%)</title><rect x="94.8758%" y="293" width="0.1080%" height="15" fill="rgb(236,97,10)"/><text x="95.1258%" y="303.50"></text></g><g><title>early_lint_checks (871,179 samples, 0.37%)</title><rect x="94.9934%" y="293" width="0.3695%" height="15" fill="rgb(233,208,19)"/><text x="95.2434%" y="303.50"></text></g><g><title>free_global_ctxt (3,052,814 samples, 1.29%)</title><rect x="95.3628%" y="293" width="1.2947%" height="15" fill="rgb(216,164,2)"/><text x="95.6128%" y="303.50"></text></g><g><title>hir_lowering (4,284,328 samples, 1.82%)</title><rect x="96.7318%" y="293" width="1.8170%" height="15" fill="rgb(220,129,5)"/><text x="96.9818%" y="303.50">h..</text></g><g><title>parse_crate (2,248,264 samples, 0.95%)</title><rect x="98.5745%" y="293" width="0.9535%" height="15" fill="rgb(242,17,10)"/><text x="98.8245%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (462,065 samples, 0.20%)</title><rect x="99.6202%" y="293" width="0.1960%" height="15" fill="rgb(242,107,0)"/><text x="99.8702%" y="303.50"></text></g><g><title>all (235,788,442 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (235,788,442 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (333,333 samples, 0.14%)</title><rect x="99.8586%" y="293" width="0.1414%" height="15" fill="rgb(215,21,27)"/><text x="100.1086%" y="303.50"></text></g></svg></svg>