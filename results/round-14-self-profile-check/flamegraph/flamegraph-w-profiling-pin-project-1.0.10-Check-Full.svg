<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (38,350 samples, 0.19%)</title><rect x="6.6510%" y="165" width="0.1883%" height="15" fill="rgb(227,0,7)"/><text x="6.9010%" y="175.50"></text></g><g><title>codegen_fn_attrs (20,870 samples, 0.10%)</title><rect x="7.1457%" y="149" width="0.1025%" height="15" fill="rgb(217,0,24)"/><text x="7.3957%" y="159.50"></text></g><g><title>is_copy_raw (74,171 samples, 0.36%)</title><rect x="7.9861%" y="133" width="0.3642%" height="15" fill="rgb(221,193,54)"/><text x="8.2361%" y="143.50"></text></g><g><title>evaluate_obligation (67,901 samples, 0.33%)</title><rect x="8.0169%" y="117" width="0.3334%" height="15" fill="rgb(248,212,6)"/><text x="8.2669%" y="127.50"></text></g><g><title>trait_impls_of (25,451 samples, 0.12%)</title><rect x="8.2254%" y="101" width="0.1250%" height="15" fill="rgb(208,68,35)"/><text x="8.4754%" y="111.50"></text></g><g><title>explicit_predicates_of (59,531 samples, 0.29%)</title><rect x="8.5410%" y="53" width="0.2923%" height="15" fill="rgb(232,128,0)"/><text x="8.7910%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (59,171 samples, 0.29%)</title><rect x="8.5428%" y="37" width="0.2906%" height="15" fill="rgb(207,160,47)"/><text x="8.7928%" y="47.50"></text></g><g><title>needs_drop_raw (99,121 samples, 0.49%)</title><rect x="8.3503%" y="133" width="0.4867%" height="15" fill="rgb(228,23,34)"/><text x="8.6003%" y="143.50"></text></g><g><title>is_copy_raw (96,501 samples, 0.47%)</title><rect x="8.3632%" y="117" width="0.4739%" height="15" fill="rgb(218,30,26)"/><text x="8.6132%" y="127.50"></text></g><g><title>evaluate_obligation (91,931 samples, 0.45%)</title><rect x="8.3856%" y="101" width="0.4514%" height="15" fill="rgb(220,122,19)"/><text x="8.6356%" y="111.50"></text></g><g><title>predicates_of (63,771 samples, 0.31%)</title><rect x="8.5239%" y="85" width="0.3131%" height="15" fill="rgb(250,228,42)"/><text x="8.7739%" y="95.50"></text></g><g><title>predicates_defined_on (61,601 samples, 0.30%)</title><rect x="8.5346%" y="69" width="0.3025%" height="15" fill="rgb(240,193,28)"/><text x="8.7846%" y="79.50"></text></g><g><title>specialization_graph_of (34,340 samples, 0.17%)</title><rect x="9.1072%" y="117" width="0.1686%" height="15" fill="rgb(216,20,37)"/><text x="9.3572%" y="127.50"></text></g><g><title>resolve_instance (94,860 samples, 0.47%)</title><rect x="8.8371%" y="133" width="0.4658%" height="15" fill="rgb(206,188,39)"/><text x="9.0871%" y="143.50"></text></g><g><title>thir_body (48,820 samples, 0.24%)</title><rect x="9.3134%" y="133" width="0.2397%" height="15" fill="rgb(217,207,13)"/><text x="9.5634%" y="143.50"></text></g><g><title>mir_const (703,727 samples, 3.46%)</title><rect x="6.1226%" y="181" width="3.4556%" height="15" fill="rgb(231,73,38)"/><text x="6.3726%" y="191.50">mir..</text></g><g><title>unsafety_check_result (557,776 samples, 2.74%)</title><rect x="6.8393%" y="165" width="2.7390%" height="15" fill="rgb(225,20,46)"/><text x="7.0893%" y="175.50">un..</text></g><g><title>mir_built (474,505 samples, 2.33%)</title><rect x="7.2482%" y="149" width="2.3301%" height="15" fill="rgb(210,31,41)"/><text x="7.4982%" y="159.50">m..</text></g><g><title>mir_promoted (793,268 samples, 3.90%)</title><rect x="5.7153%" y="197" width="3.8953%" height="15" fill="rgb(221,200,47)"/><text x="5.9653%" y="207.50">mir_..</text></g><g><title>type_op_ascribe_user_type (23,440 samples, 0.12%)</title><rect x="9.6107%" y="197" width="0.1151%" height="15" fill="rgb(226,26,5)"/><text x="9.8607%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (35,581 samples, 0.17%)</title><rect x="9.7258%" y="197" width="0.1747%" height="15" fill="rgb(249,33,26)"/><text x="9.9758%" y="207.50"></text></g><g><title>MIR_borrow_checking (1,590,698 samples, 7.81%)</title><rect x="2.4011%" y="229" width="7.8111%" height="15" fill="rgb(235,183,28)"/><text x="2.6511%" y="239.50">MIR_borrow_..</text></g><g><title>mir_borrowck (1,580,128 samples, 7.76%)</title><rect x="2.4530%" y="213" width="7.7592%" height="15" fill="rgb(221,5,38)"/><text x="2.7030%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (63,481 samples, 0.31%)</title><rect x="9.9005%" y="197" width="0.3117%" height="15" fill="rgb(247,18,42)"/><text x="10.1505%" y="207.50"></text></g><g><title>hir_owner (21,520 samples, 0.11%)</title><rect x="10.5182%" y="213" width="0.1057%" height="15" fill="rgb(241,131,45)"/><text x="10.7682%" y="223.50"></text></g><g><title>hir_module_items (79,962 samples, 0.39%)</title><rect x="10.2330%" y="229" width="0.3927%" height="15" fill="rgb(249,31,29)"/><text x="10.4830%" y="239.50"></text></g><g><title>get_lang_items (30,171 samples, 0.15%)</title><rect x="11.2567%" y="181" width="0.1482%" height="15" fill="rgb(225,111,53)"/><text x="11.5067%" y="191.50"></text></g><g><title>associated_item (21,580 samples, 0.11%)</title><rect x="11.4547%" y="165" width="0.1060%" height="15" fill="rgb(238,160,17)"/><text x="11.7047%" y="175.50"></text></g><g><title>codegen_fn_attrs (30,480 samples, 0.15%)</title><rect x="11.5607%" y="165" width="0.1497%" height="15" fill="rgb(214,148,48)"/><text x="11.8107%" y="175.50"></text></g><g><title>should_inherit_track_caller (63,800 samples, 0.31%)</title><rect x="11.4049%" y="181" width="0.3133%" height="15" fill="rgb(232,36,49)"/><text x="11.6549%" y="191.50"></text></g><g><title>codegen_fn_attrs (146,151 samples, 0.72%)</title><rect x="11.0819%" y="197" width="0.7177%" height="15" fill="rgb(209,103,24)"/><text x="11.3319%" y="207.50"></text></g><g><title>check_mod_attrs (217,351 samples, 1.07%)</title><rect x="10.7332%" y="213" width="1.0673%" height="15" fill="rgb(229,88,8)"/><text x="10.9832%" y="223.50"></text></g><g><title>check_mod_const_bodies (26,080 samples, 0.13%)</title><rect x="11.8005%" y="213" width="0.1281%" height="15" fill="rgb(213,181,19)"/><text x="12.0505%" y="223.50"></text></g><g><title>lookup_deprecation_entry (51,250 samples, 0.25%)</title><rect x="12.2807%" y="197" width="0.2517%" height="15" fill="rgb(254,191,54)"/><text x="12.5307%" y="207.50"></text></g><g><title>stability_index (24,200 samples, 0.12%)</title><rect x="12.4135%" y="181" width="0.1188%" height="15" fill="rgb(241,83,37)"/><text x="12.6635%" y="191.50"></text></g><g><title>lookup_stability (24,330 samples, 0.12%)</title><rect x="12.5324%" y="197" width="0.1195%" height="15" fill="rgb(233,36,39)"/><text x="12.7824%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (134,791 samples, 0.66%)</title><rect x="12.0333%" y="213" width="0.6619%" height="15" fill="rgb(226,3,54)"/><text x="12.2833%" y="223.50"></text></g><g><title>looking_for_derive_registrar (30,910 samples, 0.15%)</title><rect x="12.7004%" y="213" width="0.1518%" height="15" fill="rgb(245,192,40)"/><text x="12.9504%" y="223.50"></text></g><g><title>misc_checking_1 (455,725 samples, 2.24%)</title><rect x="10.6267%" y="229" width="2.2378%" height="15" fill="rgb(238,167,29)"/><text x="10.8767%" y="239.50">m..</text></g><g><title>liveness_and_intrinsic_checking (50,450 samples, 0.25%)</title><rect x="12.8710%" y="213" width="0.2477%" height="15" fill="rgb(232,182,51)"/><text x="13.1210%" y="223.50"></text></g><g><title>check_mod_liveness (37,210 samples, 0.18%)</title><rect x="12.9360%" y="197" width="0.1827%" height="15" fill="rgb(231,60,39)"/><text x="13.1860%" y="207.50"></text></g><g><title>misc_checking_2 (114,231 samples, 0.56%)</title><rect x="12.8645%" y="229" width="0.5609%" height="15" fill="rgb(208,69,12)"/><text x="13.1145%" y="239.50"></text></g><g><title>match_checking (62,451 samples, 0.31%)</title><rect x="13.1188%" y="213" width="0.3067%" height="15" fill="rgb(235,93,37)"/><text x="13.3688%" y="223.50"></text></g><g><title>check_match (59,181 samples, 0.29%)</title><rect x="13.1348%" y="197" width="0.2906%" height="15" fill="rgb(213,116,39)"/><text x="13.3848%" y="207.50"></text></g><g><title>check_private_in_public (45,400 samples, 0.22%)</title><rect x="13.4651%" y="213" width="0.2229%" height="15" fill="rgb(222,207,29)"/><text x="13.7151%" y="223.50"></text></g><g><title>codegen_fn_attrs (24,020 samples, 0.12%)</title><rect x="14.0077%" y="197" width="0.1180%" height="15" fill="rgb(206,96,30)"/><text x="14.2577%" y="207.50"></text></g><g><title>death_checking (150,792 samples, 0.74%)</title><rect x="13.6880%" y="213" width="0.7405%" height="15" fill="rgb(218,138,4)"/><text x="13.9380%" y="223.50"></text></g><g><title>lint_levels (57,851 samples, 0.28%)</title><rect x="14.1444%" y="197" width="0.2841%" height="15" fill="rgb(250,191,14)"/><text x="14.3944%" y="207.50"></text></g><g><title>explicit_predicates_of (22,581 samples, 0.11%)</title><rect x="16.6424%" y="133" width="0.1109%" height="15" fill="rgb(239,60,40)"/><text x="16.8924%" y="143.50"></text></g><g><title>param_env (103,372 samples, 0.51%)</title><rect x="16.2545%" y="181" width="0.5076%" height="15" fill="rgb(206,27,48)"/><text x="16.5045%" y="191.50"></text></g><g><title>predicates_of (50,132 samples, 0.25%)</title><rect x="16.5160%" y="165" width="0.2462%" height="15" fill="rgb(225,35,8)"/><text x="16.7660%" y="175.50"></text></g><g><title>predicates_defined_on (41,332 samples, 0.20%)</title><rect x="16.5592%" y="149" width="0.2030%" height="15" fill="rgb(250,213,24)"/><text x="16.8092%" y="159.50"></text></g><g><title>trait_impls_of (67,851 samples, 0.33%)</title><rect x="16.7621%" y="181" width="0.3332%" height="15" fill="rgb(247,123,22)"/><text x="17.0121%" y="191.50"></text></g><g><title>crate_lints (1,468,697 samples, 7.21%)</title><rect x="14.4363%" y="197" width="7.2120%" height="15" fill="rgb(231,138,38)"/><text x="14.6863%" y="207.50">crate_lints</text></g><g><title>type_of (927,191 samples, 4.55%)</title><rect x="17.0953%" y="181" width="4.5530%" height="15" fill="rgb(231,145,46)"/><text x="17.3453%" y="191.50">type_..</text></g><g><title>metadata_decode_entry_type_of (843,691 samples, 4.14%)</title><rect x="17.5054%" y="165" width="4.1429%" height="15" fill="rgb(251,118,11)"/><text x="17.7554%" y="175.50">metad..</text></g><g><title>lint_checking (1,508,507 samples, 7.41%)</title><rect x="14.4285%" y="213" width="7.4075%" height="15" fill="rgb(217,147,25)"/><text x="14.6785%" y="223.50">lint_check..</text></g><g><title>module_lints (38,230 samples, 0.19%)</title><rect x="21.6483%" y="197" width="0.1877%" height="15" fill="rgb(247,81,37)"/><text x="21.8983%" y="207.50"></text></g><g><title>lint_mod (35,950 samples, 0.18%)</title><rect x="21.6595%" y="181" width="0.1765%" height="15" fill="rgb(209,12,38)"/><text x="21.9095%" y="191.50"></text></g><g><title>privacy_access_levels (55,161 samples, 0.27%)</title><rect x="21.8360%" y="213" width="0.2709%" height="15" fill="rgb(227,1,9)"/><text x="22.0860%" y="223.50"></text></g><g><title>privacy_checking_modules (80,311 samples, 0.39%)</title><rect x="22.1069%" y="213" width="0.3944%" height="15" fill="rgb(248,47,43)"/><text x="22.3569%" y="223.50"></text></g><g><title>check_mod_privacy (79,081 samples, 0.39%)</title><rect x="22.1129%" y="197" width="0.3883%" height="15" fill="rgb(221,10,30)"/><text x="22.3629%" y="207.50"></text></g><g><title>misc_checking_3 (1,857,031 samples, 9.12%)</title><rect x="13.4254%" y="229" width="9.1189%" height="15" fill="rgb(210,229,1)"/><text x="13.6754%" y="239.50">misc_checking..</text></g><g><title>impl_trait_ref (76,432 samples, 0.38%)</title><rect x="23.1533%" y="165" width="0.3753%" height="15" fill="rgb(222,148,37)"/><text x="23.4033%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (70,852 samples, 0.35%)</title><rect x="23.1807%" y="149" width="0.3479%" height="15" fill="rgb(234,67,33)"/><text x="23.4307%" y="159.50"></text></g><g><title>coherent_trait (192,093 samples, 0.94%)</title><rect x="22.7064%" y="197" width="0.9433%" height="15" fill="rgb(247,98,35)"/><text x="22.9564%" y="207.50"></text></g><g><title>specialization_graph_of (186,083 samples, 0.91%)</title><rect x="22.7359%" y="181" width="0.9138%" height="15" fill="rgb(247,138,52)"/><text x="22.9859%" y="191.50"></text></g><g><title>trait_impls_of (24,650 samples, 0.12%)</title><rect x="23.5286%" y="165" width="0.1210%" height="15" fill="rgb(213,79,30)"/><text x="23.7786%" y="175.50"></text></g><g><title>orphan_check_crate (25,200 samples, 0.12%)</title><rect x="23.6898%" y="197" width="0.1237%" height="15" fill="rgb(246,177,23)"/><text x="23.9398%" y="207.50"></text></g><g><title>coherence_checking (242,743 samples, 1.19%)</title><rect x="22.6507%" y="213" width="1.1920%" height="15" fill="rgb(230,62,27)"/><text x="22.9007%" y="223.50"></text></g><g><title>adt_sized_constraint (28,840 samples, 0.14%)</title><rect x="27.2533%" y="165" width="0.1416%" height="15" fill="rgb(216,154,8)"/><text x="27.5033%" y="175.50"></text></g><g><title>adt_sized_constraint (25,830 samples, 0.13%)</title><rect x="27.2681%" y="149" width="0.1268%" height="15" fill="rgb(244,35,45)"/><text x="27.5181%" y="159.50"></text></g><g><title>adt_def (24,010 samples, 0.12%)</title><rect x="27.2770%" y="133" width="0.1179%" height="15" fill="rgb(251,115,12)"/><text x="27.5270%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (23,650 samples, 0.12%)</title><rect x="27.2788%" y="117" width="0.1161%" height="15" fill="rgb(240,54,50)"/><text x="27.5288%" y="127.50"></text></g><g><title>dropck_outlives (35,870 samples, 0.18%)</title><rect x="27.4846%" y="165" width="0.1761%" height="15" fill="rgb(233,84,52)"/><text x="27.7346%" y="175.50"></text></g><g><title>evaluate_obligation (37,950 samples, 0.19%)</title><rect x="27.6608%" y="165" width="0.1864%" height="15" fill="rgb(207,117,47)"/><text x="27.9108%" y="175.50"></text></g><g><title>item_attrs (67,051 samples, 0.33%)</title><rect x="28.0381%" y="165" width="0.3293%" height="15" fill="rgb(249,43,39)"/><text x="28.2881%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (65,411 samples, 0.32%)</title><rect x="28.0462%" y="149" width="0.3212%" height="15" fill="rgb(209,38,44)"/><text x="28.2962%" y="159.50"></text></g><g><title>predicates_of (30,700 samples, 0.15%)</title><rect x="28.4034%" y="165" width="0.1508%" height="15" fill="rgb(236,212,23)"/><text x="28.6534%" y="175.50"></text></g><g><title>predicates_defined_on (21,290 samples, 0.10%)</title><rect x="28.4496%" y="149" width="0.1045%" height="15" fill="rgb(242,79,21)"/><text x="28.6996%" y="159.50"></text></g><g><title>item_bodies_checking (963,471 samples, 4.73%)</title><rect x="23.9141%" y="213" width="4.7311%" height="15" fill="rgb(211,96,35)"/><text x="24.1641%" y="223.50">item_b..</text></g><g><title>typeck_item_bodies (961,801 samples, 4.72%)</title><rect x="23.9223%" y="197" width="4.7229%" height="15" fill="rgb(253,215,40)"/><text x="24.1723%" y="207.50">typeck..</text></g><g><title>typeck (955,291 samples, 4.69%)</title><rect x="23.9543%" y="181" width="4.6910%" height="15" fill="rgb(211,81,21)"/><text x="24.2043%" y="191.50">typeck</text></g><g><title>adt_destructor (20,640 samples, 0.10%)</title><rect x="29.0983%" y="181" width="0.1014%" height="15" fill="rgb(208,190,38)"/><text x="29.3483%" y="191.50"></text></g><g><title>item_types_checking (133,872 samples, 0.66%)</title><rect x="28.6452%" y="213" width="0.6574%" height="15" fill="rgb(235,213,38)"/><text x="28.8952%" y="223.50"></text></g><g><title>check_mod_item_types (131,891 samples, 0.65%)</title><rect x="28.6550%" y="197" width="0.6477%" height="15" fill="rgb(237,122,38)"/><text x="28.9050%" y="207.50"></text></g><g><title>fn_sig (57,770 samples, 0.28%)</title><rect x="29.7682%" y="181" width="0.2837%" height="15" fill="rgb(244,218,35)"/><text x="30.0182%" y="191.50"></text></g><g><title>is_late_bound_map (56,470 samples, 0.28%)</title><rect x="30.2733%" y="165" width="0.2773%" height="15" fill="rgb(240,68,47)"/><text x="30.5233%" y="175.50"></text></g><g><title>resolve_lifetimes (46,470 samples, 0.23%)</title><rect x="30.3224%" y="149" width="0.2282%" height="15" fill="rgb(210,16,53)"/><text x="30.5724%" y="159.50"></text></g><g><title>named_region_map (26,681 samples, 0.13%)</title><rect x="30.5506%" y="165" width="0.1310%" height="15" fill="rgb(235,124,12)"/><text x="30.8006%" y="175.50"></text></g><g><title>resolve_lifetimes (24,110 samples, 0.12%)</title><rect x="30.5633%" y="149" width="0.1184%" height="15" fill="rgb(224,169,11)"/><text x="30.8133%" y="159.50"></text></g><g><title>generics_of (135,102 samples, 0.66%)</title><rect x="30.0519%" y="181" width="0.6634%" height="15" fill="rgb(250,166,2)"/><text x="30.3019%" y="191.50"></text></g><g><title>explicit_predicates_of (82,291 samples, 0.40%)</title><rect x="30.9284%" y="149" width="0.4041%" height="15" fill="rgb(242,216,29)"/><text x="31.1784%" y="159.50"></text></g><g><title>predicates_of (21,680 samples, 0.11%)</title><rect x="31.5987%" y="117" width="0.1065%" height="15" fill="rgb(230,116,27)"/><text x="31.8487%" y="127.50"></text></g><g><title>predicates_defined_on (20,550 samples, 0.10%)</title><rect x="31.6042%" y="101" width="0.1009%" height="15" fill="rgb(228,99,48)"/><text x="31.8542%" y="111.50"></text></g><g><title>predicates_of (250,813 samples, 1.23%)</title><rect x="30.7696%" y="181" width="1.2316%" height="15" fill="rgb(253,11,6)"/><text x="31.0196%" y="191.50"></text></g><g><title>predicates_defined_on (237,543 samples, 1.17%)</title><rect x="30.8348%" y="165" width="1.1665%" height="15" fill="rgb(247,143,39)"/><text x="31.0848%" y="175.50"></text></g><g><title>inferred_outlives_of (136,172 samples, 0.67%)</title><rect x="31.3325%" y="149" width="0.6687%" height="15" fill="rgb(236,97,10)"/><text x="31.5825%" y="159.50"></text></g><g><title>inferred_outlives_crate (124,762 samples, 0.61%)</title><rect x="31.3886%" y="133" width="0.6126%" height="15" fill="rgb(233,208,19)"/><text x="31.6386%" y="143.50"></text></g><g><title>type_of (60,290 samples, 0.30%)</title><rect x="31.7052%" y="117" width="0.2961%" height="15" fill="rgb(216,164,2)"/><text x="31.9552%" y="127.50"></text></g><g><title>type_of (21,390 samples, 0.11%)</title><rect x="31.8962%" y="101" width="0.1050%" height="15" fill="rgb(220,129,5)"/><text x="32.1462%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (20,400 samples, 0.10%)</title><rect x="31.9010%" y="85" width="0.1002%" height="15" fill="rgb(242,17,10)"/><text x="32.1510%" y="95.50"></text></g><g><title>super_predicates_of (36,540 samples, 0.18%)</title><rect x="32.0012%" y="181" width="0.1794%" height="15" fill="rgb(242,107,0)"/><text x="32.2512%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (27,810 samples, 0.14%)</title><rect x="32.0441%" y="165" width="0.1366%" height="15" fill="rgb(251,28,31)"/><text x="32.2941%" y="175.50"></text></g><g><title>type_collecting (624,477 samples, 3.07%)</title><rect x="29.3074%" y="213" width="3.0665%" height="15" fill="rgb(233,223,10)"/><text x="29.5574%" y="223.50">typ..</text></g><g><title>collect_mod_item_types (607,716 samples, 2.98%)</title><rect x="29.3897%" y="197" width="2.9842%" height="15" fill="rgb(215,21,27)"/><text x="29.6397%" y="207.50">col..</text></g><g><title>type_of (37,471 samples, 0.18%)</title><rect x="32.1899%" y="181" width="0.1840%" height="15" fill="rgb(232,23,21)"/><text x="32.4399%" y="191.50"></text></g><g><title>evaluate_obligation (36,180 samples, 0.18%)</title><rect x="33.0168%" y="181" width="0.1777%" height="15" fill="rgb(244,5,23)"/><text x="33.2668%" y="191.50"></text></g><g><title>check_impl_item_well_formed (188,050 samples, 0.92%)</title><rect x="32.5349%" y="197" width="0.9234%" height="15" fill="rgb(226,81,46)"/><text x="32.7849%" y="207.50"></text></g><g><title>adt_sized_constraint (37,760 samples, 0.19%)</title><rect x="35.3020%" y="181" width="0.1854%" height="15" fill="rgb(247,70,30)"/><text x="35.5520%" y="191.50"></text></g><g><title>adt_def (35,840 samples, 0.18%)</title><rect x="35.3114%" y="165" width="0.1760%" height="15" fill="rgb(212,68,19)"/><text x="35.5614%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (32,040 samples, 0.16%)</title><rect x="35.3301%" y="149" width="0.1573%" height="15" fill="rgb(240,187,13)"/><text x="35.5801%" y="159.50"></text></g><g><title>item_attrs (27,780 samples, 0.14%)</title><rect x="35.3510%" y="133" width="0.1364%" height="15" fill="rgb(223,113,26)"/><text x="35.6010%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (27,300 samples, 0.13%)</title><rect x="35.3534%" y="117" width="0.1341%" height="15" fill="rgb(206,192,2)"/><text x="35.6034%" y="127.50"></text></g><g><title>param_env (178,521 samples, 0.88%)</title><rect x="35.5743%" y="181" width="0.8766%" height="15" fill="rgb(241,108,4)"/><text x="35.8243%" y="191.50"></text></g><g><title>check_item_well_formed (674,079 samples, 3.31%)</title><rect x="33.4584%" y="197" width="3.3101%" height="15" fill="rgb(247,173,49)"/><text x="33.7084%" y="207.50">che..</text></g><g><title>variances_of (46,581 samples, 0.23%)</title><rect x="36.5397%" y="181" width="0.2287%" height="15" fill="rgb(224,114,35)"/><text x="36.7897%" y="191.50"></text></g><g><title>crate_variances (43,131 samples, 0.21%)</title><rect x="36.5566%" y="165" width="0.2118%" height="15" fill="rgb(245,159,27)"/><text x="36.8066%" y="175.50"></text></g><g><title>evaluate_obligation (187,512 samples, 0.92%)</title><rect x="37.6259%" y="181" width="0.9208%" height="15" fill="rgb(245,172,44)"/><text x="37.8759%" y="191.50"></text></g><g><title>implied_outlives_bounds (40,890 samples, 0.20%)</title><rect x="38.6433%" y="181" width="0.2008%" height="15" fill="rgb(236,23,11)"/><text x="38.8933%" y="191.50"></text></g><g><title>analysis (7,545,724 samples, 37.05%)</title><rect x="1.9201%" y="245" width="37.0532%" height="15" fill="rgb(205,117,38)"/><text x="2.1701%" y="255.50">analysis</text></g><g><title>type_check_crate (3,345,677 samples, 16.43%)</title><rect x="22.5444%" y="229" width="16.4289%" height="15" fill="rgb(237,72,25)"/><text x="22.7944%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,343,484 samples, 6.60%)</title><rect x="32.3761%" y="213" width="6.5972%" height="15" fill="rgb(244,70,9)"/><text x="32.6261%" y="223.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (449,014 samples, 2.20%)</title><rect x="36.7684%" y="197" width="2.2049%" height="15" fill="rgb(217,125,39)"/><text x="37.0184%" y="207.50">c..</text></g><g><title>codegen_crate (310,994 samples, 1.53%)</title><rect x="39.0067%" y="245" width="1.5271%" height="15" fill="rgb(235,36,10)"/><text x="39.2567%" y="255.50"></text></g><g><title>AST_validation (99,881 samples, 0.49%)</title><rect x="41.1393%" y="229" width="0.4905%" height="15" fill="rgb(251,123,47)"/><text x="41.3893%" y="239.50"></text></g><g><title>complete_gated_feature_checking (25,351 samples, 0.12%)</title><rect x="41.6298%" y="229" width="0.1245%" height="15" fill="rgb(221,13,13)"/><text x="41.8798%" y="239.50"></text></g><g><title>crate_injection (61,791 samples, 0.30%)</title><rect x="41.7543%" y="229" width="0.3034%" height="15" fill="rgb(238,131,9)"/><text x="42.0043%" y="239.50"></text></g><g><title>macro_expand_crate (7,114,329 samples, 34.93%)</title><rect x="42.0577%" y="229" width="34.9349%" height="15" fill="rgb(211,50,8)"/><text x="42.3077%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (7,104,679 samples, 34.89%)</title><rect x="42.1051%" y="213" width="34.8875%" height="15" fill="rgb(245,182,24)"/><text x="42.3551%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (3,493,629 samples, 17.16%)</title><rect x="59.8371%" y="197" width="17.1554%" height="15" fill="rgb(242,14,37)"/><text x="60.0871%" y="207.50">metadata_register_crate</text></g><g><title>pre_AST_expansion_lint_checks (101,551 samples, 0.50%)</title><rect x="77.0071%" y="229" width="0.4987%" height="15" fill="rgb(246,228,12)"/><text x="77.2571%" y="239.50"></text></g><g><title>finalize_imports (107,041 samples, 0.53%)</title><rect x="77.5264%" y="213" width="0.5256%" height="15" fill="rgb(213,55,15)"/><text x="77.7764%" y="223.50"></text></g><g><title>late_resolve_crate (540,816 samples, 2.66%)</title><rect x="78.0955%" y="213" width="2.6557%" height="15" fill="rgb(209,9,3)"/><text x="78.3455%" y="223.50">la..</text></g><g><title>configure_and_expand (8,227,383 samples, 40.40%)</title><rect x="40.5339%" y="245" width="40.4005%" height="15" fill="rgb(230,59,30)"/><text x="40.7839%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (698,217 samples, 3.43%)</title><rect x="77.5058%" y="229" width="3.4286%" height="15" fill="rgb(209,121,21)"/><text x="77.7558%" y="239.50">res..</text></g><g><title>drop_ast (38,580 samples, 0.19%)</title><rect x="80.9344%" y="245" width="0.1894%" height="15" fill="rgb(220,109,13)"/><text x="81.1844%" y="255.50"></text></g><g><title>drop_compiler (21,811 samples, 0.11%)</title><rect x="81.1238%" y="245" width="0.1071%" height="15" fill="rgb(232,18,1)"/><text x="81.3738%" y="255.50"></text></g><g><title>early_lint_checks (113,912 samples, 0.56%)</title><rect x="81.2310%" y="245" width="0.5594%" height="15" fill="rgb(215,41,42)"/><text x="81.4810%" y="255.50"></text></g><g><title>free_global_ctxt (1,098,832 samples, 5.40%)</title><rect x="81.7903%" y="245" width="5.3958%" height="15" fill="rgb(224,123,36)"/><text x="82.0403%" y="255.50">free_gl..</text></g><g><title>crate_hash (60,911 samples, 0.30%)</title><rect x="88.8245%" y="229" width="0.2991%" height="15" fill="rgb(240,125,3)"/><text x="89.0745%" y="239.50"></text></g><g><title>mir_for_ctfe (47,761 samples, 0.23%)</title><rect x="89.2594%" y="229" width="0.2345%" height="15" fill="rgb(205,98,50)"/><text x="89.5094%" y="239.50"></text></g><g><title>mir_keys (21,200 samples, 0.10%)</title><rect x="89.4939%" y="229" width="0.1041%" height="15" fill="rgb(205,185,37)"/><text x="89.7439%" y="239.50"></text></g><g><title>generate_crate_metadata (517,876 samples, 2.54%)</title><rect x="87.1861%" y="245" width="2.5430%" height="15" fill="rgb(238,207,15)"/><text x="87.4361%" y="255.50">ge..</text></g><g><title>hir_lowering (512,725 samples, 2.52%)</title><rect x="89.7292%" y="245" width="2.5177%" height="15" fill="rgb(213,199,42)"/><text x="89.9792%" y="255.50">hi..</text></g><g><title>link (32,860 samples, 0.16%)</title><rect x="92.2469%" y="245" width="0.1614%" height="15" fill="rgb(235,201,11)"/><text x="92.4969%" y="255.50"></text></g><g><title>parse_crate (634,347 samples, 3.11%)</title><rect x="92.4082%" y="245" width="3.1150%" height="15" fill="rgb(207,46,11)"/><text x="92.6582%" y="255.50">par..</text></g><g><title>prepare_outputs (174,632 samples, 0.86%)</title><rect x="95.5475%" y="245" width="0.8575%" height="15" fill="rgb(241,35,35)"/><text x="95.7975%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (330,573 samples, 1.62%)</title><rect x="96.4050%" y="245" width="1.6233%" height="15" fill="rgb(243,32,47)"/><text x="96.6550%" y="255.50"></text></g><g><title>setup_global_ctxt (92,921 samples, 0.46%)</title><rect x="98.0785%" y="245" width="0.4563%" height="15" fill="rgb(247,202,23)"/><text x="98.3285%" y="255.50"></text></g><g><title>all (20,364,548 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (20,364,548 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (298,393 samples, 1.47%)</title><rect x="98.5347%" y="245" width="1.4653%" height="15" fill="rgb(222,74,54)"/><text x="98.7847%" y="255.50"></text></g></svg></svg>