<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (110,120 samples, 0.13%)</title><rect x="6.7206%" y="101" width="0.1263%" height="15" fill="rgb(227,0,7)"/><text x="6.9706%" y="111.50"></text></g><g><title>adt_drop_tys (135,362 samples, 0.16%)</title><rect x="7.9917%" y="69" width="0.1553%" height="15" fill="rgb(217,0,24)"/><text x="8.2417%" y="79.50"></text></g><g><title>needs_drop_raw (517,736 samples, 0.59%)</title><rect x="7.9194%" y="85" width="0.5938%" height="15" fill="rgb(221,193,54)"/><text x="8.1694%" y="95.50"></text></g><g><title>is_copy_raw (319,334 samples, 0.37%)</title><rect x="8.1470%" y="69" width="0.3663%" height="15" fill="rgb(248,212,6)"/><text x="8.3970%" y="79.50"></text></g><g><title>evaluate_obligation (249,762 samples, 0.29%)</title><rect x="8.2268%" y="53" width="0.2865%" height="15" fill="rgb(208,68,35)"/><text x="8.4768%" y="63.50"></text></g><g><title>resolve_instance (160,654 samples, 0.18%)</title><rect x="8.5133%" y="85" width="0.1843%" height="15" fill="rgb(232,128,0)"/><text x="8.7633%" y="95.50"></text></g><g><title>thir_body (278,902 samples, 0.32%)</title><rect x="8.7157%" y="85" width="0.3199%" height="15" fill="rgb(207,160,47)"/><text x="8.9657%" y="95.50"></text></g><g><title>mir_const (2,634,327 samples, 3.02%)</title><rect x="6.0326%" y="133" width="3.0215%" height="15" fill="rgb(228,23,34)"/><text x="6.2826%" y="143.50">mir..</text></g><g><title>unsafety_check_result (2,208,692 samples, 2.53%)</title><rect x="6.5208%" y="117" width="2.5333%" height="15" fill="rgb(218,30,26)"/><text x="6.7708%" y="127.50">un..</text></g><g><title>mir_built (1,924,351 samples, 2.21%)</title><rect x="6.8469%" y="101" width="2.2072%" height="15" fill="rgb(220,122,19)"/><text x="7.0969%" y="111.50">m..</text></g><g><title>mir_promoted (3,029,502 samples, 3.47%)</title><rect x="5.6584%" y="149" width="3.4748%" height="15" fill="rgb(250,228,42)"/><text x="5.9084%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (125,442 samples, 0.14%)</title><rect x="9.1331%" y="149" width="0.1439%" height="15" fill="rgb(240,193,28)"/><text x="9.3831%" y="159.50"></text></g><g><title>type_op_prove_predicate (692,616 samples, 0.79%)</title><rect x="9.4087%" y="149" width="0.7944%" height="15" fill="rgb(216,20,37)"/><text x="9.6587%" y="159.50"></text></g><g><title>MIR_borrow_checking (8,191,151 samples, 9.40%)</title><rect x="0.8114%" y="181" width="9.3951%" height="15" fill="rgb(206,188,39)"/><text x="1.0614%" y="191.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (8,127,211 samples, 9.32%)</title><rect x="0.8848%" y="165" width="9.3217%" height="15" fill="rgb(217,207,13)"/><text x="1.1348%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (97,701 samples, 0.11%)</title><rect x="10.2065%" y="181" width="0.1121%" height="15" fill="rgb(231,73,38)"/><text x="10.4565%" y="191.50"></text></g><g><title>hir_module_items (105,602 samples, 0.12%)</title><rect x="10.3185%" y="181" width="0.1211%" height="15" fill="rgb(225,20,46)"/><text x="10.5685%" y="191.50"></text></g><g><title>should_inherit_track_caller (138,452 samples, 0.16%)</title><rect x="10.7400%" y="133" width="0.1588%" height="15" fill="rgb(210,31,41)"/><text x="10.9900%" y="143.50"></text></g><g><title>codegen_fn_attrs (261,733 samples, 0.30%)</title><rect x="10.6157%" y="149" width="0.3002%" height="15" fill="rgb(221,200,47)"/><text x="10.8657%" y="159.50"></text></g><g><title>check_mod_attrs (398,344 samples, 0.46%)</title><rect x="10.4591%" y="165" width="0.4569%" height="15" fill="rgb(226,26,5)"/><text x="10.7091%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (207,482 samples, 0.24%)</title><rect x="11.0228%" y="165" width="0.2380%" height="15" fill="rgb(249,33,26)"/><text x="11.2728%" y="175.50"></text></g><g><title>misc_checking_1 (744,458 samples, 0.85%)</title><rect x="10.4400%" y="181" width="0.8539%" height="15" fill="rgb(235,183,28)"/><text x="10.6900%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (157,432 samples, 0.18%)</title><rect x="11.2954%" y="165" width="0.1806%" height="15" fill="rgb(221,5,38)"/><text x="11.5454%" y="175.50"></text></g><g><title>check_mod_liveness (122,942 samples, 0.14%)</title><rect x="11.3349%" y="149" width="0.1410%" height="15" fill="rgb(247,18,42)"/><text x="11.5849%" y="159.50"></text></g><g><title>misc_checking_2 (346,274 samples, 0.40%)</title><rect x="11.2939%" y="181" width="0.3972%" height="15" fill="rgb(241,131,45)"/><text x="11.5439%" y="191.50"></text></g><g><title>match_checking (187,552 samples, 0.22%)</title><rect x="11.4759%" y="165" width="0.2151%" height="15" fill="rgb(249,31,29)"/><text x="11.7259%" y="175.50"></text></g><g><title>check_match (171,002 samples, 0.20%)</title><rect x="11.4949%" y="149" width="0.1961%" height="15" fill="rgb(225,111,53)"/><text x="11.7449%" y="159.50"></text></g><g><title>check_private_in_public (100,391 samples, 0.12%)</title><rect x="11.6989%" y="165" width="0.1151%" height="15" fill="rgb(238,160,17)"/><text x="11.9489%" y="175.50"></text></g><g><title>death_checking (198,093 samples, 0.23%)</title><rect x="11.8141%" y="165" width="0.2272%" height="15" fill="rgb(214,148,48)"/><text x="12.0641%" y="175.50"></text></g><g><title>eval_to_const_value_raw (130,651 samples, 0.15%)</title><rect x="12.8218%" y="133" width="0.1499%" height="15" fill="rgb(232,36,49)"/><text x="13.0718%" y="143.50"></text></g><g><title>eval_to_const_value_raw (123,961 samples, 0.14%)</title><rect x="12.8294%" y="117" width="0.1422%" height="15" fill="rgb(209,103,24)"/><text x="13.0794%" y="127.50"></text></g><g><title>eval_to_allocation_raw (118,951 samples, 0.14%)</title><rect x="12.8352%" y="101" width="0.1364%" height="15" fill="rgb(229,88,8)"/><text x="13.0852%" y="111.50"></text></g><g><title>param_env (96,922 samples, 0.11%)</title><rect x="12.9716%" y="133" width="0.1112%" height="15" fill="rgb(213,181,19)"/><text x="13.2216%" y="143.50"></text></g><g><title>crate_lints (2,002,502 samples, 2.30%)</title><rect x="12.0430%" y="149" width="2.2968%" height="15" fill="rgb(254,191,54)"/><text x="12.2930%" y="159.50">c..</text></g><g><title>type_of (1,077,213 samples, 1.24%)</title><rect x="13.1042%" y="133" width="1.2355%" height="15" fill="rgb(241,83,37)"/><text x="13.3542%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (835,791 samples, 0.96%)</title><rect x="13.3812%" y="117" width="0.9586%" height="15" fill="rgb(233,36,39)"/><text x="13.6312%" y="127.50"></text></g><g><title>lint_checking (2,132,144 samples, 2.45%)</title><rect x="12.0413%" y="165" width="2.4455%" height="15" fill="rgb(226,3,54)"/><text x="12.2913%" y="175.50">li..</text></g><g><title>module_lints (128,182 samples, 0.15%)</title><rect x="14.3398%" y="149" width="0.1470%" height="15" fill="rgb(245,192,40)"/><text x="14.5898%" y="159.50"></text></g><g><title>lint_mod (125,032 samples, 0.14%)</title><rect x="14.3434%" y="133" width="0.1434%" height="15" fill="rgb(238,167,29)"/><text x="14.5934%" y="143.50"></text></g><g><title>privacy_access_levels (116,271 samples, 0.13%)</title><rect x="14.4868%" y="165" width="0.1334%" height="15" fill="rgb(232,182,51)"/><text x="14.7368%" y="175.50"></text></g><g><title>privacy_checking_modules (339,403 samples, 0.39%)</title><rect x="14.6202%" y="165" width="0.3893%" height="15" fill="rgb(231,60,39)"/><text x="14.8702%" y="175.50"></text></g><g><title>check_mod_privacy (337,353 samples, 0.39%)</title><rect x="14.6225%" y="149" width="0.3869%" height="15" fill="rgb(208,69,12)"/><text x="14.8725%" y="159.50"></text></g><g><title>misc_checking_3 (2,902,802 samples, 3.33%)</title><rect x="11.6911%" y="181" width="3.3294%" height="15" fill="rgb(235,93,37)"/><text x="11.9411%" y="191.50">mis..</text></g><g><title>adt_sized_constraint (106,021 samples, 0.12%)</title><rect x="17.6202%" y="85" width="0.1216%" height="15" fill="rgb(213,116,39)"/><text x="17.8702%" y="95.50"></text></g><g><title>adt_sized_constraint (134,971 samples, 0.15%)</title><rect x="17.5990%" y="117" width="0.1548%" height="15" fill="rgb(222,207,29)"/><text x="17.8490%" y="127.50"></text></g><g><title>adt_sized_constraint (132,221 samples, 0.15%)</title><rect x="17.6021%" y="101" width="0.1517%" height="15" fill="rgb(206,96,30)"/><text x="17.8521%" y="111.50"></text></g><g><title>impl_parent (1,611,318 samples, 1.85%)</title><rect x="17.7538%" y="117" width="1.8481%" height="15" fill="rgb(218,138,4)"/><text x="18.0038%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (875,491 samples, 1.00%)</title><rect x="18.5978%" y="101" width="1.0042%" height="15" fill="rgb(250,191,14)"/><text x="18.8478%" y="111.50"></text></g><g><title>impl_trait_ref (3,917,378 samples, 4.49%)</title><rect x="19.6019%" y="117" width="4.4931%" height="15" fill="rgb(239,60,40)"/><text x="19.8519%" y="127.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,428,510 samples, 3.93%)</title><rect x="20.1626%" y="101" width="3.9324%" height="15" fill="rgb(206,27,48)"/><text x="20.4126%" y="111.50">meta..</text></g><g><title>coherent_trait (8,355,522 samples, 9.58%)</title><rect x="15.0781%" y="149" width="9.5836%" height="15" fill="rgb(225,35,8)"/><text x="15.3281%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (8,341,172 samples, 9.57%)</title><rect x="15.0946%" y="133" width="9.5671%" height="15" fill="rgb(250,213,24)"/><text x="15.3446%" y="143.50">specialization..</text></g><g><title>trait_impls_of (452,105 samples, 0.52%)</title><rect x="24.1432%" y="117" width="0.5186%" height="15" fill="rgb(247,123,22)"/><text x="24.3932%" y="127.50"></text></g><g><title>implementations_of_trait (131,652 samples, 0.15%)</title><rect x="24.5107%" y="101" width="0.1510%" height="15" fill="rgb(231,138,38)"/><text x="24.7607%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (95,672 samples, 0.11%)</title><rect x="24.5520%" y="85" width="0.1097%" height="15" fill="rgb(231,145,46)"/><text x="24.8020%" y="95.50"></text></g><g><title>coherence_checking (8,416,904 samples, 9.65%)</title><rect x="15.0609%" y="165" width="9.6540%" height="15" fill="rgb(251,118,11)"/><text x="15.3109%" y="175.50">coherence_chec..</text></g><g><title>associated_items (106,731 samples, 0.12%)</title><rect x="30.9624%" y="117" width="0.1224%" height="15" fill="rgb(217,147,25)"/><text x="31.2124%" y="127.50"></text></g><g><title>adt_def (123,641 samples, 0.14%)</title><rect x="31.3034%" y="69" width="0.1418%" height="15" fill="rgb(247,81,37)"/><text x="31.5534%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (123,211 samples, 0.14%)</title><rect x="31.3039%" y="53" width="0.1413%" height="15" fill="rgb(209,12,38)"/><text x="31.5539%" y="63.50"></text></g><g><title>adt_def (88,361 samples, 0.10%)</title><rect x="31.4662%" y="53" width="0.1013%" height="15" fill="rgb(227,1,9)"/><text x="31.7162%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (87,891 samples, 0.10%)</title><rect x="31.4667%" y="37" width="0.1008%" height="15" fill="rgb(248,47,43)"/><text x="31.7167%" y="47.50"></text></g><g><title>adt_dtorck_constraint (145,792 samples, 0.17%)</title><rect x="31.4521%" y="69" width="0.1672%" height="15" fill="rgb(221,10,30)"/><text x="31.7021%" y="79.50"></text></g><g><title>adt_dtorck_constraint (300,894 samples, 0.35%)</title><rect x="31.2861%" y="85" width="0.3451%" height="15" fill="rgb(210,229,1)"/><text x="31.5361%" y="95.50"></text></g><g><title>adt_dtorck_constraint (362,435 samples, 0.42%)</title><rect x="31.2285%" y="101" width="0.4157%" height="15" fill="rgb(222,148,37)"/><text x="31.4785%" y="111.50"></text></g><g><title>dropck_outlives (482,426 samples, 0.55%)</title><rect x="31.1046%" y="117" width="0.5533%" height="15" fill="rgb(234,67,33)"/><text x="31.3546%" y="127.50"></text></g><g><title>evaluate_obligation (162,465 samples, 0.19%)</title><rect x="31.6579%" y="117" width="0.1863%" height="15" fill="rgb(247,98,35)"/><text x="31.9079%" y="127.50"></text></g><g><title>method_autoderef_steps (274,413 samples, 0.31%)</title><rect x="32.0429%" y="117" width="0.3147%" height="15" fill="rgb(247,138,52)"/><text x="32.2929%" y="127.50"></text></g><g><title>object_safety_violations (122,162 samples, 0.14%)</title><rect x="32.3576%" y="117" width="0.1401%" height="15" fill="rgb(213,79,30)"/><text x="32.6076%" y="127.50"></text></g><g><title>evaluate_obligation (88,241 samples, 0.10%)</title><rect x="33.6466%" y="101" width="0.1012%" height="15" fill="rgb(246,177,23)"/><text x="33.8966%" y="111.50"></text></g><g><title>is_copy_raw (230,472 samples, 0.26%)</title><rect x="33.7723%" y="101" width="0.2643%" height="15" fill="rgb(230,62,27)"/><text x="34.0223%" y="111.50"></text></g><g><title>evaluate_obligation (218,072 samples, 0.25%)</title><rect x="33.7865%" y="85" width="0.2501%" height="15" fill="rgb(216,154,8)"/><text x="34.0365%" y="95.50"></text></g><g><title>trait_impls_of (135,602 samples, 0.16%)</title><rect x="33.8811%" y="69" width="0.1555%" height="15" fill="rgb(244,35,45)"/><text x="34.1311%" y="79.50"></text></g><g><title>typeck (1,336,856 samples, 1.53%)</title><rect x="32.6590%" y="117" width="1.5333%" height="15" fill="rgb(251,115,12)"/><text x="32.9090%" y="127.50"></text></g><g><title>item_bodies_checking (8,259,192 samples, 9.47%)</title><rect x="24.7400%" y="165" width="9.4731%" height="15" fill="rgb(240,54,50)"/><text x="24.9900%" y="175.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (8,257,492 samples, 9.47%)</title><rect x="24.7420%" y="149" width="9.4711%" height="15" fill="rgb(233,84,52)"/><text x="24.9920%" y="159.50">typeck_item_bo..</text></g><g><title>typeck (8,215,861 samples, 9.42%)</title><rect x="24.7897%" y="133" width="9.4234%" height="15" fill="rgb(207,117,47)"/><text x="25.0397%" y="143.50">typeck</text></g><g><title>adt_destructor (311,514 samples, 0.36%)</title><rect x="34.6904%" y="133" width="0.3573%" height="15" fill="rgb(249,43,39)"/><text x="34.9404%" y="143.50"></text></g><g><title>coherent_trait (307,204 samples, 0.35%)</title><rect x="34.6954%" y="117" width="0.3524%" height="15" fill="rgb(209,38,44)"/><text x="34.9454%" y="127.50"></text></g><g><title>specialization_graph_of (305,654 samples, 0.35%)</title><rect x="34.6972%" y="101" width="0.3506%" height="15" fill="rgb(236,212,23)"/><text x="34.9472%" y="111.50"></text></g><g><title>impl_trait_ref (163,292 samples, 0.19%)</title><rect x="34.8605%" y="85" width="0.1873%" height="15" fill="rgb(242,79,21)"/><text x="35.1105%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (141,802 samples, 0.16%)</title><rect x="34.8851%" y="69" width="0.1626%" height="15" fill="rgb(211,96,35)"/><text x="35.1351%" y="79.50"></text></g><g><title>item_types_checking (899,780 samples, 1.03%)</title><rect x="34.2131%" y="165" width="1.0320%" height="15" fill="rgb(253,215,40)"/><text x="34.4631%" y="175.50"></text></g><g><title>check_mod_item_types (897,240 samples, 1.03%)</title><rect x="34.2161%" y="149" width="1.0291%" height="15" fill="rgb(211,81,21)"/><text x="34.4661%" y="159.50"></text></g><g><title>typeck (97,021 samples, 0.11%)</title><rect x="35.1339%" y="133" width="0.1113%" height="15" fill="rgb(208,190,38)"/><text x="35.3839%" y="143.50"></text></g><g><title>fn_sig (181,850 samples, 0.21%)</title><rect x="35.4406%" y="133" width="0.2086%" height="15" fill="rgb(235,213,38)"/><text x="35.6906%" y="143.50"></text></g><g><title>is_late_bound_map (265,083 samples, 0.30%)</title><rect x="35.7417%" y="117" width="0.3040%" height="15" fill="rgb(237,122,38)"/><text x="35.9917%" y="127.50"></text></g><g><title>resolve_lifetimes (257,883 samples, 0.30%)</title><rect x="35.7499%" y="101" width="0.2958%" height="15" fill="rgb(244,218,35)"/><text x="35.9999%" y="111.50"></text></g><g><title>lint_levels (189,102 samples, 0.22%)</title><rect x="35.8288%" y="85" width="0.2169%" height="15" fill="rgb(240,68,47)"/><text x="36.0788%" y="95.50"></text></g><g><title>generics_of (431,996 samples, 0.50%)</title><rect x="35.6492%" y="133" width="0.4955%" height="15" fill="rgb(210,16,53)"/><text x="35.8992%" y="143.50"></text></g><g><title>explicit_predicates_of (239,013 samples, 0.27%)</title><rect x="36.2946%" y="101" width="0.2741%" height="15" fill="rgb(235,124,12)"/><text x="36.5446%" y="111.50"></text></g><g><title>predicates_of (627,258 samples, 0.72%)</title><rect x="36.1777%" y="133" width="0.7194%" height="15" fill="rgb(224,169,11)"/><text x="36.4277%" y="143.50"></text></g><g><title>predicates_defined_on (590,307 samples, 0.68%)</title><rect x="36.2201%" y="117" width="0.6771%" height="15" fill="rgb(250,166,2)"/><text x="36.4701%" y="127.50"></text></g><g><title>inferred_outlives_of (286,313 samples, 0.33%)</title><rect x="36.5688%" y="101" width="0.3284%" height="15" fill="rgb(242,216,29)"/><text x="36.8188%" y="111.50"></text></g><g><title>inferred_outlives_crate (269,173 samples, 0.31%)</title><rect x="36.5884%" y="85" width="0.3087%" height="15" fill="rgb(230,116,27)"/><text x="36.8384%" y="95.50"></text></g><g><title>type_of (149,582 samples, 0.17%)</title><rect x="36.7256%" y="69" width="0.1716%" height="15" fill="rgb(228,99,48)"/><text x="36.9756%" y="79.50"></text></g><g><title>type_collecting (1,647,478 samples, 1.89%)</title><rect x="35.2463%" y="165" width="1.8896%" height="15" fill="rgb(253,11,6)"/><text x="35.4963%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,641,398 samples, 1.88%)</title><rect x="35.2533%" y="149" width="1.8826%" height="15" fill="rgb(247,143,39)"/><text x="35.5033%" y="159.50">c..</text></g><g><title>type_of (123,172 samples, 0.14%)</title><rect x="36.9947%" y="133" width="0.1413%" height="15" fill="rgb(236,97,10)"/><text x="37.2447%" y="143.50"></text></g><g><title>evaluate_obligation (545,079 samples, 0.63%)</title><rect x="38.9133%" y="133" width="0.6252%" height="15" fill="rgb(233,208,19)"/><text x="39.1633%" y="143.50"></text></g><g><title>implied_outlives_bounds (203,843 samples, 0.23%)</title><rect x="39.5662%" y="133" width="0.2338%" height="15" fill="rgb(216,164,2)"/><text x="39.8162%" y="143.50"></text></g><g><title>param_env (160,950 samples, 0.18%)</title><rect x="39.8112%" y="133" width="0.1846%" height="15" fill="rgb(220,129,5)"/><text x="40.0612%" y="143.50"></text></g><g><title>region_scope_tree (115,190 samples, 0.13%)</title><rect x="40.0257%" y="133" width="0.1321%" height="15" fill="rgb(242,17,10)"/><text x="40.2757%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,513,999 samples, 2.88%)</title><rect x="37.2790%" y="149" width="2.8835%" height="15" fill="rgb(242,107,0)"/><text x="37.5290%" y="159.50">ch..</text></g><g><title>param_env (252,182 samples, 0.29%)</title><rect x="41.6325%" y="133" width="0.2892%" height="15" fill="rgb(251,28,31)"/><text x="41.8825%" y="143.50"></text></g><g><title>check_item_well_formed (1,708,848 samples, 1.96%)</title><rect x="40.1625%" y="149" width="1.9600%" height="15" fill="rgb(233,223,10)"/><text x="40.4125%" y="159.50">c..</text></g><g><title>analysis (36,590,506 samples, 41.97%)</title><rect x="0.6545%" y="197" width="41.9684%" height="15" fill="rgb(215,21,27)"/><text x="0.9045%" y="207.50">analysis</text></g><g><title>type_check_crate (24,065,357 samples, 27.60%)</title><rect x="15.0205%" y="181" width="27.6024%" height="15" fill="rgb(232,23,21)"/><text x="15.2705%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,781,403 samples, 5.48%)</title><rect x="37.1387%" y="165" width="5.4842%" height="15" fill="rgb(244,5,23)"/><text x="37.3887%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (436,295 samples, 0.50%)</title><rect x="42.1225%" y="149" width="0.5004%" height="15" fill="rgb(226,81,46)"/><text x="42.3725%" y="159.50"></text></g><g><title>trait_impls_of (91,320 samples, 0.10%)</title><rect x="42.5181%" y="133" width="0.1047%" height="15" fill="rgb(247,70,30)"/><text x="42.7681%" y="143.50"></text></g><g><title>codegen_crate (675,428 samples, 0.77%)</title><rect x="42.6352%" y="197" width="0.7747%" height="15" fill="rgb(212,68,19)"/><text x="42.8852%" y="207.50"></text></g><g><title>AST_validation (197,182 samples, 0.23%)</title><rect x="43.6219%" y="181" width="0.2262%" height="15" fill="rgb(240,187,13)"/><text x="43.8719%" y="191.50"></text></g><g><title>metadata_load_macro (265,134 samples, 0.30%)</title><rect x="71.0362%" y="149" width="0.3041%" height="15" fill="rgb(223,113,26)"/><text x="71.2862%" y="159.50"></text></g><g><title>metadata_register_crate (11,558,959 samples, 13.26%)</title><rect x="71.3403%" y="149" width="13.2578%" height="15" fill="rgb(206,192,2)"/><text x="71.5903%" y="159.50">metadata_register_cr..</text></g><g><title>metadata_register_crate (8,778,647 samples, 10.07%)</title><rect x="74.5292%" y="133" width="10.0689%" height="15" fill="rgb(241,108,4)"/><text x="74.7792%" y="143.50">metadata_regist..</text></g><g><title>metadata_register_crate (95,102 samples, 0.11%)</title><rect x="84.4890%" y="117" width="0.1091%" height="15" fill="rgb(247,173,49)"/><text x="84.7390%" y="127.50"></text></g><g><title>macro_expand_crate (35,454,583 samples, 40.67%)</title><rect x="43.9693%" y="181" width="40.6655%" height="15" fill="rgb(224,114,35)"/><text x="44.2193%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (35,442,523 samples, 40.65%)</title><rect x="43.9831%" y="165" width="40.6517%" height="15" fill="rgb(245,159,27)"/><text x="44.2331%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (333,114 samples, 0.38%)</title><rect x="84.6384%" y="181" width="0.3821%" height="15" fill="rgb(245,172,44)"/><text x="84.8884%" y="191.50"></text></g><g><title>late_resolve_crate (961,121 samples, 1.10%)</title><rect x="85.1462%" y="165" width="1.1024%" height="15" fill="rgb(236,23,11)"/><text x="85.3962%" y="175.50"></text></g><g><title>configure_and_expand (37,411,316 samples, 42.91%)</title><rect x="43.4099%" y="197" width="42.9099%" height="15" fill="rgb(205,117,38)"/><text x="43.6599%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,132,752 samples, 1.30%)</title><rect x="85.0205%" y="181" width="1.2992%" height="15" fill="rgb(237,72,25)"/><text x="85.2705%" y="191.50"></text></g><g><title>drop_ast (132,752 samples, 0.15%)</title><rect x="86.3197%" y="197" width="0.1523%" height="15" fill="rgb(244,70,9)"/><text x="86.5697%" y="207.50"></text></g><g><title>early_lint_checks (373,484 samples, 0.43%)</title><rect x="86.4910%" y="197" width="0.4284%" height="15" fill="rgb(217,125,39)"/><text x="86.7410%" y="207.50"></text></g><g><title>free_global_ctxt (2,627,969 samples, 3.01%)</title><rect x="86.9194%" y="197" width="3.0142%" height="15" fill="rgb(235,36,10)"/><text x="87.1694%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (1,017,042 samples, 1.17%)</title><rect x="89.9336%" y="197" width="1.1665%" height="15" fill="rgb(251,123,47)"/><text x="90.1836%" y="207.50"></text></g><g><title>hir_lowering (1,338,665 samples, 1.54%)</title><rect x="91.1002%" y="197" width="1.5354%" height="15" fill="rgb(221,13,13)"/><text x="91.3502%" y="207.50"></text></g><g><title>parse_crate (5,320,339 samples, 6.10%)</title><rect x="92.6844%" y="197" width="6.1023%" height="15" fill="rgb(238,131,9)"/><text x="92.9344%" y="207.50">parse_cr..</text></g><g><title>prepare_outputs (202,292 samples, 0.23%)</title><rect x="98.7964%" y="197" width="0.2320%" height="15" fill="rgb(211,50,8)"/><text x="99.0464%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (457,995 samples, 0.53%)</title><rect x="99.0284%" y="197" width="0.5253%" height="15" fill="rgb(245,182,24)"/><text x="99.2784%" y="207.50"></text></g><g><title>all (87,185,808 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (87,185,808 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (318,993 samples, 0.37%)</title><rect x="99.6341%" y="197" width="0.3659%" height="15" fill="rgb(213,55,15)"/><text x="99.8841%" y="207.50"></text></g></svg></svg>