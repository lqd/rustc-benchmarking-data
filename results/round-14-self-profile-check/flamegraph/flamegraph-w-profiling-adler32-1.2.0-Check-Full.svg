<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (80,822 samples, 0.15%)</title><rect x="7.4846%" y="165" width="0.1475%" height="15" fill="rgb(227,0,7)"/><text x="7.7346%" y="175.50"></text></g><g><title>item_attrs (130,351 samples, 0.24%)</title><rect x="7.9333%" y="133" width="0.2380%" height="15" fill="rgb(217,0,24)"/><text x="8.1833%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (127,881 samples, 0.23%)</title><rect x="7.9378%" y="117" width="0.2335%" height="15" fill="rgb(221,193,54)"/><text x="8.1878%" y="127.50"></text></g><g><title>codegen_fn_attrs (176,731 samples, 0.32%)</title><rect x="7.8668%" y="149" width="0.3226%" height="15" fill="rgb(248,212,6)"/><text x="8.1168%" y="159.50"></text></g><g><title>is_copy_raw (205,483 samples, 0.38%)</title><rect x="9.6775%" y="133" width="0.3751%" height="15" fill="rgb(208,68,35)"/><text x="9.9275%" y="143.50"></text></g><g><title>evaluate_obligation (193,963 samples, 0.35%)</title><rect x="9.6986%" y="117" width="0.3541%" height="15" fill="rgb(232,128,0)"/><text x="9.9486%" y="127.50"></text></g><g><title>trait_impls_of (130,342 samples, 0.24%)</title><rect x="9.8147%" y="101" width="0.2380%" height="15" fill="rgb(207,160,47)"/><text x="10.0647%" y="111.50"></text></g><g><title>is_copy_raw (84,831 samples, 0.15%)</title><rect x="10.2353%" y="101" width="0.1549%" height="15" fill="rgb(228,23,34)"/><text x="10.4853%" y="111.50"></text></g><g><title>evaluate_obligation (71,811 samples, 0.13%)</title><rect x="10.2590%" y="85" width="0.1311%" height="15" fill="rgb(218,30,26)"/><text x="10.5090%" y="95.50"></text></g><g><title>adt_drop_tys (199,092 samples, 0.36%)</title><rect x="10.1080%" y="117" width="0.3635%" height="15" fill="rgb(220,122,19)"/><text x="10.3580%" y="127.50"></text></g><g><title>needs_drop_raw (448,326 samples, 0.82%)</title><rect x="10.0553%" y="133" width="0.8185%" height="15" fill="rgb(250,228,42)"/><text x="10.3053%" y="143.50"></text></g><g><title>is_copy_raw (220,344 samples, 0.40%)</title><rect x="10.4715%" y="117" width="0.4023%" height="15" fill="rgb(240,193,28)"/><text x="10.7215%" y="127.50"></text></g><g><title>evaluate_obligation (194,154 samples, 0.35%)</title><rect x="10.5193%" y="101" width="0.3544%" height="15" fill="rgb(216,20,37)"/><text x="10.7693%" y="111.50"></text></g><g><title>impl_parent (198,970 samples, 0.36%)</title><rect x="11.8679%" y="101" width="0.3632%" height="15" fill="rgb(206,188,39)"/><text x="12.1179%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (113,640 samples, 0.21%)</title><rect x="12.0237%" y="85" width="0.2075%" height="15" fill="rgb(217,207,13)"/><text x="12.2737%" y="95.50"></text></g><g><title>specialization_graph_of (1,017,821 samples, 1.86%)</title><rect x="11.1336%" y="117" width="1.8581%" height="15" fill="rgb(231,73,38)"/><text x="11.3836%" y="127.50">s..</text></g><g><title>impl_trait_ref (416,617 samples, 0.76%)</title><rect x="12.2312%" y="101" width="0.7606%" height="15" fill="rgb(225,20,46)"/><text x="12.4812%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (330,145 samples, 0.60%)</title><rect x="12.3890%" y="85" width="0.6027%" height="15" fill="rgb(210,31,41)"/><text x="12.6390%" y="95.50"></text></g><g><title>resolve_instance (1,194,464 samples, 2.18%)</title><rect x="10.8737%" y="133" width="2.1806%" height="15" fill="rgb(221,200,47)"/><text x="11.1237%" y="143.50">r..</text></g><g><title>thir_body (327,363 samples, 0.60%)</title><rect x="13.0647%" y="133" width="0.5976%" height="15" fill="rgb(226,26,5)"/><text x="13.3147%" y="143.50"></text></g><g><title>mir_const (3,637,480 samples, 6.64%)</title><rect x="7.0273%" y="181" width="6.6405%" height="15" fill="rgb(249,33,26)"/><text x="7.2773%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (3,306,185 samples, 6.04%)</title><rect x="7.6321%" y="165" width="6.0357%" height="15" fill="rgb(235,183,28)"/><text x="7.8821%" y="175.50">unsafety..</text></g><g><title>mir_built (3,000,932 samples, 5.48%)</title><rect x="8.1894%" y="149" width="5.4785%" height="15" fill="rgb(221,5,38)"/><text x="8.4394%" y="159.50">mir_bui..</text></g><g><title>mir_promoted (3,883,494 samples, 7.09%)</title><rect x="6.6522%" y="197" width="7.0897%" height="15" fill="rgb(247,18,42)"/><text x="6.9022%" y="207.50">mir_promot..</text></g><g><title>type_op_normalize_fn_sig (205,783 samples, 0.38%)</title><rect x="13.8167%" y="197" width="0.3757%" height="15" fill="rgb(241,131,45)"/><text x="14.0667%" y="207.50"></text></g><g><title>normalize_projection_ty (147,552 samples, 0.27%)</title><rect x="13.9230%" y="181" width="0.2694%" height="15" fill="rgb(249,31,29)"/><text x="14.1730%" y="191.50"></text></g><g><title>MIR_borrow_checking (7,449,932 samples, 13.60%)</title><rect x="1.2682%" y="229" width="13.6005%" height="15" fill="rgb(225,111,53)"/><text x="1.5182%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,423,241 samples, 13.55%)</title><rect x="1.3170%" y="213" width="13.5518%" height="15" fill="rgb(238,160,17)"/><text x="1.5670%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (337,695 samples, 0.62%)</title><rect x="14.2522%" y="197" width="0.6165%" height="15" fill="rgb(214,148,48)"/><text x="14.5022%" y="207.50"></text></g><g><title>evaluate_obligation (68,760 samples, 0.13%)</title><rect x="14.7432%" y="181" width="0.1255%" height="15" fill="rgb(232,36,49)"/><text x="14.9932%" y="191.50"></text></g><g><title>MIR_effect_checking (59,191 samples, 0.11%)</title><rect x="14.8687%" y="229" width="0.1081%" height="15" fill="rgb(209,103,24)"/><text x="15.1187%" y="239.50"></text></g><g><title>hir_module_items (86,061 samples, 0.16%)</title><rect x="14.9768%" y="229" width="0.1571%" height="15" fill="rgb(229,88,8)"/><text x="15.2268%" y="239.50"></text></g><g><title>get_lang_items (69,211 samples, 0.13%)</title><rect x="15.4444%" y="181" width="0.1264%" height="15" fill="rgb(213,181,19)"/><text x="15.6944%" y="191.50"></text></g><g><title>should_inherit_track_caller (78,000 samples, 0.14%)</title><rect x="15.5708%" y="181" width="0.1424%" height="15" fill="rgb(254,191,54)"/><text x="15.8208%" y="191.50"></text></g><g><title>codegen_fn_attrs (228,972 samples, 0.42%)</title><rect x="15.3320%" y="197" width="0.4180%" height="15" fill="rgb(241,83,37)"/><text x="15.5820%" y="207.50"></text></g><g><title>check_mod_attrs (316,664 samples, 0.58%)</title><rect x="15.1721%" y="213" width="0.5781%" height="15" fill="rgb(233,36,39)"/><text x="15.4221%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (110,771 samples, 0.20%)</title><rect x="15.8654%" y="213" width="0.2022%" height="15" fill="rgb(226,3,54)"/><text x="16.1154%" y="223.50"></text></g><g><title>misc_checking_1 (532,176 samples, 0.97%)</title><rect x="15.1347%" y="229" width="0.9715%" height="15" fill="rgb(245,192,40)"/><text x="15.3847%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (154,942 samples, 0.28%)</title><rect x="16.1091%" y="213" width="0.2829%" height="15" fill="rgb(238,167,29)"/><text x="16.3591%" y="223.50"></text></g><g><title>check_mod_liveness (121,871 samples, 0.22%)</title><rect x="16.1695%" y="197" width="0.2225%" height="15" fill="rgb(232,182,51)"/><text x="16.4195%" y="207.50"></text></g><g><title>misc_checking_2 (293,603 samples, 0.54%)</title><rect x="16.1062%" y="229" width="0.5360%" height="15" fill="rgb(231,60,39)"/><text x="16.3562%" y="239.50"></text></g><g><title>match_checking (137,071 samples, 0.25%)</title><rect x="16.3919%" y="213" width="0.2502%" height="15" fill="rgb(208,69,12)"/><text x="16.6419%" y="223.50"></text></g><g><title>check_match (128,241 samples, 0.23%)</title><rect x="16.4081%" y="197" width="0.2341%" height="15" fill="rgb(235,93,37)"/><text x="16.6581%" y="207.50"></text></g><g><title>death_checking (170,402 samples, 0.31%)</title><rect x="16.7478%" y="213" width="0.3111%" height="15" fill="rgb(213,116,39)"/><text x="16.9978%" y="223.50"></text></g><g><title>lint_levels (64,750 samples, 0.12%)</title><rect x="16.9407%" y="197" width="0.1182%" height="15" fill="rgb(222,207,29)"/><text x="17.1907%" y="207.50"></text></g><g><title>eval_to_const_value_raw (56,200 samples, 0.10%)</title><rect x="17.8337%" y="181" width="0.1026%" height="15" fill="rgb(206,96,30)"/><text x="18.0837%" y="191.50"></text></g><g><title>trait_impls_of (193,402 samples, 0.35%)</title><rect x="17.9756%" y="181" width="0.3531%" height="15" fill="rgb(218,138,4)"/><text x="18.2256%" y="191.50"></text></g><g><title>crate_lints (2,286,836 samples, 4.17%)</title><rect x="17.0614%" y="197" width="4.1748%" height="15" fill="rgb(250,191,14)"/><text x="17.3114%" y="207.50">crate..</text></g><g><title>type_of (1,590,057 samples, 2.90%)</title><rect x="18.3334%" y="181" width="2.9028%" height="15" fill="rgb(239,60,40)"/><text x="18.5834%" y="191.50">ty..</text></g><g><title>metadata_decode_entry_type_of (1,351,915 samples, 2.47%)</title><rect x="18.7682%" y="165" width="2.4680%" height="15" fill="rgb(206,27,48)"/><text x="19.0182%" y="175.50">me..</text></g><g><title>lint_checking (2,406,447 samples, 4.39%)</title><rect x="17.0589%" y="213" width="4.3932%" height="15" fill="rgb(225,35,8)"/><text x="17.3089%" y="223.50">lint_..</text></g><g><title>module_lints (118,241 samples, 0.22%)</title><rect x="21.2362%" y="197" width="0.2159%" height="15" fill="rgb(250,213,24)"/><text x="21.4862%" y="207.50"></text></g><g><title>lint_mod (115,481 samples, 0.21%)</title><rect x="21.2413%" y="181" width="0.2108%" height="15" fill="rgb(247,123,22)"/><text x="21.4913%" y="191.50"></text></g><g><title>privacy_access_levels (67,781 samples, 0.12%)</title><rect x="21.4521%" y="213" width="0.1237%" height="15" fill="rgb(231,138,38)"/><text x="21.7021%" y="223.50"></text></g><g><title>privacy_checking_modules (168,832 samples, 0.31%)</title><rect x="21.5758%" y="213" width="0.3082%" height="15" fill="rgb(231,145,46)"/><text x="21.8258%" y="223.50"></text></g><g><title>check_mod_privacy (167,492 samples, 0.31%)</title><rect x="21.5783%" y="197" width="0.3058%" height="15" fill="rgb(251,118,11)"/><text x="21.8283%" y="207.50"></text></g><g><title>misc_checking_3 (2,878,802 samples, 5.26%)</title><rect x="16.6422%" y="229" width="5.2555%" height="15" fill="rgb(217,147,25)"/><text x="16.8922%" y="239.50">misc_c..</text></g><g><title>impl_parent (831,849 samples, 1.52%)</title><rect x="23.9014%" y="165" width="1.5186%" height="15" fill="rgb(247,81,37)"/><text x="24.1514%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (588,775 samples, 1.07%)</title><rect x="24.3452%" y="149" width="1.0749%" height="15" fill="rgb(209,12,38)"/><text x="24.5952%" y="159.50"></text></g><g><title>impl_trait_ref (2,692,410 samples, 4.92%)</title><rect x="25.4200%" y="165" width="4.9152%" height="15" fill="rgb(227,1,9)"/><text x="25.6700%" y="175.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,428,207 samples, 4.43%)</title><rect x="25.9023%" y="149" width="4.4329%" height="15" fill="rgb(248,47,43)"/><text x="26.1523%" y="159.50">metad..</text></g><g><title>coherent_trait (4,817,363 samples, 8.79%)</title><rect x="21.9569%" y="197" width="8.7945%" height="15" fill="rgb(221,10,30)"/><text x="22.2069%" y="207.50">coherent_tra..</text></g><g><title>specialization_graph_of (4,810,483 samples, 8.78%)</title><rect x="21.9694%" y="181" width="8.7819%" height="15" fill="rgb(210,229,1)"/><text x="22.2194%" y="191.50">specializati..</text></g><g><title>trait_impls_of (227,933 samples, 0.42%)</title><rect x="30.3352%" y="165" width="0.4161%" height="15" fill="rgb(222,148,37)"/><text x="30.5852%" y="175.50"></text></g><g><title>implementations_of_trait (54,990 samples, 0.10%)</title><rect x="30.6510%" y="149" width="0.1004%" height="15" fill="rgb(234,67,33)"/><text x="30.9010%" y="159.50"></text></g><g><title>coherence_checking (4,857,643 samples, 8.87%)</title><rect x="21.9353%" y="213" width="8.8680%" height="15" fill="rgb(247,98,35)"/><text x="22.1853%" y="223.50">coherence_che..</text></g><g><title>adt_sized_constraint (103,111 samples, 0.19%)</title><rect x="43.2715%" y="165" width="0.1882%" height="15" fill="rgb(247,138,52)"/><text x="43.5215%" y="175.50"></text></g><g><title>associated_item (386,534 samples, 0.71%)</title><rect x="43.6638%" y="149" width="0.7057%" height="15" fill="rgb(213,79,30)"/><text x="43.9138%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (313,693 samples, 0.57%)</title><rect x="43.7967%" y="133" width="0.5727%" height="15" fill="rgb(246,177,23)"/><text x="44.0467%" y="143.50"></text></g><g><title>associated_items (510,074 samples, 0.93%)</title><rect x="43.4720%" y="165" width="0.9312%" height="15" fill="rgb(230,62,27)"/><text x="43.7220%" y="175.50"></text></g><g><title>adt_def (59,901 samples, 0.11%)</title><rect x="44.6477%" y="133" width="0.1094%" height="15" fill="rgb(216,154,8)"/><text x="44.8977%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (58,881 samples, 0.11%)</title><rect x="44.6496%" y="117" width="0.1075%" height="15" fill="rgb(244,35,45)"/><text x="44.8996%" y="127.50"></text></g><g><title>adt_dtorck_constraint (82,561 samples, 0.15%)</title><rect x="44.7864%" y="133" width="0.1507%" height="15" fill="rgb(251,115,12)"/><text x="45.0364%" y="143.50"></text></g><g><title>dropck_outlives (267,982 samples, 0.49%)</title><rect x="44.4843%" y="165" width="0.4892%" height="15" fill="rgb(240,54,50)"/><text x="44.7343%" y="175.50"></text></g><g><title>adt_dtorck_constraint (207,052 samples, 0.38%)</title><rect x="44.5955%" y="149" width="0.3780%" height="15" fill="rgb(233,84,52)"/><text x="44.8455%" y="159.50"></text></g><g><title>mir_const_qualif (159,512 samples, 0.29%)</title><rect x="45.1736%" y="133" width="0.2912%" height="15" fill="rgb(207,117,47)"/><text x="45.4236%" y="143.50"></text></g><g><title>mir_const (127,562 samples, 0.23%)</title><rect x="45.2320%" y="117" width="0.2329%" height="15" fill="rgb(249,43,39)"/><text x="45.4820%" y="127.50"></text></g><g><title>unsafety_check_result (86,550 samples, 0.16%)</title><rect x="45.3068%" y="101" width="0.1580%" height="15" fill="rgb(209,38,44)"/><text x="45.5568%" y="111.50"></text></g><g><title>mir_built (68,140 samples, 0.12%)</title><rect x="45.3404%" y="85" width="0.1244%" height="15" fill="rgb(236,212,23)"/><text x="45.5904%" y="95.50"></text></g><g><title>mir_borrowck (374,205 samples, 0.68%)</title><rect x="45.7142%" y="101" width="0.6831%" height="15" fill="rgb(242,79,21)"/><text x="45.9642%" y="111.50"></text></g><g><title>mir_for_ctfe (516,726 samples, 0.94%)</title><rect x="45.4648%" y="133" width="0.9433%" height="15" fill="rgb(211,96,35)"/><text x="45.7148%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (465,605 samples, 0.85%)</title><rect x="45.5582%" y="117" width="0.8500%" height="15" fill="rgb(253,215,40)"/><text x="45.8082%" y="127.50"></text></g><g><title>mir_borrowck (59,380 samples, 0.11%)</title><rect x="46.6471%" y="37" width="0.1084%" height="15" fill="rgb(211,81,21)"/><text x="46.8971%" y="47.50"></text></g><g><title>eval_to_const_value_raw (183,092 samples, 0.33%)</title><rect x="46.4220%" y="117" width="0.3343%" height="15" fill="rgb(208,190,38)"/><text x="46.6720%" y="127.50"></text></g><g><title>eval_to_const_value_raw (181,532 samples, 0.33%)</title><rect x="46.4248%" y="101" width="0.3314%" height="15" fill="rgb(235,213,38)"/><text x="46.6748%" y="111.50"></text></g><g><title>eval_to_allocation_raw (177,332 samples, 0.32%)</title><rect x="46.4325%" y="85" width="0.3237%" height="15" fill="rgb(237,122,38)"/><text x="46.6825%" y="95.50"></text></g><g><title>mir_for_ctfe (87,741 samples, 0.16%)</title><rect x="46.5960%" y="69" width="0.1602%" height="15" fill="rgb(244,218,35)"/><text x="46.8460%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (81,061 samples, 0.15%)</title><rect x="46.6082%" y="53" width="0.1480%" height="15" fill="rgb(240,68,47)"/><text x="46.8582%" y="63.50"></text></g><g><title>eval_to_const_value_raw (977,890 samples, 1.79%)</title><rect x="44.9735%" y="165" width="1.7852%" height="15" fill="rgb(210,16,53)"/><text x="45.2235%" y="175.50">e..</text></g><g><title>eval_to_allocation_raw (961,240 samples, 1.75%)</title><rect x="45.0039%" y="149" width="1.7548%" height="15" fill="rgb(235,124,12)"/><text x="45.2539%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (191,662 samples, 0.35%)</title><rect x="46.4088%" y="133" width="0.3499%" height="15" fill="rgb(224,169,11)"/><text x="46.6588%" y="143.50"></text></g><g><title>adt_sized_constraint (61,490 samples, 0.11%)</title><rect x="49.6667%" y="149" width="0.1123%" height="15" fill="rgb(250,166,2)"/><text x="49.9167%" y="159.50"></text></g><g><title>generics_of (352,465 samples, 0.64%)</title><rect x="49.7789%" y="149" width="0.6435%" height="15" fill="rgb(242,216,29)"/><text x="50.0289%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (287,085 samples, 0.52%)</title><rect x="49.8983%" y="133" width="0.5241%" height="15" fill="rgb(230,116,27)"/><text x="50.1483%" y="143.50"></text></g><g><title>impl_item_implementor_ids (56,223 samples, 0.10%)</title><rect x="50.4224%" y="149" width="0.1026%" height="15" fill="rgb(228,99,48)"/><text x="50.6724%" y="159.50"></text></g><g><title>impl_trait_ref (391,693 samples, 0.72%)</title><rect x="50.6212%" y="149" width="0.7151%" height="15" fill="rgb(253,11,6)"/><text x="50.8712%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (328,403 samples, 0.60%)</title><rect x="50.7367%" y="133" width="0.5995%" height="15" fill="rgb(247,143,39)"/><text x="50.9867%" y="143.50"></text></g><g><title>opt_def_kind (56,621 samples, 0.10%)</title><rect x="51.5527%" y="133" width="0.1034%" height="15" fill="rgb(236,97,10)"/><text x="51.8027%" y="143.50"></text></g><g><title>explicit_predicates_of (66,270 samples, 0.12%)</title><rect x="51.8007%" y="117" width="0.1210%" height="15" fill="rgb(233,208,19)"/><text x="52.0507%" y="127.50"></text></g><g><title>predicates_of (341,924 samples, 0.62%)</title><rect x="51.4036%" y="149" width="0.6242%" height="15" fill="rgb(216,164,2)"/><text x="51.6536%" y="159.50"></text></g><g><title>predicates_defined_on (203,631 samples, 0.37%)</title><rect x="51.6561%" y="133" width="0.3717%" height="15" fill="rgb(220,129,5)"/><text x="51.9061%" y="143.50"></text></g><g><title>inferred_outlives_of (58,131 samples, 0.11%)</title><rect x="51.9217%" y="117" width="0.1061%" height="15" fill="rgb(242,17,10)"/><text x="52.1717%" y="127.50"></text></g><g><title>specializes (944,033 samples, 1.72%)</title><rect x="52.0278%" y="149" width="1.7234%" height="15" fill="rgb(242,107,0)"/><text x="52.2778%" y="159.50"></text></g><g><title>param_env (603,689 samples, 1.10%)</title><rect x="52.6491%" y="133" width="1.1021%" height="15" fill="rgb(251,28,31)"/><text x="52.8991%" y="143.50"></text></g><g><title>def_span (324,446 samples, 0.59%)</title><rect x="53.1589%" y="117" width="0.5923%" height="15" fill="rgb(233,223,10)"/><text x="53.4089%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (302,046 samples, 0.55%)</title><rect x="53.1998%" y="101" width="0.5514%" height="15" fill="rgb(215,21,27)"/><text x="53.4498%" y="111.50"></text></g><g><title>trait_impls_of (741,567 samples, 1.35%)</title><rect x="53.7890%" y="149" width="1.3538%" height="15" fill="rgb(232,23,21)"/><text x="54.0390%" y="159.50"></text></g><g><title>implementations_of_trait (277,793 samples, 0.51%)</title><rect x="54.6357%" y="133" width="0.5071%" height="15" fill="rgb(244,5,23)"/><text x="54.8857%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (206,902 samples, 0.38%)</title><rect x="54.7651%" y="117" width="0.3777%" height="15" fill="rgb(226,81,46)"/><text x="55.0151%" y="127.50"></text></g><g><title>evaluate_obligation (4,607,633 samples, 8.41%)</title><rect x="46.7587%" y="165" width="8.4116%" height="15" fill="rgb(247,70,30)"/><text x="47.0087%" y="175.50">evaluate_obl..</text></g><g><title>fn_sig (87,280 samples, 0.16%)</title><rect x="55.2193%" y="165" width="0.1593%" height="15" fill="rgb(212,68,19)"/><text x="55.4693%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (77,450 samples, 0.14%)</title><rect x="55.2372%" y="149" width="0.1414%" height="15" fill="rgb(240,187,13)"/><text x="55.4872%" y="159.50"></text></g><g><title>generics_of (107,333 samples, 0.20%)</title><rect x="55.3786%" y="165" width="0.1959%" height="15" fill="rgb(223,113,26)"/><text x="55.6286%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (76,953 samples, 0.14%)</title><rect x="55.4341%" y="149" width="0.1405%" height="15" fill="rgb(206,192,2)"/><text x="55.6841%" y="159.50"></text></g><g><title>associated_item (57,521 samples, 0.11%)</title><rect x="55.6540%" y="133" width="0.1050%" height="15" fill="rgb(241,108,4)"/><text x="55.9040%" y="143.50"></text></g><g><title>impl_item_implementor_ids (119,903 samples, 0.22%)</title><rect x="55.5746%" y="165" width="0.2189%" height="15" fill="rgb(247,173,49)"/><text x="55.8246%" y="175.50"></text></g><g><title>associated_items (107,033 samples, 0.20%)</title><rect x="55.5981%" y="149" width="0.1954%" height="15" fill="rgb(224,114,35)"/><text x="55.8481%" y="159.50"></text></g><g><title>impl_trait_ref (58,151 samples, 0.11%)</title><rect x="55.8035%" y="165" width="0.1062%" height="15" fill="rgb(245,159,27)"/><text x="56.0535%" y="175.50"></text></g><g><title>item_attrs (57,200 samples, 0.10%)</title><rect x="55.9257%" y="165" width="0.1044%" height="15" fill="rgb(245,172,44)"/><text x="56.1757%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (54,990 samples, 0.10%)</title><rect x="55.9297%" y="149" width="0.1004%" height="15" fill="rgb(236,23,11)"/><text x="56.1797%" y="159.50"></text></g><g><title>method_autoderef_steps (91,131 samples, 0.17%)</title><rect x="56.0923%" y="165" width="0.1664%" height="15" fill="rgb(205,117,38)"/><text x="56.3423%" y="175.50"></text></g><g><title>evaluate_obligation (56,700 samples, 0.10%)</title><rect x="56.1551%" y="149" width="0.1035%" height="15" fill="rgb(237,72,25)"/><text x="56.4051%" y="159.50"></text></g><g><title>explicit_predicates_of (77,701 samples, 0.14%)</title><rect x="57.0352%" y="133" width="0.1418%" height="15" fill="rgb(244,70,9)"/><text x="57.2852%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (58,881 samples, 0.11%)</title><rect x="57.0696%" y="117" width="0.1075%" height="15" fill="rgb(217,125,39)"/><text x="57.3196%" y="127.50"></text></g><g><title>predicates_of (491,205 samples, 0.90%)</title><rect x="56.3441%" y="165" width="0.8967%" height="15" fill="rgb(235,36,10)"/><text x="56.5941%" y="175.50"></text></g><g><title>predicates_defined_on (402,404 samples, 0.73%)</title><rect x="56.5062%" y="149" width="0.7346%" height="15" fill="rgb(251,123,47)"/><text x="56.7562%" y="159.50"></text></g><g><title>item_bodies_checking (14,605,641 samples, 26.66%)</title><rect x="30.8248%" y="213" width="26.6638%" height="15" fill="rgb(221,13,13)"/><text x="31.0748%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (14,603,441 samples, 26.66%)</title><rect x="30.8288%" y="197" width="26.6598%" height="15" fill="rgb(238,131,9)"/><text x="31.0788%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (14,582,651 samples, 26.62%)</title><rect x="30.8668%" y="181" width="26.6219%" height="15" fill="rgb(211,50,8)"/><text x="31.1168%" y="191.50">typeck</text></g><g><title>impl_trait_ref (149,201 samples, 0.27%)</title><rect x="57.8931%" y="133" width="0.2724%" height="15" fill="rgb(245,182,24)"/><text x="58.1431%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (130,451 samples, 0.24%)</title><rect x="57.9273%" y="117" width="0.2381%" height="15" fill="rgb(242,14,37)"/><text x="58.1773%" y="127.50"></text></g><g><title>adt_destructor (314,094 samples, 0.57%)</title><rect x="57.6559%" y="181" width="0.5734%" height="15" fill="rgb(246,228,12)"/><text x="57.9059%" y="191.50"></text></g><g><title>coherent_trait (311,184 samples, 0.57%)</title><rect x="57.6612%" y="165" width="0.5681%" height="15" fill="rgb(213,55,15)"/><text x="57.9112%" y="175.50"></text></g><g><title>specialization_graph_of (309,774 samples, 0.57%)</title><rect x="57.6638%" y="149" width="0.5655%" height="15" fill="rgb(209,9,3)"/><text x="57.9138%" y="159.50"></text></g><g><title>item_types_checking (531,886 samples, 0.97%)</title><rect x="57.4887%" y="213" width="0.9710%" height="15" fill="rgb(230,59,30)"/><text x="57.7387%" y="223.50"></text></g><g><title>check_mod_item_types (530,146 samples, 0.97%)</title><rect x="57.4918%" y="197" width="0.9678%" height="15" fill="rgb(209,121,21)"/><text x="57.7418%" y="207.50"></text></g><g><title>typeck (95,771 samples, 0.17%)</title><rect x="58.2848%" y="181" width="0.1748%" height="15" fill="rgb(220,109,13)"/><text x="58.5348%" y="191.50"></text></g><g><title>fn_sig (116,140 samples, 0.21%)</title><rect x="58.6085%" y="181" width="0.2120%" height="15" fill="rgb(232,18,1)"/><text x="58.8585%" y="191.50"></text></g><g><title>named_region_map (61,441 samples, 0.11%)</title><rect x="58.8848%" y="165" width="0.1122%" height="15" fill="rgb(215,41,42)"/><text x="59.1348%" y="175.50"></text></g><g><title>generics_of (103,652 samples, 0.19%)</title><rect x="58.8205%" y="181" width="0.1892%" height="15" fill="rgb(224,123,36)"/><text x="59.0705%" y="191.50"></text></g><g><title>explicit_predicates_of (68,850 samples, 0.13%)</title><rect x="59.0929%" y="149" width="0.1257%" height="15" fill="rgb(240,125,3)"/><text x="59.3429%" y="159.50"></text></g><g><title>predicates_of (135,201 samples, 0.25%)</title><rect x="59.0348%" y="181" width="0.2468%" height="15" fill="rgb(205,98,50)"/><text x="59.2848%" y="191.50"></text></g><g><title>predicates_defined_on (124,641 samples, 0.23%)</title><rect x="59.0541%" y="165" width="0.2275%" height="15" fill="rgb(205,185,37)"/><text x="59.3041%" y="175.50"></text></g><g><title>type_collecting (528,985 samples, 0.97%)</title><rect x="58.4606%" y="213" width="0.9657%" height="15" fill="rgb(238,207,15)"/><text x="58.7106%" y="223.50"></text></g><g><title>collect_mod_item_types (522,125 samples, 0.95%)</title><rect x="58.4731%" y="197" width="0.9532%" height="15" fill="rgb(213,199,42)"/><text x="58.7231%" y="207.50"></text></g><g><title>type_of (79,251 samples, 0.14%)</title><rect x="59.2816%" y="181" width="0.1447%" height="15" fill="rgb(235,201,11)"/><text x="59.5316%" y="191.50"></text></g><g><title>evaluate_obligation (97,301 samples, 0.18%)</title><rect x="59.8440%" y="181" width="0.1776%" height="15" fill="rgb(207,46,11)"/><text x="60.0940%" y="191.50"></text></g><g><title>check_impl_item_well_formed (422,644 samples, 0.77%)</title><rect x="59.5071%" y="197" width="0.7716%" height="15" fill="rgb(241,35,35)"/><text x="59.7571%" y="207.50"></text></g><g><title>region_scope_tree (93,852 samples, 0.17%)</title><rect x="60.1073%" y="181" width="0.1713%" height="15" fill="rgb(243,32,47)"/><text x="60.3573%" y="191.50"></text></g><g><title>adt_sized_constraint (55,950 samples, 0.10%)</title><rect x="61.2460%" y="149" width="0.1021%" height="15" fill="rgb(247,202,23)"/><text x="61.4960%" y="159.50"></text></g><g><title>adt_sized_constraint (85,441 samples, 0.16%)</title><rect x="61.1979%" y="165" width="0.1560%" height="15" fill="rgb(219,102,11)"/><text x="61.4479%" y="175.50"></text></g><g><title>evaluate_obligation (183,572 samples, 0.34%)</title><rect x="61.0205%" y="181" width="0.3351%" height="15" fill="rgb(243,110,44)"/><text x="61.2705%" y="191.50"></text></g><g><title>implied_outlives_bounds (68,572 samples, 0.13%)</title><rect x="61.3581%" y="181" width="0.1252%" height="15" fill="rgb(222,74,54)"/><text x="61.6081%" y="191.50"></text></g><g><title>param_env (145,243 samples, 0.27%)</title><rect x="61.4833%" y="181" width="0.2652%" height="15" fill="rgb(216,99,12)"/><text x="61.7333%" y="191.50"></text></g><g><title>analysis (33,403,780 samples, 60.98%)</title><rect x="1.0398%" y="245" width="60.9815%" height="15" fill="rgb(226,22,26)"/><text x="1.2898%" y="255.50">analysis</text></g><g><title>type_check_crate (21,978,443 samples, 40.12%)</title><rect x="21.8977%" y="229" width="40.1235%" height="15" fill="rgb(217,163,10)"/><text x="22.1477%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,419,876 samples, 2.59%)</title><rect x="59.4291%" y="213" width="2.5921%" height="15" fill="rgb(213,25,53)"/><text x="59.6791%" y="223.50">wf..</text></g><g><title>check_item_well_formed (954,532 samples, 1.74%)</title><rect x="60.2786%" y="197" width="1.7426%" height="15" fill="rgb(252,105,26)"/><text x="60.5286%" y="207.50"></text></g><g><title>codegen_crate (348,024 samples, 0.64%)</title><rect x="62.0411%" y="245" width="0.6353%" height="15" fill="rgb(220,39,43)"/><text x="62.2911%" y="255.50"></text></g><g><title>AST_validation (61,271 samples, 0.11%)</title><rect x="63.0676%" y="229" width="0.1119%" height="15" fill="rgb(229,68,48)"/><text x="63.3176%" y="239.50"></text></g><g><title>crate_injection (89,221 samples, 0.16%)</title><rect x="63.2143%" y="229" width="0.1629%" height="15" fill="rgb(252,8,32)"/><text x="63.4643%" y="239.50"></text></g><g><title>metadata_load_macro (59,830 samples, 0.11%)</title><rect x="77.7551%" y="197" width="0.1092%" height="15" fill="rgb(223,20,43)"/><text x="78.0051%" y="207.50"></text></g><g><title>macro_expand_crate (10,573,856 samples, 19.30%)</title><rect x="63.3771%" y="229" width="19.3035%" height="15" fill="rgb(229,81,49)"/><text x="63.6271%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (10,560,596 samples, 19.28%)</title><rect x="63.4014%" y="213" width="19.2793%" height="15" fill="rgb(236,28,36)"/><text x="63.6514%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,638,199 samples, 4.82%)</title><rect x="77.8644%" y="197" width="4.8163%" height="15" fill="rgb(249,185,26)"/><text x="78.1144%" y="207.50">metada..</text></g><g><title>metadata_register_crate (944,700 samples, 1.72%)</title><rect x="80.9560%" y="181" width="1.7246%" height="15" fill="rgb(249,174,33)"/><text x="81.2060%" y="191.50"></text></g><g><title>metadata_register_crate (78,380 samples, 0.14%)</title><rect x="82.5375%" y="165" width="0.1431%" height="15" fill="rgb(233,201,37)"/><text x="82.7875%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (225,392 samples, 0.41%)</title><rect x="82.6871%" y="229" width="0.4115%" height="15" fill="rgb(221,78,26)"/><text x="82.9371%" y="239.50"></text></g><g><title>late_resolve_crate (796,149 samples, 1.45%)</title><rect x="83.1818%" y="213" width="1.4534%" height="15" fill="rgb(250,127,30)"/><text x="83.4318%" y="223.50"></text></g><g><title>configure_and_expand (12,069,523 samples, 22.03%)</title><rect x="62.6765%" y="245" width="22.0339%" height="15" fill="rgb(230,49,44)"/><text x="62.9265%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (882,940 samples, 1.61%)</title><rect x="83.0985%" y="229" width="1.6119%" height="15" fill="rgb(229,67,23)"/><text x="83.3485%" y="239.50"></text></g><g><title>drop_ast (61,231 samples, 0.11%)</title><rect x="84.7104%" y="245" width="0.1118%" height="15" fill="rgb(249,83,47)"/><text x="84.9604%" y="255.50"></text></g><g><title>early_lint_checks (120,431 samples, 0.22%)</title><rect x="84.8472%" y="245" width="0.2199%" height="15" fill="rgb(215,43,3)"/><text x="85.0972%" y="255.50"></text></g><g><title>free_global_ctxt (2,868,602 samples, 5.24%)</title><rect x="85.0671%" y="245" width="5.2369%" height="15" fill="rgb(238,154,13)"/><text x="85.3171%" y="255.50">free_g..</text></g><g><title>crate_hash (67,521 samples, 0.12%)</title><rect x="90.8203%" y="229" width="0.1233%" height="15" fill="rgb(219,56,2)"/><text x="91.0703%" y="239.50"></text></g><g><title>generate_crate_metadata (401,384 samples, 0.73%)</title><rect x="90.3040%" y="245" width="0.7328%" height="15" fill="rgb(233,0,4)"/><text x="90.5540%" y="255.50"></text></g><g><title>hir_lowering (652,458 samples, 1.19%)</title><rect x="91.0367%" y="245" width="1.1911%" height="15" fill="rgb(235,30,7)"/><text x="91.2867%" y="255.50"></text></g><g><title>parse_crate (3,151,455 samples, 5.75%)</title><rect x="92.3071%" y="245" width="5.7533%" height="15" fill="rgb(250,79,13)"/><text x="92.5571%" y="255.50">parse_c..</text></g><g><title>prepare_outputs (166,562 samples, 0.30%)</title><rect x="98.0787%" y="245" width="0.3041%" height="15" fill="rgb(211,146,34)"/><text x="98.3287%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (509,876 samples, 0.93%)</title><rect x="98.3828%" y="245" width="0.9308%" height="15" fill="rgb(228,22,38)"/><text x="98.6328%" y="255.50"></text></g><g><title>setup_global_ctxt (77,051 samples, 0.14%)</title><rect x="99.3328%" y="245" width="0.1407%" height="15" fill="rgb(235,168,5)"/><text x="99.5828%" y="255.50"></text></g><g><title>all (54,776,945 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (54,776,945 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (288,433 samples, 0.53%)</title><rect x="99.4734%" y="245" width="0.5266%" height="15" fill="rgb(223,4,10)"/><text x="99.7234%" y="255.50"></text></g></svg></svg>