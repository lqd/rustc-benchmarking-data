<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (34,587,862 samples, 0.21%)</title><rect x="16.6538%" y="117" width="0.2064%" height="15" fill="rgb(227,0,7)"/><text x="16.9038%" y="127.50"></text></g><g><title>is_copy_raw (20,310,099 samples, 0.12%)</title><rect x="23.4176%" y="37" width="0.1212%" height="15" fill="rgb(217,0,24)"/><text x="23.6676%" y="47.50"></text></g><g><title>needs_drop_raw (25,706,400 samples, 0.15%)</title><rect x="23.3916%" y="53" width="0.1534%" height="15" fill="rgb(221,193,54)"/><text x="23.6416%" y="63.50"></text></g><g><title>resolve_instance (16,896,267 samples, 0.10%)</title><rect x="23.5452%" y="53" width="0.1008%" height="15" fill="rgb(248,212,6)"/><text x="23.7952%" y="63.50"></text></g><g><title>thir_body (143,864,199 samples, 0.86%)</title><rect x="23.7159%" y="53" width="0.8586%" height="15" fill="rgb(208,68,35)"/><text x="23.9659%" y="63.50"></text></g><g><title>mir_const (1,117,379,206 samples, 6.67%)</title><rect x="17.9552%" y="101" width="6.6684%" height="15" fill="rgb(232,128,0)"/><text x="18.2052%" y="111.50">mir_const</text></g><g><title>unsafety_check_result (907,569,207 samples, 5.42%)</title><rect x="19.2074%" y="85" width="5.4163%" height="15" fill="rgb(207,160,47)"/><text x="19.4574%" y="95.50">unsafet..</text></g><g><title>mir_built (812,602,376 samples, 4.85%)</title><rect x="19.7741%" y="69" width="4.8495%" height="15" fill="rgb(228,23,34)"/><text x="20.0241%" y="79.50">mir_bu..</text></g><g><title>mir_const_qualif (31,513,897 samples, 0.19%)</title><rect x="24.6236%" y="101" width="0.1881%" height="15" fill="rgb(218,30,26)"/><text x="24.8736%" y="111.50"></text></g><g><title>mir_promoted (1,331,653,173 samples, 7.95%)</title><rect x="16.8646%" y="117" width="7.9472%" height="15" fill="rgb(220,122,19)"/><text x="17.1146%" y="127.50">mir_promoted</text></g><g><title>type_op_prove_predicate (52,524,145 samples, 0.31%)</title><rect x="24.9904%" y="117" width="0.3135%" height="15" fill="rgb(250,228,42)"/><text x="25.2404%" y="127.50"></text></g><g><title>MIR_borrow_checking (4,110,160,991 samples, 24.53%)</title><rect x="0.7752%" y="149" width="24.5290%" height="15" fill="rgb(240,193,28)"/><text x="1.0252%" y="159.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (4,021,557,229 samples, 24.00%)</title><rect x="1.3040%" y="133" width="24.0002%" height="15" fill="rgb(216,20,37)"/><text x="1.5540%" y="143.50">mir_borrowck</text></g><g><title>MIR_effect_checking (31,131,401 samples, 0.19%)</title><rect x="25.3042%" y="149" width="0.1858%" height="15" fill="rgb(206,188,39)"/><text x="25.5542%" y="159.50"></text></g><g><title>hir_module_items (45,420,202 samples, 0.27%)</title><rect x="25.4900%" y="149" width="0.2711%" height="15" fill="rgb(217,207,13)"/><text x="25.7400%" y="159.50"></text></g><g><title>get_lang_items (25,273,536 samples, 0.15%)</title><rect x="26.4378%" y="101" width="0.1508%" height="15" fill="rgb(231,73,38)"/><text x="26.6878%" y="111.50"></text></g><g><title>associated_item (18,894,794 samples, 0.11%)</title><rect x="26.7351%" y="85" width="0.1128%" height="15" fill="rgb(225,20,46)"/><text x="26.9851%" y="95.50"></text></g><g><title>should_inherit_track_caller (46,983,641 samples, 0.28%)</title><rect x="26.5886%" y="101" width="0.2804%" height="15" fill="rgb(210,31,41)"/><text x="26.8386%" y="111.50"></text></g><g><title>codegen_fn_attrs (106,051,667 samples, 0.63%)</title><rect x="26.2363%" y="117" width="0.6329%" height="15" fill="rgb(221,200,47)"/><text x="26.4863%" y="127.50"></text></g><g><title>check_mod_attrs (185,577,261 samples, 1.11%)</title><rect x="25.7617%" y="133" width="1.1075%" height="15" fill="rgb(226,26,5)"/><text x="26.0117%" y="143.50"></text></g><g><title>check_mod_const_bodies (69,118,212 samples, 0.41%)</title><rect x="26.8692%" y="133" width="0.4125%" height="15" fill="rgb(249,33,26)"/><text x="27.1192%" y="143.50"></text></g><g><title>is_const_fn_raw (17,052,702 samples, 0.10%)</title><rect x="27.1800%" y="117" width="0.1018%" height="15" fill="rgb(235,183,28)"/><text x="27.4300%" y="127.50"></text></g><g><title>check_mod_loops (27,325,947 samples, 0.16%)</title><rect x="27.2817%" y="133" width="0.1631%" height="15" fill="rgb(221,5,38)"/><text x="27.5317%" y="143.50"></text></g><g><title>lookup_deprecation_entry (43,567,922 samples, 0.26%)</title><rect x="27.7036%" y="117" width="0.2600%" height="15" fill="rgb(247,18,42)"/><text x="27.9536%" y="127.50"></text></g><g><title>stability_index (43,320,609 samples, 0.26%)</title><rect x="27.7051%" y="101" width="0.2585%" height="15" fill="rgb(241,131,45)"/><text x="27.9551%" y="111.50"></text></g><g><title>check_mod_unstable_api_usage (77,049,109 samples, 0.46%)</title><rect x="27.5053%" y="133" width="0.4598%" height="15" fill="rgb(249,31,29)"/><text x="27.7553%" y="143.50"></text></g><g><title>misc_checking_1 (371,312,859 samples, 2.22%)</title><rect x="25.7610%" y="149" width="2.2160%" height="15" fill="rgb(225,111,53)"/><text x="26.0110%" y="159.50">m..</text></g><g><title>check_mod_intrinsics (33,632,168 samples, 0.20%)</title><rect x="27.9774%" y="117" width="0.2007%" height="15" fill="rgb(238,160,17)"/><text x="28.2274%" y="127.50"></text></g><g><title>liveness_and_intrinsic_checking (127,268,486 samples, 0.76%)</title><rect x="27.9770%" y="133" width="0.7595%" height="15" fill="rgb(214,148,48)"/><text x="28.2270%" y="143.50"></text></g><g><title>check_mod_liveness (93,579,347 samples, 0.56%)</title><rect x="28.1781%" y="117" width="0.5585%" height="15" fill="rgb(232,36,49)"/><text x="28.4281%" y="127.50"></text></g><g><title>misc_checking_2 (291,584,850 samples, 1.74%)</title><rect x="27.9770%" y="149" width="1.7401%" height="15" fill="rgb(209,103,24)"/><text x="28.2270%" y="159.50"></text></g><g><title>match_checking (164,312,214 samples, 0.98%)</title><rect x="28.7366%" y="133" width="0.9806%" height="15" fill="rgb(229,88,8)"/><text x="28.9866%" y="143.50"></text></g><g><title>check_match (141,496,693 samples, 0.84%)</title><rect x="28.8727%" y="117" width="0.8444%" height="15" fill="rgb(213,181,19)"/><text x="29.1227%" y="127.50"></text></g><g><title>check_private_in_public (105,498,310 samples, 0.63%)</title><rect x="29.7173%" y="133" width="0.6296%" height="15" fill="rgb(254,191,54)"/><text x="29.9673%" y="143.50"></text></g><g><title>death_checking (77,587,005 samples, 0.46%)</title><rect x="30.3469%" y="133" width="0.4630%" height="15" fill="rgb(241,83,37)"/><text x="30.5969%" y="143.50"></text></g><g><title>crate_lints (102,696,208 samples, 0.61%)</title><rect x="30.8100%" y="117" width="0.6129%" height="15" fill="rgb(233,36,39)"/><text x="31.0600%" y="127.50"></text></g><g><title>lint_checking (223,350,859 samples, 1.33%)</title><rect x="30.8100%" y="133" width="1.3329%" height="15" fill="rgb(226,3,54)"/><text x="31.0600%" y="143.50"></text></g><g><title>module_lints (120,648,481 samples, 0.72%)</title><rect x="31.4229%" y="117" width="0.7200%" height="15" fill="rgb(245,192,40)"/><text x="31.6729%" y="127.50"></text></g><g><title>lint_mod (120,603,531 samples, 0.72%)</title><rect x="31.4231%" y="101" width="0.7197%" height="15" fill="rgb(238,167,29)"/><text x="31.6731%" y="111.50"></text></g><g><title>privacy_access_levels (230,897,795 samples, 1.38%)</title><rect x="32.1429%" y="133" width="1.3780%" height="15" fill="rgb(232,182,51)"/><text x="32.3929%" y="143.50"></text></g><g><title>privacy_checking_modules (247,630,333 samples, 1.48%)</title><rect x="33.5209%" y="133" width="1.4778%" height="15" fill="rgb(231,60,39)"/><text x="33.7709%" y="143.50"></text></g><g><title>check_mod_privacy (247,600,771 samples, 1.48%)</title><rect x="33.5210%" y="117" width="1.4777%" height="15" fill="rgb(208,69,12)"/><text x="33.7710%" y="127.50"></text></g><g><title>misc_checking_3 (887,007,435 samples, 5.29%)</title><rect x="29.7171%" y="149" width="5.2936%" height="15" fill="rgb(235,93,37)"/><text x="29.9671%" y="159.50">misc_c..</text></g><g><title>is_mir_available (26,231,326 samples, 0.16%)</title><rect x="35.2079%" y="53" width="0.1565%" height="15" fill="rgb(213,116,39)"/><text x="35.4579%" y="63.50"></text></g><g><title>mir_keys (26,202,796 samples, 0.16%)</title><rect x="35.2081%" y="37" width="0.1564%" height="15" fill="rgb(222,207,29)"/><text x="35.4581%" y="47.50"></text></g><g><title>eval_to_const_value_raw (28,062,447 samples, 0.17%)</title><rect x="35.2074%" y="101" width="0.1675%" height="15" fill="rgb(206,96,30)"/><text x="35.4574%" y="111.50"></text></g><g><title>eval_to_const_value_raw (28,048,467 samples, 0.17%)</title><rect x="35.2075%" y="85" width="0.1674%" height="15" fill="rgb(218,138,4)"/><text x="35.4575%" y="95.50"></text></g><g><title>eval_to_allocation_raw (28,045,717 samples, 0.17%)</title><rect x="35.2075%" y="69" width="0.1674%" height="15" fill="rgb(250,191,14)"/><text x="35.4575%" y="79.50"></text></g><g><title>coherent_trait (531,524,387 samples, 3.17%)</title><rect x="35.2013%" y="117" width="3.1721%" height="15" fill="rgb(239,60,40)"/><text x="35.4513%" y="127.50">coh..</text></g><g><title>specialization_graph_of (501,488,868 samples, 2.99%)</title><rect x="35.3806%" y="101" width="2.9928%" height="15" fill="rgb(206,27,48)"/><text x="35.6306%" y="111.50">spe..</text></g><g><title>coherence_checking (538,165,991 samples, 3.21%)</title><rect x="35.2008%" y="133" width="3.2117%" height="15" fill="rgb(225,35,8)"/><text x="35.4508%" y="143.50">coh..</text></g><g><title>impl_wf_inference (19,097,836 samples, 0.11%)</title><rect x="38.4126%" y="133" width="0.1140%" height="15" fill="rgb(250,213,24)"/><text x="38.6626%" y="143.50"></text></g><g><title>check_mod_impl_wf (19,072,456 samples, 0.11%)</title><rect x="38.4127%" y="117" width="0.1138%" height="15" fill="rgb(247,123,22)"/><text x="38.6627%" y="127.50"></text></g><g><title>evaluate_obligation (25,286,897 samples, 0.15%)</title><rect x="61.5977%" y="85" width="0.1509%" height="15" fill="rgb(231,138,38)"/><text x="61.8477%" y="95.50"></text></g><g><title>typeck (265,965,250 samples, 1.59%)</title><rect x="61.8417%" y="85" width="1.5873%" height="15" fill="rgb(231,145,46)"/><text x="62.0917%" y="95.50"></text></g><g><title>item_bodies_checking (4,186,213,112 samples, 24.98%)</title><rect x="38.5265%" y="133" width="24.9829%" height="15" fill="rgb(251,118,11)"/><text x="38.7765%" y="143.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (4,186,206,842 samples, 24.98%)</title><rect x="38.5266%" y="117" width="24.9828%" height="15" fill="rgb(217,147,25)"/><text x="38.7766%" y="127.50">typeck_item_bodies</text></g><g><title>typeck (4,114,074,334 samples, 24.55%)</title><rect x="38.9571%" y="101" width="24.5523%" height="15" fill="rgb(247,81,37)"/><text x="39.2071%" y="111.50">typeck</text></g><g><title>item_types_checking (584,210,020 samples, 3.49%)</title><rect x="63.5094%" y="133" width="3.4865%" height="15" fill="rgb(209,12,38)"/><text x="63.7594%" y="143.50">ite..</text></g><g><title>check_mod_item_types (584,158,770 samples, 3.49%)</title><rect x="63.5097%" y="117" width="3.4862%" height="15" fill="rgb(227,1,9)"/><text x="63.7597%" y="127.50">che..</text></g><g><title>fn_sig (106,951,898 samples, 0.64%)</title><rect x="67.5347%" y="101" width="0.6383%" height="15" fill="rgb(248,47,43)"/><text x="67.7847%" y="111.50"></text></g><g><title>lint_levels (42,676,311 samples, 0.25%)</title><rect x="68.4330%" y="53" width="0.2547%" height="15" fill="rgb(221,10,30)"/><text x="68.6830%" y="63.50"></text></g><g><title>is_late_bound_map (47,234,703 samples, 0.28%)</title><rect x="68.4059%" y="85" width="0.2819%" height="15" fill="rgb(210,229,1)"/><text x="68.6559%" y="95.50"></text></g><g><title>resolve_lifetimes (46,970,490 samples, 0.28%)</title><rect x="68.4074%" y="69" width="0.2803%" height="15" fill="rgb(222,148,37)"/><text x="68.6574%" y="79.50"></text></g><g><title>named_region_map (73,363,184 samples, 0.44%)</title><rect x="68.6878%" y="85" width="0.4378%" height="15" fill="rgb(234,67,33)"/><text x="68.9378%" y="95.50"></text></g><g><title>resolve_lifetimes (63,383,821 samples, 0.38%)</title><rect x="68.7473%" y="69" width="0.3783%" height="15" fill="rgb(247,98,35)"/><text x="68.9973%" y="79.50"></text></g><g><title>generics_of (162,590,590 samples, 0.97%)</title><rect x="68.1730%" y="101" width="0.9703%" height="15" fill="rgb(247,138,52)"/><text x="68.4230%" y="111.50"></text></g><g><title>explicit_predicates_of (20,247,364 samples, 0.12%)</title><rect x="69.4396%" y="69" width="0.1208%" height="15" fill="rgb(213,79,30)"/><text x="69.6896%" y="79.50"></text></g><g><title>predicates_of (74,703,773 samples, 0.45%)</title><rect x="69.1556%" y="101" width="0.4458%" height="15" fill="rgb(246,177,23)"/><text x="69.4056%" y="111.50"></text></g><g><title>predicates_defined_on (56,411,526 samples, 0.34%)</title><rect x="69.2647%" y="85" width="0.3367%" height="15" fill="rgb(230,62,27)"/><text x="69.5147%" y="95.50"></text></g><g><title>late_bound_vars_map (75,998,462 samples, 0.45%)</title><rect x="69.7375%" y="85" width="0.4536%" height="15" fill="rgb(216,154,8)"/><text x="69.9875%" y="95.50"></text></g><g><title>resolve_lifetimes (75,327,967 samples, 0.45%)</title><rect x="69.7415%" y="69" width="0.4495%" height="15" fill="rgb(244,35,45)"/><text x="69.9915%" y="79.50"></text></g><g><title>type_collecting (535,921,125 samples, 3.20%)</title><rect x="66.9961%" y="133" width="3.1983%" height="15" fill="rgb(251,115,12)"/><text x="67.2461%" y="143.50">typ..</text></g><g><title>collect_mod_item_types (535,869,115 samples, 3.20%)</title><rect x="66.9964%" y="117" width="3.1980%" height="15" fill="rgb(240,54,50)"/><text x="67.2464%" y="127.50">col..</text></g><g><title>type_of (99,284,608 samples, 0.59%)</title><rect x="69.6019%" y="101" width="0.5925%" height="15" fill="rgb(233,84,52)"/><text x="69.8519%" y="111.50"></text></g><g><title>evaluate_obligation (77,376,635 samples, 0.46%)</title><rect x="79.3695%" y="101" width="0.4618%" height="15" fill="rgb(207,117,47)"/><text x="79.6195%" y="111.50"></text></g><g><title>implied_outlives_bounds (36,321,294 samples, 0.22%)</title><rect x="79.8328%" y="101" width="0.2168%" height="15" fill="rgb(249,43,39)"/><text x="80.0828%" y="111.50"></text></g><g><title>param_env (170,918,226 samples, 1.02%)</title><rect x="80.0499%" y="101" width="1.0200%" height="15" fill="rgb(209,38,44)"/><text x="80.2999%" y="111.50"></text></g><g><title>region_scope_tree (117,599,160 samples, 0.70%)</title><rect x="81.0705%" y="101" width="0.7018%" height="15" fill="rgb(236,212,23)"/><text x="81.3205%" y="111.50"></text></g><g><title>check_impl_item_well_formed (1,870,055,503 samples, 11.16%)</title><rect x="70.6146%" y="117" width="11.1603%" height="15" fill="rgb(242,79,21)"/><text x="70.8646%" y="127.50">check_impl_item_..</text></g><g><title>evaluate_obligation (306,547,260 samples, 1.83%)</title><rect x="83.0278%" y="101" width="1.8294%" height="15" fill="rgb(211,96,35)"/><text x="83.2778%" y="111.50">e..</text></g><g><title>check_item_well_formed (565,390,714 samples, 3.37%)</title><rect x="81.7749%" y="117" width="3.3742%" height="15" fill="rgb(253,215,40)"/><text x="82.0249%" y="127.50">che..</text></g><g><title>variances_of (22,527,293 samples, 0.13%)</title><rect x="85.0147%" y="101" width="0.1344%" height="15" fill="rgb(211,81,21)"/><text x="85.2647%" y="111.50"></text></g><g><title>crate_variances (22,461,103 samples, 0.13%)</title><rect x="85.0151%" y="85" width="0.1340%" height="15" fill="rgb(208,190,38)"/><text x="85.2651%" y="95.50"></text></g><g><title>analysis (14,203,504,527 samples, 84.76%)</title><rect x="0.4056%" y="165" width="84.7650%" height="15" fill="rgb(235,213,38)"/><text x="0.6556%" y="175.50">analysis</text></g><g><title>type_check_crate (8,404,948,390 samples, 50.16%)</title><rect x="35.0107%" y="149" width="50.1598%" height="15" fill="rgb(237,122,38)"/><text x="35.2607%" y="159.50">type_check_crate</text></g><g><title>wf_checking (2,503,536,581 samples, 14.94%)</title><rect x="70.2297%" y="133" width="14.9408%" height="15" fill="rgb(244,218,35)"/><text x="70.4797%" y="143.50">wf_checking</text></g><g><title>AST_validation (86,542,077 samples, 0.52%)</title><rect x="85.1759%" y="149" width="0.5165%" height="15" fill="rgb(240,68,47)"/><text x="85.4259%" y="159.50"></text></g><g><title>complete_gated_feature_checking (28,763,215 samples, 0.17%)</title><rect x="85.6924%" y="149" width="0.1717%" height="15" fill="rgb(210,16,53)"/><text x="85.9424%" y="159.50"></text></g><g><title>macro_expand_crate (934,220,469 samples, 5.58%)</title><rect x="85.8646%" y="149" width="5.5753%" height="15" fill="rgb(235,124,12)"/><text x="86.1146%" y="159.50">macro_e..</text></g><g><title>expand_crate (934,203,559 samples, 5.58%)</title><rect x="85.8647%" y="133" width="5.5752%" height="15" fill="rgb(224,169,11)"/><text x="86.1147%" y="143.50">expand_..</text></g><g><title>late_resolve_crate (200,477,092 samples, 1.20%)</title><rect x="91.5386%" y="133" width="1.1964%" height="15" fill="rgb(250,166,2)"/><text x="91.7886%" y="143.50"></text></g><g><title>resolve_check_unused (20,266,159 samples, 0.12%)</title><rect x="92.7426%" y="133" width="0.1209%" height="15" fill="rgb(242,216,29)"/><text x="92.9926%" y="143.50"></text></g><g><title>resolve_postprocess (19,609,101 samples, 0.12%)</title><rect x="92.8635%" y="133" width="0.1170%" height="15" fill="rgb(230,116,27)"/><text x="93.1135%" y="143.50"></text></g><g><title>configure_and_expand (1,307,962,355 samples, 7.81%)</title><rect x="85.1748%" y="165" width="7.8058%" height="15" fill="rgb(228,99,48)"/><text x="85.4248%" y="175.50">configure_a..</text></g><g><title>resolve_crate (258,071,701 samples, 1.54%)</title><rect x="91.4404%" y="149" width="1.5401%" height="15" fill="rgb(253,11,6)"/><text x="91.6904%" y="159.50"></text></g><g><title>drop_ast (58,085,515 samples, 0.35%)</title><rect x="92.9806%" y="165" width="0.3466%" height="15" fill="rgb(247,143,39)"/><text x="93.2306%" y="175.50"></text></g><g><title>early_lint_checks (66,324,228 samples, 0.40%)</title><rect x="93.3274%" y="165" width="0.3958%" height="15" fill="rgb(236,97,10)"/><text x="93.5774%" y="175.50"></text></g><g><title>free_global_ctxt (125,482,296 samples, 0.75%)</title><rect x="93.7232%" y="165" width="0.7489%" height="15" fill="rgb(233,208,19)"/><text x="93.9732%" y="175.50"></text></g><g><title>generate_crate_metadata (243,714,359 samples, 1.45%)</title><rect x="94.4721%" y="165" width="1.4545%" height="15" fill="rgb(216,164,2)"/><text x="94.7221%" y="175.50"></text></g><g><title>hir_lowering (639,546,024 samples, 3.82%)</title><rect x="95.9266%" y="165" width="3.8167%" height="15" fill="rgb(220,129,5)"/><text x="96.1766%" y="175.50">hir_..</text></g><g><title>self_profile_alloc_query_strings (31,195,352 samples, 0.19%)</title><rect x="99.7482%" y="165" width="0.1862%" height="15" fill="rgb(242,17,10)"/><text x="99.9982%" y="175.50"></text></g><g><title>all (16,756,338,285 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (16,756,338,285 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>