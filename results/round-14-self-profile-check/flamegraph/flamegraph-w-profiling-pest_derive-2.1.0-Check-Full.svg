<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>adt_drop_tys (80,360 samples, 0.23%)</title><rect x="6.1363%" y="133" width="0.2333%" height="15" fill="rgb(227,0,7)"/><text x="6.3863%" y="143.50"></text></g><g><title>needs_drop_raw (431,224 samples, 1.25%)</title><rect x="6.1041%" y="149" width="1.2521%" height="15" fill="rgb(217,0,24)"/><text x="6.3541%" y="159.50"></text></g><g><title>is_copy_raw (339,754 samples, 0.99%)</title><rect x="6.3696%" y="133" width="0.9865%" height="15" fill="rgb(221,193,54)"/><text x="6.6196%" y="143.50"></text></g><g><title>evaluate_obligation (331,854 samples, 0.96%)</title><rect x="6.3926%" y="117" width="0.9636%" height="15" fill="rgb(248,212,6)"/><text x="6.6426%" y="127.50"></text></g><g><title>trait_impls_of (308,464 samples, 0.90%)</title><rect x="6.4605%" y="101" width="0.8956%" height="15" fill="rgb(208,68,35)"/><text x="6.7105%" y="111.50"></text></g><g><title>implementations_of_trait (61,830 samples, 0.18%)</title><rect x="7.1766%" y="85" width="0.1795%" height="15" fill="rgb(232,128,0)"/><text x="7.4266%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (51,260 samples, 0.15%)</title><rect x="7.2073%" y="69" width="0.1488%" height="15" fill="rgb(207,160,47)"/><text x="7.4573%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (64,850 samples, 0.19%)</title><rect x="7.4785%" y="133" width="0.1883%" height="15" fill="rgb(228,23,34)"/><text x="7.7285%" y="143.50"></text></g><g><title>specialization_graph_of (56,591 samples, 0.16%)</title><rect x="7.7032%" y="133" width="0.1643%" height="15" fill="rgb(218,30,26)"/><text x="7.9532%" y="143.50"></text></g><g><title>impl_trait_ref (37,610 samples, 0.11%)</title><rect x="7.7583%" y="117" width="0.1092%" height="15" fill="rgb(220,122,19)"/><text x="8.0083%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (35,560 samples, 0.10%)</title><rect x="7.7643%" y="101" width="0.1033%" height="15" fill="rgb(250,228,42)"/><text x="8.0143%" y="111.50"></text></g><g><title>resolve_instance (182,461 samples, 0.53%)</title><rect x="7.3561%" y="149" width="0.5298%" height="15" fill="rgb(240,193,28)"/><text x="7.6061%" y="159.50"></text></g><g><title>thir_body (47,611 samples, 0.14%)</title><rect x="7.8932%" y="149" width="0.1382%" height="15" fill="rgb(216,20,37)"/><text x="8.1432%" y="159.50"></text></g><g><title>mir_const (970,301 samples, 2.82%)</title><rect x="5.2171%" y="197" width="2.8173%" height="15" fill="rgb(206,188,39)"/><text x="5.4671%" y="207.50">mi..</text></g><g><title>unsafety_check_result (845,580 samples, 2.46%)</title><rect x="5.5792%" y="181" width="2.4552%" height="15" fill="rgb(217,207,13)"/><text x="5.8292%" y="191.50">un..</text></g><g><title>mir_built (773,489 samples, 2.25%)</title><rect x="5.7885%" y="165" width="2.2459%" height="15" fill="rgb(231,73,38)"/><text x="6.0385%" y="175.50">m..</text></g><g><title>has_structural_eq_impls (301,253 samples, 0.87%)</title><rect x="8.3646%" y="181" width="0.8747%" height="15" fill="rgb(225,20,46)"/><text x="8.6146%" y="191.50"></text></g><g><title>evaluate_obligation (284,783 samples, 0.83%)</title><rect x="8.4124%" y="165" width="0.8269%" height="15" fill="rgb(210,31,41)"/><text x="8.6624%" y="175.50"></text></g><g><title>trait_impls_of (262,693 samples, 0.76%)</title><rect x="8.4765%" y="149" width="0.7627%" height="15" fill="rgb(221,200,47)"/><text x="8.7265%" y="159.50"></text></g><g><title>implementations_of_trait (70,271 samples, 0.20%)</title><rect x="9.0352%" y="133" width="0.2040%" height="15" fill="rgb(226,26,5)"/><text x="9.2852%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (49,791 samples, 0.14%)</title><rect x="9.0947%" y="117" width="0.1446%" height="15" fill="rgb(249,33,26)"/><text x="9.3447%" y="127.50"></text></g><g><title>is_freeze_raw (212,932 samples, 0.62%)</title><rect x="9.2456%" y="181" width="0.6183%" height="15" fill="rgb(235,183,28)"/><text x="9.4956%" y="191.50"></text></g><g><title>evaluate_obligation (207,802 samples, 0.60%)</title><rect x="9.2605%" y="165" width="0.6034%" height="15" fill="rgb(221,5,38)"/><text x="9.5105%" y="175.50"></text></g><g><title>trait_impls_of (53,091 samples, 0.15%)</title><rect x="9.7097%" y="149" width="0.1542%" height="15" fill="rgb(247,18,42)"/><text x="9.9597%" y="159.50"></text></g><g><title>needs_drop_raw (45,090 samples, 0.13%)</title><rect x="10.1931%" y="133" width="0.1309%" height="15" fill="rgb(241,131,45)"/><text x="10.4431%" y="143.50"></text></g><g><title>is_copy_raw (42,330 samples, 0.12%)</title><rect x="10.2011%" y="117" width="0.1229%" height="15" fill="rgb(249,31,29)"/><text x="10.4511%" y="127.50"></text></g><g><title>evaluate_obligation (36,430 samples, 0.11%)</title><rect x="10.2182%" y="101" width="0.1058%" height="15" fill="rgb(225,111,53)"/><text x="10.4682%" y="111.50"></text></g><g><title>thir_body (35,130 samples, 0.10%)</title><rect x="10.3276%" y="133" width="0.1020%" height="15" fill="rgb(238,160,17)"/><text x="10.5776%" y="143.50"></text></g><g><title>mir_const (194,452 samples, 0.56%)</title><rect x="9.8673%" y="181" width="0.5646%" height="15" fill="rgb(214,148,48)"/><text x="10.1173%" y="191.50"></text></g><g><title>unsafety_check_result (152,561 samples, 0.44%)</title><rect x="9.9889%" y="165" width="0.4430%" height="15" fill="rgb(232,36,49)"/><text x="10.2389%" y="175.50"></text></g><g><title>mir_built (137,331 samples, 0.40%)</title><rect x="10.0332%" y="149" width="0.3987%" height="15" fill="rgb(209,103,24)"/><text x="10.2832%" y="159.50"></text></g><g><title>mir_promoted (1,975,042 samples, 5.73%)</title><rect x="4.7014%" y="213" width="5.7347%" height="15" fill="rgb(229,88,8)"/><text x="4.9514%" y="223.50">mir_pro..</text></g><g><title>mir_const_qualif (827,149 samples, 2.40%)</title><rect x="8.0344%" y="197" width="2.4017%" height="15" fill="rgb(213,181,19)"/><text x="8.2844%" y="207.50">mi..</text></g><g><title>MIR_borrow_checking (2,941,113 samples, 8.54%)</title><rect x="2.3611%" y="245" width="8.5397%" height="15" fill="rgb(254,191,54)"/><text x="2.6111%" y="255.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (2,932,463 samples, 8.51%)</title><rect x="2.3862%" y="229" width="8.5146%" height="15" fill="rgb(241,83,37)"/><text x="2.6362%" y="239.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (160,043 samples, 0.46%)</title><rect x="10.4361%" y="213" width="0.4647%" height="15" fill="rgb(233,36,39)"/><text x="10.6861%" y="223.50"></text></g><g><title>evaluate_obligation (39,191 samples, 0.11%)</title><rect x="10.7870%" y="197" width="0.1138%" height="15" fill="rgb(226,3,54)"/><text x="11.0370%" y="207.50"></text></g><g><title>MIR_effect_checking (103,871 samples, 0.30%)</title><rect x="10.9008%" y="245" width="0.3016%" height="15" fill="rgb(245,192,40)"/><text x="11.1508%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (88,091 samples, 0.26%)</title><rect x="10.9466%" y="229" width="0.2558%" height="15" fill="rgb(238,167,29)"/><text x="11.1966%" y="239.50"></text></g><g><title>hir_module_items (117,561 samples, 0.34%)</title><rect x="11.2024%" y="245" width="0.3413%" height="15" fill="rgb(232,182,51)"/><text x="11.4524%" y="255.50"></text></g><g><title>get_lang_items (154,781 samples, 0.45%)</title><rect x="12.1003%" y="197" width="0.4494%" height="15" fill="rgb(231,60,39)"/><text x="12.3503%" y="207.50"></text></g><g><title>codegen_fn_attrs (266,953 samples, 0.78%)</title><rect x="11.9020%" y="213" width="0.7751%" height="15" fill="rgb(208,69,12)"/><text x="12.1520%" y="223.50"></text></g><g><title>supported_target_features (35,400 samples, 0.10%)</title><rect x="12.5743%" y="197" width="0.1028%" height="15" fill="rgb(235,93,37)"/><text x="12.8243%" y="207.50"></text></g><g><title>check_mod_attrs (356,454 samples, 1.03%)</title><rect x="11.6428%" y="229" width="1.0350%" height="15" fill="rgb(213,116,39)"/><text x="11.8928%" y="239.50"></text></g><g><title>lookup_deprecation_entry (35,450 samples, 0.10%)</title><rect x="12.9459%" y="213" width="0.1029%" height="15" fill="rgb(222,207,29)"/><text x="13.1959%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (113,411 samples, 0.33%)</title><rect x="12.7950%" y="229" width="0.3293%" height="15" fill="rgb(206,96,30)"/><text x="13.0450%" y="239.50"></text></g><g><title>misc_checking_1 (579,807 samples, 1.68%)</title><rect x="11.5447%" y="245" width="1.6835%" height="15" fill="rgb(218,138,4)"/><text x="11.7947%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (87,751 samples, 0.25%)</title><rect x="13.2345%" y="229" width="0.2548%" height="15" fill="rgb(250,191,14)"/><text x="13.4845%" y="239.50"></text></g><g><title>check_mod_liveness (74,521 samples, 0.22%)</title><rect x="13.2729%" y="213" width="0.2164%" height="15" fill="rgb(239,60,40)"/><text x="13.5229%" y="223.50"></text></g><g><title>type_uninhabited_from (41,621 samples, 0.12%)</title><rect x="13.3684%" y="197" width="0.1208%" height="15" fill="rgb(206,27,48)"/><text x="13.6184%" y="207.50"></text></g><g><title>misc_checking_2 (169,892 samples, 0.49%)</title><rect x="13.2282%" y="245" width="0.4933%" height="15" fill="rgb(225,35,8)"/><text x="13.4782%" y="255.50"></text></g><g><title>match_checking (79,981 samples, 0.23%)</title><rect x="13.4893%" y="229" width="0.2322%" height="15" fill="rgb(250,213,24)"/><text x="13.7393%" y="239.50"></text></g><g><title>check_match (76,131 samples, 0.22%)</title><rect x="13.5004%" y="213" width="0.2211%" height="15" fill="rgb(247,123,22)"/><text x="13.7504%" y="223.50"></text></g><g><title>death_checking (70,681 samples, 0.21%)</title><rect x="13.7917%" y="229" width="0.2052%" height="15" fill="rgb(231,138,38)"/><text x="14.0417%" y="239.50"></text></g><g><title>lint_levels (34,671 samples, 0.10%)</title><rect x="13.8962%" y="213" width="0.1007%" height="15" fill="rgb(231,145,46)"/><text x="14.1462%" y="223.50"></text></g><g><title>layout_of (63,431 samples, 0.18%)</title><rect x="15.1548%" y="85" width="0.1842%" height="15" fill="rgb(251,118,11)"/><text x="15.4048%" y="95.50"></text></g><g><title>layout_of (45,231 samples, 0.13%)</title><rect x="15.2077%" y="69" width="0.1313%" height="15" fill="rgb(217,147,25)"/><text x="15.4577%" y="79.50"></text></g><g><title>fn_abi_of_instance (116,441 samples, 0.34%)</title><rect x="15.0614%" y="101" width="0.3381%" height="15" fill="rgb(247,81,37)"/><text x="15.3114%" y="111.50"></text></g><g><title>layout_of (49,471 samples, 0.14%)</title><rect x="15.4122%" y="101" width="0.1436%" height="15" fill="rgb(209,12,38)"/><text x="15.6622%" y="111.50"></text></g><g><title>promoted_mir (35,440 samples, 0.10%)</title><rect x="15.6581%" y="101" width="0.1029%" height="15" fill="rgb(227,1,9)"/><text x="15.9081%" y="111.50"></text></g><g><title>eval_to_const_value_raw (390,184 samples, 1.13%)</title><rect x="14.6704%" y="149" width="1.1329%" height="15" fill="rgb(248,47,43)"/><text x="14.9204%" y="159.50"></text></g><g><title>eval_to_const_value_raw (389,454 samples, 1.13%)</title><rect x="14.6725%" y="133" width="1.1308%" height="15" fill="rgb(221,10,30)"/><text x="14.9225%" y="143.50"></text></g><g><title>eval_to_allocation_raw (387,544 samples, 1.13%)</title><rect x="14.6780%" y="117" width="1.1253%" height="15" fill="rgb(210,229,1)"/><text x="14.9280%" y="127.50"></text></g><g><title>eval_to_allocation_raw (432,694 samples, 1.26%)</title><rect x="14.5520%" y="197" width="1.2564%" height="15" fill="rgb(222,148,37)"/><text x="14.8020%" y="207.50"></text></g><g><title>eval_to_allocation_raw (432,024 samples, 1.25%)</title><rect x="14.5540%" y="181" width="1.2544%" height="15" fill="rgb(234,67,33)"/><text x="14.8040%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (400,134 samples, 1.16%)</title><rect x="14.6466%" y="165" width="1.1618%" height="15" fill="rgb(247,98,35)"/><text x="14.8966%" y="175.50"></text></g><g><title>eval_to_const_value_raw (112,131 samples, 0.33%)</title><rect x="15.8084%" y="197" width="0.3256%" height="15" fill="rgb(247,138,52)"/><text x="16.0584%" y="207.50"></text></g><g><title>eval_to_const_value_raw (104,631 samples, 0.30%)</title><rect x="15.8302%" y="181" width="0.3038%" height="15" fill="rgb(213,79,30)"/><text x="16.0802%" y="191.50"></text></g><g><title>eval_to_allocation_raw (98,741 samples, 0.29%)</title><rect x="15.8473%" y="165" width="0.2867%" height="15" fill="rgb(246,177,23)"/><text x="16.0973%" y="175.50"></text></g><g><title>crate_lints (786,559 samples, 2.28%)</title><rect x="14.0011%" y="213" width="2.2838%" height="15" fill="rgb(230,62,27)"/><text x="14.2511%" y="223.50">c..</text></g><g><title>param_env (52,002 samples, 0.15%)</title><rect x="16.1340%" y="197" width="0.1510%" height="15" fill="rgb(216,154,8)"/><text x="16.3840%" y="207.50"></text></g><g><title>lint_checking (813,849 samples, 2.36%)</title><rect x="13.9969%" y="229" width="2.3631%" height="15" fill="rgb(244,35,45)"/><text x="14.2469%" y="239.50">li..</text></g><g><title>misc_checking_3 (978,701 samples, 2.84%)</title><rect x="13.7215%" y="245" width="2.8417%" height="15" fill="rgb(251,115,12)"/><text x="13.9715%" y="255.50">mi..</text></g><g><title>associated_items (45,920 samples, 0.13%)</title><rect x="18.2216%" y="181" width="0.1333%" height="15" fill="rgb(240,54,50)"/><text x="18.4716%" y="191.50"></text></g><g><title>adt_def (52,661 samples, 0.15%)</title><rect x="18.5395%" y="149" width="0.1529%" height="15" fill="rgb(233,84,52)"/><text x="18.7895%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (50,811 samples, 0.15%)</title><rect x="18.5448%" y="133" width="0.1475%" height="15" fill="rgb(207,117,47)"/><text x="18.7948%" y="143.50"></text></g><g><title>adt_def (91,361 samples, 0.27%)</title><rect x="18.8667%" y="133" width="0.2653%" height="15" fill="rgb(249,43,39)"/><text x="19.1167%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (88,001 samples, 0.26%)</title><rect x="18.8764%" y="117" width="0.2555%" height="15" fill="rgb(209,38,44)"/><text x="19.1264%" y="127.50"></text></g><g><title>item_attrs (54,401 samples, 0.16%)</title><rect x="18.9740%" y="101" width="0.1580%" height="15" fill="rgb(236,212,23)"/><text x="19.2240%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (51,230 samples, 0.15%)</title><rect x="18.9832%" y="85" width="0.1487%" height="15" fill="rgb(242,79,21)"/><text x="19.2332%" y="95.50"></text></g><g><title>adt_def (111,942 samples, 0.33%)</title><rect x="19.3458%" y="117" width="0.3250%" height="15" fill="rgb(211,96,35)"/><text x="19.5958%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (108,172 samples, 0.31%)</title><rect x="19.3567%" y="101" width="0.3141%" height="15" fill="rgb(253,215,40)"/><text x="19.6067%" y="111.50"></text></g><g><title>item_attrs (72,491 samples, 0.21%)</title><rect x="19.4603%" y="85" width="0.2105%" height="15" fill="rgb(211,81,21)"/><text x="19.7103%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (68,761 samples, 0.20%)</title><rect x="19.4712%" y="69" width="0.1997%" height="15" fill="rgb(208,190,38)"/><text x="19.7212%" y="79.50"></text></g><g><title>adt_destructor (43,412 samples, 0.13%)</title><rect x="19.6708%" y="117" width="0.1260%" height="15" fill="rgb(235,213,38)"/><text x="19.9208%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (37,032 samples, 0.11%)</title><rect x="19.6893%" y="101" width="0.1075%" height="15" fill="rgb(237,122,38)"/><text x="19.9393%" y="111.50"></text></g><g><title>adt_def (148,872 samples, 0.43%)</title><rect x="19.9140%" y="101" width="0.4323%" height="15" fill="rgb(244,218,35)"/><text x="20.1640%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (145,922 samples, 0.42%)</title><rect x="19.9225%" y="85" width="0.4237%" height="15" fill="rgb(240,68,47)"/><text x="20.1725%" y="95.50"></text></g><g><title>item_attrs (121,021 samples, 0.35%)</title><rect x="19.9949%" y="69" width="0.3514%" height="15" fill="rgb(210,16,53)"/><text x="20.2449%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,001 samples, 0.34%)</title><rect x="20.0036%" y="53" width="0.3426%" height="15" fill="rgb(235,124,12)"/><text x="20.2536%" y="63.50"></text></g><g><title>adt_def (132,181 samples, 0.38%)</title><rect x="20.5185%" y="85" width="0.3838%" height="15" fill="rgb(224,169,11)"/><text x="20.7685%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (129,311 samples, 0.38%)</title><rect x="20.5268%" y="69" width="0.3755%" height="15" fill="rgb(250,166,2)"/><text x="20.7768%" y="79.50"></text></g><g><title>item_attrs (104,221 samples, 0.30%)</title><rect x="20.5997%" y="53" width="0.3026%" height="15" fill="rgb(242,216,29)"/><text x="20.8497%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (101,301 samples, 0.29%)</title><rect x="20.6082%" y="37" width="0.2941%" height="15" fill="rgb(230,116,27)"/><text x="20.8582%" y="47.50"></text></g><g><title>adt_dtorck_constraint (69,901 samples, 0.20%)</title><rect x="20.9693%" y="85" width="0.2030%" height="15" fill="rgb(228,99,48)"/><text x="21.2193%" y="95.50"></text></g><g><title>adt_dtorck_constraint (302,803 samples, 0.88%)</title><rect x="20.4251%" y="101" width="0.8792%" height="15" fill="rgb(253,11,6)"/><text x="20.6751%" y="111.50"></text></g><g><title>adt_dtorck_constraint (553,805 samples, 1.61%)</title><rect x="19.7969%" y="117" width="1.6080%" height="15" fill="rgb(247,143,39)"/><text x="20.0469%" y="127.50"></text></g><g><title>adt_dtorck_constraint (792,360 samples, 2.30%)</title><rect x="19.2096%" y="133" width="2.3007%" height="15" fill="rgb(236,97,10)"/><text x="19.4596%" y="143.50">a..</text></g><g><title>adt_dtorck_constraint (1,001,732 samples, 2.91%)</title><rect x="18.7316%" y="149" width="2.9086%" height="15" fill="rgb(233,208,19)"/><text x="18.9816%" y="159.50">ad..</text></g><g><title>dropck_outlives (1,153,743 samples, 3.35%)</title><rect x="18.3645%" y="181" width="3.3500%" height="15" fill="rgb(216,164,2)"/><text x="18.6145%" y="191.50">dro..</text></g><g><title>adt_dtorck_constraint (1,129,993 samples, 3.28%)</title><rect x="18.4335%" y="165" width="3.2810%" height="15" fill="rgb(220,129,5)"/><text x="18.6835%" y="175.50">adt..</text></g><g><title>adt_sized_constraint (96,192 samples, 0.28%)</title><rect x="22.3124%" y="165" width="0.2793%" height="15" fill="rgb(242,17,10)"/><text x="22.5624%" y="175.50"></text></g><g><title>adt_sized_constraint (74,491 samples, 0.22%)</title><rect x="22.3754%" y="149" width="0.2163%" height="15" fill="rgb(242,107,0)"/><text x="22.6254%" y="159.50"></text></g><g><title>adt_def (73,180 samples, 0.21%)</title><rect x="22.3792%" y="133" width="0.2125%" height="15" fill="rgb(251,28,31)"/><text x="22.6292%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (72,670 samples, 0.21%)</title><rect x="22.3807%" y="117" width="0.2110%" height="15" fill="rgb(233,223,10)"/><text x="22.6307%" y="127.50"></text></g><g><title>item_attrs (68,550 samples, 0.20%)</title><rect x="22.3927%" y="101" width="0.1990%" height="15" fill="rgb(215,21,27)"/><text x="22.6427%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (67,940 samples, 0.20%)</title><rect x="22.3944%" y="85" width="0.1973%" height="15" fill="rgb(232,23,21)"/><text x="22.6444%" y="95.50"></text></g><g><title>impl_trait_ref (55,670 samples, 0.16%)</title><rect x="22.6833%" y="165" width="0.1616%" height="15" fill="rgb(244,5,23)"/><text x="22.9333%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (49,890 samples, 0.14%)</title><rect x="22.7000%" y="149" width="0.1449%" height="15" fill="rgb(226,81,46)"/><text x="22.9500%" y="159.50"></text></g><g><title>predicates_of (53,371 samples, 0.15%)</title><rect x="22.8489%" y="165" width="0.1550%" height="15" fill="rgb(247,70,30)"/><text x="23.0989%" y="175.50"></text></g><g><title>predicates_defined_on (42,391 samples, 0.12%)</title><rect x="22.8808%" y="149" width="0.1231%" height="15" fill="rgb(212,68,19)"/><text x="23.1308%" y="159.50"></text></g><g><title>evaluate_obligation (663,069 samples, 1.93%)</title><rect x="21.7145%" y="181" width="1.9253%" height="15" fill="rgb(240,187,13)"/><text x="21.9645%" y="191.50">e..</text></g><g><title>trait_impls_of (219,002 samples, 0.64%)</title><rect x="23.0039%" y="165" width="0.6359%" height="15" fill="rgb(223,113,26)"/><text x="23.2539%" y="175.50"></text></g><g><title>implementations_of_trait (91,972 samples, 0.27%)</title><rect x="23.3727%" y="149" width="0.2670%" height="15" fill="rgb(206,192,2)"/><text x="23.6227%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (64,611 samples, 0.19%)</title><rect x="23.4522%" y="133" width="0.1876%" height="15" fill="rgb(241,108,4)"/><text x="23.7022%" y="143.50"></text></g><g><title>method_autoderef_steps (128,371 samples, 0.37%)</title><rect x="23.8498%" y="181" width="0.3727%" height="15" fill="rgb(247,173,49)"/><text x="24.0998%" y="191.50"></text></g><g><title>evaluate_obligation (101,251 samples, 0.29%)</title><rect x="23.9286%" y="165" width="0.2940%" height="15" fill="rgb(224,114,35)"/><text x="24.1786%" y="175.50"></text></g><g><title>trait_impls_of (70,911 samples, 0.21%)</title><rect x="24.0166%" y="149" width="0.2059%" height="15" fill="rgb(245,159,27)"/><text x="24.2666%" y="159.50"></text></g><g><title>predicates_of (48,822 samples, 0.14%)</title><rect x="24.2321%" y="181" width="0.1418%" height="15" fill="rgb(245,172,44)"/><text x="24.4821%" y="191.50"></text></g><g><title>predicates_defined_on (36,011 samples, 0.10%)</title><rect x="24.2693%" y="165" width="0.1046%" height="15" fill="rgb(236,23,11)"/><text x="24.5193%" y="175.50"></text></g><g><title>item_bodies_checking (2,657,320 samples, 7.72%)</title><rect x="16.7291%" y="229" width="7.7157%" height="15" fill="rgb(205,117,38)"/><text x="16.9791%" y="239.50">item_bodies..</text></g><g><title>typeck_item_bodies (2,654,430 samples, 7.71%)</title><rect x="16.7375%" y="213" width="7.7073%" height="15" fill="rgb(237,72,25)"/><text x="16.9875%" y="223.50">typeck_item..</text></g><g><title>typeck (2,649,980 samples, 7.69%)</title><rect x="16.7504%" y="197" width="7.6944%" height="15" fill="rgb(244,70,9)"/><text x="17.0004%" y="207.50">typeck</text></g><g><title>layout_of (54,831 samples, 0.16%)</title><rect x="24.4927%" y="197" width="0.1592%" height="15" fill="rgb(217,125,39)"/><text x="24.7427%" y="207.50"></text></g><g><title>layout_of (37,721 samples, 0.11%)</title><rect x="24.5424%" y="181" width="0.1095%" height="15" fill="rgb(235,36,10)"/><text x="24.7924%" y="191.50"></text></g><g><title>impl_parent (188,721 samples, 0.55%)</title><rect x="28.0561%" y="69" width="0.5480%" height="15" fill="rgb(251,123,47)"/><text x="28.3061%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (132,861 samples, 0.39%)</title><rect x="28.2183%" y="53" width="0.3858%" height="15" fill="rgb(221,13,13)"/><text x="28.4683%" y="63.50"></text></g><g><title>impl_trait_ref (691,929 samples, 2.01%)</title><rect x="28.6041%" y="69" width="2.0091%" height="15" fill="rgb(238,131,9)"/><text x="28.8541%" y="79.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (637,546 samples, 1.85%)</title><rect x="28.7620%" y="53" width="1.8512%" height="15" fill="rgb(211,50,8)"/><text x="29.0120%" y="63.50">m..</text></g><g><title>coherent_trait (1,227,784 samples, 3.56%)</title><rect x="27.2951%" y="101" width="3.5649%" height="15" fill="rgb(245,182,24)"/><text x="27.5451%" y="111.50">cohe..</text></g><g><title>specialization_graph_of (1,221,104 samples, 3.55%)</title><rect x="27.3145%" y="85" width="3.5456%" height="15" fill="rgb(242,14,37)"/><text x="27.5645%" y="95.50">spec..</text></g><g><title>trait_impls_of (85,031 samples, 0.25%)</title><rect x="30.6131%" y="69" width="0.2469%" height="15" fill="rgb(246,228,12)"/><text x="30.8631%" y="79.50"></text></g><g><title>adt_destructor (1,247,124 samples, 3.62%)</title><rect x="27.2692%" y="133" width="3.6211%" height="15" fill="rgb(213,55,15)"/><text x="27.5192%" y="143.50">adt_..</text></g><g><title>metadata_decode_entry_adt_destructor (1,245,884 samples, 3.62%)</title><rect x="27.2728%" y="117" width="3.6175%" height="15" fill="rgb(209,9,3)"/><text x="27.5228%" y="127.50">meta..</text></g><g><title>adt_dtorck_constraint (1,257,334 samples, 3.65%)</title><rect x="27.2428%" y="149" width="3.6507%" height="15" fill="rgb(230,59,30)"/><text x="27.4928%" y="159.50">adt_..</text></g><g><title>dropck_outlives (1,312,595 samples, 3.81%)</title><rect x="27.0903%" y="181" width="3.8112%" height="15" fill="rgb(209,121,21)"/><text x="27.3403%" y="191.50">drop..</text></g><g><title>adt_dtorck_constraint (1,281,614 samples, 3.72%)</title><rect x="27.1803%" y="165" width="3.7212%" height="15" fill="rgb(220,109,13)"/><text x="27.4303%" y="175.50">adt_..</text></g><g><title>adt_def (93,031 samples, 0.27%)</title><rect x="31.1379%" y="117" width="0.2701%" height="15" fill="rgb(232,18,1)"/><text x="31.3879%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (92,511 samples, 0.27%)</title><rect x="31.1394%" y="101" width="0.2686%" height="15" fill="rgb(215,41,42)"/><text x="31.3894%" y="111.50"></text></g><g><title>item_attrs (36,420 samples, 0.11%)</title><rect x="31.3022%" y="85" width="0.1057%" height="15" fill="rgb(224,123,36)"/><text x="31.5522%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (35,710 samples, 0.10%)</title><rect x="31.3043%" y="69" width="0.1037%" height="15" fill="rgb(240,125,3)"/><text x="31.5543%" y="79.50"></text></g><g><title>adt_sized_constraint (103,241 samples, 0.30%)</title><rect x="31.1318%" y="133" width="0.2998%" height="15" fill="rgb(205,98,50)"/><text x="31.3818%" y="143.50"></text></g><g><title>adt_sized_constraint (115,231 samples, 0.33%)</title><rect x="31.1042%" y="149" width="0.3346%" height="15" fill="rgb(205,185,37)"/><text x="31.3542%" y="159.50"></text></g><g><title>evaluate_obligation (190,142 samples, 0.55%)</title><rect x="30.9015%" y="181" width="0.5521%" height="15" fill="rgb(238,207,15)"/><text x="31.1515%" y="191.50"></text></g><g><title>adt_sized_constraint (146,882 samples, 0.43%)</title><rect x="31.0272%" y="165" width="0.4265%" height="15" fill="rgb(213,199,42)"/><text x="31.2772%" y="175.50"></text></g><g><title>impl_trait_ref (48,571 samples, 0.14%)</title><rect x="31.5060%" y="181" width="0.1410%" height="15" fill="rgb(235,201,11)"/><text x="31.7560%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (46,251 samples, 0.13%)</title><rect x="31.5128%" y="165" width="0.1343%" height="15" fill="rgb(207,46,11)"/><text x="31.7628%" y="175.50"></text></g><g><title>trait_impls_of (55,921 samples, 0.16%)</title><rect x="31.8566%" y="181" width="0.1624%" height="15" fill="rgb(241,35,35)"/><text x="32.1066%" y="191.50"></text></g><g><title>item_types_checking (2,619,440 samples, 7.61%)</title><rect x="24.4448%" y="229" width="7.6057%" height="15" fill="rgb(243,32,47)"/><text x="24.6948%" y="239.50">item_types..</text></g><g><title>check_mod_item_types (2,615,320 samples, 7.59%)</title><rect x="24.4568%" y="213" width="7.5937%" height="15" fill="rgb(247,202,23)"/><text x="24.7068%" y="223.50">check_mod_..</text></g><g><title>typeck (2,548,109 samples, 7.40%)</title><rect x="24.6519%" y="197" width="7.3986%" height="15" fill="rgb(219,102,11)"/><text x="24.9019%" y="207.50">typeck</text></g><g><title>late_bound_vars_map (44,001 samples, 0.13%)</title><rect x="32.4768%" y="181" width="0.1278%" height="15" fill="rgb(243,110,44)"/><text x="32.7268%" y="191.50"></text></g><g><title>fn_sig (144,252 samples, 0.42%)</title><rect x="32.2393%" y="197" width="0.4188%" height="15" fill="rgb(222,74,54)"/><text x="32.4893%" y="207.50"></text></g><g><title>generics_of (39,570 samples, 0.11%)</title><rect x="32.6582%" y="197" width="0.1149%" height="15" fill="rgb(216,99,12)"/><text x="32.9082%" y="207.50"></text></g><g><title>predicates_of (52,600 samples, 0.15%)</title><rect x="32.7731%" y="197" width="0.1527%" height="15" fill="rgb(226,22,26)"/><text x="33.0231%" y="207.50"></text></g><g><title>predicates_defined_on (46,840 samples, 0.14%)</title><rect x="32.7898%" y="181" width="0.1360%" height="15" fill="rgb(217,163,10)"/><text x="33.0398%" y="191.50"></text></g><g><title>type_collecting (345,633 samples, 1.00%)</title><rect x="32.0543%" y="229" width="1.0036%" height="15" fill="rgb(213,25,53)"/><text x="32.3043%" y="239.50"></text></g><g><title>collect_mod_item_types (334,253 samples, 0.97%)</title><rect x="32.0873%" y="213" width="0.9705%" height="15" fill="rgb(252,105,26)"/><text x="32.3373%" y="223.50"></text></g><g><title>type_of (45,481 samples, 0.13%)</title><rect x="32.9258%" y="197" width="0.1321%" height="15" fill="rgb(220,39,43)"/><text x="33.1758%" y="207.50"></text></g><g><title>adt_sized_constraint (69,191 samples, 0.20%)</title><rect x="35.1218%" y="181" width="0.2009%" height="15" fill="rgb(229,68,48)"/><text x="35.3718%" y="191.50"></text></g><g><title>predicates_of (34,650 samples, 0.10%)</title><rect x="35.3332%" y="181" width="0.1006%" height="15" fill="rgb(252,8,32)"/><text x="35.5832%" y="191.50"></text></g><g><title>trait_impls_of (106,641 samples, 0.31%)</title><rect x="35.4475%" y="181" width="0.3096%" height="15" fill="rgb(223,20,43)"/><text x="35.6975%" y="191.50"></text></g><g><title>implementations_of_trait (40,181 samples, 0.12%)</title><rect x="35.6405%" y="165" width="0.1167%" height="15" fill="rgb(229,81,49)"/><text x="35.8905%" y="175.50"></text></g><g><title>evaluate_obligation (543,836 samples, 1.58%)</title><rect x="34.3858%" y="197" width="1.5791%" height="15" fill="rgb(236,28,36)"/><text x="34.6358%" y="207.50"></text></g><g><title>type_of (71,550 samples, 0.21%)</title><rect x="35.7572%" y="181" width="0.2077%" height="15" fill="rgb(249,185,26)"/><text x="36.0072%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (66,080 samples, 0.19%)</title><rect x="35.7730%" y="165" width="0.1919%" height="15" fill="rgb(249,174,33)"/><text x="36.0230%" y="175.50"></text></g><g><title>implied_outlives_bounds (108,302 samples, 0.31%)</title><rect x="35.9649%" y="197" width="0.3145%" height="15" fill="rgb(233,201,37)"/><text x="36.2149%" y="207.50"></text></g><g><title>param_env (224,924 samples, 0.65%)</title><rect x="36.2809%" y="197" width="0.6531%" height="15" fill="rgb(221,78,26)"/><text x="36.5309%" y="207.50"></text></g><g><title>analysis (12,084,946 samples, 35.09%)</title><rect x="1.9931%" y="261" width="35.0894%" height="15" fill="rgb(250,127,30)"/><text x="2.2431%" y="271.50">analysis</text></g><g><title>type_check_crate (7,066,919 samples, 20.52%)</title><rect x="16.5632%" y="245" width="20.5192%" height="15" fill="rgb(230,49,44)"/><text x="16.8132%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,384,965 samples, 4.02%)</title><rect x="33.0611%" y="229" width="4.0213%" height="15" fill="rgb(229,67,23)"/><text x="33.3111%" y="239.50">wf_c..</text></g><g><title>check_item_well_formed (1,353,475 samples, 3.93%)</title><rect x="33.1526%" y="213" width="3.9299%" height="15" fill="rgb(249,83,47)"/><text x="33.4026%" y="223.50">chec..</text></g><g><title>codegen_crate (438,575 samples, 1.27%)</title><rect x="37.1108%" y="261" width="1.2734%" height="15" fill="rgb(215,43,3)"/><text x="37.3608%" y="271.50"></text></g><g><title>AST_validation (116,291 samples, 0.34%)</title><rect x="39.0518%" y="245" width="0.3377%" height="15" fill="rgb(238,154,13)"/><text x="39.3018%" y="255.50"></text></g><g><title>crate_injection (98,851 samples, 0.29%)</title><rect x="39.4779%" y="245" width="0.2870%" height="15" fill="rgb(219,56,2)"/><text x="39.7279%" y="255.50"></text></g><g><title>metadata_load_macro (245,533 samples, 0.71%)</title><rect x="66.6333%" y="213" width="0.7129%" height="15" fill="rgb(233,0,4)"/><text x="66.8833%" y="223.50"></text></g><g><title>macro_expand_crate (13,179,628 samples, 38.27%)</title><rect x="39.7650%" y="245" width="38.2679%" height="15" fill="rgb(235,30,7)"/><text x="40.0150%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (13,153,527 samples, 38.19%)</title><rect x="39.8408%" y="229" width="38.1921%" height="15" fill="rgb(250,79,13)"/><text x="40.0908%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (3,680,511 samples, 10.69%)</title><rect x="67.3463%" y="213" width="10.6866%" height="15" fill="rgb(211,146,34)"/><text x="67.5963%" y="223.50">metadata_registe..</text></g><g><title>metadata_register_crate (1,377,885 samples, 4.00%)</title><rect x="74.0321%" y="197" width="4.0008%" height="15" fill="rgb(228,22,38)"/><text x="74.2821%" y="207.50">meta..</text></g><g><title>metadata_register_crate (115,681 samples, 0.34%)</title><rect x="77.6970%" y="181" width="0.3359%" height="15" fill="rgb(235,168,5)"/><text x="77.9470%" y="191.50"></text></g><g><title>maybe_create_a_macro_crate (346,524 samples, 1.01%)</title><rect x="78.0409%" y="245" width="1.0062%" height="15" fill="rgb(221,155,16)"/><text x="78.2909%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (65,740 samples, 0.19%)</title><rect x="79.0470%" y="245" width="0.1909%" height="15" fill="rgb(215,215,53)"/><text x="79.2970%" y="255.50"></text></g><g><title>finalize_macro_resolutions (306,864 samples, 0.89%)</title><rect x="79.3221%" y="229" width="0.8910%" height="15" fill="rgb(223,4,10)"/><text x="79.5721%" y="239.50"></text></g><g><title>late_resolve_crate (2,108,433 samples, 6.12%)</title><rect x="80.2131%" y="229" width="6.1220%" height="15" fill="rgb(234,103,6)"/><text x="80.4631%" y="239.50">late_res..</text></g><g><title>resolve_postprocess (44,880 samples, 0.13%)</title><rect x="86.3937%" y="229" width="0.1303%" height="15" fill="rgb(227,97,0)"/><text x="86.6437%" y="239.50"></text></g><g><title>configure_and_expand (16,580,935 samples, 48.14%)</title><rect x="38.3842%" y="261" width="48.1438%" height="15" fill="rgb(234,150,53)"/><text x="38.6342%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (2,510,748 samples, 7.29%)</title><rect x="79.2379%" y="245" width="7.2901%" height="15" fill="rgb(228,201,54)"/><text x="79.4879%" y="255.50">resolve_cr..</text></g><g><title>early_lint_checks (129,171 samples, 0.38%)</title><rect x="86.6612%" y="261" width="0.3751%" height="15" fill="rgb(222,22,37)"/><text x="86.9112%" y="271.50"></text></g><g><title>free_global_ctxt (1,845,131 samples, 5.36%)</title><rect x="87.0363%" y="261" width="5.3575%" height="15" fill="rgb(237,53,32)"/><text x="87.2863%" y="271.50">free_gl..</text></g><g><title>crate_hash (81,351 samples, 0.24%)</title><rect x="92.6919%" y="245" width="0.2362%" height="15" fill="rgb(233,25,53)"/><text x="92.9419%" y="255.50"></text></g><g><title>generate_crate_metadata (188,192 samples, 0.55%)</title><rect x="92.3937%" y="261" width="0.5464%" height="15" fill="rgb(210,40,34)"/><text x="92.6437%" y="271.50"></text></g><g><title>hir_lowering (419,115 samples, 1.22%)</title><rect x="92.9402%" y="261" width="1.2169%" height="15" fill="rgb(241,220,44)"/><text x="93.1902%" y="271.50"></text></g><g><title>link (44,750 samples, 0.13%)</title><rect x="94.1571%" y="261" width="0.1299%" height="15" fill="rgb(235,28,35)"/><text x="94.4071%" y="271.50"></text></g><g><title>parse_crate (895,340 samples, 2.60%)</title><rect x="94.2870%" y="261" width="2.5997%" height="15" fill="rgb(210,56,17)"/><text x="94.5370%" y="271.50">pa..</text></g><g><title>prepare_outputs (309,654 samples, 0.90%)</title><rect x="96.9128%" y="261" width="0.8991%" height="15" fill="rgb(224,130,29)"/><text x="97.1628%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (324,344 samples, 0.94%)</title><rect x="97.8119%" y="261" width="0.9418%" height="15" fill="rgb(235,212,8)"/><text x="98.0619%" y="271.50"></text></g><g><title>setup_global_ctxt (134,502 samples, 0.39%)</title><rect x="98.7855%" y="261" width="0.3905%" height="15" fill="rgb(223,33,50)"/><text x="99.0355%" y="271.50"></text></g><g><title>all (34,440,446 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(219,149,13)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (34,440,446 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(250,156,29)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (283,763 samples, 0.82%)</title><rect x="99.1761%" y="261" width="0.8239%" height="15" fill="rgb(216,193,19)"/><text x="99.4261%" y="271.50"></text></g></svg></svg>