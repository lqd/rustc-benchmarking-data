<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (59,041 samples, 0.14%)</title><rect x="5.5922%" y="197" width="0.1367%" height="15" fill="rgb(227,0,7)"/><text x="5.8422%" y="207.50"></text></g><g><title>item_attrs (65,251 samples, 0.15%)</title><rect x="5.9200%" y="165" width="0.1511%" height="15" fill="rgb(217,0,24)"/><text x="6.1700%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (63,551 samples, 0.15%)</title><rect x="5.9240%" y="149" width="0.1471%" height="15" fill="rgb(221,193,54)"/><text x="6.1740%" y="159.50"></text></g><g><title>codegen_fn_attrs (84,231 samples, 0.20%)</title><rect x="5.8821%" y="181" width="0.1950%" height="15" fill="rgb(248,212,6)"/><text x="6.1321%" y="191.50"></text></g><g><title>adt_drop_tys (140,812 samples, 0.33%)</title><rect x="6.7273%" y="149" width="0.3260%" height="15" fill="rgb(208,68,35)"/><text x="6.9773%" y="159.50"></text></g><g><title>is_copy_raw (271,283 samples, 0.63%)</title><rect x="7.0533%" y="149" width="0.6281%" height="15" fill="rgb(232,128,0)"/><text x="7.3033%" y="159.50"></text></g><g><title>evaluate_obligation (256,753 samples, 0.59%)</title><rect x="7.0869%" y="133" width="0.5945%" height="15" fill="rgb(207,160,47)"/><text x="7.3369%" y="143.50"></text></g><g><title>trait_impls_of (115,881 samples, 0.27%)</title><rect x="7.4131%" y="117" width="0.2683%" height="15" fill="rgb(228,23,34)"/><text x="7.6631%" y="127.50"></text></g><g><title>needs_drop_raw (445,555 samples, 1.03%)</title><rect x="6.6900%" y="165" width="1.0316%" height="15" fill="rgb(218,30,26)"/><text x="6.9400%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (112,220 samples, 0.26%)</title><rect x="7.8435%" y="149" width="0.2598%" height="15" fill="rgb(220,122,19)"/><text x="8.0935%" y="159.50"></text></g><g><title>impl_parent (609,009 samples, 1.41%)</title><rect x="9.8508%" y="133" width="1.4101%" height="15" fill="rgb(250,228,42)"/><text x="10.1008%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (423,907 samples, 0.98%)</title><rect x="10.2793%" y="117" width="0.9815%" height="15" fill="rgb(240,193,28)"/><text x="10.5293%" y="127.50"></text></g><g><title>specialization_graph_of (3,359,768 samples, 7.78%)</title><rect x="8.1326%" y="149" width="7.7791%" height="15" fill="rgb(216,20,37)"/><text x="8.3826%" y="159.50">specializat..</text></g><g><title>impl_trait_ref (2,008,691 samples, 4.65%)</title><rect x="11.2608%" y="133" width="4.6508%" height="15" fill="rgb(206,188,39)"/><text x="11.5108%" y="143.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,834,420 samples, 4.25%)</title><rect x="11.6643%" y="117" width="4.2473%" height="15" fill="rgb(217,207,13)"/><text x="11.9143%" y="127.50">metad..</text></g><g><title>resolve_instance (3,553,760 samples, 8.23%)</title><rect x="7.7216%" y="165" width="8.2282%" height="15" fill="rgb(231,73,38)"/><text x="7.9716%" y="175.50">resolve_ins..</text></g><g><title>thir_body (89,671 samples, 0.21%)</title><rect x="15.9535%" y="165" width="0.2076%" height="15" fill="rgb(225,20,46)"/><text x="16.2035%" y="175.50"></text></g><g><title>mir_const (4,665,392 samples, 10.80%)</title><rect x="5.3609%" y="213" width="10.8021%" height="15" fill="rgb(210,31,41)"/><text x="5.6109%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (4,506,471 samples, 10.43%)</title><rect x="5.7289%" y="197" width="10.4341%" height="15" fill="rgb(221,200,47)"/><text x="5.9789%" y="207.50">unsafety_check_..</text></g><g><title>mir_built (4,356,069 samples, 10.09%)</title><rect x="6.0771%" y="181" width="10.0859%" height="15" fill="rgb(226,26,5)"/><text x="6.3271%" y="191.50">mir_built</text></g><g><title>mir_promoted (4,813,694 samples, 11.15%)</title><rect x="5.0288%" y="229" width="11.1454%" height="15" fill="rgb(249,33,26)"/><text x="5.2788%" y="239.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (53,351 samples, 0.12%)</title><rect x="16.1827%" y="229" width="0.1235%" height="15" fill="rgb(235,183,28)"/><text x="16.4327%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (122,440 samples, 0.28%)</title><rect x="16.3062%" y="229" width="0.2835%" height="15" fill="rgb(221,5,38)"/><text x="16.5562%" y="239.50"></text></g><g><title>normalize_projection_ty (75,220 samples, 0.17%)</title><rect x="16.4155%" y="213" width="0.1742%" height="15" fill="rgb(247,18,42)"/><text x="16.6655%" y="223.50"></text></g><g><title>type_op_prove_predicate (415,026 samples, 0.96%)</title><rect x="16.6868%" y="229" width="0.9609%" height="15" fill="rgb(241,131,45)"/><text x="16.9368%" y="239.50"></text></g><g><title>MIR_borrow_checking (6,861,687 samples, 15.89%)</title><rect x="1.7791%" y="261" width="15.8873%" height="15" fill="rgb(249,31,29)"/><text x="2.0291%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,858,877 samples, 15.88%)</title><rect x="1.7856%" y="245" width="15.8808%" height="15" fill="rgb(225,111,53)"/><text x="2.0356%" y="255.50">mir_borrowck</text></g><g><title>hir_module_items (118,121 samples, 0.27%)</title><rect x="17.6763%" y="261" width="0.2735%" height="15" fill="rgb(238,160,17)"/><text x="17.9263%" y="271.50"></text></g><g><title>get_lang_items (74,111 samples, 0.17%)</title><rect x="18.3100%" y="213" width="0.1716%" height="15" fill="rgb(214,148,48)"/><text x="18.5600%" y="223.50"></text></g><g><title>codegen_fn_attrs (191,232 samples, 0.44%)</title><rect x="18.1569%" y="229" width="0.4428%" height="15" fill="rgb(232,36,49)"/><text x="18.4069%" y="239.50"></text></g><g><title>check_mod_attrs (254,403 samples, 0.59%)</title><rect x="18.0111%" y="245" width="0.5890%" height="15" fill="rgb(209,103,24)"/><text x="18.2611%" y="255.50"></text></g><g><title>lookup_stability (45,231 samples, 0.10%)</title><rect x="18.9409%" y="229" width="0.1047%" height="15" fill="rgb(229,88,8)"/><text x="19.1909%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (162,732 samples, 0.38%)</title><rect x="18.7031%" y="245" width="0.3768%" height="15" fill="rgb(213,181,19)"/><text x="18.9531%" y="255.50"></text></g><g><title>misc_checking_1 (524,796 samples, 1.22%)</title><rect x="17.9509%" y="261" width="1.2151%" height="15" fill="rgb(254,191,54)"/><text x="18.2009%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (78,351 samples, 0.18%)</title><rect x="19.1694%" y="245" width="0.1814%" height="15" fill="rgb(241,83,37)"/><text x="19.4194%" y="255.50"></text></g><g><title>check_mod_liveness (64,911 samples, 0.15%)</title><rect x="19.2005%" y="229" width="0.1503%" height="15" fill="rgb(233,36,39)"/><text x="19.4505%" y="239.50"></text></g><g><title>misc_checking_2 (164,042 samples, 0.38%)</title><rect x="19.1660%" y="261" width="0.3798%" height="15" fill="rgb(226,3,54)"/><text x="19.4160%" y="271.50"></text></g><g><title>match_checking (84,251 samples, 0.20%)</title><rect x="19.3508%" y="245" width="0.1951%" height="15" fill="rgb(245,192,40)"/><text x="19.6008%" y="255.50"></text></g><g><title>check_match (82,221 samples, 0.19%)</title><rect x="19.3555%" y="229" width="0.1904%" height="15" fill="rgb(238,167,29)"/><text x="19.6055%" y="239.50"></text></g><g><title>death_checking (61,131 samples, 0.14%)</title><rect x="19.5967%" y="245" width="0.1415%" height="15" fill="rgb(232,182,51)"/><text x="19.8467%" y="255.50"></text></g><g><title>crate_lints (72,941 samples, 0.17%)</title><rect x="19.7417%" y="229" width="0.1689%" height="15" fill="rgb(231,60,39)"/><text x="19.9917%" y="239.50"></text></g><g><title>lint_checking (116,272 samples, 0.27%)</title><rect x="19.7383%" y="245" width="0.2692%" height="15" fill="rgb(208,69,12)"/><text x="19.9883%" y="255.50"></text></g><g><title>privacy_checking_modules (57,150 samples, 0.13%)</title><rect x="20.0782%" y="245" width="0.1323%" height="15" fill="rgb(235,93,37)"/><text x="20.3282%" y="255.50"></text></g><g><title>check_mod_privacy (55,620 samples, 0.13%)</title><rect x="20.0817%" y="229" width="0.1288%" height="15" fill="rgb(213,116,39)"/><text x="20.3317%" y="239.50"></text></g><g><title>misc_checking_3 (310,733 samples, 0.72%)</title><rect x="19.5459%" y="261" width="0.7195%" height="15" fill="rgb(222,207,29)"/><text x="19.7959%" y="271.50"></text></g><g><title>adt_def (95,960 samples, 0.22%)</title><rect x="33.2499%" y="181" width="0.2222%" height="15" fill="rgb(206,96,30)"/><text x="33.4999%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (93,320 samples, 0.22%)</title><rect x="33.2560%" y="165" width="0.2161%" height="15" fill="rgb(218,138,4)"/><text x="33.5060%" y="175.50"></text></g><g><title>item_attrs (58,940 samples, 0.14%)</title><rect x="33.3356%" y="149" width="0.1365%" height="15" fill="rgb(250,191,14)"/><text x="33.5856%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (55,990 samples, 0.13%)</title><rect x="33.3425%" y="133" width="0.1296%" height="15" fill="rgb(239,60,40)"/><text x="33.5925%" y="143.50"></text></g><g><title>adt_sized_constraint (142,890 samples, 0.33%)</title><rect x="33.2156%" y="197" width="0.3308%" height="15" fill="rgb(206,27,48)"/><text x="33.4656%" y="207.50"></text></g><g><title>associated_item (685,836 samples, 1.59%)</title><rect x="34.2667%" y="181" width="1.5880%" height="15" fill="rgb(225,35,8)"/><text x="34.5167%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (492,674 samples, 1.14%)</title><rect x="34.7140%" y="165" width="1.1407%" height="15" fill="rgb(250,213,24)"/><text x="34.9640%" y="175.50"></text></g><g><title>associated_items (1,034,579 samples, 2.40%)</title><rect x="33.5603%" y="197" width="2.3954%" height="15" fill="rgb(247,123,22)"/><text x="33.8103%" y="207.50">as..</text></g><g><title>associated_item_def_ids (43,630 samples, 0.10%)</title><rect x="35.8547%" y="181" width="0.1010%" height="15" fill="rgb(231,138,38)"/><text x="36.1047%" y="191.50"></text></g><g><title>impl_parent (134,421 samples, 0.31%)</title><rect x="37.3272%" y="53" width="0.3112%" height="15" fill="rgb(231,145,46)"/><text x="37.5772%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (96,811 samples, 0.22%)</title><rect x="37.4143%" y="37" width="0.2242%" height="15" fill="rgb(251,118,11)"/><text x="37.6643%" y="47.50"></text></g><g><title>impl_trait_ref (453,654 samples, 1.05%)</title><rect x="37.6385%" y="53" width="1.0504%" height="15" fill="rgb(217,147,25)"/><text x="37.8885%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (412,454 samples, 0.95%)</title><rect x="37.7338%" y="37" width="0.9550%" height="15" fill="rgb(247,81,37)"/><text x="37.9838%" y="47.50"></text></g><g><title>coherent_trait (802,199 samples, 1.86%)</title><rect x="36.9371%" y="85" width="1.8574%" height="15" fill="rgb(209,12,38)"/><text x="37.1871%" y="95.50">c..</text></g><g><title>specialization_graph_of (794,019 samples, 1.84%)</title><rect x="36.9560%" y="69" width="1.8384%" height="15" fill="rgb(227,1,9)"/><text x="37.2060%" y="79.50">s..</text></g><g><title>trait_impls_of (45,621 samples, 0.11%)</title><rect x="38.6888%" y="53" width="0.1056%" height="15" fill="rgb(248,47,43)"/><text x="38.9388%" y="63.50"></text></g><g><title>adt_destructor (812,829 samples, 1.88%)</title><rect x="36.9185%" y="117" width="1.8820%" height="15" fill="rgb(221,10,30)"/><text x="37.1685%" y="127.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (811,159 samples, 1.88%)</title><rect x="36.9224%" y="101" width="1.8781%" height="15" fill="rgb(210,229,1)"/><text x="37.1724%" y="111.50">m..</text></g><g><title>adt_def (60,201 samples, 0.14%)</title><rect x="38.8080%" y="101" width="0.1394%" height="15" fill="rgb(222,148,37)"/><text x="39.0580%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (59,781 samples, 0.14%)</title><rect x="38.8089%" y="85" width="0.1384%" height="15" fill="rgb(234,67,33)"/><text x="39.0589%" y="95.50"></text></g><g><title>item_attrs (56,851 samples, 0.13%)</title><rect x="38.8157%" y="69" width="0.1316%" height="15" fill="rgb(247,98,35)"/><text x="39.0657%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (56,371 samples, 0.13%)</title><rect x="38.8168%" y="53" width="0.1305%" height="15" fill="rgb(247,138,52)"/><text x="39.0668%" y="63.50"></text></g><g><title>adt_dtorck_constraint (66,651 samples, 0.15%)</title><rect x="38.8005%" y="117" width="0.1543%" height="15" fill="rgb(213,79,30)"/><text x="39.0505%" y="127.50"></text></g><g><title>adt_dtorck_constraint (918,160 samples, 2.13%)</title><rect x="36.8390%" y="133" width="2.1259%" height="15" fill="rgb(246,177,23)"/><text x="37.0890%" y="143.50">a..</text></g><g><title>adt_dtorck_constraint (985,361 samples, 2.28%)</title><rect x="36.7109%" y="149" width="2.2815%" height="15" fill="rgb(230,62,27)"/><text x="36.9609%" y="159.50">a..</text></g><g><title>adt_dtorck_constraint (1,025,893 samples, 2.38%)</title><rect x="36.6545%" y="165" width="2.3753%" height="15" fill="rgb(216,154,8)"/><text x="36.9045%" y="175.50">ad..</text></g><g><title>adt_dtorck_constraint (1,155,324 samples, 2.67%)</title><rect x="36.4687%" y="181" width="2.6750%" height="15" fill="rgb(244,35,45)"/><text x="36.7187%" y="191.50">ad..</text></g><g><title>dropck_outlives (1,411,297 samples, 3.27%)</title><rect x="36.0665%" y="197" width="3.2677%" height="15" fill="rgb(251,115,12)"/><text x="36.3165%" y="207.50">dro..</text></g><g><title>normalize_projection_ty (82,261 samples, 0.19%)</title><rect x="39.1437%" y="181" width="0.1905%" height="15" fill="rgb(240,54,50)"/><text x="39.3937%" y="191.50"></text></g><g><title>adt_def (220,704 samples, 0.51%)</title><rect x="41.3111%" y="165" width="0.5110%" height="15" fill="rgb(233,84,52)"/><text x="41.5611%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (215,974 samples, 0.50%)</title><rect x="41.3221%" y="149" width="0.5001%" height="15" fill="rgb(207,117,47)"/><text x="41.5721%" y="159.50"></text></g><g><title>item_attrs (158,253 samples, 0.37%)</title><rect x="41.4557%" y="133" width="0.3664%" height="15" fill="rgb(249,43,39)"/><text x="41.7057%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (153,203 samples, 0.35%)</title><rect x="41.4674%" y="117" width="0.3547%" height="15" fill="rgb(209,38,44)"/><text x="41.7174%" y="127.50"></text></g><g><title>adt_def (146,852 samples, 0.34%)</title><rect x="41.8333%" y="149" width="0.3400%" height="15" fill="rgb(236,212,23)"/><text x="42.0833%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (145,802 samples, 0.34%)</title><rect x="41.8358%" y="133" width="0.3376%" height="15" fill="rgb(242,79,21)"/><text x="42.0858%" y="143.50"></text></g><g><title>item_attrs (136,322 samples, 0.32%)</title><rect x="41.8577%" y="117" width="0.3156%" height="15" fill="rgb(211,96,35)"/><text x="42.1077%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (134,952 samples, 0.31%)</title><rect x="41.8609%" y="101" width="0.3125%" height="15" fill="rgb(253,215,40)"/><text x="42.1109%" y="111.50"></text></g><g><title>adt_sized_constraint (176,262 samples, 0.41%)</title><rect x="41.8222%" y="165" width="0.4081%" height="15" fill="rgb(211,81,21)"/><text x="42.0722%" y="175.50"></text></g><g><title>adt_sized_constraint (436,916 samples, 1.01%)</title><rect x="41.2598%" y="181" width="1.0116%" height="15" fill="rgb(208,190,38)"/><text x="41.5098%" y="191.50"></text></g><g><title>impl_trait_ref (200,613 samples, 0.46%)</title><rect x="42.4148%" y="181" width="0.4645%" height="15" fill="rgb(235,213,38)"/><text x="42.6648%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (175,362 samples, 0.41%)</title><rect x="42.4733%" y="165" width="0.4060%" height="15" fill="rgb(237,122,38)"/><text x="42.7233%" y="175.50"></text></g><g><title>explicit_predicates_of (84,991 samples, 0.20%)</title><rect x="43.0366%" y="149" width="0.1968%" height="15" fill="rgb(244,218,35)"/><text x="43.2866%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (78,161 samples, 0.18%)</title><rect x="43.0524%" y="133" width="0.1810%" height="15" fill="rgb(240,68,47)"/><text x="43.3024%" y="143.50"></text></g><g><title>predicates_of (150,432 samples, 0.35%)</title><rect x="42.9091%" y="181" width="0.3483%" height="15" fill="rgb(210,16,53)"/><text x="43.1591%" y="191.50"></text></g><g><title>predicates_defined_on (115,042 samples, 0.27%)</title><rect x="42.9911%" y="165" width="0.2664%" height="15" fill="rgb(235,124,12)"/><text x="43.2411%" y="175.50"></text></g><g><title>evaluate_obligation (2,979,166 samples, 6.90%)</title><rect x="39.3341%" y="197" width="6.8978%" height="15" fill="rgb(224,169,11)"/><text x="39.5841%" y="207.50">evaluate_..</text></g><g><title>trait_impls_of (1,270,315 samples, 2.94%)</title><rect x="43.2907%" y="181" width="2.9412%" height="15" fill="rgb(250,166,2)"/><text x="43.5407%" y="191.50">tr..</text></g><g><title>implementations_of_trait (370,984 samples, 0.86%)</title><rect x="45.3730%" y="165" width="0.8590%" height="15" fill="rgb(242,216,29)"/><text x="45.6230%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (259,994 samples, 0.60%)</title><rect x="45.6300%" y="149" width="0.6020%" height="15" fill="rgb(230,116,27)"/><text x="45.8800%" y="159.50"></text></g><g><title>fn_sig (176,253 samples, 0.41%)</title><rect x="46.3048%" y="197" width="0.4081%" height="15" fill="rgb(228,99,48)"/><text x="46.5548%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (164,893 samples, 0.38%)</title><rect x="46.3311%" y="181" width="0.3818%" height="15" fill="rgb(253,11,6)"/><text x="46.5811%" y="191.50"></text></g><g><title>generics_of (121,280 samples, 0.28%)</title><rect x="46.7129%" y="197" width="0.2808%" height="15" fill="rgb(247,143,39)"/><text x="46.9629%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (94,510 samples, 0.22%)</title><rect x="46.7749%" y="181" width="0.2188%" height="15" fill="rgb(236,97,10)"/><text x="47.0249%" y="191.50"></text></g><g><title>impl_item_implementor_ids (53,590 samples, 0.12%)</title><rect x="46.9937%" y="197" width="0.1241%" height="15" fill="rgb(233,208,19)"/><text x="47.2437%" y="207.50"></text></g><g><title>associated_items (45,700 samples, 0.11%)</title><rect x="47.0120%" y="181" width="0.1058%" height="15" fill="rgb(216,164,2)"/><text x="47.2620%" y="191.50"></text></g><g><title>impl_trait_ref (146,151 samples, 0.34%)</title><rect x="47.1417%" y="197" width="0.3384%" height="15" fill="rgb(220,129,5)"/><text x="47.3917%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (130,701 samples, 0.30%)</title><rect x="47.1775%" y="181" width="0.3026%" height="15" fill="rgb(242,17,10)"/><text x="47.4275%" y="191.50"></text></g><g><title>item_attrs (81,201 samples, 0.19%)</title><rect x="47.5472%" y="197" width="0.1880%" height="15" fill="rgb(242,107,0)"/><text x="47.7972%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (77,221 samples, 0.18%)</title><rect x="47.5564%" y="181" width="0.1788%" height="15" fill="rgb(251,28,31)"/><text x="47.8064%" y="191.50"></text></g><g><title>layout_of (53,350 samples, 0.12%)</title><rect x="47.7352%" y="197" width="0.1235%" height="15" fill="rgb(233,223,10)"/><text x="47.9852%" y="207.50"></text></g><g><title>evaluate_obligation (206,523 samples, 0.48%)</title><rect x="48.2709%" y="181" width="0.4782%" height="15" fill="rgb(215,21,27)"/><text x="48.5209%" y="191.50"></text></g><g><title>method_autoderef_steps (418,435 samples, 0.97%)</title><rect x="47.9112%" y="197" width="0.9688%" height="15" fill="rgb(232,23,21)"/><text x="48.1612%" y="207.50"></text></g><g><title>explicit_predicates_of (329,993 samples, 0.76%)</title><rect x="49.4886%" y="165" width="0.7641%" height="15" fill="rgb(244,5,23)"/><text x="49.7386%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (301,813 samples, 0.70%)</title><rect x="49.5538%" y="149" width="0.6988%" height="15" fill="rgb(226,81,46)"/><text x="49.8038%" y="159.50"></text></g><g><title>predicates_of (655,348 samples, 1.52%)</title><rect x="48.9334%" y="197" width="1.5174%" height="15" fill="rgb(247,70,30)"/><text x="49.1834%" y="207.50"></text></g><g><title>predicates_defined_on (517,005 samples, 1.20%)</title><rect x="49.2537%" y="181" width="1.1971%" height="15" fill="rgb(212,68,19)"/><text x="49.5037%" y="191.50"></text></g><g><title>inferred_outlives_of (85,560 samples, 0.20%)</title><rect x="50.2527%" y="165" width="0.1981%" height="15" fill="rgb(240,187,13)"/><text x="50.5027%" y="175.50"></text></g><g><title>metadata_decode_entry_inferred_outlives_of (53,560 samples, 0.12%)</title><rect x="50.3267%" y="149" width="0.1240%" height="15" fill="rgb(223,113,26)"/><text x="50.5767%" y="159.50"></text></g><g><title>super_predicates_of (44,781 samples, 0.10%)</title><rect x="50.4508%" y="197" width="0.1037%" height="15" fill="rgb(206,192,2)"/><text x="50.7008%" y="207.50"></text></g><g><title>trait_impls_of (46,390 samples, 0.11%)</title><rect x="50.5833%" y="197" width="0.1074%" height="15" fill="rgb(241,108,4)"/><text x="50.8333%" y="207.50"></text></g><g><title>type_of (134,942 samples, 0.31%)</title><rect x="50.6907%" y="197" width="0.3124%" height="15" fill="rgb(247,173,49)"/><text x="50.9407%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (119,122 samples, 0.28%)</title><rect x="50.7273%" y="181" width="0.2758%" height="15" fill="rgb(224,114,35)"/><text x="50.9773%" y="191.50"></text></g><g><title>item_bodies_checking (13,256,410 samples, 30.69%)</title><rect x="20.3961%" y="245" width="30.6933%" height="15" fill="rgb(245,159,27)"/><text x="20.6461%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,253,660 samples, 30.69%)</title><rect x="20.4025%" y="229" width="30.6870%" height="15" fill="rgb(245,172,44)"/><text x="20.6525%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (13,247,960 samples, 30.67%)</title><rect x="20.4157%" y="213" width="30.6738%" height="15" fill="rgb(236,23,11)"/><text x="20.6657%" y="223.50">typeck</text></g><g><title>fn_sig (57,831 samples, 0.13%)</title><rect x="51.2381%" y="213" width="0.1339%" height="15" fill="rgb(205,117,38)"/><text x="51.4881%" y="223.50"></text></g><g><title>named_region_map (79,951 samples, 0.19%)</title><rect x="51.4294%" y="197" width="0.1851%" height="15" fill="rgb(237,72,25)"/><text x="51.6794%" y="207.50"></text></g><g><title>resolve_lifetimes (74,771 samples, 0.17%)</title><rect x="51.4414%" y="181" width="0.1731%" height="15" fill="rgb(244,70,9)"/><text x="51.6914%" y="191.50"></text></g><g><title>generics_of (118,542 samples, 0.27%)</title><rect x="51.3720%" y="213" width="0.2745%" height="15" fill="rgb(217,125,39)"/><text x="51.6220%" y="223.50"></text></g><g><title>type_collecting (294,323 samples, 0.68%)</title><rect x="51.1043%" y="245" width="0.6815%" height="15" fill="rgb(235,36,10)"/><text x="51.3543%" y="255.50"></text></g><g><title>collect_mod_item_types (277,203 samples, 0.64%)</title><rect x="51.1439%" y="229" width="0.6418%" height="15" fill="rgb(251,123,47)"/><text x="51.3939%" y="239.50"></text></g><g><title>implied_outlives_bounds (130,261 samples, 0.30%)</title><rect x="52.6739%" y="213" width="0.3016%" height="15" fill="rgb(221,13,13)"/><text x="52.9239%" y="223.50"></text></g><g><title>param_env (190,212 samples, 0.44%)</title><rect x="52.9755%" y="213" width="0.4404%" height="15" fill="rgb(238,131,9)"/><text x="53.2255%" y="223.50"></text></g><g><title>analysis (22,490,523 samples, 52.07%)</title><rect x="1.4521%" y="277" width="52.0736%" height="15" fill="rgb(211,50,8)"/><text x="1.7021%" y="287.50">analysis</text></g><g><title>type_check_crate (14,365,112 samples, 33.26%)</title><rect x="20.2653%" y="261" width="33.2604%" height="15" fill="rgb(245,182,24)"/><text x="20.5153%" y="271.50">type_check_crate</text></g><g><title>wf_checking (750,828 samples, 1.74%)</title><rect x="51.7873%" y="245" width="1.7384%" height="15" fill="rgb(242,14,37)"/><text x="52.0373%" y="255.50"></text></g><g><title>check_item_well_formed (722,748 samples, 1.67%)</title><rect x="51.8523%" y="229" width="1.6734%" height="15" fill="rgb(246,228,12)"/><text x="52.1023%" y="239.50"></text></g><g><title>region_scope_tree (47,420 samples, 0.11%)</title><rect x="53.4159%" y="213" width="0.1098%" height="15" fill="rgb(213,55,15)"/><text x="53.6659%" y="223.50"></text></g><g><title>codegen_crate (362,264 samples, 0.84%)</title><rect x="53.5497%" y="277" width="0.8388%" height="15" fill="rgb(209,9,3)"/><text x="53.7997%" y="287.50"></text></g><g><title>AST_validation (47,350 samples, 0.11%)</title><rect x="54.9087%" y="261" width="0.1096%" height="15" fill="rgb(230,59,30)"/><text x="55.1587%" y="271.50"></text></g><g><title>crate_injection (94,131 samples, 0.22%)</title><rect x="55.0538%" y="261" width="0.2179%" height="15" fill="rgb(209,121,21)"/><text x="55.3038%" y="271.50"></text></g><g><title>metadata_load_macro (113,222 samples, 0.26%)</title><rect x="77.3421%" y="229" width="0.2621%" height="15" fill="rgb(220,109,13)"/><text x="77.5921%" y="239.50"></text></g><g><title>macro_expand_crate (12,285,219 samples, 28.44%)</title><rect x="55.2718%" y="261" width="28.4447%" height="15" fill="rgb(232,18,1)"/><text x="55.5218%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (12,260,328 samples, 28.39%)</title><rect x="55.3294%" y="245" width="28.3871%" height="15" fill="rgb(215,41,42)"/><text x="55.5794%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,639,849 samples, 6.11%)</title><rect x="77.6043%" y="229" width="6.1122%" height="15" fill="rgb(224,123,36)"/><text x="77.8543%" y="239.50">metadata..</text></g><g><title>metadata_register_crate (960,259 samples, 2.22%)</title><rect x="81.4931%" y="213" width="2.2233%" height="15" fill="rgb(240,125,3)"/><text x="81.7431%" y="223.50">m..</text></g><g><title>metadata_register_crate (80,240 samples, 0.19%)</title><rect x="83.5307%" y="197" width="0.1858%" height="15" fill="rgb(205,98,50)"/><text x="83.7807%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (69,421 samples, 0.16%)</title><rect x="83.7261%" y="261" width="0.1607%" height="15" fill="rgb(205,185,37)"/><text x="83.9761%" y="271.50"></text></g><g><title>finalize_imports (364,144 samples, 0.84%)</title><rect x="83.9096%" y="245" width="0.8431%" height="15" fill="rgb(238,207,15)"/><text x="84.1596%" y="255.50"></text></g><g><title>late_resolve_crate (1,524,897 samples, 3.53%)</title><rect x="84.7990%" y="245" width="3.5307%" height="15" fill="rgb(213,199,42)"/><text x="85.0490%" y="255.50">lat..</text></g><g><title>configure_and_expand (14,694,506 samples, 34.02%)</title><rect x="54.3885%" y="277" width="34.0231%" height="15" fill="rgb(235,201,11)"/><text x="54.6385%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (1,954,232 samples, 4.52%)</title><rect x="83.8868%" y="261" width="4.5247%" height="15" fill="rgb(207,46,11)"/><text x="84.1368%" y="271.50">resol..</text></g><g><title>early_lint_checks (76,961 samples, 0.18%)</title><rect x="88.5182%" y="277" width="0.1782%" height="15" fill="rgb(241,35,35)"/><text x="88.7682%" y="287.50"></text></g><g><title>free_global_ctxt (2,276,475 samples, 5.27%)</title><rect x="88.6964%" y="277" width="5.2709%" height="15" fill="rgb(243,32,47)"/><text x="88.9464%" y="287.50">free_g..</text></g><g><title>crate_hash (67,110 samples, 0.16%)</title><rect x="94.3303%" y="261" width="0.1554%" height="15" fill="rgb(247,202,23)"/><text x="94.5803%" y="271.50"></text></g><g><title>generate_crate_metadata (293,084 samples, 0.68%)</title><rect x="93.9672%" y="277" width="0.6786%" height="15" fill="rgb(219,102,11)"/><text x="94.2172%" y="287.50"></text></g><g><title>hir_lowering (516,446 samples, 1.20%)</title><rect x="94.6458%" y="277" width="1.1958%" height="15" fill="rgb(243,110,44)"/><text x="94.8958%" y="287.50"></text></g><g><title>link (45,731 samples, 0.11%)</title><rect x="95.8416%" y="277" width="0.1059%" height="15" fill="rgb(222,74,54)"/><text x="96.0916%" y="287.50"></text></g><g><title>parse_crate (586,707 samples, 1.36%)</title><rect x="95.9475%" y="277" width="1.3584%" height="15" fill="rgb(216,99,12)"/><text x="96.1975%" y="287.50"></text></g><g><title>prepare_outputs (318,943 samples, 0.74%)</title><rect x="97.3291%" y="277" width="0.7385%" height="15" fill="rgb(226,22,26)"/><text x="97.5791%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (415,074 samples, 0.96%)</title><rect x="98.0676%" y="277" width="0.9610%" height="15" fill="rgb(217,163,10)"/><text x="98.3176%" y="287.50"></text></g><g><title>setup_global_ctxt (131,732 samples, 0.31%)</title><rect x="99.0556%" y="277" width="0.3050%" height="15" fill="rgb(213,25,53)"/><text x="99.3056%" y="287.50"></text></g><g><title>all (43,189,846 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (43,189,846 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (276,153 samples, 0.64%)</title><rect x="99.3606%" y="277" width="0.6394%" height="15" fill="rgb(229,68,48)"/><text x="99.6106%" y="287.50"></text></g></svg></svg>