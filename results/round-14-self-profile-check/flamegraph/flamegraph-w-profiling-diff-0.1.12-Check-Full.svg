<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (177,723 samples, 0.21%)</title><rect x="8.0491%" y="117" width="0.2085%" height="15" fill="rgb(227,0,7)"/><text x="8.2991%" y="127.50"></text></g><g><title>item_attrs (198,492 samples, 0.23%)</title><rect x="8.5619%" y="85" width="0.2329%" height="15" fill="rgb(217,0,24)"/><text x="8.8119%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (193,092 samples, 0.23%)</title><rect x="8.5682%" y="69" width="0.2266%" height="15" fill="rgb(221,193,54)"/><text x="8.8182%" y="79.50"></text></g><g><title>codegen_fn_attrs (261,184 samples, 0.31%)</title><rect x="8.4980%" y="101" width="0.3065%" height="15" fill="rgb(248,212,6)"/><text x="8.7480%" y="111.50"></text></g><g><title>is_copy_raw (205,023 samples, 0.24%)</title><rect x="10.5149%" y="53" width="0.2406%" height="15" fill="rgb(208,68,35)"/><text x="10.7649%" y="63.50"></text></g><g><title>evaluate_obligation (173,843 samples, 0.20%)</title><rect x="10.5515%" y="37" width="0.2040%" height="15" fill="rgb(232,128,0)"/><text x="10.8015%" y="47.50"></text></g><g><title>param_env (96,462 samples, 0.11%)</title><rect x="10.7554%" y="53" width="0.1132%" height="15" fill="rgb(207,160,47)"/><text x="11.0054%" y="63.50"></text></g><g><title>adt_drop_tys (389,275 samples, 0.46%)</title><rect x="10.4656%" y="69" width="0.4568%" height="15" fill="rgb(228,23,34)"/><text x="10.7156%" y="79.50"></text></g><g><title>is_copy_raw (282,153 samples, 0.33%)</title><rect x="10.9224%" y="69" width="0.3311%" height="15" fill="rgb(218,30,26)"/><text x="11.1724%" y="79.50"></text></g><g><title>evaluate_obligation (219,143 samples, 0.26%)</title><rect x="10.9963%" y="53" width="0.2571%" height="15" fill="rgb(220,122,19)"/><text x="11.2463%" y="63.50"></text></g><g><title>needs_drop_raw (769,740 samples, 0.90%)</title><rect x="10.3713%" y="85" width="0.9032%" height="15" fill="rgb(250,228,42)"/><text x="10.6213%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (324,224 samples, 0.38%)</title><rect x="11.3791%" y="69" width="0.3804%" height="15" fill="rgb(240,193,28)"/><text x="11.6291%" y="79.50"></text></g><g><title>impl_parent (174,672 samples, 0.20%)</title><rect x="12.1725%" y="53" width="0.2050%" height="15" fill="rgb(216,20,37)"/><text x="12.4225%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (117,501 samples, 0.14%)</title><rect x="12.2396%" y="37" width="0.1379%" height="15" fill="rgb(206,188,39)"/><text x="12.4896%" y="47.50"></text></g><g><title>specialization_graph_of (902,440 samples, 1.06%)</title><rect x="11.7883%" y="69" width="1.0589%" height="15" fill="rgb(217,207,13)"/><text x="12.0383%" y="79.50"></text></g><g><title>impl_trait_ref (400,314 samples, 0.47%)</title><rect x="12.3775%" y="53" width="0.4697%" height="15" fill="rgb(231,73,38)"/><text x="12.6275%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (344,004 samples, 0.40%)</title><rect x="12.4435%" y="37" width="0.4036%" height="15" fill="rgb(225,20,46)"/><text x="12.6935%" y="47.50"></text></g><g><title>resolve_instance (1,372,464 samples, 1.61%)</title><rect x="11.2747%" y="85" width="1.6104%" height="15" fill="rgb(210,31,41)"/><text x="11.5247%" y="95.50"></text></g><g><title>thir_body (449,435 samples, 0.53%)</title><rect x="12.8930%" y="85" width="0.5274%" height="15" fill="rgb(221,200,47)"/><text x="13.1430%" y="95.50"></text></g><g><title>mir_const (4,947,465 samples, 5.81%)</title><rect x="7.6226%" y="133" width="5.8052%" height="15" fill="rgb(226,26,5)"/><text x="7.8726%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (4,406,289 samples, 5.17%)</title><rect x="8.2576%" y="117" width="5.1702%" height="15" fill="rgb(249,33,26)"/><text x="8.5076%" y="127.50">unsafe..</text></g><g><title>mir_built (3,940,293 samples, 4.62%)</title><rect x="8.8044%" y="101" width="4.6234%" height="15" fill="rgb(235,183,28)"/><text x="9.0544%" y="111.50">mir_b..</text></g><g><title>mir_promoted (5,300,458 samples, 6.22%)</title><rect x="7.2219%" y="149" width="6.2194%" height="15" fill="rgb(221,5,38)"/><text x="7.4719%" y="159.50">mir_prom..</text></g><g><title>type_op_normalize_fn_sig (315,854 samples, 0.37%)</title><rect x="13.5378%" y="149" width="0.3706%" height="15" fill="rgb(247,18,42)"/><text x="13.7878%" y="159.50"></text></g><g><title>normalize_projection_ty (230,313 samples, 0.27%)</title><rect x="13.6382%" y="133" width="0.2702%" height="15" fill="rgb(241,131,45)"/><text x="13.8882%" y="143.50"></text></g><g><title>type_op_normalize_predicate (145,001 samples, 0.17%)</title><rect x="13.9084%" y="149" width="0.1701%" height="15" fill="rgb(249,31,29)"/><text x="14.1584%" y="159.50"></text></g><g><title>normalize_projection_ty (109,090 samples, 0.13%)</title><rect x="13.9505%" y="133" width="0.1280%" height="15" fill="rgb(225,111,53)"/><text x="14.2005%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,707,729 samples, 2.00%)</title><rect x="14.0785%" y="149" width="2.0038%" height="15" fill="rgb(238,160,17)"/><text x="14.3285%" y="159.50">t..</text></g><g><title>evaluate_obligation (102,791 samples, 0.12%)</title><rect x="15.9617%" y="133" width="0.1206%" height="15" fill="rgb(214,148,48)"/><text x="16.2117%" y="143.50"></text></g><g><title>MIR_borrow_checking (12,697,232 samples, 14.90%)</title><rect x="1.1869%" y="181" width="14.8985%" height="15" fill="rgb(232,36,49)"/><text x="1.4369%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,674,091 samples, 14.87%)</title><rect x="1.2141%" y="165" width="14.8714%" height="15" fill="rgb(209,103,24)"/><text x="1.4641%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (163,952 samples, 0.19%)</title><rect x="16.0928%" y="181" width="0.1924%" height="15" fill="rgb(229,88,8)"/><text x="16.3428%" y="191.50"></text></g><g><title>get_lang_items (96,251 samples, 0.11%)</title><rect x="16.6306%" y="133" width="0.1129%" height="15" fill="rgb(213,181,19)"/><text x="16.8806%" y="143.50"></text></g><g><title>codegen_fn_attrs (101,681 samples, 0.12%)</title><rect x="16.8312%" y="117" width="0.1193%" height="15" fill="rgb(254,191,54)"/><text x="17.0812%" y="127.50"></text></g><g><title>should_inherit_track_caller (180,443 samples, 0.21%)</title><rect x="16.7435%" y="133" width="0.2117%" height="15" fill="rgb(241,83,37)"/><text x="16.9935%" y="143.50"></text></g><g><title>codegen_fn_attrs (386,895 samples, 0.45%)</title><rect x="16.5447%" y="149" width="0.4540%" height="15" fill="rgb(233,36,39)"/><text x="16.7947%" y="159.50"></text></g><g><title>check_mod_attrs (585,977 samples, 0.69%)</title><rect x="16.3113%" y="165" width="0.6876%" height="15" fill="rgb(226,3,54)"/><text x="16.5613%" y="175.50"></text></g><g><title>lookup_deprecation_entry (119,561 samples, 0.14%)</title><rect x="17.3483%" y="149" width="0.1403%" height="15" fill="rgb(245,192,40)"/><text x="17.5983%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (368,564 samples, 0.43%)</title><rect x="17.1757%" y="165" width="0.4325%" height="15" fill="rgb(238,167,29)"/><text x="17.4257%" y="175.50"></text></g><g><title>misc_checking_1 (1,175,943 samples, 1.38%)</title><rect x="16.2857%" y="181" width="1.3798%" height="15" fill="rgb(232,182,51)"/><text x="16.5357%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (206,432 samples, 0.24%)</title><rect x="17.6672%" y="165" width="0.2422%" height="15" fill="rgb(231,60,39)"/><text x="17.9172%" y="175.50"></text></g><g><title>check_mod_liveness (162,682 samples, 0.19%)</title><rect x="17.7186%" y="149" width="0.1909%" height="15" fill="rgb(208,69,12)"/><text x="17.9686%" y="159.50"></text></g><g><title>misc_checking_2 (541,236 samples, 0.64%)</title><rect x="17.6655%" y="181" width="0.6351%" height="15" fill="rgb(235,93,37)"/><text x="17.9155%" y="191.50"></text></g><g><title>match_checking (333,294 samples, 0.39%)</title><rect x="17.9095%" y="165" width="0.3911%" height="15" fill="rgb(213,116,39)"/><text x="18.1595%" y="175.50"></text></g><g><title>check_match (325,134 samples, 0.38%)</title><rect x="17.9190%" y="149" width="0.3815%" height="15" fill="rgb(222,207,29)"/><text x="18.1690%" y="159.50"></text></g><g><title>death_checking (188,383 samples, 0.22%)</title><rect x="18.3746%" y="165" width="0.2210%" height="15" fill="rgb(206,96,30)"/><text x="18.6246%" y="175.50"></text></g><g><title>item_attrs (97,731 samples, 0.11%)</title><rect x="18.4809%" y="149" width="0.1147%" height="15" fill="rgb(218,138,4)"/><text x="18.7309%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,661 samples, 0.11%)</title><rect x="18.4822%" y="133" width="0.1134%" height="15" fill="rgb(250,191,14)"/><text x="18.7322%" y="143.50"></text></g><g><title>crate_lints (1,571,057 samples, 1.84%)</title><rect x="18.5971%" y="149" width="1.8434%" height="15" fill="rgb(239,60,40)"/><text x="18.8471%" y="159.50">c..</text></g><g><title>type_of (1,048,173 samples, 1.23%)</title><rect x="19.2107%" y="133" width="1.2299%" height="15" fill="rgb(206,27,48)"/><text x="19.4607%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (813,601 samples, 0.95%)</title><rect x="19.4859%" y="117" width="0.9547%" height="15" fill="rgb(225,35,8)"/><text x="19.7359%" y="127.50"></text></g><g><title>lint_checking (1,740,309 samples, 2.04%)</title><rect x="18.5956%" y="165" width="2.0420%" height="15" fill="rgb(250,213,24)"/><text x="18.8456%" y="175.50">l..</text></g><g><title>module_lints (167,942 samples, 0.20%)</title><rect x="20.4406%" y="149" width="0.1971%" height="15" fill="rgb(247,123,22)"/><text x="20.6906%" y="159.50"></text></g><g><title>lint_mod (165,992 samples, 0.19%)</title><rect x="20.4429%" y="133" width="0.1948%" height="15" fill="rgb(231,138,38)"/><text x="20.6929%" y="143.50"></text></g><g><title>privacy_access_levels (86,251 samples, 0.10%)</title><rect x="20.6376%" y="165" width="0.1012%" height="15" fill="rgb(231,145,46)"/><text x="20.8876%" y="175.50"></text></g><g><title>privacy_checking_modules (337,764 samples, 0.40%)</title><rect x="20.7388%" y="165" width="0.3963%" height="15" fill="rgb(251,118,11)"/><text x="20.9888%" y="175.50"></text></g><g><title>check_mod_privacy (336,544 samples, 0.39%)</title><rect x="20.7403%" y="149" width="0.3949%" height="15" fill="rgb(217,147,25)"/><text x="20.9903%" y="159.50"></text></g><g><title>misc_checking_3 (2,431,337 samples, 2.85%)</title><rect x="18.3005%" y="181" width="2.8529%" height="15" fill="rgb(247,81,37)"/><text x="18.5505%" y="191.50">mi..</text></g><g><title>impl_parent (2,011,130 samples, 2.36%)</title><rect x="25.0950%" y="117" width="2.3598%" height="15" fill="rgb(209,12,38)"/><text x="25.3450%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,204,460 samples, 1.41%)</title><rect x="26.0415%" y="101" width="1.4133%" height="15" fill="rgb(227,1,9)"/><text x="26.2915%" y="111.50"></text></g><g><title>impl_trait_ref (5,814,506 samples, 6.82%)</title><rect x="27.4548%" y="117" width="6.8226%" height="15" fill="rgb(248,47,43)"/><text x="27.7048%" y="127.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,025,847 samples, 5.90%)</title><rect x="28.3802%" y="101" width="5.8972%" height="15" fill="rgb(221,10,30)"/><text x="28.6302%" y="111.50">metadat..</text></g><g><title>coherent_trait (11,844,082 samples, 13.90%)</title><rect x="21.2109%" y="149" width="13.8975%" height="15" fill="rgb(210,229,1)"/><text x="21.4609%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (11,833,582 samples, 13.89%)</title><rect x="21.2232%" y="133" width="13.8851%" height="15" fill="rgb(222,148,37)"/><text x="21.4732%" y="143.50">specialization_graph_..</text></g><g><title>trait_impls_of (706,849 samples, 0.83%)</title><rect x="34.2790%" y="117" width="0.8294%" height="15" fill="rgb(234,67,33)"/><text x="34.5290%" y="127.50"></text></g><g><title>implementations_of_trait (166,201 samples, 0.20%)</title><rect x="34.9134%" y="101" width="0.1950%" height="15" fill="rgb(247,98,35)"/><text x="35.1634%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (143,051 samples, 0.17%)</title><rect x="34.9405%" y="85" width="0.1679%" height="15" fill="rgb(247,138,52)"/><text x="35.1905%" y="95.50"></text></g><g><title>coherence_checking (11,914,033 samples, 13.98%)</title><rect x="21.1913%" y="165" width="13.9795%" height="15" fill="rgb(213,79,30)"/><text x="21.4413%" y="175.50">coherence_checking</text></g><g><title>adt_def (116,353 samples, 0.14%)</title><rect x="41.1065%" y="101" width="0.1365%" height="15" fill="rgb(246,177,23)"/><text x="41.3565%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (114,323 samples, 0.13%)</title><rect x="41.1089%" y="85" width="0.1341%" height="15" fill="rgb(230,62,27)"/><text x="41.3589%" y="95.50"></text></g><g><title>item_attrs (89,501 samples, 0.11%)</title><rect x="41.1380%" y="69" width="0.1050%" height="15" fill="rgb(216,154,8)"/><text x="41.3880%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (87,081 samples, 0.10%)</title><rect x="41.1408%" y="53" width="0.1022%" height="15" fill="rgb(244,35,45)"/><text x="41.3908%" y="63.50"></text></g><g><title>adt_sized_constraint (210,634 samples, 0.25%)</title><rect x="41.0942%" y="117" width="0.2472%" height="15" fill="rgb(251,115,12)"/><text x="41.3442%" y="127.50"></text></g><g><title>associated_item (343,494 samples, 0.40%)</title><rect x="41.4479%" y="101" width="0.4030%" height="15" fill="rgb(240,54,50)"/><text x="41.6979%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (283,033 samples, 0.33%)</title><rect x="41.5189%" y="85" width="0.3321%" height="15" fill="rgb(233,84,52)"/><text x="41.7689%" y="95.50"></text></g><g><title>associated_items (445,306 samples, 0.52%)</title><rect x="41.3467%" y="117" width="0.5225%" height="15" fill="rgb(207,117,47)"/><text x="41.5967%" y="127.50"></text></g><g><title>adt_dtorck_constraint (97,792 samples, 0.11%)</title><rect x="42.1266%" y="85" width="0.1147%" height="15" fill="rgb(249,43,39)"/><text x="42.3766%" y="95.50"></text></g><g><title>adt_dtorck_constraint (217,012 samples, 0.25%)</title><rect x="42.0164%" y="101" width="0.2546%" height="15" fill="rgb(209,38,44)"/><text x="42.2664%" y="111.50"></text></g><g><title>dropck_outlives (455,056 samples, 0.53%)</title><rect x="41.8974%" y="117" width="0.5339%" height="15" fill="rgb(236,212,23)"/><text x="42.1474%" y="127.50"></text></g><g><title>normalize_projection_ty (136,602 samples, 0.16%)</title><rect x="42.2711%" y="101" width="0.1603%" height="15" fill="rgb(242,79,21)"/><text x="42.5211%" y="111.50"></text></g><g><title>evaluate_obligation (350,783 samples, 0.41%)</title><rect x="42.4313%" y="117" width="0.4116%" height="15" fill="rgb(211,96,35)"/><text x="42.6813%" y="127.50"></text></g><g><title>method_autoderef_steps (156,923 samples, 0.18%)</title><rect x="43.2167%" y="117" width="0.1841%" height="15" fill="rgb(253,215,40)"/><text x="43.4667%" y="127.50"></text></g><g><title>object_safety_violations (138,721 samples, 0.16%)</title><rect x="43.4008%" y="117" width="0.1628%" height="15" fill="rgb(211,81,21)"/><text x="43.6508%" y="127.50"></text></g><g><title>predicates_of (164,772 samples, 0.19%)</title><rect x="43.5819%" y="117" width="0.1933%" height="15" fill="rgb(208,190,38)"/><text x="43.8319%" y="127.50"></text></g><g><title>predicates_defined_on (112,731 samples, 0.13%)</title><rect x="43.6429%" y="101" width="0.1323%" height="15" fill="rgb(235,213,38)"/><text x="43.8929%" y="111.50"></text></g><g><title>adt_sized_constraint (95,922 samples, 0.11%)</title><rect x="55.0535%" y="101" width="0.1126%" height="15" fill="rgb(237,122,38)"/><text x="55.3035%" y="111.50"></text></g><g><title>dropck_outlives (110,081 samples, 0.13%)</title><rect x="55.2940%" y="101" width="0.1292%" height="15" fill="rgb(244,218,35)"/><text x="55.5440%" y="111.50"></text></g><g><title>generics_of (238,922 samples, 0.28%)</title><rect x="57.4456%" y="85" width="0.2803%" height="15" fill="rgb(240,68,47)"/><text x="57.6956%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (189,192 samples, 0.22%)</title><rect x="57.5040%" y="69" width="0.2220%" height="15" fill="rgb(210,16,53)"/><text x="57.7540%" y="79.50"></text></g><g><title>impl_trait_ref (333,476 samples, 0.39%)</title><rect x="57.7738%" y="85" width="0.3913%" height="15" fill="rgb(235,124,12)"/><text x="58.0238%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (283,266 samples, 0.33%)</title><rect x="57.8327%" y="69" width="0.3324%" height="15" fill="rgb(224,169,11)"/><text x="58.0827%" y="79.50"></text></g><g><title>predicates_of (162,901 samples, 0.19%)</title><rect x="58.1832%" y="85" width="0.1911%" height="15" fill="rgb(250,166,2)"/><text x="58.4332%" y="95.50"></text></g><g><title>predicates_defined_on (104,630 samples, 0.12%)</title><rect x="58.2516%" y="69" width="0.1228%" height="15" fill="rgb(242,216,29)"/><text x="58.5016%" y="79.50"></text></g><g><title>specializes (247,423 samples, 0.29%)</title><rect x="58.3744%" y="85" width="0.2903%" height="15" fill="rgb(230,116,27)"/><text x="58.6244%" y="95.50"></text></g><g><title>param_env (159,223 samples, 0.19%)</title><rect x="58.4779%" y="69" width="0.1868%" height="15" fill="rgb(228,99,48)"/><text x="58.7279%" y="79.50"></text></g><g><title>trait_impls_of (399,935 samples, 0.47%)</title><rect x="58.6733%" y="85" width="0.4693%" height="15" fill="rgb(253,11,6)"/><text x="58.9233%" y="95.50"></text></g><g><title>implementations_of_trait (130,053 samples, 0.15%)</title><rect x="58.9899%" y="69" width="0.1526%" height="15" fill="rgb(247,143,39)"/><text x="59.2399%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (93,012 samples, 0.11%)</title><rect x="59.0334%" y="53" width="0.1091%" height="15" fill="rgb(236,97,10)"/><text x="59.2834%" y="63.50"></text></g><g><title>evaluate_obligation (3,179,604 samples, 3.73%)</title><rect x="55.4232%" y="101" width="3.7308%" height="15" fill="rgb(233,208,19)"/><text x="55.6732%" y="111.50">eval..</text></g><g><title>generics_of (1,368,937 samples, 1.61%)</title><rect x="59.2311%" y="101" width="1.6063%" height="15" fill="rgb(216,164,2)"/><text x="59.4811%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,087,942 samples, 1.28%)</title><rect x="59.5608%" y="85" width="1.2766%" height="15" fill="rgb(220,129,5)"/><text x="59.8108%" y="95.50"></text></g><g><title>impl_item_implementor_ids (110,891 samples, 0.13%)</title><rect x="60.8374%" y="101" width="0.1301%" height="15" fill="rgb(242,17,10)"/><text x="61.0874%" y="111.50"></text></g><g><title>associated_items (95,781 samples, 0.11%)</title><rect x="60.8551%" y="85" width="0.1124%" height="15" fill="rgb(242,107,0)"/><text x="61.1051%" y="95.50"></text></g><g><title>impl_trait_ref (206,582 samples, 0.24%)</title><rect x="60.9861%" y="101" width="0.2424%" height="15" fill="rgb(251,28,31)"/><text x="61.2361%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (156,002 samples, 0.18%)</title><rect x="61.0454%" y="85" width="0.1830%" height="15" fill="rgb(233,223,10)"/><text x="61.2954%" y="95.50"></text></g><g><title>method_autoderef_steps (253,782 samples, 0.30%)</title><rect x="61.4476%" y="101" width="0.2978%" height="15" fill="rgb(215,21,27)"/><text x="61.6976%" y="111.50"></text></g><g><title>evaluate_obligation (143,401 samples, 0.17%)</title><rect x="61.5771%" y="85" width="0.1683%" height="15" fill="rgb(232,23,21)"/><text x="61.8271%" y="95.50"></text></g><g><title>explicit_predicates_of (94,302 samples, 0.11%)</title><rect x="61.9266%" y="69" width="0.1107%" height="15" fill="rgb(244,5,23)"/><text x="62.1766%" y="79.50"></text></g><g><title>predicates_of (267,063 samples, 0.31%)</title><rect x="61.7579%" y="101" width="0.3134%" height="15" fill="rgb(226,81,46)"/><text x="62.0079%" y="111.50"></text></g><g><title>predicates_defined_on (183,382 samples, 0.22%)</title><rect x="61.8561%" y="85" width="0.2152%" height="15" fill="rgb(247,70,30)"/><text x="62.1061%" y="95.50"></text></g><g><title>typeck (15,657,174 samples, 18.37%)</title><rect x="43.8660%" y="117" width="18.3716%" height="15" fill="rgb(212,68,19)"/><text x="44.1160%" y="127.50">typeck</text></g><g><title>item_bodies_checking (23,076,088 samples, 27.08%)</title><rect x="35.1885%" y="165" width="27.0767%" height="15" fill="rgb(240,187,13)"/><text x="35.4385%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,072,718 samples, 27.07%)</title><rect x="35.1924%" y="149" width="27.0728%" height="15" fill="rgb(223,113,26)"/><text x="35.4424%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,056,277 samples, 27.05%)</title><rect x="35.2117%" y="133" width="27.0535%" height="15" fill="rgb(206,192,2)"/><text x="35.4617%" y="143.50">typeck</text></g><g><title>impl_trait_ref (132,753 samples, 0.16%)</title><rect x="62.6038%" y="85" width="0.1558%" height="15" fill="rgb(241,108,4)"/><text x="62.8538%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (114,273 samples, 0.13%)</title><rect x="62.6255%" y="69" width="0.1341%" height="15" fill="rgb(247,173,49)"/><text x="62.8755%" y="79.50"></text></g><g><title>adt_destructor (300,713 samples, 0.35%)</title><rect x="62.4388%" y="133" width="0.3528%" height="15" fill="rgb(224,114,35)"/><text x="62.6888%" y="143.50"></text></g><g><title>coherent_trait (297,613 samples, 0.35%)</title><rect x="62.4424%" y="117" width="0.3492%" height="15" fill="rgb(245,159,27)"/><text x="62.6924%" y="127.50"></text></g><g><title>specialization_graph_of (296,103 samples, 0.35%)</title><rect x="62.4442%" y="101" width="0.3474%" height="15" fill="rgb(245,172,44)"/><text x="62.6942%" y="111.50"></text></g><g><title>item_types_checking (491,885 samples, 0.58%)</title><rect x="62.2652%" y="165" width="0.5772%" height="15" fill="rgb(236,23,11)"/><text x="62.5152%" y="175.50"></text></g><g><title>check_mod_item_types (489,815 samples, 0.57%)</title><rect x="62.2676%" y="149" width="0.5747%" height="15" fill="rgb(205,117,38)"/><text x="62.5176%" y="159.50"></text></g><g><title>fn_sig (175,011 samples, 0.21%)</title><rect x="63.0624%" y="133" width="0.2054%" height="15" fill="rgb(237,72,25)"/><text x="63.3124%" y="143.50"></text></g><g><title>is_late_bound_map (92,530 samples, 0.11%)</title><rect x="63.3667%" y="117" width="0.1086%" height="15" fill="rgb(244,70,9)"/><text x="63.6167%" y="127.50"></text></g><g><title>resolve_lifetimes (86,390 samples, 0.10%)</title><rect x="63.3739%" y="101" width="0.1014%" height="15" fill="rgb(217,125,39)"/><text x="63.6239%" y="111.50"></text></g><g><title>generics_of (205,662 samples, 0.24%)</title><rect x="63.2677%" y="133" width="0.2413%" height="15" fill="rgb(235,36,10)"/><text x="63.5177%" y="143.50"></text></g><g><title>associated_item (93,492 samples, 0.11%)</title><rect x="64.2318%" y="37" width="0.1097%" height="15" fill="rgb(251,123,47)"/><text x="64.4818%" y="47.50"></text></g><g><title>associated_items (145,552 samples, 0.17%)</title><rect x="64.1745%" y="53" width="0.1708%" height="15" fill="rgb(221,13,13)"/><text x="64.4245%" y="63.50"></text></g><g><title>late_bound_vars_map (502,327 samples, 0.59%)</title><rect x="63.9098%" y="85" width="0.5894%" height="15" fill="rgb(238,131,9)"/><text x="64.1598%" y="95.50"></text></g><g><title>resolve_lifetimes (490,347 samples, 0.58%)</title><rect x="63.9239%" y="69" width="0.5754%" height="15" fill="rgb(211,50,8)"/><text x="64.1739%" y="79.50"></text></g><g><title>lint_levels (119,241 samples, 0.14%)</title><rect x="64.3593%" y="53" width="0.1399%" height="15" fill="rgb(245,182,24)"/><text x="64.6093%" y="63.50"></text></g><g><title>explicit_predicates_of (724,428 samples, 0.85%)</title><rect x="63.6658%" y="101" width="0.8500%" height="15" fill="rgb(242,14,37)"/><text x="63.9158%" y="111.50"></text></g><g><title>predicates_of (862,420 samples, 1.01%)</title><rect x="63.5853%" y="133" width="1.0119%" height="15" fill="rgb(246,228,12)"/><text x="63.8353%" y="143.50"></text></g><g><title>predicates_defined_on (839,719 samples, 0.99%)</title><rect x="63.6119%" y="117" width="0.9853%" height="15" fill="rgb(213,55,15)"/><text x="63.8619%" y="127.50"></text></g><g><title>type_collecting (1,612,358 samples, 1.89%)</title><rect x="62.8433%" y="165" width="1.8919%" height="15" fill="rgb(209,9,3)"/><text x="63.0933%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,601,028 samples, 1.88%)</title><rect x="62.8566%" y="149" width="1.8786%" height="15" fill="rgb(230,59,30)"/><text x="63.1066%" y="159.50">c..</text></g><g><title>type_of (117,613 samples, 0.14%)</title><rect x="64.5972%" y="133" width="0.1380%" height="15" fill="rgb(209,121,21)"/><text x="64.8472%" y="143.50"></text></g><g><title>evaluate_obligation (117,353 samples, 0.14%)</title><rect x="65.0182%" y="133" width="0.1377%" height="15" fill="rgb(220,109,13)"/><text x="65.2682%" y="143.50"></text></g><g><title>check_impl_item_well_formed (448,025 samples, 0.53%)</title><rect x="64.7919%" y="149" width="0.5257%" height="15" fill="rgb(232,18,1)"/><text x="65.0419%" y="159.50"></text></g><g><title>evaluate_obligation (118,731 samples, 0.14%)</title><rect x="65.9828%" y="133" width="0.1393%" height="15" fill="rgb(215,41,42)"/><text x="66.2328%" y="143.50"></text></g><g><title>implied_outlives_bounds (109,511 samples, 0.13%)</title><rect x="66.1243%" y="133" width="0.1285%" height="15" fill="rgb(224,123,36)"/><text x="66.3743%" y="143.50"></text></g><g><title>param_env (194,222 samples, 0.23%)</title><rect x="66.2528%" y="133" width="0.2279%" height="15" fill="rgb(240,125,3)"/><text x="66.5028%" y="143.50"></text></g><g><title>region_scope_tree (93,681 samples, 0.11%)</title><rect x="66.5444%" y="133" width="0.1099%" height="15" fill="rgb(205,98,50)"/><text x="66.7944%" y="143.50"></text></g><g><title>trait_impls_of (87,191 samples, 0.10%)</title><rect x="66.6549%" y="133" width="0.1023%" height="15" fill="rgb(205,185,37)"/><text x="66.9049%" y="143.50"></text></g><g><title>analysis (56,246,827 samples, 66.00%)</title><rect x="0.8124%" y="197" width="65.9982%" height="15" fill="rgb(238,207,15)"/><text x="1.0624%" y="207.50">analysis</text></g><g><title>type_check_crate (38,911,224 samples, 45.66%)</title><rect x="21.1534%" y="181" width="45.6572%" height="15" fill="rgb(213,199,42)"/><text x="21.4034%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,767,570 samples, 2.07%)</title><rect x="64.7365%" y="165" width="2.0740%" height="15" fill="rgb(235,201,11)"/><text x="64.9865%" y="175.50">w..</text></g><g><title>check_item_well_formed (1,272,365 samples, 1.49%)</title><rect x="65.3176%" y="149" width="1.4930%" height="15" fill="rgb(207,46,11)"/><text x="65.5676%" y="159.50"></text></g><g><title>codegen_crate (369,255 samples, 0.43%)</title><rect x="66.8238%" y="197" width="0.4333%" height="15" fill="rgb(241,35,35)"/><text x="67.0738%" y="207.50"></text></g><g><title>AST_validation (105,621 samples, 0.12%)</title><rect x="67.5173%" y="181" width="0.1239%" height="15" fill="rgb(243,32,47)"/><text x="67.7673%" y="191.50"></text></g><g><title>metadata_load_macro (200,242 samples, 0.23%)</title><rect x="80.4816%" y="149" width="0.2350%" height="15" fill="rgb(247,202,23)"/><text x="80.7316%" y="159.50"></text></g><g><title>macro_expand_crate (13,651,652 samples, 16.02%)</title><rect x="67.8075%" y="181" width="16.0184%" height="15" fill="rgb(219,102,11)"/><text x="68.0575%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,624,141 samples, 15.99%)</title><rect x="67.8398%" y="165" width="15.9861%" height="15" fill="rgb(243,110,44)"/><text x="68.0898%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,649,980 samples, 3.11%)</title><rect x="80.7165%" y="149" width="3.1094%" height="15" fill="rgb(222,74,54)"/><text x="80.9665%" y="159.50">met..</text></g><g><title>metadata_register_crate (972,339 samples, 1.14%)</title><rect x="82.6850%" y="133" width="1.1409%" height="15" fill="rgb(216,99,12)"/><text x="82.9350%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (166,742 samples, 0.20%)</title><rect x="83.8321%" y="181" width="0.1956%" height="15" fill="rgb(226,22,26)"/><text x="84.0821%" y="191.50"></text></g><g><title>finalize_macro_resolutions (229,043 samples, 0.27%)</title><rect x="84.0621%" y="165" width="0.2688%" height="15" fill="rgb(217,163,10)"/><text x="84.3121%" y="175.50"></text></g><g><title>late_resolve_crate (2,948,903 samples, 3.46%)</title><rect x="84.3308%" y="165" width="3.4601%" height="15" fill="rgb(213,25,53)"/><text x="84.5808%" y="175.50">lat..</text></g><g><title>configure_and_expand (17,598,146 samples, 20.65%)</title><rect x="67.2571%" y="197" width="20.6491%" height="15" fill="rgb(252,105,26)"/><text x="67.5071%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,305,387 samples, 3.88%)</title><rect x="84.0277%" y="181" width="3.8784%" height="15" fill="rgb(220,39,43)"/><text x="84.2777%" y="191.50">reso..</text></g><g><title>drop_ast (148,522 samples, 0.17%)</title><rect x="87.9062%" y="197" width="0.1743%" height="15" fill="rgb(229,68,48)"/><text x="88.1562%" y="207.50"></text></g><g><title>early_lint_checks (349,034 samples, 0.41%)</title><rect x="88.0964%" y="197" width="0.4095%" height="15" fill="rgb(252,8,32)"/><text x="88.3464%" y="207.50"></text></g><g><title>free_global_ctxt (3,567,950 samples, 4.19%)</title><rect x="88.5060%" y="197" width="4.1865%" height="15" fill="rgb(223,20,43)"/><text x="88.7560%" y="207.50">free_..</text></g><g><title>generate_crate_metadata (518,476 samples, 0.61%)</title><rect x="92.6925%" y="197" width="0.6084%" height="15" fill="rgb(229,81,49)"/><text x="92.9425%" y="207.50"></text></g><g><title>hir_lowering (2,009,742 samples, 2.36%)</title><rect x="93.3009%" y="197" width="2.3582%" height="15" fill="rgb(236,28,36)"/><text x="93.5509%" y="207.50">h..</text></g><g><title>parse_crate (2,033,513 samples, 2.39%)</title><rect x="95.7227%" y="197" width="2.3861%" height="15" fill="rgb(249,185,26)"/><text x="95.9727%" y="207.50">pa..</text></g><g><title>prepare_outputs (338,774 samples, 0.40%)</title><rect x="98.1195%" y="197" width="0.3975%" height="15" fill="rgb(249,174,33)"/><text x="98.3695%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (802,359 samples, 0.94%)</title><rect x="98.5170%" y="197" width="0.9415%" height="15" fill="rgb(233,201,37)"/><text x="98.7670%" y="207.50"></text></g><g><title>setup_global_ctxt (150,182 samples, 0.18%)</title><rect x="99.4717%" y="197" width="0.1762%" height="15" fill="rgb(221,78,26)"/><text x="99.7217%" y="207.50"></text></g><g><title>all (85,224,812 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (85,224,812 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (300,103 samples, 0.35%)</title><rect x="99.6479%" y="197" width="0.3521%" height="15" fill="rgb(229,67,23)"/><text x="99.8979%" y="207.50"></text></g></svg></svg>