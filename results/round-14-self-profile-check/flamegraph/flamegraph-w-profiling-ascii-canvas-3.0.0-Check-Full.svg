<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (214,573 samples, 0.13%)</title><rect x="9.9242%" y="149" width="0.1265%" height="15" fill="rgb(227,0,7)"/><text x="10.1742%" y="159.50"></text></g><g><title>param_env (244,451 samples, 0.14%)</title><rect x="11.3420%" y="117" width="0.1441%" height="15" fill="rgb(217,0,24)"/><text x="11.5920%" y="127.50"></text></g><g><title>item_attrs (594,075 samples, 0.35%)</title><rect x="11.8147%" y="85" width="0.3501%" height="15" fill="rgb(221,193,54)"/><text x="12.0647%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (586,575 samples, 0.35%)</title><rect x="11.8191%" y="69" width="0.3457%" height="15" fill="rgb(248,212,6)"/><text x="12.0691%" y="79.50"></text></g><g><title>codegen_fn_attrs (688,055 samples, 0.41%)</title><rect x="11.7695%" y="101" width="0.4055%" height="15" fill="rgb(208,68,35)"/><text x="12.0195%" y="111.50"></text></g><g><title>adt_drop_tys (275,443 samples, 0.16%)</title><rect x="14.3020%" y="69" width="0.1623%" height="15" fill="rgb(232,128,0)"/><text x="14.5520%" y="79.50"></text></g><g><title>needs_drop_raw (1,096,561 samples, 0.65%)</title><rect x="14.2473%" y="85" width="0.6463%" height="15" fill="rgb(207,160,47)"/><text x="14.4973%" y="95.50"></text></g><g><title>is_copy_raw (728,268 samples, 0.43%)</title><rect x="14.4644%" y="69" width="0.4292%" height="15" fill="rgb(228,23,34)"/><text x="14.7144%" y="79.50"></text></g><g><title>evaluate_obligation (620,876 samples, 0.37%)</title><rect x="14.5277%" y="53" width="0.3659%" height="15" fill="rgb(218,30,26)"/><text x="14.7777%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (333,122 samples, 0.20%)</title><rect x="15.0239%" y="69" width="0.1963%" height="15" fill="rgb(220,122,19)"/><text x="15.2739%" y="79.50"></text></g><g><title>impl_parent (279,012 samples, 0.16%)</title><rect x="15.5223%" y="53" width="0.1644%" height="15" fill="rgb(250,228,42)"/><text x="15.7723%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (184,890 samples, 0.11%)</title><rect x="15.5777%" y="37" width="0.1090%" height="15" fill="rgb(240,193,28)"/><text x="15.8277%" y="47.50"></text></g><g><title>specialization_graph_of (1,557,938 samples, 0.92%)</title><rect x="15.2699%" y="69" width="0.9182%" height="15" fill="rgb(216,20,37)"/><text x="15.5199%" y="79.50"></text></g><g><title>impl_trait_ref (850,720 samples, 0.50%)</title><rect x="15.6867%" y="53" width="0.5014%" height="15" fill="rgb(206,188,39)"/><text x="15.9367%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (526,466 samples, 0.31%)</title><rect x="15.8778%" y="37" width="0.3103%" height="15" fill="rgb(217,207,13)"/><text x="16.1278%" y="47.50"></text></g><g><title>resolve_instance (2,255,595 samples, 1.33%)</title><rect x="14.8936%" y="85" width="1.3294%" height="15" fill="rgb(231,73,38)"/><text x="15.1436%" y="95.50"></text></g><g><title>thir_body (1,223,456 samples, 0.72%)</title><rect x="16.2377%" y="85" width="0.7211%" height="15" fill="rgb(225,20,46)"/><text x="16.4877%" y="95.50"></text></g><g><title>mir_const (10,528,069 samples, 6.20%)</title><rect x="10.7630%" y="133" width="6.2050%" height="15" fill="rgb(210,31,41)"/><text x="11.0130%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (9,301,297 samples, 5.48%)</title><rect x="11.4861%" y="117" width="5.4819%" height="15" fill="rgb(221,200,47)"/><text x="11.7361%" y="127.50">unsafet..</text></g><g><title>mir_built (8,132,315 samples, 4.79%)</title><rect x="12.1750%" y="101" width="4.7930%" height="15" fill="rgb(226,26,5)"/><text x="12.4250%" y="111.50">mir_bu..</text></g><g><title>thir_body (278,452 samples, 0.16%)</title><rect x="17.8380%" y="69" width="0.1641%" height="15" fill="rgb(249,33,26)"/><text x="18.0880%" y="79.50"></text></g><g><title>mir_const (1,280,245 samples, 0.75%)</title><rect x="17.2531%" y="117" width="0.7545%" height="15" fill="rgb(235,183,28)"/><text x="17.5031%" y="127.50"></text></g><g><title>unsafety_check_result (994,751 samples, 0.59%)</title><rect x="17.4214%" y="101" width="0.5863%" height="15" fill="rgb(221,5,38)"/><text x="17.6714%" y="111.50"></text></g><g><title>mir_built (882,861 samples, 0.52%)</title><rect x="17.4873%" y="85" width="0.5203%" height="15" fill="rgb(247,18,42)"/><text x="17.7373%" y="95.50"></text></g><g><title>mir_const_qualif (1,764,919 samples, 1.04%)</title><rect x="16.9680%" y="133" width="1.0402%" height="15" fill="rgb(241,131,45)"/><text x="17.2180%" y="143.50"></text></g><g><title>mir_promoted (13,497,067 samples, 7.95%)</title><rect x="10.0538%" y="149" width="7.9548%" height="15" fill="rgb(249,31,29)"/><text x="10.3038%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (300,243 samples, 0.18%)</title><rect x="18.0086%" y="149" width="0.1770%" height="15" fill="rgb(225,111,53)"/><text x="18.2586%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (638,604 samples, 0.38%)</title><rect x="18.1855%" y="149" width="0.3764%" height="15" fill="rgb(238,160,17)"/><text x="18.4355%" y="159.50"></text></g><g><title>normalize_projection_ty (455,213 samples, 0.27%)</title><rect x="18.2936%" y="133" width="0.2683%" height="15" fill="rgb(214,148,48)"/><text x="18.5436%" y="143.50"></text></g><g><title>type_op_normalize_predicate (299,294 samples, 0.18%)</title><rect x="18.5619%" y="149" width="0.1764%" height="15" fill="rgb(232,36,49)"/><text x="18.8119%" y="159.50"></text></g><g><title>normalize_projection_ty (196,382 samples, 0.12%)</title><rect x="18.6226%" y="133" width="0.1157%" height="15" fill="rgb(209,103,24)"/><text x="18.8726%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,845,318 samples, 1.09%)</title><rect x="18.7383%" y="149" width="1.0876%" height="15" fill="rgb(229,88,8)"/><text x="18.9883%" y="159.50"></text></g><g><title>evaluate_obligation (258,923 samples, 0.15%)</title><rect x="19.6733%" y="133" width="0.1526%" height="15" fill="rgb(213,181,19)"/><text x="19.9233%" y="143.50"></text></g><g><title>MIR_borrow_checking (31,998,864 samples, 18.86%)</title><rect x="0.9702%" y="181" width="18.8593%" height="15" fill="rgb(254,191,54)"/><text x="1.2202%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,828,294 samples, 18.76%)</title><rect x="1.0707%" y="165" width="18.7588%" height="15" fill="rgb(241,83,37)"/><text x="1.3207%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (721,708 samples, 0.43%)</title><rect x="19.8295%" y="181" width="0.4254%" height="15" fill="rgb(233,36,39)"/><text x="20.0795%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (639,828 samples, 0.38%)</title><rect x="19.8777%" y="165" width="0.3771%" height="15" fill="rgb(226,3,54)"/><text x="20.1277%" y="175.50"></text></g><g><title>hir_module_items (399,873 samples, 0.24%)</title><rect x="20.2548%" y="181" width="0.2357%" height="15" fill="rgb(245,192,40)"/><text x="20.5048%" y="191.50"></text></g><g><title>get_lang_items (177,721 samples, 0.10%)</title><rect x="21.0222%" y="133" width="0.1047%" height="15" fill="rgb(238,167,29)"/><text x="21.2722%" y="143.50"></text></g><g><title>should_inherit_track_caller (372,894 samples, 0.22%)</title><rect x="21.1269%" y="133" width="0.2198%" height="15" fill="rgb(232,182,51)"/><text x="21.3769%" y="143.50"></text></g><g><title>codegen_fn_attrs (724,959 samples, 0.43%)</title><rect x="20.9401%" y="149" width="0.4273%" height="15" fill="rgb(231,60,39)"/><text x="21.1901%" y="159.50"></text></g><g><title>check_mod_attrs (1,442,976 samples, 0.85%)</title><rect x="20.5171%" y="165" width="0.8505%" height="15" fill="rgb(208,69,12)"/><text x="20.7671%" y="175.50"></text></g><g><title>check_mod_const_bodies (254,053 samples, 0.15%)</title><rect x="21.3675%" y="165" width="0.1497%" height="15" fill="rgb(235,93,37)"/><text x="21.6175%" y="175.50"></text></g><g><title>lookup_deprecation_entry (310,104 samples, 0.18%)</title><rect x="21.8393%" y="149" width="0.1828%" height="15" fill="rgb(213,116,39)"/><text x="22.0893%" y="159.50"></text></g><g><title>stability_index (202,932 samples, 0.12%)</title><rect x="21.9025%" y="133" width="0.1196%" height="15" fill="rgb(222,207,29)"/><text x="22.1525%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (838,770 samples, 0.49%)</title><rect x="21.6239%" y="165" width="0.4943%" height="15" fill="rgb(206,96,30)"/><text x="21.8739%" y="175.50"></text></g><g><title>misc_checking_1 (2,875,992 samples, 1.70%)</title><rect x="20.4907%" y="181" width="1.6950%" height="15" fill="rgb(218,138,4)"/><text x="20.7407%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (595,477 samples, 0.35%)</title><rect x="22.1867%" y="165" width="0.3510%" height="15" fill="rgb(250,191,14)"/><text x="22.4367%" y="175.50"></text></g><g><title>check_mod_liveness (491,005 samples, 0.29%)</title><rect x="22.2483%" y="149" width="0.2894%" height="15" fill="rgb(239,60,40)"/><text x="22.4983%" y="159.50"></text></g><g><title>misc_checking_2 (1,317,015 samples, 0.78%)</title><rect x="22.1857%" y="181" width="0.7762%" height="15" fill="rgb(206,27,48)"/><text x="22.4357%" y="191.50"></text></g><g><title>match_checking (719,948 samples, 0.42%)</title><rect x="22.5376%" y="165" width="0.4243%" height="15" fill="rgb(225,35,8)"/><text x="22.7876%" y="175.50"></text></g><g><title>check_match (684,188 samples, 0.40%)</title><rect x="22.5587%" y="149" width="0.4032%" height="15" fill="rgb(250,213,24)"/><text x="22.8087%" y="159.50"></text></g><g><title>check_private_in_public (214,152 samples, 0.13%)</title><rect x="22.9681%" y="165" width="0.1262%" height="15" fill="rgb(247,123,22)"/><text x="23.2181%" y="175.50"></text></g><g><title>death_checking (505,856 samples, 0.30%)</title><rect x="23.0943%" y="165" width="0.2981%" height="15" fill="rgb(231,138,38)"/><text x="23.3443%" y="175.50"></text></g><g><title>mir_for_ctfe (269,224 samples, 0.16%)</title><rect x="24.3191%" y="85" width="0.1587%" height="15" fill="rgb(231,145,46)"/><text x="24.5691%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,031,102 samples, 0.61%)</title><rect x="23.9641%" y="133" width="0.6077%" height="15" fill="rgb(251,118,11)"/><text x="24.2141%" y="143.50"></text></g><g><title>eval_to_const_value_raw (995,291 samples, 0.59%)</title><rect x="23.9852%" y="117" width="0.5866%" height="15" fill="rgb(217,147,25)"/><text x="24.2352%" y="127.50"></text></g><g><title>eval_to_allocation_raw (947,670 samples, 0.56%)</title><rect x="24.0133%" y="101" width="0.5585%" height="15" fill="rgb(247,81,37)"/><text x="24.2633%" y="111.50"></text></g><g><title>param_env (174,031 samples, 0.10%)</title><rect x="24.5718%" y="133" width="0.1026%" height="15" fill="rgb(209,12,38)"/><text x="24.8218%" y="143.50"></text></g><g><title>crate_lints (3,281,987 samples, 1.93%)</title><rect x="23.3934%" y="149" width="1.9343%" height="15" fill="rgb(227,1,9)"/><text x="23.6434%" y="159.50">c..</text></g><g><title>type_of (1,099,121 samples, 0.65%)</title><rect x="24.6799%" y="133" width="0.6478%" height="15" fill="rgb(248,47,43)"/><text x="24.9299%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (869,170 samples, 0.51%)</title><rect x="24.8154%" y="117" width="0.5123%" height="15" fill="rgb(221,10,30)"/><text x="25.0654%" y="127.50"></text></g><g><title>lint_checking (3,847,643 samples, 2.27%)</title><rect x="23.3925%" y="165" width="2.2677%" height="15" fill="rgb(210,229,1)"/><text x="23.6425%" y="175.50">l..</text></g><g><title>module_lints (564,146 samples, 0.33%)</title><rect x="25.3277%" y="149" width="0.3325%" height="15" fill="rgb(222,148,37)"/><text x="25.5777%" y="159.50"></text></g><g><title>lint_mod (560,186 samples, 0.33%)</title><rect x="25.3300%" y="133" width="0.3302%" height="15" fill="rgb(234,67,33)"/><text x="25.5800%" y="143.50"></text></g><g><title>privacy_access_levels (264,953 samples, 0.16%)</title><rect x="25.6602%" y="165" width="0.1562%" height="15" fill="rgb(247,98,35)"/><text x="25.9102%" y="175.50"></text></g><g><title>privacy_checking_modules (911,090 samples, 0.54%)</title><rect x="25.8163%" y="165" width="0.5370%" height="15" fill="rgb(247,138,52)"/><text x="26.0663%" y="175.50"></text></g><g><title>check_mod_privacy (907,900 samples, 0.54%)</title><rect x="25.8182%" y="149" width="0.5351%" height="15" fill="rgb(213,79,30)"/><text x="26.0682%" y="159.50"></text></g><g><title>misc_checking_3 (5,768,434 samples, 3.40%)</title><rect x="22.9620%" y="181" width="3.3998%" height="15" fill="rgb(246,177,23)"/><text x="23.2120%" y="191.50">mis..</text></g><g><title>impl_trait_ref (209,732 samples, 0.12%)</title><rect x="26.5259%" y="85" width="0.1236%" height="15" fill="rgb(230,62,27)"/><text x="26.7759%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (191,362 samples, 0.11%)</title><rect x="26.5367%" y="69" width="0.1128%" height="15" fill="rgb(216,154,8)"/><text x="26.7867%" y="79.50"></text></g><g><title>adt_destructor (368,134 samples, 0.22%)</title><rect x="26.4485%" y="133" width="0.2170%" height="15" fill="rgb(244,35,45)"/><text x="26.6985%" y="143.50"></text></g><g><title>coherent_trait (359,364 samples, 0.21%)</title><rect x="26.4537%" y="117" width="0.2118%" height="15" fill="rgb(251,115,12)"/><text x="26.7037%" y="127.50"></text></g><g><title>specialization_graph_of (358,064 samples, 0.21%)</title><rect x="26.4545%" y="101" width="0.2110%" height="15" fill="rgb(240,54,50)"/><text x="26.7045%" y="111.50"></text></g><g><title>impl_parent (3,914,998 samples, 2.31%)</title><rect x="30.6650%" y="117" width="2.3074%" height="15" fill="rgb(233,84,52)"/><text x="30.9150%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (2,171,995 samples, 1.28%)</title><rect x="31.6923%" y="101" width="1.2801%" height="15" fill="rgb(207,117,47)"/><text x="31.9423%" y="111.50"></text></g><g><title>impl_trait_ref (10,218,427 samples, 6.02%)</title><rect x="32.9724%" y="117" width="6.0225%" height="15" fill="rgb(249,43,39)"/><text x="33.2224%" y="127.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,926,747 samples, 4.67%)</title><rect x="34.3230%" y="101" width="4.6718%" height="15" fill="rgb(209,38,44)"/><text x="34.5730%" y="111.50">metad..</text></g><g><title>coherent_trait (22,758,991 samples, 13.41%)</title><rect x="26.4194%" y="149" width="13.4135%" height="15" fill="rgb(236,212,23)"/><text x="26.6694%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (22,108,074 samples, 13.03%)</title><rect x="26.8031%" y="133" width="13.0299%" height="15" fill="rgb(242,79,21)"/><text x="27.0531%" y="143.50">specialization_graph..</text></g><g><title>trait_impls_of (1,419,896 samples, 0.84%)</title><rect x="38.9961%" y="117" width="0.8368%" height="15" fill="rgb(211,96,35)"/><text x="39.2461%" y="127.50"></text></g><g><title>implementations_of_trait (361,375 samples, 0.21%)</title><rect x="39.6200%" y="101" width="0.2130%" height="15" fill="rgb(253,215,40)"/><text x="39.8700%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (292,234 samples, 0.17%)</title><rect x="39.6607%" y="85" width="0.1722%" height="15" fill="rgb(211,81,21)"/><text x="39.9107%" y="95.50"></text></g><g><title>coherence_checking (22,853,783 samples, 13.47%)</title><rect x="26.4038%" y="165" width="13.4694%" height="15" fill="rgb(208,190,38)"/><text x="26.6538%" y="175.50">coherence_checking</text></g><g><title>associated_item (354,061 samples, 0.21%)</title><rect x="53.4730%" y="101" width="0.2087%" height="15" fill="rgb(235,213,38)"/><text x="53.7230%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (287,361 samples, 0.17%)</title><rect x="53.5123%" y="85" width="0.1694%" height="15" fill="rgb(237,122,38)"/><text x="53.7623%" y="95.50"></text></g><g><title>associated_items (502,124 samples, 0.30%)</title><rect x="53.4007%" y="117" width="0.2959%" height="15" fill="rgb(244,218,35)"/><text x="53.6507%" y="127.50"></text></g><g><title>dropck_outlives (516,467 samples, 0.30%)</title><rect x="53.7320%" y="117" width="0.3044%" height="15" fill="rgb(240,68,47)"/><text x="53.9820%" y="127.50"></text></g><g><title>adt_dtorck_constraint (318,705 samples, 0.19%)</title><rect x="53.8485%" y="101" width="0.1878%" height="15" fill="rgb(210,16,53)"/><text x="54.0985%" y="111.50"></text></g><g><title>predicates_of (175,762 samples, 0.10%)</title><rect x="54.9019%" y="101" width="0.1036%" height="15" fill="rgb(235,124,12)"/><text x="55.1519%" y="111.50"></text></g><g><title>trait_impls_of (422,224 samples, 0.25%)</title><rect x="55.0660%" y="101" width="0.2488%" height="15" fill="rgb(224,169,11)"/><text x="55.3160%" y="111.50"></text></g><g><title>evaluate_obligation (2,166,852 samples, 1.28%)</title><rect x="54.0392%" y="117" width="1.2771%" height="15" fill="rgb(250,166,2)"/><text x="54.2892%" y="127.50"></text></g><g><title>generics_of (197,912 samples, 0.12%)</title><rect x="55.4015%" y="117" width="0.1166%" height="15" fill="rgb(242,216,29)"/><text x="55.6515%" y="127.50"></text></g><g><title>evaluate_obligation (188,221 samples, 0.11%)</title><rect x="55.8294%" y="101" width="0.1109%" height="15" fill="rgb(230,116,27)"/><text x="56.0794%" y="111.50"></text></g><g><title>method_autoderef_steps (357,683 samples, 0.21%)</title><rect x="55.7351%" y="117" width="0.2108%" height="15" fill="rgb(228,99,48)"/><text x="55.9851%" y="127.50"></text></g><g><title>predicates_of (416,507 samples, 0.25%)</title><rect x="55.9708%" y="117" width="0.2455%" height="15" fill="rgb(253,11,6)"/><text x="56.2208%" y="127.50"></text></g><g><title>predicates_defined_on (283,204 samples, 0.17%)</title><rect x="56.0494%" y="101" width="0.1669%" height="15" fill="rgb(247,143,39)"/><text x="56.2994%" y="111.50"></text></g><g><title>evaluate_obligation (541,266 samples, 0.32%)</title><rect x="57.5227%" y="101" width="0.3190%" height="15" fill="rgb(236,97,10)"/><text x="57.7727%" y="111.50"></text></g><g><title>typeck (2,936,793 samples, 1.73%)</title><rect x="56.2801%" y="117" width="1.7309%" height="15" fill="rgb(233,208,19)"/><text x="56.5301%" y="127.50"></text></g><g><title>item_bodies_checking (30,782,171 samples, 18.14%)</title><rect x="39.9089%" y="165" width="18.1422%" height="15" fill="rgb(216,164,2)"/><text x="40.1589%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,777,781 samples, 18.14%)</title><rect x="39.9115%" y="149" width="18.1396%" height="15" fill="rgb(220,129,5)"/><text x="40.1615%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (30,704,551 samples, 18.10%)</title><rect x="39.9547%" y="133" width="18.0964%" height="15" fill="rgb(242,17,10)"/><text x="40.2047%" y="143.50">typeck</text></g><g><title>generics_of (484,263 samples, 0.29%)</title><rect x="61.6835%" y="101" width="0.2854%" height="15" fill="rgb(242,107,0)"/><text x="61.9335%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (349,381 samples, 0.21%)</title><rect x="61.7630%" y="85" width="0.2059%" height="15" fill="rgb(251,28,31)"/><text x="62.0130%" y="95.50"></text></g><g><title>impl_trait_ref (858,339 samples, 0.51%)</title><rect x="62.0444%" y="101" width="0.5059%" height="15" fill="rgb(233,223,10)"/><text x="62.2944%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (720,798 samples, 0.42%)</title><rect x="62.1255%" y="85" width="0.4248%" height="15" fill="rgb(215,21,27)"/><text x="62.3755%" y="95.50"></text></g><g><title>explicit_predicates_of (313,043 samples, 0.18%)</title><rect x="62.8328%" y="69" width="0.1845%" height="15" fill="rgb(232,23,21)"/><text x="63.0828%" y="79.50"></text></g><g><title>predicates_of (855,501 samples, 0.50%)</title><rect x="62.5705%" y="101" width="0.5042%" height="15" fill="rgb(244,5,23)"/><text x="62.8205%" y="111.50"></text></g><g><title>predicates_defined_on (572,437 samples, 0.34%)</title><rect x="62.7373%" y="85" width="0.3374%" height="15" fill="rgb(226,81,46)"/><text x="62.9873%" y="95.50"></text></g><g><title>specializes (2,044,755 samples, 1.21%)</title><rect x="63.0747%" y="101" width="1.2051%" height="15" fill="rgb(247,70,30)"/><text x="63.3247%" y="111.50"></text></g><g><title>param_env (1,230,833 samples, 0.73%)</title><rect x="63.5544%" y="85" width="0.7254%" height="15" fill="rgb(212,68,19)"/><text x="63.8044%" y="95.50"></text></g><g><title>def_span (632,419 samples, 0.37%)</title><rect x="63.9071%" y="69" width="0.3727%" height="15" fill="rgb(240,187,13)"/><text x="64.1571%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (572,979 samples, 0.34%)</title><rect x="63.9421%" y="53" width="0.3377%" height="15" fill="rgb(223,113,26)"/><text x="64.1921%" y="63.50"></text></g><g><title>evaluate_obligation (6,576,293 samples, 3.88%)</title><rect x="60.4832%" y="117" width="3.8759%" height="15" fill="rgb(206,192,2)"/><text x="60.7332%" y="127.50">eval..</text></g><g><title>item_types_checking (10,849,040 samples, 6.39%)</title><rect x="58.0511%" y="165" width="6.3941%" height="15" fill="rgb(241,108,4)"/><text x="58.3011%" y="175.50">item_typ..</text></g><g><title>check_mod_item_types (10,844,170 samples, 6.39%)</title><rect x="58.0540%" y="149" width="6.3913%" height="15" fill="rgb(247,173,49)"/><text x="58.3040%" y="159.50">check_mo..</text></g><g><title>typeck (10,249,523 samples, 6.04%)</title><rect x="58.4044%" y="133" width="6.0408%" height="15" fill="rgb(224,114,35)"/><text x="58.6544%" y="143.50">typeck</text></g><g><title>late_bound_vars_map (245,323 samples, 0.14%)</title><rect x="65.0774%" y="117" width="0.1446%" height="15" fill="rgb(245,159,27)"/><text x="65.3274%" y="127.50"></text></g><g><title>resolve_lifetimes (217,852 samples, 0.13%)</title><rect x="65.0936%" y="101" width="0.1284%" height="15" fill="rgb(245,172,44)"/><text x="65.3436%" y="111.50"></text></g><g><title>fn_sig (694,600 samples, 0.41%)</title><rect x="64.8775%" y="133" width="0.4094%" height="15" fill="rgb(236,23,11)"/><text x="65.1275%" y="143.50"></text></g><g><title>lint_levels (691,747 samples, 0.41%)</title><rect x="65.7726%" y="85" width="0.4077%" height="15" fill="rgb(205,117,38)"/><text x="66.0226%" y="95.50"></text></g><g><title>is_late_bound_map (1,220,753 samples, 0.72%)</title><rect x="65.4620%" y="117" width="0.7195%" height="15" fill="rgb(237,72,25)"/><text x="65.7120%" y="127.50"></text></g><g><title>resolve_lifetimes (1,189,112 samples, 0.70%)</title><rect x="65.4806%" y="101" width="0.7008%" height="15" fill="rgb(244,70,9)"/><text x="65.7306%" y="111.50"></text></g><g><title>named_region_map (241,083 samples, 0.14%)</title><rect x="66.1815%" y="117" width="0.1421%" height="15" fill="rgb(217,125,39)"/><text x="66.4315%" y="127.50"></text></g><g><title>resolve_lifetimes (208,003 samples, 0.12%)</title><rect x="66.2010%" y="101" width="0.1226%" height="15" fill="rgb(235,36,10)"/><text x="66.4510%" y="111.50"></text></g><g><title>generics_of (1,793,040 samples, 1.06%)</title><rect x="65.2869%" y="133" width="1.0568%" height="15" fill="rgb(251,123,47)"/><text x="65.5369%" y="143.50"></text></g><g><title>explicit_predicates_of (400,364 samples, 0.24%)</title><rect x="66.6275%" y="101" width="0.2360%" height="15" fill="rgb(221,13,13)"/><text x="66.8775%" y="111.50"></text></g><g><title>predicates_of (1,287,172 samples, 0.76%)</title><rect x="66.3946%" y="133" width="0.7586%" height="15" fill="rgb(238,131,9)"/><text x="66.6446%" y="143.50"></text></g><g><title>predicates_defined_on (1,135,671 samples, 0.67%)</title><rect x="66.4839%" y="117" width="0.6693%" height="15" fill="rgb(211,50,8)"/><text x="66.7339%" y="127.50"></text></g><g><title>inferred_outlives_of (491,585 samples, 0.29%)</title><rect x="66.8635%" y="101" width="0.2897%" height="15" fill="rgb(245,182,24)"/><text x="67.1135%" y="111.50"></text></g><g><title>inferred_outlives_crate (433,735 samples, 0.26%)</title><rect x="66.8976%" y="85" width="0.2556%" height="15" fill="rgb(242,14,37)"/><text x="67.1476%" y="95.50"></text></g><g><title>type_of (206,363 samples, 0.12%)</title><rect x="67.0316%" y="69" width="0.1216%" height="15" fill="rgb(246,228,12)"/><text x="67.2816%" y="79.50"></text></g><g><title>type_collecting (5,094,697 samples, 3.00%)</title><rect x="64.4465%" y="165" width="3.0027%" height="15" fill="rgb(213,55,15)"/><text x="64.6965%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (5,076,936 samples, 2.99%)</title><rect x="64.4570%" y="149" width="2.9922%" height="15" fill="rgb(209,9,3)"/><text x="64.7070%" y="159.50">col..</text></g><g><title>type_of (451,573 samples, 0.27%)</title><rect x="67.1830%" y="133" width="0.2661%" height="15" fill="rgb(230,59,30)"/><text x="67.4330%" y="143.50"></text></g><g><title>adt_sized_constraint (173,061 samples, 0.10%)</title><rect x="68.5815%" y="117" width="0.1020%" height="15" fill="rgb(209,121,21)"/><text x="68.8315%" y="127.50"></text></g><g><title>evaluate_obligation (570,455 samples, 0.34%)</title><rect x="68.3694%" y="133" width="0.3362%" height="15" fill="rgb(220,109,13)"/><text x="68.6194%" y="143.50"></text></g><g><title>implied_outlives_bounds (203,554 samples, 0.12%)</title><rect x="68.7056%" y="133" width="0.1200%" height="15" fill="rgb(232,18,1)"/><text x="68.9556%" y="143.50"></text></g><g><title>param_env (216,251 samples, 0.13%)</title><rect x="68.8259%" y="133" width="0.1275%" height="15" fill="rgb(215,41,42)"/><text x="69.0759%" y="143.50"></text></g><g><title>region_scope_tree (462,094 samples, 0.27%)</title><rect x="68.9761%" y="133" width="0.2723%" height="15" fill="rgb(224,123,36)"/><text x="69.2261%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,947,809 samples, 1.74%)</title><rect x="67.5621%" y="149" width="1.7374%" height="15" fill="rgb(240,125,3)"/><text x="67.8121%" y="159.50"></text></g><g><title>evaluate_obligation (319,845 samples, 0.19%)</title><rect x="69.8527%" y="133" width="0.1885%" height="15" fill="rgb(205,98,50)"/><text x="70.1027%" y="143.50"></text></g><g><title>object_safety_violations (190,502 samples, 0.11%)</title><rect x="70.0828%" y="133" width="0.1123%" height="15" fill="rgb(205,185,37)"/><text x="70.3328%" y="143.50"></text></g><g><title>param_env (254,064 samples, 0.15%)</title><rect x="70.1950%" y="133" width="0.1497%" height="15" fill="rgb(238,207,15)"/><text x="70.4450%" y="143.50"></text></g><g><title>check_item_well_formed (2,026,115 samples, 1.19%)</title><rect x="69.2994%" y="149" width="1.1941%" height="15" fill="rgb(213,199,42)"/><text x="69.5494%" y="159.50"></text></g><g><title>analysis (118,907,715 samples, 70.08%)</title><rect x="0.5132%" y="197" width="70.0811%" height="15" fill="rgb(235,201,11)"/><text x="0.7632%" y="207.50">analysis</text></g><g><title>type_check_crate (75,050,169 samples, 44.23%)</title><rect x="26.3617%" y="181" width="44.2326%" height="15" fill="rgb(207,46,11)"/><text x="26.6117%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,328,448 samples, 3.14%)</title><rect x="67.4539%" y="165" width="3.1404%" height="15" fill="rgb(241,35,35)"/><text x="67.7039%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (170,922 samples, 0.10%)</title><rect x="70.4936%" y="149" width="0.1007%" height="15" fill="rgb(243,32,47)"/><text x="70.7436%" y="159.50"></text></g><g><title>codegen_crate (419,865 samples, 0.25%)</title><rect x="70.6010%" y="197" width="0.2475%" height="15" fill="rgb(247,202,23)"/><text x="70.8510%" y="207.50"></text></g><g><title>AST_validation (212,022 samples, 0.12%)</title><rect x="70.9831%" y="181" width="0.1250%" height="15" fill="rgb(219,102,11)"/><text x="71.2331%" y="191.50"></text></g><g><title>metadata_load_macro (558,507 samples, 0.33%)</title><rect x="84.0958%" y="149" width="0.3292%" height="15" fill="rgb(243,110,44)"/><text x="84.3458%" y="159.50"></text></g><g><title>metadata_register_crate (3,094,604 samples, 1.82%)</title><rect x="84.4250%" y="149" width="1.8239%" height="15" fill="rgb(222,74,54)"/><text x="84.6750%" y="159.50">m..</text></g><g><title>metadata_register_crate (1,252,533 samples, 0.74%)</title><rect x="85.5107%" y="133" width="0.7382%" height="15" fill="rgb(216,99,12)"/><text x="85.7607%" y="143.50"></text></g><g><title>metadata_register_crate (197,442 samples, 0.12%)</title><rect x="86.1325%" y="117" width="0.1164%" height="15" fill="rgb(226,22,26)"/><text x="86.3825%" y="127.50"></text></g><g><title>macro_expand_crate (25,601,353 samples, 15.09%)</title><rect x="71.2307%" y="181" width="15.0888%" height="15" fill="rgb(217,163,10)"/><text x="71.4807%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (25,575,143 samples, 15.07%)</title><rect x="71.2461%" y="165" width="15.0733%" height="15" fill="rgb(213,25,53)"/><text x="71.4961%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (211,903 samples, 0.12%)</title><rect x="86.3227%" y="181" width="0.1249%" height="15" fill="rgb(252,105,26)"/><text x="86.5727%" y="191.50"></text></g><g><title>finalize_macro_resolutions (356,754 samples, 0.21%)</title><rect x="86.5155%" y="165" width="0.2103%" height="15" fill="rgb(220,39,43)"/><text x="86.7655%" y="175.50"></text></g><g><title>late_resolve_crate (3,535,429 samples, 2.08%)</title><rect x="86.7258%" y="165" width="2.0837%" height="15" fill="rgb(229,68,48)"/><text x="86.9758%" y="175.50">l..</text></g><g><title>configure_and_expand (30,708,939 samples, 18.10%)</title><rect x="70.8485%" y="197" width="18.0990%" height="15" fill="rgb(252,8,32)"/><text x="71.0985%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,241,607 samples, 2.50%)</title><rect x="86.4476%" y="181" width="2.4999%" height="15" fill="rgb(223,20,43)"/><text x="86.6976%" y="191.50">re..</text></g><g><title>drop_ast (368,384 samples, 0.22%)</title><rect x="88.9475%" y="197" width="0.2171%" height="15" fill="rgb(229,81,49)"/><text x="89.1975%" y="207.50"></text></g><g><title>early_lint_checks (838,320 samples, 0.49%)</title><rect x="89.1744%" y="197" width="0.4941%" height="15" fill="rgb(236,28,36)"/><text x="89.4244%" y="207.50"></text></g><g><title>free_global_ctxt (3,915,653 samples, 2.31%)</title><rect x="89.6685%" y="197" width="2.3078%" height="15" fill="rgb(249,185,26)"/><text x="89.9185%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,431,636 samples, 0.84%)</title><rect x="91.9763%" y="197" width="0.8438%" height="15" fill="rgb(249,174,33)"/><text x="92.2263%" y="207.50"></text></g><g><title>hir_lowering (7,376,501 samples, 4.35%)</title><rect x="92.8200%" y="197" width="4.3475%" height="15" fill="rgb(233,201,37)"/><text x="93.0700%" y="207.50">hir_l..</text></g><g><title>parse_crate (2,987,043 samples, 1.76%)</title><rect x="97.2012%" y="197" width="1.7605%" height="15" fill="rgb(221,78,26)"/><text x="97.4512%" y="207.50"></text></g><g><title>prepare_outputs (326,584 samples, 0.19%)</title><rect x="98.9666%" y="197" width="0.1925%" height="15" fill="rgb(250,127,30)"/><text x="99.2166%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (940,581 samples, 0.55%)</title><rect x="99.1590%" y="197" width="0.5544%" height="15" fill="rgb(230,49,44)"/><text x="99.4090%" y="207.50"></text></g><g><title>all (169,671,696 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (169,671,696 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (343,433 samples, 0.20%)</title><rect x="99.7976%" y="197" width="0.2024%" height="15" fill="rgb(215,43,3)"/><text x="100.0476%" y="207.50"></text></g></svg></svg>