<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (271,281 samples, 0.14%)</title><rect x="13.8897%" y="165" width="0.1437%" height="15" fill="rgb(227,0,7)"/><text x="14.1397%" y="175.50"></text></g><g><title>item_attrs (330,454 samples, 0.18%)</title><rect x="14.5242%" y="133" width="0.1751%" height="15" fill="rgb(217,0,24)"/><text x="14.7742%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (318,674 samples, 0.17%)</title><rect x="14.5305%" y="117" width="0.1688%" height="15" fill="rgb(221,193,54)"/><text x="14.7805%" y="127.50"></text></g><g><title>codegen_fn_attrs (474,935 samples, 0.25%)</title><rect x="14.4635%" y="149" width="0.2516%" height="15" fill="rgb(248,212,6)"/><text x="14.7135%" y="159.50"></text></g><g><title>adt_drop_tys (296,013 samples, 0.16%)</title><rect x="17.9493%" y="101" width="0.1568%" height="15" fill="rgb(208,68,35)"/><text x="18.1993%" y="111.50"></text></g><g><title>adt_drop_tys (600,546 samples, 0.32%)</title><rect x="17.9160%" y="117" width="0.3182%" height="15" fill="rgb(232,128,0)"/><text x="18.1660%" y="127.50"></text></g><g><title>is_copy_raw (1,295,852 samples, 0.69%)</title><rect x="18.2342%" y="117" width="0.6866%" height="15" fill="rgb(207,160,47)"/><text x="18.4842%" y="127.50"></text></g><g><title>evaluate_obligation (1,091,888 samples, 0.58%)</title><rect x="18.3423%" y="101" width="0.5785%" height="15" fill="rgb(228,23,34)"/><text x="18.5923%" y="111.50"></text></g><g><title>needs_drop_raw (2,110,312 samples, 1.12%)</title><rect x="17.8117%" y="133" width="1.1181%" height="15" fill="rgb(218,30,26)"/><text x="18.0617%" y="143.50"></text></g><g><title>impl_parent (267,323 samples, 0.14%)</title><rect x="19.3870%" y="101" width="0.1416%" height="15" fill="rgb(220,122,19)"/><text x="19.6370%" y="111.50"></text></g><g><title>specialization_graph_of (1,443,336 samples, 0.76%)</title><rect x="19.1500%" y="117" width="0.7647%" height="15" fill="rgb(250,228,42)"/><text x="19.4000%" y="127.50"></text></g><g><title>impl_trait_ref (728,679 samples, 0.39%)</title><rect x="19.5286%" y="101" width="0.3861%" height="15" fill="rgb(240,193,28)"/><text x="19.7786%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (637,489 samples, 0.34%)</title><rect x="19.5769%" y="85" width="0.3378%" height="15" fill="rgb(216,20,37)"/><text x="19.8269%" y="95.50"></text></g><g><title>resolve_instance (1,938,439 samples, 1.03%)</title><rect x="18.9299%" y="133" width="1.0271%" height="15" fill="rgb(206,188,39)"/><text x="19.1799%" y="143.50"></text></g><g><title>thir_body (2,249,233 samples, 1.19%)</title><rect x="19.9736%" y="133" width="1.1917%" height="15" fill="rgb(217,207,13)"/><text x="20.2236%" y="143.50"></text></g><g><title>mir_const (15,291,926 samples, 8.10%)</title><rect x="13.0762%" y="181" width="8.1024%" height="15" fill="rgb(231,73,38)"/><text x="13.3262%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (13,485,365 samples, 7.15%)</title><rect x="14.0334%" y="165" width="7.1452%" height="15" fill="rgb(225,20,46)"/><text x="14.2834%" y="175.50">unsafety_c..</text></g><g><title>mir_built (12,195,180 samples, 6.46%)</title><rect x="14.7170%" y="149" width="6.4616%" height="15" fill="rgb(210,31,41)"/><text x="14.9670%" y="159.50">mir_built</text></g><g><title>mir_const (525,265 samples, 0.28%)</title><rect x="21.3969%" y="165" width="0.2783%" height="15" fill="rgb(221,200,47)"/><text x="21.6469%" y="175.50"></text></g><g><title>unsafety_check_result (418,644 samples, 0.22%)</title><rect x="21.4534%" y="149" width="0.2218%" height="15" fill="rgb(226,26,5)"/><text x="21.7034%" y="159.50"></text></g><g><title>mir_built (372,763 samples, 0.20%)</title><rect x="21.4777%" y="133" width="0.1975%" height="15" fill="rgb(249,33,26)"/><text x="21.7277%" y="143.50"></text></g><g><title>mir_promoted (17,930,570 samples, 9.50%)</title><rect x="12.1766%" y="197" width="9.5005%" height="15" fill="rgb(235,183,28)"/><text x="12.4266%" y="207.50">mir_promoted</text></g><g><title>mir_const_qualif (940,774 samples, 0.50%)</title><rect x="21.1786%" y="181" width="0.4985%" height="15" fill="rgb(221,5,38)"/><text x="21.4286%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (601,787 samples, 0.32%)</title><rect x="21.6835%" y="197" width="0.3189%" height="15" fill="rgb(247,18,42)"/><text x="21.9335%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (527,600 samples, 0.28%)</title><rect x="22.0023%" y="197" width="0.2795%" height="15" fill="rgb(241,131,45)"/><text x="22.2523%" y="207.50"></text></g><g><title>normalize_projection_ty (350,258 samples, 0.19%)</title><rect x="22.0963%" y="181" width="0.1856%" height="15" fill="rgb(249,31,29)"/><text x="22.3463%" y="191.50"></text></g><g><title>type_op_normalize_predicate (524,054 samples, 0.28%)</title><rect x="22.2819%" y="197" width="0.2777%" height="15" fill="rgb(225,111,53)"/><text x="22.5319%" y="207.50"></text></g><g><title>normalize_projection_ty (362,783 samples, 0.19%)</title><rect x="22.3673%" y="181" width="0.1922%" height="15" fill="rgb(238,160,17)"/><text x="22.6173%" y="191.50"></text></g><g><title>type_op_prove_predicate (2,454,821 samples, 1.30%)</title><rect x="22.5595%" y="197" width="1.3007%" height="15" fill="rgb(214,148,48)"/><text x="22.8095%" y="207.50"></text></g><g><title>evaluate_obligation (365,183 samples, 0.19%)</title><rect x="23.6667%" y="181" width="0.1935%" height="15" fill="rgb(232,36,49)"/><text x="23.9167%" y="191.50"></text></g><g><title>MIR_borrow_checking (43,983,710 samples, 23.30%)</title><rect x="0.5638%" y="229" width="23.3046%" height="15" fill="rgb(209,103,24)"/><text x="0.8138%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (43,795,230 samples, 23.20%)</title><rect x="0.6637%" y="213" width="23.2048%" height="15" fill="rgb(229,88,8)"/><text x="0.9137%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (343,323 samples, 0.18%)</title><rect x="23.8684%" y="229" width="0.1819%" height="15" fill="rgb(213,181,19)"/><text x="24.1184%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (257,023 samples, 0.14%)</title><rect x="23.9142%" y="213" width="0.1362%" height="15" fill="rgb(254,191,54)"/><text x="24.1642%" y="223.50"></text></g><g><title>hir_module_items (262,464 samples, 0.14%)</title><rect x="24.0503%" y="229" width="0.1391%" height="15" fill="rgb(241,83,37)"/><text x="24.3003%" y="239.50"></text></g><g><title>codegen_fn_attrs (391,124 samples, 0.21%)</title><rect x="24.4359%" y="197" width="0.2072%" height="15" fill="rgb(233,36,39)"/><text x="24.6859%" y="207.50"></text></g><g><title>check_mod_attrs (817,650 samples, 0.43%)</title><rect x="24.2100%" y="213" width="0.4332%" height="15" fill="rgb(226,3,54)"/><text x="24.4600%" y="223.50"></text></g><g><title>check_mod_const_bodies (192,383 samples, 0.10%)</title><rect x="24.6432%" y="213" width="0.1019%" height="15" fill="rgb(245,192,40)"/><text x="24.8932%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (484,655 samples, 0.26%)</title><rect x="24.8137%" y="213" width="0.2568%" height="15" fill="rgb(238,167,29)"/><text x="25.0637%" y="223.50"></text></g><g><title>misc_checking_1 (1,738,540 samples, 0.92%)</title><rect x="24.1897%" y="229" width="0.9212%" height="15" fill="rgb(232,182,51)"/><text x="24.4397%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (905,000 samples, 0.48%)</title><rect x="25.1117%" y="213" width="0.4795%" height="15" fill="rgb(231,60,39)"/><text x="25.3617%" y="223.50"></text></g><g><title>check_mod_liveness (729,417 samples, 0.39%)</title><rect x="25.2048%" y="197" width="0.3865%" height="15" fill="rgb(208,69,12)"/><text x="25.4548%" y="207.50"></text></g><g><title>misc_checking_2 (1,925,771 samples, 1.02%)</title><rect x="25.1108%" y="229" width="1.0204%" height="15" fill="rgb(235,93,37)"/><text x="25.3608%" y="239.50"></text></g><g><title>match_checking (1,019,001 samples, 0.54%)</title><rect x="25.5913%" y="213" width="0.5399%" height="15" fill="rgb(213,116,39)"/><text x="25.8413%" y="223.50"></text></g><g><title>check_match (969,860 samples, 0.51%)</title><rect x="25.6173%" y="197" width="0.5139%" height="15" fill="rgb(222,207,29)"/><text x="25.8673%" y="207.50"></text></g><g><title>check_private_in_public (332,703 samples, 0.18%)</title><rect x="26.1364%" y="213" width="0.1763%" height="15" fill="rgb(206,96,30)"/><text x="26.3864%" y="223.50"></text></g><g><title>death_checking (635,627 samples, 0.34%)</title><rect x="26.3127%" y="213" width="0.3368%" height="15" fill="rgb(218,138,4)"/><text x="26.5627%" y="223.50"></text></g><g><title>eval_to_const_value_raw (582,317 samples, 0.31%)</title><rect x="27.0686%" y="133" width="0.3085%" height="15" fill="rgb(250,191,14)"/><text x="27.3186%" y="143.50"></text></g><g><title>eval_to_const_value_raw (581,647 samples, 0.31%)</title><rect x="27.0690%" y="117" width="0.3082%" height="15" fill="rgb(239,60,40)"/><text x="27.3190%" y="127.50"></text></g><g><title>eval_to_allocation_raw (579,947 samples, 0.31%)</title><rect x="27.0699%" y="101" width="0.3073%" height="15" fill="rgb(206,27,48)"/><text x="27.3199%" y="111.50"></text></g><g><title>eval_to_allocation_raw (650,487 samples, 0.34%)</title><rect x="27.0333%" y="181" width="0.3447%" height="15" fill="rgb(225,35,8)"/><text x="27.2833%" y="191.50"></text></g><g><title>eval_to_allocation_raw (648,947 samples, 0.34%)</title><rect x="27.0341%" y="165" width="0.3438%" height="15" fill="rgb(250,213,24)"/><text x="27.2841%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (591,657 samples, 0.31%)</title><rect x="27.0645%" y="149" width="0.3135%" height="15" fill="rgb(247,123,22)"/><text x="27.3145%" y="159.50"></text></g><g><title>eval_to_const_value_raw (221,083 samples, 0.12%)</title><rect x="27.3780%" y="181" width="0.1171%" height="15" fill="rgb(231,138,38)"/><text x="27.6280%" y="191.50"></text></g><g><title>eval_to_const_value_raw (216,813 samples, 0.11%)</title><rect x="27.3802%" y="165" width="0.1149%" height="15" fill="rgb(231,145,46)"/><text x="27.6302%" y="175.50"></text></g><g><title>eval_to_allocation_raw (205,823 samples, 0.11%)</title><rect x="27.3860%" y="149" width="0.1091%" height="15" fill="rgb(251,118,11)"/><text x="27.6360%" y="159.50"></text></g><g><title>param_env (635,685 samples, 0.34%)</title><rect x="27.4951%" y="181" width="0.3368%" height="15" fill="rgb(217,147,25)"/><text x="27.7451%" y="191.50"></text></g><g><title>predicates_of (280,493 samples, 0.15%)</title><rect x="27.6833%" y="165" width="0.1486%" height="15" fill="rgb(247,81,37)"/><text x="27.9333%" y="175.50"></text></g><g><title>predicates_defined_on (228,221 samples, 0.12%)</title><rect x="27.7110%" y="149" width="0.1209%" height="15" fill="rgb(209,12,38)"/><text x="27.9610%" y="159.50"></text></g><g><title>impl_parent (605,436 samples, 0.32%)</title><rect x="28.5030%" y="149" width="0.3208%" height="15" fill="rgb(227,1,9)"/><text x="28.7530%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (386,715 samples, 0.20%)</title><rect x="28.6189%" y="133" width="0.2049%" height="15" fill="rgb(248,47,43)"/><text x="28.8689%" y="143.50"></text></g><g><title>specialization_graph_of (3,671,981 samples, 1.95%)</title><rect x="27.8658%" y="165" width="1.9456%" height="15" fill="rgb(221,10,30)"/><text x="28.1158%" y="175.50">s..</text></g><g><title>impl_trait_ref (1,863,884 samples, 0.99%)</title><rect x="28.8238%" y="149" width="0.9876%" height="15" fill="rgb(210,229,1)"/><text x="29.0738%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,618,108 samples, 0.86%)</title><rect x="28.9540%" y="133" width="0.8573%" height="15" fill="rgb(222,148,37)"/><text x="29.2040%" y="143.50"></text></g><g><title>resolve_instance (3,738,471 samples, 1.98%)</title><rect x="27.8319%" y="181" width="1.9808%" height="15" fill="rgb(234,67,33)"/><text x="28.0819%" y="191.50">r..</text></g><g><title>crate_lints (5,988,636 samples, 3.17%)</title><rect x="26.6508%" y="197" width="3.1731%" height="15" fill="rgb(247,98,35)"/><text x="26.9008%" y="207.50">cra..</text></g><g><title>lint_checking (6,942,396 samples, 3.68%)</title><rect x="26.6495%" y="213" width="3.6784%" height="15" fill="rgb(247,138,52)"/><text x="26.8995%" y="223.50">lint..</text></g><g><title>module_lints (951,270 samples, 0.50%)</title><rect x="29.8239%" y="197" width="0.5040%" height="15" fill="rgb(213,79,30)"/><text x="30.0739%" y="207.50"></text></g><g><title>lint_mod (938,960 samples, 0.50%)</title><rect x="29.8304%" y="181" width="0.4975%" height="15" fill="rgb(246,177,23)"/><text x="30.0804%" y="191.50"></text></g><g><title>privacy_checking_modules (1,475,616 samples, 0.78%)</title><rect x="30.4256%" y="213" width="0.7819%" height="15" fill="rgb(230,62,27)"/><text x="30.6756%" y="223.50"></text></g><g><title>check_mod_privacy (1,467,876 samples, 0.78%)</title><rect x="30.4297%" y="197" width="0.7777%" height="15" fill="rgb(216,154,8)"/><text x="30.6797%" y="207.50"></text></g><g><title>misc_checking_3 (9,596,297 samples, 5.08%)</title><rect x="26.1312%" y="229" width="5.0846%" height="15" fill="rgb(244,35,45)"/><text x="26.3812%" y="239.50">misc_c..</text></g><g><title>impl_parent (845,624 samples, 0.45%)</title><rect x="32.0421%" y="165" width="0.4481%" height="15" fill="rgb(251,115,12)"/><text x="32.2921%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (534,662 samples, 0.28%)</title><rect x="32.2069%" y="149" width="0.2833%" height="15" fill="rgb(240,54,50)"/><text x="32.4569%" y="159.50"></text></g><g><title>impl_trait_ref (2,346,714 samples, 1.24%)</title><rect x="32.4902%" y="165" width="1.2434%" height="15" fill="rgb(233,84,52)"/><text x="32.7402%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,033,673 samples, 1.08%)</title><rect x="32.6560%" y="149" width="1.0775%" height="15" fill="rgb(207,117,47)"/><text x="32.9060%" y="159.50"></text></g><g><title>coherent_trait (4,667,892 samples, 2.47%)</title><rect x="31.4170%" y="197" width="2.4733%" height="15" fill="rgb(249,43,39)"/><text x="31.6670%" y="207.50">co..</text></g><g><title>specialization_graph_of (4,654,352 samples, 2.47%)</title><rect x="31.4242%" y="181" width="2.4661%" height="15" fill="rgb(209,38,44)"/><text x="31.6742%" y="191.50">sp..</text></g><g><title>trait_impls_of (295,774 samples, 0.16%)</title><rect x="33.7336%" y="165" width="0.1567%" height="15" fill="rgb(236,212,23)"/><text x="33.9836%" y="175.50"></text></g><g><title>coherence_checking (4,738,513 samples, 2.51%)</title><rect x="31.4092%" y="213" width="2.5107%" height="15" fill="rgb(242,79,21)"/><text x="31.6592%" y="223.50">co..</text></g><g><title>adt_def (244,593 samples, 0.13%)</title><rect x="56.6593%" y="133" width="0.1296%" height="15" fill="rgb(211,96,35)"/><text x="56.9093%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (244,013 samples, 0.13%)</title><rect x="56.6596%" y="117" width="0.1293%" height="15" fill="rgb(253,215,40)"/><text x="56.9096%" y="127.50"></text></g><g><title>adt_sized_constraint (250,193 samples, 0.13%)</title><rect x="56.6580%" y="149" width="0.1326%" height="15" fill="rgb(211,81,21)"/><text x="56.9080%" y="159.50"></text></g><g><title>adt_sized_constraint (388,334 samples, 0.21%)</title><rect x="56.5920%" y="165" width="0.2058%" height="15" fill="rgb(208,190,38)"/><text x="56.8420%" y="175.50"></text></g><g><title>associated_item (810,877 samples, 0.43%)</title><rect x="56.9440%" y="149" width="0.4296%" height="15" fill="rgb(235,213,38)"/><text x="57.1940%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (658,296 samples, 0.35%)</title><rect x="57.0248%" y="133" width="0.3488%" height="15" fill="rgb(237,122,38)"/><text x="57.2748%" y="143.50"></text></g><g><title>associated_items (1,125,972 samples, 0.60%)</title><rect x="56.8067%" y="165" width="0.5966%" height="15" fill="rgb(244,218,35)"/><text x="57.0567%" y="175.50"></text></g><g><title>adt_dtorck_constraint (318,680 samples, 0.17%)</title><rect x="57.8820%" y="117" width="0.1689%" height="15" fill="rgb(240,68,47)"/><text x="58.1320%" y="127.50"></text></g><g><title>adt_dtorck_constraint (507,952 samples, 0.27%)</title><rect x="57.8082%" y="133" width="0.2691%" height="15" fill="rgb(210,16,53)"/><text x="58.0582%" y="143.50"></text></g><g><title>adt_dtorck_constraint (760,486 samples, 0.40%)</title><rect x="57.7038%" y="149" width="0.4029%" height="15" fill="rgb(235,124,12)"/><text x="57.9538%" y="159.50"></text></g><g><title>dropck_outlives (1,233,131 samples, 0.65%)</title><rect x="57.4774%" y="165" width="0.6534%" height="15" fill="rgb(224,169,11)"/><text x="57.7274%" y="175.50"></text></g><g><title>adt_def (243,363 samples, 0.13%)</title><rect x="61.1095%" y="133" width="0.1289%" height="15" fill="rgb(250,166,2)"/><text x="61.3595%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (237,043 samples, 0.13%)</title><rect x="61.1129%" y="117" width="0.1256%" height="15" fill="rgb(242,216,29)"/><text x="61.3629%" y="127.50"></text></g><g><title>adt_sized_constraint (361,835 samples, 0.19%)</title><rect x="61.0884%" y="149" width="0.1917%" height="15" fill="rgb(230,116,27)"/><text x="61.3384%" y="159.50"></text></g><g><title>generics_of (1,383,104 samples, 0.73%)</title><rect x="61.2991%" y="149" width="0.7328%" height="15" fill="rgb(228,99,48)"/><text x="61.5491%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (1,063,631 samples, 0.56%)</title><rect x="61.4684%" y="133" width="0.5636%" height="15" fill="rgb(253,11,6)"/><text x="61.7184%" y="143.50"></text></g><g><title>impl_trait_ref (960,557 samples, 0.51%)</title><rect x="62.1152%" y="149" width="0.5089%" height="15" fill="rgb(247,143,39)"/><text x="62.3652%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (769,086 samples, 0.41%)</title><rect x="62.2167%" y="133" width="0.4075%" height="15" fill="rgb(236,97,10)"/><text x="62.4667%" y="143.50"></text></g><g><title>predicates_of (605,261 samples, 0.32%)</title><rect x="62.6527%" y="149" width="0.3207%" height="15" fill="rgb(233,208,19)"/><text x="62.9027%" y="159.50"></text></g><g><title>predicates_defined_on (358,726 samples, 0.19%)</title><rect x="62.7833%" y="133" width="0.1901%" height="15" fill="rgb(216,164,2)"/><text x="63.0333%" y="143.50"></text></g><g><title>specializes (1,131,053 samples, 0.60%)</title><rect x="62.9734%" y="149" width="0.5993%" height="15" fill="rgb(220,129,5)"/><text x="63.2234%" y="159.50"></text></g><g><title>param_env (616,235 samples, 0.33%)</title><rect x="63.2461%" y="133" width="0.3265%" height="15" fill="rgb(242,17,10)"/><text x="63.4961%" y="143.50"></text></g><g><title>def_span (223,371 samples, 0.12%)</title><rect x="63.4543%" y="117" width="0.1184%" height="15" fill="rgb(242,107,0)"/><text x="63.7043%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (191,201 samples, 0.10%)</title><rect x="63.4713%" y="101" width="0.1013%" height="15" fill="rgb(251,28,31)"/><text x="63.7213%" y="111.50"></text></g><g><title>trait_impls_of (1,092,405 samples, 0.58%)</title><rect x="63.5882%" y="149" width="0.5788%" height="15" fill="rgb(233,223,10)"/><text x="63.8382%" y="159.50"></text></g><g><title>implementations_of_trait (405,126 samples, 0.21%)</title><rect x="63.9524%" y="133" width="0.2147%" height="15" fill="rgb(215,21,27)"/><text x="64.2024%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (252,881 samples, 0.13%)</title><rect x="64.0330%" y="117" width="0.1340%" height="15" fill="rgb(232,23,21)"/><text x="64.2830%" y="127.50"></text></g><g><title>evaluate_obligation (11,436,193 samples, 6.06%)</title><rect x="58.1308%" y="165" width="6.0594%" height="15" fill="rgb(244,5,23)"/><text x="58.3808%" y="175.50">evaluate..</text></g><g><title>fn_sig (355,835 samples, 0.19%)</title><rect x="64.2151%" y="165" width="0.1885%" height="15" fill="rgb(226,81,46)"/><text x="64.4651%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (326,484 samples, 0.17%)</title><rect x="64.2307%" y="149" width="0.1730%" height="15" fill="rgb(247,70,30)"/><text x="64.4807%" y="159.50"></text></g><g><title>generics_of (529,988 samples, 0.28%)</title><rect x="64.4037%" y="165" width="0.2808%" height="15" fill="rgb(212,68,19)"/><text x="64.6537%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (399,016 samples, 0.21%)</title><rect x="64.4730%" y="149" width="0.2114%" height="15" fill="rgb(240,187,13)"/><text x="64.7230%" y="159.50"></text></g><g><title>impl_item_implementor_ids (235,873 samples, 0.12%)</title><rect x="64.6845%" y="165" width="0.1250%" height="15" fill="rgb(223,113,26)"/><text x="64.9345%" y="175.50"></text></g><g><title>associated_items (201,383 samples, 0.11%)</title><rect x="64.7027%" y="149" width="0.1067%" height="15" fill="rgb(206,192,2)"/><text x="64.9527%" y="159.50"></text></g><g><title>impl_trait_ref (357,142 samples, 0.19%)</title><rect x="64.8211%" y="165" width="0.1892%" height="15" fill="rgb(241,108,4)"/><text x="65.0711%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (291,182 samples, 0.15%)</title><rect x="64.8560%" y="149" width="0.1543%" height="15" fill="rgb(247,173,49)"/><text x="65.1060%" y="159.50"></text></g><g><title>evaluate_obligation (243,894 samples, 0.13%)</title><rect x="65.2842%" y="149" width="0.1292%" height="15" fill="rgb(224,114,35)"/><text x="65.5342%" y="159.50"></text></g><g><title>method_autoderef_steps (433,686 samples, 0.23%)</title><rect x="65.1893%" y="165" width="0.2298%" height="15" fill="rgb(245,159,27)"/><text x="65.4393%" y="175.50"></text></g><g><title>explicit_predicates_of (227,122 samples, 0.12%)</title><rect x="65.8066%" y="133" width="0.1203%" height="15" fill="rgb(245,172,44)"/><text x="66.0566%" y="143.50"></text></g><g><title>predicates_of (846,068 samples, 0.45%)</title><rect x="65.5342%" y="165" width="0.4483%" height="15" fill="rgb(236,23,11)"/><text x="65.7842%" y="175.50"></text></g><g><title>predicates_defined_on (534,987 samples, 0.28%)</title><rect x="65.6990%" y="149" width="0.2835%" height="15" fill="rgb(205,117,38)"/><text x="65.9490%" y="159.50"></text></g><g><title>evaluate_obligation (492,347 samples, 0.26%)</title><rect x="68.3509%" y="149" width="0.2609%" height="15" fill="rgb(237,72,25)"/><text x="68.6009%" y="159.50"></text></g><g><title>is_copy_raw (272,901 samples, 0.14%)</title><rect x="68.6524%" y="149" width="0.1446%" height="15" fill="rgb(244,70,9)"/><text x="68.9024%" y="159.50"></text></g><g><title>evaluate_obligation (234,620 samples, 0.12%)</title><rect x="68.6727%" y="133" width="0.1243%" height="15" fill="rgb(217,125,39)"/><text x="68.9227%" y="143.50"></text></g><g><title>typeck (5,055,076 samples, 2.68%)</title><rect x="66.1854%" y="165" width="2.6784%" height="15" fill="rgb(235,36,10)"/><text x="66.4354%" y="175.50">ty..</text></g><g><title>item_bodies_checking (66,011,645 samples, 34.98%)</title><rect x="33.9395%" y="213" width="34.9761%" height="15" fill="rgb(251,123,47)"/><text x="34.1895%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (66,007,725 samples, 34.97%)</title><rect x="33.9416%" y="197" width="34.9740%" height="15" fill="rgb(221,13,13)"/><text x="34.1916%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (65,889,184 samples, 34.91%)</title><rect x="34.0044%" y="181" width="34.9112%" height="15" fill="rgb(238,131,9)"/><text x="34.2544%" y="191.50">typeck</text></g><g><title>impl_trait_ref (241,572 samples, 0.13%)</title><rect x="69.8466%" y="53" width="0.1280%" height="15" fill="rgb(211,50,8)"/><text x="70.0966%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (219,801 samples, 0.12%)</title><rect x="69.8581%" y="37" width="0.1165%" height="15" fill="rgb(245,182,24)"/><text x="70.1081%" y="47.50"></text></g><g><title>coherent_trait (444,605 samples, 0.24%)</title><rect x="69.7571%" y="85" width="0.2356%" height="15" fill="rgb(242,14,37)"/><text x="70.0071%" y="95.50"></text></g><g><title>specialization_graph_of (442,305 samples, 0.23%)</title><rect x="69.7583%" y="69" width="0.2344%" height="15" fill="rgb(246,228,12)"/><text x="70.0083%" y="79.50"></text></g><g><title>adt_destructor (451,435 samples, 0.24%)</title><rect x="69.7543%" y="117" width="0.2392%" height="15" fill="rgb(213,55,15)"/><text x="70.0043%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (450,925 samples, 0.24%)</title><rect x="69.7546%" y="101" width="0.2389%" height="15" fill="rgb(209,9,3)"/><text x="70.0046%" y="111.50"></text></g><g><title>adt_dtorck_constraint (457,025 samples, 0.24%)</title><rect x="69.7517%" y="133" width="0.2422%" height="15" fill="rgb(230,59,30)"/><text x="70.0017%" y="143.50"></text></g><g><title>dropck_outlives (481,955 samples, 0.26%)</title><rect x="69.7392%" y="165" width="0.2554%" height="15" fill="rgb(209,121,21)"/><text x="69.9892%" y="175.50"></text></g><g><title>adt_dtorck_constraint (465,275 samples, 0.25%)</title><rect x="69.7480%" y="149" width="0.2465%" height="15" fill="rgb(220,109,13)"/><text x="69.9980%" y="159.50"></text></g><g><title>typeck (1,307,004 samples, 0.69%)</title><rect x="69.3703%" y="181" width="0.6925%" height="15" fill="rgb(232,18,1)"/><text x="69.6203%" y="191.50"></text></g><g><title>item_types_checking (2,166,903 samples, 1.15%)</title><rect x="68.9156%" y="213" width="1.1481%" height="15" fill="rgb(215,41,42)"/><text x="69.1656%" y="223.50"></text></g><g><title>check_mod_item_types (2,157,773 samples, 1.14%)</title><rect x="68.9204%" y="197" width="1.1433%" height="15" fill="rgb(224,123,36)"/><text x="69.1704%" y="207.50"></text></g><g><title>mir_borrowck (392,085 samples, 0.21%)</title><rect x="70.5638%" y="101" width="0.2077%" height="15" fill="rgb(240,125,3)"/><text x="70.8138%" y="111.50"></text></g><g><title>mir_for_ctfe (546,106 samples, 0.29%)</title><rect x="70.4826%" y="133" width="0.2894%" height="15" fill="rgb(205,98,50)"/><text x="70.7326%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (504,106 samples, 0.27%)</title><rect x="70.5049%" y="117" width="0.2671%" height="15" fill="rgb(205,185,37)"/><text x="70.7549%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,437,656 samples, 0.76%)</title><rect x="70.2834%" y="181" width="0.7617%" height="15" fill="rgb(238,207,15)"/><text x="70.5334%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,421,886 samples, 0.75%)</title><rect x="70.2918%" y="165" width="0.7534%" height="15" fill="rgb(213,199,42)"/><text x="70.5418%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,414,716 samples, 0.75%)</title><rect x="70.2956%" y="149" width="0.7496%" height="15" fill="rgb(235,201,11)"/><text x="70.5456%" y="159.50"></text></g><g><title>typeck (515,136 samples, 0.27%)</title><rect x="70.7722%" y="133" width="0.2729%" height="15" fill="rgb(207,46,11)"/><text x="71.0222%" y="143.50"></text></g><g><title>fn_sig (418,866 samples, 0.22%)</title><rect x="71.0452%" y="181" width="0.2219%" height="15" fill="rgb(241,35,35)"/><text x="71.2952%" y="191.50"></text></g><g><title>named_region_map (805,738 samples, 0.43%)</title><rect x="71.3393%" y="165" width="0.4269%" height="15" fill="rgb(243,32,47)"/><text x="71.5893%" y="175.50"></text></g><g><title>resolve_lifetimes (785,458 samples, 0.42%)</title><rect x="71.3500%" y="149" width="0.4162%" height="15" fill="rgb(247,202,23)"/><text x="71.6000%" y="159.50"></text></g><g><title>lint_levels (491,185 samples, 0.26%)</title><rect x="71.5059%" y="133" width="0.2603%" height="15" fill="rgb(219,102,11)"/><text x="71.7559%" y="143.50"></text></g><g><title>generics_of (961,679 samples, 0.51%)</title><rect x="71.2671%" y="181" width="0.5095%" height="15" fill="rgb(243,110,44)"/><text x="71.5171%" y="191.50"></text></g><g><title>explicit_predicates_of (411,504 samples, 0.22%)</title><rect x="71.9572%" y="149" width="0.2180%" height="15" fill="rgb(222,74,54)"/><text x="72.2072%" y="159.50"></text></g><g><title>predicates_of (688,167 samples, 0.36%)</title><rect x="71.8718%" y="181" width="0.3646%" height="15" fill="rgb(216,99,12)"/><text x="72.1218%" y="191.50"></text></g><g><title>predicates_defined_on (622,387 samples, 0.33%)</title><rect x="71.9066%" y="165" width="0.3298%" height="15" fill="rgb(226,22,26)"/><text x="72.1566%" y="175.50"></text></g><g><title>type_collecting (4,237,517 samples, 2.25%)</title><rect x="70.0677%" y="213" width="2.2452%" height="15" fill="rgb(217,163,10)"/><text x="70.3177%" y="223.50">t..</text></g><g><title>collect_mod_item_types (4,218,166 samples, 2.23%)</title><rect x="70.0779%" y="197" width="2.2350%" height="15" fill="rgb(213,25,53)"/><text x="70.3279%" y="207.50">c..</text></g><g><title>evaluate_obligation (374,323 samples, 0.20%)</title><rect x="73.0179%" y="181" width="0.1983%" height="15" fill="rgb(252,105,26)"/><text x="73.2679%" y="191.50"></text></g><g><title>param_env (191,300 samples, 0.10%)</title><rect x="73.3092%" y="181" width="0.1014%" height="15" fill="rgb(220,39,43)"/><text x="73.5592%" y="191.50"></text></g><g><title>check_impl_item_well_formed (2,317,452 samples, 1.23%)</title><rect x="72.4465%" y="197" width="1.2279%" height="15" fill="rgb(229,68,48)"/><text x="72.6965%" y="207.50"></text></g><g><title>region_scope_tree (466,104 samples, 0.25%)</title><rect x="73.4274%" y="181" width="0.2470%" height="15" fill="rgb(252,8,32)"/><text x="73.6774%" y="191.50"></text></g><g><title>evaluate_obligation (597,976 samples, 0.32%)</title><rect x="74.2503%" y="181" width="0.3168%" height="15" fill="rgb(223,20,43)"/><text x="74.5003%" y="191.50"></text></g><g><title>param_env (284,542 samples, 0.15%)</title><rect x="74.6030%" y="181" width="0.1508%" height="15" fill="rgb(229,81,49)"/><text x="74.8530%" y="191.50"></text></g><g><title>region_scope_tree (205,531 samples, 0.11%)</title><rect x="74.7797%" y="181" width="0.1089%" height="15" fill="rgb(236,28,36)"/><text x="75.0297%" y="191.50"></text></g><g><title>check_item_well_formed (2,362,587 samples, 1.25%)</title><rect x="73.6744%" y="197" width="1.2518%" height="15" fill="rgb(249,185,26)"/><text x="73.9244%" y="207.50"></text></g><g><title>analysis (141,645,006 samples, 75.05%)</title><rect x="0.3250%" y="245" width="75.0502%" height="15" fill="rgb(249,174,33)"/><text x="0.5750%" y="255.50">analysis</text></g><g><title>type_check_crate (83,343,697 samples, 44.16%)</title><rect x="31.2157%" y="229" width="44.1594%" height="15" fill="rgb(233,201,37)"/><text x="31.4657%" y="239.50">type_check_crate</text></g><g><title>wf_checking (5,771,664 samples, 3.06%)</title><rect x="72.3170%" y="213" width="3.0581%" height="15" fill="rgb(221,78,26)"/><text x="72.5670%" y="223.50">wf_..</text></g><g><title>check_trait_item_well_formed (847,339 samples, 0.45%)</title><rect x="74.9262%" y="197" width="0.4490%" height="15" fill="rgb(250,127,30)"/><text x="75.1762%" y="207.50"></text></g><g><title>trait_impls_of (470,286 samples, 0.25%)</title><rect x="75.1260%" y="181" width="0.2492%" height="15" fill="rgb(230,49,44)"/><text x="75.3760%" y="191.50"></text></g><g><title>codegen_crate (583,807 samples, 0.31%)</title><rect x="75.3782%" y="245" width="0.3093%" height="15" fill="rgb(229,67,23)"/><text x="75.6282%" y="255.50"></text></g><g><title>AST_validation (252,683 samples, 0.13%)</title><rect x="75.7561%" y="229" width="0.1339%" height="15" fill="rgb(249,83,47)"/><text x="76.0061%" y="239.50"></text></g><g><title>metadata_load_macro (669,560 samples, 0.35%)</title><rect x="89.7958%" y="197" width="0.3548%" height="15" fill="rgb(215,43,3)"/><text x="90.0458%" y="207.50"></text></g><g><title>metadata_register_crate (1,947,573 samples, 1.03%)</title><rect x="90.1506%" y="197" width="1.0319%" height="15" fill="rgb(238,154,13)"/><text x="90.4006%" y="207.50"></text></g><g><title>metadata_register_crate (524,357 samples, 0.28%)</title><rect x="90.9047%" y="181" width="0.2778%" height="15" fill="rgb(219,56,2)"/><text x="91.1547%" y="191.50"></text></g><g><title>macro_expand_crate (28,887,772 samples, 15.31%)</title><rect x="75.9661%" y="229" width="15.3061%" height="15" fill="rgb(233,0,4)"/><text x="76.2161%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (28,872,762 samples, 15.30%)</title><rect x="75.9741%" y="213" width="15.2981%" height="15" fill="rgb(235,30,7)"/><text x="76.2241%" y="223.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (294,813 samples, 0.16%)</title><rect x="91.2729%" y="229" width="0.1562%" height="15" fill="rgb(250,79,13)"/><text x="91.5229%" y="239.50"></text></g><g><title>late_resolve_crate (3,012,114 samples, 1.60%)</title><rect x="91.7063%" y="213" width="1.5960%" height="15" fill="rgb(211,146,34)"/><text x="91.9563%" y="223.50"></text></g><g><title>configure_and_expand (33,424,702 samples, 17.71%)</title><rect x="75.6875%" y="245" width="17.7100%" height="15" fill="rgb(228,22,38)"/><text x="75.9375%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (3,534,570 samples, 1.87%)</title><rect x="91.5247%" y="229" width="1.8728%" height="15" fill="rgb(235,168,5)"/><text x="91.7747%" y="239.50">r..</text></g><g><title>drop_ast (298,304 samples, 0.16%)</title><rect x="93.3975%" y="245" width="0.1581%" height="15" fill="rgb(221,155,16)"/><text x="93.6475%" y="255.50"></text></g><g><title>early_lint_checks (672,707 samples, 0.36%)</title><rect x="93.5653%" y="245" width="0.3564%" height="15" fill="rgb(215,215,53)"/><text x="93.8153%" y="255.50"></text></g><g><title>free_global_ctxt (4,505,100 samples, 2.39%)</title><rect x="93.9217%" y="245" width="2.3870%" height="15" fill="rgb(223,4,10)"/><text x="94.1717%" y="255.50">fr..</text></g><g><title>generate_crate_metadata (229,743 samples, 0.12%)</title><rect x="96.3087%" y="245" width="0.1217%" height="15" fill="rgb(234,103,6)"/><text x="96.5587%" y="255.50"></text></g><g><title>hir_lowering (4,569,181 samples, 2.42%)</title><rect x="96.4305%" y="245" width="2.4210%" height="15" fill="rgb(227,97,0)"/><text x="96.6805%" y="255.50">hi..</text></g><g><title>parse_crate (438,535 samples, 0.23%)</title><rect x="98.8846%" y="245" width="0.2324%" height="15" fill="rgb(234,150,53)"/><text x="99.1346%" y="255.50"></text></g><g><title>prepare_outputs (214,282 samples, 0.11%)</title><rect x="99.1201%" y="245" width="0.1135%" height="15" fill="rgb(228,201,54)"/><text x="99.3701%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,032,151 samples, 0.55%)</title><rect x="99.2336%" y="245" width="0.5469%" height="15" fill="rgb(222,22,37)"/><text x="99.4836%" y="255.50"></text></g><g><title>all (188,733,789 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (188,733,789 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (307,843 samples, 0.16%)</title><rect x="99.8369%" y="245" width="0.1631%" height="15" fill="rgb(210,40,34)"/><text x="100.0869%" y="255.50"></text></g></svg></svg>