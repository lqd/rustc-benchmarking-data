<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (331,895 samples, 0.15%)</title><rect x="11.1800%" y="133" width="0.1498%" height="15" fill="rgb(227,0,7)"/><text x="11.4300%" y="143.50"></text></g><g><title>is_copy_raw (242,073 samples, 0.11%)</title><rect x="13.3646%" y="69" width="0.1093%" height="15" fill="rgb(217,0,24)"/><text x="13.6146%" y="79.50"></text></g><g><title>adt_drop_tys (349,024 samples, 0.16%)</title><rect x="13.3255%" y="85" width="0.1575%" height="15" fill="rgb(221,193,54)"/><text x="13.5755%" y="95.50"></text></g><g><title>adt_drop_tys (707,377 samples, 0.32%)</title><rect x="13.3009%" y="101" width="0.3193%" height="15" fill="rgb(248,212,6)"/><text x="13.5509%" y="111.50"></text></g><g><title>needs_drop_raw (2,666,266 samples, 1.20%)</title><rect x="13.1823%" y="117" width="1.2034%" height="15" fill="rgb(208,68,35)"/><text x="13.4323%" y="127.50"></text></g><g><title>is_copy_raw (1,695,937 samples, 0.77%)</title><rect x="13.6202%" y="101" width="0.7654%" height="15" fill="rgb(232,128,0)"/><text x="13.8702%" y="111.50"></text></g><g><title>evaluate_obligation (1,362,355 samples, 0.61%)</title><rect x="13.7708%" y="85" width="0.6149%" height="15" fill="rgb(207,160,47)"/><text x="14.0208%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (376,764 samples, 0.17%)</title><rect x="14.5274%" y="101" width="0.1700%" height="15" fill="rgb(228,23,34)"/><text x="14.7774%" y="111.50"></text></g><g><title>impl_parent (873,760 samples, 0.39%)</title><rect x="15.4861%" y="85" width="0.3944%" height="15" fill="rgb(218,30,26)"/><text x="15.7361%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (535,226 samples, 0.24%)</title><rect x="15.6389%" y="69" width="0.2416%" height="15" fill="rgb(220,122,19)"/><text x="15.8889%" y="79.50"></text></g><g><title>specialization_graph_of (3,956,043 samples, 1.79%)</title><rect x="14.7981%" y="101" width="1.7855%" height="15" fill="rgb(250,228,42)"/><text x="15.0481%" y="111.50">s..</text></g><g><title>impl_trait_ref (1,557,875 samples, 0.70%)</title><rect x="15.8805%" y="85" width="0.7031%" height="15" fill="rgb(240,193,28)"/><text x="16.1305%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,189,990 samples, 0.54%)</title><rect x="16.0465%" y="69" width="0.5371%" height="15" fill="rgb(216,20,37)"/><text x="16.2965%" y="79.50"></text></g><g><title>resolve_instance (4,956,001 samples, 2.24%)</title><rect x="14.3856%" y="117" width="2.2368%" height="15" fill="rgb(206,188,39)"/><text x="14.6356%" y="127.50">r..</text></g><g><title>thir_body (1,498,027 samples, 0.68%)</title><rect x="16.6366%" y="117" width="0.6761%" height="15" fill="rgb(217,207,13)"/><text x="16.8866%" y="127.50"></text></g><g><title>mir_const (15,540,577 samples, 7.01%)</title><rect x="10.3170%" y="165" width="7.0141%" height="15" fill="rgb(231,73,38)"/><text x="10.5670%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (14,247,545 samples, 6.43%)</title><rect x="10.9006%" y="149" width="6.4305%" height="15" fill="rgb(225,20,46)"/><text x="11.1506%" y="159.50">unsafety..</text></g><g><title>mir_built (13,296,593 samples, 6.00%)</title><rect x="11.3298%" y="133" width="6.0013%" height="15" fill="rgb(210,31,41)"/><text x="11.5798%" y="143.50">mir_built</text></g><g><title>has_structural_eq_impls (302,463 samples, 0.14%)</title><rect x="17.5762%" y="149" width="0.1365%" height="15" fill="rgb(221,200,47)"/><text x="17.8262%" y="159.50"></text></g><g><title>evaluate_obligation (259,483 samples, 0.12%)</title><rect x="17.5956%" y="133" width="0.1171%" height="15" fill="rgb(226,26,5)"/><text x="17.8456%" y="143.50"></text></g><g><title>mir_const (848,847 samples, 0.38%)</title><rect x="17.7924%" y="149" width="0.3831%" height="15" fill="rgb(249,33,26)"/><text x="18.0424%" y="159.50"></text></g><g><title>unsafety_check_result (723,995 samples, 0.33%)</title><rect x="17.8487%" y="133" width="0.3268%" height="15" fill="rgb(235,183,28)"/><text x="18.0987%" y="143.50"></text></g><g><title>mir_built (633,764 samples, 0.29%)</title><rect x="17.8895%" y="117" width="0.2860%" height="15" fill="rgb(221,5,38)"/><text x="18.1395%" y="127.50"></text></g><g><title>mir_const_qualif (1,934,289 samples, 0.87%)</title><rect x="17.3311%" y="165" width="0.8730%" height="15" fill="rgb(247,18,42)"/><text x="17.5811%" y="175.50"></text></g><g><title>mir_promoted (18,788,934 samples, 8.48%)</title><rect x="9.7257%" y="181" width="8.4802%" height="15" fill="rgb(241,131,45)"/><text x="9.9757%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,089,888 samples, 0.49%)</title><rect x="18.2059%" y="181" width="0.4919%" height="15" fill="rgb(249,31,29)"/><text x="18.4559%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (362,315 samples, 0.16%)</title><rect x="18.6978%" y="181" width="0.1635%" height="15" fill="rgb(225,111,53)"/><text x="18.9478%" y="191.50"></text></g><g><title>normalize_projection_ty (242,584 samples, 0.11%)</title><rect x="18.7518%" y="165" width="0.1095%" height="15" fill="rgb(238,160,17)"/><text x="19.0018%" y="175.50"></text></g><g><title>type_op_prove_predicate (3,335,465 samples, 1.51%)</title><rect x="19.0041%" y="181" width="1.5054%" height="15" fill="rgb(214,148,48)"/><text x="19.2541%" y="191.50"></text></g><g><title>MIR_borrow_checking (44,104,721 samples, 19.91%)</title><rect x="0.6090%" y="213" width="19.9062%" height="15" fill="rgb(232,36,49)"/><text x="0.8590%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (43,941,789 samples, 19.83%)</title><rect x="0.6825%" y="197" width="19.8326%" height="15" fill="rgb(209,103,24)"/><text x="0.9325%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (497,975 samples, 0.22%)</title><rect x="20.5152%" y="213" width="0.2248%" height="15" fill="rgb(229,88,8)"/><text x="20.7652%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (421,104 samples, 0.19%)</title><rect x="20.5499%" y="197" width="0.1901%" height="15" fill="rgb(213,181,19)"/><text x="20.7999%" y="207.50"></text></g><g><title>hir_module_items (259,073 samples, 0.12%)</title><rect x="20.7399%" y="213" width="0.1169%" height="15" fill="rgb(254,191,54)"/><text x="20.9899%" y="223.50"></text></g><g><title>codegen_fn_attrs (370,283 samples, 0.17%)</title><rect x="20.9931%" y="181" width="0.1671%" height="15" fill="rgb(241,83,37)"/><text x="21.2431%" y="191.50"></text></g><g><title>check_mod_attrs (644,467 samples, 0.29%)</title><rect x="20.8694%" y="197" width="0.2909%" height="15" fill="rgb(233,36,39)"/><text x="21.1194%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (547,257 samples, 0.25%)</title><rect x="21.2711%" y="197" width="0.2470%" height="15" fill="rgb(226,3,54)"/><text x="21.5211%" y="207.50"></text></g><g><title>misc_checking_1 (1,552,517 samples, 0.70%)</title><rect x="20.8571%" y="213" width="0.7007%" height="15" fill="rgb(245,192,40)"/><text x="21.1071%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (831,149 samples, 0.38%)</title><rect x="21.5587%" y="197" width="0.3751%" height="15" fill="rgb(238,167,29)"/><text x="21.8087%" y="207.50"></text></g><g><title>check_mod_liveness (695,748 samples, 0.31%)</title><rect x="21.6198%" y="181" width="0.3140%" height="15" fill="rgb(232,182,51)"/><text x="21.8698%" y="191.50"></text></g><g><title>type_uninhabited_from (275,186 samples, 0.12%)</title><rect x="21.8096%" y="165" width="0.1242%" height="15" fill="rgb(231,60,39)"/><text x="22.0596%" y="175.50"></text></g><g><title>misc_checking_2 (1,598,728 samples, 0.72%)</title><rect x="21.5579%" y="213" width="0.7216%" height="15" fill="rgb(208,69,12)"/><text x="21.8079%" y="223.50"></text></g><g><title>match_checking (765,659 samples, 0.35%)</title><rect x="21.9338%" y="197" width="0.3456%" height="15" fill="rgb(235,93,37)"/><text x="22.1838%" y="207.50"></text></g><g><title>check_match (722,819 samples, 0.33%)</title><rect x="21.9532%" y="181" width="0.3262%" height="15" fill="rgb(213,116,39)"/><text x="22.2032%" y="191.50"></text></g><g><title>check_private_in_public (323,964 samples, 0.15%)</title><rect x="22.2846%" y="197" width="0.1462%" height="15" fill="rgb(222,207,29)"/><text x="22.5346%" y="207.50"></text></g><g><title>death_checking (627,557 samples, 0.28%)</title><rect x="22.4308%" y="197" width="0.2832%" height="15" fill="rgb(206,96,30)"/><text x="22.6808%" y="207.50"></text></g><g><title>eval_to_const_value_raw (508,886 samples, 0.23%)</title><rect x="23.9909%" y="117" width="0.2297%" height="15" fill="rgb(218,138,4)"/><text x="24.2409%" y="127.50"></text></g><g><title>eval_to_const_value_raw (492,866 samples, 0.22%)</title><rect x="23.9982%" y="101" width="0.2224%" height="15" fill="rgb(250,191,14)"/><text x="24.2482%" y="111.50"></text></g><g><title>eval_to_allocation_raw (476,196 samples, 0.21%)</title><rect x="24.0057%" y="85" width="0.2149%" height="15" fill="rgb(239,60,40)"/><text x="24.2557%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (583,397 samples, 0.26%)</title><rect x="23.9646%" y="133" width="0.2633%" height="15" fill="rgb(206,27,48)"/><text x="24.2146%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,253,526 samples, 1.02%)</title><rect x="23.2777%" y="165" width="1.0171%" height="15" fill="rgb(225,35,8)"/><text x="23.5277%" y="175.50"></text></g><g><title>eval_to_allocation_raw (2,238,186 samples, 1.01%)</title><rect x="23.2847%" y="149" width="1.0102%" height="15" fill="rgb(250,213,24)"/><text x="23.5347%" y="159.50"></text></g><g><title>param_env (746,278 samples, 0.34%)</title><rect x="24.3262%" y="165" width="0.3368%" height="15" fill="rgb(247,123,22)"/><text x="24.5762%" y="175.50"></text></g><g><title>predicates_of (333,345 samples, 0.15%)</title><rect x="24.5125%" y="149" width="0.1505%" height="15" fill="rgb(231,138,38)"/><text x="24.7625%" y="159.50"></text></g><g><title>predicates_defined_on (276,245 samples, 0.12%)</title><rect x="24.5383%" y="133" width="0.1247%" height="15" fill="rgb(231,145,46)"/><text x="24.7883%" y="143.50"></text></g><g><title>crate_lints (5,811,855 samples, 2.62%)</title><rect x="22.7153%" y="181" width="2.6231%" height="15" fill="rgb(251,118,11)"/><text x="22.9653%" y="191.50">cr..</text></g><g><title>type_of (1,444,118 samples, 0.65%)</title><rect x="24.6866%" y="165" width="0.6518%" height="15" fill="rgb(217,147,25)"/><text x="24.9366%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (1,122,164 samples, 0.51%)</title><rect x="24.8319%" y="149" width="0.5065%" height="15" fill="rgb(247,81,37)"/><text x="25.0819%" y="159.50"></text></g><g><title>layout_of (284,771 samples, 0.13%)</title><rect x="25.7845%" y="69" width="0.1285%" height="15" fill="rgb(209,12,38)"/><text x="26.0345%" y="79.50"></text></g><g><title>layout_of (366,344 samples, 0.17%)</title><rect x="25.7551%" y="85" width="0.1653%" height="15" fill="rgb(227,1,9)"/><text x="26.0051%" y="95.50"></text></g><g><title>layout_of (455,225 samples, 0.21%)</title><rect x="25.7299%" y="101" width="0.2055%" height="15" fill="rgb(248,47,43)"/><text x="25.9799%" y="111.50"></text></g><g><title>lint_checking (7,309,951 samples, 3.30%)</title><rect x="22.7140%" y="197" width="3.2993%" height="15" fill="rgb(221,10,30)"/><text x="22.9640%" y="207.50">lin..</text></g><g><title>module_lints (1,495,276 samples, 0.67%)</title><rect x="25.3384%" y="181" width="0.6749%" height="15" fill="rgb(210,229,1)"/><text x="25.5884%" y="191.50"></text></g><g><title>lint_mod (1,487,766 samples, 0.67%)</title><rect x="25.3418%" y="165" width="0.6715%" height="15" fill="rgb(222,148,37)"/><text x="25.5918%" y="175.50"></text></g><g><title>layout_of (765,868 samples, 0.35%)</title><rect x="25.6676%" y="149" width="0.3457%" height="15" fill="rgb(234,67,33)"/><text x="25.9176%" y="159.50"></text></g><g><title>layout_of (754,058 samples, 0.34%)</title><rect x="25.6729%" y="133" width="0.3403%" height="15" fill="rgb(247,98,35)"/><text x="25.9229%" y="143.50"></text></g><g><title>layout_of (655,197 samples, 0.30%)</title><rect x="25.7176%" y="117" width="0.2957%" height="15" fill="rgb(247,138,52)"/><text x="25.9676%" y="127.50"></text></g><g><title>privacy_access_levels (346,934 samples, 0.16%)</title><rect x="26.0133%" y="197" width="0.1566%" height="15" fill="rgb(213,79,30)"/><text x="26.2633%" y="207.50"></text></g><g><title>privacy_checking_modules (1,285,355 samples, 0.58%)</title><rect x="26.1699%" y="197" width="0.5801%" height="15" fill="rgb(246,177,23)"/><text x="26.4199%" y="207.50"></text></g><g><title>check_mod_privacy (1,281,155 samples, 0.58%)</title><rect x="26.1718%" y="181" width="0.5782%" height="15" fill="rgb(230,62,27)"/><text x="26.4218%" y="191.50"></text></g><g><title>misc_checking_3 (9,927,381 samples, 4.48%)</title><rect x="22.2794%" y="213" width="4.4806%" height="15" fill="rgb(216,154,8)"/><text x="22.5294%" y="223.50">misc_..</text></g><g><title>impl_parent (1,733,697 samples, 0.78%)</title><rect x="27.7443%" y="149" width="0.7825%" height="15" fill="rgb(244,35,45)"/><text x="27.9943%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (986,951 samples, 0.45%)</title><rect x="28.0813%" y="133" width="0.4454%" height="15" fill="rgb(251,115,12)"/><text x="28.3313%" y="143.50"></text></g><g><title>impl_trait_ref (4,166,509 samples, 1.88%)</title><rect x="28.5268%" y="149" width="1.8805%" height="15" fill="rgb(240,54,50)"/><text x="28.7768%" y="159.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,619,859 samples, 1.63%)</title><rect x="28.7735%" y="133" width="1.6338%" height="15" fill="rgb(233,84,52)"/><text x="29.0235%" y="143.50"></text></g><g><title>coherent_trait (8,455,354 samples, 3.82%)</title><rect x="26.8226%" y="181" width="3.8162%" height="15" fill="rgb(207,117,47)"/><text x="27.0726%" y="191.50">cohe..</text></g><g><title>specialization_graph_of (8,441,634 samples, 3.81%)</title><rect x="26.8288%" y="165" width="3.8100%" height="15" fill="rgb(249,43,39)"/><text x="27.0788%" y="175.50">spec..</text></g><g><title>trait_impls_of (506,675 samples, 0.23%)</title><rect x="30.4101%" y="149" width="0.2287%" height="15" fill="rgb(209,38,44)"/><text x="30.6601%" y="159.50"></text></g><g><title>coherence_checking (8,549,865 samples, 3.86%)</title><rect x="26.8130%" y="197" width="3.8589%" height="15" fill="rgb(236,212,23)"/><text x="27.0630%" y="207.50">cohe..</text></g><g><title>associated_item (556,666 samples, 0.25%)</title><rect x="46.4358%" y="133" width="0.2512%" height="15" fill="rgb(242,79,21)"/><text x="46.6858%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (432,245 samples, 0.20%)</title><rect x="46.4919%" y="117" width="0.1951%" height="15" fill="rgb(211,96,35)"/><text x="46.7419%" y="127.50"></text></g><g><title>associated_items (837,657 samples, 0.38%)</title><rect x="46.3282%" y="149" width="0.3781%" height="15" fill="rgb(253,215,40)"/><text x="46.5782%" y="159.50"></text></g><g><title>adt_dtorck_constraint (407,335 samples, 0.18%)</title><rect x="47.4421%" y="117" width="0.1838%" height="15" fill="rgb(211,81,21)"/><text x="47.6921%" y="127.50"></text></g><g><title>adt_dtorck_constraint (923,030 samples, 0.42%)</title><rect x="47.2522%" y="133" width="0.4166%" height="15" fill="rgb(208,190,38)"/><text x="47.5022%" y="143.50"></text></g><g><title>dropck_outlives (3,171,790 samples, 1.43%)</title><rect x="46.7432%" y="149" width="1.4316%" height="15" fill="rgb(235,213,38)"/><text x="46.9932%" y="159.50"></text></g><g><title>normalize_projection_ty (1,121,095 samples, 0.51%)</title><rect x="47.6688%" y="133" width="0.5060%" height="15" fill="rgb(237,122,38)"/><text x="47.9188%" y="143.50"></text></g><g><title>adt_def (524,277 samples, 0.24%)</title><rect x="49.4566%" y="117" width="0.2366%" height="15" fill="rgb(244,218,35)"/><text x="49.7066%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (515,537 samples, 0.23%)</title><rect x="49.4605%" y="101" width="0.2327%" height="15" fill="rgb(240,68,47)"/><text x="49.7105%" y="111.50"></text></g><g><title>item_attrs (429,477 samples, 0.19%)</title><rect x="49.4994%" y="85" width="0.1938%" height="15" fill="rgb(210,16,53)"/><text x="49.7494%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (420,757 samples, 0.19%)</title><rect x="49.5033%" y="69" width="0.1899%" height="15" fill="rgb(235,124,12)"/><text x="49.7533%" y="79.50"></text></g><g><title>adt_sized_constraint (691,718 samples, 0.31%)</title><rect x="49.4377%" y="133" width="0.3122%" height="15" fill="rgb(224,169,11)"/><text x="49.6877%" y="143.50"></text></g><g><title>predicates_of (253,404 samples, 0.11%)</title><rect x="49.8633%" y="133" width="0.1144%" height="15" fill="rgb(250,166,2)"/><text x="50.1133%" y="143.50"></text></g><g><title>trait_impls_of (662,607 samples, 0.30%)</title><rect x="50.0368%" y="133" width="0.2991%" height="15" fill="rgb(242,216,29)"/><text x="50.2868%" y="143.50"></text></g><g><title>implementations_of_trait (281,845 samples, 0.13%)</title><rect x="50.2087%" y="117" width="0.1272%" height="15" fill="rgb(230,116,27)"/><text x="50.4587%" y="127.50"></text></g><g><title>evaluate_obligation (4,789,978 samples, 2.16%)</title><rect x="48.1748%" y="149" width="2.1619%" height="15" fill="rgb(228,99,48)"/><text x="48.4248%" y="159.50">e..</text></g><g><title>evaluate_obligation (410,590 samples, 0.19%)</title><rect x="50.9479%" y="133" width="0.1853%" height="15" fill="rgb(253,11,6)"/><text x="51.1979%" y="143.50"></text></g><g><title>method_autoderef_steps (816,845 samples, 0.37%)</title><rect x="50.7816%" y="149" width="0.3687%" height="15" fill="rgb(247,143,39)"/><text x="51.0316%" y="159.50"></text></g><g><title>predicates_of (619,484 samples, 0.28%)</title><rect x="51.2338%" y="149" width="0.2796%" height="15" fill="rgb(236,97,10)"/><text x="51.4838%" y="159.50"></text></g><g><title>predicates_defined_on (404,673 samples, 0.18%)</title><rect x="51.3308%" y="133" width="0.1826%" height="15" fill="rgb(233,208,19)"/><text x="51.5808%" y="143.50"></text></g><g><title>dropck_outlives (272,854 samples, 0.12%)</title><rect x="52.3037%" y="133" width="0.1231%" height="15" fill="rgb(216,164,2)"/><text x="52.5537%" y="143.50"></text></g><g><title>evaluate_obligation (261,462 samples, 0.12%)</title><rect x="52.4269%" y="133" width="0.1180%" height="15" fill="rgb(220,129,5)"/><text x="52.6769%" y="143.50"></text></g><g><title>is_copy_raw (258,212 samples, 0.12%)</title><rect x="52.5485%" y="133" width="0.1165%" height="15" fill="rgb(242,17,10)"/><text x="52.7985%" y="143.50"></text></g><g><title>evaluate_obligation (226,432 samples, 0.10%)</title><rect x="52.5628%" y="117" width="0.1022%" height="15" fill="rgb(242,107,0)"/><text x="52.8128%" y="127.50"></text></g><g><title>typeck (2,267,025 samples, 1.02%)</title><rect x="51.6801%" y="149" width="1.0232%" height="15" fill="rgb(251,28,31)"/><text x="51.9301%" y="159.50"></text></g><g><title>item_bodies_checking (48,882,984 samples, 22.06%)</title><rect x="30.6888%" y="197" width="22.0628%" height="15" fill="rgb(233,223,10)"/><text x="30.9388%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (48,879,024 samples, 22.06%)</title><rect x="30.6906%" y="181" width="22.0610%" height="15" fill="rgb(215,21,27)"/><text x="30.9406%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (48,772,273 samples, 22.01%)</title><rect x="30.7388%" y="165" width="22.0128%" height="15" fill="rgb(232,23,21)"/><text x="30.9888%" y="175.50">typeck</text></g><g><title>layout_of (289,774 samples, 0.13%)</title><rect x="53.2607%" y="117" width="0.1308%" height="15" fill="rgb(244,5,23)"/><text x="53.5107%" y="127.50"></text></g><g><title>layout_of (345,054 samples, 0.16%)</title><rect x="53.2411%" y="133" width="0.1557%" height="15" fill="rgb(226,81,46)"/><text x="53.4911%" y="143.50"></text></g><g><title>layout_of (425,435 samples, 0.19%)</title><rect x="53.2137%" y="149" width="0.1920%" height="15" fill="rgb(247,70,30)"/><text x="53.4637%" y="159.50"></text></g><g><title>layout_of (435,235 samples, 0.20%)</title><rect x="53.2107%" y="165" width="0.1964%" height="15" fill="rgb(212,68,19)"/><text x="53.4607%" y="175.50"></text></g><g><title>coherent_trait (390,254 samples, 0.18%)</title><rect x="55.1860%" y="53" width="0.1761%" height="15" fill="rgb(240,187,13)"/><text x="55.4360%" y="63.50"></text></g><g><title>specialization_graph_of (387,194 samples, 0.17%)</title><rect x="55.1874%" y="37" width="0.1748%" height="15" fill="rgb(223,113,26)"/><text x="55.4374%" y="47.50"></text></g><g><title>adt_destructor (399,594 samples, 0.18%)</title><rect x="55.1828%" y="85" width="0.1804%" height="15" fill="rgb(206,192,2)"/><text x="55.4328%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (398,354 samples, 0.18%)</title><rect x="55.1833%" y="69" width="0.1798%" height="15" fill="rgb(241,108,4)"/><text x="55.4333%" y="79.50"></text></g><g><title>adt_dtorck_constraint (410,114 samples, 0.19%)</title><rect x="55.1791%" y="101" width="0.1851%" height="15" fill="rgb(247,173,49)"/><text x="55.4291%" y="111.50"></text></g><g><title>adt_dtorck_constraint (449,475 samples, 0.20%)</title><rect x="55.1642%" y="117" width="0.2029%" height="15" fill="rgb(224,114,35)"/><text x="55.4142%" y="127.50"></text></g><g><title>dropck_outlives (495,726 samples, 0.22%)</title><rect x="55.1444%" y="149" width="0.2237%" height="15" fill="rgb(245,159,27)"/><text x="55.3944%" y="159.50"></text></g><g><title>adt_dtorck_constraint (462,916 samples, 0.21%)</title><rect x="55.1592%" y="133" width="0.2089%" height="15" fill="rgb(245,172,44)"/><text x="55.4092%" y="143.50"></text></g><g><title>generics_of (228,332 samples, 0.10%)</title><rect x="55.6415%" y="133" width="0.1031%" height="15" fill="rgb(236,23,11)"/><text x="55.8915%" y="143.50"></text></g><g><title>impl_trait_ref (586,346 samples, 0.26%)</title><rect x="55.7563%" y="133" width="0.2646%" height="15" fill="rgb(205,117,38)"/><text x="56.0063%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (332,063 samples, 0.15%)</title><rect x="55.8710%" y="117" width="0.1499%" height="15" fill="rgb(237,72,25)"/><text x="56.1210%" y="127.50"></text></g><g><title>specializes (315,274 samples, 0.14%)</title><rect x="56.0625%" y="133" width="0.1423%" height="15" fill="rgb(244,70,9)"/><text x="56.3125%" y="143.50"></text></g><g><title>evaluate_obligation (1,955,341 samples, 0.88%)</title><rect x="55.3681%" y="149" width="0.8825%" height="15" fill="rgb(217,125,39)"/><text x="55.6181%" y="159.50"></text></g><g><title>item_types_checking (8,131,961 samples, 3.67%)</title><rect x="52.7516%" y="197" width="3.6703%" height="15" fill="rgb(235,36,10)"/><text x="53.0016%" y="207.50">item..</text></g><g><title>check_mod_item_types (8,124,641 samples, 3.67%)</title><rect x="52.7549%" y="181" width="3.6670%" height="15" fill="rgb(251,123,47)"/><text x="53.0049%" y="191.50">chec..</text></g><g><title>typeck (6,615,153 samples, 2.99%)</title><rect x="53.4362%" y="165" width="2.9857%" height="15" fill="rgb(221,13,13)"/><text x="53.6862%" y="175.50">typ..</text></g><g><title>fn_sig (655,949 samples, 0.30%)</title><rect x="56.6065%" y="165" width="0.2961%" height="15" fill="rgb(238,131,9)"/><text x="56.8565%" y="175.50"></text></g><g><title>named_region_map (460,544 samples, 0.21%)</title><rect x="56.9626%" y="149" width="0.2079%" height="15" fill="rgb(211,50,8)"/><text x="57.2126%" y="159.50"></text></g><g><title>resolve_lifetimes (441,274 samples, 0.20%)</title><rect x="56.9713%" y="133" width="0.1992%" height="15" fill="rgb(245,182,24)"/><text x="57.2213%" y="143.50"></text></g><g><title>generics_of (611,685 samples, 0.28%)</title><rect x="56.9025%" y="165" width="0.2761%" height="15" fill="rgb(242,14,37)"/><text x="57.1525%" y="175.50"></text></g><g><title>explicit_predicates_of (437,064 samples, 0.20%)</title><rect x="57.2634%" y="133" width="0.1973%" height="15" fill="rgb(246,228,12)"/><text x="57.5134%" y="143.50"></text></g><g><title>predicates_of (899,199 samples, 0.41%)</title><rect x="57.1912%" y="165" width="0.4058%" height="15" fill="rgb(213,55,15)"/><text x="57.4412%" y="175.50"></text></g><g><title>predicates_defined_on (836,638 samples, 0.38%)</title><rect x="57.2194%" y="149" width="0.3776%" height="15" fill="rgb(209,9,3)"/><text x="57.4694%" y="159.50"></text></g><g><title>inferred_outlives_of (302,223 samples, 0.14%)</title><rect x="57.4607%" y="133" width="0.1364%" height="15" fill="rgb(230,59,30)"/><text x="57.7107%" y="143.50"></text></g><g><title>inferred_outlives_crate (274,703 samples, 0.12%)</title><rect x="57.4731%" y="117" width="0.1240%" height="15" fill="rgb(209,121,21)"/><text x="57.7231%" y="127.50"></text></g><g><title>type_collecting (2,877,182 samples, 1.30%)</title><rect x="56.4254%" y="197" width="1.2986%" height="15" fill="rgb(220,109,13)"/><text x="56.6754%" y="207.50"></text></g><g><title>collect_mod_item_types (2,860,551 samples, 1.29%)</title><rect x="56.4329%" y="181" width="1.2911%" height="15" fill="rgb(232,18,1)"/><text x="56.6829%" y="191.50"></text></g><g><title>adt_sized_constraint (246,443 samples, 0.11%)</title><rect x="58.8710%" y="133" width="0.1112%" height="15" fill="rgb(215,41,42)"/><text x="59.1210%" y="143.50"></text></g><g><title>adt_sized_constraint (299,864 samples, 0.14%)</title><rect x="58.8487%" y="149" width="0.1353%" height="15" fill="rgb(224,123,36)"/><text x="59.0987%" y="159.50"></text></g><g><title>evaluate_obligation (815,690 samples, 0.37%)</title><rect x="58.6463%" y="165" width="0.3682%" height="15" fill="rgb(240,125,3)"/><text x="58.8963%" y="175.50"></text></g><g><title>implied_outlives_bounds (225,895 samples, 0.10%)</title><rect x="59.0195%" y="165" width="0.1020%" height="15" fill="rgb(205,98,50)"/><text x="59.2695%" y="175.50"></text></g><g><title>object_safety_violations (407,924 samples, 0.18%)</title><rect x="59.1244%" y="165" width="0.1841%" height="15" fill="rgb(205,185,37)"/><text x="59.3744%" y="175.50"></text></g><g><title>param_env (266,962 samples, 0.12%)</title><rect x="59.3085%" y="165" width="0.1205%" height="15" fill="rgb(238,207,15)"/><text x="59.5585%" y="175.50"></text></g><g><title>region_scope_tree (415,968 samples, 0.19%)</title><rect x="59.4547%" y="165" width="0.1877%" height="15" fill="rgb(213,199,42)"/><text x="59.7047%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,020,920 samples, 1.81%)</title><rect x="57.8483%" y="181" width="1.8148%" height="15" fill="rgb(235,201,11)"/><text x="58.0983%" y="191.50">c..</text></g><g><title>adt_sized_constraint (284,323 samples, 0.13%)</title><rect x="60.5767%" y="149" width="0.1283%" height="15" fill="rgb(207,46,11)"/><text x="60.8267%" y="159.50"></text></g><g><title>evaluate_obligation (873,251 samples, 0.39%)</title><rect x="60.3472%" y="165" width="0.3941%" height="15" fill="rgb(241,35,35)"/><text x="60.5972%" y="175.50"></text></g><g><title>param_env (444,115 samples, 0.20%)</title><rect x="60.7841%" y="165" width="0.2004%" height="15" fill="rgb(243,32,47)"/><text x="61.0341%" y="175.50"></text></g><g><title>trait_impls_of (363,684 samples, 0.16%)</title><rect x="61.0628%" y="165" width="0.1641%" height="15" fill="rgb(247,202,23)"/><text x="61.3128%" y="175.50"></text></g><g><title>check_item_well_formed (3,545,484 samples, 1.60%)</title><rect x="59.6631%" y="181" width="1.6002%" height="15" fill="rgb(219,102,11)"/><text x="59.9131%" y="191.50"></text></g><g><title>analysis (136,072,355 samples, 61.41%)</title><rect x="0.4150%" y="229" width="61.4147%" height="15" fill="rgb(243,110,44)"/><text x="0.6650%" y="239.50">analysis</text></g><g><title>type_check_crate (77,701,385 samples, 35.07%)</title><rect x="26.7600%" y="213" width="35.0696%" height="15" fill="rgb(222,74,54)"/><text x="27.0100%" y="223.50">type_check_crate</text></g><g><title>wf_checking (9,089,651 samples, 4.10%)</title><rect x="57.7271%" y="197" width="4.1025%" height="15" fill="rgb(216,99,12)"/><text x="57.9771%" y="207.50">wf_c..</text></g><g><title>check_trait_item_well_formed (1,254,753 samples, 0.57%)</title><rect x="61.2633%" y="181" width="0.5663%" height="15" fill="rgb(226,22,26)"/><text x="61.5133%" y="191.50"></text></g><g><title>codegen_crate (480,815 samples, 0.22%)</title><rect x="61.8339%" y="229" width="0.2170%" height="15" fill="rgb(217,163,10)"/><text x="62.0839%" y="239.50"></text></g><g><title>metadata_load_macro (1,325,986 samples, 0.60%)</title><rect x="82.8875%" y="181" width="0.5985%" height="15" fill="rgb(213,25,53)"/><text x="83.1375%" y="191.50"></text></g><g><title>metadata_register_crate (19,629,048 samples, 8.86%)</title><rect x="83.4859%" y="181" width="8.8593%" height="15" fill="rgb(252,105,26)"/><text x="83.7359%" y="191.50">metadata_regi..</text></g><g><title>metadata_register_crate (17,398,435 samples, 7.85%)</title><rect x="84.4927%" y="165" width="7.8526%" height="15" fill="rgb(220,39,43)"/><text x="84.7427%" y="175.50">metadata_re..</text></g><g><title>metadata_register_crate (12,375,437 samples, 5.59%)</title><rect x="86.7598%" y="149" width="5.5855%" height="15" fill="rgb(229,68,48)"/><text x="87.0098%" y="159.50">metadat..</text></g><g><title>metadata_register_crate (5,248,068 samples, 2.37%)</title><rect x="89.9766%" y="133" width="2.3687%" height="15" fill="rgb(252,8,32)"/><text x="90.2266%" y="143.50">me..</text></g><g><title>metadata_register_crate (4,568,601 samples, 2.06%)</title><rect x="90.2833%" y="117" width="2.0620%" height="15" fill="rgb(223,20,43)"/><text x="90.5333%" y="127.50">m..</text></g><g><title>macro_expand_crate (66,818,874 samples, 30.16%)</title><rect x="62.2870%" y="213" width="30.1579%" height="15" fill="rgb(229,81,49)"/><text x="62.5370%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (66,805,294 samples, 30.15%)</title><rect x="62.2931%" y="197" width="30.1518%" height="15" fill="rgb(236,28,36)"/><text x="62.5431%" y="207.50">expand_crate</text></g><g><title>late_resolve_crate (2,909,632 samples, 1.31%)</title><rect x="92.6243%" y="197" width="1.3132%" height="15" fill="rgb(249,185,26)"/><text x="92.8743%" y="207.50"></text></g><g><title>resolve_check_unused (327,353 samples, 0.15%)</title><rect x="93.9451%" y="197" width="0.1477%" height="15" fill="rgb(249,174,33)"/><text x="94.1951%" y="207.50"></text></g><g><title>configure_and_expand (71,058,491 samples, 32.07%)</title><rect x="62.0509%" y="229" width="32.0714%" height="15" fill="rgb(233,201,37)"/><text x="62.3009%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (3,665,860 samples, 1.65%)</title><rect x="92.4678%" y="213" width="1.6545%" height="15" fill="rgb(221,78,26)"/><text x="92.7178%" y="223.50"></text></g><g><title>drop_ast (226,793 samples, 0.10%)</title><rect x="94.1223%" y="229" width="0.1024%" height="15" fill="rgb(250,127,30)"/><text x="94.3723%" y="239.50"></text></g><g><title>early_lint_checks (522,506 samples, 0.24%)</title><rect x="94.2349%" y="229" width="0.2358%" height="15" fill="rgb(230,49,44)"/><text x="94.4849%" y="239.50"></text></g><g><title>free_global_ctxt (4,327,448 samples, 1.95%)</title><rect x="94.4707%" y="229" width="1.9531%" height="15" fill="rgb(229,67,23)"/><text x="94.7207%" y="239.50">f..</text></g><g><title>generate_crate_metadata (1,769,540 samples, 0.80%)</title><rect x="96.4239%" y="229" width="0.7987%" height="15" fill="rgb(249,83,47)"/><text x="96.6739%" y="239.50"></text></g><g><title>hir_lowering (4,048,635 samples, 1.83%)</title><rect x="97.2226%" y="229" width="1.8273%" height="15" fill="rgb(215,43,3)"/><text x="97.4726%" y="239.50">h..</text></g><g><title>parse_crate (272,193 samples, 0.12%)</title><rect x="99.0848%" y="229" width="0.1229%" height="15" fill="rgb(238,154,13)"/><text x="99.3348%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,063,621 samples, 0.48%)</title><rect x="99.2949%" y="229" width="0.4801%" height="15" fill="rgb(219,56,2)"/><text x="99.5449%" y="239.50"></text></g><g><title>all (221,563,186 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (221,563,186 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (388,394 samples, 0.18%)</title><rect x="99.8247%" y="229" width="0.1753%" height="15" fill="rgb(250,79,13)"/><text x="100.0747%" y="239.50"></text></g></svg></svg>