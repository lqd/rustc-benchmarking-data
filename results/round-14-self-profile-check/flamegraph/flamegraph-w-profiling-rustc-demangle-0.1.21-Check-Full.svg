<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (376,419 samples, 0.14%)</title><rect x="14.2378%" y="197" width="0.1353%" height="15" fill="rgb(227,0,7)"/><text x="14.4878%" y="207.50"></text></g><g><title>param_env (461,307 samples, 0.17%)</title><rect x="16.0170%" y="165" width="0.1658%" height="15" fill="rgb(217,0,24)"/><text x="16.2670%" y="175.50"></text></g><g><title>item_attrs (507,007 samples, 0.18%)</title><rect x="16.7127%" y="133" width="0.1823%" height="15" fill="rgb(221,193,54)"/><text x="16.9627%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (490,997 samples, 0.18%)</title><rect x="16.7184%" y="117" width="0.1765%" height="15" fill="rgb(248,212,6)"/><text x="16.9684%" y="127.50"></text></g><g><title>codegen_fn_attrs (675,237 samples, 0.24%)</title><rect x="16.6619%" y="149" width="0.2427%" height="15" fill="rgb(208,68,35)"/><text x="16.9119%" y="159.50"></text></g><g><title>adt_drop_tys (438,877 samples, 0.16%)</title><rect x="20.8034%" y="117" width="0.1578%" height="15" fill="rgb(232,128,0)"/><text x="21.0534%" y="127.50"></text></g><g><title>is_copy_raw (1,924,259 samples, 0.69%)</title><rect x="20.9611%" y="117" width="0.6918%" height="15" fill="rgb(207,160,47)"/><text x="21.2111%" y="127.50"></text></g><g><title>evaluate_obligation (1,578,147 samples, 0.57%)</title><rect x="21.0856%" y="101" width="0.5673%" height="15" fill="rgb(228,23,34)"/><text x="21.3356%" y="111.50"></text></g><g><title>needs_drop_raw (2,663,062 samples, 0.96%)</title><rect x="20.7096%" y="133" width="0.9574%" height="15" fill="rgb(218,30,26)"/><text x="20.9596%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (303,143 samples, 0.11%)</title><rect x="21.7618%" y="117" width="0.1090%" height="15" fill="rgb(220,122,19)"/><text x="22.0118%" y="127.50"></text></g><g><title>specialization_graph_of (356,204 samples, 0.13%)</title><rect x="21.8828%" y="117" width="0.1281%" height="15" fill="rgb(250,228,42)"/><text x="22.1328%" y="127.50"></text></g><g><title>resolve_instance (1,061,569 samples, 0.38%)</title><rect x="21.6674%" y="133" width="0.3816%" height="15" fill="rgb(240,193,28)"/><text x="21.9174%" y="143.50"></text></g><g><title>thir_body (3,841,468 samples, 1.38%)</title><rect x="22.0704%" y="133" width="1.3810%" height="15" fill="rgb(216,20,37)"/><text x="22.3204%" y="143.50"></text></g><g><title>mir_const (23,093,521 samples, 8.30%)</title><rect x="15.1674%" y="181" width="8.3020%" height="15" fill="rgb(206,188,39)"/><text x="15.4174%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (20,268,933 samples, 7.29%)</title><rect x="16.1828%" y="165" width="7.2866%" height="15" fill="rgb(217,207,13)"/><text x="16.4328%" y="175.50">unsafety_c..</text></g><g><title>mir_built (18,260,840 samples, 6.56%)</title><rect x="16.9047%" y="149" width="6.5647%" height="15" fill="rgb(231,73,38)"/><text x="17.1547%" y="159.50">mir_built</text></g><g><title>mir_promoted (25,296,113 samples, 9.09%)</title><rect x="14.4167%" y="197" width="9.0938%" height="15" fill="rgb(225,20,46)"/><text x="14.6667%" y="207.50">mir_promoted</text></g><g><title>type_op_normalize_fn_sig (1,320,823 samples, 0.47%)</title><rect x="23.6026%" y="197" width="0.4748%" height="15" fill="rgb(210,31,41)"/><text x="23.8526%" y="207.50"></text></g><g><title>normalize_projection_ty (833,767 samples, 0.30%)</title><rect x="23.7777%" y="181" width="0.2997%" height="15" fill="rgb(221,200,47)"/><text x="24.0277%" y="191.50"></text></g><g><title>type_op_normalize_predicate (623,406 samples, 0.22%)</title><rect x="24.0774%" y="197" width="0.2241%" height="15" fill="rgb(226,26,5)"/><text x="24.3274%" y="207.50"></text></g><g><title>normalize_projection_ty (323,664 samples, 0.12%)</title><rect x="24.1851%" y="181" width="0.1164%" height="15" fill="rgb(249,33,26)"/><text x="24.4351%" y="191.50"></text></g><g><title>type_op_prove_predicate (4,462,394 samples, 1.60%)</title><rect x="24.3100%" y="197" width="1.6042%" height="15" fill="rgb(235,183,28)"/><text x="24.5600%" y="207.50"></text></g><g><title>MIR_borrow_checking (70,758,590 samples, 25.44%)</title><rect x="0.4788%" y="229" width="25.4373%" height="15" fill="rgb(221,5,38)"/><text x="0.7288%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (70,564,488 samples, 25.37%)</title><rect x="0.5486%" y="213" width="25.3675%" height="15" fill="rgb(247,18,42)"/><text x="0.7986%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (380,445 samples, 0.14%)</title><rect x="26.3560%" y="197" width="0.1368%" height="15" fill="rgb(241,131,45)"/><text x="26.6060%" y="207.50"></text></g><g><title>check_mod_attrs (1,180,024 samples, 0.42%)</title><rect x="26.0686%" y="213" width="0.4242%" height="15" fill="rgb(249,31,29)"/><text x="26.3186%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (526,245 samples, 0.19%)</title><rect x="26.6310%" y="213" width="0.1892%" height="15" fill="rgb(225,111,53)"/><text x="26.8810%" y="223.50"></text></g><g><title>misc_checking_1 (2,155,714 samples, 0.77%)</title><rect x="26.0607%" y="229" width="0.7750%" height="15" fill="rgb(238,160,17)"/><text x="26.3107%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,577,968 samples, 0.57%)</title><rect x="26.8363%" y="213" width="0.5673%" height="15" fill="rgb(214,148,48)"/><text x="27.0863%" y="223.50"></text></g><g><title>check_mod_liveness (1,307,555 samples, 0.47%)</title><rect x="26.9335%" y="197" width="0.4701%" height="15" fill="rgb(232,36,49)"/><text x="27.1835%" y="207.50"></text></g><g><title>misc_checking_2 (4,347,739 samples, 1.56%)</title><rect x="26.8356%" y="229" width="1.5630%" height="15" fill="rgb(209,103,24)"/><text x="27.0856%" y="239.50"></text></g><g><title>match_checking (2,767,951 samples, 1.00%)</title><rect x="27.4036%" y="213" width="0.9951%" height="15" fill="rgb(229,88,8)"/><text x="27.6536%" y="223.50"></text></g><g><title>check_match (2,711,691 samples, 0.97%)</title><rect x="27.4238%" y="197" width="0.9748%" height="15" fill="rgb(213,181,19)"/><text x="27.6738%" y="207.50"></text></g><g><title>check_private_in_public (357,864 samples, 0.13%)</title><rect x="28.4023%" y="213" width="0.1287%" height="15" fill="rgb(254,191,54)"/><text x="28.6523%" y="223.50"></text></g><g><title>death_checking (784,348 samples, 0.28%)</title><rect x="28.5310%" y="213" width="0.2820%" height="15" fill="rgb(241,83,37)"/><text x="28.7810%" y="223.50"></text></g><g><title>crate_lints (2,043,593 samples, 0.73%)</title><rect x="28.8135%" y="197" width="0.7347%" height="15" fill="rgb(233,36,39)"/><text x="29.0635%" y="207.50"></text></g><g><title>type_of (361,583 samples, 0.13%)</title><rect x="29.4182%" y="181" width="0.1300%" height="15" fill="rgb(226,3,54)"/><text x="29.6682%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (283,233 samples, 0.10%)</title><rect x="29.4463%" y="165" width="0.1018%" height="15" fill="rgb(245,192,40)"/><text x="29.6963%" y="175.50"></text></g><g><title>lint_checking (3,690,411 samples, 1.33%)</title><rect x="28.8130%" y="213" width="1.3267%" height="15" fill="rgb(238,167,29)"/><text x="29.0630%" y="223.50"></text></g><g><title>module_lints (1,645,318 samples, 0.59%)</title><rect x="29.5482%" y="197" width="0.5915%" height="15" fill="rgb(232,182,51)"/><text x="29.7982%" y="207.50"></text></g><g><title>lint_mod (1,640,598 samples, 0.59%)</title><rect x="29.5499%" y="181" width="0.5898%" height="15" fill="rgb(231,60,39)"/><text x="29.7999%" y="191.50"></text></g><g><title>privacy_access_levels (413,765 samples, 0.15%)</title><rect x="30.1396%" y="213" width="0.1487%" height="15" fill="rgb(208,69,12)"/><text x="30.3896%" y="223.50"></text></g><g><title>privacy_checking_modules (2,558,399 samples, 0.92%)</title><rect x="30.2884%" y="213" width="0.9197%" height="15" fill="rgb(235,93,37)"/><text x="30.5384%" y="223.50"></text></g><g><title>check_mod_privacy (2,555,499 samples, 0.92%)</title><rect x="30.2894%" y="197" width="0.9187%" height="15" fill="rgb(213,116,39)"/><text x="30.5394%" y="207.50"></text></g><g><title>misc_checking_3 (7,846,078 samples, 2.82%)</title><rect x="28.3986%" y="229" width="2.8206%" height="15" fill="rgb(222,207,29)"/><text x="28.6486%" y="239.50">mi..</text></g><g><title>impl_parent (775,928 samples, 0.28%)</title><rect x="31.7111%" y="165" width="0.2789%" height="15" fill="rgb(206,96,30)"/><text x="31.9611%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (441,016 samples, 0.16%)</title><rect x="31.8315%" y="149" width="0.1585%" height="15" fill="rgb(218,138,4)"/><text x="32.0815%" y="159.50"></text></g><g><title>impl_trait_ref (1,426,498 samples, 0.51%)</title><rect x="31.9901%" y="165" width="0.5128%" height="15" fill="rgb(250,191,14)"/><text x="32.2401%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,110,344 samples, 0.40%)</title><rect x="32.1037%" y="149" width="0.3992%" height="15" fill="rgb(239,60,40)"/><text x="32.3537%" y="159.50"></text></g><g><title>coherent_trait (3,725,722 samples, 1.34%)</title><rect x="31.2548%" y="197" width="1.3394%" height="15" fill="rgb(206,27,48)"/><text x="31.5048%" y="207.50"></text></g><g><title>specialization_graph_of (3,589,951 samples, 1.29%)</title><rect x="31.3036%" y="181" width="1.2906%" height="15" fill="rgb(225,35,8)"/><text x="31.5536%" y="191.50"></text></g><g><title>coherence_checking (3,786,702 samples, 1.36%)</title><rect x="31.2490%" y="213" width="1.3613%" height="15" fill="rgb(250,213,24)"/><text x="31.4990%" y="223.50"></text></g><g><title>dropck_outlives (291,762 samples, 0.10%)</title><rect x="42.8873%" y="165" width="0.1049%" height="15" fill="rgb(247,123,22)"/><text x="43.1373%" y="175.50"></text></g><g><title>generics_of (1,003,652 samples, 0.36%)</title><rect x="45.0157%" y="149" width="0.3608%" height="15" fill="rgb(231,138,38)"/><text x="45.2657%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (739,490 samples, 0.27%)</title><rect x="45.1107%" y="133" width="0.2658%" height="15" fill="rgb(231,145,46)"/><text x="45.3607%" y="143.50"></text></g><g><title>impl_trait_ref (1,606,358 samples, 0.58%)</title><rect x="45.4432%" y="149" width="0.5775%" height="15" fill="rgb(251,118,11)"/><text x="45.6932%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,338,455 samples, 0.48%)</title><rect x="45.5395%" y="133" width="0.4812%" height="15" fill="rgb(217,147,25)"/><text x="45.7895%" y="143.50"></text></g><g><title>predicates_of (843,264 samples, 0.30%)</title><rect x="46.0390%" y="149" width="0.3031%" height="15" fill="rgb(247,81,37)"/><text x="46.2890%" y="159.50"></text></g><g><title>predicates_defined_on (470,002 samples, 0.17%)</title><rect x="46.1732%" y="133" width="0.1690%" height="15" fill="rgb(209,12,38)"/><text x="46.4232%" y="143.50"></text></g><g><title>specializes (2,314,929 samples, 0.83%)</title><rect x="46.3422%" y="149" width="0.8322%" height="15" fill="rgb(227,1,9)"/><text x="46.5922%" y="159.50"></text></g><g><title>param_env (1,318,085 samples, 0.47%)</title><rect x="46.7005%" y="133" width="0.4738%" height="15" fill="rgb(248,47,43)"/><text x="46.9505%" y="143.50"></text></g><g><title>def_span (579,055 samples, 0.21%)</title><rect x="46.9662%" y="117" width="0.2082%" height="15" fill="rgb(221,10,30)"/><text x="47.2162%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (508,445 samples, 0.18%)</title><rect x="46.9916%" y="101" width="0.1828%" height="15" fill="rgb(210,229,1)"/><text x="47.2416%" y="111.50"></text></g><g><title>evaluate_obligation (11,781,505 samples, 4.24%)</title><rect x="42.9922%" y="165" width="4.2354%" height="15" fill="rgb(222,148,37)"/><text x="43.2422%" y="175.50">evalu..</text></g><g><title>generics_of (292,613 samples, 0.11%)</title><rect x="47.2588%" y="165" width="0.1052%" height="15" fill="rgb(234,67,33)"/><text x="47.5088%" y="175.50"></text></g><g><title>method_autoderef_steps (333,946 samples, 0.12%)</title><rect x="47.4319%" y="165" width="0.1201%" height="15" fill="rgb(247,98,35)"/><text x="47.6819%" y="175.50"></text></g><g><title>associated_item (290,914 samples, 0.10%)</title><rect x="70.2992%" y="133" width="0.1046%" height="15" fill="rgb(247,138,52)"/><text x="70.5492%" y="143.50"></text></g><g><title>associated_items (409,054 samples, 0.15%)</title><rect x="70.2679%" y="149" width="0.1471%" height="15" fill="rgb(213,79,30)"/><text x="70.5179%" y="159.50"></text></g><g><title>dropck_outlives (416,236 samples, 0.15%)</title><rect x="70.4418%" y="149" width="0.1496%" height="15" fill="rgb(246,177,23)"/><text x="70.6918%" y="159.50"></text></g><g><title>eval_to_const_value_raw (618,676 samples, 0.22%)</title><rect x="70.5918%" y="149" width="0.2224%" height="15" fill="rgb(230,62,27)"/><text x="70.8418%" y="159.50"></text></g><g><title>eval_to_allocation_raw (615,226 samples, 0.22%)</title><rect x="70.5930%" y="133" width="0.2212%" height="15" fill="rgb(216,154,8)"/><text x="70.8430%" y="143.50"></text></g><g><title>specializes (651,837 samples, 0.23%)</title><rect x="71.8806%" y="133" width="0.2343%" height="15" fill="rgb(244,35,45)"/><text x="72.1306%" y="143.50"></text></g><g><title>evaluate_obligation (3,843,379 samples, 1.38%)</title><rect x="70.8142%" y="149" width="1.3817%" height="15" fill="rgb(251,115,12)"/><text x="71.0642%" y="159.50"></text></g><g><title>is_copy_raw (354,525 samples, 0.13%)</title><rect x="72.4059%" y="149" width="0.1274%" height="15" fill="rgb(240,54,50)"/><text x="72.6559%" y="159.50"></text></g><g><title>method_autoderef_steps (362,552 samples, 0.13%)</title><rect x="72.5905%" y="149" width="0.1303%" height="15" fill="rgb(233,84,52)"/><text x="72.8405%" y="159.50"></text></g><g><title>predicates_of (321,176 samples, 0.12%)</title><rect x="72.7347%" y="149" width="0.1155%" height="15" fill="rgb(207,117,47)"/><text x="72.9847%" y="159.50"></text></g><g><title>typeck (69,972,213 samples, 25.15%)</title><rect x="47.7926%" y="165" width="25.1546%" height="15" fill="rgb(249,43,39)"/><text x="48.0426%" y="175.50">typeck</text></g><g><title>item_bodies_checking (112,209,583 samples, 40.34%)</title><rect x="32.6198%" y="213" width="40.3387%" height="15" fill="rgb(209,38,44)"/><text x="32.8698%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (112,205,393 samples, 40.34%)</title><rect x="32.6213%" y="197" width="40.3372%" height="15" fill="rgb(236,212,23)"/><text x="32.8713%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (112,099,502 samples, 40.30%)</title><rect x="32.6593%" y="181" width="40.2991%" height="15" fill="rgb(242,79,21)"/><text x="32.9093%" y="191.50">typeck</text></g><g><title>type_op_prove_predicate (376,555 samples, 0.14%)</title><rect x="74.7031%" y="117" width="0.1354%" height="15" fill="rgb(211,96,35)"/><text x="74.9531%" y="127.50"></text></g><g><title>mir_borrowck (2,446,847 samples, 0.88%)</title><rect x="73.9596%" y="133" width="0.8796%" height="15" fill="rgb(253,215,40)"/><text x="74.2096%" y="143.50"></text></g><g><title>mir_borrowck (4,071,815 samples, 1.46%)</title><rect x="73.6546%" y="149" width="1.4638%" height="15" fill="rgb(211,81,21)"/><text x="73.9046%" y="159.50"></text></g><g><title>type_op_prove_predicate (463,035 samples, 0.17%)</title><rect x="74.9519%" y="133" width="0.1665%" height="15" fill="rgb(208,190,38)"/><text x="75.2019%" y="143.50"></text></g><g><title>associated_item (483,546 samples, 0.17%)</title><rect x="77.7503%" y="53" width="0.1738%" height="15" fill="rgb(235,213,38)"/><text x="78.0003%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (413,564 samples, 0.15%)</title><rect x="77.7754%" y="37" width="0.1487%" height="15" fill="rgb(237,122,38)"/><text x="78.0254%" y="47.50"></text></g><g><title>associated_items (599,816 samples, 0.22%)</title><rect x="77.7147%" y="69" width="0.2156%" height="15" fill="rgb(244,218,35)"/><text x="77.9647%" y="79.50"></text></g><g><title>evaluate_obligation (2,437,663 samples, 0.88%)</title><rect x="78.0386%" y="69" width="0.8763%" height="15" fill="rgb(240,68,47)"/><text x="78.2886%" y="79.50"></text></g><g><title>is_copy_raw (307,896 samples, 0.11%)</title><rect x="79.0529%" y="69" width="0.1107%" height="15" fill="rgb(210,16,53)"/><text x="79.3029%" y="79.50"></text></g><g><title>mir_built (11,731,461 samples, 4.22%)</title><rect x="75.2399%" y="101" width="4.2174%" height="15" fill="rgb(235,124,12)"/><text x="75.4899%" y="111.50">mir_b..</text></g><g><title>typeck (11,339,057 samples, 4.08%)</title><rect x="75.3810%" y="85" width="4.0763%" height="15" fill="rgb(224,169,11)"/><text x="75.6310%" y="95.50">type..</text></g><g><title>mir_built (557,867 samples, 0.20%)</title><rect x="79.6250%" y="69" width="0.2005%" height="15" fill="rgb(250,166,2)"/><text x="79.8750%" y="79.50"></text></g><g><title>mir_const (13,075,486 samples, 4.70%)</title><rect x="75.1459%" y="133" width="4.7006%" height="15" fill="rgb(242,216,29)"/><text x="75.3959%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (12,912,774 samples, 4.64%)</title><rect x="75.2044%" y="117" width="4.6421%" height="15" fill="rgb(230,116,27)"/><text x="75.4544%" y="127.50">unsaf..</text></g><g><title>unsafety_check_result (1,082,582 samples, 0.39%)</title><rect x="79.4573%" y="101" width="0.3892%" height="15" fill="rgb(228,99,48)"/><text x="79.7073%" y="111.50"></text></g><g><title>unsafety_check_result (757,189 samples, 0.27%)</title><rect x="79.5743%" y="85" width="0.2722%" height="15" fill="rgb(253,11,6)"/><text x="79.8243%" y="95.50"></text></g><g><title>mir_promoted (13,157,287 samples, 4.73%)</title><rect x="75.1183%" y="149" width="4.7300%" height="15" fill="rgb(247,143,39)"/><text x="75.3683%" y="159.50">mir_pr..</text></g><g><title>type_of (19,479,378 samples, 7.00%)</title><rect x="73.1971%" y="181" width="7.0027%" height="15" fill="rgb(236,97,10)"/><text x="73.4471%" y="191.50">type_of</text></g><g><title>mir_borrowck (19,475,798 samples, 7.00%)</title><rect x="73.1984%" y="165" width="7.0014%" height="15" fill="rgb(233,208,19)"/><text x="73.4484%" y="175.50">mir_borro..</text></g><g><title>type_op_prove_predicate (664,188 samples, 0.24%)</title><rect x="79.9610%" y="149" width="0.2388%" height="15" fill="rgb(216,164,2)"/><text x="80.2110%" y="159.50"></text></g><g><title>item_types_checking (20,252,376 samples, 7.28%)</title><rect x="72.9585%" y="213" width="7.2806%" height="15" fill="rgb(220,129,5)"/><text x="73.2085%" y="223.50">item_types..</text></g><g><title>check_mod_item_types (20,247,576 samples, 7.28%)</title><rect x="72.9602%" y="197" width="7.2789%" height="15" fill="rgb(242,17,10)"/><text x="73.2102%" y="207.50">check_mod_..</text></g><g><title>is_late_bound_map (553,377 samples, 0.20%)</title><rect x="80.5009%" y="165" width="0.1989%" height="15" fill="rgb(242,107,0)"/><text x="80.7509%" y="175.50"></text></g><g><title>resolve_lifetimes (529,087 samples, 0.19%)</title><rect x="80.5096%" y="149" width="0.1902%" height="15" fill="rgb(251,28,31)"/><text x="80.7596%" y="159.50"></text></g><g><title>lint_levels (838,059 samples, 0.30%)</title><rect x="80.7574%" y="133" width="0.3013%" height="15" fill="rgb(233,223,10)"/><text x="81.0074%" y="143.50"></text></g><g><title>named_region_map (998,559 samples, 0.36%)</title><rect x="80.6999%" y="165" width="0.3590%" height="15" fill="rgb(215,21,27)"/><text x="80.9499%" y="175.50"></text></g><g><title>resolve_lifetimes (981,139 samples, 0.35%)</title><rect x="80.7061%" y="149" width="0.3527%" height="15" fill="rgb(232,23,21)"/><text x="80.9561%" y="159.50"></text></g><g><title>generics_of (1,712,487 samples, 0.62%)</title><rect x="80.4464%" y="181" width="0.6156%" height="15" fill="rgb(244,5,23)"/><text x="80.6964%" y="191.50"></text></g><g><title>explicit_predicates_of (286,443 samples, 0.10%)</title><rect x="81.1252%" y="149" width="0.1030%" height="15" fill="rgb(226,81,46)"/><text x="81.3752%" y="159.50"></text></g><g><title>predicates_of (734,828 samples, 0.26%)</title><rect x="81.0783%" y="181" width="0.2642%" height="15" fill="rgb(247,70,30)"/><text x="81.3283%" y="191.50"></text></g><g><title>predicates_defined_on (683,177 samples, 0.25%)</title><rect x="81.0969%" y="165" width="0.2456%" height="15" fill="rgb(212,68,19)"/><text x="81.3469%" y="175.50"></text></g><g><title>inferred_outlives_of (318,103 samples, 0.11%)</title><rect x="81.2281%" y="149" width="0.1144%" height="15" fill="rgb(240,187,13)"/><text x="81.4781%" y="159.50"></text></g><g><title>inferred_outlives_crate (295,363 samples, 0.11%)</title><rect x="81.2363%" y="133" width="0.1062%" height="15" fill="rgb(223,113,26)"/><text x="81.4863%" y="143.50"></text></g><g><title>type_collecting (3,184,906 samples, 1.14%)</title><rect x="80.2397%" y="213" width="1.1450%" height="15" fill="rgb(206,192,2)"/><text x="80.4897%" y="223.50"></text></g><g><title>collect_mod_item_types (3,176,056 samples, 1.14%)</title><rect x="80.2429%" y="197" width="1.1418%" height="15" fill="rgb(241,108,4)"/><text x="80.4929%" y="207.50"></text></g><g><title>evaluate_obligation (505,684 samples, 0.18%)</title><rect x="82.1799%" y="181" width="0.1818%" height="15" fill="rgb(247,173,49)"/><text x="82.4299%" y="191.50"></text></g><g><title>region_scope_tree (953,884 samples, 0.34%)</title><rect x="82.5667%" y="181" width="0.3429%" height="15" fill="rgb(224,114,35)"/><text x="82.8167%" y="191.50"></text></g><g><title>check_impl_item_well_formed (4,016,336 samples, 1.44%)</title><rect x="81.4758%" y="197" width="1.4438%" height="15" fill="rgb(245,159,27)"/><text x="81.7258%" y="207.50"></text></g><g><title>analysis (231,735,387 samples, 83.31%)</title><rect x="0.2392%" y="245" width="83.3075%" height="15" fill="rgb(245,172,44)"/><text x="0.4892%" y="255.50">analysis</text></g><g><title>type_check_crate (145,558,565 samples, 52.33%)</title><rect x="31.2192%" y="229" width="52.3275%" height="15" fill="rgb(236,23,11)"/><text x="31.4692%" y="239.50">type_check_crate</text></g><g><title>wf_checking (6,005,387 samples, 2.16%)</title><rect x="81.3878%" y="213" width="2.1589%" height="15" fill="rgb(205,117,38)"/><text x="81.6378%" y="223.50">w..</text></g><g><title>check_item_well_formed (1,744,168 samples, 0.63%)</title><rect x="82.9197%" y="197" width="0.6270%" height="15" fill="rgb(237,72,25)"/><text x="83.1697%" y="207.50"></text></g><g><title>codegen_crate (379,625 samples, 0.14%)</title><rect x="83.5504%" y="245" width="0.1365%" height="15" fill="rgb(244,70,9)"/><text x="83.8004%" y="255.50"></text></g><g><title>macro_expand_crate (24,148,469 samples, 8.68%)</title><rect x="83.8858%" y="229" width="8.6812%" height="15" fill="rgb(217,125,39)"/><text x="84.1358%" y="239.50">macro_expand..</text></g><g><title>expand_crate (24,128,779 samples, 8.67%)</title><rect x="83.8929%" y="213" width="8.6742%" height="15" fill="rgb(235,36,10)"/><text x="84.1429%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (791,370 samples, 0.28%)</title><rect x="92.2826%" y="197" width="0.2845%" height="15" fill="rgb(251,123,47)"/><text x="92.5326%" y="207.50"></text></g><g><title>late_resolve_crate (2,925,442 samples, 1.05%)</title><rect x="92.6920%" y="213" width="1.0517%" height="15" fill="rgb(221,13,13)"/><text x="92.9420%" y="223.50"></text></g><g><title>configure_and_expand (28,179,364 samples, 10.13%)</title><rect x="83.6868%" y="245" width="10.1303%" height="15" fill="rgb(238,131,9)"/><text x="83.9368%" y="255.50">configure_and_e..</text></g><g><title>resolve_crate (3,265,977 samples, 1.17%)</title><rect x="92.6431%" y="229" width="1.1741%" height="15" fill="rgb(211,50,8)"/><text x="92.8931%" y="239.50"></text></g><g><title>drop_ast (369,494 samples, 0.13%)</title><rect x="93.8172%" y="245" width="0.1328%" height="15" fill="rgb(245,182,24)"/><text x="94.0672%" y="255.50"></text></g><g><title>early_lint_checks (767,539 samples, 0.28%)</title><rect x="93.9551%" y="245" width="0.2759%" height="15" fill="rgb(242,14,37)"/><text x="94.2051%" y="255.50"></text></g><g><title>free_global_ctxt (3,479,889 samples, 1.25%)</title><rect x="94.2310%" y="245" width="1.2510%" height="15" fill="rgb(246,228,12)"/><text x="94.4810%" y="255.50"></text></g><g><title>generate_crate_metadata (1,132,973 samples, 0.41%)</title><rect x="95.4820%" y="245" width="0.4073%" height="15" fill="rgb(213,55,15)"/><text x="95.7320%" y="255.50"></text></g><g><title>hir_lowering (6,584,164 samples, 2.37%)</title><rect x="95.8893%" y="245" width="2.3670%" height="15" fill="rgb(209,9,3)"/><text x="96.1393%" y="255.50">hi..</text></g><g><title>parse_crate (3,165,586 samples, 1.14%)</title><rect x="98.2756%" y="245" width="1.1380%" height="15" fill="rgb(230,59,30)"/><text x="98.5256%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (998,361 samples, 0.36%)</title><rect x="99.4815%" y="245" width="0.3589%" height="15" fill="rgb(209,121,21)"/><text x="99.7315%" y="255.50"></text></g><g><title>all (278,168,626 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (278,168,626 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (347,443 samples, 0.12%)</title><rect x="99.8751%" y="245" width="0.1249%" height="15" fill="rgb(215,41,42)"/><text x="100.1251%" y="255.50"></text></g></svg></svg>