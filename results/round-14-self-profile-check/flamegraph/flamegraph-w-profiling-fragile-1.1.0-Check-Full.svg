<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (141,522 samples, 0.11%)</title><rect x="10.9788%" y="149" width="0.1088%" height="15" fill="rgb(227,0,7)"/><text x="11.2288%" y="159.50"></text></g><g><title>param_env (379,213 samples, 0.29%)</title><rect x="12.7118%" y="117" width="0.2914%" height="15" fill="rgb(217,0,24)"/><text x="12.9618%" y="127.50"></text></g><g><title>item_attrs (608,446 samples, 0.47%)</title><rect x="13.4996%" y="85" width="0.4676%" height="15" fill="rgb(221,193,54)"/><text x="13.7496%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (599,516 samples, 0.46%)</title><rect x="13.5065%" y="69" width="0.4607%" height="15" fill="rgb(248,212,6)"/><text x="13.7565%" y="79.50"></text></g><g><title>codegen_fn_attrs (725,467 samples, 0.56%)</title><rect x="13.4210%" y="101" width="0.5575%" height="15" fill="rgb(208,68,35)"/><text x="13.6710%" y="111.50"></text></g><g><title>adt_drop_tys (205,752 samples, 0.16%)</title><rect x="16.0622%" y="69" width="0.1581%" height="15" fill="rgb(232,128,0)"/><text x="16.3122%" y="79.50"></text></g><g><title>needs_drop_raw (929,279 samples, 0.71%)</title><rect x="15.9988%" y="85" width="0.7141%" height="15" fill="rgb(207,160,47)"/><text x="16.2488%" y="95.50"></text></g><g><title>is_copy_raw (637,316 samples, 0.49%)</title><rect x="16.2232%" y="69" width="0.4897%" height="15" fill="rgb(228,23,34)"/><text x="16.4732%" y="79.50"></text></g><g><title>evaluate_obligation (535,985 samples, 0.41%)</title><rect x="16.3010%" y="53" width="0.4119%" height="15" fill="rgb(218,30,26)"/><text x="16.5510%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (135,301 samples, 0.10%)</title><rect x="16.8773%" y="69" width="0.1040%" height="15" fill="rgb(220,122,19)"/><text x="17.1273%" y="79.50"></text></g><g><title>impl_parent (177,661 samples, 0.14%)</title><rect x="17.2068%" y="53" width="0.1365%" height="15" fill="rgb(250,228,42)"/><text x="17.4568%" y="63.50"></text></g><g><title>specialization_graph_of (1,106,983 samples, 0.85%)</title><rect x="16.9959%" y="69" width="0.8507%" height="15" fill="rgb(240,193,28)"/><text x="17.2459%" y="79.50"></text></g><g><title>impl_trait_ref (654,819 samples, 0.50%)</title><rect x="17.3433%" y="53" width="0.5032%" height="15" fill="rgb(216,20,37)"/><text x="17.5933%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (377,227 samples, 0.29%)</title><rect x="17.5567%" y="37" width="0.2899%" height="15" fill="rgb(206,188,39)"/><text x="17.8067%" y="47.50"></text></g><g><title>resolve_instance (1,548,758 samples, 1.19%)</title><rect x="16.7129%" y="85" width="1.1901%" height="15" fill="rgb(217,207,13)"/><text x="16.9629%" y="95.50"></text></g><g><title>thir_body (977,701 samples, 0.75%)</title><rect x="17.9364%" y="85" width="0.7513%" height="15" fill="rgb(231,73,38)"/><text x="18.1864%" y="95.50"></text></g><g><title>mir_const (8,754,969 samples, 6.73%)</title><rect x="11.9808%" y="133" width="6.7277%" height="15" fill="rgb(225,20,46)"/><text x="12.2308%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,424,375 samples, 5.71%)</title><rect x="13.0032%" y="117" width="5.7052%" height="15" fill="rgb(210,31,41)"/><text x="13.2532%" y="127.50">unsafet..</text></g><g><title>mir_built (6,155,289 samples, 4.73%)</title><rect x="13.9785%" y="101" width="4.7300%" height="15" fill="rgb(221,200,47)"/><text x="14.2285%" y="111.50">mir_bu..</text></g><g><title>has_structural_eq_impls (226,473 samples, 0.17%)</title><rect x="18.9369%" y="117" width="0.1740%" height="15" fill="rgb(226,26,5)"/><text x="19.1869%" y="127.50"></text></g><g><title>evaluate_obligation (180,213 samples, 0.14%)</title><rect x="18.9725%" y="101" width="0.1385%" height="15" fill="rgb(249,33,26)"/><text x="19.2225%" y="111.50"></text></g><g><title>trait_impls_of (130,902 samples, 0.10%)</title><rect x="19.0104%" y="85" width="0.1006%" height="15" fill="rgb(235,183,28)"/><text x="19.2604%" y="95.50"></text></g><g><title>mir_const (197,333 samples, 0.15%)</title><rect x="19.1990%" y="117" width="0.1516%" height="15" fill="rgb(221,5,38)"/><text x="19.4490%" y="127.50"></text></g><g><title>unsafety_check_result (134,882 samples, 0.10%)</title><rect x="19.2470%" y="101" width="0.1036%" height="15" fill="rgb(247,18,42)"/><text x="19.4970%" y="111.50"></text></g><g><title>mir_const_qualif (926,841 samples, 0.71%)</title><rect x="18.7085%" y="133" width="0.7122%" height="15" fill="rgb(241,131,45)"/><text x="18.9585%" y="143.50"></text></g><g><title>mir_promoted (10,698,722 samples, 8.22%)</title><rect x="11.1996%" y="149" width="8.2214%" height="15" fill="rgb(249,31,29)"/><text x="11.4496%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (501,066 samples, 0.39%)</title><rect x="19.4210%" y="149" width="0.3850%" height="15" fill="rgb(225,111,53)"/><text x="19.6710%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (243,533 samples, 0.19%)</title><rect x="19.8060%" y="149" width="0.1871%" height="15" fill="rgb(238,160,17)"/><text x="20.0560%" y="159.50"></text></g><g><title>normalize_projection_ty (167,263 samples, 0.13%)</title><rect x="19.8646%" y="133" width="0.1285%" height="15" fill="rgb(214,148,48)"/><text x="20.1146%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,582,077 samples, 1.98%)</title><rect x="19.9931%" y="149" width="1.9842%" height="15" fill="rgb(232,36,49)"/><text x="20.2431%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (27,677,189 samples, 21.27%)</title><rect x="0.7122%" y="181" width="21.2684%" height="15" fill="rgb(209,103,24)"/><text x="0.9622%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (27,501,658 samples, 21.13%)</title><rect x="0.8471%" y="165" width="21.1335%" height="15" fill="rgb(229,88,8)"/><text x="1.0971%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (395,544 samples, 0.30%)</title><rect x="21.9806%" y="181" width="0.3040%" height="15" fill="rgb(213,181,19)"/><text x="22.2306%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (177,221 samples, 0.14%)</title><rect x="22.1484%" y="165" width="0.1362%" height="15" fill="rgb(254,191,54)"/><text x="22.3984%" y="175.50"></text></g><g><title>hir_module_items (195,493 samples, 0.15%)</title><rect x="22.2846%" y="181" width="0.1502%" height="15" fill="rgb(241,83,37)"/><text x="22.5346%" y="191.50"></text></g><g><title>codegen_fn_attrs (208,672 samples, 0.16%)</title><rect x="22.7591%" y="117" width="0.1604%" height="15" fill="rgb(233,36,39)"/><text x="23.0091%" y="127.50"></text></g><g><title>codegen_fn_attrs (406,104 samples, 0.31%)</title><rect x="22.6147%" y="149" width="0.3121%" height="15" fill="rgb(226,3,54)"/><text x="22.8647%" y="159.50"></text></g><g><title>should_inherit_track_caller (327,114 samples, 0.25%)</title><rect x="22.6754%" y="133" width="0.2514%" height="15" fill="rgb(245,192,40)"/><text x="22.9254%" y="143.50"></text></g><g><title>check_mod_attrs (609,048 samples, 0.47%)</title><rect x="22.4588%" y="165" width="0.4680%" height="15" fill="rgb(238,167,29)"/><text x="22.7088%" y="175.50"></text></g><g><title>lookup_deprecation_entry (180,332 samples, 0.14%)</title><rect x="23.2058%" y="149" width="0.1386%" height="15" fill="rgb(232,182,51)"/><text x="23.4558%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (448,404 samples, 0.34%)</title><rect x="23.0757%" y="165" width="0.3446%" height="15" fill="rgb(231,60,39)"/><text x="23.3257%" y="175.50"></text></g><g><title>misc_checking_1 (1,334,875 samples, 1.03%)</title><rect x="22.4352%" y="181" width="1.0258%" height="15" fill="rgb(208,69,12)"/><text x="22.6852%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (430,355 samples, 0.33%)</title><rect x="23.4621%" y="165" width="0.3307%" height="15" fill="rgb(235,93,37)"/><text x="23.7121%" y="175.50"></text></g><g><title>check_mod_liveness (349,113 samples, 0.27%)</title><rect x="23.5246%" y="149" width="0.2683%" height="15" fill="rgb(213,116,39)"/><text x="23.7746%" y="159.50"></text></g><g><title>misc_checking_2 (902,040 samples, 0.69%)</title><rect x="23.4609%" y="181" width="0.6932%" height="15" fill="rgb(222,207,29)"/><text x="23.7109%" y="191.50"></text></g><g><title>match_checking (470,115 samples, 0.36%)</title><rect x="23.7928%" y="165" width="0.3613%" height="15" fill="rgb(206,96,30)"/><text x="24.0428%" y="175.50"></text></g><g><title>check_match (431,055 samples, 0.33%)</title><rect x="23.8229%" y="149" width="0.3312%" height="15" fill="rgb(218,138,4)"/><text x="24.0729%" y="159.50"></text></g><g><title>check_private_in_public (207,993 samples, 0.16%)</title><rect x="24.1613%" y="165" width="0.1598%" height="15" fill="rgb(250,191,14)"/><text x="24.4113%" y="175.50"></text></g><g><title>death_checking (391,534 samples, 0.30%)</title><rect x="24.3212%" y="165" width="0.3009%" height="15" fill="rgb(239,60,40)"/><text x="24.5712%" y="175.50"></text></g><g><title>eval_to_allocation_raw (541,826 samples, 0.42%)</title><rect x="25.1556%" y="133" width="0.4164%" height="15" fill="rgb(206,27,48)"/><text x="25.4056%" y="143.50"></text></g><g><title>eval_to_allocation_raw (535,486 samples, 0.41%)</title><rect x="25.1605%" y="117" width="0.4115%" height="15" fill="rgb(225,35,8)"/><text x="25.4105%" y="127.50"></text></g><g><title>eval_to_const_value_raw (178,062 samples, 0.14%)</title><rect x="25.5720%" y="133" width="0.1368%" height="15" fill="rgb(250,213,24)"/><text x="25.8220%" y="143.50"></text></g><g><title>eval_to_const_value_raw (175,352 samples, 0.13%)</title><rect x="25.5740%" y="117" width="0.1347%" height="15" fill="rgb(247,123,22)"/><text x="25.8240%" y="127.50"></text></g><g><title>eval_to_allocation_raw (164,781 samples, 0.13%)</title><rect x="25.5822%" y="101" width="0.1266%" height="15" fill="rgb(231,138,38)"/><text x="25.8322%" y="111.50"></text></g><g><title>param_env (216,373 samples, 0.17%)</title><rect x="25.7088%" y="133" width="0.1663%" height="15" fill="rgb(231,145,46)"/><text x="25.9588%" y="143.50"></text></g><g><title>crate_lints (2,700,560 samples, 2.08%)</title><rect x="24.6232%" y="149" width="2.0752%" height="15" fill="rgb(251,118,11)"/><text x="24.8732%" y="159.50">c..</text></g><g><title>type_of (1,063,053 samples, 0.82%)</title><rect x="25.8815%" y="133" width="0.8169%" height="15" fill="rgb(217,147,25)"/><text x="26.1315%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (833,849 samples, 0.64%)</title><rect x="26.0576%" y="117" width="0.6408%" height="15" fill="rgb(247,81,37)"/><text x="26.3076%" y="127.50"></text></g><g><title>lint_checking (3,189,295 samples, 2.45%)</title><rect x="24.6220%" y="165" width="2.4508%" height="15" fill="rgb(209,12,38)"/><text x="24.8720%" y="175.50">li..</text></g><g><title>module_lints (487,245 samples, 0.37%)</title><rect x="26.6984%" y="149" width="0.3744%" height="15" fill="rgb(227,1,9)"/><text x="26.9484%" y="159.50"></text></g><g><title>lint_mod (481,525 samples, 0.37%)</title><rect x="26.7028%" y="133" width="0.3700%" height="15" fill="rgb(248,47,43)"/><text x="26.9528%" y="143.50"></text></g><g><title>privacy_access_levels (264,803 samples, 0.20%)</title><rect x="27.0728%" y="165" width="0.2035%" height="15" fill="rgb(221,10,30)"/><text x="27.3228%" y="175.50"></text></g><g><title>privacy_checking_modules (946,741 samples, 0.73%)</title><rect x="27.2763%" y="165" width="0.7275%" height="15" fill="rgb(210,229,1)"/><text x="27.5263%" y="175.50"></text></g><g><title>check_mod_privacy (942,721 samples, 0.72%)</title><rect x="27.2794%" y="149" width="0.7244%" height="15" fill="rgb(222,148,37)"/><text x="27.5294%" y="159.50"></text></g><g><title>misc_checking_3 (5,023,046 samples, 3.86%)</title><rect x="24.1541%" y="181" width="3.8599%" height="15" fill="rgb(234,67,33)"/><text x="24.4041%" y="191.50">misc..</text></g><g><title>impl_parent (2,651,095 samples, 2.04%)</title><rect x="31.1498%" y="117" width="2.0372%" height="15" fill="rgb(247,98,35)"/><text x="31.3998%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,469,982 samples, 1.13%)</title><rect x="32.0574%" y="101" width="1.1296%" height="15" fill="rgb(247,138,52)"/><text x="32.3074%" y="111.50"></text></g><g><title>impl_trait_ref (5,676,776 samples, 4.36%)</title><rect x="33.1890%" y="117" width="4.3623%" height="15" fill="rgb(213,79,30)"/><text x="33.4390%" y="127.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,515,046 samples, 3.47%)</title><rect x="34.0817%" y="101" width="3.4696%" height="15" fill="rgb(246,177,23)"/><text x="34.3317%" y="111.50">met..</text></g><g><title>trait_impls_of (798,838 samples, 0.61%)</title><rect x="37.5905%" y="117" width="0.6139%" height="15" fill="rgb(230,62,27)"/><text x="37.8405%" y="127.50"></text></g><g><title>implementations_of_trait (227,852 samples, 0.18%)</title><rect x="38.0293%" y="101" width="0.1751%" height="15" fill="rgb(216,154,8)"/><text x="38.2793%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (178,362 samples, 0.14%)</title><rect x="38.0673%" y="85" width="0.1371%" height="15" fill="rgb(244,35,45)"/><text x="38.3173%" y="95.50"></text></g><g><title>coherent_trait (13,166,247 samples, 10.12%)</title><rect x="28.0879%" y="149" width="10.1176%" height="15" fill="rgb(251,115,12)"/><text x="28.3379%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,143,017 samples, 10.10%)</title><rect x="28.1057%" y="133" width="10.0997%" height="15" fill="rgb(240,54,50)"/><text x="28.3557%" y="143.50">specialization_..</text></g><g><title>coherence_checking (13,250,248 samples, 10.18%)</title><rect x="28.0720%" y="165" width="10.1821%" height="15" fill="rgb(233,84,52)"/><text x="28.3220%" y="175.50">coherence_check..</text></g><g><title>associated_item (170,021 samples, 0.13%)</title><rect x="49.6070%" y="101" width="0.1307%" height="15" fill="rgb(207,117,47)"/><text x="49.8570%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (131,330 samples, 0.10%)</title><rect x="49.6368%" y="85" width="0.1009%" height="15" fill="rgb(249,43,39)"/><text x="49.8868%" y="95.50"></text></g><g><title>associated_items (260,893 samples, 0.20%)</title><rect x="49.5487%" y="117" width="0.2005%" height="15" fill="rgb(209,38,44)"/><text x="49.7987%" y="127.50"></text></g><g><title>dropck_outlives (322,304 samples, 0.25%)</title><rect x="49.7813%" y="117" width="0.2477%" height="15" fill="rgb(236,212,23)"/><text x="50.0313%" y="127.50"></text></g><g><title>adt_dtorck_constraint (163,093 samples, 0.13%)</title><rect x="49.9036%" y="101" width="0.1253%" height="15" fill="rgb(242,79,21)"/><text x="50.1536%" y="111.50"></text></g><g><title>evaluate_obligation (711,097 samples, 0.55%)</title><rect x="50.0290%" y="117" width="0.5464%" height="15" fill="rgb(211,96,35)"/><text x="50.2790%" y="127.50"></text></g><g><title>trait_impls_of (159,861 samples, 0.12%)</title><rect x="50.4526%" y="101" width="0.1228%" height="15" fill="rgb(253,215,40)"/><text x="50.7026%" y="111.50"></text></g><g><title>item_attrs (148,174 samples, 0.11%)</title><rect x="50.7743%" y="117" width="0.1139%" height="15" fill="rgb(211,81,21)"/><text x="51.0243%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (143,153 samples, 0.11%)</title><rect x="50.7781%" y="101" width="0.1100%" height="15" fill="rgb(208,190,38)"/><text x="51.0281%" y="111.50"></text></g><g><title>method_autoderef_steps (473,866 samples, 0.36%)</title><rect x="50.9200%" y="117" width="0.3641%" height="15" fill="rgb(235,213,38)"/><text x="51.1700%" y="127.50"></text></g><g><title>evaluate_obligation (203,454 samples, 0.16%)</title><rect x="51.1278%" y="101" width="0.1563%" height="15" fill="rgb(237,122,38)"/><text x="51.3778%" y="111.50"></text></g><g><title>predicates_of (203,552 samples, 0.16%)</title><rect x="51.3866%" y="117" width="0.1564%" height="15" fill="rgb(244,218,35)"/><text x="51.6366%" y="127.50"></text></g><g><title>predicates_defined_on (142,832 samples, 0.11%)</title><rect x="51.4333%" y="101" width="0.1098%" height="15" fill="rgb(240,68,47)"/><text x="51.6833%" y="111.50"></text></g><g><title>evaluate_obligation (510,316 samples, 0.39%)</title><rect x="56.2167%" y="101" width="0.3922%" height="15" fill="rgb(210,16,53)"/><text x="56.4667%" y="111.50"></text></g><g><title>is_copy_raw (520,076 samples, 0.40%)</title><rect x="56.7418%" y="101" width="0.3997%" height="15" fill="rgb(235,124,12)"/><text x="56.9918%" y="111.50"></text></g><g><title>evaluate_obligation (445,725 samples, 0.34%)</title><rect x="56.7990%" y="85" width="0.3425%" height="15" fill="rgb(224,169,11)"/><text x="57.0490%" y="95.50"></text></g><g><title>method_autoderef_steps (156,994 samples, 0.12%)</title><rect x="57.2118%" y="101" width="0.1206%" height="15" fill="rgb(250,166,2)"/><text x="57.4618%" y="111.50"></text></g><g><title>typeck (7,671,016 samples, 5.89%)</title><rect x="51.5930%" y="117" width="5.8948%" height="15" fill="rgb(242,216,29)"/><text x="51.8430%" y="127.50">typeck</text></g><g><title>item_bodies_checking (25,042,949 samples, 19.24%)</title><rect x="38.2877%" y="165" width="19.2442%" height="15" fill="rgb(230,116,27)"/><text x="38.5377%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,039,179 samples, 19.24%)</title><rect x="38.2906%" y="149" width="19.2413%" height="15" fill="rgb(228,99,48)"/><text x="38.5406%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (24,934,648 samples, 19.16%)</title><rect x="38.3709%" y="133" width="19.1609%" height="15" fill="rgb(253,11,6)"/><text x="38.6209%" y="143.50">typeck</text></g><g><title>layout_of (195,073 samples, 0.15%)</title><rect x="58.5018%" y="101" width="0.1499%" height="15" fill="rgb(247,143,39)"/><text x="58.7518%" y="111.50"></text></g><g><title>layout_of (179,452 samples, 0.14%)</title><rect x="58.5138%" y="85" width="0.1379%" height="15" fill="rgb(236,97,10)"/><text x="58.7638%" y="95.50"></text></g><g><title>layout_of (153,632 samples, 0.12%)</title><rect x="58.5336%" y="69" width="0.1181%" height="15" fill="rgb(233,208,19)"/><text x="58.7836%" y="79.50"></text></g><g><title>layout_of (151,262 samples, 0.12%)</title><rect x="58.5355%" y="53" width="0.1162%" height="15" fill="rgb(216,164,2)"/><text x="58.7855%" y="63.50"></text></g><g><title>layout_of (141,662 samples, 0.11%)</title><rect x="58.5428%" y="37" width="0.1089%" height="15" fill="rgb(220,129,5)"/><text x="58.7928%" y="47.50"></text></g><g><title>layout_of (263,153 samples, 0.20%)</title><rect x="58.4659%" y="117" width="0.2022%" height="15" fill="rgb(242,17,10)"/><text x="58.7159%" y="127.50"></text></g><g><title>layout_of (294,353 samples, 0.23%)</title><rect x="58.4465%" y="133" width="0.2262%" height="15" fill="rgb(242,107,0)"/><text x="58.6965%" y="143.50"></text></g><g><title>dropck_outlives (187,192 samples, 0.14%)</title><rect x="59.2956%" y="117" width="0.1438%" height="15" fill="rgb(251,28,31)"/><text x="59.5456%" y="127.50"></text></g><g><title>adt_dtorck_constraint (155,412 samples, 0.12%)</title><rect x="59.3200%" y="101" width="0.1194%" height="15" fill="rgb(233,223,10)"/><text x="59.5700%" y="111.50"></text></g><g><title>item_types_checking (2,638,910 samples, 2.03%)</title><rect x="57.5319%" y="165" width="2.0279%" height="15" fill="rgb(215,21,27)"/><text x="57.7819%" y="175.50">i..</text></g><g><title>check_mod_item_types (2,633,390 samples, 2.02%)</title><rect x="57.5361%" y="149" width="2.0236%" height="15" fill="rgb(232,23,21)"/><text x="57.7861%" y="159.50">c..</text></g><g><title>typeck (1,108,652 samples, 0.85%)</title><rect x="58.7078%" y="133" width="0.8519%" height="15" fill="rgb(244,5,23)"/><text x="58.9578%" y="143.50"></text></g><g><title>late_bound_vars_map (139,133 samples, 0.11%)</title><rect x="59.9543%" y="117" width="0.1069%" height="15" fill="rgb(226,81,46)"/><text x="60.2043%" y="127.50"></text></g><g><title>fn_sig (361,373 samples, 0.28%)</title><rect x="59.8066%" y="133" width="0.2777%" height="15" fill="rgb(247,70,30)"/><text x="60.0566%" y="143.50"></text></g><g><title>named_region_map (213,703 samples, 0.16%)</title><rect x="60.1913%" y="117" width="0.1642%" height="15" fill="rgb(212,68,19)"/><text x="60.4413%" y="127.50"></text></g><g><title>resolve_lifetimes (198,433 samples, 0.15%)</title><rect x="60.2030%" y="101" width="0.1525%" height="15" fill="rgb(240,187,13)"/><text x="60.4530%" y="111.50"></text></g><g><title>generics_of (370,984 samples, 0.29%)</title><rect x="60.0843%" y="133" width="0.2851%" height="15" fill="rgb(223,113,26)"/><text x="60.3343%" y="143.50"></text></g><g><title>late_bound_vars_map (187,941 samples, 0.14%)</title><rect x="60.6604%" y="85" width="0.1444%" height="15" fill="rgb(206,192,2)"/><text x="60.9104%" y="95.50"></text></g><g><title>resolve_lifetimes (174,801 samples, 0.13%)</title><rect x="60.6705%" y="69" width="0.1343%" height="15" fill="rgb(241,108,4)"/><text x="60.9205%" y="79.50"></text></g><g><title>explicit_predicates_of (368,363 samples, 0.28%)</title><rect x="60.5304%" y="101" width="0.2831%" height="15" fill="rgb(247,173,49)"/><text x="60.7804%" y="111.50"></text></g><g><title>predicates_of (1,127,061 samples, 0.87%)</title><rect x="60.4126%" y="133" width="0.8661%" height="15" fill="rgb(224,114,35)"/><text x="60.6626%" y="143.50"></text></g><g><title>predicates_defined_on (1,067,731 samples, 0.82%)</title><rect x="60.4582%" y="117" width="0.8205%" height="15" fill="rgb(245,159,27)"/><text x="60.7082%" y="127.50"></text></g><g><title>inferred_outlives_of (605,417 samples, 0.47%)</title><rect x="60.8135%" y="101" width="0.4652%" height="15" fill="rgb(245,172,44)"/><text x="61.0635%" y="111.50"></text></g><g><title>inferred_outlives_crate (584,287 samples, 0.45%)</title><rect x="60.8297%" y="85" width="0.4490%" height="15" fill="rgb(236,23,11)"/><text x="61.0797%" y="95.50"></text></g><g><title>type_of (441,285 samples, 0.34%)</title><rect x="60.9396%" y="69" width="0.3391%" height="15" fill="rgb(205,117,38)"/><text x="61.1896%" y="79.50"></text></g><g><title>type_of (384,074 samples, 0.30%)</title><rect x="60.9835%" y="53" width="0.2951%" height="15" fill="rgb(237,72,25)"/><text x="61.2335%" y="63.50"></text></g><g><title>type_collecting (2,382,186 samples, 1.83%)</title><rect x="59.5615%" y="165" width="1.8306%" height="15" fill="rgb(244,70,9)"/><text x="59.8115%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,367,596 samples, 1.82%)</title><rect x="59.5728%" y="149" width="1.8194%" height="15" fill="rgb(217,125,39)"/><text x="59.8228%" y="159.50">c..</text></g><g><title>type_of (147,623 samples, 0.11%)</title><rect x="61.2787%" y="133" width="0.1134%" height="15" fill="rgb(235,36,10)"/><text x="61.5287%" y="143.50"></text></g><g><title>evaluate_obligation (686,899 samples, 0.53%)</title><rect x="63.5546%" y="133" width="0.5278%" height="15" fill="rgb(251,123,47)"/><text x="63.8046%" y="143.50"></text></g><g><title>implied_outlives_bounds (279,192 samples, 0.21%)</title><rect x="64.0824%" y="133" width="0.2145%" height="15" fill="rgb(221,13,13)"/><text x="64.3324%" y="143.50"></text></g><g><title>param_env (422,833 samples, 0.32%)</title><rect x="64.2969%" y="133" width="0.3249%" height="15" fill="rgb(238,131,9)"/><text x="64.5469%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,338,488 samples, 3.33%)</title><rect x="61.5799%" y="149" width="3.3339%" height="15" fill="rgb(211,50,8)"/><text x="61.8299%" y="159.50">che..</text></g><g><title>region_scope_tree (343,991 samples, 0.26%)</title><rect x="64.6494%" y="133" width="0.2643%" height="15" fill="rgb(245,182,24)"/><text x="64.8994%" y="143.50"></text></g><g><title>adt_def (130,201 samples, 0.10%)</title><rect x="66.7799%" y="69" width="0.1001%" height="15" fill="rgb(242,14,37)"/><text x="67.0299%" y="79.50"></text></g><g><title>adt_sized_constraint (145,971 samples, 0.11%)</title><rect x="66.7790%" y="85" width="0.1122%" height="15" fill="rgb(246,228,12)"/><text x="67.0290%" y="95.50"></text></g><g><title>adt_sized_constraint (269,463 samples, 0.21%)</title><rect x="66.6895%" y="101" width="0.2071%" height="15" fill="rgb(213,55,15)"/><text x="66.9395%" y="111.50"></text></g><g><title>adt_sized_constraint (373,683 samples, 0.29%)</title><rect x="66.6210%" y="117" width="0.2872%" height="15" fill="rgb(209,9,3)"/><text x="66.8710%" y="127.50"></text></g><g><title>evaluate_obligation (588,065 samples, 0.45%)</title><rect x="66.4706%" y="133" width="0.4519%" height="15" fill="rgb(230,59,30)"/><text x="66.7206%" y="143.50"></text></g><g><title>implied_outlives_bounds (152,071 samples, 0.12%)</title><rect x="66.9351%" y="133" width="0.1169%" height="15" fill="rgb(209,121,21)"/><text x="67.1851%" y="143.50"></text></g><g><title>layout_of (151,341 samples, 0.12%)</title><rect x="67.2098%" y="117" width="0.1163%" height="15" fill="rgb(220,109,13)"/><text x="67.4598%" y="127.50"></text></g><g><title>object_safety_violations (393,125 samples, 0.30%)</title><rect x="67.0523%" y="133" width="0.3021%" height="15" fill="rgb(232,18,1)"/><text x="67.3023%" y="143.50"></text></g><g><title>param_env (395,892 samples, 0.30%)</title><rect x="67.3544%" y="133" width="0.3042%" height="15" fill="rgb(215,41,42)"/><text x="67.6044%" y="143.50"></text></g><g><title>analysis (87,709,238 samples, 67.40%)</title><rect x="0.4888%" y="197" width="67.3998%" height="15" fill="rgb(224,123,36)"/><text x="0.7388%" y="207.50">analysis</text></g><g><title>type_check_crate (51,889,928 samples, 39.87%)</title><rect x="28.0140%" y="181" width="39.8746%" height="15" fill="rgb(240,125,3)"/><text x="28.2640%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,446,583 samples, 6.49%)</title><rect x="61.3979%" y="165" width="6.4907%" height="15" fill="rgb(205,98,50)"/><text x="61.6479%" y="175.50">wf_checki..</text></g><g><title>check_item_well_formed (3,871,293 samples, 2.97%)</title><rect x="64.9138%" y="149" width="2.9749%" height="15" fill="rgb(205,185,37)"/><text x="65.1638%" y="159.50">che..</text></g><g><title>codegen_crate (458,995 samples, 0.35%)</title><rect x="67.8959%" y="197" width="0.3527%" height="15" fill="rgb(238,207,15)"/><text x="68.1459%" y="207.50"></text></g><g><title>AST_validation (225,773 samples, 0.17%)</title><rect x="68.4217%" y="181" width="0.1735%" height="15" fill="rgb(213,199,42)"/><text x="68.6717%" y="191.50"></text></g><g><title>metadata_load_macro (687,085 samples, 0.53%)</title><rect x="87.1717%" y="149" width="0.5280%" height="15" fill="rgb(235,201,11)"/><text x="87.4217%" y="159.50"></text></g><g><title>metadata_register_crate (2,579,998 samples, 1.98%)</title><rect x="87.6997%" y="149" width="1.9826%" height="15" fill="rgb(207,46,11)"/><text x="87.9497%" y="159.50">m..</text></g><g><title>metadata_register_crate (919,711 samples, 0.71%)</title><rect x="88.9756%" y="133" width="0.7067%" height="15" fill="rgb(241,35,35)"/><text x="89.2256%" y="143.50"></text></g><g><title>macro_expand_crate (27,765,089 samples, 21.34%)</title><rect x="68.7454%" y="181" width="21.3360%" height="15" fill="rgb(243,32,47)"/><text x="68.9954%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (27,738,369 samples, 21.32%)</title><rect x="68.7659%" y="165" width="21.3154%" height="15" fill="rgb(247,202,23)"/><text x="69.0159%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (519,307 samples, 0.40%)</title><rect x="89.6823%" y="149" width="0.3991%" height="15" fill="rgb(219,102,11)"/><text x="89.9323%" y="159.50"></text></g><g><title>late_resolve_crate (2,605,849 samples, 2.00%)</title><rect x="90.2674%" y="165" width="2.0025%" height="15" fill="rgb(243,110,44)"/><text x="90.5174%" y="175.50">l..</text></g><g><title>configure_and_expand (31,411,260 samples, 24.14%)</title><rect x="68.2486%" y="197" width="24.1379%" height="15" fill="rgb(222,74,54)"/><text x="68.4986%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,945,353 samples, 2.26%)</title><rect x="90.1231%" y="181" width="2.2633%" height="15" fill="rgb(216,99,12)"/><text x="90.3731%" y="191.50">r..</text></g><g><title>drop_ast (214,842 samples, 0.17%)</title><rect x="92.3865%" y="197" width="0.1651%" height="15" fill="rgb(226,22,26)"/><text x="92.6365%" y="207.50"></text></g><g><title>early_lint_checks (307,714 samples, 0.24%)</title><rect x="92.5626%" y="197" width="0.2365%" height="15" fill="rgb(217,163,10)"/><text x="92.8126%" y="207.50"></text></g><g><title>free_global_ctxt (3,660,931 samples, 2.81%)</title><rect x="92.7990%" y="197" width="2.8132%" height="15" fill="rgb(213,25,53)"/><text x="93.0490%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,221,693 samples, 0.94%)</title><rect x="95.6122%" y="197" width="0.9388%" height="15" fill="rgb(252,105,26)"/><text x="95.8622%" y="207.50"></text></g><g><title>hir_lowering (2,469,958 samples, 1.90%)</title><rect x="96.5511%" y="197" width="1.8980%" height="15" fill="rgb(220,39,43)"/><text x="96.8011%" y="207.50">h..</text></g><g><title>parse_crate (372,494 samples, 0.29%)</title><rect x="98.4908%" y="197" width="0.2862%" height="15" fill="rgb(229,68,48)"/><text x="98.7408%" y="207.50"></text></g><g><title>prepare_outputs (298,913 samples, 0.23%)</title><rect x="98.7841%" y="197" width="0.2297%" height="15" fill="rgb(252,8,32)"/><text x="99.0341%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (834,630 samples, 0.64%)</title><rect x="99.0138%" y="197" width="0.6414%" height="15" fill="rgb(223,20,43)"/><text x="99.2638%" y="207.50"></text></g><g><title>all (130,132,741 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (130,132,741 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (330,954 samples, 0.25%)</title><rect x="99.7457%" y="197" width="0.2543%" height="15" fill="rgb(249,185,26)"/><text x="99.9957%" y="207.50"></text></g></svg></svg>