<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (240,104 samples, 0.30%)</title><rect x="7.8214%" y="117" width="0.2983%" height="15" fill="rgb(227,0,7)"/><text x="8.0714%" y="127.50"></text></g><g><title>item_attrs (93,981 samples, 0.12%)</title><rect x="8.4162%" y="85" width="0.1168%" height="15" fill="rgb(217,0,24)"/><text x="8.6662%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (89,391 samples, 0.11%)</title><rect x="8.4220%" y="69" width="0.1111%" height="15" fill="rgb(221,193,54)"/><text x="8.6720%" y="79.50"></text></g><g><title>codegen_fn_attrs (134,491 samples, 0.17%)</title><rect x="8.3711%" y="101" width="0.1671%" height="15" fill="rgb(248,212,6)"/><text x="8.6211%" y="111.50"></text></g><g><title>is_copy_raw (98,900 samples, 0.12%)</title><rect x="9.8029%" y="53" width="0.1229%" height="15" fill="rgb(208,68,35)"/><text x="10.0529%" y="63.50"></text></g><g><title>evaluate_obligation (84,760 samples, 0.11%)</title><rect x="9.8205%" y="37" width="0.1053%" height="15" fill="rgb(232,128,0)"/><text x="10.0705%" y="47.50"></text></g><g><title>adt_drop_tys (164,032 samples, 0.20%)</title><rect x="9.7828%" y="69" width="0.2038%" height="15" fill="rgb(207,160,47)"/><text x="10.0328%" y="79.50"></text></g><g><title>needs_drop_raw (669,439 samples, 0.83%)</title><rect x="9.7108%" y="85" width="0.8318%" height="15" fill="rgb(228,23,34)"/><text x="9.9608%" y="95.50"></text></g><g><title>is_copy_raw (447,477 samples, 0.56%)</title><rect x="9.9866%" y="69" width="0.5560%" height="15" fill="rgb(218,30,26)"/><text x="10.2366%" y="79.50"></text></g><g><title>evaluate_obligation (387,046 samples, 0.48%)</title><rect x="10.0617%" y="53" width="0.4809%" height="15" fill="rgb(220,122,19)"/><text x="10.3117%" y="63.50"></text></g><g><title>trait_impls_of (133,192 samples, 0.17%)</title><rect x="10.3772%" y="37" width="0.1655%" height="15" fill="rgb(250,228,42)"/><text x="10.6272%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (293,725 samples, 0.36%)</title><rect x="10.7771%" y="69" width="0.3650%" height="15" fill="rgb(240,193,28)"/><text x="11.0271%" y="79.50"></text></g><g><title>impl_item_implementor_ids (83,081 samples, 0.10%)</title><rect x="11.1567%" y="69" width="0.1032%" height="15" fill="rgb(216,20,37)"/><text x="11.4067%" y="79.50"></text></g><g><title>resolve_instance (669,668 samples, 0.83%)</title><rect x="10.5427%" y="85" width="0.8321%" height="15" fill="rgb(206,188,39)"/><text x="10.7927%" y="95.50"></text></g><g><title>thir_body (276,061 samples, 0.34%)</title><rect x="11.3916%" y="85" width="0.3430%" height="15" fill="rgb(217,207,13)"/><text x="11.6416%" y="95.50"></text></g><g><title>mir_const (3,549,830 samples, 4.41%)</title><rect x="7.3389%" y="133" width="4.4109%" height="15" fill="rgb(231,73,38)"/><text x="7.5889%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (2,921,350 samples, 3.63%)</title><rect x="8.1198%" y="117" width="3.6300%" height="15" fill="rgb(225,20,46)"/><text x="8.3698%" y="127.50">unsa..</text></g><g><title>mir_built (2,584,617 samples, 3.21%)</title><rect x="8.5382%" y="101" width="3.2116%" height="15" fill="rgb(210,31,41)"/><text x="8.7882%" y="111.50">mir..</text></g><g><title>mir_promoted (3,915,565 samples, 4.87%)</title><rect x="6.9148%" y="149" width="4.8654%" height="15" fill="rgb(221,200,47)"/><text x="7.1648%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (91,060 samples, 0.11%)</title><rect x="11.7802%" y="149" width="0.1131%" height="15" fill="rgb(226,26,5)"/><text x="12.0302%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (200,622 samples, 0.25%)</title><rect x="11.8934%" y="149" width="0.2493%" height="15" fill="rgb(249,33,26)"/><text x="12.1434%" y="159.50"></text></g><g><title>normalize_projection_ty (126,901 samples, 0.16%)</title><rect x="11.9850%" y="133" width="0.1577%" height="15" fill="rgb(235,183,28)"/><text x="12.2350%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,169,676 samples, 1.45%)</title><rect x="12.1742%" y="149" width="1.4534%" height="15" fill="rgb(221,5,38)"/><text x="12.4242%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,955,360 samples, 12.37%)</title><rect x="1.2591%" y="181" width="12.3703%" height="15" fill="rgb(247,18,42)"/><text x="1.5091%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,897,159 samples, 12.30%)</title><rect x="1.3315%" y="165" width="12.2980%" height="15" fill="rgb(241,131,45)"/><text x="1.5815%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (227,522 samples, 0.28%)</title><rect x="13.6445%" y="181" width="0.2827%" height="15" fill="rgb(249,31,29)"/><text x="13.8945%" y="191.50"></text></g><g><title>associated_item (106,271 samples, 0.13%)</title><rect x="14.4281%" y="117" width="0.1321%" height="15" fill="rgb(225,111,53)"/><text x="14.6781%" y="127.50"></text></g><g><title>get_lang_items (142,011 samples, 0.18%)</title><rect x="14.6237%" y="101" width="0.1765%" height="15" fill="rgb(238,160,17)"/><text x="14.8737%" y="111.50"></text></g><g><title>item_attrs (146,273 samples, 0.18%)</title><rect x="14.8001%" y="101" width="0.1818%" height="15" fill="rgb(214,148,48)"/><text x="15.0501%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (140,733 samples, 0.17%)</title><rect x="14.8070%" y="85" width="0.1749%" height="15" fill="rgb(232,36,49)"/><text x="15.0570%" y="95.50"></text></g><g><title>codegen_fn_attrs (418,165 samples, 0.52%)</title><rect x="14.5602%" y="117" width="0.5196%" height="15" fill="rgb(209,103,24)"/><text x="14.8102%" y="127.50"></text></g><g><title>codegen_fn_attrs (677,637 samples, 0.84%)</title><rect x="14.2477%" y="149" width="0.8420%" height="15" fill="rgb(229,88,8)"/><text x="14.4977%" y="159.50"></text></g><g><title>should_inherit_track_caller (592,417 samples, 0.74%)</title><rect x="14.3536%" y="133" width="0.7361%" height="15" fill="rgb(213,181,19)"/><text x="14.6036%" y="143.50"></text></g><g><title>check_mod_attrs (898,541 samples, 1.12%)</title><rect x="13.9738%" y="165" width="1.1165%" height="15" fill="rgb(254,191,54)"/><text x="14.2238%" y="175.50"></text></g><g><title>check_mod_const_bodies (129,541 samples, 0.16%)</title><rect x="15.0903%" y="165" width="0.1610%" height="15" fill="rgb(241,83,37)"/><text x="15.3403%" y="175.50"></text></g><g><title>lookup_deprecation_entry (190,662 samples, 0.24%)</title><rect x="15.6103%" y="149" width="0.2369%" height="15" fill="rgb(233,36,39)"/><text x="15.8603%" y="159.50"></text></g><g><title>stability_index (104,921 samples, 0.13%)</title><rect x="15.7168%" y="133" width="0.1304%" height="15" fill="rgb(226,3,54)"/><text x="15.9668%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (518,986 samples, 0.64%)</title><rect x="15.3451%" y="165" width="0.6449%" height="15" fill="rgb(245,192,40)"/><text x="15.5951%" y="175.50"></text></g><g><title>misc_checking_1 (1,720,039 samples, 2.14%)</title><rect x="13.9278%" y="181" width="2.1373%" height="15" fill="rgb(238,167,29)"/><text x="14.1778%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (202,082 samples, 0.25%)</title><rect x="16.0667%" y="165" width="0.2511%" height="15" fill="rgb(232,182,51)"/><text x="16.3167%" y="175.50"></text></g><g><title>check_mod_liveness (168,762 samples, 0.21%)</title><rect x="16.1081%" y="149" width="0.2097%" height="15" fill="rgb(231,60,39)"/><text x="16.3581%" y="159.50"></text></g><g><title>misc_checking_2 (369,344 samples, 0.46%)</title><rect x="16.0651%" y="181" width="0.4589%" height="15" fill="rgb(208,69,12)"/><text x="16.3151%" y="191.50"></text></g><g><title>match_checking (165,942 samples, 0.21%)</title><rect x="16.3178%" y="165" width="0.2062%" height="15" fill="rgb(235,93,37)"/><text x="16.5678%" y="175.50"></text></g><g><title>check_match (151,801 samples, 0.19%)</title><rect x="16.3354%" y="149" width="0.1886%" height="15" fill="rgb(213,116,39)"/><text x="16.5854%" y="159.50"></text></g><g><title>check_private_in_public (102,731 samples, 0.13%)</title><rect x="16.5350%" y="165" width="0.1277%" height="15" fill="rgb(222,207,29)"/><text x="16.7850%" y="175.50"></text></g><g><title>death_checking (168,442 samples, 0.21%)</title><rect x="16.6626%" y="165" width="0.2093%" height="15" fill="rgb(206,96,30)"/><text x="16.9126%" y="175.50"></text></g><g><title>crate_lints (1,805,990 samples, 2.24%)</title><rect x="16.8742%" y="149" width="2.2441%" height="15" fill="rgb(218,138,4)"/><text x="17.1242%" y="159.50">c..</text></g><g><title>type_of (1,270,065 samples, 1.58%)</title><rect x="17.5401%" y="133" width="1.5782%" height="15" fill="rgb(250,191,14)"/><text x="17.7901%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (814,399 samples, 1.01%)</title><rect x="18.1063%" y="117" width="1.0120%" height="15" fill="rgb(239,60,40)"/><text x="18.3563%" y="127.50"></text></g><g><title>lint_checking (1,931,782 samples, 2.40%)</title><rect x="16.8720%" y="165" width="2.4004%" height="15" fill="rgb(206,27,48)"/><text x="17.1220%" y="175.50">li..</text></g><g><title>module_lints (124,002 samples, 0.15%)</title><rect x="19.1183%" y="149" width="0.1541%" height="15" fill="rgb(225,35,8)"/><text x="19.3683%" y="159.50"></text></g><g><title>lint_mod (121,342 samples, 0.15%)</title><rect x="19.1216%" y="133" width="0.1508%" height="15" fill="rgb(250,213,24)"/><text x="19.3716%" y="143.50"></text></g><g><title>privacy_access_levels (145,422 samples, 0.18%)</title><rect x="19.2723%" y="165" width="0.1807%" height="15" fill="rgb(247,123,22)"/><text x="19.5223%" y="175.50"></text></g><g><title>privacy_checking_modules (346,014 samples, 0.43%)</title><rect x="19.4530%" y="165" width="0.4300%" height="15" fill="rgb(231,138,38)"/><text x="19.7030%" y="175.50"></text></g><g><title>check_mod_privacy (344,193 samples, 0.43%)</title><rect x="19.4553%" y="149" width="0.4277%" height="15" fill="rgb(231,145,46)"/><text x="19.7053%" y="159.50"></text></g><g><title>misc_checking_3 (2,714,091 samples, 3.37%)</title><rect x="16.5240%" y="181" width="3.3725%" height="15" fill="rgb(251,118,11)"/><text x="16.7740%" y="191.50">mis..</text></g><g><title>impl_parent (2,362,906 samples, 2.94%)</title><rect x="24.7618%" y="117" width="2.9361%" height="15" fill="rgb(217,147,25)"/><text x="25.0118%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,322,423 samples, 1.64%)</title><rect x="26.0547%" y="101" width="1.6432%" height="15" fill="rgb(247,81,37)"/><text x="26.3047%" y="111.50"></text></g><g><title>impl_trait_ref (6,602,688 samples, 8.20%)</title><rect x="27.7074%" y="117" width="8.2044%" height="15" fill="rgb(209,12,38)"/><text x="27.9574%" y="127.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,794,611 samples, 7.20%)</title><rect x="28.7115%" y="101" width="7.2003%" height="15" fill="rgb(227,1,9)"/><text x="28.9615%" y="111.50">metadata_d..</text></g><g><title>item_attrs (104,781 samples, 0.13%)</title><rect x="35.9118%" y="117" width="0.1302%" height="15" fill="rgb(248,47,43)"/><text x="36.1618%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,541 samples, 0.12%)</title><rect x="35.9220%" y="101" width="0.1200%" height="15" fill="rgb(221,10,30)"/><text x="36.1720%" y="111.50"></text></g><g><title>explicit_predicates_of (146,540 samples, 0.18%)</title><rect x="36.1119%" y="85" width="0.1821%" height="15" fill="rgb(210,229,1)"/><text x="36.3619%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (139,510 samples, 0.17%)</title><rect x="36.1206%" y="69" width="0.1734%" height="15" fill="rgb(222,148,37)"/><text x="36.3706%" y="79.50"></text></g><g><title>predicates_of (237,392 samples, 0.29%)</title><rect x="36.0420%" y="117" width="0.2950%" height="15" fill="rgb(234,67,33)"/><text x="36.2920%" y="127.50"></text></g><g><title>predicates_defined_on (200,281 samples, 0.25%)</title><rect x="36.0881%" y="101" width="0.2489%" height="15" fill="rgb(247,98,35)"/><text x="36.3381%" y="111.50"></text></g><g><title>trait_impls_of (793,311 samples, 0.99%)</title><rect x="36.3391%" y="117" width="0.9858%" height="15" fill="rgb(247,138,52)"/><text x="36.5891%" y="127.50"></text></g><g><title>implementations_of_trait (191,323 samples, 0.24%)</title><rect x="37.0871%" y="101" width="0.2377%" height="15" fill="rgb(213,79,30)"/><text x="37.3371%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (153,142 samples, 0.19%)</title><rect x="37.1346%" y="85" width="0.1903%" height="15" fill="rgb(246,177,23)"/><text x="37.3846%" y="95.50"></text></g><g><title>coherent_trait (13,992,405 samples, 17.39%)</title><rect x="19.9688%" y="149" width="17.3867%" height="15" fill="rgb(230,62,27)"/><text x="20.2188%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,977,565 samples, 17.37%)</title><rect x="19.9872%" y="133" width="17.3682%" height="15" fill="rgb(216,154,8)"/><text x="20.2372%" y="143.50">specialization_graph_of</text></g><g><title>coherence_checking (14,101,407 samples, 17.52%)</title><rect x="19.9426%" y="165" width="17.5221%" height="15" fill="rgb(244,35,45)"/><text x="20.1926%" y="175.50">coherence_checking</text></g><g><title>associated_item (96,261 samples, 0.12%)</title><rect x="46.7386%" y="101" width="0.1196%" height="15" fill="rgb(251,115,12)"/><text x="46.9886%" y="111.50"></text></g><g><title>associated_items (155,662 samples, 0.19%)</title><rect x="46.6746%" y="117" width="0.1934%" height="15" fill="rgb(240,54,50)"/><text x="46.9246%" y="127.50"></text></g><g><title>adt_def (84,160 samples, 0.10%)</title><rect x="47.2871%" y="53" width="0.1046%" height="15" fill="rgb(233,84,52)"/><text x="47.5371%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (83,830 samples, 0.10%)</title><rect x="47.2875%" y="37" width="0.1042%" height="15" fill="rgb(207,117,47)"/><text x="47.5375%" y="47.50"></text></g><g><title>adt_dtorck_constraint (91,751 samples, 0.11%)</title><rect x="47.3921%" y="53" width="0.1140%" height="15" fill="rgb(249,43,39)"/><text x="47.6421%" y="63.50"></text></g><g><title>adt_dtorck_constraint (179,862 samples, 0.22%)</title><rect x="47.2836%" y="69" width="0.2235%" height="15" fill="rgb(209,38,44)"/><text x="47.5336%" y="79.50"></text></g><g><title>adt_dtorck_constraint (218,402 samples, 0.27%)</title><rect x="47.2503%" y="85" width="0.2714%" height="15" fill="rgb(236,212,23)"/><text x="47.5003%" y="95.50"></text></g><g><title>adt_dtorck_constraint (324,933 samples, 0.40%)</title><rect x="47.1419%" y="101" width="0.4038%" height="15" fill="rgb(242,79,21)"/><text x="47.3919%" y="111.50"></text></g><g><title>dropck_outlives (507,715 samples, 0.63%)</title><rect x="46.9237%" y="117" width="0.6309%" height="15" fill="rgb(211,96,35)"/><text x="47.1737%" y="127.50"></text></g><g><title>predicates_of (101,523 samples, 0.13%)</title><rect x="48.4705%" y="101" width="0.1262%" height="15" fill="rgb(253,215,40)"/><text x="48.7205%" y="111.50"></text></g><g><title>evaluate_obligation (899,305 samples, 1.12%)</title><rect x="47.5546%" y="117" width="1.1175%" height="15" fill="rgb(211,81,21)"/><text x="47.8046%" y="127.50"></text></g><g><title>method_autoderef_steps (216,101 samples, 0.27%)</title><rect x="49.0424%" y="117" width="0.2685%" height="15" fill="rgb(208,190,38)"/><text x="49.2924%" y="127.50"></text></g><g><title>evaluate_obligation (109,561 samples, 0.14%)</title><rect x="49.1747%" y="101" width="0.1361%" height="15" fill="rgb(235,213,38)"/><text x="49.4247%" y="111.50"></text></g><g><title>explicit_predicates_of (108,341 samples, 0.13%)</title><rect x="49.4511%" y="85" width="0.1346%" height="15" fill="rgb(237,122,38)"/><text x="49.7011%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (98,260 samples, 0.12%)</title><rect x="49.4636%" y="69" width="0.1221%" height="15" fill="rgb(244,218,35)"/><text x="49.7136%" y="79.50"></text></g><g><title>predicates_of (205,406 samples, 0.26%)</title><rect x="49.3523%" y="117" width="0.2552%" height="15" fill="rgb(240,68,47)"/><text x="49.6023%" y="127.50"></text></g><g><title>predicates_defined_on (157,634 samples, 0.20%)</title><rect x="49.4117%" y="101" width="0.1959%" height="15" fill="rgb(210,16,53)"/><text x="49.6617%" y="111.50"></text></g><g><title>item_bodies_checking (9,778,630 samples, 12.15%)</title><rect x="37.5503%" y="165" width="12.1507%" height="15" fill="rgb(235,124,12)"/><text x="37.8003%" y="175.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (9,775,740 samples, 12.15%)</title><rect x="37.5539%" y="149" width="12.1471%" height="15" fill="rgb(224,169,11)"/><text x="37.8039%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (9,730,260 samples, 12.09%)</title><rect x="37.6104%" y="133" width="12.0906%" height="15" fill="rgb(250,166,2)"/><text x="37.8604%" y="143.50">typeck</text></g><g><title>impl_trait_ref (144,552 samples, 0.18%)</title><rect x="51.8853%" y="85" width="0.1796%" height="15" fill="rgb(242,216,29)"/><text x="52.1353%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (125,592 samples, 0.16%)</title><rect x="51.9089%" y="69" width="0.1561%" height="15" fill="rgb(230,116,27)"/><text x="52.1589%" y="79.50"></text></g><g><title>adt_destructor (314,133 samples, 0.39%)</title><rect x="51.7109%" y="133" width="0.3903%" height="15" fill="rgb(228,99,48)"/><text x="51.9609%" y="143.50"></text></g><g><title>coherent_trait (308,783 samples, 0.38%)</title><rect x="51.7176%" y="117" width="0.3837%" height="15" fill="rgb(253,11,6)"/><text x="51.9676%" y="127.50"></text></g><g><title>specialization_graph_of (306,803 samples, 0.38%)</title><rect x="51.7200%" y="101" width="0.3812%" height="15" fill="rgb(247,143,39)"/><text x="51.9700%" y="111.50"></text></g><g><title>item_types_checking (2,150,263 samples, 2.67%)</title><rect x="49.7010%" y="165" width="2.6719%" height="15" fill="rgb(236,97,10)"/><text x="49.9510%" y="175.50">it..</text></g><g><title>check_mod_item_types (2,147,913 samples, 2.67%)</title><rect x="49.7040%" y="149" width="2.6690%" height="15" fill="rgb(233,208,19)"/><text x="49.9540%" y="159.50">ch..</text></g><g><title>fn_sig (298,942 samples, 0.37%)</title><rect x="52.8228%" y="133" width="0.3715%" height="15" fill="rgb(216,164,2)"/><text x="53.0728%" y="143.50"></text></g><g><title>is_late_bound_map (241,883 samples, 0.30%)</title><rect x="53.4513%" y="117" width="0.3006%" height="15" fill="rgb(220,129,5)"/><text x="53.7013%" y="127.50"></text></g><g><title>resolve_lifetimes (219,883 samples, 0.27%)</title><rect x="53.4786%" y="101" width="0.2732%" height="15" fill="rgb(242,17,10)"/><text x="53.7286%" y="111.50"></text></g><g><title>generics_of (543,126 samples, 0.67%)</title><rect x="53.1943%" y="133" width="0.6749%" height="15" fill="rgb(242,107,0)"/><text x="53.4443%" y="143.50"></text></g><g><title>late_bound_vars_map (496,515 samples, 0.62%)</title><rect x="54.7600%" y="85" width="0.6170%" height="15" fill="rgb(251,28,31)"/><text x="55.0100%" y="95.50"></text></g><g><title>resolve_lifetimes (467,014 samples, 0.58%)</title><rect x="54.7966%" y="69" width="0.5803%" height="15" fill="rgb(233,223,10)"/><text x="55.0466%" y="79.50"></text></g><g><title>lint_levels (110,861 samples, 0.14%)</title><rect x="55.2392%" y="53" width="0.1378%" height="15" fill="rgb(215,21,27)"/><text x="55.4892%" y="63.50"></text></g><g><title>explicit_predicates_of (974,460 samples, 1.21%)</title><rect x="54.1953%" y="101" width="1.2108%" height="15" fill="rgb(232,23,21)"/><text x="54.4453%" y="111.50"></text></g><g><title>predicates_of (1,570,018 samples, 1.95%)</title><rect x="53.9562%" y="133" width="1.9509%" height="15" fill="rgb(244,5,23)"/><text x="54.2062%" y="143.50">p..</text></g><g><title>predicates_defined_on (1,494,957 samples, 1.86%)</title><rect x="54.0495%" y="117" width="1.8576%" height="15" fill="rgb(226,81,46)"/><text x="54.2995%" y="127.50">p..</text></g><g><title>inferred_outlives_of (403,176 samples, 0.50%)</title><rect x="55.4061%" y="101" width="0.5010%" height="15" fill="rgb(247,70,30)"/><text x="55.6561%" y="111.50"></text></g><g><title>inferred_outlives_crate (366,654 samples, 0.46%)</title><rect x="55.4515%" y="85" width="0.4556%" height="15" fill="rgb(212,68,19)"/><text x="55.7015%" y="95.50"></text></g><g><title>type_of (160,231 samples, 0.20%)</title><rect x="55.7080%" y="69" width="0.1991%" height="15" fill="rgb(240,187,13)"/><text x="55.9580%" y="79.50"></text></g><g><title>type_collecting (3,153,185 samples, 3.92%)</title><rect x="52.3745%" y="165" width="3.9181%" height="15" fill="rgb(223,113,26)"/><text x="52.6245%" y="175.50">type..</text></g><g><title>collect_mod_item_types (3,140,655 samples, 3.90%)</title><rect x="52.3901%" y="149" width="3.9025%" height="15" fill="rgb(206,192,2)"/><text x="52.6401%" y="159.50">coll..</text></g><g><title>type_of (310,232 samples, 0.39%)</title><rect x="55.9071%" y="133" width="0.3855%" height="15" fill="rgb(241,108,4)"/><text x="56.1571%" y="143.50"></text></g><g><title>evaluate_obligation (356,634 samples, 0.44%)</title><rect x="58.8006%" y="133" width="0.4431%" height="15" fill="rgb(247,173,49)"/><text x="59.0506%" y="143.50"></text></g><g><title>implied_outlives_bounds (248,394 samples, 0.31%)</title><rect x="59.2479%" y="133" width="0.3086%" height="15" fill="rgb(224,114,35)"/><text x="59.4979%" y="143.50"></text></g><g><title>param_env (322,013 samples, 0.40%)</title><rect x="59.5566%" y="133" width="0.4001%" height="15" fill="rgb(245,159,27)"/><text x="59.8066%" y="143.50"></text></g><g><title>region_scope_tree (142,353 samples, 0.18%)</title><rect x="60.0006%" y="133" width="0.1769%" height="15" fill="rgb(245,172,44)"/><text x="60.2506%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,009,990 samples, 3.74%)</title><rect x="56.4534%" y="149" width="3.7402%" height="15" fill="rgb(236,23,11)"/><text x="56.7034%" y="159.50">chec..</text></g><g><title>evaluate_obligation (88,050 samples, 0.11%)</title><rect x="62.0976%" y="133" width="0.1094%" height="15" fill="rgb(205,117,38)"/><text x="62.3476%" y="143.50"></text></g><g><title>implied_outlives_bounds (108,680 samples, 0.14%)</title><rect x="62.2176%" y="133" width="0.1350%" height="15" fill="rgb(237,72,25)"/><text x="62.4676%" y="143.50"></text></g><g><title>param_env (221,445 samples, 0.28%)</title><rect x="62.3539%" y="133" width="0.2752%" height="15" fill="rgb(244,70,9)"/><text x="62.6039%" y="143.50"></text></g><g><title>trait_impls_of (220,772 samples, 0.27%)</title><rect x="62.7232%" y="133" width="0.2743%" height="15" fill="rgb(217,125,39)"/><text x="62.9732%" y="143.50"></text></g><g><title>analysis (50,097,057 samples, 62.25%)</title><rect x="0.8573%" y="197" width="62.2496%" height="15" fill="rgb(235,36,10)"/><text x="1.1073%" y="207.50">analysis</text></g><g><title>type_check_crate (34,774,777 samples, 43.21%)</title><rect x="19.8965%" y="181" width="43.2104%" height="15" fill="rgb(251,123,47)"/><text x="20.1465%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,481,211 samples, 6.81%)</title><rect x="56.2961%" y="165" width="6.8108%" height="15" fill="rgb(221,13,13)"/><text x="56.5461%" y="175.50">wf_checki..</text></g><g><title>check_item_well_formed (2,344,579 samples, 2.91%)</title><rect x="60.1936%" y="149" width="2.9133%" height="15" fill="rgb(238,131,9)"/><text x="60.4436%" y="159.50">ch..</text></g><g><title>variances_of (88,011 samples, 0.11%)</title><rect x="62.9976%" y="133" width="0.1094%" height="15" fill="rgb(211,50,8)"/><text x="63.2476%" y="143.50"></text></g><g><title>crate_variances (83,881 samples, 0.10%)</title><rect x="63.0027%" y="117" width="0.1042%" height="15" fill="rgb(245,182,24)"/><text x="63.2527%" y="127.50"></text></g><g><title>codegen_crate (376,024 samples, 0.47%)</title><rect x="63.1210%" y="197" width="0.4672%" height="15" fill="rgb(242,14,37)"/><text x="63.3710%" y="207.50"></text></g><g><title>AST_validation (123,282 samples, 0.15%)</title><rect x="63.8769%" y="181" width="0.1532%" height="15" fill="rgb(246,228,12)"/><text x="64.1269%" y="191.50"></text></g><g><title>crate_injection (85,301 samples, 0.11%)</title><rect x="64.0999%" y="181" width="0.1060%" height="15" fill="rgb(213,55,15)"/><text x="64.3499%" y="191.50"></text></g><g><title>metadata_load_macro (90,221 samples, 0.11%)</title><rect x="78.0852%" y="149" width="0.1121%" height="15" fill="rgb(209,9,3)"/><text x="78.3352%" y="159.50"></text></g><g><title>macro_expand_crate (13,976,755 samples, 17.37%)</title><rect x="64.2059%" y="181" width="17.3672%" height="15" fill="rgb(230,59,30)"/><text x="64.4559%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,948,945 samples, 17.33%)</title><rect x="64.2405%" y="165" width="17.3327%" height="15" fill="rgb(209,121,21)"/><text x="64.4905%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,716,780 samples, 3.38%)</title><rect x="78.1973%" y="149" width="3.3758%" height="15" fill="rgb(220,109,13)"/><text x="78.4473%" y="159.50">met..</text></g><g><title>metadata_register_crate (967,399 samples, 1.20%)</title><rect x="80.3711%" y="133" width="1.2021%" height="15" fill="rgb(232,18,1)"/><text x="80.6211%" y="143.50"></text></g><g><title>metadata_register_crate (83,221 samples, 0.10%)</title><rect x="81.4697%" y="117" width="0.1034%" height="15" fill="rgb(215,41,42)"/><text x="81.7197%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (250,672 samples, 0.31%)</title><rect x="81.5793%" y="181" width="0.3115%" height="15" fill="rgb(224,123,36)"/><text x="81.8293%" y="191.50"></text></g><g><title>late_resolve_crate (1,638,068 samples, 2.04%)</title><rect x="82.0220%" y="165" width="2.0354%" height="15" fill="rgb(240,125,3)"/><text x="82.2720%" y="175.50">l..</text></g><g><title>configure_and_expand (16,578,564 samples, 20.60%)</title><rect x="63.5883%" y="197" width="20.6002%" height="15" fill="rgb(205,98,50)"/><text x="63.8383%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,849,111 samples, 2.30%)</title><rect x="81.8908%" y="181" width="2.2977%" height="15" fill="rgb(205,185,37)"/><text x="82.1408%" y="191.50">r..</text></g><g><title>drop_ast (183,732 samples, 0.23%)</title><rect x="84.1885%" y="197" width="0.2283%" height="15" fill="rgb(238,207,15)"/><text x="84.4385%" y="207.50"></text></g><g><title>early_lint_checks (318,734 samples, 0.40%)</title><rect x="84.4355%" y="197" width="0.3961%" height="15" fill="rgb(213,199,42)"/><text x="84.6855%" y="207.50"></text></g><g><title>free_global_ctxt (2,885,002 samples, 3.58%)</title><rect x="84.8316%" y="197" width="3.5848%" height="15" fill="rgb(235,201,11)"/><text x="85.0816%" y="207.50">free..</text></g><g><title>generate_crate_metadata (898,670 samples, 1.12%)</title><rect x="88.4164%" y="197" width="1.1167%" height="15" fill="rgb(207,46,11)"/><text x="88.6664%" y="207.50"></text></g><g><title>hir_lowering (2,728,920 samples, 3.39%)</title><rect x="89.5331%" y="197" width="3.3909%" height="15" fill="rgb(241,35,35)"/><text x="89.7831%" y="207.50">hir..</text></g><g><title>parse_crate (4,287,347 samples, 5.33%)</title><rect x="92.9861%" y="197" width="5.3274%" height="15" fill="rgb(243,32,47)"/><text x="93.2361%" y="207.50">parse_c..</text></g><g><title>prepare_outputs (326,204 samples, 0.41%)</title><rect x="98.3260%" y="197" width="0.4053%" height="15" fill="rgb(247,202,23)"/><text x="98.5760%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (561,547 samples, 0.70%)</title><rect x="98.7313%" y="197" width="0.6978%" height="15" fill="rgb(219,102,11)"/><text x="98.9813%" y="207.50"></text></g><g><title>setup_global_ctxt (137,931 samples, 0.17%)</title><rect x="99.4436%" y="197" width="0.1714%" height="15" fill="rgb(243,110,44)"/><text x="99.6936%" y="207.50"></text></g><g><title>all (80,477,714 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (80,477,714 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (309,853 samples, 0.39%)</title><rect x="99.6150%" y="197" width="0.3850%" height="15" fill="rgb(226,22,26)"/><text x="99.8650%" y="207.50"></text></g></svg></svg>