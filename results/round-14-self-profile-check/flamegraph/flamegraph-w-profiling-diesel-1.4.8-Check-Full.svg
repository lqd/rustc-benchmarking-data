<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (25,933,263 samples, 0.30%)</title><rect x="12.3372%" y="133" width="0.3002%" height="15" fill="rgb(227,0,7)"/><text x="12.5872%" y="143.50"></text></g><g><title>evaluate_obligation (16,827,944 samples, 0.19%)</title><rect x="12.4426%" y="117" width="0.1948%" height="15" fill="rgb(217,0,24)"/><text x="12.6926%" y="127.50"></text></g><g><title>is_copy_raw (111,990,492 samples, 1.30%)</title><rect x="16.6278%" y="53" width="1.2965%" height="15" fill="rgb(221,193,54)"/><text x="16.8778%" y="63.50"></text></g><g><title>evaluate_obligation (92,350,603 samples, 1.07%)</title><rect x="16.8551%" y="37" width="1.0691%" height="15" fill="rgb(248,212,6)"/><text x="17.1051%" y="47.50"></text></g><g><title>needs_drop_raw (127,452,552 samples, 1.48%)</title><rect x="16.4493%" y="69" width="1.4755%" height="15" fill="rgb(208,68,35)"/><text x="16.6993%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (25,251,939 samples, 0.29%)</title><rect x="18.0292%" y="53" width="0.2923%" height="15" fill="rgb(232,128,0)"/><text x="18.2792%" y="63.50"></text></g><g><title>resolve_instance (37,176,685 samples, 0.43%)</title><rect x="17.9248%" y="69" width="0.4304%" height="15" fill="rgb(207,160,47)"/><text x="18.1748%" y="79.50"></text></g><g><title>thir_body (72,431,064 samples, 0.84%)</title><rect x="18.3640%" y="69" width="0.8385%" height="15" fill="rgb(228,23,34)"/><text x="18.6140%" y="79.50"></text></g><g><title>mir_const (522,473,330 samples, 6.05%)</title><rect x="13.2235%" y="117" width="6.0485%" height="15" fill="rgb(218,30,26)"/><text x="13.4735%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (472,509,058 samples, 5.47%)</title><rect x="13.8019%" y="101" width="5.4701%" height="15" fill="rgb(220,122,19)"/><text x="14.0519%" y="111.50">unsafet..</text></g><g><title>mir_built (446,223,064 samples, 5.17%)</title><rect x="14.1062%" y="85" width="5.1658%" height="15" fill="rgb(250,228,42)"/><text x="14.3562%" y="95.50">mir_bu..</text></g><g><title>mir_const_qualif (11,380,519 samples, 0.13%)</title><rect x="19.2720%" y="117" width="0.1317%" height="15" fill="rgb(240,193,28)"/><text x="19.5220%" y="127.50"></text></g><g><title>mir_const (8,690,924 samples, 0.10%)</title><rect x="19.3031%" y="101" width="0.1006%" height="15" fill="rgb(216,20,37)"/><text x="19.5531%" y="111.50"></text></g><g><title>mir_promoted (584,479,802 samples, 6.77%)</title><rect x="12.6374%" y="133" width="6.7663%" height="15" fill="rgb(206,188,39)"/><text x="12.8874%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (79,879,725 samples, 0.92%)</title><rect x="19.4044%" y="133" width="0.9247%" height="15" fill="rgb(217,207,13)"/><text x="19.6544%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (79,945,530 samples, 0.93%)</title><rect x="20.3291%" y="133" width="0.9255%" height="15" fill="rgb(231,73,38)"/><text x="20.5791%" y="143.50"></text></g><g><title>normalize_projection_ty (46,923,111 samples, 0.54%)</title><rect x="20.7114%" y="117" width="0.5432%" height="15" fill="rgb(225,20,46)"/><text x="20.9614%" y="127.50"></text></g><g><title>type_op_normalize_predicate (51,775,733 samples, 0.60%)</title><rect x="21.2546%" y="133" width="0.5994%" height="15" fill="rgb(210,31,41)"/><text x="21.5046%" y="143.50"></text></g><g><title>normalize_projection_ty (30,112,539 samples, 0.35%)</title><rect x="21.5054%" y="117" width="0.3486%" height="15" fill="rgb(221,200,47)"/><text x="21.7554%" y="127.50"></text></g><g><title>type_op_normalize_ty (91,355,362 samples, 1.06%)</title><rect x="21.8540%" y="133" width="1.0576%" height="15" fill="rgb(226,26,5)"/><text x="22.1040%" y="143.50"></text></g><g><title>normalize_projection_ty (79,630,415 samples, 0.92%)</title><rect x="21.9897%" y="117" width="0.9219%" height="15" fill="rgb(249,33,26)"/><text x="22.2397%" y="127.50"></text></g><g><title>type_op_prove_predicate (298,811,863 samples, 3.46%)</title><rect x="22.9116%" y="133" width="3.4592%" height="15" fill="rgb(235,183,28)"/><text x="23.1616%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (2,246,723,353 samples, 26.01%)</title><rect x="0.3622%" y="165" width="26.0095%" height="15" fill="rgb(221,5,38)"/><text x="0.6122%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (2,242,397,867 samples, 25.96%)</title><rect x="0.4122%" y="149" width="25.9594%" height="15" fill="rgb(247,18,42)"/><text x="0.6622%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (9,778,828 samples, 0.11%)</title><rect x="26.3717%" y="165" width="0.1132%" height="15" fill="rgb(241,131,45)"/><text x="26.6217%" y="175.50"></text></g><g><title>hir_module_items (14,111,124 samples, 0.16%)</title><rect x="26.4849%" y="165" width="0.1634%" height="15" fill="rgb(249,31,29)"/><text x="26.7349%" y="175.50"></text></g><g><title>codegen_fn_attrs (9,306,947 samples, 0.11%)</title><rect x="26.8887%" y="133" width="0.1077%" height="15" fill="rgb(225,111,53)"/><text x="27.1387%" y="143.50"></text></g><g><title>check_mod_attrs (29,788,259 samples, 0.34%)</title><rect x="26.6516%" y="149" width="0.3448%" height="15" fill="rgb(238,160,17)"/><text x="26.9016%" y="159.50"></text></g><g><title>check_mod_const_bodies (8,863,190 samples, 0.10%)</title><rect x="26.9965%" y="149" width="0.1026%" height="15" fill="rgb(214,148,48)"/><text x="27.2465%" y="159.50"></text></g><g><title>lint_levels (24,431,763 samples, 0.28%)</title><rect x="27.3932%" y="133" width="0.2828%" height="15" fill="rgb(232,36,49)"/><text x="27.6432%" y="143.50"></text></g><g><title>lookup_deprecation_entry (12,888,689 samples, 0.15%)</title><rect x="27.6760%" y="133" width="0.1492%" height="15" fill="rgb(209,103,24)"/><text x="27.9260%" y="143.50"></text></g><g><title>stability_index (11,629,889 samples, 0.13%)</title><rect x="27.6906%" y="117" width="0.1346%" height="15" fill="rgb(229,88,8)"/><text x="27.9406%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (52,347,832 samples, 0.61%)</title><rect x="27.2220%" y="149" width="0.6060%" height="15" fill="rgb(213,181,19)"/><text x="27.4720%" y="159.50"></text></g><g><title>misc_checking_1 (104,260,503 samples, 1.21%)</title><rect x="26.6482%" y="165" width="1.2070%" height="15" fill="rgb(254,191,54)"/><text x="26.8982%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (41,051,188 samples, 0.48%)</title><rect x="27.8553%" y="149" width="0.4752%" height="15" fill="rgb(241,83,37)"/><text x="28.1053%" y="159.50"></text></g><g><title>check_mod_liveness (32,792,561 samples, 0.38%)</title><rect x="27.9509%" y="133" width="0.3796%" height="15" fill="rgb(233,36,39)"/><text x="28.2009%" y="143.50"></text></g><g><title>misc_checking_2 (80,182,395 samples, 0.93%)</title><rect x="27.8552%" y="165" width="0.9282%" height="15" fill="rgb(226,3,54)"/><text x="28.1052%" y="175.50"></text></g><g><title>match_checking (39,126,507 samples, 0.45%)</title><rect x="28.3305%" y="149" width="0.4530%" height="15" fill="rgb(245,192,40)"/><text x="28.5805%" y="159.50"></text></g><g><title>check_match (37,233,828 samples, 0.43%)</title><rect x="28.3524%" y="133" width="0.4310%" height="15" fill="rgb(238,167,29)"/><text x="28.6024%" y="143.50"></text></g><g><title>check_private_in_public (23,044,787 samples, 0.27%)</title><rect x="28.7838%" y="149" width="0.2668%" height="15" fill="rgb(232,182,51)"/><text x="29.0338%" y="159.50"></text></g><g><title>death_checking (31,441,032 samples, 0.36%)</title><rect x="29.0506%" y="149" width="0.3640%" height="15" fill="rgb(231,60,39)"/><text x="29.3006%" y="159.50"></text></g><g><title>param_env (11,653,921 samples, 0.13%)</title><rect x="29.8691%" y="117" width="0.1349%" height="15" fill="rgb(208,69,12)"/><text x="30.1191%" y="127.50"></text></g><g><title>crate_lints (52,238,003 samples, 0.60%)</title><rect x="29.4146%" y="133" width="0.6047%" height="15" fill="rgb(235,93,37)"/><text x="29.6646%" y="143.50"></text></g><g><title>lint_checking (107,812,143 samples, 1.25%)</title><rect x="29.4146%" y="149" width="1.2481%" height="15" fill="rgb(213,116,39)"/><text x="29.6646%" y="159.50"></text></g><g><title>module_lints (55,570,250 samples, 0.64%)</title><rect x="30.0193%" y="133" width="0.6433%" height="15" fill="rgb(222,207,29)"/><text x="30.2693%" y="143.50"></text></g><g><title>lint_mod (55,476,827 samples, 0.64%)</title><rect x="30.0204%" y="117" width="0.6422%" height="15" fill="rgb(206,96,30)"/><text x="30.2704%" y="127.50"></text></g><g><title>privacy_access_levels (44,210,484 samples, 0.51%)</title><rect x="30.6627%" y="149" width="0.5118%" height="15" fill="rgb(218,138,4)"/><text x="30.9127%" y="159.50"></text></g><g><title>privacy_checking_modules (107,496,359 samples, 1.24%)</title><rect x="31.1745%" y="149" width="1.2444%" height="15" fill="rgb(250,191,14)"/><text x="31.4245%" y="159.50"></text></g><g><title>check_mod_privacy (107,387,117 samples, 1.24%)</title><rect x="31.1757%" y="133" width="1.2432%" height="15" fill="rgb(239,60,40)"/><text x="31.4257%" y="143.50"></text></g><g><title>misc_checking_3 (314,779,923 samples, 3.64%)</title><rect x="28.7835%" y="165" width="3.6441%" height="15" fill="rgb(206,27,48)"/><text x="29.0335%" y="175.50">misc..</text></g><g><title>coherent_trait (44,654,399 samples, 0.52%)</title><rect x="32.4961%" y="133" width="0.5169%" height="15" fill="rgb(225,35,8)"/><text x="32.7461%" y="143.50"></text></g><g><title>specialization_graph_of (41,944,327 samples, 0.49%)</title><rect x="32.5274%" y="117" width="0.4856%" height="15" fill="rgb(250,213,24)"/><text x="32.7774%" y="127.50"></text></g><g><title>coherence_checking (47,002,135 samples, 0.54%)</title><rect x="32.4951%" y="149" width="0.5441%" height="15" fill="rgb(247,123,22)"/><text x="32.7451%" y="159.50"></text></g><g><title>dropck_outlives (58,696,495 samples, 0.68%)</title><rect x="65.4969%" y="101" width="0.6795%" height="15" fill="rgb(231,138,38)"/><text x="65.7469%" y="111.50"></text></g><g><title>normalize_projection_ty (24,084,341 samples, 0.28%)</title><rect x="65.8975%" y="85" width="0.2788%" height="15" fill="rgb(231,145,46)"/><text x="66.1475%" y="95.50"></text></g><g><title>evaluate_obligation (78,181,090 samples, 0.91%)</title><rect x="66.1764%" y="101" width="0.9051%" height="15" fill="rgb(251,118,11)"/><text x="66.4264%" y="111.50"></text></g><g><title>evaluate_obligation (27,088,778 samples, 0.31%)</title><rect x="67.3156%" y="85" width="0.3136%" height="15" fill="rgb(217,147,25)"/><text x="67.5656%" y="95.50"></text></g><g><title>method_autoderef_steps (45,596,710 samples, 0.53%)</title><rect x="67.1015%" y="101" width="0.5279%" height="15" fill="rgb(247,81,37)"/><text x="67.3515%" y="111.50"></text></g><g><title>typeck (31,699,900 samples, 0.37%)</title><rect x="67.6506%" y="101" width="0.3670%" height="15" fill="rgb(209,12,38)"/><text x="67.9006%" y="111.50"></text></g><g><title>item_bodies_checking (3,017,562,176 samples, 34.93%)</title><rect x="33.0928%" y="149" width="34.9332%" height="15" fill="rgb(227,1,9)"/><text x="33.3428%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (3,017,557,736 samples, 34.93%)</title><rect x="33.0929%" y="133" width="34.9332%" height="15" fill="rgb(248,47,43)"/><text x="33.3429%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (3,011,907,905 samples, 34.87%)</title><rect x="33.1583%" y="117" width="34.8678%" height="15" fill="rgb(221,10,30)"/><text x="33.4083%" y="127.50">typeck</text></g><g><title>item_types_checking (261,224,085 samples, 3.02%)</title><rect x="68.0261%" y="149" width="3.0241%" height="15" fill="rgb(210,229,1)"/><text x="68.2761%" y="159.50">ite..</text></g><g><title>check_mod_item_types (261,117,594 samples, 3.02%)</title><rect x="68.0273%" y="133" width="3.0229%" height="15" fill="rgb(222,148,37)"/><text x="68.2773%" y="143.50">che..</text></g><g><title>fn_sig (13,785,051 samples, 0.16%)</title><rect x="71.2324%" y="117" width="0.1596%" height="15" fill="rgb(234,67,33)"/><text x="71.4824%" y="127.50"></text></g><g><title>generics_of (11,321,585 samples, 0.13%)</title><rect x="71.3920%" y="117" width="0.1311%" height="15" fill="rgb(247,98,35)"/><text x="71.6420%" y="127.50"></text></g><g><title>late_bound_vars_map (22,470,844 samples, 0.26%)</title><rect x="71.9835%" y="69" width="0.2601%" height="15" fill="rgb(247,138,52)"/><text x="72.2335%" y="79.50"></text></g><g><title>resolve_lifetimes (21,616,213 samples, 0.25%)</title><rect x="71.9933%" y="53" width="0.2502%" height="15" fill="rgb(213,79,30)"/><text x="72.2433%" y="63.50"></text></g><g><title>explicit_predicates_of (53,889,156 samples, 0.62%)</title><rect x="71.6365%" y="85" width="0.6239%" height="15" fill="rgb(246,177,23)"/><text x="71.8865%" y="95.50"></text></g><g><title>predicates_of (63,945,999 samples, 0.74%)</title><rect x="71.5595%" y="117" width="0.7403%" height="15" fill="rgb(230,62,27)"/><text x="71.8095%" y="127.50"></text></g><g><title>predicates_defined_on (61,195,062 samples, 0.71%)</title><rect x="71.5913%" y="101" width="0.7084%" height="15" fill="rgb(216,154,8)"/><text x="71.8413%" y="111.50"></text></g><g><title>type_collecting (136,672,325 samples, 1.58%)</title><rect x="71.0514%" y="149" width="1.5822%" height="15" fill="rgb(244,35,45)"/><text x="71.3014%" y="159.50"></text></g><g><title>collect_mod_item_types (136,551,034 samples, 1.58%)</title><rect x="71.0528%" y="133" width="1.5808%" height="15" fill="rgb(251,115,12)"/><text x="71.3028%" y="143.50"></text></g><g><title>type_of (28,447,805 samples, 0.33%)</title><rect x="72.3042%" y="117" width="0.3293%" height="15" fill="rgb(240,54,50)"/><text x="72.5542%" y="127.50"></text></g><g><title>type_param_predicates (15,009,555 samples, 0.17%)</title><rect x="72.4598%" y="101" width="0.1738%" height="15" fill="rgb(233,84,52)"/><text x="72.7098%" y="111.50"></text></g><g><title>type_param_predicates (13,104,717 samples, 0.15%)</title><rect x="72.4819%" y="85" width="0.1517%" height="15" fill="rgb(207,117,47)"/><text x="72.7319%" y="95.50"></text></g><g><title>evaluate_obligation (16,220,347 samples, 0.19%)</title><rect x="76.2768%" y="117" width="0.1878%" height="15" fill="rgb(249,43,39)"/><text x="76.5268%" y="127.50"></text></g><g><title>implied_outlives_bounds (28,666,068 samples, 0.33%)</title><rect x="76.4821%" y="117" width="0.3319%" height="15" fill="rgb(209,38,44)"/><text x="76.7321%" y="127.50"></text></g><g><title>param_env (32,554,464 samples, 0.38%)</title><rect x="76.8140%" y="117" width="0.3769%" height="15" fill="rgb(236,212,23)"/><text x="77.0640%" y="127.50"></text></g><g><title>region_scope_tree (24,062,852 samples, 0.28%)</title><rect x="77.1917%" y="117" width="0.2786%" height="15" fill="rgb(242,79,21)"/><text x="77.4417%" y="127.50"></text></g><g><title>check_impl_item_well_formed (404,880,045 samples, 4.69%)</title><rect x="72.7837%" y="133" width="4.6872%" height="15" fill="rgb(211,96,35)"/><text x="73.0337%" y="143.50">check..</text></g><g><title>implied_outlives_bounds (13,828,462 samples, 0.16%)</title><rect x="83.3577%" y="117" width="0.1601%" height="15" fill="rgb(253,215,40)"/><text x="83.6077%" y="127.50"></text></g><g><title>param_env (31,832,839 samples, 0.37%)</title><rect x="83.5191%" y="117" width="0.3685%" height="15" fill="rgb(211,81,21)"/><text x="83.7691%" y="127.50"></text></g><g><title>check_item_well_formed (560,064,815 samples, 6.48%)</title><rect x="77.4709%" y="133" width="6.4837%" height="15" fill="rgb(208,190,38)"/><text x="77.7209%" y="143.50">check_it..</text></g><g><title>analysis (7,257,638,694 samples, 84.02%)</title><rect x="0.1192%" y="181" width="84.0191%" height="15" fill="rgb(235,213,38)"/><text x="0.3692%" y="191.50">analysis</text></g><g><title>type_check_crate (4,466,817,220 samples, 51.71%)</title><rect x="32.4276%" y="165" width="51.7108%" height="15" fill="rgb(237,122,38)"/><text x="32.6776%" y="175.50">type_check_crate</text></g><g><title>wf_checking (993,366,126 samples, 11.50%)</title><rect x="72.6385%" y="149" width="11.4998%" height="15" fill="rgb(244,218,35)"/><text x="72.8885%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (15,873,066 samples, 0.18%)</title><rect x="83.9546%" y="133" width="0.1838%" height="15" fill="rgb(240,68,47)"/><text x="84.2046%" y="143.50"></text></g><g><title>AST_validation (12,783,553 samples, 0.15%)</title><rect x="84.1465%" y="165" width="0.1480%" height="15" fill="rgb(210,16,53)"/><text x="84.3965%" y="175.50"></text></g><g><title>complete_gated_feature_checking (8,826,459 samples, 0.10%)</title><rect x="84.2945%" y="165" width="0.1022%" height="15" fill="rgb(235,124,12)"/><text x="84.5445%" y="175.50"></text></g><g><title>macro_expand_crate (659,374,349 samples, 7.63%)</title><rect x="84.3974%" y="165" width="7.6333%" height="15" fill="rgb(224,169,11)"/><text x="84.6474%" y="175.50">macro_expa..</text></g><g><title>expand_crate (659,357,209 samples, 7.63%)</title><rect x="84.3976%" y="149" width="7.6331%" height="15" fill="rgb(250,166,2)"/><text x="84.6476%" y="159.50">expand_cra..</text></g><g><title>late_resolve_crate (107,343,468 samples, 1.24%)</title><rect x="92.1009%" y="149" width="1.2427%" height="15" fill="rgb(242,216,29)"/><text x="92.3509%" y="159.50"></text></g><g><title>configure_and_expand (810,399,135 samples, 9.38%)</title><rect x="84.1440%" y="181" width="9.3817%" height="15" fill="rgb(230,116,27)"/><text x="84.3940%" y="191.50">configure_and..</text></g><g><title>resolve_crate (128,879,088 samples, 1.49%)</title><rect x="92.0337%" y="165" width="1.4920%" height="15" fill="rgb(228,99,48)"/><text x="92.2837%" y="175.50"></text></g><g><title>drop_ast (24,867,647 samples, 0.29%)</title><rect x="93.5257%" y="181" width="0.2879%" height="15" fill="rgb(253,11,6)"/><text x="93.7757%" y="191.50"></text></g><g><title>early_lint_checks (31,729,914 samples, 0.37%)</title><rect x="93.8139%" y="181" width="0.3673%" height="15" fill="rgb(247,143,39)"/><text x="94.0639%" y="191.50"></text></g><g><title>free_global_ctxt (39,506,472 samples, 0.46%)</title><rect x="94.1812%" y="181" width="0.4574%" height="15" fill="rgb(236,97,10)"/><text x="94.4312%" y="191.50"></text></g><g><title>mir_for_ctfe (12,701,736 samples, 0.15%)</title><rect x="95.8588%" y="165" width="0.1470%" height="15" fill="rgb(233,208,19)"/><text x="96.1088%" y="175.50"></text></g><g><title>generate_crate_metadata (123,134,664 samples, 1.43%)</title><rect x="94.6385%" y="181" width="1.4255%" height="15" fill="rgb(216,164,2)"/><text x="94.8885%" y="191.50"></text></g><g><title>hir_lowering (320,026,702 samples, 3.70%)</title><rect x="96.0640%" y="181" width="3.7048%" height="15" fill="rgb(220,129,5)"/><text x="96.3140%" y="191.50">hir_..</text></g><g><title>self_profile_alloc_query_strings (11,602,039 samples, 0.13%)</title><rect x="99.7963%" y="181" width="0.1343%" height="15" fill="rgb(242,17,10)"/><text x="100.0463%" y="191.50"></text></g><g><title>all (8,638,082,091 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (8,638,082,091 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>