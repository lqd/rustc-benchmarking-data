<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (2,316,768 samples, 0.11%)</title><rect x="21.7945%" y="85" width="0.1071%" height="15" fill="rgb(227,0,7)"/><text x="22.0445%" y="95.50"></text></g><g><title>is_copy_raw (11,452,192 samples, 0.53%)</title><rect x="26.1319%" y="53" width="0.5294%" height="15" fill="rgb(217,0,24)"/><text x="26.3819%" y="63.50"></text></g><g><title>evaluate_obligation (9,289,350 samples, 0.43%)</title><rect x="26.2319%" y="37" width="0.4294%" height="15" fill="rgb(221,193,54)"/><text x="26.4819%" y="47.50"></text></g><g><title>needs_drop_raw (14,724,120 samples, 0.68%)</title><rect x="25.9810%" y="69" width="0.6806%" height="15" fill="rgb(248,212,6)"/><text x="26.2310%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (5,523,877 samples, 0.26%)</title><rect x="26.8139%" y="53" width="0.2554%" height="15" fill="rgb(208,68,35)"/><text x="27.0639%" y="63.50"></text></g><g><title>resolve_instance (10,236,139 samples, 0.47%)</title><rect x="26.6637%" y="69" width="0.4732%" height="15" fill="rgb(232,128,0)"/><text x="26.9137%" y="79.50"></text></g><g><title>thir_body (35,582,510 samples, 1.64%)</title><rect x="27.1601%" y="69" width="1.6449%" height="15" fill="rgb(207,160,47)"/><text x="27.4101%" y="79.50"></text></g><g><title>mir_const (187,074,194 samples, 8.65%)</title><rect x="20.1775%" y="117" width="8.6478%" height="15" fill="rgb(228,23,34)"/><text x="20.4275%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (165,214,692 samples, 7.64%)</title><rect x="21.1880%" y="101" width="7.6373%" height="15" fill="rgb(218,30,26)"/><text x="21.4380%" y="111.50">unsafety_c..</text></g><g><title>mir_built (149,772,857 samples, 6.92%)</title><rect x="21.9018%" y="85" width="6.9235%" height="15" fill="rgb(220,122,19)"/><text x="22.1518%" y="95.50">mir_built</text></g><g><title>mir_const (2,717,790 samples, 0.13%)</title><rect x="28.9013%" y="101" width="0.1256%" height="15" fill="rgb(250,228,42)"/><text x="29.1513%" y="111.50"></text></g><g><title>mir_const_qualif (4,363,620 samples, 0.20%)</title><rect x="28.8253%" y="117" width="0.2017%" height="15" fill="rgb(240,193,28)"/><text x="29.0753%" y="127.50"></text></g><g><title>mir_promoted (213,063,089 samples, 9.85%)</title><rect x="19.1779%" y="133" width="9.8492%" height="15" fill="rgb(216,20,37)"/><text x="19.4279%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (8,818,996 samples, 0.41%)</title><rect x="29.0286%" y="133" width="0.4077%" height="15" fill="rgb(206,188,39)"/><text x="29.2786%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (20,996,260 samples, 0.97%)</title><rect x="29.4363%" y="133" width="0.9706%" height="15" fill="rgb(217,207,13)"/><text x="29.6863%" y="143.50"></text></g><g><title>normalize_projection_ty (13,915,205 samples, 0.64%)</title><rect x="29.7636%" y="117" width="0.6433%" height="15" fill="rgb(231,73,38)"/><text x="30.0136%" y="127.50"></text></g><g><title>type_op_normalize_predicate (3,244,995 samples, 0.15%)</title><rect x="30.4078%" y="133" width="0.1500%" height="15" fill="rgb(225,20,46)"/><text x="30.6578%" y="143.50"></text></g><g><title>type_op_prove_predicate (45,945,488 samples, 2.12%)</title><rect x="30.6064%" y="133" width="2.1239%" height="15" fill="rgb(210,31,41)"/><text x="30.8564%" y="143.50">t..</text></g><g><title>evaluate_obligation (2,540,948 samples, 0.12%)</title><rect x="32.6128%" y="117" width="0.1175%" height="15" fill="rgb(221,200,47)"/><text x="32.8628%" y="127.50"></text></g><g><title>MIR_borrow_checking (695,708,417 samples, 32.16%)</title><rect x="0.5711%" y="165" width="32.1603%" height="15" fill="rgb(226,26,5)"/><text x="0.8211%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (693,433,521 samples, 32.06%)</title><rect x="0.6762%" y="149" width="32.0551%" height="15" fill="rgb(249,33,26)"/><text x="0.9262%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,224,215 samples, 0.10%)</title><rect x="32.7313%" y="165" width="0.1028%" height="15" fill="rgb(235,183,28)"/><text x="32.9813%" y="175.50"></text></g><g><title>hir_module_items (3,385,357 samples, 0.16%)</title><rect x="32.8342%" y="165" width="0.1565%" height="15" fill="rgb(221,5,38)"/><text x="33.0842%" y="175.50"></text></g><g><title>codegen_fn_attrs (2,979,524 samples, 0.14%)</title><rect x="33.2237%" y="133" width="0.1377%" height="15" fill="rgb(247,18,42)"/><text x="33.4737%" y="143.50"></text></g><g><title>check_mod_attrs (7,934,386 samples, 0.37%)</title><rect x="32.9947%" y="149" width="0.3668%" height="15" fill="rgb(241,131,45)"/><text x="33.2447%" y="159.50"></text></g><g><title>check_mod_const_bodies (2,281,895 samples, 0.11%)</title><rect x="33.3614%" y="149" width="0.1055%" height="15" fill="rgb(249,31,29)"/><text x="33.6114%" y="159.50"></text></g><g><title>check_mod_loops (2,477,190 samples, 0.11%)</title><rect x="33.4669%" y="149" width="0.1145%" height="15" fill="rgb(225,111,53)"/><text x="33.7169%" y="159.50"></text></g><g><title>lookup_deprecation_entry (2,656,959 samples, 0.12%)</title><rect x="33.6883%" y="133" width="0.1228%" height="15" fill="rgb(238,160,17)"/><text x="33.9383%" y="143.50"></text></g><g><title>stability_index (2,518,738 samples, 0.12%)</title><rect x="33.6947%" y="117" width="0.1164%" height="15" fill="rgb(214,148,48)"/><text x="33.9447%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (4,998,087 samples, 0.23%)</title><rect x="33.5899%" y="149" width="0.2310%" height="15" fill="rgb(232,36,49)"/><text x="33.8399%" y="159.50"></text></g><g><title>misc_checking_1 (18,511,177 samples, 0.86%)</title><rect x="32.9907%" y="165" width="0.8557%" height="15" fill="rgb(209,103,24)"/><text x="33.2407%" y="175.50"></text></g><g><title>check_mod_intrinsics (2,429,485 samples, 0.11%)</title><rect x="33.8482%" y="133" width="0.1123%" height="15" fill="rgb(229,88,8)"/><text x="34.0982%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (14,880,076 samples, 0.69%)</title><rect x="33.8466%" y="149" width="0.6879%" height="15" fill="rgb(213,181,19)"/><text x="34.0966%" y="159.50"></text></g><g><title>check_mod_liveness (12,414,171 samples, 0.57%)</title><rect x="33.9605%" y="133" width="0.5739%" height="15" fill="rgb(254,191,54)"/><text x="34.2105%" y="143.50"></text></g><g><title>misc_checking_2 (30,727,283 samples, 1.42%)</title><rect x="33.8464%" y="165" width="1.4204%" height="15" fill="rgb(241,83,37)"/><text x="34.0964%" y="175.50"></text></g><g><title>match_checking (15,843,697 samples, 0.73%)</title><rect x="34.5344%" y="149" width="0.7324%" height="15" fill="rgb(233,36,39)"/><text x="34.7844%" y="159.50"></text></g><g><title>check_match (15,101,412 samples, 0.70%)</title><rect x="34.5687%" y="133" width="0.6981%" height="15" fill="rgb(226,3,54)"/><text x="34.8187%" y="143.50"></text></g><g><title>check_private_in_public (5,250,159 samples, 0.24%)</title><rect x="35.2679%" y="149" width="0.2427%" height="15" fill="rgb(245,192,40)"/><text x="35.5179%" y="159.50"></text></g><g><title>death_checking (9,434,335 samples, 0.44%)</title><rect x="35.5106%" y="149" width="0.4361%" height="15" fill="rgb(238,167,29)"/><text x="35.7606%" y="159.50"></text></g><g><title>param_env (3,242,604 samples, 0.15%)</title><rect x="36.4650%" y="117" width="0.1499%" height="15" fill="rgb(232,182,51)"/><text x="36.7150%" y="127.50"></text></g><g><title>crate_lints (16,692,306 samples, 0.77%)</title><rect x="35.9469%" y="133" width="0.7716%" height="15" fill="rgb(231,60,39)"/><text x="36.1969%" y="143.50"></text></g><g><title>lint_checking (32,743,036 samples, 1.51%)</title><rect x="35.9467%" y="149" width="1.5136%" height="15" fill="rgb(208,69,12)"/><text x="36.1967%" y="159.50"></text></g><g><title>module_lints (16,047,220 samples, 0.74%)</title><rect x="36.7185%" y="133" width="0.7418%" height="15" fill="rgb(235,93,37)"/><text x="36.9685%" y="143.50"></text></g><g><title>lint_mod (16,021,220 samples, 0.74%)</title><rect x="36.7197%" y="117" width="0.7406%" height="15" fill="rgb(213,116,39)"/><text x="36.9697%" y="127.50"></text></g><g><title>privacy_access_levels (7,904,819 samples, 0.37%)</title><rect x="37.4603%" y="149" width="0.3654%" height="15" fill="rgb(222,207,29)"/><text x="37.7103%" y="159.50"></text></g><g><title>privacy_checking_modules (25,081,330 samples, 1.16%)</title><rect x="37.8257%" y="149" width="1.1594%" height="15" fill="rgb(206,96,30)"/><text x="38.0757%" y="159.50"></text></g><g><title>check_mod_privacy (25,058,140 samples, 1.16%)</title><rect x="37.8268%" y="133" width="1.1584%" height="15" fill="rgb(218,138,4)"/><text x="38.0768%" y="143.50"></text></g><g><title>misc_checking_3 (80,575,711 samples, 3.72%)</title><rect x="35.2668%" y="165" width="3.7247%" height="15" fill="rgb(250,191,14)"/><text x="35.5168%" y="175.50">misc..</text></g><g><title>impl_parent (3,132,330 samples, 0.14%)</title><rect x="39.3603%" y="101" width="0.1448%" height="15" fill="rgb(239,60,40)"/><text x="39.6103%" y="111.50"></text></g><g><title>impl_trait_ref (6,215,306 samples, 0.29%)</title><rect x="39.5051%" y="101" width="0.2873%" height="15" fill="rgb(206,27,48)"/><text x="39.7551%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,030,058 samples, 0.23%)</title><rect x="39.5599%" y="85" width="0.2325%" height="15" fill="rgb(225,35,8)"/><text x="39.8099%" y="95.50"></text></g><g><title>coherent_trait (17,231,203 samples, 0.80%)</title><rect x="39.0623%" y="133" width="0.7965%" height="15" fill="rgb(250,213,24)"/><text x="39.3123%" y="143.50"></text></g><g><title>specialization_graph_of (16,422,063 samples, 0.76%)</title><rect x="39.0997%" y="117" width="0.7591%" height="15" fill="rgb(247,123,22)"/><text x="39.3497%" y="127.50"></text></g><g><title>coherence_checking (17,825,689 samples, 0.82%)</title><rect x="39.0607%" y="149" width="0.8240%" height="15" fill="rgb(231,138,38)"/><text x="39.3107%" y="159.50"></text></g><g><title>dropck_outlives (2,941,069 samples, 0.14%)</title><rect x="60.0732%" y="101" width="0.1360%" height="15" fill="rgb(231,145,46)"/><text x="60.3232%" y="111.50"></text></g><g><title>impl_trait_ref (2,524,963 samples, 0.12%)</title><rect x="61.3397%" y="85" width="0.1167%" height="15" fill="rgb(251,118,11)"/><text x="61.5897%" y="95.50"></text></g><g><title>specializes (3,883,222 samples, 0.18%)</title><rect x="61.5589%" y="85" width="0.1795%" height="15" fill="rgb(217,147,25)"/><text x="61.8089%" y="95.50"></text></g><g><title>param_env (2,259,597 samples, 0.10%)</title><rect x="61.6339%" y="69" width="0.1045%" height="15" fill="rgb(247,81,37)"/><text x="61.8839%" y="79.50"></text></g><g><title>evaluate_obligation (33,463,959 samples, 1.55%)</title><rect x="60.2246%" y="101" width="1.5469%" height="15" fill="rgb(209,12,38)"/><text x="60.4746%" y="111.50"></text></g><g><title>evaluate_obligation (2,595,755 samples, 0.12%)</title><rect x="62.0739%" y="85" width="0.1200%" height="15" fill="rgb(227,1,9)"/><text x="62.3239%" y="95.50"></text></g><g><title>method_autoderef_steps (5,582,074 samples, 0.26%)</title><rect x="61.9379%" y="101" width="0.2580%" height="15" fill="rgb(248,47,43)"/><text x="62.1879%" y="111.50"></text></g><g><title>dropck_outlives (2,632,980 samples, 0.12%)</title><rect x="76.9280%" y="85" width="0.1217%" height="15" fill="rgb(221,10,30)"/><text x="77.1780%" y="95.50"></text></g><g><title>evaluate_obligation (19,060,978 samples, 0.88%)</title><rect x="77.0498%" y="85" width="0.8811%" height="15" fill="rgb(210,229,1)"/><text x="77.2998%" y="95.50"></text></g><g><title>evaluate_obligation (2,359,201 samples, 0.11%)</title><rect x="78.2220%" y="69" width="0.1091%" height="15" fill="rgb(222,148,37)"/><text x="78.4720%" y="79.50"></text></g><g><title>method_autoderef_steps (5,395,766 samples, 0.25%)</title><rect x="78.0846%" y="85" width="0.2494%" height="15" fill="rgb(234,67,33)"/><text x="78.3346%" y="95.50"></text></g><g><title>typeck (347,222,545 samples, 16.05%)</title><rect x="62.3685%" y="101" width="16.0509%" height="15" fill="rgb(247,98,35)"/><text x="62.6185%" y="111.50">typeck</text></g><g><title>item_bodies_checking (833,450,966 samples, 38.53%)</title><rect x="39.9101%" y="149" width="38.5277%" height="15" fill="rgb(247,138,52)"/><text x="40.1601%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (833,447,166 samples, 38.53%)</title><rect x="39.9103%" y="133" width="38.5275%" height="15" fill="rgb(213,79,30)"/><text x="40.1603%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (831,090,738 samples, 38.42%)</title><rect x="40.0192%" y="117" width="38.4186%" height="15" fill="rgb(246,177,23)"/><text x="40.2692%" y="127.50">typeck</text></g><g><title>item_types_checking (11,549,530 samples, 0.53%)</title><rect x="78.4377%" y="149" width="0.5339%" height="15" fill="rgb(230,62,27)"/><text x="78.6877%" y="159.50"></text></g><g><title>check_mod_item_types (11,525,750 samples, 0.53%)</title><rect x="78.4388%" y="133" width="0.5328%" height="15" fill="rgb(216,154,8)"/><text x="78.6888%" y="143.50"></text></g><g><title>eval_to_const_value_raw (4,148,067 samples, 0.19%)</title><rect x="79.1779%" y="117" width="0.1918%" height="15" fill="rgb(244,35,45)"/><text x="79.4279%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,117,777 samples, 0.19%)</title><rect x="79.1793%" y="101" width="0.1904%" height="15" fill="rgb(251,115,12)"/><text x="79.4293%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,081,767 samples, 0.19%)</title><rect x="79.1810%" y="85" width="0.1887%" height="15" fill="rgb(240,54,50)"/><text x="79.4310%" y="95.50"></text></g><g><title>fn_sig (3,967,756 samples, 0.18%)</title><rect x="79.3697%" y="117" width="0.1834%" height="15" fill="rgb(233,84,52)"/><text x="79.6197%" y="127.50"></text></g><g><title>named_region_map (5,260,148 samples, 0.24%)</title><rect x="79.6340%" y="101" width="0.2432%" height="15" fill="rgb(207,117,47)"/><text x="79.8840%" y="111.50"></text></g><g><title>resolve_lifetimes (4,923,396 samples, 0.23%)</title><rect x="79.6496%" y="85" width="0.2276%" height="15" fill="rgb(249,43,39)"/><text x="79.8996%" y="95.50"></text></g><g><title>generics_of (7,156,371 samples, 0.33%)</title><rect x="79.5531%" y="117" width="0.3308%" height="15" fill="rgb(209,38,44)"/><text x="79.8031%" y="127.50"></text></g><g><title>lint_levels (4,820,934 samples, 0.22%)</title><rect x="79.9096%" y="53" width="0.2229%" height="15" fill="rgb(236,212,23)"/><text x="80.1596%" y="63.50"></text></g><g><title>explicit_item_bounds (4,985,356 samples, 0.23%)</title><rect x="79.9021%" y="101" width="0.2305%" height="15" fill="rgb(242,79,21)"/><text x="80.1521%" y="111.50"></text></g><g><title>late_bound_vars_map (4,962,886 samples, 0.23%)</title><rect x="79.9031%" y="85" width="0.2294%" height="15" fill="rgb(211,96,35)"/><text x="80.1531%" y="95.50"></text></g><g><title>resolve_lifetimes (4,959,466 samples, 0.23%)</title><rect x="79.9033%" y="69" width="0.2293%" height="15" fill="rgb(253,215,40)"/><text x="80.1533%" y="79.50"></text></g><g><title>item_bounds (5,078,047 samples, 0.23%)</title><rect x="79.8984%" y="117" width="0.2347%" height="15" fill="rgb(211,81,21)"/><text x="80.1484%" y="127.50"></text></g><g><title>explicit_predicates_of (2,703,658 samples, 0.12%)</title><rect x="80.2439%" y="85" width="0.1250%" height="15" fill="rgb(208,190,38)"/><text x="80.4939%" y="95.50"></text></g><g><title>predicates_of (7,213,737 samples, 0.33%)</title><rect x="80.1460%" y="117" width="0.3335%" height="15" fill="rgb(235,213,38)"/><text x="80.3960%" y="127.50"></text></g><g><title>predicates_defined_on (6,475,232 samples, 0.30%)</title><rect x="80.1801%" y="101" width="0.2993%" height="15" fill="rgb(237,122,38)"/><text x="80.4301%" y="111.50"></text></g><g><title>inferred_outlives_of (2,391,420 samples, 0.11%)</title><rect x="80.3689%" y="85" width="0.1105%" height="15" fill="rgb(244,218,35)"/><text x="80.6189%" y="95.50"></text></g><g><title>type_collecting (33,658,526 samples, 1.56%)</title><rect x="78.9729%" y="149" width="1.5559%" height="15" fill="rgb(240,68,47)"/><text x="79.2229%" y="159.50"></text></g><g><title>collect_mod_item_types (33,623,776 samples, 1.55%)</title><rect x="78.9745%" y="133" width="1.5543%" height="15" fill="rgb(210,16,53)"/><text x="79.2245%" y="143.50"></text></g><g><title>evaluate_obligation (4,368,119 samples, 0.20%)</title><rect x="81.7035%" y="117" width="0.2019%" height="15" fill="rgb(235,124,12)"/><text x="81.9535%" y="127.50"></text></g><g><title>param_env (3,665,409 samples, 0.17%)</title><rect x="81.9971%" y="117" width="0.1694%" height="15" fill="rgb(224,169,11)"/><text x="82.2471%" y="127.50"></text></g><g><title>region_scope_tree (6,164,928 samples, 0.28%)</title><rect x="82.1695%" y="117" width="0.2850%" height="15" fill="rgb(250,166,2)"/><text x="82.4195%" y="127.50"></text></g><g><title>check_impl_item_well_formed (38,133,038 samples, 1.76%)</title><rect x="80.6952%" y="133" width="1.7628%" height="15" fill="rgb(242,216,29)"/><text x="80.9452%" y="143.50"></text></g><g><title>evaluate_obligation (5,784,122 samples, 0.27%)</title><rect x="83.2302%" y="117" width="0.2674%" height="15" fill="rgb(230,116,27)"/><text x="83.4802%" y="127.50"></text></g><g><title>param_env (3,099,530 samples, 0.14%)</title><rect x="83.5706%" y="117" width="0.1433%" height="15" fill="rgb(228,99,48)"/><text x="83.8206%" y="127.50"></text></g><g><title>region_scope_tree (5,074,607 samples, 0.23%)</title><rect x="83.7198%" y="117" width="0.2346%" height="15" fill="rgb(253,11,6)"/><text x="83.9698%" y="127.50"></text></g><g><title>check_item_well_formed (33,032,049 samples, 1.53%)</title><rect x="82.4579%" y="133" width="1.5270%" height="15" fill="rgb(247,143,39)"/><text x="82.7079%" y="143.50"></text></g><g><title>analysis (1,812,285,319 samples, 83.78%)</title><rect x="0.3059%" y="181" width="83.7759%" height="15" fill="rgb(236,97,10)"/><text x="0.5559%" y="191.50">analysis</text></g><g><title>type_check_crate (975,416,604 samples, 45.09%)</title><rect x="38.9916%" y="165" width="45.0903%" height="15" fill="rgb(233,208,19)"/><text x="39.2416%" y="175.50">type_check_crate</text></g><g><title>wf_checking (76,696,117 samples, 3.55%)</title><rect x="80.5364%" y="149" width="3.5454%" height="15" fill="rgb(216,164,2)"/><text x="80.7864%" y="159.50">wf_c..</text></g><g><title>AST_validation (3,797,313 samples, 0.18%)</title><rect x="84.1092%" y="165" width="0.1755%" height="15" fill="rgb(220,129,5)"/><text x="84.3592%" y="175.50"></text></g><g><title>complete_gated_feature_checking (3,005,613 samples, 0.14%)</title><rect x="84.2848%" y="165" width="0.1389%" height="15" fill="rgb(242,17,10)"/><text x="84.5348%" y="175.50"></text></g><g><title>macro_expand_crate (170,467,855 samples, 7.88%)</title><rect x="84.4258%" y="165" width="7.8802%" height="15" fill="rgb(242,107,0)"/><text x="84.6758%" y="175.50">macro_expan..</text></g><g><title>expand_crate (170,453,865 samples, 7.88%)</title><rect x="84.4265%" y="149" width="7.8795%" height="15" fill="rgb(251,28,31)"/><text x="84.6765%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,968,023 samples, 0.14%)</title><rect x="92.1688%" y="133" width="0.1372%" height="15" fill="rgb(233,223,10)"/><text x="92.4188%" y="143.50"></text></g><g><title>finalize_macro_resolutions (3,165,196 samples, 0.15%)</title><rect x="92.3375%" y="149" width="0.1463%" height="15" fill="rgb(215,21,27)"/><text x="92.5875%" y="159.50"></text></g><g><title>late_resolve_crate (33,979,059 samples, 1.57%)</title><rect x="92.4838%" y="149" width="1.5707%" height="15" fill="rgb(232,23,21)"/><text x="92.7338%" y="159.50"></text></g><g><title>resolve_check_unused (2,527,159 samples, 0.12%)</title><rect x="94.0612%" y="149" width="0.1168%" height="15" fill="rgb(244,5,23)"/><text x="94.3112%" y="159.50"></text></g><g><title>resolve_postprocess (2,392,627 samples, 0.11%)</title><rect x="94.1781%" y="149" width="0.1106%" height="15" fill="rgb(226,81,46)"/><text x="94.4281%" y="159.50"></text></g><g><title>configure_and_expand (220,353,523 samples, 10.19%)</title><rect x="84.1025%" y="181" width="10.1862%" height="15" fill="rgb(247,70,30)"/><text x="84.3525%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (42,804,939 samples, 1.98%)</title><rect x="92.3100%" y="165" width="1.9787%" height="15" fill="rgb(212,68,19)"/><text x="92.5600%" y="175.50">r..</text></g><g><title>drop_ast (5,814,595 samples, 0.27%)</title><rect x="94.2887%" y="181" width="0.2688%" height="15" fill="rgb(240,187,13)"/><text x="94.5387%" y="191.50"></text></g><g><title>early_lint_checks (9,966,441 samples, 0.46%)</title><rect x="94.5586%" y="181" width="0.4607%" height="15" fill="rgb(223,113,26)"/><text x="94.8086%" y="191.50"></text></g><g><title>free_global_ctxt (18,067,842 samples, 0.84%)</title><rect x="95.0193%" y="181" width="0.8352%" height="15" fill="rgb(206,192,2)"/><text x="95.2693%" y="191.50"></text></g><g><title>generate_crate_metadata (14,702,025 samples, 0.68%)</title><rect x="95.8545%" y="181" width="0.6796%" height="15" fill="rgb(241,108,4)"/><text x="96.1045%" y="191.50"></text></g><g><title>hir_lowering (68,138,021 samples, 3.15%)</title><rect x="96.5342%" y="181" width="3.1498%" height="15" fill="rgb(247,173,49)"/><text x="96.7842%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (3,749,761 samples, 0.17%)</title><rect x="99.7703%" y="181" width="0.1733%" height="15" fill="rgb(224,114,35)"/><text x="100.0203%" y="191.50"></text></g><g><title>all (2,163,253,302 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,163,253,302 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>