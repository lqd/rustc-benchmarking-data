<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (24,920 samples, 0.13%)</title><rect x="7.7797%" y="165" width="0.1308%" height="15" fill="rgb(227,0,7)"/><text x="8.0297%" y="175.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (20,620 samples, 0.11%)</title><rect x="7.8023%" y="149" width="0.1082%" height="15" fill="rgb(217,0,24)"/><text x="8.0523%" y="159.50"></text></g><g><title>param_env (29,620 samples, 0.16%)</title><rect x="7.9105%" y="165" width="0.1554%" height="15" fill="rgb(221,193,54)"/><text x="8.1605%" y="175.50"></text></g><g><title>codegen_fn_attrs (27,010 samples, 0.14%)</title><rect x="8.4396%" y="149" width="0.1417%" height="15" fill="rgb(248,212,6)"/><text x="8.6896%" y="159.50"></text></g><g><title>is_copy_raw (87,772 samples, 0.46%)</title><rect x="9.7387%" y="133" width="0.4605%" height="15" fill="rgb(208,68,35)"/><text x="9.9887%" y="143.50"></text></g><g><title>evaluate_obligation (78,702 samples, 0.41%)</title><rect x="9.7863%" y="117" width="0.4129%" height="15" fill="rgb(232,128,0)"/><text x="10.0363%" y="127.50"></text></g><g><title>explicit_predicates_of (62,351 samples, 0.33%)</title><rect x="10.6791%" y="53" width="0.3272%" height="15" fill="rgb(207,160,47)"/><text x="10.9291%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (61,711 samples, 0.32%)</title><rect x="10.6825%" y="37" width="0.3238%" height="15" fill="rgb(228,23,34)"/><text x="10.9325%" y="47.50"></text></g><g><title>predicates_of (67,191 samples, 0.35%)</title><rect x="10.6586%" y="85" width="0.3525%" height="15" fill="rgb(218,30,26)"/><text x="10.9086%" y="95.50"></text></g><g><title>predicates_defined_on (64,791 samples, 0.34%)</title><rect x="10.6712%" y="69" width="0.3400%" height="15" fill="rgb(220,122,19)"/><text x="10.9212%" y="79.50"></text></g><g><title>needs_drop_raw (193,952 samples, 1.02%)</title><rect x="10.1992%" y="133" width="1.0177%" height="15" fill="rgb(250,228,42)"/><text x="10.4492%" y="143.50"></text></g><g><title>is_copy_raw (182,102 samples, 0.96%)</title><rect x="10.2614%" y="117" width="0.9555%" height="15" fill="rgb(240,193,28)"/><text x="10.5114%" y="127.50"></text></g><g><title>evaluate_obligation (166,282 samples, 0.87%)</title><rect x="10.3444%" y="101" width="0.8725%" height="15" fill="rgb(216,20,37)"/><text x="10.5944%" y="111.50"></text></g><g><title>trait_impls_of (37,900 samples, 0.20%)</title><rect x="11.0180%" y="85" width="0.1989%" height="15" fill="rgb(206,188,39)"/><text x="11.2680%" y="95.50"></text></g><g><title>resolve_instance (35,501 samples, 0.19%)</title><rect x="11.2169%" y="133" width="0.1863%" height="15" fill="rgb(217,207,13)"/><text x="11.4669%" y="143.50"></text></g><g><title>thir_body (56,940 samples, 0.30%)</title><rect x="11.4140%" y="133" width="0.2988%" height="15" fill="rgb(231,73,38)"/><text x="11.6640%" y="143.50"></text></g><g><title>mir_const (841,249 samples, 4.41%)</title><rect x="7.3261%" y="181" width="4.4140%" height="15" fill="rgb(225,20,46)"/><text x="7.5761%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (700,257 samples, 3.67%)</title><rect x="8.0659%" y="165" width="3.6742%" height="15" fill="rgb(210,31,41)"/><text x="8.3159%" y="175.50">unsa..</text></g><g><title>mir_built (602,016 samples, 3.16%)</title><rect x="8.5814%" y="149" width="3.1587%" height="15" fill="rgb(221,200,47)"/><text x="8.8314%" y="159.50">mir..</text></g><g><title>mir_promoted (931,321 samples, 4.89%)</title><rect x="6.8813%" y="197" width="4.8866%" height="15" fill="rgb(226,26,5)"/><text x="7.1313%" y="207.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (83,811 samples, 0.44%)</title><rect x="11.7679%" y="197" width="0.4398%" height="15" fill="rgb(249,33,26)"/><text x="12.0179%" y="207.50"></text></g><g><title>MIR_borrow_checking (1,932,162 samples, 10.14%)</title><rect x="2.6221%" y="229" width="10.1379%" height="15" fill="rgb(235,183,28)"/><text x="2.8721%" y="239.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (1,926,442 samples, 10.11%)</title><rect x="2.6521%" y="213" width="10.1079%" height="15" fill="rgb(221,5,38)"/><text x="2.9021%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (105,271 samples, 0.55%)</title><rect x="12.2077%" y="197" width="0.5524%" height="15" fill="rgb(247,18,42)"/><text x="12.4577%" y="207.50"></text></g><g><title>hir_module_items (74,731 samples, 0.39%)</title><rect x="12.7802%" y="229" width="0.3921%" height="15" fill="rgb(241,131,45)"/><text x="13.0302%" y="239.50"></text></g><g><title>get_lang_items (30,641 samples, 0.16%)</title><rect x="13.8152%" y="181" width="0.1608%" height="15" fill="rgb(249,31,29)"/><text x="14.0652%" y="191.50"></text></g><g><title>associated_item (22,760 samples, 0.12%)</title><rect x="14.0192%" y="165" width="0.1194%" height="15" fill="rgb(225,111,53)"/><text x="14.2692%" y="175.50"></text></g><g><title>should_inherit_track_caller (32,510 samples, 0.17%)</title><rect x="13.9760%" y="181" width="0.1706%" height="15" fill="rgb(238,160,17)"/><text x="14.2260%" y="191.50"></text></g><g><title>codegen_fn_attrs (120,171 samples, 0.63%)</title><rect x="13.6239%" y="197" width="0.6305%" height="15" fill="rgb(214,148,48)"/><text x="13.8739%" y="207.50"></text></g><g><title>supported_target_features (20,550 samples, 0.11%)</title><rect x="14.1466%" y="181" width="0.1078%" height="15" fill="rgb(232,36,49)"/><text x="14.3966%" y="191.50"></text></g><g><title>check_mod_attrs (184,502 samples, 0.97%)</title><rect x="13.2869%" y="213" width="0.9681%" height="15" fill="rgb(209,103,24)"/><text x="13.5369%" y="223.50"></text></g><g><title>check_mod_const_bodies (27,450 samples, 0.14%)</title><rect x="14.2549%" y="213" width="0.1440%" height="15" fill="rgb(229,88,8)"/><text x="14.5049%" y="223.50"></text></g><g><title>lookup_deprecation_entry (49,041 samples, 0.26%)</title><rect x="14.7186%" y="197" width="0.2573%" height="15" fill="rgb(213,181,19)"/><text x="14.9686%" y="207.50"></text></g><g><title>stability_index (20,470 samples, 0.11%)</title><rect x="14.8685%" y="181" width="0.1074%" height="15" fill="rgb(254,191,54)"/><text x="15.1185%" y="191.50"></text></g><g><title>lookup_stability (23,990 samples, 0.13%)</title><rect x="14.9759%" y="197" width="0.1259%" height="15" fill="rgb(241,83,37)"/><text x="15.2259%" y="207.50"></text></g><g><title>metadata_decode_entry_lookup_stability (20,700 samples, 0.11%)</title><rect x="14.9931%" y="181" width="0.1086%" height="15" fill="rgb(233,36,39)"/><text x="15.2431%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (121,082 samples, 0.64%)</title><rect x="14.5109%" y="213" width="0.6353%" height="15" fill="rgb(226,3,54)"/><text x="14.7609%" y="223.50"></text></g><g><title>looking_for_derive_registrar (28,970 samples, 0.15%)</title><rect x="15.1515%" y="213" width="0.1520%" height="15" fill="rgb(245,192,40)"/><text x="15.4015%" y="223.50"></text></g><g><title>misc_checking_1 (408,824 samples, 2.15%)</title><rect x="13.1742%" y="229" width="2.1451%" height="15" fill="rgb(238,167,29)"/><text x="13.4242%" y="239.50">m..</text></g><g><title>liveness_and_intrinsic_checking (69,450 samples, 0.36%)</title><rect x="15.3259%" y="213" width="0.3644%" height="15" fill="rgb(232,182,51)"/><text x="15.5759%" y="223.50"></text></g><g><title>check_mod_liveness (52,430 samples, 0.28%)</title><rect x="15.4152%" y="197" width="0.2751%" height="15" fill="rgb(231,60,39)"/><text x="15.6652%" y="207.50"></text></g><g><title>misc_checking_2 (142,091 samples, 0.75%)</title><rect x="15.3192%" y="229" width="0.7455%" height="15" fill="rgb(208,69,12)"/><text x="15.5692%" y="239.50"></text></g><g><title>match_checking (71,381 samples, 0.37%)</title><rect x="15.6903%" y="213" width="0.3745%" height="15" fill="rgb(235,93,37)"/><text x="15.9403%" y="223.50"></text></g><g><title>check_match (68,821 samples, 0.36%)</title><rect x="15.7037%" y="197" width="0.3611%" height="15" fill="rgb(213,116,39)"/><text x="15.9537%" y="207.50"></text></g><g><title>check_private_in_public (37,841 samples, 0.20%)</title><rect x="16.0986%" y="213" width="0.1985%" height="15" fill="rgb(222,207,29)"/><text x="16.3486%" y="223.50"></text></g><g><title>codegen_fn_attrs (19,060 samples, 0.10%)</title><rect x="16.5836%" y="197" width="0.1000%" height="15" fill="rgb(206,96,30)"/><text x="16.8336%" y="207.50"></text></g><g><title>death_checking (76,580 samples, 0.40%)</title><rect x="16.2972%" y="213" width="0.4018%" height="15" fill="rgb(218,138,4)"/><text x="16.5472%" y="223.50"></text></g><g><title>explicit_predicates_of (25,070 samples, 0.13%)</title><rect x="18.4879%" y="133" width="0.1315%" height="15" fill="rgb(250,191,14)"/><text x="18.7379%" y="143.50"></text></g><g><title>param_env (107,422 samples, 0.56%)</title><rect x="18.0671%" y="181" width="0.5636%" height="15" fill="rgb(239,60,40)"/><text x="18.3171%" y="191.50"></text></g><g><title>predicates_of (49,140 samples, 0.26%)</title><rect x="18.3729%" y="165" width="0.2578%" height="15" fill="rgb(206,27,48)"/><text x="18.6229%" y="175.50"></text></g><g><title>predicates_defined_on (41,980 samples, 0.22%)</title><rect x="18.4105%" y="149" width="0.2203%" height="15" fill="rgb(225,35,8)"/><text x="18.6605%" y="159.50"></text></g><g><title>crate_lints (1,413,645 samples, 7.42%)</title><rect x="16.7065%" y="197" width="7.4173%" height="15" fill="rgb(250,213,24)"/><text x="16.9565%" y="207.50">crate_lints</text></g><g><title>type_of (1,046,900 samples, 5.49%)</title><rect x="18.6308%" y="181" width="5.4930%" height="15" fill="rgb(247,123,22)"/><text x="18.8808%" y="191.50">type_of</text></g><g><title>metadata_decode_entry_type_of (943,048 samples, 4.95%)</title><rect x="19.1757%" y="165" width="4.9481%" height="15" fill="rgb(231,138,38)"/><text x="19.4257%" y="175.50">metada..</text></g><g><title>lint_checking (1,479,996 samples, 7.77%)</title><rect x="16.6990%" y="213" width="7.7654%" height="15" fill="rgb(231,145,46)"/><text x="16.9490%" y="223.50">lint_checki..</text></g><g><title>module_lints (64,921 samples, 0.34%)</title><rect x="24.1238%" y="197" width="0.3406%" height="15" fill="rgb(251,118,11)"/><text x="24.3738%" y="207.50"></text></g><g><title>lint_mod (61,381 samples, 0.32%)</title><rect x="24.1424%" y="181" width="0.3221%" height="15" fill="rgb(217,147,25)"/><text x="24.3924%" y="191.50"></text></g><g><title>privacy_access_levels (50,930 samples, 0.27%)</title><rect x="24.4644%" y="213" width="0.2672%" height="15" fill="rgb(247,81,37)"/><text x="24.7144%" y="223.50"></text></g><g><title>privacy_checking_modules (63,891 samples, 0.34%)</title><rect x="24.7317%" y="213" width="0.3352%" height="15" fill="rgb(209,12,38)"/><text x="24.9817%" y="223.50"></text></g><g><title>check_mod_privacy (61,761 samples, 0.32%)</title><rect x="24.7428%" y="197" width="0.3241%" height="15" fill="rgb(227,1,9)"/><text x="24.9928%" y="207.50"></text></g><g><title>misc_checking_3 (1,724,339 samples, 9.05%)</title><rect x="16.0648%" y="229" width="9.0475%" height="15" fill="rgb(248,47,43)"/><text x="16.3148%" y="239.50">misc_checking..</text></g><g><title>coherent_trait (49,880 samples, 0.26%)</title><rect x="25.3009%" y="197" width="0.2617%" height="15" fill="rgb(221,10,30)"/><text x="25.5509%" y="207.50"></text></g><g><title>specialization_graph_of (45,370 samples, 0.24%)</title><rect x="25.3246%" y="181" width="0.2381%" height="15" fill="rgb(210,229,1)"/><text x="25.5746%" y="191.50"></text></g><g><title>coherence_checking (92,981 samples, 0.49%)</title><rect x="25.2319%" y="213" width="0.4879%" height="15" fill="rgb(222,148,37)"/><text x="25.4819%" y="223.50"></text></g><g><title>adt_def (35,960 samples, 0.19%)</title><rect x="33.7426%" y="149" width="0.1887%" height="15" fill="rgb(234,67,33)"/><text x="33.9926%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (34,890 samples, 0.18%)</title><rect x="33.7482%" y="133" width="0.1831%" height="15" fill="rgb(247,98,35)"/><text x="33.9982%" y="143.50"></text></g><g><title>item_attrs (20,610 samples, 0.11%)</title><rect x="33.8231%" y="117" width="0.1081%" height="15" fill="rgb(247,138,52)"/><text x="34.0731%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (19,340 samples, 0.10%)</title><rect x="33.8298%" y="101" width="0.1015%" height="15" fill="rgb(213,79,30)"/><text x="34.0798%" y="111.50"></text></g><g><title>adt_sized_constraint (47,110 samples, 0.25%)</title><rect x="33.7069%" y="165" width="0.2472%" height="15" fill="rgb(246,177,23)"/><text x="33.9569%" y="175.50"></text></g><g><title>associated_item (48,331 samples, 0.25%)</title><rect x="34.0637%" y="149" width="0.2536%" height="15" fill="rgb(230,62,27)"/><text x="34.3137%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (39,361 samples, 0.21%)</title><rect x="34.1107%" y="133" width="0.2065%" height="15" fill="rgb(216,154,8)"/><text x="34.3607%" y="143.50"></text></g><g><title>associated_items (79,851 samples, 0.42%)</title><rect x="33.9541%" y="165" width="0.4190%" height="15" fill="rgb(244,35,45)"/><text x="34.2041%" y="175.50"></text></g><g><title>adt_def (24,961 samples, 0.13%)</title><rect x="34.9291%" y="101" width="0.1310%" height="15" fill="rgb(251,115,12)"/><text x="35.1791%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (24,731 samples, 0.13%)</title><rect x="34.9303%" y="85" width="0.1298%" height="15" fill="rgb(240,54,50)"/><text x="35.1803%" y="95.50"></text></g><g><title>item_attrs (23,381 samples, 0.12%)</title><rect x="34.9373%" y="69" width="0.1227%" height="15" fill="rgb(233,84,52)"/><text x="35.1873%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (23,101 samples, 0.12%)</title><rect x="34.9388%" y="53" width="0.1212%" height="15" fill="rgb(207,117,47)"/><text x="35.1888%" y="63.50"></text></g><g><title>adt_dtorck_constraint (28,441 samples, 0.15%)</title><rect x="34.9196%" y="117" width="0.1492%" height="15" fill="rgb(249,43,39)"/><text x="35.1696%" y="127.50"></text></g><g><title>adt_dtorck_constraint (61,261 samples, 0.32%)</title><rect x="34.7800%" y="133" width="0.3214%" height="15" fill="rgb(209,38,44)"/><text x="35.0300%" y="143.50"></text></g><g><title>dropck_outlives (157,582 samples, 0.83%)</title><rect x="34.4120%" y="165" width="0.8268%" height="15" fill="rgb(236,212,23)"/><text x="34.6620%" y="175.50"></text></g><g><title>adt_dtorck_constraint (116,791 samples, 0.61%)</title><rect x="34.6260%" y="149" width="0.6128%" height="15" fill="rgb(242,79,21)"/><text x="34.8760%" y="159.50"></text></g><g><title>type_of (20,200 samples, 0.11%)</title><rect x="35.1328%" y="133" width="0.1060%" height="15" fill="rgb(211,96,35)"/><text x="35.3828%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (19,330 samples, 0.10%)</title><rect x="35.1374%" y="117" width="0.1014%" height="15" fill="rgb(253,215,40)"/><text x="35.3874%" y="127.50"></text></g><g><title>predicates_of (20,520 samples, 0.11%)</title><rect x="36.3065%" y="149" width="0.1077%" height="15" fill="rgb(211,81,21)"/><text x="36.5565%" y="159.50"></text></g><g><title>evaluate_obligation (377,235 samples, 1.98%)</title><rect x="35.2388%" y="165" width="1.9793%" height="15" fill="rgb(208,190,38)"/><text x="35.4888%" y="175.50">e..</text></g><g><title>trait_impls_of (151,462 samples, 0.79%)</title><rect x="36.4235%" y="149" width="0.7947%" height="15" fill="rgb(235,213,38)"/><text x="36.6735%" y="159.50"></text></g><g><title>implementations_of_trait (48,491 samples, 0.25%)</title><rect x="36.9637%" y="133" width="0.2544%" height="15" fill="rgb(237,122,38)"/><text x="37.2137%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (45,491 samples, 0.24%)</title><rect x="36.9795%" y="117" width="0.2387%" height="15" fill="rgb(244,218,35)"/><text x="37.2295%" y="127.50"></text></g><g><title>fn_sig (34,001 samples, 0.18%)</title><rect x="37.2431%" y="165" width="0.1784%" height="15" fill="rgb(240,68,47)"/><text x="37.4931%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (31,381 samples, 0.16%)</title><rect x="37.2568%" y="149" width="0.1647%" height="15" fill="rgb(210,16,53)"/><text x="37.5068%" y="159.50"></text></g><g><title>generics_of (24,880 samples, 0.13%)</title><rect x="37.4215%" y="165" width="0.1305%" height="15" fill="rgb(235,124,12)"/><text x="37.6715%" y="175.50"></text></g><g><title>associated_item (45,671 samples, 0.24%)</title><rect x="37.5660%" y="133" width="0.2396%" height="15" fill="rgb(224,169,11)"/><text x="37.8160%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (45,201 samples, 0.24%)</title><rect x="37.5685%" y="117" width="0.2372%" height="15" fill="rgb(250,166,2)"/><text x="37.8185%" y="127.50"></text></g><g><title>impl_item_implementor_ids (48,931 samples, 0.26%)</title><rect x="37.5520%" y="165" width="0.2567%" height="15" fill="rgb(242,216,29)"/><text x="37.8020%" y="175.50"></text></g><g><title>associated_items (47,441 samples, 0.25%)</title><rect x="37.5599%" y="149" width="0.2489%" height="15" fill="rgb(230,116,27)"/><text x="37.8099%" y="159.50"></text></g><g><title>impl_trait_ref (34,610 samples, 0.18%)</title><rect x="37.8281%" y="165" width="0.1816%" height="15" fill="rgb(228,99,48)"/><text x="38.0781%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (32,250 samples, 0.17%)</title><rect x="37.8405%" y="149" width="0.1692%" height="15" fill="rgb(253,11,6)"/><text x="38.0905%" y="159.50"></text></g><g><title>item_attrs (35,990 samples, 0.19%)</title><rect x="38.0232%" y="165" width="0.1888%" height="15" fill="rgb(247,143,39)"/><text x="38.2732%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (34,330 samples, 0.18%)</title><rect x="38.0319%" y="149" width="0.1801%" height="15" fill="rgb(236,97,10)"/><text x="38.2819%" y="159.50"></text></g><g><title>lint_levels (23,900 samples, 0.13%)</title><rect x="38.2121%" y="165" width="0.1254%" height="15" fill="rgb(233,208,19)"/><text x="38.4621%" y="175.50"></text></g><g><title>method_autoderef_steps (24,810 samples, 0.13%)</title><rect x="38.3711%" y="165" width="0.1302%" height="15" fill="rgb(216,164,2)"/><text x="38.6211%" y="175.50"></text></g><g><title>explicit_predicates_of (39,130 samples, 0.21%)</title><rect x="38.7764%" y="133" width="0.2053%" height="15" fill="rgb(220,129,5)"/><text x="39.0264%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (32,890 samples, 0.17%)</title><rect x="38.8091%" y="117" width="0.1726%" height="15" fill="rgb(242,17,10)"/><text x="39.0591%" y="127.50"></text></g><g><title>predicates_of (104,970 samples, 0.55%)</title><rect x="38.5289%" y="165" width="0.5508%" height="15" fill="rgb(242,107,0)"/><text x="38.7789%" y="175.50"></text></g><g><title>predicates_defined_on (75,940 samples, 0.40%)</title><rect x="38.6812%" y="149" width="0.3985%" height="15" fill="rgb(251,28,31)"/><text x="38.9312%" y="159.50"></text></g><g><title>item_bodies_checking (2,573,369 samples, 13.50%)</title><rect x="25.7874%" y="213" width="13.5023%" height="15" fill="rgb(233,223,10)"/><text x="26.0374%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (2,571,899 samples, 13.49%)</title><rect x="25.7951%" y="197" width="13.4946%" height="15" fill="rgb(215,21,27)"/><text x="26.0451%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (2,566,559 samples, 13.47%)</title><rect x="25.8232%" y="181" width="13.4666%" height="15" fill="rgb(232,23,21)"/><text x="26.0732%" y="191.50">typeck</text></g><g><title>impl_parent (34,951 samples, 0.18%)</title><rect x="39.8888%" y="133" width="0.1834%" height="15" fill="rgb(244,5,23)"/><text x="40.1388%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (24,341 samples, 0.13%)</title><rect x="39.9445%" y="117" width="0.1277%" height="15" fill="rgb(226,81,46)"/><text x="40.1945%" y="127.50"></text></g><g><title>impl_trait_ref (239,973 samples, 1.26%)</title><rect x="40.0722%" y="133" width="1.2591%" height="15" fill="rgb(247,70,30)"/><text x="40.3222%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (229,833 samples, 1.21%)</title><rect x="40.1254%" y="117" width="1.2059%" height="15" fill="rgb(212,68,19)"/><text x="40.3754%" y="127.50"></text></g><g><title>adt_destructor (340,974 samples, 1.79%)</title><rect x="39.6079%" y="181" width="1.7891%" height="15" fill="rgb(240,187,13)"/><text x="39.8579%" y="191.50">a..</text></g><g><title>coherent_trait (338,124 samples, 1.77%)</title><rect x="39.6228%" y="165" width="1.7741%" height="15" fill="rgb(223,113,26)"/><text x="39.8728%" y="175.50">c..</text></g><g><title>specialization_graph_of (336,624 samples, 1.77%)</title><rect x="39.6307%" y="149" width="1.7662%" height="15" fill="rgb(206,192,2)"/><text x="39.8807%" y="159.50"></text></g><g><title>item_types_checking (408,034 samples, 2.14%)</title><rect x="39.2897%" y="213" width="2.1409%" height="15" fill="rgb(241,108,4)"/><text x="39.5397%" y="223.50">i..</text></g><g><title>check_mod_item_types (404,914 samples, 2.12%)</title><rect x="39.3061%" y="197" width="2.1246%" height="15" fill="rgb(247,173,49)"/><text x="39.5561%" y="207.50">c..</text></g><g><title>fn_sig (61,040 samples, 0.32%)</title><rect x="41.8150%" y="181" width="0.3203%" height="15" fill="rgb(224,114,35)"/><text x="42.0650%" y="191.50"></text></g><g><title>type_of (24,720 samples, 0.13%)</title><rect x="42.0055%" y="165" width="0.1297%" height="15" fill="rgb(245,159,27)"/><text x="42.2555%" y="175.50"></text></g><g><title>named_region_map (52,282 samples, 0.27%)</title><rect x="42.3347%" y="165" width="0.2743%" height="15" fill="rgb(245,172,44)"/><text x="42.5847%" y="175.50"></text></g><g><title>resolve_lifetimes (47,982 samples, 0.25%)</title><rect x="42.3572%" y="149" width="0.2518%" height="15" fill="rgb(236,23,11)"/><text x="42.6072%" y="159.50"></text></g><g><title>generics_of (95,743 samples, 0.50%)</title><rect x="42.1352%" y="181" width="0.5024%" height="15" fill="rgb(205,117,38)"/><text x="42.3852%" y="191.50"></text></g><g><title>explicit_predicates_of (81,090 samples, 0.43%)</title><rect x="42.7533%" y="149" width="0.4255%" height="15" fill="rgb(237,72,25)"/><text x="43.0033%" y="159.50"></text></g><g><title>predicates_of (116,480 samples, 0.61%)</title><rect x="42.6493%" y="181" width="0.6112%" height="15" fill="rgb(244,70,9)"/><text x="42.8993%" y="191.50"></text></g><g><title>predicates_defined_on (106,550 samples, 0.56%)</title><rect x="42.7014%" y="165" width="0.5591%" height="15" fill="rgb(217,125,39)"/><text x="42.9514%" y="175.50"></text></g><g><title>late_bound_vars_map (26,831 samples, 0.14%)</title><rect x="43.6247%" y="149" width="0.1408%" height="15" fill="rgb(235,36,10)"/><text x="43.8747%" y="159.50"></text></g><g><title>super_predicates_of (103,841 samples, 0.54%)</title><rect x="43.2605%" y="181" width="0.5448%" height="15" fill="rgb(251,123,47)"/><text x="43.5105%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (97,421 samples, 0.51%)</title><rect x="43.2942%" y="165" width="0.5112%" height="15" fill="rgb(221,13,13)"/><text x="43.5442%" y="175.50"></text></g><g><title>type_collecting (462,185 samples, 2.43%)</title><rect x="41.4363%" y="213" width="2.4251%" height="15" fill="rgb(238,131,9)"/><text x="41.6863%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (450,615 samples, 2.36%)</title><rect x="41.4970%" y="197" width="2.3643%" height="15" fill="rgb(211,50,8)"/><text x="41.7470%" y="207.50">co..</text></g><g><title>check_impl_item_well_formed (73,170 samples, 0.38%)</title><rect x="44.0003%" y="197" width="0.3839%" height="15" fill="rgb(245,182,24)"/><text x="44.2503%" y="207.50"></text></g><g><title>adt_sized_constraint (19,560 samples, 0.10%)</title><rect x="46.5956%" y="165" width="0.1026%" height="15" fill="rgb(242,14,37)"/><text x="46.8456%" y="175.50"></text></g><g><title>evaluate_obligation (51,171 samples, 0.27%)</title><rect x="46.5086%" y="181" width="0.2685%" height="15" fill="rgb(246,228,12)"/><text x="46.7586%" y="191.50"></text></g><g><title>implied_outlives_bounds (64,880 samples, 0.34%)</title><rect x="46.7829%" y="181" width="0.3404%" height="15" fill="rgb(213,55,15)"/><text x="47.0329%" y="191.50"></text></g><g><title>param_env (189,022 samples, 0.99%)</title><rect x="47.1233%" y="181" width="0.9918%" height="15" fill="rgb(209,9,3)"/><text x="47.3733%" y="191.50"></text></g><g><title>predicates_of (31,771 samples, 0.17%)</title><rect x="48.1151%" y="181" width="0.1667%" height="15" fill="rgb(230,59,30)"/><text x="48.3651%" y="191.50"></text></g><g><title>predicates_defined_on (25,321 samples, 0.13%)</title><rect x="48.1489%" y="165" width="0.1329%" height="15" fill="rgb(209,121,21)"/><text x="48.3989%" y="175.50"></text></g><g><title>region_scope_tree (26,420 samples, 0.14%)</title><rect x="48.2818%" y="181" width="0.1386%" height="15" fill="rgb(220,109,13)"/><text x="48.5318%" y="191.50"></text></g><g><title>trait_impls_of (59,881 samples, 0.31%)</title><rect x="48.4283%" y="181" width="0.3142%" height="15" fill="rgb(232,18,1)"/><text x="48.6783%" y="191.50"></text></g><g><title>check_item_well_formed (854,920 samples, 4.49%)</title><rect x="44.3842%" y="197" width="4.4857%" height="15" fill="rgb(215,41,42)"/><text x="44.6342%" y="207.50">check..</text></g><g><title>variances_of (24,281 samples, 0.13%)</title><rect x="48.7425%" y="181" width="0.1274%" height="15" fill="rgb(224,123,36)"/><text x="48.9925%" y="191.50"></text></g><g><title>crate_variances (21,541 samples, 0.11%)</title><rect x="48.7569%" y="165" width="0.1130%" height="15" fill="rgb(240,125,3)"/><text x="49.0069%" y="175.50"></text></g><g><title>evaluate_obligation (68,171 samples, 0.36%)</title><rect x="49.3668%" y="181" width="0.3577%" height="15" fill="rgb(205,98,50)"/><text x="49.6168%" y="191.50"></text></g><g><title>implied_outlives_bounds (22,320 samples, 0.12%)</title><rect x="49.7245%" y="181" width="0.1171%" height="15" fill="rgb(205,185,37)"/><text x="49.9745%" y="191.50"></text></g><g><title>analysis (9,107,711 samples, 47.79%)</title><rect x="2.0880%" y="245" width="47.7876%" height="15" fill="rgb(238,207,15)"/><text x="2.3380%" y="255.50">analysis</text></g><g><title>type_check_crate (4,719,573 samples, 24.76%)</title><rect x="25.1123%" y="229" width="24.7633%" height="15" fill="rgb(213,199,42)"/><text x="25.3623%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,145,802 samples, 6.01%)</title><rect x="43.8636%" y="213" width="6.0120%" height="15" fill="rgb(235,201,11)"/><text x="44.1136%" y="223.50">wf_check..</text></g><g><title>check_trait_item_well_formed (191,672 samples, 1.01%)</title><rect x="48.8699%" y="197" width="1.0057%" height="15" fill="rgb(207,46,11)"/><text x="49.1199%" y="207.50"></text></g><g><title>codegen_crate (314,934 samples, 1.65%)</title><rect x="49.9091%" y="245" width="1.6524%" height="15" fill="rgb(241,35,35)"/><text x="50.1591%" y="255.50"></text></g><g><title>AST_validation (64,081 samples, 0.34%)</title><rect x="52.1962%" y="229" width="0.3362%" height="15" fill="rgb(243,32,47)"/><text x="52.4462%" y="239.50"></text></g><g><title>complete_gated_feature_checking (20,690 samples, 0.11%)</title><rect x="52.5324%" y="229" width="0.1086%" height="15" fill="rgb(247,202,23)"/><text x="52.7824%" y="239.50"></text></g><g><title>crate_injection (54,580 samples, 0.29%)</title><rect x="52.6410%" y="229" width="0.2864%" height="15" fill="rgb(219,102,11)"/><text x="52.8910%" y="239.50"></text></g><g><title>metadata_load_macro (43,610 samples, 0.23%)</title><rect x="75.9915%" y="197" width="0.2288%" height="15" fill="rgb(243,110,44)"/><text x="76.2415%" y="207.50"></text></g><g><title>metadata_register_crate (129,081 samples, 0.68%)</title><rect x="76.2204%" y="197" width="0.6773%" height="15" fill="rgb(222,74,54)"/><text x="76.4704%" y="207.50"></text></g><g><title>macro_expand_crate (4,593,452 samples, 24.10%)</title><rect x="52.9274%" y="229" width="24.1016%" height="15" fill="rgb(216,99,12)"/><text x="53.1774%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (4,579,742 samples, 24.03%)</title><rect x="52.9993%" y="213" width="24.0296%" height="15" fill="rgb(226,22,26)"/><text x="53.2493%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (25,020 samples, 0.13%)</title><rect x="76.8976%" y="197" width="0.1313%" height="15" fill="rgb(217,163,10)"/><text x="77.1476%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (48,370 samples, 0.25%)</title><rect x="77.0683%" y="229" width="0.2538%" height="15" fill="rgb(213,25,53)"/><text x="77.3183%" y="239.50"></text></g><g><title>finalize_imports (109,591 samples, 0.58%)</title><rect x="77.3429%" y="213" width="0.5750%" height="15" fill="rgb(252,105,26)"/><text x="77.5929%" y="223.50"></text></g><g><title>late_resolve_crate (304,703 samples, 1.60%)</title><rect x="77.9669%" y="213" width="1.5988%" height="15" fill="rgb(220,39,43)"/><text x="78.2169%" y="223.50"></text></g><g><title>configure_and_expand (5,373,110 samples, 28.19%)</title><rect x="51.5615%" y="245" width="28.1924%" height="15" fill="rgb(229,68,48)"/><text x="51.8115%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (463,475 samples, 2.43%)</title><rect x="77.3221%" y="229" width="2.4318%" height="15" fill="rgb(252,8,32)"/><text x="77.5721%" y="239.50">re..</text></g><g><title>drop_ast (35,250 samples, 0.18%)</title><rect x="79.7539%" y="245" width="0.1850%" height="15" fill="rgb(223,20,43)"/><text x="80.0039%" y="255.50"></text></g><g><title>drop_compiler (26,151 samples, 0.14%)</title><rect x="79.9388%" y="245" width="0.1372%" height="15" fill="rgb(229,81,49)"/><text x="80.1888%" y="255.50"></text></g><g><title>early_lint_checks (70,971 samples, 0.37%)</title><rect x="80.0761%" y="245" width="0.3724%" height="15" fill="rgb(236,28,36)"/><text x="80.3261%" y="255.50"></text></g><g><title>free_global_ctxt (1,360,225 samples, 7.14%)</title><rect x="80.4484%" y="245" width="7.1370%" height="15" fill="rgb(249,185,26)"/><text x="80.6984%" y="255.50">free_globa..</text></g><g><title>crate_hash (67,680 samples, 0.36%)</title><rect x="89.0604%" y="229" width="0.3551%" height="15" fill="rgb(249,174,33)"/><text x="89.3104%" y="239.50"></text></g><g><title>generate_crate_metadata (396,524 samples, 2.08%)</title><rect x="87.5854%" y="245" width="2.0805%" height="15" fill="rgb(233,201,37)"/><text x="87.8354%" y="255.50">g..</text></g><g><title>hir_lowering (562,106 samples, 2.95%)</title><rect x="89.6660%" y="245" width="2.9493%" height="15" fill="rgb(221,78,26)"/><text x="89.9160%" y="255.50">hi..</text></g><g><title>link (37,210 samples, 0.20%)</title><rect x="92.6153%" y="245" width="0.1952%" height="15" fill="rgb(250,127,30)"/><text x="92.8653%" y="255.50"></text></g><g><title>parse_crate (508,226 samples, 2.67%)</title><rect x="92.8106%" y="245" width="2.6666%" height="15" fill="rgb(230,49,44)"/><text x="93.0606%" y="255.50">pa..</text></g><g><title>prepare_outputs (159,912 samples, 0.84%)</title><rect x="95.5046%" y="245" width="0.8390%" height="15" fill="rgb(229,67,23)"/><text x="95.7546%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (334,824 samples, 1.76%)</title><rect x="96.3436%" y="245" width="1.7568%" height="15" fill="rgb(249,83,47)"/><text x="96.5936%" y="255.50"></text></g><g><title>setup_global_ctxt (90,461 samples, 0.47%)</title><rect x="98.1538%" y="245" width="0.4746%" height="15" fill="rgb(215,43,3)"/><text x="98.4038%" y="255.50"></text></g><g><title>all (19,058,733 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (19,058,733 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (261,393 samples, 1.37%)</title><rect x="98.6285%" y="245" width="1.3715%" height="15" fill="rgb(233,0,4)"/><text x="98.8785%" y="255.50"></text></g></svg></svg>