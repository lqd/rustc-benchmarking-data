<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (120,312 samples, 0.13%)</title><rect x="8.6138%" y="133" width="0.1311%" height="15" fill="rgb(227,0,7)"/><text x="8.8638%" y="143.50"></text></g><g><title>item_attrs (100,381 samples, 0.11%)</title><rect x="9.0211%" y="101" width="0.1094%" height="15" fill="rgb(217,0,24)"/><text x="9.2711%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,731 samples, 0.10%)</title><rect x="9.0261%" y="85" width="0.1043%" height="15" fill="rgb(221,193,54)"/><text x="9.2761%" y="95.50"></text></g><g><title>codegen_fn_attrs (167,962 samples, 0.18%)</title><rect x="8.9665%" y="117" width="0.1830%" height="15" fill="rgb(248,212,6)"/><text x="9.2165%" y="127.50"></text></g><g><title>adt_drop_tys (137,061 samples, 0.15%)</title><rect x="10.7753%" y="85" width="0.1494%" height="15" fill="rgb(208,68,35)"/><text x="11.0253%" y="95.50"></text></g><g><title>needs_drop_raw (661,958 samples, 0.72%)</title><rect x="10.7106%" y="101" width="0.7214%" height="15" fill="rgb(232,128,0)"/><text x="10.9606%" y="111.50"></text></g><g><title>is_copy_raw (465,516 samples, 0.51%)</title><rect x="10.9247%" y="85" width="0.5073%" height="15" fill="rgb(207,160,47)"/><text x="11.1747%" y="95.50"></text></g><g><title>evaluate_obligation (368,234 samples, 0.40%)</title><rect x="11.0307%" y="69" width="0.4013%" height="15" fill="rgb(228,23,34)"/><text x="11.2807%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (94,191 samples, 0.10%)</title><rect x="11.5081%" y="85" width="0.1026%" height="15" fill="rgb(218,30,26)"/><text x="11.7581%" y="95.50"></text></g><g><title>impl_parent (180,574 samples, 0.20%)</title><rect x="11.9217%" y="69" width="0.1968%" height="15" fill="rgb(220,122,19)"/><text x="12.1717%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (120,963 samples, 0.13%)</title><rect x="11.9866%" y="53" width="0.1318%" height="15" fill="rgb(250,228,42)"/><text x="12.2366%" y="63.50"></text></g><g><title>specialization_graph_of (905,881 samples, 0.99%)</title><rect x="11.6139%" y="85" width="0.9872%" height="15" fill="rgb(240,193,28)"/><text x="11.8639%" y="95.50"></text></g><g><title>impl_trait_ref (442,857 samples, 0.48%)</title><rect x="12.1184%" y="69" width="0.4826%" height="15" fill="rgb(216,20,37)"/><text x="12.3684%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (383,747 samples, 0.42%)</title><rect x="12.1828%" y="53" width="0.4182%" height="15" fill="rgb(206,188,39)"/><text x="12.4328%" y="63.50"></text></g><g><title>resolve_instance (1,108,343 samples, 1.21%)</title><rect x="11.4320%" y="101" width="1.2078%" height="15" fill="rgb(217,207,13)"/><text x="11.6820%" y="111.50"></text></g><g><title>thir_body (547,385 samples, 0.60%)</title><rect x="12.6501%" y="101" width="0.5965%" height="15" fill="rgb(231,73,38)"/><text x="12.9001%" y="111.50"></text></g><g><title>mir_const (4,630,878 samples, 5.05%)</title><rect x="8.2133%" y="149" width="5.0465%" height="15" fill="rgb(225,20,46)"/><text x="8.4633%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (4,143,032 samples, 4.51%)</title><rect x="8.7449%" y="133" width="4.5148%" height="15" fill="rgb(210,31,41)"/><text x="8.9949%" y="143.50">unsaf..</text></g><g><title>mir_built (3,768,550 samples, 4.11%)</title><rect x="9.1530%" y="117" width="4.1068%" height="15" fill="rgb(221,200,47)"/><text x="9.4030%" y="127.50">mir_..</text></g><g><title>mir_const_qualif (128,502 samples, 0.14%)</title><rect x="13.2597%" y="149" width="0.1400%" height="15" fill="rgb(226,26,5)"/><text x="13.5097%" y="159.50"></text></g><g><title>mir_const (95,310 samples, 0.10%)</title><rect x="13.2959%" y="133" width="0.1039%" height="15" fill="rgb(249,33,26)"/><text x="13.5459%" y="143.50"></text></g><g><title>mir_promoted (5,138,234 samples, 5.60%)</title><rect x="7.8007%" y="165" width="5.5994%" height="15" fill="rgb(235,183,28)"/><text x="8.0507%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (178,772 samples, 0.19%)</title><rect x="13.4051%" y="165" width="0.1948%" height="15" fill="rgb(221,5,38)"/><text x="13.6551%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (321,406 samples, 0.35%)</title><rect x="13.5999%" y="165" width="0.3502%" height="15" fill="rgb(247,18,42)"/><text x="13.8499%" y="175.50"></text></g><g><title>normalize_projection_ty (216,505 samples, 0.24%)</title><rect x="13.7142%" y="149" width="0.2359%" height="15" fill="rgb(241,131,45)"/><text x="13.9642%" y="159.50"></text></g><g><title>type_op_normalize_predicate (148,151 samples, 0.16%)</title><rect x="13.9501%" y="165" width="0.1614%" height="15" fill="rgb(249,31,29)"/><text x="14.2001%" y="175.50"></text></g><g><title>normalize_projection_ty (99,880 samples, 0.11%)</title><rect x="14.0027%" y="149" width="0.1088%" height="15" fill="rgb(225,111,53)"/><text x="14.2527%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,570,345 samples, 1.71%)</title><rect x="14.1116%" y="165" width="1.7113%" height="15" fill="rgb(238,160,17)"/><text x="14.3616%" y="175.50"></text></g><g><title>MIR_borrow_checking (13,401,529 samples, 14.60%)</title><rect x="1.2279%" y="197" width="14.6042%" height="15" fill="rgb(214,148,48)"/><text x="1.4779%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,352,069 samples, 14.55%)</title><rect x="1.2818%" y="181" width="14.5503%" height="15" fill="rgb(232,36,49)"/><text x="1.5318%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (105,681 samples, 0.12%)</title><rect x="15.8321%" y="197" width="0.1152%" height="15" fill="rgb(209,103,24)"/><text x="16.0821%" y="207.50"></text></g><g><title>hir_module_items (211,793 samples, 0.23%)</title><rect x="15.9473%" y="197" width="0.2308%" height="15" fill="rgb(229,88,8)"/><text x="16.1973%" y="207.50"></text></g><g><title>get_lang_items (136,811 samples, 0.15%)</title><rect x="16.6236%" y="149" width="0.1491%" height="15" fill="rgb(213,181,19)"/><text x="16.8736%" y="159.50"></text></g><g><title>should_inherit_track_caller (207,123 samples, 0.23%)</title><rect x="16.7727%" y="149" width="0.2257%" height="15" fill="rgb(254,191,54)"/><text x="17.0227%" y="159.50"></text></g><g><title>codegen_fn_attrs (475,156 samples, 0.52%)</title><rect x="16.5218%" y="165" width="0.5178%" height="15" fill="rgb(241,83,37)"/><text x="16.7718%" y="175.50"></text></g><g><title>check_mod_attrs (760,239 samples, 0.83%)</title><rect x="16.2114%" y="181" width="0.8285%" height="15" fill="rgb(233,36,39)"/><text x="16.4614%" y="191.50"></text></g><g><title>check_mod_const_bodies (108,071 samples, 0.12%)</title><rect x="17.0398%" y="181" width="0.1178%" height="15" fill="rgb(226,3,54)"/><text x="17.2898%" y="191.50"></text></g><g><title>lookup_deprecation_entry (153,841 samples, 0.17%)</title><rect x="17.4062%" y="165" width="0.1676%" height="15" fill="rgb(245,192,40)"/><text x="17.6562%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (402,005 samples, 0.44%)</title><rect x="17.2380%" y="181" width="0.4381%" height="15" fill="rgb(238,167,29)"/><text x="17.4880%" y="191.50"></text></g><g><title>misc_checking_1 (1,431,846 samples, 1.56%)</title><rect x="16.1785%" y="197" width="1.5603%" height="15" fill="rgb(232,182,51)"/><text x="16.4285%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (227,743 samples, 0.25%)</title><rect x="17.7416%" y="181" width="0.2482%" height="15" fill="rgb(231,60,39)"/><text x="17.9916%" y="191.50"></text></g><g><title>check_mod_liveness (178,872 samples, 0.19%)</title><rect x="17.7949%" y="165" width="0.1949%" height="15" fill="rgb(208,69,12)"/><text x="18.0449%" y="175.50"></text></g><g><title>mir_borrowck (510,505 samples, 0.56%)</title><rect x="18.8158%" y="69" width="0.5563%" height="15" fill="rgb(235,93,37)"/><text x="19.0658%" y="79.50"></text></g><g><title>eval_to_const_value_raw (882,679 samples, 0.96%)</title><rect x="18.4117%" y="149" width="0.9619%" height="15" fill="rgb(213,116,39)"/><text x="18.6617%" y="159.50"></text></g><g><title>eval_to_const_value_raw (872,649 samples, 0.95%)</title><rect x="18.4227%" y="133" width="0.9510%" height="15" fill="rgb(222,207,29)"/><text x="18.6727%" y="143.50"></text></g><g><title>eval_to_allocation_raw (861,249 samples, 0.94%)</title><rect x="18.4351%" y="117" width="0.9385%" height="15" fill="rgb(206,96,30)"/><text x="18.6851%" y="127.50"></text></g><g><title>mir_for_ctfe (722,727 samples, 0.79%)</title><rect x="18.5861%" y="101" width="0.7876%" height="15" fill="rgb(218,138,4)"/><text x="18.8361%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (662,547 samples, 0.72%)</title><rect x="18.6516%" y="85" width="0.7220%" height="15" fill="rgb(250,191,14)"/><text x="18.9016%" y="95.50"></text></g><g><title>mir_const_qualif (235,473 samples, 0.26%)</title><rect x="19.3736%" y="149" width="0.2566%" height="15" fill="rgb(239,60,40)"/><text x="19.6236%" y="159.50"></text></g><g><title>mir_const (185,132 samples, 0.20%)</title><rect x="19.4285%" y="133" width="0.2017%" height="15" fill="rgb(206,27,48)"/><text x="19.6785%" y="143.50"></text></g><g><title>unsafety_check_result (127,431 samples, 0.14%)</title><rect x="19.4914%" y="117" width="0.1389%" height="15" fill="rgb(225,35,8)"/><text x="19.7414%" y="127.50"></text></g><g><title>misc_checking_2 (1,795,840 samples, 1.96%)</title><rect x="17.7388%" y="197" width="1.9570%" height="15" fill="rgb(250,213,24)"/><text x="17.9888%" y="207.50">m..</text></g><g><title>match_checking (1,565,507 samples, 1.71%)</title><rect x="17.9898%" y="181" width="1.7060%" height="15" fill="rgb(247,123,22)"/><text x="18.2398%" y="191.50"></text></g><g><title>check_match (1,547,787 samples, 1.69%)</title><rect x="18.0091%" y="165" width="1.6867%" height="15" fill="rgb(231,138,38)"/><text x="18.2591%" y="175.50"></text></g><g><title>death_checking (241,353 samples, 0.26%)</title><rect x="19.7890%" y="181" width="0.2630%" height="15" fill="rgb(231,145,46)"/><text x="20.0390%" y="191.50"></text></g><g><title>item_attrs (107,811 samples, 0.12%)</title><rect x="19.9346%" y="165" width="0.1175%" height="15" fill="rgb(251,118,11)"/><text x="20.1846%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (106,681 samples, 0.12%)</title><rect x="19.9358%" y="149" width="0.1163%" height="15" fill="rgb(217,147,25)"/><text x="20.1858%" y="159.50"></text></g><g><title>eval_to_const_value_raw (109,871 samples, 0.12%)</title><rect x="20.6325%" y="149" width="0.1197%" height="15" fill="rgb(247,81,37)"/><text x="20.8825%" y="159.50"></text></g><g><title>eval_to_const_value_raw (106,921 samples, 0.12%)</title><rect x="20.6357%" y="133" width="0.1165%" height="15" fill="rgb(209,12,38)"/><text x="20.8857%" y="143.50"></text></g><g><title>eval_to_allocation_raw (100,441 samples, 0.11%)</title><rect x="20.6428%" y="117" width="0.1095%" height="15" fill="rgb(227,1,9)"/><text x="20.8928%" y="127.50"></text></g><g><title>crate_lints (2,036,283 samples, 2.22%)</title><rect x="20.0537%" y="165" width="2.2190%" height="15" fill="rgb(248,47,43)"/><text x="20.3037%" y="175.50">c..</text></g><g><title>type_of (1,337,052 samples, 1.46%)</title><rect x="20.8157%" y="149" width="1.4570%" height="15" fill="rgb(221,10,30)"/><text x="21.0657%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (865,356 samples, 0.94%)</title><rect x="21.3297%" y="133" width="0.9430%" height="15" fill="rgb(210,229,1)"/><text x="21.5797%" y="143.50"></text></g><g><title>lint_checking (2,263,976 samples, 2.47%)</title><rect x="20.0520%" y="181" width="2.4672%" height="15" fill="rgb(222,148,37)"/><text x="20.3020%" y="191.50">li..</text></g><g><title>module_lints (226,193 samples, 0.25%)</title><rect x="22.2727%" y="165" width="0.2465%" height="15" fill="rgb(234,67,33)"/><text x="22.5227%" y="175.50"></text></g><g><title>lint_mod (224,043 samples, 0.24%)</title><rect x="22.2751%" y="149" width="0.2441%" height="15" fill="rgb(247,98,35)"/><text x="22.5251%" y="159.50"></text></g><g><title>privacy_access_levels (99,611 samples, 0.11%)</title><rect x="22.5192%" y="181" width="0.1086%" height="15" fill="rgb(247,138,52)"/><text x="22.7692%" y="191.50"></text></g><g><title>privacy_checking_modules (413,094 samples, 0.45%)</title><rect x="22.6278%" y="181" width="0.4502%" height="15" fill="rgb(213,79,30)"/><text x="22.8778%" y="191.50"></text></g><g><title>check_mod_privacy (411,054 samples, 0.45%)</title><rect x="22.6300%" y="165" width="0.4479%" height="15" fill="rgb(246,177,23)"/><text x="22.8800%" y="175.50"></text></g><g><title>misc_checking_3 (3,121,425 samples, 3.40%)</title><rect x="19.6958%" y="197" width="3.4016%" height="15" fill="rgb(230,62,27)"/><text x="19.9458%" y="207.50">mis..</text></g><g><title>impl_trait_ref (252,283 samples, 0.27%)</title><rect x="23.3349%" y="101" width="0.2749%" height="15" fill="rgb(216,154,8)"/><text x="23.5849%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (231,862 samples, 0.25%)</title><rect x="23.3572%" y="85" width="0.2527%" height="15" fill="rgb(244,35,45)"/><text x="23.6072%" y="95.50"></text></g><g><title>adt_destructor (424,955 samples, 0.46%)</title><rect x="23.1868%" y="149" width="0.4631%" height="15" fill="rgb(251,115,12)"/><text x="23.4368%" y="159.50"></text></g><g><title>coherent_trait (416,375 samples, 0.45%)</title><rect x="23.1961%" y="133" width="0.4537%" height="15" fill="rgb(240,54,50)"/><text x="23.4461%" y="143.50"></text></g><g><title>specialization_graph_of (415,255 samples, 0.45%)</title><rect x="23.1974%" y="117" width="0.4525%" height="15" fill="rgb(233,84,52)"/><text x="23.4474%" y="127.50"></text></g><g><title>param_env (119,651 samples, 0.13%)</title><rect x="23.6499%" y="149" width="0.1304%" height="15" fill="rgb(207,117,47)"/><text x="23.8999%" y="159.50"></text></g><g><title>impl_parent (2,775,690 samples, 3.02%)</title><rect x="28.2807%" y="133" width="3.0248%" height="15" fill="rgb(249,43,39)"/><text x="28.5307%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,528,922 samples, 1.67%)</title><rect x="29.6393%" y="117" width="1.6661%" height="15" fill="rgb(209,38,44)"/><text x="29.8893%" y="127.50"></text></g><g><title>impl_trait_ref (6,254,678 samples, 6.82%)</title><rect x="31.3055%" y="133" width="6.8160%" height="15" fill="rgb(236,212,23)"/><text x="31.5555%" y="143.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,233,981 samples, 5.70%)</title><rect x="32.4178%" y="117" width="5.7037%" height="15" fill="rgb(242,79,21)"/><text x="32.6678%" y="127.50">metadat..</text></g><g><title>coherent_trait (14,737,964 samples, 16.06%)</title><rect x="23.1528%" y="165" width="16.0606%" height="15" fill="rgb(211,96,35)"/><text x="23.4028%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (14,162,178 samples, 15.43%)</title><rect x="23.7803%" y="149" width="15.4331%" height="15" fill="rgb(253,215,40)"/><text x="24.0303%" y="159.50">specialization_graph_of</text></g><g><title>trait_impls_of (999,901 samples, 1.09%)</title><rect x="38.1238%" y="133" width="1.0896%" height="15" fill="rgb(211,81,21)"/><text x="38.3738%" y="143.50"></text></g><g><title>implementations_of_trait (243,113 samples, 0.26%)</title><rect x="38.9485%" y="117" width="0.2649%" height="15" fill="rgb(208,190,38)"/><text x="39.1985%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (210,331 samples, 0.23%)</title><rect x="38.9842%" y="101" width="0.2292%" height="15" fill="rgb(235,213,38)"/><text x="39.2342%" y="111.50"></text></g><g><title>coherence_checking (14,820,725 samples, 16.15%)</title><rect x="23.1345%" y="181" width="16.1508%" height="15" fill="rgb(237,122,38)"/><text x="23.3845%" y="191.50">coherence_checking</text></g><g><title>adt_sized_constraint (128,480 samples, 0.14%)</title><rect x="47.8069%" y="133" width="0.1400%" height="15" fill="rgb(244,218,35)"/><text x="48.0569%" y="143.50"></text></g><g><title>associated_item (514,825 samples, 0.56%)</title><rect x="48.0550%" y="117" width="0.5610%" height="15" fill="rgb(240,68,47)"/><text x="48.3050%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (242,891 samples, 0.26%)</title><rect x="48.3514%" y="101" width="0.2647%" height="15" fill="rgb(210,16,53)"/><text x="48.6014%" y="111.50"></text></g><g><title>associated_items (628,415 samples, 0.68%)</title><rect x="47.9529%" y="133" width="0.6848%" height="15" fill="rgb(235,124,12)"/><text x="48.2029%" y="143.50"></text></g><g><title>dropck_outlives (159,961 samples, 0.17%)</title><rect x="48.6672%" y="133" width="0.1743%" height="15" fill="rgb(224,169,11)"/><text x="48.9172%" y="143.50"></text></g><g><title>generics_of (166,632 samples, 0.18%)</title><rect x="50.3269%" y="117" width="0.1816%" height="15" fill="rgb(250,166,2)"/><text x="50.5769%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (130,052 samples, 0.14%)</title><rect x="50.3668%" y="101" width="0.1417%" height="15" fill="rgb(242,216,29)"/><text x="50.6168%" y="111.50"></text></g><g><title>impl_trait_ref (128,301 samples, 0.14%)</title><rect x="50.6486%" y="117" width="0.1398%" height="15" fill="rgb(230,116,27)"/><text x="50.8986%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (100,961 samples, 0.11%)</title><rect x="50.6784%" y="101" width="0.1100%" height="15" fill="rgb(228,99,48)"/><text x="50.9284%" y="111.50"></text></g><g><title>explicit_predicates_of (114,840 samples, 0.13%)</title><rect x="51.1080%" y="85" width="0.1251%" height="15" fill="rgb(253,11,6)"/><text x="51.3580%" y="95.50"></text></g><g><title>predicates_of (443,253 samples, 0.48%)</title><rect x="50.8159%" y="117" width="0.4830%" height="15" fill="rgb(247,143,39)"/><text x="51.0659%" y="127.50"></text></g><g><title>predicates_defined_on (271,620 samples, 0.30%)</title><rect x="51.0029%" y="101" width="0.2960%" height="15" fill="rgb(236,97,10)"/><text x="51.2529%" y="111.50"></text></g><g><title>specializes (941,172 samples, 1.03%)</title><rect x="51.2989%" y="117" width="1.0256%" height="15" fill="rgb(233,208,19)"/><text x="51.5489%" y="127.50"></text></g><g><title>param_env (583,316 samples, 0.64%)</title><rect x="51.6889%" y="101" width="0.6357%" height="15" fill="rgb(216,164,2)"/><text x="51.9389%" y="111.50"></text></g><g><title>def_span (282,134 samples, 0.31%)</title><rect x="52.0171%" y="85" width="0.3075%" height="15" fill="rgb(220,129,5)"/><text x="52.2671%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (254,363 samples, 0.28%)</title><rect x="52.0474%" y="69" width="0.2772%" height="15" fill="rgb(242,17,10)"/><text x="52.2974%" y="79.50"></text></g><g><title>trait_impls_of (389,805 samples, 0.42%)</title><rect x="52.3345%" y="117" width="0.4248%" height="15" fill="rgb(242,107,0)"/><text x="52.5845%" y="127.50"></text></g><g><title>implementations_of_trait (159,701 samples, 0.17%)</title><rect x="52.5853%" y="101" width="0.1740%" height="15" fill="rgb(251,28,31)"/><text x="52.8353%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (118,551 samples, 0.13%)</title><rect x="52.6301%" y="85" width="0.1292%" height="15" fill="rgb(233,223,10)"/><text x="52.8801%" y="95.50"></text></g><g><title>evaluate_obligation (3,603,384 samples, 3.93%)</title><rect x="48.8415%" y="133" width="3.9268%" height="15" fill="rgb(215,21,27)"/><text x="49.0915%" y="143.50">eval..</text></g><g><title>method_autoderef_steps (161,632 samples, 0.18%)</title><rect x="53.2181%" y="133" width="0.1761%" height="15" fill="rgb(232,23,21)"/><text x="53.4681%" y="143.50"></text></g><g><title>predicates_of (197,153 samples, 0.21%)</title><rect x="53.4704%" y="133" width="0.2148%" height="15" fill="rgb(244,5,23)"/><text x="53.7204%" y="143.50"></text></g><g><title>predicates_defined_on (134,362 samples, 0.15%)</title><rect x="53.5388%" y="117" width="0.1464%" height="15" fill="rgb(226,81,46)"/><text x="53.7888%" y="127.50"></text></g><g><title>dropck_outlives (195,952 samples, 0.21%)</title><rect x="60.6848%" y="117" width="0.2135%" height="15" fill="rgb(247,70,30)"/><text x="60.9348%" y="127.50"></text></g><g><title>adt_dtorck_constraint (137,401 samples, 0.15%)</title><rect x="60.7486%" y="101" width="0.1497%" height="15" fill="rgb(212,68,19)"/><text x="60.9986%" y="111.50"></text></g><g><title>adt_def (137,861 samples, 0.15%)</title><rect x="61.3414%" y="85" width="0.1502%" height="15" fill="rgb(240,187,13)"/><text x="61.5914%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (136,141 samples, 0.15%)</title><rect x="61.3433%" y="69" width="0.1484%" height="15" fill="rgb(223,113,26)"/><text x="61.5933%" y="79.50"></text></g><g><title>item_attrs (113,011 samples, 0.12%)</title><rect x="61.3685%" y="53" width="0.1232%" height="15" fill="rgb(206,192,2)"/><text x="61.6185%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (110,521 samples, 0.12%)</title><rect x="61.3712%" y="37" width="0.1204%" height="15" fill="rgb(241,108,4)"/><text x="61.6212%" y="47.50"></text></g><g><title>adt_sized_constraint (157,132 samples, 0.17%)</title><rect x="61.3322%" y="101" width="0.1712%" height="15" fill="rgb(247,173,49)"/><text x="61.5822%" y="111.50"></text></g><g><title>evaluate_obligation (774,799 samples, 0.84%)</title><rect x="60.8983%" y="117" width="0.8443%" height="15" fill="rgb(224,114,35)"/><text x="61.1483%" y="127.50"></text></g><g><title>trait_impls_of (155,251 samples, 0.17%)</title><rect x="61.5735%" y="101" width="0.1692%" height="15" fill="rgb(245,159,27)"/><text x="61.8235%" y="111.50"></text></g><g><title>is_copy_raw (258,372 samples, 0.28%)</title><rect x="61.8946%" y="117" width="0.2816%" height="15" fill="rgb(245,172,44)"/><text x="62.1446%" y="127.50"></text></g><g><title>evaluate_obligation (223,072 samples, 0.24%)</title><rect x="61.9331%" y="101" width="0.2431%" height="15" fill="rgb(236,23,11)"/><text x="62.1831%" y="111.50"></text></g><g><title>evaluate_obligation (96,901 samples, 0.11%)</title><rect x="62.3873%" y="101" width="0.1056%" height="15" fill="rgb(205,117,38)"/><text x="62.6373%" y="111.50"></text></g><g><title>object_safety_violations (242,243 samples, 0.26%)</title><rect x="62.3296%" y="117" width="0.2640%" height="15" fill="rgb(237,72,25)"/><text x="62.5796%" y="127.50"></text></g><g><title>predicates_of (155,621 samples, 0.17%)</title><rect x="62.6019%" y="117" width="0.1696%" height="15" fill="rgb(244,70,9)"/><text x="62.8519%" y="127.50"></text></g><g><title>predicates_defined_on (105,131 samples, 0.11%)</title><rect x="62.6569%" y="101" width="0.1146%" height="15" fill="rgb(217,125,39)"/><text x="62.9069%" y="111.50"></text></g><g><title>typeck (8,323,143 samples, 9.07%)</title><rect x="53.7827%" y="133" width="9.0701%" height="15" fill="rgb(235,36,10)"/><text x="54.0327%" y="143.50">typeck</text></g><g><title>item_bodies_checking (21,617,471 samples, 23.56%)</title><rect x="39.3177%" y="181" width="23.5575%" height="15" fill="rgb(251,123,47)"/><text x="39.5677%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,614,561 samples, 23.55%)</title><rect x="39.3208%" y="165" width="23.5543%" height="15" fill="rgb(221,13,13)"/><text x="39.5708%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (21,588,741 samples, 23.53%)</title><rect x="39.3490%" y="149" width="23.5262%" height="15" fill="rgb(238,131,9)"/><text x="39.5990%" y="159.50">typeck</text></g><g><title>item_types_checking (371,424 samples, 0.40%)</title><rect x="62.8752%" y="181" width="0.4048%" height="15" fill="rgb(211,50,8)"/><text x="63.1252%" y="191.50"></text></g><g><title>check_mod_item_types (369,324 samples, 0.40%)</title><rect x="62.8774%" y="165" width="0.4025%" height="15" fill="rgb(245,182,24)"/><text x="63.1274%" y="175.50"></text></g><g><title>typeck (169,342 samples, 0.18%)</title><rect x="63.0954%" y="149" width="0.1845%" height="15" fill="rgb(242,14,37)"/><text x="63.3454%" y="159.50"></text></g><g><title>fn_sig (243,091 samples, 0.26%)</title><rect x="63.5811%" y="149" width="0.2649%" height="15" fill="rgb(246,228,12)"/><text x="63.8311%" y="159.50"></text></g><g><title>is_late_bound_map (458,596 samples, 0.50%)</title><rect x="64.0016%" y="133" width="0.4998%" height="15" fill="rgb(213,55,15)"/><text x="64.2516%" y="143.50"></text></g><g><title>resolve_lifetimes (436,935 samples, 0.48%)</title><rect x="64.0252%" y="117" width="0.4761%" height="15" fill="rgb(209,9,3)"/><text x="64.2752%" y="127.50"></text></g><g><title>lint_levels (231,052 samples, 0.25%)</title><rect x="64.2496%" y="101" width="0.2518%" height="15" fill="rgb(230,59,30)"/><text x="64.4996%" y="111.50"></text></g><g><title>named_region_map (229,613 samples, 0.25%)</title><rect x="64.5013%" y="133" width="0.2502%" height="15" fill="rgb(209,121,21)"/><text x="64.7513%" y="143.50"></text></g><g><title>resolve_lifetimes (211,953 samples, 0.23%)</title><rect x="64.5206%" y="117" width="0.2310%" height="15" fill="rgb(220,109,13)"/><text x="64.7706%" y="127.50"></text></g><g><title>generics_of (849,432 samples, 0.93%)</title><rect x="63.8461%" y="149" width="0.9257%" height="15" fill="rgb(232,18,1)"/><text x="64.0961%" y="159.50"></text></g><g><title>explicit_predicates_of (104,410 samples, 0.11%)</title><rect x="64.9725%" y="117" width="0.1138%" height="15" fill="rgb(215,41,42)"/><text x="65.2225%" y="127.50"></text></g><g><title>predicates_of (489,676 samples, 0.53%)</title><rect x="64.8434%" y="149" width="0.5336%" height="15" fill="rgb(224,123,36)"/><text x="65.0934%" y="159.50"></text></g><g><title>predicates_defined_on (444,353 samples, 0.48%)</title><rect x="64.8928%" y="133" width="0.4842%" height="15" fill="rgb(240,125,3)"/><text x="65.1428%" y="143.50"></text></g><g><title>inferred_outlives_of (266,793 samples, 0.29%)</title><rect x="65.0863%" y="117" width="0.2907%" height="15" fill="rgb(205,98,50)"/><text x="65.3363%" y="127.50"></text></g><g><title>inferred_outlives_crate (240,783 samples, 0.26%)</title><rect x="65.1146%" y="101" width="0.2624%" height="15" fill="rgb(205,185,37)"/><text x="65.3646%" y="111.50"></text></g><g><title>type_of (132,922 samples, 0.14%)</title><rect x="65.2321%" y="85" width="0.1449%" height="15" fill="rgb(238,207,15)"/><text x="65.4821%" y="95.50"></text></g><g><title>type_collecting (2,072,433 samples, 2.26%)</title><rect x="63.2810%" y="181" width="2.2584%" height="15" fill="rgb(213,199,42)"/><text x="63.5310%" y="191.50">t..</text></g><g><title>collect_mod_item_types (2,059,333 samples, 2.24%)</title><rect x="63.2952%" y="165" width="2.2441%" height="15" fill="rgb(235,201,11)"/><text x="63.5452%" y="175.50">c..</text></g><g><title>type_of (149,001 samples, 0.16%)</title><rect x="65.3770%" y="149" width="0.1624%" height="15" fill="rgb(207,46,11)"/><text x="65.6270%" y="159.50"></text></g><g><title>evaluate_obligation (207,971 samples, 0.23%)</title><rect x="65.9325%" y="149" width="0.2266%" height="15" fill="rgb(241,35,35)"/><text x="66.1825%" y="159.50"></text></g><g><title>check_impl_item_well_formed (695,630 samples, 0.76%)</title><rect x="65.6088%" y="165" width="0.7581%" height="15" fill="rgb(243,32,47)"/><text x="65.8588%" y="175.50"></text></g><g><title>region_scope_tree (98,752 samples, 0.11%)</title><rect x="66.2592%" y="149" width="0.1076%" height="15" fill="rgb(247,202,23)"/><text x="66.5092%" y="159.50"></text></g><g><title>evaluate_obligation (119,790 samples, 0.13%)</title><rect x="66.9583%" y="149" width="0.1305%" height="15" fill="rgb(219,102,11)"/><text x="67.2083%" y="159.50"></text></g><g><title>implied_outlives_bounds (106,361 samples, 0.12%)</title><rect x="67.0943%" y="149" width="0.1159%" height="15" fill="rgb(243,110,44)"/><text x="67.3443%" y="159.50"></text></g><g><title>analysis (61,177,172 samples, 66.67%)</title><rect x="0.8458%" y="213" width="66.6674%" height="15" fill="rgb(222,74,54)"/><text x="1.0958%" y="223.50">analysis</text></g><g><title>type_check_crate (40,758,035 samples, 44.42%)</title><rect x="23.0974%" y="197" width="44.4158%" height="15" fill="rgb(216,99,12)"/><text x="23.3474%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,808,660 samples, 1.97%)</title><rect x="65.5422%" y="181" width="1.9710%" height="15" fill="rgb(226,22,26)"/><text x="65.7922%" y="191.50">w..</text></g><g><title>check_item_well_formed (1,051,930 samples, 1.15%)</title><rect x="66.3668%" y="165" width="1.1463%" height="15" fill="rgb(217,163,10)"/><text x="66.6168%" y="175.50"></text></g><g><title>native_libraries (119,922 samples, 0.13%)</title><rect x="68.1083%" y="197" width="0.1307%" height="15" fill="rgb(213,25,53)"/><text x="68.3583%" y="207.50"></text></g><g><title>metadata_decode_entry_native_libraries (114,012 samples, 0.12%)</title><rect x="68.1148%" y="181" width="0.1242%" height="15" fill="rgb(252,105,26)"/><text x="68.3648%" y="191.50"></text></g><g><title>codegen_crate (675,568 samples, 0.74%)</title><rect x="67.5278%" y="213" width="0.7362%" height="15" fill="rgb(220,39,43)"/><text x="67.7778%" y="223.50"></text></g><g><title>AST_validation (151,311 samples, 0.16%)</title><rect x="68.5390%" y="197" width="0.1649%" height="15" fill="rgb(229,68,48)"/><text x="68.7890%" y="207.50"></text></g><g><title>crate_injection (94,711 samples, 0.10%)</title><rect x="68.7816%" y="197" width="0.1032%" height="15" fill="rgb(252,8,32)"/><text x="69.0316%" y="207.50"></text></g><g><title>metadata_load_macro (461,764 samples, 0.50%)</title><rect x="80.2288%" y="165" width="0.5032%" height="15" fill="rgb(223,20,43)"/><text x="80.4788%" y="175.50"></text></g><g><title>macro_expand_crate (11,110,155 samples, 12.11%)</title><rect x="68.8848%" y="197" width="12.1072%" height="15" fill="rgb(229,81,49)"/><text x="69.1348%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (11,081,424 samples, 12.08%)</title><rect x="68.9161%" y="181" width="12.0759%" height="15" fill="rgb(236,28,36)"/><text x="69.1661%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (238,593 samples, 0.26%)</title><rect x="80.7320%" y="165" width="0.2600%" height="15" fill="rgb(249,185,26)"/><text x="80.9820%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (237,363 samples, 0.26%)</title><rect x="80.9977%" y="197" width="0.2587%" height="15" fill="rgb(249,174,33)"/><text x="81.2477%" y="207.50"></text></g><g><title>finalize_macro_resolutions (239,893 samples, 0.26%)</title><rect x="81.3016%" y="181" width="0.2614%" height="15" fill="rgb(233,201,37)"/><text x="81.5516%" y="191.50"></text></g><g><title>late_resolve_crate (5,598,072 samples, 6.10%)</title><rect x="81.5630%" y="181" width="6.1005%" height="15" fill="rgb(221,78,26)"/><text x="81.8130%" y="191.50">late_res..</text></g><g><title>metadata_register_crate (2,398,828 samples, 2.61%)</title><rect x="85.0494%" y="165" width="2.6141%" height="15" fill="rgb(250,127,30)"/><text x="85.2994%" y="175.50">me..</text></g><g><title>metadata_register_crate (1,857,221 samples, 2.02%)</title><rect x="85.6396%" y="149" width="2.0239%" height="15" fill="rgb(230,49,44)"/><text x="85.8896%" y="159.50">m..</text></g><g><title>metadata_register_crate (767,349 samples, 0.84%)</title><rect x="86.8273%" y="133" width="0.8362%" height="15" fill="rgb(229,67,23)"/><text x="87.0773%" y="143.50"></text></g><g><title>configure_and_expand (17,922,460 samples, 19.53%)</title><rect x="68.2640%" y="213" width="19.5309%" height="15" fill="rgb(249,83,47)"/><text x="68.5140%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (6,000,077 samples, 6.54%)</title><rect x="81.2563%" y="197" width="6.5385%" height="15" fill="rgb(215,43,3)"/><text x="81.5063%" y="207.50">resolve_c..</text></g><g><title>drop_ast (170,992 samples, 0.19%)</title><rect x="87.7949%" y="213" width="0.1863%" height="15" fill="rgb(238,154,13)"/><text x="88.0449%" y="223.50"></text></g><g><title>early_lint_checks (415,935 samples, 0.45%)</title><rect x="88.0010%" y="213" width="0.4533%" height="15" fill="rgb(219,56,2)"/><text x="88.2510%" y="223.50"></text></g><g><title>free_global_ctxt (3,144,345 samples, 3.43%)</title><rect x="88.4543%" y="213" width="3.4265%" height="15" fill="rgb(233,0,4)"/><text x="88.7043%" y="223.50">fre..</text></g><g><title>generate_crate_metadata (599,386 samples, 0.65%)</title><rect x="91.8808%" y="213" width="0.6532%" height="15" fill="rgb(235,30,7)"/><text x="92.1308%" y="223.50"></text></g><g><title>hir_lowering (2,653,810 samples, 2.89%)</title><rect x="92.5340%" y="213" width="2.8920%" height="15" fill="rgb(250,79,13)"/><text x="92.7840%" y="223.50">hi..</text></g><g><title>parse_crate (2,651,100 samples, 2.89%)</title><rect x="95.4877%" y="213" width="2.8890%" height="15" fill="rgb(211,146,34)"/><text x="95.7377%" y="223.50">pa..</text></g><g><title>prepare_outputs (307,093 samples, 0.33%)</title><rect x="98.3863%" y="213" width="0.3347%" height="15" fill="rgb(228,22,38)"/><text x="98.6363%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (742,428 samples, 0.81%)</title><rect x="98.7209%" y="213" width="0.8091%" height="15" fill="rgb(235,168,5)"/><text x="98.9709%" y="223.50"></text></g><g><title>setup_global_ctxt (136,102 samples, 0.15%)</title><rect x="99.5438%" y="213" width="0.1483%" height="15" fill="rgb(221,155,16)"/><text x="99.7938%" y="223.50"></text></g><g><title>all (91,764,765 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (91,764,765 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (282,493 samples, 0.31%)</title><rect x="99.6922%" y="213" width="0.3078%" height="15" fill="rgb(234,103,6)"/><text x="99.9422%" y="223.50"></text></g></svg></svg>