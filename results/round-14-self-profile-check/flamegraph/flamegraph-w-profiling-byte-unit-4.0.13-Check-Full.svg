<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (167,113 samples, 0.11%)</title><rect x="11.2178%" y="117" width="0.1061%" height="15" fill="rgb(227,0,7)"/><text x="11.4678%" y="127.50"></text></g><g><title>codegen_fn_attrs (197,063 samples, 0.13%)</title><rect x="11.6155%" y="101" width="0.1252%" height="15" fill="rgb(217,0,24)"/><text x="11.8655%" y="111.50"></text></g><g><title>is_copy_raw (240,641 samples, 0.15%)</title><rect x="13.9315%" y="85" width="0.1528%" height="15" fill="rgb(221,193,54)"/><text x="14.1815%" y="95.50"></text></g><g><title>evaluate_obligation (206,011 samples, 0.13%)</title><rect x="13.9535%" y="69" width="0.1308%" height="15" fill="rgb(248,212,6)"/><text x="14.2035%" y="79.50"></text></g><g><title>adt_drop_tys (237,842 samples, 0.15%)</title><rect x="14.1460%" y="69" width="0.1511%" height="15" fill="rgb(208,68,35)"/><text x="14.3960%" y="79.50"></text></g><g><title>needs_drop_raw (950,200 samples, 0.60%)</title><rect x="14.0884%" y="85" width="0.6035%" height="15" fill="rgb(232,128,0)"/><text x="14.3384%" y="95.50"></text></g><g><title>is_copy_raw (621,597 samples, 0.39%)</title><rect x="14.2971%" y="69" width="0.3948%" height="15" fill="rgb(207,160,47)"/><text x="14.5471%" y="79.50"></text></g><g><title>evaluate_obligation (527,604 samples, 0.34%)</title><rect x="14.3568%" y="53" width="0.3351%" height="15" fill="rgb(228,23,34)"/><text x="14.6068%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (204,552 samples, 0.13%)</title><rect x="14.8276%" y="69" width="0.1299%" height="15" fill="rgb(218,30,26)"/><text x="15.0776%" y="79.50"></text></g><g><title>impl_parent (198,401 samples, 0.13%)</title><rect x="15.3199%" y="53" width="0.1260%" height="15" fill="rgb(220,122,19)"/><text x="15.5699%" y="63.50"></text></g><g><title>specialization_graph_of (1,151,582 samples, 0.73%)</title><rect x="15.0128%" y="69" width="0.7314%" height="15" fill="rgb(250,228,42)"/><text x="15.2628%" y="79.50"></text></g><g><title>impl_trait_ref (469,665 samples, 0.30%)</title><rect x="15.4459%" y="53" width="0.2983%" height="15" fill="rgb(240,193,28)"/><text x="15.6959%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (404,724 samples, 0.26%)</title><rect x="15.4872%" y="37" width="0.2570%" height="15" fill="rgb(216,20,37)"/><text x="15.7372%" y="47.50"></text></g><g><title>resolve_instance (1,695,409 samples, 1.08%)</title><rect x="14.7084%" y="85" width="1.0768%" height="15" fill="rgb(206,188,39)"/><text x="14.9584%" y="95.50"></text></g><g><title>thir_body (1,299,394 samples, 0.83%)</title><rect x="15.8001%" y="85" width="0.8253%" height="15" fill="rgb(217,207,13)"/><text x="16.0501%" y="95.50"></text></g><g><title>mir_const (9,400,405 samples, 5.97%)</title><rect x="10.6629%" y="133" width="5.9704%" height="15" fill="rgb(231,73,38)"/><text x="10.9129%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,359,593 samples, 5.31%)</title><rect x="11.3239%" y="117" width="5.3093%" height="15" fill="rgb(225,20,46)"/><text x="11.5739%" y="127.50">unsafe..</text></g><g><title>mir_built (7,703,515 samples, 4.89%)</title><rect x="11.7406%" y="101" width="4.8927%" height="15" fill="rgb(210,31,41)"/><text x="11.9906%" y="111.50">mir_bu..</text></g><g><title>mir_const (901,089 samples, 0.57%)</title><rect x="16.8035%" y="117" width="0.5723%" height="15" fill="rgb(221,200,47)"/><text x="17.0535%" y="127.50"></text></g><g><title>unsafety_check_result (686,696 samples, 0.44%)</title><rect x="16.9397%" y="101" width="0.4361%" height="15" fill="rgb(226,26,5)"/><text x="17.1897%" y="111.50"></text></g><g><title>mir_built (592,484 samples, 0.38%)</title><rect x="16.9995%" y="85" width="0.3763%" height="15" fill="rgb(249,33,26)"/><text x="17.2495%" y="95.50"></text></g><g><title>mir_promoted (11,662,092 samples, 7.41%)</title><rect x="9.9698%" y="149" width="7.4068%" height="15" fill="rgb(235,183,28)"/><text x="10.2198%" y="159.50">mir_promot..</text></g><g><title>mir_const_qualif (1,170,430 samples, 0.74%)</title><rect x="16.6333%" y="133" width="0.7434%" height="15" fill="rgb(221,5,38)"/><text x="16.8833%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (476,184 samples, 0.30%)</title><rect x="17.3769%" y="149" width="0.3024%" height="15" fill="rgb(247,18,42)"/><text x="17.6269%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (435,963 samples, 0.28%)</title><rect x="17.6793%" y="149" width="0.2769%" height="15" fill="rgb(241,131,45)"/><text x="17.9293%" y="159.50"></text></g><g><title>normalize_projection_ty (305,832 samples, 0.19%)</title><rect x="17.7619%" y="133" width="0.1942%" height="15" fill="rgb(249,31,29)"/><text x="18.0119%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,633,009 samples, 1.04%)</title><rect x="18.0750%" y="149" width="1.0372%" height="15" fill="rgb(225,111,53)"/><text x="18.3250%" y="159.50"></text></g><g><title>MIR_borrow_checking (28,965,320 samples, 18.40%)</title><rect x="0.7235%" y="181" width="18.3964%" height="15" fill="rgb(238,160,17)"/><text x="0.9735%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (28,811,787 samples, 18.30%)</title><rect x="0.8210%" y="165" width="18.2989%" height="15" fill="rgb(214,148,48)"/><text x="1.0710%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (541,416 samples, 0.34%)</title><rect x="19.1200%" y="181" width="0.3439%" height="15" fill="rgb(232,36,49)"/><text x="19.3700%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (453,965 samples, 0.29%)</title><rect x="19.1755%" y="165" width="0.2883%" height="15" fill="rgb(209,103,24)"/><text x="19.4255%" y="175.50"></text></g><g><title>hir_module_items (218,490 samples, 0.14%)</title><rect x="19.4638%" y="181" width="0.1388%" height="15" fill="rgb(229,88,8)"/><text x="19.7138%" y="191.50"></text></g><g><title>codegen_fn_attrs (221,875 samples, 0.14%)</title><rect x="19.9331%" y="117" width="0.1409%" height="15" fill="rgb(213,181,19)"/><text x="20.1831%" y="127.50"></text></g><g><title>codegen_fn_attrs (385,595 samples, 0.24%)</title><rect x="19.8336%" y="149" width="0.2449%" height="15" fill="rgb(254,191,54)"/><text x="20.0836%" y="159.50"></text></g><g><title>should_inherit_track_caller (327,025 samples, 0.21%)</title><rect x="19.8708%" y="133" width="0.2077%" height="15" fill="rgb(241,83,37)"/><text x="20.1208%" y="143.50"></text></g><g><title>check_mod_attrs (712,859 samples, 0.45%)</title><rect x="19.6258%" y="165" width="0.4528%" height="15" fill="rgb(233,36,39)"/><text x="19.8758%" y="175.50"></text></g><g><title>lookup_deprecation_entry (190,572 samples, 0.12%)</title><rect x="20.3665%" y="149" width="0.1210%" height="15" fill="rgb(226,3,54)"/><text x="20.6165%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (504,816 samples, 0.32%)</title><rect x="20.2308%" y="165" width="0.3206%" height="15" fill="rgb(245,192,40)"/><text x="20.4808%" y="175.50"></text></g><g><title>misc_checking_1 (1,559,387 samples, 0.99%)</title><rect x="19.6028%" y="181" width="0.9904%" height="15" fill="rgb(238,167,29)"/><text x="19.8528%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (498,665 samples, 0.32%)</title><rect x="20.5943%" y="165" width="0.3167%" height="15" fill="rgb(232,182,51)"/><text x="20.8443%" y="175.50"></text></g><g><title>check_mod_liveness (373,895 samples, 0.24%)</title><rect x="20.6735%" y="149" width="0.2375%" height="15" fill="rgb(231,60,39)"/><text x="20.9235%" y="159.50"></text></g><g><title>misc_checking_2 (1,309,574 samples, 0.83%)</title><rect x="20.5932%" y="181" width="0.8317%" height="15" fill="rgb(208,69,12)"/><text x="20.8432%" y="191.50"></text></g><g><title>match_checking (809,239 samples, 0.51%)</title><rect x="20.9110%" y="165" width="0.5140%" height="15" fill="rgb(235,93,37)"/><text x="21.1610%" y="175.50"></text></g><g><title>check_match (770,739 samples, 0.49%)</title><rect x="20.9355%" y="149" width="0.4895%" height="15" fill="rgb(213,116,39)"/><text x="21.1855%" y="159.50"></text></g><g><title>check_private_in_public (250,923 samples, 0.16%)</title><rect x="21.4317%" y="165" width="0.1594%" height="15" fill="rgb(222,207,29)"/><text x="21.6817%" y="175.50"></text></g><g><title>death_checking (687,818 samples, 0.44%)</title><rect x="21.5910%" y="165" width="0.4368%" height="15" fill="rgb(206,96,30)"/><text x="21.8410%" y="175.50"></text></g><g><title>item_attrs (211,953 samples, 0.13%)</title><rect x="21.8933%" y="149" width="0.1346%" height="15" fill="rgb(218,138,4)"/><text x="22.1433%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (209,693 samples, 0.13%)</title><rect x="21.8947%" y="133" width="0.1332%" height="15" fill="rgb(250,191,14)"/><text x="22.1447%" y="143.50"></text></g><g><title>eval_to_const_value_raw (258,903 samples, 0.16%)</title><rect x="22.7414%" y="133" width="0.1644%" height="15" fill="rgb(239,60,40)"/><text x="22.9914%" y="143.50"></text></g><g><title>eval_to_const_value_raw (250,612 samples, 0.16%)</title><rect x="22.7466%" y="117" width="0.1592%" height="15" fill="rgb(206,27,48)"/><text x="22.9966%" y="127.50"></text></g><g><title>eval_to_allocation_raw (235,322 samples, 0.15%)</title><rect x="22.7563%" y="101" width="0.1495%" height="15" fill="rgb(225,35,8)"/><text x="23.0063%" y="111.50"></text></g><g><title>param_env (349,044 samples, 0.22%)</title><rect x="22.9058%" y="133" width="0.2217%" height="15" fill="rgb(250,213,24)"/><text x="23.1558%" y="143.50"></text></g><g><title>crate_lints (2,849,162 samples, 1.81%)</title><rect x="22.0290%" y="149" width="1.8096%" height="15" fill="rgb(247,123,22)"/><text x="22.2790%" y="159.50">c..</text></g><g><title>type_of (1,114,543 samples, 0.71%)</title><rect x="23.1307%" y="133" width="0.7079%" height="15" fill="rgb(231,138,38)"/><text x="23.3807%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (885,693 samples, 0.56%)</title><rect x="23.2760%" y="117" width="0.5625%" height="15" fill="rgb(231,145,46)"/><text x="23.5260%" y="127.50"></text></g><g><title>lint_checking (3,543,179 samples, 2.25%)</title><rect x="22.0279%" y="165" width="2.2503%" height="15" fill="rgb(251,118,11)"/><text x="22.2779%" y="175.50">l..</text></g><g><title>module_lints (692,267 samples, 0.44%)</title><rect x="23.8386%" y="149" width="0.4397%" height="15" fill="rgb(217,147,25)"/><text x="24.0886%" y="159.50"></text></g><g><title>lint_mod (684,357 samples, 0.43%)</title><rect x="23.8436%" y="133" width="0.4346%" height="15" fill="rgb(247,81,37)"/><text x="24.0936%" y="143.50"></text></g><g><title>privacy_access_levels (355,244 samples, 0.23%)</title><rect x="24.2782%" y="165" width="0.2256%" height="15" fill="rgb(209,12,38)"/><text x="24.5282%" y="175.50"></text></g><g><title>privacy_checking_modules (944,911 samples, 0.60%)</title><rect x="24.5038%" y="165" width="0.6001%" height="15" fill="rgb(227,1,9)"/><text x="24.7538%" y="175.50"></text></g><g><title>check_mod_privacy (939,511 samples, 0.60%)</title><rect x="24.5073%" y="149" width="0.5967%" height="15" fill="rgb(248,47,43)"/><text x="24.7573%" y="159.50"></text></g><g><title>misc_checking_3 (5,810,795 samples, 3.69%)</title><rect x="21.4250%" y="181" width="3.6905%" height="15" fill="rgb(221,10,30)"/><text x="21.6750%" y="191.50">misc..</text></g><g><title>impl_trait_ref (158,963 samples, 0.10%)</title><rect x="25.4541%" y="85" width="0.1010%" height="15" fill="rgb(210,229,1)"/><text x="25.7041%" y="95.50"></text></g><g><title>adt_destructor (318,813 samples, 0.20%)</title><rect x="25.3693%" y="133" width="0.2025%" height="15" fill="rgb(222,148,37)"/><text x="25.6193%" y="143.50"></text></g><g><title>coherent_trait (309,983 samples, 0.20%)</title><rect x="25.3749%" y="117" width="0.1969%" height="15" fill="rgb(234,67,33)"/><text x="25.6249%" y="127.50"></text></g><g><title>specialization_graph_of (308,773 samples, 0.20%)</title><rect x="25.3757%" y="101" width="0.1961%" height="15" fill="rgb(247,98,35)"/><text x="25.6257%" y="111.50"></text></g><g><title>impl_parent (2,929,263 samples, 1.86%)</title><rect x="28.7948%" y="117" width="1.8604%" height="15" fill="rgb(247,138,52)"/><text x="29.0448%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,687,689 samples, 1.07%)</title><rect x="29.5834%" y="101" width="1.0719%" height="15" fill="rgb(213,79,30)"/><text x="29.8334%" y="111.50"></text></g><g><title>impl_trait_ref (6,131,840 samples, 3.89%)</title><rect x="30.6561%" y="117" width="3.8945%" height="15" fill="rgb(246,177,23)"/><text x="30.9061%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,700,079 samples, 2.99%)</title><rect x="31.5654%" y="101" width="2.9851%" height="15" fill="rgb(230,62,27)"/><text x="31.8154%" y="111.50">met..</text></g><g><title>trait_impls_of (1,057,500 samples, 0.67%)</title><rect x="34.6288%" y="117" width="0.6716%" height="15" fill="rgb(216,154,8)"/><text x="34.8788%" y="127.50"></text></g><g><title>implementations_of_trait (310,712 samples, 0.20%)</title><rect x="35.1030%" y="101" width="0.1973%" height="15" fill="rgb(244,35,45)"/><text x="35.3530%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (239,022 samples, 0.15%)</title><rect x="35.1486%" y="85" width="0.1518%" height="15" fill="rgb(251,115,12)"/><text x="35.3986%" y="95.50"></text></g><g><title>coherent_trait (15,692,993 samples, 9.97%)</title><rect x="25.3344%" y="149" width="9.9669%" height="15" fill="rgb(240,54,50)"/><text x="25.5844%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (15,182,287 samples, 9.64%)</title><rect x="25.6588%" y="133" width="9.6426%" height="15" fill="rgb(233,84,52)"/><text x="25.9088%" y="143.50">specialization..</text></g><g><title>coherence_checking (16,036,267 samples, 10.18%)</title><rect x="25.1754%" y="165" width="10.1849%" height="15" fill="rgb(207,117,47)"/><text x="25.4254%" y="175.50">coherence_check..</text></g><g><title>adt_def (463,785 samples, 0.29%)</title><rect x="52.1100%" y="101" width="0.2946%" height="15" fill="rgb(249,43,39)"/><text x="52.3600%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (460,655 samples, 0.29%)</title><rect x="52.1120%" y="85" width="0.2926%" height="15" fill="rgb(209,38,44)"/><text x="52.3620%" y="95.50"></text></g><g><title>item_attrs (421,335 samples, 0.27%)</title><rect x="52.1370%" y="69" width="0.2676%" height="15" fill="rgb(236,212,23)"/><text x="52.3870%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (417,515 samples, 0.27%)</title><rect x="52.1394%" y="53" width="0.2652%" height="15" fill="rgb(242,79,21)"/><text x="52.3894%" y="63.50"></text></g><g><title>adt_sized_constraint (503,715 samples, 0.32%)</title><rect x="52.1004%" y="117" width="0.3199%" height="15" fill="rgb(211,96,35)"/><text x="52.3504%" y="127.50"></text></g><g><title>associated_item (635,653 samples, 0.40%)</title><rect x="52.5556%" y="101" width="0.4037%" height="15" fill="rgb(253,215,40)"/><text x="52.8056%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (510,152 samples, 0.32%)</title><rect x="52.6353%" y="85" width="0.3240%" height="15" fill="rgb(211,81,21)"/><text x="52.8853%" y="95.50"></text></g><g><title>associated_items (880,409 samples, 0.56%)</title><rect x="52.4265%" y="117" width="0.5592%" height="15" fill="rgb(208,190,38)"/><text x="52.6765%" y="127.50"></text></g><g><title>adt_dtorck_constraint (164,542 samples, 0.10%)</title><rect x="53.2101%" y="85" width="0.1045%" height="15" fill="rgb(235,213,38)"/><text x="53.4601%" y="95.50"></text></g><g><title>dropck_outlives (472,945 samples, 0.30%)</title><rect x="53.0300%" y="117" width="0.3004%" height="15" fill="rgb(237,122,38)"/><text x="53.2800%" y="127.50"></text></g><g><title>adt_dtorck_constraint (306,542 samples, 0.19%)</title><rect x="53.1357%" y="101" width="0.1947%" height="15" fill="rgb(244,218,35)"/><text x="53.3857%" y="111.50"></text></g><g><title>adt_sized_constraint (225,483 samples, 0.14%)</title><rect x="54.4292%" y="101" width="0.1432%" height="15" fill="rgb(240,68,47)"/><text x="54.6792%" y="111.50"></text></g><g><title>predicates_of (255,984 samples, 0.16%)</title><rect x="54.7378%" y="101" width="0.1626%" height="15" fill="rgb(210,16,53)"/><text x="54.9878%" y="111.50"></text></g><g><title>specializes (281,810 samples, 0.18%)</title><rect x="54.9003%" y="101" width="0.1790%" height="15" fill="rgb(235,124,12)"/><text x="55.1503%" y="111.50"></text></g><g><title>param_env (182,460 samples, 0.12%)</title><rect x="54.9634%" y="85" width="0.1159%" height="15" fill="rgb(224,169,11)"/><text x="55.2134%" y="95.50"></text></g><g><title>trait_impls_of (323,982 samples, 0.21%)</title><rect x="55.0883%" y="101" width="0.2058%" height="15" fill="rgb(250,166,2)"/><text x="55.3383%" y="111.50"></text></g><g><title>evaluate_obligation (3,097,593 samples, 1.97%)</title><rect x="53.3304%" y="117" width="1.9673%" height="15" fill="rgb(242,216,29)"/><text x="53.5804%" y="127.50">e..</text></g><g><title>item_attrs (188,674 samples, 0.12%)</title><rect x="55.6481%" y="117" width="0.1198%" height="15" fill="rgb(230,116,27)"/><text x="55.8981%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (179,304 samples, 0.11%)</title><rect x="55.6541%" y="101" width="0.1139%" height="15" fill="rgb(228,99,48)"/><text x="55.9041%" y="111.50"></text></g><g><title>lookup_deprecation_entry (245,473 samples, 0.16%)</title><rect x="55.7853%" y="117" width="0.1559%" height="15" fill="rgb(253,11,6)"/><text x="56.0353%" y="127.50"></text></g><g><title>method_autoderef_steps (226,531 samples, 0.14%)</title><rect x="55.9645%" y="117" width="0.1439%" height="15" fill="rgb(247,143,39)"/><text x="56.2145%" y="127.50"></text></g><g><title>predicates_of (368,776 samples, 0.23%)</title><rect x="56.2448%" y="117" width="0.2342%" height="15" fill="rgb(236,97,10)"/><text x="56.4948%" y="127.50"></text></g><g><title>predicates_defined_on (255,343 samples, 0.16%)</title><rect x="56.3168%" y="101" width="0.1622%" height="15" fill="rgb(233,208,19)"/><text x="56.5668%" y="111.50"></text></g><g><title>item_bodies_checking (33,431,370 samples, 21.23%)</title><rect x="35.3884%" y="165" width="21.2329%" height="15" fill="rgb(216,164,2)"/><text x="35.6384%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (33,428,320 samples, 21.23%)</title><rect x="35.3903%" y="149" width="21.2310%" height="15" fill="rgb(220,129,5)"/><text x="35.6403%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (33,334,109 samples, 21.17%)</title><rect x="35.4502%" y="133" width="21.1711%" height="15" fill="rgb(242,17,10)"/><text x="35.7002%" y="143.50">typeck</text></g><g><title>generics_of (489,935 samples, 0.31%)</title><rect x="59.6178%" y="101" width="0.3112%" height="15" fill="rgb(242,107,0)"/><text x="59.8678%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (351,523 samples, 0.22%)</title><rect x="59.7057%" y="85" width="0.2233%" height="15" fill="rgb(251,28,31)"/><text x="59.9557%" y="95.50"></text></g><g><title>impl_trait_ref (889,097 samples, 0.56%)</title><rect x="60.0050%" y="101" width="0.5647%" height="15" fill="rgb(233,223,10)"/><text x="60.2550%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (748,477 samples, 0.48%)</title><rect x="60.0943%" y="85" width="0.4754%" height="15" fill="rgb(215,21,27)"/><text x="60.3443%" y="95.50"></text></g><g><title>predicates_of (626,328 samples, 0.40%)</title><rect x="60.5907%" y="101" width="0.3978%" height="15" fill="rgb(232,23,21)"/><text x="60.8407%" y="111.50"></text></g><g><title>predicates_defined_on (342,066 samples, 0.22%)</title><rect x="60.7713%" y="85" width="0.2173%" height="15" fill="rgb(244,5,23)"/><text x="61.0213%" y="95.50"></text></g><g><title>specializes (1,936,675 samples, 1.23%)</title><rect x="60.9885%" y="101" width="1.2300%" height="15" fill="rgb(226,81,46)"/><text x="61.2385%" y="111.50"></text></g><g><title>param_env (1,152,782 samples, 0.73%)</title><rect x="61.4864%" y="85" width="0.7322%" height="15" fill="rgb(247,70,30)"/><text x="61.7364%" y="95.50"></text></g><g><title>def_span (539,026 samples, 0.34%)</title><rect x="61.8762%" y="69" width="0.3423%" height="15" fill="rgb(212,68,19)"/><text x="62.1262%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (479,274 samples, 0.30%)</title><rect x="61.9141%" y="53" width="0.3044%" height="15" fill="rgb(240,187,13)"/><text x="62.1641%" y="63.50"></text></g><g><title>evaluate_obligation (6,366,721 samples, 4.04%)</title><rect x="58.2291%" y="117" width="4.0436%" height="15" fill="rgb(223,113,26)"/><text x="58.4791%" y="127.50">eval..</text></g><g><title>specializes (166,822 samples, 0.11%)</title><rect x="62.3066%" y="117" width="0.1060%" height="15" fill="rgb(206,192,2)"/><text x="62.5566%" y="127.50"></text></g><g><title>item_types_checking (9,141,001 samples, 5.81%)</title><rect x="56.6213%" y="165" width="5.8056%" height="15" fill="rgb(241,108,4)"/><text x="56.8713%" y="175.50">item_ty..</text></g><g><title>check_mod_item_types (9,133,161 samples, 5.80%)</title><rect x="56.6263%" y="149" width="5.8006%" height="15" fill="rgb(247,173,49)"/><text x="56.8763%" y="159.50">check_m..</text></g><g><title>typeck (7,908,807 samples, 5.02%)</title><rect x="57.4039%" y="133" width="5.0230%" height="15" fill="rgb(224,114,35)"/><text x="57.6539%" y="143.50">typeck</text></g><g><title>fn_sig (481,203 samples, 0.31%)</title><rect x="62.6565%" y="133" width="0.3056%" height="15" fill="rgb(245,159,27)"/><text x="62.9065%" y="143.50"></text></g><g><title>named_region_map (568,799 samples, 0.36%)</title><rect x="63.0577%" y="117" width="0.3613%" height="15" fill="rgb(245,172,44)"/><text x="63.3077%" y="127.50"></text></g><g><title>resolve_lifetimes (546,649 samples, 0.35%)</title><rect x="63.0718%" y="101" width="0.3472%" height="15" fill="rgb(236,23,11)"/><text x="63.3218%" y="111.50"></text></g><g><title>lint_levels (229,492 samples, 0.15%)</title><rect x="63.2732%" y="85" width="0.1458%" height="15" fill="rgb(205,117,38)"/><text x="63.5232%" y="95.50"></text></g><g><title>generics_of (736,663 samples, 0.47%)</title><rect x="62.9621%" y="133" width="0.4679%" height="15" fill="rgb(237,72,25)"/><text x="63.2121%" y="143.50"></text></g><g><title>predicates_of (446,741 samples, 0.28%)</title><rect x="63.4918%" y="133" width="0.2837%" height="15" fill="rgb(244,70,9)"/><text x="63.7418%" y="143.50"></text></g><g><title>predicates_defined_on (378,771 samples, 0.24%)</title><rect x="63.5349%" y="117" width="0.2406%" height="15" fill="rgb(217,125,39)"/><text x="63.7849%" y="127.50"></text></g><g><title>type_collecting (2,231,195 samples, 1.42%)</title><rect x="62.4287%" y="165" width="1.4171%" height="15" fill="rgb(235,36,10)"/><text x="62.6787%" y="175.50"></text></g><g><title>collect_mod_item_types (2,216,435 samples, 1.41%)</title><rect x="62.4381%" y="149" width="1.4077%" height="15" fill="rgb(251,123,47)"/><text x="62.6881%" y="159.50"></text></g><g><title>evaluate_obligation (270,552 samples, 0.17%)</title><rect x="64.9623%" y="133" width="0.1718%" height="15" fill="rgb(221,13,13)"/><text x="65.2123%" y="143.50"></text></g><g><title>param_env (230,143 samples, 0.15%)</title><rect x="65.2124%" y="133" width="0.1462%" height="15" fill="rgb(238,131,9)"/><text x="65.4624%" y="143.50"></text></g><g><title>region_scope_tree (462,455 samples, 0.29%)</title><rect x="65.3885%" y="133" width="0.2937%" height="15" fill="rgb(211,50,8)"/><text x="65.6385%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,666,541 samples, 1.69%)</title><rect x="63.9978%" y="149" width="1.6936%" height="15" fill="rgb(245,182,24)"/><text x="64.2478%" y="159.50"></text></g><g><title>evaluate_obligation (483,354 samples, 0.31%)</title><rect x="66.6970%" y="133" width="0.3070%" height="15" fill="rgb(242,14,37)"/><text x="66.9470%" y="143.50"></text></g><g><title>param_env (307,776 samples, 0.20%)</title><rect x="67.0642%" y="133" width="0.1955%" height="15" fill="rgb(246,228,12)"/><text x="67.3142%" y="143.50"></text></g><g><title>region_scope_tree (181,283 samples, 0.12%)</title><rect x="67.3247%" y="133" width="0.1151%" height="15" fill="rgb(213,55,15)"/><text x="67.5747%" y="143.50"></text></g><g><title>analysis (105,473,626 samples, 66.99%)</title><rect x="0.4928%" y="197" width="66.9883%" height="15" fill="rgb(209,9,3)"/><text x="0.7428%" y="207.50">analysis</text></g><g><title>type_check_crate (66,704,957 samples, 42.37%)</title><rect x="25.1155%" y="181" width="42.3656%" height="15" fill="rgb(230,59,30)"/><text x="25.3655%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,716,562 samples, 3.63%)</title><rect x="63.8504%" y="165" width="3.6307%" height="15" fill="rgb(209,121,21)"/><text x="64.1004%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (2,818,007 samples, 1.79%)</title><rect x="65.6914%" y="149" width="1.7898%" height="15" fill="rgb(220,109,13)"/><text x="65.9414%" y="159.50">c..</text></g><g><title>codegen_crate (411,784 samples, 0.26%)</title><rect x="67.4875%" y="197" width="0.2615%" height="15" fill="rgb(232,18,1)"/><text x="67.7375%" y="207.50"></text></g><g><title>AST_validation (170,562 samples, 0.11%)</title><rect x="67.8848%" y="181" width="0.1083%" height="15" fill="rgb(215,41,42)"/><text x="68.1348%" y="191.50"></text></g><g><title>metadata_load_macro (230,233 samples, 0.15%)</title><rect x="88.1986%" y="149" width="0.1462%" height="15" fill="rgb(224,123,36)"/><text x="88.4486%" y="159.50"></text></g><g><title>metadata_register_crate (2,722,120 samples, 1.73%)</title><rect x="88.3449%" y="149" width="1.7289%" height="15" fill="rgb(240,125,3)"/><text x="88.5949%" y="159.50"></text></g><g><title>metadata_register_crate (1,009,310 samples, 0.64%)</title><rect x="89.4327%" y="133" width="0.6410%" height="15" fill="rgb(205,98,50)"/><text x="89.6827%" y="143.50"></text></g><g><title>macro_expand_crate (35,297,240 samples, 22.42%)</title><rect x="68.1050%" y="181" width="22.4180%" height="15" fill="rgb(205,185,37)"/><text x="68.3550%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (35,283,439 samples, 22.41%)</title><rect x="68.1137%" y="165" width="22.4092%" height="15" fill="rgb(238,207,15)"/><text x="68.3637%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (707,267 samples, 0.45%)</title><rect x="90.0737%" y="149" width="0.4492%" height="15" fill="rgb(213,199,42)"/><text x="90.3237%" y="159.50"></text></g><g><title>finalize_macro_resolutions (210,173 samples, 0.13%)</title><rect x="90.6058%" y="165" width="0.1335%" height="15" fill="rgb(235,201,11)"/><text x="90.8558%" y="175.50"></text></g><g><title>late_resolve_crate (2,103,423 samples, 1.34%)</title><rect x="90.7393%" y="165" width="1.3359%" height="15" fill="rgb(207,46,11)"/><text x="90.9893%" y="175.50"></text></g><g><title>configure_and_expand (38,447,665 samples, 24.42%)</title><rect x="67.7490%" y="197" width="24.4189%" height="15" fill="rgb(241,35,35)"/><text x="67.9990%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,535,829 samples, 1.61%)</title><rect x="90.5573%" y="181" width="1.6106%" height="15" fill="rgb(243,32,47)"/><text x="90.8073%" y="191.50"></text></g><g><title>drop_ast (283,584 samples, 0.18%)</title><rect x="92.1678%" y="197" width="0.1801%" height="15" fill="rgb(247,202,23)"/><text x="92.4178%" y="207.50"></text></g><g><title>early_lint_checks (498,075 samples, 0.32%)</title><rect x="92.3593%" y="197" width="0.3163%" height="15" fill="rgb(219,102,11)"/><text x="92.6093%" y="207.50"></text></g><g><title>free_global_ctxt (3,922,583 samples, 2.49%)</title><rect x="92.6757%" y="197" width="2.4913%" height="15" fill="rgb(243,110,44)"/><text x="92.9257%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,562,447 samples, 0.99%)</title><rect x="95.1670%" y="197" width="0.9923%" height="15" fill="rgb(222,74,54)"/><text x="95.4170%" y="207.50"></text></g><g><title>hir_lowering (3,838,672 samples, 2.44%)</title><rect x="96.1593%" y="197" width="2.4380%" height="15" fill="rgb(216,99,12)"/><text x="96.4093%" y="207.50">hi..</text></g><g><title>parse_crate (398,845 samples, 0.25%)</title><rect x="98.6314%" y="197" width="0.2533%" height="15" fill="rgb(226,22,26)"/><text x="98.8814%" y="207.50"></text></g><g><title>prepare_outputs (197,642 samples, 0.13%)</title><rect x="98.8908%" y="197" width="0.1255%" height="15" fill="rgb(217,163,10)"/><text x="99.1408%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,104,362 samples, 0.70%)</title><rect x="99.0163%" y="197" width="0.7014%" height="15" fill="rgb(213,25,53)"/><text x="99.2663%" y="207.50"></text></g><g><title>all (157,450,710 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (157,450,710 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (348,594 samples, 0.22%)</title><rect x="99.7786%" y="197" width="0.2214%" height="15" fill="rgb(229,68,48)"/><text x="100.0286%" y="207.50"></text></g></svg></svg>