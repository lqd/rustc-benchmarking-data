<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (292,803 samples, 0.21%)</title><rect x="9.8315%" y="165" width="0.2115%" height="15" fill="rgb(227,0,7)"/><text x="10.0815%" y="175.50"></text></g><g><title>item_attrs (214,072 samples, 0.15%)</title><rect x="10.3467%" y="133" width="0.1547%" height="15" fill="rgb(217,0,24)"/><text x="10.5967%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (205,422 samples, 0.15%)</title><rect x="10.3530%" y="117" width="0.1484%" height="15" fill="rgb(221,193,54)"/><text x="10.6030%" y="127.50"></text></g><g><title>codegen_fn_attrs (311,433 samples, 0.22%)</title><rect x="10.2911%" y="149" width="0.2250%" height="15" fill="rgb(248,212,6)"/><text x="10.5411%" y="159.50"></text></g><g><title>adt_drop_tys (292,822 samples, 0.21%)</title><rect x="12.7479%" y="101" width="0.2115%" height="15" fill="rgb(208,68,35)"/><text x="12.9979%" y="111.50"></text></g><g><title>adt_drop_tys (567,227 samples, 0.41%)</title><rect x="12.7171%" y="117" width="0.4098%" height="15" fill="rgb(232,128,0)"/><text x="12.9671%" y="127.50"></text></g><g><title>is_copy_raw (956,750 samples, 0.69%)</title><rect x="13.1269%" y="117" width="0.6912%" height="15" fill="rgb(207,160,47)"/><text x="13.3769%" y="127.50"></text></g><g><title>evaluate_obligation (616,446 samples, 0.45%)</title><rect x="13.3728%" y="101" width="0.4453%" height="15" fill="rgb(228,23,34)"/><text x="13.6228%" y="111.50"></text></g><g><title>needs_drop_raw (1,626,978 samples, 1.18%)</title><rect x="12.6436%" y="133" width="1.1754%" height="15" fill="rgb(218,30,26)"/><text x="12.8936%" y="143.50"></text></g><g><title>impl_parent (1,274,026 samples, 0.92%)</title><rect x="15.2529%" y="101" width="0.9204%" height="15" fill="rgb(220,122,19)"/><text x="15.5029%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (817,728 samples, 0.59%)</title><rect x="15.5826%" y="85" width="0.5908%" height="15" fill="rgb(250,228,42)"/><text x="15.8326%" y="95.50"></text></g><g><title>specialization_graph_of (6,895,197 samples, 4.98%)</title><rect x="13.9873%" y="117" width="4.9814%" height="15" fill="rgb(240,193,28)"/><text x="14.2373%" y="127.50">specia..</text></g><g><title>impl_trait_ref (3,869,284 samples, 2.80%)</title><rect x="16.1733%" y="101" width="2.7953%" height="15" fill="rgb(216,20,37)"/><text x="16.4233%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,405,487 samples, 2.46%)</title><rect x="16.5084%" y="85" width="2.4603%" height="15" fill="rgb(206,188,39)"/><text x="16.7584%" y="95.50">me..</text></g><g><title>resolve_instance (7,167,949 samples, 5.18%)</title><rect x="13.8190%" y="133" width="5.1784%" height="15" fill="rgb(217,207,13)"/><text x="14.0690%" y="143.50">resolv..</text></g><g><title>thir_body (1,137,514 samples, 0.82%)</title><rect x="19.0020%" y="133" width="0.8218%" height="15" fill="rgb(231,73,38)"/><text x="19.2520%" y="143.50"></text></g><g><title>mir_const (14,431,219 samples, 10.43%)</title><rect x="9.4056%" y="181" width="10.4257%" height="15" fill="rgb(225,20,46)"/><text x="9.6556%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (13,548,910 samples, 9.79%)</title><rect x="10.0430%" y="165" width="9.7883%" height="15" fill="rgb(210,31,41)"/><text x="10.2930%" y="175.50">unsafety_check..</text></g><g><title>mir_built (12,894,042 samples, 9.32%)</title><rect x="10.5161%" y="149" width="9.3152%" height="15" fill="rgb(221,200,47)"/><text x="10.7661%" y="159.50">mir_built</text></g><g><title>has_structural_eq_impls (144,651 samples, 0.10%)</title><rect x="19.8746%" y="165" width="0.1045%" height="15" fill="rgb(226,26,5)"/><text x="20.1246%" y="175.50"></text></g><g><title>mir_promoted (15,474,143 samples, 11.18%)</title><rect x="8.9650%" y="197" width="11.1791%" height="15" fill="rgb(249,33,26)"/><text x="9.2150%" y="207.50">mir_promoted</text></g><g><title>mir_const_qualif (433,095 samples, 0.31%)</title><rect x="19.8313%" y="181" width="0.3129%" height="15" fill="rgb(235,183,28)"/><text x="20.0813%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (417,494 samples, 0.30%)</title><rect x="20.2092%" y="197" width="0.3016%" height="15" fill="rgb(221,5,38)"/><text x="20.4592%" y="207.50"></text></g><g><title>normalize_projection_ty (274,873 samples, 0.20%)</title><rect x="20.3122%" y="181" width="0.1986%" height="15" fill="rgb(247,18,42)"/><text x="20.5622%" y="191.50"></text></g><g><title>type_op_normalize_predicate (182,083 samples, 0.13%)</title><rect x="20.5108%" y="197" width="0.1315%" height="15" fill="rgb(241,131,45)"/><text x="20.7608%" y="207.50"></text></g><g><title>type_op_prove_predicate (1,398,045 samples, 1.01%)</title><rect x="20.6486%" y="197" width="1.0100%" height="15" fill="rgb(249,31,29)"/><text x="20.8986%" y="207.50"></text></g><g><title>MIR_borrow_checking (29,100,221 samples, 21.02%)</title><rect x="0.6362%" y="229" width="21.0231%" height="15" fill="rgb(225,111,53)"/><text x="0.8862%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (29,068,941 samples, 21.00%)</title><rect x="0.6588%" y="213" width="21.0005%" height="15" fill="rgb(238,160,17)"/><text x="0.9088%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (189,872 samples, 0.14%)</title><rect x="21.9222%" y="197" width="0.1372%" height="15" fill="rgb(214,148,48)"/><text x="22.1722%" y="207.50"></text></g><g><title>check_mod_attrs (346,963 samples, 0.25%)</title><rect x="21.8088%" y="213" width="0.2507%" height="15" fill="rgb(232,36,49)"/><text x="22.0588%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (215,593 samples, 0.16%)</title><rect x="22.1326%" y="213" width="0.1558%" height="15" fill="rgb(209,103,24)"/><text x="22.3826%" y="223.50"></text></g><g><title>misc_checking_1 (702,597 samples, 0.51%)</title><rect x="21.7993%" y="229" width="0.5076%" height="15" fill="rgb(229,88,8)"/><text x="22.0493%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (500,846 samples, 0.36%)</title><rect x="22.3079%" y="213" width="0.3618%" height="15" fill="rgb(213,181,19)"/><text x="22.5579%" y="223.50"></text></g><g><title>check_mod_liveness (421,735 samples, 0.30%)</title><rect x="22.3650%" y="197" width="0.3047%" height="15" fill="rgb(254,191,54)"/><text x="22.6150%" y="207.50"></text></g><g><title>misc_checking_2 (990,291 samples, 0.72%)</title><rect x="22.3069%" y="229" width="0.7154%" height="15" fill="rgb(241,83,37)"/><text x="22.5569%" y="239.50"></text></g><g><title>match_checking (488,045 samples, 0.35%)</title><rect x="22.6697%" y="213" width="0.3526%" height="15" fill="rgb(233,36,39)"/><text x="22.9197%" y="223.50"></text></g><g><title>check_match (477,835 samples, 0.35%)</title><rect x="22.6771%" y="197" width="0.3452%" height="15" fill="rgb(226,3,54)"/><text x="22.9271%" y="207.50"></text></g><g><title>death_checking (166,301 samples, 0.12%)</title><rect x="23.0912%" y="213" width="0.1201%" height="15" fill="rgb(245,192,40)"/><text x="23.3412%" y="223.50"></text></g><g><title>eval_to_const_value_raw (351,424 samples, 0.25%)</title><rect x="23.4602%" y="133" width="0.2539%" height="15" fill="rgb(238,167,29)"/><text x="23.7102%" y="143.50"></text></g><g><title>eval_to_const_value_raw (350,764 samples, 0.25%)</title><rect x="23.4607%" y="117" width="0.2534%" height="15" fill="rgb(232,182,51)"/><text x="23.7107%" y="127.50"></text></g><g><title>eval_to_allocation_raw (349,114 samples, 0.25%)</title><rect x="23.4619%" y="101" width="0.2522%" height="15" fill="rgb(231,60,39)"/><text x="23.7119%" y="111.50"></text></g><g><title>eval_to_allocation_raw (391,645 samples, 0.28%)</title><rect x="23.4321%" y="181" width="0.2829%" height="15" fill="rgb(208,69,12)"/><text x="23.6821%" y="191.50"></text></g><g><title>eval_to_allocation_raw (391,005 samples, 0.28%)</title><rect x="23.4326%" y="165" width="0.2825%" height="15" fill="rgb(235,93,37)"/><text x="23.6826%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (358,654 samples, 0.26%)</title><rect x="23.4559%" y="149" width="0.2591%" height="15" fill="rgb(213,116,39)"/><text x="23.7059%" y="159.50"></text></g><g><title>crate_lints (935,980 samples, 0.68%)</title><rect x="23.2123%" y="197" width="0.6762%" height="15" fill="rgb(222,207,29)"/><text x="23.4623%" y="207.50"></text></g><g><title>lint_checking (1,357,415 samples, 0.98%)</title><rect x="23.2113%" y="213" width="0.9806%" height="15" fill="rgb(206,96,30)"/><text x="23.4613%" y="223.50"></text></g><g><title>module_lints (420,105 samples, 0.30%)</title><rect x="23.8885%" y="197" width="0.3035%" height="15" fill="rgb(218,138,4)"/><text x="24.1385%" y="207.50"></text></g><g><title>lint_mod (418,175 samples, 0.30%)</title><rect x="23.8899%" y="181" width="0.3021%" height="15" fill="rgb(250,191,14)"/><text x="24.1399%" y="191.50"></text></g><g><title>privacy_checking_modules (682,147 samples, 0.49%)</title><rect x="24.2452%" y="213" width="0.4928%" height="15" fill="rgb(239,60,40)"/><text x="24.4952%" y="223.50"></text></g><g><title>check_mod_privacy (680,797 samples, 0.49%)</title><rect x="24.2461%" y="197" width="0.4918%" height="15" fill="rgb(206,27,48)"/><text x="24.4961%" y="207.50"></text></g><g><title>misc_checking_3 (2,387,086 samples, 1.72%)</title><rect x="23.0223%" y="229" width="1.7245%" height="15" fill="rgb(225,35,8)"/><text x="23.2723%" y="239.50"></text></g><g><title>impl_trait_ref (345,724 samples, 0.25%)</title><rect x="25.0322%" y="165" width="0.2498%" height="15" fill="rgb(250,213,24)"/><text x="25.2822%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (289,823 samples, 0.21%)</title><rect x="25.0726%" y="149" width="0.2094%" height="15" fill="rgb(247,123,22)"/><text x="25.3226%" y="159.50"></text></g><g><title>coherent_trait (775,509 samples, 0.56%)</title><rect x="24.7749%" y="197" width="0.5603%" height="15" fill="rgb(231,138,38)"/><text x="25.0249%" y="207.50"></text></g><g><title>specialization_graph_of (771,459 samples, 0.56%)</title><rect x="24.7778%" y="181" width="0.5573%" height="15" fill="rgb(231,145,46)"/><text x="25.0278%" y="191.50"></text></g><g><title>coherence_checking (814,409 samples, 0.59%)</title><rect x="24.7692%" y="213" width="0.5884%" height="15" fill="rgb(251,118,11)"/><text x="25.0192%" y="223.50"></text></g><g><title>associated_item (367,525 samples, 0.27%)</title><rect x="39.2158%" y="149" width="0.2655%" height="15" fill="rgb(217,147,25)"/><text x="39.4658%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (282,603 samples, 0.20%)</title><rect x="39.2771%" y="133" width="0.2042%" height="15" fill="rgb(247,81,37)"/><text x="39.5271%" y="143.50"></text></g><g><title>associated_items (557,475 samples, 0.40%)</title><rect x="39.1034%" y="165" width="0.4027%" height="15" fill="rgb(209,12,38)"/><text x="39.3534%" y="175.50"></text></g><g><title>adt_def (305,713 samples, 0.22%)</title><rect x="40.4403%" y="133" width="0.2209%" height="15" fill="rgb(227,1,9)"/><text x="40.6903%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (296,673 samples, 0.21%)</title><rect x="40.4469%" y="117" width="0.2143%" height="15" fill="rgb(248,47,43)"/><text x="40.6969%" y="127.50"></text></g><g><title>item_attrs (194,132 samples, 0.14%)</title><rect x="40.5209%" y="101" width="0.1402%" height="15" fill="rgb(221,10,30)"/><text x="40.7709%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (185,482 samples, 0.13%)</title><rect x="40.5272%" y="85" width="0.1340%" height="15" fill="rgb(210,229,1)"/><text x="40.7772%" y="95.50"></text></g><g><title>adt_destructor (312,723 samples, 0.23%)</title><rect x="40.6612%" y="133" width="0.2259%" height="15" fill="rgb(222,148,37)"/><text x="40.9112%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (301,073 samples, 0.22%)</title><rect x="40.6696%" y="117" width="0.2175%" height="15" fill="rgb(234,67,33)"/><text x="40.9196%" y="127.50"></text></g><g><title>adt_def (238,224 samples, 0.17%)</title><rect x="41.0502%" y="117" width="0.1721%" height="15" fill="rgb(247,98,35)"/><text x="41.3002%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (230,644 samples, 0.17%)</title><rect x="41.0557%" y="101" width="0.1666%" height="15" fill="rgb(247,138,52)"/><text x="41.3057%" y="111.50"></text></g><g><title>item_attrs (147,112 samples, 0.11%)</title><rect x="41.1160%" y="85" width="0.1063%" height="15" fill="rgb(213,79,30)"/><text x="41.3660%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (139,492 samples, 0.10%)</title><rect x="41.1215%" y="69" width="0.1008%" height="15" fill="rgb(246,177,23)"/><text x="41.3715%" y="79.50"></text></g><g><title>adt_def (197,544 samples, 0.14%)</title><rect x="41.4752%" y="101" width="0.1427%" height="15" fill="rgb(230,62,27)"/><text x="41.7252%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (191,094 samples, 0.14%)</title><rect x="41.4798%" y="85" width="0.1381%" height="15" fill="rgb(216,154,8)"/><text x="41.7298%" y="95.50"></text></g><g><title>adt_def (325,445 samples, 0.24%)</title><rect x="41.8244%" y="85" width="0.2351%" height="15" fill="rgb(244,35,45)"/><text x="42.0744%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (312,005 samples, 0.23%)</title><rect x="41.8341%" y="69" width="0.2254%" height="15" fill="rgb(251,115,12)"/><text x="42.0841%" y="79.50"></text></g><g><title>item_attrs (171,712 samples, 0.12%)</title><rect x="41.9355%" y="53" width="0.1241%" height="15" fill="rgb(240,54,50)"/><text x="42.1855%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (156,722 samples, 0.11%)</title><rect x="41.9463%" y="37" width="0.1132%" height="15" fill="rgb(233,84,52)"/><text x="42.1963%" y="47.50"></text></g><g><title>adt_def (253,443 samples, 0.18%)</title><rect x="42.1807%" y="69" width="0.1831%" height="15" fill="rgb(207,117,47)"/><text x="42.4307%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (243,323 samples, 0.18%)</title><rect x="42.1880%" y="53" width="0.1758%" height="15" fill="rgb(249,43,39)"/><text x="42.4380%" y="63.50"></text></g><g><title>adt_dtorck_constraint (259,482 samples, 0.19%)</title><rect x="42.4033%" y="69" width="0.1875%" height="15" fill="rgb(209,38,44)"/><text x="42.6533%" y="79.50"></text></g><g><title>adt_dtorck_constraint (738,288 samples, 0.53%)</title><rect x="42.1059%" y="85" width="0.5334%" height="15" fill="rgb(236,212,23)"/><text x="42.3559%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,427,109 samples, 1.03%)</title><rect x="41.6907%" y="101" width="1.0310%" height="15" fill="rgb(242,79,21)"/><text x="41.9407%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,227,706 samples, 1.61%)</title><rect x="41.2631%" y="117" width="1.6094%" height="15" fill="rgb(211,96,35)"/><text x="41.5131%" y="127.50"></text></g><g><title>type_of (161,841 samples, 0.12%)</title><rect x="42.7556%" y="101" width="0.1169%" height="15" fill="rgb(253,215,40)"/><text x="43.0056%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,840,571 samples, 2.05%)</title><rect x="40.8871%" y="133" width="2.0521%" height="15" fill="rgb(211,81,21)"/><text x="41.1371%" y="143.50">a..</text></g><g><title>adt_dtorck_constraint (3,748,681 samples, 2.71%)</title><rect x="40.2999%" y="149" width="2.7082%" height="15" fill="rgb(208,190,38)"/><text x="40.5499%" y="159.50">ad..</text></g><g><title>dropck_outlives (4,796,332 samples, 3.47%)</title><rect x="39.5636%" y="165" width="3.4651%" height="15" fill="rgb(235,213,38)"/><text x="39.8136%" y="175.50">dro..</text></g><g><title>adt_sized_constraint (196,494 samples, 0.14%)</title><rect x="44.2062%" y="149" width="0.1420%" height="15" fill="rgb(237,122,38)"/><text x="44.4562%" y="159.50"></text></g><g><title>predicates_of (227,713 samples, 0.16%)</title><rect x="44.5391%" y="149" width="0.1645%" height="15" fill="rgb(244,218,35)"/><text x="44.7891%" y="159.50"></text></g><g><title>predicates_defined_on (144,831 samples, 0.10%)</title><rect x="44.5990%" y="133" width="0.1046%" height="15" fill="rgb(240,68,47)"/><text x="44.8490%" y="143.50"></text></g><g><title>specializes (151,481 samples, 0.11%)</title><rect x="44.7036%" y="149" width="0.1094%" height="15" fill="rgb(210,16,53)"/><text x="44.9536%" y="159.50"></text></g><g><title>trait_impls_of (1,126,620 samples, 0.81%)</title><rect x="44.8214%" y="149" width="0.8139%" height="15" fill="rgb(235,124,12)"/><text x="45.0714%" y="159.50"></text></g><g><title>implementations_of_trait (358,996 samples, 0.26%)</title><rect x="45.3760%" y="133" width="0.2594%" height="15" fill="rgb(224,169,11)"/><text x="45.6260%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (243,116 samples, 0.18%)</title><rect x="45.4597%" y="117" width="0.1756%" height="15" fill="rgb(250,166,2)"/><text x="45.7097%" y="127.50"></text></g><g><title>evaluate_obligation (3,609,578 samples, 2.61%)</title><rect x="43.0286%" y="165" width="2.6077%" height="15" fill="rgb(242,216,29)"/><text x="43.2786%" y="175.50">ev..</text></g><g><title>fn_sig (192,045 samples, 0.14%)</title><rect x="45.6620%" y="165" width="0.1387%" height="15" fill="rgb(230,116,27)"/><text x="45.9120%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (167,953 samples, 0.12%)</title><rect x="45.6794%" y="149" width="0.1213%" height="15" fill="rgb(228,99,48)"/><text x="45.9294%" y="159.50"></text></g><g><title>generics_of (219,611 samples, 0.16%)</title><rect x="45.8008%" y="165" width="0.1587%" height="15" fill="rgb(253,11,6)"/><text x="46.0508%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (163,661 samples, 0.12%)</title><rect x="45.8412%" y="149" width="0.1182%" height="15" fill="rgb(247,143,39)"/><text x="46.0912%" y="159.50"></text></g><g><title>impl_item_implementor_ids (180,651 samples, 0.13%)</title><rect x="45.9594%" y="165" width="0.1305%" height="15" fill="rgb(236,97,10)"/><text x="46.2094%" y="175.50"></text></g><g><title>associated_items (155,661 samples, 0.11%)</title><rect x="45.9775%" y="149" width="0.1125%" height="15" fill="rgb(233,208,19)"/><text x="46.2275%" y="159.50"></text></g><g><title>evaluate_obligation (284,391 samples, 0.21%)</title><rect x="46.4968%" y="149" width="0.2055%" height="15" fill="rgb(216,164,2)"/><text x="46.7468%" y="159.50"></text></g><g><title>method_autoderef_steps (538,725 samples, 0.39%)</title><rect x="46.3258%" y="165" width="0.3892%" height="15" fill="rgb(220,129,5)"/><text x="46.5758%" y="175.50"></text></g><g><title>explicit_predicates_of (213,041 samples, 0.15%)</title><rect x="46.9815%" y="133" width="0.1539%" height="15" fill="rgb(242,17,10)"/><text x="47.2315%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (172,441 samples, 0.12%)</title><rect x="47.0108%" y="117" width="0.1246%" height="15" fill="rgb(242,107,0)"/><text x="47.2608%" y="127.50"></text></g><g><title>predicates_of (628,385 samples, 0.45%)</title><rect x="46.7353%" y="165" width="0.4540%" height="15" fill="rgb(251,28,31)"/><text x="46.9853%" y="175.50"></text></g><g><title>predicates_defined_on (430,304 samples, 0.31%)</title><rect x="46.8784%" y="149" width="0.3109%" height="15" fill="rgb(233,223,10)"/><text x="47.1284%" y="159.50"></text></g><g><title>evaluate_obligation (404,065 samples, 0.29%)</title><rect x="47.8462%" y="149" width="0.2919%" height="15" fill="rgb(215,21,27)"/><text x="48.0962%" y="159.50"></text></g><g><title>typeck (1,300,224 samples, 0.94%)</title><rect x="47.2961%" y="165" width="0.9393%" height="15" fill="rgb(232,23,21)"/><text x="47.5461%" y="175.50"></text></g><g><title>item_bodies_checking (31,702,860 samples, 22.90%)</title><rect x="25.3664%" y="213" width="22.9034%" height="15" fill="rgb(244,5,23)"/><text x="25.6164%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (31,700,450 samples, 22.90%)</title><rect x="25.3681%" y="197" width="22.9016%" height="15" fill="rgb(226,81,46)"/><text x="25.6181%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (31,681,280 samples, 22.89%)</title><rect x="25.3820%" y="181" width="22.8878%" height="15" fill="rgb(247,70,30)"/><text x="25.6320%" y="191.50">typeck</text></g><g><title>impl_trait_ref (366,443 samples, 0.26%)</title><rect x="48.5567%" y="133" width="0.2647%" height="15" fill="rgb(212,68,19)"/><text x="48.8067%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (342,612 samples, 0.25%)</title><rect x="48.5740%" y="117" width="0.2475%" height="15" fill="rgb(240,187,13)"/><text x="48.8240%" y="127.50"></text></g><g><title>adt_destructor (599,497 samples, 0.43%)</title><rect x="48.4096%" y="181" width="0.4331%" height="15" fill="rgb(223,113,26)"/><text x="48.6596%" y="191.50"></text></g><g><title>coherent_trait (596,897 samples, 0.43%)</title><rect x="48.4115%" y="165" width="0.4312%" height="15" fill="rgb(206,192,2)"/><text x="48.6615%" y="175.50"></text></g><g><title>specialization_graph_of (595,437 samples, 0.43%)</title><rect x="48.4125%" y="149" width="0.4302%" height="15" fill="rgb(241,108,4)"/><text x="48.6625%" y="159.50"></text></g><g><title>item_types_checking (1,444,706 samples, 1.04%)</title><rect x="48.2698%" y="213" width="1.0437%" height="15" fill="rgb(247,173,49)"/><text x="48.5198%" y="223.50"></text></g><g><title>check_mod_item_types (1,443,036 samples, 1.04%)</title><rect x="48.2710%" y="197" width="1.0425%" height="15" fill="rgb(224,114,35)"/><text x="48.5210%" y="207.50"></text></g><g><title>typeck (479,526 samples, 0.35%)</title><rect x="48.9671%" y="181" width="0.3464%" height="15" fill="rgb(245,159,27)"/><text x="49.2171%" y="191.50"></text></g><g><title>generics_of (148,860 samples, 0.11%)</title><rect x="49.4787%" y="181" width="0.1075%" height="15" fill="rgb(245,172,44)"/><text x="49.7287%" y="191.50"></text></g><g><title>late_bound_vars_map (161,911 samples, 0.12%)</title><rect x="49.6612%" y="133" width="0.1170%" height="15" fill="rgb(236,23,11)"/><text x="49.9112%" y="143.50"></text></g><g><title>resolve_lifetimes (160,441 samples, 0.12%)</title><rect x="49.6623%" y="117" width="0.1159%" height="15" fill="rgb(205,117,38)"/><text x="49.9123%" y="127.50"></text></g><g><title>explicit_predicates_of (232,341 samples, 0.17%)</title><rect x="49.6158%" y="149" width="0.1679%" height="15" fill="rgb(237,72,25)"/><text x="49.8658%" y="159.50"></text></g><g><title>predicates_of (394,193 samples, 0.28%)</title><rect x="49.5943%" y="181" width="0.2848%" height="15" fill="rgb(244,70,9)"/><text x="49.8443%" y="191.50"></text></g><g><title>predicates_defined_on (383,143 samples, 0.28%)</title><rect x="49.6023%" y="165" width="0.2768%" height="15" fill="rgb(217,125,39)"/><text x="49.8523%" y="175.50"></text></g><g><title>type_collecting (846,700 samples, 0.61%)</title><rect x="49.3146%" y="213" width="0.6117%" height="15" fill="rgb(235,36,10)"/><text x="49.5646%" y="223.50"></text></g><g><title>collect_mod_item_types (841,330 samples, 0.61%)</title><rect x="49.3185%" y="197" width="0.6078%" height="15" fill="rgb(251,123,47)"/><text x="49.5685%" y="207.50"></text></g><g><title>check_impl_item_well_formed (463,206 samples, 0.33%)</title><rect x="49.9720%" y="197" width="0.3346%" height="15" fill="rgb(221,13,13)"/><text x="50.2220%" y="207.50"></text></g><g><title>adt_def (350,756 samples, 0.25%)</title><rect x="50.9410%" y="117" width="0.2534%" height="15" fill="rgb(238,131,9)"/><text x="51.1910%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (335,994 samples, 0.24%)</title><rect x="50.9517%" y="101" width="0.2427%" height="15" fill="rgb(211,50,8)"/><text x="51.2017%" y="111.50"></text></g><g><title>item_attrs (222,253 samples, 0.16%)</title><rect x="51.0338%" y="85" width="0.1606%" height="15" fill="rgb(245,182,24)"/><text x="51.2838%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (210,293 samples, 0.15%)</title><rect x="51.0425%" y="69" width="0.1519%" height="15" fill="rgb(242,14,37)"/><text x="51.2925%" y="79.50"></text></g><g><title>adt_def (229,982 samples, 0.17%)</title><rect x="51.2577%" y="85" width="0.1661%" height="15" fill="rgb(246,228,12)"/><text x="51.5077%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (227,522 samples, 0.16%)</title><rect x="51.2595%" y="69" width="0.1644%" height="15" fill="rgb(213,55,15)"/><text x="51.5095%" y="79.50"></text></g><g><title>item_attrs (209,602 samples, 0.15%)</title><rect x="51.2724%" y="53" width="0.1514%" height="15" fill="rgb(209,9,3)"/><text x="51.5224%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (207,032 samples, 0.15%)</title><rect x="51.2743%" y="37" width="0.1496%" height="15" fill="rgb(230,59,30)"/><text x="51.5243%" y="47.50"></text></g><g><title>adt_sized_constraint (255,442 samples, 0.18%)</title><rect x="51.2514%" y="101" width="0.1845%" height="15" fill="rgb(209,121,21)"/><text x="51.5014%" y="111.50"></text></g><g><title>adt_sized_constraint (345,313 samples, 0.25%)</title><rect x="51.1944%" y="117" width="0.2495%" height="15" fill="rgb(220,109,13)"/><text x="51.4444%" y="127.50"></text></g><g><title>adt_sized_constraint (780,059 samples, 0.56%)</title><rect x="50.9100%" y="133" width="0.5635%" height="15" fill="rgb(232,18,1)"/><text x="51.1600%" y="143.50"></text></g><g><title>adt_sized_constraint (949,821 samples, 0.69%)</title><rect x="50.8041%" y="149" width="0.6862%" height="15" fill="rgb(215,41,42)"/><text x="51.0541%" y="159.50"></text></g><g><title>adt_sized_constraint (1,081,922 samples, 0.78%)</title><rect x="50.7149%" y="165" width="0.7816%" height="15" fill="rgb(224,123,36)"/><text x="50.9649%" y="175.50"></text></g><g><title>evaluate_obligation (1,328,626 samples, 0.96%)</title><rect x="50.6060%" y="181" width="0.9599%" height="15" fill="rgb(240,125,3)"/><text x="50.8560%" y="191.50"></text></g><g><title>param_env (140,282 samples, 0.10%)</title><rect x="51.6318%" y="181" width="0.1013%" height="15" fill="rgb(205,98,50)"/><text x="51.8818%" y="191.50"></text></g><g><title>region_scope_tree (153,491 samples, 0.11%)</title><rect x="51.7854%" y="181" width="0.1109%" height="15" fill="rgb(205,185,37)"/><text x="52.0354%" y="191.50"></text></g><g><title>analysis (71,332,428 samples, 51.53%)</title><rect x="0.4525%" y="245" width="51.5333%" height="15" fill="rgb(238,207,15)"/><text x="0.7025%" y="255.50">analysis</text></g><g><title>type_check_crate (37,704,278 samples, 27.24%)</title><rect x="24.7468%" y="229" width="27.2390%" height="15" fill="rgb(213,199,42)"/><text x="24.9968%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,849,032 samples, 2.06%)</title><rect x="49.9276%" y="213" width="2.0583%" height="15" fill="rgb(235,201,11)"/><text x="50.1776%" y="223.50">w..</text></g><g><title>check_item_well_formed (2,324,406 samples, 1.68%)</title><rect x="50.3066%" y="197" width="1.6792%" height="15" fill="rgb(207,46,11)"/><text x="50.5566%" y="207.50"></text></g><g><title>codegen_crate (646,077 samples, 0.47%)</title><rect x="51.9934%" y="245" width="0.4668%" height="15" fill="rgb(241,35,35)"/><text x="52.2434%" y="255.50"></text></g><g><title>metadata_load_macro (890,514 samples, 0.64%)</title><rect x="86.9697%" y="197" width="0.6433%" height="15" fill="rgb(243,32,47)"/><text x="87.2197%" y="207.50"></text></g><g><title>macro_expand_crate (51,205,386 samples, 36.99%)</title><rect x="52.7669%" y="229" width="36.9928%" height="15" fill="rgb(247,202,23)"/><text x="53.0169%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (51,189,916 samples, 36.98%)</title><rect x="52.7781%" y="213" width="36.9816%" height="15" fill="rgb(219,102,11)"/><text x="53.0281%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,971,384 samples, 2.15%)</title><rect x="87.6130%" y="197" width="2.1466%" height="15" fill="rgb(243,110,44)"/><text x="87.8630%" y="207.50">m..</text></g><g><title>metadata_register_crate (984,892 samples, 0.71%)</title><rect x="89.0481%" y="181" width="0.7115%" height="15" fill="rgb(222,74,54)"/><text x="89.2981%" y="191.50"></text></g><g><title>maybe_create_a_macro_crate (381,384 samples, 0.28%)</title><rect x="89.7602%" y="229" width="0.2755%" height="15" fill="rgb(216,99,12)"/><text x="90.0102%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (210,362 samples, 0.15%)</title><rect x="90.0357%" y="229" width="0.1520%" height="15" fill="rgb(226,22,26)"/><text x="90.2857%" y="239.50"></text></g><g><title>finalize_imports (230,213 samples, 0.17%)</title><rect x="90.1912%" y="213" width="0.1663%" height="15" fill="rgb(217,163,10)"/><text x="90.4412%" y="223.50"></text></g><g><title>finalize_macro_resolutions (411,764 samples, 0.30%)</title><rect x="90.3575%" y="213" width="0.2975%" height="15" fill="rgb(213,25,53)"/><text x="90.6075%" y="223.50"></text></g><g><title>late_resolve_crate (2,025,073 samples, 1.46%)</title><rect x="90.6550%" y="213" width="1.4630%" height="15" fill="rgb(252,105,26)"/><text x="90.9050%" y="223.50"></text></g><g><title>configure_and_expand (54,989,578 samples, 39.73%)</title><rect x="52.4602%" y="245" width="39.7266%" height="15" fill="rgb(220,39,43)"/><text x="52.7102%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,767,181 samples, 2.00%)</title><rect x="90.1877%" y="229" width="1.9991%" height="15" fill="rgb(229,68,48)"/><text x="90.4377%" y="239.50">r..</text></g><g><title>early_lint_checks (366,404 samples, 0.26%)</title><rect x="92.2960%" y="245" width="0.2647%" height="15" fill="rgb(252,8,32)"/><text x="92.5460%" y="255.50"></text></g><g><title>free_global_ctxt (3,593,330 samples, 2.60%)</title><rect x="92.5607%" y="245" width="2.5960%" height="15" fill="rgb(223,20,43)"/><text x="92.8107%" y="255.50">fr..</text></g><g><title>hir_lowering (2,011,672 samples, 1.45%)</title><rect x="95.2566%" y="245" width="1.4533%" height="15" fill="rgb(229,81,49)"/><text x="95.5066%" y="255.50"></text></g><g><title>parse_crate (3,223,346 samples, 2.33%)</title><rect x="96.7422%" y="245" width="2.3287%" height="15" fill="rgb(236,28,36)"/><text x="96.9922%" y="255.50">p..</text></g><g><title>prepare_outputs (184,162 samples, 0.13%)</title><rect x="99.0771%" y="245" width="0.1330%" height="15" fill="rgb(249,185,26)"/><text x="99.3271%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (710,238 samples, 0.51%)</title><rect x="99.2101%" y="245" width="0.5131%" height="15" fill="rgb(249,174,33)"/><text x="99.4601%" y="255.50"></text></g><g><title>all (138,420,010 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (138,420,010 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (319,724 samples, 0.23%)</title><rect x="99.7690%" y="245" width="0.2310%" height="15" fill="rgb(250,127,30)"/><text x="100.0190%" y="255.50"></text></g></svg></svg>