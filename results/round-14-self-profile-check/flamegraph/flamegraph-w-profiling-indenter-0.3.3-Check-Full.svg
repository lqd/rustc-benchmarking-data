<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (67,121 samples, 0.15%)</title><rect x="9.1223%" y="133" width="0.1486%" height="15" fill="rgb(227,0,7)"/><text x="9.3723%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (65,361 samples, 0.14%)</title><rect x="9.1262%" y="117" width="0.1447%" height="15" fill="rgb(217,0,24)"/><text x="9.3762%" y="127.50"></text></g><g><title>codegen_fn_attrs (104,672 samples, 0.23%)</title><rect x="9.0587%" y="149" width="0.2318%" height="15" fill="rgb(221,193,54)"/><text x="9.3087%" y="159.50"></text></g><g><title>is_copy_raw (74,560 samples, 0.17%)</title><rect x="10.4114%" y="133" width="0.1651%" height="15" fill="rgb(248,212,6)"/><text x="10.6614%" y="143.50"></text></g><g><title>evaluate_obligation (64,440 samples, 0.14%)</title><rect x="10.4338%" y="117" width="0.1427%" height="15" fill="rgb(208,68,35)"/><text x="10.6838%" y="127.50"></text></g><g><title>is_copy_raw (80,280 samples, 0.18%)</title><rect x="10.7128%" y="101" width="0.1778%" height="15" fill="rgb(232,128,0)"/><text x="10.9628%" y="111.50"></text></g><g><title>adt_drop_tys (177,041 samples, 0.39%)</title><rect x="10.6699%" y="117" width="0.3920%" height="15" fill="rgb(207,160,47)"/><text x="10.9199%" y="127.50"></text></g><g><title>explicit_predicates_of (50,411 samples, 0.11%)</title><rect x="11.7154%" y="53" width="0.1116%" height="15" fill="rgb(228,23,34)"/><text x="11.9654%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (47,671 samples, 0.11%)</title><rect x="11.7215%" y="37" width="0.1056%" height="15" fill="rgb(218,30,26)"/><text x="11.9715%" y="47.50"></text></g><g><title>predicates_of (82,061 samples, 0.18%)</title><rect x="11.6552%" y="85" width="0.1817%" height="15" fill="rgb(220,122,19)"/><text x="11.9052%" y="95.50"></text></g><g><title>predicates_defined_on (66,911 samples, 0.15%)</title><rect x="11.6888%" y="69" width="0.1482%" height="15" fill="rgb(250,228,42)"/><text x="11.9388%" y="79.50"></text></g><g><title>is_copy_raw (385,004 samples, 0.85%)</title><rect x="11.0619%" y="117" width="0.8525%" height="15" fill="rgb(240,193,28)"/><text x="11.3119%" y="127.50"></text></g><g><title>evaluate_obligation (337,424 samples, 0.75%)</title><rect x="11.1672%" y="101" width="0.7471%" height="15" fill="rgb(216,20,37)"/><text x="11.4172%" y="111.50"></text></g><g><title>needs_drop_raw (621,697 samples, 1.38%)</title><rect x="10.5765%" y="133" width="1.3765%" height="15" fill="rgb(206,188,39)"/><text x="10.8265%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (77,450 samples, 0.17%)</title><rect x="12.0245%" y="117" width="0.1715%" height="15" fill="rgb(217,207,13)"/><text x="12.2745%" y="127.50"></text></g><g><title>impl_parent (71,290 samples, 0.16%)</title><rect x="12.4191%" y="101" width="0.1578%" height="15" fill="rgb(231,73,38)"/><text x="12.6691%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (49,070 samples, 0.11%)</title><rect x="12.4683%" y="85" width="0.1086%" height="15" fill="rgb(225,20,46)"/><text x="12.7183%" y="95.50"></text></g><g><title>specialization_graph_of (391,505 samples, 0.87%)</title><rect x="12.2033%" y="117" width="0.8669%" height="15" fill="rgb(210,31,41)"/><text x="12.4533%" y="127.50"></text></g><g><title>impl_trait_ref (222,764 samples, 0.49%)</title><rect x="12.5770%" y="101" width="0.4932%" height="15" fill="rgb(221,200,47)"/><text x="12.8270%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (199,503 samples, 0.44%)</title><rect x="12.6285%" y="85" width="0.4417%" height="15" fill="rgb(226,26,5)"/><text x="12.8785%" y="95.50"></text></g><g><title>resolve_instance (513,455 samples, 1.14%)</title><rect x="11.9530%" y="133" width="1.1369%" height="15" fill="rgb(249,33,26)"/><text x="12.2030%" y="143.50"></text></g><g><title>thir_body (166,863 samples, 0.37%)</title><rect x="13.0993%" y="133" width="0.3695%" height="15" fill="rgb(235,183,28)"/><text x="13.3493%" y="143.50"></text></g><g><title>mir_const (2,283,705 samples, 5.06%)</title><rect x="8.4180%" y="181" width="5.0565%" height="15" fill="rgb(221,5,38)"/><text x="8.6680%" y="191.50">mir_co..</text></g><g><title>unsafety_check_result (2,098,583 samples, 4.65%)</title><rect x="8.8278%" y="165" width="4.6466%" height="15" fill="rgb(247,18,42)"/><text x="9.0778%" y="175.50">unsaf..</text></g><g><title>mir_built (1,889,661 samples, 4.18%)</title><rect x="9.2904%" y="149" width="4.1840%" height="15" fill="rgb(241,131,45)"/><text x="9.5404%" y="159.50">mir_b..</text></g><g><title>mir_promoted (2,496,366 samples, 5.53%)</title><rect x="7.9650%" y="197" width="5.5273%" height="15" fill="rgb(249,31,29)"/><text x="8.2150%" y="207.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (122,381 samples, 0.27%)</title><rect x="13.5015%" y="197" width="0.2710%" height="15" fill="rgb(225,111,53)"/><text x="13.7515%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (222,953 samples, 0.49%)</title><rect x="13.7725%" y="197" width="0.4937%" height="15" fill="rgb(238,160,17)"/><text x="14.0225%" y="207.50"></text></g><g><title>normalize_projection_ty (162,792 samples, 0.36%)</title><rect x="13.9057%" y="181" width="0.3604%" height="15" fill="rgb(214,148,48)"/><text x="14.1557%" y="191.50"></text></g><g><title>type_op_prove_predicate (856,978 samples, 1.90%)</title><rect x="14.3249%" y="197" width="1.8975%" height="15" fill="rgb(232,36,49)"/><text x="14.5749%" y="207.50">t..</text></g><g><title>MIR_borrow_checking (6,288,719 samples, 13.92%)</title><rect x="2.3059%" y="229" width="13.9242%" height="15" fill="rgb(209,103,24)"/><text x="2.5559%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,277,239 samples, 13.90%)</title><rect x="2.3314%" y="213" width="13.8988%" height="15" fill="rgb(229,88,8)"/><text x="2.5814%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (151,981 samples, 0.34%)</title><rect x="16.2406%" y="229" width="0.3365%" height="15" fill="rgb(213,181,19)"/><text x="16.4906%" y="239.50"></text></g><g><title>get_lang_items (67,411 samples, 0.15%)</title><rect x="17.1656%" y="181" width="0.1493%" height="15" fill="rgb(254,191,54)"/><text x="17.4156%" y="191.50"></text></g><g><title>codegen_fn_attrs (51,520 samples, 0.11%)</title><rect x="17.4740%" y="165" width="0.1141%" height="15" fill="rgb(241,83,37)"/><text x="17.7240%" y="175.50"></text></g><g><title>should_inherit_track_caller (125,800 samples, 0.28%)</title><rect x="17.3148%" y="181" width="0.2785%" height="15" fill="rgb(233,36,39)"/><text x="17.5648%" y="191.50"></text></g><g><title>codegen_fn_attrs (302,963 samples, 0.67%)</title><rect x="17.0001%" y="197" width="0.6708%" height="15" fill="rgb(226,3,54)"/><text x="17.2501%" y="207.50"></text></g><g><title>check_mod_attrs (464,695 samples, 1.03%)</title><rect x="16.6425%" y="213" width="1.0289%" height="15" fill="rgb(245,192,40)"/><text x="16.8925%" y="223.50"></text></g><g><title>check_mod_const_bodies (53,381 samples, 0.12%)</title><rect x="17.6715%" y="213" width="0.1182%" height="15" fill="rgb(238,167,29)"/><text x="17.9215%" y="223.50"></text></g><g><title>lookup_deprecation_entry (95,382 samples, 0.21%)</title><rect x="18.0887%" y="197" width="0.2112%" height="15" fill="rgb(232,182,51)"/><text x="18.3387%" y="207.50"></text></g><g><title>stability_index (52,550 samples, 0.12%)</title><rect x="18.1836%" y="181" width="0.1164%" height="15" fill="rgb(231,60,39)"/><text x="18.4336%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (248,863 samples, 0.55%)</title><rect x="17.8808%" y="213" width="0.5510%" height="15" fill="rgb(208,69,12)"/><text x="18.1308%" y="223.50"></text></g><g><title>misc_checking_1 (880,790 samples, 1.95%)</title><rect x="16.5780%" y="229" width="1.9502%" height="15" fill="rgb(235,93,37)"/><text x="16.8280%" y="239.50">m..</text></g><g><title>liveness_and_intrinsic_checking (121,932 samples, 0.27%)</title><rect x="18.5308%" y="213" width="0.2700%" height="15" fill="rgb(213,116,39)"/><text x="18.7808%" y="223.50"></text></g><g><title>check_mod_liveness (96,981 samples, 0.21%)</title><rect x="18.5861%" y="197" width="0.2147%" height="15" fill="rgb(222,207,29)"/><text x="18.8361%" y="207.50"></text></g><g><title>misc_checking_2 (256,813 samples, 0.57%)</title><rect x="18.5282%" y="229" width="0.5686%" height="15" fill="rgb(206,96,30)"/><text x="18.7782%" y="239.50"></text></g><g><title>match_checking (133,691 samples, 0.30%)</title><rect x="18.8008%" y="213" width="0.2960%" height="15" fill="rgb(218,138,4)"/><text x="19.0508%" y="223.50"></text></g><g><title>check_match (129,121 samples, 0.29%)</title><rect x="18.8109%" y="197" width="0.2859%" height="15" fill="rgb(250,191,14)"/><text x="19.0609%" y="207.50"></text></g><g><title>death_checking (159,762 samples, 0.35%)</title><rect x="19.2146%" y="213" width="0.3537%" height="15" fill="rgb(239,60,40)"/><text x="19.4646%" y="223.50"></text></g><g><title>lint_levels (83,820 samples, 0.19%)</title><rect x="19.3827%" y="197" width="0.1856%" height="15" fill="rgb(206,27,48)"/><text x="19.6327%" y="207.50"></text></g><g><title>trait_impls_of (63,021 samples, 0.14%)</title><rect x="20.2249%" y="181" width="0.1395%" height="15" fill="rgb(225,35,8)"/><text x="20.4749%" y="191.50"></text></g><g><title>crate_lints (1,117,213 samples, 2.47%)</title><rect x="19.5717%" y="197" width="2.4737%" height="15" fill="rgb(250,213,24)"/><text x="19.8217%" y="207.50">cr..</text></g><g><title>type_of (756,490 samples, 1.67%)</title><rect x="20.3704%" y="181" width="1.6750%" height="15" fill="rgb(247,123,22)"/><text x="20.6204%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (672,730 samples, 1.49%)</title><rect x="20.5559%" y="165" width="1.4895%" height="15" fill="rgb(231,138,38)"/><text x="20.8059%" y="175.50"></text></g><g><title>layout_of (51,261 samples, 0.11%)</title><rect x="22.2437%" y="165" width="0.1135%" height="15" fill="rgb(231,145,46)"/><text x="22.4937%" y="175.50"></text></g><g><title>lint_checking (1,259,965 samples, 2.79%)</title><rect x="19.5683%" y="213" width="2.7898%" height="15" fill="rgb(251,118,11)"/><text x="19.8183%" y="223.50">li..</text></g><g><title>module_lints (141,212 samples, 0.31%)</title><rect x="22.0454%" y="197" width="0.3127%" height="15" fill="rgb(217,147,25)"/><text x="22.2954%" y="207.50"></text></g><g><title>lint_mod (138,922 samples, 0.31%)</title><rect x="22.0505%" y="181" width="0.3076%" height="15" fill="rgb(247,81,37)"/><text x="22.3005%" y="191.50"></text></g><g><title>privacy_access_levels (61,371 samples, 0.14%)</title><rect x="22.3581%" y="213" width="0.1359%" height="15" fill="rgb(209,12,38)"/><text x="22.6081%" y="223.50"></text></g><g><title>privacy_checking_modules (211,052 samples, 0.47%)</title><rect x="22.4940%" y="213" width="0.4673%" height="15" fill="rgb(227,1,9)"/><text x="22.7440%" y="223.50"></text></g><g><title>check_mod_privacy (209,432 samples, 0.46%)</title><rect x="22.4976%" y="197" width="0.4637%" height="15" fill="rgb(248,47,43)"/><text x="22.7476%" y="207.50"></text></g><g><title>misc_checking_3 (1,759,150 samples, 3.90%)</title><rect x="19.0968%" y="229" width="3.8950%" height="15" fill="rgb(221,10,30)"/><text x="19.3468%" y="239.50">misc..</text></g><g><title>impl_trait_ref (46,670 samples, 0.10%)</title><rect x="23.2679%" y="165" width="0.1033%" height="15" fill="rgb(210,229,1)"/><text x="23.5179%" y="175.50"></text></g><g><title>coherent_trait (158,852 samples, 0.35%)</title><rect x="23.0846%" y="197" width="0.3517%" height="15" fill="rgb(222,148,37)"/><text x="23.3346%" y="207.50"></text></g><g><title>specialization_graph_of (151,552 samples, 0.34%)</title><rect x="23.1008%" y="181" width="0.3356%" height="15" fill="rgb(234,67,33)"/><text x="23.3508%" y="191.50"></text></g><g><title>coherence_checking (210,562 samples, 0.47%)</title><rect x="23.0443%" y="213" width="0.4662%" height="15" fill="rgb(247,98,35)"/><text x="23.2943%" y="223.50"></text></g><g><title>adt_def (86,790 samples, 0.19%)</title><rect x="40.1265%" y="149" width="0.1922%" height="15" fill="rgb(247,138,52)"/><text x="40.3765%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (84,130 samples, 0.19%)</title><rect x="40.1324%" y="133" width="0.1863%" height="15" fill="rgb(213,79,30)"/><text x="40.3824%" y="143.50"></text></g><g><title>item_attrs (55,580 samples, 0.12%)</title><rect x="40.1956%" y="117" width="0.1231%" height="15" fill="rgb(246,177,23)"/><text x="40.4456%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (52,240 samples, 0.12%)</title><rect x="40.2030%" y="101" width="0.1157%" height="15" fill="rgb(230,62,27)"/><text x="40.4530%" y="111.50"></text></g><g><title>adt_sized_constraint (132,031 samples, 0.29%)</title><rect x="40.0907%" y="165" width="0.2923%" height="15" fill="rgb(216,154,8)"/><text x="40.3407%" y="175.50"></text></g><g><title>associated_item (201,941 samples, 0.45%)</title><rect x="40.6393%" y="149" width="0.4471%" height="15" fill="rgb(244,35,45)"/><text x="40.8893%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (147,401 samples, 0.33%)</title><rect x="40.7600%" y="133" width="0.3264%" height="15" fill="rgb(251,115,12)"/><text x="41.0100%" y="143.50"></text></g><g><title>associated_items (320,563 samples, 0.71%)</title><rect x="40.4080%" y="165" width="0.7098%" height="15" fill="rgb(240,54,50)"/><text x="40.6580%" y="175.50"></text></g><g><title>adt_def (48,680 samples, 0.11%)</title><rect x="41.6794%" y="133" width="0.1078%" height="15" fill="rgb(233,84,52)"/><text x="41.9294%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (48,100 samples, 0.11%)</title><rect x="41.6807%" y="117" width="0.1065%" height="15" fill="rgb(207,117,47)"/><text x="41.9307%" y="127.50"></text></g><g><title>adt_dtorck_constraint (69,810 samples, 0.15%)</title><rect x="41.8624%" y="133" width="0.1546%" height="15" fill="rgb(249,43,39)"/><text x="42.1124%" y="143.50"></text></g><g><title>adt_dtorck_constraint (225,001 samples, 0.50%)</title><rect x="41.5793%" y="149" width="0.4982%" height="15" fill="rgb(209,38,44)"/><text x="41.8293%" y="159.50"></text></g><g><title>dropck_outlives (402,094 samples, 0.89%)</title><rect x="41.2819%" y="165" width="0.8903%" height="15" fill="rgb(236,212,23)"/><text x="41.5319%" y="175.50"></text></g><g><title>adt_def (81,420 samples, 0.18%)</title><rect x="44.0124%" y="133" width="0.1803%" height="15" fill="rgb(242,79,21)"/><text x="44.2624%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (78,740 samples, 0.17%)</title><rect x="44.0183%" y="117" width="0.1743%" height="15" fill="rgb(211,96,35)"/><text x="44.2683%" y="127.50"></text></g><g><title>adt_sized_constraint (144,071 samples, 0.32%)</title><rect x="43.9817%" y="149" width="0.3190%" height="15" fill="rgb(253,215,40)"/><text x="44.2317%" y="159.50"></text></g><g><title>explicit_predicates_of (46,831 samples, 0.10%)</title><rect x="44.7737%" y="117" width="0.1037%" height="15" fill="rgb(211,81,21)"/><text x="45.0237%" y="127.50"></text></g><g><title>predicates_of (121,922 samples, 0.27%)</title><rect x="44.6460%" y="149" width="0.2700%" height="15" fill="rgb(208,190,38)"/><text x="44.8960%" y="159.50"></text></g><g><title>predicates_defined_on (84,181 samples, 0.19%)</title><rect x="44.7296%" y="133" width="0.1864%" height="15" fill="rgb(235,213,38)"/><text x="44.9796%" y="143.50"></text></g><g><title>evaluate_obligation (1,556,066 samples, 3.45%)</title><rect x="42.1771%" y="165" width="3.4454%" height="15" fill="rgb(237,122,38)"/><text x="42.4271%" y="175.50">eva..</text></g><g><title>trait_impls_of (308,813 samples, 0.68%)</title><rect x="44.9387%" y="149" width="0.6838%" height="15" fill="rgb(244,218,35)"/><text x="45.1887%" y="159.50"></text></g><g><title>implementations_of_trait (86,910 samples, 0.19%)</title><rect x="45.4300%" y="133" width="0.1924%" height="15" fill="rgb(240,68,47)"/><text x="45.6800%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (71,520 samples, 0.16%)</title><rect x="45.4641%" y="117" width="0.1584%" height="15" fill="rgb(210,16,53)"/><text x="45.7141%" y="127.50"></text></g><g><title>fn_sig (118,062 samples, 0.26%)</title><rect x="45.7038%" y="165" width="0.2614%" height="15" fill="rgb(235,124,12)"/><text x="45.9538%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (107,652 samples, 0.24%)</title><rect x="45.7269%" y="149" width="0.2384%" height="15" fill="rgb(224,169,11)"/><text x="45.9769%" y="159.50"></text></g><g><title>generics_of (107,221 samples, 0.24%)</title><rect x="45.9653%" y="165" width="0.2374%" height="15" fill="rgb(250,166,2)"/><text x="46.2153%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (71,321 samples, 0.16%)</title><rect x="46.0447%" y="149" width="0.1579%" height="15" fill="rgb(242,216,29)"/><text x="46.2947%" y="159.50"></text></g><g><title>impl_item_implementor_ids (80,601 samples, 0.18%)</title><rect x="46.2027%" y="165" width="0.1785%" height="15" fill="rgb(230,116,27)"/><text x="46.4527%" y="175.50"></text></g><g><title>associated_items (69,431 samples, 0.15%)</title><rect x="46.2274%" y="149" width="0.1537%" height="15" fill="rgb(228,99,48)"/><text x="46.4774%" y="159.50"></text></g><g><title>impl_trait_ref (62,571 samples, 0.14%)</title><rect x="46.4214%" y="165" width="0.1385%" height="15" fill="rgb(253,11,6)"/><text x="46.6714%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (54,451 samples, 0.12%)</title><rect x="46.4394%" y="149" width="0.1206%" height="15" fill="rgb(247,143,39)"/><text x="46.6894%" y="159.50"></text></g><g><title>item_attrs (130,422 samples, 0.29%)</title><rect x="46.6201%" y="165" width="0.2888%" height="15" fill="rgb(236,97,10)"/><text x="46.8701%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (123,882 samples, 0.27%)</title><rect x="46.6346%" y="149" width="0.2743%" height="15" fill="rgb(233,208,19)"/><text x="46.8846%" y="159.50"></text></g><g><title>method_autoderef_steps (182,752 samples, 0.40%)</title><rect x="47.0529%" y="165" width="0.4046%" height="15" fill="rgb(216,164,2)"/><text x="47.3029%" y="175.50"></text></g><g><title>evaluate_obligation (102,660 samples, 0.23%)</title><rect x="47.2302%" y="149" width="0.2273%" height="15" fill="rgb(220,129,5)"/><text x="47.4802%" y="159.50"></text></g><g><title>explicit_predicates_of (353,164 samples, 0.78%)</title><rect x="48.0177%" y="133" width="0.7820%" height="15" fill="rgb(242,17,10)"/><text x="48.2677%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (323,764 samples, 0.72%)</title><rect x="48.0828%" y="117" width="0.7169%" height="15" fill="rgb(242,107,0)"/><text x="48.3328%" y="127.50"></text></g><g><title>predicates_of (635,147 samples, 1.41%)</title><rect x="47.5253%" y="165" width="1.4063%" height="15" fill="rgb(251,28,31)"/><text x="47.7753%" y="175.50"></text></g><g><title>predicates_defined_on (506,876 samples, 1.12%)</title><rect x="47.8094%" y="149" width="1.1223%" height="15" fill="rgb(233,223,10)"/><text x="48.0594%" y="159.50"></text></g><g><title>inferred_outlives_of (59,620 samples, 0.13%)</title><rect x="48.7997%" y="133" width="0.1320%" height="15" fill="rgb(215,21,27)"/><text x="49.0497%" y="143.50"></text></g><g><title>type_of (112,221 samples, 0.25%)</title><rect x="49.0139%" y="165" width="0.2485%" height="15" fill="rgb(232,23,21)"/><text x="49.2639%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (90,941 samples, 0.20%)</title><rect x="49.0610%" y="149" width="0.2014%" height="15" fill="rgb(244,5,23)"/><text x="49.3110%" y="159.50"></text></g><g><title>variances_of (48,501 samples, 0.11%)</title><rect x="49.2694%" y="165" width="0.1074%" height="15" fill="rgb(226,81,46)"/><text x="49.5194%" y="175.50"></text></g><g><title>item_bodies_checking (11,673,420 samples, 25.85%)</title><rect x="23.5626%" y="213" width="25.8468%" height="15" fill="rgb(247,70,30)"/><text x="23.8126%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (11,670,820 samples, 25.84%)</title><rect x="23.5684%" y="197" width="25.8410%" height="15" fill="rgb(212,68,19)"/><text x="23.8184%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (11,654,600 samples, 25.81%)</title><rect x="23.6043%" y="181" width="25.8051%" height="15" fill="rgb(240,187,13)"/><text x="23.8543%" y="191.50">typeck</text></g><g><title>impl_trait_ref (75,571 samples, 0.17%)</title><rect x="49.8337%" y="133" width="0.1673%" height="15" fill="rgb(223,113,26)"/><text x="50.0837%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (71,271 samples, 0.16%)</title><rect x="49.8432%" y="117" width="0.1578%" height="15" fill="rgb(206,192,2)"/><text x="50.0932%" y="127.50"></text></g><g><title>adt_destructor (141,602 samples, 0.31%)</title><rect x="49.7227%" y="181" width="0.3135%" height="15" fill="rgb(241,108,4)"/><text x="49.9727%" y="191.50"></text></g><g><title>coherent_trait (135,662 samples, 0.30%)</title><rect x="49.7359%" y="165" width="0.3004%" height="15" fill="rgb(247,173,49)"/><text x="49.9859%" y="175.50"></text></g><g><title>specialization_graph_of (132,421 samples, 0.29%)</title><rect x="49.7430%" y="149" width="0.2932%" height="15" fill="rgb(224,114,35)"/><text x="49.9930%" y="159.50"></text></g><g><title>item_types_checking (292,184 samples, 0.65%)</title><rect x="49.4094%" y="213" width="0.6469%" height="15" fill="rgb(245,159,27)"/><text x="49.6594%" y="223.50"></text></g><g><title>check_mod_item_types (288,084 samples, 0.64%)</title><rect x="49.4185%" y="197" width="0.6379%" height="15" fill="rgb(245,172,44)"/><text x="49.6685%" y="207.50"></text></g><g><title>fn_sig (65,421 samples, 0.14%)</title><rect x="50.3703%" y="181" width="0.1449%" height="15" fill="rgb(236,23,11)"/><text x="50.6203%" y="191.50"></text></g><g><title>is_late_bound_map (197,281 samples, 0.44%)</title><rect x="50.6714%" y="165" width="0.4368%" height="15" fill="rgb(205,117,38)"/><text x="50.9214%" y="175.50"></text></g><g><title>resolve_lifetimes (174,541 samples, 0.39%)</title><rect x="50.7217%" y="149" width="0.3865%" height="15" fill="rgb(237,72,25)"/><text x="50.9717%" y="159.50"></text></g><g><title>generics_of (301,051 samples, 0.67%)</title><rect x="50.5151%" y="181" width="0.6666%" height="15" fill="rgb(244,70,9)"/><text x="50.7651%" y="191.50"></text></g><g><title>explicit_predicates_of (92,811 samples, 0.21%)</title><rect x="51.3115%" y="149" width="0.2055%" height="15" fill="rgb(217,125,39)"/><text x="51.5615%" y="159.50"></text></g><g><title>predicates_of (88,201 samples, 0.20%)</title><rect x="51.8468%" y="117" width="0.1953%" height="15" fill="rgb(235,36,10)"/><text x="52.0968%" y="127.50"></text></g><g><title>predicates_defined_on (76,631 samples, 0.17%)</title><rect x="51.8724%" y="101" width="0.1697%" height="15" fill="rgb(251,123,47)"/><text x="52.1224%" y="111.50"></text></g><g><title>predicates_of (977,522 samples, 2.16%)</title><rect x="51.1900%" y="181" width="2.1644%" height="15" fill="rgb(221,13,13)"/><text x="51.4400%" y="191.50">p..</text></g><g><title>predicates_defined_on (954,012 samples, 2.11%)</title><rect x="51.2421%" y="165" width="2.1123%" height="15" fill="rgb(238,131,9)"/><text x="51.4921%" y="175.50">p..</text></g><g><title>inferred_outlives_of (829,850 samples, 1.84%)</title><rect x="51.5170%" y="149" width="1.8374%" height="15" fill="rgb(211,50,8)"/><text x="51.7670%" y="159.50">i..</text></g><g><title>inferred_outlives_crate (810,749 samples, 1.80%)</title><rect x="51.5593%" y="133" width="1.7951%" height="15" fill="rgb(245,182,24)"/><text x="51.8093%" y="143.50">i..</text></g><g><title>type_of (592,716 samples, 1.31%)</title><rect x="52.0421%" y="117" width="1.3124%" height="15" fill="rgb(242,14,37)"/><text x="52.2921%" y="127.50"></text></g><g><title>type_of (499,745 samples, 1.11%)</title><rect x="52.2479%" y="101" width="1.1065%" height="15" fill="rgb(246,228,12)"/><text x="52.4979%" y="111.50"></text></g><g><title>type_collecting (1,585,108 samples, 3.51%)</title><rect x="50.0581%" y="213" width="3.5097%" height="15" fill="rgb(213,55,15)"/><text x="50.3081%" y="223.50">typ..</text></g><g><title>collect_mod_item_types (1,573,708 samples, 3.48%)</title><rect x="50.0834%" y="197" width="3.4844%" height="15" fill="rgb(209,9,3)"/><text x="50.3334%" y="207.50">col..</text></g><g><title>type_of (96,362 samples, 0.21%)</title><rect x="53.3544%" y="181" width="0.2134%" height="15" fill="rgb(230,59,30)"/><text x="53.6044%" y="191.50"></text></g><g><title>evaluate_obligation (174,831 samples, 0.39%)</title><rect x="54.7355%" y="181" width="0.3871%" height="15" fill="rgb(209,121,21)"/><text x="54.9855%" y="191.50"></text></g><g><title>implied_outlives_bounds (110,592 samples, 0.24%)</title><rect x="55.1226%" y="181" width="0.2449%" height="15" fill="rgb(220,109,13)"/><text x="55.3726%" y="191.50"></text></g><g><title>param_env (64,320 samples, 0.14%)</title><rect x="55.3674%" y="181" width="0.1424%" height="15" fill="rgb(232,18,1)"/><text x="55.6174%" y="191.50"></text></g><g><title>check_impl_item_well_formed (911,780 samples, 2.02%)</title><rect x="53.7297%" y="197" width="2.0188%" height="15" fill="rgb(215,41,42)"/><text x="53.9797%" y="207.50">c..</text></g><g><title>region_scope_tree (107,780 samples, 0.24%)</title><rect x="55.5099%" y="181" width="0.2386%" height="15" fill="rgb(224,123,36)"/><text x="55.7599%" y="191.50"></text></g><g><title>evaluate_obligation (156,951 samples, 0.35%)</title><rect x="57.1861%" y="181" width="0.3475%" height="15" fill="rgb(240,125,3)"/><text x="57.4361%" y="191.50"></text></g><g><title>adt_sized_constraint (47,780 samples, 0.11%)</title><rect x="57.4279%" y="165" width="0.1058%" height="15" fill="rgb(205,98,50)"/><text x="57.6779%" y="175.50"></text></g><g><title>implied_outlives_bounds (83,920 samples, 0.19%)</title><rect x="57.5403%" y="181" width="0.1858%" height="15" fill="rgb(205,185,37)"/><text x="57.7903%" y="191.50"></text></g><g><title>evaluate_obligation (254,123 samples, 0.56%)</title><rect x="58.1862%" y="165" width="0.5627%" height="15" fill="rgb(238,207,15)"/><text x="58.4362%" y="175.50"></text></g><g><title>layout_of (82,150 samples, 0.18%)</title><rect x="59.0564%" y="149" width="0.1819%" height="15" fill="rgb(213,199,42)"/><text x="59.3064%" y="159.50"></text></g><g><title>layout_of (259,082 samples, 0.57%)</title><rect x="58.8882%" y="165" width="0.5736%" height="15" fill="rgb(235,201,11)"/><text x="59.1382%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (96,961 samples, 0.21%)</title><rect x="59.2471%" y="149" width="0.2147%" height="15" fill="rgb(207,46,11)"/><text x="59.4971%" y="159.50"></text></g><g><title>normalize_projection_ty (76,581 samples, 0.17%)</title><rect x="59.2923%" y="133" width="0.1696%" height="15" fill="rgb(241,35,35)"/><text x="59.5423%" y="143.50"></text></g><g><title>param_env (71,491 samples, 0.16%)</title><rect x="59.4618%" y="165" width="0.1583%" height="15" fill="rgb(243,32,47)"/><text x="59.7118%" y="175.50"></text></g><g><title>predicates_of (57,751 samples, 0.13%)</title><rect x="59.6201%" y="165" width="0.1279%" height="15" fill="rgb(247,202,23)"/><text x="59.8701%" y="175.50"></text></g><g><title>object_safety_violations (914,470 samples, 2.02%)</title><rect x="57.7262%" y="181" width="2.0248%" height="15" fill="rgb(219,102,11)"/><text x="57.9762%" y="191.50">o..</text></g><g><title>param_env (158,861 samples, 0.35%)</title><rect x="59.7509%" y="181" width="0.3517%" height="15" fill="rgb(243,110,44)"/><text x="60.0009%" y="191.50"></text></g><g><title>analysis (26,394,704 samples, 58.44%)</title><rect x="1.8642%" y="245" width="58.4420%" height="15" fill="rgb(222,74,54)"/><text x="2.1142%" y="255.50">analysis</text></g><g><title>type_check_crate (16,852,618 samples, 37.31%)</title><rect x="22.9919%" y="229" width="37.3144%" height="15" fill="rgb(216,99,12)"/><text x="23.2419%" y="239.50">type_check_crate</text></g><g><title>wf_checking (3,042,674 samples, 6.74%)</title><rect x="53.5693%" y="213" width="6.7370%" height="15" fill="rgb(226,22,26)"/><text x="53.8193%" y="223.50">wf_checki..</text></g><g><title>check_item_well_formed (2,058,453 samples, 4.56%)</title><rect x="55.7485%" y="197" width="4.5577%" height="15" fill="rgb(217,163,10)"/><text x="55.9985%" y="207.50">check..</text></g><g><title>variances_of (63,071 samples, 0.14%)</title><rect x="60.1666%" y="181" width="0.1396%" height="15" fill="rgb(213,25,53)"/><text x="60.4166%" y="191.50"></text></g><g><title>crate_variances (56,971 samples, 0.13%)</title><rect x="60.1801%" y="165" width="0.1261%" height="15" fill="rgb(252,105,26)"/><text x="60.4301%" y="175.50"></text></g><g><title>codegen_crate (424,255 samples, 0.94%)</title><rect x="60.3337%" y="245" width="0.9394%" height="15" fill="rgb(220,39,43)"/><text x="60.5837%" y="255.50"></text></g><g><title>AST_validation (179,382 samples, 0.40%)</title><rect x="61.7486%" y="229" width="0.3972%" height="15" fill="rgb(229,68,48)"/><text x="61.9986%" y="239.50"></text></g><g><title>crate_injection (89,781 samples, 0.20%)</title><rect x="62.2319%" y="229" width="0.1988%" height="15" fill="rgb(252,8,32)"/><text x="62.4819%" y="239.50"></text></g><g><title>metadata_load_macro (342,453 samples, 0.76%)</title><rect x="78.1216%" y="197" width="0.7582%" height="15" fill="rgb(223,20,43)"/><text x="78.3716%" y="207.50"></text></g><g><title>macro_expand_crate (7,628,896 samples, 16.89%)</title><rect x="62.4307%" y="229" width="16.8916%" height="15" fill="rgb(229,81,49)"/><text x="62.6807%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (7,611,955 samples, 16.85%)</title><rect x="62.4682%" y="213" width="16.8541%" height="15" fill="rgb(236,28,36)"/><text x="62.7182%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (199,823 samples, 0.44%)</title><rect x="78.8798%" y="197" width="0.4424%" height="15" fill="rgb(249,185,26)"/><text x="79.1298%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (279,813 samples, 0.62%)</title><rect x="79.3333%" y="229" width="0.6196%" height="15" fill="rgb(249,174,33)"/><text x="79.5833%" y="239.50"></text></g><g><title>finalize_imports (279,223 samples, 0.62%)</title><rect x="79.9731%" y="213" width="0.6182%" height="15" fill="rgb(233,201,37)"/><text x="80.2231%" y="223.50"></text></g><g><title>late_resolve_crate (956,701 samples, 2.12%)</title><rect x="80.6480%" y="213" width="2.1183%" height="15" fill="rgb(221,78,26)"/><text x="80.8980%" y="223.50">l..</text></g><g><title>configure_and_expand (9,779,019 samples, 21.65%)</title><rect x="61.2731%" y="245" width="21.6523%" height="15" fill="rgb(250,127,30)"/><text x="61.5231%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,342,524 samples, 2.97%)</title><rect x="79.9528%" y="229" width="2.9726%" height="15" fill="rgb(230,49,44)"/><text x="80.2028%" y="239.50">res..</text></g><g><title>drop_ast (116,211 samples, 0.26%)</title><rect x="82.9254%" y="245" width="0.2573%" height="15" fill="rgb(229,67,23)"/><text x="83.1754%" y="255.50"></text></g><g><title>early_lint_checks (248,813 samples, 0.55%)</title><rect x="83.2134%" y="245" width="0.5509%" height="15" fill="rgb(249,83,47)"/><text x="83.4634%" y="255.50"></text></g><g><title>free_global_ctxt (1,294,725 samples, 2.87%)</title><rect x="83.7643%" y="245" width="2.8667%" height="15" fill="rgb(215,43,3)"/><text x="84.0143%" y="255.50">fr..</text></g><g><title>crate_hash (61,361 samples, 0.14%)</title><rect x="87.1986%" y="229" width="0.1359%" height="15" fill="rgb(238,154,13)"/><text x="87.4486%" y="239.50"></text></g><g><title>generate_crate_metadata (371,384 samples, 0.82%)</title><rect x="86.6310%" y="245" width="0.8223%" height="15" fill="rgb(219,56,2)"/><text x="86.8810%" y="255.50"></text></g><g><title>hir_lowering (1,248,494 samples, 2.76%)</title><rect x="87.4533%" y="245" width="2.7644%" height="15" fill="rgb(233,0,4)"/><text x="87.7033%" y="255.50">hi..</text></g><g><title>parse_crate (3,301,056 samples, 7.31%)</title><rect x="90.2974%" y="245" width="7.3091%" height="15" fill="rgb(235,30,7)"/><text x="90.5474%" y="255.50">parse_crate</text></g><g><title>prepare_outputs (282,793 samples, 0.63%)</title><rect x="97.6298%" y="245" width="0.6261%" height="15" fill="rgb(250,79,13)"/><text x="97.8798%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (388,384 samples, 0.86%)</title><rect x="98.2559%" y="245" width="0.8599%" height="15" fill="rgb(211,146,34)"/><text x="98.5059%" y="255.50"></text></g><g><title>setup_global_ctxt (135,031 samples, 0.30%)</title><rect x="99.1399%" y="245" width="0.2990%" height="15" fill="rgb(228,22,38)"/><text x="99.3899%" y="255.50"></text></g><g><title>all (45,163,892 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (45,163,892 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (253,433 samples, 0.56%)</title><rect x="99.4389%" y="245" width="0.5611%" height="15" fill="rgb(215,215,53)"/><text x="99.6889%" y="255.50"></text></g></svg></svg>