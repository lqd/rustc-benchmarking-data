<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (959,739 samples, 0.24%)</title><rect x="13.8005%" y="133" width="0.2372%" height="15" fill="rgb(227,0,7)"/><text x="14.0505%" y="143.50"></text></g><g><title>is_sized_raw (979,432 samples, 0.24%)</title><rect x="14.0928%" y="133" width="0.2421%" height="15" fill="rgb(217,0,24)"/><text x="14.3428%" y="143.50"></text></g><g><title>evaluate_obligation (613,286 samples, 0.15%)</title><rect x="14.1833%" y="117" width="0.1516%" height="15" fill="rgb(221,193,54)"/><text x="14.4333%" y="127.50"></text></g><g><title>param_env (514,927 samples, 0.13%)</title><rect x="16.1526%" y="101" width="0.1273%" height="15" fill="rgb(248,212,6)"/><text x="16.4026%" y="111.50"></text></g><g><title>item_attrs (683,885 samples, 0.17%)</title><rect x="16.8189%" y="69" width="0.1691%" height="15" fill="rgb(208,68,35)"/><text x="17.0689%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (667,805 samples, 0.17%)</title><rect x="16.8229%" y="53" width="0.1651%" height="15" fill="rgb(232,128,0)"/><text x="17.0729%" y="63.50"></text></g><g><title>codegen_fn_attrs (857,518 samples, 0.21%)</title><rect x="16.7827%" y="85" width="0.2120%" height="15" fill="rgb(207,160,47)"/><text x="17.0327%" y="95.50"></text></g><g><title>is_copy_raw (6,539,689 samples, 1.62%)</title><rect x="20.6193%" y="53" width="1.6166%" height="15" fill="rgb(228,23,34)"/><text x="20.8693%" y="63.50"></text></g><g><title>evaluate_obligation (5,477,808 samples, 1.35%)</title><rect x="20.8818%" y="37" width="1.3541%" height="15" fill="rgb(218,30,26)"/><text x="21.1318%" y="47.50"></text></g><g><title>needs_drop_raw (7,818,363 samples, 1.93%)</title><rect x="20.3184%" y="69" width="1.9327%" height="15" fill="rgb(220,122,19)"/><text x="20.5684%" y="79.50">n..</text></g><g><title>codegen_fulfill_obligation (1,240,077 samples, 0.31%)</title><rect x="22.4128%" y="53" width="0.3065%" height="15" fill="rgb(250,228,42)"/><text x="22.6628%" y="63.50"></text></g><g><title>specialization_graph_of (566,956 samples, 0.14%)</title><rect x="22.7481%" y="53" width="0.1401%" height="15" fill="rgb(240,193,28)"/><text x="22.9981%" y="63.50"></text></g><g><title>resolve_instance (2,686,562 samples, 0.66%)</title><rect x="22.2597%" y="69" width="0.6641%" height="15" fill="rgb(216,20,37)"/><text x="22.5097%" y="79.50"></text></g><g><title>thir_body (4,351,940 samples, 1.08%)</title><rect x="22.9672%" y="69" width="1.0758%" height="15" fill="rgb(206,188,39)"/><text x="23.2172%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (766,128 samples, 0.19%)</title><rect x="24.0572%" y="69" width="0.1894%" height="15" fill="rgb(217,207,13)"/><text x="24.3072%" y="79.50"></text></g><g><title>mir_const (36,577,374 samples, 9.04%)</title><rect x="15.2131%" y="117" width="9.0417%" height="15" fill="rgb(231,73,38)"/><text x="15.4631%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (32,261,588 samples, 7.97%)</title><rect x="16.2799%" y="101" width="7.9749%" height="15" fill="rgb(225,20,46)"/><text x="16.5299%" y="111.50">unsafety_ch..</text></g><g><title>mir_built (29,370,232 samples, 7.26%)</title><rect x="16.9947%" y="85" width="7.2602%" height="15" fill="rgb(210,31,41)"/><text x="17.2447%" y="95.50">mir_built</text></g><g><title>mir_promoted (40,308,846 samples, 9.96%)</title><rect x="14.3349%" y="133" width="9.9641%" height="15" fill="rgb(221,200,47)"/><text x="14.5849%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (763,730 samples, 0.19%)</title><rect x="24.2991%" y="133" width="0.1888%" height="15" fill="rgb(226,26,5)"/><text x="24.5491%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,848,234 samples, 0.95%)</title><rect x="24.4879%" y="133" width="0.9513%" height="15" fill="rgb(249,33,26)"/><text x="24.7379%" y="143.50"></text></g><g><title>normalize_projection_ty (2,073,115 samples, 0.51%)</title><rect x="24.9267%" y="117" width="0.5125%" height="15" fill="rgb(235,183,28)"/><text x="25.1767%" y="127.50"></text></g><g><title>type_op_normalize_predicate (4,399,048 samples, 1.09%)</title><rect x="25.4391%" y="133" width="1.0874%" height="15" fill="rgb(221,5,38)"/><text x="25.6891%" y="143.50"></text></g><g><title>normalize_projection_ty (1,787,140 samples, 0.44%)</title><rect x="26.0848%" y="117" width="0.4418%" height="15" fill="rgb(247,18,42)"/><text x="26.3348%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,982,392 samples, 0.49%)</title><rect x="26.5265%" y="133" width="0.4900%" height="15" fill="rgb(241,131,45)"/><text x="26.7765%" y="143.50"></text></g><g><title>type_op_prove_predicate (18,413,620 samples, 4.55%)</title><rect x="27.0166%" y="133" width="4.5518%" height="15" fill="rgb(249,31,29)"/><text x="27.2666%" y="143.50">type_..</text></g><g><title>MIR_borrow_checking (126,153,057 samples, 31.18%)</title><rect x="0.3855%" y="165" width="31.1844%" height="15" fill="rgb(225,111,53)"/><text x="0.6355%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (125,628,404 samples, 31.05%)</title><rect x="0.5152%" y="149" width="31.0547%" height="15" fill="rgb(238,160,17)"/><text x="0.7652%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (584,327 samples, 0.14%)</title><rect x="31.6057%" y="165" width="0.1444%" height="15" fill="rgb(214,148,48)"/><text x="31.8557%" y="175.50"></text></g><g><title>should_inherit_track_caller (409,786 samples, 0.10%)</title><rect x="32.0489%" y="117" width="0.1013%" height="15" fill="rgb(232,36,49)"/><text x="32.2989%" y="127.50"></text></g><g><title>codegen_fn_attrs (836,421 samples, 0.21%)</title><rect x="31.9490%" y="133" width="0.2068%" height="15" fill="rgb(209,103,24)"/><text x="32.1990%" y="143.50"></text></g><g><title>check_mod_attrs (1,619,527 samples, 0.40%)</title><rect x="31.7555%" y="149" width="0.4003%" height="15" fill="rgb(229,88,8)"/><text x="32.0055%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (977,781 samples, 0.24%)</title><rect x="32.3085%" y="149" width="0.2417%" height="15" fill="rgb(213,181,19)"/><text x="32.5585%" y="159.50"></text></g><g><title>misc_checking_1 (3,313,816 samples, 0.82%)</title><rect x="31.7503%" y="165" width="0.8192%" height="15" fill="rgb(254,191,54)"/><text x="32.0003%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,834,271 samples, 0.45%)</title><rect x="32.5699%" y="149" width="0.4534%" height="15" fill="rgb(241,83,37)"/><text x="32.8199%" y="159.50"></text></g><g><title>check_mod_liveness (1,532,538 samples, 0.38%)</title><rect x="32.6444%" y="133" width="0.3788%" height="15" fill="rgb(233,36,39)"/><text x="32.8944%" y="143.50"></text></g><g><title>param_env (909,896 samples, 0.22%)</title><rect x="33.6265%" y="117" width="0.2249%" height="15" fill="rgb(226,3,54)"/><text x="33.8765%" y="127.50"></text></g><g><title>misc_checking_2 (5,330,189 samples, 1.32%)</title><rect x="32.5694%" y="165" width="1.3176%" height="15" fill="rgb(245,192,40)"/><text x="32.8194%" y="175.50"></text></g><g><title>match_checking (3,494,198 samples, 0.86%)</title><rect x="33.0233%" y="149" width="0.8637%" height="15" fill="rgb(238,167,29)"/><text x="33.2733%" y="159.50"></text></g><g><title>check_match (3,337,988 samples, 0.83%)</title><rect x="33.0619%" y="133" width="0.8251%" height="15" fill="rgb(232,182,51)"/><text x="33.3119%" y="143.50"></text></g><g><title>check_private_in_public (701,667 samples, 0.17%)</title><rect x="33.8899%" y="149" width="0.1734%" height="15" fill="rgb(231,60,39)"/><text x="34.1399%" y="159.50"></text></g><g><title>death_checking (1,020,092 samples, 0.25%)</title><rect x="34.0633%" y="149" width="0.2522%" height="15" fill="rgb(208,69,12)"/><text x="34.3133%" y="159.50"></text></g><g><title>crate_lints (2,696,550 samples, 0.67%)</title><rect x="34.3159%" y="133" width="0.6666%" height="15" fill="rgb(235,93,37)"/><text x="34.5659%" y="143.50"></text></g><g><title>type_of (1,125,555 samples, 0.28%)</title><rect x="34.7042%" y="117" width="0.2782%" height="15" fill="rgb(213,116,39)"/><text x="34.9542%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (893,258 samples, 0.22%)</title><rect x="34.7616%" y="101" width="0.2208%" height="15" fill="rgb(222,207,29)"/><text x="35.0116%" y="111.50"></text></g><g><title>lint_checking (4,196,576 samples, 1.04%)</title><rect x="34.3155%" y="149" width="1.0374%" height="15" fill="rgb(206,96,30)"/><text x="34.5655%" y="159.50"></text></g><g><title>module_lints (1,498,396 samples, 0.37%)</title><rect x="34.9824%" y="133" width="0.3704%" height="15" fill="rgb(218,138,4)"/><text x="35.2324%" y="143.50"></text></g><g><title>lint_mod (1,494,036 samples, 0.37%)</title><rect x="34.9835%" y="117" width="0.3693%" height="15" fill="rgb(250,191,14)"/><text x="35.2335%" y="127.50"></text></g><g><title>privacy_access_levels (1,156,442 samples, 0.29%)</title><rect x="35.3528%" y="149" width="0.2859%" height="15" fill="rgb(239,60,40)"/><text x="35.6028%" y="159.50"></text></g><g><title>privacy_checking_modules (4,677,543 samples, 1.16%)</title><rect x="35.6387%" y="149" width="1.1563%" height="15" fill="rgb(206,27,48)"/><text x="35.8887%" y="159.50"></text></g><g><title>check_mod_privacy (4,674,523 samples, 1.16%)</title><rect x="35.6395%" y="133" width="1.1555%" height="15" fill="rgb(225,35,8)"/><text x="35.8895%" y="143.50"></text></g><g><title>misc_checking_3 (11,793,281 samples, 2.92%)</title><rect x="33.8870%" y="165" width="2.9152%" height="15" fill="rgb(250,213,24)"/><text x="34.1370%" y="175.50">mi..</text></g><g><title>impl_parent (1,686,174 samples, 0.42%)</title><rect x="37.5406%" y="101" width="0.4168%" height="15" fill="rgb(247,123,22)"/><text x="37.7906%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,073,748 samples, 0.27%)</title><rect x="37.6919%" y="85" width="0.2654%" height="15" fill="rgb(231,138,38)"/><text x="37.9419%" y="95.50"></text></g><g><title>impl_trait_ref (4,337,681 samples, 1.07%)</title><rect x="37.9578%" y="101" width="1.0723%" height="15" fill="rgb(231,145,46)"/><text x="38.2078%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,733,722 samples, 0.92%)</title><rect x="38.1071%" y="85" width="0.9230%" height="15" fill="rgb(251,118,11)"/><text x="38.3571%" y="95.50"></text></g><g><title>trait_impls_of (465,785 samples, 0.12%)</title><rect x="39.0425%" y="101" width="0.1151%" height="15" fill="rgb(217,147,25)"/><text x="39.2925%" y="111.50"></text></g><g><title>coherent_trait (9,340,043 samples, 2.31%)</title><rect x="36.8492%" y="133" width="2.3088%" height="15" fill="rgb(247,81,37)"/><text x="37.0992%" y="143.50">c..</text></g><g><title>specialization_graph_of (9,319,263 samples, 2.30%)</title><rect x="36.8543%" y="117" width="2.3037%" height="15" fill="rgb(209,12,38)"/><text x="37.1043%" y="127.50">s..</text></g><g><title>coherence_checking (9,452,095 samples, 2.34%)</title><rect x="36.8447%" y="149" width="2.3365%" height="15" fill="rgb(227,1,9)"/><text x="37.0947%" y="159.50">c..</text></g><g><title>dropck_outlives (1,389,250 samples, 0.34%)</title><rect x="53.3115%" y="101" width="0.3434%" height="15" fill="rgb(248,47,43)"/><text x="53.5615%" y="111.50"></text></g><g><title>evaluate_obligation (2,000,721 samples, 0.49%)</title><rect x="53.6549%" y="101" width="0.4946%" height="15" fill="rgb(221,10,30)"/><text x="53.9049%" y="111.50"></text></g><g><title>method_autoderef_steps (544,828 samples, 0.13%)</title><rect x="54.2719%" y="101" width="0.1347%" height="15" fill="rgb(210,229,1)"/><text x="54.5219%" y="111.50"></text></g><g><title>associated_items (546,008 samples, 0.13%)</title><rect x="64.8024%" y="85" width="0.1350%" height="15" fill="rgb(222,148,37)"/><text x="65.0524%" y="95.50"></text></g><g><title>adt_dtorck_constraint (482,556 samples, 0.12%)</title><rect x="65.1137%" y="69" width="0.1193%" height="15" fill="rgb(234,67,33)"/><text x="65.3637%" y="79.50"></text></g><g><title>dropck_outlives (1,349,246 samples, 0.33%)</title><rect x="64.9544%" y="85" width="0.3335%" height="15" fill="rgb(247,98,35)"/><text x="65.2044%" y="95.50"></text></g><g><title>evaluate_obligation (5,708,081 samples, 1.41%)</title><rect x="65.2879%" y="85" width="1.4110%" height="15" fill="rgb(247,138,52)"/><text x="65.5379%" y="95.50"></text></g><g><title>implied_outlives_bounds (480,773 samples, 0.12%)</title><rect x="66.7770%" y="85" width="0.1188%" height="15" fill="rgb(213,79,30)"/><text x="67.0270%" y="95.50"></text></g><g><title>is_copy_raw (3,575,664 samples, 0.88%)</title><rect x="66.9065%" y="85" width="0.8839%" height="15" fill="rgb(246,177,23)"/><text x="67.1565%" y="95.50"></text></g><g><title>evaluate_obligation (3,010,985 samples, 0.74%)</title><rect x="67.0461%" y="69" width="0.7443%" height="15" fill="rgb(230,62,27)"/><text x="67.2961%" y="79.50"></text></g><g><title>evaluate_obligation (553,793 samples, 0.14%)</title><rect x="67.9388%" y="69" width="0.1369%" height="15" fill="rgb(216,154,8)"/><text x="68.1888%" y="79.50"></text></g><g><title>method_autoderef_steps (1,050,076 samples, 0.26%)</title><rect x="67.8189%" y="85" width="0.2596%" height="15" fill="rgb(244,35,45)"/><text x="68.0689%" y="95.50"></text></g><g><title>typeck (55,340,436 samples, 13.68%)</title><rect x="54.5245%" y="101" width="13.6799%" height="15" fill="rgb(251,115,12)"/><text x="54.7745%" y="111.50">typeck</text></g><g><title>item_bodies_checking (117,396,019 samples, 29.02%)</title><rect x="39.2077%" y="149" width="29.0197%" height="15" fill="rgb(240,54,50)"/><text x="39.4577%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (117,392,049 samples, 29.02%)</title><rect x="39.2087%" y="133" width="29.0187%" height="15" fill="rgb(233,84,52)"/><text x="39.4587%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (117,068,667 samples, 28.94%)</title><rect x="39.2886%" y="117" width="28.9388%" height="15" fill="rgb(207,117,47)"/><text x="39.5386%" y="127.50">typeck</text></g><g><title>implied_outlives_bounds (442,817 samples, 0.11%)</title><rect x="70.8767%" y="117" width="0.1095%" height="15" fill="rgb(249,43,39)"/><text x="71.1267%" y="127.50"></text></g><g><title>item_types_checking (11,175,565 samples, 2.76%)</title><rect x="68.2274%" y="149" width="2.7625%" height="15" fill="rgb(209,38,44)"/><text x="68.4774%" y="159.50">it..</text></g><g><title>check_mod_item_types (11,171,565 samples, 2.76%)</title><rect x="68.2284%" y="133" width="2.7616%" height="15" fill="rgb(236,212,23)"/><text x="68.4784%" y="143.50">ch..</text></g><g><title>fn_sig (1,290,096 samples, 0.32%)</title><rect x="71.2323%" y="117" width="0.3189%" height="15" fill="rgb(242,79,21)"/><text x="71.4823%" y="127.50"></text></g><g><title>generics_of (942,151 samples, 0.23%)</title><rect x="71.5512%" y="117" width="0.2329%" height="15" fill="rgb(211,96,35)"/><text x="71.8012%" y="127.50"></text></g><g><title>lint_levels (631,997 samples, 0.16%)</title><rect x="72.6979%" y="37" width="0.1562%" height="15" fill="rgb(253,215,40)"/><text x="72.9479%" y="47.50"></text></g><g><title>late_bound_vars_map (1,888,841 samples, 0.47%)</title><rect x="72.3891%" y="69" width="0.4669%" height="15" fill="rgb(211,81,21)"/><text x="72.6391%" y="79.50"></text></g><g><title>resolve_lifetimes (1,826,870 samples, 0.45%)</title><rect x="72.4044%" y="53" width="0.4516%" height="15" fill="rgb(208,190,38)"/><text x="72.6544%" y="63.50"></text></g><g><title>explicit_predicates_of (4,103,885 samples, 1.01%)</title><rect x="71.9357%" y="85" width="1.0145%" height="15" fill="rgb(235,213,38)"/><text x="72.1857%" y="95.50"></text></g><g><title>predicates_of (5,112,981 samples, 1.26%)</title><rect x="71.8103%" y="117" width="1.2639%" height="15" fill="rgb(237,122,38)"/><text x="72.0603%" y="127.50"></text></g><g><title>predicates_defined_on (4,919,539 samples, 1.22%)</title><rect x="71.8581%" y="101" width="1.2161%" height="15" fill="rgb(244,218,35)"/><text x="72.1081%" y="111.50"></text></g><g><title>inferred_outlives_of (501,845 samples, 0.12%)</title><rect x="72.9502%" y="85" width="0.1241%" height="15" fill="rgb(240,68,47)"/><text x="73.2002%" y="95.50"></text></g><g><title>inferred_outlives_crate (438,535 samples, 0.11%)</title><rect x="72.9658%" y="69" width="0.1084%" height="15" fill="rgb(210,16,53)"/><text x="73.2158%" y="79.50"></text></g><g><title>type_collecting (9,080,292 samples, 2.24%)</title><rect x="70.9902%" y="149" width="2.2446%" height="15" fill="rgb(235,124,12)"/><text x="71.2402%" y="159.50">t..</text></g><g><title>collect_mod_item_types (9,070,642 samples, 2.24%)</title><rect x="70.9926%" y="133" width="2.2422%" height="15" fill="rgb(224,169,11)"/><text x="71.2426%" y="143.50">c..</text></g><g><title>type_of (625,071 samples, 0.15%)</title><rect x="73.0803%" y="117" width="0.1545%" height="15" fill="rgb(250,166,2)"/><text x="73.3303%" y="127.50"></text></g><g><title>evaluate_obligation (2,370,368 samples, 0.59%)</title><rect x="76.0236%" y="117" width="0.5859%" height="15" fill="rgb(242,216,29)"/><text x="76.2736%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,651,825 samples, 0.41%)</title><rect x="76.6114%" y="117" width="0.4083%" height="15" fill="rgb(230,116,27)"/><text x="76.8614%" y="127.50"></text></g><g><title>param_env (2,111,261 samples, 0.52%)</title><rect x="77.0197%" y="117" width="0.5219%" height="15" fill="rgb(228,99,48)"/><text x="77.2697%" y="127.50"></text></g><g><title>check_impl_item_well_formed (17,860,601 samples, 4.42%)</title><rect x="73.4388%" y="133" width="4.4151%" height="15" fill="rgb(253,11,6)"/><text x="73.6888%" y="143.50">check..</text></g><g><title>region_scope_tree (1,254,703 samples, 0.31%)</title><rect x="77.5437%" y="117" width="0.3102%" height="15" fill="rgb(247,143,39)"/><text x="77.7937%" y="127.50"></text></g><g><title>adt_sized_constraint (438,374 samples, 0.11%)</title><rect x="79.3403%" y="117" width="0.1084%" height="15" fill="rgb(236,97,10)"/><text x="79.5903%" y="127.50"></text></g><g><title>implied_outlives_bounds (468,906 samples, 0.12%)</title><rect x="79.4889%" y="117" width="0.1159%" height="15" fill="rgb(233,208,19)"/><text x="79.7389%" y="127.50"></text></g><g><title>param_env (1,188,663 samples, 0.29%)</title><rect x="79.7014%" y="117" width="0.2938%" height="15" fill="rgb(216,164,2)"/><text x="79.9514%" y="127.50"></text></g><g><title>check_item_well_formed (9,183,310 samples, 2.27%)</title><rect x="77.8539%" y="133" width="2.2701%" height="15" fill="rgb(220,129,5)"/><text x="78.1039%" y="143.50">c..</text></g><g><title>implied_outlives_bounds (434,127 samples, 0.11%)</title><rect x="81.0532%" y="117" width="0.1073%" height="15" fill="rgb(242,17,10)"/><text x="81.3032%" y="127.50"></text></g><g><title>param_env (825,673 samples, 0.20%)</title><rect x="81.1606%" y="117" width="0.2041%" height="15" fill="rgb(242,107,0)"/><text x="81.4106%" y="127.50"></text></g><g><title>region_scope_tree (411,062 samples, 0.10%)</title><rect x="81.3808%" y="117" width="0.1016%" height="15" fill="rgb(251,28,31)"/><text x="81.6308%" y="127.50"></text></g><g><title>analysis (329,285,901 samples, 81.40%)</title><rect x="0.1556%" y="181" width="81.3979%" height="15" fill="rgb(233,223,10)"/><text x="0.4056%" y="191.50">analysis</text></g><g><title>type_check_crate (181,035,839 samples, 44.75%)</title><rect x="36.8023%" y="165" width="44.7512%" height="15" fill="rgb(215,21,27)"/><text x="37.0523%" y="175.50">type_check_crate</text></g><g><title>wf_checking (33,629,165 samples, 8.31%)</title><rect x="73.2405%" y="149" width="8.3130%" height="15" fill="rgb(232,23,21)"/><text x="73.4905%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (5,782,972 samples, 1.43%)</title><rect x="80.1239%" y="133" width="1.4295%" height="15" fill="rgb(244,5,23)"/><text x="80.3739%" y="143.50"></text></g><g><title>codegen_crate (405,924 samples, 0.10%)</title><rect x="81.5565%" y="181" width="0.1003%" height="15" fill="rgb(226,81,46)"/><text x="81.8065%" y="191.50"></text></g><g><title>AST_validation (577,127 samples, 0.14%)</title><rect x="81.7040%" y="165" width="0.1427%" height="15" fill="rgb(247,70,30)"/><text x="81.9540%" y="175.50"></text></g><g><title>macro_expand_crate (20,805,912 samples, 5.14%)</title><rect x="81.9148%" y="165" width="5.1431%" height="15" fill="rgb(212,68,19)"/><text x="82.1648%" y="175.50">macro_..</text></g><g><title>expand_crate (20,789,672 samples, 5.14%)</title><rect x="81.9188%" y="149" width="5.1391%" height="15" fill="rgb(240,187,13)"/><text x="82.1688%" y="159.50">expand..</text></g><g><title>metadata_register_crate (1,885,431 samples, 0.47%)</title><rect x="86.5919%" y="133" width="0.4661%" height="15" fill="rgb(223,113,26)"/><text x="86.8419%" y="143.50"></text></g><g><title>metadata_register_crate (704,677 samples, 0.17%)</title><rect x="86.8837%" y="117" width="0.1742%" height="15" fill="rgb(206,192,2)"/><text x="87.1337%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (977,711 samples, 0.24%)</title><rect x="87.0589%" y="165" width="0.2417%" height="15" fill="rgb(241,108,4)"/><text x="87.3089%" y="175.50"></text></g><g><title>late_resolve_crate (5,635,773 samples, 1.39%)</title><rect x="87.4407%" y="149" width="1.3931%" height="15" fill="rgb(247,173,49)"/><text x="87.6907%" y="159.50"></text></g><g><title>configure_and_expand (29,360,568 samples, 7.26%)</title><rect x="81.6569%" y="181" width="7.2578%" height="15" fill="rgb(224,114,35)"/><text x="81.9069%" y="191.50">configure_..</text></g><g><title>resolve_crate (6,529,363 samples, 1.61%)</title><rect x="87.3006%" y="165" width="1.6140%" height="15" fill="rgb(245,159,27)"/><text x="87.5506%" y="175.50"></text></g><g><title>drop_ast (868,600 samples, 0.21%)</title><rect x="88.9146%" y="181" width="0.2147%" height="15" fill="rgb(245,172,44)"/><text x="89.1646%" y="191.50"></text></g><g><title>early_lint_checks (1,071,482 samples, 0.26%)</title><rect x="89.1330%" y="181" width="0.2649%" height="15" fill="rgb(236,23,11)"/><text x="89.3830%" y="191.50"></text></g><g><title>free_global_ctxt (5,044,806 samples, 1.25%)</title><rect x="89.3979%" y="181" width="1.2471%" height="15" fill="rgb(205,117,38)"/><text x="89.6479%" y="191.50"></text></g><g><title>generate_crate_metadata (3,724,732 samples, 0.92%)</title><rect x="90.6449%" y="181" width="0.9207%" height="15" fill="rgb(237,72,25)"/><text x="90.8949%" y="191.50"></text></g><g><title>hir_lowering (10,839,601 samples, 2.68%)</title><rect x="91.5657%" y="181" width="2.6795%" height="15" fill="rgb(244,70,9)"/><text x="91.8157%" y="191.50">hi..</text></g><g><title>parse_crate (21,237,436 samples, 5.25%)</title><rect x="94.2612%" y="181" width="5.2498%" height="15" fill="rgb(217,125,39)"/><text x="94.5112%" y="191.50">parse_..</text></g><g><title>self_profile_alloc_query_strings (1,203,934 samples, 0.30%)</title><rect x="99.5637%" y="181" width="0.2976%" height="15" fill="rgb(235,36,10)"/><text x="99.8137%" y="191.50"></text></g><g><title>all (404,538,740 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (404,538,740 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (442,695 samples, 0.11%)</title><rect x="99.8906%" y="181" width="0.1094%" height="15" fill="rgb(238,131,9)"/><text x="100.1406%" y="191.50"></text></g></svg></svg>