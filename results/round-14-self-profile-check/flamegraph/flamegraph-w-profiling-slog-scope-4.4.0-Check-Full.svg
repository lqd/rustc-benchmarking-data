<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (136,962 samples, 0.17%)</title><rect x="7.9028%" y="197" width="0.1689%" height="15" fill="rgb(227,0,7)"/><text x="8.1528%" y="207.50"></text></g><g><title>is_sized_raw (132,611 samples, 0.16%)</title><rect x="8.1298%" y="197" width="0.1635%" height="15" fill="rgb(217,0,24)"/><text x="8.3798%" y="207.50"></text></g><g><title>evaluate_obligation (120,571 samples, 0.15%)</title><rect x="8.1446%" y="181" width="0.1487%" height="15" fill="rgb(221,193,54)"/><text x="8.3946%" y="191.50"></text></g><g><title>param_env (172,050 samples, 0.21%)</title><rect x="9.0128%" y="165" width="0.2122%" height="15" fill="rgb(248,212,6)"/><text x="9.2628%" y="175.50"></text></g><g><title>item_attrs (100,243 samples, 0.12%)</title><rect x="9.4752%" y="133" width="0.1236%" height="15" fill="rgb(208,68,35)"/><text x="9.7252%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,633 samples, 0.12%)</title><rect x="9.4809%" y="117" width="0.1179%" height="15" fill="rgb(232,128,0)"/><text x="9.7309%" y="127.50"></text></g><g><title>codegen_fn_attrs (155,824 samples, 0.19%)</title><rect x="9.4140%" y="149" width="0.1922%" height="15" fill="rgb(207,160,47)"/><text x="9.6640%" y="159.50"></text></g><g><title>is_copy_raw (256,176 samples, 0.32%)</title><rect x="10.6226%" y="117" width="0.3159%" height="15" fill="rgb(228,23,34)"/><text x="10.8726%" y="127.50"></text></g><g><title>evaluate_obligation (197,246 samples, 0.24%)</title><rect x="10.6952%" y="101" width="0.2432%" height="15" fill="rgb(218,30,26)"/><text x="10.9452%" y="111.50"></text></g><g><title>needs_drop_raw (467,138 samples, 0.58%)</title><rect x="10.4912%" y="133" width="0.5760%" height="15" fill="rgb(220,122,19)"/><text x="10.7412%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (104,400 samples, 0.13%)</title><rect x="10.9385%" y="117" width="0.1287%" height="15" fill="rgb(250,228,42)"/><text x="11.1885%" y="127.50"></text></g><g><title>normalize_projection_ty (96,350 samples, 0.12%)</title><rect x="10.9484%" y="101" width="0.1188%" height="15" fill="rgb(240,193,28)"/><text x="11.1984%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (82,151 samples, 0.10%)</title><rect x="11.1403%" y="117" width="0.1013%" height="15" fill="rgb(216,20,37)"/><text x="11.3903%" y="127.50"></text></g><g><title>impl_parent (224,381 samples, 0.28%)</title><rect x="11.6539%" y="101" width="0.2767%" height="15" fill="rgb(206,188,39)"/><text x="11.9039%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (138,041 samples, 0.17%)</title><rect x="11.7604%" y="85" width="0.1702%" height="15" fill="rgb(217,207,13)"/><text x="12.0104%" y="95.50"></text></g><g><title>specialization_graph_of (1,359,205 samples, 1.68%)</title><rect x="11.2549%" y="117" width="1.6761%" height="15" fill="rgb(231,73,38)"/><text x="11.5049%" y="127.50"></text></g><g><title>impl_trait_ref (811,242 samples, 1.00%)</title><rect x="11.9306%" y="101" width="1.0004%" height="15" fill="rgb(225,20,46)"/><text x="12.1806%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (722,021 samples, 0.89%)</title><rect x="12.0406%" y="85" width="0.8903%" height="15" fill="rgb(210,31,41)"/><text x="12.2906%" y="95.50"></text></g><g><title>resolve_instance (1,535,546 samples, 1.89%)</title><rect x="11.0672%" y="133" width="1.8935%" height="15" fill="rgb(221,200,47)"/><text x="11.3172%" y="143.50">r..</text></g><g><title>thir_body (237,622 samples, 0.29%)</title><rect x="12.9756%" y="133" width="0.2930%" height="15" fill="rgb(226,26,5)"/><text x="13.2256%" y="143.50"></text></g><g><title>mir_const (3,735,430 samples, 4.61%)</title><rect x="8.6721%" y="181" width="4.6063%" height="15" fill="rgb(249,33,26)"/><text x="8.9221%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (3,287,065 samples, 4.05%)</title><rect x="9.2250%" y="165" width="4.0534%" height="15" fill="rgb(235,183,28)"/><text x="9.4750%" y="175.50">unsa..</text></g><g><title>mir_built (2,977,941 samples, 3.67%)</title><rect x="9.6062%" y="149" width="3.6722%" height="15" fill="rgb(221,5,38)"/><text x="9.8562%" y="159.50">mir_..</text></g><g><title>has_structural_eq_impls (213,872 samples, 0.26%)</title><rect x="13.5708%" y="165" width="0.2637%" height="15" fill="rgb(247,18,42)"/><text x="13.8208%" y="175.50"></text></g><g><title>evaluate_obligation (177,182 samples, 0.22%)</title><rect x="13.6160%" y="149" width="0.2185%" height="15" fill="rgb(241,131,45)"/><text x="13.8660%" y="159.50"></text></g><g><title>trait_impls_of (135,372 samples, 0.17%)</title><rect x="13.6676%" y="133" width="0.1669%" height="15" fill="rgb(249,31,29)"/><text x="13.9176%" y="143.50"></text></g><g><title>is_freeze_raw (94,451 samples, 0.12%)</title><rect x="13.8367%" y="165" width="0.1165%" height="15" fill="rgb(225,111,53)"/><text x="14.0867%" y="175.50"></text></g><g><title>evaluate_obligation (87,851 samples, 0.11%)</title><rect x="13.8449%" y="149" width="0.1083%" height="15" fill="rgb(238,160,17)"/><text x="14.0949%" y="159.50"></text></g><g><title>mir_const (98,951 samples, 0.12%)</title><rect x="13.9567%" y="165" width="0.1220%" height="15" fill="rgb(214,148,48)"/><text x="14.2067%" y="175.50"></text></g><g><title>is_copy_raw (290,634 samples, 0.36%)</title><rect x="14.1190%" y="117" width="0.3584%" height="15" fill="rgb(232,36,49)"/><text x="14.3690%" y="127.50"></text></g><g><title>evaluate_obligation (286,284 samples, 0.35%)</title><rect x="14.1243%" y="101" width="0.3530%" height="15" fill="rgb(209,103,24)"/><text x="14.3743%" y="111.50"></text></g><g><title>predicates_of (263,042 samples, 0.32%)</title><rect x="14.1530%" y="85" width="0.3244%" height="15" fill="rgb(229,88,8)"/><text x="14.4030%" y="95.50"></text></g><g><title>predicates_defined_on (261,202 samples, 0.32%)</title><rect x="14.1553%" y="69" width="0.3221%" height="15" fill="rgb(213,181,19)"/><text x="14.4053%" y="79.50"></text></g><g><title>adt_drop_tys (307,734 samples, 0.38%)</title><rect x="14.1124%" y="133" width="0.3795%" height="15" fill="rgb(254,191,54)"/><text x="14.3624%" y="143.50"></text></g><g><title>adt_drop_tys (346,275 samples, 0.43%)</title><rect x="14.1012%" y="149" width="0.4270%" height="15" fill="rgb(241,83,37)"/><text x="14.3512%" y="159.50"></text></g><g><title>needs_drop_raw (425,885 samples, 0.53%)</title><rect x="14.0801%" y="165" width="0.5252%" height="15" fill="rgb(233,36,39)"/><text x="14.3301%" y="175.50"></text></g><g><title>mir_const_qualif (1,079,482 samples, 1.33%)</title><rect x="13.2784%" y="181" width="1.3311%" height="15" fill="rgb(226,3,54)"/><text x="13.5284%" y="191.50"></text></g><g><title>mir_promoted (5,122,297 samples, 6.32%)</title><rect x="8.2933%" y="197" width="6.3165%" height="15" fill="rgb(245,192,40)"/><text x="8.5433%" y="207.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (1,339,474 samples, 1.65%)</title><rect x="14.6098%" y="197" width="1.6517%" height="15" fill="rgb(238,167,29)"/><text x="14.8598%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (529,454 samples, 0.65%)</title><rect x="16.2615%" y="197" width="0.6529%" height="15" fill="rgb(232,182,51)"/><text x="16.5115%" y="207.50"></text></g><g><title>normalize_projection_ty (283,292 samples, 0.35%)</title><rect x="16.5651%" y="181" width="0.3493%" height="15" fill="rgb(231,60,39)"/><text x="16.8151%" y="191.50"></text></g><g><title>type_op_prove_predicate (5,742,714 samples, 7.08%)</title><rect x="16.9477%" y="197" width="7.0815%" height="15" fill="rgb(208,69,12)"/><text x="17.1977%" y="207.50">type_op_pr..</text></g><g><title>MIR_borrow_checking (18,523,186 samples, 22.84%)</title><rect x="1.2007%" y="229" width="22.8415%" height="15" fill="rgb(235,93,37)"/><text x="1.4507%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,477,876 samples, 22.79%)</title><rect x="1.2566%" y="213" width="22.7856%" height="15" fill="rgb(213,116,39)"/><text x="1.5066%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (283,694 samples, 0.35%)</title><rect x="24.0422%" y="229" width="0.3498%" height="15" fill="rgb(222,207,29)"/><text x="24.2922%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (115,331 samples, 0.14%)</title><rect x="24.2498%" y="213" width="0.1422%" height="15" fill="rgb(206,96,30)"/><text x="24.4998%" y="223.50"></text></g><g><title>hir_module_items (179,312 samples, 0.22%)</title><rect x="24.3920%" y="229" width="0.2211%" height="15" fill="rgb(218,138,4)"/><text x="24.6420%" y="239.50"></text></g><g><title>get_lang_items (111,081 samples, 0.14%)</title><rect x="24.9676%" y="181" width="0.1370%" height="15" fill="rgb(250,191,14)"/><text x="25.2176%" y="191.50"></text></g><g><title>codegen_fn_attrs (81,151 samples, 0.10%)</title><rect x="25.2253%" y="165" width="0.1001%" height="15" fill="rgb(239,60,40)"/><text x="25.4753%" y="175.50"></text></g><g><title>should_inherit_track_caller (185,072 samples, 0.23%)</title><rect x="25.1046%" y="181" width="0.2282%" height="15" fill="rgb(206,27,48)"/><text x="25.3546%" y="191.50"></text></g><g><title>codegen_fn_attrs (425,555 samples, 0.52%)</title><rect x="24.8462%" y="197" width="0.5248%" height="15" fill="rgb(225,35,8)"/><text x="25.0962%" y="207.50"></text></g><g><title>check_mod_attrs (588,657 samples, 0.73%)</title><rect x="24.6453%" y="213" width="0.7259%" height="15" fill="rgb(250,213,24)"/><text x="24.8953%" y="223.50"></text></g><g><title>check_mod_const_bodies (87,681 samples, 0.11%)</title><rect x="25.3712%" y="213" width="0.1081%" height="15" fill="rgb(247,123,22)"/><text x="25.6212%" y="223.50"></text></g><g><title>lookup_deprecation_entry (119,881 samples, 0.15%)</title><rect x="25.7190%" y="197" width="0.1478%" height="15" fill="rgb(231,138,38)"/><text x="25.9690%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (342,654 samples, 0.42%)</title><rect x="25.5374%" y="213" width="0.4225%" height="15" fill="rgb(231,145,46)"/><text x="25.7874%" y="223.50"></text></g><g><title>misc_checking_1 (1,172,623 samples, 1.45%)</title><rect x="24.6139%" y="229" width="1.4460%" height="15" fill="rgb(251,118,11)"/><text x="24.8639%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (139,522 samples, 0.17%)</title><rect x="26.0614%" y="213" width="0.1720%" height="15" fill="rgb(217,147,25)"/><text x="26.3114%" y="223.50"></text></g><g><title>check_mod_liveness (115,912 samples, 0.14%)</title><rect x="26.0906%" y="197" width="0.1429%" height="15" fill="rgb(247,81,37)"/><text x="26.3406%" y="207.50"></text></g><g><title>misc_checking_2 (280,803 samples, 0.35%)</title><rect x="26.0599%" y="229" width="0.3463%" height="15" fill="rgb(209,12,38)"/><text x="26.3099%" y="239.50"></text></g><g><title>match_checking (140,061 samples, 0.17%)</title><rect x="26.2335%" y="213" width="0.1727%" height="15" fill="rgb(227,1,9)"/><text x="26.4835%" y="223.50"></text></g><g><title>check_match (128,951 samples, 0.16%)</title><rect x="26.2472%" y="197" width="0.1590%" height="15" fill="rgb(248,47,43)"/><text x="26.4972%" y="207.50"></text></g><g><title>death_checking (125,822 samples, 0.16%)</title><rect x="26.4992%" y="213" width="0.1552%" height="15" fill="rgb(221,10,30)"/><text x="26.7492%" y="223.50"></text></g><g><title>fn_abi_of_instance (114,281 samples, 0.14%)</title><rect x="27.4021%" y="149" width="0.1409%" height="15" fill="rgb(210,229,1)"/><text x="27.6521%" y="159.50"></text></g><g><title>eval_to_const_value_raw (185,903 samples, 0.23%)</title><rect x="27.7770%" y="69" width="0.2292%" height="15" fill="rgb(222,148,37)"/><text x="28.0270%" y="79.50"></text></g><g><title>eval_to_const_value_raw (185,083 samples, 0.23%)</title><rect x="27.7781%" y="53" width="0.2282%" height="15" fill="rgb(234,67,33)"/><text x="28.0281%" y="63.50"></text></g><g><title>eval_to_allocation_raw (183,572 samples, 0.23%)</title><rect x="27.7799%" y="37" width="0.2264%" height="15" fill="rgb(247,98,35)"/><text x="28.0299%" y="47.50"></text></g><g><title>eval_to_const_value_raw (261,003 samples, 0.32%)</title><rect x="27.6891%" y="133" width="0.3219%" height="15" fill="rgb(247,138,52)"/><text x="27.9391%" y="143.50"></text></g><g><title>eval_to_const_value_raw (260,383 samples, 0.32%)</title><rect x="27.6899%" y="117" width="0.3211%" height="15" fill="rgb(213,79,30)"/><text x="27.9399%" y="127.50"></text></g><g><title>eval_to_allocation_raw (258,443 samples, 0.32%)</title><rect x="27.6922%" y="101" width="0.3187%" height="15" fill="rgb(246,177,23)"/><text x="27.9422%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (192,213 samples, 0.24%)</title><rect x="27.7739%" y="85" width="0.2370%" height="15" fill="rgb(230,62,27)"/><text x="28.0239%" y="95.50"></text></g><g><title>eval_to_allocation_raw (610,267 samples, 0.75%)</title><rect x="27.2590%" y="181" width="0.7525%" height="15" fill="rgb(216,154,8)"/><text x="27.5090%" y="191.50"></text></g><g><title>eval_to_allocation_raw (607,807 samples, 0.75%)</title><rect x="27.2621%" y="165" width="0.7495%" height="15" fill="rgb(244,35,45)"/><text x="27.5121%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (267,063 samples, 0.33%)</title><rect x="27.6822%" y="149" width="0.3293%" height="15" fill="rgb(251,115,12)"/><text x="27.9322%" y="159.50"></text></g><g><title>eval_to_const_value_raw (188,012 samples, 0.23%)</title><rect x="28.0116%" y="181" width="0.2318%" height="15" fill="rgb(240,54,50)"/><text x="28.2616%" y="191.50"></text></g><g><title>eval_to_const_value_raw (181,772 samples, 0.22%)</title><rect x="28.0193%" y="165" width="0.2241%" height="15" fill="rgb(233,84,52)"/><text x="28.2693%" y="175.50"></text></g><g><title>eval_to_allocation_raw (178,652 samples, 0.22%)</title><rect x="28.0231%" y="149" width="0.2203%" height="15" fill="rgb(207,117,47)"/><text x="28.2731%" y="159.50"></text></g><g><title>param_env (168,373 samples, 0.21%)</title><rect x="28.2434%" y="181" width="0.2076%" height="15" fill="rgb(249,43,39)"/><text x="28.4934%" y="191.50"></text></g><g><title>predicates_of (86,871 samples, 0.11%)</title><rect x="28.3439%" y="165" width="0.1071%" height="15" fill="rgb(209,38,44)"/><text x="28.5939%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (276,333 samples, 0.34%)</title><rect x="28.4730%" y="165" width="0.3408%" height="15" fill="rgb(236,212,23)"/><text x="28.7230%" y="175.50"></text></g><g><title>evaluate_obligation (157,052 samples, 0.19%)</title><rect x="28.6201%" y="149" width="0.1937%" height="15" fill="rgb(242,79,21)"/><text x="28.8701%" y="159.50"></text></g><g><title>impl_parent (544,565 samples, 0.67%)</title><rect x="29.8675%" y="149" width="0.6715%" height="15" fill="rgb(211,96,35)"/><text x="30.1175%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (338,601 samples, 0.42%)</title><rect x="30.1215%" y="133" width="0.4175%" height="15" fill="rgb(253,215,40)"/><text x="30.3715%" y="143.50"></text></g><g><title>specialization_graph_of (2,469,837 samples, 3.05%)</title><rect x="28.8274%" y="165" width="3.0456%" height="15" fill="rgb(211,81,21)"/><text x="29.0774%" y="175.50">spe..</text></g><g><title>impl_trait_ref (1,081,778 samples, 1.33%)</title><rect x="30.5391%" y="149" width="1.3340%" height="15" fill="rgb(208,190,38)"/><text x="30.7891%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (876,276 samples, 1.08%)</title><rect x="30.7925%" y="133" width="1.0806%" height="15" fill="rgb(235,213,38)"/><text x="31.0425%" y="143.50"></text></g><g><title>resolve_instance (2,777,760 samples, 3.43%)</title><rect x="28.4510%" y="181" width="3.4253%" height="15" fill="rgb(237,122,38)"/><text x="28.7010%" y="191.50">res..</text></g><g><title>trait_impls_of (228,142 samples, 0.28%)</title><rect x="31.8764%" y="181" width="0.2813%" height="15" fill="rgb(244,218,35)"/><text x="32.1264%" y="191.50"></text></g><g><title>crate_lints (6,949,857 samples, 8.57%)</title><rect x="26.6567%" y="197" width="8.5701%" height="15" fill="rgb(240,68,47)"/><text x="26.9067%" y="207.50">crate_lints</text></g><g><title>type_of (2,482,626 samples, 3.06%)</title><rect x="32.1653%" y="181" width="3.0614%" height="15" fill="rgb(210,16,53)"/><text x="32.4153%" y="191.50">typ..</text></g><g><title>metadata_decode_entry_type_of (2,237,643 samples, 2.76%)</title><rect x="32.4674%" y="165" width="2.7593%" height="15" fill="rgb(235,124,12)"/><text x="32.7174%" y="175.50">me..</text></g><g><title>lint_checking (7,081,988 samples, 8.73%)</title><rect x="26.6543%" y="213" width="8.7330%" height="15" fill="rgb(224,169,11)"/><text x="26.9043%" y="223.50">lint_checking</text></g><g><title>module_lints (130,241 samples, 0.16%)</title><rect x="35.2267%" y="197" width="0.1606%" height="15" fill="rgb(250,166,2)"/><text x="35.4767%" y="207.50"></text></g><g><title>lint_mod (126,951 samples, 0.16%)</title><rect x="35.2308%" y="181" width="0.1565%" height="15" fill="rgb(242,216,29)"/><text x="35.4808%" y="191.50"></text></g><g><title>privacy_checking_modules (353,834 samples, 0.44%)</title><rect x="35.4705%" y="213" width="0.4363%" height="15" fill="rgb(230,116,27)"/><text x="35.7205%" y="223.50"></text></g><g><title>check_mod_privacy (352,484 samples, 0.43%)</title><rect x="35.4722%" y="197" width="0.4347%" height="15" fill="rgb(228,99,48)"/><text x="35.7222%" y="207.50"></text></g><g><title>misc_checking_3 (7,717,165 samples, 9.52%)</title><rect x="26.4062%" y="229" width="9.5163%" height="15" fill="rgb(253,11,6)"/><text x="26.6562%" y="239.50">misc_checking_3</text></g><g><title>impl_parent (190,113 samples, 0.23%)</title><rect x="36.3598%" y="165" width="0.2344%" height="15" fill="rgb(247,143,39)"/><text x="36.6098%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (133,353 samples, 0.16%)</title><rect x="36.4298%" y="149" width="0.1644%" height="15" fill="rgb(236,97,10)"/><text x="36.6798%" y="159.50"></text></g><g><title>impl_trait_ref (685,748 samples, 0.85%)</title><rect x="36.5942%" y="165" width="0.8456%" height="15" fill="rgb(233,208,19)"/><text x="36.8442%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (628,406 samples, 0.77%)</title><rect x="36.6649%" y="149" width="0.7749%" height="15" fill="rgb(216,164,2)"/><text x="36.9149%" y="159.50"></text></g><g><title>coherent_trait (1,341,265 samples, 1.65%)</title><rect x="35.9820%" y="197" width="1.6540%" height="15" fill="rgb(220,129,5)"/><text x="36.2320%" y="207.50"></text></g><g><title>specialization_graph_of (1,329,885 samples, 1.64%)</title><rect x="35.9960%" y="181" width="1.6399%" height="15" fill="rgb(242,17,10)"/><text x="36.2460%" y="191.50"></text></g><g><title>trait_impls_of (159,054 samples, 0.20%)</title><rect x="37.4398%" y="165" width="0.1961%" height="15" fill="rgb(242,107,0)"/><text x="37.6898%" y="175.50"></text></g><g><title>orphan_check_crate (90,001 samples, 0.11%)</title><rect x="37.6510%" y="197" width="0.1110%" height="15" fill="rgb(251,28,31)"/><text x="37.9010%" y="207.50"></text></g><g><title>coherence_checking (1,467,296 samples, 1.81%)</title><rect x="35.9627%" y="213" width="1.8094%" height="15" fill="rgb(233,223,10)"/><text x="36.2127%" y="223.50">c..</text></g><g><title>associated_items (96,272 samples, 0.12%)</title><rect x="42.0513%" y="165" width="0.1187%" height="15" fill="rgb(215,21,27)"/><text x="42.3013%" y="175.50"></text></g><g><title>dropck_outlives (90,843 samples, 0.11%)</title><rect x="42.1867%" y="165" width="0.1120%" height="15" fill="rgb(232,23,21)"/><text x="42.4367%" y="175.50"></text></g><g><title>trait_impls_of (190,871 samples, 0.24%)</title><rect x="42.9570%" y="149" width="0.2354%" height="15" fill="rgb(244,5,23)"/><text x="43.2070%" y="159.50"></text></g><g><title>evaluate_obligation (725,976 samples, 0.90%)</title><rect x="42.2987%" y="165" width="0.8952%" height="15" fill="rgb(226,81,46)"/><text x="42.5487%" y="175.50"></text></g><g><title>predicates_of (99,480 samples, 0.12%)</title><rect x="43.4987%" y="165" width="0.1227%" height="15" fill="rgb(247,70,30)"/><text x="43.7487%" y="175.50"></text></g><g><title>associated_item (241,865 samples, 0.30%)</title><rect x="49.7870%" y="133" width="0.2983%" height="15" fill="rgb(212,68,19)"/><text x="50.0370%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (178,573 samples, 0.22%)</title><rect x="49.8650%" y="117" width="0.2202%" height="15" fill="rgb(240,187,13)"/><text x="50.1150%" y="127.50"></text></g><g><title>associated_items (351,996 samples, 0.43%)</title><rect x="49.6672%" y="149" width="0.4341%" height="15" fill="rgb(223,113,26)"/><text x="49.9172%" y="159.50"></text></g><g><title>adt_dtorck_constraint (89,570 samples, 0.11%)</title><rect x="50.2199%" y="133" width="0.1105%" height="15" fill="rgb(206,192,2)"/><text x="50.4699%" y="143.50"></text></g><g><title>dropck_outlives (302,533 samples, 0.37%)</title><rect x="50.1220%" y="149" width="0.3731%" height="15" fill="rgb(241,108,4)"/><text x="50.3720%" y="159.50"></text></g><g><title>normalize_projection_ty (133,512 samples, 0.16%)</title><rect x="50.3304%" y="133" width="0.1646%" height="15" fill="rgb(247,173,49)"/><text x="50.5804%" y="143.50"></text></g><g><title>evaluate_obligation (1,286,865 samples, 1.59%)</title><rect x="50.4950%" y="149" width="1.5869%" height="15" fill="rgb(224,114,35)"/><text x="50.7450%" y="159.50"></text></g><g><title>trait_impls_of (302,883 samples, 0.37%)</title><rect x="51.7084%" y="133" width="0.3735%" height="15" fill="rgb(245,159,27)"/><text x="51.9584%" y="143.50"></text></g><g><title>is_copy_raw (309,274 samples, 0.38%)</title><rect x="52.2762%" y="149" width="0.3814%" height="15" fill="rgb(245,172,44)"/><text x="52.5262%" y="159.50"></text></g><g><title>evaluate_obligation (277,843 samples, 0.34%)</title><rect x="52.3149%" y="133" width="0.3426%" height="15" fill="rgb(236,23,11)"/><text x="52.5649%" y="143.50"></text></g><g><title>trait_impls_of (142,881 samples, 0.18%)</title><rect x="52.4813%" y="117" width="0.1762%" height="15" fill="rgb(205,117,38)"/><text x="52.7313%" y="127.50"></text></g><g><title>evaluate_obligation (248,992 samples, 0.31%)</title><rect x="52.9964%" y="133" width="0.3070%" height="15" fill="rgb(237,72,25)"/><text x="53.2464%" y="143.50"></text></g><g><title>method_autoderef_steps (517,274 samples, 0.64%)</title><rect x="52.6915%" y="149" width="0.6379%" height="15" fill="rgb(244,70,9)"/><text x="52.9415%" y="159.50"></text></g><g><title>predicates_of (90,381 samples, 0.11%)</title><rect x="53.3376%" y="149" width="0.1115%" height="15" fill="rgb(217,125,39)"/><text x="53.5876%" y="159.50"></text></g><g><title>typeck (7,980,698 samples, 9.84%)</title><rect x="43.6524%" y="165" width="9.8412%" height="15" fill="rgb(235,36,10)"/><text x="43.9024%" y="175.50">typeck</text></g><g><title>item_bodies_checking (12,737,801 samples, 15.71%)</title><rect x="37.8006%" y="213" width="15.7074%" height="15" fill="rgb(251,123,47)"/><text x="38.0506%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,735,791 samples, 15.70%)</title><rect x="37.8031%" y="197" width="15.7049%" height="15" fill="rgb(221,13,13)"/><text x="38.0531%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (12,710,191 samples, 15.67%)</title><rect x="37.8347%" y="181" width="15.6733%" height="15" fill="rgb(238,131,9)"/><text x="38.0847%" y="191.50">typeck</text></g><g><title>layout_of (121,352 samples, 0.15%)</title><rect x="54.0006%" y="69" width="0.1496%" height="15" fill="rgb(211,50,8)"/><text x="54.2506%" y="79.50"></text></g><g><title>layout_of (185,292 samples, 0.23%)</title><rect x="53.9718%" y="85" width="0.2285%" height="15" fill="rgb(245,182,24)"/><text x="54.2218%" y="95.50"></text></g><g><title>layout_of (234,682 samples, 0.29%)</title><rect x="53.9295%" y="117" width="0.2894%" height="15" fill="rgb(242,14,37)"/><text x="54.1795%" y="127.50"></text></g><g><title>layout_of (216,192 samples, 0.27%)</title><rect x="53.9523%" y="101" width="0.2666%" height="15" fill="rgb(246,228,12)"/><text x="54.2023%" y="111.50"></text></g><g><title>layout_of (258,242 samples, 0.32%)</title><rect x="53.9088%" y="133" width="0.3184%" height="15" fill="rgb(213,55,15)"/><text x="54.1588%" y="143.50"></text></g><g><title>layout_of (307,503 samples, 0.38%)</title><rect x="53.8734%" y="149" width="0.3792%" height="15" fill="rgb(209,9,3)"/><text x="54.1234%" y="159.50"></text></g><g><title>layout_of (345,964 samples, 0.43%)</title><rect x="53.8360%" y="181" width="0.4266%" height="15" fill="rgb(230,59,30)"/><text x="54.0860%" y="191.50"></text></g><g><title>layout_of (333,874 samples, 0.41%)</title><rect x="53.8509%" y="165" width="0.4117%" height="15" fill="rgb(209,121,21)"/><text x="54.1009%" y="175.50"></text></g><g><title>adt_def (143,522 samples, 0.18%)</title><rect x="55.3191%" y="101" width="0.1770%" height="15" fill="rgb(220,109,13)"/><text x="55.5691%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (143,022 samples, 0.18%)</title><rect x="55.3197%" y="85" width="0.1764%" height="15" fill="rgb(232,18,1)"/><text x="55.5697%" y="95.50"></text></g><g><title>adt_dtorck_constraint (174,122 samples, 0.21%)</title><rect x="55.3083%" y="117" width="0.2147%" height="15" fill="rgb(215,41,42)"/><text x="55.5583%" y="127.50"></text></g><g><title>adt_dtorck_constraint (266,493 samples, 0.33%)</title><rect x="55.2122%" y="133" width="0.3286%" height="15" fill="rgb(224,123,36)"/><text x="55.4622%" y="143.50"></text></g><g><title>adt_dtorck_constraint (362,854 samples, 0.45%)</title><rect x="55.1421%" y="149" width="0.4474%" height="15" fill="rgb(240,125,3)"/><text x="55.3921%" y="159.50"></text></g><g><title>dropck_outlives (456,335 samples, 0.56%)</title><rect x="55.0597%" y="165" width="0.5627%" height="15" fill="rgb(205,98,50)"/><text x="55.3097%" y="175.50"></text></g><g><title>typeck (1,245,784 samples, 1.54%)</title><rect x="54.2727%" y="181" width="1.5362%" height="15" fill="rgb(205,185,37)"/><text x="54.5227%" y="191.50"></text></g><g><title>item_types_checking (1,866,961 samples, 2.30%)</title><rect x="53.5080%" y="213" width="2.3022%" height="15" fill="rgb(238,207,15)"/><text x="53.7580%" y="223.50">i..</text></g><g><title>check_mod_item_types (1,864,891 samples, 2.30%)</title><rect x="53.5106%" y="197" width="2.2997%" height="15" fill="rgb(213,199,42)"/><text x="53.7606%" y="207.50">c..</text></g><g><title>fn_sig (319,502 samples, 0.39%)</title><rect x="56.0229%" y="181" width="0.3940%" height="15" fill="rgb(235,201,11)"/><text x="56.2729%" y="191.50"></text></g><g><title>named_region_map (225,433 samples, 0.28%)</title><rect x="56.5044%" y="165" width="0.2780%" height="15" fill="rgb(207,46,11)"/><text x="56.7544%" y="175.50"></text></g><g><title>resolve_lifetimes (212,203 samples, 0.26%)</title><rect x="56.5207%" y="149" width="0.2617%" height="15" fill="rgb(241,35,35)"/><text x="56.7707%" y="159.50"></text></g><g><title>generics_of (308,334 samples, 0.38%)</title><rect x="56.4169%" y="181" width="0.3802%" height="15" fill="rgb(243,32,47)"/><text x="56.6669%" y="191.50"></text></g><g><title>explicit_predicates_of (179,321 samples, 0.22%)</title><rect x="56.9360%" y="149" width="0.2211%" height="15" fill="rgb(247,202,23)"/><text x="57.1860%" y="159.50"></text></g><g><title>predicates_of (316,962 samples, 0.39%)</title><rect x="56.8368%" y="181" width="0.3909%" height="15" fill="rgb(219,102,11)"/><text x="57.0868%" y="191.50"></text></g><g><title>predicates_defined_on (284,592 samples, 0.35%)</title><rect x="56.8767%" y="165" width="0.3509%" height="15" fill="rgb(243,110,44)"/><text x="57.1267%" y="175.50"></text></g><g><title>type_collecting (1,380,285 samples, 1.70%)</title><rect x="55.8115%" y="213" width="1.7021%" height="15" fill="rgb(222,74,54)"/><text x="56.0615%" y="223.50"></text></g><g><title>collect_mod_item_types (1,371,445 samples, 1.69%)</title><rect x="55.8224%" y="197" width="1.6912%" height="15" fill="rgb(216,99,12)"/><text x="56.0724%" y="207.50"></text></g><g><title>type_of (231,903 samples, 0.29%)</title><rect x="57.2276%" y="181" width="0.2860%" height="15" fill="rgb(226,22,26)"/><text x="57.4776%" y="191.50"></text></g><g><title>type_of (85,471 samples, 0.11%)</title><rect x="57.4082%" y="165" width="0.1054%" height="15" fill="rgb(217,163,10)"/><text x="57.6582%" y="175.50"></text></g><g><title>evaluate_obligation (461,775 samples, 0.57%)</title><rect x="58.1822%" y="181" width="0.5694%" height="15" fill="rgb(213,25,53)"/><text x="58.4322%" y="191.50"></text></g><g><title>implied_outlives_bounds (100,441 samples, 0.12%)</title><rect x="58.7581%" y="181" width="0.1239%" height="15" fill="rgb(252,105,26)"/><text x="59.0081%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,205,712 samples, 1.49%)</title><rect x="57.6084%" y="197" width="1.4868%" height="15" fill="rgb(220,39,43)"/><text x="57.8584%" y="207.50"></text></g><g><title>adt_def (158,422 samples, 0.20%)</title><rect x="60.8529%" y="149" width="0.1954%" height="15" fill="rgb(229,68,48)"/><text x="61.1029%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (155,982 samples, 0.19%)</title><rect x="60.8559%" y="133" width="0.1923%" height="15" fill="rgb(252,8,32)"/><text x="61.1059%" y="143.50"></text></g><g><title>item_attrs (127,472 samples, 0.16%)</title><rect x="60.8910%" y="117" width="0.1572%" height="15" fill="rgb(223,20,43)"/><text x="61.1410%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (124,772 samples, 0.15%)</title><rect x="60.8943%" y="101" width="0.1539%" height="15" fill="rgb(229,81,49)"/><text x="61.1443%" y="111.50"></text></g><g><title>adt_def (93,012 samples, 0.11%)</title><rect x="61.0576%" y="133" width="0.1147%" height="15" fill="rgb(236,28,36)"/><text x="61.3076%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (91,972 samples, 0.11%)</title><rect x="61.0588%" y="117" width="0.1134%" height="15" fill="rgb(249,185,26)"/><text x="61.3088%" y="127.50"></text></g><g><title>adt_sized_constraint (115,592 samples, 0.14%)</title><rect x="61.0482%" y="149" width="0.1425%" height="15" fill="rgb(249,174,33)"/><text x="61.2982%" y="159.50"></text></g><g><title>adt_sized_constraint (302,724 samples, 0.37%)</title><rect x="60.8359%" y="165" width="0.3733%" height="15" fill="rgb(233,201,37)"/><text x="61.0859%" y="175.50"></text></g><g><title>evaluate_obligation (81,831 samples, 0.10%)</title><rect x="61.4671%" y="149" width="0.1009%" height="15" fill="rgb(221,78,26)"/><text x="61.7171%" y="159.50"></text></g><g><title>layout_of (83,291 samples, 0.10%)</title><rect x="61.6092%" y="149" width="0.1027%" height="15" fill="rgb(250,127,30)"/><text x="61.8592%" y="159.50"></text></g><g><title>own_existential_vtable_entries (450,215 samples, 0.56%)</title><rect x="61.3011%" y="165" width="0.5552%" height="15" fill="rgb(230,49,44)"/><text x="61.5511%" y="175.50"></text></g><g><title>trait_impls_of (108,350 samples, 0.13%)</title><rect x="61.9144%" y="165" width="0.1336%" height="15" fill="rgb(229,67,23)"/><text x="62.1644%" y="175.50"></text></g><g><title>evaluate_obligation (1,667,600 samples, 2.06%)</title><rect x="59.9994%" y="181" width="2.0564%" height="15" fill="rgb(249,83,47)"/><text x="60.2494%" y="191.50">e..</text></g><g><title>implied_outlives_bounds (143,252 samples, 0.18%)</title><rect x="62.0604%" y="181" width="0.1766%" height="15" fill="rgb(215,43,3)"/><text x="62.3104%" y="191.50"></text></g><g><title>object_safety_violations (91,641 samples, 0.11%)</title><rect x="62.2375%" y="181" width="0.1130%" height="15" fill="rgb(238,154,13)"/><text x="62.4875%" y="191.50"></text></g><g><title>param_env (171,310 samples, 0.21%)</title><rect x="62.3505%" y="181" width="0.2112%" height="15" fill="rgb(219,56,2)"/><text x="62.6005%" y="191.50"></text></g><g><title>predicates_of (98,341 samples, 0.12%)</title><rect x="62.5617%" y="181" width="0.1213%" height="15" fill="rgb(233,0,4)"/><text x="62.8117%" y="191.50"></text></g><g><title>analysis (50,220,349 samples, 61.93%)</title><rect x="0.9153%" y="245" width="61.9282%" height="15" fill="rgb(235,30,7)"/><text x="1.1653%" y="255.50">analysis</text></g><g><title>type_check_crate (21,831,483 samples, 26.92%)</title><rect x="35.9225%" y="229" width="26.9210%" height="15" fill="rgb(250,79,13)"/><text x="36.1725%" y="239.50">type_check_crate</text></g><g><title>wf_checking (4,319,849 samples, 5.33%)</title><rect x="57.5166%" y="213" width="5.3269%" height="15" fill="rgb(211,146,34)"/><text x="57.7666%" y="223.50">wf_chec..</text></g><g><title>check_item_well_formed (3,039,666 samples, 3.75%)</title><rect x="59.0952%" y="197" width="3.7483%" height="15" fill="rgb(228,22,38)"/><text x="59.3452%" y="207.50">chec..</text></g><g><title>codegen_crate (533,356 samples, 0.66%)</title><rect x="62.8572%" y="245" width="0.6577%" height="15" fill="rgb(235,168,5)"/><text x="63.1072%" y="255.50"></text></g><g><title>AST_validation (165,202 samples, 0.20%)</title><rect x="63.7708%" y="229" width="0.2037%" height="15" fill="rgb(221,155,16)"/><text x="64.0208%" y="239.50"></text></g><g><title>crate_injection (82,751 samples, 0.10%)</title><rect x="64.0295%" y="229" width="0.1020%" height="15" fill="rgb(215,215,53)"/><text x="64.2795%" y="239.50"></text></g><g><title>metadata_load_macro (718,997 samples, 0.89%)</title><rect x="82.5017%" y="197" width="0.8866%" height="15" fill="rgb(223,4,10)"/><text x="82.7517%" y="207.50"></text></g><g><title>macro_expand_crate (18,377,445 samples, 22.66%)</title><rect x="64.1315%" y="229" width="22.6618%" height="15" fill="rgb(234,103,6)"/><text x="64.3815%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (18,353,164 samples, 22.63%)</title><rect x="64.1615%" y="213" width="22.6318%" height="15" fill="rgb(227,97,0)"/><text x="64.4115%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,761,280 samples, 3.41%)</title><rect x="83.3883%" y="197" width="3.4050%" height="15" fill="rgb(234,150,53)"/><text x="83.6383%" y="207.50">met..</text></g><g><title>metadata_register_crate (969,401 samples, 1.20%)</title><rect x="85.5979%" y="181" width="1.1954%" height="15" fill="rgb(228,201,54)"/><text x="85.8479%" y="191.50"></text></g><g><title>metadata_register_crate (85,501 samples, 0.11%)</title><rect x="86.6879%" y="165" width="0.1054%" height="15" fill="rgb(222,22,37)"/><text x="86.9379%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (157,282 samples, 0.19%)</title><rect x="86.7997%" y="229" width="0.1939%" height="15" fill="rgb(237,53,32)"/><text x="87.0497%" y="239.50"></text></g><g><title>finalize_macro_resolutions (269,224 samples, 0.33%)</title><rect x="87.0679%" y="213" width="0.3320%" height="15" fill="rgb(233,25,53)"/><text x="87.3179%" y="223.50"></text></g><g><title>late_resolve_crate (1,429,286 samples, 1.76%)</title><rect x="87.3999%" y="213" width="1.7625%" height="15" fill="rgb(210,40,34)"/><text x="87.6499%" y="223.50"></text></g><g><title>configure_and_expand (20,888,763 samples, 25.76%)</title><rect x="63.5149%" y="245" width="25.7585%" height="15" fill="rgb(241,220,44)"/><text x="63.7649%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,848,840 samples, 2.28%)</title><rect x="86.9936%" y="229" width="2.2799%" height="15" fill="rgb(235,28,35)"/><text x="87.2436%" y="239.50">r..</text></g><g><title>drop_ast (128,001 samples, 0.16%)</title><rect x="89.2735%" y="245" width="0.1578%" height="15" fill="rgb(210,56,17)"/><text x="89.5235%" y="255.50"></text></g><g><title>early_lint_checks (263,183 samples, 0.32%)</title><rect x="89.4490%" y="245" width="0.3245%" height="15" fill="rgb(224,130,29)"/><text x="89.6990%" y="255.50"></text></g><g><title>free_global_ctxt (2,903,692 samples, 3.58%)</title><rect x="89.7736%" y="245" width="3.5806%" height="15" fill="rgb(235,212,8)"/><text x="90.0236%" y="255.50">free..</text></g><g><title>generate_crate_metadata (540,426 samples, 0.67%)</title><rect x="93.3542%" y="245" width="0.6664%" height="15" fill="rgb(223,33,50)"/><text x="93.6042%" y="255.50"></text></g><g><title>hir_lowering (1,762,850 samples, 2.17%)</title><rect x="94.0206%" y="245" width="2.1738%" height="15" fill="rgb(219,149,13)"/><text x="94.2706%" y="255.50">h..</text></g><g><title>parse_crate (1,741,110 samples, 2.15%)</title><rect x="96.2454%" y="245" width="2.1470%" height="15" fill="rgb(250,156,29)"/><text x="96.4954%" y="255.50">p..</text></g><g><title>prepare_outputs (334,894 samples, 0.41%)</title><rect x="98.4029%" y="245" width="0.4130%" height="15" fill="rgb(216,193,19)"/><text x="98.6529%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (490,076 samples, 0.60%)</title><rect x="98.8159%" y="245" width="0.6043%" height="15" fill="rgb(216,135,14)"/><text x="99.0659%" y="255.50"></text></g><g><title>setup_global_ctxt (135,982 samples, 0.17%)</title><rect x="99.4299%" y="245" width="0.1677%" height="15" fill="rgb(241,47,5)"/><text x="99.6799%" y="255.50"></text></g><g><title>all (81,094,514 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,42,35)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (81,094,514 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(231,13,6)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (326,324 samples, 0.40%)</title><rect x="99.5976%" y="245" width="0.4024%" height="15" fill="rgb(207,181,40)"/><text x="99.8476%" y="255.50"></text></g></svg></svg>