<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (129,951 samples, 0.11%)</title><rect x="12.8418%" y="117" width="0.1095%" height="15" fill="rgb(227,0,7)"/><text x="13.0918%" y="127.50"></text></g><g><title>item_attrs (126,334 samples, 0.11%)</title><rect x="13.3845%" y="85" width="0.1065%" height="15" fill="rgb(217,0,24)"/><text x="13.6345%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (122,524 samples, 0.10%)</title><rect x="13.3877%" y="69" width="0.1033%" height="15" fill="rgb(221,193,54)"/><text x="13.6377%" y="79.50"></text></g><g><title>codegen_fn_attrs (184,065 samples, 0.16%)</title><rect x="13.3456%" y="101" width="0.1551%" height="15" fill="rgb(248,212,6)"/><text x="13.5956%" y="111.50"></text></g><g><title>is_copy_raw (1,941,020 samples, 1.64%)</title><rect x="16.2238%" y="69" width="1.6358%" height="15" fill="rgb(208,68,35)"/><text x="16.4738%" y="79.50"></text></g><g><title>evaluate_obligation (1,719,826 samples, 1.45%)</title><rect x="16.4102%" y="53" width="1.4494%" height="15" fill="rgb(232,128,0)"/><text x="16.6602%" y="63.50"></text></g><g><title>needs_drop_raw (2,209,033 samples, 1.86%)</title><rect x="16.0148%" y="85" width="1.8617%" height="15" fill="rgb(207,160,47)"/><text x="16.2648%" y="95.50">n..</text></g><g><title>codegen_fulfill_obligation (301,737 samples, 0.25%)</title><rect x="18.0336%" y="69" width="0.2543%" height="15" fill="rgb(228,23,34)"/><text x="18.2836%" y="79.50"></text></g><g><title>specialization_graph_of (614,256 samples, 0.52%)</title><rect x="18.2959%" y="69" width="0.5177%" height="15" fill="rgb(218,30,26)"/><text x="18.5459%" y="79.50"></text></g><g><title>impl_trait_ref (183,083 samples, 0.15%)</title><rect x="18.6593%" y="53" width="0.1543%" height="15" fill="rgb(220,122,19)"/><text x="18.9093%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (155,833 samples, 0.13%)</title><rect x="18.6822%" y="37" width="0.1313%" height="15" fill="rgb(250,228,42)"/><text x="18.9322%" y="47.50"></text></g><g><title>resolve_instance (1,158,384 samples, 0.98%)</title><rect x="17.8765%" y="85" width="0.9762%" height="15" fill="rgb(240,193,28)"/><text x="18.1265%" y="95.50"></text></g><g><title>thir_body (936,750 samples, 0.79%)</title><rect x="18.8836%" y="85" width="0.7895%" height="15" fill="rgb(216,20,37)"/><text x="19.1336%" y="95.50"></text></g><g><title>mir_const (9,105,879 samples, 7.67%)</title><rect x="12.1003%" y="133" width="7.6741%" height="15" fill="rgb(206,188,39)"/><text x="12.3503%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,096,083 samples, 6.82%)</title><rect x="12.9513%" y="117" width="6.8231%" height="15" fill="rgb(217,207,13)"/><text x="13.2013%" y="127.50">unsafety_..</text></g><g><title>mir_built (7,444,171 samples, 6.27%)</title><rect x="13.5007%" y="101" width="6.2737%" height="15" fill="rgb(231,73,38)"/><text x="13.7507%" y="111.50">mir_built</text></g><g><title>mir_promoted (9,945,031 samples, 8.38%)</title><rect x="11.4341%" y="149" width="8.3813%" height="15" fill="rgb(225,20,46)"/><text x="11.6841%" y="159.50">mir_promoted</text></g><g><title>type_op_normalize_fn_sig (958,181 samples, 0.81%)</title><rect x="19.8154%" y="149" width="0.8075%" height="15" fill="rgb(210,31,41)"/><text x="20.0654%" y="159.50"></text></g><g><title>normalize_projection_ty (432,234 samples, 0.36%)</title><rect x="20.2587%" y="133" width="0.3643%" height="15" fill="rgb(221,200,47)"/><text x="20.5087%" y="143.50"></text></g><g><title>type_op_normalize_predicate (779,576 samples, 0.66%)</title><rect x="20.6229%" y="149" width="0.6570%" height="15" fill="rgb(226,26,5)"/><text x="20.8729%" y="159.50"></text></g><g><title>normalize_projection_ty (291,904 samples, 0.25%)</title><rect x="21.0339%" y="133" width="0.2460%" height="15" fill="rgb(249,33,26)"/><text x="21.2839%" y="143.50"></text></g><g><title>type_op_normalize_ty (349,798 samples, 0.29%)</title><rect x="21.2799%" y="149" width="0.2948%" height="15" fill="rgb(235,183,28)"/><text x="21.5299%" y="159.50"></text></g><g><title>MIR_borrow_checking (27,587,218 samples, 23.25%)</title><rect x="1.2820%" y="181" width="23.2495%" height="15" fill="rgb(221,5,38)"/><text x="1.5320%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (27,459,517 samples, 23.14%)</title><rect x="1.3896%" y="165" width="23.1419%" height="15" fill="rgb(247,18,42)"/><text x="1.6396%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (3,508,489 samples, 2.96%)</title><rect x="21.5747%" y="149" width="2.9568%" height="15" fill="rgb(241,131,45)"/><text x="21.8247%" y="159.50">typ..</text></g><g><title>hir_module_items (360,475 samples, 0.30%)</title><rect x="24.5582%" y="181" width="0.3038%" height="15" fill="rgb(249,31,29)"/><text x="24.8082%" y="191.50"></text></g><g><title>get_lang_items (189,682 samples, 0.16%)</title><rect x="25.4393%" y="133" width="0.1599%" height="15" fill="rgb(225,111,53)"/><text x="25.6893%" y="143.50"></text></g><g><title>associated_item (119,411 samples, 0.10%)</title><rect x="25.7046%" y="117" width="0.1006%" height="15" fill="rgb(238,160,17)"/><text x="25.9546%" y="127.50"></text></g><g><title>should_inherit_track_caller (303,033 samples, 0.26%)</title><rect x="25.5991%" y="133" width="0.2554%" height="15" fill="rgb(214,148,48)"/><text x="25.8491%" y="143.50"></text></g><g><title>codegen_fn_attrs (696,817 samples, 0.59%)</title><rect x="25.2976%" y="149" width="0.5873%" height="15" fill="rgb(232,36,49)"/><text x="25.5476%" y="159.50"></text></g><g><title>check_mod_attrs (1,182,723 samples, 1.00%)</title><rect x="24.8884%" y="165" width="0.9968%" height="15" fill="rgb(209,103,24)"/><text x="25.1384%" y="175.50"></text></g><g><title>check_mod_const_bodies (273,573 samples, 0.23%)</title><rect x="25.8851%" y="165" width="0.2306%" height="15" fill="rgb(229,88,8)"/><text x="26.1351%" y="175.50"></text></g><g><title>lookup_deprecation_entry (250,644 samples, 0.21%)</title><rect x="26.5417%" y="149" width="0.2112%" height="15" fill="rgb(213,181,19)"/><text x="26.7917%" y="159.50"></text></g><g><title>stability_index (187,942 samples, 0.16%)</title><rect x="26.5946%" y="133" width="0.1584%" height="15" fill="rgb(254,191,54)"/><text x="26.8446%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (666,718 samples, 0.56%)</title><rect x="26.2495%" y="165" width="0.5619%" height="15" fill="rgb(241,83,37)"/><text x="26.4995%" y="175.50"></text></g><g><title>misc_checking_1 (2,383,216 samples, 2.01%)</title><rect x="24.8623%" y="181" width="2.0085%" height="15" fill="rgb(233,36,39)"/><text x="25.1123%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (453,575 samples, 0.38%)</title><rect x="26.8721%" y="165" width="0.3823%" height="15" fill="rgb(226,3,54)"/><text x="27.1221%" y="175.50"></text></g><g><title>check_mod_liveness (375,404 samples, 0.32%)</title><rect x="26.9380%" y="149" width="0.3164%" height="15" fill="rgb(245,192,40)"/><text x="27.1880%" y="159.50"></text></g><g><title>misc_checking_2 (1,053,742 samples, 0.89%)</title><rect x="26.8708%" y="181" width="0.8881%" height="15" fill="rgb(238,167,29)"/><text x="27.1208%" y="191.50"></text></g><g><title>match_checking (598,607 samples, 0.50%)</title><rect x="27.2543%" y="165" width="0.5045%" height="15" fill="rgb(232,182,51)"/><text x="27.5043%" y="175.50"></text></g><g><title>check_match (561,247 samples, 0.47%)</title><rect x="27.2858%" y="149" width="0.4730%" height="15" fill="rgb(231,60,39)"/><text x="27.5358%" y="159.50"></text></g><g><title>check_private_in_public (190,313 samples, 0.16%)</title><rect x="27.7677%" y="165" width="0.1604%" height="15" fill="rgb(208,69,12)"/><text x="28.0177%" y="175.50"></text></g><g><title>death_checking (298,923 samples, 0.25%)</title><rect x="27.9281%" y="165" width="0.2519%" height="15" fill="rgb(235,93,37)"/><text x="28.1781%" y="175.50"></text></g><g><title>crate_lints (988,851 samples, 0.83%)</title><rect x="28.1814%" y="149" width="0.8334%" height="15" fill="rgb(213,116,39)"/><text x="28.4314%" y="159.50"></text></g><g><title>type_of (487,196 samples, 0.41%)</title><rect x="28.6042%" y="133" width="0.4106%" height="15" fill="rgb(222,207,29)"/><text x="28.8542%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (404,866 samples, 0.34%)</title><rect x="28.6735%" y="117" width="0.3412%" height="15" fill="rgb(206,96,30)"/><text x="28.9235%" y="127.50"></text></g><g><title>lint_checking (1,343,055 samples, 1.13%)</title><rect x="28.1800%" y="165" width="1.1319%" height="15" fill="rgb(218,138,4)"/><text x="28.4300%" y="175.50"></text></g><g><title>module_lints (352,594 samples, 0.30%)</title><rect x="29.0148%" y="149" width="0.2972%" height="15" fill="rgb(250,191,14)"/><text x="29.2648%" y="159.50"></text></g><g><title>lint_mod (350,344 samples, 0.30%)</title><rect x="29.0167%" y="133" width="0.2953%" height="15" fill="rgb(239,60,40)"/><text x="29.2667%" y="143.50"></text></g><g><title>privacy_access_levels (295,483 samples, 0.25%)</title><rect x="29.3119%" y="165" width="0.2490%" height="15" fill="rgb(206,27,48)"/><text x="29.5619%" y="175.50"></text></g><g><title>privacy_checking_modules (1,047,072 samples, 0.88%)</title><rect x="29.5609%" y="165" width="0.8824%" height="15" fill="rgb(225,35,8)"/><text x="29.8109%" y="175.50"></text></g><g><title>check_mod_privacy (1,045,412 samples, 0.88%)</title><rect x="29.5623%" y="149" width="0.8810%" height="15" fill="rgb(250,213,24)"/><text x="29.8123%" y="159.50"></text></g><g><title>misc_checking_3 (3,206,286 samples, 2.70%)</title><rect x="27.7588%" y="181" width="2.7021%" height="15" fill="rgb(247,123,22)"/><text x="28.0088%" y="191.50">mi..</text></g><g><title>impl_parent (546,475 samples, 0.46%)</title><rect x="31.5650%" y="117" width="0.4606%" height="15" fill="rgb(231,138,38)"/><text x="31.8150%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (312,265 samples, 0.26%)</title><rect x="31.7624%" y="101" width="0.2632%" height="15" fill="rgb(231,145,46)"/><text x="32.0124%" y="111.50"></text></g><g><title>impl_trait_ref (1,639,878 samples, 1.38%)</title><rect x="32.0256%" y="117" width="1.3820%" height="15" fill="rgb(251,118,11)"/><text x="32.2756%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,410,537 samples, 1.19%)</title><rect x="32.2188%" y="101" width="1.1888%" height="15" fill="rgb(217,147,25)"/><text x="32.4688%" y="111.50"></text></g><g><title>coherent_trait (3,597,060 samples, 3.03%)</title><rect x="30.5291%" y="149" width="3.0315%" height="15" fill="rgb(247,81,37)"/><text x="30.7791%" y="159.50">coh..</text></g><g><title>specialization_graph_of (3,358,298 samples, 2.83%)</title><rect x="30.7303%" y="133" width="2.8303%" height="15" fill="rgb(209,12,38)"/><text x="30.9803%" y="143.50">sp..</text></g><g><title>trait_impls_of (181,502 samples, 0.15%)</title><rect x="33.4076%" y="117" width="0.1530%" height="15" fill="rgb(227,1,9)"/><text x="33.6576%" y="127.50"></text></g><g><title>coherence_checking (3,708,121 samples, 3.13%)</title><rect x="30.5068%" y="165" width="3.1251%" height="15" fill="rgb(248,47,43)"/><text x="30.7568%" y="175.50">coh..</text></g><g><title>dropck_outlives (728,477 samples, 0.61%)</title><rect x="48.8094%" y="117" width="0.6139%" height="15" fill="rgb(221,10,30)"/><text x="49.0594%" y="127.50"></text></g><g><title>generics_of (162,500 samples, 0.14%)</title><rect x="50.2337%" y="101" width="0.1369%" height="15" fill="rgb(210,229,1)"/><text x="50.4837%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (138,300 samples, 0.12%)</title><rect x="50.2541%" y="85" width="0.1166%" height="15" fill="rgb(222,148,37)"/><text x="50.5041%" y="95.50"></text></g><g><title>impl_trait_ref (152,171 samples, 0.13%)</title><rect x="50.3846%" y="101" width="0.1282%" height="15" fill="rgb(234,67,33)"/><text x="50.6346%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (127,111 samples, 0.11%)</title><rect x="50.4058%" y="85" width="0.1071%" height="15" fill="rgb(247,98,35)"/><text x="50.6558%" y="95.50"></text></g><g><title>predicates_of (122,431 samples, 0.10%)</title><rect x="50.5239%" y="101" width="0.1032%" height="15" fill="rgb(247,138,52)"/><text x="50.7739%" y="111.50"></text></g><g><title>specializes (245,382 samples, 0.21%)</title><rect x="50.6271%" y="101" width="0.2068%" height="15" fill="rgb(213,79,30)"/><text x="50.8771%" y="111.50"></text></g><g><title>param_env (165,701 samples, 0.14%)</title><rect x="50.6943%" y="85" width="0.1396%" height="15" fill="rgb(246,177,23)"/><text x="50.9443%" y="95.50"></text></g><g><title>trait_impls_of (192,501 samples, 0.16%)</title><rect x="50.8379%" y="101" width="0.1622%" height="15" fill="rgb(230,62,27)"/><text x="51.0879%" y="111.50"></text></g><g><title>evaluate_obligation (1,871,951 samples, 1.58%)</title><rect x="49.4233%" y="117" width="1.5776%" height="15" fill="rgb(216,154,8)"/><text x="49.6733%" y="127.50"></text></g><g><title>associated_item (126,471 samples, 0.11%)</title><rect x="51.1303%" y="85" width="0.1066%" height="15" fill="rgb(244,35,45)"/><text x="51.3803%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (120,981 samples, 0.10%)</title><rect x="51.1350%" y="69" width="0.1020%" height="15" fill="rgb(251,115,12)"/><text x="51.3850%" y="79.50"></text></g><g><title>impl_item_implementor_ids (155,931 samples, 0.13%)</title><rect x="51.1100%" y="117" width="0.1314%" height="15" fill="rgb(240,54,50)"/><text x="51.3600%" y="127.50"></text></g><g><title>associated_items (146,051 samples, 0.12%)</title><rect x="51.1183%" y="101" width="0.1231%" height="15" fill="rgb(233,84,52)"/><text x="51.3683%" y="111.50"></text></g><g><title>method_autoderef_steps (296,223 samples, 0.25%)</title><rect x="51.3889%" y="117" width="0.2496%" height="15" fill="rgb(207,117,47)"/><text x="51.6389%" y="127.50"></text></g><g><title>evaluate_obligation (144,251 samples, 0.12%)</title><rect x="51.5169%" y="101" width="0.1216%" height="15" fill="rgb(249,43,39)"/><text x="51.7669%" y="111.50"></text></g><g><title>predicates_of (216,922 samples, 0.18%)</title><rect x="51.6762%" y="117" width="0.1828%" height="15" fill="rgb(209,38,44)"/><text x="51.9262%" y="127.50"></text></g><g><title>predicates_defined_on (157,752 samples, 0.13%)</title><rect x="51.7261%" y="101" width="0.1329%" height="15" fill="rgb(236,212,23)"/><text x="51.9761%" y="111.50"></text></g><g><title>associated_item (137,521 samples, 0.12%)</title><rect x="53.4262%" y="85" width="0.1159%" height="15" fill="rgb(242,79,21)"/><text x="53.6762%" y="95.50"></text></g><g><title>associated_items (196,281 samples, 0.17%)</title><rect x="53.3814%" y="101" width="0.1654%" height="15" fill="rgb(211,96,35)"/><text x="53.6314%" y="111.50"></text></g><g><title>is_copy_raw (134,451 samples, 0.11%)</title><rect x="53.6955%" y="101" width="0.1133%" height="15" fill="rgb(253,215,40)"/><text x="53.9455%" y="111.50"></text></g><g><title>typeck (2,326,625 samples, 1.96%)</title><rect x="51.9293%" y="117" width="1.9608%" height="15" fill="rgb(211,81,21)"/><text x="52.1793%" y="127.50">t..</text></g><g><title>item_bodies_checking (23,989,538 samples, 20.22%)</title><rect x="33.7082%" y="165" width="20.2175%" height="15" fill="rgb(208,190,38)"/><text x="33.9582%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,986,708 samples, 20.22%)</title><rect x="33.7106%" y="149" width="20.2152%" height="15" fill="rgb(235,213,38)"/><text x="33.9606%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,889,436 samples, 20.13%)</title><rect x="33.7926%" y="133" width="20.1332%" height="15" fill="rgb(237,122,38)"/><text x="34.0426%" y="143.50">typeck</text></g><g><title>item_types_checking (2,781,681 samples, 2.34%)</title><rect x="53.9258%" y="165" width="2.3443%" height="15" fill="rgb(244,218,35)"/><text x="54.1758%" y="175.50">i..</text></g><g><title>check_mod_item_types (2,779,781 samples, 2.34%)</title><rect x="53.9274%" y="149" width="2.3427%" height="15" fill="rgb(240,68,47)"/><text x="54.1774%" y="159.50">c..</text></g><g><title>fn_sig (943,845 samples, 0.80%)</title><rect x="56.9028%" y="133" width="0.7954%" height="15" fill="rgb(210,16,53)"/><text x="57.1528%" y="143.50"></text></g><g><title>associated_items (163,341 samples, 0.14%)</title><rect x="58.2183%" y="85" width="0.1377%" height="15" fill="rgb(235,124,12)"/><text x="58.4683%" y="95.50"></text></g><g><title>lint_levels (325,404 samples, 0.27%)</title><rect x="58.3737%" y="85" width="0.2742%" height="15" fill="rgb(224,169,11)"/><text x="58.6237%" y="95.50"></text></g><g><title>is_late_bound_map (814,658 samples, 0.69%)</title><rect x="57.9921%" y="117" width="0.6866%" height="15" fill="rgb(250,166,2)"/><text x="58.2421%" y="127.50"></text></g><g><title>resolve_lifetimes (801,298 samples, 0.68%)</title><rect x="58.0033%" y="101" width="0.6753%" height="15" fill="rgb(242,216,29)"/><text x="58.2533%" y="111.50"></text></g><g><title>named_region_map (363,343 samples, 0.31%)</title><rect x="58.6786%" y="117" width="0.3062%" height="15" fill="rgb(230,116,27)"/><text x="58.9286%" y="127.50"></text></g><g><title>resolve_lifetimes (322,193 samples, 0.27%)</title><rect x="58.7133%" y="101" width="0.2715%" height="15" fill="rgb(228,99,48)"/><text x="58.9633%" y="111.50"></text></g><g><title>generics_of (1,567,890 samples, 1.32%)</title><rect x="57.6982%" y="133" width="1.3214%" height="15" fill="rgb(253,11,6)"/><text x="57.9482%" y="143.50"></text></g><g><title>late_bound_vars_map (534,834 samples, 0.45%)</title><rect x="60.4884%" y="85" width="0.4507%" height="15" fill="rgb(247,143,39)"/><text x="60.7384%" y="95.50"></text></g><g><title>resolve_lifetimes (509,084 samples, 0.43%)</title><rect x="60.5101%" y="69" width="0.4290%" height="15" fill="rgb(236,97,10)"/><text x="60.7601%" y="79.50"></text></g><g><title>type_param_predicates (195,073 samples, 0.16%)</title><rect x="61.0770%" y="85" width="0.1644%" height="15" fill="rgb(233,208,19)"/><text x="61.3270%" y="95.50"></text></g><g><title>explicit_predicates_of (2,155,712 samples, 1.82%)</title><rect x="59.4263%" y="101" width="1.8168%" height="15" fill="rgb(216,164,2)"/><text x="59.6763%" y="111.50">e..</text></g><g><title>predicates_of (3,005,449 samples, 2.53%)</title><rect x="59.0764%" y="133" width="2.5329%" height="15" fill="rgb(220,129,5)"/><text x="59.3264%" y="143.50">pr..</text></g><g><title>predicates_defined_on (2,855,409 samples, 2.41%)</title><rect x="59.2029%" y="117" width="2.4064%" height="15" fill="rgb(242,17,10)"/><text x="59.4529%" y="127.50">pr..</text></g><g><title>inferred_outlives_of (434,504 samples, 0.37%)</title><rect x="61.2431%" y="101" width="0.3662%" height="15" fill="rgb(242,107,0)"/><text x="61.4931%" y="111.50"></text></g><g><title>inferred_outlives_crate (369,414 samples, 0.31%)</title><rect x="61.2980%" y="85" width="0.3113%" height="15" fill="rgb(251,28,31)"/><text x="61.5480%" y="95.50"></text></g><g><title>super_predicates_of (123,931 samples, 0.10%)</title><rect x="61.6093%" y="133" width="0.1044%" height="15" fill="rgb(233,223,10)"/><text x="61.8593%" y="143.50"></text></g><g><title>type_collecting (6,901,147 samples, 5.82%)</title><rect x="56.2705%" y="165" width="5.8160%" height="15" fill="rgb(215,21,27)"/><text x="56.5205%" y="175.50">type_co..</text></g><g><title>collect_mod_item_types (6,888,597 samples, 5.81%)</title><rect x="56.2811%" y="149" width="5.8055%" height="15" fill="rgb(232,23,21)"/><text x="56.5311%" y="159.50">collect..</text></g><g><title>type_of (431,534 samples, 0.36%)</title><rect x="61.7229%" y="133" width="0.3637%" height="15" fill="rgb(244,5,23)"/><text x="61.9729%" y="143.50"></text></g><g><title>type_param_predicates (126,153 samples, 0.11%)</title><rect x="61.9803%" y="117" width="0.1063%" height="15" fill="rgb(226,81,46)"/><text x="62.2303%" y="127.50"></text></g><g><title>evaluate_obligation (732,637 samples, 0.62%)</title><rect x="64.9940%" y="133" width="0.6174%" height="15" fill="rgb(247,70,30)"/><text x="65.2440%" y="143.50"></text></g><g><title>implied_outlives_bounds (539,150 samples, 0.45%)</title><rect x="65.6114%" y="133" width="0.4544%" height="15" fill="rgb(212,68,19)"/><text x="65.8614%" y="143.50"></text></g><g><title>param_env (764,127 samples, 0.64%)</title><rect x="66.0658%" y="133" width="0.6440%" height="15" fill="rgb(240,187,13)"/><text x="66.3158%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,433,458 samples, 4.58%)</title><rect x="62.3661%" y="149" width="4.5791%" height="15" fill="rgb(223,113,26)"/><text x="62.6161%" y="159.50">check..</text></g><g><title>region_scope_tree (279,324 samples, 0.24%)</title><rect x="66.7098%" y="133" width="0.2354%" height="15" fill="rgb(206,192,2)"/><text x="66.9598%" y="143.50"></text></g><g><title>implied_outlives_bounds (127,990 samples, 0.11%)</title><rect x="68.7454%" y="133" width="0.1079%" height="15" fill="rgb(241,108,4)"/><text x="68.9954%" y="143.50"></text></g><g><title>param_env (395,733 samples, 0.33%)</title><rect x="68.8532%" y="133" width="0.3335%" height="15" fill="rgb(247,173,49)"/><text x="69.1032%" y="143.50"></text></g><g><title>check_item_well_formed (2,945,414 samples, 2.48%)</title><rect x="66.9452%" y="149" width="2.4823%" height="15" fill="rgb(224,114,35)"/><text x="67.1952%" y="159.50">ch..</text></g><g><title>variances_of (161,032 samples, 0.14%)</title><rect x="69.2918%" y="133" width="0.1357%" height="15" fill="rgb(245,159,27)"/><text x="69.5418%" y="143.50"></text></g><g><title>crate_variances (152,842 samples, 0.13%)</title><rect x="69.2987%" y="117" width="0.1288%" height="15" fill="rgb(245,172,44)"/><text x="69.5487%" y="127.50"></text></g><g><title>evaluate_obligation (448,424 samples, 0.38%)</title><rect x="71.7213%" y="133" width="0.3779%" height="15" fill="rgb(236,23,11)"/><text x="71.9713%" y="143.50"></text></g><g><title>implied_outlives_bounds (494,065 samples, 0.42%)</title><rect x="72.0992%" y="133" width="0.4164%" height="15" fill="rgb(205,117,38)"/><text x="72.3492%" y="143.50"></text></g><g><title>param_env (616,158 samples, 0.52%)</title><rect x="72.5156%" y="133" width="0.5193%" height="15" fill="rgb(237,72,25)"/><text x="72.7656%" y="143.50"></text></g><g><title>region_scope_tree (258,173 samples, 0.22%)</title><rect x="73.0863%" y="133" width="0.2176%" height="15" fill="rgb(244,70,9)"/><text x="73.3363%" y="143.50"></text></g><g><title>analysis (86,102,760 samples, 72.56%)</title><rect x="0.7703%" y="197" width="72.5644%" height="15" fill="rgb(217,125,39)"/><text x="1.0203%" y="207.50">analysis</text></g><g><title>type_check_crate (50,872,667 samples, 42.87%)</title><rect x="30.4610%" y="181" width="42.8737%" height="15" fill="rgb(235,36,10)"/><text x="30.7110%" y="191.50">type_check_crate</text></g><g><title>wf_checking (13,341,049 samples, 11.24%)</title><rect x="62.0913%" y="165" width="11.2434%" height="15" fill="rgb(251,123,47)"/><text x="62.3413%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (4,636,143 samples, 3.91%)</title><rect x="69.4275%" y="149" width="3.9072%" height="15" fill="rgb(221,13,13)"/><text x="69.6775%" y="159.50">chec..</text></g><g><title>codegen_crate (423,514 samples, 0.36%)</title><rect x="73.3451%" y="197" width="0.3569%" height="15" fill="rgb(238,131,9)"/><text x="73.5951%" y="207.50"></text></g><g><title>AST_validation (238,622 samples, 0.20%)</title><rect x="73.8946%" y="181" width="0.2011%" height="15" fill="rgb(211,50,8)"/><text x="74.1446%" y="191.50"></text></g><g><title>complete_gated_feature_checking (120,861 samples, 0.10%)</title><rect x="74.0957%" y="181" width="0.1019%" height="15" fill="rgb(245,182,24)"/><text x="74.3457%" y="191.50"></text></g><g><title>macro_expand_crate (8,410,534 samples, 7.09%)</title><rect x="74.2727%" y="181" width="7.0881%" height="15" fill="rgb(242,14,37)"/><text x="74.5227%" y="191.50">macro_expa..</text></g><g><title>expand_crate (8,384,103 samples, 7.07%)</title><rect x="74.2950%" y="165" width="7.0658%" height="15" fill="rgb(246,228,12)"/><text x="74.5450%" y="175.50">expand_cr..</text></g><g><title>metadata_register_crate (207,382 samples, 0.17%)</title><rect x="81.1860%" y="149" width="0.1748%" height="15" fill="rgb(213,55,15)"/><text x="81.4360%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (374,704 samples, 0.32%)</title><rect x="81.3651%" y="181" width="0.3158%" height="15" fill="rgb(209,9,3)"/><text x="81.6151%" y="191.50"></text></g><g><title>late_resolve_crate (2,296,376 samples, 1.94%)</title><rect x="81.8019%" y="165" width="1.9353%" height="15" fill="rgb(230,59,30)"/><text x="82.0519%" y="175.50">l..</text></g><g><title>configure_and_expand (12,106,474 samples, 10.20%)</title><rect x="73.7021%" y="197" width="10.2029%" height="15" fill="rgb(209,121,21)"/><text x="73.9521%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (2,639,000 samples, 2.22%)</title><rect x="81.6809%" y="181" width="2.2241%" height="15" fill="rgb(220,109,13)"/><text x="81.9309%" y="191.50">r..</text></g><g><title>drop_ast (375,304 samples, 0.32%)</title><rect x="83.9050%" y="197" width="0.3163%" height="15" fill="rgb(232,18,1)"/><text x="84.1550%" y="207.50"></text></g><g><title>early_lint_checks (598,576 samples, 0.50%)</title><rect x="84.2331%" y="197" width="0.5045%" height="15" fill="rgb(215,41,42)"/><text x="84.4831%" y="207.50"></text></g><g><title>free_global_ctxt (2,080,324 samples, 1.75%)</title><rect x="84.7376%" y="197" width="1.7532%" height="15" fill="rgb(224,123,36)"/><text x="84.9876%" y="207.50"></text></g><g><title>generate_crate_metadata (1,129,092 samples, 0.95%)</title><rect x="86.4908%" y="197" width="0.9516%" height="15" fill="rgb(240,125,3)"/><text x="86.7408%" y="207.50"></text></g><g><title>hir_lowering (6,117,609 samples, 5.16%)</title><rect x="87.4424%" y="197" width="5.1557%" height="15" fill="rgb(205,98,50)"/><text x="87.6924%" y="207.50">hir_lo..</text></g><g><title>parse_crate (7,408,982 samples, 6.24%)</title><rect x="92.6348%" y="197" width="6.2440%" height="15" fill="rgb(205,185,37)"/><text x="92.8848%" y="207.50">parse_cr..</text></g><g><title>prepare_outputs (317,324 samples, 0.27%)</title><rect x="98.8871%" y="197" width="0.2674%" height="15" fill="rgb(238,207,15)"/><text x="99.1371%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (532,666 samples, 0.45%)</title><rect x="99.1546%" y="197" width="0.4489%" height="15" fill="rgb(213,199,42)"/><text x="99.4046%" y="207.50"></text></g><g><title>setup_global_ctxt (133,271 samples, 0.11%)</title><rect x="99.6132%" y="197" width="0.1123%" height="15" fill="rgb(235,201,11)"/><text x="99.8632%" y="207.50"></text></g><g><title>all (118,657,032 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (118,657,032 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (325,704 samples, 0.27%)</title><rect x="99.7255%" y="197" width="0.2745%" height="15" fill="rgb(243,32,47)"/><text x="99.9755%" y="207.50"></text></g></svg></svg>