<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (58,450 samples, 0.13%)</title><rect x="8.1549%" y="149" width="0.1301%" height="15" fill="rgb(227,0,7)"/><text x="8.4049%" y="159.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (50,700 samples, 0.11%)</title><rect x="8.1722%" y="133" width="0.1128%" height="15" fill="rgb(217,0,24)"/><text x="8.4222%" y="143.50"></text></g><g><title>param_env (149,673 samples, 0.33%)</title><rect x="8.2850%" y="149" width="0.3331%" height="15" fill="rgb(221,193,54)"/><text x="8.5350%" y="159.50"></text></g><g><title>item_attrs (200,302 samples, 0.45%)</title><rect x="9.0886%" y="117" width="0.4457%" height="15" fill="rgb(248,212,6)"/><text x="9.3386%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (194,222 samples, 0.43%)</title><rect x="9.1021%" y="101" width="0.4322%" height="15" fill="rgb(208,68,35)"/><text x="9.3521%" y="111.50"></text></g><g><title>codegen_fn_attrs (257,472 samples, 0.57%)</title><rect x="8.9723%" y="133" width="0.5730%" height="15" fill="rgb(232,128,0)"/><text x="9.2223%" y="143.50"></text></g><g><title>is_copy_raw (64,130 samples, 0.14%)</title><rect x="10.7163%" y="117" width="0.1427%" height="15" fill="rgb(207,160,47)"/><text x="10.9663%" y="127.50"></text></g><g><title>evaluate_obligation (53,500 samples, 0.12%)</title><rect x="10.7400%" y="101" width="0.1191%" height="15" fill="rgb(228,23,34)"/><text x="10.9900%" y="111.50"></text></g><g><title>needs_drop_raw (118,031 samples, 0.26%)</title><rect x="10.8590%" y="117" width="0.2627%" height="15" fill="rgb(218,30,26)"/><text x="11.1090%" y="127.50"></text></g><g><title>is_copy_raw (108,201 samples, 0.24%)</title><rect x="10.8809%" y="101" width="0.2408%" height="15" fill="rgb(220,122,19)"/><text x="11.1309%" y="111.50"></text></g><g><title>evaluate_obligation (98,361 samples, 0.22%)</title><rect x="10.9028%" y="85" width="0.2189%" height="15" fill="rgb(250,228,42)"/><text x="11.1528%" y="95.50"></text></g><g><title>thir_body (257,024 samples, 0.57%)</title><rect x="11.2143%" y="117" width="0.5720%" height="15" fill="rgb(240,193,28)"/><text x="11.4643%" y="127.50"></text></g><g><title>lit_to_const (45,530 samples, 0.10%)</title><rect x="11.6850%" y="101" width="0.1013%" height="15" fill="rgb(216,20,37)"/><text x="11.9350%" y="111.50"></text></g><g><title>mir_const (1,874,511 samples, 4.17%)</title><rect x="7.6201%" y="165" width="4.1714%" height="15" fill="rgb(206,188,39)"/><text x="7.8701%" y="175.50">mir_c..</text></g><g><title>unsafety_check_result (1,426,056 samples, 3.17%)</title><rect x="8.6181%" y="149" width="3.1735%" height="15" fill="rgb(217,207,13)"/><text x="8.8681%" y="159.50">uns..</text></g><g><title>mir_built (1,009,401 samples, 2.25%)</title><rect x="9.5453%" y="133" width="2.2463%" height="15" fill="rgb(231,73,38)"/><text x="9.7953%" y="143.50">m..</text></g><g><title>mir_promoted (2,103,403 samples, 4.68%)</title><rect x="7.1361%" y="181" width="4.6808%" height="15" fill="rgb(225,20,46)"/><text x="7.3861%" y="191.50">mir_p..</text></g><g><title>type_op_normalize_fn_sig (161,092 samples, 0.36%)</title><rect x="11.8169%" y="181" width="0.3585%" height="15" fill="rgb(210,31,41)"/><text x="12.0669%" y="191.50"></text></g><g><title>normalize_projection_ty (80,421 samples, 0.18%)</title><rect x="11.9964%" y="165" width="0.1790%" height="15" fill="rgb(221,200,47)"/><text x="12.2464%" y="175.50"></text></g><g><title>MIR_borrow_checking (5,061,436 samples, 11.26%)</title><rect x="1.8977%" y="213" width="11.2635%" height="15" fill="rgb(226,26,5)"/><text x="2.1477%" y="223.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (5,048,306 samples, 11.23%)</title><rect x="1.9269%" y="197" width="11.2343%" height="15" fill="rgb(249,33,26)"/><text x="2.1769%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (442,997 samples, 0.99%)</title><rect x="12.1754%" y="181" width="0.9858%" height="15" fill="rgb(235,183,28)"/><text x="12.4254%" y="191.50"></text></g><g><title>hir_module_items (115,632 samples, 0.26%)</title><rect x="13.1779%" y="213" width="0.2573%" height="15" fill="rgb(221,5,38)"/><text x="13.4279%" y="223.50"></text></g><g><title>get_lang_items (83,321 samples, 0.19%)</title><rect x="13.9170%" y="165" width="0.1854%" height="15" fill="rgb(247,18,42)"/><text x="14.1670%" y="175.50"></text></g><g><title>codegen_fn_attrs (235,763 samples, 0.52%)</title><rect x="13.6942%" y="181" width="0.5247%" height="15" fill="rgb(241,131,45)"/><text x="13.9442%" y="191.50"></text></g><g><title>check_mod_attrs (322,423 samples, 0.72%)</title><rect x="13.5018%" y="197" width="0.7175%" height="15" fill="rgb(249,31,29)"/><text x="13.7518%" y="207.50"></text></g><g><title>lookup_deprecation_entry (69,071 samples, 0.15%)</title><rect x="14.5152%" y="181" width="0.1537%" height="15" fill="rgb(225,111,53)"/><text x="14.7652%" y="191.50"></text></g><g><title>lookup_stability (60,322 samples, 0.13%)</title><rect x="14.6689%" y="181" width="0.1342%" height="15" fill="rgb(238,160,17)"/><text x="14.9189%" y="191.50"></text></g><g><title>metadata_decode_entry_lookup_stability (54,022 samples, 0.12%)</title><rect x="14.6829%" y="165" width="0.1202%" height="15" fill="rgb(214,148,48)"/><text x="14.9329%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (220,243 samples, 0.49%)</title><rect x="14.3493%" y="197" width="0.4901%" height="15" fill="rgb(232,36,49)"/><text x="14.5993%" y="207.50"></text></g><g><title>misc_checking_1 (664,677 samples, 1.48%)</title><rect x="13.4372%" y="213" width="1.4791%" height="15" fill="rgb(209,103,24)"/><text x="13.6872%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (151,092 samples, 0.34%)</title><rect x="14.9218%" y="197" width="0.3362%" height="15" fill="rgb(229,88,8)"/><text x="15.1718%" y="207.50"></text></g><g><title>check_mod_liveness (120,461 samples, 0.27%)</title><rect x="14.9900%" y="181" width="0.2681%" height="15" fill="rgb(213,181,19)"/><text x="15.2400%" y="191.50"></text></g><g><title>misc_checking_2 (279,944 samples, 0.62%)</title><rect x="14.9163%" y="213" width="0.6230%" height="15" fill="rgb(254,191,54)"/><text x="15.1663%" y="223.50"></text></g><g><title>match_checking (126,362 samples, 0.28%)</title><rect x="15.2581%" y="197" width="0.2812%" height="15" fill="rgb(241,83,37)"/><text x="15.5081%" y="207.50"></text></g><g><title>check_match (121,142 samples, 0.27%)</title><rect x="15.2697%" y="181" width="0.2696%" height="15" fill="rgb(233,36,39)"/><text x="15.5197%" y="191.50"></text></g><g><title>check_private_in_public (46,441 samples, 0.10%)</title><rect x="15.5701%" y="197" width="0.1033%" height="15" fill="rgb(226,3,54)"/><text x="15.8201%" y="207.50"></text></g><g><title>death_checking (123,701 samples, 0.28%)</title><rect x="15.6735%" y="197" width="0.2753%" height="15" fill="rgb(245,192,40)"/><text x="15.9235%" y="207.50"></text></g><g><title>param_env (77,071 samples, 0.17%)</title><rect x="16.1626%" y="165" width="0.1715%" height="15" fill="rgb(238,167,29)"/><text x="16.4126%" y="175.50"></text></g><g><title>crate_lints (179,982 samples, 0.40%)</title><rect x="15.9548%" y="181" width="0.4005%" height="15" fill="rgb(232,182,51)"/><text x="16.2048%" y="191.50"></text></g><g><title>lint_checking (273,733 samples, 0.61%)</title><rect x="15.9487%" y="197" width="0.6092%" height="15" fill="rgb(231,60,39)"/><text x="16.1987%" y="207.50"></text></g><g><title>module_lints (91,031 samples, 0.20%)</title><rect x="16.3553%" y="181" width="0.2026%" height="15" fill="rgb(208,69,12)"/><text x="16.6053%" y="191.50"></text></g><g><title>lint_mod (87,761 samples, 0.20%)</title><rect x="16.3626%" y="165" width="0.1953%" height="15" fill="rgb(235,93,37)"/><text x="16.6126%" y="175.50"></text></g><g><title>privacy_access_levels (65,731 samples, 0.15%)</title><rect x="16.5579%" y="197" width="0.1463%" height="15" fill="rgb(213,116,39)"/><text x="16.8079%" y="207.50"></text></g><g><title>privacy_checking_modules (193,303 samples, 0.43%)</title><rect x="16.7042%" y="197" width="0.4302%" height="15" fill="rgb(222,207,29)"/><text x="16.9542%" y="207.50"></text></g><g><title>check_mod_privacy (190,813 samples, 0.42%)</title><rect x="16.7097%" y="181" width="0.4246%" height="15" fill="rgb(206,96,30)"/><text x="16.9597%" y="191.50"></text></g><g><title>misc_checking_3 (736,479 samples, 1.64%)</title><rect x="15.5393%" y="213" width="1.6389%" height="15" fill="rgb(218,138,4)"/><text x="15.7893%" y="223.50"></text></g><g><title>associated_item (804,451 samples, 1.79%)</title><rect x="29.9421%" y="133" width="1.7902%" height="15" fill="rgb(250,191,14)"/><text x="30.1921%" y="143.50">a..</text></g><g><title>metadata_decode_entry_associated_item (644,388 samples, 1.43%)</title><rect x="30.2983%" y="117" width="1.4340%" height="15" fill="rgb(239,60,40)"/><text x="30.5483%" y="127.50"></text></g><g><title>associated_items (1,140,904 samples, 2.54%)</title><rect x="29.2889%" y="149" width="2.5389%" height="15" fill="rgb(206,27,48)"/><text x="29.5389%" y="159.50">as..</text></g><g><title>impl_parent (184,360 samples, 0.41%)</title><rect x="32.6845%" y="53" width="0.4103%" height="15" fill="rgb(225,35,8)"/><text x="32.9345%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (136,620 samples, 0.30%)</title><rect x="32.7908%" y="37" width="0.3040%" height="15" fill="rgb(250,213,24)"/><text x="33.0408%" y="47.50"></text></g><g><title>impl_trait_ref (646,728 samples, 1.44%)</title><rect x="33.0948%" y="53" width="1.4392%" height="15" fill="rgb(247,123,22)"/><text x="33.3448%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (594,458 samples, 1.32%)</title><rect x="33.2111%" y="37" width="1.3229%" height="15" fill="rgb(231,138,38)"/><text x="33.4611%" y="47.50"></text></g><g><title>coherent_trait (1,164,392 samples, 2.59%)</title><rect x="32.1672%" y="85" width="2.5912%" height="15" fill="rgb(231,145,46)"/><text x="32.4172%" y="95.50">co..</text></g><g><title>specialization_graph_of (1,153,842 samples, 2.57%)</title><rect x="32.1907%" y="69" width="2.5677%" height="15" fill="rgb(251,118,11)"/><text x="32.4407%" y="79.50">sp..</text></g><g><title>trait_impls_of (100,851 samples, 0.22%)</title><rect x="34.5340%" y="53" width="0.2244%" height="15" fill="rgb(217,147,25)"/><text x="34.7840%" y="63.50"></text></g><g><title>adt_destructor (1,179,932 samples, 2.63%)</title><rect x="32.1359%" y="117" width="2.6258%" height="15" fill="rgb(247,81,37)"/><text x="32.3859%" y="127.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (1,177,762 samples, 2.62%)</title><rect x="32.1407%" y="101" width="2.6209%" height="15" fill="rgb(209,12,38)"/><text x="32.3907%" y="111.50">me..</text></g><g><title>dropck_outlives (1,276,714 samples, 2.84%)</title><rect x="31.9317%" y="149" width="2.8411%" height="15" fill="rgb(227,1,9)"/><text x="32.1817%" y="159.50">dr..</text></g><g><title>adt_dtorck_constraint (1,228,194 samples, 2.73%)</title><rect x="32.0397%" y="133" width="2.7332%" height="15" fill="rgb(248,47,43)"/><text x="32.2897%" y="143.50">ad..</text></g><g><title>adt_sized_constraint (49,131 samples, 0.11%)</title><rect x="36.7699%" y="133" width="0.1093%" height="15" fill="rgb(221,10,30)"/><text x="37.0199%" y="143.50"></text></g><g><title>generics_of (76,000 samples, 0.17%)</title><rect x="36.8793%" y="133" width="0.1691%" height="15" fill="rgb(210,229,1)"/><text x="37.1293%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (66,380 samples, 0.15%)</title><rect x="36.9007%" y="117" width="0.1477%" height="15" fill="rgb(222,148,37)"/><text x="37.1507%" y="127.50"></text></g><g><title>impl_trait_ref (74,900 samples, 0.17%)</title><rect x="37.1739%" y="133" width="0.1667%" height="15" fill="rgb(234,67,33)"/><text x="37.4239%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (65,230 samples, 0.15%)</title><rect x="37.1954%" y="117" width="0.1452%" height="15" fill="rgb(247,98,35)"/><text x="37.4454%" y="127.50"></text></g><g><title>explicit_predicates_of (47,051 samples, 0.10%)</title><rect x="37.6887%" y="101" width="0.1047%" height="15" fill="rgb(247,138,52)"/><text x="37.9387%" y="111.50"></text></g><g><title>predicates_of (192,673 samples, 0.43%)</title><rect x="37.4201%" y="133" width="0.4288%" height="15" fill="rgb(213,79,30)"/><text x="37.6701%" y="143.50"></text></g><g><title>predicates_defined_on (117,742 samples, 0.26%)</title><rect x="37.5869%" y="117" width="0.2620%" height="15" fill="rgb(246,177,23)"/><text x="37.8369%" y="127.50"></text></g><g><title>specializes (267,802 samples, 0.60%)</title><rect x="37.8489%" y="133" width="0.5960%" height="15" fill="rgb(230,62,27)"/><text x="38.0989%" y="143.50"></text></g><g><title>param_env (206,102 samples, 0.46%)</title><rect x="37.9862%" y="117" width="0.4586%" height="15" fill="rgb(216,154,8)"/><text x="38.2362%" y="127.50"></text></g><g><title>def_span (119,450 samples, 0.27%)</title><rect x="38.1790%" y="101" width="0.2658%" height="15" fill="rgb(244,35,45)"/><text x="38.4290%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (113,830 samples, 0.25%)</title><rect x="38.1915%" y="85" width="0.2533%" height="15" fill="rgb(251,115,12)"/><text x="38.4415%" y="95.50"></text></g><g><title>trait_impls_of (967,791 samples, 2.15%)</title><rect x="38.4934%" y="133" width="2.1537%" height="15" fill="rgb(240,54,50)"/><text x="38.7434%" y="143.50">t..</text></g><g><title>implementations_of_trait (347,494 samples, 0.77%)</title><rect x="39.8737%" y="117" width="0.7733%" height="15" fill="rgb(233,84,52)"/><text x="40.1237%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (223,854 samples, 0.50%)</title><rect x="40.1489%" y="101" width="0.4982%" height="15" fill="rgb(207,117,47)"/><text x="40.3989%" y="111.50"></text></g><g><title>evaluate_obligation (2,653,211 samples, 5.90%)</title><rect x="34.7728%" y="149" width="5.9043%" height="15" fill="rgb(249,43,39)"/><text x="35.0228%" y="159.50">evaluate..</text></g><g><title>fn_sig (168,771 samples, 0.38%)</title><rect x="40.7337%" y="149" width="0.3756%" height="15" fill="rgb(209,38,44)"/><text x="40.9837%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (152,221 samples, 0.34%)</title><rect x="40.7706%" y="133" width="0.3387%" height="15" fill="rgb(236,212,23)"/><text x="41.0206%" y="143.50"></text></g><g><title>generics_of (121,491 samples, 0.27%)</title><rect x="41.1093%" y="149" width="0.2704%" height="15" fill="rgb(242,79,21)"/><text x="41.3593%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (88,520 samples, 0.20%)</title><rect x="41.1827%" y="133" width="0.1970%" height="15" fill="rgb(211,96,35)"/><text x="41.4327%" y="143.50"></text></g><g><title>impl_item_implementor_ids (53,850 samples, 0.12%)</title><rect x="41.3797%" y="149" width="0.1198%" height="15" fill="rgb(253,215,40)"/><text x="41.6297%" y="159.50"></text></g><g><title>associated_items (48,230 samples, 0.11%)</title><rect x="41.3922%" y="133" width="0.1073%" height="15" fill="rgb(211,81,21)"/><text x="41.6422%" y="143.50"></text></g><g><title>impl_trait_ref (67,322 samples, 0.15%)</title><rect x="41.5231%" y="149" width="0.1498%" height="15" fill="rgb(208,190,38)"/><text x="41.7731%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (54,221 samples, 0.12%)</title><rect x="41.5522%" y="133" width="0.1207%" height="15" fill="rgb(235,213,38)"/><text x="41.8022%" y="143.50"></text></g><g><title>item_attrs (68,681 samples, 0.15%)</title><rect x="41.7233%" y="149" width="0.1528%" height="15" fill="rgb(237,122,38)"/><text x="41.9733%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (66,541 samples, 0.15%)</title><rect x="41.7280%" y="133" width="0.1481%" height="15" fill="rgb(244,218,35)"/><text x="41.9780%" y="143.50"></text></g><g><title>evaluate_obligation (205,343 samples, 0.46%)</title><rect x="42.2869%" y="133" width="0.4570%" height="15" fill="rgb(240,68,47)"/><text x="42.5369%" y="143.50"></text></g><g><title>trait_impls_of (65,111 samples, 0.14%)</title><rect x="42.5990%" y="117" width="0.1449%" height="15" fill="rgb(210,16,53)"/><text x="42.8490%" y="127.50"></text></g><g><title>method_autoderef_steps (401,586 samples, 0.89%)</title><rect x="41.9768%" y="149" width="0.8937%" height="15" fill="rgb(235,124,12)"/><text x="42.2268%" y="159.50"></text></g><g><title>explicit_predicates_of (111,180 samples, 0.25%)</title><rect x="43.3688%" y="117" width="0.2474%" height="15" fill="rgb(224,169,11)"/><text x="43.6188%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (79,290 samples, 0.18%)</title><rect x="43.4398%" y="101" width="0.1764%" height="15" fill="rgb(250,166,2)"/><text x="43.6898%" y="111.50"></text></g><g><title>predicates_of (374,793 samples, 0.83%)</title><rect x="42.9116%" y="149" width="0.8340%" height="15" fill="rgb(242,216,29)"/><text x="43.1616%" y="159.50"></text></g><g><title>predicates_defined_on (258,733 samples, 0.58%)</title><rect x="43.1699%" y="133" width="0.5758%" height="15" fill="rgb(230,116,27)"/><text x="43.4199%" y="143.50"></text></g><g><title>inferred_outlives_of (58,141 samples, 0.13%)</title><rect x="43.6163%" y="117" width="0.1294%" height="15" fill="rgb(228,99,48)"/><text x="43.8663%" y="127.50"></text></g><g><title>type_of (72,471 samples, 0.16%)</title><rect x="43.8744%" y="149" width="0.1613%" height="15" fill="rgb(253,11,6)"/><text x="44.1244%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (64,061 samples, 0.14%)</title><rect x="43.8931%" y="133" width="0.1426%" height="15" fill="rgb(247,143,39)"/><text x="44.1431%" y="143.50"></text></g><g><title>item_bodies_checking (12,034,934 samples, 26.78%)</title><rect x="17.3162%" y="197" width="26.7820%" height="15" fill="rgb(236,97,10)"/><text x="17.5662%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,031,324 samples, 26.77%)</title><rect x="17.3243%" y="181" width="26.7739%" height="15" fill="rgb(233,208,19)"/><text x="17.5743%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (12,019,784 samples, 26.75%)</title><rect x="17.3499%" y="165" width="26.7482%" height="15" fill="rgb(216,164,2)"/><text x="17.5999%" y="175.50">typeck</text></g><g><title>fn_sig (135,152 samples, 0.30%)</title><rect x="44.2801%" y="165" width="0.3008%" height="15" fill="rgb(220,129,5)"/><text x="44.5301%" y="175.50"></text></g><g><title>type_of (53,441 samples, 0.12%)</title><rect x="44.4620%" y="149" width="0.1189%" height="15" fill="rgb(242,17,10)"/><text x="44.7120%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (50,191 samples, 0.11%)</title><rect x="44.4692%" y="133" width="0.1117%" height="15" fill="rgb(242,107,0)"/><text x="44.7192%" y="143.50"></text></g><g><title>named_region_map (108,642 samples, 0.24%)</title><rect x="44.6760%" y="149" width="0.2418%" height="15" fill="rgb(251,28,31)"/><text x="44.9260%" y="159.50"></text></g><g><title>resolve_lifetimes (101,102 samples, 0.22%)</title><rect x="44.6927%" y="133" width="0.2250%" height="15" fill="rgb(233,223,10)"/><text x="44.9427%" y="143.50"></text></g><g><title>generics_of (166,592 samples, 0.37%)</title><rect x="44.5809%" y="165" width="0.3707%" height="15" fill="rgb(215,21,27)"/><text x="44.8309%" y="175.50"></text></g><g><title>explicit_predicates_of (130,572 samples, 0.29%)</title><rect x="44.9930%" y="133" width="0.2906%" height="15" fill="rgb(232,23,21)"/><text x="45.2430%" y="143.50"></text></g><g><title>predicates_of (157,132 samples, 0.35%)</title><rect x="44.9516%" y="165" width="0.3497%" height="15" fill="rgb(244,5,23)"/><text x="45.2016%" y="175.50"></text></g><g><title>predicates_defined_on (150,632 samples, 0.34%)</title><rect x="44.9661%" y="149" width="0.3352%" height="15" fill="rgb(226,81,46)"/><text x="45.2161%" y="159.50"></text></g><g><title>type_collecting (564,877 samples, 1.26%)</title><rect x="44.1146%" y="197" width="1.2570%" height="15" fill="rgb(247,70,30)"/><text x="44.3646%" y="207.50"></text></g><g><title>collect_mod_item_types (553,277 samples, 1.23%)</title><rect x="44.1404%" y="181" width="1.2312%" height="15" fill="rgb(212,68,19)"/><text x="44.3904%" y="191.50"></text></g><g><title>evaluate_obligation (217,834 samples, 0.48%)</title><rect x="46.7809%" y="165" width="0.4848%" height="15" fill="rgb(240,187,13)"/><text x="47.0309%" y="175.50"></text></g><g><title>implied_outlives_bounds (140,751 samples, 0.31%)</title><rect x="47.2656%" y="165" width="0.3132%" height="15" fill="rgb(223,113,26)"/><text x="47.5156%" y="175.50"></text></g><g><title>param_env (319,315 samples, 0.71%)</title><rect x="47.5812%" y="165" width="0.7106%" height="15" fill="rgb(206,192,2)"/><text x="47.8312%" y="175.50"></text></g><g><title>predicates_of (86,782 samples, 0.19%)</title><rect x="48.2918%" y="165" width="0.1931%" height="15" fill="rgb(241,108,4)"/><text x="48.5418%" y="175.50"></text></g><g><title>predicates_defined_on (69,192 samples, 0.15%)</title><rect x="48.3310%" y="149" width="0.1540%" height="15" fill="rgb(247,173,49)"/><text x="48.5810%" y="159.50"></text></g><g><title>region_scope_tree (74,371 samples, 0.17%)</title><rect x="48.4849%" y="165" width="0.1655%" height="15" fill="rgb(224,114,35)"/><text x="48.7349%" y="175.50"></text></g><g><title>analysis (21,850,474 samples, 48.62%)</title><rect x="1.5314%" y="229" width="48.6250%" height="15" fill="rgb(245,159,27)"/><text x="1.7814%" y="239.50">analysis</text></g><g><title>type_check_crate (14,819,325 samples, 32.98%)</title><rect x="17.1782%" y="213" width="32.9782%" height="15" fill="rgb(245,172,44)"/><text x="17.4282%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,149,054 samples, 4.78%)</title><rect x="45.3740%" y="197" width="4.7824%" height="15" fill="rgb(236,23,11)"/><text x="45.6240%" y="207.50">wf_che..</text></g><g><title>check_item_well_formed (2,108,994 samples, 4.69%)</title><rect x="45.4631%" y="181" width="4.6933%" height="15" fill="rgb(205,117,38)"/><text x="45.7131%" y="191.50">check..</text></g><g><title>trait_impls_of (676,728 samples, 1.51%)</title><rect x="48.6504%" y="165" width="1.5060%" height="15" fill="rgb(237,72,25)"/><text x="48.9004%" y="175.50"></text></g><g><title>implementations_of_trait (143,712 samples, 0.32%)</title><rect x="49.8366%" y="149" width="0.3198%" height="15" fill="rgb(244,70,9)"/><text x="50.0866%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (123,332 samples, 0.27%)</title><rect x="49.8819%" y="133" width="0.2745%" height="15" fill="rgb(217,125,39)"/><text x="50.1319%" y="143.50"></text></g><g><title>native_libraries (46,040 samples, 0.10%)</title><rect x="51.2865%" y="213" width="0.1025%" height="15" fill="rgb(235,36,10)"/><text x="51.5365%" y="223.50"></text></g><g><title>codegen_crate (572,826 samples, 1.27%)</title><rect x="50.1848%" y="229" width="1.2747%" height="15" fill="rgb(251,123,47)"/><text x="50.4348%" y="239.50"></text></g><g><title>AST_validation (90,321 samples, 0.20%)</title><rect x="51.9696%" y="213" width="0.2010%" height="15" fill="rgb(221,13,13)"/><text x="52.2196%" y="223.50"></text></g><g><title>crate_injection (86,641 samples, 0.19%)</title><rect x="52.2346%" y="213" width="0.1928%" height="15" fill="rgb(238,131,9)"/><text x="52.4846%" y="223.50"></text></g><g><title>metadata_load_macro (157,991 samples, 0.35%)</title><rect x="73.7477%" y="181" width="0.3516%" height="15" fill="rgb(211,50,8)"/><text x="73.9977%" y="191.50"></text></g><g><title>macro_expand_crate (12,401,409 samples, 27.60%)</title><rect x="52.4274%" y="213" width="27.5975%" height="15" fill="rgb(245,182,24)"/><text x="52.6774%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (12,373,999 samples, 27.54%)</title><rect x="52.4884%" y="197" width="27.5365%" height="15" fill="rgb(242,14,37)"/><text x="52.7384%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,662,740 samples, 5.93%)</title><rect x="74.0993%" y="181" width="5.9255%" height="15" fill="rgb(246,228,12)"/><text x="74.3493%" y="191.50">metadata..</text></g><g><title>metadata_register_crate (966,410 samples, 2.15%)</title><rect x="77.8742%" y="165" width="2.1506%" height="15" fill="rgb(213,55,15)"/><text x="78.1242%" y="175.50">m..</text></g><g><title>metadata_register_crate (75,840 samples, 0.17%)</title><rect x="79.8561%" y="149" width="0.1688%" height="15" fill="rgb(209,9,3)"/><text x="80.1061%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (115,982 samples, 0.26%)</title><rect x="80.0357%" y="213" width="0.2581%" height="15" fill="rgb(230,59,30)"/><text x="80.2857%" y="223.50"></text></g><g><title>finalize_macro_resolutions (341,073 samples, 0.76%)</title><rect x="80.3655%" y="197" width="0.7590%" height="15" fill="rgb(209,121,21)"/><text x="80.6155%" y="207.50"></text></g><g><title>late_resolve_crate (1,420,726 samples, 3.16%)</title><rect x="81.1245%" y="197" width="3.1616%" height="15" fill="rgb(220,109,13)"/><text x="81.3745%" y="207.50">lat..</text></g><g><title>configure_and_expand (14,790,496 samples, 32.91%)</title><rect x="51.4595%" y="229" width="32.9140%" height="15" fill="rgb(232,18,1)"/><text x="51.7095%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,833,321 samples, 4.08%)</title><rect x="80.2938%" y="213" width="4.0798%" height="15" fill="rgb(215,41,42)"/><text x="80.5438%" y="223.50">reso..</text></g><g><title>drop_ast (55,251 samples, 0.12%)</title><rect x="84.3736%" y="229" width="0.1230%" height="15" fill="rgb(224,123,36)"/><text x="84.6236%" y="239.50"></text></g><g><title>early_lint_checks (141,601 samples, 0.32%)</title><rect x="84.5376%" y="229" width="0.3151%" height="15" fill="rgb(240,125,3)"/><text x="84.7876%" y="239.50"></text></g><g><title>free_global_ctxt (2,411,667 samples, 5.37%)</title><rect x="84.8527%" y="229" width="5.3668%" height="15" fill="rgb(205,98,50)"/><text x="85.1027%" y="239.50">free_gl..</text></g><g><title>crate_hash (145,533 samples, 0.32%)</title><rect x="91.0143%" y="213" width="0.3239%" height="15" fill="rgb(205,185,37)"/><text x="91.2643%" y="223.50"></text></g><g><title>generate_crate_metadata (641,757 samples, 1.43%)</title><rect x="90.2195%" y="229" width="1.4281%" height="15" fill="rgb(238,207,15)"/><text x="90.4695%" y="239.50"></text></g><g><title>hir_lowering (709,908 samples, 1.58%)</title><rect x="91.6476%" y="229" width="1.5798%" height="15" fill="rgb(213,199,42)"/><text x="91.8976%" y="239.50"></text></g><g><title>parse_crate (1,378,305 samples, 3.07%)</title><rect x="93.3232%" y="229" width="3.0672%" height="15" fill="rgb(235,201,11)"/><text x="93.5732%" y="239.50">par..</text></g><g><title>prepare_outputs (299,084 samples, 0.67%)</title><rect x="96.4120%" y="229" width="0.6656%" height="15" fill="rgb(207,46,11)"/><text x="96.6620%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (649,228 samples, 1.44%)</title><rect x="97.0776%" y="229" width="1.4448%" height="15" fill="rgb(241,35,35)"/><text x="97.3276%" y="239.50"></text></g><g><title>setup_global_ctxt (131,881 samples, 0.29%)</title><rect x="98.5631%" y="229" width="0.2935%" height="15" fill="rgb(243,32,47)"/><text x="98.8131%" y="239.50"></text></g><g><title>all (44,936,733 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (44,936,733 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (513,816 samples, 1.14%)</title><rect x="98.8566%" y="229" width="1.1434%" height="15" fill="rgb(243,110,44)"/><text x="99.1066%" y="239.50"></text></g></svg></svg>