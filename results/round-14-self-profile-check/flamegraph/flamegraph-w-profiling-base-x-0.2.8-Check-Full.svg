<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (168,162 samples, 0.16%)</title><rect x="9.0296%" y="197" width="0.1570%" height="15" fill="rgb(227,0,7)"/><text x="9.2796%" y="207.50"></text></g><g><title>param_env (357,215 samples, 0.33%)</title><rect x="10.2908%" y="165" width="0.3335%" height="15" fill="rgb(217,0,24)"/><text x="10.5408%" y="175.50"></text></g><g><title>item_attrs (458,554 samples, 0.43%)</title><rect x="11.0310%" y="133" width="0.4282%" height="15" fill="rgb(221,193,54)"/><text x="11.2810%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (446,374 samples, 0.42%)</title><rect x="11.0424%" y="117" width="0.4168%" height="15" fill="rgb(248,212,6)"/><text x="11.2924%" y="127.50"></text></g><g><title>codegen_fn_attrs (587,826 samples, 0.55%)</title><rect x="10.9281%" y="149" width="0.5489%" height="15" fill="rgb(208,68,35)"/><text x="11.1781%" y="159.50"></text></g><g><title>is_copy_raw (174,543 samples, 0.16%)</title><rect x="13.1015%" y="133" width="0.1630%" height="15" fill="rgb(232,128,0)"/><text x="13.3515%" y="143.50"></text></g><g><title>evaluate_obligation (144,191 samples, 0.13%)</title><rect x="13.1299%" y="117" width="0.1346%" height="15" fill="rgb(207,160,47)"/><text x="13.3799%" y="127.50"></text></g><g><title>param_env (251,322 samples, 0.23%)</title><rect x="13.4115%" y="85" width="0.2347%" height="15" fill="rgb(228,23,34)"/><text x="13.6615%" y="95.50"></text></g><g><title>predicates_of (242,882 samples, 0.23%)</title><rect x="13.4194%" y="69" width="0.2268%" height="15" fill="rgb(218,30,26)"/><text x="13.6694%" y="79.50"></text></g><g><title>predicates_defined_on (238,582 samples, 0.22%)</title><rect x="13.4234%" y="53" width="0.2228%" height="15" fill="rgb(220,122,19)"/><text x="13.6734%" y="63.50"></text></g><g><title>inferred_outlives_of (233,732 samples, 0.22%)</title><rect x="13.4280%" y="37" width="0.2182%" height="15" fill="rgb(250,228,42)"/><text x="13.6780%" y="47.50"></text></g><g><title>adt_drop_tys (304,464 samples, 0.28%)</title><rect x="13.3629%" y="101" width="0.2843%" height="15" fill="rgb(240,193,28)"/><text x="13.6129%" y="111.50"></text></g><g><title>adt_drop_tys (407,094 samples, 0.38%)</title><rect x="13.3462%" y="117" width="0.3801%" height="15" fill="rgb(216,20,37)"/><text x="13.5962%" y="127.50"></text></g><g><title>needs_drop_raw (1,117,103 samples, 1.04%)</title><rect x="13.2668%" y="133" width="1.0430%" height="15" fill="rgb(206,188,39)"/><text x="13.5168%" y="143.50"></text></g><g><title>is_copy_raw (624,989 samples, 0.58%)</title><rect x="13.7263%" y="117" width="0.5836%" height="15" fill="rgb(217,207,13)"/><text x="13.9763%" y="127.50"></text></g><g><title>evaluate_obligation (502,376 samples, 0.47%)</title><rect x="13.8408%" y="101" width="0.4691%" height="15" fill="rgb(231,73,38)"/><text x="14.0908%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (275,472 samples, 0.26%)</title><rect x="14.4736%" y="117" width="0.2572%" height="15" fill="rgb(225,20,46)"/><text x="14.7236%" y="127.50"></text></g><g><title>impl_parent (202,812 samples, 0.19%)</title><rect x="15.0710%" y="101" width="0.1894%" height="15" fill="rgb(210,31,41)"/><text x="15.3210%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (134,871 samples, 0.13%)</title><rect x="15.1345%" y="85" width="0.1259%" height="15" fill="rgb(221,200,47)"/><text x="15.3845%" y="95.50"></text></g><g><title>specialization_graph_of (990,252 samples, 0.92%)</title><rect x="14.7555%" y="117" width="0.9246%" height="15" fill="rgb(226,26,5)"/><text x="15.0055%" y="127.50"></text></g><g><title>impl_trait_ref (449,506 samples, 0.42%)</title><rect x="15.2604%" y="101" width="0.4197%" height="15" fill="rgb(249,33,26)"/><text x="15.5104%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (380,855 samples, 0.36%)</title><rect x="15.3245%" y="85" width="0.3556%" height="15" fill="rgb(235,183,28)"/><text x="15.5745%" y="95.50"></text></g><g><title>resolve_instance (1,571,139 samples, 1.47%)</title><rect x="14.3099%" y="133" width="1.4670%" height="15" fill="rgb(221,5,38)"/><text x="14.5599%" y="143.50"></text></g><g><title>thir_body (641,685 samples, 0.60%)</title><rect x="15.7952%" y="133" width="0.5991%" height="15" fill="rgb(247,18,42)"/><text x="16.0452%" y="143.50"></text></g><g><title>mir_const (7,128,396 samples, 6.66%)</title><rect x="9.7860%" y="181" width="6.6558%" height="15" fill="rgb(241,131,45)"/><text x="10.0360%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (6,230,506 samples, 5.82%)</title><rect x="10.6243%" y="165" width="5.8174%" height="15" fill="rgb(249,31,29)"/><text x="10.8743%" y="175.50">unsafet..</text></g><g><title>mir_built (5,317,386 samples, 4.96%)</title><rect x="11.4769%" y="149" width="4.9649%" height="15" fill="rgb(225,111,53)"/><text x="11.7269%" y="159.50">mir_bu..</text></g><g><title>mir_promoted (7,756,986 samples, 7.24%)</title><rect x="9.2965%" y="197" width="7.2427%" height="15" fill="rgb(238,160,17)"/><text x="9.5465%" y="207.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (281,014 samples, 0.26%)</title><rect x="16.5397%" y="197" width="0.2624%" height="15" fill="rgb(214,148,48)"/><text x="16.7897%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (750,887 samples, 0.70%)</title><rect x="16.8021%" y="197" width="0.7011%" height="15" fill="rgb(232,36,49)"/><text x="17.0521%" y="207.50"></text></g><g><title>normalize_projection_ty (367,595 samples, 0.34%)</title><rect x="17.1600%" y="181" width="0.3432%" height="15" fill="rgb(209,103,24)"/><text x="17.4100%" y="191.50"></text></g><g><title>type_op_normalize_predicate (787,056 samples, 0.73%)</title><rect x="17.5032%" y="197" width="0.7349%" height="15" fill="rgb(229,88,8)"/><text x="17.7532%" y="207.50"></text></g><g><title>normalize_projection_ty (254,232 samples, 0.24%)</title><rect x="18.0007%" y="181" width="0.2374%" height="15" fill="rgb(213,181,19)"/><text x="18.2507%" y="191.50"></text></g><g><title>type_op_normalize_ty (246,422 samples, 0.23%)</title><rect x="18.2381%" y="197" width="0.2301%" height="15" fill="rgb(254,191,54)"/><text x="18.4881%" y="207.50"></text></g><g><title>type_op_prove_predicate (3,016,711 samples, 2.82%)</title><rect x="18.4682%" y="197" width="2.8167%" height="15" fill="rgb(241,83,37)"/><text x="18.7182%" y="207.50">ty..</text></g><g><title>MIR_borrow_checking (21,550,908 samples, 20.12%)</title><rect x="1.1675%" y="229" width="20.1222%" height="15" fill="rgb(233,36,39)"/><text x="1.4175%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,488,977 samples, 20.06%)</title><rect x="1.2253%" y="213" width="20.0643%" height="15" fill="rgb(226,3,54)"/><text x="1.4753%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (138,452 samples, 0.13%)</title><rect x="21.2896%" y="229" width="0.1293%" height="15" fill="rgb(245,192,40)"/><text x="21.5396%" y="239.50"></text></g><g><title>hir_module_items (239,484 samples, 0.22%)</title><rect x="21.4189%" y="229" width="0.2236%" height="15" fill="rgb(238,167,29)"/><text x="21.6689%" y="239.50"></text></g><g><title>get_lang_items (120,962 samples, 0.11%)</title><rect x="22.0818%" y="181" width="0.1129%" height="15" fill="rgb(232,182,51)"/><text x="22.3318%" y="191.50"></text></g><g><title>should_inherit_track_caller (237,744 samples, 0.22%)</title><rect x="22.1947%" y="181" width="0.2220%" height="15" fill="rgb(231,60,39)"/><text x="22.4447%" y="191.50"></text></g><g><title>codegen_fn_attrs (528,487 samples, 0.49%)</title><rect x="21.9554%" y="197" width="0.4935%" height="15" fill="rgb(208,69,12)"/><text x="22.2054%" y="207.50"></text></g><g><title>check_mod_attrs (815,290 samples, 0.76%)</title><rect x="21.6879%" y="213" width="0.7612%" height="15" fill="rgb(235,93,37)"/><text x="21.9379%" y="223.50"></text></g><g><title>check_mod_const_bodies (145,523 samples, 0.14%)</title><rect x="22.4491%" y="213" width="0.1359%" height="15" fill="rgb(213,116,39)"/><text x="22.6991%" y="223.50"></text></g><g><title>lint_levels (152,272 samples, 0.14%)</title><rect x="22.8779%" y="197" width="0.1422%" height="15" fill="rgb(222,207,29)"/><text x="23.1279%" y="207.50"></text></g><g><title>lookup_deprecation_entry (206,682 samples, 0.19%)</title><rect x="23.0201%" y="197" width="0.1930%" height="15" fill="rgb(206,96,30)"/><text x="23.2701%" y="207.50"></text></g><g><title>stability_index (130,222 samples, 0.12%)</title><rect x="23.0914%" y="181" width="0.1216%" height="15" fill="rgb(218,138,4)"/><text x="23.3414%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (685,446 samples, 0.64%)</title><rect x="22.6919%" y="213" width="0.6400%" height="15" fill="rgb(250,191,14)"/><text x="22.9419%" y="223.50"></text></g><g><title>misc_checking_1 (1,876,701 samples, 1.75%)</title><rect x="21.6429%" y="229" width="1.7523%" height="15" fill="rgb(239,60,40)"/><text x="21.8929%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (346,434 samples, 0.32%)</title><rect x="23.3968%" y="213" width="0.3235%" height="15" fill="rgb(206,27,48)"/><text x="23.6468%" y="223.50"></text></g><g><title>check_mod_liveness (282,864 samples, 0.26%)</title><rect x="23.4562%" y="197" width="0.2641%" height="15" fill="rgb(225,35,8)"/><text x="23.7062%" y="207.50"></text></g><g><title>misc_checking_2 (814,069 samples, 0.76%)</title><rect x="23.3952%" y="229" width="0.7601%" height="15" fill="rgb(250,213,24)"/><text x="23.6452%" y="239.50"></text></g><g><title>match_checking (465,875 samples, 0.43%)</title><rect x="23.7203%" y="213" width="0.4350%" height="15" fill="rgb(247,123,22)"/><text x="23.9703%" y="223.50"></text></g><g><title>check_match (445,883 samples, 0.42%)</title><rect x="23.7390%" y="197" width="0.4163%" height="15" fill="rgb(231,138,38)"/><text x="23.9890%" y="207.50"></text></g><g><title>check_private_in_public (112,241 samples, 0.10%)</title><rect x="24.1641%" y="213" width="0.1048%" height="15" fill="rgb(231,145,46)"/><text x="24.4141%" y="223.50"></text></g><g><title>death_checking (206,242 samples, 0.19%)</title><rect x="24.2689%" y="213" width="0.1926%" height="15" fill="rgb(251,118,11)"/><text x="24.5189%" y="223.50"></text></g><g><title>eval_to_const_value_raw (131,222 samples, 0.12%)</title><rect x="25.0017%" y="181" width="0.1225%" height="15" fill="rgb(217,147,25)"/><text x="25.2517%" y="191.50"></text></g><g><title>eval_to_const_value_raw (122,372 samples, 0.11%)</title><rect x="25.0100%" y="165" width="0.1143%" height="15" fill="rgb(247,81,37)"/><text x="25.2600%" y="175.50"></text></g><g><title>eval_to_allocation_raw (116,761 samples, 0.11%)</title><rect x="25.0152%" y="149" width="0.1090%" height="15" fill="rgb(209,12,38)"/><text x="25.2652%" y="159.50"></text></g><g><title>param_env (158,941 samples, 0.15%)</title><rect x="25.1242%" y="181" width="0.1484%" height="15" fill="rgb(227,1,9)"/><text x="25.3742%" y="191.50"></text></g><g><title>crate_lints (1,940,451 samples, 1.81%)</title><rect x="24.4629%" y="197" width="1.8118%" height="15" fill="rgb(248,47,43)"/><text x="24.7129%" y="207.50">c..</text></g><g><title>type_of (1,063,133 samples, 0.99%)</title><rect x="25.2821%" y="181" width="0.9927%" height="15" fill="rgb(221,10,30)"/><text x="25.5321%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (830,228 samples, 0.78%)</title><rect x="25.4996%" y="165" width="0.7752%" height="15" fill="rgb(210,229,1)"/><text x="25.7496%" y="175.50"></text></g><g><title>lint_checking (2,210,304 samples, 2.06%)</title><rect x="24.4614%" y="213" width="2.0638%" height="15" fill="rgb(222,148,37)"/><text x="24.7114%" y="223.50">l..</text></g><g><title>module_lints (268,233 samples, 0.25%)</title><rect x="26.2747%" y="197" width="0.2505%" height="15" fill="rgb(234,67,33)"/><text x="26.5247%" y="207.50"></text></g><g><title>lint_mod (262,543 samples, 0.25%)</title><rect x="26.2801%" y="181" width="0.2451%" height="15" fill="rgb(247,98,35)"/><text x="26.5301%" y="191.50"></text></g><g><title>privacy_access_levels (112,931 samples, 0.11%)</title><rect x="26.5252%" y="213" width="0.1054%" height="15" fill="rgb(247,138,52)"/><text x="26.7752%" y="223.50"></text></g><g><title>privacy_checking_modules (462,505 samples, 0.43%)</title><rect x="26.6306%" y="213" width="0.4318%" height="15" fill="rgb(213,79,30)"/><text x="26.8806%" y="223.50"></text></g><g><title>check_mod_privacy (458,785 samples, 0.43%)</title><rect x="26.6341%" y="197" width="0.4284%" height="15" fill="rgb(246,177,23)"/><text x="26.8841%" y="207.50"></text></g><g><title>misc_checking_3 (3,123,574 samples, 2.92%)</title><rect x="24.1553%" y="229" width="2.9165%" height="15" fill="rgb(230,62,27)"/><text x="24.4053%" y="239.50">mi..</text></g><g><title>impl_parent (982,691 samples, 0.92%)</title><rect x="28.5674%" y="165" width="0.9175%" height="15" fill="rgb(216,154,8)"/><text x="28.8174%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (642,848 samples, 0.60%)</title><rect x="28.8848%" y="149" width="0.6002%" height="15" fill="rgb(244,35,45)"/><text x="29.1348%" y="159.50"></text></g><g><title>impl_trait_ref (3,189,754 samples, 2.98%)</title><rect x="29.4850%" y="165" width="2.9783%" height="15" fill="rgb(251,115,12)"/><text x="29.7350%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,846,140 samples, 2.66%)</title><rect x="29.8058%" y="149" width="2.6575%" height="15" fill="rgb(240,54,50)"/><text x="30.0558%" y="159.50">me..</text></g><g><title>coherent_trait (6,126,129 samples, 5.72%)</title><rect x="27.1325%" y="197" width="5.7200%" height="15" fill="rgb(233,84,52)"/><text x="27.3825%" y="207.50">coheren..</text></g><g><title>specialization_graph_of (6,111,968 samples, 5.71%)</title><rect x="27.1457%" y="181" width="5.7068%" height="15" fill="rgb(207,117,47)"/><text x="27.3957%" y="191.50">special..</text></g><g><title>trait_impls_of (415,113 samples, 0.39%)</title><rect x="32.4649%" y="165" width="0.3876%" height="15" fill="rgb(249,43,39)"/><text x="32.7149%" y="175.50"></text></g><g><title>implementations_of_trait (114,592 samples, 0.11%)</title><rect x="32.7455%" y="149" width="0.1070%" height="15" fill="rgb(209,38,44)"/><text x="32.9955%" y="159.50"></text></g><g><title>coherence_checking (6,193,679 samples, 5.78%)</title><rect x="27.1169%" y="213" width="5.7831%" height="15" fill="rgb(236,212,23)"/><text x="27.3669%" y="223.50">coheren..</text></g><g><title>associated_item (748,258 samples, 0.70%)</title><rect x="42.6371%" y="149" width="0.6987%" height="15" fill="rgb(242,79,21)"/><text x="42.8871%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (592,427 samples, 0.55%)</title><rect x="42.7826%" y="133" width="0.5532%" height="15" fill="rgb(211,96,35)"/><text x="43.0326%" y="143.50"></text></g><g><title>associated_items (1,036,591 samples, 0.97%)</title><rect x="42.4011%" y="165" width="0.9679%" height="15" fill="rgb(253,215,40)"/><text x="42.6511%" y="175.50"></text></g><g><title>adt_dtorck_constraint (119,662 samples, 0.11%)</title><rect x="43.5908%" y="133" width="0.1117%" height="15" fill="rgb(211,81,21)"/><text x="43.8408%" y="143.50"></text></g><g><title>dropck_outlives (313,214 samples, 0.29%)</title><rect x="43.4343%" y="165" width="0.2924%" height="15" fill="rgb(208,190,38)"/><text x="43.6843%" y="175.50"></text></g><g><title>adt_dtorck_constraint (188,623 samples, 0.18%)</title><rect x="43.5507%" y="149" width="0.1761%" height="15" fill="rgb(235,213,38)"/><text x="43.8007%" y="159.50"></text></g><g><title>generics_of (412,633 samples, 0.39%)</title><rect x="45.8820%" y="149" width="0.3853%" height="15" fill="rgb(237,122,38)"/><text x="46.1320%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (322,293 samples, 0.30%)</title><rect x="45.9664%" y="133" width="0.3009%" height="15" fill="rgb(244,218,35)"/><text x="46.2164%" y="143.50"></text></g><g><title>impl_trait_ref (581,231 samples, 0.54%)</title><rect x="46.3845%" y="149" width="0.5427%" height="15" fill="rgb(240,68,47)"/><text x="46.6345%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (491,988 samples, 0.46%)</title><rect x="46.4679%" y="133" width="0.4594%" height="15" fill="rgb(210,16,53)"/><text x="46.7179%" y="143.50"></text></g><g><title>predicates_of (449,594 samples, 0.42%)</title><rect x="46.9684%" y="149" width="0.4198%" height="15" fill="rgb(235,124,12)"/><text x="47.2184%" y="159.50"></text></g><g><title>predicates_defined_on (262,522 samples, 0.25%)</title><rect x="47.1431%" y="133" width="0.2451%" height="15" fill="rgb(224,169,11)"/><text x="47.3931%" y="143.50"></text></g><g><title>specializes (1,000,992 samples, 0.93%)</title><rect x="47.3882%" y="149" width="0.9346%" height="15" fill="rgb(250,166,2)"/><text x="47.6382%" y="159.50"></text></g><g><title>param_env (617,753 samples, 0.58%)</title><rect x="47.7460%" y="133" width="0.5768%" height="15" fill="rgb(242,216,29)"/><text x="47.9960%" y="143.50"></text></g><g><title>def_span (277,300 samples, 0.26%)</title><rect x="48.0639%" y="117" width="0.2589%" height="15" fill="rgb(230,116,27)"/><text x="48.3139%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (249,160 samples, 0.23%)</title><rect x="48.0902%" y="101" width="0.2326%" height="15" fill="rgb(228,99,48)"/><text x="48.3402%" y="111.50"></text></g><g><title>trait_impls_of (655,337 samples, 0.61%)</title><rect x="48.3414%" y="149" width="0.6119%" height="15" fill="rgb(253,11,6)"/><text x="48.5914%" y="159.50"></text></g><g><title>implementations_of_trait (271,702 samples, 0.25%)</title><rect x="48.6996%" y="133" width="0.2537%" height="15" fill="rgb(247,143,39)"/><text x="48.9496%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (189,142 samples, 0.18%)</title><rect x="48.7767%" y="117" width="0.1766%" height="15" fill="rgb(236,97,10)"/><text x="49.0267%" y="127.50"></text></g><g><title>evaluate_obligation (5,614,617 samples, 5.24%)</title><rect x="43.7268%" y="165" width="5.2424%" height="15" fill="rgb(233,208,19)"/><text x="43.9768%" y="175.50">evalua..</text></g><g><title>fn_sig (136,551 samples, 0.13%)</title><rect x="48.9937%" y="165" width="0.1275%" height="15" fill="rgb(216,164,2)"/><text x="49.2437%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (117,631 samples, 0.11%)</title><rect x="49.0113%" y="149" width="0.1098%" height="15" fill="rgb(220,129,5)"/><text x="49.2613%" y="159.50"></text></g><g><title>generics_of (122,922 samples, 0.11%)</title><rect x="49.1212%" y="165" width="0.1148%" height="15" fill="rgb(242,17,10)"/><text x="49.3712%" y="175.50"></text></g><g><title>impl_item_implementor_ids (145,781 samples, 0.14%)</title><rect x="49.2359%" y="165" width="0.1361%" height="15" fill="rgb(242,107,0)"/><text x="49.4859%" y="175.50"></text></g><g><title>associated_items (129,551 samples, 0.12%)</title><rect x="49.2511%" y="149" width="0.1210%" height="15" fill="rgb(251,28,31)"/><text x="49.5011%" y="159.50"></text></g><g><title>item_attrs (145,090 samples, 0.14%)</title><rect x="49.4732%" y="165" width="0.1355%" height="15" fill="rgb(233,223,10)"/><text x="49.7232%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (139,690 samples, 0.13%)</title><rect x="49.4783%" y="149" width="0.1304%" height="15" fill="rgb(215,21,27)"/><text x="49.7283%" y="159.50"></text></g><g><title>evaluate_obligation (213,554 samples, 0.20%)</title><rect x="49.8538%" y="149" width="0.1994%" height="15" fill="rgb(232,23,21)"/><text x="50.1038%" y="159.50"></text></g><g><title>method_autoderef_steps (423,416 samples, 0.40%)</title><rect x="49.6810%" y="165" width="0.3953%" height="15" fill="rgb(244,5,23)"/><text x="49.9310%" y="175.50"></text></g><g><title>explicit_predicates_of (129,491 samples, 0.12%)</title><rect x="50.3348%" y="133" width="0.1209%" height="15" fill="rgb(226,81,46)"/><text x="50.5848%" y="143.50"></text></g><g><title>predicates_of (636,001 samples, 0.59%)</title><rect x="50.1338%" y="165" width="0.5938%" height="15" fill="rgb(247,70,30)"/><text x="50.3838%" y="175.50"></text></g><g><title>predicates_defined_on (515,917 samples, 0.48%)</title><rect x="50.2459%" y="149" width="0.4817%" height="15" fill="rgb(212,68,19)"/><text x="50.4959%" y="159.50"></text></g><g><title>inferred_outlives_of (291,273 samples, 0.27%)</title><rect x="50.4557%" y="133" width="0.2720%" height="15" fill="rgb(240,187,13)"/><text x="50.7057%" y="143.50"></text></g><g><title>dropck_outlives (266,525 samples, 0.25%)</title><rect x="56.9517%" y="149" width="0.2489%" height="15" fill="rgb(223,113,26)"/><text x="57.2017%" y="159.50"></text></g><g><title>generics_of (155,040 samples, 0.14%)</title><rect x="58.7816%" y="133" width="0.1448%" height="15" fill="rgb(206,192,2)"/><text x="59.0316%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (108,240 samples, 0.10%)</title><rect x="58.8253%" y="117" width="0.1011%" height="15" fill="rgb(241,108,4)"/><text x="59.0753%" y="127.50"></text></g><g><title>impl_trait_ref (216,434 samples, 0.20%)</title><rect x="58.9561%" y="133" width="0.2021%" height="15" fill="rgb(247,173,49)"/><text x="59.2061%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (169,503 samples, 0.16%)</title><rect x="58.9999%" y="117" width="0.1583%" height="15" fill="rgb(224,114,35)"/><text x="59.2499%" y="127.50"></text></g><g><title>specializes (219,962 samples, 0.21%)</title><rect x="59.2616%" y="133" width="0.2054%" height="15" fill="rgb(245,159,27)"/><text x="59.5116%" y="143.50"></text></g><g><title>param_env (124,680 samples, 0.12%)</title><rect x="59.3506%" y="117" width="0.1164%" height="15" fill="rgb(245,172,44)"/><text x="59.6006%" y="127.50"></text></g><g><title>evaluate_obligation (2,506,893 samples, 2.34%)</title><rect x="57.2005%" y="149" width="2.3407%" height="15" fill="rgb(236,23,11)"/><text x="57.4505%" y="159.50">e..</text></g><g><title>method_autoderef_steps (431,946 samples, 0.40%)</title><rect x="59.8622%" y="149" width="0.4033%" height="15" fill="rgb(205,117,38)"/><text x="60.1122%" y="159.50"></text></g><g><title>evaluate_obligation (193,843 samples, 0.18%)</title><rect x="60.0845%" y="133" width="0.1810%" height="15" fill="rgb(237,72,25)"/><text x="60.3345%" y="143.50"></text></g><g><title>predicates_of (121,102 samples, 0.11%)</title><rect x="60.2777%" y="149" width="0.1131%" height="15" fill="rgb(244,70,9)"/><text x="60.5277%" y="159.50"></text></g><g><title>typeck (10,282,664 samples, 9.60%)</title><rect x="50.8539%" y="165" width="9.6010%" height="15" fill="rgb(217,125,39)"/><text x="51.1039%" y="175.50">typeck</text></g><g><title>item_bodies_checking (29,520,076 samples, 27.56%)</title><rect x="32.9324%" y="213" width="27.5630%" height="15" fill="rgb(235,36,10)"/><text x="33.1824%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,516,646 samples, 27.56%)</title><rect x="32.9356%" y="197" width="27.5598%" height="15" fill="rgb(251,123,47)"/><text x="33.1856%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (29,479,815 samples, 27.53%)</title><rect x="32.9699%" y="181" width="27.5254%" height="15" fill="rgb(221,13,13)"/><text x="33.2199%" y="191.50">typeck</text></g><g><title>impl_trait_ref (161,783 samples, 0.15%)</title><rect x="61.1861%" y="133" width="0.1511%" height="15" fill="rgb(238,131,9)"/><text x="61.4361%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (141,873 samples, 0.13%)</title><rect x="61.2047%" y="117" width="0.1325%" height="15" fill="rgb(211,50,8)"/><text x="61.4547%" y="127.50"></text></g><g><title>adt_destructor (331,144 samples, 0.31%)</title><rect x="61.0535%" y="181" width="0.3092%" height="15" fill="rgb(245,182,24)"/><text x="61.3035%" y="191.50"></text></g><g><title>coherent_trait (326,284 samples, 0.30%)</title><rect x="61.0581%" y="165" width="0.3047%" height="15" fill="rgb(242,14,37)"/><text x="61.3081%" y="175.50"></text></g><g><title>specialization_graph_of (324,404 samples, 0.30%)</title><rect x="61.0598%" y="149" width="0.3029%" height="15" fill="rgb(246,228,12)"/><text x="61.3098%" y="159.50"></text></g><g><title>adt_sized_constraint (114,411 samples, 0.11%)</title><rect x="61.3627%" y="181" width="0.1068%" height="15" fill="rgb(213,55,15)"/><text x="61.6127%" y="191.50"></text></g><g><title>item_types_checking (1,172,053 samples, 1.09%)</title><rect x="60.4954%" y="213" width="1.0944%" height="15" fill="rgb(209,9,3)"/><text x="60.7454%" y="223.50"></text></g><g><title>check_mod_item_types (1,162,933 samples, 1.09%)</title><rect x="60.5039%" y="197" width="1.0858%" height="15" fill="rgb(230,59,30)"/><text x="60.7539%" y="207.50"></text></g><g><title>fn_sig (337,103 samples, 0.31%)</title><rect x="61.8572%" y="181" width="0.3148%" height="15" fill="rgb(209,121,21)"/><text x="62.1072%" y="191.50"></text></g><g><title>resolve_lifetimes (160,631 samples, 0.15%)</title><rect x="62.3098%" y="149" width="0.1500%" height="15" fill="rgb(220,109,13)"/><text x="62.5598%" y="159.50"></text></g><g><title>is_late_bound_map (190,912 samples, 0.18%)</title><rect x="62.2913%" y="165" width="0.1783%" height="15" fill="rgb(232,18,1)"/><text x="62.5413%" y="175.50"></text></g><g><title>named_region_map (174,230 samples, 0.16%)</title><rect x="62.4696%" y="165" width="0.1627%" height="15" fill="rgb(215,41,42)"/><text x="62.7196%" y="175.50"></text></g><g><title>resolve_lifetimes (154,770 samples, 0.14%)</title><rect x="62.4878%" y="149" width="0.1445%" height="15" fill="rgb(224,123,36)"/><text x="62.7378%" y="159.50"></text></g><g><title>generics_of (508,525 samples, 0.47%)</title><rect x="62.1720%" y="181" width="0.4748%" height="15" fill="rgb(240,125,3)"/><text x="62.4220%" y="191.50"></text></g><g><title>item_bounds (121,112 samples, 0.11%)</title><rect x="62.6809%" y="181" width="0.1131%" height="15" fill="rgb(205,98,50)"/><text x="62.9309%" y="191.50"></text></g><g><title>explicit_predicates_of (282,774 samples, 0.26%)</title><rect x="62.8907%" y="149" width="0.2640%" height="15" fill="rgb(205,185,37)"/><text x="63.1407%" y="159.50"></text></g><g><title>trait_explicit_predicates_and_bounds (146,392 samples, 0.14%)</title><rect x="63.0180%" y="133" width="0.1367%" height="15" fill="rgb(238,207,15)"/><text x="63.2680%" y="143.50"></text></g><g><title>predicates_of (713,390 samples, 0.67%)</title><rect x="62.7940%" y="181" width="0.6661%" height="15" fill="rgb(213,199,42)"/><text x="63.0440%" y="191.50"></text></g><g><title>predicates_defined_on (673,608 samples, 0.63%)</title><rect x="62.8311%" y="165" width="0.6290%" height="15" fill="rgb(235,201,11)"/><text x="63.0811%" y="175.50"></text></g><g><title>inferred_outlives_of (327,004 samples, 0.31%)</title><rect x="63.1547%" y="149" width="0.3053%" height="15" fill="rgb(207,46,11)"/><text x="63.4047%" y="159.50"></text></g><g><title>inferred_outlives_crate (304,934 samples, 0.28%)</title><rect x="63.1753%" y="133" width="0.2847%" height="15" fill="rgb(241,35,35)"/><text x="63.4253%" y="143.50"></text></g><g><title>type_of (189,471 samples, 0.18%)</title><rect x="63.2831%" y="117" width="0.1769%" height="15" fill="rgb(243,32,47)"/><text x="63.5331%" y="127.50"></text></g><g><title>type_collecting (2,154,754 samples, 2.01%)</title><rect x="61.5915%" y="213" width="2.0119%" height="15" fill="rgb(247,202,23)"/><text x="61.8415%" y="223.50">t..</text></g><g><title>collect_mod_item_types (2,139,974 samples, 2.00%)</title><rect x="61.6053%" y="197" width="1.9981%" height="15" fill="rgb(219,102,11)"/><text x="61.8553%" y="207.50">c..</text></g><g><title>type_of (129,710 samples, 0.12%)</title><rect x="63.4823%" y="181" width="0.1211%" height="15" fill="rgb(243,110,44)"/><text x="63.7323%" y="191.50"></text></g><g><title>evaluate_obligation (232,754 samples, 0.22%)</title><rect x="64.2706%" y="181" width="0.2173%" height="15" fill="rgb(222,74,54)"/><text x="64.5206%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,225,544 samples, 1.14%)</title><rect x="63.6955%" y="197" width="1.1443%" height="15" fill="rgb(216,99,12)"/><text x="63.9455%" y="207.50"></text></g><g><title>region_scope_tree (164,442 samples, 0.15%)</title><rect x="64.6862%" y="181" width="0.1535%" height="15" fill="rgb(226,22,26)"/><text x="64.9362%" y="191.50"></text></g><g><title>evaluate_obligation (146,291 samples, 0.14%)</title><rect x="65.5232%" y="181" width="0.1366%" height="15" fill="rgb(217,163,10)"/><text x="65.7732%" y="191.50"></text></g><g><title>param_env (240,664 samples, 0.22%)</title><rect x="65.7722%" y="181" width="0.2247%" height="15" fill="rgb(213,25,53)"/><text x="66.0222%" y="191.50"></text></g><g><title>trait_impls_of (404,024 samples, 0.38%)</title><rect x="66.0888%" y="181" width="0.3772%" height="15" fill="rgb(252,105,26)"/><text x="66.3388%" y="191.50"></text></g><g><title>check_item_well_formed (1,794,720 samples, 1.68%)</title><rect x="64.8398%" y="197" width="1.6757%" height="15" fill="rgb(220,39,43)"/><text x="65.0898%" y="207.50"></text></g><g><title>evaluate_obligation (270,522 samples, 0.25%)</title><rect x="67.0394%" y="181" width="0.2526%" height="15" fill="rgb(229,68,48)"/><text x="67.2894%" y="191.50"></text></g><g><title>implied_outlives_bounds (246,822 samples, 0.23%)</title><rect x="67.2920%" y="181" width="0.2305%" height="15" fill="rgb(252,8,32)"/><text x="67.5420%" y="191.50"></text></g><g><title>param_env (120,050 samples, 0.11%)</title><rect x="67.5225%" y="181" width="0.1121%" height="15" fill="rgb(223,20,43)"/><text x="67.7725%" y="191.50"></text></g><g><title>analysis (71,637,451 samples, 66.89%)</title><rect x="0.8049%" y="245" width="66.8882%" height="15" fill="rgb(229,81,49)"/><text x="1.0549%" y="255.50">analysis</text></g><g><title>type_check_crate (43,505,541 samples, 40.62%)</title><rect x="27.0718%" y="229" width="40.6213%" height="15" fill="rgb(236,28,36)"/><text x="27.3218%" y="239.50">type_check_crate</text></g><g><title>wf_checking (4,376,808 samples, 4.09%)</title><rect x="63.6064%" y="213" width="4.0866%" height="15" fill="rgb(249,185,26)"/><text x="63.8564%" y="223.50">wf_c..</text></g><g><title>check_trait_item_well_formed (1,261,194 samples, 1.18%)</title><rect x="66.5155%" y="197" width="1.1776%" height="15" fill="rgb(249,174,33)"/><text x="66.7655%" y="207.50"></text></g><g><title>codegen_crate (545,946 samples, 0.51%)</title><rect x="67.7026%" y="245" width="0.5098%" height="15" fill="rgb(233,201,37)"/><text x="67.9526%" y="255.50"></text></g><g><title>AST_validation (171,102 samples, 0.16%)</title><rect x="68.4149%" y="229" width="0.1598%" height="15" fill="rgb(221,78,26)"/><text x="68.6649%" y="239.50"></text></g><g><title>metadata_load_macro (249,163 samples, 0.23%)</title><rect x="83.3883%" y="197" width="0.2326%" height="15" fill="rgb(250,127,30)"/><text x="83.6383%" y="207.50"></text></g><g><title>metadata_register_crate (2,618,509 samples, 2.44%)</title><rect x="83.6210%" y="197" width="2.4449%" height="15" fill="rgb(230,49,44)"/><text x="83.8710%" y="207.50">me..</text></g><g><title>metadata_register_crate (972,551 samples, 0.91%)</title><rect x="85.1578%" y="181" width="0.9081%" height="15" fill="rgb(229,67,23)"/><text x="85.4078%" y="191.50"></text></g><g><title>macro_expand_crate (18,836,739 samples, 17.59%)</title><rect x="68.7336%" y="229" width="17.5879%" height="15" fill="rgb(249,83,47)"/><text x="68.9836%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (18,819,688 samples, 17.57%)</title><rect x="68.7496%" y="213" width="17.5720%" height="15" fill="rgb(215,43,3)"/><text x="68.9996%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (273,835 samples, 0.26%)</title><rect x="86.0659%" y="197" width="0.2557%" height="15" fill="rgb(238,154,13)"/><text x="86.3159%" y="207.50"></text></g><g><title>late_resolve_crate (3,274,076 samples, 3.06%)</title><rect x="86.5417%" y="213" width="3.0570%" height="15" fill="rgb(219,56,2)"/><text x="86.7917%" y="223.50">lat..</text></g><g><title>configure_and_expand (23,045,195 samples, 21.52%)</title><rect x="68.2124%" y="245" width="21.5174%" height="15" fill="rgb(233,0,4)"/><text x="68.4624%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (3,544,259 samples, 3.31%)</title><rect x="86.4205%" y="229" width="3.3093%" height="15" fill="rgb(235,30,7)"/><text x="86.6705%" y="239.50">res..</text></g><g><title>drop_ast (240,523 samples, 0.22%)</title><rect x="89.7298%" y="245" width="0.2246%" height="15" fill="rgb(250,79,13)"/><text x="89.9798%" y="255.50"></text></g><g><title>early_lint_checks (881,260 samples, 0.82%)</title><rect x="89.9660%" y="245" width="0.8228%" height="15" fill="rgb(211,146,34)"/><text x="90.2160%" y="255.50"></text></g><g><title>free_global_ctxt (3,162,085 samples, 2.95%)</title><rect x="90.7888%" y="245" width="2.9525%" height="15" fill="rgb(228,22,38)"/><text x="91.0388%" y="255.50">fre..</text></g><g><title>generate_crate_metadata (670,637 samples, 0.63%)</title><rect x="93.7412%" y="245" width="0.6262%" height="15" fill="rgb(235,168,5)"/><text x="93.9912%" y="255.50"></text></g><g><title>hir_lowering (3,202,745 samples, 2.99%)</title><rect x="94.3674%" y="245" width="2.9904%" height="15" fill="rgb(221,155,16)"/><text x="94.6174%" y="255.50">hir..</text></g><g><title>parse_crate (1,182,913 samples, 1.10%)</title><rect x="97.4011%" y="245" width="1.1045%" height="15" fill="rgb(215,215,53)"/><text x="97.6511%" y="255.50"></text></g><g><title>prepare_outputs (334,443 samples, 0.31%)</title><rect x="98.5143%" y="245" width="0.3123%" height="15" fill="rgb(223,4,10)"/><text x="98.7643%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (795,689 samples, 0.74%)</title><rect x="98.8266%" y="245" width="0.7429%" height="15" fill="rgb(234,103,6)"/><text x="99.0766%" y="255.50"></text></g><g><title>setup_global_ctxt (132,502 samples, 0.12%)</title><rect x="99.5802%" y="245" width="0.1237%" height="15" fill="rgb(227,97,0)"/><text x="99.8302%" y="255.50"></text></g><g><title>all (107,100,345 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (107,100,345 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (317,054 samples, 0.30%)</title><rect x="99.7040%" y="245" width="0.2960%" height="15" fill="rgb(222,22,37)"/><text x="99.9540%" y="255.50"></text></g></svg></svg>