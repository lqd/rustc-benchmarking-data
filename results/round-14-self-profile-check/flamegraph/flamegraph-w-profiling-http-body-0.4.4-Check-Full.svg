<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (297,892 samples, 0.17%)</title><rect x="10.3612%" y="117" width="0.1665%" height="15" fill="rgb(227,0,7)"/><text x="10.6112%" y="127.50"></text></g><g><title>item_attrs (209,274 samples, 0.12%)</title><rect x="10.9189%" y="85" width="0.1169%" height="15" fill="rgb(217,0,24)"/><text x="11.1689%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (200,594 samples, 0.11%)</title><rect x="10.9238%" y="69" width="0.1121%" height="15" fill="rgb(221,193,54)"/><text x="11.1738%" y="79.50"></text></g><g><title>codegen_fn_attrs (325,066 samples, 0.18%)</title><rect x="10.8609%" y="101" width="0.1817%" height="15" fill="rgb(248,212,6)"/><text x="11.1109%" y="111.50"></text></g><g><title>is_copy_raw (1,546,178 samples, 0.86%)</title><rect x="12.9209%" y="69" width="0.8640%" height="15" fill="rgb(208,68,35)"/><text x="13.1709%" y="79.50"></text></g><g><title>evaluate_obligation (1,306,441 samples, 0.73%)</title><rect x="13.0549%" y="53" width="0.7301%" height="15" fill="rgb(232,128,0)"/><text x="13.3049%" y="63.50"></text></g><g><title>needs_drop_raw (1,878,981 samples, 1.05%)</title><rect x="12.7356%" y="85" width="1.0500%" height="15" fill="rgb(207,160,47)"/><text x="12.9856%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (668,971 samples, 0.37%)</title><rect x="13.9911%" y="69" width="0.3738%" height="15" fill="rgb(228,23,34)"/><text x="14.2411%" y="79.50"></text></g><g><title>impl_parent (618,818 samples, 0.35%)</title><rect x="14.8082%" y="53" width="0.3458%" height="15" fill="rgb(218,30,26)"/><text x="15.0582%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (249,304 samples, 0.14%)</title><rect x="15.0147%" y="37" width="0.1393%" height="15" fill="rgb(220,122,19)"/><text x="15.2647%" y="47.50"></text></g><g><title>specialization_graph_of (1,872,030 samples, 1.05%)</title><rect x="14.4461%" y="69" width="1.0461%" height="15" fill="rgb(250,228,42)"/><text x="14.6961%" y="79.50"></text></g><g><title>impl_trait_ref (605,204 samples, 0.34%)</title><rect x="15.1540%" y="53" width="0.3382%" height="15" fill="rgb(240,193,28)"/><text x="15.4040%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (443,394 samples, 0.25%)</title><rect x="15.2444%" y="37" width="0.2478%" height="15" fill="rgb(216,20,37)"/><text x="15.4944%" y="47.50"></text></g><g><title>resolve_instance (3,164,318 samples, 1.77%)</title><rect x="13.7856%" y="85" width="1.7683%" height="15" fill="rgb(206,188,39)"/><text x="14.0356%" y="95.50"></text></g><g><title>thir_body (1,027,597 samples, 0.57%)</title><rect x="15.5788%" y="85" width="0.5742%" height="15" fill="rgb(217,207,13)"/><text x="15.8288%" y="95.50"></text></g><g><title>mir_const (11,535,707 samples, 6.45%)</title><rect x="9.7568%" y="133" width="6.4464%" height="15" fill="rgb(231,73,38)"/><text x="10.0068%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (10,156,375 samples, 5.68%)</title><rect x="10.5276%" y="117" width="5.6756%" height="15" fill="rgb(225,20,46)"/><text x="10.7776%" y="127.50">unsafet..</text></g><g><title>mir_built (9,235,026 samples, 5.16%)</title><rect x="11.0425%" y="101" width="5.1607%" height="15" fill="rgb(210,31,41)"/><text x="11.2925%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (12,698,708 samples, 7.10%)</title><rect x="9.2020%" y="149" width="7.0963%" height="15" fill="rgb(221,200,47)"/><text x="9.4520%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (1,329,406 samples, 0.74%)</title><rect x="16.2983%" y="149" width="0.7429%" height="15" fill="rgb(226,26,5)"/><text x="16.5483%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (994,761 samples, 0.56%)</title><rect x="17.0412%" y="149" width="0.5559%" height="15" fill="rgb(249,33,26)"/><text x="17.2912%" y="159.50"></text></g><g><title>normalize_projection_ty (362,673 samples, 0.20%)</title><rect x="17.3944%" y="133" width="0.2027%" height="15" fill="rgb(235,183,28)"/><text x="17.6444%" y="143.50"></text></g><g><title>type_op_normalize_ty (713,809 samples, 0.40%)</title><rect x="17.6384%" y="149" width="0.3989%" height="15" fill="rgb(221,5,38)"/><text x="17.8884%" y="159.50"></text></g><g><title>normalize_projection_ty (441,167 samples, 0.25%)</title><rect x="17.7908%" y="133" width="0.2465%" height="15" fill="rgb(247,18,42)"/><text x="18.0408%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,538,664 samples, 1.98%)</title><rect x="18.0373%" y="149" width="1.9775%" height="15" fill="rgb(241,131,45)"/><text x="18.2873%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (34,639,235 samples, 19.36%)</title><rect x="0.6636%" y="181" width="19.3571%" height="15" fill="rgb(249,31,29)"/><text x="0.9136%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (34,433,322 samples, 19.24%)</title><rect x="0.7787%" y="165" width="19.2420%" height="15" fill="rgb(225,111,53)"/><text x="1.0287%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (201,822 samples, 0.11%)</title><rect x="20.0207%" y="181" width="0.1128%" height="15" fill="rgb(238,160,17)"/><text x="20.2707%" y="191.50"></text></g><g><title>hir_module_items (258,984 samples, 0.14%)</title><rect x="20.1335%" y="181" width="0.1447%" height="15" fill="rgb(214,148,48)"/><text x="20.3835%" y="191.50"></text></g><g><title>should_inherit_track_caller (249,483 samples, 0.14%)</title><rect x="20.5748%" y="133" width="0.1394%" height="15" fill="rgb(232,36,49)"/><text x="20.8248%" y="143.50"></text></g><g><title>codegen_fn_attrs (480,755 samples, 0.27%)</title><rect x="20.4562%" y="149" width="0.2687%" height="15" fill="rgb(209,103,24)"/><text x="20.7062%" y="159.50"></text></g><g><title>check_mod_attrs (767,379 samples, 0.43%)</title><rect x="20.2962%" y="165" width="0.4288%" height="15" fill="rgb(229,88,8)"/><text x="20.5462%" y="175.50"></text></g><g><title>lint_levels (314,664 samples, 0.18%)</title><rect x="21.0282%" y="149" width="0.1758%" height="15" fill="rgb(213,181,19)"/><text x="21.2782%" y="159.50"></text></g><g><title>lookup_deprecation_entry (203,811 samples, 0.11%)</title><rect x="21.2040%" y="149" width="0.1139%" height="15" fill="rgb(254,191,54)"/><text x="21.4540%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (871,601 samples, 0.49%)</title><rect x="20.8883%" y="165" width="0.4871%" height="15" fill="rgb(241,83,37)"/><text x="21.1383%" y="175.50"></text></g><g><title>misc_checking_1 (2,037,903 samples, 1.14%)</title><rect x="20.2785%" y="181" width="1.1388%" height="15" fill="rgb(233,36,39)"/><text x="20.5285%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (621,486 samples, 0.35%)</title><rect x="21.4182%" y="165" width="0.3473%" height="15" fill="rgb(226,3,54)"/><text x="21.6682%" y="175.50"></text></g><g><title>check_mod_liveness (507,585 samples, 0.28%)</title><rect x="21.4818%" y="149" width="0.2836%" height="15" fill="rgb(245,192,40)"/><text x="21.7318%" y="159.50"></text></g><g><title>misc_checking_2 (1,177,542 samples, 0.66%)</title><rect x="21.4173%" y="181" width="0.6580%" height="15" fill="rgb(238,167,29)"/><text x="21.6673%" y="191.50"></text></g><g><title>match_checking (554,466 samples, 0.31%)</title><rect x="21.7655%" y="165" width="0.3098%" height="15" fill="rgb(232,182,51)"/><text x="22.0155%" y="175.50"></text></g><g><title>check_match (506,115 samples, 0.28%)</title><rect x="21.7925%" y="149" width="0.2828%" height="15" fill="rgb(231,60,39)"/><text x="22.0425%" y="159.50"></text></g><g><title>check_private_in_public (357,304 samples, 0.20%)</title><rect x="22.0808%" y="165" width="0.1997%" height="15" fill="rgb(208,69,12)"/><text x="22.3308%" y="175.50"></text></g><g><title>death_checking (616,607 samples, 0.34%)</title><rect x="22.2805%" y="165" width="0.3446%" height="15" fill="rgb(235,93,37)"/><text x="22.5305%" y="175.50"></text></g><g><title>eval_to_const_value_raw (222,142 samples, 0.12%)</title><rect x="23.0617%" y="133" width="0.1241%" height="15" fill="rgb(213,116,39)"/><text x="23.3117%" y="143.50"></text></g><g><title>eval_to_const_value_raw (207,822 samples, 0.12%)</title><rect x="23.0697%" y="117" width="0.1161%" height="15" fill="rgb(222,207,29)"/><text x="23.3197%" y="127.50"></text></g><g><title>eval_to_allocation_raw (199,362 samples, 0.11%)</title><rect x="23.0745%" y="101" width="0.1114%" height="15" fill="rgb(206,96,30)"/><text x="23.3245%" y="111.50"></text></g><g><title>param_env (526,095 samples, 0.29%)</title><rect x="23.1859%" y="133" width="0.2940%" height="15" fill="rgb(218,138,4)"/><text x="23.4359%" y="143.50"></text></g><g><title>predicates_of (242,414 samples, 0.14%)</title><rect x="23.3444%" y="117" width="0.1355%" height="15" fill="rgb(250,191,14)"/><text x="23.5944%" y="127.50"></text></g><g><title>predicates_defined_on (189,343 samples, 0.11%)</title><rect x="23.3741%" y="101" width="0.1058%" height="15" fill="rgb(239,60,40)"/><text x="23.6241%" y="111.50"></text></g><g><title>crate_lints (2,661,840 samples, 1.49%)</title><rect x="22.6259%" y="149" width="1.4875%" height="15" fill="rgb(206,27,48)"/><text x="22.8759%" y="159.50"></text></g><g><title>type_of (1,130,991 samples, 0.63%)</title><rect x="23.4814%" y="133" width="0.6320%" height="15" fill="rgb(225,35,8)"/><text x="23.7314%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (888,539 samples, 0.50%)</title><rect x="23.6169%" y="117" width="0.4965%" height="15" fill="rgb(250,213,24)"/><text x="23.8669%" y="127.50"></text></g><g><title>lint_checking (3,055,715 samples, 1.71%)</title><rect x="22.6250%" y="165" width="1.7076%" height="15" fill="rgb(247,123,22)"/><text x="22.8750%" y="175.50"></text></g><g><title>module_lints (392,265 samples, 0.22%)</title><rect x="24.1134%" y="149" width="0.2192%" height="15" fill="rgb(231,138,38)"/><text x="24.3634%" y="159.50"></text></g><g><title>lint_mod (384,435 samples, 0.21%)</title><rect x="24.1178%" y="133" width="0.2148%" height="15" fill="rgb(231,145,46)"/><text x="24.3678%" y="143.50"></text></g><g><title>privacy_access_levels (458,455 samples, 0.26%)</title><rect x="24.3326%" y="165" width="0.2562%" height="15" fill="rgb(251,118,11)"/><text x="24.5826%" y="175.50"></text></g><g><title>privacy_checking_modules (1,551,977 samples, 0.87%)</title><rect x="24.5888%" y="165" width="0.8673%" height="15" fill="rgb(217,147,25)"/><text x="24.8388%" y="175.50"></text></g><g><title>check_mod_privacy (1,543,907 samples, 0.86%)</title><rect x="24.5933%" y="149" width="0.8628%" height="15" fill="rgb(247,81,37)"/><text x="24.8433%" y="159.50"></text></g><g><title>misc_checking_3 (6,066,198 samples, 3.39%)</title><rect x="22.0753%" y="181" width="3.3899%" height="15" fill="rgb(209,12,38)"/><text x="22.3253%" y="191.50">mis..</text></g><g><title>adt_destructor (313,073 samples, 0.17%)</title><rect x="25.5683%" y="133" width="0.1750%" height="15" fill="rgb(227,1,9)"/><text x="25.8183%" y="143.50"></text></g><g><title>coherent_trait (309,143 samples, 0.17%)</title><rect x="25.5705%" y="117" width="0.1728%" height="15" fill="rgb(248,47,43)"/><text x="25.8205%" y="127.50"></text></g><g><title>specialization_graph_of (307,903 samples, 0.17%)</title><rect x="25.5712%" y="101" width="0.1721%" height="15" fill="rgb(221,10,30)"/><text x="25.8212%" y="111.50"></text></g><g><title>impl_trait_ref (181,083 samples, 0.10%)</title><rect x="25.6420%" y="85" width="0.1012%" height="15" fill="rgb(210,229,1)"/><text x="25.8920%" y="95.50"></text></g><g><title>impl_parent (1,964,466 samples, 1.10%)</title><rect x="27.9293%" y="117" width="1.0978%" height="15" fill="rgb(222,148,37)"/><text x="28.1793%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,188,951 samples, 0.66%)</title><rect x="28.3627%" y="101" width="0.6644%" height="15" fill="rgb(234,67,33)"/><text x="28.6127%" y="111.50"></text></g><g><title>impl_trait_ref (4,618,178 samples, 2.58%)</title><rect x="29.0271%" y="117" width="2.5807%" height="15" fill="rgb(247,98,35)"/><text x="29.2771%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,827,238 samples, 2.14%)</title><rect x="29.4691%" y="101" width="2.1387%" height="15" fill="rgb(247,138,52)"/><text x="29.7191%" y="111.50">m..</text></g><g><title>trait_impls_of (658,168 samples, 0.37%)</title><rect x="31.6408%" y="117" width="0.3678%" height="15" fill="rgb(213,79,30)"/><text x="31.8908%" y="127.50"></text></g><g><title>implementations_of_trait (187,021 samples, 0.10%)</title><rect x="31.9041%" y="101" width="0.1045%" height="15" fill="rgb(246,177,23)"/><text x="32.1541%" y="111.50"></text></g><g><title>coherent_trait (11,571,530 samples, 6.47%)</title><rect x="25.5426%" y="149" width="6.4664%" height="15" fill="rgb(230,62,27)"/><text x="25.7926%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (10,985,384 samples, 6.14%)</title><rect x="25.8702%" y="133" width="6.1388%" height="15" fill="rgb(216,154,8)"/><text x="26.1202%" y="143.50">speciali..</text></g><g><title>orphan_check_crate (192,542 samples, 0.11%)</title><rect x="32.0364%" y="149" width="0.1076%" height="15" fill="rgb(244,35,45)"/><text x="32.2864%" y="159.50"></text></g><g><title>coherence_checking (11,847,363 samples, 6.62%)</title><rect x="25.5310%" y="165" width="6.6205%" height="15" fill="rgb(251,115,12)"/><text x="25.7810%" y="175.50">coherence..</text></g><g><title>associated_item (585,465 samples, 0.33%)</title><rect x="45.9336%" y="101" width="0.3272%" height="15" fill="rgb(240,54,50)"/><text x="46.1836%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (534,485 samples, 0.30%)</title><rect x="45.9621%" y="85" width="0.2987%" height="15" fill="rgb(233,84,52)"/><text x="46.2121%" y="95.50"></text></g><g><title>associated_items (711,758 samples, 0.40%)</title><rect x="45.8807%" y="117" width="0.3977%" height="15" fill="rgb(207,117,47)"/><text x="46.1307%" y="127.50"></text></g><g><title>adt_dtorck_constraint (233,323 samples, 0.13%)</title><rect x="46.7108%" y="85" width="0.1304%" height="15" fill="rgb(249,43,39)"/><text x="46.9608%" y="95.50"></text></g><g><title>adt_dtorck_constraint (383,014 samples, 0.21%)</title><rect x="46.6447%" y="101" width="0.2140%" height="15" fill="rgb(209,38,44)"/><text x="46.8947%" y="111.50"></text></g><g><title>dropck_outlives (1,041,368 samples, 0.58%)</title><rect x="46.3349%" y="117" width="0.5819%" height="15" fill="rgb(236,212,23)"/><text x="46.5849%" y="127.50"></text></g><g><title>evaluate_obligation (1,902,379 samples, 1.06%)</title><rect x="46.9198%" y="117" width="1.0631%" height="15" fill="rgb(242,79,21)"/><text x="47.1698%" y="127.50"></text></g><g><title>trait_impls_of (201,602 samples, 0.11%)</title><rect x="47.8703%" y="101" width="0.1127%" height="15" fill="rgb(211,96,35)"/><text x="48.1203%" y="111.50"></text></g><g><title>evaluate_obligation (485,266 samples, 0.27%)</title><rect x="48.8000%" y="101" width="0.2712%" height="15" fill="rgb(253,215,40)"/><text x="49.0500%" y="111.50"></text></g><g><title>method_autoderef_steps (1,371,765 samples, 0.77%)</title><rect x="48.3088%" y="117" width="0.7666%" height="15" fill="rgb(211,81,21)"/><text x="48.5588%" y="127.50"></text></g><g><title>predicates_of (288,192 samples, 0.16%)</title><rect x="49.1631%" y="117" width="0.1610%" height="15" fill="rgb(208,190,38)"/><text x="49.4131%" y="127.50"></text></g><g><title>predicates_defined_on (198,781 samples, 0.11%)</title><rect x="49.2131%" y="101" width="0.1111%" height="15" fill="rgb(235,213,38)"/><text x="49.4631%" y="111.50"></text></g><g><title>associated_items (214,613 samples, 0.12%)</title><rect x="50.4979%" y="101" width="0.1199%" height="15" fill="rgb(237,122,38)"/><text x="50.7479%" y="111.50"></text></g><g><title>specializes (376,164 samples, 0.21%)</title><rect x="50.8175%" y="85" width="0.2102%" height="15" fill="rgb(244,218,35)"/><text x="51.0675%" y="95.50"></text></g><g><title>evaluate_obligation (722,638 samples, 0.40%)</title><rect x="50.6488%" y="101" width="0.4038%" height="15" fill="rgb(240,68,47)"/><text x="50.8988%" y="111.50"></text></g><g><title>typeck (3,231,135 samples, 1.81%)</title><rect x="49.4351%" y="117" width="1.8056%" height="15" fill="rgb(210,16,53)"/><text x="49.6851%" y="127.50">t..</text></g><g><title>item_bodies_checking (34,158,910 samples, 19.09%)</title><rect x="32.1895%" y="165" width="19.0887%" height="15" fill="rgb(235,124,12)"/><text x="32.4395%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (34,155,950 samples, 19.09%)</title><rect x="32.1911%" y="149" width="19.0870%" height="15" fill="rgb(224,169,11)"/><text x="32.4411%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (34,008,120 samples, 19.00%)</title><rect x="32.2737%" y="133" width="19.0044%" height="15" fill="rgb(250,166,2)"/><text x="32.5237%" y="143.50">typeck</text></g><g><title>item_types_checking (3,385,878 samples, 1.89%)</title><rect x="51.2782%" y="165" width="1.8921%" height="15" fill="rgb(242,216,29)"/><text x="51.5282%" y="175.50">i..</text></g><g><title>check_mod_item_types (3,375,898 samples, 1.89%)</title><rect x="51.2837%" y="149" width="1.8865%" height="15" fill="rgb(230,116,27)"/><text x="51.5337%" y="159.50">c..</text></g><g><title>fn_sig (668,809 samples, 0.37%)</title><rect x="53.4523%" y="133" width="0.3737%" height="15" fill="rgb(228,99,48)"/><text x="53.7023%" y="143.50"></text></g><g><title>is_late_bound_map (239,602 samples, 0.13%)</title><rect x="53.9479%" y="117" width="0.1339%" height="15" fill="rgb(253,11,6)"/><text x="54.1979%" y="127.50"></text></g><g><title>resolve_lifetimes (217,701 samples, 0.12%)</title><rect x="53.9601%" y="101" width="0.1217%" height="15" fill="rgb(247,143,39)"/><text x="54.2101%" y="111.50"></text></g><g><title>generics_of (565,525 samples, 0.32%)</title><rect x="53.8260%" y="133" width="0.3160%" height="15" fill="rgb(236,97,10)"/><text x="54.0760%" y="143.50"></text></g><g><title>late_bound_vars_map (361,604 samples, 0.20%)</title><rect x="54.7092%" y="85" width="0.2021%" height="15" fill="rgb(233,208,19)"/><text x="54.9592%" y="95.50"></text></g><g><title>resolve_lifetimes (339,624 samples, 0.19%)</title><rect x="54.7215%" y="69" width="0.1898%" height="15" fill="rgb(216,164,2)"/><text x="54.9715%" y="79.50"></text></g><g><title>explicit_predicates_of (1,074,470 samples, 0.60%)</title><rect x="54.4239%" y="101" width="0.6004%" height="15" fill="rgb(220,129,5)"/><text x="54.6739%" y="111.50"></text></g><g><title>predicates_of (1,774,341 samples, 0.99%)</title><rect x="54.2737%" y="133" width="0.9915%" height="15" fill="rgb(242,17,10)"/><text x="54.5237%" y="143.50"></text></g><g><title>predicates_defined_on (1,671,319 samples, 0.93%)</title><rect x="54.3313%" y="117" width="0.9340%" height="15" fill="rgb(242,107,0)"/><text x="54.5813%" y="127.50"></text></g><g><title>inferred_outlives_of (431,145 samples, 0.24%)</title><rect x="55.0243%" y="101" width="0.2409%" height="15" fill="rgb(251,28,31)"/><text x="55.2743%" y="111.50"></text></g><g><title>inferred_outlives_crate (397,575 samples, 0.22%)</title><rect x="55.0431%" y="85" width="0.2222%" height="15" fill="rgb(233,223,10)"/><text x="55.2931%" y="95.50"></text></g><g><title>type_of (235,723 samples, 0.13%)</title><rect x="55.1335%" y="69" width="0.1317%" height="15" fill="rgb(215,21,27)"/><text x="55.3835%" y="79.50"></text></g><g><title>type_collecting (4,108,945 samples, 2.30%)</title><rect x="53.1734%" y="165" width="2.2962%" height="15" fill="rgb(232,23,21)"/><text x="53.4234%" y="175.50">t..</text></g><g><title>collect_mod_item_types (4,096,035 samples, 2.29%)</title><rect x="53.1806%" y="149" width="2.2889%" height="15" fill="rgb(244,5,23)"/><text x="53.4306%" y="159.50">c..</text></g><g><title>type_of (315,433 samples, 0.18%)</title><rect x="55.2933%" y="133" width="0.1763%" height="15" fill="rgb(226,81,46)"/><text x="55.5433%" y="143.50"></text></g><g><title>evaluate_obligation (1,701,464 samples, 0.95%)</title><rect x="59.0662%" y="133" width="0.9508%" height="15" fill="rgb(247,70,30)"/><text x="59.3162%" y="143.50"></text></g><g><title>implied_outlives_bounds (698,778 samples, 0.39%)</title><rect x="60.0505%" y="133" width="0.3905%" height="15" fill="rgb(212,68,19)"/><text x="60.3005%" y="143.50"></text></g><g><title>param_env (861,428 samples, 0.48%)</title><rect x="60.4410%" y="133" width="0.4814%" height="15" fill="rgb(240,187,13)"/><text x="60.6910%" y="143.50"></text></g><g><title>region_scope_tree (450,586 samples, 0.25%)</title><rect x="60.9448%" y="133" width="0.2518%" height="15" fill="rgb(223,113,26)"/><text x="61.1948%" y="143.50"></text></g><g><title>check_impl_item_well_formed (9,885,112 samples, 5.52%)</title><rect x="55.7031%" y="149" width="5.5240%" height="15" fill="rgb(206,192,2)"/><text x="55.9531%" y="159.50">check_i..</text></g><g><title>evaluate_obligation (273,853 samples, 0.15%)</title><rect x="63.1886%" y="133" width="0.1530%" height="15" fill="rgb(241,108,4)"/><text x="63.4386%" y="143.50"></text></g><g><title>implied_outlives_bounds (255,652 samples, 0.14%)</title><rect x="63.3582%" y="133" width="0.1429%" height="15" fill="rgb(247,173,49)"/><text x="63.6082%" y="143.50"></text></g><g><title>object_safety_violations (374,614 samples, 0.21%)</title><rect x="63.5121%" y="133" width="0.2093%" height="15" fill="rgb(224,114,35)"/><text x="63.7621%" y="143.50"></text></g><g><title>param_env (581,654 samples, 0.33%)</title><rect x="63.7215%" y="133" width="0.3250%" height="15" fill="rgb(245,159,27)"/><text x="63.9715%" y="143.50"></text></g><g><title>check_item_well_formed (5,506,110 samples, 3.08%)</title><rect x="61.2271%" y="149" width="3.0769%" height="15" fill="rgb(245,172,44)"/><text x="61.4771%" y="159.50">che..</text></g><g><title>variances_of (187,712 samples, 0.10%)</title><rect x="64.1991%" y="133" width="0.1049%" height="15" fill="rgb(236,23,11)"/><text x="64.4491%" y="143.50"></text></g><g><title>crate_variances (179,782 samples, 0.10%)</title><rect x="64.2035%" y="117" width="0.1005%" height="15" fill="rgb(205,117,38)"/><text x="64.4535%" y="127.50"></text></g><g><title>analysis (115,131,701 samples, 64.34%)</title><rect x="0.4655%" y="197" width="64.3379%" height="15" fill="rgb(237,72,25)"/><text x="0.7155%" y="207.50">analysis</text></g><g><title>type_check_crate (70,395,004 samples, 39.34%)</title><rect x="25.4653%" y="181" width="39.3381%" height="15" fill="rgb(244,70,9)"/><text x="25.7153%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,694,535 samples, 9.33%)</title><rect x="55.4741%" y="165" width="9.3292%" height="15" fill="rgb(217,125,39)"/><text x="55.7241%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (893,651 samples, 0.50%)</title><rect x="64.3040%" y="149" width="0.4994%" height="15" fill="rgb(235,36,10)"/><text x="64.5540%" y="159.50"></text></g><g><title>codegen_crate (382,674 samples, 0.21%)</title><rect x="64.8103%" y="197" width="0.2138%" height="15" fill="rgb(251,123,47)"/><text x="65.0603%" y="207.50"></text></g><g><title>AST_validation (394,764 samples, 0.22%)</title><rect x="65.1493%" y="181" width="0.2206%" height="15" fill="rgb(221,13,13)"/><text x="65.3993%" y="191.50"></text></g><g><title>metadata_load_macro (1,739,268 samples, 0.97%)</title><rect x="87.0565%" y="149" width="0.9719%" height="15" fill="rgb(238,131,9)"/><text x="87.3065%" y="159.50"></text></g><g><title>metadata_register_crate (2,927,722 samples, 1.64%)</title><rect x="88.0284%" y="149" width="1.6361%" height="15" fill="rgb(211,50,8)"/><text x="88.2784%" y="159.50"></text></g><g><title>metadata_register_crate (998,319 samples, 0.56%)</title><rect x="89.1066%" y="133" width="0.5579%" height="15" fill="rgb(245,182,24)"/><text x="89.3566%" y="143.50"></text></g><g><title>macro_expand_crate (43,657,917 samples, 24.40%)</title><rect x="65.4620%" y="181" width="24.3969%" height="15" fill="rgb(242,14,37)"/><text x="65.7120%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (43,632,695 samples, 24.38%)</title><rect x="65.4761%" y="165" width="24.3828%" height="15" fill="rgb(246,228,12)"/><text x="65.7261%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (347,993 samples, 0.19%)</title><rect x="89.6645%" y="149" width="0.1945%" height="15" fill="rgb(213,55,15)"/><text x="89.9145%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (191,572 samples, 0.11%)</title><rect x="89.8647%" y="181" width="0.1071%" height="15" fill="rgb(209,9,3)"/><text x="90.1147%" y="191.50"></text></g><g><title>late_resolve_crate (2,043,573 samples, 1.14%)</title><rect x="90.1137%" y="165" width="1.1420%" height="15" fill="rgb(230,59,30)"/><text x="90.3637%" y="175.50"></text></g><g><title>configure_and_expand (47,083,014 samples, 26.31%)</title><rect x="65.0241%" y="197" width="26.3109%" height="15" fill="rgb(209,121,21)"/><text x="65.2741%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,439,537 samples, 1.36%)</title><rect x="89.9718%" y="181" width="1.3633%" height="15" fill="rgb(220,109,13)"/><text x="90.2218%" y="191.50"></text></g><g><title>drop_ast (275,913 samples, 0.15%)</title><rect x="91.3351%" y="197" width="0.1542%" height="15" fill="rgb(232,18,1)"/><text x="91.5851%" y="207.50"></text></g><g><title>early_lint_checks (692,497 samples, 0.39%)</title><rect x="91.4993%" y="197" width="0.3870%" height="15" fill="rgb(215,41,42)"/><text x="91.7493%" y="207.50"></text></g><g><title>free_global_ctxt (3,597,220 samples, 2.01%)</title><rect x="91.8863%" y="197" width="2.0102%" height="15" fill="rgb(224,123,36)"/><text x="92.1363%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,360,757 samples, 1.32%)</title><rect x="93.8965%" y="197" width="1.3192%" height="15" fill="rgb(240,125,3)"/><text x="94.1465%" y="207.50"></text></g><g><title>hir_lowering (4,234,418 samples, 2.37%)</title><rect x="95.2157%" y="197" width="2.3663%" height="15" fill="rgb(205,98,50)"/><text x="95.4657%" y="207.50">hi..</text></g><g><title>parse_crate (2,620,839 samples, 1.46%)</title><rect x="97.6257%" y="197" width="1.4646%" height="15" fill="rgb(205,185,37)"/><text x="97.8757%" y="207.50"></text></g><g><title>prepare_outputs (202,172 samples, 0.11%)</title><rect x="99.0959%" y="197" width="0.1130%" height="15" fill="rgb(238,207,15)"/><text x="99.3459%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (953,661 samples, 0.53%)</title><rect x="99.2089%" y="197" width="0.5329%" height="15" fill="rgb(213,199,42)"/><text x="99.4589%" y="207.50"></text></g><g><title>all (178,948,592 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (178,948,592 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (367,264 samples, 0.21%)</title><rect x="99.7948%" y="197" width="0.2052%" height="15" fill="rgb(241,35,35)"/><text x="100.0448%" y="207.50"></text></g></svg></svg>