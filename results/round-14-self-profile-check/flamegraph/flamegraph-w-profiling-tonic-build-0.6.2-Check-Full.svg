<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (750,129 samples, 0.11%)</title><rect x="14.4701%" y="101" width="0.1143%" height="15" fill="rgb(227,0,7)"/><text x="14.7201%" y="111.50"></text></g><g><title>adt_drop_tys (966,191 samples, 0.15%)</title><rect x="17.3124%" y="69" width="0.1472%" height="15" fill="rgb(217,0,24)"/><text x="17.5624%" y="79.50"></text></g><g><title>is_copy_raw (1,642,301 samples, 0.25%)</title><rect x="17.4601%" y="69" width="0.2502%" height="15" fill="rgb(221,193,54)"/><text x="17.7101%" y="79.50"></text></g><g><title>evaluate_obligation (1,360,030 samples, 0.21%)</title><rect x="17.5031%" y="53" width="0.2072%" height="15" fill="rgb(248,212,6)"/><text x="17.7531%" y="63.50"></text></g><g><title>needs_drop_raw (2,910,255 samples, 0.44%)</title><rect x="17.2735%" y="85" width="0.4433%" height="15" fill="rgb(208,68,35)"/><text x="17.5235%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (915,072 samples, 0.14%)</title><rect x="17.8035%" y="69" width="0.1394%" height="15" fill="rgb(232,128,0)"/><text x="18.0535%" y="79.50"></text></g><g><title>impl_parent (916,156 samples, 0.14%)</title><rect x="18.2158%" y="53" width="0.1395%" height="15" fill="rgb(207,160,47)"/><text x="18.4658%" y="63.50"></text></g><g><title>specialization_graph_of (4,540,268 samples, 0.69%)</title><rect x="17.9776%" y="69" width="0.6916%" height="15" fill="rgb(228,23,34)"/><text x="18.2276%" y="79.50"></text></g><g><title>impl_trait_ref (2,059,718 samples, 0.31%)</title><rect x="18.3554%" y="53" width="0.3137%" height="15" fill="rgb(218,30,26)"/><text x="18.6054%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,668,338 samples, 0.25%)</title><rect x="18.4150%" y="37" width="0.2541%" height="15" fill="rgb(220,122,19)"/><text x="18.6650%" y="47.50"></text></g><g><title>resolve_instance (6,435,341 samples, 0.98%)</title><rect x="17.7168%" y="85" width="0.9802%" height="15" fill="rgb(250,228,42)"/><text x="17.9668%" y="95.50"></text></g><g><title>thir_body (7,181,047 samples, 1.09%)</title><rect x="18.7044%" y="85" width="1.0938%" height="15" fill="rgb(240,193,28)"/><text x="18.9544%" y="95.50"></text></g><g><title>mir_const (40,322,578 samples, 6.14%)</title><rect x="13.6663%" y="133" width="6.1418%" height="15" fill="rgb(216,20,37)"/><text x="13.9163%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (36,907,816 samples, 5.62%)</title><rect x="14.1864%" y="117" width="5.6217%" height="15" fill="rgb(206,188,39)"/><text x="14.4364%" y="127.50">unsafet..</text></g><g><title>mir_built (34,293,047 samples, 5.22%)</title><rect x="14.5847%" y="101" width="5.2234%" height="15" fill="rgb(217,207,13)"/><text x="14.8347%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (43,599,658 samples, 6.64%)</title><rect x="13.1922%" y="149" width="6.6410%" height="15" fill="rgb(231,73,38)"/><text x="13.4422%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (1,018,761 samples, 0.16%)</title><rect x="19.8333%" y="149" width="0.1552%" height="15" fill="rgb(225,20,46)"/><text x="20.0833%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,095,968 samples, 0.17%)</title><rect x="19.9885%" y="149" width="0.1669%" height="15" fill="rgb(210,31,41)"/><text x="20.2385%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,648,301 samples, 0.71%)</title><rect x="20.2452%" y="149" width="0.7080%" height="15" fill="rgb(221,200,47)"/><text x="20.4952%" y="159.50"></text></g><g><title>MIR_borrow_checking (134,615,895 samples, 20.50%)</title><rect x="0.4498%" y="181" width="20.5044%" height="15" fill="rgb(226,26,5)"/><text x="0.6998%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (134,411,904 samples, 20.47%)</title><rect x="0.4809%" y="165" width="20.4733%" height="15" fill="rgb(249,33,26)"/><text x="0.7309%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,408,585 samples, 0.21%)</title><rect x="21.0652%" y="165" width="0.2146%" height="15" fill="rgb(235,183,28)"/><text x="21.3152%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (761,138 samples, 0.12%)</title><rect x="21.3596%" y="165" width="0.1159%" height="15" fill="rgb(221,5,38)"/><text x="21.6096%" y="175.50"></text></g><g><title>misc_checking_1 (2,785,980 samples, 0.42%)</title><rect x="21.0605%" y="181" width="0.4244%" height="15" fill="rgb(247,18,42)"/><text x="21.3105%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,490,098 samples, 0.38%)</title><rect x="21.4852%" y="165" width="0.3793%" height="15" fill="rgb(241,131,45)"/><text x="21.7352%" y="175.50"></text></g><g><title>check_mod_liveness (2,032,692 samples, 0.31%)</title><rect x="21.5549%" y="149" width="0.3096%" height="15" fill="rgb(249,31,29)"/><text x="21.8049%" y="159.50"></text></g><g><title>misc_checking_2 (4,213,707 samples, 0.64%)</title><rect x="21.4849%" y="181" width="0.6418%" height="15" fill="rgb(225,111,53)"/><text x="21.7349%" y="191.50"></text></g><g><title>match_checking (1,721,409 samples, 0.26%)</title><rect x="21.8645%" y="165" width="0.2622%" height="15" fill="rgb(238,160,17)"/><text x="22.1145%" y="175.50"></text></g><g><title>check_match (1,456,197 samples, 0.22%)</title><rect x="21.9049%" y="149" width="0.2218%" height="15" fill="rgb(214,148,48)"/><text x="22.1549%" y="159.50"></text></g><g><title>death_checking (835,069 samples, 0.13%)</title><rect x="22.1835%" y="165" width="0.1272%" height="15" fill="rgb(232,36,49)"/><text x="22.4335%" y="175.50"></text></g><g><title>crate_lints (5,615,193 samples, 0.86%)</title><rect x="22.3111%" y="149" width="0.8553%" height="15" fill="rgb(209,103,24)"/><text x="22.5611%" y="159.50"></text></g><g><title>type_of (1,960,707 samples, 0.30%)</title><rect x="22.8678%" y="133" width="0.2987%" height="15" fill="rgb(229,88,8)"/><text x="23.1178%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,540,256 samples, 0.23%)</title><rect x="22.9318%" y="117" width="0.2346%" height="15" fill="rgb(213,181,19)"/><text x="23.1818%" y="127.50"></text></g><g><title>lint_checking (8,623,647 samples, 1.31%)</title><rect x="22.3107%" y="165" width="1.3135%" height="15" fill="rgb(254,191,54)"/><text x="22.5607%" y="175.50"></text></g><g><title>module_lints (3,005,914 samples, 0.46%)</title><rect x="23.1664%" y="149" width="0.4579%" height="15" fill="rgb(241,83,37)"/><text x="23.4164%" y="159.50"></text></g><g><title>lint_mod (2,997,804 samples, 0.46%)</title><rect x="23.1677%" y="133" width="0.4566%" height="15" fill="rgb(233,36,39)"/><text x="23.4177%" y="143.50"></text></g><g><title>privacy_access_levels (668,887 samples, 0.10%)</title><rect x="23.6243%" y="165" width="0.1019%" height="15" fill="rgb(226,3,54)"/><text x="23.8743%" y="175.50"></text></g><g><title>privacy_checking_modules (4,061,344 samples, 0.62%)</title><rect x="23.7262%" y="165" width="0.6186%" height="15" fill="rgb(245,192,40)"/><text x="23.9762%" y="175.50"></text></g><g><title>check_mod_privacy (4,056,464 samples, 0.62%)</title><rect x="23.7269%" y="149" width="0.6179%" height="15" fill="rgb(238,167,29)"/><text x="23.9769%" y="159.50"></text></g><g><title>misc_checking_3 (14,577,151 samples, 2.22%)</title><rect x="22.1267%" y="181" width="2.2204%" height="15" fill="rgb(232,182,51)"/><text x="22.3767%" y="191.50">m..</text></g><g><title>impl_parent (2,570,076 samples, 0.39%)</title><rect x="24.9974%" y="117" width="0.3915%" height="15" fill="rgb(231,60,39)"/><text x="25.2474%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,552,278 samples, 0.24%)</title><rect x="25.1524%" y="101" width="0.2364%" height="15" fill="rgb(208,69,12)"/><text x="25.4024%" y="111.50"></text></g><g><title>impl_trait_ref (6,403,581 samples, 0.98%)</title><rect x="25.3889%" y="117" width="0.9754%" height="15" fill="rgb(235,93,37)"/><text x="25.6389%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,361,153 samples, 0.82%)</title><rect x="25.5476%" y="101" width="0.8166%" height="15" fill="rgb(213,116,39)"/><text x="25.7976%" y="111.50"></text></g><g><title>coherent_trait (13,873,575 samples, 2.11%)</title><rect x="24.3658%" y="149" width="2.1132%" height="15" fill="rgb(222,207,29)"/><text x="24.6158%" y="159.50">c..</text></g><g><title>specialization_graph_of (13,859,035 samples, 2.11%)</title><rect x="24.3681%" y="133" width="2.1110%" height="15" fill="rgb(206,96,30)"/><text x="24.6181%" y="143.50">s..</text></g><g><title>trait_impls_of (751,329 samples, 0.11%)</title><rect x="26.3646%" y="117" width="0.1144%" height="15" fill="rgb(218,138,4)"/><text x="26.6146%" y="127.50"></text></g><g><title>coherence_checking (13,953,845 samples, 2.13%)</title><rect x="24.3629%" y="165" width="2.1254%" height="15" fill="rgb(250,191,14)"/><text x="24.6129%" y="175.50">c..</text></g><g><title>associated_items (765,542 samples, 0.12%)</title><rect x="47.1596%" y="117" width="0.1166%" height="15" fill="rgb(239,60,40)"/><text x="47.4096%" y="127.50"></text></g><g><title>dropck_outlives (938,590 samples, 0.14%)</title><rect x="47.2934%" y="117" width="0.1430%" height="15" fill="rgb(206,27,48)"/><text x="47.5434%" y="127.50"></text></g><g><title>trait_impls_of (730,457 samples, 0.11%)</title><rect x="47.9030%" y="101" width="0.1113%" height="15" fill="rgb(225,35,8)"/><text x="48.1530%" y="111.50"></text></g><g><title>evaluate_obligation (3,796,288 samples, 0.58%)</title><rect x="47.4363%" y="117" width="0.5782%" height="15" fill="rgb(250,213,24)"/><text x="47.6863%" y="127.50"></text></g><g><title>method_autoderef_steps (969,381 samples, 0.15%)</title><rect x="48.2064%" y="117" width="0.1477%" height="15" fill="rgb(247,123,22)"/><text x="48.4564%" y="127.50"></text></g><g><title>predicates_of (717,838 samples, 0.11%)</title><rect x="48.4140%" y="117" width="0.1093%" height="15" fill="rgb(231,138,38)"/><text x="48.6640%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,370,654 samples, 0.21%)</title><rect x="49.9405%" y="37" width="0.2088%" height="15" fill="rgb(231,145,46)"/><text x="50.1905%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,974,704 samples, 0.30%)</title><rect x="49.8648%" y="53" width="0.3008%" height="15" fill="rgb(251,118,11)"/><text x="50.1148%" y="63.50"></text></g><g><title>adt_dtorck_constraint (2,613,561 samples, 0.40%)</title><rect x="49.7855%" y="69" width="0.3981%" height="15" fill="rgb(217,147,25)"/><text x="50.0355%" y="79.50"></text></g><g><title>adt_dtorck_constraint (3,231,468 samples, 0.49%)</title><rect x="49.7090%" y="85" width="0.4922%" height="15" fill="rgb(247,81,37)"/><text x="49.9590%" y="95.50"></text></g><g><title>dropck_outlives (3,637,173 samples, 0.55%)</title><rect x="49.6590%" y="101" width="0.5540%" height="15" fill="rgb(209,12,38)"/><text x="49.9090%" y="111.50"></text></g><g><title>trait_impls_of (678,278 samples, 0.10%)</title><rect x="50.5714%" y="85" width="0.1033%" height="15" fill="rgb(227,1,9)"/><text x="50.8214%" y="95.50"></text></g><g><title>evaluate_obligation (3,031,533 samples, 0.46%)</title><rect x="50.2131%" y="101" width="0.4618%" height="15" fill="rgb(248,47,43)"/><text x="50.4631%" y="111.50"></text></g><g><title>typeck (15,668,215 samples, 2.39%)</title><rect x="48.5497%" y="117" width="2.3865%" height="15" fill="rgb(221,10,30)"/><text x="48.7997%" y="127.50">ty..</text></g><g><title>item_bodies_checking (160,580,534 samples, 24.46%)</title><rect x="26.4924%" y="165" width="24.4593%" height="15" fill="rgb(210,229,1)"/><text x="26.7424%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (160,577,284 samples, 24.46%)</title><rect x="26.4929%" y="149" width="24.4588%" height="15" fill="rgb(222,148,37)"/><text x="26.7429%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (160,454,404 samples, 24.44%)</title><rect x="26.5116%" y="133" width="24.4401%" height="15" fill="rgb(234,67,33)"/><text x="26.7616%" y="143.50">typeck</text></g><g><title>item_types_checking (1,349,495 samples, 0.21%)</title><rect x="50.9517%" y="165" width="0.2056%" height="15" fill="rgb(247,98,35)"/><text x="51.2017%" y="175.50"></text></g><g><title>check_mod_item_types (1,345,085 samples, 0.20%)</title><rect x="50.9523%" y="149" width="0.2049%" height="15" fill="rgb(247,138,52)"/><text x="51.2023%" y="159.50"></text></g><g><title>is_late_bound_map (776,239 samples, 0.12%)</title><rect x="51.3041%" y="117" width="0.1182%" height="15" fill="rgb(213,79,30)"/><text x="51.5541%" y="127.50"></text></g><g><title>resolve_lifetimes (767,529 samples, 0.12%)</title><rect x="51.3054%" y="101" width="0.1169%" height="15" fill="rgb(246,177,23)"/><text x="51.5554%" y="111.50"></text></g><g><title>lint_levels (673,818 samples, 0.10%)</title><rect x="51.3197%" y="85" width="0.1026%" height="15" fill="rgb(230,62,27)"/><text x="51.5697%" y="95.50"></text></g><g><title>generics_of (1,468,064 samples, 0.22%)</title><rect x="51.2846%" y="133" width="0.2236%" height="15" fill="rgb(216,154,8)"/><text x="51.5346%" y="143.50"></text></g><g><title>type_collecting (3,253,716 samples, 0.50%)</title><rect x="51.1580%" y="165" width="0.4956%" height="15" fill="rgb(244,35,45)"/><text x="51.4080%" y="175.50"></text></g><g><title>collect_mod_item_types (3,244,076 samples, 0.49%)</title><rect x="51.1594%" y="149" width="0.4941%" height="15" fill="rgb(251,115,12)"/><text x="51.4094%" y="159.50"></text></g><g><title>evaluate_obligation (710,557 samples, 0.11%)</title><rect x="51.8939%" y="133" width="0.1082%" height="15" fill="rgb(240,54,50)"/><text x="52.1439%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,762,441 samples, 0.42%)</title><rect x="51.7031%" y="149" width="0.4208%" height="15" fill="rgb(233,84,52)"/><text x="51.9531%" y="159.50"></text></g><g><title>region_scope_tree (1,851,098 samples, 0.28%)</title><rect x="52.4343%" y="133" width="0.2820%" height="15" fill="rgb(207,117,47)"/><text x="52.6843%" y="143.50"></text></g><g><title>check_item_well_formed (4,156,137 samples, 0.63%)</title><rect x="52.1238%" y="149" width="0.6331%" height="15" fill="rgb(249,43,39)"/><text x="52.3738%" y="159.50"></text></g><g><title>analysis (345,563,179 samples, 52.64%)</title><rect x="0.2220%" y="197" width="52.6354%" height="15" fill="rgb(209,38,44)"/><text x="0.4720%" y="207.50">analysis</text></g><g><title>type_check_crate (187,177,140 samples, 28.51%)</title><rect x="24.3470%" y="181" width="28.5104%" height="15" fill="rgb(236,212,23)"/><text x="24.5970%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,896,598 samples, 1.20%)</title><rect x="51.6547%" y="165" width="1.2028%" height="15" fill="rgb(242,79,21)"/><text x="51.9047%" y="175.50"></text></g><g><title>check_trait_item_well_formed (660,336 samples, 0.10%)</title><rect x="52.7569%" y="149" width="0.1006%" height="15" fill="rgb(211,96,35)"/><text x="53.0069%" y="159.50"></text></g><g><title>metadata_register_crate (5,903,837 samples, 0.90%)</title><rect x="92.5520%" y="149" width="0.8993%" height="15" fill="rgb(253,215,40)"/><text x="92.8020%" y="159.50"></text></g><g><title>metadata_register_crate (4,543,073 samples, 0.69%)</title><rect x="92.7593%" y="133" width="0.6920%" height="15" fill="rgb(211,81,21)"/><text x="93.0093%" y="143.50"></text></g><g><title>metadata_register_crate (3,660,732 samples, 0.56%)</title><rect x="92.8937%" y="117" width="0.5576%" height="15" fill="rgb(208,190,38)"/><text x="93.1437%" y="127.50"></text></g><g><title>metadata_register_crate (3,167,556 samples, 0.48%)</title><rect x="92.9688%" y="101" width="0.4825%" height="15" fill="rgb(235,213,38)"/><text x="93.2188%" y="111.50"></text></g><g><title>macro_expand_crate (265,093,566 samples, 40.38%)</title><rect x="53.1059%" y="181" width="40.3785%" height="15" fill="rgb(237,122,38)"/><text x="53.3559%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (265,080,036 samples, 40.38%)</title><rect x="53.1080%" y="165" width="40.3764%" height="15" fill="rgb(244,218,35)"/><text x="53.3580%" y="175.50">expand_crate</text></g><g><title>finalize_macro_resolutions (3,819,552 samples, 0.58%)</title><rect x="93.5266%" y="165" width="0.5818%" height="15" fill="rgb(240,68,47)"/><text x="93.7766%" y="175.50"></text></g><g><title>late_resolve_crate (7,598,834 samples, 1.16%)</title><rect x="94.1084%" y="165" width="1.1574%" height="15" fill="rgb(210,16,53)"/><text x="94.3584%" y="175.50"></text></g><g><title>configure_and_expand (278,847,328 samples, 42.47%)</title><rect x="52.9430%" y="197" width="42.4734%" height="15" fill="rgb(235,124,12)"/><text x="53.1930%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (12,566,209 samples, 1.91%)</title><rect x="93.5024%" y="181" width="1.9141%" height="15" fill="rgb(224,169,11)"/><text x="93.7524%" y="191.50">r..</text></g><g><title>drop_ast (1,054,422 samples, 0.16%)</title><rect x="95.4165%" y="197" width="0.1606%" height="15" fill="rgb(250,166,2)"/><text x="95.6665%" y="207.50"></text></g><g><title>early_lint_checks (3,184,855 samples, 0.49%)</title><rect x="95.5807%" y="197" width="0.4851%" height="15" fill="rgb(242,216,29)"/><text x="95.8307%" y="207.50"></text></g><g><title>free_global_ctxt (6,325,090 samples, 0.96%)</title><rect x="96.0658%" y="197" width="0.9634%" height="15" fill="rgb(230,116,27)"/><text x="96.3158%" y="207.50"></text></g><g><title>generate_crate_metadata (1,596,898 samples, 0.24%)</title><rect x="97.0293%" y="197" width="0.2432%" height="15" fill="rgb(228,99,48)"/><text x="97.2793%" y="207.50"></text></g><g><title>hir_lowering (14,729,534 samples, 2.24%)</title><rect x="97.2725%" y="197" width="2.2436%" height="15" fill="rgb(253,11,6)"/><text x="97.5225%" y="207.50">h..</text></g><g><title>parse_crate (1,193,654 samples, 0.18%)</title><rect x="99.5271%" y="197" width="0.1818%" height="15" fill="rgb(247,143,39)"/><text x="99.7771%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,123,313 samples, 0.17%)</title><rect x="99.7474%" y="197" width="0.1711%" height="15" fill="rgb(236,97,10)"/><text x="99.9974%" y="207.50"></text></g><g><title>all (656,521,854 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (656,521,854 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>