<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (1,071,031 samples, 0.12%)</title><rect x="13.5134%" y="149" width="0.1233%" height="15" fill="rgb(227,0,7)"/><text x="13.7634%" y="159.50"></text></g><g><title>is_late_bound_map (957,540 samples, 0.11%)</title><rect x="13.5264%" y="133" width="0.1102%" height="15" fill="rgb(217,0,24)"/><text x="13.7764%" y="143.50"></text></g><g><title>resolve_lifetimes (926,480 samples, 0.11%)</title><rect x="13.5300%" y="117" width="0.1067%" height="15" fill="rgb(221,193,54)"/><text x="13.7800%" y="127.50"></text></g><g><title>needs_drop_raw (1,199,570 samples, 0.14%)</title><rect x="15.2098%" y="85" width="0.1381%" height="15" fill="rgb(248,212,6)"/><text x="15.4598%" y="95.50"></text></g><g><title>resolve_instance (1,167,132 samples, 0.13%)</title><rect x="15.3508%" y="85" width="0.1344%" height="15" fill="rgb(208,68,35)"/><text x="15.6008%" y="95.50"></text></g><g><title>thir_body (1,810,084 samples, 0.21%)</title><rect x="15.4909%" y="85" width="0.2084%" height="15" fill="rgb(232,128,0)"/><text x="15.7409%" y="95.50"></text></g><g><title>mir_const (12,641,055 samples, 1.46%)</title><rect x="14.2493%" y="133" width="1.4554%" height="15" fill="rgb(207,160,47)"/><text x="14.4993%" y="143.50"></text></g><g><title>unsafety_check_result (10,830,446 samples, 1.25%)</title><rect x="14.4578%" y="117" width="1.2470%" height="15" fill="rgb(228,23,34)"/><text x="14.7078%" y="127.50"></text></g><g><title>mir_built (9,510,471 samples, 1.09%)</title><rect x="14.6098%" y="101" width="1.0950%" height="15" fill="rgb(218,30,26)"/><text x="14.8598%" y="111.50"></text></g><g><title>thir_body (22,524,222 samples, 2.59%)</title><rect x="19.7448%" y="69" width="2.5933%" height="15" fill="rgb(220,122,19)"/><text x="19.9948%" y="79.50">th..</text></g><g><title>mir_const (54,160,639 samples, 6.24%)</title><rect x="16.1038%" y="117" width="6.2358%" height="15" fill="rgb(250,228,42)"/><text x="16.3538%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (50,570,760 samples, 5.82%)</title><rect x="16.5171%" y="101" width="5.8225%" height="15" fill="rgb(240,193,28)"/><text x="16.7671%" y="111.50">unsafet..</text></g><g><title>mir_built (47,769,371 samples, 5.50%)</title><rect x="16.8397%" y="85" width="5.5000%" height="15" fill="rgb(216,20,37)"/><text x="17.0897%" y="95.50">mir_bui..</text></g><g><title>mir_const_qualif (57,657,075 samples, 6.64%)</title><rect x="15.7048%" y="133" width="6.6384%" height="15" fill="rgb(206,188,39)"/><text x="15.9548%" y="143.50">mir_const..</text></g><g><title>mir_promoted (75,576,239 samples, 8.70%)</title><rect x="13.6419%" y="149" width="8.7015%" height="15" fill="rgb(217,207,13)"/><text x="13.8919%" y="159.50">mir_promoted</text></g><g><title>type_op_prove_predicate (3,417,921 samples, 0.39%)</title><rect x="22.5177%" y="149" width="0.3935%" height="15" fill="rgb(231,73,38)"/><text x="22.7677%" y="159.50"></text></g><g><title>MIR_borrow_checking (193,705,202 samples, 22.30%)</title><rect x="0.6098%" y="181" width="22.3024%" height="15" fill="rgb(225,20,46)"/><text x="0.8598%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (193,428,229 samples, 22.27%)</title><rect x="0.6417%" y="165" width="22.2706%" height="15" fill="rgb(210,31,41)"/><text x="0.8917%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (38,202,934 samples, 4.40%)</title><rect x="22.9122%" y="181" width="4.3985%" height="15" fill="rgb(221,200,47)"/><text x="23.1622%" y="191.50">MIR_e..</text></g><g><title>mir_drops_elaborated_and_const_checked (38,034,772 samples, 4.38%)</title><rect x="22.9316%" y="165" width="4.3792%" height="15" fill="rgb(226,26,5)"/><text x="23.1816%" y="175.50">mir_d..</text></g><g><title>check_mod_attrs (4,084,085 samples, 0.47%)</title><rect x="27.4128%" y="165" width="0.4702%" height="15" fill="rgb(249,33,26)"/><text x="27.6628%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,611,418 samples, 0.19%)</title><rect x="28.0230%" y="165" width="0.1855%" height="15" fill="rgb(235,183,28)"/><text x="28.2730%" y="175.50"></text></g><g><title>misc_checking_1 (7,026,248 samples, 0.81%)</title><rect x="27.4097%" y="181" width="0.8090%" height="15" fill="rgb(221,5,38)"/><text x="27.6597%" y="191.50"></text></g><g><title>check_mod_intrinsics (1,486,056 samples, 0.17%)</title><rect x="28.2202%" y="149" width="0.1711%" height="15" fill="rgb(247,18,42)"/><text x="28.4702%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (4,380,379 samples, 0.50%)</title><rect x="28.2191%" y="165" width="0.5043%" height="15" fill="rgb(241,131,45)"/><text x="28.4691%" y="175.50"></text></g><g><title>check_mod_liveness (2,884,183 samples, 0.33%)</title><rect x="28.3913%" y="149" width="0.3321%" height="15" fill="rgb(249,31,29)"/><text x="28.6413%" y="159.50"></text></g><g><title>misc_checking_2 (6,143,099 samples, 0.71%)</title><rect x="28.2187%" y="181" width="0.7073%" height="15" fill="rgb(225,111,53)"/><text x="28.4687%" y="191.50"></text></g><g><title>match_checking (1,759,620 samples, 0.20%)</title><rect x="28.7234%" y="165" width="0.2026%" height="15" fill="rgb(238,160,17)"/><text x="28.9734%" y="175.50"></text></g><g><title>check_match (1,673,639 samples, 0.19%)</title><rect x="28.7333%" y="149" width="0.1927%" height="15" fill="rgb(214,148,48)"/><text x="28.9833%" y="159.50"></text></g><g><title>death_checking (3,088,624 samples, 0.36%)</title><rect x="29.0102%" y="165" width="0.3556%" height="15" fill="rgb(232,36,49)"/><text x="29.2602%" y="175.50"></text></g><g><title>mir_for_ctfe (17,620,425 samples, 2.03%)</title><rect x="43.9642%" y="85" width="2.0287%" height="15" fill="rgb(209,103,24)"/><text x="44.2142%" y="95.50">m..</text></g><g><title>eval_to_const_value_raw (137,093,724 samples, 15.78%)</title><rect x="30.2091%" y="133" width="15.7844%" height="15" fill="rgb(229,88,8)"/><text x="30.4591%" y="143.50">eval_to_const_value_raw</text></g><g><title>eval_to_const_value_raw (137,078,933 samples, 15.78%)</title><rect x="30.2108%" y="117" width="15.7827%" height="15" fill="rgb(213,181,19)"/><text x="30.4608%" y="127.50">eval_to_const_value_raw</text></g><g><title>eval_to_allocation_raw (137,047,063 samples, 15.78%)</title><rect x="30.2145%" y="101" width="15.7791%" height="15" fill="rgb(254,191,54)"/><text x="30.4645%" y="111.50">eval_to_allocation_raw</text></g><g><title>crate_lints (145,853,261 samples, 16.79%)</title><rect x="29.3662%" y="149" width="16.7930%" height="15" fill="rgb(241,83,37)"/><text x="29.6162%" y="159.50">crate_lints</text></g><g><title>type_of (1,187,075 samples, 0.14%)</title><rect x="46.0224%" y="133" width="0.1367%" height="15" fill="rgb(233,36,39)"/><text x="46.2724%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (944,263 samples, 0.11%)</title><rect x="46.0504%" y="117" width="0.1087%" height="15" fill="rgb(226,3,54)"/><text x="46.3004%" y="127.50"></text></g><g><title>lint_checking (157,070,835 samples, 18.08%)</title><rect x="29.3658%" y="165" width="18.0845%" height="15" fill="rgb(245,192,40)"/><text x="29.6158%" y="175.50">lint_checking</text></g><g><title>module_lints (11,214,384 samples, 1.29%)</title><rect x="46.1591%" y="149" width="1.2912%" height="15" fill="rgb(238,167,29)"/><text x="46.4091%" y="159.50"></text></g><g><title>lint_mod (11,207,204 samples, 1.29%)</title><rect x="46.1599%" y="133" width="1.2904%" height="15" fill="rgb(232,182,51)"/><text x="46.4099%" y="143.50"></text></g><g><title>privacy_access_levels (1,273,654 samples, 0.15%)</title><rect x="47.4503%" y="165" width="0.1466%" height="15" fill="rgb(231,60,39)"/><text x="47.7003%" y="175.50"></text></g><g><title>privacy_checking_modules (12,279,647 samples, 1.41%)</title><rect x="47.5969%" y="165" width="1.4138%" height="15" fill="rgb(208,69,12)"/><text x="47.8469%" y="175.50"></text></g><g><title>check_mod_privacy (12,272,897 samples, 1.41%)</title><rect x="47.5977%" y="149" width="1.4131%" height="15" fill="rgb(235,93,37)"/><text x="47.8477%" y="159.50"></text></g><g><title>misc_checking_3 (174,466,959 samples, 20.09%)</title><rect x="28.9260%" y="181" width="20.0874%" height="15" fill="rgb(213,116,39)"/><text x="29.1760%" y="191.50">misc_checking_3</text></g><g><title>impl_parent (2,799,481 samples, 0.32%)</title><rect x="49.6187%" y="117" width="0.3223%" height="15" fill="rgb(222,207,29)"/><text x="49.8687%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,638,360 samples, 0.19%)</title><rect x="49.7524%" y="101" width="0.1886%" height="15" fill="rgb(206,96,30)"/><text x="50.0024%" y="111.50"></text></g><g><title>impl_trait_ref (5,734,477 samples, 0.66%)</title><rect x="49.9410%" y="117" width="0.6602%" height="15" fill="rgb(218,138,4)"/><text x="50.1910%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,385,424 samples, 0.50%)</title><rect x="50.0963%" y="101" width="0.5049%" height="15" fill="rgb(250,191,14)"/><text x="50.3463%" y="111.50"></text></g><g><title>coherent_trait (14,569,331 samples, 1.68%)</title><rect x="49.0296%" y="149" width="1.6775%" height="15" fill="rgb(239,60,40)"/><text x="49.2796%" y="159.50"></text></g><g><title>specialization_graph_of (13,816,333 samples, 1.59%)</title><rect x="49.1163%" y="133" width="1.5908%" height="15" fill="rgb(206,27,48)"/><text x="49.3663%" y="143.50"></text></g><g><title>trait_impls_of (915,891 samples, 0.11%)</title><rect x="50.6016%" y="117" width="0.1055%" height="15" fill="rgb(225,35,8)"/><text x="50.8516%" y="127.50"></text></g><g><title>coherence_checking (14,685,743 samples, 1.69%)</title><rect x="49.0268%" y="165" width="1.6909%" height="15" fill="rgb(250,213,24)"/><text x="49.2768%" y="175.50"></text></g><g><title>evaluate_obligation (4,822,309 samples, 0.56%)</title><rect x="53.8395%" y="117" width="0.5552%" height="15" fill="rgb(247,123,22)"/><text x="54.0895%" y="127.50"></text></g><g><title>evaluate_obligation (1,559,771 samples, 0.18%)</title><rect x="56.3559%" y="101" width="0.1796%" height="15" fill="rgb(231,138,38)"/><text x="56.6059%" y="111.50"></text></g><g><title>typeck (17,562,194 samples, 2.02%)</title><rect x="54.6460%" y="117" width="2.0220%" height="15" fill="rgb(231,145,46)"/><text x="54.8960%" y="127.50">t..</text></g><g><title>item_bodies_checking (51,686,853 samples, 5.95%)</title><rect x="50.7244%" y="165" width="5.9510%" height="15" fill="rgb(251,118,11)"/><text x="50.9744%" y="175.50">item_bod..</text></g><g><title>typeck_item_bodies (51,682,783 samples, 5.95%)</title><rect x="50.7249%" y="149" width="5.9506%" height="15" fill="rgb(217,147,25)"/><text x="50.9749%" y="159.50">typeck_i..</text></g><g><title>typeck (51,534,142 samples, 5.93%)</title><rect x="50.7420%" y="133" width="5.9334%" height="15" fill="rgb(247,81,37)"/><text x="50.9920%" y="143.50">typeck</text></g><g><title>mir_built (5,978,256 samples, 0.69%)</title><rect x="57.2968%" y="53" width="0.6883%" height="15" fill="rgb(209,12,38)"/><text x="57.5468%" y="63.50"></text></g><g><title>typeck (4,891,435 samples, 0.56%)</title><rect x="57.4219%" y="37" width="0.5632%" height="15" fill="rgb(227,1,9)"/><text x="57.6719%" y="47.50"></text></g><g><title>mir_const (6,598,994 samples, 0.76%)</title><rect x="57.2469%" y="85" width="0.7598%" height="15" fill="rgb(248,47,43)"/><text x="57.4969%" y="95.50"></text></g><g><title>unsafety_check_result (6,349,350 samples, 0.73%)</title><rect x="57.2756%" y="69" width="0.7310%" height="15" fill="rgb(221,10,30)"/><text x="57.5256%" y="79.50"></text></g><g><title>mir_promoted (6,777,066 samples, 0.78%)</title><rect x="57.2278%" y="101" width="0.7803%" height="15" fill="rgb(210,229,1)"/><text x="57.4778%" y="111.50"></text></g><g><title>type_of (10,203,314 samples, 1.17%)</title><rect x="56.9113%" y="133" width="1.1748%" height="15" fill="rgb(222,148,37)"/><text x="57.1613%" y="143.50"></text></g><g><title>mir_borrowck (10,180,904 samples, 1.17%)</title><rect x="56.9139%" y="117" width="1.1722%" height="15" fill="rgb(234,67,33)"/><text x="57.1639%" y="127.50"></text></g><g><title>item_types_checking (148,499,200 samples, 17.10%)</title><rect x="56.6754%" y="165" width="17.0976%" height="15" fill="rgb(247,98,35)"/><text x="56.9254%" y="175.50">item_types_checking</text></g><g><title>check_mod_item_types (148,492,720 samples, 17.10%)</title><rect x="56.6762%" y="149" width="17.0969%" height="15" fill="rgb(247,138,52)"/><text x="56.9262%" y="159.50">check_mod_item_types</text></g><g><title>typeck (136,246,923 samples, 15.69%)</title><rect x="58.0861%" y="133" width="15.6869%" height="15" fill="rgb(213,79,30)"/><text x="58.3361%" y="143.50">typeck</text></g><g><title>lint_levels (2,502,127 samples, 0.29%)</title><rect x="74.0407%" y="85" width="0.2881%" height="15" fill="rgb(246,177,23)"/><text x="74.2907%" y="95.50"></text></g><g><title>named_region_map (3,027,831 samples, 0.35%)</title><rect x="73.9803%" y="117" width="0.3486%" height="15" fill="rgb(230,62,27)"/><text x="74.2303%" y="127.50"></text></g><g><title>resolve_lifetimes (2,991,921 samples, 0.34%)</title><rect x="73.9844%" y="101" width="0.3445%" height="15" fill="rgb(216,154,8)"/><text x="74.2344%" y="111.50"></text></g><g><title>generics_of (3,442,536 samples, 0.40%)</title><rect x="73.9352%" y="133" width="0.3964%" height="15" fill="rgb(244,35,45)"/><text x="74.1852%" y="143.50"></text></g><g><title>type_collecting (6,006,516 samples, 0.69%)</title><rect x="73.7732%" y="165" width="0.6916%" height="15" fill="rgb(251,115,12)"/><text x="74.0232%" y="175.50"></text></g><g><title>collect_mod_item_types (5,995,165 samples, 0.69%)</title><rect x="73.7745%" y="149" width="0.6903%" height="15" fill="rgb(240,54,50)"/><text x="74.0245%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,398,777 samples, 0.39%)</title><rect x="74.5402%" y="149" width="0.3913%" height="15" fill="rgb(233,84,52)"/><text x="74.7902%" y="159.50"></text></g><g><title>region_scope_tree (3,547,928 samples, 0.41%)</title><rect x="75.3243%" y="133" width="0.4085%" height="15" fill="rgb(207,117,47)"/><text x="75.5743%" y="143.50"></text></g><g><title>analysis (656,822,347 samples, 75.62%)</title><rect x="0.1321%" y="197" width="75.6239%" height="15" fill="rgb(249,43,39)"/><text x="0.3821%" y="207.50">analysis</text></g><g><title>type_check_crate (232,269,859 samples, 26.74%)</title><rect x="49.0134%" y="181" width="26.7426%" height="15" fill="rgb(209,38,44)"/><text x="49.2634%" y="191.50">type_check_crate</text></g><g><title>wf_checking (11,200,625 samples, 1.29%)</title><rect x="74.4665%" y="165" width="1.2896%" height="15" fill="rgb(236,212,23)"/><text x="74.7165%" y="175.50"></text></g><g><title>check_item_well_formed (7,161,670 samples, 0.82%)</title><rect x="74.9315%" y="149" width="0.8246%" height="15" fill="rgb(242,79,21)"/><text x="75.1815%" y="159.50"></text></g><g><title>AST_validation (1,775,780 samples, 0.20%)</title><rect x="75.8359%" y="181" width="0.2045%" height="15" fill="rgb(211,96,35)"/><text x="76.0859%" y="191.50"></text></g><g><title>complete_gated_feature_checking (1,378,235 samples, 0.16%)</title><rect x="76.0403%" y="181" width="0.1587%" height="15" fill="rgb(253,215,40)"/><text x="76.2903%" y="191.50"></text></g><g><title>metadata_register_crate (1,299,494 samples, 0.15%)</title><rect x="85.3505%" y="149" width="0.1496%" height="15" fill="rgb(211,81,21)"/><text x="85.6005%" y="159.50"></text></g><g><title>macro_expand_crate (84,176,996 samples, 9.69%)</title><rect x="76.2089%" y="181" width="9.6918%" height="15" fill="rgb(208,190,38)"/><text x="76.4589%" y="191.50">macro_expand_c..</text></g><g><title>expand_crate (84,149,735 samples, 9.69%)</title><rect x="76.2121%" y="165" width="9.6887%" height="15" fill="rgb(235,213,38)"/><text x="76.4621%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (3,479,849 samples, 0.40%)</title><rect x="85.5001%" y="149" width="0.4007%" height="15" fill="rgb(237,122,38)"/><text x="85.7501%" y="159.50"></text></g><g><title>late_resolve_crate (15,859,006 samples, 1.83%)</title><rect x="86.0011%" y="165" width="1.8259%" height="15" fill="rgb(244,218,35)"/><text x="86.2511%" y="175.50">l..</text></g><g><title>resolve_check_unused (1,946,252 samples, 0.22%)</title><rect x="87.8289%" y="165" width="0.2241%" height="15" fill="rgb(240,68,47)"/><text x="88.0789%" y="175.50"></text></g><g><title>resolve_postprocess (1,544,587 samples, 0.18%)</title><rect x="88.0530%" y="165" width="0.1778%" height="15" fill="rgb(210,16,53)"/><text x="88.3030%" y="175.50"></text></g><g><title>configure_and_expand (107,908,019 samples, 12.42%)</title><rect x="75.8069%" y="197" width="12.4241%" height="15" fill="rgb(235,124,12)"/><text x="76.0569%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (19,719,769 samples, 2.27%)</title><rect x="85.9605%" y="181" width="2.2705%" height="15" fill="rgb(224,169,11)"/><text x="86.2105%" y="191.50">r..</text></g><g><title>drop_ast (5,143,598 samples, 0.59%)</title><rect x="88.2310%" y="197" width="0.5922%" height="15" fill="rgb(250,166,2)"/><text x="88.4810%" y="207.50"></text></g><g><title>early_lint_checks (8,752,337 samples, 1.01%)</title><rect x="88.8250%" y="197" width="1.0077%" height="15" fill="rgb(242,216,29)"/><text x="89.0750%" y="207.50"></text></g><g><title>free_global_ctxt (12,284,416 samples, 1.41%)</title><rect x="89.8327%" y="197" width="1.4144%" height="15" fill="rgb(230,116,27)"/><text x="90.0827%" y="207.50"></text></g><g><title>generate_crate_metadata (33,824,345 samples, 3.89%)</title><rect x="91.2471%" y="197" width="3.8944%" height="15" fill="rgb(228,99,48)"/><text x="91.4971%" y="207.50">gene..</text></g><g><title>hir_lowering (30,018,584 samples, 3.46%)</title><rect x="95.1415%" y="197" width="3.4562%" height="15" fill="rgb(253,11,6)"/><text x="95.3915%" y="207.50">hir..</text></g><g><title>parse_crate (8,784,157 samples, 1.01%)</title><rect x="98.6064%" y="197" width="1.0114%" height="15" fill="rgb(247,143,39)"/><text x="98.8564%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,127,423 samples, 0.13%)</title><rect x="99.6511%" y="197" width="0.1298%" height="15" fill="rgb(236,97,10)"/><text x="99.9011%" y="207.50"></text></g><g><title>all (868,537,838 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (868,537,838 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (1,801,910 samples, 0.21%)</title><rect x="99.7925%" y="197" width="0.2075%" height="15" fill="rgb(220,129,5)"/><text x="100.0425%" y="207.50"></text></g></svg></svg>