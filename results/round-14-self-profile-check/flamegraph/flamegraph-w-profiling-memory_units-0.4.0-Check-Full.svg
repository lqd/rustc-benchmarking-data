<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (112,230 samples, 0.14%)</title><rect x="9.6730%" y="133" width="0.1450%" height="15" fill="rgb(227,0,7)"/><text x="9.9230%" y="143.50"></text></g><g><title>eval_to_const_value_raw (108,351 samples, 0.14%)</title><rect x="14.5330%" y="69" width="0.1399%" height="15" fill="rgb(217,0,24)"/><text x="14.7830%" y="79.50"></text></g><g><title>eval_to_const_value_raw (105,311 samples, 0.14%)</title><rect x="14.5370%" y="53" width="0.1360%" height="15" fill="rgb(221,193,54)"/><text x="14.7870%" y="63.50"></text></g><g><title>eval_to_allocation_raw (97,991 samples, 0.13%)</title><rect x="14.5464%" y="37" width="0.1266%" height="15" fill="rgb(248,212,6)"/><text x="14.7964%" y="47.50"></text></g><g><title>needs_drop_raw (248,733 samples, 0.32%)</title><rect x="14.7251%" y="69" width="0.3213%" height="15" fill="rgb(208,68,35)"/><text x="14.9751%" y="79.50"></text></g><g><title>is_copy_raw (155,892 samples, 0.20%)</title><rect x="14.8450%" y="53" width="0.2013%" height="15" fill="rgb(232,128,0)"/><text x="15.0950%" y="63.50"></text></g><g><title>evaluate_obligation (126,052 samples, 0.16%)</title><rect x="14.8835%" y="37" width="0.1628%" height="15" fill="rgb(207,160,47)"/><text x="15.1335%" y="47.50"></text></g><g><title>resolve_instance (112,611 samples, 0.15%)</title><rect x="15.0788%" y="69" width="0.1454%" height="15" fill="rgb(228,23,34)"/><text x="15.3288%" y="79.50"></text></g><g><title>thir_body (679,111 samples, 0.88%)</title><rect x="15.2571%" y="69" width="0.8771%" height="15" fill="rgb(218,30,26)"/><text x="15.5071%" y="79.50"></text></g><g><title>mir_const (4,301,537 samples, 5.56%)</title><rect x="10.5971%" y="117" width="5.5558%" height="15" fill="rgb(220,122,19)"/><text x="10.8471%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (3,637,670 samples, 4.70%)</title><rect x="11.4545%" y="101" width="4.6984%" height="15" fill="rgb(250,228,42)"/><text x="11.7045%" y="111.50">unsaf..</text></g><g><title>mir_built (3,273,758 samples, 4.23%)</title><rect x="11.9246%" y="85" width="4.2283%" height="15" fill="rgb(240,193,28)"/><text x="12.1746%" y="95.50">mir_b..</text></g><g><title>mir_const (116,171 samples, 0.15%)</title><rect x="16.3447%" y="101" width="0.1500%" height="15" fill="rgb(216,20,37)"/><text x="16.5947%" y="111.50"></text></g><g><title>unsafety_check_result (88,671 samples, 0.11%)</title><rect x="16.3802%" y="85" width="0.1145%" height="15" fill="rgb(206,188,39)"/><text x="16.6302%" y="95.50"></text></g><g><title>mir_promoted (5,155,496 samples, 6.66%)</title><rect x="9.8391%" y="133" width="6.6588%" height="15" fill="rgb(217,207,13)"/><text x="10.0891%" y="143.50">mir_promo..</text></g><g><title>mir_const_qualif (267,051 samples, 0.34%)</title><rect x="16.1529%" y="117" width="0.3449%" height="15" fill="rgb(231,73,38)"/><text x="16.4029%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (149,132 samples, 0.19%)</title><rect x="16.4995%" y="133" width="0.1926%" height="15" fill="rgb(225,20,46)"/><text x="16.7495%" y="143.50"></text></g><g><title>type_op_prove_predicate (264,771 samples, 0.34%)</title><rect x="16.6921%" y="133" width="0.3420%" height="15" fill="rgb(210,31,41)"/><text x="16.9421%" y="143.50"></text></g><g><title>MIR_borrow_checking (12,211,015 samples, 15.77%)</title><rect x="1.2650%" y="165" width="15.7716%" height="15" fill="rgb(221,200,47)"/><text x="1.5150%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,095,265 samples, 15.62%)</title><rect x="1.4145%" y="149" width="15.6221%" height="15" fill="rgb(226,26,5)"/><text x="1.6645%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (173,342 samples, 0.22%)</title><rect x="17.0366%" y="165" width="0.2239%" height="15" fill="rgb(249,33,26)"/><text x="17.2866%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (136,662 samples, 0.18%)</title><rect x="17.0840%" y="149" width="0.1765%" height="15" fill="rgb(235,183,28)"/><text x="17.3340%" y="159.50"></text></g><g><title>hir_module_items (230,794 samples, 0.30%)</title><rect x="17.2605%" y="165" width="0.2981%" height="15" fill="rgb(221,5,38)"/><text x="17.5105%" y="175.50"></text></g><g><title>get_lang_items (83,420 samples, 0.11%)</title><rect x="17.9558%" y="117" width="0.1077%" height="15" fill="rgb(247,18,42)"/><text x="18.2058%" y="127.50"></text></g><g><title>codegen_fn_attrs (93,831 samples, 0.12%)</title><rect x="18.2012%" y="101" width="0.1212%" height="15" fill="rgb(241,131,45)"/><text x="18.4512%" y="111.50"></text></g><g><title>should_inherit_track_caller (207,012 samples, 0.27%)</title><rect x="18.0636%" y="117" width="0.2674%" height="15" fill="rgb(249,31,29)"/><text x="18.3136%" y="127.50"></text></g><g><title>codegen_fn_attrs (387,773 samples, 0.50%)</title><rect x="17.8564%" y="133" width="0.5008%" height="15" fill="rgb(225,111,53)"/><text x="18.1064%" y="143.50"></text></g><g><title>check_mod_attrs (598,337 samples, 0.77%)</title><rect x="17.5846%" y="149" width="0.7728%" height="15" fill="rgb(238,160,17)"/><text x="17.8346%" y="159.50"></text></g><g><title>check_mod_const_bodies (97,301 samples, 0.13%)</title><rect x="18.3574%" y="149" width="0.1257%" height="15" fill="rgb(214,148,48)"/><text x="18.6074%" y="159.50"></text></g><g><title>lookup_deprecation_entry (98,261 samples, 0.13%)</title><rect x="18.7414%" y="133" width="0.1269%" height="15" fill="rgb(232,36,49)"/><text x="18.9914%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (297,694 samples, 0.38%)</title><rect x="18.5564%" y="149" width="0.3845%" height="15" fill="rgb(209,103,24)"/><text x="18.8064%" y="159.50"></text></g><g><title>misc_checking_1 (1,119,393 samples, 1.45%)</title><rect x="17.5591%" y="165" width="1.4458%" height="15" fill="rgb(229,88,8)"/><text x="17.8091%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (177,752 samples, 0.23%)</title><rect x="19.0067%" y="149" width="0.2296%" height="15" fill="rgb(213,181,19)"/><text x="19.2567%" y="159.50"></text></g><g><title>check_mod_liveness (118,352 samples, 0.15%)</title><rect x="19.0834%" y="133" width="0.1529%" height="15" fill="rgb(254,191,54)"/><text x="19.3334%" y="143.50"></text></g><g><title>misc_checking_2 (586,687 samples, 0.76%)</title><rect x="19.0049%" y="165" width="0.7578%" height="15" fill="rgb(241,83,37)"/><text x="19.2549%" y="175.50"></text></g><g><title>match_checking (407,565 samples, 0.53%)</title><rect x="19.2362%" y="149" width="0.5264%" height="15" fill="rgb(233,36,39)"/><text x="19.4862%" y="159.50"></text></g><g><title>check_match (379,425 samples, 0.49%)</title><rect x="19.2726%" y="133" width="0.4901%" height="15" fill="rgb(226,3,54)"/><text x="19.5226%" y="143.50"></text></g><g><title>check_private_in_public (181,822 samples, 0.23%)</title><rect x="19.7738%" y="149" width="0.2348%" height="15" fill="rgb(245,192,40)"/><text x="20.0238%" y="159.50"></text></g><g><title>death_checking (465,275 samples, 0.60%)</title><rect x="20.0087%" y="149" width="0.6009%" height="15" fill="rgb(238,167,29)"/><text x="20.2587%" y="159.50"></text></g><g><title>item_attrs (167,642 samples, 0.22%)</title><rect x="20.3931%" y="133" width="0.2165%" height="15" fill="rgb(232,182,51)"/><text x="20.6431%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (165,662 samples, 0.21%)</title><rect x="20.3956%" y="117" width="0.2140%" height="15" fill="rgb(231,60,39)"/><text x="20.6456%" y="127.50"></text></g><g><title>param_env (106,151 samples, 0.14%)</title><rect x="21.0780%" y="117" width="0.1371%" height="15" fill="rgb(208,69,12)"/><text x="21.3280%" y="127.50"></text></g><g><title>crate_lints (796,759 samples, 1.03%)</title><rect x="20.6114%" y="133" width="1.0291%" height="15" fill="rgb(235,93,37)"/><text x="20.8614%" y="143.50"></text></g><g><title>type_of (329,393 samples, 0.43%)</title><rect x="21.2151%" y="117" width="0.4254%" height="15" fill="rgb(213,116,39)"/><text x="21.4651%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (251,261 samples, 0.32%)</title><rect x="21.3160%" y="101" width="0.3245%" height="15" fill="rgb(222,207,29)"/><text x="21.5660%" y="111.50"></text></g><g><title>lint_checking (1,021,502 samples, 1.32%)</title><rect x="20.6096%" y="149" width="1.3194%" height="15" fill="rgb(206,96,30)"/><text x="20.8596%" y="159.50"></text></g><g><title>module_lints (223,323 samples, 0.29%)</title><rect x="21.6405%" y="133" width="0.2884%" height="15" fill="rgb(218,138,4)"/><text x="21.8905%" y="143.50"></text></g><g><title>lint_mod (220,263 samples, 0.28%)</title><rect x="21.6445%" y="117" width="0.2845%" height="15" fill="rgb(250,191,14)"/><text x="21.8945%" y="127.50"></text></g><g><title>privacy_access_levels (262,993 samples, 0.34%)</title><rect x="21.9290%" y="149" width="0.3397%" height="15" fill="rgb(239,60,40)"/><text x="22.1790%" y="159.50"></text></g><g><title>privacy_checking_modules (504,185 samples, 0.65%)</title><rect x="22.2686%" y="149" width="0.6512%" height="15" fill="rgb(206,27,48)"/><text x="22.5186%" y="159.50"></text></g><g><title>check_mod_privacy (500,985 samples, 0.65%)</title><rect x="22.2728%" y="133" width="0.6471%" height="15" fill="rgb(225,35,8)"/><text x="22.5228%" y="143.50"></text></g><g><title>misc_checking_3 (2,462,777 samples, 3.18%)</title><rect x="19.7627%" y="165" width="3.1809%" height="15" fill="rgb(250,213,24)"/><text x="20.0127%" y="175.50">mis..</text></g><g><title>is_copy_raw (92,991 samples, 0.12%)</title><rect x="23.1498%" y="117" width="0.1201%" height="15" fill="rgb(247,123,22)"/><text x="23.3998%" y="127.50"></text></g><g><title>impl_parent (1,479,578 samples, 1.91%)</title><rect x="26.1625%" y="101" width="1.9110%" height="15" fill="rgb(231,138,38)"/><text x="26.4125%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (674,510 samples, 0.87%)</title><rect x="27.2023%" y="85" width="0.8712%" height="15" fill="rgb(231,145,46)"/><text x="27.4523%" y="95.50"></text></g><g><title>impl_trait_ref (2,370,134 samples, 3.06%)</title><rect x="28.0735%" y="101" width="3.0612%" height="15" fill="rgb(251,118,11)"/><text x="28.3235%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,801,634 samples, 2.33%)</title><rect x="28.8078%" y="85" width="2.3270%" height="15" fill="rgb(217,147,25)"/><text x="29.0578%" y="95.50">m..</text></g><g><title>trait_impls_of (391,014 samples, 0.51%)</title><rect x="31.1627%" y="101" width="0.5050%" height="15" fill="rgb(247,81,37)"/><text x="31.4127%" y="111.50"></text></g><g><title>implementations_of_trait (114,032 samples, 0.15%)</title><rect x="31.5204%" y="85" width="0.1473%" height="15" fill="rgb(209,12,38)"/><text x="31.7704%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (103,501 samples, 0.13%)</title><rect x="31.5340%" y="69" width="0.1337%" height="15" fill="rgb(227,1,9)"/><text x="31.7840%" y="79.50"></text></g><g><title>coherent_trait (6,688,704 samples, 8.64%)</title><rect x="23.0296%" y="133" width="8.6390%" height="15" fill="rgb(248,47,43)"/><text x="23.2796%" y="143.50">coherent_tra..</text></g><g><title>specialization_graph_of (6,459,022 samples, 8.34%)</title><rect x="23.3262%" y="117" width="8.3424%" height="15" fill="rgb(221,10,30)"/><text x="23.5762%" y="127.50">specializati..</text></g><g><title>coherence_checking (6,765,005 samples, 8.74%)</title><rect x="23.0031%" y="149" width="8.7376%" height="15" fill="rgb(210,229,1)"/><text x="23.2531%" y="159.50">coherence_ch..</text></g><g><title>dropck_outlives (107,481 samples, 0.14%)</title><rect x="44.1286%" y="101" width="0.1388%" height="15" fill="rgb(222,148,37)"/><text x="44.3786%" y="111.50"></text></g><g><title>specializes (210,913 samples, 0.27%)</title><rect x="45.7482%" y="85" width="0.2724%" height="15" fill="rgb(234,67,33)"/><text x="45.9982%" y="95.50"></text></g><g><title>param_env (184,943 samples, 0.24%)</title><rect x="45.7818%" y="69" width="0.2389%" height="15" fill="rgb(247,98,35)"/><text x="46.0318%" y="79.50"></text></g><g><title>def_span (149,732 samples, 0.19%)</title><rect x="45.8273%" y="53" width="0.1934%" height="15" fill="rgb(247,138,52)"/><text x="46.0773%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (146,602 samples, 0.19%)</title><rect x="45.8313%" y="37" width="0.1893%" height="15" fill="rgb(213,79,30)"/><text x="46.0813%" y="47.50"></text></g><g><title>evaluate_obligation (1,360,029 samples, 1.76%)</title><rect x="44.2674%" y="101" width="1.7566%" height="15" fill="rgb(246,177,23)"/><text x="44.5174%" y="111.50"></text></g><g><title>item_attrs (78,040 samples, 0.10%)</title><rect x="46.1320%" y="101" width="0.1008%" height="15" fill="rgb(230,62,27)"/><text x="46.3820%" y="111.50"></text></g><g><title>method_autoderef_steps (79,361 samples, 0.10%)</title><rect x="46.2486%" y="101" width="0.1025%" height="15" fill="rgb(216,154,8)"/><text x="46.4986%" y="111.50"></text></g><g><title>object_safety_violations (132,111 samples, 0.17%)</title><rect x="46.3511%" y="101" width="0.1706%" height="15" fill="rgb(244,35,45)"/><text x="46.6011%" y="111.50"></text></g><g><title>item_bodies_checking (11,584,769 samples, 14.96%)</title><rect x="31.8005%" y="149" width="14.9627%" height="15" fill="rgb(251,115,12)"/><text x="32.0505%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (11,582,489 samples, 14.96%)</title><rect x="31.8035%" y="133" width="14.9598%" height="15" fill="rgb(240,54,50)"/><text x="32.0535%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (11,503,026 samples, 14.86%)</title><rect x="31.9061%" y="117" width="14.8571%" height="15" fill="rgb(233,84,52)"/><text x="32.1561%" y="127.50">typeck</text></g><g><title>impl_item_implementor_ids (100,352 samples, 0.13%)</title><rect x="49.1363%" y="117" width="0.1296%" height="15" fill="rgb(207,117,47)"/><text x="49.3863%" y="127.50"></text></g><g><title>item_types_checking (1,997,472 samples, 2.58%)</title><rect x="46.7633%" y="149" width="2.5799%" height="15" fill="rgb(249,43,39)"/><text x="47.0133%" y="159.50">it..</text></g><g><title>check_mod_item_types (1,993,612 samples, 2.57%)</title><rect x="46.7682%" y="133" width="2.5749%" height="15" fill="rgb(209,38,44)"/><text x="47.0182%" y="143.50">ch..</text></g><g><title>fn_sig (311,541 samples, 0.40%)</title><rect x="49.7414%" y="117" width="0.4024%" height="15" fill="rgb(236,212,23)"/><text x="49.9914%" y="127.50"></text></g><g><title>named_region_map (321,685 samples, 0.42%)</title><rect x="50.3216%" y="101" width="0.4155%" height="15" fill="rgb(242,79,21)"/><text x="50.5716%" y="111.50"></text></g><g><title>resolve_lifetimes (303,275 samples, 0.39%)</title><rect x="50.3454%" y="85" width="0.3917%" height="15" fill="rgb(211,96,35)"/><text x="50.5954%" y="95.50"></text></g><g><title>lint_levels (118,192 samples, 0.15%)</title><rect x="50.5845%" y="69" width="0.1527%" height="15" fill="rgb(253,215,40)"/><text x="50.8345%" y="79.50"></text></g><g><title>generics_of (483,876 samples, 0.62%)</title><rect x="50.1437%" y="117" width="0.6250%" height="15" fill="rgb(211,81,21)"/><text x="50.3937%" y="127.50"></text></g><g><title>impl_trait_ref (111,003 samples, 0.14%)</title><rect x="50.7687%" y="117" width="0.1434%" height="15" fill="rgb(208,190,38)"/><text x="51.0187%" y="127.50"></text></g><g><title>late_bound_vars_map (143,181 samples, 0.18%)</title><rect x="51.4129%" y="69" width="0.1849%" height="15" fill="rgb(235,213,38)"/><text x="51.6629%" y="79.50"></text></g><g><title>resolve_lifetimes (129,831 samples, 0.17%)</title><rect x="51.4301%" y="53" width="0.1677%" height="15" fill="rgb(237,122,38)"/><text x="51.6801%" y="63.50"></text></g><g><title>explicit_predicates_of (373,353 samples, 0.48%)</title><rect x="51.1374%" y="85" width="0.4822%" height="15" fill="rgb(244,218,35)"/><text x="51.3874%" y="95.50"></text></g><g><title>predicates_of (603,907 samples, 0.78%)</title><rect x="50.9121%" y="117" width="0.7800%" height="15" fill="rgb(240,68,47)"/><text x="51.1621%" y="127.50"></text></g><g><title>predicates_defined_on (540,495 samples, 0.70%)</title><rect x="50.9940%" y="101" width="0.6981%" height="15" fill="rgb(210,16,53)"/><text x="51.2440%" y="111.50"></text></g><g><title>type_collecting (1,926,642 samples, 2.49%)</title><rect x="49.3445%" y="149" width="2.4884%" height="15" fill="rgb(235,124,12)"/><text x="49.5945%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (1,917,622 samples, 2.48%)</title><rect x="49.3562%" y="133" width="2.4768%" height="15" fill="rgb(224,169,11)"/><text x="49.6062%" y="143.50">co..</text></g><g><title>type_of (82,000 samples, 0.11%)</title><rect x="51.7270%" y="117" width="0.1059%" height="15" fill="rgb(250,166,2)"/><text x="51.9770%" y="127.50"></text></g><g><title>evaluate_obligation (205,393 samples, 0.27%)</title><rect x="54.2726%" y="117" width="0.2653%" height="15" fill="rgb(242,216,29)"/><text x="54.5226%" y="127.50"></text></g><g><title>param_env (405,155 samples, 0.52%)</title><rect x="54.6229%" y="117" width="0.5233%" height="15" fill="rgb(230,116,27)"/><text x="54.8729%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,702,328 samples, 3.49%)</title><rect x="52.0982%" y="133" width="3.4903%" height="15" fill="rgb(228,99,48)"/><text x="52.3482%" y="143.50">che..</text></g><g><title>region_scope_tree (317,595 samples, 0.41%)</title><rect x="55.1783%" y="117" width="0.4102%" height="15" fill="rgb(253,11,6)"/><text x="55.4283%" y="127.50"></text></g><g><title>evaluate_obligation (501,094 samples, 0.65%)</title><rect x="58.0348%" y="117" width="0.6472%" height="15" fill="rgb(247,143,39)"/><text x="58.2848%" y="127.50"></text></g><g><title>implied_outlives_bounds (77,851 samples, 0.10%)</title><rect x="58.7236%" y="117" width="0.1006%" height="15" fill="rgb(236,97,10)"/><text x="58.9736%" y="127.50"></text></g><g><title>param_env (355,174 samples, 0.46%)</title><rect x="58.8241%" y="117" width="0.4587%" height="15" fill="rgb(233,208,19)"/><text x="59.0741%" y="127.50"></text></g><g><title>predicates_of (92,781 samples, 0.12%)</title><rect x="59.2828%" y="117" width="0.1198%" height="15" fill="rgb(216,164,2)"/><text x="59.5328%" y="127.50"></text></g><g><title>check_item_well_formed (3,062,814 samples, 3.96%)</title><rect x="55.5885%" y="133" width="3.9559%" height="15" fill="rgb(220,129,5)"/><text x="55.8385%" y="143.50">chec..</text></g><g><title>analysis (45,475,874 samples, 58.74%)</title><rect x="0.8791%" y="181" width="58.7360%" height="15" fill="rgb(242,17,10)"/><text x="1.1291%" y="191.50">analysis</text></g><g><title>type_check_crate (28,392,685 samples, 36.67%)</title><rect x="22.9435%" y="165" width="36.6716%" height="15" fill="rgb(242,107,0)"/><text x="23.1935%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,020,777 samples, 7.78%)</title><rect x="51.8388%" y="149" width="7.7763%" height="15" fill="rgb(251,28,31)"/><text x="52.0888%" y="159.50">wf_checking</text></g><g><title>codegen_crate (304,474 samples, 0.39%)</title><rect x="59.6259%" y="181" width="0.3933%" height="15" fill="rgb(233,223,10)"/><text x="59.8759%" y="191.50"></text></g><g><title>AST_validation (216,302 samples, 0.28%)</title><rect x="60.2597%" y="165" width="0.2794%" height="15" fill="rgb(215,21,27)"/><text x="60.5097%" y="175.50"></text></g><g><title>complete_gated_feature_checking (106,041 samples, 0.14%)</title><rect x="60.5390%" y="165" width="0.1370%" height="15" fill="rgb(232,23,21)"/><text x="60.7890%" y="175.50"></text></g><g><title>metadata_load_macro (99,591 samples, 0.13%)</title><rect x="79.2639%" y="133" width="0.1286%" height="15" fill="rgb(244,5,23)"/><text x="79.5139%" y="143.50"></text></g><g><title>macro_expand_crate (14,605,982 samples, 18.86%)</title><rect x="60.7656%" y="165" width="18.8649%" height="15" fill="rgb(226,81,46)"/><text x="61.0156%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (14,585,422 samples, 18.84%)</title><rect x="60.7921%" y="149" width="18.8383%" height="15" fill="rgb(247,70,30)"/><text x="61.0421%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (184,202 samples, 0.24%)</title><rect x="79.3925%" y="133" width="0.2379%" height="15" fill="rgb(212,68,19)"/><text x="79.6425%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (133,762 samples, 0.17%)</title><rect x="79.6351%" y="165" width="0.1728%" height="15" fill="rgb(240,187,13)"/><text x="79.8851%" y="175.50"></text></g><g><title>finalize_macro_resolutions (551,056 samples, 0.71%)</title><rect x="79.8659%" y="149" width="0.7117%" height="15" fill="rgb(223,113,26)"/><text x="80.1159%" y="159.50"></text></g><g><title>late_resolve_crate (3,093,245 samples, 4.00%)</title><rect x="80.5776%" y="149" width="3.9952%" height="15" fill="rgb(206,192,2)"/><text x="80.8276%" y="159.50">late..</text></g><g><title>configure_and_expand (19,169,272 samples, 24.76%)</title><rect x="60.0191%" y="181" width="24.7587%" height="15" fill="rgb(241,108,4)"/><text x="60.2691%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,848,003 samples, 4.97%)</title><rect x="79.8078%" y="165" width="4.9700%" height="15" fill="rgb(247,173,49)"/><text x="80.0578%" y="175.50">resolv..</text></g><g><title>drop_ast (265,053 samples, 0.34%)</title><rect x="84.7779%" y="181" width="0.3423%" height="15" fill="rgb(224,114,35)"/><text x="85.0279%" y="191.50"></text></g><g><title>early_lint_checks (514,135 samples, 0.66%)</title><rect x="85.1372%" y="181" width="0.6640%" height="15" fill="rgb(245,159,27)"/><text x="85.3872%" y="191.50"></text></g><g><title>free_global_ctxt (1,700,679 samples, 2.20%)</title><rect x="85.8012%" y="181" width="2.1966%" height="15" fill="rgb(245,172,44)"/><text x="86.0512%" y="191.50">f..</text></g><g><title>mir_for_ctfe (160,712 samples, 0.21%)</title><rect x="89.6714%" y="165" width="0.2076%" height="15" fill="rgb(236,23,11)"/><text x="89.9214%" y="175.50"></text></g><g><title>generate_crate_metadata (1,525,047 samples, 1.97%)</title><rect x="87.9978%" y="181" width="1.9697%" height="15" fill="rgb(205,117,38)"/><text x="88.2478%" y="191.50">g..</text></g><g><title>hir_lowering (5,407,310 samples, 6.98%)</title><rect x="89.9675%" y="181" width="6.9840%" height="15" fill="rgb(237,72,25)"/><text x="90.2175%" y="191.50">hir_lower..</text></g><g><title>parse_crate (1,083,172 samples, 1.40%)</title><rect x="97.0159%" y="181" width="1.3990%" height="15" fill="rgb(244,70,9)"/><text x="97.2659%" y="191.50"></text></g><g><title>prepare_outputs (270,363 samples, 0.35%)</title><rect x="98.4246%" y="181" width="0.3492%" height="15" fill="rgb(217,125,39)"/><text x="98.6746%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (523,716 samples, 0.68%)</title><rect x="98.7738%" y="181" width="0.6764%" height="15" fill="rgb(235,36,10)"/><text x="99.0238%" y="191.50"></text></g><g><title>setup_global_ctxt (104,281 samples, 0.13%)</title><rect x="99.4647%" y="181" width="0.1347%" height="15" fill="rgb(251,123,47)"/><text x="99.7147%" y="191.50"></text></g><g><title>all (77,424,239 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (77,424,239 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (310,163 samples, 0.40%)</title><rect x="99.5994%" y="181" width="0.4006%" height="15" fill="rgb(211,50,8)"/><text x="99.8494%" y="191.50"></text></g></svg></svg>