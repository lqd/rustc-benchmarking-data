<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (547,328 samples, 0.26%)</title><rect x="14.4869%" y="117" width="0.2586%" height="15" fill="rgb(227,0,7)"/><text x="14.7369%" y="127.50"></text></g><g><title>item_attrs (315,723 samples, 0.15%)</title><rect x="15.2746%" y="85" width="0.1492%" height="15" fill="rgb(217,0,24)"/><text x="15.5246%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (304,023 samples, 0.14%)</title><rect x="15.2801%" y="69" width="0.1436%" height="15" fill="rgb(221,193,54)"/><text x="15.5301%" y="79.50"></text></g><g><title>codegen_fn_attrs (473,463 samples, 0.22%)</title><rect x="15.2119%" y="101" width="0.2237%" height="15" fill="rgb(248,212,6)"/><text x="15.4619%" y="111.50"></text></g><g><title>adt_drop_tys (273,032 samples, 0.13%)</title><rect x="18.3762%" y="69" width="0.1290%" height="15" fill="rgb(208,68,35)"/><text x="18.6262%" y="79.50"></text></g><g><title>is_copy_raw (2,045,444 samples, 0.97%)</title><rect x="18.5053%" y="69" width="0.9664%" height="15" fill="rgb(232,128,0)"/><text x="18.7553%" y="79.50"></text></g><g><title>evaluate_obligation (1,693,110 samples, 0.80%)</title><rect x="18.6717%" y="53" width="0.8000%" height="15" fill="rgb(207,160,47)"/><text x="18.9217%" y="63.50"></text></g><g><title>needs_drop_raw (2,591,130 samples, 1.22%)</title><rect x="18.2490%" y="85" width="1.2243%" height="15" fill="rgb(228,23,34)"/><text x="18.4990%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (605,160 samples, 0.29%)</title><rect x="19.7101%" y="69" width="0.2859%" height="15" fill="rgb(218,30,26)"/><text x="19.9601%" y="79.50"></text></g><g><title>impl_parent (215,611 samples, 0.10%)</title><rect x="20.2411%" y="53" width="0.1019%" height="15" fill="rgb(220,122,19)"/><text x="20.4911%" y="63.50"></text></g><g><title>specialization_graph_of (1,083,731 samples, 0.51%)</title><rect x="20.0750%" y="69" width="0.5120%" height="15" fill="rgb(250,228,42)"/><text x="20.3250%" y="79.50"></text></g><g><title>impl_trait_ref (516,489 samples, 0.24%)</title><rect x="20.3430%" y="53" width="0.2440%" height="15" fill="rgb(240,193,28)"/><text x="20.5930%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (448,269 samples, 0.21%)</title><rect x="20.3752%" y="37" width="0.2118%" height="15" fill="rgb(216,20,37)"/><text x="20.6252%" y="47.50"></text></g><g><title>resolve_instance (2,464,108 samples, 1.16%)</title><rect x="19.4861%" y="85" width="1.1643%" height="15" fill="rgb(206,188,39)"/><text x="19.7361%" y="95.50"></text></g><g><title>thir_body (2,156,998 samples, 1.02%)</title><rect x="20.6763%" y="85" width="1.0192%" height="15" fill="rgb(217,207,13)"/><text x="20.9263%" y="95.50"></text></g><g><title>mir_const (17,112,750 samples, 8.09%)</title><rect x="13.6440%" y="133" width="8.0856%" height="15" fill="rgb(231,73,38)"/><text x="13.8940%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (14,781,439 samples, 6.98%)</title><rect x="14.7455%" y="117" width="6.9840%" height="15" fill="rgb(225,20,46)"/><text x="14.9955%" y="127.50">unsafety_..</text></g><g><title>mir_built (13,320,947 samples, 6.29%)</title><rect x="15.4356%" y="101" width="6.2940%" height="15" fill="rgb(210,31,41)"/><text x="15.6856%" y="111.50">mir_built</text></g><g><title>mir_promoted (19,017,895 samples, 8.99%)</title><rect x="12.8406%" y="149" width="8.9857%" height="15" fill="rgb(221,200,47)"/><text x="13.0906%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,624,937 samples, 0.77%)</title><rect x="21.8263%" y="149" width="0.7678%" height="15" fill="rgb(226,26,5)"/><text x="22.0763%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,037,289 samples, 0.49%)</title><rect x="22.5941%" y="149" width="0.4901%" height="15" fill="rgb(249,33,26)"/><text x="22.8441%" y="159.50"></text></g><g><title>normalize_projection_ty (704,005 samples, 0.33%)</title><rect x="22.7516%" y="133" width="0.3326%" height="15" fill="rgb(235,183,28)"/><text x="23.0016%" y="143.50"></text></g><g><title>type_op_normalize_predicate (366,705 samples, 0.17%)</title><rect x="23.0842%" y="149" width="0.1733%" height="15" fill="rgb(221,5,38)"/><text x="23.3342%" y="159.50"></text></g><g><title>normalize_projection_ty (212,423 samples, 0.10%)</title><rect x="23.1571%" y="133" width="0.1004%" height="15" fill="rgb(247,18,42)"/><text x="23.4071%" y="143.50"></text></g><g><title>type_op_normalize_ty (488,676 samples, 0.23%)</title><rect x="23.2575%" y="149" width="0.2309%" height="15" fill="rgb(241,131,45)"/><text x="23.5075%" y="159.50"></text></g><g><title>normalize_projection_ty (329,922 samples, 0.16%)</title><rect x="23.3325%" y="133" width="0.1559%" height="15" fill="rgb(249,31,29)"/><text x="23.5825%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,765,961 samples, 2.25%)</title><rect x="23.4884%" y="149" width="2.2519%" height="15" fill="rgb(225,111,53)"/><text x="23.7384%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (53,309,014 samples, 25.19%)</title><rect x="0.5600%" y="181" width="25.1878%" height="15" fill="rgb(238,160,17)"/><text x="0.8100%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (53,041,140 samples, 25.06%)</title><rect x="0.6866%" y="165" width="25.0613%" height="15" fill="rgb(214,148,48)"/><text x="0.9366%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (225,022 samples, 0.11%)</title><rect x="25.7479%" y="181" width="0.1063%" height="15" fill="rgb(232,36,49)"/><text x="25.9979%" y="191.50"></text></g><g><title>hir_module_items (351,264 samples, 0.17%)</title><rect x="25.8542%" y="181" width="0.1660%" height="15" fill="rgb(209,103,24)"/><text x="26.1042%" y="191.50"></text></g><g><title>codegen_fn_attrs (395,315 samples, 0.19%)</title><rect x="26.3695%" y="117" width="0.1868%" height="15" fill="rgb(229,88,8)"/><text x="26.6195%" y="127.50"></text></g><g><title>codegen_fn_attrs (680,929 samples, 0.32%)</title><rect x="26.2413%" y="149" width="0.3217%" height="15" fill="rgb(213,181,19)"/><text x="26.4913%" y="159.50"></text></g><g><title>should_inherit_track_caller (598,517 samples, 0.28%)</title><rect x="26.2802%" y="133" width="0.2828%" height="15" fill="rgb(254,191,54)"/><text x="26.5302%" y="143.50"></text></g><g><title>check_mod_attrs (1,118,352 samples, 0.53%)</title><rect x="26.0346%" y="165" width="0.5284%" height="15" fill="rgb(241,83,37)"/><text x="26.2846%" y="175.50"></text></g><g><title>check_mod_const_bodies (252,094 samples, 0.12%)</title><rect x="26.5631%" y="165" width="0.1191%" height="15" fill="rgb(233,36,39)"/><text x="26.8131%" y="175.50"></text></g><g><title>lint_levels (297,974 samples, 0.14%)</title><rect x="26.9266%" y="149" width="0.1408%" height="15" fill="rgb(226,3,54)"/><text x="27.1766%" y="159.50"></text></g><g><title>lookup_deprecation_entry (290,524 samples, 0.14%)</title><rect x="27.0674%" y="149" width="0.1373%" height="15" fill="rgb(245,192,40)"/><text x="27.3174%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,069,052 samples, 0.51%)</title><rect x="26.7596%" y="165" width="0.5051%" height="15" fill="rgb(238,167,29)"/><text x="27.0096%" y="175.50"></text></g><g><title>misc_checking_1 (2,731,870 samples, 1.29%)</title><rect x="26.0205%" y="181" width="1.2908%" height="15" fill="rgb(232,182,51)"/><text x="26.2705%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (923,660 samples, 0.44%)</title><rect x="27.3120%" y="165" width="0.4364%" height="15" fill="rgb(231,60,39)"/><text x="27.5620%" y="175.50"></text></g><g><title>check_mod_liveness (736,767 samples, 0.35%)</title><rect x="27.4003%" y="149" width="0.3481%" height="15" fill="rgb(208,69,12)"/><text x="27.6503%" y="159.50"></text></g><g><title>misc_checking_2 (1,991,502 samples, 0.94%)</title><rect x="27.3112%" y="181" width="0.9410%" height="15" fill="rgb(235,93,37)"/><text x="27.5612%" y="191.50"></text></g><g><title>match_checking (1,066,192 samples, 0.50%)</title><rect x="27.7484%" y="165" width="0.5038%" height="15" fill="rgb(213,116,39)"/><text x="27.9984%" y="175.50"></text></g><g><title>check_match (999,501 samples, 0.47%)</title><rect x="27.7799%" y="149" width="0.4723%" height="15" fill="rgb(222,207,29)"/><text x="28.0299%" y="159.50"></text></g><g><title>check_private_in_public (494,265 samples, 0.23%)</title><rect x="28.2569%" y="165" width="0.2335%" height="15" fill="rgb(206,96,30)"/><text x="28.5069%" y="175.50"></text></g><g><title>death_checking (1,023,761 samples, 0.48%)</title><rect x="28.4904%" y="165" width="0.4837%" height="15" fill="rgb(218,138,4)"/><text x="28.7404%" y="175.50"></text></g><g><title>item_attrs (211,812 samples, 0.10%)</title><rect x="28.8741%" y="149" width="0.1001%" height="15" fill="rgb(250,191,14)"/><text x="29.1241%" y="159.50"></text></g><g><title>eval_to_const_value_raw (228,602 samples, 0.11%)</title><rect x="29.5378%" y="133" width="0.1080%" height="15" fill="rgb(239,60,40)"/><text x="29.7878%" y="143.50"></text></g><g><title>eval_to_const_value_raw (225,942 samples, 0.11%)</title><rect x="29.5391%" y="117" width="0.1068%" height="15" fill="rgb(206,27,48)"/><text x="29.7891%" y="127.50"></text></g><g><title>eval_to_allocation_raw (218,521 samples, 0.10%)</title><rect x="29.5426%" y="101" width="0.1032%" height="15" fill="rgb(225,35,8)"/><text x="29.7926%" y="111.50"></text></g><g><title>param_env (631,878 samples, 0.30%)</title><rect x="29.6458%" y="133" width="0.2986%" height="15" fill="rgb(250,213,24)"/><text x="29.8958%" y="143.50"></text></g><g><title>predicates_of (282,681 samples, 0.13%)</title><rect x="29.8108%" y="117" width="0.1336%" height="15" fill="rgb(247,123,22)"/><text x="30.0608%" y="127.50"></text></g><g><title>predicates_defined_on (225,551 samples, 0.11%)</title><rect x="29.8378%" y="101" width="0.1066%" height="15" fill="rgb(231,138,38)"/><text x="30.0878%" y="111.50"></text></g><g><title>crate_lints (3,172,985 samples, 1.50%)</title><rect x="28.9748%" y="149" width="1.4992%" height="15" fill="rgb(231,145,46)"/><text x="29.2248%" y="159.50"></text></g><g><title>type_of (1,106,542 samples, 0.52%)</title><rect x="29.9512%" y="133" width="0.5228%" height="15" fill="rgb(251,118,11)"/><text x="30.2012%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (873,086 samples, 0.41%)</title><rect x="30.0615%" y="117" width="0.4125%" height="15" fill="rgb(217,147,25)"/><text x="30.3115%" y="127.50"></text></g><g><title>lint_checking (4,104,935 samples, 1.94%)</title><rect x="28.9742%" y="165" width="1.9395%" height="15" fill="rgb(247,81,37)"/><text x="29.2242%" y="175.50">l..</text></g><g><title>module_lints (930,510 samples, 0.44%)</title><rect x="30.4740%" y="149" width="0.4397%" height="15" fill="rgb(209,12,38)"/><text x="30.7240%" y="159.50"></text></g><g><title>lint_mod (920,879 samples, 0.44%)</title><rect x="30.4786%" y="133" width="0.4351%" height="15" fill="rgb(227,1,9)"/><text x="30.7286%" y="143.50"></text></g><g><title>privacy_access_levels (563,196 samples, 0.27%)</title><rect x="30.9137%" y="165" width="0.2661%" height="15" fill="rgb(248,47,43)"/><text x="31.1637%" y="175.50"></text></g><g><title>privacy_checking_modules (1,962,242 samples, 0.93%)</title><rect x="31.1798%" y="165" width="0.9271%" height="15" fill="rgb(221,10,30)"/><text x="31.4298%" y="175.50"></text></g><g><title>check_mod_privacy (1,954,592 samples, 0.92%)</title><rect x="31.1834%" y="149" width="0.9235%" height="15" fill="rgb(210,229,1)"/><text x="31.4334%" y="159.50"></text></g><g><title>misc_checking_3 (8,188,731 samples, 3.87%)</title><rect x="28.2522%" y="181" width="3.8691%" height="15" fill="rgb(222,148,37)"/><text x="28.5022%" y="191.50">misc..</text></g><g><title>adt_destructor (314,964 samples, 0.15%)</title><rect x="32.2417%" y="133" width="0.1488%" height="15" fill="rgb(234,67,33)"/><text x="32.4917%" y="143.50"></text></g><g><title>coherent_trait (307,394 samples, 0.15%)</title><rect x="32.2453%" y="117" width="0.1452%" height="15" fill="rgb(247,98,35)"/><text x="32.4953%" y="127.50"></text></g><g><title>specialization_graph_of (306,164 samples, 0.14%)</title><rect x="32.2459%" y="101" width="0.1447%" height="15" fill="rgb(247,138,52)"/><text x="32.4959%" y="111.50"></text></g><g><title>impl_parent (3,315,609 samples, 1.57%)</title><rect x="35.1256%" y="117" width="1.5666%" height="15" fill="rgb(213,79,30)"/><text x="35.3756%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,796,757 samples, 0.85%)</title><rect x="35.8433%" y="101" width="0.8489%" height="15" fill="rgb(246,177,23)"/><text x="36.0933%" y="111.50"></text></g><g><title>impl_trait_ref (6,492,823 samples, 3.07%)</title><rect x="36.6922%" y="117" width="3.0678%" height="15" fill="rgb(230,62,27)"/><text x="36.9422%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,935,508 samples, 2.33%)</title><rect x="37.4280%" y="101" width="2.3320%" height="15" fill="rgb(216,154,8)"/><text x="37.6780%" y="111.50">m..</text></g><g><title>trait_impls_of (1,239,696 samples, 0.59%)</title><rect x="39.7734%" y="117" width="0.5857%" height="15" fill="rgb(244,35,45)"/><text x="40.0234%" y="127.50"></text></g><g><title>implementations_of_trait (393,774 samples, 0.19%)</title><rect x="40.1731%" y="101" width="0.1861%" height="15" fill="rgb(251,115,12)"/><text x="40.4231%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (277,174 samples, 0.13%)</title><rect x="40.2282%" y="85" width="0.1310%" height="15" fill="rgb(240,54,50)"/><text x="40.4782%" y="95.50"></text></g><g><title>coherent_trait (17,252,181 samples, 8.15%)</title><rect x="32.2081%" y="149" width="8.1514%" height="15" fill="rgb(233,84,52)"/><text x="32.4581%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (16,670,215 samples, 7.88%)</title><rect x="32.4831%" y="133" width="7.8765%" height="15" fill="rgb(207,117,47)"/><text x="32.7331%" y="143.50">specializat..</text></g><g><title>coherence_checking (17,397,003 samples, 8.22%)</title><rect x="32.1956%" y="165" width="8.2199%" height="15" fill="rgb(249,43,39)"/><text x="32.4456%" y="175.50">coherence_c..</text></g><g><title>associated_item (504,707 samples, 0.24%)</title><rect x="61.4568%" y="101" width="0.2385%" height="15" fill="rgb(209,38,44)"/><text x="61.7068%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (395,184 samples, 0.19%)</title><rect x="61.5085%" y="85" width="0.1867%" height="15" fill="rgb(236,212,23)"/><text x="61.7585%" y="95.50"></text></g><g><title>associated_items (724,700 samples, 0.34%)</title><rect x="61.3692%" y="117" width="0.3424%" height="15" fill="rgb(242,79,21)"/><text x="61.6192%" y="127.50"></text></g><g><title>adt_dtorck_constraint (334,783 samples, 0.16%)</title><rect x="62.0621%" y="101" width="0.1582%" height="15" fill="rgb(211,96,35)"/><text x="62.3121%" y="111.50"></text></g><g><title>dropck_outlives (1,032,599 samples, 0.49%)</title><rect x="61.7684%" y="117" width="0.4879%" height="15" fill="rgb(253,215,40)"/><text x="62.0184%" y="127.50"></text></g><g><title>predicates_of (276,945 samples, 0.13%)</title><rect x="63.9262%" y="101" width="0.1309%" height="15" fill="rgb(211,81,21)"/><text x="64.1762%" y="111.50"></text></g><g><title>trait_impls_of (394,463 samples, 0.19%)</title><rect x="64.0971%" y="101" width="0.1864%" height="15" fill="rgb(208,190,38)"/><text x="64.3471%" y="111.50"></text></g><g><title>evaluate_obligation (4,292,740 samples, 2.03%)</title><rect x="62.2563%" y="117" width="2.0283%" height="15" fill="rgb(235,213,38)"/><text x="62.5063%" y="127.50">e..</text></g><g><title>evaluate_obligation (641,438 samples, 0.30%)</title><rect x="65.1668%" y="101" width="0.3031%" height="15" fill="rgb(237,122,38)"/><text x="65.4168%" y="111.50"></text></g><g><title>method_autoderef_steps (1,660,049 samples, 0.78%)</title><rect x="64.6961%" y="117" width="0.7844%" height="15" fill="rgb(244,218,35)"/><text x="64.9461%" y="127.50"></text></g><g><title>predicates_of (716,283 samples, 0.34%)</title><rect x="65.6244%" y="117" width="0.3384%" height="15" fill="rgb(240,68,47)"/><text x="65.8744%" y="127.50"></text></g><g><title>predicates_defined_on (555,573 samples, 0.26%)</title><rect x="65.7003%" y="101" width="0.2625%" height="15" fill="rgb(210,16,53)"/><text x="65.9503%" y="111.50"></text></g><g><title>inferred_outlives_of (289,092 samples, 0.14%)</title><rect x="65.8262%" y="85" width="0.1366%" height="15" fill="rgb(235,124,12)"/><text x="66.0762%" y="95.50"></text></g><g><title>evaluate_obligation (816,928 samples, 0.39%)</title><rect x="68.0405%" y="101" width="0.3860%" height="15" fill="rgb(224,169,11)"/><text x="68.2905%" y="111.50"></text></g><g><title>typeck (5,553,051 samples, 2.62%)</title><rect x="66.0326%" y="117" width="2.6237%" height="15" fill="rgb(250,166,2)"/><text x="66.2826%" y="127.50">ty..</text></g><g><title>item_bodies_checking (59,798,515 samples, 28.25%)</title><rect x="40.4481%" y="165" width="28.2540%" height="15" fill="rgb(242,216,29)"/><text x="40.6981%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (59,794,755 samples, 28.25%)</title><rect x="40.4499%" y="149" width="28.2523%" height="15" fill="rgb(230,116,27)"/><text x="40.6999%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (59,607,203 samples, 28.16%)</title><rect x="40.5385%" y="133" width="28.1636%" height="15" fill="rgb(228,99,48)"/><text x="40.7885%" y="143.50">typeck</text></g><g><title>adt_def (349,264 samples, 0.17%)</title><rect x="70.4482%" y="101" width="0.1650%" height="15" fill="rgb(253,11,6)"/><text x="70.6982%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (348,774 samples, 0.16%)</title><rect x="70.4484%" y="85" width="0.1648%" height="15" fill="rgb(247,143,39)"/><text x="70.6984%" y="95.50"></text></g><g><title>item_attrs (343,924 samples, 0.16%)</title><rect x="70.4507%" y="69" width="0.1625%" height="15" fill="rgb(236,97,10)"/><text x="70.7007%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (343,344 samples, 0.16%)</title><rect x="70.4510%" y="53" width="0.1622%" height="15" fill="rgb(233,208,19)"/><text x="70.7010%" y="63.50"></text></g><g><title>adt_sized_constraint (353,604 samples, 0.17%)</title><rect x="70.4472%" y="117" width="0.1671%" height="15" fill="rgb(216,164,2)"/><text x="70.6972%" y="127.50"></text></g><g><title>evaluate_obligation (415,955 samples, 0.20%)</title><rect x="70.4183%" y="133" width="0.1965%" height="15" fill="rgb(220,129,5)"/><text x="70.6683%" y="143.50"></text></g><g><title>impl_trait_ref (265,733 samples, 0.13%)</title><rect x="71.2753%" y="101" width="0.1256%" height="15" fill="rgb(242,17,10)"/><text x="71.5253%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (222,743 samples, 0.11%)</title><rect x="71.2956%" y="85" width="0.1052%" height="15" fill="rgb(242,107,0)"/><text x="71.5456%" y="95.50"></text></g><g><title>evaluate_obligation (1,222,124 samples, 0.58%)</title><rect x="70.9618%" y="117" width="0.5774%" height="15" fill="rgb(251,28,31)"/><text x="71.2118%" y="127.50"></text></g><g><title>item_types_checking (6,091,647 samples, 2.88%)</title><rect x="68.7022%" y="165" width="2.8782%" height="15" fill="rgb(233,223,10)"/><text x="68.9522%" y="175.50">it..</text></g><g><title>check_mod_item_types (6,081,187 samples, 2.87%)</title><rect x="68.7071%" y="149" width="2.8733%" height="15" fill="rgb(215,21,27)"/><text x="68.9571%" y="159.50">ch..</text></g><g><title>typeck (1,729,149 samples, 0.82%)</title><rect x="70.7634%" y="133" width="0.8170%" height="15" fill="rgb(232,23,21)"/><text x="71.0134%" y="143.50"></text></g><g><title>fn_sig (790,547 samples, 0.37%)</title><rect x="71.8609%" y="133" width="0.3735%" height="15" fill="rgb(244,5,23)"/><text x="72.1109%" y="143.50"></text></g><g><title>named_region_map (366,062 samples, 0.17%)</title><rect x="72.3394%" y="117" width="0.1730%" height="15" fill="rgb(226,81,46)"/><text x="72.5894%" y="127.50"></text></g><g><title>resolve_lifetimes (321,552 samples, 0.15%)</title><rect x="72.3604%" y="101" width="0.1519%" height="15" fill="rgb(247,70,30)"/><text x="72.6104%" y="111.50"></text></g><g><title>generics_of (620,557 samples, 0.29%)</title><rect x="72.2345%" y="133" width="0.2932%" height="15" fill="rgb(212,68,19)"/><text x="72.4845%" y="143.50"></text></g><g><title>late_bound_vars_map (370,794 samples, 0.18%)</title><rect x="72.9466%" y="85" width="0.1752%" height="15" fill="rgb(240,187,13)"/><text x="73.1966%" y="95.50"></text></g><g><title>resolve_lifetimes (353,404 samples, 0.17%)</title><rect x="72.9548%" y="69" width="0.1670%" height="15" fill="rgb(223,113,26)"/><text x="73.2048%" y="79.50"></text></g><g><title>explicit_predicates_of (772,358 samples, 0.36%)</title><rect x="72.7852%" y="101" width="0.3649%" height="15" fill="rgb(206,192,2)"/><text x="73.0352%" y="111.50"></text></g><g><title>predicates_of (1,377,621 samples, 0.65%)</title><rect x="72.6369%" y="133" width="0.6509%" height="15" fill="rgb(241,108,4)"/><text x="72.8869%" y="143.50"></text></g><g><title>predicates_defined_on (1,257,451 samples, 0.59%)</title><rect x="72.6937%" y="117" width="0.5941%" height="15" fill="rgb(247,173,49)"/><text x="72.9437%" y="127.50"></text></g><g><title>inferred_outlives_of (291,423 samples, 0.14%)</title><rect x="73.1501%" y="101" width="0.1377%" height="15" fill="rgb(224,114,35)"/><text x="73.4001%" y="111.50"></text></g><g><title>inferred_outlives_crate (248,953 samples, 0.12%)</title><rect x="73.1702%" y="85" width="0.1176%" height="15" fill="rgb(245,159,27)"/><text x="73.4202%" y="95.50"></text></g><g><title>type_collecting (3,948,124 samples, 1.87%)</title><rect x="71.5840%" y="165" width="1.8654%" height="15" fill="rgb(245,172,44)"/><text x="71.8340%" y="175.50">t..</text></g><g><title>collect_mod_item_types (3,923,894 samples, 1.85%)</title><rect x="71.5955%" y="149" width="1.8540%" height="15" fill="rgb(236,23,11)"/><text x="71.8455%" y="159.50">c..</text></g><g><title>type_of (319,645 samples, 0.15%)</title><rect x="73.2985%" y="133" width="0.1510%" height="15" fill="rgb(205,117,38)"/><text x="73.5485%" y="143.50"></text></g><g><title>adt_sized_constraint (277,293 samples, 0.13%)</title><rect x="77.6881%" y="117" width="0.1310%" height="15" fill="rgb(237,72,25)"/><text x="77.9381%" y="127.50"></text></g><g><title>evaluate_obligation (1,888,621 samples, 0.89%)</title><rect x="76.9689%" y="133" width="0.8923%" height="15" fill="rgb(244,70,9)"/><text x="77.2189%" y="143.50"></text></g><g><title>implied_outlives_bounds (822,043 samples, 0.39%)</title><rect x="77.8800%" y="133" width="0.3884%" height="15" fill="rgb(217,125,39)"/><text x="78.1300%" y="143.50"></text></g><g><title>param_env (888,819 samples, 0.42%)</title><rect x="78.2746%" y="133" width="0.4200%" height="15" fill="rgb(235,36,10)"/><text x="78.5246%" y="143.50"></text></g><g><title>region_scope_tree (792,611 samples, 0.37%)</title><rect x="78.7184%" y="133" width="0.3745%" height="15" fill="rgb(251,123,47)"/><text x="78.9684%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,493,083 samples, 5.43%)</title><rect x="73.6736%" y="149" width="5.4303%" height="15" fill="rgb(221,13,13)"/><text x="73.9236%" y="159.50">check_i..</text></g><g><title>evaluate_obligation (365,162 samples, 0.17%)</title><rect x="80.3544%" y="133" width="0.1725%" height="15" fill="rgb(238,131,9)"/><text x="80.6044%" y="143.50"></text></g><g><title>param_env (559,366 samples, 0.26%)</title><rect x="80.6328%" y="133" width="0.2643%" height="15" fill="rgb(211,50,8)"/><text x="80.8828%" y="143.50"></text></g><g><title>check_item_well_formed (4,154,793 samples, 1.96%)</title><rect x="79.1040%" y="149" width="1.9631%" height="15" fill="rgb(245,182,24)"/><text x="79.3540%" y="159.50">c..</text></g><g><title>analysis (171,438,597 samples, 81.00%)</title><rect x="0.3102%" y="197" width="81.0026%" height="15" fill="rgb(242,14,37)"/><text x="0.5602%" y="207.50">analysis</text></g><g><title>type_check_crate (104,111,858 samples, 49.19%)</title><rect x="32.1213%" y="181" width="49.1915%" height="15" fill="rgb(246,228,12)"/><text x="32.3713%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,629,546 samples, 7.86%)</title><rect x="73.4555%" y="165" width="7.8572%" height="15" fill="rgb(213,55,15)"/><text x="73.7055%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (520,066 samples, 0.25%)</title><rect x="81.0671%" y="149" width="0.2457%" height="15" fill="rgb(209,9,3)"/><text x="81.3171%" y="159.50"></text></g><g><title>codegen_crate (395,824 samples, 0.19%)</title><rect x="81.3154%" y="197" width="0.1870%" height="15" fill="rgb(230,59,30)"/><text x="81.5654%" y="207.50"></text></g><g><title>AST_validation (220,862 samples, 0.10%)</title><rect x="81.5640%" y="181" width="0.1044%" height="15" fill="rgb(209,121,21)"/><text x="81.8140%" y="191.50"></text></g><g><title>metadata_load_macro (239,052 samples, 0.11%)</title><rect x="89.5062%" y="149" width="0.1129%" height="15" fill="rgb(220,109,13)"/><text x="89.7562%" y="159.50"></text></g><g><title>metadata_register_crate (1,514,168 samples, 0.72%)</title><rect x="89.6192%" y="149" width="0.7154%" height="15" fill="rgb(232,18,1)"/><text x="89.8692%" y="159.50"></text></g><g><title>metadata_register_crate (528,395 samples, 0.25%)</title><rect x="90.0849%" y="133" width="0.2497%" height="15" fill="rgb(215,41,42)"/><text x="90.3349%" y="143.50"></text></g><g><title>macro_expand_crate (18,469,376 samples, 8.73%)</title><rect x="81.7565%" y="181" width="8.7265%" height="15" fill="rgb(224,123,36)"/><text x="82.0065%" y="191.50">macro_expand..</text></g><g><title>expand_crate (18,456,536 samples, 8.72%)</title><rect x="81.7625%" y="165" width="8.7205%" height="15" fill="rgb(240,125,3)"/><text x="82.0125%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (314,062 samples, 0.15%)</title><rect x="90.3346%" y="149" width="0.1484%" height="15" fill="rgb(205,98,50)"/><text x="90.5846%" y="159.50"></text></g><g><title>finalize_macro_resolutions (217,743 samples, 0.10%)</title><rect x="90.6656%" y="165" width="0.1029%" height="15" fill="rgb(205,185,37)"/><text x="90.9156%" y="175.50"></text></g><g><title>late_resolve_crate (3,253,386 samples, 1.54%)</title><rect x="90.7685%" y="165" width="1.5372%" height="15" fill="rgb(238,207,15)"/><text x="91.0185%" y="175.50"></text></g><g><title>configure_and_expand (23,112,987 samples, 10.92%)</title><rect x="81.5024%" y="197" width="10.9206%" height="15" fill="rgb(213,199,42)"/><text x="81.7524%" y="207.50">configure_and_ex..</text></g><g><title>resolve_crate (3,891,073 samples, 1.84%)</title><rect x="90.5845%" y="181" width="1.8385%" height="15" fill="rgb(235,201,11)"/><text x="90.8345%" y="191.50">r..</text></g><g><title>drop_ast (323,413 samples, 0.15%)</title><rect x="92.4230%" y="197" width="0.1528%" height="15" fill="rgb(207,46,11)"/><text x="92.6730%" y="207.50"></text></g><g><title>early_lint_checks (663,677 samples, 0.31%)</title><rect x="92.5857%" y="197" width="0.3136%" height="15" fill="rgb(241,35,35)"/><text x="92.8357%" y="207.50"></text></g><g><title>free_global_ctxt (4,553,601 samples, 2.15%)</title><rect x="92.8993%" y="197" width="2.1515%" height="15" fill="rgb(243,32,47)"/><text x="93.1493%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,393,237 samples, 1.13%)</title><rect x="95.0508%" y="197" width="1.1308%" height="15" fill="rgb(247,202,23)"/><text x="95.3008%" y="207.50"></text></g><g><title>hir_lowering (5,861,326 samples, 2.77%)</title><rect x="96.1816%" y="197" width="2.7694%" height="15" fill="rgb(219,102,11)"/><text x="96.4316%" y="207.50">hi..</text></g><g><title>parse_crate (247,173 samples, 0.12%)</title><rect x="98.9797%" y="197" width="0.1168%" height="15" fill="rgb(243,110,44)"/><text x="99.2297%" y="207.50"></text></g><g><title>prepare_outputs (213,742 samples, 0.10%)</title><rect x="99.0988%" y="197" width="0.1010%" height="15" fill="rgb(222,74,54)"/><text x="99.3488%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,214,374 samples, 0.57%)</title><rect x="99.1998%" y="197" width="0.5738%" height="15" fill="rgb(216,99,12)"/><text x="99.4498%" y="207.50"></text></g><g><title>all (211,645,924 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (211,645,924 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (374,404 samples, 0.18%)</title><rect x="99.8231%" y="197" width="0.1769%" height="15" fill="rgb(213,25,53)"/><text x="100.0731%" y="207.50"></text></g></svg></svg>