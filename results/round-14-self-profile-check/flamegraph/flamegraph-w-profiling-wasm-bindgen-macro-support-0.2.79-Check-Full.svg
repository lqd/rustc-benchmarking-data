<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (818,052 samples, 0.21%)</title><rect x="15.5198%" y="165" width="0.2135%" height="15" fill="rgb(227,0,7)"/><text x="15.7698%" y="175.50"></text></g><g><title>param_env (848,181 samples, 0.22%)</title><rect x="17.5282%" y="133" width="0.2214%" height="15" fill="rgb(217,0,24)"/><text x="17.7782%" y="143.50"></text></g><g><title>item_attrs (764,298 samples, 0.20%)</title><rect x="18.3855%" y="101" width="0.1995%" height="15" fill="rgb(221,193,54)"/><text x="18.6355%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (736,708 samples, 0.19%)</title><rect x="18.3927%" y="85" width="0.1923%" height="15" fill="rgb(248,212,6)"/><text x="18.6427%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,030,020 samples, 0.27%)</title><rect x="18.3292%" y="117" width="0.2688%" height="15" fill="rgb(208,68,35)"/><text x="18.5792%" y="127.50"></text></g><g><title>param_env (396,442 samples, 0.10%)</title><rect x="22.3407%" y="69" width="0.1035%" height="15" fill="rgb(232,128,0)"/><text x="22.5907%" y="79.50"></text></g><g><title>adt_drop_tys (1,158,944 samples, 0.30%)</title><rect x="22.1421%" y="85" width="0.3025%" height="15" fill="rgb(207,160,47)"/><text x="22.3921%" y="95.50"></text></g><g><title>needs_drop_raw (4,359,039 samples, 1.14%)</title><rect x="22.0019%" y="101" width="1.1377%" height="15" fill="rgb(228,23,34)"/><text x="22.2519%" y="111.50"></text></g><g><title>is_copy_raw (2,660,889 samples, 0.69%)</title><rect x="22.4451%" y="85" width="0.6945%" height="15" fill="rgb(218,30,26)"/><text x="22.6951%" y="95.50"></text></g><g><title>evaluate_obligation (2,049,692 samples, 0.53%)</title><rect x="22.6047%" y="69" width="0.5350%" height="15" fill="rgb(220,122,19)"/><text x="22.8547%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,888,427 samples, 0.75%)</title><rect x="23.3044%" y="85" width="0.7539%" height="15" fill="rgb(250,228,42)"/><text x="23.5544%" y="95.50"></text></g><g><title>impl_parent (966,720 samples, 0.25%)</title><rect x="24.4508%" y="69" width="0.2523%" height="15" fill="rgb(240,193,28)"/><text x="24.7008%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (615,378 samples, 0.16%)</title><rect x="24.5425%" y="53" width="0.1606%" height="15" fill="rgb(216,20,37)"/><text x="24.7925%" y="63.50"></text></g><g><title>specialization_graph_of (4,722,112 samples, 1.23%)</title><rect x="24.0756%" y="85" width="1.2325%" height="15" fill="rgb(206,188,39)"/><text x="24.3256%" y="95.50"></text></g><g><title>impl_trait_ref (2,318,145 samples, 0.61%)</title><rect x="24.7031%" y="69" width="0.6050%" height="15" fill="rgb(217,207,13)"/><text x="24.9531%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,938,421 samples, 0.51%)</title><rect x="24.8022%" y="53" width="0.5059%" height="15" fill="rgb(231,73,38)"/><text x="25.0522%" y="63.50"></text></g><g><title>resolve_instance (8,418,194 samples, 2.20%)</title><rect x="23.1396%" y="101" width="2.1972%" height="15" fill="rgb(225,20,46)"/><text x="23.3896%" y="111.50">r..</text></g><g><title>thir_body (4,985,892 samples, 1.30%)</title><rect x="25.3620%" y="101" width="1.3013%" height="15" fill="rgb(210,31,41)"/><text x="25.6120%" y="111.50"></text></g><g><title>mir_const (38,323,011 samples, 10.00%)</title><rect x="16.6832%" y="149" width="10.0023%" height="15" fill="rgb(221,200,47)"/><text x="16.9332%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (34,237,338 samples, 8.94%)</title><rect x="17.7496%" y="133" width="8.9360%" height="15" fill="rgb(226,26,5)"/><text x="17.9996%" y="143.50">unsafety_chec..</text></g><g><title>mir_built (30,983,203 samples, 8.09%)</title><rect x="18.5989%" y="117" width="8.0866%" height="15" fill="rgb(249,33,26)"/><text x="18.8489%" y="127.50">mir_built</text></g><g><title>mir_const_qualif (585,816 samples, 0.15%)</title><rect x="26.6855%" y="149" width="0.1529%" height="15" fill="rgb(235,183,28)"/><text x="26.9355%" y="159.50"></text></g><g><title>mir_promoted (42,429,245 samples, 11.07%)</title><rect x="15.7645%" y="165" width="11.0740%" height="15" fill="rgb(221,5,38)"/><text x="16.0145%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,385,615 samples, 0.36%)</title><rect x="26.8414%" y="165" width="0.3616%" height="15" fill="rgb(247,18,42)"/><text x="27.0914%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (4,586,009 samples, 1.20%)</title><rect x="27.2031%" y="165" width="1.1969%" height="15" fill="rgb(241,131,45)"/><text x="27.4531%" y="175.50"></text></g><g><title>normalize_projection_ty (3,311,737 samples, 0.86%)</title><rect x="27.5357%" y="149" width="0.8644%" height="15" fill="rgb(249,31,29)"/><text x="27.7857%" y="159.50"></text></g><g><title>type_op_normalize_predicate (2,522,169 samples, 0.66%)</title><rect x="28.4000%" y="165" width="0.6583%" height="15" fill="rgb(225,111,53)"/><text x="28.6500%" y="175.50"></text></g><g><title>normalize_projection_ty (988,860 samples, 0.26%)</title><rect x="28.8002%" y="149" width="0.2581%" height="15" fill="rgb(238,160,17)"/><text x="29.0502%" y="159.50"></text></g><g><title>type_op_prove_predicate (14,172,257 samples, 3.70%)</title><rect x="29.0987%" y="165" width="3.6990%" height="15" fill="rgb(214,148,48)"/><text x="29.3487%" y="175.50">type..</text></g><g><title>evaluate_obligation (728,350 samples, 0.19%)</title><rect x="32.6076%" y="149" width="0.1901%" height="15" fill="rgb(232,36,49)"/><text x="32.8576%" y="159.50"></text></g><g><title>MIR_borrow_checking (123,989,597 samples, 32.36%)</title><rect x="0.4388%" y="197" width="32.3613%" height="15" fill="rgb(209,103,24)"/><text x="0.6888%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (123,663,151 samples, 32.28%)</title><rect x="0.5240%" y="181" width="32.2761%" height="15" fill="rgb(229,88,8)"/><text x="0.7740%" y="191.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (418,825 samples, 0.11%)</title><rect x="33.1553%" y="165" width="0.1093%" height="15" fill="rgb(213,181,19)"/><text x="33.4053%" y="175.50"></text></g><g><title>check_mod_attrs (1,082,432 samples, 0.28%)</title><rect x="32.9822%" y="181" width="0.2825%" height="15" fill="rgb(254,191,54)"/><text x="33.2322%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (608,637 samples, 0.16%)</title><rect x="33.3679%" y="181" width="0.1589%" height="15" fill="rgb(241,83,37)"/><text x="33.6179%" y="191.50"></text></g><g><title>misc_checking_1 (2,161,724 samples, 0.56%)</title><rect x="32.9757%" y="197" width="0.5642%" height="15" fill="rgb(233,36,39)"/><text x="33.2257%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,957,742 samples, 0.51%)</title><rect x="33.5405%" y="181" width="0.5110%" height="15" fill="rgb(226,3,54)"/><text x="33.7905%" y="191.50"></text></g><g><title>check_mod_liveness (1,662,269 samples, 0.43%)</title><rect x="33.6176%" y="165" width="0.4339%" height="15" fill="rgb(245,192,40)"/><text x="33.8676%" y="175.50"></text></g><g><title>type_uninhabited_from (396,836 samples, 0.10%)</title><rect x="33.9479%" y="149" width="0.1036%" height="15" fill="rgb(238,167,29)"/><text x="34.1979%" y="159.50"></text></g><g><title>param_env (474,677 samples, 0.12%)</title><rect x="34.7649%" y="149" width="0.1239%" height="15" fill="rgb(232,182,51)"/><text x="35.0149%" y="159.50"></text></g><g><title>misc_checking_2 (5,169,568 samples, 1.35%)</title><rect x="33.5399%" y="197" width="1.3493%" height="15" fill="rgb(231,60,39)"/><text x="33.7899%" y="207.50"></text></g><g><title>match_checking (3,209,826 samples, 0.84%)</title><rect x="34.0514%" y="181" width="0.8378%" height="15" fill="rgb(208,69,12)"/><text x="34.3014%" y="191.50"></text></g><g><title>check_match (3,130,324 samples, 0.82%)</title><rect x="34.0722%" y="165" width="0.8170%" height="15" fill="rgb(235,93,37)"/><text x="34.3222%" y="175.50"></text></g><g><title>check_private_in_public (406,695 samples, 0.11%)</title><rect x="34.8922%" y="181" width="0.1061%" height="15" fill="rgb(213,116,39)"/><text x="35.1422%" y="191.50"></text></g><g><title>death_checking (788,499 samples, 0.21%)</title><rect x="34.9984%" y="181" width="0.2058%" height="15" fill="rgb(222,207,29)"/><text x="35.2484%" y="191.50"></text></g><g><title>crate_lints (4,111,377 samples, 1.07%)</title><rect x="35.2047%" y="165" width="1.0731%" height="15" fill="rgb(206,96,30)"/><text x="35.4547%" y="175.50"></text></g><g><title>type_of (1,340,683 samples, 0.35%)</title><rect x="35.9279%" y="149" width="0.3499%" height="15" fill="rgb(218,138,4)"/><text x="36.1779%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,081,829 samples, 0.28%)</title><rect x="35.9954%" y="133" width="0.2824%" height="15" fill="rgb(250,191,14)"/><text x="36.2454%" y="143.50"></text></g><g><title>layout_of (503,307 samples, 0.13%)</title><rect x="36.9053%" y="53" width="0.1314%" height="15" fill="rgb(239,60,40)"/><text x="37.1553%" y="63.50"></text></g><g><title>layout_of (949,392 samples, 0.25%)</title><rect x="36.8573%" y="69" width="0.2478%" height="15" fill="rgb(206,27,48)"/><text x="37.1073%" y="79.50"></text></g><g><title>layout_of (1,285,774 samples, 0.34%)</title><rect x="36.7983%" y="85" width="0.3356%" height="15" fill="rgb(225,35,8)"/><text x="37.0483%" y="95.50"></text></g><g><title>lint_checking (7,571,615 samples, 1.98%)</title><rect x="35.2042%" y="181" width="1.9762%" height="15" fill="rgb(250,213,24)"/><text x="35.4542%" y="191.50">l..</text></g><g><title>module_lints (3,458,178 samples, 0.90%)</title><rect x="36.2778%" y="165" width="0.9026%" height="15" fill="rgb(247,123,22)"/><text x="36.5278%" y="175.50"></text></g><g><title>lint_mod (3,453,818 samples, 0.90%)</title><rect x="36.2789%" y="149" width="0.9014%" height="15" fill="rgb(231,138,38)"/><text x="36.5289%" y="159.50"></text></g><g><title>layout_of (1,709,019 samples, 0.45%)</title><rect x="36.7343%" y="133" width="0.4461%" height="15" fill="rgb(231,145,46)"/><text x="36.9843%" y="143.50"></text></g><g><title>layout_of (1,679,248 samples, 0.44%)</title><rect x="36.7421%" y="117" width="0.4383%" height="15" fill="rgb(251,118,11)"/><text x="36.9921%" y="127.50"></text></g><g><title>layout_of (1,610,038 samples, 0.42%)</title><rect x="36.7601%" y="101" width="0.4202%" height="15" fill="rgb(217,147,25)"/><text x="37.0101%" y="111.50"></text></g><g><title>privacy_access_levels (467,245 samples, 0.12%)</title><rect x="37.1804%" y="181" width="0.1220%" height="15" fill="rgb(247,81,37)"/><text x="37.4304%" y="191.50"></text></g><g><title>privacy_checking_modules (3,154,966 samples, 0.82%)</title><rect x="37.3023%" y="181" width="0.8234%" height="15" fill="rgb(209,12,38)"/><text x="37.5523%" y="191.50"></text></g><g><title>check_mod_privacy (3,152,636 samples, 0.82%)</title><rect x="37.3029%" y="165" width="0.8228%" height="15" fill="rgb(227,1,9)"/><text x="37.5529%" y="175.50"></text></g><g><title>misc_checking_3 (12,419,000 samples, 3.24%)</title><rect x="34.8892%" y="197" width="3.2414%" height="15" fill="rgb(248,47,43)"/><text x="35.1392%" y="207.50">mis..</text></g><g><title>impl_parent (392,734 samples, 0.10%)</title><rect x="38.2979%" y="133" width="0.1025%" height="15" fill="rgb(221,10,30)"/><text x="38.5479%" y="143.50"></text></g><g><title>impl_trait_ref (936,010 samples, 0.24%)</title><rect x="38.4004%" y="133" width="0.2443%" height="15" fill="rgb(210,229,1)"/><text x="38.6504%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (819,468 samples, 0.21%)</title><rect x="38.4308%" y="117" width="0.2139%" height="15" fill="rgb(222,148,37)"/><text x="38.6808%" y="127.50"></text></g><g><title>coherent_trait (1,985,563 samples, 0.52%)</title><rect x="38.1654%" y="165" width="0.5182%" height="15" fill="rgb(234,67,33)"/><text x="38.4154%" y="175.50"></text></g><g><title>specialization_graph_of (1,976,073 samples, 0.52%)</title><rect x="38.1679%" y="149" width="0.5158%" height="15" fill="rgb(247,98,35)"/><text x="38.4179%" y="159.50"></text></g><g><title>coherence_checking (2,052,743 samples, 0.54%)</title><rect x="38.1622%" y="181" width="0.5358%" height="15" fill="rgb(247,138,52)"/><text x="38.4122%" y="191.50"></text></g><g><title>dropck_outlives (1,688,260 samples, 0.44%)</title><rect x="47.8509%" y="133" width="0.4406%" height="15" fill="rgb(213,79,30)"/><text x="48.1009%" y="143.50"></text></g><g><title>generics_of (924,655 samples, 0.24%)</title><rect x="49.1186%" y="117" width="0.2413%" height="15" fill="rgb(246,177,23)"/><text x="49.3686%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (726,893 samples, 0.19%)</title><rect x="49.1703%" y="101" width="0.1897%" height="15" fill="rgb(230,62,27)"/><text x="49.4203%" y="111.50"></text></g><g><title>impl_trait_ref (1,719,918 samples, 0.45%)</title><rect x="49.3794%" y="117" width="0.4489%" height="15" fill="rgb(216,154,8)"/><text x="49.6294%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,520,222 samples, 0.40%)</title><rect x="49.4316%" y="101" width="0.3968%" height="15" fill="rgb(244,35,45)"/><text x="49.6816%" y="111.50"></text></g><g><title>specializes (408,714 samples, 0.11%)</title><rect x="49.9097%" y="117" width="0.1067%" height="15" fill="rgb(251,115,12)"/><text x="50.1597%" y="127.50"></text></g><g><title>evaluate_obligation (6,967,418 samples, 1.82%)</title><rect x="48.2916%" y="133" width="1.8185%" height="15" fill="rgb(240,54,50)"/><text x="48.5416%" y="143.50">e..</text></g><g><title>method_autoderef_steps (476,255 samples, 0.12%)</title><rect x="50.2838%" y="133" width="0.1243%" height="15" fill="rgb(233,84,52)"/><text x="50.5338%" y="143.50"></text></g><g><title>predicates_of (416,154 samples, 0.11%)</title><rect x="50.4195%" y="133" width="0.1086%" height="15" fill="rgb(207,117,47)"/><text x="50.6695%" y="143.50"></text></g><g><title>associated_item (984,375 samples, 0.26%)</title><rect x="69.6182%" y="101" width="0.2569%" height="15" fill="rgb(249,43,39)"/><text x="69.8682%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (615,212 samples, 0.16%)</title><rect x="69.7145%" y="85" width="0.1606%" height="15" fill="rgb(209,38,44)"/><text x="69.9645%" y="95.50"></text></g><g><title>associated_items (1,315,657 samples, 0.34%)</title><rect x="69.5492%" y="117" width="0.3434%" height="15" fill="rgb(236,212,23)"/><text x="69.7992%" y="127.50"></text></g><g><title>adt_dtorck_constraint (667,468 samples, 0.17%)</title><rect x="71.7555%" y="37" width="0.1742%" height="15" fill="rgb(242,79,21)"/><text x="72.0055%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,157,184 samples, 0.30%)</title><rect x="71.6446%" y="53" width="0.3020%" height="15" fill="rgb(211,96,35)"/><text x="71.8946%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,741,900 samples, 0.45%)</title><rect x="71.5266%" y="69" width="0.4546%" height="15" fill="rgb(253,215,40)"/><text x="71.7766%" y="79.50"></text></g><g><title>adt_dtorck_constraint (2,373,304 samples, 0.62%)</title><rect x="71.3997%" y="85" width="0.6194%" height="15" fill="rgb(211,81,21)"/><text x="71.6497%" y="95.50"></text></g><g><title>dropck_outlives (8,073,879 samples, 2.11%)</title><rect x="69.9456%" y="117" width="2.1073%" height="15" fill="rgb(208,190,38)"/><text x="70.1956%" y="127.50">d..</text></g><g><title>adt_dtorck_constraint (3,137,921 samples, 0.82%)</title><rect x="71.2338%" y="101" width="0.8190%" height="15" fill="rgb(235,213,38)"/><text x="71.4838%" y="111.50"></text></g><g><title>adt_sized_constraint (451,445 samples, 0.12%)</title><rect x="73.8730%" y="101" width="0.1178%" height="15" fill="rgb(237,122,38)"/><text x="74.1230%" y="111.50"></text></g><g><title>predicates_of (468,995 samples, 0.12%)</title><rect x="74.1059%" y="101" width="0.1224%" height="15" fill="rgb(244,218,35)"/><text x="74.3559%" y="111.50"></text></g><g><title>evaluate_obligation (10,019,060 samples, 2.61%)</title><rect x="72.0528%" y="117" width="2.6150%" height="15" fill="rgb(240,68,47)"/><text x="72.3028%" y="127.50">ev..</text></g><g><title>trait_impls_of (1,483,310 samples, 0.39%)</title><rect x="74.2807%" y="101" width="0.3871%" height="15" fill="rgb(210,16,53)"/><text x="74.5307%" y="111.50"></text></g><g><title>implementations_of_trait (495,895 samples, 0.13%)</title><rect x="74.5384%" y="85" width="0.1294%" height="15" fill="rgb(235,124,12)"/><text x="74.7884%" y="95.50"></text></g><g><title>generics_of (744,581 samples, 0.19%)</title><rect x="74.7790%" y="117" width="0.1943%" height="15" fill="rgb(224,169,11)"/><text x="75.0290%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (591,056 samples, 0.15%)</title><rect x="74.8190%" y="101" width="0.1543%" height="15" fill="rgb(250,166,2)"/><text x="75.0690%" y="111.50"></text></g><g><title>impl_trait_ref (1,074,580 samples, 0.28%)</title><rect x="75.0500%" y="117" width="0.2805%" height="15" fill="rgb(242,216,29)"/><text x="75.3000%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (981,438 samples, 0.26%)</title><rect x="75.0743%" y="101" width="0.2562%" height="15" fill="rgb(230,116,27)"/><text x="75.3243%" y="111.50"></text></g><g><title>is_copy_raw (535,567 samples, 0.14%)</title><rect x="75.4030%" y="117" width="0.1398%" height="15" fill="rgb(228,99,48)"/><text x="75.6530%" y="127.50"></text></g><g><title>evaluate_obligation (407,404 samples, 0.11%)</title><rect x="75.4365%" y="101" width="0.1063%" height="15" fill="rgb(253,11,6)"/><text x="75.6865%" y="111.50"></text></g><g><title>evaluate_obligation (1,065,748 samples, 0.28%)</title><rect x="75.9298%" y="101" width="0.2782%" height="15" fill="rgb(247,143,39)"/><text x="76.1798%" y="111.50"></text></g><g><title>method_autoderef_steps (2,228,911 samples, 0.58%)</title><rect x="75.6339%" y="117" width="0.5817%" height="15" fill="rgb(236,97,10)"/><text x="75.8839%" y="127.50"></text></g><g><title>explicit_predicates_of (387,171 samples, 0.10%)</title><rect x="76.4425%" y="85" width="0.1011%" height="15" fill="rgb(233,208,19)"/><text x="76.6925%" y="95.50"></text></g><g><title>predicates_of (1,151,558 samples, 0.30%)</title><rect x="76.2804%" y="117" width="0.3006%" height="15" fill="rgb(216,164,2)"/><text x="76.5304%" y="127.50"></text></g><g><title>predicates_defined_on (780,206 samples, 0.20%)</title><rect x="76.3773%" y="101" width="0.2036%" height="15" fill="rgb(220,129,5)"/><text x="76.6273%" y="111.50"></text></g><g><title>typeck (100,424,620 samples, 26.21%)</title><rect x="50.5762%" y="133" width="26.2108%" height="15" fill="rgb(242,17,10)"/><text x="50.8262%" y="143.50">typeck</text></g><g><title>item_bodies_checking (145,937,045 samples, 38.09%)</title><rect x="38.7072%" y="181" width="38.0896%" height="15" fill="rgb(242,107,0)"/><text x="38.9572%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (145,932,635 samples, 38.09%)</title><rect x="38.7083%" y="165" width="38.0885%" height="15" fill="rgb(251,28,31)"/><text x="38.9583%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (145,793,901 samples, 38.05%)</title><rect x="38.7445%" y="149" width="38.0522%" height="15" fill="rgb(233,223,10)"/><text x="38.9945%" y="159.50">typeck</text></g><g><title>adt_destructor (441,095 samples, 0.12%)</title><rect x="77.1011%" y="149" width="0.1151%" height="15" fill="rgb(215,21,27)"/><text x="77.3511%" y="159.50"></text></g><g><title>coherent_trait (435,915 samples, 0.11%)</title><rect x="77.1025%" y="133" width="0.1138%" height="15" fill="rgb(232,23,21)"/><text x="77.3525%" y="143.50"></text></g><g><title>specialization_graph_of (434,035 samples, 0.11%)</title><rect x="77.1030%" y="117" width="0.1133%" height="15" fill="rgb(244,5,23)"/><text x="77.3530%" y="127.50"></text></g><g><title>typeck (538,976 samples, 0.14%)</title><rect x="77.3597%" y="149" width="0.1407%" height="15" fill="rgb(226,81,46)"/><text x="77.6097%" y="159.50"></text></g><g><title>item_types_checking (2,703,791 samples, 0.71%)</title><rect x="76.7968%" y="181" width="0.7057%" height="15" fill="rgb(247,70,30)"/><text x="77.0468%" y="191.50"></text></g><g><title>check_mod_item_types (2,694,451 samples, 0.70%)</title><rect x="76.7992%" y="165" width="0.7033%" height="15" fill="rgb(212,68,19)"/><text x="77.0492%" y="175.50"></text></g><g><title>fn_sig (566,595 samples, 0.15%)</title><rect x="77.6210%" y="149" width="0.1479%" height="15" fill="rgb(240,187,13)"/><text x="77.8710%" y="159.50"></text></g><g><title>named_region_map (1,043,624 samples, 0.27%)</title><rect x="77.8743%" y="133" width="0.2724%" height="15" fill="rgb(223,113,26)"/><text x="78.1243%" y="143.50"></text></g><g><title>resolve_lifetimes (1,023,304 samples, 0.27%)</title><rect x="77.8796%" y="117" width="0.2671%" height="15" fill="rgb(206,192,2)"/><text x="78.1296%" y="127.50"></text></g><g><title>lint_levels (654,368 samples, 0.17%)</title><rect x="77.9759%" y="101" width="0.1708%" height="15" fill="rgb(241,108,4)"/><text x="78.2259%" y="111.50"></text></g><g><title>generics_of (1,463,310 samples, 0.38%)</title><rect x="77.7689%" y="149" width="0.3819%" height="15" fill="rgb(247,173,49)"/><text x="78.0189%" y="159.50"></text></g><g><title>predicates_of (597,875 samples, 0.16%)</title><rect x="78.1776%" y="149" width="0.1560%" height="15" fill="rgb(224,114,35)"/><text x="78.4276%" y="159.50"></text></g><g><title>predicates_defined_on (530,025 samples, 0.14%)</title><rect x="78.1953%" y="133" width="0.1383%" height="15" fill="rgb(245,159,27)"/><text x="78.4453%" y="143.50"></text></g><g><title>type_collecting (3,355,428 samples, 0.88%)</title><rect x="77.5032%" y="181" width="0.8758%" height="15" fill="rgb(245,172,44)"/><text x="77.7532%" y="191.50"></text></g><g><title>collect_mod_item_types (3,346,568 samples, 0.87%)</title><rect x="77.5055%" y="165" width="0.8735%" height="15" fill="rgb(236,23,11)"/><text x="77.7555%" y="175.50"></text></g><g><title>check_impl_item_well_formed (3,020,884 samples, 0.79%)</title><rect x="78.4533%" y="165" width="0.7885%" height="15" fill="rgb(205,117,38)"/><text x="78.7033%" y="175.50"></text></g><g><title>region_scope_tree (829,599 samples, 0.22%)</title><rect x="79.0253%" y="149" width="0.2165%" height="15" fill="rgb(237,72,25)"/><text x="79.2753%" y="159.50"></text></g><g><title>adt_sized_constraint (509,084 samples, 0.13%)</title><rect x="79.7366%" y="101" width="0.1329%" height="15" fill="rgb(244,70,9)"/><text x="79.9866%" y="111.50"></text></g><g><title>adt_sized_constraint (834,978 samples, 0.22%)</title><rect x="79.6601%" y="117" width="0.2179%" height="15" fill="rgb(217,125,39)"/><text x="79.9101%" y="127.50"></text></g><g><title>adt_sized_constraint (986,741 samples, 0.26%)</title><rect x="79.6314%" y="133" width="0.2575%" height="15" fill="rgb(235,36,10)"/><text x="79.8814%" y="143.50"></text></g><g><title>evaluate_obligation (1,286,844 samples, 0.34%)</title><rect x="79.5600%" y="149" width="0.3359%" height="15" fill="rgb(251,123,47)"/><text x="79.8100%" y="159.50"></text></g><g><title>check_item_well_formed (3,474,441 samples, 0.91%)</title><rect x="79.2418%" y="165" width="0.9068%" height="15" fill="rgb(221,13,13)"/><text x="79.4918%" y="175.50"></text></g><g><title>analysis (306,313,713 samples, 79.95%)</title><rect x="0.2493%" y="213" width="79.9480%" height="15" fill="rgb(238,131,9)"/><text x="0.4993%" y="223.50">analysis</text></g><g><title>type_check_crate (161,174,888 samples, 42.07%)</title><rect x="38.1306%" y="197" width="42.0667%" height="15" fill="rgb(211,50,8)"/><text x="38.3806%" y="207.50">type_check_crate</text></g><g><title>wf_checking (6,955,348 samples, 1.82%)</title><rect x="78.3819%" y="181" width="1.8153%" height="15" fill="rgb(245,182,24)"/><text x="78.6319%" y="191.50">w..</text></g><g><title>codegen_crate (431,114 samples, 0.11%)</title><rect x="80.2002%" y="213" width="0.1125%" height="15" fill="rgb(242,14,37)"/><text x="80.4502%" y="223.50"></text></g><g><title>metadata_load_macro (701,127 samples, 0.18%)</title><rect x="91.6302%" y="165" width="0.1830%" height="15" fill="rgb(246,228,12)"/><text x="91.8802%" y="175.50"></text></g><g><title>metadata_register_crate (3,203,446 samples, 0.84%)</title><rect x="91.8132%" y="165" width="0.8361%" height="15" fill="rgb(213,55,15)"/><text x="92.0632%" y="175.50"></text></g><g><title>metadata_register_crate (1,041,044 samples, 0.27%)</title><rect x="92.3775%" y="149" width="0.2717%" height="15" fill="rgb(209,9,3)"/><text x="92.6275%" y="159.50"></text></g><g><title>macro_expand_crate (47,282,053 samples, 12.34%)</title><rect x="80.4983%" y="197" width="12.3406%" height="15" fill="rgb(230,59,30)"/><text x="80.7483%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (47,261,673 samples, 12.34%)</title><rect x="80.5036%" y="181" width="12.3353%" height="15" fill="rgb(209,121,21)"/><text x="80.7536%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (726,698 samples, 0.19%)</title><rect x="92.6493%" y="165" width="0.1897%" height="15" fill="rgb(220,109,13)"/><text x="92.8993%" y="175.50"></text></g><g><title>late_resolve_crate (5,702,164 samples, 1.49%)</title><rect x="92.9506%" y="181" width="1.4883%" height="15" fill="rgb(232,18,1)"/><text x="93.2006%" y="191.50"></text></g><g><title>configure_and_expand (54,393,083 samples, 14.20%)</title><rect x="80.3127%" y="213" width="14.1966%" height="15" fill="rgb(215,41,42)"/><text x="80.5627%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (6,286,581 samples, 1.64%)</title><rect x="92.8685%" y="197" width="1.6408%" height="15" fill="rgb(224,123,36)"/><text x="93.1185%" y="207.50"></text></g><g><title>drop_ast (485,865 samples, 0.13%)</title><rect x="94.5093%" y="213" width="0.1268%" height="15" fill="rgb(240,125,3)"/><text x="94.7593%" y="223.50"></text></g><g><title>early_lint_checks (1,027,362 samples, 0.27%)</title><rect x="94.6415%" y="213" width="0.2681%" height="15" fill="rgb(205,98,50)"/><text x="94.8915%" y="223.50"></text></g><g><title>free_global_ctxt (5,979,877 samples, 1.56%)</title><rect x="94.9097%" y="213" width="1.5607%" height="15" fill="rgb(205,185,37)"/><text x="95.1597%" y="223.50"></text></g><g><title>generate_crate_metadata (2,032,254 samples, 0.53%)</title><rect x="96.4704%" y="213" width="0.5304%" height="15" fill="rgb(238,207,15)"/><text x="96.7204%" y="223.50"></text></g><g><title>hir_lowering (8,013,330 samples, 2.09%)</title><rect x="97.0008%" y="213" width="2.0915%" height="15" fill="rgb(213,199,42)"/><text x="97.2508%" y="223.50">h..</text></g><g><title>parse_crate (1,437,826 samples, 0.38%)</title><rect x="99.1120%" y="213" width="0.3753%" height="15" fill="rgb(235,201,11)"/><text x="99.3620%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,297,615 samples, 0.34%)</title><rect x="99.5445%" y="213" width="0.3387%" height="15" fill="rgb(207,46,11)"/><text x="99.7945%" y="223.50"></text></g><g><title>all (383,141,418 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (383,141,418 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>