<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (265,486 samples, 0.20%)</title><rect x="8.9704%" y="197" width="0.1996%" height="15" fill="rgb(227,0,7)"/><text x="9.2204%" y="207.50"></text></g><g><title>item_attrs (300,413 samples, 0.23%)</title><rect x="9.4994%" y="165" width="0.2258%" height="15" fill="rgb(217,0,24)"/><text x="9.7494%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (290,692 samples, 0.22%)</title><rect x="9.5067%" y="149" width="0.2185%" height="15" fill="rgb(221,193,54)"/><text x="9.7567%" y="159.50"></text></g><g><title>codegen_fn_attrs (392,194 samples, 0.29%)</title><rect x="9.4438%" y="181" width="0.2948%" height="15" fill="rgb(248,212,6)"/><text x="9.6938%" y="191.50"></text></g><g><title>adt_drop_tys (135,280 samples, 0.10%)</title><rect x="11.7738%" y="133" width="0.1017%" height="15" fill="rgb(208,68,35)"/><text x="12.0238%" y="143.50"></text></g><g><title>is_copy_raw (180,332 samples, 0.14%)</title><rect x="11.8829%" y="133" width="0.1356%" height="15" fill="rgb(232,128,0)"/><text x="12.1329%" y="143.50"></text></g><g><title>evaluate_obligation (151,772 samples, 0.11%)</title><rect x="11.9044%" y="117" width="0.1141%" height="15" fill="rgb(207,160,47)"/><text x="12.1544%" y="127.50"></text></g><g><title>param_env (141,641 samples, 0.11%)</title><rect x="12.0185%" y="133" width="0.1065%" height="15" fill="rgb(228,23,34)"/><text x="12.2685%" y="143.50"></text></g><g><title>adt_drop_tys (513,294 samples, 0.39%)</title><rect x="11.7399%" y="149" width="0.3859%" height="15" fill="rgb(218,30,26)"/><text x="11.9899%" y="159.50"></text></g><g><title>needs_drop_raw (1,348,541 samples, 1.01%)</title><rect x="11.6630%" y="165" width="1.0137%" height="15" fill="rgb(220,122,19)"/><text x="11.9130%" y="175.50"></text></g><g><title>is_copy_raw (732,996 samples, 0.55%)</title><rect x="12.1257%" y="149" width="0.5510%" height="15" fill="rgb(250,228,42)"/><text x="12.3757%" y="159.50"></text></g><g><title>evaluate_obligation (613,865 samples, 0.46%)</title><rect x="12.2153%" y="133" width="0.4615%" height="15" fill="rgb(240,193,28)"/><text x="12.4653%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (408,992 samples, 0.31%)</title><rect x="12.8835%" y="149" width="0.3075%" height="15" fill="rgb(216,20,37)"/><text x="13.1335%" y="159.50"></text></g><g><title>specialization_graph_of (696,748 samples, 0.52%)</title><rect x="13.2821%" y="149" width="0.5238%" height="15" fill="rgb(206,188,39)"/><text x="13.5321%" y="159.50"></text></g><g><title>impl_trait_ref (507,795 samples, 0.38%)</title><rect x="13.4242%" y="133" width="0.3817%" height="15" fill="rgb(217,207,13)"/><text x="13.6742%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (492,235 samples, 0.37%)</title><rect x="13.4359%" y="117" width="0.3700%" height="15" fill="rgb(231,73,38)"/><text x="13.6859%" y="127.50"></text></g><g><title>resolve_instance (1,563,249 samples, 1.18%)</title><rect x="12.6962%" y="165" width="1.1751%" height="15" fill="rgb(225,20,46)"/><text x="12.9462%" y="175.50"></text></g><g><title>thir_body (778,035 samples, 0.58%)</title><rect x="13.8869%" y="165" width="0.5849%" height="15" fill="rgb(210,31,41)"/><text x="14.1369%" y="175.50"></text></g><g><title>mir_const (8,096,053 samples, 6.09%)</title><rect x="8.4031%" y="213" width="6.0861%" height="15" fill="rgb(221,200,47)"/><text x="8.6531%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (7,075,897 samples, 5.32%)</title><rect x="9.1699%" y="197" width="5.3192%" height="15" fill="rgb(226,26,5)"/><text x="9.4199%" y="207.50">unsafet..</text></g><g><title>mir_built (6,319,360 samples, 4.75%)</title><rect x="9.7387%" y="181" width="4.7505%" height="15" fill="rgb(249,33,26)"/><text x="9.9887%" y="191.50">mir_bu..</text></g><g><title>mir_const (693,330 samples, 0.52%)</title><rect x="14.7187%" y="197" width="0.5212%" height="15" fill="rgb(235,183,28)"/><text x="14.9687%" y="207.50"></text></g><g><title>unsafety_check_result (558,096 samples, 0.42%)</title><rect x="14.8204%" y="181" width="0.4195%" height="15" fill="rgb(221,5,38)"/><text x="15.0704%" y="191.50"></text></g><g><title>mir_built (496,965 samples, 0.37%)</title><rect x="14.8663%" y="165" width="0.3736%" height="15" fill="rgb(247,18,42)"/><text x="15.1163%" y="175.50"></text></g><g><title>mir_promoted (9,908,781 samples, 7.45%)</title><rect x="7.7921%" y="229" width="7.4488%" height="15" fill="rgb(241,131,45)"/><text x="8.0421%" y="239.50">mir_promot..</text></g><g><title>mir_const_qualif (1,000,034 samples, 0.75%)</title><rect x="14.4891%" y="213" width="0.7518%" height="15" fill="rgb(249,31,29)"/><text x="14.7391%" y="223.50"></text></g><g><title>type_op_ascribe_user_type (293,464 samples, 0.22%)</title><rect x="15.2422%" y="229" width="0.2206%" height="15" fill="rgb(225,111,53)"/><text x="15.4922%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (448,185 samples, 0.34%)</title><rect x="15.4628%" y="229" width="0.3369%" height="15" fill="rgb(238,160,17)"/><text x="15.7128%" y="239.50"></text></g><g><title>normalize_projection_ty (291,523 samples, 0.22%)</title><rect x="15.5805%" y="213" width="0.2191%" height="15" fill="rgb(214,148,48)"/><text x="15.8305%" y="223.50"></text></g><g><title>type_op_normalize_predicate (192,180 samples, 0.14%)</title><rect x="15.7997%" y="229" width="0.1445%" height="15" fill="rgb(232,36,49)"/><text x="16.0497%" y="239.50"></text></g><g><title>type_op_prove_predicate (1,332,199 samples, 1.00%)</title><rect x="15.9629%" y="229" width="1.0015%" height="15" fill="rgb(209,103,24)"/><text x="16.2129%" y="239.50"></text></g><g><title>MIR_borrow_checking (21,731,352 samples, 16.34%)</title><rect x="0.6366%" y="261" width="16.3362%" height="15" fill="rgb(229,88,8)"/><text x="0.8866%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,607,372 samples, 16.24%)</title><rect x="0.7298%" y="245" width="16.2430%" height="15" fill="rgb(213,181,19)"/><text x="0.9798%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (472,575 samples, 0.36%)</title><rect x="16.9728%" y="261" width="0.3553%" height="15" fill="rgb(254,191,54)"/><text x="17.2228%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (411,435 samples, 0.31%)</title><rect x="17.0188%" y="245" width="0.3093%" height="15" fill="rgb(241,83,37)"/><text x="17.2688%" y="255.50"></text></g><g><title>hir_module_items (150,722 samples, 0.11%)</title><rect x="17.3281%" y="261" width="0.1133%" height="15" fill="rgb(233,36,39)"/><text x="17.5781%" y="271.50"></text></g><g><title>codegen_fn_attrs (202,252 samples, 0.15%)</title><rect x="17.8285%" y="197" width="0.1520%" height="15" fill="rgb(226,3,54)"/><text x="18.0785%" y="207.50"></text></g><g><title>should_inherit_track_caller (322,042 samples, 0.24%)</title><rect x="17.7435%" y="213" width="0.2421%" height="15" fill="rgb(245,192,40)"/><text x="17.9935%" y="223.50"></text></g><g><title>codegen_fn_attrs (497,296 samples, 0.37%)</title><rect x="17.6295%" y="229" width="0.3738%" height="15" fill="rgb(238,167,29)"/><text x="17.8795%" y="239.50"></text></g><g><title>check_mod_attrs (733,388 samples, 0.55%)</title><rect x="17.4521%" y="245" width="0.5513%" height="15" fill="rgb(232,182,51)"/><text x="17.7021%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (381,384 samples, 0.29%)</title><rect x="18.1296%" y="245" width="0.2867%" height="15" fill="rgb(231,60,39)"/><text x="18.3796%" y="255.50"></text></g><g><title>misc_checking_1 (1,348,665 samples, 1.01%)</title><rect x="17.4418%" y="261" width="1.0138%" height="15" fill="rgb(208,69,12)"/><text x="17.6918%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (487,056 samples, 0.37%)</title><rect x="18.4568%" y="245" width="0.3661%" height="15" fill="rgb(235,93,37)"/><text x="18.7068%" y="255.50"></text></g><g><title>check_mod_liveness (409,765 samples, 0.31%)</title><rect x="18.5149%" y="229" width="0.3080%" height="15" fill="rgb(213,116,39)"/><text x="18.7649%" y="239.50"></text></g><g><title>type_uninhabited_from (140,771 samples, 0.11%)</title><rect x="18.7171%" y="213" width="0.1058%" height="15" fill="rgb(222,207,29)"/><text x="18.9671%" y="223.50"></text></g><g><title>misc_checking_2 (1,009,311 samples, 0.76%)</title><rect x="18.4556%" y="261" width="0.7587%" height="15" fill="rgb(206,96,30)"/><text x="18.7056%" y="271.50"></text></g><g><title>match_checking (520,775 samples, 0.39%)</title><rect x="18.8229%" y="245" width="0.3915%" height="15" fill="rgb(218,138,4)"/><text x="19.0729%" y="255.50"></text></g><g><title>check_match (490,614 samples, 0.37%)</title><rect x="18.8456%" y="229" width="0.3688%" height="15" fill="rgb(250,191,14)"/><text x="19.0956%" y="239.50"></text></g><g><title>check_private_in_public (178,762 samples, 0.13%)</title><rect x="19.2214%" y="245" width="0.1344%" height="15" fill="rgb(239,60,40)"/><text x="19.4714%" y="255.50"></text></g><g><title>death_checking (484,356 samples, 0.36%)</title><rect x="19.3557%" y="245" width="0.3641%" height="15" fill="rgb(206,27,48)"/><text x="19.6057%" y="255.50"></text></g><g><title>item_attrs (202,152 samples, 0.15%)</title><rect x="19.5679%" y="229" width="0.1520%" height="15" fill="rgb(225,35,8)"/><text x="19.8179%" y="239.50"></text></g><g><title>metadata_decode_entry_item_attrs (200,332 samples, 0.15%)</title><rect x="19.5692%" y="213" width="0.1506%" height="15" fill="rgb(250,213,24)"/><text x="19.8192%" y="223.50"></text></g><g><title>crate_lints (2,368,716 samples, 1.78%)</title><rect x="19.7210%" y="229" width="1.7806%" height="15" fill="rgb(247,123,22)"/><text x="19.9710%" y="239.50">c..</text></g><g><title>type_of (1,468,126 samples, 1.10%)</title><rect x="20.3980%" y="213" width="1.1036%" height="15" fill="rgb(231,138,38)"/><text x="20.6480%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (1,136,586 samples, 0.85%)</title><rect x="20.6472%" y="197" width="0.8544%" height="15" fill="rgb(231,145,46)"/><text x="20.8972%" y="207.50"></text></g><g><title>lint_checking (2,709,080 samples, 2.04%)</title><rect x="19.7198%" y="245" width="2.0365%" height="15" fill="rgb(251,118,11)"/><text x="19.9698%" y="255.50">l..</text></g><g><title>module_lints (338,814 samples, 0.25%)</title><rect x="21.5016%" y="229" width="0.2547%" height="15" fill="rgb(217,147,25)"/><text x="21.7516%" y="239.50"></text></g><g><title>lint_mod (336,024 samples, 0.25%)</title><rect x="21.5037%" y="213" width="0.2526%" height="15" fill="rgb(247,81,37)"/><text x="21.7537%" y="223.50"></text></g><g><title>privacy_access_levels (240,953 samples, 0.18%)</title><rect x="21.7563%" y="245" width="0.1811%" height="15" fill="rgb(209,12,38)"/><text x="22.0063%" y="255.50"></text></g><g><title>privacy_checking_modules (645,047 samples, 0.48%)</title><rect x="21.9375%" y="245" width="0.4849%" height="15" fill="rgb(227,1,9)"/><text x="22.1875%" y="255.50"></text></g><g><title>check_mod_privacy (643,347 samples, 0.48%)</title><rect x="21.9388%" y="229" width="0.4836%" height="15" fill="rgb(248,47,43)"/><text x="22.1888%" y="239.50"></text></g><g><title>misc_checking_3 (4,280,558 samples, 3.22%)</title><rect x="19.2144%" y="261" width="3.2178%" height="15" fill="rgb(221,10,30)"/><text x="19.4644%" y="271.50">mis..</text></g><g><title>impl_trait_ref (261,724 samples, 0.20%)</title><rect x="22.6758%" y="165" width="0.1967%" height="15" fill="rgb(210,229,1)"/><text x="22.9258%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (240,113 samples, 0.18%)</title><rect x="22.6920%" y="149" width="0.1805%" height="15" fill="rgb(222,148,37)"/><text x="22.9420%" y="159.50"></text></g><g><title>adt_destructor (447,205 samples, 0.34%)</title><rect x="22.5621%" y="213" width="0.3362%" height="15" fill="rgb(234,67,33)"/><text x="22.8121%" y="223.50"></text></g><g><title>coherent_trait (439,355 samples, 0.33%)</title><rect x="22.5680%" y="197" width="0.3303%" height="15" fill="rgb(247,98,35)"/><text x="22.8180%" y="207.50"></text></g><g><title>specialization_graph_of (437,995 samples, 0.33%)</title><rect x="22.5690%" y="181" width="0.3293%" height="15" fill="rgb(247,138,52)"/><text x="22.8190%" y="191.50"></text></g><g><title>impl_parent (4,376,954 samples, 3.29%)</title><rect x="28.7662%" y="197" width="3.2903%" height="15" fill="rgb(213,79,30)"/><text x="29.0162%" y="207.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (2,524,633 samples, 1.90%)</title><rect x="30.1587%" y="181" width="1.8979%" height="15" fill="rgb(246,177,23)"/><text x="30.4087%" y="191.50">m..</text></g><g><title>impl_trait_ref (8,520,743 samples, 6.41%)</title><rect x="32.0565%" y="197" width="6.4053%" height="15" fill="rgb(230,62,27)"/><text x="32.3065%" y="207.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,729,220 samples, 5.06%)</title><rect x="33.4033%" y="181" width="5.0586%" height="15" fill="rgb(216,154,8)"/><text x="33.6533%" y="191.50">metada..</text></g><g><title>trait_impls_of (1,987,798 samples, 1.49%)</title><rect x="38.4843%" y="197" width="1.4943%" height="15" fill="rgb(244,35,45)"/><text x="38.7343%" y="207.50"></text></g><g><title>implementations_of_trait (784,746 samples, 0.59%)</title><rect x="39.3887%" y="181" width="0.5899%" height="15" fill="rgb(251,115,12)"/><text x="39.6387%" y="191.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (400,363 samples, 0.30%)</title><rect x="39.6776%" y="165" width="0.3010%" height="15" fill="rgb(240,54,50)"/><text x="39.9276%" y="175.50"></text></g><g><title>coherent_trait (23,234,520 samples, 17.47%)</title><rect x="22.5132%" y="229" width="17.4662%" height="15" fill="rgb(233,84,52)"/><text x="22.7632%" y="239.50">coherent_trait</text></g><g><title>specialization_graph_of (22,581,993 samples, 16.98%)</title><rect x="23.0038%" y="213" width="16.9756%" height="15" fill="rgb(207,117,47)"/><text x="23.2538%" y="223.50">specialization_graph_of</text></g><g><title>orphan_check_crate (207,742 samples, 0.16%)</title><rect x="39.9933%" y="229" width="0.1562%" height="15" fill="rgb(249,43,39)"/><text x="40.2433%" y="239.50"></text></g><g><title>coherence_checking (23,509,522 samples, 17.67%)</title><rect x="22.4831%" y="245" width="17.6729%" height="15" fill="rgb(209,38,44)"/><text x="22.7331%" y="255.50">coherence_checking</text></g><g><title>adt_sized_constraint (172,761 samples, 0.13%)</title><rect x="52.7231%" y="197" width="0.1299%" height="15" fill="rgb(236,212,23)"/><text x="52.9731%" y="207.50"></text></g><g><title>associated_item (536,937 samples, 0.40%)</title><rect x="52.9925%" y="181" width="0.4036%" height="15" fill="rgb(242,79,21)"/><text x="53.2425%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (440,105 samples, 0.33%)</title><rect x="53.0653%" y="165" width="0.3308%" height="15" fill="rgb(211,96,35)"/><text x="53.3153%" y="175.50"></text></g><g><title>associated_items (750,469 samples, 0.56%)</title><rect x="52.8565%" y="197" width="0.5642%" height="15" fill="rgb(253,215,40)"/><text x="53.1065%" y="207.50"></text></g><g><title>adt_def (1,144,085 samples, 0.86%)</title><rect x="53.9211%" y="165" width="0.8600%" height="15" fill="rgb(211,81,21)"/><text x="54.1711%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (1,137,165 samples, 0.85%)</title><rect x="53.9263%" y="149" width="0.8548%" height="15" fill="rgb(208,190,38)"/><text x="54.1763%" y="159.50"></text></g><g><title>item_attrs (141,304 samples, 0.11%)</title><rect x="54.6749%" y="133" width="0.1062%" height="15" fill="rgb(235,213,38)"/><text x="54.9249%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (133,944 samples, 0.10%)</title><rect x="54.6804%" y="117" width="0.1007%" height="15" fill="rgb(237,122,38)"/><text x="54.9304%" y="127.50"></text></g><g><title>adt_def (221,952 samples, 0.17%)</title><rect x="54.9038%" y="149" width="0.1668%" height="15" fill="rgb(244,218,35)"/><text x="55.1538%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (215,942 samples, 0.16%)</title><rect x="54.9083%" y="133" width="0.1623%" height="15" fill="rgb(240,68,47)"/><text x="55.1583%" y="143.50"></text></g><g><title>adt_def (456,796 samples, 0.34%)</title><rect x="55.1431%" y="133" width="0.3434%" height="15" fill="rgb(210,16,53)"/><text x="55.3931%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (452,876 samples, 0.34%)</title><rect x="55.1461%" y="117" width="0.3404%" height="15" fill="rgb(235,124,12)"/><text x="55.3961%" y="127.50"></text></g><g><title>item_attrs (219,273 samples, 0.16%)</title><rect x="55.3217%" y="101" width="0.1648%" height="15" fill="rgb(224,169,11)"/><text x="55.5717%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (214,833 samples, 0.16%)</title><rect x="55.3250%" y="85" width="0.1615%" height="15" fill="rgb(250,166,2)"/><text x="55.5750%" y="95.50"></text></g><g><title>adt_def (212,434 samples, 0.16%)</title><rect x="55.5370%" y="117" width="0.1597%" height="15" fill="rgb(242,216,29)"/><text x="55.7870%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (210,014 samples, 0.16%)</title><rect x="55.5388%" y="101" width="0.1579%" height="15" fill="rgb(230,116,27)"/><text x="55.7888%" y="111.50"></text></g><g><title>adt_def (136,582 samples, 0.10%)</title><rect x="55.7320%" y="101" width="0.1027%" height="15" fill="rgb(228,99,48)"/><text x="55.9820%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (135,162 samples, 0.10%)</title><rect x="55.7331%" y="85" width="0.1016%" height="15" fill="rgb(253,11,6)"/><text x="55.9831%" y="95.50"></text></g><g><title>adt_dtorck_constraint (165,852 samples, 0.12%)</title><rect x="56.1090%" y="37" width="0.1247%" height="15" fill="rgb(247,143,39)"/><text x="56.3590%" y="47.50"></text></g><g><title>adt_dtorck_constraint (244,473 samples, 0.18%)</title><rect x="56.0587%" y="53" width="0.1838%" height="15" fill="rgb(236,97,10)"/><text x="56.3087%" y="63.50"></text></g><g><title>adt_dtorck_constraint (325,683 samples, 0.24%)</title><rect x="56.0062%" y="69" width="0.2448%" height="15" fill="rgb(233,208,19)"/><text x="56.2562%" y="79.50"></text></g><g><title>adt_dtorck_constraint (408,815 samples, 0.31%)</title><rect x="55.9563%" y="85" width="0.3073%" height="15" fill="rgb(216,164,2)"/><text x="56.2063%" y="95.50"></text></g><g><title>adt_dtorck_constraint (587,656 samples, 0.44%)</title><rect x="55.8438%" y="101" width="0.4418%" height="15" fill="rgb(220,129,5)"/><text x="56.0938%" y="111.50"></text></g><g><title>adt_dtorck_constraint (798,968 samples, 0.60%)</title><rect x="55.7072%" y="117" width="0.6006%" height="15" fill="rgb(242,17,10)"/><text x="55.9572%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,104,833 samples, 0.83%)</title><rect x="55.5070%" y="133" width="0.8305%" height="15" fill="rgb(242,107,0)"/><text x="55.7570%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,690,559 samples, 1.27%)</title><rect x="55.0999%" y="149" width="1.2708%" height="15" fill="rgb(251,28,31)"/><text x="55.3499%" y="159.50"></text></g><g><title>adt_dtorck_constraint (2,426,357 samples, 1.82%)</title><rect x="54.8247%" y="165" width="1.8240%" height="15" fill="rgb(233,223,10)"/><text x="55.0747%" y="175.50">a..</text></g><g><title>type_of (346,113 samples, 0.26%)</title><rect x="56.3885%" y="149" width="0.2602%" height="15" fill="rgb(215,21,27)"/><text x="56.6385%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (330,363 samples, 0.25%)</title><rect x="56.4004%" y="133" width="0.2483%" height="15" fill="rgb(232,23,21)"/><text x="56.6504%" y="143.50"></text></g><g><title>adt_dtorck_constraint (3,910,575 samples, 2.94%)</title><rect x="53.8085%" y="181" width="2.9397%" height="15" fill="rgb(244,5,23)"/><text x="54.0585%" y="191.50">ad..</text></g><g><title>dropck_outlives (4,348,610 samples, 3.27%)</title><rect x="53.4843%" y="197" width="3.2690%" height="15" fill="rgb(226,81,46)"/><text x="53.7343%" y="207.50">dro..</text></g><g><title>generics_of (147,091 samples, 0.11%)</title><rect x="58.1068%" y="181" width="0.1106%" height="15" fill="rgb(247,70,30)"/><text x="58.3568%" y="191.50"></text></g><g><title>predicates_of (295,093 samples, 0.22%)</title><rect x="58.3005%" y="181" width="0.2218%" height="15" fill="rgb(212,68,19)"/><text x="58.5505%" y="191.50"></text></g><g><title>predicates_defined_on (177,532 samples, 0.13%)</title><rect x="58.3889%" y="165" width="0.1335%" height="15" fill="rgb(240,187,13)"/><text x="58.6389%" y="175.50"></text></g><g><title>specializes (417,905 samples, 0.31%)</title><rect x="58.5223%" y="181" width="0.3142%" height="15" fill="rgb(223,113,26)"/><text x="58.7723%" y="191.50"></text></g><g><title>param_env (291,954 samples, 0.22%)</title><rect x="58.6170%" y="165" width="0.2195%" height="15" fill="rgb(206,192,2)"/><text x="58.8670%" y="175.50"></text></g><g><title>def_span (171,813 samples, 0.13%)</title><rect x="58.7073%" y="149" width="0.1292%" height="15" fill="rgb(241,108,4)"/><text x="58.9573%" y="159.50"></text></g><g><title>metadata_decode_entry_def_span (163,053 samples, 0.12%)</title><rect x="58.7139%" y="133" width="0.1226%" height="15" fill="rgb(247,173,49)"/><text x="58.9639%" y="143.50"></text></g><g><title>trait_impls_of (181,181 samples, 0.14%)</title><rect x="58.8437%" y="181" width="0.1362%" height="15" fill="rgb(224,114,35)"/><text x="59.0937%" y="191.50"></text></g><g><title>evaluate_obligation (2,965,467 samples, 2.23%)</title><rect x="56.7533%" y="197" width="2.2292%" height="15" fill="rgb(245,159,27)"/><text x="57.0033%" y="207.50">e..</text></g><g><title>fn_sig (151,284 samples, 0.11%)</title><rect x="59.0082%" y="197" width="0.1137%" height="15" fill="rgb(245,172,44)"/><text x="59.2582%" y="207.50"></text></g><g><title>generics_of (182,001 samples, 0.14%)</title><rect x="59.1219%" y="197" width="0.1368%" height="15" fill="rgb(236,23,11)"/><text x="59.3719%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (137,511 samples, 0.10%)</title><rect x="59.1553%" y="181" width="0.1034%" height="15" fill="rgb(205,117,38)"/><text x="59.4053%" y="191.50"></text></g><g><title>impl_item_implementor_ids (185,093 samples, 0.14%)</title><rect x="59.2591%" y="197" width="0.1391%" height="15" fill="rgb(237,72,25)"/><text x="59.5091%" y="207.50"></text></g><g><title>associated_items (162,311 samples, 0.12%)</title><rect x="59.2763%" y="181" width="0.1220%" height="15" fill="rgb(244,70,9)"/><text x="59.5263%" y="191.50"></text></g><g><title>evaluate_obligation (252,606 samples, 0.19%)</title><rect x="59.8435%" y="181" width="0.1899%" height="15" fill="rgb(217,125,39)"/><text x="60.0935%" y="191.50"></text></g><g><title>method_autoderef_steps (492,469 samples, 0.37%)</title><rect x="59.6742%" y="197" width="0.3702%" height="15" fill="rgb(235,36,10)"/><text x="59.9242%" y="207.50"></text></g><g><title>evaluate_obligation (135,731 samples, 0.10%)</title><rect x="60.0715%" y="181" width="0.1020%" height="15" fill="rgb(251,123,47)"/><text x="60.3215%" y="191.50"></text></g><g><title>object_safety_violations (227,983 samples, 0.17%)</title><rect x="60.0444%" y="197" width="0.1714%" height="15" fill="rgb(221,13,13)"/><text x="60.2944%" y="207.50"></text></g><g><title>explicit_predicates_of (156,973 samples, 0.12%)</title><rect x="60.6154%" y="165" width="0.1180%" height="15" fill="rgb(238,131,9)"/><text x="60.8654%" y="175.50"></text></g><g><title>predicates_of (677,417 samples, 0.51%)</title><rect x="60.2640%" y="197" width="0.5092%" height="15" fill="rgb(211,50,8)"/><text x="60.5140%" y="207.50"></text></g><g><title>predicates_defined_on (306,874 samples, 0.23%)</title><rect x="60.5425%" y="181" width="0.2307%" height="15" fill="rgb(245,182,24)"/><text x="60.7925%" y="191.50"></text></g><g><title>item_bodies_checking (27,676,618 samples, 20.81%)</title><rect x="40.1831%" y="245" width="20.8054%" height="15" fill="rgb(242,14,37)"/><text x="40.4331%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (27,673,488 samples, 20.80%)</title><rect x="40.1854%" y="229" width="20.8031%" height="15" fill="rgb(246,228,12)"/><text x="40.4354%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (27,581,318 samples, 20.73%)</title><rect x="40.2547%" y="213" width="20.7338%" height="15" fill="rgb(213,55,15)"/><text x="40.5047%" y="223.50">typeck</text></g><g><title>item_types_checking (1,347,405 samples, 1.01%)</title><rect x="60.9885%" y="245" width="1.0129%" height="15" fill="rgb(209,9,3)"/><text x="61.2385%" y="255.50"></text></g><g><title>check_mod_item_types (1,345,025 samples, 1.01%)</title><rect x="60.9903%" y="229" width="1.0111%" height="15" fill="rgb(230,59,30)"/><text x="61.2403%" y="239.50"></text></g><g><title>fn_sig (336,492 samples, 0.25%)</title><rect x="62.1896%" y="213" width="0.2530%" height="15" fill="rgb(209,121,21)"/><text x="62.4396%" y="223.50"></text></g><g><title>named_region_map (374,932 samples, 0.28%)</title><rect x="62.5155%" y="197" width="0.2818%" height="15" fill="rgb(220,109,13)"/><text x="62.7655%" y="207.50"></text></g><g><title>resolve_lifetimes (358,882 samples, 0.27%)</title><rect x="62.5276%" y="181" width="0.2698%" height="15" fill="rgb(232,18,1)"/><text x="62.7776%" y="191.50"></text></g><g><title>lint_levels (159,282 samples, 0.12%)</title><rect x="62.6777%" y="165" width="0.1197%" height="15" fill="rgb(215,41,42)"/><text x="62.9277%" y="175.50"></text></g><g><title>generics_of (487,576 samples, 0.37%)</title><rect x="62.4426%" y="213" width="0.3665%" height="15" fill="rgb(224,123,36)"/><text x="62.6926%" y="223.50"></text></g><g><title>explicit_predicates_of (379,664 samples, 0.29%)</title><rect x="62.9786%" y="181" width="0.2854%" height="15" fill="rgb(240,125,3)"/><text x="63.2286%" y="191.50"></text></g><g><title>predicates_of (720,677 samples, 0.54%)</title><rect x="62.8780%" y="213" width="0.5418%" height="15" fill="rgb(205,98,50)"/><text x="63.1280%" y="223.50"></text></g><g><title>predicates_defined_on (669,617 samples, 0.50%)</title><rect x="62.9164%" y="197" width="0.5034%" height="15" fill="rgb(205,185,37)"/><text x="63.1664%" y="207.50"></text></g><g><title>inferred_outlives_of (207,102 samples, 0.16%)</title><rect x="63.2640%" y="181" width="0.1557%" height="15" fill="rgb(238,207,15)"/><text x="63.5140%" y="191.50"></text></g><g><title>inferred_outlives_crate (185,192 samples, 0.14%)</title><rect x="63.2805%" y="165" width="0.1392%" height="15" fill="rgb(213,199,42)"/><text x="63.5305%" y="175.50"></text></g><g><title>type_collecting (2,004,322 samples, 1.51%)</title><rect x="62.0026%" y="245" width="1.5067%" height="15" fill="rgb(235,201,11)"/><text x="62.2526%" y="255.50"></text></g><g><title>collect_mod_item_types (1,997,522 samples, 1.50%)</title><rect x="62.0077%" y="229" width="1.5016%" height="15" fill="rgb(207,46,11)"/><text x="62.2577%" y="239.50"></text></g><g><title>evaluate_obligation (305,015 samples, 0.23%)</title><rect x="64.7627%" y="213" width="0.2293%" height="15" fill="rgb(241,35,35)"/><text x="65.0127%" y="223.50"></text></g><g><title>implied_outlives_bounds (134,450 samples, 0.10%)</title><rect x="65.0002%" y="213" width="0.1011%" height="15" fill="rgb(243,32,47)"/><text x="65.2502%" y="223.50"></text></g><g><title>param_env (292,542 samples, 0.22%)</title><rect x="65.1013%" y="213" width="0.2199%" height="15" fill="rgb(247,202,23)"/><text x="65.3513%" y="223.50"></text></g><g><title>region_scope_tree (363,107 samples, 0.27%)</title><rect x="65.3708%" y="213" width="0.2730%" height="15" fill="rgb(219,102,11)"/><text x="65.6208%" y="223.50"></text></g><g><title>check_impl_item_well_formed (2,812,583 samples, 2.11%)</title><rect x="63.6409%" y="229" width="2.1143%" height="15" fill="rgb(243,110,44)"/><text x="63.8909%" y="239.50">c..</text></g><g><title>trait_impls_of (148,311 samples, 0.11%)</title><rect x="65.6437%" y="213" width="0.1115%" height="15" fill="rgb(222,74,54)"/><text x="65.8937%" y="223.50"></text></g><g><title>adt_def (410,604 samples, 0.31%)</title><rect x="66.6589%" y="181" width="0.3087%" height="15" fill="rgb(216,99,12)"/><text x="66.9089%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (408,264 samples, 0.31%)</title><rect x="66.6607%" y="165" width="0.3069%" height="15" fill="rgb(226,22,26)"/><text x="66.9107%" y="175.50"></text></g><g><title>item_attrs (386,784 samples, 0.29%)</title><rect x="66.6768%" y="149" width="0.2908%" height="15" fill="rgb(217,163,10)"/><text x="66.9268%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (384,844 samples, 0.29%)</title><rect x="66.6783%" y="133" width="0.2893%" height="15" fill="rgb(213,25,53)"/><text x="66.9283%" y="143.50"></text></g><g><title>adt_def (171,552 samples, 0.13%)</title><rect x="66.9963%" y="149" width="0.1290%" height="15" fill="rgb(252,105,26)"/><text x="67.2463%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (170,472 samples, 0.13%)</title><rect x="66.9971%" y="133" width="0.1281%" height="15" fill="rgb(220,39,43)"/><text x="67.2471%" y="143.50"></text></g><g><title>item_attrs (148,471 samples, 0.11%)</title><rect x="67.0136%" y="117" width="0.1116%" height="15" fill="rgb(229,68,48)"/><text x="67.2636%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (147,091 samples, 0.11%)</title><rect x="67.0147%" y="101" width="0.1106%" height="15" fill="rgb(252,8,32)"/><text x="67.2647%" y="111.50"></text></g><g><title>adt_sized_constraint (222,732 samples, 0.17%)</title><rect x="66.9920%" y="165" width="0.1674%" height="15" fill="rgb(223,20,43)"/><text x="67.2420%" y="175.50"></text></g><g><title>adt_sized_constraint (275,343 samples, 0.21%)</title><rect x="66.9676%" y="181" width="0.2070%" height="15" fill="rgb(229,81,49)"/><text x="67.2176%" y="191.50"></text></g><g><title>adt_sized_constraint (704,777 samples, 0.53%)</title><rect x="66.6496%" y="197" width="0.5298%" height="15" fill="rgb(236,28,36)"/><text x="66.8996%" y="207.50"></text></g><g><title>evaluate_obligation (1,092,760 samples, 0.82%)</title><rect x="66.3784%" y="213" width="0.8215%" height="15" fill="rgb(249,185,26)"/><text x="66.6284%" y="223.50"></text></g><g><title>param_env (184,460 samples, 0.14%)</title><rect x="67.2469%" y="213" width="0.1387%" height="15" fill="rgb(249,174,33)"/><text x="67.4969%" y="223.50"></text></g><g><title>predicates_of (163,541 samples, 0.12%)</title><rect x="67.3855%" y="213" width="0.1229%" height="15" fill="rgb(233,201,37)"/><text x="67.6355%" y="223.50"></text></g><g><title>check_item_well_formed (2,454,578 samples, 1.85%)</title><rect x="65.7552%" y="229" width="1.8452%" height="15" fill="rgb(221,78,26)"/><text x="66.0052%" y="239.50">c..</text></g><g><title>analysis (89,507,607 samples, 67.29%)</title><rect x="0.4482%" y="277" width="67.2858%" height="15" fill="rgb(250,127,30)"/><text x="0.6982%" y="287.50">analysis</text></g><g><title>type_check_crate (60,263,102 samples, 45.30%)</title><rect x="22.4322%" y="261" width="45.3018%" height="15" fill="rgb(230,49,44)"/><text x="22.6822%" y="271.50">type_check_crate</text></g><g><title>wf_checking (5,614,303 samples, 4.22%)</title><rect x="63.5135%" y="245" width="4.2205%" height="15" fill="rgb(229,67,23)"/><text x="63.7635%" y="255.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (177,682 samples, 0.13%)</title><rect x="67.6004%" y="229" width="0.1336%" height="15" fill="rgb(249,83,47)"/><text x="67.8504%" y="239.50"></text></g><g><title>codegen_crate (460,845 samples, 0.35%)</title><rect x="67.7418%" y="277" width="0.3464%" height="15" fill="rgb(215,43,3)"/><text x="67.9918%" y="287.50"></text></g><g><title>AST_validation (225,742 samples, 0.17%)</title><rect x="68.2282%" y="261" width="0.1697%" height="15" fill="rgb(238,154,13)"/><text x="68.4782%" y="271.50"></text></g><g><title>metadata_load_macro (722,120 samples, 0.54%)</title><rect x="81.4475%" y="229" width="0.5428%" height="15" fill="rgb(219,56,2)"/><text x="81.6975%" y="239.50"></text></g><g><title>macro_expand_crate (21,471,379 samples, 16.14%)</title><rect x="68.5310%" y="261" width="16.1407%" height="15" fill="rgb(233,0,4)"/><text x="68.7810%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (21,447,708 samples, 16.12%)</title><rect x="68.5488%" y="245" width="16.1230%" height="15" fill="rgb(235,30,7)"/><text x="68.7988%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (3,566,980 samples, 2.68%)</title><rect x="81.9904%" y="229" width="2.6814%" height="15" fill="rgb(250,79,13)"/><text x="82.2404%" y="239.50">me..</text></g><g><title>metadata_register_crate (1,698,290 samples, 1.28%)</title><rect x="83.3951%" y="213" width="1.2767%" height="15" fill="rgb(211,146,34)"/><text x="83.6451%" y="223.50"></text></g><g><title>metadata_register_crate (417,858 samples, 0.31%)</title><rect x="84.3577%" y="197" width="0.3141%" height="15" fill="rgb(228,22,38)"/><text x="84.6077%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (337,433 samples, 0.25%)</title><rect x="84.6753%" y="261" width="0.2537%" height="15" fill="rgb(235,168,5)"/><text x="84.9253%" y="271.50"></text></g><g><title>finalize_macro_resolutions (256,293 samples, 0.19%)</title><rect x="84.9679%" y="245" width="0.1927%" height="15" fill="rgb(221,155,16)"/><text x="85.2179%" y="255.50"></text></g><g><title>late_resolve_crate (3,025,614 samples, 2.27%)</title><rect x="85.1606%" y="245" width="2.2745%" height="15" fill="rgb(215,215,53)"/><text x="85.4106%" y="255.50">l..</text></g><g><title>configure_and_expand (25,876,088 samples, 19.45%)</title><rect x="68.0882%" y="277" width="19.4519%" height="15" fill="rgb(223,4,10)"/><text x="68.3382%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (3,473,459 samples, 2.61%)</title><rect x="84.9290%" y="261" width="2.6111%" height="15" fill="rgb(234,103,6)"/><text x="85.1790%" y="271.50">re..</text></g><g><title>drop_ast (176,822 samples, 0.13%)</title><rect x="87.5401%" y="277" width="0.1329%" height="15" fill="rgb(227,97,0)"/><text x="87.7901%" y="287.50"></text></g><g><title>early_lint_checks (307,753 samples, 0.23%)</title><rect x="87.6873%" y="277" width="0.2313%" height="15" fill="rgb(234,150,53)"/><text x="87.9373%" y="287.50"></text></g><g><title>free_global_ctxt (4,296,258 samples, 3.23%)</title><rect x="87.9187%" y="277" width="3.2296%" height="15" fill="rgb(228,201,54)"/><text x="88.1687%" y="287.50">fre..</text></g><g><title>mir_for_ctfe (353,943 samples, 0.27%)</title><rect x="92.1237%" y="261" width="0.2661%" height="15" fill="rgb(222,22,37)"/><text x="92.3737%" y="271.50"></text></g><g><title>generate_crate_metadata (1,723,179 samples, 1.30%)</title><rect x="91.1483%" y="277" width="1.2954%" height="15" fill="rgb(237,53,32)"/><text x="91.3983%" y="287.50"></text></g><g><title>hir_lowering (2,967,534 samples, 2.23%)</title><rect x="92.4437%" y="277" width="2.2308%" height="15" fill="rgb(233,25,53)"/><text x="92.6937%" y="287.50">h..</text></g><g><title>parse_crate (5,264,369 samples, 3.96%)</title><rect x="94.7246%" y="277" width="3.9574%" height="15" fill="rgb(210,40,34)"/><text x="94.9746%" y="287.50">pars..</text></g><g><title>prepare_outputs (261,543 samples, 0.20%)</title><rect x="98.6882%" y="277" width="0.1966%" height="15" fill="rgb(241,220,44)"/><text x="98.9382%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (1,085,453 samples, 0.82%)</title><rect x="98.8848%" y="277" width="0.8160%" height="15" fill="rgb(235,28,35)"/><text x="99.1348%" y="287.50"></text></g><g><title>all (133,025,922 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(210,56,17)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (133,025,922 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (298,313 samples, 0.22%)</title><rect x="99.7757%" y="277" width="0.2243%" height="15" fill="rgb(235,212,8)"/><text x="100.0257%" y="287.50"></text></g></svg></svg>