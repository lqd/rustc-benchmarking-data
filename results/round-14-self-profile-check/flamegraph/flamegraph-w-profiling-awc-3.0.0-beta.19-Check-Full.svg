<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,841,112 samples, 0.18%)</title><rect x="8.9970%" y="213" width="0.1779%" height="15" fill="rgb(227,0,7)"/><text x="9.2470%" y="223.50"></text></g><g><title>param_env (1,139,669 samples, 0.11%)</title><rect x="10.2815%" y="181" width="0.1101%" height="15" fill="rgb(217,0,24)"/><text x="10.5315%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,156,757 samples, 0.11%)</title><rect x="10.7404%" y="165" width="0.1118%" height="15" fill="rgb(221,193,54)"/><text x="10.9904%" y="175.50"></text></g><g><title>adt_drop_tys (1,277,212 samples, 0.12%)</title><rect x="12.9200%" y="133" width="0.1234%" height="15" fill="rgb(248,212,6)"/><text x="13.1700%" y="143.50"></text></g><g><title>is_copy_raw (9,305,899 samples, 0.90%)</title><rect x="13.0434%" y="133" width="0.8993%" height="15" fill="rgb(208,68,35)"/><text x="13.2934%" y="143.50"></text></g><g><title>evaluate_obligation (7,351,387 samples, 0.71%)</title><rect x="13.2323%" y="117" width="0.7105%" height="15" fill="rgb(232,128,0)"/><text x="13.4823%" y="127.50"></text></g><g><title>needs_drop_raw (12,068,622 samples, 1.17%)</title><rect x="12.7789%" y="149" width="1.1663%" height="15" fill="rgb(207,160,47)"/><text x="13.0289%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (1,402,345 samples, 0.14%)</title><rect x="14.0516%" y="133" width="0.1355%" height="15" fill="rgb(228,23,34)"/><text x="14.3016%" y="143.50"></text></g><g><title>specialization_graph_of (1,404,115 samples, 0.14%)</title><rect x="14.2266%" y="133" width="0.1357%" height="15" fill="rgb(218,30,26)"/><text x="14.4766%" y="143.50"></text></g><g><title>resolve_instance (4,691,831 samples, 0.45%)</title><rect x="13.9452%" y="149" width="0.4534%" height="15" fill="rgb(220,122,19)"/><text x="14.1952%" y="159.50"></text></g><g><title>thir_body (6,882,023 samples, 0.67%)</title><rect x="14.4148%" y="149" width="0.6651%" height="15" fill="rgb(250,228,42)"/><text x="14.6648%" y="159.50"></text></g><g><title>mir_const (54,860,302 samples, 5.30%)</title><rect x="9.8060%" y="197" width="5.3018%" height="15" fill="rgb(240,193,28)"/><text x="10.0560%" y="207.50">mir_co..</text></g><g><title>unsafety_check_result (48,800,679 samples, 4.72%)</title><rect x="10.3916%" y="181" width="4.7162%" height="15" fill="rgb(216,20,37)"/><text x="10.6416%" y="191.50">unsaf..</text></g><g><title>mir_built (44,034,384 samples, 4.26%)</title><rect x="10.8522%" y="165" width="4.2556%" height="15" fill="rgb(206,188,39)"/><text x="11.1022%" y="175.50">mir_b..</text></g><g><title>mir_const_qualif (1,468,996 samples, 0.14%)</title><rect x="15.1078%" y="197" width="0.1420%" height="15" fill="rgb(217,207,13)"/><text x="15.3578%" y="207.50"></text></g><g><title>mir_promoted (61,937,065 samples, 5.99%)</title><rect x="9.2644%" y="213" width="5.9857%" height="15" fill="rgb(231,73,38)"/><text x="9.5144%" y="223.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (6,132,569 samples, 0.59%)</title><rect x="15.2503%" y="213" width="0.5927%" height="15" fill="rgb(225,20,46)"/><text x="15.5003%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (4,128,127 samples, 0.40%)</title><rect x="15.8430%" y="213" width="0.3990%" height="15" fill="rgb(210,31,41)"/><text x="16.0930%" y="223.50"></text></g><g><title>normalize_projection_ty (2,345,441 samples, 0.23%)</title><rect x="16.0152%" y="197" width="0.2267%" height="15" fill="rgb(221,200,47)"/><text x="16.2652%" y="207.50"></text></g><g><title>type_op_normalize_predicate (1,983,059 samples, 0.19%)</title><rect x="16.2427%" y="213" width="0.1916%" height="15" fill="rgb(226,26,5)"/><text x="16.4927%" y="223.50"></text></g><g><title>normalize_projection_ty (1,050,261 samples, 0.10%)</title><rect x="16.3329%" y="197" width="0.1015%" height="15" fill="rgb(249,33,26)"/><text x="16.5829%" y="207.50"></text></g><g><title>type_op_normalize_ty (1,897,364 samples, 0.18%)</title><rect x="16.4344%" y="213" width="0.1834%" height="15" fill="rgb(235,183,28)"/><text x="16.6844%" y="223.50"></text></g><g><title>normalize_projection_ty (1,248,311 samples, 0.12%)</title><rect x="16.4971%" y="197" width="0.1206%" height="15" fill="rgb(221,5,38)"/><text x="16.7471%" y="207.50"></text></g><g><title>type_op_prove_predicate (27,467,422 samples, 2.65%)</title><rect x="16.6177%" y="213" width="2.6545%" height="15" fill="rgb(247,18,42)"/><text x="16.8677%" y="223.50">ty..</text></g><g><title>MIR_borrow_checking (195,613,002 samples, 18.90%)</title><rect x="0.3701%" y="245" width="18.9045%" height="15" fill="rgb(241,131,45)"/><text x="0.6201%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (194,795,034 samples, 18.83%)</title><rect x="0.4492%" y="229" width="18.8254%" height="15" fill="rgb(249,31,29)"/><text x="0.6992%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (1,544,737 samples, 0.15%)</title><rect x="19.3411%" y="245" width="0.1493%" height="15" fill="rgb(225,111,53)"/><text x="19.5911%" y="255.50"></text></g><g><title>codegen_fn_attrs (1,325,296 samples, 0.13%)</title><rect x="19.6466%" y="213" width="0.1281%" height="15" fill="rgb(238,160,17)"/><text x="19.8966%" y="223.50"></text></g><g><title>should_inherit_track_caller (1,127,184 samples, 0.11%)</title><rect x="19.6658%" y="197" width="0.1089%" height="15" fill="rgb(214,148,48)"/><text x="19.9158%" y="207.50"></text></g><g><title>check_mod_attrs (2,870,763 samples, 0.28%)</title><rect x="19.4973%" y="229" width="0.2774%" height="15" fill="rgb(232,36,49)"/><text x="19.7473%" y="239.50"></text></g><g><title>lint_levels (1,673,788 samples, 0.16%)</title><rect x="20.0156%" y="213" width="0.1618%" height="15" fill="rgb(209,103,24)"/><text x="20.2656%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (3,893,000 samples, 0.38%)</title><rect x="19.9142%" y="229" width="0.3762%" height="15" fill="rgb(229,88,8)"/><text x="20.1642%" y="239.50"></text></g><g><title>misc_checking_1 (8,642,806 samples, 0.84%)</title><rect x="19.4904%" y="245" width="0.8353%" height="15" fill="rgb(213,181,19)"/><text x="19.7404%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (6,084,347 samples, 0.59%)</title><rect x="20.3260%" y="229" width="0.5880%" height="15" fill="rgb(254,191,54)"/><text x="20.5760%" y="239.50"></text></g><g><title>check_mod_liveness (5,353,629 samples, 0.52%)</title><rect x="20.3966%" y="213" width="0.5174%" height="15" fill="rgb(241,83,37)"/><text x="20.6466%" y="223.50"></text></g><g><title>type_uninhabited_from (2,497,975 samples, 0.24%)</title><rect x="20.6726%" y="197" width="0.2414%" height="15" fill="rgb(233,36,39)"/><text x="20.9226%" y="207.50"></text></g><g><title>type_uninhabited_from (2,025,338 samples, 0.20%)</title><rect x="20.7183%" y="181" width="0.1957%" height="15" fill="rgb(226,3,54)"/><text x="20.9683%" y="191.50"></text></g><g><title>type_uninhabited_from (1,712,574 samples, 0.17%)</title><rect x="20.7485%" y="165" width="0.1655%" height="15" fill="rgb(245,192,40)"/><text x="20.9985%" y="175.50"></text></g><g><title>type_uninhabited_from (1,425,961 samples, 0.14%)</title><rect x="20.7762%" y="149" width="0.1378%" height="15" fill="rgb(238,167,29)"/><text x="21.0262%" y="159.50"></text></g><g><title>type_uninhabited_from (1,164,901 samples, 0.11%)</title><rect x="20.8014%" y="133" width="0.1126%" height="15" fill="rgb(232,182,51)"/><text x="21.0514%" y="143.50"></text></g><g><title>misc_checking_2 (19,386,144 samples, 1.87%)</title><rect x="20.3257%" y="245" width="1.8735%" height="15" fill="rgb(231,60,39)"/><text x="20.5757%" y="255.50">m..</text></g><g><title>match_checking (13,298,577 samples, 1.29%)</title><rect x="20.9140%" y="229" width="1.2852%" height="15" fill="rgb(208,69,12)"/><text x="21.1640%" y="239.50"></text></g><g><title>check_match (12,992,823 samples, 1.26%)</title><rect x="20.9436%" y="213" width="1.2557%" height="15" fill="rgb(235,93,37)"/><text x="21.1936%" y="223.50"></text></g><g><title>visible_parent_map (6,521,912 samples, 0.63%)</title><rect x="21.5689%" y="197" width="0.6303%" height="15" fill="rgb(213,116,39)"/><text x="21.8189%" y="207.50"></text></g><g><title>module_children (5,842,672 samples, 0.56%)</title><rect x="21.6346%" y="181" width="0.5646%" height="15" fill="rgb(222,207,29)"/><text x="21.8846%" y="191.50"></text></g><g><title>metadata_decode_entry_module_children (5,702,321 samples, 0.55%)</title><rect x="21.6481%" y="165" width="0.5511%" height="15" fill="rgb(206,96,30)"/><text x="21.8981%" y="175.50"></text></g><g><title>check_private_in_public (1,983,132 samples, 0.19%)</title><rect x="22.2007%" y="229" width="0.1917%" height="15" fill="rgb(218,138,4)"/><text x="22.4507%" y="239.50"></text></g><g><title>death_checking (3,537,129 samples, 0.34%)</title><rect x="22.3923%" y="229" width="0.3418%" height="15" fill="rgb(250,191,14)"/><text x="22.6423%" y="239.50"></text></g><g><title>eval_to_const_value_raw (2,253,294 samples, 0.22%)</title><rect x="23.1616%" y="197" width="0.2178%" height="15" fill="rgb(239,60,40)"/><text x="23.4116%" y="207.50"></text></g><g><title>eval_to_const_value_raw (2,234,994 samples, 0.22%)</title><rect x="23.1634%" y="181" width="0.2160%" height="15" fill="rgb(206,27,48)"/><text x="23.4134%" y="191.50"></text></g><g><title>eval_to_allocation_raw (2,202,844 samples, 0.21%)</title><rect x="23.1665%" y="165" width="0.2129%" height="15" fill="rgb(225,35,8)"/><text x="23.4165%" y="175.50"></text></g><g><title>param_env (3,355,718 samples, 0.32%)</title><rect x="23.3794%" y="197" width="0.3243%" height="15" fill="rgb(250,213,24)"/><text x="23.6294%" y="207.50"></text></g><g><title>predicates_of (1,450,357 samples, 0.14%)</title><rect x="23.5635%" y="181" width="0.1402%" height="15" fill="rgb(247,123,22)"/><text x="23.8135%" y="191.50"></text></g><g><title>predicates_defined_on (1,167,725 samples, 0.11%)</title><rect x="23.5908%" y="165" width="0.1129%" height="15" fill="rgb(231,138,38)"/><text x="23.8408%" y="175.50"></text></g><g><title>crate_lints (12,767,221 samples, 1.23%)</title><rect x="22.7345%" y="213" width="1.2339%" height="15" fill="rgb(231,145,46)"/><text x="22.9845%" y="223.50"></text></g><g><title>type_of (2,365,425 samples, 0.23%)</title><rect x="23.7398%" y="197" width="0.2286%" height="15" fill="rgb(251,118,11)"/><text x="23.9898%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (1,669,658 samples, 0.16%)</title><rect x="23.8070%" y="181" width="0.1614%" height="15" fill="rgb(217,147,25)"/><text x="24.0570%" y="191.50"></text></g><g><title>layout_of (1,164,621 samples, 0.11%)</title><rect x="24.4644%" y="149" width="0.1126%" height="15" fill="rgb(247,81,37)"/><text x="24.7144%" y="159.50"></text></g><g><title>layout_of (1,810,711 samples, 0.17%)</title><rect x="24.4538%" y="165" width="0.1750%" height="15" fill="rgb(209,12,38)"/><text x="24.7038%" y="175.50"></text></g><g><title>layout_of (1,999,711 samples, 0.19%)</title><rect x="24.4367%" y="181" width="0.1933%" height="15" fill="rgb(227,1,9)"/><text x="24.6867%" y="191.50"></text></g><g><title>lint_checking (19,616,907 samples, 1.90%)</title><rect x="22.7342%" y="229" width="1.8958%" height="15" fill="rgb(248,47,43)"/><text x="22.9842%" y="239.50">l..</text></g><g><title>module_lints (6,846,216 samples, 0.66%)</title><rect x="23.9684%" y="213" width="0.6616%" height="15" fill="rgb(221,10,30)"/><text x="24.2184%" y="223.50"></text></g><g><title>lint_mod (6,820,485 samples, 0.66%)</title><rect x="23.9709%" y="197" width="0.6591%" height="15" fill="rgb(210,229,1)"/><text x="24.2209%" y="207.50"></text></g><g><title>privacy_access_levels (3,720,531 samples, 0.36%)</title><rect x="24.6300%" y="229" width="0.3596%" height="15" fill="rgb(222,148,37)"/><text x="24.8800%" y="239.50"></text></g><g><title>privacy_checking_modules (10,103,801 samples, 0.98%)</title><rect x="24.9896%" y="229" width="0.9765%" height="15" fill="rgb(234,67,33)"/><text x="25.2396%" y="239.50"></text></g><g><title>check_mod_privacy (9,857,349 samples, 0.95%)</title><rect x="25.0134%" y="213" width="0.9526%" height="15" fill="rgb(247,98,35)"/><text x="25.2634%" y="223.50"></text></g><g><title>misc_checking_3 (39,043,631 samples, 3.77%)</title><rect x="22.1992%" y="245" width="3.7733%" height="15" fill="rgb(247,138,52)"/><text x="22.4492%" y="255.50">misc..</text></g><g><title>impl_parent (5,151,349 samples, 0.50%)</title><rect x="26.9965%" y="181" width="0.4978%" height="15" fill="rgb(213,79,30)"/><text x="27.2465%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (3,090,134 samples, 0.30%)</title><rect x="27.1957%" y="165" width="0.2986%" height="15" fill="rgb(246,177,23)"/><text x="27.4457%" y="175.50"></text></g><g><title>impl_trait_ref (11,363,643 samples, 1.10%)</title><rect x="27.4945%" y="181" width="1.0982%" height="15" fill="rgb(230,62,27)"/><text x="27.7445%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (9,294,945 samples, 0.90%)</title><rect x="27.6944%" y="165" width="0.8983%" height="15" fill="rgb(216,154,8)"/><text x="27.9444%" y="175.50"></text></g><g><title>trait_impls_of (3,094,015 samples, 0.30%)</title><rect x="28.6011%" y="181" width="0.2990%" height="15" fill="rgb(244,35,45)"/><text x="28.8511%" y="191.50"></text></g><g><title>implementations_of_trait (1,477,641 samples, 0.14%)</title><rect x="28.7573%" y="165" width="0.1428%" height="15" fill="rgb(251,115,12)"/><text x="29.0073%" y="175.50"></text></g><g><title>coherent_trait (29,691,389 samples, 2.87%)</title><rect x="26.0307%" y="213" width="2.8694%" height="15" fill="rgb(240,54,50)"/><text x="26.2807%" y="223.50">co..</text></g><g><title>specialization_graph_of (29,626,618 samples, 2.86%)</title><rect x="26.0370%" y="197" width="2.8632%" height="15" fill="rgb(233,84,52)"/><text x="26.2870%" y="207.50">sp..</text></g><g><title>coherence_checking (30,263,544 samples, 2.92%)</title><rect x="26.0263%" y="229" width="2.9247%" height="15" fill="rgb(207,117,47)"/><text x="26.2763%" y="239.50">co..</text></g><g><title>dropck_outlives (5,334,457 samples, 0.52%)</title><rect x="41.3919%" y="181" width="0.5155%" height="15" fill="rgb(249,43,39)"/><text x="41.6419%" y="191.50"></text></g><g><title>evaluate_obligation (11,595,421 samples, 1.12%)</title><rect x="41.9085%" y="181" width="1.1206%" height="15" fill="rgb(209,38,44)"/><text x="42.1585%" y="191.50"></text></g><g><title>method_autoderef_steps (8,673,876 samples, 0.84%)</title><rect x="43.1486%" y="181" width="0.8383%" height="15" fill="rgb(236,212,23)"/><text x="43.3986%" y="191.50"></text></g><g><title>evaluate_obligation (2,280,456 samples, 0.22%)</title><rect x="43.7665%" y="165" width="0.2204%" height="15" fill="rgb(242,79,21)"/><text x="44.0165%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,065,332 samples, 0.10%)</title><rect x="48.7966%" y="133" width="0.1030%" height="15" fill="rgb(211,96,35)"/><text x="49.0466%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,865,622 samples, 0.18%)</title><rect x="48.7316%" y="149" width="0.1803%" height="15" fill="rgb(253,215,40)"/><text x="48.9816%" y="159.50"></text></g><g><title>dropck_outlives (5,264,891 samples, 0.51%)</title><rect x="48.4395%" y="165" width="0.5088%" height="15" fill="rgb(211,81,21)"/><text x="48.6895%" y="175.50"></text></g><g><title>evaluate_obligation (6,222,275 samples, 0.60%)</title><rect x="48.9492%" y="165" width="0.6013%" height="15" fill="rgb(208,190,38)"/><text x="49.1992%" y="175.50"></text></g><g><title>is_copy_raw (1,911,239 samples, 0.18%)</title><rect x="49.6542%" y="165" width="0.1847%" height="15" fill="rgb(235,213,38)"/><text x="49.9042%" y="175.50"></text></g><g><title>evaluate_obligation (1,547,056 samples, 0.15%)</title><rect x="49.6894%" y="149" width="0.1495%" height="15" fill="rgb(237,122,38)"/><text x="49.9394%" y="159.50"></text></g><g><title>evaluate_obligation (1,586,120 samples, 0.15%)</title><rect x="50.0538%" y="149" width="0.1533%" height="15" fill="rgb(244,218,35)"/><text x="50.3038%" y="159.50"></text></g><g><title>method_autoderef_steps (3,584,414 samples, 0.35%)</title><rect x="49.8645%" y="165" width="0.3464%" height="15" fill="rgb(240,68,47)"/><text x="50.1145%" y="175.50"></text></g><g><title>typeck (64,343,831 samples, 6.22%)</title><rect x="44.1250%" y="181" width="6.2183%" height="15" fill="rgb(210,16,53)"/><text x="44.3750%" y="191.50">typeck</text></g><g><title>item_bodies_checking (221,278,355 samples, 21.38%)</title><rect x="28.9735%" y="229" width="21.3848%" height="15" fill="rgb(235,124,12)"/><text x="29.2235%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (221,274,035 samples, 21.38%)</title><rect x="28.9739%" y="213" width="21.3844%" height="15" fill="rgb(224,169,11)"/><text x="29.2239%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (220,725,700 samples, 21.33%)</title><rect x="29.0269%" y="197" width="21.3314%" height="15" fill="rgb(250,166,2)"/><text x="29.2769%" y="207.50">typeck</text></g><g><title>mir_borrowck (4,327,267 samples, 0.42%)</title><rect x="53.7134%" y="149" width="0.4182%" height="15" fill="rgb(242,216,29)"/><text x="53.9634%" y="159.50"></text></g><g><title>mir_const (1,513,856 samples, 0.15%)</title><rect x="54.2474%" y="133" width="0.1463%" height="15" fill="rgb(230,116,27)"/><text x="54.4974%" y="143.50"></text></g><g><title>mir_promoted (2,730,771 samples, 0.26%)</title><rect x="54.1316%" y="149" width="0.2639%" height="15" fill="rgb(228,99,48)"/><text x="54.3816%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,729,790 samples, 0.36%)</title><rect x="54.4880%" y="149" width="0.3605%" height="15" fill="rgb(253,11,6)"/><text x="54.7380%" y="159.50"></text></g><g><title>normalize_projection_ty (2,652,732 samples, 0.26%)</title><rect x="54.5921%" y="133" width="0.2564%" height="15" fill="rgb(247,143,39)"/><text x="54.8421%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,943,123 samples, 0.77%)</title><rect x="54.9202%" y="149" width="0.7676%" height="15" fill="rgb(236,97,10)"/><text x="55.1702%" y="159.50"></text></g><g><title>mir_borrowck (40,915,721 samples, 3.95%)</title><rect x="51.7349%" y="165" width="3.9542%" height="15" fill="rgb(233,208,19)"/><text x="51.9849%" y="175.50">mir_..</text></g><g><title>needs_drop_raw (1,284,436 samples, 0.12%)</title><rect x="55.8567%" y="101" width="0.1241%" height="15" fill="rgb(216,164,2)"/><text x="56.1067%" y="111.50"></text></g><g><title>associated_items (1,487,399 samples, 0.14%)</title><rect x="61.4595%" y="85" width="0.1437%" height="15" fill="rgb(220,129,5)"/><text x="61.7095%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,235,261 samples, 0.22%)</title><rect x="61.9531%" y="37" width="0.2160%" height="15" fill="rgb(242,17,10)"/><text x="62.2031%" y="47.50"></text></g><g><title>adt_dtorck_constraint (2,903,395 samples, 0.28%)</title><rect x="61.9020%" y="53" width="0.2806%" height="15" fill="rgb(242,107,0)"/><text x="62.1520%" y="63.50"></text></g><g><title>adt_dtorck_constraint (4,031,815 samples, 0.39%)</title><rect x="61.8112%" y="69" width="0.3896%" height="15" fill="rgb(251,28,31)"/><text x="62.0612%" y="79.50"></text></g><g><title>dropck_outlives (6,136,398 samples, 0.59%)</title><rect x="61.6236%" y="85" width="0.5930%" height="15" fill="rgb(233,223,10)"/><text x="61.8736%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,555,656 samples, 0.15%)</title><rect x="62.2195%" y="85" width="0.1503%" height="15" fill="rgb(215,21,27)"/><text x="62.4695%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,527,526 samples, 0.15%)</title><rect x="62.2222%" y="69" width="0.1476%" height="15" fill="rgb(232,23,21)"/><text x="62.4722%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,487,656 samples, 0.14%)</title><rect x="62.2260%" y="53" width="0.1438%" height="15" fill="rgb(244,5,23)"/><text x="62.4760%" y="63.50"></text></g><g><title>trait_impls_of (2,061,354 samples, 0.20%)</title><rect x="63.1580%" y="69" width="0.1992%" height="15" fill="rgb(226,81,46)"/><text x="63.4080%" y="79.50"></text></g><g><title>evaluate_obligation (10,228,493 samples, 0.99%)</title><rect x="62.3698%" y="85" width="0.9885%" height="15" fill="rgb(247,70,30)"/><text x="62.6198%" y="95.50"></text></g><g><title>is_copy_raw (1,733,967 samples, 0.17%)</title><rect x="63.5319%" y="85" width="0.1676%" height="15" fill="rgb(212,68,19)"/><text x="63.7819%" y="95.50"></text></g><g><title>evaluate_obligation (1,279,511 samples, 0.12%)</title><rect x="63.5758%" y="69" width="0.1237%" height="15" fill="rgb(240,187,13)"/><text x="63.8258%" y="79.50"></text></g><g><title>method_autoderef_steps (1,940,719 samples, 0.19%)</title><rect x="63.7613%" y="85" width="0.1876%" height="15" fill="rgb(223,113,26)"/><text x="64.0113%" y="95.50"></text></g><g><title>predicates_of (1,593,422 samples, 0.15%)</title><rect x="63.9608%" y="85" width="0.1540%" height="15" fill="rgb(206,192,2)"/><text x="64.2108%" y="95.50"></text></g><g><title>predicates_defined_on (1,075,899 samples, 0.10%)</title><rect x="64.0108%" y="69" width="0.1040%" height="15" fill="rgb(241,108,4)"/><text x="64.2608%" y="79.50"></text></g><g><title>mir_built (87,903,232 samples, 8.50%)</title><rect x="55.7803%" y="117" width="8.4952%" height="15" fill="rgb(247,173,49)"/><text x="56.0303%" y="127.50">mir_built</text></g><g><title>typeck (85,463,765 samples, 8.26%)</title><rect x="56.0161%" y="101" width="8.2594%" height="15" fill="rgb(224,114,35)"/><text x="56.2661%" y="111.50">typeck</text></g><g><title>needs_drop_raw (2,046,391 samples, 0.20%)</title><rect x="64.7842%" y="85" width="0.1978%" height="15" fill="rgb(245,159,27)"/><text x="65.0342%" y="95.50"></text></g><g><title>thir_body (1,867,811 samples, 0.18%)</title><rect x="64.9842%" y="85" width="0.1805%" height="15" fill="rgb(245,172,44)"/><text x="65.2342%" y="95.50"></text></g><g><title>mir_built (7,867,907 samples, 0.76%)</title><rect x="64.4081%" y="101" width="0.7604%" height="15" fill="rgb(236,23,11)"/><text x="64.6581%" y="111.50"></text></g><g><title>mir_const (98,871,225 samples, 9.56%)</title><rect x="55.7085%" y="149" width="9.5551%" height="15" fill="rgb(205,117,38)"/><text x="55.9585%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (98,320,059 samples, 9.50%)</title><rect x="55.7618%" y="133" width="9.5019%" height="15" fill="rgb(237,72,25)"/><text x="56.0118%" y="143.50">unsafety_check..</text></g><g><title>unsafety_check_result (10,224,984 samples, 0.99%)</title><rect x="64.2755%" y="117" width="0.9882%" height="15" fill="rgb(244,70,9)"/><text x="64.5255%" y="127.50"></text></g><g><title>mir_promoted (99,089,148 samples, 9.58%)</title><rect x="55.6891%" y="165" width="9.5762%" height="15" fill="rgb(217,125,39)"/><text x="55.9391%" y="175.50">mir_promoted</text></g><g><title>type_of (144,966,255 samples, 14.01%)</title><rect x="51.3815%" y="197" width="14.0099%" height="15" fill="rgb(235,36,10)"/><text x="51.6315%" y="207.50">type_of</text></g><g><title>mir_borrowck (144,771,010 samples, 13.99%)</title><rect x="51.4004%" y="181" width="13.9910%" height="15" fill="rgb(251,123,47)"/><text x="51.6504%" y="191.50">mir_borrowck</text></g><g><title>evaluate_obligation (1,610,518 samples, 0.16%)</title><rect x="65.5163%" y="181" width="0.1556%" height="15" fill="rgb(221,13,13)"/><text x="65.7663%" y="191.50"></text></g><g><title>item_types_checking (158,649,684 samples, 15.33%)</title><rect x="50.3583%" y="229" width="15.3323%" height="15" fill="rgb(238,131,9)"/><text x="50.6083%" y="239.50">item_types_checking</text></g><g><title>check_mod_item_types (158,613,542 samples, 15.33%)</title><rect x="50.3618%" y="213" width="15.3288%" height="15" fill="rgb(211,50,8)"/><text x="50.6118%" y="223.50">check_mod_item_types</text></g><g><title>typeck (3,096,016 samples, 0.30%)</title><rect x="65.3914%" y="197" width="0.2992%" height="15" fill="rgb(245,182,24)"/><text x="65.6414%" y="207.50"></text></g><g><title>fn_sig (1,629,111 samples, 0.16%)</title><rect x="65.9049%" y="197" width="0.1574%" height="15" fill="rgb(242,14,37)"/><text x="66.1549%" y="207.50"></text></g><g><title>generics_of (1,741,094 samples, 0.17%)</title><rect x="66.0623%" y="197" width="0.1683%" height="15" fill="rgb(246,228,12)"/><text x="66.3123%" y="207.50"></text></g><g><title>late_bound_vars_map (1,599,271 samples, 0.15%)</title><rect x="66.5247%" y="149" width="0.1546%" height="15" fill="rgb(213,55,15)"/><text x="66.7747%" y="159.50"></text></g><g><title>resolve_lifetimes (1,517,159 samples, 0.15%)</title><rect x="66.5327%" y="133" width="0.1466%" height="15" fill="rgb(209,9,3)"/><text x="66.7827%" y="143.50"></text></g><g><title>explicit_predicates_of (3,732,706 samples, 0.36%)</title><rect x="66.3536%" y="165" width="0.3607%" height="15" fill="rgb(230,59,30)"/><text x="66.6036%" y="175.50"></text></g><g><title>predicates_of (7,753,747 samples, 0.75%)</title><rect x="66.2542%" y="197" width="0.7493%" height="15" fill="rgb(209,121,21)"/><text x="66.5042%" y="207.50"></text></g><g><title>predicates_defined_on (7,364,645 samples, 0.71%)</title><rect x="66.2918%" y="181" width="0.7117%" height="15" fill="rgb(220,109,13)"/><text x="66.5418%" y="191.50"></text></g><g><title>inferred_outlives_of (2,992,652 samples, 0.29%)</title><rect x="66.7143%" y="165" width="0.2892%" height="15" fill="rgb(232,18,1)"/><text x="66.9643%" y="175.50"></text></g><g><title>inferred_outlives_crate (2,830,911 samples, 0.27%)</title><rect x="66.7299%" y="149" width="0.2736%" height="15" fill="rgb(215,41,42)"/><text x="66.9799%" y="159.50"></text></g><g><title>type_of (1,571,163 samples, 0.15%)</title><rect x="66.8517%" y="133" width="0.1518%" height="15" fill="rgb(224,123,36)"/><text x="67.1017%" y="143.50"></text></g><g><title>type_collecting (14,516,060 samples, 1.40%)</title><rect x="65.6941%" y="229" width="1.4029%" height="15" fill="rgb(240,125,3)"/><text x="65.9441%" y="239.50"></text></g><g><title>collect_mod_item_types (14,485,500 samples, 1.40%)</title><rect x="65.6970%" y="213" width="1.3999%" height="15" fill="rgb(205,98,50)"/><text x="65.9470%" y="223.50"></text></g><g><title>evaluate_obligation (5,948,506 samples, 0.57%)</title><rect x="68.9630%" y="197" width="0.5749%" height="15" fill="rgb(205,185,37)"/><text x="69.2130%" y="207.50"></text></g><g><title>implied_outlives_bounds (2,624,634 samples, 0.25%)</title><rect x="69.5494%" y="197" width="0.2537%" height="15" fill="rgb(238,207,15)"/><text x="69.7994%" y="207.50"></text></g><g><title>param_env (3,271,138 samples, 0.32%)</title><rect x="69.8990%" y="197" width="0.3161%" height="15" fill="rgb(213,199,42)"/><text x="70.1490%" y="207.50"></text></g><g><title>region_scope_tree (2,428,679 samples, 0.23%)</title><rect x="70.2308%" y="197" width="0.2347%" height="15" fill="rgb(235,201,11)"/><text x="70.4808%" y="207.50"></text></g><g><title>check_impl_item_well_formed (33,524,156 samples, 3.24%)</title><rect x="67.2761%" y="213" width="3.2399%" height="15" fill="rgb(207,46,11)"/><text x="67.5261%" y="223.50">che..</text></g><g><title>evaluate_obligation (2,928,147 samples, 0.28%)</title><rect x="71.8174%" y="197" width="0.2830%" height="15" fill="rgb(241,35,35)"/><text x="72.0674%" y="207.50"></text></g><g><title>param_env (2,483,772 samples, 0.24%)</title><rect x="72.1790%" y="197" width="0.2400%" height="15" fill="rgb(243,32,47)"/><text x="72.4290%" y="207.50"></text></g><g><title>check_item_well_formed (21,312,280 samples, 2.06%)</title><rect x="70.5160%" y="213" width="2.0597%" height="15" fill="rgb(247,202,23)"/><text x="70.7660%" y="223.50">c..</text></g><g><title>analysis (749,096,549 samples, 72.39%)</title><rect x="0.1966%" y="261" width="72.3944%" height="15" fill="rgb(219,102,11)"/><text x="0.4466%" y="271.50">analysis</text></g><g><title>type_check_crate (482,382,321 samples, 46.62%)</title><rect x="25.9725%" y="245" width="46.6185%" height="15" fill="rgb(243,110,44)"/><text x="26.2225%" y="255.50">type_check_crate</text></g><g><title>wf_checking (56,814,727 samples, 5.49%)</title><rect x="67.1003%" y="229" width="5.4907%" height="15" fill="rgb(222,74,54)"/><text x="67.3503%" y="239.50">wf_chec..</text></g><g><title>codegen_crate (1,037,702 samples, 0.10%)</title><rect x="72.5919%" y="261" width="0.1003%" height="15" fill="rgb(216,99,12)"/><text x="72.8419%" y="271.50"></text></g><g><title>AST_validation (1,275,324 samples, 0.12%)</title><rect x="72.7131%" y="245" width="0.1233%" height="15" fill="rgb(226,22,26)"/><text x="72.9631%" y="255.50"></text></g><g><title>metadata_load_macro (1,108,313 samples, 0.11%)</title><rect x="88.1304%" y="213" width="0.1071%" height="15" fill="rgb(217,163,10)"/><text x="88.3804%" y="223.50"></text></g><g><title>metadata_register_crate (9,330,463 samples, 0.90%)</title><rect x="88.2375%" y="213" width="0.9017%" height="15" fill="rgb(213,25,53)"/><text x="88.4875%" y="223.50"></text></g><g><title>metadata_register_crate (6,981,433 samples, 0.67%)</title><rect x="88.4645%" y="197" width="0.6747%" height="15" fill="rgb(252,105,26)"/><text x="88.7145%" y="207.50"></text></g><g><title>metadata_register_crate (1,923,822 samples, 0.19%)</title><rect x="88.9533%" y="181" width="0.1859%" height="15" fill="rgb(220,39,43)"/><text x="89.2033%" y="191.50"></text></g><g><title>macro_expand_crate (170,029,609 samples, 16.43%)</title><rect x="72.8880%" y="245" width="16.4321%" height="15" fill="rgb(229,68,48)"/><text x="73.1380%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (170,014,189 samples, 16.43%)</title><rect x="72.8895%" y="229" width="16.4306%" height="15" fill="rgb(252,8,32)"/><text x="73.1395%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,871,341 samples, 0.18%)</title><rect x="89.1392%" y="213" width="0.1809%" height="15" fill="rgb(223,20,43)"/><text x="89.3892%" y="223.50"></text></g><g><title>late_resolve_crate (11,845,300 samples, 1.14%)</title><rect x="89.4904%" y="229" width="1.1448%" height="15" fill="rgb(229,81,49)"/><text x="89.7404%" y="239.50"></text></g><g><title>configure_and_expand (187,053,908 samples, 18.08%)</title><rect x="72.6922%" y="261" width="18.0773%" height="15" fill="rgb(236,28,36)"/><text x="72.9422%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (14,848,174 samples, 1.43%)</title><rect x="89.3345%" y="245" width="1.4350%" height="15" fill="rgb(249,185,26)"/><text x="89.5845%" y="255.50"></text></g><g><title>drop_ast (1,893,681 samples, 0.18%)</title><rect x="90.7695%" y="261" width="0.1830%" height="15" fill="rgb(249,174,33)"/><text x="91.0195%" y="271.50"></text></g><g><title>early_lint_checks (3,912,683 samples, 0.38%)</title><rect x="90.9565%" y="261" width="0.3781%" height="15" fill="rgb(233,201,37)"/><text x="91.2065%" y="271.50"></text></g><g><title>free_global_ctxt (12,718,150 samples, 1.23%)</title><rect x="91.3347%" y="261" width="1.2291%" height="15" fill="rgb(221,78,26)"/><text x="91.5847%" y="271.50"></text></g><g><title>opt_def_kind (1,332,464 samples, 0.13%)</title><rect x="94.0123%" y="245" width="0.1288%" height="15" fill="rgb(250,127,30)"/><text x="94.2623%" y="255.50"></text></g><g><title>is_copy_raw (2,110,230 samples, 0.20%)</title><rect x="96.6906%" y="197" width="0.2039%" height="15" fill="rgb(230,49,44)"/><text x="96.9406%" y="207.50"></text></g><g><title>evaluate_obligation (1,656,935 samples, 0.16%)</title><rect x="96.7344%" y="181" width="0.1601%" height="15" fill="rgb(229,67,23)"/><text x="96.9844%" y="191.50"></text></g><g><title>needs_drop_raw (2,679,316 samples, 0.26%)</title><rect x="96.6395%" y="213" width="0.2589%" height="15" fill="rgb(249,83,47)"/><text x="96.8895%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (15,977,278 samples, 1.54%)</title><rect x="95.4058%" y="229" width="1.5441%" height="15" fill="rgb(215,43,3)"/><text x="95.6558%" y="239.50"></text></g><g><title>optimized_mir (29,089,102 samples, 2.81%)</title><rect x="94.1410%" y="245" width="2.8112%" height="15" fill="rgb(238,154,13)"/><text x="94.3910%" y="255.50">op..</text></g><g><title>generate_crate_metadata (46,158,441 samples, 4.46%)</title><rect x="92.5638%" y="261" width="4.4609%" height="15" fill="rgb(219,56,2)"/><text x="92.8138%" y="271.50">gener..</text></g><g><title>hir_lowering (24,717,363 samples, 2.39%)</title><rect x="97.0246%" y="261" width="2.3887%" height="15" fill="rgb(233,0,4)"/><text x="97.2746%" y="271.50">hi..</text></g><g><title>self_profile_alloc_query_strings (3,930,133 samples, 0.38%)</title><rect x="99.5096%" y="261" width="0.3798%" height="15" fill="rgb(235,30,7)"/><text x="99.7596%" y="271.50"></text></g><g><title>all (1,034,743,576 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (1,034,743,576 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="287.50">rustc</text></g></svg></svg>