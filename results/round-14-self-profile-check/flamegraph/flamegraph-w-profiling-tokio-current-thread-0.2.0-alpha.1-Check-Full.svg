<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (367,563 samples, 0.20%)</title><rect x="12.4235%" y="149" width="0.2000%" height="15" fill="rgb(227,0,7)"/><text x="12.6735%" y="159.50"></text></g><g><title>param_env (497,206 samples, 0.27%)</title><rect x="14.4273%" y="117" width="0.2705%" height="15" fill="rgb(217,0,24)"/><text x="14.6773%" y="127.50"></text></g><g><title>item_attrs (425,064 samples, 0.23%)</title><rect x="15.2710%" y="85" width="0.2313%" height="15" fill="rgb(221,193,54)"/><text x="15.5210%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (410,044 samples, 0.22%)</title><rect x="15.2792%" y="69" width="0.2231%" height="15" fill="rgb(248,212,6)"/><text x="15.5292%" y="79.50"></text></g><g><title>codegen_fn_attrs (625,209 samples, 0.34%)</title><rect x="15.1769%" y="101" width="0.3401%" height="15" fill="rgb(208,68,35)"/><text x="15.4269%" y="111.50"></text></g><g><title>is_copy_raw (217,295 samples, 0.12%)</title><rect x="18.0794%" y="85" width="0.1182%" height="15" fill="rgb(232,128,0)"/><text x="18.3294%" y="95.50"></text></g><g><title>adt_drop_tys (250,894 samples, 0.14%)</title><rect x="18.3619%" y="69" width="0.1365%" height="15" fill="rgb(207,160,47)"/><text x="18.6119%" y="79.50"></text></g><g><title>is_copy_raw (1,822,956 samples, 0.99%)</title><rect x="18.5011%" y="69" width="0.9918%" height="15" fill="rgb(228,23,34)"/><text x="18.7511%" y="79.50"></text></g><g><title>evaluate_obligation (1,412,614 samples, 0.77%)</title><rect x="18.7244%" y="53" width="0.7685%" height="15" fill="rgb(218,30,26)"/><text x="18.9744%" y="63.50"></text></g><g><title>needs_drop_raw (2,385,285 samples, 1.30%)</title><rect x="18.1994%" y="85" width="1.2977%" height="15" fill="rgb(220,122,19)"/><text x="18.4494%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (364,124 samples, 0.20%)</title><rect x="19.7333%" y="69" width="0.1981%" height="15" fill="rgb(250,228,42)"/><text x="19.9833%" y="79.50"></text></g><g><title>impl_parent (355,054 samples, 0.19%)</title><rect x="20.2669%" y="53" width="0.1932%" height="15" fill="rgb(240,193,28)"/><text x="20.5169%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (230,642 samples, 0.13%)</title><rect x="20.3346%" y="37" width="0.1255%" height="15" fill="rgb(216,20,37)"/><text x="20.5846%" y="47.50"></text></g><g><title>specialization_graph_of (1,625,957 samples, 0.88%)</title><rect x="19.9907%" y="69" width="0.8846%" height="15" fill="rgb(206,188,39)"/><text x="20.2407%" y="79.50"></text></g><g><title>impl_trait_ref (763,259 samples, 0.42%)</title><rect x="20.4601%" y="53" width="0.4152%" height="15" fill="rgb(217,207,13)"/><text x="20.7101%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (640,038 samples, 0.35%)</title><rect x="20.5271%" y="37" width="0.3482%" height="15" fill="rgb(231,73,38)"/><text x="20.7771%" y="47.50"></text></g><g><title>resolve_instance (2,696,547 samples, 1.47%)</title><rect x="19.4971%" y="85" width="1.4670%" height="15" fill="rgb(225,20,46)"/><text x="19.7471%" y="95.50"></text></g><g><title>thir_body (1,831,659 samples, 1.00%)</title><rect x="20.9967%" y="85" width="0.9965%" height="15" fill="rgb(210,31,41)"/><text x="21.2467%" y="95.50"></text></g><g><title>mir_const (15,473,720 samples, 8.42%)</title><rect x="13.6274%" y="133" width="8.4183%" height="15" fill="rgb(221,200,47)"/><text x="13.8774%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (13,506,359 samples, 7.35%)</title><rect x="14.6978%" y="117" width="7.3480%" height="15" fill="rgb(226,26,5)"/><text x="14.9478%" y="127.50">unsafety_c..</text></g><g><title>mir_built (12,000,432 samples, 6.53%)</title><rect x="15.5170%" y="101" width="6.5287%" height="15" fill="rgb(249,33,26)"/><text x="15.7670%" y="111.50">mir_built</text></g><g><title>has_structural_eq_impls (243,914 samples, 0.13%)</title><rect x="22.2123%" y="117" width="0.1327%" height="15" fill="rgb(235,183,28)"/><text x="22.4623%" y="127.50"></text></g><g><title>evaluate_obligation (205,322 samples, 0.11%)</title><rect x="22.2332%" y="101" width="0.1117%" height="15" fill="rgb(221,5,38)"/><text x="22.4832%" y="111.50"></text></g><g><title>mir_const_qualif (803,158 samples, 0.44%)</title><rect x="22.0458%" y="133" width="0.4370%" height="15" fill="rgb(247,18,42)"/><text x="22.2958%" y="143.50"></text></g><g><title>mir_promoted (17,889,836 samples, 9.73%)</title><rect x="12.7502%" y="149" width="9.7328%" height="15" fill="rgb(241,131,45)"/><text x="13.0002%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (937,468 samples, 0.51%)</title><rect x="22.4830%" y="149" width="0.5100%" height="15" fill="rgb(249,31,29)"/><text x="22.7330%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (446,832 samples, 0.24%)</title><rect x="22.9930%" y="149" width="0.2431%" height="15" fill="rgb(225,111,53)"/><text x="23.2430%" y="159.50"></text></g><g><title>normalize_projection_ty (186,291 samples, 0.10%)</title><rect x="23.1347%" y="133" width="0.1013%" height="15" fill="rgb(238,160,17)"/><text x="23.3847%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,784,252 samples, 2.60%)</title><rect x="23.3451%" y="149" width="2.6028%" height="15" fill="rgb(214,148,48)"/><text x="23.5951%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (46,504,777 samples, 25.30%)</title><rect x="0.6526%" y="181" width="25.3005%" height="15" fill="rgb(232,36,49)"/><text x="0.9026%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (46,280,537 samples, 25.18%)</title><rect x="0.7746%" y="165" width="25.1785%" height="15" fill="rgb(209,103,24)"/><text x="1.0246%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (374,084 samples, 0.20%)</title><rect x="25.9531%" y="181" width="0.2035%" height="15" fill="rgb(229,88,8)"/><text x="26.2031%" y="191.50"></text></g><g><title>hir_module_items (268,293 samples, 0.15%)</title><rect x="26.1566%" y="181" width="0.1460%" height="15" fill="rgb(213,181,19)"/><text x="26.4066%" y="191.50"></text></g><g><title>should_inherit_track_caller (256,083 samples, 0.14%)</title><rect x="26.6029%" y="133" width="0.1393%" height="15" fill="rgb(254,191,54)"/><text x="26.8529%" y="143.50"></text></g><g><title>codegen_fn_attrs (485,036 samples, 0.26%)</title><rect x="26.4877%" y="149" width="0.2639%" height="15" fill="rgb(241,83,37)"/><text x="26.7377%" y="159.50"></text></g><g><title>check_mod_attrs (804,899 samples, 0.44%)</title><rect x="26.3137%" y="165" width="0.4379%" height="15" fill="rgb(233,36,39)"/><text x="26.5637%" y="175.50"></text></g><g><title>lint_levels (187,413 samples, 0.10%)</title><rect x="27.0574%" y="149" width="0.1020%" height="15" fill="rgb(226,3,54)"/><text x="27.3074%" y="159.50"></text></g><g><title>lookup_deprecation_entry (209,772 samples, 0.11%)</title><rect x="27.1594%" y="149" width="0.1141%" height="15" fill="rgb(245,192,40)"/><text x="27.4094%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (789,778 samples, 0.43%)</title><rect x="26.9128%" y="165" width="0.4297%" height="15" fill="rgb(238,167,29)"/><text x="27.1628%" y="175.50"></text></g><g><title>misc_checking_1 (1,981,812 samples, 1.08%)</title><rect x="26.3029%" y="181" width="1.0782%" height="15" fill="rgb(232,182,51)"/><text x="26.5529%" y="191.50"></text></g><g><title>check_mod_intrinsics (242,483 samples, 0.13%)</title><rect x="27.3853%" y="149" width="0.1319%" height="15" fill="rgb(231,60,39)"/><text x="27.6353%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (1,254,374 samples, 0.68%)</title><rect x="27.3820%" y="165" width="0.6824%" height="15" fill="rgb(208,69,12)"/><text x="27.6320%" y="175.50"></text></g><g><title>check_mod_liveness (1,005,841 samples, 0.55%)</title><rect x="27.5172%" y="149" width="0.5472%" height="15" fill="rgb(235,93,37)"/><text x="27.7672%" y="159.50"></text></g><g><title>type_uninhabited_from (486,964 samples, 0.26%)</title><rect x="27.7995%" y="133" width="0.2649%" height="15" fill="rgb(213,116,39)"/><text x="28.0495%" y="143.50"></text></g><g><title>misc_checking_2 (2,052,683 samples, 1.12%)</title><rect x="27.3811%" y="181" width="1.1167%" height="15" fill="rgb(222,207,29)"/><text x="27.6311%" y="191.50"></text></g><g><title>match_checking (796,599 samples, 0.43%)</title><rect x="28.0644%" y="165" width="0.4334%" height="15" fill="rgb(206,96,30)"/><text x="28.3144%" y="175.50"></text></g><g><title>check_match (745,069 samples, 0.41%)</title><rect x="28.0924%" y="149" width="0.4053%" height="15" fill="rgb(218,138,4)"/><text x="28.3424%" y="159.50"></text></g><g><title>check_private_in_public (356,694 samples, 0.19%)</title><rect x="28.5033%" y="165" width="0.1941%" height="15" fill="rgb(250,191,14)"/><text x="28.7533%" y="175.50"></text></g><g><title>death_checking (611,056 samples, 0.33%)</title><rect x="28.6974%" y="165" width="0.3324%" height="15" fill="rgb(239,60,40)"/><text x="28.9474%" y="175.50"></text></g><g><title>eval_to_allocation_raw (329,124 samples, 0.18%)</title><rect x="29.6952%" y="133" width="0.1791%" height="15" fill="rgb(206,27,48)"/><text x="29.9452%" y="143.50"></text></g><g><title>eval_to_allocation_raw (327,274 samples, 0.18%)</title><rect x="29.6962%" y="117" width="0.1781%" height="15" fill="rgb(225,35,8)"/><text x="29.9462%" y="127.50"></text></g><g><title>eval_to_const_value_raw (351,684 samples, 0.19%)</title><rect x="29.8743%" y="133" width="0.1913%" height="15" fill="rgb(250,213,24)"/><text x="30.1243%" y="143.50"></text></g><g><title>eval_to_const_value_raw (341,994 samples, 0.19%)</title><rect x="29.8795%" y="117" width="0.1861%" height="15" fill="rgb(247,123,22)"/><text x="30.1295%" y="127.50"></text></g><g><title>eval_to_allocation_raw (335,524 samples, 0.18%)</title><rect x="29.8831%" y="101" width="0.1825%" height="15" fill="rgb(231,138,38)"/><text x="30.1331%" y="111.50"></text></g><g><title>param_env (329,442 samples, 0.18%)</title><rect x="30.0656%" y="133" width="0.1792%" height="15" fill="rgb(231,145,46)"/><text x="30.3156%" y="143.50"></text></g><g><title>crate_lints (3,453,298 samples, 1.88%)</title><rect x="29.0308%" y="149" width="1.8787%" height="15" fill="rgb(251,118,11)"/><text x="29.2808%" y="159.50">c..</text></g><g><title>type_of (1,146,952 samples, 0.62%)</title><rect x="30.2856%" y="133" width="0.6240%" height="15" fill="rgb(217,147,25)"/><text x="30.5356%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (905,860 samples, 0.49%)</title><rect x="30.4168%" y="117" width="0.4928%" height="15" fill="rgb(247,81,37)"/><text x="30.6668%" y="127.50"></text></g><g><title>lint_checking (4,195,326 samples, 2.28%)</title><rect x="29.0298%" y="165" width="2.2824%" height="15" fill="rgb(209,12,38)"/><text x="29.2798%" y="175.50">l..</text></g><g><title>module_lints (740,128 samples, 0.40%)</title><rect x="30.9096%" y="149" width="0.4027%" height="15" fill="rgb(227,1,9)"/><text x="31.1596%" y="159.50"></text></g><g><title>lint_mod (735,678 samples, 0.40%)</title><rect x="30.9120%" y="133" width="0.4002%" height="15" fill="rgb(248,47,43)"/><text x="31.1620%" y="143.50"></text></g><g><title>privacy_access_levels (384,285 samples, 0.21%)</title><rect x="31.3122%" y="165" width="0.2091%" height="15" fill="rgb(221,10,30)"/><text x="31.5622%" y="175.50"></text></g><g><title>privacy_checking_modules (1,626,049 samples, 0.88%)</title><rect x="31.5213%" y="165" width="0.8846%" height="15" fill="rgb(210,229,1)"/><text x="31.7713%" y="175.50"></text></g><g><title>check_mod_privacy (1,623,609 samples, 0.88%)</title><rect x="31.5226%" y="149" width="0.8833%" height="15" fill="rgb(222,148,37)"/><text x="31.7726%" y="159.50"></text></g><g><title>misc_checking_3 (7,206,461 samples, 3.92%)</title><rect x="28.4978%" y="181" width="3.9206%" height="15" fill="rgb(234,67,33)"/><text x="28.7478%" y="191.50">misc..</text></g><g><title>impl_parent (1,808,834 samples, 0.98%)</title><rect x="34.1774%" y="117" width="0.9841%" height="15" fill="rgb(247,98,35)"/><text x="34.4274%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,122,963 samples, 0.61%)</title><rect x="34.5505%" y="101" width="0.6109%" height="15" fill="rgb(247,138,52)"/><text x="34.8005%" y="111.50"></text></g><g><title>impl_trait_ref (4,642,506 samples, 2.53%)</title><rect x="35.1614%" y="117" width="2.5257%" height="15" fill="rgb(213,79,30)"/><text x="35.4114%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,945,964 samples, 2.15%)</title><rect x="35.5404%" y="101" width="2.1468%" height="15" fill="rgb(246,177,23)"/><text x="35.7904%" y="111.50">m..</text></g><g><title>trait_impls_of (609,714 samples, 0.33%)</title><rect x="37.6966%" y="117" width="0.3317%" height="15" fill="rgb(230,62,27)"/><text x="37.9466%" y="127.50"></text></g><g><title>implementations_of_trait (200,942 samples, 0.11%)</title><rect x="37.9190%" y="101" width="0.1093%" height="15" fill="rgb(216,154,8)"/><text x="38.1690%" y="111.50"></text></g><g><title>coherent_trait (10,188,713 samples, 5.54%)</title><rect x="32.4857%" y="149" width="5.5431%" height="15" fill="rgb(244,35,45)"/><text x="32.7357%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (10,169,052 samples, 5.53%)</title><rect x="32.4964%" y="133" width="5.5324%" height="15" fill="rgb(251,115,12)"/><text x="32.7464%" y="143.50">special..</text></g><g><title>coherence_checking (10,282,145 samples, 5.59%)</title><rect x="32.4743%" y="165" width="5.5939%" height="15" fill="rgb(240,54,50)"/><text x="32.7243%" y="175.50">coheren..</text></g><g><title>associated_item (346,224 samples, 0.19%)</title><rect x="54.0747%" y="101" width="0.1884%" height="15" fill="rgb(233,84,52)"/><text x="54.3247%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (277,023 samples, 0.15%)</title><rect x="54.1123%" y="85" width="0.1507%" height="15" fill="rgb(207,117,47)"/><text x="54.3623%" y="95.50"></text></g><g><title>associated_items (542,395 samples, 0.30%)</title><rect x="53.9885%" y="117" width="0.2951%" height="15" fill="rgb(249,43,39)"/><text x="54.2385%" y="127.50"></text></g><g><title>adt_dtorck_constraint (293,513 samples, 0.16%)</title><rect x="54.8321%" y="85" width="0.1597%" height="15" fill="rgb(209,38,44)"/><text x="55.0821%" y="95.50"></text></g><g><title>adt_dtorck_constraint (702,656 samples, 0.38%)</title><rect x="54.6532%" y="101" width="0.3823%" height="15" fill="rgb(236,212,23)"/><text x="54.9032%" y="111.50"></text></g><g><title>dropck_outlives (1,415,224 samples, 0.77%)</title><rect x="54.3238%" y="117" width="0.7699%" height="15" fill="rgb(242,79,21)"/><text x="54.5738%" y="127.50"></text></g><g><title>evaluate_obligation (2,257,122 samples, 1.23%)</title><rect x="55.0937%" y="117" width="1.2280%" height="15" fill="rgb(211,96,35)"/><text x="55.3437%" y="127.50"></text></g><g><title>trait_impls_of (241,260 samples, 0.13%)</title><rect x="56.1904%" y="101" width="0.1313%" height="15" fill="rgb(253,215,40)"/><text x="56.4404%" y="111.50"></text></g><g><title>item_attrs (703,728 samples, 0.38%)</title><rect x="56.5693%" y="117" width="0.3829%" height="15" fill="rgb(211,81,21)"/><text x="56.8193%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (689,018 samples, 0.37%)</title><rect x="56.5773%" y="101" width="0.3749%" height="15" fill="rgb(208,190,38)"/><text x="56.8273%" y="111.50"></text></g><g><title>evaluate_obligation (520,522 samples, 0.28%)</title><rect x="57.3032%" y="101" width="0.2832%" height="15" fill="rgb(235,213,38)"/><text x="57.5532%" y="111.50"></text></g><g><title>method_autoderef_steps (1,096,642 samples, 0.60%)</title><rect x="57.0017%" y="117" width="0.5966%" height="15" fill="rgb(237,122,38)"/><text x="57.2517%" y="127.50"></text></g><g><title>predicates_of (456,733 samples, 0.25%)</title><rect x="57.6938%" y="117" width="0.2485%" height="15" fill="rgb(244,218,35)"/><text x="57.9438%" y="127.50"></text></g><g><title>predicates_defined_on (309,841 samples, 0.17%)</title><rect x="57.7738%" y="101" width="0.1686%" height="15" fill="rgb(240,68,47)"/><text x="58.0238%" y="111.50"></text></g><g><title>associated_item (280,614 samples, 0.15%)</title><rect x="62.7101%" y="85" width="0.1527%" height="15" fill="rgb(210,16,53)"/><text x="62.9601%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (228,323 samples, 0.12%)</title><rect x="62.7385%" y="69" width="0.1242%" height="15" fill="rgb(235,124,12)"/><text x="62.9885%" y="79.50"></text></g><g><title>associated_items (422,554 samples, 0.23%)</title><rect x="62.6477%" y="101" width="0.2299%" height="15" fill="rgb(224,169,11)"/><text x="62.8977%" y="111.50"></text></g><g><title>dropck_outlives (287,274 samples, 0.16%)</title><rect x="62.9046%" y="101" width="0.1563%" height="15" fill="rgb(250,166,2)"/><text x="63.1546%" y="111.50"></text></g><g><title>evaluate_obligation (1,097,391 samples, 0.60%)</title><rect x="63.0609%" y="101" width="0.5970%" height="15" fill="rgb(242,216,29)"/><text x="63.3109%" y="111.50"></text></g><g><title>trait_impls_of (254,383 samples, 0.14%)</title><rect x="63.5195%" y="85" width="0.1384%" height="15" fill="rgb(230,116,27)"/><text x="63.7695%" y="95.50"></text></g><g><title>is_copy_raw (467,427 samples, 0.25%)</title><rect x="63.8099%" y="101" width="0.2543%" height="15" fill="rgb(228,99,48)"/><text x="64.0599%" y="111.50"></text></g><g><title>evaluate_obligation (399,237 samples, 0.22%)</title><rect x="63.8470%" y="85" width="0.2172%" height="15" fill="rgb(253,11,6)"/><text x="64.0970%" y="95.50"></text></g><g><title>method_autoderef_steps (542,908 samples, 0.30%)</title><rect x="64.1316%" y="101" width="0.2954%" height="15" fill="rgb(247,143,39)"/><text x="64.3816%" y="111.50"></text></g><g><title>evaluate_obligation (257,174 samples, 0.14%)</title><rect x="64.2870%" y="85" width="0.1399%" height="15" fill="rgb(236,97,10)"/><text x="64.5370%" y="95.50"></text></g><g><title>typeck (12,066,704 samples, 6.56%)</title><rect x="58.0076%" y="117" width="6.5648%" height="15" fill="rgb(233,208,19)"/><text x="58.2576%" y="127.50">typeck</text></g><g><title>item_bodies_checking (48,751,163 samples, 26.52%)</title><rect x="38.0935%" y="165" width="26.5226%" height="15" fill="rgb(216,164,2)"/><text x="38.3435%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (48,747,193 samples, 26.52%)</title><rect x="38.0957%" y="149" width="26.5205%" height="15" fill="rgb(220,129,5)"/><text x="38.3457%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (48,597,711 samples, 26.44%)</title><rect x="38.1770%" y="133" width="26.4391%" height="15" fill="rgb(242,17,10)"/><text x="38.4270%" y="143.50">typeck</text></g><g><title>item_types_checking (2,023,502 samples, 1.10%)</title><rect x="64.6161%" y="165" width="1.1009%" height="15" fill="rgb(242,107,0)"/><text x="64.8661%" y="175.50"></text></g><g><title>check_mod_item_types (2,020,072 samples, 1.10%)</title><rect x="64.6180%" y="149" width="1.0990%" height="15" fill="rgb(251,28,31)"/><text x="64.8680%" y="159.50"></text></g><g><title>typeck (800,748 samples, 0.44%)</title><rect x="65.2814%" y="133" width="0.4356%" height="15" fill="rgb(233,223,10)"/><text x="65.5314%" y="143.50"></text></g><g><title>fn_sig (521,513 samples, 0.28%)</title><rect x="65.9624%" y="133" width="0.2837%" height="15" fill="rgb(215,21,27)"/><text x="66.2124%" y="143.50"></text></g><g><title>named_region_map (251,372 samples, 0.14%)</title><rect x="66.4249%" y="117" width="0.1368%" height="15" fill="rgb(232,23,21)"/><text x="66.6749%" y="127.50"></text></g><g><title>resolve_lifetimes (223,682 samples, 0.12%)</title><rect x="66.4399%" y="101" width="0.1217%" height="15" fill="rgb(244,5,23)"/><text x="66.6899%" y="111.50"></text></g><g><title>generics_of (607,426 samples, 0.33%)</title><rect x="66.2461%" y="133" width="0.3305%" height="15" fill="rgb(226,81,46)"/><text x="66.4961%" y="143.50"></text></g><g><title>late_bound_vars_map (277,623 samples, 0.15%)</title><rect x="66.9267%" y="85" width="0.1510%" height="15" fill="rgb(247,70,30)"/><text x="67.1767%" y="95.50"></text></g><g><title>resolve_lifetimes (259,493 samples, 0.14%)</title><rect x="66.9365%" y="69" width="0.1412%" height="15" fill="rgb(212,68,19)"/><text x="67.1865%" y="79.50"></text></g><g><title>explicit_predicates_of (662,719 samples, 0.36%)</title><rect x="66.7332%" y="101" width="0.3605%" height="15" fill="rgb(240,187,13)"/><text x="66.9832%" y="111.50"></text></g><g><title>predicates_of (1,791,824 samples, 0.97%)</title><rect x="66.6052%" y="133" width="0.9748%" height="15" fill="rgb(223,113,26)"/><text x="66.8552%" y="143.50"></text></g><g><title>predicates_defined_on (1,705,033 samples, 0.93%)</title><rect x="66.6524%" y="117" width="0.9276%" height="15" fill="rgb(206,192,2)"/><text x="66.9024%" y="127.50"></text></g><g><title>inferred_outlives_of (893,802 samples, 0.49%)</title><rect x="67.0937%" y="101" width="0.4863%" height="15" fill="rgb(241,108,4)"/><text x="67.3437%" y="111.50"></text></g><g><title>inferred_outlives_crate (858,290 samples, 0.47%)</title><rect x="67.1130%" y="85" width="0.4669%" height="15" fill="rgb(247,173,49)"/><text x="67.3630%" y="95.50"></text></g><g><title>type_of (581,636 samples, 0.32%)</title><rect x="67.2635%" y="69" width="0.3164%" height="15" fill="rgb(224,114,35)"/><text x="67.5135%" y="79.50"></text></g><g><title>type_collecting (3,601,020 samples, 1.96%)</title><rect x="65.7192%" y="165" width="1.9591%" height="15" fill="rgb(245,159,27)"/><text x="65.9692%" y="175.50">t..</text></g><g><title>collect_mod_item_types (3,590,480 samples, 1.95%)</title><rect x="65.7250%" y="149" width="1.9534%" height="15" fill="rgb(245,172,44)"/><text x="65.9750%" y="159.50">c..</text></g><g><title>evaluate_obligation (899,149 samples, 0.49%)</title><rect x="69.6582%" y="133" width="0.4892%" height="15" fill="rgb(236,23,11)"/><text x="69.9082%" y="143.50"></text></g><g><title>implied_outlives_bounds (528,898 samples, 0.29%)</title><rect x="70.1474%" y="133" width="0.2877%" height="15" fill="rgb(205,117,38)"/><text x="70.3974%" y="143.50"></text></g><g><title>param_env (684,215 samples, 0.37%)</title><rect x="70.4351%" y="133" width="0.3722%" height="15" fill="rgb(237,72,25)"/><text x="70.6851%" y="143.50"></text></g><g><title>region_scope_tree (582,832 samples, 0.32%)</title><rect x="70.8230%" y="133" width="0.3171%" height="15" fill="rgb(244,70,9)"/><text x="71.0730%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,026,428 samples, 3.28%)</title><rect x="67.8708%" y="149" width="3.2786%" height="15" fill="rgb(217,125,39)"/><text x="68.1208%" y="159.50">che..</text></g><g><title>adt_sized_constraint (351,243 samples, 0.19%)</title><rect x="72.8095%" y="117" width="0.1911%" height="15" fill="rgb(235,36,10)"/><text x="73.0595%" y="127.50"></text></g><g><title>evaluate_obligation (730,807 samples, 0.40%)</title><rect x="72.6193%" y="133" width="0.3976%" height="15" fill="rgb(251,123,47)"/><text x="72.8693%" y="143.50"></text></g><g><title>implied_outlives_bounds (245,302 samples, 0.13%)</title><rect x="73.0292%" y="133" width="0.1335%" height="15" fill="rgb(221,13,13)"/><text x="73.2792%" y="143.50"></text></g><g><title>object_safety_violations (380,216 samples, 0.21%)</title><rect x="73.1672%" y="133" width="0.2069%" height="15" fill="rgb(238,131,9)"/><text x="73.4172%" y="143.50"></text></g><g><title>param_env (603,830 samples, 0.33%)</title><rect x="73.3740%" y="133" width="0.3285%" height="15" fill="rgb(211,50,8)"/><text x="73.6240%" y="143.50"></text></g><g><title>check_item_well_formed (5,133,804 samples, 2.79%)</title><rect x="71.1494%" y="149" width="2.7930%" height="15" fill="rgb(245,182,24)"/><text x="71.3994%" y="159.50">ch..</text></g><g><title>analysis (135,235,475 samples, 73.57%)</title><rect x="0.4210%" y="197" width="73.5736%" height="15" fill="rgb(242,14,37)"/><text x="0.6710%" y="207.50">analysis</text></g><g><title>type_check_crate (76,421,120 samples, 41.58%)</title><rect x="32.4184%" y="181" width="41.5762%" height="15" fill="rgb(246,228,12)"/><text x="32.6684%" y="191.50">type_check_crate</text></g><g><title>wf_checking (11,600,879 samples, 6.31%)</title><rect x="67.6833%" y="165" width="6.3114%" height="15" fill="rgb(213,55,15)"/><text x="67.9333%" y="175.50">wf_check..</text></g><g><title>codegen_crate (362,504 samples, 0.20%)</title><rect x="74.0024%" y="197" width="0.1972%" height="15" fill="rgb(209,9,3)"/><text x="74.2524%" y="207.50"></text></g><g><title>AST_validation (203,842 samples, 0.11%)</title><rect x="74.3366%" y="181" width="0.1109%" height="15" fill="rgb(230,59,30)"/><text x="74.5866%" y="191.50"></text></g><g><title>metadata_load_macro (399,075 samples, 0.22%)</title><rect x="86.0706%" y="149" width="0.2171%" height="15" fill="rgb(209,121,21)"/><text x="86.3206%" y="159.50"></text></g><g><title>metadata_register_crate (2,639,749 samples, 1.44%)</title><rect x="86.2877%" y="149" width="1.4361%" height="15" fill="rgb(220,109,13)"/><text x="86.5377%" y="159.50"></text></g><g><title>metadata_register_crate (970,749 samples, 0.53%)</title><rect x="87.1957%" y="133" width="0.5281%" height="15" fill="rgb(232,18,1)"/><text x="87.4457%" y="143.50"></text></g><g><title>macro_expand_crate (24,493,773 samples, 13.33%)</title><rect x="74.5552%" y="181" width="13.3256%" height="15" fill="rgb(215,41,42)"/><text x="74.8052%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (24,470,933 samples, 13.31%)</title><rect x="74.5676%" y="165" width="13.3132%" height="15" fill="rgb(224,123,36)"/><text x="74.8176%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (288,443 samples, 0.16%)</title><rect x="87.7239%" y="149" width="0.1569%" height="15" fill="rgb(240,125,3)"/><text x="87.9739%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (386,564 samples, 0.21%)</title><rect x="87.8826%" y="181" width="0.2103%" height="15" fill="rgb(205,98,50)"/><text x="88.1326%" y="191.50"></text></g><g><title>late_resolve_crate (2,968,573 samples, 1.62%)</title><rect x="88.1794%" y="165" width="1.6150%" height="15" fill="rgb(205,185,37)"/><text x="88.4294%" y="175.50"></text></g><g><title>configure_and_expand (28,828,711 samples, 15.68%)</title><rect x="74.1996%" y="197" width="15.6840%" height="15" fill="rgb(238,207,15)"/><text x="74.4496%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,291,377 samples, 1.79%)</title><rect x="88.0929%" y="181" width="1.7906%" height="15" fill="rgb(213,199,42)"/><text x="88.3429%" y="191.50">r..</text></g><g><title>drop_ast (262,993 samples, 0.14%)</title><rect x="89.8836%" y="197" width="0.1431%" height="15" fill="rgb(235,201,11)"/><text x="90.1336%" y="207.50"></text></g><g><title>early_lint_checks (531,505 samples, 0.29%)</title><rect x="90.0367%" y="197" width="0.2892%" height="15" fill="rgb(207,46,11)"/><text x="90.2867%" y="207.50"></text></g><g><title>free_global_ctxt (3,982,523 samples, 2.17%)</title><rect x="90.3259%" y="197" width="2.1667%" height="15" fill="rgb(241,35,35)"/><text x="90.5759%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,661,988 samples, 0.90%)</title><rect x="92.4925%" y="197" width="0.9042%" height="15" fill="rgb(243,32,47)"/><text x="92.7425%" y="207.50"></text></g><g><title>hir_lowering (4,302,028 samples, 2.34%)</title><rect x="93.3967%" y="197" width="2.3405%" height="15" fill="rgb(247,202,23)"/><text x="93.6467%" y="207.50">h..</text></g><g><title>parse_crate (6,207,209 samples, 3.38%)</title><rect x="95.7882%" y="197" width="3.3770%" height="15" fill="rgb(219,102,11)"/><text x="96.0382%" y="207.50">par..</text></g><g><title>self_profile_alloc_query_strings (913,270 samples, 0.50%)</title><rect x="99.2667%" y="197" width="0.4969%" height="15" fill="rgb(243,110,44)"/><text x="99.5167%" y="207.50"></text></g><g><title>all (183,809,705 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (183,809,705 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (336,404 samples, 0.18%)</title><rect x="99.8170%" y="197" width="0.1830%" height="15" fill="rgb(226,22,26)"/><text x="100.0670%" y="207.50"></text></g></svg></svg>