<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (488,549 samples, 0.11%)</title><rect x="15.2716%" y="165" width="0.1056%" height="15" fill="rgb(227,0,7)"/><text x="15.5216%" y="175.50"></text></g><g><title>param_env (691,056 samples, 0.15%)</title><rect x="17.1762%" y="133" width="0.1494%" height="15" fill="rgb(217,0,24)"/><text x="17.4262%" y="143.50"></text></g><g><title>item_attrs (593,304 samples, 0.13%)</title><rect x="17.8802%" y="101" width="0.1283%" height="15" fill="rgb(221,193,54)"/><text x="18.1302%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (571,914 samples, 0.12%)</title><rect x="17.8848%" y="85" width="0.1236%" height="15" fill="rgb(248,212,6)"/><text x="18.1348%" y="95.50"></text></g><g><title>codegen_fn_attrs (843,824 samples, 0.18%)</title><rect x="17.8346%" y="117" width="0.1824%" height="15" fill="rgb(208,68,35)"/><text x="18.0846%" y="127.50"></text></g><g><title>adt_drop_tys (1,008,539 samples, 0.22%)</title><rect x="20.9882%" y="85" width="0.2180%" height="15" fill="rgb(232,128,0)"/><text x="21.2382%" y="95.50"></text></g><g><title>is_copy_raw (3,500,487 samples, 0.76%)</title><rect x="21.2062%" y="85" width="0.7568%" height="15" fill="rgb(207,160,47)"/><text x="21.4562%" y="95.50"></text></g><g><title>evaluate_obligation (2,757,169 samples, 0.60%)</title><rect x="21.3669%" y="69" width="0.5961%" height="15" fill="rgb(228,23,34)"/><text x="21.6169%" y="79.50"></text></g><g><title>needs_drop_raw (5,126,024 samples, 1.11%)</title><rect x="20.8700%" y="101" width="1.1082%" height="15" fill="rgb(218,30,26)"/><text x="21.1200%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,246,208 samples, 0.27%)</title><rect x="22.1930%" y="85" width="0.2694%" height="15" fill="rgb(220,122,19)"/><text x="22.4430%" y="95.50"></text></g><g><title>specialization_graph_of (2,422,427 samples, 0.52%)</title><rect x="22.5274%" y="85" width="0.5237%" height="15" fill="rgb(250,228,42)"/><text x="22.7774%" y="95.50"></text></g><g><title>impl_trait_ref (969,493 samples, 0.21%)</title><rect x="22.8415%" y="69" width="0.2096%" height="15" fill="rgb(240,193,28)"/><text x="23.0915%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (837,762 samples, 0.18%)</title><rect x="22.8699%" y="53" width="0.1811%" height="15" fill="rgb(216,20,37)"/><text x="23.1199%" y="63.50"></text></g><g><title>resolve_instance (5,200,310 samples, 1.12%)</title><rect x="21.9784%" y="101" width="1.1242%" height="15" fill="rgb(206,188,39)"/><text x="22.2284%" y="111.50"></text></g><g><title>thir_body (4,871,996 samples, 1.05%)</title><rect x="23.1450%" y="101" width="1.0533%" height="15" fill="rgb(217,207,13)"/><text x="23.3950%" y="111.50"></text></g><g><title>mir_const (36,549,185 samples, 7.90%)</title><rect x="16.3247%" y="149" width="7.9015%" height="15" fill="rgb(231,73,38)"/><text x="16.5747%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (31,919,780 samples, 6.90%)</title><rect x="17.3255%" y="133" width="6.9006%" height="15" fill="rgb(225,20,46)"/><text x="17.5755%" y="143.50">unsafety_..</text></g><g><title>mir_built (28,721,302 samples, 6.21%)</title><rect x="18.0170%" y="117" width="6.2092%" height="15" fill="rgb(210,31,41)"/><text x="18.2670%" y="127.50">mir_built</text></g><g><title>mir_promoted (40,596,176 samples, 8.78%)</title><rect x="15.5066%" y="165" width="8.7764%" height="15" fill="rgb(221,200,47)"/><text x="15.7566%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,822,942 samples, 0.83%)</title><rect x="24.2839%" y="165" width="0.8265%" height="15" fill="rgb(226,26,5)"/><text x="24.5339%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (979,669 samples, 0.21%)</title><rect x="25.1104%" y="165" width="0.2118%" height="15" fill="rgb(249,33,26)"/><text x="25.3604%" y="175.50"></text></g><g><title>normalize_projection_ty (502,346 samples, 0.11%)</title><rect x="25.2135%" y="149" width="0.1086%" height="15" fill="rgb(235,183,28)"/><text x="25.4635%" y="159.50"></text></g><g><title>type_op_normalize_predicate (515,165 samples, 0.11%)</title><rect x="25.3358%" y="165" width="0.1114%" height="15" fill="rgb(221,5,38)"/><text x="25.5858%" y="175.50"></text></g><g><title>type_op_prove_predicate (13,841,205 samples, 2.99%)</title><rect x="25.4978%" y="165" width="2.9923%" height="15" fill="rgb(247,18,42)"/><text x="25.7478%" y="175.50">typ..</text></g><g><title>MIR_borrow_checking (129,438,309 samples, 27.98%)</title><rect x="0.5115%" y="197" width="27.9829%" height="15" fill="rgb(241,131,45)"/><text x="0.7615%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (128,702,304 samples, 27.82%)</title><rect x="0.6706%" y="181" width="27.8238%" height="15" fill="rgb(249,31,29)"/><text x="0.9206%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (979,921 samples, 0.21%)</title><rect x="28.5411%" y="197" width="0.2118%" height="15" fill="rgb(225,111,53)"/><text x="28.7911%" y="207.50"></text></g><g><title>should_inherit_track_caller (524,038 samples, 0.11%)</title><rect x="29.0669%" y="149" width="0.1133%" height="15" fill="rgb(238,160,17)"/><text x="29.3169%" y="159.50"></text></g><g><title>codegen_fn_attrs (935,984 samples, 0.20%)</title><rect x="28.9820%" y="165" width="0.2023%" height="15" fill="rgb(214,148,48)"/><text x="29.2320%" y="175.50"></text></g><g><title>check_mod_attrs (1,917,374 samples, 0.41%)</title><rect x="28.7699%" y="181" width="0.4145%" height="15" fill="rgb(232,36,49)"/><text x="29.0199%" y="191.50"></text></g><g><title>check_mod_const_bodies (574,063 samples, 0.12%)</title><rect x="29.1844%" y="181" width="0.1241%" height="15" fill="rgb(209,103,24)"/><text x="29.4344%" y="191.50"></text></g><g><title>lint_levels (675,208 samples, 0.15%)</title><rect x="29.5355%" y="165" width="0.1460%" height="15" fill="rgb(229,88,8)"/><text x="29.7855%" y="175.50"></text></g><g><title>lookup_deprecation_entry (648,008 samples, 0.14%)</title><rect x="29.6815%" y="165" width="0.1401%" height="15" fill="rgb(213,181,19)"/><text x="29.9315%" y="175.50"></text></g><g><title>stability_index (522,106 samples, 0.11%)</title><rect x="29.7087%" y="149" width="0.1129%" height="15" fill="rgb(254,191,54)"/><text x="29.9587%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,154,355 samples, 0.47%)</title><rect x="29.3863%" y="181" width="0.4657%" height="15" fill="rgb(241,83,37)"/><text x="29.6363%" y="191.50"></text></g><g><title>misc_checking_1 (5,307,709 samples, 1.15%)</title><rect x="28.7530%" y="197" width="1.1475%" height="15" fill="rgb(233,36,39)"/><text x="29.0030%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (2,007,532 samples, 0.43%)</title><rect x="29.9008%" y="181" width="0.4340%" height="15" fill="rgb(226,3,54)"/><text x="30.1508%" y="191.50"></text></g><g><title>check_mod_liveness (1,601,678 samples, 0.35%)</title><rect x="29.9886%" y="165" width="0.3463%" height="15" fill="rgb(245,192,40)"/><text x="30.2386%" y="175.50"></text></g><g><title>type_uninhabited_from (513,555 samples, 0.11%)</title><rect x="30.2238%" y="149" width="0.1110%" height="15" fill="rgb(238,167,29)"/><text x="30.4738%" y="159.50"></text></g><g><title>misc_checking_2 (4,584,721 samples, 0.99%)</title><rect x="29.9005%" y="197" width="0.9912%" height="15" fill="rgb(232,182,51)"/><text x="30.1505%" y="207.50"></text></g><g><title>match_checking (2,575,379 samples, 0.56%)</title><rect x="30.3348%" y="181" width="0.5568%" height="15" fill="rgb(231,60,39)"/><text x="30.5848%" y="191.50"></text></g><g><title>check_match (2,398,999 samples, 0.52%)</title><rect x="30.3730%" y="165" width="0.5186%" height="15" fill="rgb(208,69,12)"/><text x="30.6230%" y="175.50"></text></g><g><title>check_private_in_public (1,056,252 samples, 0.23%)</title><rect x="30.8942%" y="181" width="0.2283%" height="15" fill="rgb(235,93,37)"/><text x="31.1442%" y="191.50"></text></g><g><title>death_checking (1,916,561 samples, 0.41%)</title><rect x="31.1226%" y="181" width="0.4143%" height="15" fill="rgb(213,116,39)"/><text x="31.3726%" y="191.50"></text></g><g><title>param_env (968,191 samples, 0.21%)</title><rect x="32.0202%" y="149" width="0.2093%" height="15" fill="rgb(222,207,29)"/><text x="32.2702%" y="159.50"></text></g><g><title>crate_lints (4,715,563 samples, 1.02%)</title><rect x="31.5374%" y="165" width="1.0194%" height="15" fill="rgb(206,96,30)"/><text x="31.7874%" y="175.50"></text></g><g><title>type_of (1,498,070 samples, 0.32%)</title><rect x="32.2330%" y="149" width="0.3239%" height="15" fill="rgb(218,138,4)"/><text x="32.4830%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,184,296 samples, 0.26%)</title><rect x="32.3008%" y="133" width="0.2560%" height="15" fill="rgb(250,191,14)"/><text x="32.5508%" y="143.50"></text></g><g><title>lint_checking (6,672,455 samples, 1.44%)</title><rect x="31.5369%" y="181" width="1.4425%" height="15" fill="rgb(239,60,40)"/><text x="31.7869%" y="191.50"></text></g><g><title>module_lints (1,954,652 samples, 0.42%)</title><rect x="32.5568%" y="165" width="0.4226%" height="15" fill="rgb(206,27,48)"/><text x="32.8068%" y="175.50"></text></g><g><title>lint_mod (1,931,662 samples, 0.42%)</title><rect x="32.5618%" y="149" width="0.4176%" height="15" fill="rgb(225,35,8)"/><text x="32.8118%" y="159.50"></text></g><g><title>privacy_access_levels (1,609,988 samples, 0.35%)</title><rect x="32.9794%" y="181" width="0.3481%" height="15" fill="rgb(250,213,24)"/><text x="33.2294%" y="191.50"></text></g><g><title>privacy_checking_modules (5,130,687 samples, 1.11%)</title><rect x="33.3275%" y="181" width="1.1092%" height="15" fill="rgb(247,123,22)"/><text x="33.5775%" y="191.50"></text></g><g><title>check_mod_privacy (5,109,797 samples, 1.10%)</title><rect x="33.3320%" y="165" width="1.1047%" height="15" fill="rgb(231,138,38)"/><text x="33.5820%" y="175.50"></text></g><g><title>misc_checking_3 (16,445,604 samples, 3.56%)</title><rect x="30.8916%" y="197" width="3.5553%" height="15" fill="rgb(231,145,46)"/><text x="31.1416%" y="207.50">misc..</text></g><g><title>impl_parent (3,444,866 samples, 0.74%)</title><rect x="35.7241%" y="133" width="0.7447%" height="15" fill="rgb(251,118,11)"/><text x="35.9741%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,822,449 samples, 0.39%)</title><rect x="36.0749%" y="117" width="0.3940%" height="15" fill="rgb(217,147,25)"/><text x="36.3249%" y="127.50"></text></g><g><title>impl_trait_ref (6,458,772 samples, 1.40%)</title><rect x="36.4689%" y="133" width="1.3963%" height="15" fill="rgb(247,81,37)"/><text x="36.7189%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,251,673 samples, 1.14%)</title><rect x="36.7298%" y="117" width="1.1353%" height="15" fill="rgb(209,12,38)"/><text x="36.9798%" y="127.50"></text></g><g><title>specialization_graph_of (15,583,884 samples, 3.37%)</title><rect x="34.7359%" y="149" width="3.3690%" height="15" fill="rgb(227,1,9)"/><text x="34.9859%" y="159.50">spe..</text></g><g><title>trait_impls_of (1,107,182 samples, 0.24%)</title><rect x="37.8656%" y="133" width="0.2394%" height="15" fill="rgb(248,47,43)"/><text x="38.1156%" y="143.50"></text></g><g><title>coherent_trait (16,605,975 samples, 3.59%)</title><rect x="34.5184%" y="165" width="3.5900%" height="15" fill="rgb(221,10,30)"/><text x="34.7684%" y="175.50">cohe..</text></g><g><title>coherence_checking (16,884,459 samples, 3.65%)</title><rect x="34.5117%" y="181" width="3.6502%" height="15" fill="rgb(210,229,1)"/><text x="34.7617%" y="191.50">cohe..</text></g><g><title>associated_item (759,929 samples, 0.16%)</title><rect x="57.5866%" y="117" width="0.1643%" height="15" fill="rgb(222,148,37)"/><text x="57.8366%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (612,688 samples, 0.13%)</title><rect x="57.6184%" y="101" width="0.1325%" height="15" fill="rgb(234,67,33)"/><text x="57.8684%" y="111.50"></text></g><g><title>associated_items (1,087,202 samples, 0.24%)</title><rect x="57.5296%" y="133" width="0.2350%" height="15" fill="rgb(247,98,35)"/><text x="57.7796%" y="143.50"></text></g><g><title>adt_def (1,055,091 samples, 0.23%)</title><rect x="58.1022%" y="101" width="0.2281%" height="15" fill="rgb(247,138,52)"/><text x="58.3522%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (1,050,001 samples, 0.23%)</title><rect x="58.1033%" y="85" width="0.2270%" height="15" fill="rgb(213,79,30)"/><text x="58.3533%" y="95.50"></text></g><g><title>adt_dtorck_constraint (544,316 samples, 0.12%)</title><rect x="58.5671%" y="37" width="0.1177%" height="15" fill="rgb(246,177,23)"/><text x="58.8171%" y="47.50"></text></g><g><title>adt_dtorck_constraint (861,919 samples, 0.19%)</title><rect x="58.5013%" y="53" width="0.1863%" height="15" fill="rgb(230,62,27)"/><text x="58.7513%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,062,162 samples, 0.23%)</title><rect x="58.4675%" y="69" width="0.2296%" height="15" fill="rgb(216,154,8)"/><text x="58.7175%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,378,664 samples, 0.30%)</title><rect x="58.4097%" y="85" width="0.2980%" height="15" fill="rgb(244,35,45)"/><text x="58.6597%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,766,920 samples, 0.38%)</title><rect x="58.3418%" y="101" width="0.3820%" height="15" fill="rgb(251,115,12)"/><text x="58.5918%" y="111.50"></text></g><g><title>adt_dtorck_constraint (3,207,776 samples, 0.69%)</title><rect x="58.0580%" y="117" width="0.6935%" height="15" fill="rgb(240,54,50)"/><text x="58.3080%" y="127.50"></text></g><g><title>dropck_outlives (4,574,099 samples, 0.99%)</title><rect x="57.7939%" y="133" width="0.9889%" height="15" fill="rgb(233,84,52)"/><text x="58.0439%" y="143.50"></text></g><g><title>impl_trait_ref (465,855 samples, 0.10%)</title><rect x="60.0403%" y="117" width="0.1007%" height="15" fill="rgb(207,117,47)"/><text x="60.2903%" y="127.50"></text></g><g><title>evaluate_obligation (7,355,885 samples, 1.59%)</title><rect x="58.7837%" y="133" width="1.5902%" height="15" fill="rgb(249,43,39)"/><text x="59.0337%" y="143.50"></text></g><g><title>evaluate_obligation (722,535 samples, 0.16%)</title><rect x="60.7593%" y="117" width="0.1562%" height="15" fill="rgb(209,38,44)"/><text x="61.0093%" y="127.50"></text></g><g><title>method_autoderef_steps (1,446,651 samples, 0.31%)</title><rect x="60.6072%" y="133" width="0.3127%" height="15" fill="rgb(236,212,23)"/><text x="60.8572%" y="143.50"></text></g><g><title>predicates_of (607,837 samples, 0.13%)</title><rect x="60.9934%" y="133" width="0.1314%" height="15" fill="rgb(242,79,21)"/><text x="61.2434%" y="143.50"></text></g><g><title>dropck_outlives (838,982 samples, 0.18%)</title><rect x="66.0637%" y="117" width="0.1814%" height="15" fill="rgb(211,96,35)"/><text x="66.3137%" y="127.50"></text></g><g><title>evaluate_obligation (2,530,163 samples, 0.55%)</title><rect x="66.2451%" y="117" width="0.5470%" height="15" fill="rgb(253,215,40)"/><text x="66.4951%" y="127.50"></text></g><g><title>is_copy_raw (517,234 samples, 0.11%)</title><rect x="66.8719%" y="117" width="0.1118%" height="15" fill="rgb(211,81,21)"/><text x="67.1219%" y="127.50"></text></g><g><title>method_autoderef_steps (914,531 samples, 0.20%)</title><rect x="67.0025%" y="117" width="0.1977%" height="15" fill="rgb(208,190,38)"/><text x="67.2525%" y="127.50"></text></g><g><title>typeck (28,265,686 samples, 6.11%)</title><rect x="61.1772%" y="133" width="6.1107%" height="15" fill="rgb(235,213,38)"/><text x="61.4272%" y="143.50">typeck</text></g><g><title>item_bodies_checking (134,689,367 samples, 29.12%)</title><rect x="38.2068%" y="181" width="29.1181%" height="15" fill="rgb(237,122,38)"/><text x="38.4568%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (134,684,997 samples, 29.12%)</title><rect x="38.2078%" y="165" width="29.1171%" height="15" fill="rgb(244,218,35)"/><text x="38.4578%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (134,185,901 samples, 29.01%)</title><rect x="38.3157%" y="149" width="29.0092%" height="15" fill="rgb(240,68,47)"/><text x="38.5657%" y="159.50">typeck</text></g><g><title>mir_promoted (509,686 samples, 0.11%)</title><rect x="68.7138%" y="117" width="0.1102%" height="15" fill="rgb(210,16,53)"/><text x="68.9638%" y="127.50"></text></g><g><title>item_types_checking (6,947,248 samples, 1.50%)</title><rect x="67.3249%" y="181" width="1.5019%" height="15" fill="rgb(235,124,12)"/><text x="67.5749%" y="191.50"></text></g><g><title>check_mod_item_types (6,924,418 samples, 1.50%)</title><rect x="67.3299%" y="165" width="1.4970%" height="15" fill="rgb(224,169,11)"/><text x="67.5799%" y="175.50"></text></g><g><title>type_of (903,469 samples, 0.20%)</title><rect x="68.6315%" y="149" width="0.1953%" height="15" fill="rgb(250,166,2)"/><text x="68.8815%" y="159.50"></text></g><g><title>mir_borrowck (862,319 samples, 0.19%)</title><rect x="68.6404%" y="133" width="0.1864%" height="15" fill="rgb(242,216,29)"/><text x="68.8904%" y="143.50"></text></g><g><title>fn_sig (1,389,217 samples, 0.30%)</title><rect x="69.2007%" y="149" width="0.3003%" height="15" fill="rgb(230,116,27)"/><text x="69.4507%" y="159.50"></text></g><g><title>named_region_map (898,108 samples, 0.19%)</title><rect x="69.6872%" y="133" width="0.1942%" height="15" fill="rgb(228,99,48)"/><text x="69.9372%" y="143.50"></text></g><g><title>resolve_lifetimes (813,545 samples, 0.18%)</title><rect x="69.7055%" y="117" width="0.1759%" height="15" fill="rgb(253,11,6)"/><text x="69.9555%" y="127.50"></text></g><g><title>generics_of (1,836,735 samples, 0.40%)</title><rect x="69.5010%" y="149" width="0.3971%" height="15" fill="rgb(247,143,39)"/><text x="69.7510%" y="159.50"></text></g><g><title>late_bound_vars_map (1,818,905 samples, 0.39%)</title><rect x="70.4052%" y="101" width="0.3932%" height="15" fill="rgb(236,97,10)"/><text x="70.6552%" y="111.50"></text></g><g><title>resolve_lifetimes (1,711,215 samples, 0.37%)</title><rect x="70.4284%" y="85" width="0.3699%" height="15" fill="rgb(233,208,19)"/><text x="70.6784%" y="95.50"></text></g><g><title>explicit_predicates_of (3,279,276 samples, 0.71%)</title><rect x="70.1094%" y="117" width="0.7089%" height="15" fill="rgb(216,164,2)"/><text x="70.3594%" y="127.50"></text></g><g><title>predicates_of (4,814,270 samples, 1.04%)</title><rect x="69.9461%" y="149" width="1.0408%" height="15" fill="rgb(220,129,5)"/><text x="70.1961%" y="159.50"></text></g><g><title>predicates_defined_on (4,515,787 samples, 0.98%)</title><rect x="70.0106%" y="133" width="0.9763%" height="15" fill="rgb(242,17,10)"/><text x="70.2606%" y="143.50"></text></g><g><title>inferred_outlives_of (779,508 samples, 0.17%)</title><rect x="70.8184%" y="117" width="0.1685%" height="15" fill="rgb(242,107,0)"/><text x="71.0684%" y="127.50"></text></g><g><title>inferred_outlives_crate (683,457 samples, 0.15%)</title><rect x="70.8391%" y="101" width="0.1478%" height="15" fill="rgb(251,28,31)"/><text x="71.0891%" y="111.50"></text></g><g><title>type_collecting (10,506,628 samples, 2.27%)</title><rect x="68.8284%" y="181" width="2.2714%" height="15" fill="rgb(233,223,10)"/><text x="69.0784%" y="191.50">t..</text></g><g><title>collect_mod_item_types (10,471,188 samples, 2.26%)</title><rect x="68.8361%" y="165" width="2.2637%" height="15" fill="rgb(215,21,27)"/><text x="69.0861%" y="175.50">c..</text></g><g><title>evaluate_obligation (2,046,279 samples, 0.44%)</title><rect x="73.9634%" y="149" width="0.4424%" height="15" fill="rgb(232,23,21)"/><text x="74.2134%" y="159.50"></text></g><g><title>implied_outlives_bounds (1,215,616 samples, 0.26%)</title><rect x="74.4057%" y="149" width="0.2628%" height="15" fill="rgb(244,5,23)"/><text x="74.6557%" y="159.50"></text></g><g><title>predicates_of (587,299 samples, 0.13%)</title><rect x="74.7674%" y="133" width="0.1270%" height="15" fill="rgb(226,81,46)"/><text x="75.0174%" y="143.50"></text></g><g><title>predicates_defined_on (495,167 samples, 0.11%)</title><rect x="74.7873%" y="117" width="0.1070%" height="15" fill="rgb(247,70,30)"/><text x="75.0373%" y="127.50"></text></g><g><title>object_safety_violations (1,059,522 samples, 0.23%)</title><rect x="74.6685%" y="149" width="0.2291%" height="15" fill="rgb(212,68,19)"/><text x="74.9185%" y="159.50"></text></g><g><title>param_env (1,697,791 samples, 0.37%)</title><rect x="74.8976%" y="149" width="0.3670%" height="15" fill="rgb(240,187,13)"/><text x="75.1476%" y="159.50"></text></g><g><title>check_impl_item_well_formed (19,743,193 samples, 4.27%)</title><rect x="71.3805%" y="165" width="4.2682%" height="15" fill="rgb(223,113,26)"/><text x="71.6305%" y="175.50">check..</text></g><g><title>region_scope_tree (1,723,211 samples, 0.37%)</title><rect x="75.2762%" y="149" width="0.3725%" height="15" fill="rgb(206,192,2)"/><text x="75.5262%" y="159.50"></text></g><g><title>evaluate_obligation (1,512,071 samples, 0.33%)</title><rect x="78.3856%" y="149" width="0.3269%" height="15" fill="rgb(241,108,4)"/><text x="78.6356%" y="159.50"></text></g><g><title>implied_outlives_bounds (579,468 samples, 0.13%)</title><rect x="78.7682%" y="149" width="0.1253%" height="15" fill="rgb(247,173,49)"/><text x="79.0182%" y="159.50"></text></g><g><title>object_safety_violations (523,255 samples, 0.11%)</title><rect x="78.8935%" y="149" width="0.1131%" height="15" fill="rgb(224,114,35)"/><text x="79.1435%" y="159.50"></text></g><g><title>param_env (2,167,392 samples, 0.47%)</title><rect x="79.0067%" y="149" width="0.4686%" height="15" fill="rgb(245,159,27)"/><text x="79.2567%" y="159.50"></text></g><g><title>check_item_well_formed (18,750,949 samples, 4.05%)</title><rect x="75.6487%" y="165" width="4.0537%" height="15" fill="rgb(245,172,44)"/><text x="75.8987%" y="175.50">chec..</text></g><g><title>analysis (368,034,799 samples, 79.56%)</title><rect x="0.2483%" y="213" width="79.5643%" height="15" fill="rgb(236,23,11)"/><text x="0.4983%" y="223.50">analysis</text></g><g><title>type_check_crate (209,844,499 samples, 45.37%)</title><rect x="34.4469%" y="197" width="45.3656%" height="15" fill="rgb(205,117,38)"/><text x="34.6969%" y="207.50">type_check_crate</text></g><g><title>wf_checking (40,275,071 samples, 8.71%)</title><rect x="71.1056%" y="181" width="8.7069%" height="15" fill="rgb(237,72,25)"/><text x="71.3556%" y="191.50">wf_checking</text></g><g><title>check_trait_item_well_formed (509,586 samples, 0.11%)</title><rect x="79.7024%" y="165" width="0.1102%" height="15" fill="rgb(244,70,9)"/><text x="79.9524%" y="175.50"></text></g><g><title>codegen_crate (622,057 samples, 0.13%)</title><rect x="79.8149%" y="213" width="0.1345%" height="15" fill="rgb(217,125,39)"/><text x="80.0649%" y="223.50"></text></g><g><title>AST_validation (541,746 samples, 0.12%)</title><rect x="80.0009%" y="197" width="0.1171%" height="15" fill="rgb(235,36,10)"/><text x="80.2509%" y="207.50"></text></g><g><title>metadata_register_crate (1,349,024 samples, 0.29%)</title><rect x="89.9362%" y="165" width="0.2916%" height="15" fill="rgb(251,123,47)"/><text x="90.1862%" y="175.50"></text></g><g><title>macro_expand_crate (47,720,165 samples, 10.32%)</title><rect x="80.1999%" y="197" width="10.3165%" height="15" fill="rgb(221,13,13)"/><text x="80.4499%" y="207.50">macro_expand_cr..</text></g><g><title>expand_crate (47,705,775 samples, 10.31%)</title><rect x="80.2031%" y="181" width="10.3134%" height="15" fill="rgb(238,131,9)"/><text x="80.4531%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,334,743 samples, 0.29%)</title><rect x="90.2279%" y="165" width="0.2886%" height="15" fill="rgb(211,50,8)"/><text x="90.4779%" y="175.50"></text></g><g><title>finalize_macro_resolutions (511,806 samples, 0.11%)</title><rect x="90.5815%" y="181" width="0.1106%" height="15" fill="rgb(245,182,24)"/><text x="90.8315%" y="191.50"></text></g><g><title>late_resolve_crate (8,544,775 samples, 1.85%)</title><rect x="90.6921%" y="181" width="1.8473%" height="15" fill="rgb(242,14,37)"/><text x="90.9421%" y="191.50">l..</text></g><g><title>configure_and_expand (58,840,989 samples, 12.72%)</title><rect x="79.9494%" y="213" width="12.7207%" height="15" fill="rgb(246,228,12)"/><text x="80.1994%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (9,852,650 samples, 2.13%)</title><rect x="90.5400%" y="197" width="2.1300%" height="15" fill="rgb(213,55,15)"/><text x="90.7900%" y="207.50">r..</text></g><g><title>drop_ast (870,570 samples, 0.19%)</title><rect x="92.6700%" y="213" width="0.1882%" height="15" fill="rgb(209,9,3)"/><text x="92.9200%" y="223.50"></text></g><g><title>early_lint_checks (1,792,100 samples, 0.39%)</title><rect x="92.8631%" y="213" width="0.3874%" height="15" fill="rgb(230,59,30)"/><text x="93.1131%" y="223.50"></text></g><g><title>free_global_ctxt (6,366,852 samples, 1.38%)</title><rect x="93.2505%" y="213" width="1.3764%" height="15" fill="rgb(209,121,21)"/><text x="93.5005%" y="223.50"></text></g><g><title>generate_crate_metadata (5,288,309 samples, 1.14%)</title><rect x="94.6270%" y="213" width="1.1433%" height="15" fill="rgb(220,109,13)"/><text x="94.8770%" y="223.50"></text></g><g><title>hir_lowering (16,203,071 samples, 3.50%)</title><rect x="95.7702%" y="213" width="3.5029%" height="15" fill="rgb(232,18,1)"/><text x="96.0202%" y="223.50">hir..</text></g><g><title>parse_crate (528,036 samples, 0.11%)</title><rect x="99.2884%" y="213" width="0.1142%" height="15" fill="rgb(215,41,42)"/><text x="99.5384%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,814,660 samples, 0.39%)</title><rect x="99.4503%" y="213" width="0.3923%" height="15" fill="rgb(224,123,36)"/><text x="99.7003%" y="223.50"></text></g><g><title>all (462,562,747 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (462,562,747 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (609,407 samples, 0.13%)</title><rect x="99.8683%" y="213" width="0.1317%" height="15" fill="rgb(205,185,37)"/><text x="100.1183%" y="223.50"></text></g></svg></svg>