<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_const (280,475 samples, 0.38%)</title><rect x="3.3820%" y="133" width="0.3819%" height="15" fill="rgb(227,0,7)"/><text x="3.6320%" y="143.50"></text></g><g><title>unsafety_check_result (227,675 samples, 0.31%)</title><rect x="3.4539%" y="117" width="0.3100%" height="15" fill="rgb(217,0,24)"/><text x="3.7039%" y="127.50"></text></g><g><title>mir_built (204,994 samples, 0.28%)</title><rect x="3.4848%" y="101" width="0.2791%" height="15" fill="rgb(221,193,54)"/><text x="3.7348%" y="111.50"></text></g><g><title>mir_promoted (716,369 samples, 0.98%)</title><rect x="3.2245%" y="149" width="0.9755%" height="15" fill="rgb(248,212,6)"/><text x="3.4745%" y="159.50"></text></g><g><title>mir_const_qualif (320,223 samples, 0.44%)</title><rect x="3.7639%" y="133" width="0.4361%" height="15" fill="rgb(208,68,35)"/><text x="4.0139%" y="143.50"></text></g><g><title>mir_const (263,303 samples, 0.36%)</title><rect x="3.8414%" y="117" width="0.3585%" height="15" fill="rgb(232,128,0)"/><text x="4.0914%" y="127.50"></text></g><g><title>unsafety_check_result (192,262 samples, 0.26%)</title><rect x="3.9381%" y="101" width="0.2618%" height="15" fill="rgb(207,160,47)"/><text x="4.1881%" y="111.50"></text></g><g><title>mir_built (168,332 samples, 0.23%)</title><rect x="3.9707%" y="85" width="0.2292%" height="15" fill="rgb(228,23,34)"/><text x="4.2207%" y="95.50"></text></g><g><title>MIR_borrow_checking (1,876,301 samples, 2.55%)</title><rect x="1.7095%" y="181" width="2.5550%" height="15" fill="rgb(218,30,26)"/><text x="1.9595%" y="191.50">MI..</text></g><g><title>mir_borrowck (1,841,941 samples, 2.51%)</title><rect x="1.7563%" y="165" width="2.5082%" height="15" fill="rgb(220,122,19)"/><text x="2.0063%" y="175.50">mi..</text></g><g><title>MIR_effect_checking (196,342 samples, 0.27%)</title><rect x="4.2645%" y="181" width="0.2674%" height="15" fill="rgb(250,228,42)"/><text x="4.5145%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (166,092 samples, 0.23%)</title><rect x="4.3057%" y="165" width="0.2262%" height="15" fill="rgb(240,193,28)"/><text x="4.5557%" y="175.50"></text></g><g><title>hir_module_items (230,132 samples, 0.31%)</title><rect x="4.5318%" y="181" width="0.3134%" height="15" fill="rgb(216,20,37)"/><text x="4.7818%" y="191.50"></text></g><g><title>get_lang_items (149,112 samples, 0.20%)</title><rect x="5.4151%" y="101" width="0.2030%" height="15" fill="rgb(206,188,39)"/><text x="5.6651%" y="111.50"></text></g><g><title>codegen_fn_attrs (258,903 samples, 0.35%)</title><rect x="5.3672%" y="117" width="0.3526%" height="15" fill="rgb(217,207,13)"/><text x="5.6172%" y="127.50"></text></g><g><title>codegen_fn_attrs (387,464 samples, 0.53%)</title><rect x="5.1974%" y="149" width="0.5276%" height="15" fill="rgb(231,73,38)"/><text x="5.4474%" y="159.50"></text></g><g><title>should_inherit_track_caller (345,514 samples, 0.47%)</title><rect x="5.2545%" y="133" width="0.4705%" height="15" fill="rgb(225,20,46)"/><text x="5.5045%" y="143.50"></text></g><g><title>check_mod_attrs (622,597 samples, 0.85%)</title><rect x="4.8780%" y="165" width="0.8478%" height="15" fill="rgb(210,31,41)"/><text x="5.1280%" y="175.50"></text></g><g><title>check_mod_const_bodies (94,351 samples, 0.13%)</title><rect x="5.7258%" y="165" width="0.1285%" height="15" fill="rgb(221,200,47)"/><text x="5.9758%" y="175.50"></text></g><g><title>check_mod_loops (74,911 samples, 0.10%)</title><rect x="5.8543%" y="165" width="0.1020%" height="15" fill="rgb(226,26,5)"/><text x="6.1043%" y="175.50"></text></g><g><title>is_copy_raw (640,407 samples, 0.87%)</title><rect x="6.4130%" y="149" width="0.8721%" height="15" fill="rgb(249,33,26)"/><text x="6.6630%" y="159.50"></text></g><g><title>evaluate_obligation (599,406 samples, 0.82%)</title><rect x="6.4688%" y="133" width="0.8162%" height="15" fill="rgb(235,183,28)"/><text x="6.7188%" y="143.50"></text></g><g><title>trait_impls_of (242,623 samples, 0.33%)</title><rect x="6.9547%" y="117" width="0.3304%" height="15" fill="rgb(221,5,38)"/><text x="7.2047%" y="127.50"></text></g><g><title>lookup_deprecation_entry (216,152 samples, 0.29%)</title><rect x="7.2851%" y="149" width="0.2943%" height="15" fill="rgb(247,18,42)"/><text x="7.5351%" y="159.50"></text></g><g><title>stability_index (168,932 samples, 0.23%)</title><rect x="7.3494%" y="133" width="0.2300%" height="15" fill="rgb(241,131,45)"/><text x="7.5994%" y="143.50"></text></g><g><title>adt_def (201,112 samples, 0.27%)</title><rect x="8.7302%" y="69" width="0.2739%" height="15" fill="rgb(249,31,29)"/><text x="8.9802%" y="79.50"></text></g><g><title>late_bound_vars_map (341,663 samples, 0.47%)</title><rect x="10.4225%" y="53" width="0.4652%" height="15" fill="rgb(225,111,53)"/><text x="10.6725%" y="63.50"></text></g><g><title>resolve_lifetimes (334,693 samples, 0.46%)</title><rect x="10.4320%" y="37" width="0.4558%" height="15" fill="rgb(238,160,17)"/><text x="10.6820%" y="47.50"></text></g><g><title>param_env (2,474,668 samples, 3.37%)</title><rect x="7.6408%" y="149" width="3.3698%" height="15" fill="rgb(214,148,48)"/><text x="7.8908%" y="159.50">par..</text></g><g><title>predicates_of (2,291,436 samples, 3.12%)</title><rect x="7.8903%" y="133" width="3.1203%" height="15" fill="rgb(232,36,49)"/><text x="8.1403%" y="143.50">pre..</text></g><g><title>predicates_defined_on (2,288,236 samples, 3.12%)</title><rect x="7.8947%" y="117" width="3.1159%" height="15" fill="rgb(209,103,24)"/><text x="8.1447%" y="127.50">pre..</text></g><g><title>inferred_outlives_of (2,269,086 samples, 3.09%)</title><rect x="7.9208%" y="101" width="3.0899%" height="15" fill="rgb(229,88,8)"/><text x="8.1708%" y="111.50">inf..</text></g><g><title>inferred_outlives_crate (2,259,076 samples, 3.08%)</title><rect x="7.9344%" y="85" width="3.0762%" height="15" fill="rgb(213,181,19)"/><text x="8.1844%" y="95.50">inf..</text></g><g><title>type_of (1,380,625 samples, 1.88%)</title><rect x="9.1306%" y="69" width="1.8800%" height="15" fill="rgb(254,191,54)"/><text x="9.3806%" y="79.50">t..</text></g><g><title>type_of (90,230 samples, 0.12%)</title><rect x="10.8878%" y="53" width="0.1229%" height="15" fill="rgb(241,83,37)"/><text x="11.1378%" y="63.50"></text></g><g><title>type_of (105,461 samples, 0.14%)</title><rect x="11.0106%" y="149" width="0.1436%" height="15" fill="rgb(233,36,39)"/><text x="11.2606%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (3,756,872 samples, 5.12%)</title><rect x="6.0452%" y="165" width="5.1158%" height="15" fill="rgb(226,3,54)"/><text x="6.2952%" y="175.50">check_..</text></g><g><title>looking_for_derive_registrar (85,351 samples, 0.12%)</title><rect x="11.1610%" y="165" width="0.1162%" height="15" fill="rgb(245,192,40)"/><text x="11.4110%" y="175.50"></text></g><g><title>misc_checking_1 (4,727,283 samples, 6.44%)</title><rect x="4.8458%" y="181" width="6.4372%" height="15" fill="rgb(238,167,29)"/><text x="5.0958%" y="191.50">misc_che..</text></g><g><title>liveness_and_intrinsic_checking (99,291 samples, 0.14%)</title><rect x="11.2845%" y="165" width="0.1352%" height="15" fill="rgb(232,182,51)"/><text x="11.5345%" y="175.50"></text></g><g><title>misc_checking_2 (164,361 samples, 0.22%)</title><rect x="11.2830%" y="181" width="0.2238%" height="15" fill="rgb(231,60,39)"/><text x="11.5330%" y="191.50"></text></g><g><title>check_private_in_public (227,393 samples, 0.31%)</title><rect x="11.5164%" y="165" width="0.3096%" height="15" fill="rgb(208,69,12)"/><text x="11.7664%" y="175.50"></text></g><g><title>death_checking (417,004 samples, 0.57%)</title><rect x="11.8260%" y="165" width="0.5678%" height="15" fill="rgb(235,93,37)"/><text x="12.0760%" y="175.50"></text></g><g><title>lint_levels (81,161 samples, 0.11%)</title><rect x="12.2833%" y="149" width="0.1105%" height="15" fill="rgb(213,116,39)"/><text x="12.5333%" y="159.50"></text></g><g><title>eval_to_const_value_raw (225,553 samples, 0.31%)</title><rect x="13.3662%" y="133" width="0.3071%" height="15" fill="rgb(222,207,29)"/><text x="13.6162%" y="143.50"></text></g><g><title>eval_to_const_value_raw (208,613 samples, 0.28%)</title><rect x="13.3892%" y="117" width="0.2841%" height="15" fill="rgb(206,96,30)"/><text x="13.6392%" y="127.50"></text></g><g><title>eval_to_allocation_raw (183,112 samples, 0.25%)</title><rect x="13.4239%" y="101" width="0.2493%" height="15" fill="rgb(218,138,4)"/><text x="13.6739%" y="111.50"></text></g><g><title>param_env (112,562 samples, 0.15%)</title><rect x="13.6733%" y="133" width="0.1533%" height="15" fill="rgb(250,191,14)"/><text x="13.9233%" y="143.50"></text></g><g><title>trait_impls_of (195,932 samples, 0.27%)</title><rect x="13.8480%" y="133" width="0.2668%" height="15" fill="rgb(239,60,40)"/><text x="14.0980%" y="143.50"></text></g><g><title>crate_lints (2,682,740 samples, 3.65%)</title><rect x="12.3961%" y="149" width="3.6531%" height="15" fill="rgb(206,27,48)"/><text x="12.6461%" y="159.50">crat..</text></g><g><title>type_of (1,420,596 samples, 1.93%)</title><rect x="14.1148%" y="133" width="1.9344%" height="15" fill="rgb(225,35,8)"/><text x="14.3648%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (1,175,135 samples, 1.60%)</title><rect x="14.4490%" y="117" width="1.6002%" height="15" fill="rgb(250,213,24)"/><text x="14.6990%" y="127.50"></text></g><g><title>lint_checking (3,044,924 samples, 4.15%)</title><rect x="12.3939%" y="165" width="4.1463%" height="15" fill="rgb(247,123,22)"/><text x="12.6439%" y="175.50">lint_..</text></g><g><title>module_lints (360,534 samples, 0.49%)</title><rect x="16.0492%" y="149" width="0.4909%" height="15" fill="rgb(231,138,38)"/><text x="16.2992%" y="159.50"></text></g><g><title>lint_mod (358,464 samples, 0.49%)</title><rect x="16.0520%" y="133" width="0.4881%" height="15" fill="rgb(231,145,46)"/><text x="16.3020%" y="143.50"></text></g><g><title>privacy_access_levels (331,964 samples, 0.45%)</title><rect x="16.5402%" y="165" width="0.4520%" height="15" fill="rgb(251,118,11)"/><text x="16.7902%" y="175.50"></text></g><g><title>privacy_checking_modules (1,185,553 samples, 1.61%)</title><rect x="16.9922%" y="165" width="1.6144%" height="15" fill="rgb(217,147,25)"/><text x="17.2422%" y="175.50"></text></g><g><title>check_mod_privacy (1,183,423 samples, 1.61%)</title><rect x="16.9951%" y="149" width="1.6115%" height="15" fill="rgb(247,81,37)"/><text x="17.2451%" y="159.50"></text></g><g><title>misc_checking_3 (5,228,538 samples, 7.12%)</title><rect x="11.5068%" y="181" width="7.1198%" height="15" fill="rgb(209,12,38)"/><text x="11.7568%" y="191.50">misc_check..</text></g><g><title>impl_trait_ref (150,262 samples, 0.20%)</title><rect x="19.1534%" y="85" width="0.2046%" height="15" fill="rgb(227,1,9)"/><text x="19.4034%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (131,782 samples, 0.18%)</title><rect x="19.1785%" y="69" width="0.1794%" height="15" fill="rgb(248,47,43)"/><text x="19.4285%" y="79.50"></text></g><g><title>adt_destructor (302,483 samples, 0.41%)</title><rect x="18.9809%" y="133" width="0.4119%" height="15" fill="rgb(221,10,30)"/><text x="19.2309%" y="143.50"></text></g><g><title>coherent_trait (297,643 samples, 0.41%)</title><rect x="18.9875%" y="117" width="0.4053%" height="15" fill="rgb(210,229,1)"/><text x="19.2375%" y="127.50"></text></g><g><title>specialization_graph_of (296,663 samples, 0.40%)</title><rect x="18.9888%" y="101" width="0.4040%" height="15" fill="rgb(222,148,37)"/><text x="19.2388%" y="111.50"></text></g><g><title>is_copy_raw (2,062,803 samples, 2.81%)</title><rect x="19.3928%" y="133" width="2.8090%" height="15" fill="rgb(234,67,33)"/><text x="19.6428%" y="143.50">is..</text></g><g><title>evaluate_obligation (1,827,730 samples, 2.49%)</title><rect x="19.7129%" y="117" width="2.4888%" height="15" fill="rgb(247,98,35)"/><text x="19.9629%" y="127.50">ev..</text></g><g><title>impl_parent (959,816 samples, 1.31%)</title><rect x="24.4654%" y="117" width="1.3070%" height="15" fill="rgb(247,138,52)"/><text x="24.7154%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (602,632 samples, 0.82%)</title><rect x="24.9518%" y="101" width="0.8206%" height="15" fill="rgb(213,79,30)"/><text x="25.2018%" y="111.50"></text></g><g><title>impl_trait_ref (2,675,621 samples, 3.64%)</title><rect x="25.7724%" y="117" width="3.6434%" height="15" fill="rgb(246,177,23)"/><text x="26.0224%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,312,168 samples, 3.15%)</title><rect x="26.2674%" y="101" width="3.1485%" height="15" fill="rgb(230,62,27)"/><text x="26.5174%" y="111.50">met..</text></g><g><title>coherent_trait (8,013,229 samples, 10.91%)</title><rect x="18.6977%" y="149" width="10.9117%" height="15" fill="rgb(216,154,8)"/><text x="18.9477%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (5,400,800 samples, 7.35%)</title><rect x="22.2551%" y="133" width="7.3544%" height="15" fill="rgb(244,35,45)"/><text x="22.5051%" y="143.50">specializa..</text></g><g><title>trait_impls_of (142,162 samples, 0.19%)</title><rect x="29.4159%" y="117" width="0.1936%" height="15" fill="rgb(251,115,12)"/><text x="29.6659%" y="127.50"></text></g><g><title>coherence_checking (8,068,259 samples, 10.99%)</title><rect x="18.6731%" y="165" width="10.9867%" height="15" fill="rgb(240,54,50)"/><text x="18.9231%" y="175.50">coherence_checki..</text></g><g><title>dropck_outlives (112,141 samples, 0.15%)</title><rect x="30.2445%" y="117" width="0.1527%" height="15" fill="rgb(233,84,52)"/><text x="30.4945%" y="127.50"></text></g><g><title>item_bodies_checking (527,616 samples, 0.72%)</title><rect x="29.6835%" y="165" width="0.7185%" height="15" fill="rgb(207,117,47)"/><text x="29.9335%" y="175.50"></text></g><g><title>typeck_item_bodies (526,376 samples, 0.72%)</title><rect x="29.6852%" y="149" width="0.7168%" height="15" fill="rgb(249,43,39)"/><text x="29.9352%" y="159.50"></text></g><g><title>typeck (514,586 samples, 0.70%)</title><rect x="29.7012%" y="133" width="0.7007%" height="15" fill="rgb(209,38,44)"/><text x="29.9512%" y="143.50"></text></g><g><title>item_types_checking (711,608 samples, 0.97%)</title><rect x="30.4019%" y="165" width="0.9690%" height="15" fill="rgb(236,212,23)"/><text x="30.6519%" y="175.50"></text></g><g><title>check_mod_item_types (709,768 samples, 0.97%)</title><rect x="30.4045%" y="149" width="0.9665%" height="15" fill="rgb(242,79,21)"/><text x="30.6545%" y="159.50"></text></g><g><title>typeck (399,944 samples, 0.54%)</title><rect x="30.8263%" y="133" width="0.5446%" height="15" fill="rgb(211,96,35)"/><text x="31.0763%" y="143.50"></text></g><g><title>is_mir_available (86,021 samples, 0.12%)</title><rect x="32.0338%" y="85" width="0.1171%" height="15" fill="rgb(253,215,40)"/><text x="32.2838%" y="95.50"></text></g><g><title>mir_keys (77,961 samples, 0.11%)</title><rect x="32.0448%" y="69" width="0.1062%" height="15" fill="rgb(211,81,21)"/><text x="32.2948%" y="79.50"></text></g><g><title>mir_const_qualif (230,883 samples, 0.31%)</title><rect x="32.1524%" y="85" width="0.3144%" height="15" fill="rgb(208,190,38)"/><text x="32.4024%" y="95.50"></text></g><g><title>mir_const (200,672 samples, 0.27%)</title><rect x="32.1935%" y="69" width="0.2733%" height="15" fill="rgb(235,213,38)"/><text x="32.4435%" y="79.50"></text></g><g><title>unsafety_check_result (136,461 samples, 0.19%)</title><rect x="32.2810%" y="53" width="0.1858%" height="15" fill="rgb(237,122,38)"/><text x="32.5310%" y="63.50"></text></g><g><title>mir_built (117,191 samples, 0.16%)</title><rect x="32.3072%" y="37" width="0.1596%" height="15" fill="rgb(244,218,35)"/><text x="32.5572%" y="47.50"></text></g><g><title>mir_borrowck (507,374 samples, 0.69%)</title><rect x="32.7361%" y="53" width="0.6909%" height="15" fill="rgb(240,68,47)"/><text x="32.9861%" y="63.50"></text></g><g><title>mir_for_ctfe (706,877 samples, 0.96%)</title><rect x="32.4668%" y="85" width="0.9626%" height="15" fill="rgb(210,16,53)"/><text x="32.7168%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (648,997 samples, 0.88%)</title><rect x="32.5456%" y="69" width="0.8837%" height="15" fill="rgb(235,124,12)"/><text x="32.7956%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,487,647 samples, 2.03%)</title><rect x="31.8348%" y="133" width="2.0258%" height="15" fill="rgb(224,169,11)"/><text x="32.0848%" y="143.50">e..</text></g><g><title>eval_to_const_value_raw (1,471,177 samples, 2.00%)</title><rect x="31.8572%" y="117" width="2.0033%" height="15" fill="rgb(250,166,2)"/><text x="32.1072%" y="127.50">e..</text></g><g><title>eval_to_allocation_raw (1,460,557 samples, 1.99%)</title><rect x="31.8717%" y="101" width="1.9889%" height="15" fill="rgb(242,216,29)"/><text x="32.1217%" y="111.50">e..</text></g><g><title>typeck (315,654 samples, 0.43%)</title><rect x="33.4307%" y="85" width="0.4298%" height="15" fill="rgb(230,116,27)"/><text x="33.6807%" y="95.50"></text></g><g><title>generics_of (134,921 samples, 0.18%)</title><rect x="33.9145%" y="133" width="0.1837%" height="15" fill="rgb(228,99,48)"/><text x="34.1645%" y="143.50"></text></g><g><title>explicit_predicates_of (186,252 samples, 0.25%)</title><rect x="34.6268%" y="101" width="0.2536%" height="15" fill="rgb(253,11,6)"/><text x="34.8768%" y="111.50"></text></g><g><title>predicates_of (528,267 samples, 0.72%)</title><rect x="34.2146%" y="133" width="0.7193%" height="15" fill="rgb(247,143,39)"/><text x="34.4646%" y="143.50"></text></g><g><title>predicates_defined_on (410,525 samples, 0.56%)</title><rect x="34.3749%" y="117" width="0.5590%" height="15" fill="rgb(236,97,10)"/><text x="34.6249%" y="127.50"></text></g><g><title>type_collecting (2,632,120 samples, 3.58%)</title><rect x="31.3721%" y="165" width="3.5842%" height="15" fill="rgb(233,208,19)"/><text x="31.6221%" y="175.50">type..</text></g><g><title>collect_mod_item_types (2,629,499 samples, 3.58%)</title><rect x="31.3757%" y="149" width="3.5806%" height="15" fill="rgb(216,164,2)"/><text x="31.6257%" y="159.50">coll..</text></g><g><title>evaluate_obligation (195,567 samples, 0.27%)</title><rect x="35.4653%" y="133" width="0.2663%" height="15" fill="rgb(220,129,5)"/><text x="35.7153%" y="143.50"></text></g><g><title>check_impl_item_well_formed (567,897 samples, 0.77%)</title><rect x="35.1158%" y="149" width="0.7733%" height="15" fill="rgb(242,17,10)"/><text x="35.3658%" y="159.50"></text></g><g><title>evaluate_obligation (482,652 samples, 0.66%)</title><rect x="37.4162%" y="133" width="0.6572%" height="15" fill="rgb(242,107,0)"/><text x="37.6662%" y="143.50"></text></g><g><title>param_env (116,010 samples, 0.16%)</title><rect x="38.1244%" y="133" width="0.1580%" height="15" fill="rgb(251,28,31)"/><text x="38.3744%" y="143.50"></text></g><g><title>analysis (27,398,715 samples, 37.31%)</title><rect x="1.0694%" y="197" width="37.3093%" height="15" fill="rgb(233,223,10)"/><text x="1.3194%" y="207.50">analysis</text></g><g><title>type_check_crate (14,505,302 samples, 19.75%)</title><rect x="18.6266%" y="181" width="19.7521%" height="15" fill="rgb(215,21,27)"/><text x="18.8766%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,511,238 samples, 3.42%)</title><rect x="34.9591%" y="165" width="3.4196%" height="15" fill="rgb(232,23,21)"/><text x="35.2091%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (1,828,240 samples, 2.49%)</title><rect x="35.8892%" y="149" width="2.4895%" height="15" fill="rgb(244,5,23)"/><text x="36.1392%" y="159.50">ch..</text></g><g><title>codegen_crate (375,464 samples, 0.51%)</title><rect x="38.3951%" y="197" width="0.5113%" height="15" fill="rgb(226,81,46)"/><text x="38.6451%" y="207.50"></text></g><g><title>AST_validation (243,133 samples, 0.33%)</title><rect x="39.2010%" y="181" width="0.3311%" height="15" fill="rgb(247,70,30)"/><text x="39.4510%" y="191.50"></text></g><g><title>complete_gated_feature_checking (162,031 samples, 0.22%)</title><rect x="39.5321%" y="181" width="0.2206%" height="15" fill="rgb(212,68,19)"/><text x="39.7821%" y="191.50"></text></g><g><title>crate_injection (82,361 samples, 0.11%)</title><rect x="39.7527%" y="181" width="0.1122%" height="15" fill="rgb(240,187,13)"/><text x="40.0027%" y="191.50"></text></g><g><title>metadata_load_macro (78,341 samples, 0.11%)</title><rect x="59.3905%" y="149" width="0.1067%" height="15" fill="rgb(223,113,26)"/><text x="59.6405%" y="159.50"></text></g><g><title>macro_expand_crate (17,078,149 samples, 23.26%)</title><rect x="39.8648%" y="181" width="23.2556%" height="15" fill="rgb(206,192,2)"/><text x="40.1148%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (17,051,329 samples, 23.22%)</title><rect x="39.9014%" y="165" width="23.2191%" height="15" fill="rgb(241,108,4)"/><text x="40.1514%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,660,840 samples, 3.62%)</title><rect x="59.4971%" y="149" width="3.6233%" height="15" fill="rgb(247,173,49)"/><text x="59.7471%" y="159.50">meta..</text></g><g><title>metadata_register_crate (938,510 samples, 1.28%)</title><rect x="61.8425%" y="133" width="1.2780%" height="15" fill="rgb(224,114,35)"/><text x="62.0925%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (471,135 samples, 0.64%)</title><rect x="63.1274%" y="181" width="0.6416%" height="15" fill="rgb(245,159,27)"/><text x="63.3774%" y="191.50"></text></g><g><title>finalize_macro_resolutions (238,363 samples, 0.32%)</title><rect x="63.8150%" y="165" width="0.3246%" height="15" fill="rgb(245,172,44)"/><text x="64.0650%" y="175.50"></text></g><g><title>late_resolve_crate (1,917,591 samples, 2.61%)</title><rect x="64.1396%" y="165" width="2.6112%" height="15" fill="rgb(236,23,11)"/><text x="64.3896%" y="175.50">la..</text></g><g><title>resolve_check_unused (105,611 samples, 0.14%)</title><rect x="66.8282%" y="165" width="0.1438%" height="15" fill="rgb(205,117,38)"/><text x="67.0782%" y="175.50"></text></g><g><title>resolve_postprocess (91,681 samples, 0.12%)</title><rect x="66.9735%" y="165" width="0.1248%" height="15" fill="rgb(237,72,25)"/><text x="67.2235%" y="175.50"></text></g><g><title>configure_and_expand (20,704,580 samples, 28.19%)</title><rect x="38.9064%" y="197" width="28.1938%" height="15" fill="rgb(244,70,9)"/><text x="39.1564%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,446,338 samples, 3.33%)</title><rect x="63.7690%" y="181" width="3.3312%" height="15" fill="rgb(217,125,39)"/><text x="64.0190%" y="191.50">res..</text></g><g><title>drop_ast (434,155 samples, 0.59%)</title><rect x="67.1002%" y="197" width="0.5912%" height="15" fill="rgb(235,36,10)"/><text x="67.3502%" y="207.50"></text></g><g><title>early_lint_checks (667,777 samples, 0.91%)</title><rect x="67.7100%" y="197" width="0.9093%" height="15" fill="rgb(251,123,47)"/><text x="67.9600%" y="207.50"></text></g><g><title>free_global_ctxt (2,645,759 samples, 3.60%)</title><rect x="68.6193%" y="197" width="3.6028%" height="15" fill="rgb(221,13,13)"/><text x="68.8693%" y="207.50">free..</text></g><g><title>generate_crate_metadata (1,122,803 samples, 1.53%)</title><rect x="72.2221%" y="197" width="1.5289%" height="15" fill="rgb(238,131,9)"/><text x="72.4721%" y="207.50"></text></g><g><title>hir_lowering (6,256,680 samples, 8.52%)</title><rect x="73.7510%" y="197" width="8.5198%" height="15" fill="rgb(211,50,8)"/><text x="74.0010%" y="207.50">hir_lowering</text></g><g><title>parse_crate (11,685,970 samples, 15.91%)</title><rect x="82.3406%" y="197" width="15.9130%" height="15" fill="rgb(245,182,24)"/><text x="82.5906%" y="207.50">parse_crate</text></g><g><title>prepare_outputs (324,754 samples, 0.44%)</title><rect x="98.2657%" y="197" width="0.4422%" height="15" fill="rgb(242,14,37)"/><text x="98.5157%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (463,415 samples, 0.63%)</title><rect x="98.7080%" y="197" width="0.6310%" height="15" fill="rgb(246,228,12)"/><text x="98.9580%" y="207.50"></text></g><g><title>setup_global_ctxt (132,442 samples, 0.18%)</title><rect x="99.3534%" y="197" width="0.1803%" height="15" fill="rgb(213,55,15)"/><text x="99.6034%" y="207.50"></text></g><g><title>all (73,436,736 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (73,436,736 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (342,404 samples, 0.47%)</title><rect x="99.5337%" y="197" width="0.4663%" height="15" fill="rgb(209,121,21)"/><text x="99.7837%" y="207.50"></text></g></svg></svg>