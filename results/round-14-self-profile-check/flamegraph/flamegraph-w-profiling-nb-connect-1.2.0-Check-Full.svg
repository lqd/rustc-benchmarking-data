<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (29,840 samples, 0.11%)</title><rect x="7.3007%" y="181" width="0.1117%" height="15" fill="rgb(227,0,7)"/><text x="7.5507%" y="191.50"></text></g><g><title>param_env (49,212 samples, 0.18%)</title><rect x="7.4124%" y="181" width="0.1842%" height="15" fill="rgb(217,0,24)"/><text x="7.6624%" y="191.50"></text></g><g><title>item_attrs (35,810 samples, 0.13%)</title><rect x="7.9207%" y="149" width="0.1341%" height="15" fill="rgb(221,193,54)"/><text x="8.1707%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (34,090 samples, 0.13%)</title><rect x="7.9272%" y="133" width="0.1276%" height="15" fill="rgb(248,212,6)"/><text x="8.1772%" y="143.50"></text></g><g><title>codegen_fn_attrs (58,740 samples, 0.22%)</title><rect x="7.8550%" y="165" width="0.2199%" height="15" fill="rgb(208,68,35)"/><text x="8.1050%" y="175.50"></text></g><g><title>adt_drop_tys (27,130 samples, 0.10%)</title><rect x="9.6980%" y="85" width="0.1016%" height="15" fill="rgb(232,128,0)"/><text x="9.9480%" y="95.50"></text></g><g><title>adt_drop_tys (72,320 samples, 0.27%)</title><rect x="9.6813%" y="101" width="0.2707%" height="15" fill="rgb(207,160,47)"/><text x="9.9313%" y="111.50"></text></g><g><title>adt_drop_tys (89,650 samples, 0.34%)</title><rect x="9.6672%" y="117" width="0.3356%" height="15" fill="rgb(228,23,34)"/><text x="9.9172%" y="127.50"></text></g><g><title>is_copy_raw (52,040 samples, 0.19%)</title><rect x="10.0028%" y="117" width="0.1948%" height="15" fill="rgb(218,30,26)"/><text x="10.2528%" y="127.50"></text></g><g><title>evaluate_obligation (44,020 samples, 0.16%)</title><rect x="10.0328%" y="101" width="0.1648%" height="15" fill="rgb(220,122,19)"/><text x="10.2828%" y="111.50"></text></g><g><title>adt_drop_tys (191,812 samples, 0.72%)</title><rect x="9.6129%" y="133" width="0.7181%" height="15" fill="rgb(250,228,42)"/><text x="9.8629%" y="143.50"></text></g><g><title>param_env (35,621 samples, 0.13%)</title><rect x="10.1976%" y="117" width="0.1334%" height="15" fill="rgb(240,193,28)"/><text x="10.4476%" y="127.50"></text></g><g><title>explicit_predicates_of (65,012 samples, 0.24%)</title><rect x="11.6821%" y="69" width="0.2434%" height="15" fill="rgb(216,20,37)"/><text x="11.9321%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (62,752 samples, 0.23%)</title><rect x="11.6906%" y="53" width="0.2349%" height="15" fill="rgb(206,188,39)"/><text x="11.9406%" y="63.50"></text></g><g><title>predicates_of (85,572 samples, 0.32%)</title><rect x="11.6179%" y="101" width="0.3204%" height="15" fill="rgb(217,207,13)"/><text x="11.8679%" y="111.50"></text></g><g><title>predicates_defined_on (74,582 samples, 0.28%)</title><rect x="11.6590%" y="85" width="0.2792%" height="15" fill="rgb(231,73,38)"/><text x="11.9090%" y="95.50"></text></g><g><title>needs_drop_raw (835,929 samples, 3.13%)</title><rect x="9.4621%" y="149" width="3.1295%" height="15" fill="rgb(225,20,46)"/><text x="9.7121%" y="159.50">nee..</text></g><g><title>is_copy_raw (603,826 samples, 2.26%)</title><rect x="10.3310%" y="133" width="2.2606%" height="15" fill="rgb(210,31,41)"/><text x="10.5810%" y="143.50">i..</text></g><g><title>evaluate_obligation (551,275 samples, 2.06%)</title><rect x="10.5277%" y="117" width="2.0639%" height="15" fill="rgb(221,200,47)"/><text x="10.7777%" y="127.50">e..</text></g><g><title>trait_impls_of (173,022 samples, 0.65%)</title><rect x="11.9438%" y="101" width="0.6478%" height="15" fill="rgb(226,26,5)"/><text x="12.1938%" y="111.50"></text></g><g><title>implementations_of_trait (35,350 samples, 0.13%)</title><rect x="12.4592%" y="85" width="0.1323%" height="15" fill="rgb(249,33,26)"/><text x="12.7092%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (31,130 samples, 0.12%)</title><rect x="12.4750%" y="69" width="0.1165%" height="15" fill="rgb(235,183,28)"/><text x="12.7250%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (59,650 samples, 0.22%)</title><rect x="12.7276%" y="133" width="0.2233%" height="15" fill="rgb(221,5,38)"/><text x="12.9776%" y="143.50"></text></g><g><title>specialization_graph_of (73,111 samples, 0.27%)</title><rect x="12.9918%" y="133" width="0.2737%" height="15" fill="rgb(247,18,42)"/><text x="13.2418%" y="143.50"></text></g><g><title>impl_trait_ref (49,571 samples, 0.19%)</title><rect x="13.0799%" y="117" width="0.1856%" height="15" fill="rgb(241,131,45)"/><text x="13.3299%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (47,301 samples, 0.18%)</title><rect x="13.0884%" y="101" width="0.1771%" height="15" fill="rgb(249,31,29)"/><text x="13.3384%" y="111.50"></text></g><g><title>resolve_instance (188,431 samples, 0.71%)</title><rect x="12.5916%" y="149" width="0.7054%" height="15" fill="rgb(225,111,53)"/><text x="12.8416%" y="159.50"></text></g><g><title>thir_body (89,351 samples, 0.33%)</title><rect x="13.3073%" y="149" width="0.3345%" height="15" fill="rgb(238,160,17)"/><text x="13.5573%" y="159.50"></text></g><g><title>mir_const (1,838,421 samples, 6.88%)</title><rect x="6.7642%" y="197" width="6.8826%" height="15" fill="rgb(214,148,48)"/><text x="7.0142%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (1,616,069 samples, 6.05%)</title><rect x="7.5966%" y="181" width="6.0502%" height="15" fill="rgb(232,36,49)"/><text x="7.8466%" y="191.50">unsafety..</text></g><g><title>mir_built (1,488,317 samples, 5.57%)</title><rect x="8.0749%" y="165" width="5.5719%" height="15" fill="rgb(209,103,24)"/><text x="8.3249%" y="175.50">mir_bui..</text></g><g><title>mir_promoted (1,972,803 samples, 7.39%)</title><rect x="6.2948%" y="213" width="7.3857%" height="15" fill="rgb(229,88,8)"/><text x="6.5448%" y="223.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (45,320 samples, 0.17%)</title><rect x="13.6806%" y="213" width="0.1697%" height="15" fill="rgb(213,181,19)"/><text x="13.9306%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (66,781 samples, 0.25%)</title><rect x="13.8502%" y="213" width="0.2500%" height="15" fill="rgb(254,191,54)"/><text x="14.1002%" y="223.50"></text></g><g><title>normalize_projection_ty (46,331 samples, 0.17%)</title><rect x="13.9268%" y="197" width="0.1735%" height="15" fill="rgb(241,83,37)"/><text x="14.1768%" y="207.50"></text></g><g><title>type_op_normalize_predicate (83,340 samples, 0.31%)</title><rect x="14.1003%" y="213" width="0.3120%" height="15" fill="rgb(233,36,39)"/><text x="14.3503%" y="223.50"></text></g><g><title>normalize_projection_ty (59,140 samples, 0.22%)</title><rect x="14.1909%" y="197" width="0.2214%" height="15" fill="rgb(226,3,54)"/><text x="14.4409%" y="207.50"></text></g><g><title>MIR_borrow_checking (3,549,980 samples, 13.29%)</title><rect x="1.9767%" y="245" width="13.2903%" height="15" fill="rgb(245,192,40)"/><text x="2.2267%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (3,543,710 samples, 13.27%)</title><rect x="2.0001%" y="229" width="13.2669%" height="15" fill="rgb(238,167,29)"/><text x="2.2501%" y="239.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (228,304 samples, 0.85%)</title><rect x="14.4123%" y="213" width="0.8547%" height="15" fill="rgb(232,182,51)"/><text x="14.6623%" y="223.50"></text></g><g><title>evaluate_obligation (58,371 samples, 0.22%)</title><rect x="15.0485%" y="197" width="0.2185%" height="15" fill="rgb(231,60,39)"/><text x="15.2985%" y="207.50"></text></g><g><title>hir_module_items (71,611 samples, 0.27%)</title><rect x="15.2787%" y="245" width="0.2681%" height="15" fill="rgb(208,69,12)"/><text x="15.5287%" y="255.50"></text></g><g><title>get_lang_items (46,961 samples, 0.18%)</title><rect x="15.9550%" y="197" width="0.1758%" height="15" fill="rgb(235,93,37)"/><text x="16.2050%" y="207.50"></text></g><g><title>codegen_fn_attrs (112,221 samples, 0.42%)</title><rect x="15.8063%" y="213" width="0.4201%" height="15" fill="rgb(213,116,39)"/><text x="16.0563%" y="223.50"></text></g><g><title>check_mod_attrs (168,292 samples, 0.63%)</title><rect x="15.5967%" y="229" width="0.6300%" height="15" fill="rgb(222,207,29)"/><text x="15.8467%" y="239.50"></text></g><g><title>lookup_deprecation_entry (49,320 samples, 0.18%)</title><rect x="16.5701%" y="213" width="0.1846%" height="15" fill="rgb(206,96,30)"/><text x="16.8201%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (149,522 samples, 0.56%)</title><rect x="16.3634%" y="229" width="0.5598%" height="15" fill="rgb(218,138,4)"/><text x="16.6134%" y="239.50"></text></g><g><title>misc_checking_1 (397,364 samples, 1.49%)</title><rect x="15.5482%" y="245" width="1.4876%" height="15" fill="rgb(250,191,14)"/><text x="15.7982%" y="255.50"></text></g><g><title>eval_to_const_value_raw (162,932 samples, 0.61%)</title><rect x="17.5840%" y="133" width="0.6100%" height="15" fill="rgb(239,60,40)"/><text x="17.8340%" y="143.50"></text></g><g><title>eval_to_const_value_raw (147,912 samples, 0.55%)</title><rect x="17.6402%" y="117" width="0.5537%" height="15" fill="rgb(206,27,48)"/><text x="17.8902%" y="127.50"></text></g><g><title>eval_to_allocation_raw (142,872 samples, 0.53%)</title><rect x="17.6591%" y="101" width="0.5349%" height="15" fill="rgb(225,35,8)"/><text x="17.9091%" y="111.50"></text></g><g><title>liveness_and_intrinsic_checking (320,973 samples, 1.20%)</title><rect x="17.0407%" y="229" width="1.2017%" height="15" fill="rgb(250,213,24)"/><text x="17.2907%" y="239.50"></text></g><g><title>check_mod_liveness (305,063 samples, 1.14%)</title><rect x="17.1003%" y="213" width="1.1421%" height="15" fill="rgb(247,123,22)"/><text x="17.3503%" y="223.50"></text></g><g><title>type_uninhabited_from (232,833 samples, 0.87%)</title><rect x="17.3707%" y="197" width="0.8717%" height="15" fill="rgb(231,138,38)"/><text x="17.6207%" y="207.50"></text></g><g><title>type_uninhabited_from (218,943 samples, 0.82%)</title><rect x="17.4227%" y="181" width="0.8197%" height="15" fill="rgb(231,145,46)"/><text x="17.6727%" y="191.50"></text></g><g><title>type_uninhabited_from (209,823 samples, 0.79%)</title><rect x="17.4568%" y="165" width="0.7855%" height="15" fill="rgb(251,118,11)"/><text x="17.7068%" y="175.50"></text></g><g><title>type_uninhabited_from (201,133 samples, 0.75%)</title><rect x="17.4893%" y="149" width="0.7530%" height="15" fill="rgb(217,147,25)"/><text x="17.7393%" y="159.50"></text></g><g><title>misc_checking_2 (436,785 samples, 1.64%)</title><rect x="17.0359%" y="245" width="1.6352%" height="15" fill="rgb(247,81,37)"/><text x="17.2859%" y="255.50"></text></g><g><title>match_checking (114,522 samples, 0.43%)</title><rect x="18.2423%" y="229" width="0.4287%" height="15" fill="rgb(209,12,38)"/><text x="18.4923%" y="239.50"></text></g><g><title>check_match (112,022 samples, 0.42%)</title><rect x="18.2517%" y="213" width="0.4194%" height="15" fill="rgb(227,1,9)"/><text x="18.5017%" y="223.50"></text></g><g><title>check_private_in_public (31,380 samples, 0.12%)</title><rect x="18.6984%" y="229" width="0.1175%" height="15" fill="rgb(248,47,43)"/><text x="18.9484%" y="239.50"></text></g><g><title>death_checking (121,391 samples, 0.45%)</title><rect x="18.8159%" y="229" width="0.4545%" height="15" fill="rgb(221,10,30)"/><text x="19.0659%" y="239.50"></text></g><g><title>lint_levels (51,411 samples, 0.19%)</title><rect x="19.0779%" y="213" width="0.1925%" height="15" fill="rgb(210,229,1)"/><text x="19.3279%" y="223.50"></text></g><g><title>param_env (79,652 samples, 0.30%)</title><rect x="19.5049%" y="197" width="0.2982%" height="15" fill="rgb(222,148,37)"/><text x="19.7549%" y="207.50"></text></g><g><title>predicates_of (38,792 samples, 0.15%)</title><rect x="19.6578%" y="181" width="0.1452%" height="15" fill="rgb(234,67,33)"/><text x="19.9078%" y="191.50"></text></g><g><title>predicates_defined_on (33,032 samples, 0.12%)</title><rect x="19.6794%" y="165" width="0.1237%" height="15" fill="rgb(247,98,35)"/><text x="19.9294%" y="175.50"></text></g><g><title>crate_lints (143,032 samples, 0.54%)</title><rect x="19.2750%" y="213" width="0.5355%" height="15" fill="rgb(247,138,52)"/><text x="19.5250%" y="223.50"></text></g><g><title>lint_checking (190,563 samples, 0.71%)</title><rect x="19.2703%" y="229" width="0.7134%" height="15" fill="rgb(213,79,30)"/><text x="19.5203%" y="239.50"></text></g><g><title>module_lints (46,271 samples, 0.17%)</title><rect x="19.8105%" y="213" width="0.1732%" height="15" fill="rgb(246,177,23)"/><text x="20.0605%" y="223.50"></text></g><g><title>lint_mod (44,601 samples, 0.17%)</title><rect x="19.8168%" y="197" width="0.1670%" height="15" fill="rgb(230,62,27)"/><text x="20.0668%" y="207.50"></text></g><g><title>privacy_access_levels (41,310 samples, 0.15%)</title><rect x="19.9838%" y="229" width="0.1547%" height="15" fill="rgb(216,154,8)"/><text x="20.2338%" y="239.50"></text></g><g><title>privacy_checking_modules (104,981 samples, 0.39%)</title><rect x="20.1384%" y="229" width="0.3930%" height="15" fill="rgb(244,35,45)"/><text x="20.3884%" y="239.50"></text></g><g><title>check_mod_privacy (103,811 samples, 0.39%)</title><rect x="20.1428%" y="213" width="0.3886%" height="15" fill="rgb(251,115,12)"/><text x="20.3928%" y="223.50"></text></g><g><title>misc_checking_3 (511,256 samples, 1.91%)</title><rect x="18.6711%" y="245" width="1.9140%" height="15" fill="rgb(240,54,50)"/><text x="18.9211%" y="255.50">m..</text></g><g><title>associated_item (144,192 samples, 0.54%)</title><rect x="29.2512%" y="165" width="0.5398%" height="15" fill="rgb(233,84,52)"/><text x="29.5012%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (109,752 samples, 0.41%)</title><rect x="29.3802%" y="149" width="0.4109%" height="15" fill="rgb(207,117,47)"/><text x="29.6302%" y="159.50"></text></g><g><title>associated_items (220,364 samples, 0.82%)</title><rect x="29.0181%" y="181" width="0.8250%" height="15" fill="rgb(249,43,39)"/><text x="29.2681%" y="191.50"></text></g><g><title>adt_def (33,100 samples, 0.12%)</title><rect x="30.3609%" y="149" width="0.1239%" height="15" fill="rgb(209,38,44)"/><text x="30.6109%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (32,350 samples, 0.12%)</title><rect x="30.3637%" y="133" width="0.1211%" height="15" fill="rgb(236,212,23)"/><text x="30.6137%" y="143.50"></text></g><g><title>impl_parent (89,354 samples, 0.33%)</title><rect x="30.8584%" y="85" width="0.3345%" height="15" fill="rgb(242,79,21)"/><text x="31.1084%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (70,643 samples, 0.26%)</title><rect x="30.9284%" y="69" width="0.2645%" height="15" fill="rgb(211,96,35)"/><text x="31.1784%" y="79.50"></text></g><g><title>impl_trait_ref (283,741 samples, 1.06%)</title><rect x="31.1929%" y="85" width="1.0623%" height="15" fill="rgb(253,215,40)"/><text x="31.4429%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (263,641 samples, 0.99%)</title><rect x="31.2681%" y="69" width="0.9870%" height="15" fill="rgb(211,81,21)"/><text x="31.5181%" y="79.50"></text></g><g><title>coherent_trait (488,095 samples, 1.83%)</title><rect x="30.5287%" y="117" width="1.8273%" height="15" fill="rgb(208,190,38)"/><text x="30.7787%" y="127.50">c..</text></g><g><title>specialization_graph_of (484,465 samples, 1.81%)</title><rect x="30.5423%" y="101" width="1.8137%" height="15" fill="rgb(235,213,38)"/><text x="30.7923%" y="111.50">s..</text></g><g><title>trait_impls_of (26,950 samples, 0.10%)</title><rect x="32.2552%" y="85" width="0.1009%" height="15" fill="rgb(237,122,38)"/><text x="32.5052%" y="95.50"></text></g><g><title>adt_destructor (508,045 samples, 1.90%)</title><rect x="30.4849%" y="149" width="1.9020%" height="15" fill="rgb(244,218,35)"/><text x="30.7349%" y="159.50">a..</text></g><g><title>metadata_decode_entry_adt_destructor (504,695 samples, 1.89%)</title><rect x="30.4974%" y="133" width="1.8895%" height="15" fill="rgb(240,68,47)"/><text x="30.7474%" y="143.50">m..</text></g><g><title>adt_def (48,020 samples, 0.18%)</title><rect x="32.6094%" y="101" width="0.1798%" height="15" fill="rgb(210,16,53)"/><text x="32.8594%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (47,140 samples, 0.18%)</title><rect x="32.6127%" y="85" width="0.1765%" height="15" fill="rgb(235,124,12)"/><text x="32.8627%" y="95.50"></text></g><g><title>adt_def (37,560 samples, 0.14%)</title><rect x="32.8193%" y="85" width="0.1406%" height="15" fill="rgb(224,169,11)"/><text x="33.0693%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (37,310 samples, 0.14%)</title><rect x="32.8203%" y="69" width="0.1397%" height="15" fill="rgb(250,166,2)"/><text x="33.0703%" y="79.50"></text></g><g><title>item_attrs (34,960 samples, 0.13%)</title><rect x="32.8291%" y="53" width="0.1309%" height="15" fill="rgb(242,216,29)"/><text x="33.0791%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (34,700 samples, 0.13%)</title><rect x="32.8301%" y="37" width="0.1299%" height="15" fill="rgb(230,116,27)"/><text x="33.0801%" y="47.50"></text></g><g><title>adt_dtorck_constraint (49,800 samples, 0.19%)</title><rect x="32.8094%" y="101" width="0.1864%" height="15" fill="rgb(228,99,48)"/><text x="33.0594%" y="111.50"></text></g><g><title>adt_dtorck_constraint (121,960 samples, 0.46%)</title><rect x="32.5850%" y="117" width="0.4566%" height="15" fill="rgb(253,11,6)"/><text x="32.8350%" y="127.50"></text></g><g><title>adt_dtorck_constraint (168,561 samples, 0.63%)</title><rect x="32.4940%" y="133" width="0.6311%" height="15" fill="rgb(247,143,39)"/><text x="32.7440%" y="143.50"></text></g><g><title>adt_dtorck_constraint (202,551 samples, 0.76%)</title><rect x="32.3869%" y="149" width="0.7583%" height="15" fill="rgb(236,97,10)"/><text x="32.6369%" y="159.50"></text></g><g><title>dropck_outlives (885,490 samples, 3.32%)</title><rect x="29.8932%" y="181" width="3.3151%" height="15" fill="rgb(233,208,19)"/><text x="30.1432%" y="191.50">dro..</text></g><g><title>adt_dtorck_constraint (790,787 samples, 2.96%)</title><rect x="30.2477%" y="165" width="2.9605%" height="15" fill="rgb(216,164,2)"/><text x="30.4977%" y="175.50">adt..</text></g><g><title>adt_def (62,261 samples, 0.23%)</title><rect x="34.8010%" y="149" width="0.2331%" height="15" fill="rgb(220,129,5)"/><text x="35.0510%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (60,551 samples, 0.23%)</title><rect x="34.8074%" y="133" width="0.2267%" height="15" fill="rgb(242,17,10)"/><text x="35.0574%" y="143.50"></text></g><g><title>item_attrs (34,860 samples, 0.13%)</title><rect x="34.9035%" y="117" width="0.1305%" height="15" fill="rgb(242,107,0)"/><text x="35.1535%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (33,020 samples, 0.12%)</title><rect x="34.9104%" y="101" width="0.1236%" height="15" fill="rgb(251,28,31)"/><text x="35.1604%" y="111.50"></text></g><g><title>adt_sized_constraint (71,492 samples, 0.27%)</title><rect x="34.7763%" y="165" width="0.2677%" height="15" fill="rgb(233,223,10)"/><text x="35.0263%" y="175.50"></text></g><g><title>impl_trait_ref (48,490 samples, 0.18%)</title><rect x="35.1176%" y="165" width="0.1815%" height="15" fill="rgb(215,21,27)"/><text x="35.3676%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (44,310 samples, 0.17%)</title><rect x="35.1333%" y="149" width="0.1659%" height="15" fill="rgb(232,23,21)"/><text x="35.3833%" y="159.50"></text></g><g><title>explicit_predicates_of (38,820 samples, 0.15%)</title><rect x="35.3677%" y="133" width="0.1453%" height="15" fill="rgb(244,5,23)"/><text x="35.6177%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (36,810 samples, 0.14%)</title><rect x="35.3753%" y="117" width="0.1378%" height="15" fill="rgb(226,81,46)"/><text x="35.6253%" y="127.50"></text></g><g><title>predicates_of (59,060 samples, 0.22%)</title><rect x="35.3036%" y="165" width="0.2211%" height="15" fill="rgb(247,70,30)"/><text x="35.5536%" y="175.50"></text></g><g><title>predicates_defined_on (48,110 samples, 0.18%)</title><rect x="35.3446%" y="149" width="0.1801%" height="15" fill="rgb(212,68,19)"/><text x="35.5946%" y="159.50"></text></g><g><title>evaluate_obligation (728,049 samples, 2.73%)</title><rect x="33.2083%" y="181" width="2.7257%" height="15" fill="rgb(240,187,13)"/><text x="33.4583%" y="191.50">ev..</text></g><g><title>trait_impls_of (107,642 samples, 0.40%)</title><rect x="35.5309%" y="165" width="0.4030%" height="15" fill="rgb(223,113,26)"/><text x="35.7809%" y="175.50"></text></g><g><title>implementations_of_trait (38,290 samples, 0.14%)</title><rect x="35.7906%" y="149" width="0.1433%" height="15" fill="rgb(206,192,2)"/><text x="36.0406%" y="159.50"></text></g><g><title>fn_sig (39,531 samples, 0.15%)</title><rect x="35.9724%" y="181" width="0.1480%" height="15" fill="rgb(241,108,4)"/><text x="36.2224%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (34,601 samples, 0.13%)</title><rect x="35.9908%" y="165" width="0.1295%" height="15" fill="rgb(247,173,49)"/><text x="36.2408%" y="175.50"></text></g><g><title>generics_of (40,980 samples, 0.15%)</title><rect x="36.1203%" y="181" width="0.1534%" height="15" fill="rgb(224,114,35)"/><text x="36.3703%" y="191.50"></text></g><g><title>item_attrs (41,721 samples, 0.16%)</title><rect x="36.4591%" y="181" width="0.1562%" height="15" fill="rgb(245,159,27)"/><text x="36.7091%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (38,680 samples, 0.14%)</title><rect x="36.4705%" y="165" width="0.1448%" height="15" fill="rgb(245,172,44)"/><text x="36.7205%" y="175.50"></text></g><g><title>method_autoderef_steps (82,231 samples, 0.31%)</title><rect x="36.6865%" y="181" width="0.3079%" height="15" fill="rgb(236,23,11)"/><text x="36.9365%" y="191.50"></text></g><g><title>evaluate_obligation (55,601 samples, 0.21%)</title><rect x="36.7862%" y="165" width="0.2082%" height="15" fill="rgb(205,117,38)"/><text x="37.0362%" y="175.50"></text></g><g><title>explicit_predicates_of (41,160 samples, 0.15%)</title><rect x="37.3712%" y="149" width="0.1541%" height="15" fill="rgb(237,72,25)"/><text x="37.6212%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (31,310 samples, 0.12%)</title><rect x="37.4081%" y="133" width="0.1172%" height="15" fill="rgb(244,70,9)"/><text x="37.6581%" y="143.50"></text></g><g><title>predicates_of (150,831 samples, 0.56%)</title><rect x="37.0422%" y="181" width="0.5647%" height="15" fill="rgb(217,125,39)"/><text x="37.2922%" y="191.50"></text></g><g><title>predicates_defined_on (95,680 samples, 0.36%)</title><rect x="37.2487%" y="165" width="0.3582%" height="15" fill="rgb(235,36,10)"/><text x="37.4987%" y="175.50"></text></g><g><title>type_of (53,000 samples, 0.20%)</title><rect x="37.6671%" y="181" width="0.1984%" height="15" fill="rgb(251,123,47)"/><text x="37.9171%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (45,940 samples, 0.17%)</title><rect x="37.6935%" y="165" width="0.1720%" height="15" fill="rgb(221,13,13)"/><text x="37.9435%" y="175.50"></text></g><g><title>variances_of (32,280 samples, 0.12%)</title><rect x="37.8693%" y="181" width="0.1208%" height="15" fill="rgb(238,131,9)"/><text x="38.1193%" y="191.50"></text></g><g><title>metadata_decode_entry_variances_of (27,380 samples, 0.10%)</title><rect x="37.8877%" y="165" width="0.1025%" height="15" fill="rgb(211,50,8)"/><text x="38.1377%" y="175.50"></text></g><g><title>item_bodies_checking (4,606,042 samples, 17.24%)</title><rect x="20.7568%" y="229" width="17.2440%" height="15" fill="rgb(245,182,24)"/><text x="21.0068%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (4,604,502 samples, 17.24%)</title><rect x="20.7626%" y="213" width="17.2382%" height="15" fill="rgb(242,14,37)"/><text x="21.0126%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (4,599,112 samples, 17.22%)</title><rect x="20.7828%" y="197" width="17.2180%" height="15" fill="rgb(246,228,12)"/><text x="21.0328%" y="207.50">typeck</text></g><g><title>late_bound_vars_map (39,881 samples, 0.15%)</title><rect x="38.4268%" y="181" width="0.1493%" height="15" fill="rgb(213,55,15)"/><text x="38.6768%" y="191.50"></text></g><g><title>resolve_lifetimes (35,991 samples, 0.13%)</title><rect x="38.4413%" y="165" width="0.1347%" height="15" fill="rgb(209,9,3)"/><text x="38.6913%" y="175.50"></text></g><g><title>fn_sig (158,292 samples, 0.59%)</title><rect x="38.1733%" y="197" width="0.5926%" height="15" fill="rgb(230,59,30)"/><text x="38.4233%" y="207.50"></text></g><g><title>type_of (50,710 samples, 0.19%)</title><rect x="38.5761%" y="181" width="0.1898%" height="15" fill="rgb(209,121,21)"/><text x="38.8261%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (48,560 samples, 0.18%)</title><rect x="38.5841%" y="165" width="0.1818%" height="15" fill="rgb(220,109,13)"/><text x="38.8341%" y="175.50"></text></g><g><title>generics_of (35,660 samples, 0.13%)</title><rect x="38.7659%" y="197" width="0.1335%" height="15" fill="rgb(232,18,1)"/><text x="39.0159%" y="207.50"></text></g><g><title>explicit_predicates_of (73,001 samples, 0.27%)</title><rect x="38.9367%" y="165" width="0.2733%" height="15" fill="rgb(215,41,42)"/><text x="39.1867%" y="175.50"></text></g><g><title>predicates_of (87,411 samples, 0.33%)</title><rect x="38.8994%" y="197" width="0.3272%" height="15" fill="rgb(224,123,36)"/><text x="39.1494%" y="207.50"></text></g><g><title>predicates_defined_on (84,471 samples, 0.32%)</title><rect x="38.9104%" y="181" width="0.3162%" height="15" fill="rgb(240,125,3)"/><text x="39.1604%" y="191.50"></text></g><g><title>type_collecting (334,154 samples, 1.25%)</title><rect x="38.0183%" y="229" width="1.2510%" height="15" fill="rgb(205,98,50)"/><text x="38.2683%" y="239.50"></text></g><g><title>collect_mod_item_types (327,954 samples, 1.23%)</title><rect x="38.0415%" y="213" width="1.2278%" height="15" fill="rgb(205,185,37)"/><text x="38.2915%" y="223.50"></text></g><g><title>adt_def (49,910 samples, 0.19%)</title><rect x="41.0520%" y="165" width="0.1869%" height="15" fill="rgb(238,207,15)"/><text x="41.3020%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (48,230 samples, 0.18%)</title><rect x="41.0583%" y="149" width="0.1806%" height="15" fill="rgb(213,199,42)"/><text x="41.3083%" y="159.50"></text></g><g><title>item_attrs (30,000 samples, 0.11%)</title><rect x="41.1266%" y="133" width="0.1123%" height="15" fill="rgb(235,201,11)"/><text x="41.3766%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (28,170 samples, 0.11%)</title><rect x="41.1334%" y="117" width="0.1055%" height="15" fill="rgb(207,46,11)"/><text x="41.3834%" y="127.50"></text></g><g><title>adt_def (37,790 samples, 0.14%)</title><rect x="41.2639%" y="149" width="0.1415%" height="15" fill="rgb(241,35,35)"/><text x="41.5139%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (36,860 samples, 0.14%)</title><rect x="41.2674%" y="133" width="0.1380%" height="15" fill="rgb(243,32,47)"/><text x="41.5174%" y="143.50"></text></g><g><title>adt_def (70,861 samples, 0.27%)</title><rect x="41.4265%" y="133" width="0.2653%" height="15" fill="rgb(247,202,23)"/><text x="41.6765%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (69,741 samples, 0.26%)</title><rect x="41.4307%" y="117" width="0.2611%" height="15" fill="rgb(219,102,11)"/><text x="41.6807%" y="127.50"></text></g><g><title>item_attrs (26,921 samples, 0.10%)</title><rect x="41.5910%" y="101" width="0.1008%" height="15" fill="rgb(243,110,44)"/><text x="41.8410%" y="111.50"></text></g><g><title>adt_sized_constraint (40,811 samples, 0.15%)</title><rect x="41.6918%" y="133" width="0.1528%" height="15" fill="rgb(222,74,54)"/><text x="41.9418%" y="143.50"></text></g><g><title>adt_sized_constraint (143,463 samples, 0.54%)</title><rect x="41.4054%" y="149" width="0.5371%" height="15" fill="rgb(216,99,12)"/><text x="41.6554%" y="159.50"></text></g><g><title>adt_sized_constraint (217,163 samples, 0.81%)</title><rect x="41.2389%" y="165" width="0.8130%" height="15" fill="rgb(226,22,26)"/><text x="41.4889%" y="175.50"></text></g><g><title>type_of (29,220 samples, 0.11%)</title><rect x="41.9425%" y="149" width="0.1094%" height="15" fill="rgb(217,163,10)"/><text x="42.1925%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (27,900 samples, 0.10%)</title><rect x="41.9474%" y="133" width="0.1045%" height="15" fill="rgb(213,25,53)"/><text x="42.1974%" y="143.50"></text></g><g><title>adt_sized_constraint (291,533 samples, 1.09%)</title><rect x="41.0132%" y="181" width="1.0914%" height="15" fill="rgb(252,105,26)"/><text x="41.2632%" y="191.50"></text></g><g><title>evaluate_obligation (372,344 samples, 1.39%)</title><rect x="40.7126%" y="197" width="1.3940%" height="15" fill="rgb(220,39,43)"/><text x="40.9626%" y="207.50"></text></g><g><title>implied_outlives_bounds (56,431 samples, 0.21%)</title><rect x="42.1816%" y="197" width="0.2113%" height="15" fill="rgb(229,68,48)"/><text x="42.4316%" y="207.50"></text></g><g><title>param_env (166,441 samples, 0.62%)</title><rect x="42.3942%" y="197" width="0.6231%" height="15" fill="rgb(252,8,32)"/><text x="42.6442%" y="207.50"></text></g><g><title>explicit_predicates_of (41,770 samples, 0.16%)</title><rect x="43.1179%" y="165" width="0.1564%" height="15" fill="rgb(223,20,43)"/><text x="43.3679%" y="175.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (37,540 samples, 0.14%)</title><rect x="43.1337%" y="149" width="0.1405%" height="15" fill="rgb(229,81,49)"/><text x="43.3837%" y="159.50"></text></g><g><title>predicates_of (92,030 samples, 0.34%)</title><rect x="43.0173%" y="197" width="0.3445%" height="15" fill="rgb(236,28,36)"/><text x="43.2673%" y="207.50"></text></g><g><title>predicates_defined_on (75,750 samples, 0.28%)</title><rect x="43.0782%" y="181" width="0.2836%" height="15" fill="rgb(249,185,26)"/><text x="43.3282%" y="191.50"></text></g><g><title>region_scope_tree (38,120 samples, 0.14%)</title><rect x="43.3618%" y="197" width="0.1427%" height="15" fill="rgb(249,174,33)"/><text x="43.6118%" y="207.50"></text></g><g><title>analysis (11,299,577 samples, 42.30%)</title><rect x="1.6360%" y="261" width="42.3031%" height="15" fill="rgb(233,201,37)"/><text x="1.8860%" y="271.50">analysis</text></g><g><title>type_check_crate (6,238,070 samples, 23.35%)</title><rect x="20.5851%" y="245" width="23.3539%" height="15" fill="rgb(221,78,26)"/><text x="20.8351%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,246,964 samples, 4.67%)</title><rect x="39.2707%" y="229" width="4.6684%" height="15" fill="rgb(250,127,30)"/><text x="39.5207%" y="239.50">wf_ch..</text></g><g><title>check_item_well_formed (1,226,664 samples, 4.59%)</title><rect x="39.3467%" y="213" width="4.5924%" height="15" fill="rgb(230,49,44)"/><text x="39.5967%" y="223.50">check..</text></g><g><title>trait_impls_of (114,461 samples, 0.43%)</title><rect x="43.5105%" y="197" width="0.4285%" height="15" fill="rgb(229,67,23)"/><text x="43.7605%" y="207.50"></text></g><g><title>implementations_of_trait (38,070 samples, 0.14%)</title><rect x="43.7965%" y="181" width="0.1425%" height="15" fill="rgb(249,83,47)"/><text x="44.0465%" y="191.50"></text></g><g><title>codegen_crate (575,797 samples, 2.16%)</title><rect x="43.9632%" y="261" width="2.1557%" height="15" fill="rgb(215,43,3)"/><text x="44.2132%" y="271.50">c..</text></g><g><title>AST_validation (67,840 samples, 0.25%)</title><rect x="46.5783%" y="245" width="0.2540%" height="15" fill="rgb(238,154,13)"/><text x="46.8283%" y="255.50"></text></g><g><title>crate_injection (55,701 samples, 0.21%)</title><rect x="46.8895%" y="245" width="0.2085%" height="15" fill="rgb(219,56,2)"/><text x="47.1395%" y="255.50"></text></g><g><title>macro_expand_crate (5,808,405 samples, 21.75%)</title><rect x="47.0980%" y="245" width="21.7454%" height="15" fill="rgb(233,0,4)"/><text x="47.3480%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (5,794,235 samples, 21.69%)</title><rect x="47.1511%" y="229" width="21.6923%" height="15" fill="rgb(235,30,7)"/><text x="47.4011%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (1,339,355 samples, 5.01%)</title><rect x="63.8291%" y="213" width="5.0142%" height="15" fill="rgb(250,79,13)"/><text x="64.0791%" y="223.50">metada..</text></g><g><title>metadata_register_crate (481,874 samples, 1.80%)</title><rect x="67.0394%" y="197" width="1.8040%" height="15" fill="rgb(211,146,34)"/><text x="67.2894%" y="207.50">m..</text></g><g><title>metadata_register_crate (34,640 samples, 0.13%)</title><rect x="68.7137%" y="181" width="0.1297%" height="15" fill="rgb(228,22,38)"/><text x="68.9637%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (85,281 samples, 0.32%)</title><rect x="68.8528%" y="245" width="0.3193%" height="15" fill="rgb(235,168,5)"/><text x="69.1028%" y="255.50"></text></g><g><title>finalize_imports (244,062 samples, 0.91%)</title><rect x="69.1885%" y="229" width="0.9137%" height="15" fill="rgb(221,155,16)"/><text x="69.4385%" y="239.50"></text></g><g><title>late_resolve_crate (3,479,739 samples, 13.03%)</title><rect x="70.1195%" y="229" width="13.0274%" height="15" fill="rgb(215,215,53)"/><text x="70.3695%" y="239.50">late_resolve_crate</text></g><g><title>configure_and_expand (9,922,001 samples, 37.15%)</title><rect x="46.1189%" y="261" width="37.1458%" height="15" fill="rgb(223,4,10)"/><text x="46.3689%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (3,764,262 samples, 14.09%)</title><rect x="69.1721%" y="245" width="14.0926%" height="15" fill="rgb(234,103,6)"/><text x="69.4221%" y="255.50">resolve_crate</text></g><g><title>early_lint_checks (80,841 samples, 0.30%)</title><rect x="83.4385%" y="261" width="0.3027%" height="15" fill="rgb(227,97,0)"/><text x="83.6885%" y="271.50"></text></g><g><title>free_global_ctxt (2,025,453 samples, 7.58%)</title><rect x="83.7412%" y="261" width="7.5828%" height="15" fill="rgb(234,150,53)"/><text x="83.9912%" y="271.50">free_globa..</text></g><g><title>crate_hash (68,841 samples, 0.26%)</title><rect x="92.1081%" y="245" width="0.2577%" height="15" fill="rgb(228,201,54)"/><text x="92.3581%" y="255.50"></text></g><g><title>generate_crate_metadata (359,794 samples, 1.35%)</title><rect x="91.3240%" y="261" width="1.3470%" height="15" fill="rgb(222,22,37)"/><text x="91.5740%" y="271.50"></text></g><g><title>hir_lowering (378,644 samples, 1.42%)</title><rect x="92.6710%" y="261" width="1.4176%" height="15" fill="rgb(237,53,32)"/><text x="92.9210%" y="271.50"></text></g><g><title>link (49,471 samples, 0.19%)</title><rect x="94.0886%" y="261" width="0.1852%" height="15" fill="rgb(233,25,53)"/><text x="94.3386%" y="271.50"></text></g><g><title>parse_crate (554,976 samples, 2.08%)</title><rect x="94.2738%" y="261" width="2.0777%" height="15" fill="rgb(210,40,34)"/><text x="94.5238%" y="271.50">p..</text></g><g><title>prepare_outputs (181,752 samples, 0.68%)</title><rect x="96.3710%" y="261" width="0.6804%" height="15" fill="rgb(241,220,44)"/><text x="96.6210%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (406,324 samples, 1.52%)</title><rect x="97.0515%" y="261" width="1.5212%" height="15" fill="rgb(235,28,35)"/><text x="97.3015%" y="271.50"></text></g><g><title>setup_global_ctxt (86,411 samples, 0.32%)</title><rect x="98.6155%" y="261" width="0.3235%" height="15" fill="rgb(210,56,17)"/><text x="98.8655%" y="271.50"></text></g><g><title>all (26,710,999 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (26,710,999 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,212,8)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (283,393 samples, 1.06%)</title><rect x="98.9390%" y="261" width="1.0610%" height="15" fill="rgb(223,33,50)"/><text x="99.1890%" y="271.50"></text></g></svg></svg>