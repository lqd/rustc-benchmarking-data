<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (57,251 samples, 0.17%)</title><rect x="8.0558%" y="197" width="0.1676%" height="15" fill="rgb(227,0,7)"/><text x="8.3058%" y="207.50"></text></g><g><title>evaluate_obligation (47,261 samples, 0.14%)</title><rect x="8.0850%" y="181" width="0.1384%" height="15" fill="rgb(217,0,24)"/><text x="8.3350%" y="191.50"></text></g><g><title>param_env (70,171 samples, 0.21%)</title><rect x="9.5460%" y="165" width="0.2054%" height="15" fill="rgb(221,193,54)"/><text x="9.7960%" y="175.50"></text></g><g><title>codegen_fn_attrs (37,601 samples, 0.11%)</title><rect x="10.0866%" y="149" width="0.1101%" height="15" fill="rgb(248,212,6)"/><text x="10.3366%" y="159.50"></text></g><g><title>explicit_predicates_of (239,862 samples, 0.70%)</title><rect x="12.0117%" y="37" width="0.7023%" height="15" fill="rgb(208,68,35)"/><text x="12.2617%" y="47.50"></text></g><g><title>is_copy_raw (321,423 samples, 0.94%)</title><rect x="11.7748%" y="101" width="0.9411%" height="15" fill="rgb(232,128,0)"/><text x="12.0248%" y="111.50"></text></g><g><title>evaluate_obligation (315,723 samples, 0.92%)</title><rect x="11.7915%" y="85" width="0.9244%" height="15" fill="rgb(207,160,47)"/><text x="12.0415%" y="95.50"></text></g><g><title>predicates_of (245,742 samples, 0.72%)</title><rect x="11.9964%" y="69" width="0.7195%" height="15" fill="rgb(228,23,34)"/><text x="12.2464%" y="79.50"></text></g><g><title>predicates_defined_on (243,002 samples, 0.71%)</title><rect x="12.0044%" y="53" width="0.7115%" height="15" fill="rgb(218,30,26)"/><text x="12.2544%" y="63.50"></text></g><g><title>adt_drop_tys (351,524 samples, 1.03%)</title><rect x="11.7553%" y="117" width="1.0292%" height="15" fill="rgb(220,122,19)"/><text x="12.0053%" y="127.50"></text></g><g><title>is_copy_raw (218,042 samples, 0.64%)</title><rect x="12.7845%" y="117" width="0.6384%" height="15" fill="rgb(250,228,42)"/><text x="13.0345%" y="127.50"></text></g><g><title>evaluate_obligation (188,442 samples, 0.55%)</title><rect x="12.8711%" y="101" width="0.5517%" height="15" fill="rgb(240,193,28)"/><text x="13.1211%" y="111.50"></text></g><g><title>needs_drop_raw (603,657 samples, 1.77%)</title><rect x="11.6744%" y="133" width="1.7674%" height="15" fill="rgb(216,20,37)"/><text x="11.9244%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (113,961 samples, 0.33%)</title><rect x="13.6195%" y="117" width="0.3337%" height="15" fill="rgb(206,188,39)"/><text x="13.8695%" y="127.50"></text></g><g><title>resolve_instance (247,682 samples, 0.73%)</title><rect x="13.4418%" y="133" width="0.7252%" height="15" fill="rgb(217,207,13)"/><text x="13.6918%" y="143.50"></text></g><g><title>thir_body (203,611 samples, 0.60%)</title><rect x="14.1922%" y="133" width="0.5961%" height="15" fill="rgb(231,73,38)"/><text x="14.4422%" y="143.50"></text></g><g><title>mir_const (2,058,124 samples, 6.03%)</title><rect x="8.8290%" y="181" width="6.0258%" height="15" fill="rgb(225,20,46)"/><text x="9.0790%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (1,743,030 samples, 5.10%)</title><rect x="9.7515%" y="165" width="5.1032%" height="15" fill="rgb(210,31,41)"/><text x="10.0015%" y="175.50">unsafe..</text></g><g><title>mir_built (1,590,966 samples, 4.66%)</title><rect x="10.1967%" y="149" width="4.6580%" height="15" fill="rgb(221,200,47)"/><text x="10.4467%" y="159.50">mir_b..</text></g><g><title>mir_promoted (2,281,707 samples, 6.68%)</title><rect x="8.2234%" y="197" width="6.6804%" height="15" fill="rgb(226,26,5)"/><text x="8.4734%" y="207.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (90,871 samples, 0.27%)</title><rect x="14.9038%" y="197" width="0.2661%" height="15" fill="rgb(249,33,26)"/><text x="15.1538%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (81,491 samples, 0.24%)</title><rect x="15.1698%" y="197" width="0.2386%" height="15" fill="rgb(235,183,28)"/><text x="15.4198%" y="207.50"></text></g><g><title>normalize_projection_ty (44,840 samples, 0.13%)</title><rect x="15.2771%" y="181" width="0.1313%" height="15" fill="rgb(221,5,38)"/><text x="15.5271%" y="191.50"></text></g><g><title>type_op_normalize_ty (43,940 samples, 0.13%)</title><rect x="15.4605%" y="197" width="0.1286%" height="15" fill="rgb(247,18,42)"/><text x="15.7105%" y="207.50"></text></g><g><title>type_op_prove_predicate (397,419 samples, 1.16%)</title><rect x="15.5891%" y="197" width="1.1636%" height="15" fill="rgb(241,131,45)"/><text x="15.8391%" y="207.50"></text></g><g><title>MIR_borrow_checking (5,158,298 samples, 15.10%)</title><rect x="1.6536%" y="229" width="15.1024%" height="15" fill="rgb(249,31,29)"/><text x="1.9036%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (5,125,628 samples, 15.01%)</title><rect x="1.7492%" y="213" width="15.0068%" height="15" fill="rgb(225,111,53)"/><text x="1.9992%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (95,830 samples, 0.28%)</title><rect x="16.7812%" y="229" width="0.2806%" height="15" fill="rgb(238,160,17)"/><text x="17.0312%" y="239.50"></text></g><g><title>get_lang_items (41,930 samples, 0.12%)</title><rect x="17.5535%" y="181" width="0.1228%" height="15" fill="rgb(214,148,48)"/><text x="17.8035%" y="191.50"></text></g><g><title>associated_item (44,431 samples, 0.13%)</title><rect x="17.7511%" y="165" width="0.1301%" height="15" fill="rgb(232,36,49)"/><text x="18.0011%" y="175.50"></text></g><g><title>item_attrs (44,531 samples, 0.13%)</title><rect x="17.9202%" y="149" width="0.1304%" height="15" fill="rgb(209,103,24)"/><text x="18.1702%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (37,851 samples, 0.11%)</title><rect x="17.9397%" y="133" width="0.1108%" height="15" fill="rgb(229,88,8)"/><text x="18.1897%" y="143.50"></text></g><g><title>codegen_fn_attrs (77,941 samples, 0.23%)</title><rect x="17.8812%" y="165" width="0.2282%" height="15" fill="rgb(213,181,19)"/><text x="18.1312%" y="175.50"></text></g><g><title>should_inherit_track_caller (151,252 samples, 0.44%)</title><rect x="17.6762%" y="181" width="0.4428%" height="15" fill="rgb(254,191,54)"/><text x="17.9262%" y="191.50"></text></g><g><title>codegen_fn_attrs (253,403 samples, 0.74%)</title><rect x="17.4331%" y="197" width="0.7419%" height="15" fill="rgb(241,83,37)"/><text x="17.6831%" y="207.50"></text></g><g><title>check_mod_attrs (353,654 samples, 1.04%)</title><rect x="17.1403%" y="213" width="1.0354%" height="15" fill="rgb(233,36,39)"/><text x="17.3903%" y="223.50"></text></g><g><title>check_mod_const_bodies (49,280 samples, 0.14%)</title><rect x="18.1757%" y="213" width="0.1443%" height="15" fill="rgb(226,3,54)"/><text x="18.4257%" y="223.50"></text></g><g><title>lookup_deprecation_entry (63,751 samples, 0.19%)</title><rect x="18.5759%" y="197" width="0.1866%" height="15" fill="rgb(245,192,40)"/><text x="18.8259%" y="207.50"></text></g><g><title>stability_index (36,461 samples, 0.11%)</title><rect x="18.6558%" y="181" width="0.1068%" height="15" fill="rgb(238,167,29)"/><text x="18.9058%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (155,683 samples, 0.46%)</title><rect x="18.4086%" y="213" width="0.4558%" height="15" fill="rgb(232,182,51)"/><text x="18.6586%" y="223.50"></text></g><g><title>looking_for_derive_registrar (36,330 samples, 0.11%)</title><rect x="18.8667%" y="213" width="0.1064%" height="15" fill="rgb(231,60,39)"/><text x="19.1167%" y="223.50"></text></g><g><title>misc_checking_1 (655,317 samples, 1.92%)</title><rect x="17.0635%" y="229" width="1.9186%" height="15" fill="rgb(208,69,12)"/><text x="17.3135%" y="239.50">m..</text></g><g><title>liveness_and_intrinsic_checking (89,071 samples, 0.26%)</title><rect x="18.9867%" y="213" width="0.2608%" height="15" fill="rgb(235,93,37)"/><text x="19.2367%" y="223.50"></text></g><g><title>check_mod_liveness (64,461 samples, 0.19%)</title><rect x="19.0587%" y="197" width="0.1887%" height="15" fill="rgb(213,116,39)"/><text x="19.3087%" y="207.50"></text></g><g><title>misc_checking_2 (224,402 samples, 0.66%)</title><rect x="18.9821%" y="229" width="0.6570%" height="15" fill="rgb(222,207,29)"/><text x="19.2321%" y="239.50"></text></g><g><title>match_checking (133,761 samples, 0.39%)</title><rect x="19.2475%" y="213" width="0.3916%" height="15" fill="rgb(206,96,30)"/><text x="19.4975%" y="223.50"></text></g><g><title>check_match (122,731 samples, 0.36%)</title><rect x="19.2798%" y="197" width="0.3593%" height="15" fill="rgb(218,138,4)"/><text x="19.5298%" y="207.50"></text></g><g><title>check_private_in_public (79,981 samples, 0.23%)</title><rect x="19.6644%" y="213" width="0.2342%" height="15" fill="rgb(250,191,14)"/><text x="19.9144%" y="223.50"></text></g><g><title>death_checking (284,133 samples, 0.83%)</title><rect x="19.8986%" y="213" width="0.8319%" height="15" fill="rgb(239,60,40)"/><text x="20.1486%" y="223.50"></text></g><g><title>item_attrs (132,261 samples, 0.39%)</title><rect x="20.3432%" y="197" width="0.3872%" height="15" fill="rgb(206,27,48)"/><text x="20.5932%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (130,821 samples, 0.38%)</title><rect x="20.3474%" y="181" width="0.3830%" height="15" fill="rgb(225,35,8)"/><text x="20.5974%" y="191.50"></text></g><g><title>param_env (108,231 samples, 0.32%)</title><rect x="21.5010%" y="181" width="0.3169%" height="15" fill="rgb(250,213,24)"/><text x="21.7510%" y="191.50"></text></g><g><title>predicates_of (45,911 samples, 0.13%)</title><rect x="21.6835%" y="165" width="0.1344%" height="15" fill="rgb(247,123,22)"/><text x="21.9335%" y="175.50"></text></g><g><title>predicates_defined_on (38,720 samples, 0.11%)</title><rect x="21.7045%" y="149" width="0.1134%" height="15" fill="rgb(231,138,38)"/><text x="21.9545%" y="159.50"></text></g><g><title>crate_lints (715,078 samples, 2.09%)</title><rect x="20.7345%" y="197" width="2.0936%" height="15" fill="rgb(231,145,46)"/><text x="20.9845%" y="207.50">c..</text></g><g><title>type_of (345,054 samples, 1.01%)</title><rect x="21.8179%" y="181" width="1.0102%" height="15" fill="rgb(251,118,11)"/><text x="22.0679%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (263,903 samples, 0.77%)</title><rect x="22.0555%" y="165" width="0.7727%" height="15" fill="rgb(217,147,25)"/><text x="22.3055%" y="175.50"></text></g><g><title>lint_checking (794,239 samples, 2.33%)</title><rect x="20.7305%" y="213" width="2.3254%" height="15" fill="rgb(247,81,37)"/><text x="20.9805%" y="223.50">l..</text></g><g><title>module_lints (77,771 samples, 0.23%)</title><rect x="22.8281%" y="197" width="0.2277%" height="15" fill="rgb(209,12,38)"/><text x="23.0781%" y="207.50"></text></g><g><title>lint_mod (75,571 samples, 0.22%)</title><rect x="22.8346%" y="181" width="0.2213%" height="15" fill="rgb(227,1,9)"/><text x="23.0846%" y="191.50"></text></g><g><title>privacy_access_levels (110,412 samples, 0.32%)</title><rect x="23.0558%" y="213" width="0.3233%" height="15" fill="rgb(248,47,43)"/><text x="23.3058%" y="223.50"></text></g><g><title>privacy_checking_modules (218,912 samples, 0.64%)</title><rect x="23.3791%" y="213" width="0.6409%" height="15" fill="rgb(221,10,30)"/><text x="23.6291%" y="223.50"></text></g><g><title>check_mod_privacy (216,482 samples, 0.63%)</title><rect x="23.3862%" y="197" width="0.6338%" height="15" fill="rgb(210,229,1)"/><text x="23.6362%" y="207.50"></text></g><g><title>misc_checking_3 (1,507,387 samples, 4.41%)</title><rect x="19.6391%" y="229" width="4.4133%" height="15" fill="rgb(222,148,37)"/><text x="19.8891%" y="239.50">misc_..</text></g><g><title>impl_trait_ref (51,141 samples, 0.15%)</title><rect x="24.3624%" y="133" width="0.1497%" height="15" fill="rgb(234,67,33)"/><text x="24.6124%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (48,751 samples, 0.14%)</title><rect x="24.3694%" y="117" width="0.1427%" height="15" fill="rgb(247,98,35)"/><text x="24.6194%" y="127.50"></text></g><g><title>adt_destructor (78,641 samples, 0.23%)</title><rect x="24.3007%" y="181" width="0.2302%" height="15" fill="rgb(247,138,52)"/><text x="24.5507%" y="191.50"></text></g><g><title>coherent_trait (75,541 samples, 0.22%)</title><rect x="24.3098%" y="165" width="0.2212%" height="15" fill="rgb(213,79,30)"/><text x="24.5598%" y="175.50"></text></g><g><title>specialization_graph_of (74,541 samples, 0.22%)</title><rect x="24.3127%" y="149" width="0.2182%" height="15" fill="rgb(246,177,23)"/><text x="24.5627%" y="159.50"></text></g><g><title>param_env (88,361 samples, 0.26%)</title><rect x="24.5309%" y="181" width="0.2587%" height="15" fill="rgb(230,62,27)"/><text x="24.7809%" y="191.50"></text></g><g><title>impl_parent (846,481 samples, 2.48%)</title><rect x="28.9802%" y="165" width="2.4783%" height="15" fill="rgb(216,154,8)"/><text x="29.2302%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (485,446 samples, 1.42%)</title><rect x="30.0372%" y="149" width="1.4213%" height="15" fill="rgb(244,35,45)"/><text x="30.2872%" y="159.50"></text></g><g><title>impl_trait_ref (1,577,930 samples, 4.62%)</title><rect x="31.4585%" y="165" width="4.6198%" height="15" fill="rgb(251,115,12)"/><text x="31.7085%" y="175.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,202,470 samples, 3.52%)</title><rect x="32.5578%" y="149" width="3.5206%" height="15" fill="rgb(240,54,50)"/><text x="32.8078%" y="159.50">met..</text></g><g><title>coherent_trait (4,368,239 samples, 12.79%)</title><rect x="24.2020%" y="197" width="12.7893%" height="15" fill="rgb(233,84,52)"/><text x="24.4520%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (4,167,527 samples, 12.20%)</title><rect x="24.7896%" y="181" width="12.2016%" height="15" fill="rgb(207,117,47)"/><text x="25.0396%" y="191.50">specialization_gra..</text></g><g><title>trait_impls_of (310,413 samples, 0.91%)</title><rect x="36.0825%" y="165" width="0.9088%" height="15" fill="rgb(249,43,39)"/><text x="36.3325%" y="175.50"></text></g><g><title>implementations_of_trait (83,361 samples, 0.24%)</title><rect x="36.7472%" y="149" width="0.2441%" height="15" fill="rgb(209,38,44)"/><text x="36.9972%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (69,541 samples, 0.20%)</title><rect x="36.7877%" y="133" width="0.2036%" height="15" fill="rgb(236,212,23)"/><text x="37.0377%" y="143.50"></text></g><g><title>coherence_checking (4,427,599 samples, 12.96%)</title><rect x="24.1459%" y="213" width="12.9631%" height="15" fill="rgb(242,79,21)"/><text x="24.3959%" y="223.50">coherence_checking</text></g><g><title>associated_item (181,731 samples, 0.53%)</title><rect x="46.4879%" y="149" width="0.5321%" height="15" fill="rgb(211,96,35)"/><text x="46.7379%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (149,241 samples, 0.44%)</title><rect x="46.5830%" y="133" width="0.4369%" height="15" fill="rgb(253,215,40)"/><text x="46.8330%" y="143.50"></text></g><g><title>associated_items (246,592 samples, 0.72%)</title><rect x="46.3236%" y="165" width="0.7220%" height="15" fill="rgb(211,81,21)"/><text x="46.5736%" y="175.50"></text></g><g><title>dropck_outlives (141,710 samples, 0.41%)</title><rect x="47.0891%" y="165" width="0.4149%" height="15" fill="rgb(208,190,38)"/><text x="47.3391%" y="175.50"></text></g><g><title>normalize_projection_ty (37,770 samples, 0.11%)</title><rect x="47.3934%" y="149" width="0.1106%" height="15" fill="rgb(235,213,38)"/><text x="47.6434%" y="159.50"></text></g><g><title>evaluate_obligation (250,941 samples, 0.73%)</title><rect x="47.5039%" y="165" width="0.7347%" height="15" fill="rgb(237,122,38)"/><text x="47.7539%" y="175.50"></text></g><g><title>evaluate_obligation (117,153 samples, 0.34%)</title><rect x="48.8626%" y="149" width="0.3430%" height="15" fill="rgb(244,218,35)"/><text x="49.1126%" y="159.50"></text></g><g><title>method_autoderef_steps (219,485 samples, 0.64%)</title><rect x="48.5916%" y="165" width="0.6426%" height="15" fill="rgb(240,68,47)"/><text x="48.8416%" y="175.50"></text></g><g><title>predicates_of (68,431 samples, 0.20%)</title><rect x="49.2788%" y="165" width="0.2004%" height="15" fill="rgb(210,16,53)"/><text x="49.5288%" y="175.50"></text></g><g><title>predicates_defined_on (45,641 samples, 0.13%)</title><rect x="49.3455%" y="149" width="0.1336%" height="15" fill="rgb(235,124,12)"/><text x="49.5955%" y="159.50"></text></g><g><title>item_bodies_checking (4,268,658 samples, 12.50%)</title><rect x="37.1679%" y="213" width="12.4977%" height="15" fill="rgb(224,169,11)"/><text x="37.4179%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (4,266,958 samples, 12.49%)</title><rect x="37.1729%" y="197" width="12.4927%" height="15" fill="rgb(250,166,2)"/><text x="37.4229%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (4,244,568 samples, 12.43%)</title><rect x="37.2385%" y="181" width="12.4272%" height="15" fill="rgb(242,216,29)"/><text x="37.4885%" y="191.50">typeck</text></g><g><title>fn_sig (57,220 samples, 0.17%)</title><rect x="50.6739%" y="181" width="0.1675%" height="15" fill="rgb(230,116,27)"/><text x="50.9239%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (54,570 samples, 0.16%)</title><rect x="50.6817%" y="165" width="0.1598%" height="15" fill="rgb(228,99,48)"/><text x="50.9317%" y="175.50"></text></g><g><title>item_types_checking (450,645 samples, 1.32%)</title><rect x="49.6657%" y="213" width="1.3194%" height="15" fill="rgb(253,11,6)"/><text x="49.9157%" y="223.50"></text></g><g><title>check_mod_item_types (447,915 samples, 1.31%)</title><rect x="49.6737%" y="197" width="1.3114%" height="15" fill="rgb(247,143,39)"/><text x="49.9237%" y="207.50"></text></g><g><title>type_of (36,740 samples, 0.11%)</title><rect x="51.7033%" y="165" width="0.1076%" height="15" fill="rgb(236,97,10)"/><text x="51.9533%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (34,610 samples, 0.10%)</title><rect x="51.7095%" y="149" width="0.1013%" height="15" fill="rgb(233,208,19)"/><text x="51.9595%" y="159.50"></text></g><g><title>fn_sig (146,281 samples, 0.43%)</title><rect x="51.4040%" y="181" width="0.4283%" height="15" fill="rgb(216,164,2)"/><text x="51.6540%" y="191.50"></text></g><g><title>named_region_map (118,011 samples, 0.35%)</title><rect x="52.0285%" y="165" width="0.3455%" height="15" fill="rgb(220,129,5)"/><text x="52.2785%" y="175.50"></text></g><g><title>resolve_lifetimes (109,651 samples, 0.32%)</title><rect x="52.0530%" y="149" width="0.3210%" height="15" fill="rgb(242,17,10)"/><text x="52.3030%" y="159.50"></text></g><g><title>lint_levels (53,091 samples, 0.16%)</title><rect x="52.2186%" y="133" width="0.1554%" height="15" fill="rgb(242,107,0)"/><text x="52.4686%" y="143.50"></text></g><g><title>generics_of (200,082 samples, 0.59%)</title><rect x="51.8323%" y="181" width="0.5858%" height="15" fill="rgb(251,28,31)"/><text x="52.0823%" y="191.50"></text></g><g><title>late_bound_vars_map (43,602 samples, 0.13%)</title><rect x="52.7967%" y="149" width="0.1277%" height="15" fill="rgb(233,223,10)"/><text x="53.0467%" y="159.50"></text></g><g><title>resolve_lifetimes (40,072 samples, 0.12%)</title><rect x="52.8070%" y="133" width="0.1173%" height="15" fill="rgb(215,21,27)"/><text x="53.0570%" y="143.50"></text></g><g><title>explicit_item_bounds (57,032 samples, 0.17%)</title><rect x="52.7592%" y="165" width="0.1670%" height="15" fill="rgb(232,23,21)"/><text x="53.0092%" y="175.50"></text></g><g><title>item_bounds (148,613 samples, 0.44%)</title><rect x="52.5159%" y="181" width="0.4351%" height="15" fill="rgb(244,5,23)"/><text x="52.7659%" y="191.50"></text></g><g><title>late_bound_vars_map (67,180 samples, 0.20%)</title><rect x="53.4048%" y="133" width="0.1967%" height="15" fill="rgb(226,81,46)"/><text x="53.6548%" y="143.50"></text></g><g><title>resolve_lifetimes (62,190 samples, 0.18%)</title><rect x="53.4194%" y="117" width="0.1821%" height="15" fill="rgb(247,70,30)"/><text x="53.6694%" y="127.50"></text></g><g><title>explicit_predicates_of (168,702 samples, 0.49%)</title><rect x="53.1478%" y="149" width="0.4939%" height="15" fill="rgb(212,68,19)"/><text x="53.3978%" y="159.50"></text></g><g><title>predicates_of (351,766 samples, 1.03%)</title><rect x="52.9510%" y="181" width="1.0299%" height="15" fill="rgb(240,187,13)"/><text x="53.2010%" y="191.50"></text></g><g><title>predicates_defined_on (327,105 samples, 0.96%)</title><rect x="53.0232%" y="165" width="0.9577%" height="15" fill="rgb(223,113,26)"/><text x="53.2732%" y="175.50"></text></g><g><title>inferred_outlives_of (115,842 samples, 0.34%)</title><rect x="53.6418%" y="149" width="0.3392%" height="15" fill="rgb(206,192,2)"/><text x="53.8918%" y="159.50"></text></g><g><title>inferred_outlives_crate (105,182 samples, 0.31%)</title><rect x="53.6730%" y="133" width="0.3080%" height="15" fill="rgb(241,108,4)"/><text x="53.9230%" y="143.50"></text></g><g><title>type_of (73,440 samples, 0.22%)</title><rect x="53.7659%" y="117" width="0.2150%" height="15" fill="rgb(247,173,49)"/><text x="54.0159%" y="127.50"></text></g><g><title>type_param_predicates (37,360 samples, 0.11%)</title><rect x="53.8715%" y="101" width="0.1094%" height="15" fill="rgb(224,114,35)"/><text x="54.1215%" y="111.50"></text></g><g><title>super_predicates_of (91,401 samples, 0.27%)</title><rect x="53.9809%" y="181" width="0.2676%" height="15" fill="rgb(245,159,27)"/><text x="54.2309%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (81,831 samples, 0.24%)</title><rect x="54.0089%" y="165" width="0.2396%" height="15" fill="rgb(245,172,44)"/><text x="54.2589%" y="175.50"></text></g><g><title>type_collecting (1,234,053 samples, 3.61%)</title><rect x="50.9887%" y="213" width="3.6130%" height="15" fill="rgb(236,23,11)"/><text x="51.2387%" y="223.50">type..</text></g><g><title>collect_mod_item_types (1,222,793 samples, 3.58%)</title><rect x="51.0217%" y="197" width="3.5801%" height="15" fill="rgb(205,117,38)"/><text x="51.2717%" y="207.50">coll..</text></g><g><title>type_of (120,320 samples, 0.35%)</title><rect x="54.2495%" y="181" width="0.3523%" height="15" fill="rgb(237,72,25)"/><text x="54.4995%" y="191.50"></text></g><g><title>evaluate_obligation (164,343 samples, 0.48%)</title><rect x="56.5568%" y="181" width="0.4812%" height="15" fill="rgb(244,70,9)"/><text x="56.8068%" y="191.50"></text></g><g><title>implied_outlives_bounds (69,750 samples, 0.20%)</title><rect x="57.0380%" y="181" width="0.2042%" height="15" fill="rgb(217,125,39)"/><text x="57.2880%" y="191.50"></text></g><g><title>param_env (85,911 samples, 0.25%)</title><rect x="57.2422%" y="181" width="0.2515%" height="15" fill="rgb(235,36,10)"/><text x="57.4922%" y="191.50"></text></g><g><title>check_impl_item_well_formed (997,180 samples, 2.92%)</title><rect x="54.8332%" y="197" width="2.9195%" height="15" fill="rgb(251,123,47)"/><text x="55.0832%" y="207.50">ch..</text></g><g><title>region_scope_tree (64,051 samples, 0.19%)</title><rect x="57.5652%" y="181" width="0.1875%" height="15" fill="rgb(221,13,13)"/><text x="57.8152%" y="191.50"></text></g><g><title>evaluate_obligation (191,502 samples, 0.56%)</title><rect x="59.8678%" y="181" width="0.5607%" height="15" fill="rgb(238,131,9)"/><text x="60.1178%" y="191.50"></text></g><g><title>implied_outlives_bounds (35,360 samples, 0.10%)</title><rect x="60.4506%" y="181" width="0.1035%" height="15" fill="rgb(211,50,8)"/><text x="60.7006%" y="191.50"></text></g><g><title>param_env (139,201 samples, 0.41%)</title><rect x="60.5708%" y="181" width="0.4076%" height="15" fill="rgb(245,182,24)"/><text x="60.8208%" y="191.50"></text></g><g><title>predicates_of (65,921 samples, 0.19%)</title><rect x="60.9784%" y="181" width="0.1930%" height="15" fill="rgb(242,14,37)"/><text x="61.2284%" y="191.50"></text></g><g><title>predicates_defined_on (47,001 samples, 0.14%)</title><rect x="61.0337%" y="165" width="0.1376%" height="15" fill="rgb(246,228,12)"/><text x="61.2837%" y="175.50"></text></g><g><title>check_item_well_formed (1,224,685 samples, 3.59%)</title><rect x="57.7528%" y="197" width="3.5856%" height="15" fill="rgb(213,55,15)"/><text x="58.0028%" y="207.50">chec..</text></g><g><title>variances_of (36,591 samples, 0.11%)</title><rect x="61.2313%" y="181" width="0.1071%" height="15" fill="rgb(209,9,3)"/><text x="61.4813%" y="191.50"></text></g><g><title>evaluate_obligation (53,921 samples, 0.16%)</title><rect x="62.3867%" y="181" width="0.1579%" height="15" fill="rgb(230,59,30)"/><text x="62.6367%" y="191.50"></text></g><g><title>implied_outlives_bounds (42,510 samples, 0.12%)</title><rect x="62.5445%" y="181" width="0.1245%" height="15" fill="rgb(209,121,21)"/><text x="62.7945%" y="191.50"></text></g><g><title>param_env (58,470 samples, 0.17%)</title><rect x="62.6708%" y="181" width="0.1712%" height="15" fill="rgb(220,109,13)"/><text x="62.9208%" y="191.50"></text></g><g><title>analysis (21,060,365 samples, 61.66%)</title><rect x="1.2861%" y="245" width="61.6603%" height="15" fill="rgb(232,18,1)"/><text x="1.5361%" y="255.50">analysis</text></g><g><title>type_check_crate (13,284,428 samples, 38.89%)</title><rect x="24.0524%" y="229" width="38.8940%" height="15" fill="rgb(215,41,42)"/><text x="24.3024%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,848,542 samples, 8.34%)</title><rect x="54.6065%" y="213" width="8.3399%" height="15" fill="rgb(224,123,36)"/><text x="54.8565%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (549,217 samples, 1.61%)</title><rect x="61.3384%" y="197" width="1.6080%" height="15" fill="rgb(240,125,3)"/><text x="61.5884%" y="207.50"></text></g><g><title>codegen_crate (312,663 samples, 0.92%)</title><rect x="62.9659%" y="245" width="0.9154%" height="15" fill="rgb(205,98,50)"/><text x="63.2159%" y="255.50"></text></g><g><title>AST_validation (68,961 samples, 0.20%)</title><rect x="64.2388%" y="229" width="0.2019%" height="15" fill="rgb(205,185,37)"/><text x="64.4888%" y="239.50"></text></g><g><title>crate_injection (54,890 samples, 0.16%)</title><rect x="64.5259%" y="229" width="0.1607%" height="15" fill="rgb(238,207,15)"/><text x="64.7759%" y="239.50"></text></g><g><title>metadata_load_macro (52,540 samples, 0.15%)</title><rect x="82.5065%" y="197" width="0.1538%" height="15" fill="rgb(213,199,42)"/><text x="82.7565%" y="207.50"></text></g><g><title>metadata_register_crate (163,590 samples, 0.48%)</title><rect x="82.6603%" y="197" width="0.4790%" height="15" fill="rgb(235,201,11)"/><text x="82.9103%" y="207.50"></text></g><g><title>macro_expand_crate (6,311,901 samples, 18.48%)</title><rect x="64.6866%" y="229" width="18.4799%" height="15" fill="rgb(207,46,11)"/><text x="64.9366%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (6,296,441 samples, 18.43%)</title><rect x="64.7318%" y="213" width="18.4346%" height="15" fill="rgb(241,35,35)"/><text x="64.9818%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (84,351 samples, 0.25%)</title><rect x="83.1870%" y="229" width="0.2470%" height="15" fill="rgb(243,32,47)"/><text x="83.4370%" y="239.50"></text></g><g><title>finalize_macro_resolutions (132,131 samples, 0.39%)</title><rect x="83.5413%" y="213" width="0.3869%" height="15" fill="rgb(247,202,23)"/><text x="83.7913%" y="223.50"></text></g><g><title>late_resolve_crate (513,886 samples, 1.50%)</title><rect x="83.9282%" y="213" width="1.5045%" height="15" fill="rgb(219,102,11)"/><text x="84.1782%" y="223.50"></text></g><g><title>configure_and_expand (7,410,743 samples, 21.70%)</title><rect x="63.8813%" y="245" width="21.6971%" height="15" fill="rgb(243,110,44)"/><text x="64.1313%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (732,448 samples, 2.14%)</title><rect x="83.4339%" y="229" width="2.1445%" height="15" fill="rgb(222,74,54)"/><text x="83.6839%" y="239.50">r..</text></g><g><title>drop_ast (63,591 samples, 0.19%)</title><rect x="85.5784%" y="245" width="0.1862%" height="15" fill="rgb(216,99,12)"/><text x="85.8284%" y="255.50"></text></g><g><title>early_lint_checks (131,542 samples, 0.39%)</title><rect x="85.8102%" y="245" width="0.3851%" height="15" fill="rgb(226,22,26)"/><text x="86.0602%" y="255.50"></text></g><g><title>free_global_ctxt (1,488,627 samples, 4.36%)</title><rect x="86.1954%" y="245" width="4.3584%" height="15" fill="rgb(217,163,10)"/><text x="86.4454%" y="255.50">free_..</text></g><g><title>crate_hash (62,710 samples, 0.18%)</title><rect x="91.7141%" y="229" width="0.1836%" height="15" fill="rgb(213,25,53)"/><text x="91.9641%" y="239.50"></text></g><g><title>generate_crate_metadata (535,576 samples, 1.57%)</title><rect x="90.5537%" y="245" width="1.5681%" height="15" fill="rgb(252,105,26)"/><text x="90.8037%" y="255.50"></text></g><g><title>hir_lowering (879,809 samples, 2.58%)</title><rect x="92.1218%" y="245" width="2.5759%" height="15" fill="rgb(220,39,43)"/><text x="92.3718%" y="255.50">hi..</text></g><g><title>link (35,850 samples, 0.10%)</title><rect x="94.6977%" y="245" width="0.1050%" height="15" fill="rgb(229,68,48)"/><text x="94.9477%" y="255.50"></text></g><g><title>parse_crate (755,468 samples, 2.21%)</title><rect x="94.8026%" y="245" width="2.2118%" height="15" fill="rgb(252,8,32)"/><text x="95.0526%" y="255.50">p..</text></g><g><title>prepare_outputs (173,262 samples, 0.51%)</title><rect x="97.0316%" y="245" width="0.5073%" height="15" fill="rgb(223,20,43)"/><text x="97.2816%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (453,825 samples, 1.33%)</title><rect x="97.5388%" y="245" width="1.3287%" height="15" fill="rgb(229,81,49)"/><text x="97.7888%" y="255.50"></text></g><g><title>setup_global_ctxt (90,471 samples, 0.26%)</title><rect x="98.8972%" y="245" width="0.2649%" height="15" fill="rgb(236,28,36)"/><text x="99.1472%" y="255.50"></text></g><g><title>all (34,155,482 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (34,155,482 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (286,194 samples, 0.84%)</title><rect x="99.1621%" y="245" width="0.8379%" height="15" fill="rgb(233,201,37)"/><text x="99.4121%" y="255.50"></text></g></svg></svg>