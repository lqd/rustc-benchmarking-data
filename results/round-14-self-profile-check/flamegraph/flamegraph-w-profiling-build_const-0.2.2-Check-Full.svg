<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (98,251 samples, 0.13%)</title><rect x="9.4470%" y="149" width="0.1335%" height="15" fill="rgb(227,0,7)"/><text x="9.6970%" y="159.50"></text></g><g><title>item_attrs (276,003 samples, 0.37%)</title><rect x="9.8771%" y="117" width="0.3750%" height="15" fill="rgb(217,0,24)"/><text x="10.1271%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (272,293 samples, 0.37%)</title><rect x="9.8821%" y="101" width="0.3699%" height="15" fill="rgb(221,193,54)"/><text x="10.1321%" y="111.50"></text></g><g><title>codegen_fn_attrs (329,204 samples, 0.45%)</title><rect x="9.8201%" y="133" width="0.4473%" height="15" fill="rgb(248,212,6)"/><text x="10.0701%" y="143.50"></text></g><g><title>adt_drop_tys (97,561 samples, 0.13%)</title><rect x="11.6999%" y="85" width="0.1325%" height="15" fill="rgb(208,68,35)"/><text x="11.9499%" y="95.50"></text></g><g><title>adt_drop_tys (234,323 samples, 0.32%)</title><rect x="11.6741%" y="101" width="0.3184%" height="15" fill="rgb(232,128,0)"/><text x="11.9241%" y="111.50"></text></g><g><title>needs_drop_raw (885,450 samples, 1.20%)</title><rect x="11.5975%" y="117" width="1.2030%" height="15" fill="rgb(207,160,47)"/><text x="11.8475%" y="127.50"></text></g><g><title>is_copy_raw (594,737 samples, 0.81%)</title><rect x="11.9925%" y="101" width="0.8080%" height="15" fill="rgb(228,23,34)"/><text x="12.2425%" y="111.50"></text></g><g><title>evaluate_obligation (532,855 samples, 0.72%)</title><rect x="12.0765%" y="85" width="0.7239%" height="15" fill="rgb(218,30,26)"/><text x="12.3265%" y="95.50"></text></g><g><title>trait_impls_of (122,082 samples, 0.17%)</title><rect x="12.6346%" y="69" width="0.1659%" height="15" fill="rgb(220,122,19)"/><text x="12.8846%" y="79.50"></text></g><g><title>specialization_graph_of (246,842 samples, 0.34%)</title><rect x="12.9873%" y="101" width="0.3354%" height="15" fill="rgb(250,228,42)"/><text x="13.2373%" y="111.50"></text></g><g><title>impl_trait_ref (118,991 samples, 0.16%)</title><rect x="13.1610%" y="85" width="0.1617%" height="15" fill="rgb(240,193,28)"/><text x="13.4110%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (104,801 samples, 0.14%)</title><rect x="13.1803%" y="69" width="0.1424%" height="15" fill="rgb(216,20,37)"/><text x="13.4303%" y="79.50"></text></g><g><title>resolve_instance (411,653 samples, 0.56%)</title><rect x="12.8005%" y="117" width="0.5593%" height="15" fill="rgb(206,188,39)"/><text x="13.0505%" y="127.50"></text></g><g><title>thir_body (322,805 samples, 0.44%)</title><rect x="13.3706%" y="117" width="0.4386%" height="15" fill="rgb(217,207,13)"/><text x="13.6206%" y="127.50"></text></g><g><title>mir_const (3,536,638 samples, 4.80%)</title><rect x="9.0105%" y="165" width="4.8049%" height="15" fill="rgb(231,73,38)"/><text x="9.2605%" y="175.50">mir_co..</text></g><g><title>unsafety_check_result (3,117,145 samples, 4.23%)</title><rect x="9.5804%" y="149" width="4.2350%" height="15" fill="rgb(225,20,46)"/><text x="9.8304%" y="159.50">unsaf..</text></g><g><title>mir_built (2,611,510 samples, 3.55%)</title><rect x="10.2674%" y="133" width="3.5480%" height="15" fill="rgb(210,31,41)"/><text x="10.5174%" y="143.50">mir_..</text></g><g><title>mir_promoted (3,913,193 samples, 5.32%)</title><rect x="8.5194%" y="181" width="5.3165%" height="15" fill="rgb(221,200,47)"/><text x="8.7694%" y="191.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (287,283 samples, 0.39%)</title><rect x="13.8494%" y="181" width="0.3903%" height="15" fill="rgb(226,26,5)"/><text x="14.0994%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (183,862 samples, 0.25%)</title><rect x="14.2397%" y="181" width="0.2498%" height="15" fill="rgb(249,33,26)"/><text x="14.4897%" y="191.50"></text></g><g><title>normalize_projection_ty (106,072 samples, 0.14%)</title><rect x="14.3454%" y="165" width="0.1441%" height="15" fill="rgb(235,183,28)"/><text x="14.5954%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,163,945 samples, 1.58%)</title><rect x="14.5384%" y="181" width="1.5813%" height="15" fill="rgb(221,5,38)"/><text x="14.7884%" y="191.50"></text></g><g><title>MIR_borrow_checking (10,763,459 samples, 14.62%)</title><rect x="1.5011%" y="213" width="14.6232%" height="15" fill="rgb(247,18,42)"/><text x="1.7511%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,732,208 samples, 14.58%)</title><rect x="1.5435%" y="197" width="14.5808%" height="15" fill="rgb(241,131,45)"/><text x="1.7935%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (175,982 samples, 0.24%)</title><rect x="16.1346%" y="213" width="0.2391%" height="15" fill="rgb(249,31,29)"/><text x="16.3846%" y="223.50"></text></g><g><title>get_lang_items (80,701 samples, 0.11%)</title><rect x="16.7421%" y="165" width="0.1096%" height="15" fill="rgb(225,111,53)"/><text x="16.9921%" y="175.50"></text></g><g><title>codegen_fn_attrs (213,062 samples, 0.29%)</title><rect x="16.6661%" y="181" width="0.2895%" height="15" fill="rgb(238,160,17)"/><text x="16.9161%" y="191.50"></text></g><g><title>check_mod_attrs (390,615 samples, 0.53%)</title><rect x="16.4252%" y="197" width="0.5307%" height="15" fill="rgb(214,148,48)"/><text x="16.6752%" y="207.50"></text></g><g><title>check_mod_const_bodies (97,701 samples, 0.13%)</title><rect x="16.9559%" y="197" width="0.1327%" height="15" fill="rgb(232,36,49)"/><text x="17.2059%" y="207.50"></text></g><g><title>lookup_deprecation_entry (170,292 samples, 0.23%)</title><rect x="17.4016%" y="181" width="0.2314%" height="15" fill="rgb(209,103,24)"/><text x="17.6516%" y="191.50"></text></g><g><title>stability_index (80,771 samples, 0.11%)</title><rect x="17.5232%" y="165" width="0.1097%" height="15" fill="rgb(229,88,8)"/><text x="17.7732%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (446,055 samples, 0.61%)</title><rect x="17.1703%" y="197" width="0.6060%" height="15" fill="rgb(213,181,19)"/><text x="17.4203%" y="207.50"></text></g><g><title>misc_checking_1 (1,096,572 samples, 1.49%)</title><rect x="16.3742%" y="213" width="1.4898%" height="15" fill="rgb(254,191,54)"/><text x="16.6242%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (222,613 samples, 0.30%)</title><rect x="17.8657%" y="197" width="0.3024%" height="15" fill="rgb(241,83,37)"/><text x="18.1157%" y="207.50"></text></g><g><title>check_mod_liveness (188,872 samples, 0.26%)</title><rect x="17.9116%" y="181" width="0.2566%" height="15" fill="rgb(233,36,39)"/><text x="18.1616%" y="191.50"></text></g><g><title>misc_checking_2 (384,735 samples, 0.52%)</title><rect x="17.8640%" y="213" width="0.5227%" height="15" fill="rgb(226,3,54)"/><text x="18.1140%" y="223.50"></text></g><g><title>match_checking (160,832 samples, 0.22%)</title><rect x="18.1682%" y="197" width="0.2185%" height="15" fill="rgb(245,192,40)"/><text x="18.4182%" y="207.50"></text></g><g><title>check_match (152,501 samples, 0.21%)</title><rect x="18.1795%" y="181" width="0.2072%" height="15" fill="rgb(238,167,29)"/><text x="18.4295%" y="191.50"></text></g><g><title>death_checking (182,902 samples, 0.25%)</title><rect x="18.4865%" y="197" width="0.2485%" height="15" fill="rgb(232,182,51)"/><text x="18.7365%" y="207.50"></text></g><g><title>param_env (121,241 samples, 0.16%)</title><rect x="19.4151%" y="165" width="0.1647%" height="15" fill="rgb(231,60,39)"/><text x="19.6651%" y="175.50"></text></g><g><title>crate_lints (3,219,815 samples, 4.37%)</title><rect x="18.7374%" y="181" width="4.3744%" height="15" fill="rgb(208,69,12)"/><text x="18.9874%" y="191.50">crate..</text></g><g><title>type_of (2,597,390 samples, 3.53%)</title><rect x="19.5830%" y="165" width="3.5288%" height="15" fill="rgb(235,93,37)"/><text x="19.8330%" y="175.50">typ..</text></g><g><title>metadata_decode_entry_type_of (2,346,339 samples, 3.19%)</title><rect x="19.9241%" y="149" width="3.1877%" height="15" fill="rgb(213,116,39)"/><text x="20.1741%" y="159.50">met..</text></g><g><title>lint_checking (3,378,457 samples, 4.59%)</title><rect x="18.7350%" y="197" width="4.5900%" height="15" fill="rgb(222,207,29)"/><text x="18.9850%" y="207.50">lint_..</text></g><g><title>module_lints (156,892 samples, 0.21%)</title><rect x="23.1118%" y="181" width="0.2132%" height="15" fill="rgb(206,96,30)"/><text x="23.3618%" y="191.50"></text></g><g><title>lint_mod (154,152 samples, 0.21%)</title><rect x="23.1156%" y="165" width="0.2094%" height="15" fill="rgb(218,138,4)"/><text x="23.3656%" y="175.50"></text></g><g><title>privacy_access_levels (79,301 samples, 0.11%)</title><rect x="23.3250%" y="197" width="0.1077%" height="15" fill="rgb(250,191,14)"/><text x="23.5750%" y="207.50"></text></g><g><title>privacy_checking_modules (238,222 samples, 0.32%)</title><rect x="23.4327%" y="197" width="0.3236%" height="15" fill="rgb(239,60,40)"/><text x="23.6827%" y="207.50"></text></g><g><title>check_mod_privacy (236,262 samples, 0.32%)</title><rect x="23.4354%" y="181" width="0.3210%" height="15" fill="rgb(206,27,48)"/><text x="23.6854%" y="191.50"></text></g><g><title>misc_checking_3 (3,961,243 samples, 5.38%)</title><rect x="18.3867%" y="213" width="5.3817%" height="15" fill="rgb(225,35,8)"/><text x="18.6367%" y="223.50">misc_ch..</text></g><g><title>adt_def (74,410 samples, 0.10%)</title><rect x="44.0958%" y="133" width="0.1011%" height="15" fill="rgb(250,213,24)"/><text x="44.3458%" y="143.50"></text></g><g><title>adt_sized_constraint (94,350 samples, 0.13%)</title><rect x="44.0795%" y="149" width="0.1282%" height="15" fill="rgb(247,123,22)"/><text x="44.3295%" y="159.50"></text></g><g><title>associated_item (362,443 samples, 0.49%)</title><rect x="44.4403%" y="133" width="0.4924%" height="15" fill="rgb(231,138,38)"/><text x="44.6903%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (270,743 samples, 0.37%)</title><rect x="44.5649%" y="117" width="0.3678%" height="15" fill="rgb(231,145,46)"/><text x="44.8149%" y="127.50"></text></g><g><title>associated_items (540,036 samples, 0.73%)</title><rect x="44.2350%" y="149" width="0.7337%" height="15" fill="rgb(251,118,11)"/><text x="44.4850%" y="159.50"></text></g><g><title>adt_def (79,932 samples, 0.11%)</title><rect x="45.5854%" y="117" width="0.1086%" height="15" fill="rgb(217,147,25)"/><text x="45.8354%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (78,212 samples, 0.11%)</title><rect x="45.5878%" y="101" width="0.1063%" height="15" fill="rgb(247,81,37)"/><text x="45.8378%" y="111.50"></text></g><g><title>adt_def (76,941 samples, 0.10%)</title><rect x="46.1057%" y="53" width="0.1045%" height="15" fill="rgb(209,12,38)"/><text x="46.3557%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (76,381 samples, 0.10%)</title><rect x="46.1065%" y="37" width="0.1038%" height="15" fill="rgb(227,1,9)"/><text x="46.3565%" y="47.50"></text></g><g><title>adt_dtorck_constraint (99,671 samples, 0.14%)</title><rect x="46.0947%" y="69" width="0.1354%" height="15" fill="rgb(248,47,43)"/><text x="46.3447%" y="79.50"></text></g><g><title>adt_dtorck_constraint (178,452 samples, 0.24%)</title><rect x="46.0065%" y="85" width="0.2424%" height="15" fill="rgb(221,10,30)"/><text x="46.2565%" y="95.50"></text></g><g><title>adt_dtorck_constraint (300,902 samples, 0.41%)</title><rect x="45.8794%" y="101" width="0.4088%" height="15" fill="rgb(210,229,1)"/><text x="46.1294%" y="111.50"></text></g><g><title>adt_dtorck_constraint (431,235 samples, 0.59%)</title><rect x="45.7444%" y="117" width="0.5859%" height="15" fill="rgb(222,148,37)"/><text x="45.9944%" y="127.50"></text></g><g><title>dropck_outlives (944,930 samples, 1.28%)</title><rect x="45.1231%" y="149" width="1.2838%" height="15" fill="rgb(234,67,33)"/><text x="45.3731%" y="159.50"></text></g><g><title>adt_dtorck_constraint (677,549 samples, 0.92%)</title><rect x="45.4864%" y="133" width="0.9205%" height="15" fill="rgb(247,98,35)"/><text x="45.7364%" y="143.50"></text></g><g><title>adt_def (374,362 samples, 0.51%)</title><rect x="47.9066%" y="117" width="0.5086%" height="15" fill="rgb(247,138,52)"/><text x="48.1566%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (368,452 samples, 0.50%)</title><rect x="47.9146%" y="101" width="0.5006%" height="15" fill="rgb(213,79,30)"/><text x="48.1646%" y="111.50"></text></g><g><title>item_attrs (297,082 samples, 0.40%)</title><rect x="48.0115%" y="85" width="0.4036%" height="15" fill="rgb(246,177,23)"/><text x="48.2615%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (290,282 samples, 0.39%)</title><rect x="48.0208%" y="69" width="0.3944%" height="15" fill="rgb(230,62,27)"/><text x="48.2708%" y="79.50"></text></g><g><title>adt_def (212,452 samples, 0.29%)</title><rect x="48.4263%" y="101" width="0.2886%" height="15" fill="rgb(216,154,8)"/><text x="48.6763%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (210,852 samples, 0.29%)</title><rect x="48.4285%" y="85" width="0.2865%" height="15" fill="rgb(244,35,45)"/><text x="48.6785%" y="95.50"></text></g><g><title>item_attrs (190,802 samples, 0.26%)</title><rect x="48.4557%" y="69" width="0.2592%" height="15" fill="rgb(251,115,12)"/><text x="48.7057%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (189,002 samples, 0.26%)</title><rect x="48.4581%" y="53" width="0.2568%" height="15" fill="rgb(240,54,50)"/><text x="48.7081%" y="63.50"></text></g><g><title>adt_sized_constraint (252,684 samples, 0.34%)</title><rect x="48.4152%" y="117" width="0.3433%" height="15" fill="rgb(233,84,52)"/><text x="48.6652%" y="127.50"></text></g><g><title>adt_sized_constraint (702,267 samples, 0.95%)</title><rect x="47.8637%" y="133" width="0.9541%" height="15" fill="rgb(207,117,47)"/><text x="48.1137%" y="143.50"></text></g><g><title>impl_trait_ref (102,713 samples, 0.14%)</title><rect x="48.9095%" y="133" width="0.1395%" height="15" fill="rgb(249,43,39)"/><text x="49.1595%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (84,383 samples, 0.11%)</title><rect x="48.9344%" y="117" width="0.1146%" height="15" fill="rgb(209,38,44)"/><text x="49.1844%" y="127.50"></text></g><g><title>predicates_of (141,304 samples, 0.19%)</title><rect x="49.0564%" y="133" width="0.1920%" height="15" fill="rgb(236,212,23)"/><text x="49.3064%" y="143.50"></text></g><g><title>predicates_defined_on (85,242 samples, 0.12%)</title><rect x="49.1325%" y="117" width="0.1158%" height="15" fill="rgb(242,79,21)"/><text x="49.3825%" y="127.50"></text></g><g><title>evaluate_obligation (2,478,004 samples, 3.37%)</title><rect x="46.4069%" y="149" width="3.3666%" height="15" fill="rgb(211,96,35)"/><text x="46.6569%" y="159.50">eva..</text></g><g><title>trait_impls_of (379,295 samples, 0.52%)</title><rect x="49.2582%" y="133" width="0.5153%" height="15" fill="rgb(253,215,40)"/><text x="49.5082%" y="143.50"></text></g><g><title>implementations_of_trait (143,802 samples, 0.20%)</title><rect x="49.5781%" y="117" width="0.1954%" height="15" fill="rgb(211,81,21)"/><text x="49.8281%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (91,781 samples, 0.12%)</title><rect x="49.6488%" y="101" width="0.1247%" height="15" fill="rgb(208,190,38)"/><text x="49.8988%" y="111.50"></text></g><g><title>fn_sig (200,683 samples, 0.27%)</title><rect x="49.8095%" y="149" width="0.2726%" height="15" fill="rgb(235,213,38)"/><text x="50.0595%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (180,893 samples, 0.25%)</title><rect x="49.8364%" y="133" width="0.2458%" height="15" fill="rgb(237,122,38)"/><text x="50.0864%" y="143.50"></text></g><g><title>generics_of (187,013 samples, 0.25%)</title><rect x="50.0821%" y="149" width="0.2541%" height="15" fill="rgb(244,218,35)"/><text x="50.3321%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (148,262 samples, 0.20%)</title><rect x="50.1348%" y="133" width="0.2014%" height="15" fill="rgb(240,68,47)"/><text x="50.3848%" y="143.50"></text></g><g><title>impl_item_implementor_ids (97,562 samples, 0.13%)</title><rect x="50.3362%" y="149" width="0.1325%" height="15" fill="rgb(210,16,53)"/><text x="50.5862%" y="159.50"></text></g><g><title>associated_items (85,841 samples, 0.12%)</title><rect x="50.3521%" y="133" width="0.1166%" height="15" fill="rgb(235,124,12)"/><text x="50.6021%" y="143.50"></text></g><g><title>impl_trait_ref (159,341 samples, 0.22%)</title><rect x="50.4855%" y="149" width="0.2165%" height="15" fill="rgb(224,169,11)"/><text x="50.7355%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (143,361 samples, 0.19%)</title><rect x="50.5072%" y="133" width="0.1948%" height="15" fill="rgb(250,166,2)"/><text x="50.7572%" y="143.50"></text></g><g><title>item_attrs (179,291 samples, 0.24%)</title><rect x="50.7727%" y="149" width="0.2436%" height="15" fill="rgb(242,216,29)"/><text x="51.0227%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (169,731 samples, 0.23%)</title><rect x="50.7856%" y="133" width="0.2306%" height="15" fill="rgb(230,116,27)"/><text x="51.0356%" y="143.50"></text></g><g><title>method_autoderef_steps (270,483 samples, 0.37%)</title><rect x="51.1323%" y="149" width="0.3675%" height="15" fill="rgb(228,99,48)"/><text x="51.3823%" y="159.50"></text></g><g><title>evaluate_obligation (155,702 samples, 0.21%)</title><rect x="51.2883%" y="133" width="0.2115%" height="15" fill="rgb(253,11,6)"/><text x="51.5383%" y="143.50"></text></g><g><title>explicit_predicates_of (314,544 samples, 0.43%)</title><rect x="51.9201%" y="117" width="0.4273%" height="15" fill="rgb(247,143,39)"/><text x="52.1701%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (274,504 samples, 0.37%)</title><rect x="51.9745%" y="101" width="0.3729%" height="15" fill="rgb(236,97,10)"/><text x="52.2245%" y="111.50"></text></g><g><title>predicates_of (644,460 samples, 0.88%)</title><rect x="51.5704%" y="149" width="0.8756%" height="15" fill="rgb(233,208,19)"/><text x="51.8204%" y="159.50"></text></g><g><title>predicates_defined_on (501,438 samples, 0.68%)</title><rect x="51.7647%" y="133" width="0.6813%" height="15" fill="rgb(216,164,2)"/><text x="52.0147%" y="143.50"></text></g><g><title>type_of (133,033 samples, 0.18%)</title><rect x="52.5071%" y="149" width="0.1807%" height="15" fill="rgb(220,129,5)"/><text x="52.7571%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (112,952 samples, 0.15%)</title><rect x="52.5344%" y="133" width="0.1535%" height="15" fill="rgb(242,17,10)"/><text x="52.7844%" y="143.50"></text></g><g><title>item_bodies_checking (21,269,635 samples, 28.90%)</title><rect x="23.9121%" y="197" width="28.8969%" height="15" fill="rgb(242,107,0)"/><text x="24.1621%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,266,545 samples, 28.89%)</title><rect x="23.9163%" y="181" width="28.8927%" height="15" fill="rgb(251,28,31)"/><text x="24.1663%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (21,226,184 samples, 28.84%)</title><rect x="23.9712%" y="165" width="28.8379%" height="15" fill="rgb(233,223,10)"/><text x="24.2212%" y="175.50">typeck</text></g><g><title>impl_parent (167,422 samples, 0.23%)</title><rect x="53.1842%" y="117" width="0.2275%" height="15" fill="rgb(215,21,27)"/><text x="53.4342%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (112,992 samples, 0.15%)</title><rect x="53.2581%" y="101" width="0.1535%" height="15" fill="rgb(232,23,21)"/><text x="53.5081%" y="111.50"></text></g><g><title>impl_trait_ref (606,067 samples, 0.82%)</title><rect x="53.4116%" y="117" width="0.8234%" height="15" fill="rgb(244,5,23)"/><text x="53.6616%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (558,407 samples, 0.76%)</title><rect x="53.4764%" y="101" width="0.7587%" height="15" fill="rgb(226,81,46)"/><text x="53.7264%" y="111.50"></text></g><g><title>adt_destructor (1,082,482 samples, 1.47%)</title><rect x="52.8595%" y="165" width="1.4707%" height="15" fill="rgb(247,70,30)"/><text x="53.1095%" y="175.50"></text></g><g><title>coherent_trait (1,067,272 samples, 1.45%)</title><rect x="52.8801%" y="149" width="1.4500%" height="15" fill="rgb(212,68,19)"/><text x="53.1301%" y="159.50"></text></g><g><title>specialization_graph_of (1,059,862 samples, 1.44%)</title><rect x="52.8902%" y="133" width="1.4399%" height="15" fill="rgb(240,187,13)"/><text x="53.1402%" y="143.50"></text></g><g><title>item_types_checking (1,122,862 samples, 1.53%)</title><rect x="52.8090%" y="197" width="1.5255%" height="15" fill="rgb(223,113,26)"/><text x="53.0590%" y="207.50"></text></g><g><title>check_mod_item_types (1,119,202 samples, 1.52%)</title><rect x="52.8140%" y="181" width="1.5205%" height="15" fill="rgb(206,192,2)"/><text x="53.0640%" y="191.50"></text></g><g><title>fn_sig (191,220 samples, 0.26%)</title><rect x="54.5959%" y="165" width="0.2598%" height="15" fill="rgb(241,108,4)"/><text x="54.8459%" y="175.50"></text></g><g><title>named_region_map (300,985 samples, 0.41%)</title><rect x="54.9562%" y="149" width="0.4089%" height="15" fill="rgb(247,173,49)"/><text x="55.2062%" y="159.50"></text></g><g><title>resolve_lifetimes (276,435 samples, 0.38%)</title><rect x="54.9896%" y="133" width="0.3756%" height="15" fill="rgb(224,114,35)"/><text x="55.2396%" y="143.50"></text></g><g><title>generics_of (387,435 samples, 0.53%)</title><rect x="54.8557%" y="165" width="0.5264%" height="15" fill="rgb(245,159,27)"/><text x="55.1057%" y="175.50"></text></g><g><title>explicit_predicates_of (167,781 samples, 0.23%)</title><rect x="55.4888%" y="133" width="0.2279%" height="15" fill="rgb(245,172,44)"/><text x="55.7388%" y="143.50"></text></g><g><title>predicates_of (361,713 samples, 0.49%)</title><rect x="55.3835%" y="165" width="0.4914%" height="15" fill="rgb(236,23,11)"/><text x="55.6335%" y="175.50"></text></g><g><title>predicates_defined_on (331,433 samples, 0.45%)</title><rect x="55.4246%" y="149" width="0.4503%" height="15" fill="rgb(205,117,38)"/><text x="55.6746%" y="159.50"></text></g><g><title>inferred_outlives_of (116,371 samples, 0.16%)</title><rect x="55.7168%" y="133" width="0.1581%" height="15" fill="rgb(237,72,25)"/><text x="55.9668%" y="143.50"></text></g><g><title>inferred_outlives_crate (97,811 samples, 0.13%)</title><rect x="55.7420%" y="117" width="0.1329%" height="15" fill="rgb(244,70,9)"/><text x="55.9920%" y="127.50"></text></g><g><title>type_collecting (1,233,723 samples, 1.68%)</title><rect x="54.3363%" y="197" width="1.6761%" height="15" fill="rgb(217,125,39)"/><text x="54.5863%" y="207.50"></text></g><g><title>collect_mod_item_types (1,208,203 samples, 1.64%)</title><rect x="54.3710%" y="181" width="1.6415%" height="15" fill="rgb(235,36,10)"/><text x="54.6210%" y="191.50"></text></g><g><title>type_of (101,231 samples, 0.14%)</title><rect x="55.8749%" y="165" width="0.1375%" height="15" fill="rgb(251,123,47)"/><text x="56.1249%" y="175.50"></text></g><g><title>adt_sized_constraint (79,241 samples, 0.11%)</title><rect x="58.2172%" y="101" width="0.1077%" height="15" fill="rgb(221,13,13)"/><text x="58.4672%" y="111.50"></text></g><g><title>adt_sized_constraint (175,852 samples, 0.24%)</title><rect x="58.1174%" y="117" width="0.2389%" height="15" fill="rgb(238,131,9)"/><text x="58.3674%" y="127.50"></text></g><g><title>adt_sized_constraint (291,682 samples, 0.40%)</title><rect x="58.0223%" y="133" width="0.3963%" height="15" fill="rgb(211,50,8)"/><text x="58.2723%" y="143.50"></text></g><g><title>adt_sized_constraint (327,033 samples, 0.44%)</title><rect x="57.9928%" y="149" width="0.4443%" height="15" fill="rgb(245,182,24)"/><text x="58.2428%" y="159.50"></text></g><g><title>evaluate_obligation (730,717 samples, 0.99%)</title><rect x="57.5795%" y="165" width="0.9928%" height="15" fill="rgb(242,14,37)"/><text x="57.8295%" y="175.50"></text></g><g><title>implied_outlives_bounds (191,733 samples, 0.26%)</title><rect x="58.5723%" y="165" width="0.2605%" height="15" fill="rgb(246,228,12)"/><text x="58.8223%" y="175.50"></text></g><g><title>param_env (170,112 samples, 0.23%)</title><rect x="58.8328%" y="165" width="0.2311%" height="15" fill="rgb(213,55,15)"/><text x="59.0828%" y="175.50"></text></g><g><title>predicates_of (122,872 samples, 0.17%)</title><rect x="59.0639%" y="165" width="0.1669%" height="15" fill="rgb(209,9,3)"/><text x="59.3139%" y="175.50"></text></g><g><title>predicates_defined_on (98,161 samples, 0.13%)</title><rect x="59.0974%" y="149" width="0.1334%" height="15" fill="rgb(230,59,30)"/><text x="59.3474%" y="159.50"></text></g><g><title>region_scope_tree (140,261 samples, 0.19%)</title><rect x="59.2308%" y="165" width="0.1906%" height="15" fill="rgb(209,121,21)"/><text x="59.4808%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,974,944 samples, 4.04%)</title><rect x="56.1758%" y="181" width="4.0418%" height="15" fill="rgb(220,109,13)"/><text x="56.4258%" y="191.50">chec..</text></g><g><title>trait_impls_of (586,066 samples, 0.80%)</title><rect x="59.4214%" y="165" width="0.7962%" height="15" fill="rgb(232,18,1)"/><text x="59.6714%" y="175.50"></text></g><g><title>implementations_of_trait (139,161 samples, 0.19%)</title><rect x="60.0285%" y="149" width="0.1891%" height="15" fill="rgb(215,41,42)"/><text x="60.2785%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (111,331 samples, 0.15%)</title><rect x="60.0663%" y="133" width="0.1513%" height="15" fill="rgb(224,123,36)"/><text x="60.3163%" y="143.50"></text></g><g><title>implied_outlives_bounds (182,812 samples, 0.25%)</title><rect x="61.3595%" y="165" width="0.2484%" height="15" fill="rgb(240,125,3)"/><text x="61.6095%" y="175.50"></text></g><g><title>param_env (317,415 samples, 0.43%)</title><rect x="61.6079%" y="165" width="0.4312%" height="15" fill="rgb(205,98,50)"/><text x="61.8579%" y="175.50"></text></g><g><title>region_scope_tree (107,002 samples, 0.15%)</title><rect x="62.0691%" y="165" width="0.1454%" height="15" fill="rgb(205,185,37)"/><text x="62.3191%" y="175.50"></text></g><g><title>analysis (45,060,238 samples, 61.22%)</title><rect x="1.1135%" y="229" width="61.2188%" height="15" fill="rgb(238,207,15)"/><text x="1.3635%" y="239.50">analysis</text></g><g><title>type_check_crate (28,384,984 samples, 38.56%)</title><rect x="23.7684%" y="213" width="38.5638%" height="15" fill="rgb(213,199,42)"/><text x="24.0184%" y="223.50">type_check_crate</text></g><g><title>wf_checking (4,650,182 samples, 6.32%)</title><rect x="56.0145%" y="197" width="6.3177%" height="15" fill="rgb(235,201,11)"/><text x="56.2645%" y="207.50">wf_check..</text></g><g><title>check_item_well_formed (1,556,498 samples, 2.11%)</title><rect x="60.2176%" y="181" width="2.1147%" height="15" fill="rgb(207,46,11)"/><text x="60.4676%" y="191.50">c..</text></g><g><title>codegen_crate (386,334 samples, 0.52%)</title><rect x="62.3469%" y="229" width="0.5249%" height="15" fill="rgb(241,35,35)"/><text x="62.5969%" y="239.50"></text></g><g><title>AST_validation (116,712 samples, 0.16%)</title><rect x="63.1624%" y="213" width="0.1586%" height="15" fill="rgb(243,32,47)"/><text x="63.4124%" y="223.50"></text></g><g><title>crate_injection (104,641 samples, 0.14%)</title><rect x="63.3908%" y="213" width="0.1422%" height="15" fill="rgb(247,202,23)"/><text x="63.6408%" y="223.50"></text></g><g><title>metadata_load_macro (286,943 samples, 0.39%)</title><rect x="83.0305%" y="181" width="0.3898%" height="15" fill="rgb(219,102,11)"/><text x="83.2805%" y="191.50"></text></g><g><title>metadata_register_crate (2,630,419 samples, 3.57%)</title><rect x="83.4204%" y="181" width="3.5737%" height="15" fill="rgb(243,110,44)"/><text x="83.6704%" y="191.50">meta..</text></g><g><title>metadata_register_crate (931,860 samples, 1.27%)</title><rect x="85.7280%" y="165" width="1.2660%" height="15" fill="rgb(222,74,54)"/><text x="85.9780%" y="175.50"></text></g><g><title>metadata_register_crate (76,531 samples, 0.10%)</title><rect x="86.8901%" y="149" width="0.1040%" height="15" fill="rgb(216,99,12)"/><text x="87.1401%" y="159.50"></text></g><g><title>macro_expand_crate (17,351,443 samples, 23.57%)</title><rect x="63.5329%" y="213" width="23.5737%" height="15" fill="rgb(226,22,26)"/><text x="63.7829%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (17,334,853 samples, 23.55%)</title><rect x="63.5555%" y="197" width="23.5511%" height="15" fill="rgb(217,163,10)"/><text x="63.8055%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (82,821 samples, 0.11%)</title><rect x="86.9941%" y="181" width="0.1125%" height="15" fill="rgb(213,25,53)"/><text x="87.2441%" y="191.50"></text></g><g><title>finalize_macro_resolutions (251,763 samples, 0.34%)</title><rect x="87.2880%" y="197" width="0.3420%" height="15" fill="rgb(252,105,26)"/><text x="87.5380%" y="207.50"></text></g><g><title>late_resolve_crate (1,614,617 samples, 2.19%)</title><rect x="87.6301%" y="197" width="2.1936%" height="15" fill="rgb(220,39,43)"/><text x="87.8801%" y="207.50">l..</text></g><g><title>configure_and_expand (19,927,052 samples, 27.07%)</title><rect x="62.8718%" y="229" width="27.0729%" height="15" fill="rgb(229,68,48)"/><text x="63.1218%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,031,692 samples, 2.76%)</title><rect x="87.1844%" y="213" width="2.7603%" height="15" fill="rgb(252,8,32)"/><text x="87.4344%" y="223.50">re..</text></g><g><title>drop_ast (109,671 samples, 0.15%)</title><rect x="89.9447%" y="229" width="0.1490%" height="15" fill="rgb(223,20,43)"/><text x="90.1947%" y="239.50"></text></g><g><title>early_lint_checks (302,164 samples, 0.41%)</title><rect x="90.1127%" y="229" width="0.4105%" height="15" fill="rgb(229,81,49)"/><text x="90.3627%" y="239.50"></text></g><g><title>free_global_ctxt (2,636,470 samples, 3.58%)</title><rect x="90.5232%" y="229" width="3.5819%" height="15" fill="rgb(236,28,36)"/><text x="90.7732%" y="239.50">free..</text></g><g><title>generate_crate_metadata (452,735 samples, 0.62%)</title><rect x="94.1051%" y="229" width="0.6151%" height="15" fill="rgb(249,185,26)"/><text x="94.3551%" y="239.50"></text></g><g><title>hir_lowering (2,148,483 samples, 2.92%)</title><rect x="94.7202%" y="229" width="2.9189%" height="15" fill="rgb(249,174,33)"/><text x="94.9702%" y="239.50">hi..</text></g><g><title>parse_crate (413,415 samples, 0.56%)</title><rect x="97.7055%" y="229" width="0.5617%" height="15" fill="rgb(233,201,37)"/><text x="97.9555%" y="239.50"></text></g><g><title>prepare_outputs (340,904 samples, 0.46%)</title><rect x="98.2805%" y="229" width="0.4632%" height="15" fill="rgb(221,78,26)"/><text x="98.5305%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (445,065 samples, 0.60%)</title><rect x="98.7437%" y="229" width="0.6047%" height="15" fill="rgb(250,127,30)"/><text x="98.9937%" y="239.50"></text></g><g><title>setup_global_ctxt (160,252 samples, 0.22%)</title><rect x="99.3617%" y="229" width="0.2177%" height="15" fill="rgb(230,49,44)"/><text x="99.6117%" y="239.50"></text></g><g><title>all (73,605,224 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (73,605,224 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (309,583 samples, 0.42%)</title><rect x="99.5794%" y="229" width="0.4206%" height="15" fill="rgb(215,43,3)"/><text x="99.8294%" y="239.50"></text></g></svg></svg>