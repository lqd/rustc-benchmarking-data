<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_promoted (1,447,056 samples, 0.45%)</title><rect x="9.9717%" y="165" width="0.4500%" height="15" fill="rgb(227,0,7)"/><text x="10.2217%" y="175.50"></text></g><g><title>mir_const_qualif_const_arg (1,212,704 samples, 0.38%)</title><rect x="10.0446%" y="149" width="0.3771%" height="15" fill="rgb(217,0,24)"/><text x="10.2946%" y="159.50"></text></g><g><title>mir_const (1,013,283 samples, 0.32%)</title><rect x="10.1066%" y="133" width="0.3151%" height="15" fill="rgb(221,193,54)"/><text x="10.3566%" y="143.50"></text></g><g><title>unsafety_check_result_for_const_arg (680,236 samples, 0.21%)</title><rect x="10.2102%" y="117" width="0.2115%" height="15" fill="rgb(248,212,6)"/><text x="10.4602%" y="127.50"></text></g><g><title>mir_built (583,694 samples, 0.18%)</title><rect x="10.2402%" y="101" width="0.1815%" height="15" fill="rgb(208,68,35)"/><text x="10.4902%" y="111.50"></text></g><g><title>mir_borrowck_const_arg (3,627,101 samples, 1.13%)</title><rect x="9.2972%" y="181" width="1.1280%" height="15" fill="rgb(232,128,0)"/><text x="9.5472%" y="191.50"></text></g><g><title>param_env (416,275 samples, 0.13%)</title><rect x="11.4327%" y="149" width="0.1295%" height="15" fill="rgb(207,160,47)"/><text x="11.6827%" y="159.50"></text></g><g><title>item_attrs (339,675 samples, 0.11%)</title><rect x="11.9024%" y="117" width="0.1056%" height="15" fill="rgb(228,23,34)"/><text x="12.1524%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (330,875 samples, 0.10%)</title><rect x="11.9051%" y="101" width="0.1029%" height="15" fill="rgb(218,30,26)"/><text x="12.1551%" y="111.50"></text></g><g><title>codegen_fn_attrs (546,638 samples, 0.17%)</title><rect x="11.8448%" y="133" width="0.1700%" height="15" fill="rgb(220,122,19)"/><text x="12.0948%" y="143.50"></text></g><g><title>needs_drop_raw (895,288 samples, 0.28%)</title><rect x="14.4062%" y="117" width="0.2784%" height="15" fill="rgb(250,228,42)"/><text x="14.6562%" y="127.50"></text></g><g><title>is_copy_raw (579,335 samples, 0.18%)</title><rect x="14.5044%" y="101" width="0.1802%" height="15" fill="rgb(240,193,28)"/><text x="14.7544%" y="111.50"></text></g><g><title>evaluate_obligation (505,364 samples, 0.16%)</title><rect x="14.5274%" y="85" width="0.1572%" height="15" fill="rgb(216,20,37)"/><text x="14.7774%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (391,295 samples, 0.12%)</title><rect x="14.7694%" y="101" width="0.1217%" height="15" fill="rgb(206,188,39)"/><text x="15.0194%" y="111.50"></text></g><g><title>specialization_graph_of (1,051,042 samples, 0.33%)</title><rect x="14.9095%" y="101" width="0.3269%" height="15" fill="rgb(217,207,13)"/><text x="15.1595%" y="111.50"></text></g><g><title>impl_trait_ref (464,366 samples, 0.14%)</title><rect x="15.0919%" y="85" width="0.1444%" height="15" fill="rgb(231,73,38)"/><text x="15.3419%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (398,835 samples, 0.12%)</title><rect x="15.1123%" y="69" width="0.1240%" height="15" fill="rgb(225,20,46)"/><text x="15.3623%" y="79.50"></text></g><g><title>resolve_instance (1,924,499 samples, 0.60%)</title><rect x="14.6846%" y="117" width="0.5985%" height="15" fill="rgb(210,31,41)"/><text x="14.9346%" y="127.50"></text></g><g><title>thir_body (3,094,195 samples, 0.96%)</title><rect x="15.2920%" y="117" width="0.9623%" height="15" fill="rgb(221,200,47)"/><text x="15.5420%" y="127.50"></text></g><g><title>mir_const (16,855,921 samples, 5.24%)</title><rect x="11.0174%" y="165" width="5.2420%" height="15" fill="rgb(226,26,5)"/><text x="11.2674%" y="175.50">mir_co..</text></g><g><title>unsafety_check_result (15,104,426 samples, 4.70%)</title><rect x="11.5621%" y="149" width="4.6973%" height="15" fill="rgb(249,33,26)"/><text x="11.8121%" y="159.50">unsaf..</text></g><g><title>mir_built (13,648,936 samples, 4.24%)</title><rect x="12.0148%" y="133" width="4.2447%" height="15" fill="rgb(235,183,28)"/><text x="12.2648%" y="143.50">mir_b..</text></g><g><title>thir_body (563,215 samples, 0.18%)</title><rect x="17.1257%" y="101" width="0.1752%" height="15" fill="rgb(221,5,38)"/><text x="17.3757%" y="111.50"></text></g><g><title>mir_const (2,572,769 samples, 0.80%)</title><rect x="16.5075%" y="149" width="0.8001%" height="15" fill="rgb(247,18,42)"/><text x="16.7575%" y="159.50"></text></g><g><title>unsafety_check_result (2,001,130 samples, 0.62%)</title><rect x="16.6853%" y="133" width="0.6223%" height="15" fill="rgb(241,131,45)"/><text x="16.9353%" y="143.50"></text></g><g><title>mir_built (1,788,508 samples, 0.56%)</title><rect x="16.7514%" y="117" width="0.5562%" height="15" fill="rgb(249,31,29)"/><text x="17.0014%" y="127.50"></text></g><g><title>mir_const_qualif (3,420,947 samples, 1.06%)</title><rect x="16.2595%" y="165" width="1.0639%" height="15" fill="rgb(225,111,53)"/><text x="16.5095%" y="175.50"></text></g><g><title>mir_promoted (22,181,510 samples, 6.90%)</title><rect x="10.4252%" y="181" width="6.8983%" height="15" fill="rgb(238,160,17)"/><text x="10.6752%" y="191.50">mir_promo..</text></g><g><title>type_op_normalize_fn_sig (1,079,362 samples, 0.34%)</title><rect x="17.4013%" y="181" width="0.3357%" height="15" fill="rgb(214,148,48)"/><text x="17.6513%" y="191.50"></text></g><g><title>normalize_projection_ty (694,348 samples, 0.22%)</title><rect x="17.5210%" y="165" width="0.2159%" height="15" fill="rgb(232,36,49)"/><text x="17.7710%" y="175.50"></text></g><g><title>type_op_normalize_predicate (416,735 samples, 0.13%)</title><rect x="17.7370%" y="181" width="0.1296%" height="15" fill="rgb(209,103,24)"/><text x="17.9870%" y="191.50"></text></g><g><title>normalize_projection_ty (403,025 samples, 0.13%)</title><rect x="17.7412%" y="165" width="0.1253%" height="15" fill="rgb(229,88,8)"/><text x="17.9912%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,761,366 samples, 0.86%)</title><rect x="17.9272%" y="181" width="0.8588%" height="15" fill="rgb(213,181,19)"/><text x="18.1772%" y="191.50"></text></g><g><title>MIR_borrow_checking (58,059,607 samples, 18.06%)</title><rect x="0.7310%" y="213" width="18.0560%" height="15" fill="rgb(254,191,54)"/><text x="0.9810%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (57,694,354 samples, 17.94%)</title><rect x="0.8446%" y="197" width="17.9424%" height="15" fill="rgb(241,83,37)"/><text x="1.0946%" y="207.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (632,176 samples, 0.20%)</title><rect x="19.4712%" y="181" width="0.1966%" height="15" fill="rgb(233,36,39)"/><text x="19.7212%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,191,954 samples, 0.68%)</title><rect x="18.9894%" y="197" width="0.6817%" height="15" fill="rgb(226,3,54)"/><text x="19.2394%" y="207.50"></text></g><g><title>MIR_effect_checking (2,861,612 samples, 0.89%)</title><rect x="18.7871%" y="213" width="0.8899%" height="15" fill="rgb(245,192,40)"/><text x="19.0371%" y="223.50"></text></g><g><title>hir_module_items (374,464 samples, 0.12%)</title><rect x="19.6770%" y="213" width="0.1165%" height="15" fill="rgb(238,167,29)"/><text x="19.9270%" y="223.50"></text></g><g><title>codegen_fn_attrs (600,897 samples, 0.19%)</title><rect x="19.9852%" y="181" width="0.1869%" height="15" fill="rgb(232,182,51)"/><text x="20.2352%" y="191.50"></text></g><g><title>check_mod_attrs (1,175,162 samples, 0.37%)</title><rect x="19.8066%" y="197" width="0.3655%" height="15" fill="rgb(231,60,39)"/><text x="20.0566%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (614,218 samples, 0.19%)</title><rect x="20.2995%" y="197" width="0.1910%" height="15" fill="rgb(208,69,12)"/><text x="20.5495%" y="207.50"></text></g><g><title>misc_checking_1 (2,328,506 samples, 0.72%)</title><rect x="19.7936%" y="213" width="0.7241%" height="15" fill="rgb(235,93,37)"/><text x="20.0436%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (1,377,146 samples, 0.43%)</title><rect x="20.5183%" y="197" width="0.4283%" height="15" fill="rgb(213,116,39)"/><text x="20.7683%" y="207.50"></text></g><g><title>check_mod_liveness (1,098,702 samples, 0.34%)</title><rect x="20.6049%" y="181" width="0.3417%" height="15" fill="rgb(222,207,29)"/><text x="20.8549%" y="191.50"></text></g><g><title>misc_checking_2 (2,607,369 samples, 0.81%)</title><rect x="20.5177%" y="213" width="0.8109%" height="15" fill="rgb(206,96,30)"/><text x="20.7677%" y="223.50"></text></g><g><title>match_checking (1,228,503 samples, 0.38%)</title><rect x="20.9465%" y="197" width="0.3821%" height="15" fill="rgb(218,138,4)"/><text x="21.1965%" y="207.50"></text></g><g><title>check_match (1,129,443 samples, 0.35%)</title><rect x="20.9773%" y="181" width="0.3512%" height="15" fill="rgb(250,191,14)"/><text x="21.2273%" y="191.50"></text></g><g><title>check_private_in_public (329,624 samples, 0.10%)</title><rect x="21.3320%" y="197" width="0.1025%" height="15" fill="rgb(239,60,40)"/><text x="21.5820%" y="207.50"></text></g><g><title>death_checking (763,068 samples, 0.24%)</title><rect x="21.4345%" y="197" width="0.2373%" height="15" fill="rgb(206,27,48)"/><text x="21.6845%" y="207.50"></text></g><g><title>mir_for_ctfe (425,405 samples, 0.13%)</title><rect x="22.4692%" y="117" width="0.1323%" height="15" fill="rgb(225,35,8)"/><text x="22.7192%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,329,327 samples, 0.41%)</title><rect x="22.2026%" y="165" width="0.4134%" height="15" fill="rgb(250,213,24)"/><text x="22.4526%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,320,436 samples, 0.41%)</title><rect x="22.2054%" y="149" width="0.4106%" height="15" fill="rgb(247,123,22)"/><text x="22.4554%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,304,816 samples, 0.41%)</title><rect x="22.2102%" y="133" width="0.4058%" height="15" fill="rgb(231,138,38)"/><text x="22.4602%" y="143.50"></text></g><g><title>param_env (580,564 samples, 0.18%)</title><rect x="22.6160%" y="165" width="0.1806%" height="15" fill="rgb(231,145,46)"/><text x="22.8660%" y="175.50"></text></g><g><title>crate_lints (4,819,563 samples, 1.50%)</title><rect x="21.6724%" y="181" width="1.4988%" height="15" fill="rgb(251,118,11)"/><text x="21.9224%" y="191.50"></text></g><g><title>type_of (1,196,782 samples, 0.37%)</title><rect x="22.7991%" y="165" width="0.3722%" height="15" fill="rgb(217,147,25)"/><text x="23.0491%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (958,899 samples, 0.30%)</title><rect x="22.8731%" y="149" width="0.2982%" height="15" fill="rgb(247,81,37)"/><text x="23.1231%" y="159.50"></text></g><g><title>lint_checking (6,410,381 samples, 1.99%)</title><rect x="21.6718%" y="197" width="1.9936%" height="15" fill="rgb(209,12,38)"/><text x="21.9218%" y="207.50">l..</text></g><g><title>module_lints (1,588,798 samples, 0.49%)</title><rect x="23.1713%" y="181" width="0.4941%" height="15" fill="rgb(227,1,9)"/><text x="23.4213%" y="191.50"></text></g><g><title>lint_mod (1,580,138 samples, 0.49%)</title><rect x="23.1740%" y="165" width="0.4914%" height="15" fill="rgb(248,47,43)"/><text x="23.4240%" y="175.50"></text></g><g><title>privacy_access_levels (416,264 samples, 0.13%)</title><rect x="23.6654%" y="197" width="0.1295%" height="15" fill="rgb(221,10,30)"/><text x="23.9154%" y="207.50"></text></g><g><title>privacy_checking_modules (1,696,289 samples, 0.53%)</title><rect x="23.7948%" y="197" width="0.5275%" height="15" fill="rgb(210,229,1)"/><text x="24.0448%" y="207.50"></text></g><g><title>check_mod_privacy (1,689,659 samples, 0.53%)</title><rect x="23.7969%" y="181" width="0.5255%" height="15" fill="rgb(222,148,37)"/><text x="24.0469%" y="191.50"></text></g><g><title>misc_checking_3 (9,649,977 samples, 3.00%)</title><rect x="21.3286%" y="213" width="3.0011%" height="15" fill="rgb(234,67,33)"/><text x="21.5786%" y="223.50">mis..</text></g><g><title>impl_parent (1,643,581 samples, 0.51%)</title><rect x="25.3462%" y="149" width="0.5111%" height="15" fill="rgb(247,98,35)"/><text x="25.5962%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,016,969 samples, 0.32%)</title><rect x="25.5411%" y="133" width="0.3163%" height="15" fill="rgb(247,138,52)"/><text x="25.7911%" y="143.50"></text></g><g><title>impl_trait_ref (4,755,713 samples, 1.48%)</title><rect x="25.8574%" y="149" width="1.4790%" height="15" fill="rgb(213,79,30)"/><text x="26.1074%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,139,268 samples, 1.29%)</title><rect x="26.0491%" y="133" width="1.2873%" height="15" fill="rgb(246,177,23)"/><text x="26.2991%" y="143.50"></text></g><g><title>coherent_trait (9,995,752 samples, 3.11%)</title><rect x="24.3960%" y="181" width="3.1086%" height="15" fill="rgb(230,62,27)"/><text x="24.6460%" y="191.50">coh..</text></g><g><title>specialization_graph_of (9,429,354 samples, 2.93%)</title><rect x="24.5721%" y="165" width="2.9324%" height="15" fill="rgb(216,154,8)"/><text x="24.8221%" y="175.50">sp..</text></g><g><title>trait_impls_of (539,055 samples, 0.17%)</title><rect x="27.3369%" y="149" width="0.1676%" height="15" fill="rgb(244,35,45)"/><text x="27.5869%" y="159.50"></text></g><g><title>coherence_checking (10,123,613 samples, 3.15%)</title><rect x="24.3904%" y="197" width="3.1484%" height="15" fill="rgb(251,115,12)"/><text x="24.6404%" y="207.50">coh..</text></g><g><title>mir_for_ctfe (447,356 samples, 0.14%)</title><rect x="44.7493%" y="117" width="0.1391%" height="15" fill="rgb(240,54,50)"/><text x="44.9993%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (407,914 samples, 0.13%)</title><rect x="44.7616%" y="101" width="0.1269%" height="15" fill="rgb(233,84,52)"/><text x="45.0116%" y="111.50"></text></g><g><title>eval_to_allocation_raw (799,059 samples, 0.25%)</title><rect x="44.6870%" y="133" width="0.2485%" height="15" fill="rgb(207,117,47)"/><text x="44.9370%" y="143.50"></text></g><g><title>eval_to_const_value_raw (875,069 samples, 0.27%)</title><rect x="44.6838%" y="149" width="0.2721%" height="15" fill="rgb(249,43,39)"/><text x="44.9338%" y="159.50"></text></g><g><title>generics_of (1,075,432 samples, 0.33%)</title><rect x="46.4165%" y="133" width="0.3345%" height="15" fill="rgb(209,38,44)"/><text x="46.6665%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (593,214 samples, 0.18%)</title><rect x="46.5665%" y="117" width="0.1845%" height="15" fill="rgb(236,212,23)"/><text x="46.8165%" y="127.50"></text></g><g><title>impl_polarity (396,676 samples, 0.12%)</title><rect x="46.7950%" y="133" width="0.1234%" height="15" fill="rgb(242,79,21)"/><text x="47.0450%" y="143.50"></text></g><g><title>impl_trait_ref (1,132,207 samples, 0.35%)</title><rect x="46.9183%" y="133" width="0.3521%" height="15" fill="rgb(211,96,35)"/><text x="47.1683%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (893,965 samples, 0.28%)</title><rect x="46.9924%" y="117" width="0.2780%" height="15" fill="rgb(253,215,40)"/><text x="47.2424%" y="127.50"></text></g><g><title>predicates_of (1,049,389 samples, 0.33%)</title><rect x="47.2946%" y="133" width="0.3264%" height="15" fill="rgb(211,81,21)"/><text x="47.5446%" y="143.50"></text></g><g><title>predicates_defined_on (590,336 samples, 0.18%)</title><rect x="47.4374%" y="117" width="0.1836%" height="15" fill="rgb(208,190,38)"/><text x="47.6874%" y="127.50"></text></g><g><title>specializes (2,837,000 samples, 0.88%)</title><rect x="47.6210%" y="133" width="0.8823%" height="15" fill="rgb(235,213,38)"/><text x="47.8710%" y="143.50"></text></g><g><title>param_env (1,619,116 samples, 0.50%)</title><rect x="47.9997%" y="117" width="0.5035%" height="15" fill="rgb(237,122,38)"/><text x="48.2497%" y="127.50"></text></g><g><title>def_span (729,049 samples, 0.23%)</title><rect x="48.2765%" y="101" width="0.2267%" height="15" fill="rgb(244,218,35)"/><text x="48.5265%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (642,719 samples, 0.20%)</title><rect x="48.3034%" y="85" width="0.1999%" height="15" fill="rgb(240,68,47)"/><text x="48.5534%" y="95.50"></text></g><g><title>trait_impls_of (592,394 samples, 0.18%)</title><rect x="48.5073%" y="133" width="0.1842%" height="15" fill="rgb(210,16,53)"/><text x="48.7573%" y="143.50"></text></g><g><title>evaluate_obligation (12,043,556 samples, 3.75%)</title><rect x="44.9559%" y="149" width="3.7454%" height="15" fill="rgb(235,124,12)"/><text x="45.2059%" y="159.50">eval..</text></g><g><title>mir_const_qualif_const_arg (409,408 samples, 0.13%)</title><rect x="58.6004%" y="69" width="0.1273%" height="15" fill="rgb(224,169,11)"/><text x="58.8504%" y="79.50"></text></g><g><title>mir_const (350,776 samples, 0.11%)</title><rect x="58.6186%" y="53" width="0.1091%" height="15" fill="rgb(250,166,2)"/><text x="58.8686%" y="63.50"></text></g><g><title>mir_borrowck_const_arg (810,696 samples, 0.25%)</title><rect x="58.8610%" y="37" width="0.2521%" height="15" fill="rgb(242,216,29)"/><text x="59.1110%" y="47.50"></text></g><g><title>mir_for_ctfe_of_const_arg (1,243,384 samples, 0.39%)</title><rect x="58.7277%" y="69" width="0.3867%" height="15" fill="rgb(230,116,27)"/><text x="58.9777%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,131,630 samples, 0.35%)</title><rect x="58.7625%" y="53" width="0.3519%" height="15" fill="rgb(228,99,48)"/><text x="59.0125%" y="63.50"></text></g><g><title>evaluate_obligation (1,142,652 samples, 0.36%)</title><rect x="59.4094%" y="53" width="0.3554%" height="15" fill="rgb(253,11,6)"/><text x="59.6594%" y="63.50"></text></g><g><title>eval_to_const_value_raw (4,238,518 samples, 1.32%)</title><rect x="58.5047%" y="117" width="1.3181%" height="15" fill="rgb(247,143,39)"/><text x="58.7547%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,224,668 samples, 1.31%)</title><rect x="58.5090%" y="101" width="1.3138%" height="15" fill="rgb(236,97,10)"/><text x="58.7590%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,196,188 samples, 1.30%)</title><rect x="58.5179%" y="85" width="1.3050%" height="15" fill="rgb(233,208,19)"/><text x="58.7679%" y="95.50"></text></g><g><title>typeck_const_arg (2,275,275 samples, 0.71%)</title><rect x="59.1152%" y="69" width="0.7076%" height="15" fill="rgb(216,164,2)"/><text x="59.3652%" y="79.50"></text></g><g><title>impl_trait_ref (964,619 samples, 0.30%)</title><rect x="60.1095%" y="101" width="0.3000%" height="15" fill="rgb(220,129,5)"/><text x="60.3595%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (915,519 samples, 0.28%)</title><rect x="60.1248%" y="85" width="0.2847%" height="15" fill="rgb(242,17,10)"/><text x="60.3748%" y="95.50"></text></g><g><title>evaluate_obligation (2,091,492 samples, 0.65%)</title><rect x="59.8228%" y="117" width="0.6504%" height="15" fill="rgb(242,107,0)"/><text x="60.0728%" y="127.50"></text></g><g><title>opt_const_param_of (37,214,104 samples, 11.57%)</title><rect x="49.0903%" y="149" width="11.5733%" height="15" fill="rgb(251,28,31)"/><text x="49.3403%" y="159.50">opt_const_param_of</text></g><g><title>typeck (37,097,182 samples, 11.54%)</title><rect x="49.1267%" y="133" width="11.5369%" height="15" fill="rgb(233,223,10)"/><text x="49.3767%" y="143.50">typeck</text></g><g><title>param_env (776,815 samples, 0.24%)</title><rect x="60.6742%" y="149" width="0.2416%" height="15" fill="rgb(215,21,27)"/><text x="60.9242%" y="159.50"></text></g><g><title>predicates_of (372,891 samples, 0.12%)</title><rect x="60.7999%" y="133" width="0.1160%" height="15" fill="rgb(232,23,21)"/><text x="61.0499%" y="143.50"></text></g><g><title>associated_items (385,416 samples, 0.12%)</title><rect x="62.4797%" y="133" width="0.1199%" height="15" fill="rgb(244,5,23)"/><text x="62.7297%" y="143.50"></text></g><g><title>impl_trait_ref (334,835 samples, 0.10%)</title><rect x="63.0021%" y="117" width="0.1041%" height="15" fill="rgb(226,81,46)"/><text x="63.2521%" y="127.50"></text></g><g><title>evaluate_obligation (1,939,882 samples, 0.60%)</title><rect x="62.6761%" y="133" width="0.6033%" height="15" fill="rgb(247,70,30)"/><text x="62.9261%" y="143.50"></text></g><g><title>typeck (7,613,975 samples, 2.37%)</title><rect x="61.1761%" y="149" width="2.3679%" height="15" fill="rgb(212,68,19)"/><text x="61.4261%" y="159.50">ty..</text></g><g><title>param_env (493,240 samples, 0.15%)</title><rect x="63.8379%" y="133" width="0.1534%" height="15" fill="rgb(240,187,13)"/><text x="64.0879%" y="143.50"></text></g><g><title>typeck_const_arg (1,553,507 samples, 0.48%)</title><rect x="63.5440%" y="149" width="0.4831%" height="15" fill="rgb(223,113,26)"/><text x="63.7940%" y="159.50"></text></g><g><title>item_bodies_checking (117,355,238 samples, 36.50%)</title><rect x="27.5486%" y="197" width="36.4965%" height="15" fill="rgb(206,192,2)"/><text x="27.7986%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (117,351,348 samples, 36.50%)</title><rect x="27.5498%" y="181" width="36.4953%" height="15" fill="rgb(241,108,4)"/><text x="27.7998%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (117,131,607 samples, 36.43%)</title><rect x="27.6182%" y="165" width="36.4269%" height="15" fill="rgb(247,173,49)"/><text x="27.8682%" y="175.50">typeck</text></g><g><title>evaluate_obligation (502,895 samples, 0.16%)</title><rect x="64.2770%" y="165" width="0.1564%" height="15" fill="rgb(224,114,35)"/><text x="64.5270%" y="175.50"></text></g><g><title>item_types_checking (14,527,032 samples, 4.52%)</title><rect x="64.0451%" y="197" width="4.5178%" height="15" fill="rgb(245,159,27)"/><text x="64.2951%" y="207.50">item_..</text></g><g><title>check_mod_item_types (14,518,092 samples, 4.52%)</title><rect x="64.0479%" y="181" width="4.5150%" height="15" fill="rgb(245,172,44)"/><text x="64.2979%" y="191.50">check..</text></g><g><title>typeck (12,900,655 samples, 4.01%)</title><rect x="64.5509%" y="165" width="4.0120%" height="15" fill="rgb(236,23,11)"/><text x="64.8009%" y="175.50">type..</text></g><g><title>fn_sig (437,436 samples, 0.14%)</title><rect x="68.6686%" y="165" width="0.1360%" height="15" fill="rgb(205,117,38)"/><text x="68.9186%" y="175.50"></text></g><g><title>named_region_map (708,349 samples, 0.22%)</title><rect x="68.8348%" y="149" width="0.2203%" height="15" fill="rgb(237,72,25)"/><text x="69.0848%" y="159.50"></text></g><g><title>resolve_lifetimes (689,689 samples, 0.21%)</title><rect x="68.8406%" y="133" width="0.2145%" height="15" fill="rgb(244,70,9)"/><text x="69.0906%" y="143.50"></text></g><g><title>lint_levels (402,055 samples, 0.13%)</title><rect x="68.9301%" y="117" width="0.1250%" height="15" fill="rgb(217,125,39)"/><text x="69.1801%" y="127.50"></text></g><g><title>generics_of (824,220 samples, 0.26%)</title><rect x="68.8047%" y="165" width="0.2563%" height="15" fill="rgb(235,36,10)"/><text x="69.0547%" y="175.50"></text></g><g><title>type_collecting (2,092,423 samples, 0.65%)</title><rect x="68.5645%" y="197" width="0.6507%" height="15" fill="rgb(251,123,47)"/><text x="68.8145%" y="207.50"></text></g><g><title>collect_mod_item_types (2,083,543 samples, 0.65%)</title><rect x="68.5673%" y="181" width="0.6480%" height="15" fill="rgb(221,13,13)"/><text x="68.8173%" y="191.50"></text></g><g><title>evaluate_obligation (760,876 samples, 0.24%)</title><rect x="69.6799%" y="165" width="0.2366%" height="15" fill="rgb(238,131,9)"/><text x="69.9299%" y="175.50"></text></g><g><title>implied_outlives_bounds (452,305 samples, 0.14%)</title><rect x="69.9216%" y="165" width="0.1407%" height="15" fill="rgb(211,50,8)"/><text x="70.1716%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,741,171 samples, 0.85%)</title><rect x="69.3063%" y="181" width="0.8525%" height="15" fill="rgb(245,182,24)"/><text x="69.5563%" y="191.50"></text></g><g><title>mir_borrowck (782,749 samples, 0.24%)</title><rect x="71.1496%" y="85" width="0.2434%" height="15" fill="rgb(242,14,37)"/><text x="71.3996%" y="95.50"></text></g><g><title>mir_for_ctfe (1,110,991 samples, 0.35%)</title><rect x="71.0483%" y="117" width="0.3455%" height="15" fill="rgb(246,228,12)"/><text x="71.2983%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,022,960 samples, 0.32%)</title><rect x="71.0757%" y="101" width="0.3181%" height="15" fill="rgb(213,55,15)"/><text x="71.3257%" y="111.50"></text></g><g><title>mir_for_ctfe (427,446 samples, 0.13%)</title><rect x="71.5035%" y="53" width="0.1329%" height="15" fill="rgb(209,9,3)"/><text x="71.7535%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (385,725 samples, 0.12%)</title><rect x="71.5164%" y="37" width="0.1200%" height="15" fill="rgb(230,59,30)"/><text x="71.7664%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,371,474 samples, 0.43%)</title><rect x="71.4005%" y="101" width="0.4265%" height="15" fill="rgb(209,121,21)"/><text x="71.6505%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,367,624 samples, 0.43%)</title><rect x="71.4017%" y="85" width="0.4253%" height="15" fill="rgb(220,109,13)"/><text x="71.6517%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,359,554 samples, 0.42%)</title><rect x="71.4042%" y="69" width="0.4228%" height="15" fill="rgb(232,18,1)"/><text x="71.6542%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,401,884 samples, 0.44%)</title><rect x="71.3942%" y="117" width="0.4360%" height="15" fill="rgb(215,41,42)"/><text x="71.6442%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,807,900 samples, 1.18%)</title><rect x="70.8552%" y="165" width="1.1842%" height="15" fill="rgb(224,123,36)"/><text x="71.1052%" y="175.50"></text></g><g><title>eval_to_const_value_raw (3,785,380 samples, 1.18%)</title><rect x="70.8622%" y="149" width="1.1772%" height="15" fill="rgb(240,125,3)"/><text x="71.1122%" y="159.50"></text></g><g><title>eval_to_allocation_raw (3,773,570 samples, 1.17%)</title><rect x="70.8659%" y="133" width="1.1735%" height="15" fill="rgb(205,98,50)"/><text x="71.1159%" y="143.50"></text></g><g><title>typeck (672,797 samples, 0.21%)</title><rect x="71.8302%" y="117" width="0.2092%" height="15" fill="rgb(205,185,37)"/><text x="72.0802%" y="127.50"></text></g><g><title>evaluate_obligation (1,152,998 samples, 0.36%)</title><rect x="72.0395%" y="165" width="0.3586%" height="15" fill="rgb(238,207,15)"/><text x="72.2895%" y="175.50"></text></g><g><title>region_scope_tree (934,300 samples, 0.29%)</title><rect x="72.6056%" y="165" width="0.2906%" height="15" fill="rgb(213,199,42)"/><text x="72.8556%" y="175.50"></text></g><g><title>analysis (232,914,316 samples, 72.43%)</title><rect x="0.5051%" y="229" width="72.4343%" height="15" fill="rgb(235,201,11)"/><text x="0.7551%" y="239.50">analysis</text></g><g><title>type_check_crate (156,305,812 samples, 48.61%)</title><rect x="24.3297%" y="213" width="48.6098%" height="15" fill="rgb(207,46,11)"/><text x="24.5797%" y="223.50">type_check_crate</text></g><g><title>wf_checking (11,947,733 samples, 3.72%)</title><rect x="69.2238%" y="197" width="3.7156%" height="15" fill="rgb(241,35,35)"/><text x="69.4738%" y="207.50">wf_c..</text></g><g><title>check_item_well_formed (8,941,250 samples, 2.78%)</title><rect x="70.1588%" y="181" width="2.7807%" height="15" fill="rgb(243,32,47)"/><text x="70.4088%" y="191.50">ch..</text></g><g><title>codegen_crate (565,567 samples, 0.18%)</title><rect x="72.9443%" y="229" width="0.1759%" height="15" fill="rgb(247,202,23)"/><text x="73.1943%" y="239.50"></text></g><g><title>AST_validation (328,993 samples, 0.10%)</title><rect x="73.2310%" y="213" width="0.1023%" height="15" fill="rgb(219,102,11)"/><text x="73.4810%" y="223.50"></text></g><g><title>metadata_register_crate (3,931,854 samples, 1.22%)</title><rect x="90.2329%" y="181" width="1.2228%" height="15" fill="rgb(243,110,44)"/><text x="90.4829%" y="191.50"></text></g><g><title>metadata_register_crate (2,447,575 samples, 0.76%)</title><rect x="90.6945%" y="165" width="0.7612%" height="15" fill="rgb(222,74,54)"/><text x="90.9445%" y="175.50"></text></g><g><title>metadata_register_crate (893,871 samples, 0.28%)</title><rect x="91.1777%" y="149" width="0.2780%" height="15" fill="rgb(216,99,12)"/><text x="91.4277%" y="159.50"></text></g><g><title>macro_expand_crate (58,627,983 samples, 18.23%)</title><rect x="73.4272%" y="213" width="18.2328%" height="15" fill="rgb(226,22,26)"/><text x="73.6772%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (58,602,353 samples, 18.22%)</title><rect x="73.4351%" y="197" width="18.2248%" height="15" fill="rgb(217,163,10)"/><text x="73.6851%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (656,847 samples, 0.20%)</title><rect x="91.4557%" y="181" width="0.2043%" height="15" fill="rgb(213,25,53)"/><text x="91.7057%" y="191.50"></text></g><g><title>finalize_imports (473,925 samples, 0.15%)</title><rect x="91.7130%" y="197" width="0.1474%" height="15" fill="rgb(252,105,26)"/><text x="91.9630%" y="207.50"></text></g><g><title>late_resolve_crate (3,739,812 samples, 1.16%)</title><rect x="91.9295%" y="197" width="1.1630%" height="15" fill="rgb(220,39,43)"/><text x="92.1795%" y="207.50"></text></g><g><title>configure_and_expand (64,502,329 samples, 20.06%)</title><rect x="73.1202%" y="229" width="20.0597%" height="15" fill="rgb(229,68,48)"/><text x="73.3702%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (4,722,482 samples, 1.47%)</title><rect x="91.7112%" y="213" width="1.4687%" height="15" fill="rgb(252,8,32)"/><text x="91.9612%" y="223.50"></text></g><g><title>drop_ast (499,286 samples, 0.16%)</title><rect x="93.1799%" y="229" width="0.1553%" height="15" fill="rgb(223,20,43)"/><text x="93.4299%" y="239.50"></text></g><g><title>early_lint_checks (1,095,462 samples, 0.34%)</title><rect x="93.3411%" y="229" width="0.3407%" height="15" fill="rgb(229,81,49)"/><text x="93.5911%" y="239.50"></text></g><g><title>free_global_ctxt (4,741,553 samples, 1.47%)</title><rect x="93.6818%" y="229" width="1.4746%" height="15" fill="rgb(236,28,36)"/><text x="93.9318%" y="239.50"></text></g><g><title>mir_for_ctfe (540,454 samples, 0.17%)</title><rect x="96.5272%" y="213" width="0.1681%" height="15" fill="rgb(249,185,26)"/><text x="96.7772%" y="223.50"></text></g><g><title>generate_crate_metadata (5,125,388 samples, 1.59%)</title><rect x="95.1563%" y="229" width="1.5940%" height="15" fill="rgb(249,174,33)"/><text x="95.4063%" y="239.50"></text></g><g><title>hir_lowering (7,086,878 samples, 2.20%)</title><rect x="96.7503%" y="229" width="2.2040%" height="15" fill="rgb(233,201,37)"/><text x="97.0003%" y="239.50">h..</text></g><g><title>parse_crate (986,451 samples, 0.31%)</title><rect x="98.9744%" y="229" width="0.3068%" height="15" fill="rgb(221,78,26)"/><text x="99.2244%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,296,884 samples, 0.40%)</title><rect x="99.3506%" y="229" width="0.4033%" height="15" fill="rgb(250,127,30)"/><text x="99.6006%" y="239.50"></text></g><g><title>all (321,552,343 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (321,552,343 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (697,027 samples, 0.22%)</title><rect x="99.7832%" y="229" width="0.2168%" height="15" fill="rgb(249,83,47)"/><text x="100.0332%" y="239.50"></text></g></svg></svg>