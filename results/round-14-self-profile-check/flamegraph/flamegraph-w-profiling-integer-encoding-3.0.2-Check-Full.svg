<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>item_attrs (154,902 samples, 0.11%)</title><rect x="11.4021%" y="85" width="0.1066%" height="15" fill="rgb(227,0,7)"/><text x="11.6521%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (149,582 samples, 0.10%)</title><rect x="11.4058%" y="69" width="0.1029%" height="15" fill="rgb(217,0,24)"/><text x="11.6558%" y="79.50"></text></g><g><title>codegen_fn_attrs (248,772 samples, 0.17%)</title><rect x="11.3508%" y="101" width="0.1711%" height="15" fill="rgb(221,193,54)"/><text x="11.6008%" y="111.50"></text></g><g><title>is_copy_raw (170,701 samples, 0.12%)</title><rect x="13.7897%" y="85" width="0.1174%" height="15" fill="rgb(248,212,6)"/><text x="14.0397%" y="95.50"></text></g><g><title>adt_drop_tys (156,052 samples, 0.11%)</title><rect x="13.9638%" y="69" width="0.1073%" height="15" fill="rgb(208,68,35)"/><text x="14.2138%" y="79.50"></text></g><g><title>needs_drop_raw (971,551 samples, 0.67%)</title><rect x="13.9092%" y="85" width="0.6683%" height="15" fill="rgb(232,128,0)"/><text x="14.1592%" y="95.50"></text></g><g><title>is_copy_raw (736,108 samples, 0.51%)</title><rect x="14.0711%" y="69" width="0.5064%" height="15" fill="rgb(207,160,47)"/><text x="14.3211%" y="79.50"></text></g><g><title>evaluate_obligation (640,875 samples, 0.44%)</title><rect x="14.1366%" y="53" width="0.4409%" height="15" fill="rgb(228,23,34)"/><text x="14.3866%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (376,784 samples, 0.26%)</title><rect x="14.7265%" y="69" width="0.2592%" height="15" fill="rgb(218,30,26)"/><text x="14.9765%" y="79.50"></text></g><g><title>impl_parent (213,813 samples, 0.15%)</title><rect x="15.2639%" y="53" width="0.1471%" height="15" fill="rgb(220,122,19)"/><text x="15.5139%" y="63.50"></text></g><g><title>specialization_graph_of (1,108,910 samples, 0.76%)</title><rect x="15.0337%" y="69" width="0.7628%" height="15" fill="rgb(250,228,42)"/><text x="15.2837%" y="79.50"></text></g><g><title>impl_trait_ref (560,455 samples, 0.39%)</title><rect x="15.4109%" y="53" width="0.3855%" height="15" fill="rgb(240,193,28)"/><text x="15.6609%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (475,734 samples, 0.33%)</title><rect x="15.4692%" y="37" width="0.3273%" height="15" fill="rgb(216,20,37)"/><text x="15.7192%" y="47.50"></text></g><g><title>resolve_instance (1,826,350 samples, 1.26%)</title><rect x="14.5775%" y="85" width="1.2563%" height="15" fill="rgb(206,188,39)"/><text x="14.8275%" y="95.50"></text></g><g><title>thir_body (1,264,270 samples, 0.87%)</title><rect x="15.8524%" y="85" width="0.8697%" height="15" fill="rgb(217,207,13)"/><text x="16.1024%" y="95.50"></text></g><g><title>mir_const (9,509,385 samples, 6.54%)</title><rect x="10.1934%" y="133" width="6.5415%" height="15" fill="rgb(231,73,38)"/><text x="10.4434%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,380,468 samples, 5.76%)</title><rect x="10.9700%" y="117" width="5.7649%" height="15" fill="rgb(225,20,46)"/><text x="11.2200%" y="127.50">unsafet..</text></g><g><title>mir_built (7,578,110 samples, 5.21%)</title><rect x="11.5220%" y="101" width="5.2130%" height="15" fill="rgb(210,31,41)"/><text x="11.7720%" y="111.50">mir_bu..</text></g><g><title>mir_const_qualif (543,715 samples, 0.37%)</title><rect x="16.7349%" y="133" width="0.3740%" height="15" fill="rgb(221,200,47)"/><text x="16.9849%" y="143.50"></text></g><g><title>mir_const (402,624 samples, 0.28%)</title><rect x="16.8320%" y="117" width="0.2770%" height="15" fill="rgb(226,26,5)"/><text x="17.0820%" y="127.50"></text></g><g><title>unsafety_check_result (277,722 samples, 0.19%)</title><rect x="16.9179%" y="101" width="0.1910%" height="15" fill="rgb(249,33,26)"/><text x="17.1679%" y="111.50"></text></g><g><title>mir_built (240,772 samples, 0.17%)</title><rect x="16.9433%" y="85" width="0.1656%" height="15" fill="rgb(235,183,28)"/><text x="17.1933%" y="95.50"></text></g><g><title>mir_promoted (11,053,696 samples, 7.60%)</title><rect x="9.5054%" y="149" width="7.6038%" height="15" fill="rgb(221,5,38)"/><text x="9.7554%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (457,505 samples, 0.31%)</title><rect x="17.1125%" y="149" width="0.3147%" height="15" fill="rgb(247,18,42)"/><text x="17.3625%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (536,228 samples, 0.37%)</title><rect x="17.4272%" y="149" width="0.3689%" height="15" fill="rgb(241,131,45)"/><text x="17.6772%" y="159.50"></text></g><g><title>normalize_projection_ty (378,997 samples, 0.26%)</title><rect x="17.5354%" y="133" width="0.2607%" height="15" fill="rgb(249,31,29)"/><text x="17.7854%" y="143.50"></text></g><g><title>type_op_normalize_predicate (171,173 samples, 0.12%)</title><rect x="17.7961%" y="149" width="0.1177%" height="15" fill="rgb(225,111,53)"/><text x="18.0461%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,244,043 samples, 0.86%)</title><rect x="17.9138%" y="149" width="0.8558%" height="15" fill="rgb(238,160,17)"/><text x="18.1638%" y="159.50"></text></g><g><title>MIR_borrow_checking (26,059,460 samples, 17.93%)</title><rect x="0.8499%" y="181" width="17.9262%" height="15" fill="rgb(214,148,48)"/><text x="1.0999%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,887,500 samples, 17.81%)</title><rect x="0.9682%" y="165" width="17.8079%" height="15" fill="rgb(232,36,49)"/><text x="1.2182%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (340,324 samples, 0.23%)</title><rect x="18.7762%" y="181" width="0.2341%" height="15" fill="rgb(209,103,24)"/><text x="19.0262%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (265,774 samples, 0.18%)</title><rect x="18.8274%" y="165" width="0.1828%" height="15" fill="rgb(229,88,8)"/><text x="19.0774%" y="175.50"></text></g><g><title>hir_module_items (299,505 samples, 0.21%)</title><rect x="19.0103%" y="181" width="0.2060%" height="15" fill="rgb(213,181,19)"/><text x="19.2603%" y="191.50"></text></g><g><title>should_inherit_track_caller (177,563 samples, 0.12%)</title><rect x="19.5474%" y="133" width="0.1221%" height="15" fill="rgb(254,191,54)"/><text x="19.7974%" y="143.50"></text></g><g><title>codegen_fn_attrs (381,206 samples, 0.26%)</title><rect x="19.4309%" y="149" width="0.2622%" height="15" fill="rgb(241,83,37)"/><text x="19.6809%" y="159.50"></text></g><g><title>check_mod_attrs (663,237 samples, 0.46%)</title><rect x="19.2369%" y="165" width="0.4562%" height="15" fill="rgb(233,36,39)"/><text x="19.4869%" y="175.50"></text></g><g><title>lookup_deprecation_entry (217,892 samples, 0.15%)</title><rect x="19.9549%" y="149" width="0.1499%" height="15" fill="rgb(226,3,54)"/><text x="20.2049%" y="159.50"></text></g><g><title>stability_index (163,482 samples, 0.11%)</title><rect x="19.9924%" y="133" width="0.1125%" height="15" fill="rgb(245,192,40)"/><text x="20.2424%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (428,286 samples, 0.29%)</title><rect x="19.8518%" y="165" width="0.2946%" height="15" fill="rgb(238,167,29)"/><text x="20.1018%" y="175.50"></text></g><g><title>misc_checking_1 (1,439,175 samples, 0.99%)</title><rect x="19.2166%" y="181" width="0.9900%" height="15" fill="rgb(232,182,51)"/><text x="19.4666%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (543,466 samples, 0.37%)</title><rect x="20.2076%" y="165" width="0.3738%" height="15" fill="rgb(231,60,39)"/><text x="20.4576%" y="175.50"></text></g><g><title>check_mod_liveness (423,475 samples, 0.29%)</title><rect x="20.2902%" y="149" width="0.2913%" height="15" fill="rgb(208,69,12)"/><text x="20.5402%" y="159.50"></text></g><g><title>misc_checking_2 (1,102,252 samples, 0.76%)</title><rect x="20.2066%" y="181" width="0.7582%" height="15" fill="rgb(235,93,37)"/><text x="20.4566%" y="191.50"></text></g><g><title>match_checking (557,326 samples, 0.38%)</title><rect x="20.5815%" y="165" width="0.3834%" height="15" fill="rgb(213,116,39)"/><text x="20.8315%" y="175.50"></text></g><g><title>check_match (517,716 samples, 0.36%)</title><rect x="20.6087%" y="149" width="0.3561%" height="15" fill="rgb(222,207,29)"/><text x="20.8587%" y="159.50"></text></g><g><title>check_private_in_public (176,822 samples, 0.12%)</title><rect x="20.9718%" y="165" width="0.1216%" height="15" fill="rgb(206,96,30)"/><text x="21.2218%" y="175.50"></text></g><g><title>death_checking (318,913 samples, 0.22%)</title><rect x="21.0934%" y="165" width="0.2194%" height="15" fill="rgb(218,138,4)"/><text x="21.3434%" y="175.50"></text></g><g><title>param_env (171,553 samples, 0.12%)</title><rect x="21.6279%" y="133" width="0.1180%" height="15" fill="rgb(250,191,14)"/><text x="21.8779%" y="143.50"></text></g><g><title>crate_lints (632,457 samples, 0.44%)</title><rect x="21.3137%" y="149" width="0.4351%" height="15" fill="rgb(239,60,40)"/><text x="21.5637%" y="159.50"></text></g><g><title>lint_checking (1,043,652 samples, 0.72%)</title><rect x="21.3128%" y="165" width="0.7179%" height="15" fill="rgb(206,27,48)"/><text x="21.5628%" y="175.50"></text></g><g><title>module_lints (409,865 samples, 0.28%)</title><rect x="21.7488%" y="149" width="0.2819%" height="15" fill="rgb(225,35,8)"/><text x="21.9988%" y="159.50"></text></g><g><title>lint_mod (404,495 samples, 0.28%)</title><rect x="21.7525%" y="133" width="0.2783%" height="15" fill="rgb(250,213,24)"/><text x="22.0025%" y="143.50"></text></g><g><title>privacy_access_levels (242,813 samples, 0.17%)</title><rect x="22.0307%" y="165" width="0.1670%" height="15" fill="rgb(247,123,22)"/><text x="22.2807%" y="175.50"></text></g><g><title>privacy_checking_modules (632,167 samples, 0.43%)</title><rect x="22.1978%" y="165" width="0.4349%" height="15" fill="rgb(231,138,38)"/><text x="22.4478%" y="175.50"></text></g><g><title>check_mod_privacy (627,487 samples, 0.43%)</title><rect x="22.2010%" y="149" width="0.4316%" height="15" fill="rgb(231,145,46)"/><text x="22.4510%" y="159.50"></text></g><g><title>misc_checking_3 (2,435,967 samples, 1.68%)</title><rect x="20.9649%" y="181" width="1.6757%" height="15" fill="rgb(251,118,11)"/><text x="21.2149%" y="191.50"></text></g><g><title>impl_parent (232,463 samples, 0.16%)</title><rect x="22.8685%" y="117" width="0.1599%" height="15" fill="rgb(217,147,25)"/><text x="23.1185%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (189,373 samples, 0.13%)</title><rect x="22.8981%" y="101" width="0.1303%" height="15" fill="rgb(247,81,37)"/><text x="23.1481%" y="111.50"></text></g><g><title>impl_trait_ref (600,268 samples, 0.41%)</title><rect x="23.0284%" y="117" width="0.4129%" height="15" fill="rgb(209,12,38)"/><text x="23.2784%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (554,587 samples, 0.38%)</title><rect x="23.0598%" y="101" width="0.3815%" height="15" fill="rgb(227,1,9)"/><text x="23.3098%" y="111.50"></text></g><g><title>coherent_trait (1,139,622 samples, 0.78%)</title><rect x="22.7006%" y="149" width="0.7839%" height="15" fill="rgb(248,47,43)"/><text x="22.9506%" y="159.50"></text></g><g><title>specialization_graph_of (1,130,622 samples, 0.78%)</title><rect x="22.7068%" y="133" width="0.7778%" height="15" fill="rgb(221,10,30)"/><text x="22.9568%" y="143.50"></text></g><g><title>coherence_checking (1,204,174 samples, 0.83%)</title><rect x="22.6894%" y="165" width="0.8283%" height="15" fill="rgb(210,229,1)"/><text x="22.9394%" y="175.50"></text></g><g><title>associated_item (947,648 samples, 0.65%)</title><rect x="42.0619%" y="101" width="0.6519%" height="15" fill="rgb(222,148,37)"/><text x="42.3119%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (753,266 samples, 0.52%)</title><rect x="42.1956%" y="85" width="0.5182%" height="15" fill="rgb(234,67,33)"/><text x="42.4456%" y="95.50"></text></g><g><title>associated_items (1,295,463 samples, 0.89%)</title><rect x="41.8508%" y="117" width="0.8911%" height="15" fill="rgb(247,98,35)"/><text x="42.1008%" y="127.50"></text></g><g><title>adt_dtorck_constraint (182,752 samples, 0.13%)</title><rect x="42.9629%" y="85" width="0.1257%" height="15" fill="rgb(247,138,52)"/><text x="43.2129%" y="95.50"></text></g><g><title>dropck_outlives (482,095 samples, 0.33%)</title><rect x="42.7735%" y="117" width="0.3316%" height="15" fill="rgb(213,79,30)"/><text x="43.0235%" y="127.50"></text></g><g><title>adt_dtorck_constraint (296,673 samples, 0.20%)</title><rect x="42.9010%" y="101" width="0.2041%" height="15" fill="rgb(246,177,23)"/><text x="43.1510%" y="111.50"></text></g><g><title>adt_def (169,762 samples, 0.12%)</title><rect x="46.5146%" y="85" width="0.1168%" height="15" fill="rgb(230,62,27)"/><text x="46.7646%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (167,022 samples, 0.11%)</title><rect x="46.5165%" y="69" width="0.1149%" height="15" fill="rgb(216,154,8)"/><text x="46.7665%" y="79.50"></text></g><g><title>adt_sized_constraint (183,092 samples, 0.13%)</title><rect x="46.5067%" y="101" width="0.1259%" height="15" fill="rgb(244,35,45)"/><text x="46.7567%" y="111.50"></text></g><g><title>mir_for_ctfe (911,389 samples, 0.63%)</title><rect x="47.2467%" y="53" width="0.6269%" height="15" fill="rgb(251,115,12)"/><text x="47.4967%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (902,399 samples, 0.62%)</title><rect x="47.2529%" y="37" width="0.6208%" height="15" fill="rgb(240,54,50)"/><text x="47.5029%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,833,581 samples, 1.26%)</title><rect x="46.6327%" y="101" width="1.2613%" height="15" fill="rgb(233,84,52)"/><text x="46.8827%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,790,120 samples, 1.23%)</title><rect x="46.6626%" y="85" width="1.2314%" height="15" fill="rgb(207,117,47)"/><text x="46.9126%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,744,880 samples, 1.20%)</title><rect x="46.6937%" y="69" width="1.2003%" height="15" fill="rgb(249,43,39)"/><text x="46.9437%" y="79.50"></text></g><g><title>generics_of (983,736 samples, 0.68%)</title><rect x="47.8940%" y="101" width="0.6767%" height="15" fill="rgb(209,38,44)"/><text x="48.1440%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (750,124 samples, 0.52%)</title><rect x="48.0547%" y="85" width="0.5160%" height="15" fill="rgb(236,212,23)"/><text x="48.3047%" y="95.50"></text></g><g><title>impl_trait_ref (1,459,287 samples, 1.00%)</title><rect x="48.6848%" y="101" width="1.0038%" height="15" fill="rgb(242,79,21)"/><text x="48.9348%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,024,635 samples, 0.70%)</title><rect x="48.9838%" y="85" width="0.7048%" height="15" fill="rgb(211,96,35)"/><text x="49.2338%" y="95.50"></text></g><g><title>predicates_of (679,467 samples, 0.47%)</title><rect x="49.7310%" y="101" width="0.4674%" height="15" fill="rgb(253,215,40)"/><text x="49.9810%" y="111.50"></text></g><g><title>predicates_defined_on (378,724 samples, 0.26%)</title><rect x="49.9379%" y="85" width="0.2605%" height="15" fill="rgb(211,81,21)"/><text x="50.1879%" y="95.50"></text></g><g><title>specializes (1,696,769 samples, 1.17%)</title><rect x="50.2486%" y="101" width="1.1672%" height="15" fill="rgb(208,190,38)"/><text x="50.4986%" y="111.50"></text></g><g><title>param_env (1,032,209 samples, 0.71%)</title><rect x="50.7058%" y="85" width="0.7101%" height="15" fill="rgb(235,213,38)"/><text x="50.9558%" y="95.50"></text></g><g><title>def_span (466,583 samples, 0.32%)</title><rect x="51.0949%" y="69" width="0.3210%" height="15" fill="rgb(237,122,38)"/><text x="51.3449%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (416,193 samples, 0.29%)</title><rect x="51.1295%" y="53" width="0.2863%" height="15" fill="rgb(244,218,35)"/><text x="51.3795%" y="63.50"></text></g><g><title>trait_impls_of (1,113,463 samples, 0.77%)</title><rect x="51.4322%" y="101" width="0.7659%" height="15" fill="rgb(240,68,47)"/><text x="51.6822%" y="111.50"></text></g><g><title>implementations_of_trait (423,589 samples, 0.29%)</title><rect x="51.9068%" y="85" width="0.2914%" height="15" fill="rgb(210,16,53)"/><text x="52.1568%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (317,067 samples, 0.22%)</title><rect x="51.9800%" y="69" width="0.2181%" height="15" fill="rgb(235,124,12)"/><text x="52.2300%" y="79.50"></text></g><g><title>evaluate_obligation (13,245,844 samples, 9.11%)</title><rect x="43.1051%" y="117" width="9.1118%" height="15" fill="rgb(224,169,11)"/><text x="43.3551%" y="127.50">evaluate_obli..</text></g><g><title>generics_of (1,666,607 samples, 1.15%)</title><rect x="52.3163%" y="117" width="1.1465%" height="15" fill="rgb(250,166,2)"/><text x="52.5663%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,285,883 samples, 0.88%)</title><rect x="52.5782%" y="101" width="0.8846%" height="15" fill="rgb(242,216,29)"/><text x="52.8282%" y="111.50"></text></g><g><title>impl_item_implementor_ids (198,122 samples, 0.14%)</title><rect x="53.4665%" y="117" width="0.1363%" height="15" fill="rgb(230,116,27)"/><text x="53.7165%" y="127.50"></text></g><g><title>associated_items (179,202 samples, 0.12%)</title><rect x="53.4795%" y="101" width="0.1233%" height="15" fill="rgb(228,99,48)"/><text x="53.7295%" y="111.50"></text></g><g><title>impl_trait_ref (2,891,485 samples, 1.99%)</title><rect x="53.6112%" y="117" width="1.9890%" height="15" fill="rgb(253,11,6)"/><text x="53.8612%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,540,000 samples, 1.75%)</title><rect x="53.8530%" y="101" width="1.7473%" height="15" fill="rgb(247,143,39)"/><text x="54.1030%" y="111.50"></text></g><g><title>item_attrs (156,791 samples, 0.11%)</title><rect x="55.6177%" y="117" width="0.1079%" height="15" fill="rgb(236,97,10)"/><text x="55.8677%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (151,991 samples, 0.10%)</title><rect x="55.6210%" y="101" width="0.1046%" height="15" fill="rgb(233,208,19)"/><text x="55.8710%" y="111.50"></text></g><g><title>lint_levels (237,443 samples, 0.16%)</title><rect x="55.7255%" y="117" width="0.1633%" height="15" fill="rgb(216,164,2)"/><text x="55.9755%" y="127.50"></text></g><g><title>method_autoderef_steps (299,384 samples, 0.21%)</title><rect x="55.9202%" y="117" width="0.2059%" height="15" fill="rgb(220,129,5)"/><text x="56.1702%" y="127.50"></text></g><g><title>param_env (177,672 samples, 0.12%)</title><rect x="56.1532%" y="117" width="0.1222%" height="15" fill="rgb(242,17,10)"/><text x="56.4032%" y="127.50"></text></g><g><title>predicates_of (445,654 samples, 0.31%)</title><rect x="56.2948%" y="117" width="0.3066%" height="15" fill="rgb(242,107,0)"/><text x="56.5448%" y="127.50"></text></g><g><title>predicates_defined_on (295,594 samples, 0.20%)</title><rect x="56.3980%" y="101" width="0.2033%" height="15" fill="rgb(251,28,31)"/><text x="56.6480%" y="111.50"></text></g><g><title>evaluate_obligation (340,725 samples, 0.23%)</title><rect x="57.8415%" y="101" width="0.2344%" height="15" fill="rgb(233,223,10)"/><text x="58.0915%" y="111.50"></text></g><g><title>typeck (2,040,803 samples, 1.40%)</title><rect x="56.7928%" y="117" width="1.4039%" height="15" fill="rgb(215,21,27)"/><text x="57.0428%" y="127.50"></text></g><g><title>item_bodies_checking (50,449,051 samples, 34.70%)</title><rect x="23.5388%" y="165" width="34.7038%" height="15" fill="rgb(232,23,21)"/><text x="23.7888%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,446,341 samples, 34.70%)</title><rect x="23.5406%" y="149" width="34.7019%" height="15" fill="rgb(244,5,23)"/><text x="23.7906%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (50,329,439 samples, 34.62%)</title><rect x="23.6211%" y="133" width="34.6215%" height="15" fill="rgb(226,81,46)"/><text x="23.8711%" y="143.50">typeck</text></g><g><title>impl_trait_ref (214,842 samples, 0.15%)</title><rect x="58.9031%" y="85" width="0.1478%" height="15" fill="rgb(247,70,30)"/><text x="59.1531%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (194,802 samples, 0.13%)</title><rect x="58.9169%" y="69" width="0.1340%" height="15" fill="rgb(212,68,19)"/><text x="59.1669%" y="79.50"></text></g><g><title>adt_destructor (385,014 samples, 0.26%)</title><rect x="58.8046%" y="133" width="0.2649%" height="15" fill="rgb(240,187,13)"/><text x="59.0546%" y="143.50"></text></g><g><title>coherent_trait (382,204 samples, 0.26%)</title><rect x="58.8065%" y="117" width="0.2629%" height="15" fill="rgb(223,113,26)"/><text x="59.0565%" y="127.50"></text></g><g><title>specialization_graph_of (379,984 samples, 0.26%)</title><rect x="58.8080%" y="101" width="0.2614%" height="15" fill="rgb(206,192,2)"/><text x="59.0580%" y="111.50"></text></g><g><title>item_types_checking (1,345,255 samples, 0.93%)</title><rect x="58.2425%" y="165" width="0.9254%" height="15" fill="rgb(241,108,4)"/><text x="58.4925%" y="175.50"></text></g><g><title>check_mod_item_types (1,340,385 samples, 0.92%)</title><rect x="58.2459%" y="149" width="0.9220%" height="15" fill="rgb(247,173,49)"/><text x="58.4959%" y="159.50"></text></g><g><title>late_bound_vars_map (347,088 samples, 0.24%)</title><rect x="59.5073%" y="117" width="0.2388%" height="15" fill="rgb(224,114,35)"/><text x="59.7573%" y="127.50"></text></g><g><title>resolve_lifetimes (317,058 samples, 0.22%)</title><rect x="59.5280%" y="101" width="0.2181%" height="15" fill="rgb(245,159,27)"/><text x="59.7780%" y="111.50"></text></g><g><title>fn_sig (605,111 samples, 0.42%)</title><rect x="59.3654%" y="133" width="0.4163%" height="15" fill="rgb(245,172,44)"/><text x="59.6154%" y="143.50"></text></g><g><title>generics_of (194,952 samples, 0.13%)</title><rect x="59.7817%" y="133" width="0.1341%" height="15" fill="rgb(236,23,11)"/><text x="60.0317%" y="143.50"></text></g><g><title>explicit_predicates_of (175,671 samples, 0.12%)</title><rect x="60.0169%" y="101" width="0.1208%" height="15" fill="rgb(205,117,38)"/><text x="60.2669%" y="111.50"></text></g><g><title>predicates_of (390,242 samples, 0.27%)</title><rect x="59.9284%" y="133" width="0.2684%" height="15" fill="rgb(237,72,25)"/><text x="60.1784%" y="143.50"></text></g><g><title>predicates_defined_on (342,012 samples, 0.24%)</title><rect x="59.9615%" y="117" width="0.2353%" height="15" fill="rgb(244,70,9)"/><text x="60.2115%" y="127.50"></text></g><g><title>type_collecting (1,692,959 samples, 1.16%)</title><rect x="59.1695%" y="165" width="1.1646%" height="15" fill="rgb(217,125,39)"/><text x="59.4195%" y="175.50"></text></g><g><title>collect_mod_item_types (1,679,459 samples, 1.16%)</title><rect x="59.1788%" y="149" width="1.1553%" height="15" fill="rgb(235,36,10)"/><text x="59.4288%" y="159.50"></text></g><g><title>evaluate_obligation (326,852 samples, 0.22%)</title><rect x="61.4933%" y="133" width="0.2248%" height="15" fill="rgb(251,123,47)"/><text x="61.7433%" y="143.50"></text></g><g><title>implied_outlives_bounds (149,922 samples, 0.10%)</title><rect x="61.7181%" y="133" width="0.1031%" height="15" fill="rgb(221,13,13)"/><text x="61.9681%" y="143.50"></text></g><g><title>param_env (291,820 samples, 0.20%)</title><rect x="61.8213%" y="133" width="0.2007%" height="15" fill="rgb(238,131,9)"/><text x="62.0713%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,646,058 samples, 1.82%)</title><rect x="60.4749%" y="149" width="1.8202%" height="15" fill="rgb(211,50,8)"/><text x="60.7249%" y="159.50">c..</text></g><g><title>region_scope_tree (397,051 samples, 0.27%)</title><rect x="62.0220%" y="133" width="0.2731%" height="15" fill="rgb(245,182,24)"/><text x="62.2720%" y="143.50"></text></g><g><title>evaluate_obligation (410,895 samples, 0.28%)</title><rect x="62.8908%" y="133" width="0.2827%" height="15" fill="rgb(242,14,37)"/><text x="63.1408%" y="143.50"></text></g><g><title>param_env (294,234 samples, 0.20%)</title><rect x="63.1982%" y="133" width="0.2024%" height="15" fill="rgb(246,228,12)"/><text x="63.4482%" y="143.50"></text></g><g><title>trait_impls_of (284,393 samples, 0.20%)</title><rect x="63.4437%" y="133" width="0.1956%" height="15" fill="rgb(213,55,15)"/><text x="63.6937%" y="143.50"></text></g><g><title>check_item_well_formed (1,997,204 samples, 1.37%)</title><rect x="62.2952%" y="149" width="1.3739%" height="15" fill="rgb(209,9,3)"/><text x="62.5452%" y="159.50"></text></g><g><title>evaluate_obligation (340,015 samples, 0.23%)</title><rect x="64.1194%" y="133" width="0.2339%" height="15" fill="rgb(230,59,30)"/><text x="64.3694%" y="143.50"></text></g><g><title>implied_outlives_bounds (167,342 samples, 0.12%)</title><rect x="64.3533%" y="133" width="0.1151%" height="15" fill="rgb(209,121,21)"/><text x="64.6033%" y="143.50"></text></g><g><title>analysis (93,176,776 samples, 64.10%)</title><rect x="0.5054%" y="197" width="64.0961%" height="15" fill="rgb(220,109,13)"/><text x="0.7554%" y="207.50">analysis</text></g><g><title>type_check_crate (60,998,688 samples, 41.96%)</title><rect x="22.6406%" y="181" width="41.9608%" height="15" fill="rgb(232,18,1)"/><text x="22.8906%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,195,849 samples, 4.26%)</title><rect x="60.3393%" y="165" width="4.2621%" height="15" fill="rgb(215,41,42)"/><text x="60.5893%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,355,415 samples, 0.93%)</title><rect x="63.6690%" y="149" width="0.9324%" height="15" fill="rgb(224,123,36)"/><text x="63.9190%" y="159.50"></text></g><g><title>codegen_crate (387,864 samples, 0.27%)</title><rect x="64.6084%" y="197" width="0.2668%" height="15" fill="rgb(240,125,3)"/><text x="64.8584%" y="207.50"></text></g><g><title>AST_validation (204,112 samples, 0.14%)</title><rect x="65.0281%" y="181" width="0.1404%" height="15" fill="rgb(205,98,50)"/><text x="65.2781%" y="191.50"></text></g><g><title>metadata_load_macro (186,261 samples, 0.13%)</title><rect x="84.3248%" y="149" width="0.1281%" height="15" fill="rgb(205,185,37)"/><text x="84.5748%" y="159.50"></text></g><g><title>metadata_register_crate (2,660,019 samples, 1.83%)</title><rect x="84.4529%" y="149" width="1.8298%" height="15" fill="rgb(238,207,15)"/><text x="84.7029%" y="159.50">m..</text></g><g><title>metadata_register_crate (944,820 samples, 0.65%)</title><rect x="85.6328%" y="133" width="0.6499%" height="15" fill="rgb(213,199,42)"/><text x="85.8828%" y="143.50"></text></g><g><title>macro_expand_crate (30,910,455 samples, 21.26%)</title><rect x="65.3390%" y="181" width="21.2632%" height="15" fill="rgb(235,201,11)"/><text x="65.5890%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (30,885,174 samples, 21.25%)</title><rect x="65.3564%" y="165" width="21.2458%" height="15" fill="rgb(207,46,11)"/><text x="65.6064%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (464,505 samples, 0.32%)</title><rect x="86.2827%" y="149" width="0.3195%" height="15" fill="rgb(241,35,35)"/><text x="86.5327%" y="159.50"></text></g><g><title>late_resolve_crate (3,939,923 samples, 2.71%)</title><rect x="86.8009%" y="165" width="2.7103%" height="15" fill="rgb(243,32,47)"/><text x="87.0509%" y="175.50">la..</text></g><g><title>configure_and_expand (36,037,431 samples, 24.79%)</title><rect x="64.8752%" y="197" width="24.7901%" height="15" fill="rgb(247,202,23)"/><text x="65.1252%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,389,169 samples, 3.02%)</title><rect x="86.6460%" y="181" width="3.0193%" height="15" fill="rgb(219,102,11)"/><text x="86.8960%" y="191.50">res..</text></g><g><title>drop_ast (265,703 samples, 0.18%)</title><rect x="89.6653%" y="197" width="0.1828%" height="15" fill="rgb(243,110,44)"/><text x="89.9153%" y="207.50"></text></g><g><title>early_lint_checks (576,366 samples, 0.40%)</title><rect x="89.8584%" y="197" width="0.3965%" height="15" fill="rgb(222,74,54)"/><text x="90.1084%" y="207.50"></text></g><g><title>free_global_ctxt (3,949,194 samples, 2.72%)</title><rect x="90.2549%" y="197" width="2.7166%" height="15" fill="rgb(216,99,12)"/><text x="90.5049%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,201,853 samples, 0.83%)</title><rect x="92.9715%" y="197" width="0.8268%" height="15" fill="rgb(226,22,26)"/><text x="93.2215%" y="207.50"></text></g><g><title>hir_lowering (6,721,286 samples, 4.62%)</title><rect x="93.7983%" y="197" width="4.6236%" height="15" fill="rgb(217,163,10)"/><text x="94.0483%" y="207.50">hir_l..</text></g><g><title>parse_crate (467,215 samples, 0.32%)</title><rect x="98.4685%" y="197" width="0.3214%" height="15" fill="rgb(213,25,53)"/><text x="98.7185%" y="207.50"></text></g><g><title>prepare_outputs (356,994 samples, 0.25%)</title><rect x="98.7962%" y="197" width="0.2456%" height="15" fill="rgb(252,105,26)"/><text x="99.0462%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (923,370 samples, 0.64%)</title><rect x="99.0418%" y="197" width="0.6352%" height="15" fill="rgb(220,39,43)"/><text x="99.2918%" y="207.50"></text></g><g><title>all (145,370,537 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (145,370,537 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (331,354 samples, 0.23%)</title><rect x="99.7721%" y="197" width="0.2279%" height="15" fill="rgb(223,20,43)"/><text x="100.0221%" y="207.50"></text></g></svg></svg>