<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_promoted (843,499 samples, 0.36%)</title><rect x="12.6938%" y="181" width="0.3612%" height="15" fill="rgb(227,0,7)"/><text x="12.9438%" y="191.50"></text></g><g><title>mir_const_qualif_const_arg (708,469 samples, 0.30%)</title><rect x="12.7516%" y="165" width="0.3034%" height="15" fill="rgb(217,0,24)"/><text x="13.0016%" y="175.50"></text></g><g><title>mir_const (592,435 samples, 0.25%)</title><rect x="12.8013%" y="149" width="0.2537%" height="15" fill="rgb(221,193,54)"/><text x="13.0513%" y="159.50"></text></g><g><title>unsafety_check_result_for_const_arg (395,053 samples, 0.17%)</title><rect x="12.8859%" y="133" width="0.1692%" height="15" fill="rgb(248,212,6)"/><text x="13.1359%" y="143.50"></text></g><g><title>mir_built (344,802 samples, 0.15%)</title><rect x="12.9074%" y="117" width="0.1477%" height="15" fill="rgb(208,68,35)"/><text x="13.1574%" y="127.50"></text></g><g><title>mir_borrowck_const_arg (2,073,003 samples, 0.89%)</title><rect x="12.1699%" y="197" width="0.8878%" height="15" fill="rgb(232,128,0)"/><text x="12.4199%" y="207.50"></text></g><g><title>param_env (470,233 samples, 0.20%)</title><rect x="14.3970%" y="165" width="0.2014%" height="15" fill="rgb(207,160,47)"/><text x="14.6470%" y="175.50"></text></g><g><title>codegen_fn_attrs (483,444 samples, 0.21%)</title><rect x="15.0390%" y="149" width="0.2070%" height="15" fill="rgb(228,23,34)"/><text x="15.2890%" y="159.50"></text></g><g><title>is_copy_raw (920,353 samples, 0.39%)</title><rect x="18.3042%" y="117" width="0.3942%" height="15" fill="rgb(218,30,26)"/><text x="18.5542%" y="127.50"></text></g><g><title>evaluate_obligation (816,580 samples, 0.35%)</title><rect x="18.3487%" y="101" width="0.3497%" height="15" fill="rgb(220,122,19)"/><text x="18.5987%" y="111.50"></text></g><g><title>needs_drop_raw (1,118,575 samples, 0.48%)</title><rect x="18.2209%" y="133" width="0.4791%" height="15" fill="rgb(250,228,42)"/><text x="18.4709%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (476,536 samples, 0.20%)</title><rect x="18.8509%" y="117" width="0.2041%" height="15" fill="rgb(240,193,28)"/><text x="19.1009%" y="127.50"></text></g><g><title>specialization_graph_of (468,906 samples, 0.20%)</title><rect x="19.1054%" y="117" width="0.2008%" height="15" fill="rgb(216,20,37)"/><text x="19.3554%" y="127.50"></text></g><g><title>resolve_instance (1,590,155 samples, 0.68%)</title><rect x="18.7000%" y="133" width="0.6810%" height="15" fill="rgb(206,188,39)"/><text x="18.9500%" y="143.50"></text></g><g><title>thir_body (3,446,158 samples, 1.48%)</title><rect x="19.3963%" y="133" width="1.4759%" height="15" fill="rgb(217,207,13)"/><text x="19.6463%" y="143.50"></text></g><g><title>mir_const (16,614,003 samples, 7.12%)</title><rect x="13.7657%" y="181" width="7.1153%" height="15" fill="rgb(231,73,38)"/><text x="14.0157%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (14,669,763 samples, 6.28%)</title><rect x="14.5984%" y="165" width="6.2827%" height="15" fill="rgb(225,20,46)"/><text x="14.8484%" y="175.50">unsafety..</text></g><g><title>mir_built (13,157,605 samples, 5.64%)</title><rect x="15.2460%" y="149" width="5.6351%" height="15" fill="rgb(210,31,41)"/><text x="15.4960%" y="159.50">mir_bui..</text></g><g><title>mir_const (389,278 samples, 0.17%)</title><rect x="21.0216%" y="165" width="0.1667%" height="15" fill="rgb(221,200,47)"/><text x="21.2716%" y="175.50"></text></g><g><title>unsafety_check_result (271,127 samples, 0.12%)</title><rect x="21.0722%" y="149" width="0.1161%" height="15" fill="rgb(226,26,5)"/><text x="21.3222%" y="159.50"></text></g><g><title>mir_promoted (19,003,493 samples, 8.14%)</title><rect x="13.0577%" y="197" width="8.1387%" height="15" fill="rgb(249,33,26)"/><text x="13.3077%" y="207.50">mir_promoted</text></g><g><title>mir_const_qualif (736,150 samples, 0.32%)</title><rect x="20.8811%" y="181" width="0.3153%" height="15" fill="rgb(235,183,28)"/><text x="21.1311%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (490,995 samples, 0.21%)</title><rect x="21.1982%" y="197" width="0.2103%" height="15" fill="rgb(221,5,38)"/><text x="21.4482%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (887,383 samples, 0.38%)</title><rect x="21.4085%" y="197" width="0.3800%" height="15" fill="rgb(247,18,42)"/><text x="21.6585%" y="207.50"></text></g><g><title>normalize_projection_ty (563,137 samples, 0.24%)</title><rect x="21.5474%" y="181" width="0.2412%" height="15" fill="rgb(241,131,45)"/><text x="21.7974%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,835,473 samples, 0.79%)</title><rect x="21.8288%" y="197" width="0.7861%" height="15" fill="rgb(249,31,29)"/><text x="22.0788%" y="207.50"></text></g><g><title>MIR_borrow_checking (51,311,164 samples, 21.98%)</title><rect x="0.6458%" y="229" width="21.9752%" height="15" fill="rgb(225,111,53)"/><text x="0.8958%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (51,045,598 samples, 21.86%)</title><rect x="0.7596%" y="213" width="21.8615%" height="15" fill="rgb(238,160,17)"/><text x="1.0096%" y="223.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (327,181 samples, 0.14%)</title><rect x="22.8389%" y="197" width="0.1401%" height="15" fill="rgb(214,148,48)"/><text x="23.0889%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (596,973 samples, 0.26%)</title><rect x="22.7246%" y="213" width="0.2557%" height="15" fill="rgb(232,36,49)"/><text x="22.9746%" y="223.50"></text></g><g><title>MIR_effect_checking (853,560 samples, 0.37%)</title><rect x="22.6211%" y="229" width="0.3656%" height="15" fill="rgb(209,103,24)"/><text x="22.8711%" y="239.50"></text></g><g><title>hir_module_items (309,043 samples, 0.13%)</title><rect x="22.9866%" y="229" width="0.1324%" height="15" fill="rgb(229,88,8)"/><text x="23.2366%" y="239.50"></text></g><g><title>fn_sig (362,803 samples, 0.16%)</title><rect x="23.4183%" y="181" width="0.1554%" height="15" fill="rgb(213,181,19)"/><text x="23.6683%" y="191.50"></text></g><g><title>codegen_fn_attrs (239,092 samples, 0.10%)</title><rect x="23.6299%" y="165" width="0.1024%" height="15" fill="rgb(254,191,54)"/><text x="23.8799%" y="175.50"></text></g><g><title>codegen_fn_attrs (847,180 samples, 0.36%)</title><rect x="23.3733%" y="197" width="0.3628%" height="15" fill="rgb(241,83,37)"/><text x="23.6233%" y="207.50"></text></g><g><title>should_inherit_track_caller (379,386 samples, 0.16%)</title><rect x="23.5737%" y="181" width="0.1625%" height="15" fill="rgb(233,36,39)"/><text x="23.8237%" y="191.50"></text></g><g><title>check_mod_attrs (1,413,967 samples, 0.61%)</title><rect x="23.1307%" y="213" width="0.6056%" height="15" fill="rgb(226,3,54)"/><text x="23.3807%" y="223.50"></text></g><g><title>param_env (420,685 samples, 0.18%)</title><rect x="24.1552%" y="197" width="0.1802%" height="15" fill="rgb(245,192,40)"/><text x="24.4052%" y="207.50"></text></g><g><title>predicates_of (287,493 samples, 0.12%)</title><rect x="24.2123%" y="181" width="0.1231%" height="15" fill="rgb(238,167,29)"/><text x="24.4623%" y="191.50"></text></g><g><title>predicates_defined_on (286,353 samples, 0.12%)</title><rect x="24.2127%" y="165" width="0.1226%" height="15" fill="rgb(232,182,51)"/><text x="24.4627%" y="175.50"></text></g><g><title>inferred_outlives_of (275,523 samples, 0.12%)</title><rect x="24.2174%" y="149" width="0.1180%" height="15" fill="rgb(231,60,39)"/><text x="24.4674%" y="159.50"></text></g><g><title>inferred_outlives_crate (271,253 samples, 0.12%)</title><rect x="24.2192%" y="133" width="0.1162%" height="15" fill="rgb(208,69,12)"/><text x="24.4692%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,045,921 samples, 0.45%)</title><rect x="23.9004%" y="213" width="0.4479%" height="15" fill="rgb(235,93,37)"/><text x="24.1504%" y="223.50"></text></g><g><title>misc_checking_1 (2,949,073 samples, 1.26%)</title><rect x="23.1193%" y="229" width="1.2630%" height="15" fill="rgb(213,116,39)"/><text x="23.3693%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,069,092 samples, 0.46%)</title><rect x="24.3830%" y="213" width="0.4579%" height="15" fill="rgb(222,207,29)"/><text x="24.6330%" y="223.50"></text></g><g><title>check_mod_liveness (828,530 samples, 0.35%)</title><rect x="24.4861%" y="197" width="0.3548%" height="15" fill="rgb(206,96,30)"/><text x="24.7361%" y="207.50"></text></g><g><title>misc_checking_2 (2,161,364 samples, 0.93%)</title><rect x="24.3824%" y="229" width="0.9257%" height="15" fill="rgb(218,138,4)"/><text x="24.6324%" y="239.50"></text></g><g><title>match_checking (1,090,702 samples, 0.47%)</title><rect x="24.8409%" y="213" width="0.4671%" height="15" fill="rgb(250,191,14)"/><text x="25.0909%" y="223.50"></text></g><g><title>check_match (1,024,200 samples, 0.44%)</title><rect x="24.8694%" y="197" width="0.4386%" height="15" fill="rgb(239,60,40)"/><text x="25.1194%" y="207.50"></text></g><g><title>check_private_in_public (381,565 samples, 0.16%)</title><rect x="25.3121%" y="213" width="0.1634%" height="15" fill="rgb(206,27,48)"/><text x="25.5621%" y="223.50"></text></g><g><title>death_checking (738,248 samples, 0.32%)</title><rect x="25.4755%" y="213" width="0.3162%" height="15" fill="rgb(225,35,8)"/><text x="25.7255%" y="223.50"></text></g><g><title>param_env (546,547 samples, 0.23%)</title><rect x="26.3834%" y="181" width="0.2341%" height="15" fill="rgb(250,213,24)"/><text x="26.6334%" y="191.50"></text></g><g><title>crate_lints (2,354,326 samples, 1.01%)</title><rect x="25.7925%" y="197" width="1.0083%" height="15" fill="rgb(247,123,22)"/><text x="26.0425%" y="207.50"></text></g><g><title>type_of (383,393 samples, 0.16%)</title><rect x="26.6366%" y="181" width="0.1642%" height="15" fill="rgb(231,138,38)"/><text x="26.8866%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (302,062 samples, 0.13%)</title><rect x="26.6714%" y="165" width="0.1294%" height="15" fill="rgb(231,145,46)"/><text x="26.9214%" y="175.50"></text></g><g><title>lint_checking (3,634,931 samples, 1.56%)</title><rect x="25.7917%" y="213" width="1.5567%" height="15" fill="rgb(251,118,11)"/><text x="26.0417%" y="223.50"></text></g><g><title>module_lints (1,278,835 samples, 0.55%)</title><rect x="26.8008%" y="197" width="0.5477%" height="15" fill="rgb(217,147,25)"/><text x="27.0508%" y="207.50"></text></g><g><title>lint_mod (1,271,885 samples, 0.54%)</title><rect x="26.8037%" y="181" width="0.5447%" height="15" fill="rgb(247,81,37)"/><text x="27.0537%" y="191.50"></text></g><g><title>privacy_access_levels (367,504 samples, 0.16%)</title><rect x="27.3484%" y="213" width="0.1574%" height="15" fill="rgb(209,12,38)"/><text x="27.5984%" y="223.50"></text></g><g><title>privacy_checking_modules (1,933,901 samples, 0.83%)</title><rect x="27.5058%" y="213" width="0.8282%" height="15" fill="rgb(227,1,9)"/><text x="27.7558%" y="223.50"></text></g><g><title>check_mod_privacy (1,928,561 samples, 0.83%)</title><rect x="27.5081%" y="197" width="0.8260%" height="15" fill="rgb(248,47,43)"/><text x="27.7581%" y="207.50"></text></g><g><title>misc_checking_3 (7,083,779 samples, 3.03%)</title><rect x="25.3080%" y="229" width="3.0338%" height="15" fill="rgb(221,10,30)"/><text x="25.5580%" y="239.50">mis..</text></g><g><title>impl_parent (891,528 samples, 0.38%)</title><rect x="29.2994%" y="165" width="0.3818%" height="15" fill="rgb(210,229,1)"/><text x="29.5494%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (510,467 samples, 0.22%)</title><rect x="29.4626%" y="149" width="0.2186%" height="15" fill="rgb(222,148,37)"/><text x="29.7126%" y="159.50"></text></g><g><title>impl_trait_ref (2,053,733 samples, 0.88%)</title><rect x="29.6812%" y="165" width="0.8796%" height="15" fill="rgb(234,67,33)"/><text x="29.9312%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,667,278 samples, 0.71%)</title><rect x="29.8467%" y="149" width="0.7141%" height="15" fill="rgb(247,98,35)"/><text x="30.0967%" y="159.50"></text></g><g><title>trait_impls_of (294,542 samples, 0.13%)</title><rect x="30.5727%" y="165" width="0.1261%" height="15" fill="rgb(247,138,52)"/><text x="30.8227%" y="175.50"></text></g><g><title>coherent_trait (5,336,600 samples, 2.29%)</title><rect x="28.4136%" y="197" width="2.2855%" height="15" fill="rgb(213,79,30)"/><text x="28.6636%" y="207.50">c..</text></g><g><title>specialization_graph_of (5,094,397 samples, 2.18%)</title><rect x="28.5173%" y="181" width="2.1818%" height="15" fill="rgb(246,177,23)"/><text x="28.7673%" y="191.50">s..</text></g><g><title>coherence_checking (5,496,561 samples, 2.35%)</title><rect x="28.4042%" y="213" width="2.3540%" height="15" fill="rgb(230,62,27)"/><text x="28.6542%" y="223.50">c..</text></g><g><title>associated_item (601,209 samples, 0.26%)</title><rect x="57.8697%" y="149" width="0.2575%" height="15" fill="rgb(216,154,8)"/><text x="58.1197%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (491,687 samples, 0.21%)</title><rect x="57.9166%" y="133" width="0.2106%" height="15" fill="rgb(244,35,45)"/><text x="58.1666%" y="143.50"></text></g><g><title>associated_items (839,644 samples, 0.36%)</title><rect x="57.7833%" y="165" width="0.3596%" height="15" fill="rgb(251,115,12)"/><text x="58.0333%" y="175.50"></text></g><g><title>dropck_outlives (427,956 samples, 0.18%)</title><rect x="58.1851%" y="165" width="0.1833%" height="15" fill="rgb(240,54,50)"/><text x="58.4351%" y="175.50"></text></g><g><title>eval_to_const_value_raw (319,614 samples, 0.14%)</title><rect x="58.3684%" y="165" width="0.1369%" height="15" fill="rgb(233,84,52)"/><text x="58.6184%" y="175.50"></text></g><g><title>eval_to_const_value_raw (306,733 samples, 0.13%)</title><rect x="58.3739%" y="149" width="0.1314%" height="15" fill="rgb(207,117,47)"/><text x="58.6239%" y="159.50"></text></g><g><title>eval_to_allocation_raw (297,393 samples, 0.13%)</title><rect x="58.3779%" y="133" width="0.1274%" height="15" fill="rgb(249,43,39)"/><text x="58.6279%" y="143.50"></text></g><g><title>mir_for_ctfe (821,700 samples, 0.35%)</title><rect x="60.2624%" y="101" width="0.3519%" height="15" fill="rgb(209,38,44)"/><text x="60.5124%" y="111.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (813,260 samples, 0.35%)</title><rect x="60.2660%" y="85" width="0.3483%" height="15" fill="rgb(236,212,23)"/><text x="60.5160%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,588,470 samples, 0.68%)</title><rect x="59.9463%" y="149" width="0.6803%" height="15" fill="rgb(242,79,21)"/><text x="60.1963%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,558,430 samples, 0.67%)</title><rect x="59.9591%" y="133" width="0.6674%" height="15" fill="rgb(211,96,35)"/><text x="60.2091%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,518,550 samples, 0.65%)</title><rect x="59.9762%" y="117" width="0.6504%" height="15" fill="rgb(253,215,40)"/><text x="60.2262%" y="127.50"></text></g><g><title>generics_of (357,574 samples, 0.15%)</title><rect x="60.6266%" y="149" width="0.1531%" height="15" fill="rgb(211,81,21)"/><text x="60.8766%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (275,543 samples, 0.12%)</title><rect x="60.6617%" y="133" width="0.1180%" height="15" fill="rgb(208,190,38)"/><text x="60.9117%" y="143.50"></text></g><g><title>predicates_of (575,506 samples, 0.25%)</title><rect x="60.9610%" y="149" width="0.2465%" height="15" fill="rgb(235,213,38)"/><text x="61.2110%" y="159.50"></text></g><g><title>predicates_defined_on (341,263 samples, 0.15%)</title><rect x="61.0613%" y="133" width="0.1462%" height="15" fill="rgb(237,122,38)"/><text x="61.3113%" y="143.50"></text></g><g><title>specializes (1,297,621 samples, 0.56%)</title><rect x="61.2385%" y="149" width="0.5557%" height="15" fill="rgb(244,218,35)"/><text x="61.4885%" y="159.50"></text></g><g><title>param_env (785,697 samples, 0.34%)</title><rect x="61.4577%" y="133" width="0.3365%" height="15" fill="rgb(240,68,47)"/><text x="61.7077%" y="143.50"></text></g><g><title>def_span (357,124 samples, 0.15%)</title><rect x="61.6413%" y="117" width="0.1529%" height="15" fill="rgb(210,16,53)"/><text x="61.8913%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (322,063 samples, 0.14%)</title><rect x="61.6563%" y="101" width="0.1379%" height="15" fill="rgb(235,124,12)"/><text x="61.9063%" y="111.50"></text></g><g><title>trait_impls_of (404,115 samples, 0.17%)</title><rect x="61.8014%" y="149" width="0.1731%" height="15" fill="rgb(224,169,11)"/><text x="62.0514%" y="159.50"></text></g><g><title>evaluate_obligation (8,114,418 samples, 3.48%)</title><rect x="58.5053%" y="165" width="3.4752%" height="15" fill="rgb(250,166,2)"/><text x="58.7553%" y="175.50">eva..</text></g><g><title>method_autoderef_steps (290,243 samples, 0.12%)</title><rect x="62.3856%" y="165" width="0.1243%" height="15" fill="rgb(242,216,29)"/><text x="62.6356%" y="175.50"></text></g><g><title>mir_const (868,763 samples, 0.37%)</title><rect x="66.7821%" y="69" width="0.3721%" height="15" fill="rgb(230,116,27)"/><text x="67.0321%" y="79.50"></text></g><g><title>unsafety_check_result_for_const_arg (583,157 samples, 0.25%)</title><rect x="66.9044%" y="53" width="0.2498%" height="15" fill="rgb(228,99,48)"/><text x="67.1544%" y="63.50"></text></g><g><title>mir_built (450,105 samples, 0.19%)</title><rect x="66.9614%" y="37" width="0.1928%" height="15" fill="rgb(253,11,6)"/><text x="67.2114%" y="47.50"></text></g><g><title>mir_const_qualif_const_arg (1,011,185 samples, 0.43%)</title><rect x="66.7212%" y="85" width="0.4331%" height="15" fill="rgb(247,143,39)"/><text x="66.9712%" y="95.50"></text></g><g><title>mir_for_ctfe (278,193 samples, 0.12%)</title><rect x="67.1543%" y="85" width="0.1191%" height="15" fill="rgb(236,97,10)"/><text x="67.4043%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (271,853 samples, 0.12%)</title><rect x="67.1570%" y="69" width="0.1164%" height="15" fill="rgb(233,208,19)"/><text x="67.4070%" y="79.50"></text></g><g><title>mir_borrowck_const_arg (1,660,206 samples, 0.71%)</title><rect x="67.6340%" y="53" width="0.7110%" height="15" fill="rgb(216,164,2)"/><text x="67.8840%" y="63.50"></text></g><g><title>mir_for_ctfe_of_const_arg (2,511,208 samples, 1.08%)</title><rect x="67.2734%" y="85" width="1.0755%" height="15" fill="rgb(220,129,5)"/><text x="67.5234%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,302,085 samples, 0.99%)</title><rect x="67.3630%" y="69" width="0.9859%" height="15" fill="rgb(242,17,10)"/><text x="67.6130%" y="79.50"></text></g><g><title>impl_trait_ref (269,573 samples, 0.12%)</title><rect x="69.1024%" y="53" width="0.1155%" height="15" fill="rgb(242,107,0)"/><text x="69.3524%" y="63.50"></text></g><g><title>evaluate_obligation (1,223,894 samples, 0.52%)</title><rect x="68.8097%" y="69" width="0.5242%" height="15" fill="rgb(251,28,31)"/><text x="69.0597%" y="79.50"></text></g><g><title>eval_to_const_value_raw (7,397,721 samples, 3.17%)</title><rect x="66.3135%" y="133" width="3.1682%" height="15" fill="rgb(233,223,10)"/><text x="66.5635%" y="143.50">eva..</text></g><g><title>eval_to_const_value_raw (7,374,751 samples, 3.16%)</title><rect x="66.3233%" y="117" width="3.1584%" height="15" fill="rgb(215,21,27)"/><text x="66.5733%" y="127.50">eva..</text></g><g><title>eval_to_allocation_raw (7,314,351 samples, 3.13%)</title><rect x="66.3492%" y="101" width="3.1325%" height="15" fill="rgb(232,23,21)"/><text x="66.5992%" y="111.50">eva..</text></g><g><title>typeck_const_arg (2,639,268 samples, 1.13%)</title><rect x="68.3514%" y="85" width="1.1303%" height="15" fill="rgb(244,5,23)"/><text x="68.6014%" y="95.50"></text></g><g><title>generics_of (446,527 samples, 0.19%)</title><rect x="70.2976%" y="117" width="0.1912%" height="15" fill="rgb(226,81,46)"/><text x="70.5476%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (318,606 samples, 0.14%)</title><rect x="70.3524%" y="101" width="0.1365%" height="15" fill="rgb(247,70,30)"/><text x="70.6024%" y="111.50"></text></g><g><title>impl_trait_ref (864,120 samples, 0.37%)</title><rect x="70.5319%" y="117" width="0.3701%" height="15" fill="rgb(212,68,19)"/><text x="70.7819%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (519,346 samples, 0.22%)</title><rect x="70.6795%" y="101" width="0.2224%" height="15" fill="rgb(240,187,13)"/><text x="70.9295%" y="111.50"></text></g><g><title>predicates_of (512,016 samples, 0.22%)</title><rect x="70.9130%" y="117" width="0.2193%" height="15" fill="rgb(223,113,26)"/><text x="71.1630%" y="127.50"></text></g><g><title>predicates_defined_on (281,763 samples, 0.12%)</title><rect x="71.0117%" y="101" width="0.1207%" height="15" fill="rgb(206,192,2)"/><text x="71.2617%" y="111.50"></text></g><g><title>specializes (1,736,320 samples, 0.74%)</title><rect x="71.1323%" y="117" width="0.7436%" height="15" fill="rgb(241,108,4)"/><text x="71.3823%" y="127.50"></text></g><g><title>param_env (947,343 samples, 0.41%)</title><rect x="71.4702%" y="101" width="0.4057%" height="15" fill="rgb(247,173,49)"/><text x="71.7202%" y="111.50"></text></g><g><title>def_span (450,466 samples, 0.19%)</title><rect x="71.6830%" y="85" width="0.1929%" height="15" fill="rgb(224,114,35)"/><text x="71.9330%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (398,974 samples, 0.17%)</title><rect x="71.7051%" y="69" width="0.1709%" height="15" fill="rgb(245,159,27)"/><text x="71.9551%" y="79.50"></text></g><g><title>evaluate_obligation (5,635,112 samples, 2.41%)</title><rect x="69.4818%" y="133" width="2.4134%" height="15" fill="rgb(245,172,44)"/><text x="69.7318%" y="143.50">ev..</text></g><g><title>typeck (950,440 samples, 0.41%)</title><rect x="72.3032%" y="133" width="0.4070%" height="15" fill="rgb(236,23,11)"/><text x="72.5532%" y="143.50"></text></g><g><title>opt_const_param_of (23,702,956 samples, 10.15%)</title><rect x="62.5621%" y="165" width="10.1514%" height="15" fill="rgb(205,117,38)"/><text x="62.8121%" y="175.50">opt_const_param..</text></g><g><title>typeck (23,604,864 samples, 10.11%)</title><rect x="62.6042%" y="149" width="10.1093%" height="15" fill="rgb(237,72,25)"/><text x="62.8542%" y="159.50">typeck</text></g><g><title>predicates_of (485,626 samples, 0.21%)</title><rect x="72.8094%" y="165" width="0.2080%" height="15" fill="rgb(244,70,9)"/><text x="73.0594%" y="175.50"></text></g><g><title>predicates_defined_on (318,545 samples, 0.14%)</title><rect x="72.8809%" y="149" width="0.1364%" height="15" fill="rgb(217,125,39)"/><text x="73.1309%" y="159.50"></text></g><g><title>evaluate_obligation (447,676 samples, 0.19%)</title><rect x="74.4429%" y="149" width="0.1917%" height="15" fill="rgb(235,36,10)"/><text x="74.6929%" y="159.50"></text></g><g><title>predicates_of (373,794 samples, 0.16%)</title><rect x="74.7324%" y="149" width="0.1601%" height="15" fill="rgb(251,123,47)"/><text x="74.9824%" y="159.50"></text></g><g><title>predicates_defined_on (325,464 samples, 0.14%)</title><rect x="74.7531%" y="133" width="0.1394%" height="15" fill="rgb(221,13,13)"/><text x="75.0031%" y="143.50"></text></g><g><title>typeck (4,053,996 samples, 1.74%)</title><rect x="73.1662%" y="165" width="1.7362%" height="15" fill="rgb(238,131,9)"/><text x="73.4162%" y="175.50"></text></g><g><title>param_env (300,063 samples, 0.13%)</title><rect x="75.1204%" y="149" width="0.1285%" height="15" fill="rgb(211,50,8)"/><text x="75.3704%" y="159.50"></text></g><g><title>typeck_const_arg (875,098 samples, 0.37%)</title><rect x="74.9025%" y="165" width="0.3748%" height="15" fill="rgb(245,182,24)"/><text x="75.1525%" y="175.50"></text></g><g><title>item_bodies_checking (103,994,594 samples, 44.54%)</title><rect x="30.7768%" y="213" width="44.5381%" height="15" fill="rgb(242,14,37)"/><text x="31.0268%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (103,991,704 samples, 44.54%)</title><rect x="30.7781%" y="197" width="44.5369%" height="15" fill="rgb(246,228,12)"/><text x="31.0281%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (103,836,884 samples, 44.47%)</title><rect x="30.8444%" y="181" width="44.4706%" height="15" fill="rgb(213,55,15)"/><text x="31.0944%" y="191.50">typeck</text></g><g><title>evaluate_obligation (391,976 samples, 0.17%)</title><rect x="75.8523%" y="181" width="0.1679%" height="15" fill="rgb(209,9,3)"/><text x="76.1023%" y="191.50"></text></g><g><title>associated_items (253,402 samples, 0.11%)</title><rect x="76.2380%" y="165" width="0.1085%" height="15" fill="rgb(230,59,30)"/><text x="76.4880%" y="175.50"></text></g><g><title>item_types_checking (2,536,178 samples, 1.09%)</title><rect x="75.3150%" y="213" width="1.0862%" height="15" fill="rgb(209,121,21)"/><text x="75.5650%" y="223.50"></text></g><g><title>check_mod_item_types (2,529,188 samples, 1.08%)</title><rect x="75.3179%" y="197" width="1.0832%" height="15" fill="rgb(220,109,13)"/><text x="75.5679%" y="207.50"></text></g><g><title>typeck (625,557 samples, 0.27%)</title><rect x="76.1332%" y="181" width="0.2679%" height="15" fill="rgb(232,18,1)"/><text x="76.3832%" y="191.50"></text></g><g><title>fn_sig (317,645 samples, 0.14%)</title><rect x="76.5708%" y="181" width="0.1360%" height="15" fill="rgb(215,41,42)"/><text x="76.8208%" y="191.50"></text></g><g><title>named_region_map (768,868 samples, 0.33%)</title><rect x="76.7686%" y="165" width="0.3293%" height="15" fill="rgb(224,123,36)"/><text x="77.0186%" y="175.50"></text></g><g><title>resolve_lifetimes (745,918 samples, 0.32%)</title><rect x="76.7784%" y="149" width="0.3195%" height="15" fill="rgb(240,125,3)"/><text x="77.0284%" y="159.50"></text></g><g><title>lint_levels (415,174 samples, 0.18%)</title><rect x="76.9200%" y="133" width="0.1778%" height="15" fill="rgb(205,98,50)"/><text x="77.1700%" y="143.50"></text></g><g><title>generics_of (926,309 samples, 0.40%)</title><rect x="76.7068%" y="181" width="0.3967%" height="15" fill="rgb(205,185,37)"/><text x="76.9568%" y="191.50"></text></g><g><title>predicates_of (322,657 samples, 0.14%)</title><rect x="77.1320%" y="181" width="0.1382%" height="15" fill="rgb(238,207,15)"/><text x="77.3820%" y="191.50"></text></g><g><title>predicates_defined_on (249,734 samples, 0.11%)</title><rect x="77.1632%" y="165" width="0.1070%" height="15" fill="rgb(213,199,42)"/><text x="77.4132%" y="175.50"></text></g><g><title>type_collecting (2,114,094 samples, 0.91%)</title><rect x="76.4027%" y="213" width="0.9054%" height="15" fill="rgb(235,201,11)"/><text x="76.6527%" y="223.50"></text></g><g><title>collect_mod_item_types (2,108,204 samples, 0.90%)</title><rect x="76.4052%" y="197" width="0.9029%" height="15" fill="rgb(207,46,11)"/><text x="76.6552%" y="207.50"></text></g><g><title>evaluate_obligation (552,698 samples, 0.24%)</title><rect x="78.2431%" y="181" width="0.2367%" height="15" fill="rgb(241,35,35)"/><text x="78.4931%" y="191.50"></text></g><g><title>param_env (271,201 samples, 0.12%)</title><rect x="78.5519%" y="181" width="0.1161%" height="15" fill="rgb(243,32,47)"/><text x="78.8019%" y="191.50"></text></g><g><title>check_impl_item_well_formed (3,707,407 samples, 1.59%)</title><rect x="77.4359%" y="197" width="1.5878%" height="15" fill="rgb(247,202,23)"/><text x="77.6859%" y="207.50"></text></g><g><title>region_scope_tree (820,300 samples, 0.35%)</title><rect x="78.6724%" y="181" width="0.3513%" height="15" fill="rgb(219,102,11)"/><text x="78.9224%" y="191.50"></text></g><g><title>adt_sized_constraint (234,313 samples, 0.10%)</title><rect x="79.8871%" y="165" width="0.1004%" height="15" fill="rgb(243,110,44)"/><text x="80.1371%" y="175.50"></text></g><g><title>evaluate_obligation (846,375 samples, 0.36%)</title><rect x="79.6470%" y="181" width="0.3625%" height="15" fill="rgb(222,74,54)"/><text x="79.8970%" y="191.50"></text></g><g><title>param_env (296,224 samples, 0.13%)</title><rect x="80.0726%" y="181" width="0.1269%" height="15" fill="rgb(216,99,12)"/><text x="80.3226%" y="191.50"></text></g><g><title>analysis (186,654,049 samples, 79.94%)</title><rect x="0.3768%" y="245" width="79.9390%" height="15" fill="rgb(226,22,26)"/><text x="0.6268%" y="255.50">analysis</text></g><g><title>type_check_crate (121,356,909 samples, 51.97%)</title><rect x="28.3418%" y="229" width="51.9740%" height="15" fill="rgb(217,163,10)"/><text x="28.5918%" y="239.50">type_check_crate</text></g><g><title>wf_checking (7,006,399 samples, 3.00%)</title><rect x="77.3151%" y="213" width="3.0007%" height="15" fill="rgb(213,25,53)"/><text x="77.5651%" y="223.50">wf_..</text></g><g><title>check_item_well_formed (3,016,980 samples, 1.29%)</title><rect x="79.0237%" y="197" width="1.2921%" height="15" fill="rgb(252,105,26)"/><text x="79.2737%" y="207.50"></text></g><g><title>codegen_crate (329,853 samples, 0.14%)</title><rect x="80.3186%" y="245" width="0.1413%" height="15" fill="rgb(220,39,43)"/><text x="80.5686%" y="255.50"></text></g><g><title>AST_validation (255,353 samples, 0.11%)</title><rect x="80.5186%" y="229" width="0.1094%" height="15" fill="rgb(229,68,48)"/><text x="80.7686%" y="239.50"></text></g><g><title>metadata_load_macro (271,174 samples, 0.12%)</title><rect x="90.5158%" y="197" width="0.1161%" height="15" fill="rgb(252,8,32)"/><text x="90.7658%" y="207.50"></text></g><g><title>metadata_register_crate (255,703 samples, 0.11%)</title><rect x="90.6319%" y="197" width="0.1095%" height="15" fill="rgb(223,20,43)"/><text x="90.8819%" y="207.50"></text></g><g><title>macro_expand_crate (23,797,885 samples, 10.19%)</title><rect x="80.7147%" y="229" width="10.1920%" height="15" fill="rgb(229,81,49)"/><text x="80.9647%" y="239.50">macro_expand_cr..</text></g><g><title>expand_crate (23,781,745 samples, 10.19%)</title><rect x="80.7216%" y="213" width="10.1851%" height="15" fill="rgb(236,28,36)"/><text x="80.9716%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (385,874 samples, 0.17%)</title><rect x="90.7414%" y="197" width="0.1653%" height="15" fill="rgb(249,185,26)"/><text x="90.9914%" y="207.50"></text></g><g><title>finalize_imports (242,903 samples, 0.10%)</title><rect x="90.9455%" y="213" width="0.1040%" height="15" fill="rgb(249,174,33)"/><text x="91.1955%" y="223.50"></text></g><g><title>late_resolve_crate (3,803,853 samples, 1.63%)</title><rect x="91.1262%" y="213" width="1.6291%" height="15" fill="rgb(233,201,37)"/><text x="91.3762%" y="223.50"></text></g><g><title>configure_and_expand (28,938,743 samples, 12.39%)</title><rect x="80.4599%" y="245" width="12.3937%" height="15" fill="rgb(221,78,26)"/><text x="80.7099%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (4,459,810 samples, 1.91%)</title><rect x="90.9436%" y="229" width="1.9100%" height="15" fill="rgb(250,127,30)"/><text x="91.1936%" y="239.50">r..</text></g><g><title>drop_ast (437,425 samples, 0.19%)</title><rect x="92.8536%" y="245" width="0.1873%" height="15" fill="rgb(230,49,44)"/><text x="93.1036%" y="255.50"></text></g><g><title>early_lint_checks (906,410 samples, 0.39%)</title><rect x="93.0484%" y="245" width="0.3882%" height="15" fill="rgb(229,67,23)"/><text x="93.2984%" y="255.50"></text></g><g><title>free_global_ctxt (3,272,906 samples, 1.40%)</title><rect x="93.4366%" y="245" width="1.4017%" height="15" fill="rgb(249,83,47)"/><text x="93.6866%" y="255.50"></text></g><g><title>generate_crate_metadata (2,751,020 samples, 1.18%)</title><rect x="94.8383%" y="245" width="1.1782%" height="15" fill="rgb(215,43,3)"/><text x="95.0883%" y="255.50"></text></g><g><title>hir_lowering (6,777,976 samples, 2.90%)</title><rect x="96.0165%" y="245" width="2.9028%" height="15" fill="rgb(238,154,13)"/><text x="96.2665%" y="255.50">hi..</text></g><g><title>parse_crate (619,387 samples, 0.27%)</title><rect x="98.9430%" y="245" width="0.2653%" height="15" fill="rgb(219,56,2)"/><text x="99.1930%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,066,732 samples, 0.46%)</title><rect x="99.2967%" y="245" width="0.4569%" height="15" fill="rgb(233,0,4)"/><text x="99.5467%" y="255.50"></text></g><g><title>all (233,495,593 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (233,495,593 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (478,596 samples, 0.20%)</title><rect x="99.7950%" y="245" width="0.2050%" height="15" fill="rgb(211,146,34)"/><text x="100.0450%" y="255.50"></text></g></svg></svg>