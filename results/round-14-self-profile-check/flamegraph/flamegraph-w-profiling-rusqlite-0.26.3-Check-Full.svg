<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (895,759 samples, 0.10%)</title><rect x="14.0121%" y="133" width="0.1023%" height="15" fill="rgb(227,0,7)"/><text x="14.2621%" y="143.50"></text></g><g><title>param_env (1,223,276 samples, 0.14%)</title><rect x="15.9175%" y="101" width="0.1397%" height="15" fill="rgb(217,0,24)"/><text x="16.1675%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,254,252 samples, 0.14%)</title><rect x="16.5771%" y="85" width="0.1432%" height="15" fill="rgb(221,193,54)"/><text x="16.8271%" y="95.50"></text></g><g><title>is_copy_raw (1,576,549 samples, 0.18%)</title><rect x="19.6697%" y="69" width="0.1800%" height="15" fill="rgb(248,212,6)"/><text x="19.9197%" y="79.50"></text></g><g><title>evaluate_obligation (1,300,555 samples, 0.15%)</title><rect x="19.7012%" y="53" width="0.1485%" height="15" fill="rgb(208,68,35)"/><text x="19.9512%" y="63.50"></text></g><g><title>is_copy_raw (9,635,357 samples, 1.10%)</title><rect x="20.0610%" y="53" width="1.1002%" height="15" fill="rgb(232,128,0)"/><text x="20.3110%" y="63.50"></text></g><g><title>evaluate_obligation (8,139,732 samples, 0.93%)</title><rect x="20.2318%" y="37" width="0.9295%" height="15" fill="rgb(207,160,47)"/><text x="20.4818%" y="47.50"></text></g><g><title>needs_drop_raw (11,490,903 samples, 1.31%)</title><rect x="19.8500%" y="69" width="1.3121%" height="15" fill="rgb(228,23,34)"/><text x="20.1000%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,153,177 samples, 0.25%)</title><rect x="21.3513%" y="53" width="0.2459%" height="15" fill="rgb(218,30,26)"/><text x="21.6013%" y="63.50"></text></g><g><title>resolve_instance (4,914,174 samples, 0.56%)</title><rect x="21.1664%" y="69" width="0.5611%" height="15" fill="rgb(220,122,19)"/><text x="21.4164%" y="79.50"></text></g><g><title>thir_body (9,299,333 samples, 1.06%)</title><rect x="21.7576%" y="69" width="1.0619%" height="15" fill="rgb(250,228,42)"/><text x="22.0076%" y="79.50"></text></g><g><title>mir_const (68,029,884 samples, 7.77%)</title><rect x="15.0714%" y="117" width="7.7682%" height="15" fill="rgb(240,193,28)"/><text x="15.3214%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (59,397,460 samples, 6.78%)</title><rect x="16.0572%" y="101" width="6.7825%" height="15" fill="rgb(216,20,37)"/><text x="16.3072%" y="111.50">unsafety_..</text></g><g><title>mir_built (53,586,471 samples, 6.12%)</title><rect x="16.7207%" y="85" width="6.1189%" height="15" fill="rgb(206,188,39)"/><text x="16.9707%" y="95.50">mir_built</text></g><g><title>mir_const (4,321,723 samples, 0.49%)</title><rect x="23.0349%" y="101" width="0.4935%" height="15" fill="rgb(217,207,13)"/><text x="23.2849%" y="111.50"></text></g><g><title>unsafety_check_result (3,043,729 samples, 0.35%)</title><rect x="23.1809%" y="85" width="0.3476%" height="15" fill="rgb(231,73,38)"/><text x="23.4309%" y="95.50"></text></g><g><title>mir_built (2,633,425 samples, 0.30%)</title><rect x="23.2277%" y="69" width="0.3007%" height="15" fill="rgb(225,20,46)"/><text x="23.4777%" y="79.50"></text></g><g><title>mir_const_qualif (6,114,929 samples, 0.70%)</title><rect x="22.8396%" y="117" width="0.6983%" height="15" fill="rgb(210,31,41)"/><text x="23.0896%" y="127.50"></text></g><g><title>mir_promoted (82,083,403 samples, 9.37%)</title><rect x="14.1652%" y="133" width="9.3730%" height="15" fill="rgb(221,200,47)"/><text x="14.4152%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (4,786,950 samples, 0.55%)</title><rect x="23.5437%" y="133" width="0.5466%" height="15" fill="rgb(226,26,5)"/><text x="23.7937%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,911,405 samples, 0.56%)</title><rect x="24.0903%" y="133" width="0.5608%" height="15" fill="rgb(249,33,26)"/><text x="24.3403%" y="143.50"></text></g><g><title>normalize_projection_ty (3,346,453 samples, 0.38%)</title><rect x="24.2690%" y="117" width="0.3821%" height="15" fill="rgb(235,183,28)"/><text x="24.5190%" y="127.50"></text></g><g><title>type_op_normalize_predicate (5,130,314 samples, 0.59%)</title><rect x="24.6511%" y="133" width="0.5858%" height="15" fill="rgb(221,5,38)"/><text x="24.9011%" y="143.50"></text></g><g><title>normalize_projection_ty (3,481,477 samples, 0.40%)</title><rect x="24.8394%" y="117" width="0.3975%" height="15" fill="rgb(247,18,42)"/><text x="25.0894%" y="127.50"></text></g><g><title>type_op_prove_predicate (22,593,162 samples, 2.58%)</title><rect x="25.2515%" y="133" width="2.5799%" height="15" fill="rgb(241,131,45)"/><text x="25.5015%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (240,888,329 samples, 27.51%)</title><rect x="0.3279%" y="165" width="27.5066%" height="15" fill="rgb(249,31,29)"/><text x="0.5779%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (239,152,761 samples, 27.31%)</title><rect x="0.5261%" y="149" width="27.3084%" height="15" fill="rgb(225,111,53)"/><text x="0.7761%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (3,019,144 samples, 0.34%)</title><rect x="27.8345%" y="165" width="0.3448%" height="15" fill="rgb(238,160,17)"/><text x="28.0845%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,306,545 samples, 0.26%)</title><rect x="27.9159%" y="149" width="0.2634%" height="15" fill="rgb(214,148,48)"/><text x="28.1659%" y="159.50"></text></g><g><title>hir_module_items (1,656,461 samples, 0.19%)</title><rect x="28.1793%" y="165" width="0.1891%" height="15" fill="rgb(232,36,49)"/><text x="28.4293%" y="175.50"></text></g><g><title>should_inherit_track_caller (1,030,155 samples, 0.12%)</title><rect x="28.7021%" y="117" width="0.1176%" height="15" fill="rgb(209,103,24)"/><text x="28.9521%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,908,022 samples, 0.22%)</title><rect x="28.6042%" y="133" width="0.2179%" height="15" fill="rgb(229,88,8)"/><text x="28.8542%" y="143.50"></text></g><g><title>check_mod_attrs (3,900,833 samples, 0.45%)</title><rect x="28.3767%" y="149" width="0.4454%" height="15" fill="rgb(213,181,19)"/><text x="28.6267%" y="159.50"></text></g><g><title>check_mod_const_bodies (973,370 samples, 0.11%)</title><rect x="28.8221%" y="149" width="0.1111%" height="15" fill="rgb(254,191,54)"/><text x="29.0721%" y="159.50"></text></g><g><title>lint_levels (1,862,220 samples, 0.21%)</title><rect x="29.1175%" y="133" width="0.2126%" height="15" fill="rgb(241,83,37)"/><text x="29.3675%" y="143.50"></text></g><g><title>lookup_deprecation_entry (908,910 samples, 0.10%)</title><rect x="29.3301%" y="133" width="0.1038%" height="15" fill="rgb(233,36,39)"/><text x="29.5801%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (4,003,375 samples, 0.46%)</title><rect x="29.0061%" y="149" width="0.4571%" height="15" fill="rgb(226,3,54)"/><text x="29.2561%" y="159.50"></text></g><g><title>misc_checking_1 (9,862,231 samples, 1.13%)</title><rect x="28.3685%" y="165" width="1.1262%" height="15" fill="rgb(245,192,40)"/><text x="28.6185%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,891,655 samples, 0.56%)</title><rect x="29.4949%" y="149" width="0.5586%" height="15" fill="rgb(238,167,29)"/><text x="29.7449%" y="159.50"></text></g><g><title>check_mod_liveness (4,122,365 samples, 0.47%)</title><rect x="29.5828%" y="133" width="0.4707%" height="15" fill="rgb(232,182,51)"/><text x="29.8328%" y="143.50"></text></g><g><title>type_uninhabited_from (1,143,181 samples, 0.13%)</title><rect x="29.9230%" y="117" width="0.1305%" height="15" fill="rgb(231,60,39)"/><text x="30.1730%" y="127.50"></text></g><g><title>type_uninhabited_from (896,769 samples, 0.10%)</title><rect x="29.9511%" y="101" width="0.1024%" height="15" fill="rgb(208,69,12)"/><text x="30.2011%" y="111.50"></text></g><g><title>misc_checking_2 (10,612,149 samples, 1.21%)</title><rect x="29.4946%" y="165" width="1.2118%" height="15" fill="rgb(235,93,37)"/><text x="29.7446%" y="175.50"></text></g><g><title>match_checking (5,717,794 samples, 0.65%)</title><rect x="30.0535%" y="149" width="0.6529%" height="15" fill="rgb(213,116,39)"/><text x="30.3035%" y="159.50"></text></g><g><title>check_match (5,313,589 samples, 0.61%)</title><rect x="30.0997%" y="133" width="0.6067%" height="15" fill="rgb(222,207,29)"/><text x="30.3497%" y="143.50"></text></g><g><title>check_private_in_public (2,015,333 samples, 0.23%)</title><rect x="30.7082%" y="149" width="0.2301%" height="15" fill="rgb(206,96,30)"/><text x="30.9582%" y="159.50"></text></g><g><title>death_checking (3,358,667 samples, 0.38%)</title><rect x="30.9383%" y="149" width="0.3835%" height="15" fill="rgb(218,138,4)"/><text x="31.1883%" y="159.50"></text></g><g><title>param_env (1,429,016 samples, 0.16%)</title><rect x="31.8775%" y="117" width="0.1632%" height="15" fill="rgb(250,191,14)"/><text x="32.1275%" y="127.50"></text></g><g><title>crate_lints (7,774,777 samples, 0.89%)</title><rect x="31.3227%" y="133" width="0.8878%" height="15" fill="rgb(239,60,40)"/><text x="31.5727%" y="143.50"></text></g><g><title>type_of (1,348,286 samples, 0.15%)</title><rect x="32.0566%" y="117" width="0.1540%" height="15" fill="rgb(206,27,48)"/><text x="32.3066%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,093,761 samples, 0.12%)</title><rect x="32.0856%" y="101" width="0.1249%" height="15" fill="rgb(225,35,8)"/><text x="32.3356%" y="111.50"></text></g><g><title>lint_checking (12,715,342 samples, 1.45%)</title><rect x="31.3218%" y="149" width="1.4519%" height="15" fill="rgb(250,213,24)"/><text x="31.5718%" y="159.50"></text></g><g><title>module_lints (4,932,745 samples, 0.56%)</title><rect x="32.2105%" y="133" width="0.5633%" height="15" fill="rgb(247,123,22)"/><text x="32.4605%" y="143.50"></text></g><g><title>lint_mod (4,910,104 samples, 0.56%)</title><rect x="32.2131%" y="117" width="0.5607%" height="15" fill="rgb(231,138,38)"/><text x="32.4631%" y="127.50"></text></g><g><title>privacy_access_levels (3,489,829 samples, 0.40%)</title><rect x="32.7738%" y="149" width="0.3985%" height="15" fill="rgb(231,145,46)"/><text x="33.0238%" y="159.50"></text></g><g><title>privacy_checking_modules (9,164,802 samples, 1.05%)</title><rect x="33.1723%" y="149" width="1.0465%" height="15" fill="rgb(251,118,11)"/><text x="33.4223%" y="159.50"></text></g><g><title>check_mod_privacy (9,145,612 samples, 1.04%)</title><rect x="33.1745%" y="133" width="1.0443%" height="15" fill="rgb(217,147,25)"/><text x="33.4245%" y="143.50"></text></g><g><title>misc_checking_3 (30,856,404 samples, 3.52%)</title><rect x="30.7064%" y="165" width="3.5234%" height="15" fill="rgb(247,81,37)"/><text x="30.9564%" y="175.50">mis..</text></g><g><title>impl_parent (4,835,047 samples, 0.55%)</title><rect x="38.4192%" y="101" width="0.5521%" height="15" fill="rgb(209,12,38)"/><text x="38.6692%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,454,952 samples, 0.28%)</title><rect x="38.6910%" y="85" width="0.2803%" height="15" fill="rgb(227,1,9)"/><text x="38.9410%" y="95.50"></text></g><g><title>impl_trait_ref (8,620,843 samples, 0.98%)</title><rect x="38.9715%" y="101" width="0.9844%" height="15" fill="rgb(248,47,43)"/><text x="39.2215%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,831,052 samples, 0.78%)</title><rect x="39.1759%" y="85" width="0.7800%" height="15" fill="rgb(221,10,30)"/><text x="39.4259%" y="95.50"></text></g><g><title>trait_impls_of (1,854,676 samples, 0.21%)</title><rect x="39.9670%" y="101" width="0.2118%" height="15" fill="rgb(210,229,1)"/><text x="40.2170%" y="111.50"></text></g><g><title>coherent_trait (51,419,334 samples, 5.87%)</title><rect x="34.3075%" y="133" width="5.8715%" height="15" fill="rgb(222,148,37)"/><text x="34.5575%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (50,788,857 samples, 5.80%)</title><rect x="34.3795%" y="117" width="5.7995%" height="15" fill="rgb(234,67,33)"/><text x="34.6295%" y="127.50">special..</text></g><g><title>coherence_checking (52,053,071 samples, 5.94%)</title><rect x="34.3025%" y="149" width="5.9438%" height="15" fill="rgb(247,98,35)"/><text x="34.5525%" y="159.50">coherenc..</text></g><g><title>associated_item (1,589,858 samples, 0.18%)</title><rect x="63.2137%" y="85" width="0.1815%" height="15" fill="rgb(247,138,52)"/><text x="63.4637%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,288,237 samples, 0.15%)</title><rect x="63.2481%" y="69" width="0.1471%" height="15" fill="rgb(213,79,30)"/><text x="63.4981%" y="79.50"></text></g><g><title>associated_items (2,264,034 samples, 0.26%)</title><rect x="63.1475%" y="101" width="0.2585%" height="15" fill="rgb(246,177,23)"/><text x="63.3975%" y="111.50"></text></g><g><title>adt_dtorck_constraint (962,751 samples, 0.11%)</title><rect x="63.7129%" y="85" width="0.1099%" height="15" fill="rgb(230,62,27)"/><text x="63.9629%" y="95.50"></text></g><g><title>dropck_outlives (3,420,160 samples, 0.39%)</title><rect x="63.4355%" y="101" width="0.3905%" height="15" fill="rgb(216,154,8)"/><text x="63.6855%" y="111.50"></text></g><g><title>generics_of (1,946,285 samples, 0.22%)</title><rect x="65.1756%" y="85" width="0.2222%" height="15" fill="rgb(244,35,45)"/><text x="65.4256%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,502,751 samples, 0.17%)</title><rect x="65.2262%" y="69" width="0.1716%" height="15" fill="rgb(251,115,12)"/><text x="65.4762%" y="79.50"></text></g><g><title>impl_trait_ref (1,900,990 samples, 0.22%)</title><rect x="65.4356%" y="85" width="0.2171%" height="15" fill="rgb(240,54,50)"/><text x="65.6856%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,489,866 samples, 0.17%)</title><rect x="65.4826%" y="69" width="0.1701%" height="15" fill="rgb(233,84,52)"/><text x="65.7326%" y="79.50"></text></g><g><title>predicates_of (1,696,970 samples, 0.19%)</title><rect x="65.6600%" y="85" width="0.1938%" height="15" fill="rgb(207,117,47)"/><text x="65.9100%" y="95.50"></text></g><g><title>predicates_defined_on (1,008,066 samples, 0.12%)</title><rect x="65.7387%" y="69" width="0.1151%" height="15" fill="rgb(249,43,39)"/><text x="65.9887%" y="79.50"></text></g><g><title>specializes (2,929,779 samples, 0.33%)</title><rect x="65.8538%" y="85" width="0.3345%" height="15" fill="rgb(209,38,44)"/><text x="66.1038%" y="95.50"></text></g><g><title>param_env (1,696,280 samples, 0.19%)</title><rect x="65.9946%" y="69" width="0.1937%" height="15" fill="rgb(236,212,23)"/><text x="66.2446%" y="79.50"></text></g><g><title>evaluate_obligation (21,246,593 samples, 2.43%)</title><rect x="63.8261%" y="101" width="2.4261%" height="15" fill="rgb(242,79,21)"/><text x="64.0761%" y="111.50">ev..</text></g><g><title>generics_of (1,482,472 samples, 0.17%)</title><rect x="66.3085%" y="101" width="0.1693%" height="15" fill="rgb(211,96,35)"/><text x="66.5585%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,082,650 samples, 0.12%)</title><rect x="66.3541%" y="85" width="0.1236%" height="15" fill="rgb(253,215,40)"/><text x="66.6041%" y="95.50"></text></g><g><title>evaluate_obligation (1,281,791 samples, 0.15%)</title><rect x="66.7756%" y="85" width="0.1464%" height="15" fill="rgb(211,81,21)"/><text x="67.0256%" y="95.50"></text></g><g><title>method_autoderef_steps (2,717,332 samples, 0.31%)</title><rect x="66.6204%" y="101" width="0.3103%" height="15" fill="rgb(208,190,38)"/><text x="66.8704%" y="111.50"></text></g><g><title>param_env (1,744,253 samples, 0.20%)</title><rect x="66.9608%" y="101" width="0.1992%" height="15" fill="rgb(235,213,38)"/><text x="67.2108%" y="111.50"></text></g><g><title>predicates_of (1,009,453 samples, 0.12%)</title><rect x="67.1832%" y="101" width="0.1153%" height="15" fill="rgb(237,122,38)"/><text x="67.4332%" y="111.50"></text></g><g><title>evaluate_obligation (2,731,342 samples, 0.31%)</title><rect x="70.1378%" y="85" width="0.3119%" height="15" fill="rgb(244,218,35)"/><text x="70.3878%" y="95.50"></text></g><g><title>typeck (29,363,838 samples, 3.35%)</title><rect x="67.3895%" y="101" width="3.3530%" height="15" fill="rgb(240,68,47)"/><text x="67.6395%" y="111.50">typ..</text></g><g><title>item_bodies_checking (266,976,901 samples, 30.49%)</title><rect x="40.2917%" y="149" width="30.4856%" height="15" fill="rgb(210,16,53)"/><text x="40.5417%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (266,973,071 samples, 30.49%)</title><rect x="40.2922%" y="133" width="30.4852%" height="15" fill="rgb(235,124,12)"/><text x="40.5422%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (265,928,195 samples, 30.37%)</title><rect x="40.4115%" y="117" width="30.3659%" height="15" fill="rgb(224,169,11)"/><text x="40.6615%" y="127.50">typeck</text></g><g><title>item_types_checking (12,518,530 samples, 1.43%)</title><rect x="70.7773%" y="149" width="1.4295%" height="15" fill="rgb(250,166,2)"/><text x="71.0273%" y="159.50"></text></g><g><title>check_mod_item_types (12,497,870 samples, 1.43%)</title><rect x="70.7797%" y="133" width="1.4271%" height="15" fill="rgb(242,216,29)"/><text x="71.0297%" y="143.50"></text></g><g><title>mir_borrowck (1,002,240 samples, 0.11%)</title><rect x="72.6748%" y="37" width="0.1144%" height="15" fill="rgb(230,116,27)"/><text x="72.9248%" y="47.50"></text></g><g><title>mir_for_ctfe (1,478,116 samples, 0.17%)</title><rect x="72.6211%" y="69" width="0.1688%" height="15" fill="rgb(228,99,48)"/><text x="72.8711%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,342,525 samples, 0.15%)</title><rect x="72.6366%" y="53" width="0.1533%" height="15" fill="rgb(253,11,6)"/><text x="72.8866%" y="63.50"></text></g><g><title>eval_to_const_value_raw (3,394,630 samples, 0.39%)</title><rect x="72.4744%" y="117" width="0.3876%" height="15" fill="rgb(247,143,39)"/><text x="72.7244%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,368,640 samples, 0.38%)</title><rect x="72.4773%" y="101" width="0.3847%" height="15" fill="rgb(236,97,10)"/><text x="72.7273%" y="111.50"></text></g><g><title>eval_to_allocation_raw (3,337,540 samples, 0.38%)</title><rect x="72.4809%" y="85" width="0.3811%" height="15" fill="rgb(233,208,19)"/><text x="72.7309%" y="95.50"></text></g><g><title>fn_sig (2,239,383 samples, 0.26%)</title><rect x="72.8620%" y="117" width="0.2557%" height="15" fill="rgb(216,164,2)"/><text x="73.1120%" y="127.50"></text></g><g><title>is_late_bound_map (2,448,668 samples, 0.28%)</title><rect x="73.2453%" y="101" width="0.2796%" height="15" fill="rgb(220,129,5)"/><text x="73.4953%" y="111.50"></text></g><g><title>resolve_lifetimes (2,251,267 samples, 0.26%)</title><rect x="73.2679%" y="85" width="0.2571%" height="15" fill="rgb(242,17,10)"/><text x="73.5179%" y="95.50"></text></g><g><title>named_region_map (1,131,661 samples, 0.13%)</title><rect x="73.5250%" y="101" width="0.1292%" height="15" fill="rgb(242,107,0)"/><text x="73.7750%" y="111.50"></text></g><g><title>resolve_lifetimes (978,701 samples, 0.11%)</title><rect x="73.5424%" y="85" width="0.1118%" height="15" fill="rgb(251,28,31)"/><text x="73.7924%" y="95.50"></text></g><g><title>generics_of (4,808,590 samples, 0.55%)</title><rect x="73.1177%" y="117" width="0.5491%" height="15" fill="rgb(233,223,10)"/><text x="73.3677%" y="127.50"></text></g><g><title>explicit_predicates_of (2,281,297 samples, 0.26%)</title><rect x="73.9060%" y="85" width="0.2605%" height="15" fill="rgb(215,21,27)"/><text x="74.1560%" y="95.50"></text></g><g><title>predicates_of (4,989,178 samples, 0.57%)</title><rect x="73.7412%" y="117" width="0.5697%" height="15" fill="rgb(232,23,21)"/><text x="73.9912%" y="127.50"></text></g><g><title>predicates_defined_on (4,500,103 samples, 0.51%)</title><rect x="73.7970%" y="101" width="0.5139%" height="15" fill="rgb(244,5,23)"/><text x="74.0470%" y="111.50"></text></g><g><title>inferred_outlives_of (1,264,794 samples, 0.14%)</title><rect x="74.1665%" y="85" width="0.1444%" height="15" fill="rgb(226,81,46)"/><text x="74.4165%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,119,013 samples, 0.13%)</title><rect x="74.1831%" y="69" width="0.1278%" height="15" fill="rgb(247,70,30)"/><text x="74.4331%" y="79.50"></text></g><g><title>type_collecting (20,108,774 samples, 2.30%)</title><rect x="72.2084%" y="149" width="2.2962%" height="15" fill="rgb(212,68,19)"/><text x="72.4584%" y="159.50">t..</text></g><g><title>collect_mod_item_types (20,075,954 samples, 2.29%)</title><rect x="72.2122%" y="133" width="2.2924%" height="15" fill="rgb(240,187,13)"/><text x="72.4622%" y="143.50">c..</text></g><g><title>type_of (1,643,452 samples, 0.19%)</title><rect x="74.3169%" y="117" width="0.1877%" height="15" fill="rgb(223,113,26)"/><text x="74.5669%" y="127.50"></text></g><g><title>evaluate_obligation (2,328,578 samples, 0.27%)</title><rect x="76.7209%" y="117" width="0.2659%" height="15" fill="rgb(206,192,2)"/><text x="76.9709%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,877,176 samples, 0.21%)</title><rect x="76.9874%" y="117" width="0.2144%" height="15" fill="rgb(241,108,4)"/><text x="77.2374%" y="127.50"></text></g><g><title>param_env (2,932,261 samples, 0.33%)</title><rect x="77.2509%" y="117" width="0.3348%" height="15" fill="rgb(247,173,49)"/><text x="77.5009%" y="127.50"></text></g><g><title>region_scope_tree (3,417,212 samples, 0.39%)</title><rect x="77.5913%" y="117" width="0.3902%" height="15" fill="rgb(224,114,35)"/><text x="77.8413%" y="127.50"></text></g><g><title>check_impl_item_well_formed (28,437,006 samples, 3.25%)</title><rect x="74.7373%" y="133" width="3.2472%" height="15" fill="rgb(245,159,27)"/><text x="74.9873%" y="143.50">che..</text></g><g><title>evaluate_obligation (2,216,859 samples, 0.25%)</title><rect x="82.6947%" y="117" width="0.2531%" height="15" fill="rgb(245,172,44)"/><text x="82.9447%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,177,427 samples, 0.13%)</title><rect x="82.9707%" y="117" width="0.1344%" height="15" fill="rgb(236,23,11)"/><text x="83.2207%" y="127.50"></text></g><g><title>param_env (2,609,182 samples, 0.30%)</title><rect x="83.1165%" y="117" width="0.2979%" height="15" fill="rgb(205,117,38)"/><text x="83.3665%" y="127.50"></text></g><g><title>check_item_well_formed (48,830,869 samples, 5.58%)</title><rect x="77.9845%" y="133" width="5.5759%" height="15" fill="rgb(237,72,25)"/><text x="78.2345%" y="143.50">check_i..</text></g><g><title>analysis (731,699,710 samples, 83.55%)</title><rect x="0.1012%" y="181" width="83.5515%" height="15" fill="rgb(244,70,9)"/><text x="0.3512%" y="191.50">analysis</text></g><g><title>type_check_crate (432,819,273 samples, 49.42%)</title><rect x="34.2299%" y="165" width="49.4228%" height="15" fill="rgb(217,125,39)"/><text x="34.4799%" y="175.50">type_check_crate</text></g><g><title>wf_checking (80,048,114 samples, 9.14%)</title><rect x="74.5122%" y="149" width="9.1405%" height="15" fill="rgb(235,36,10)"/><text x="74.7622%" y="159.50">wf_checking</text></g><g><title>AST_validation (1,258,914 samples, 0.14%)</title><rect x="83.7226%" y="165" width="0.1438%" height="15" fill="rgb(251,123,47)"/><text x="83.9726%" y="175.50"></text></g><g><title>metadata_register_crate (1,568,489 samples, 0.18%)</title><rect x="90.6807%" y="133" width="0.1791%" height="15" fill="rgb(221,13,13)"/><text x="90.9307%" y="143.50"></text></g><g><title>macro_expand_crate (61,999,582 samples, 7.08%)</title><rect x="83.9254%" y="165" width="7.0796%" height="15" fill="rgb(238,131,9)"/><text x="84.1754%" y="175.50">macro_exp..</text></g><g><title>expand_crate (61,976,752 samples, 7.08%)</title><rect x="83.9280%" y="149" width="7.0770%" height="15" fill="rgb(211,50,8)"/><text x="84.1780%" y="159.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (1,271,361 samples, 0.15%)</title><rect x="90.8598%" y="133" width="0.1452%" height="15" fill="rgb(245,182,24)"/><text x="91.1098%" y="143.50"></text></g><g><title>late_resolve_crate (11,132,164 samples, 1.27%)</title><rect x="91.1536%" y="149" width="1.2712%" height="15" fill="rgb(242,14,37)"/><text x="91.4036%" y="159.50"></text></g><g><title>configure_and_expand (77,658,608 samples, 8.87%)</title><rect x="83.7070%" y="181" width="8.8677%" height="15" fill="rgb(246,228,12)"/><text x="83.9570%" y="191.50">configure_and..</text></g><g><title>resolve_crate (13,405,990 samples, 1.53%)</title><rect x="91.0439%" y="165" width="1.5308%" height="15" fill="rgb(213,55,15)"/><text x="91.2939%" y="175.50"></text></g><g><title>drop_ast (2,887,311 samples, 0.33%)</title><rect x="92.5747%" y="181" width="0.3297%" height="15" fill="rgb(209,9,3)"/><text x="92.8247%" y="191.50"></text></g><g><title>early_lint_checks (3,549,190 samples, 0.41%)</title><rect x="92.9073%" y="181" width="0.4053%" height="15" fill="rgb(230,59,30)"/><text x="93.1573%" y="191.50"></text></g><g><title>free_global_ctxt (9,255,843 samples, 1.06%)</title><rect x="93.3125%" y="181" width="1.0569%" height="15" fill="rgb(209,121,21)"/><text x="93.5625%" y="191.50"></text></g><g><title>mir_for_ctfe (1,678,171 samples, 0.19%)</title><rect x="95.5186%" y="165" width="0.1916%" height="15" fill="rgb(220,109,13)"/><text x="95.7686%" y="175.50"></text></g><g><title>generate_crate_metadata (12,469,500 samples, 1.42%)</title><rect x="94.3694%" y="181" width="1.4239%" height="15" fill="rgb(232,18,1)"/><text x="94.6194%" y="191.50"></text></g><g><title>hir_lowering (26,702,808 samples, 3.05%)</title><rect x="95.7933%" y="181" width="3.0491%" height="15" fill="rgb(215,41,42)"/><text x="96.0433%" y="191.50">hir..</text></g><g><title>parse_crate (5,872,816 samples, 0.67%)</title><rect x="98.8513%" y="181" width="0.6706%" height="15" fill="rgb(224,123,36)"/><text x="99.1013%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,986,513 samples, 0.34%)</title><rect x="99.5514%" y="181" width="0.3410%" height="15" fill="rgb(240,125,3)"/><text x="99.8014%" y="191.50"></text></g><g><title>all (875,747,349 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (875,747,349 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>