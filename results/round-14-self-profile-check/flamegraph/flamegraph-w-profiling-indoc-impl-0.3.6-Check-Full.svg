<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (89,561 samples, 0.11%)</title><rect x="5.9161%" y="165" width="0.1117%" height="15" fill="rgb(227,0,7)"/><text x="6.1661%" y="175.50"></text></g><g><title>item_attrs (105,870 samples, 0.13%)</title><rect x="6.2845%" y="133" width="0.1321%" height="15" fill="rgb(217,0,24)"/><text x="6.5345%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (100,680 samples, 0.13%)</title><rect x="6.2909%" y="117" width="0.1256%" height="15" fill="rgb(221,193,54)"/><text x="6.5409%" y="127.50"></text></g><g><title>codegen_fn_attrs (175,051 samples, 0.22%)</title><rect x="6.2139%" y="149" width="0.2184%" height="15" fill="rgb(248,212,6)"/><text x="6.4639%" y="159.50"></text></g><g><title>explicit_predicates_of (244,863 samples, 0.31%)</title><rect x="7.6359%" y="37" width="0.3055%" height="15" fill="rgb(208,68,35)"/><text x="7.8859%" y="47.50"></text></g><g><title>adt_drop_tys (344,484 samples, 0.43%)</title><rect x="7.5132%" y="101" width="0.4297%" height="15" fill="rgb(232,128,0)"/><text x="7.7632%" y="111.50"></text></g><g><title>param_env (266,583 samples, 0.33%)</title><rect x="7.6104%" y="85" width="0.3326%" height="15" fill="rgb(207,160,47)"/><text x="7.8604%" y="95.50"></text></g><g><title>predicates_of (252,253 samples, 0.31%)</title><rect x="7.6283%" y="69" width="0.3147%" height="15" fill="rgb(228,23,34)"/><text x="7.8783%" y="79.50"></text></g><g><title>predicates_defined_on (248,543 samples, 0.31%)</title><rect x="7.6329%" y="53" width="0.3100%" height="15" fill="rgb(218,30,26)"/><text x="7.8829%" y="63.50"></text></g><g><title>adt_drop_tys (478,897 samples, 0.60%)</title><rect x="7.4861%" y="117" width="0.5974%" height="15" fill="rgb(220,122,19)"/><text x="7.7361%" y="127.50"></text></g><g><title>needs_drop_raw (1,010,034 samples, 1.26%)</title><rect x="7.4367%" y="133" width="1.2600%" height="15" fill="rgb(250,228,42)"/><text x="7.6867%" y="143.50"></text></g><g><title>is_copy_raw (491,577 samples, 0.61%)</title><rect x="8.0835%" y="117" width="0.6132%" height="15" fill="rgb(240,193,28)"/><text x="8.3335%" y="127.50"></text></g><g><title>evaluate_obligation (453,485 samples, 0.57%)</title><rect x="8.1310%" y="101" width="0.5657%" height="15" fill="rgb(216,20,37)"/><text x="8.3810%" y="111.50"></text></g><g><title>trait_impls_of (175,082 samples, 0.22%)</title><rect x="8.4783%" y="85" width="0.2184%" height="15" fill="rgb(206,188,39)"/><text x="8.7283%" y="95.50"></text></g><g><title>impl_parent (1,221,552 samples, 1.52%)</title><rect x="11.1099%" y="101" width="1.5238%" height="15" fill="rgb(217,207,13)"/><text x="11.3599%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (800,746 samples, 1.00%)</title><rect x="11.6348%" y="85" width="0.9989%" height="15" fill="rgb(231,73,38)"/><text x="11.8848%" y="95.50"></text></g><g><title>specialization_graph_of (6,857,906 samples, 8.55%)</title><rect x="8.8657%" y="117" width="8.5549%" height="15" fill="rgb(225,20,46)"/><text x="9.1157%" y="127.50">specializati..</text></g><g><title>impl_trait_ref (3,837,384 samples, 4.79%)</title><rect x="12.6337%" y="101" width="4.7870%" height="15" fill="rgb(210,31,41)"/><text x="12.8837%" y="111.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,418,060 samples, 4.26%)</title><rect x="13.1568%" y="85" width="4.2639%" height="15" fill="rgb(221,200,47)"/><text x="13.4068%" y="95.50">metad..</text></g><g><title>resolve_instance (7,014,560 samples, 8.75%)</title><rect x="8.6967%" y="133" width="8.7504%" height="15" fill="rgb(226,26,5)"/><text x="8.9467%" y="143.50">resolve_inst..</text></g><g><title>thir_body (341,714 samples, 0.43%)</title><rect x="17.4527%" y="133" width="0.4263%" height="15" fill="rgb(249,33,26)"/><text x="17.7027%" y="143.50"></text></g><g><title>mir_const (9,852,628 samples, 12.29%)</title><rect x="5.5992%" y="181" width="12.2907%" height="15" fill="rgb(235,183,28)"/><text x="5.8492%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (9,509,076 samples, 11.86%)</title><rect x="6.0278%" y="165" width="11.8622%" height="15" fill="rgb(221,5,38)"/><text x="6.2778%" y="175.50">unsafety_check_res..</text></g><g><title>mir_built (9,181,573 samples, 11.45%)</title><rect x="6.4363%" y="149" width="11.4536%" height="15" fill="rgb(247,18,42)"/><text x="6.6863%" y="159.50">mir_built</text></g><g><title>has_structural_eq_impls (140,472 samples, 0.18%)</title><rect x="17.9803%" y="165" width="0.1752%" height="15" fill="rgb(241,131,45)"/><text x="18.2303%" y="175.50"></text></g><g><title>evaluate_obligation (130,331 samples, 0.16%)</title><rect x="17.9930%" y="149" width="0.1626%" height="15" fill="rgb(249,31,29)"/><text x="18.2430%" y="159.50"></text></g><g><title>trait_impls_of (118,981 samples, 0.15%)</title><rect x="18.0071%" y="133" width="0.1484%" height="15" fill="rgb(225,111,53)"/><text x="18.2571%" y="143.50"></text></g><g><title>is_freeze_raw (106,651 samples, 0.13%)</title><rect x="18.1575%" y="165" width="0.1330%" height="15" fill="rgb(238,160,17)"/><text x="18.4075%" y="175.50"></text></g><g><title>evaluate_obligation (104,111 samples, 0.13%)</title><rect x="18.1607%" y="149" width="0.1299%" height="15" fill="rgb(214,148,48)"/><text x="18.4107%" y="159.50"></text></g><g><title>mir_const (102,371 samples, 0.13%)</title><rect x="18.2928%" y="165" width="0.1277%" height="15" fill="rgb(232,36,49)"/><text x="18.5428%" y="175.50"></text></g><g><title>unsafety_check_result (88,160 samples, 0.11%)</title><rect x="18.3105%" y="149" width="0.1100%" height="15" fill="rgb(209,103,24)"/><text x="18.5605%" y="159.50"></text></g><g><title>mir_promoted (10,582,355 samples, 13.20%)</title><rect x="5.2215%" y="197" width="13.2010%" height="15" fill="rgb(229,88,8)"/><text x="5.4715%" y="207.50">mir_promoted</text></g><g><title>mir_const_qualif (426,964 samples, 0.53%)</title><rect x="17.8900%" y="181" width="0.5326%" height="15" fill="rgb(213,181,19)"/><text x="18.1400%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (237,972 samples, 0.30%)</title><rect x="18.4274%" y="197" width="0.2969%" height="15" fill="rgb(254,191,54)"/><text x="18.6774%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (127,141 samples, 0.16%)</title><rect x="18.7242%" y="197" width="0.1586%" height="15" fill="rgb(241,83,37)"/><text x="18.9742%" y="207.50"></text></g><g><title>type_op_prove_predicate (462,843 samples, 0.58%)</title><rect x="18.8828%" y="197" width="0.5774%" height="15" fill="rgb(233,36,39)"/><text x="19.1328%" y="207.50"></text></g><g><title>MIR_borrow_checking (14,632,333 samples, 18.25%)</title><rect x="1.2264%" y="229" width="18.2532%" height="15" fill="rgb(226,3,54)"/><text x="1.4764%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,615,472 samples, 18.23%)</title><rect x="1.2474%" y="213" width="18.2322%" height="15" fill="rgb(245,192,40)"/><text x="1.4974%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (114,561 samples, 0.14%)</title><rect x="19.4796%" y="229" width="0.1429%" height="15" fill="rgb(238,167,29)"/><text x="19.7296%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (95,751 samples, 0.12%)</title><rect x="19.5030%" y="213" width="0.1194%" height="15" fill="rgb(232,182,51)"/><text x="19.7530%" y="223.50"></text></g><g><title>hir_module_items (156,752 samples, 0.20%)</title><rect x="19.6225%" y="229" width="0.1955%" height="15" fill="rgb(231,60,39)"/><text x="19.8725%" y="239.50"></text></g><g><title>get_lang_items (131,351 samples, 0.16%)</title><rect x="20.1158%" y="181" width="0.1639%" height="15" fill="rgb(208,69,12)"/><text x="20.3658%" y="191.50"></text></g><g><title>codegen_fn_attrs (253,052 samples, 0.32%)</title><rect x="20.0222%" y="197" width="0.3157%" height="15" fill="rgb(235,93,37)"/><text x="20.2722%" y="207.50"></text></g><g><title>check_mod_attrs (392,344 samples, 0.49%)</title><rect x="19.8488%" y="213" width="0.4894%" height="15" fill="rgb(213,116,39)"/><text x="20.0988%" y="223.50"></text></g><g><title>lookup_deprecation_entry (124,532 samples, 0.16%)</title><rect x="20.7065%" y="197" width="0.1553%" height="15" fill="rgb(222,207,29)"/><text x="20.9565%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (420,034 samples, 0.52%)</title><rect x="20.4797%" y="213" width="0.5240%" height="15" fill="rgb(206,96,30)"/><text x="20.7297%" y="223.50"></text></g><g><title>misc_checking_1 (1,019,421 samples, 1.27%)</title><rect x="19.8186%" y="229" width="1.2717%" height="15" fill="rgb(218,138,4)"/><text x="20.0686%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (178,652 samples, 0.22%)</title><rect x="21.0920%" y="213" width="0.2229%" height="15" fill="rgb(250,191,14)"/><text x="21.3420%" y="223.50"></text></g><g><title>check_mod_liveness (145,721 samples, 0.18%)</title><rect x="21.1331%" y="197" width="0.1818%" height="15" fill="rgb(239,60,40)"/><text x="21.3831%" y="207.50"></text></g><g><title>misc_checking_2 (345,024 samples, 0.43%)</title><rect x="21.0903%" y="229" width="0.4304%" height="15" fill="rgb(206,27,48)"/><text x="21.3403%" y="239.50"></text></g><g><title>match_checking (165,022 samples, 0.21%)</title><rect x="21.3149%" y="213" width="0.2059%" height="15" fill="rgb(225,35,8)"/><text x="21.5649%" y="223.50"></text></g><g><title>check_match (159,622 samples, 0.20%)</title><rect x="21.3216%" y="197" width="0.1991%" height="15" fill="rgb(250,213,24)"/><text x="21.5716%" y="207.50"></text></g><g><title>death_checking (93,171 samples, 0.12%)</title><rect x="21.5876%" y="213" width="0.1162%" height="15" fill="rgb(247,123,22)"/><text x="21.8376%" y="223.50"></text></g><g><title>fn_abi_of_instance (125,821 samples, 0.16%)</title><rect x="22.1232%" y="85" width="0.1570%" height="15" fill="rgb(231,138,38)"/><text x="22.3732%" y="95.50"></text></g><g><title>eval_to_const_value_raw (428,585 samples, 0.53%)</title><rect x="21.9355%" y="133" width="0.5346%" height="15" fill="rgb(231,145,46)"/><text x="22.1855%" y="143.50"></text></g><g><title>eval_to_const_value_raw (427,945 samples, 0.53%)</title><rect x="21.9363%" y="117" width="0.5338%" height="15" fill="rgb(251,118,11)"/><text x="22.1863%" y="127.50"></text></g><g><title>eval_to_allocation_raw (426,235 samples, 0.53%)</title><rect x="21.9384%" y="101" width="0.5317%" height="15" fill="rgb(217,147,25)"/><text x="22.1884%" y="111.50"></text></g><g><title>eval_to_allocation_raw (476,015 samples, 0.59%)</title><rect x="21.8791%" y="181" width="0.5938%" height="15" fill="rgb(247,81,37)"/><text x="22.1291%" y="191.50"></text></g><g><title>eval_to_allocation_raw (475,335 samples, 0.59%)</title><rect x="21.8800%" y="165" width="0.5930%" height="15" fill="rgb(209,12,38)"/><text x="22.1300%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (438,445 samples, 0.55%)</title><rect x="21.9260%" y="149" width="0.5469%" height="15" fill="rgb(227,1,9)"/><text x="22.1760%" y="159.50"></text></g><g><title>eval_to_const_value_raw (103,811 samples, 0.13%)</title><rect x="22.4729%" y="181" width="0.1295%" height="15" fill="rgb(248,47,43)"/><text x="22.7229%" y="191.50"></text></g><g><title>eval_to_const_value_raw (101,671 samples, 0.13%)</title><rect x="22.4756%" y="165" width="0.1268%" height="15" fill="rgb(221,10,30)"/><text x="22.7256%" y="175.50"></text></g><g><title>eval_to_allocation_raw (96,321 samples, 0.12%)</title><rect x="22.4823%" y="149" width="0.1202%" height="15" fill="rgb(210,229,1)"/><text x="22.7323%" y="159.50"></text></g><g><title>param_env (138,392 samples, 0.17%)</title><rect x="22.6024%" y="181" width="0.1726%" height="15" fill="rgb(222,148,37)"/><text x="22.8524%" y="191.50"></text></g><g><title>crate_lints (912,110 samples, 1.14%)</title><rect x="21.7058%" y="197" width="1.1378%" height="15" fill="rgb(234,67,33)"/><text x="21.9558%" y="207.50"></text></g><g><title>lint_checking (1,028,492 samples, 1.28%)</title><rect x="21.7039%" y="213" width="1.2830%" height="15" fill="rgb(247,98,35)"/><text x="21.9539%" y="223.50"></text></g><g><title>module_lints (114,801 samples, 0.14%)</title><rect x="22.8436%" y="197" width="0.1432%" height="15" fill="rgb(247,138,52)"/><text x="23.0936%" y="207.50"></text></g><g><title>lint_mod (111,961 samples, 0.14%)</title><rect x="22.8472%" y="181" width="0.1397%" height="15" fill="rgb(213,79,30)"/><text x="23.0972%" y="191.50"></text></g><g><title>privacy_checking_modules (214,522 samples, 0.27%)</title><rect x="23.0461%" y="213" width="0.2676%" height="15" fill="rgb(246,177,23)"/><text x="23.2961%" y="223.50"></text></g><g><title>check_mod_privacy (212,692 samples, 0.27%)</title><rect x="23.0483%" y="197" width="0.2653%" height="15" fill="rgb(230,62,27)"/><text x="23.2983%" y="207.50"></text></g><g><title>misc_checking_3 (1,445,206 samples, 1.80%)</title><rect x="21.5207%" y="229" width="1.8028%" height="15" fill="rgb(216,154,8)"/><text x="21.7707%" y="239.50">m..</text></g><g><title>associated_item (531,805 samples, 0.66%)</title><rect x="33.0724%" y="149" width="0.6634%" height="15" fill="rgb(244,35,45)"/><text x="33.3224%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (391,063 samples, 0.49%)</title><rect x="33.2480%" y="133" width="0.4878%" height="15" fill="rgb(251,115,12)"/><text x="33.4980%" y="143.50"></text></g><g><title>associated_items (820,391 samples, 1.02%)</title><rect x="32.7737%" y="165" width="1.0234%" height="15" fill="rgb(240,54,50)"/><text x="33.0237%" y="175.50"></text></g><g><title>adt_def (289,823 samples, 0.36%)</title><rect x="34.3841%" y="101" width="0.3615%" height="15" fill="rgb(233,84,52)"/><text x="34.6341%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (286,753 samples, 0.36%)</title><rect x="34.3879%" y="85" width="0.3577%" height="15" fill="rgb(207,117,47)"/><text x="34.6379%" y="95.50"></text></g><g><title>item_attrs (254,313 samples, 0.32%)</title><rect x="34.4284%" y="69" width="0.3172%" height="15" fill="rgb(249,43,39)"/><text x="34.6784%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (251,003 samples, 0.31%)</title><rect x="34.4325%" y="53" width="0.3131%" height="15" fill="rgb(209,38,44)"/><text x="34.6825%" y="63.50"></text></g><g><title>adt_dtorck_constraint (173,433 samples, 0.22%)</title><rect x="34.7786%" y="101" width="0.2164%" height="15" fill="rgb(236,212,23)"/><text x="35.0286%" y="111.50"></text></g><g><title>adt_dtorck_constraint (578,906 samples, 0.72%)</title><rect x="34.3307%" y="117" width="0.7222%" height="15" fill="rgb(242,79,21)"/><text x="34.5807%" y="127.50"></text></g><g><title>adt_dtorck_constraint (757,118 samples, 0.94%)</title><rect x="34.1563%" y="133" width="0.9445%" height="15" fill="rgb(211,96,35)"/><text x="34.4063%" y="143.50"></text></g><g><title>dropck_outlives (1,000,461 samples, 1.25%)</title><rect x="33.9014%" y="165" width="1.2480%" height="15" fill="rgb(253,215,40)"/><text x="34.1514%" y="175.50"></text></g><g><title>adt_dtorck_constraint (905,029 samples, 1.13%)</title><rect x="34.0204%" y="149" width="1.1290%" height="15" fill="rgb(211,81,21)"/><text x="34.2704%" y="159.50"></text></g><g><title>adt_def (286,854 samples, 0.36%)</title><rect x="37.4356%" y="133" width="0.3578%" height="15" fill="rgb(208,190,38)"/><text x="37.6856%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (280,964 samples, 0.35%)</title><rect x="37.4430%" y="117" width="0.3505%" height="15" fill="rgb(235,213,38)"/><text x="37.6930%" y="127.50"></text></g><g><title>item_attrs (189,692 samples, 0.24%)</title><rect x="37.5569%" y="101" width="0.2366%" height="15" fill="rgb(237,122,38)"/><text x="37.8069%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (183,932 samples, 0.23%)</title><rect x="37.5640%" y="85" width="0.2294%" height="15" fill="rgb(244,218,35)"/><text x="37.8140%" y="95.50"></text></g><g><title>adt_sized_constraint (138,292 samples, 0.17%)</title><rect x="37.7935%" y="133" width="0.1725%" height="15" fill="rgb(240,68,47)"/><text x="38.0435%" y="143.50"></text></g><g><title>adt_sized_constraint (523,117 samples, 0.65%)</title><rect x="37.3870%" y="149" width="0.6526%" height="15" fill="rgb(210,16,53)"/><text x="37.6370%" y="159.50"></text></g><g><title>generics_of (351,776 samples, 0.44%)</title><rect x="38.0425%" y="149" width="0.4388%" height="15" fill="rgb(235,124,12)"/><text x="38.2925%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (262,805 samples, 0.33%)</title><rect x="38.1534%" y="133" width="0.3278%" height="15" fill="rgb(224,169,11)"/><text x="38.4034%" y="143.50"></text></g><g><title>impl_trait_ref (481,623 samples, 0.60%)</title><rect x="38.5745%" y="149" width="0.6008%" height="15" fill="rgb(250,166,2)"/><text x="38.8245%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (397,572 samples, 0.50%)</title><rect x="38.6793%" y="133" width="0.4960%" height="15" fill="rgb(242,216,29)"/><text x="38.9293%" y="143.50"></text></g><g><title>predicates_of (377,446 samples, 0.47%)</title><rect x="39.2076%" y="149" width="0.4708%" height="15" fill="rgb(230,116,27)"/><text x="39.4576%" y="159.50"></text></g><g><title>predicates_defined_on (230,172 samples, 0.29%)</title><rect x="39.3913%" y="133" width="0.2871%" height="15" fill="rgb(228,99,48)"/><text x="39.6413%" y="143.50"></text></g><g><title>specializes (566,435 samples, 0.71%)</title><rect x="39.6785%" y="149" width="0.7066%" height="15" fill="rgb(253,11,6)"/><text x="39.9285%" y="159.50"></text></g><g><title>param_env (329,703 samples, 0.41%)</title><rect x="39.9738%" y="133" width="0.4113%" height="15" fill="rgb(247,143,39)"/><text x="40.2238%" y="143.50"></text></g><g><title>def_span (127,122 samples, 0.16%)</title><rect x="40.2265%" y="117" width="0.1586%" height="15" fill="rgb(236,97,10)"/><text x="40.4765%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (109,611 samples, 0.14%)</title><rect x="40.2483%" y="101" width="0.1367%" height="15" fill="rgb(233,208,19)"/><text x="40.4983%" y="111.50"></text></g><g><title>trait_impls_of (1,713,736 samples, 2.14%)</title><rect x="40.4143%" y="149" width="2.1378%" height="15" fill="rgb(216,164,2)"/><text x="40.6643%" y="159.50">t..</text></g><g><title>implementations_of_trait (523,019 samples, 0.65%)</title><rect x="41.8997%" y="133" width="0.6524%" height="15" fill="rgb(220,129,5)"/><text x="42.1497%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (362,586 samples, 0.45%)</title><rect x="42.0998%" y="117" width="0.4523%" height="15" fill="rgb(242,17,10)"/><text x="42.3498%" y="127.50"></text></g><g><title>evaluate_obligation (5,944,765 samples, 7.42%)</title><rect x="35.1494%" y="165" width="7.4158%" height="15" fill="rgb(242,107,0)"/><text x="35.3994%" y="175.50">evaluate_o..</text></g><g><title>fn_sig (236,202 samples, 0.29%)</title><rect x="42.6065%" y="165" width="0.2947%" height="15" fill="rgb(251,28,31)"/><text x="42.8565%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (212,221 samples, 0.26%)</title><rect x="42.6364%" y="149" width="0.2647%" height="15" fill="rgb(233,223,10)"/><text x="42.8864%" y="159.50"></text></g><g><title>generics_of (218,716 samples, 0.27%)</title><rect x="42.9011%" y="165" width="0.2728%" height="15" fill="rgb(215,21,27)"/><text x="43.1511%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (152,756 samples, 0.19%)</title><rect x="42.9834%" y="149" width="0.1906%" height="15" fill="rgb(232,23,21)"/><text x="43.2334%" y="159.50"></text></g><g><title>impl_item_implementor_ids (96,830 samples, 0.12%)</title><rect x="43.1739%" y="165" width="0.1208%" height="15" fill="rgb(244,5,23)"/><text x="43.4239%" y="175.50"></text></g><g><title>associated_items (82,320 samples, 0.10%)</title><rect x="43.1920%" y="149" width="0.1027%" height="15" fill="rgb(226,81,46)"/><text x="43.4420%" y="159.50"></text></g><g><title>impl_trait_ref (107,000 samples, 0.13%)</title><rect x="43.3066%" y="165" width="0.1335%" height="15" fill="rgb(247,70,30)"/><text x="43.5566%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (90,650 samples, 0.11%)</title><rect x="43.3269%" y="149" width="0.1131%" height="15" fill="rgb(212,68,19)"/><text x="43.5769%" y="159.50"></text></g><g><title>item_attrs (189,812 samples, 0.24%)</title><rect x="43.5020%" y="165" width="0.2368%" height="15" fill="rgb(240,187,13)"/><text x="43.7520%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (171,681 samples, 0.21%)</title><rect x="43.5246%" y="149" width="0.2142%" height="15" fill="rgb(223,113,26)"/><text x="43.7746%" y="159.50"></text></g><g><title>method_autoderef_steps (253,424 samples, 0.32%)</title><rect x="43.8150%" y="165" width="0.3161%" height="15" fill="rgb(206,192,2)"/><text x="44.0650%" y="175.50"></text></g><g><title>evaluate_obligation (159,043 samples, 0.20%)</title><rect x="43.9327%" y="149" width="0.1984%" height="15" fill="rgb(241,108,4)"/><text x="44.1827%" y="159.50"></text></g><g><title>explicit_predicates_of (237,414 samples, 0.30%)</title><rect x="44.6008%" y="133" width="0.2962%" height="15" fill="rgb(247,173,49)"/><text x="44.8508%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (184,173 samples, 0.23%)</title><rect x="44.6672%" y="117" width="0.2297%" height="15" fill="rgb(224,114,35)"/><text x="44.9172%" y="127.50"></text></g><g><title>predicates_of (687,746 samples, 0.86%)</title><rect x="44.1669%" y="165" width="0.8579%" height="15" fill="rgb(245,159,27)"/><text x="44.4169%" y="175.50"></text></g><g><title>predicates_defined_on (486,646 samples, 0.61%)</title><rect x="44.4178%" y="149" width="0.6071%" height="15" fill="rgb(245,172,44)"/><text x="44.6678%" y="159.50"></text></g><g><title>inferred_outlives_of (102,491 samples, 0.13%)</title><rect x="44.8970%" y="133" width="0.1279%" height="15" fill="rgb(236,23,11)"/><text x="45.1470%" y="143.50"></text></g><g><title>type_of (125,201 samples, 0.16%)</title><rect x="45.1745%" y="165" width="0.1562%" height="15" fill="rgb(205,117,38)"/><text x="45.4245%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (96,131 samples, 0.12%)</title><rect x="45.2107%" y="149" width="0.1199%" height="15" fill="rgb(237,72,25)"/><text x="45.4607%" y="159.50"></text></g><g><title>item_bodies_checking (17,609,436 samples, 21.97%)</title><rect x="23.4400%" y="213" width="21.9670%" height="15" fill="rgb(244,70,9)"/><text x="23.6900%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,606,046 samples, 21.96%)</title><rect x="23.4442%" y="197" width="21.9628%" height="15" fill="rgb(217,125,39)"/><text x="23.6942%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (17,594,106 samples, 21.95%)</title><rect x="23.4591%" y="181" width="21.9479%" height="15" fill="rgb(235,36,10)"/><text x="23.7091%" y="191.50">typeck</text></g><g><title>impl_parent (182,491 samples, 0.23%)</title><rect x="47.1564%" y="53" width="0.2276%" height="15" fill="rgb(251,123,47)"/><text x="47.4064%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (122,851 samples, 0.15%)</title><rect x="47.2308%" y="37" width="0.1533%" height="15" fill="rgb(221,13,13)"/><text x="47.4808%" y="47.50"></text></g><g><title>impl_trait_ref (709,238 samples, 0.88%)</title><rect x="47.3841%" y="53" width="0.8847%" height="15" fill="rgb(238,131,9)"/><text x="47.6341%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (652,638 samples, 0.81%)</title><rect x="47.4547%" y="37" width="0.8141%" height="15" fill="rgb(211,50,8)"/><text x="47.7047%" y="47.50"></text></g><g><title>coherent_trait (1,241,554 samples, 1.55%)</title><rect x="46.8223%" y="85" width="1.5488%" height="15" fill="rgb(245,182,24)"/><text x="47.0723%" y="95.50"></text></g><g><title>specialization_graph_of (1,234,954 samples, 1.54%)</title><rect x="46.8305%" y="69" width="1.5406%" height="15" fill="rgb(242,14,37)"/><text x="47.0805%" y="79.50"></text></g><g><title>trait_impls_of (81,971 samples, 0.10%)</title><rect x="48.2688%" y="53" width="0.1023%" height="15" fill="rgb(246,228,12)"/><text x="48.5188%" y="63.50"></text></g><g><title>adt_destructor (1,260,634 samples, 1.57%)</title><rect x="46.8104%" y="117" width="1.5726%" height="15" fill="rgb(213,55,15)"/><text x="47.0604%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,259,434 samples, 1.57%)</title><rect x="46.8119%" y="101" width="1.5711%" height="15" fill="rgb(209,9,3)"/><text x="47.0619%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,278,704 samples, 1.60%)</title><rect x="46.7891%" y="133" width="1.5951%" height="15" fill="rgb(230,59,30)"/><text x="47.0391%" y="143.50"></text></g><g><title>dropck_outlives (1,332,945 samples, 1.66%)</title><rect x="46.7247%" y="165" width="1.6628%" height="15" fill="rgb(209,121,21)"/><text x="46.9747%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,302,114 samples, 1.62%)</title><rect x="46.7632%" y="149" width="1.6243%" height="15" fill="rgb(220,109,13)"/><text x="47.0132%" y="159.50"></text></g><g><title>adt_def (107,841 samples, 0.13%)</title><rect x="48.4848%" y="101" width="0.1345%" height="15" fill="rgb(232,18,1)"/><text x="48.7348%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (107,291 samples, 0.13%)</title><rect x="48.4854%" y="85" width="0.1338%" height="15" fill="rgb(215,41,42)"/><text x="48.7354%" y="95.50"></text></g><g><title>adt_sized_constraint (118,821 samples, 0.15%)</title><rect x="48.4817%" y="117" width="0.1482%" height="15" fill="rgb(224,123,36)"/><text x="48.7317%" y="127.50"></text></g><g><title>adt_sized_constraint (135,481 samples, 0.17%)</title><rect x="48.4645%" y="133" width="0.1690%" height="15" fill="rgb(240,125,3)"/><text x="48.7145%" y="143.50"></text></g><g><title>evaluate_obligation (202,392 samples, 0.25%)</title><rect x="48.3875%" y="165" width="0.2525%" height="15" fill="rgb(205,98,50)"/><text x="48.6375%" y="175.50"></text></g><g><title>adt_sized_constraint (165,652 samples, 0.21%)</title><rect x="48.4333%" y="149" width="0.2066%" height="15" fill="rgb(205,185,37)"/><text x="48.6833%" y="159.50"></text></g><g><title>item_types_checking (2,816,911 samples, 3.51%)</title><rect x="45.4070%" y="213" width="3.5140%" height="15" fill="rgb(238,207,15)"/><text x="45.6570%" y="223.50">ite..</text></g><g><title>check_mod_item_types (2,810,971 samples, 3.51%)</title><rect x="45.4144%" y="197" width="3.5066%" height="15" fill="rgb(213,199,42)"/><text x="45.6644%" y="207.50">che..</text></g><g><title>typeck (2,736,911 samples, 3.41%)</title><rect x="45.5068%" y="181" width="3.4142%" height="15" fill="rgb(235,201,11)"/><text x="45.7568%" y="191.50">typ..</text></g><g><title>late_bound_vars_map (143,811 samples, 0.18%)</title><rect x="49.2467%" y="165" width="0.1794%" height="15" fill="rgb(207,46,11)"/><text x="49.4967%" y="175.50"></text></g><g><title>resolve_lifetimes (127,571 samples, 0.16%)</title><rect x="49.2669%" y="149" width="0.1591%" height="15" fill="rgb(241,35,35)"/><text x="49.5169%" y="159.50"></text></g><g><title>fn_sig (277,703 samples, 0.35%)</title><rect x="49.1196%" y="181" width="0.3464%" height="15" fill="rgb(243,32,47)"/><text x="49.3696%" y="191.50"></text></g><g><title>type_collecting (554,846 samples, 0.69%)</title><rect x="48.9888%" y="213" width="0.6921%" height="15" fill="rgb(247,202,23)"/><text x="49.2388%" y="223.50"></text></g><g><title>collect_mod_item_types (542,636 samples, 0.68%)</title><rect x="49.0041%" y="197" width="0.6769%" height="15" fill="rgb(219,102,11)"/><text x="49.2541%" y="207.50"></text></g><g><title>adt_def (189,192 samples, 0.24%)</title><rect x="50.9312%" y="133" width="0.2360%" height="15" fill="rgb(243,110,44)"/><text x="51.1812%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (187,262 samples, 0.23%)</title><rect x="50.9336%" y="117" width="0.2336%" height="15" fill="rgb(222,74,54)"/><text x="51.1836%" y="127.50"></text></g><g><title>item_attrs (172,362 samples, 0.22%)</title><rect x="50.9522%" y="101" width="0.2150%" height="15" fill="rgb(216,99,12)"/><text x="51.2022%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (170,472 samples, 0.21%)</title><rect x="50.9546%" y="85" width="0.2127%" height="15" fill="rgb(226,22,26)"/><text x="51.2046%" y="95.50"></text></g><g><title>adt_sized_constraint (214,422 samples, 0.27%)</title><rect x="50.9216%" y="149" width="0.2675%" height="15" fill="rgb(217,163,10)"/><text x="51.1716%" y="159.50"></text></g><g><title>adt_sized_constraint (319,994 samples, 0.40%)</title><rect x="50.8083%" y="165" width="0.3992%" height="15" fill="rgb(213,25,53)"/><text x="51.0583%" y="175.50"></text></g><g><title>trait_impls_of (104,542 samples, 0.13%)</title><rect x="51.2517%" y="165" width="0.1304%" height="15" fill="rgb(252,105,26)"/><text x="51.5017%" y="175.50"></text></g><g><title>evaluate_obligation (832,539 samples, 1.04%)</title><rect x="50.4327%" y="181" width="1.0386%" height="15" fill="rgb(220,39,43)"/><text x="50.6827%" y="191.50"></text></g><g><title>param_env (243,024 samples, 0.30%)</title><rect x="51.5658%" y="181" width="0.3032%" height="15" fill="rgb(229,68,48)"/><text x="51.8158%" y="191.50"></text></g><g><title>predicates_of (97,531 samples, 0.12%)</title><rect x="51.8690%" y="181" width="0.1217%" height="15" fill="rgb(252,8,32)"/><text x="52.1190%" y="191.50"></text></g><g><title>predicates_defined_on (80,581 samples, 0.10%)</title><rect x="51.8901%" y="165" width="0.1005%" height="15" fill="rgb(223,20,43)"/><text x="52.1401%" y="175.50"></text></g><g><title>region_scope_tree (182,532 samples, 0.23%)</title><rect x="51.9907%" y="181" width="0.2277%" height="15" fill="rgb(229,81,49)"/><text x="52.2407%" y="191.50"></text></g><g><title>analysis (41,121,197 samples, 51.30%)</title><rect x="0.9227%" y="245" width="51.2969%" height="15" fill="rgb(236,28,36)"/><text x="1.1727%" y="255.50">analysis</text></g><g><title>type_check_crate (23,163,978 samples, 28.90%)</title><rect x="23.3236%" y="229" width="28.8961%" height="15" fill="rgb(249,185,26)"/><text x="23.5736%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,034,393 samples, 2.54%)</title><rect x="49.6818%" y="213" width="2.5378%" height="15" fill="rgb(249,174,33)"/><text x="49.9318%" y="223.50">wf..</text></g><g><title>check_item_well_formed (1,969,123 samples, 2.46%)</title><rect x="49.7632%" y="197" width="2.4564%" height="15" fill="rgb(233,201,37)"/><text x="50.0132%" y="207.50">ch..</text></g><g><title>codegen_crate (637,647 samples, 0.80%)</title><rect x="52.2334%" y="245" width="0.7954%" height="15" fill="rgb(221,78,26)"/><text x="52.4834%" y="255.50"></text></g><g><title>AST_validation (98,161 samples, 0.12%)</title><rect x="53.3207%" y="229" width="0.1225%" height="15" fill="rgb(250,127,30)"/><text x="53.5707%" y="239.50"></text></g><g><title>crate_injection (101,371 samples, 0.13%)</title><rect x="53.5178%" y="229" width="0.1265%" height="15" fill="rgb(230,49,44)"/><text x="53.7678%" y="239.50"></text></g><g><title>metadata_load_macro (607,944 samples, 0.76%)</title><rect x="80.7535%" y="197" width="0.7584%" height="15" fill="rgb(229,67,23)"/><text x="81.0035%" y="207.50"></text></g><g><title>macro_expand_crate (26,079,821 samples, 32.53%)</title><rect x="53.6443%" y="229" width="32.5335%" height="15" fill="rgb(249,83,47)"/><text x="53.8943%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (26,053,100 samples, 32.50%)</title><rect x="53.6776%" y="213" width="32.5001%" height="15" fill="rgb(215,43,3)"/><text x="53.9276%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (3,740,314 samples, 4.67%)</title><rect x="81.5119%" y="197" width="4.6659%" height="15" fill="rgb(238,154,13)"/><text x="81.7619%" y="207.50">metad..</text></g><g><title>metadata_register_crate (993,693 samples, 1.24%)</title><rect x="84.9382%" y="181" width="1.2396%" height="15" fill="rgb(219,56,2)"/><text x="85.1882%" y="191.50"></text></g><g><title>maybe_create_a_macro_crate (367,794 samples, 0.46%)</title><rect x="86.1795%" y="229" width="0.4588%" height="15" fill="rgb(233,0,4)"/><text x="86.4295%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (88,341 samples, 0.11%)</title><rect x="86.6383%" y="229" width="0.1102%" height="15" fill="rgb(235,30,7)"/><text x="86.8883%" y="239.50"></text></g><g><title>finalize_imports (325,664 samples, 0.41%)</title><rect x="86.7621%" y="213" width="0.4063%" height="15" fill="rgb(250,79,13)"/><text x="87.0121%" y="223.50"></text></g><g><title>late_resolve_crate (2,594,869 samples, 3.24%)</title><rect x="87.2251%" y="213" width="3.2370%" height="15" fill="rgb(211,146,34)"/><text x="87.4751%" y="223.50">lat..</text></g><g><title>configure_and_expand (30,096,175 samples, 37.54%)</title><rect x="53.0288%" y="245" width="37.5437%" height="15" fill="rgb(228,22,38)"/><text x="53.2788%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (3,065,464 samples, 3.82%)</title><rect x="86.7485%" y="229" width="3.8240%" height="15" fill="rgb(235,168,5)"/><text x="86.9985%" y="239.50">reso..</text></g><g><title>drop_ast (131,912 samples, 0.16%)</title><rect x="90.5725%" y="245" width="0.1646%" height="15" fill="rgb(221,155,16)"/><text x="90.8225%" y="255.50"></text></g><g><title>early_lint_checks (253,673 samples, 0.32%)</title><rect x="90.7603%" y="245" width="0.3164%" height="15" fill="rgb(215,215,53)"/><text x="91.0103%" y="255.50"></text></g><g><title>free_global_ctxt (3,076,874 samples, 3.84%)</title><rect x="91.0768%" y="245" width="3.8383%" height="15" fill="rgb(223,4,10)"/><text x="91.3268%" y="255.50">free..</text></g><g><title>crate_hash (82,591 samples, 0.10%)</title><rect x="95.0329%" y="229" width="0.1030%" height="15" fill="rgb(234,103,6)"/><text x="95.2829%" y="239.50"></text></g><g><title>generate_crate_metadata (181,212 samples, 0.23%)</title><rect x="94.9150%" y="245" width="0.2261%" height="15" fill="rgb(227,97,0)"/><text x="95.1650%" y="255.50"></text></g><g><title>hir_lowering (1,503,716 samples, 1.88%)</title><rect x="95.1411%" y="245" width="1.8758%" height="15" fill="rgb(234,150,53)"/><text x="95.3911%" y="255.50">h..</text></g><g><title>parse_crate (1,049,812 samples, 1.31%)</title><rect x="97.0794%" y="245" width="1.3096%" height="15" fill="rgb(228,201,54)"/><text x="97.3294%" y="255.50"></text></g><g><title>prepare_outputs (323,054 samples, 0.40%)</title><rect x="98.4009%" y="245" width="0.4030%" height="15" fill="rgb(222,22,37)"/><text x="98.6509%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (543,786 samples, 0.68%)</title><rect x="98.8039%" y="245" width="0.6783%" height="15" fill="rgb(237,53,32)"/><text x="99.0539%" y="255.50"></text></g><g><title>setup_global_ctxt (155,052 samples, 0.19%)</title><rect x="99.4955%" y="245" width="0.1934%" height="15" fill="rgb(233,25,53)"/><text x="99.7455%" y="255.50"></text></g><g><title>all (80,163,082 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(210,40,34)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (80,163,082 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,220,44)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (249,353 samples, 0.31%)</title><rect x="99.6889%" y="245" width="0.3111%" height="15" fill="rgb(235,28,35)"/><text x="99.9389%" y="255.50"></text></g></svg></svg>