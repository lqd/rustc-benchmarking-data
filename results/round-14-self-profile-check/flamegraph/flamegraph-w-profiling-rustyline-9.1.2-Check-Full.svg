<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,930,969 samples, 0.18%)</title><rect x="18.9339%" y="133" width="0.1783%" height="15" fill="rgb(227,0,7)"/><text x="19.1839%" y="143.50"></text></g><g><title>item_attrs (1,971,935 samples, 0.18%)</title><rect x="19.7786%" y="101" width="0.1821%" height="15" fill="rgb(217,0,24)"/><text x="20.0286%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,903,874 samples, 0.18%)</title><rect x="19.7849%" y="85" width="0.1758%" height="15" fill="rgb(221,193,54)"/><text x="20.0349%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,623,770 samples, 0.24%)</title><rect x="19.7285%" y="117" width="0.2422%" height="15" fill="rgb(248,212,6)"/><text x="19.9785%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,144,872 samples, 0.11%)</title><rect x="24.1468%" y="37" width="0.1057%" height="15" fill="rgb(208,68,35)"/><text x="24.3968%" y="47.50"></text></g><g><title>eval_to_const_value_raw (3,270,219 samples, 0.30%)</title><rect x="23.9762%" y="101" width="0.3019%" height="15" fill="rgb(232,128,0)"/><text x="24.2262%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,183,607 samples, 0.29%)</title><rect x="23.9842%" y="85" width="0.2939%" height="15" fill="rgb(207,160,47)"/><text x="24.2342%" y="95.50"></text></g><g><title>eval_to_allocation_raw (3,065,777 samples, 0.28%)</title><rect x="23.9951%" y="69" width="0.2831%" height="15" fill="rgb(228,23,34)"/><text x="24.2451%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,728,509 samples, 0.16%)</title><rect x="24.1186%" y="53" width="0.1596%" height="15" fill="rgb(218,30,26)"/><text x="24.3686%" y="63.50"></text></g><g><title>adt_drop_tys (1,950,364 samples, 0.18%)</title><rect x="24.4470%" y="85" width="0.1801%" height="15" fill="rgb(220,122,19)"/><text x="24.6970%" y="95.50"></text></g><g><title>is_copy_raw (6,556,188 samples, 0.61%)</title><rect x="24.6276%" y="85" width="0.6053%" height="15" fill="rgb(250,228,42)"/><text x="24.8776%" y="95.50"></text></g><g><title>evaluate_obligation (5,414,766 samples, 0.50%)</title><rect x="24.7330%" y="69" width="0.4999%" height="15" fill="rgb(240,193,28)"/><text x="24.9830%" y="79.50"></text></g><g><title>needs_drop_raw (9,541,033 samples, 0.88%)</title><rect x="24.3546%" y="101" width="0.8809%" height="15" fill="rgb(216,20,37)"/><text x="24.6046%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,848,965 samples, 0.17%)</title><rect x="25.5616%" y="85" width="0.1707%" height="15" fill="rgb(206,188,39)"/><text x="25.8116%" y="95.50"></text></g><g><title>resolve_instance (5,841,242 samples, 0.54%)</title><rect x="25.3237%" y="101" width="0.5393%" height="15" fill="rgb(217,207,13)"/><text x="25.5737%" y="111.50"></text></g><g><title>thir_body (17,730,512 samples, 1.64%)</title><rect x="25.8903%" y="101" width="1.6370%" height="15" fill="rgb(231,73,38)"/><text x="26.1403%" y="111.50"></text></g><g><title>mir_const (104,277,594 samples, 9.63%)</title><rect x="17.9187%" y="149" width="9.6275%" height="15" fill="rgb(225,20,46)"/><text x="18.1687%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (91,350,152 samples, 8.43%)</title><rect x="19.1122%" y="133" width="8.4340%" height="15" fill="rgb(210,31,41)"/><text x="19.3622%" y="143.50">unsafety_che..</text></g><g><title>mir_built (82,048,462 samples, 7.58%)</title><rect x="19.9710%" y="117" width="7.5752%" height="15" fill="rgb(221,200,47)"/><text x="20.2210%" y="127.50">mir_built</text></g><g><title>mir_const (1,885,982 samples, 0.17%)</title><rect x="27.6492%" y="133" width="0.1741%" height="15" fill="rgb(226,26,5)"/><text x="27.8992%" y="143.50"></text></g><g><title>unsafety_check_result (1,429,297 samples, 0.13%)</title><rect x="27.6914%" y="117" width="0.1320%" height="15" fill="rgb(249,33,26)"/><text x="27.9414%" y="127.50"></text></g><g><title>mir_built (1,268,846 samples, 0.12%)</title><rect x="27.7062%" y="101" width="0.1171%" height="15" fill="rgb(235,183,28)"/><text x="27.9562%" y="111.50"></text></g><g><title>mir_const_qualif (3,049,277 samples, 0.28%)</title><rect x="27.5462%" y="149" width="0.2815%" height="15" fill="rgb(221,5,38)"/><text x="27.7962%" y="159.50"></text></g><g><title>mir_promoted (118,734,785 samples, 10.96%)</title><rect x="16.8658%" y="165" width="10.9623%" height="15" fill="rgb(247,18,42)"/><text x="17.1158%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,196,286 samples, 0.20%)</title><rect x="27.8292%" y="165" width="0.2028%" height="15" fill="rgb(241,131,45)"/><text x="28.0792%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (5,616,306 samples, 0.52%)</title><rect x="28.0319%" y="165" width="0.5185%" height="15" fill="rgb(249,31,29)"/><text x="28.2819%" y="175.50"></text></g><g><title>normalize_projection_ty (3,629,341 samples, 0.34%)</title><rect x="28.2154%" y="149" width="0.3351%" height="15" fill="rgb(225,111,53)"/><text x="28.4654%" y="159.50"></text></g><g><title>type_op_normalize_predicate (1,350,043 samples, 0.12%)</title><rect x="28.5505%" y="165" width="0.1246%" height="15" fill="rgb(238,160,17)"/><text x="28.8005%" y="175.50"></text></g><g><title>type_op_prove_predicate (18,240,899 samples, 1.68%)</title><rect x="28.7111%" y="165" width="1.6841%" height="15" fill="rgb(214,148,48)"/><text x="28.9611%" y="175.50"></text></g><g><title>MIR_borrow_checking (323,400,950 samples, 29.86%)</title><rect x="0.5398%" y="197" width="29.8583%" height="15" fill="rgb(232,36,49)"/><text x="0.7898%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (321,982,682 samples, 29.73%)</title><rect x="0.6708%" y="181" width="29.7273%" height="15" fill="rgb(209,103,24)"/><text x="0.9208%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,516,287 samples, 0.14%)</title><rect x="30.3981%" y="197" width="0.1400%" height="15" fill="rgb(229,88,8)"/><text x="30.6481%" y="207.50"></text></g><g><title>hir_module_items (2,042,672 samples, 0.19%)</title><rect x="30.5381%" y="197" width="0.1886%" height="15" fill="rgb(213,181,19)"/><text x="30.7881%" y="207.50"></text></g><g><title>should_inherit_track_caller (1,255,504 samples, 0.12%)</title><rect x="31.0732%" y="149" width="0.1159%" height="15" fill="rgb(254,191,54)"/><text x="31.3232%" y="159.50"></text></g><g><title>codegen_fn_attrs (2,150,702 samples, 0.20%)</title><rect x="30.9922%" y="165" width="0.1986%" height="15" fill="rgb(241,83,37)"/><text x="31.2422%" y="175.50"></text></g><g><title>check_mod_attrs (4,968,421 samples, 0.46%)</title><rect x="30.7321%" y="181" width="0.4587%" height="15" fill="rgb(233,36,39)"/><text x="30.9821%" y="191.50"></text></g><g><title>check_mod_const_bodies (1,221,105 samples, 0.11%)</title><rect x="31.1908%" y="181" width="0.1127%" height="15" fill="rgb(226,3,54)"/><text x="31.4408%" y="191.50"></text></g><g><title>lookup_deprecation_entry (1,250,816 samples, 0.12%)</title><rect x="31.5530%" y="165" width="0.1155%" height="15" fill="rgb(245,192,40)"/><text x="31.8030%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (3,047,293 samples, 0.28%)</title><rect x="31.4111%" y="181" width="0.2813%" height="15" fill="rgb(238,167,29)"/><text x="31.6611%" y="191.50"></text></g><g><title>misc_checking_1 (10,766,311 samples, 0.99%)</title><rect x="30.7267%" y="197" width="0.9940%" height="15" fill="rgb(232,182,51)"/><text x="30.9767%" y="207.50"></text></g><g><title>check_mod_intrinsics (1,277,025 samples, 0.12%)</title><rect x="31.7232%" y="165" width="0.1179%" height="15" fill="rgb(231,60,39)"/><text x="31.9732%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (6,843,626 samples, 0.63%)</title><rect x="31.7210%" y="181" width="0.6318%" height="15" fill="rgb(208,69,12)"/><text x="31.9710%" y="191.50"></text></g><g><title>check_mod_liveness (5,542,171 samples, 0.51%)</title><rect x="31.8411%" y="165" width="0.5117%" height="15" fill="rgb(235,93,37)"/><text x="32.0911%" y="175.50"></text></g><g><title>mir_borrowck (1,442,299 samples, 0.13%)</title><rect x="33.6362%" y="69" width="0.1332%" height="15" fill="rgb(213,116,39)"/><text x="33.8862%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,093,465 samples, 0.19%)</title><rect x="33.5769%" y="85" width="0.1933%" height="15" fill="rgb(222,207,29)"/><text x="33.8269%" y="95.50"></text></g><g><title>mir_for_ctfe (2,645,800 samples, 0.24%)</title><rect x="33.5411%" y="101" width="0.2443%" height="15" fill="rgb(206,96,30)"/><text x="33.7911%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,571,923 samples, 0.33%)</title><rect x="33.4560%" y="149" width="0.3298%" height="15" fill="rgb(218,138,4)"/><text x="33.7060%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,535,222 samples, 0.33%)</title><rect x="33.4594%" y="133" width="0.3264%" height="15" fill="rgb(250,191,14)"/><text x="33.7094%" y="143.50"></text></g><g><title>eval_to_allocation_raw (3,475,032 samples, 0.32%)</title><rect x="33.4650%" y="117" width="0.3208%" height="15" fill="rgb(239,60,40)"/><text x="33.7150%" y="127.50"></text></g><g><title>misc_checking_2 (23,873,455 samples, 2.20%)</title><rect x="31.7207%" y="197" width="2.2041%" height="15" fill="rgb(206,27,48)"/><text x="31.9707%" y="207.50">m..</text></g><g><title>match_checking (17,027,329 samples, 1.57%)</title><rect x="32.3528%" y="181" width="1.5721%" height="15" fill="rgb(225,35,8)"/><text x="32.6028%" y="191.50"></text></g><g><title>check_match (16,607,184 samples, 1.53%)</title><rect x="32.3916%" y="165" width="1.5333%" height="15" fill="rgb(250,213,24)"/><text x="32.6416%" y="175.50"></text></g><g><title>check_private_in_public (4,953,275 samples, 0.46%)</title><rect x="33.9264%" y="181" width="0.4573%" height="15" fill="rgb(247,123,22)"/><text x="34.1764%" y="191.50"></text></g><g><title>death_checking (5,990,677 samples, 0.55%)</title><rect x="34.3837%" y="181" width="0.5531%" height="15" fill="rgb(231,138,38)"/><text x="34.6337%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,167,734 samples, 0.11%)</title><rect x="35.6044%" y="149" width="0.1078%" height="15" fill="rgb(231,145,46)"/><text x="35.8544%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,139,184 samples, 0.11%)</title><rect x="35.6071%" y="133" width="0.1052%" height="15" fill="rgb(251,118,11)"/><text x="35.8571%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,095,163 samples, 0.10%)</title><rect x="35.6111%" y="117" width="0.1011%" height="15" fill="rgb(217,147,25)"/><text x="35.8611%" y="127.50"></text></g><g><title>param_env (2,005,795 samples, 0.19%)</title><rect x="35.7123%" y="149" width="0.1852%" height="15" fill="rgb(247,81,37)"/><text x="35.9623%" y="159.50"></text></g><g><title>crate_lints (12,817,894 samples, 1.18%)</title><rect x="34.9371%" y="165" width="1.1834%" height="15" fill="rgb(209,12,38)"/><text x="35.1871%" y="175.50"></text></g><g><title>type_of (2,000,012 samples, 0.18%)</title><rect x="35.9358%" y="149" width="0.1847%" height="15" fill="rgb(227,1,9)"/><text x="36.1858%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,615,600 samples, 0.15%)</title><rect x="35.9713%" y="133" width="0.1492%" height="15" fill="rgb(248,47,43)"/><text x="36.2213%" y="143.50"></text></g><g><title>lint_checking (21,697,412 samples, 2.00%)</title><rect x="34.9368%" y="181" width="2.0032%" height="15" fill="rgb(221,10,30)"/><text x="35.1868%" y="191.50">l..</text></g><g><title>module_lints (8,876,958 samples, 0.82%)</title><rect x="36.1205%" y="165" width="0.8196%" height="15" fill="rgb(210,229,1)"/><text x="36.3705%" y="175.50"></text></g><g><title>lint_mod (8,848,168 samples, 0.82%)</title><rect x="36.1231%" y="149" width="0.8169%" height="15" fill="rgb(222,148,37)"/><text x="36.3731%" y="159.50"></text></g><g><title>privacy_access_levels (3,072,124 samples, 0.28%)</title><rect x="36.9400%" y="181" width="0.2836%" height="15" fill="rgb(234,67,33)"/><text x="37.1900%" y="191.50"></text></g><g><title>privacy_checking_modules (12,517,940 samples, 1.16%)</title><rect x="37.2237%" y="181" width="1.1557%" height="15" fill="rgb(247,98,35)"/><text x="37.4737%" y="191.50"></text></g><g><title>check_mod_privacy (12,498,900 samples, 1.15%)</title><rect x="37.2254%" y="165" width="1.1540%" height="15" fill="rgb(247,138,52)"/><text x="37.4754%" y="175.50"></text></g><g><title>misc_checking_3 (48,363,990 samples, 4.47%)</title><rect x="33.9249%" y="197" width="4.4652%" height="15" fill="rgb(213,79,30)"/><text x="34.1749%" y="207.50">misc_..</text></g><g><title>impl_parent (6,546,266 samples, 0.60%)</title><rect x="39.5777%" y="133" width="0.6044%" height="15" fill="rgb(246,177,23)"/><text x="39.8277%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (3,549,959 samples, 0.33%)</title><rect x="39.8544%" y="117" width="0.3278%" height="15" fill="rgb(230,62,27)"/><text x="40.1044%" y="127.50"></text></g><g><title>impl_trait_ref (12,177,715 samples, 1.12%)</title><rect x="40.1821%" y="133" width="1.1243%" height="15" fill="rgb(216,154,8)"/><text x="40.4321%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (9,007,053 samples, 0.83%)</title><rect x="40.4749%" y="117" width="0.8316%" height="15" fill="rgb(244,35,45)"/><text x="40.7249%" y="127.50"></text></g><g><title>trait_impls_of (2,919,357 samples, 0.27%)</title><rect x="41.3486%" y="133" width="0.2695%" height="15" fill="rgb(251,115,12)"/><text x="41.5986%" y="143.50"></text></g><g><title>implementations_of_trait (1,109,525 samples, 0.10%)</title><rect x="41.5157%" y="117" width="0.1024%" height="15" fill="rgb(240,54,50)"/><text x="41.7657%" y="127.50"></text></g><g><title>coherent_trait (34,299,553 samples, 3.17%)</title><rect x="38.4535%" y="165" width="3.1667%" height="15" fill="rgb(233,84,52)"/><text x="38.7035%" y="175.50">coh..</text></g><g><title>specialization_graph_of (33,534,775 samples, 3.10%)</title><rect x="38.5241%" y="149" width="3.0961%" height="15" fill="rgb(207,117,47)"/><text x="38.7741%" y="159.50">spe..</text></g><g><title>coherence_checking (34,866,189 samples, 3.22%)</title><rect x="38.4491%" y="181" width="3.2191%" height="15" fill="rgb(249,43,39)"/><text x="38.6991%" y="191.50">coh..</text></g><g><title>associated_item (1,298,982 samples, 0.12%)</title><rect x="67.4421%" y="117" width="0.1199%" height="15" fill="rgb(209,38,44)"/><text x="67.6921%" y="127.50"></text></g><g><title>associated_items (1,962,501 samples, 0.18%)</title><rect x="67.3924%" y="133" width="0.1812%" height="15" fill="rgb(236,212,23)"/><text x="67.6424%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,487,991 samples, 0.14%)</title><rect x="67.7901%" y="117" width="0.1374%" height="15" fill="rgb(242,79,21)"/><text x="68.0401%" y="127.50"></text></g><g><title>dropck_outlives (3,487,917 samples, 0.32%)</title><rect x="67.6177%" y="133" width="0.3220%" height="15" fill="rgb(211,96,35)"/><text x="67.8677%" y="143.50"></text></g><g><title>generics_of (2,141,605 samples, 0.20%)</title><rect x="69.3995%" y="117" width="0.1977%" height="15" fill="rgb(253,215,40)"/><text x="69.6495%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,572,241 samples, 0.15%)</title><rect x="69.4521%" y="101" width="0.1452%" height="15" fill="rgb(211,81,21)"/><text x="69.7021%" y="111.50"></text></g><g><title>predicates_of (1,908,086 samples, 0.18%)</title><rect x="69.7165%" y="117" width="0.1762%" height="15" fill="rgb(208,190,38)"/><text x="69.9665%" y="127.50"></text></g><g><title>specializes (3,175,694 samples, 0.29%)</title><rect x="69.8927%" y="117" width="0.2932%" height="15" fill="rgb(235,213,38)"/><text x="70.1427%" y="127.50"></text></g><g><title>param_env (1,862,953 samples, 0.17%)</title><rect x="70.0139%" y="101" width="0.1720%" height="15" fill="rgb(237,122,38)"/><text x="70.2639%" y="111.50"></text></g><g><title>evaluate_obligation (24,917,383 samples, 2.30%)</title><rect x="67.9635%" y="133" width="2.3005%" height="15" fill="rgb(244,218,35)"/><text x="68.2135%" y="143.50">e..</text></g><g><title>evaluate_obligation (2,012,781 samples, 0.19%)</title><rect x="70.7316%" y="117" width="0.1858%" height="15" fill="rgb(240,68,47)"/><text x="70.9816%" y="127.50"></text></g><g><title>method_autoderef_steps (4,080,293 samples, 0.38%)</title><rect x="70.5489%" y="133" width="0.3767%" height="15" fill="rgb(210,16,53)"/><text x="70.7989%" y="143.50"></text></g><g><title>predicates_of (1,566,005 samples, 0.14%)</title><rect x="70.9872%" y="133" width="0.1446%" height="15" fill="rgb(235,124,12)"/><text x="71.2372%" y="143.50"></text></g><g><title>predicates_defined_on (1,108,058 samples, 0.10%)</title><rect x="71.0295%" y="117" width="0.1023%" height="15" fill="rgb(224,169,11)"/><text x="71.2795%" y="127.50"></text></g><g><title>evaluate_obligation (2,741,967 samples, 0.25%)</title><rect x="75.1031%" y="117" width="0.2532%" height="15" fill="rgb(250,166,2)"/><text x="75.3531%" y="127.50"></text></g><g><title>typeck (48,024,675 samples, 4.43%)</title><rect x="71.1900%" y="133" width="4.4339%" height="15" fill="rgb(242,216,29)"/><text x="71.4400%" y="143.50">typeck</text></g><g><title>item_bodies_checking (367,867,506 samples, 33.96%)</title><rect x="41.6945%" y="181" width="33.9637%" height="15" fill="rgb(230,116,27)"/><text x="41.9445%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (367,864,746 samples, 33.96%)</title><rect x="41.6948%" y="165" width="33.9634%" height="15" fill="rgb(228,99,48)"/><text x="41.9448%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (366,681,502 samples, 33.85%)</title><rect x="41.8040%" y="149" width="33.8542%" height="15" fill="rgb(253,11,6)"/><text x="42.0540%" y="159.50">typeck</text></g><g><title>evaluate_obligation (1,207,834 samples, 0.11%)</title><rect x="76.6033%" y="133" width="0.1115%" height="15" fill="rgb(247,143,39)"/><text x="76.8533%" y="143.50"></text></g><g><title>item_types_checking (11,605,880 samples, 1.07%)</title><rect x="75.6582%" y="181" width="1.0715%" height="15" fill="rgb(236,97,10)"/><text x="75.9082%" y="191.50"></text></g><g><title>check_mod_item_types (11,586,530 samples, 1.07%)</title><rect x="75.6600%" y="165" width="1.0697%" height="15" fill="rgb(233,208,19)"/><text x="75.9100%" y="175.50"></text></g><g><title>typeck (3,254,776 samples, 0.30%)</title><rect x="76.4292%" y="149" width="0.3005%" height="15" fill="rgb(216,164,2)"/><text x="76.6792%" y="159.50"></text></g><g><title>fn_sig (2,829,653 samples, 0.26%)</title><rect x="76.9582%" y="149" width="0.2613%" height="15" fill="rgb(220,129,5)"/><text x="77.2082%" y="159.50"></text></g><g><title>lint_levels (3,055,674 samples, 0.28%)</title><rect x="77.3700%" y="101" width="0.2821%" height="15" fill="rgb(242,17,10)"/><text x="77.6200%" y="111.50"></text></g><g><title>is_late_bound_map (3,748,485 samples, 0.35%)</title><rect x="77.3061%" y="133" width="0.3461%" height="15" fill="rgb(242,107,0)"/><text x="77.5561%" y="143.50"></text></g><g><title>resolve_lifetimes (3,713,035 samples, 0.34%)</title><rect x="77.3093%" y="117" width="0.3428%" height="15" fill="rgb(251,28,31)"/><text x="77.5593%" y="127.50"></text></g><g><title>named_region_map (2,374,251 samples, 0.22%)</title><rect x="77.6521%" y="133" width="0.2192%" height="15" fill="rgb(233,223,10)"/><text x="77.9021%" y="143.50"></text></g><g><title>resolve_lifetimes (2,173,779 samples, 0.20%)</title><rect x="77.6706%" y="117" width="0.2007%" height="15" fill="rgb(215,21,27)"/><text x="77.9206%" y="127.50"></text></g><g><title>generics_of (7,159,931 samples, 0.66%)</title><rect x="77.2194%" y="149" width="0.6610%" height="15" fill="rgb(232,23,21)"/><text x="77.4694%" y="159.50"></text></g><g><title>explicit_predicates_of (1,157,235 samples, 0.11%)</title><rect x="78.0577%" y="117" width="0.1068%" height="15" fill="rgb(244,5,23)"/><text x="78.3077%" y="127.50"></text></g><g><title>predicates_of (4,010,688 samples, 0.37%)</title><rect x="77.9219%" y="149" width="0.3703%" height="15" fill="rgb(226,81,46)"/><text x="78.1719%" y="159.50"></text></g><g><title>predicates_defined_on (3,298,099 samples, 0.30%)</title><rect x="77.9877%" y="133" width="0.3045%" height="15" fill="rgb(247,70,30)"/><text x="78.2377%" y="143.50"></text></g><g><title>inferred_outlives_of (1,382,083 samples, 0.13%)</title><rect x="78.1646%" y="117" width="0.1276%" height="15" fill="rgb(212,68,19)"/><text x="78.4146%" y="127.50"></text></g><g><title>inferred_outlives_crate (1,225,483 samples, 0.11%)</title><rect x="78.1790%" y="101" width="0.1131%" height="15" fill="rgb(240,187,13)"/><text x="78.4290%" y="111.50"></text></g><g><title>type_collecting (17,828,559 samples, 1.65%)</title><rect x="76.7317%" y="181" width="1.6460%" height="15" fill="rgb(223,113,26)"/><text x="76.9817%" y="191.50"></text></g><g><title>collect_mod_item_types (17,805,699 samples, 1.64%)</title><rect x="76.7338%" y="165" width="1.6439%" height="15" fill="rgb(206,192,2)"/><text x="76.9838%" y="175.50"></text></g><g><title>evaluate_obligation (2,207,462 samples, 0.20%)</title><rect x="80.1559%" y="149" width="0.2038%" height="15" fill="rgb(241,108,4)"/><text x="80.4059%" y="159.50"></text></g><g><title>implied_outlives_bounds (1,223,894 samples, 0.11%)</title><rect x="80.3617%" y="149" width="0.1130%" height="15" fill="rgb(247,173,49)"/><text x="80.6117%" y="159.50"></text></g><g><title>param_env (2,542,157 samples, 0.23%)</title><rect x="80.4870%" y="149" width="0.2347%" height="15" fill="rgb(224,114,35)"/><text x="80.7370%" y="159.50"></text></g><g><title>region_scope_tree (4,777,361 samples, 0.44%)</title><rect x="80.7274%" y="149" width="0.4411%" height="15" fill="rgb(245,159,27)"/><text x="80.9774%" y="159.50"></text></g><g><title>check_impl_item_well_formed (28,056,763 samples, 2.59%)</title><rect x="78.5880%" y="165" width="2.5904%" height="15" fill="rgb(245,172,44)"/><text x="78.8380%" y="175.50">ch..</text></g><g><title>evaluate_obligation (3,167,363 samples, 0.29%)</title><rect x="81.8798%" y="149" width="0.2924%" height="15" fill="rgb(236,23,11)"/><text x="82.1298%" y="159.50"></text></g><g><title>param_env (1,653,664 samples, 0.15%)</title><rect x="82.2833%" y="149" width="0.1527%" height="15" fill="rgb(205,117,38)"/><text x="82.5333%" y="159.50"></text></g><g><title>check_item_well_formed (15,527,463 samples, 1.43%)</title><rect x="81.1784%" y="165" width="1.4336%" height="15" fill="rgb(237,72,25)"/><text x="81.4284%" y="175.50"></text></g><g><title>analysis (896,208,442 samples, 82.74%)</title><rect x="0.2579%" y="213" width="82.7432%" height="15" fill="rgb(244,70,9)"/><text x="0.5079%" y="223.50">analysis</text></g><g><title>type_check_crate (483,190,852 samples, 44.61%)</title><rect x="38.3901%" y="197" width="44.6110%" height="15" fill="rgb(217,125,39)"/><text x="38.6401%" y="207.50">type_check_crate</text></g><g><title>wf_checking (50,010,388 samples, 4.62%)</title><rect x="78.3839%" y="181" width="4.6173%" height="15" fill="rgb(235,36,10)"/><text x="78.6339%" y="191.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (4,215,180 samples, 0.39%)</title><rect x="82.6120%" y="165" width="0.3892%" height="15" fill="rgb(251,123,47)"/><text x="82.8620%" y="175.50"></text></g><g><title>AST_validation (1,533,247 samples, 0.14%)</title><rect x="83.0553%" y="197" width="0.1416%" height="15" fill="rgb(221,13,13)"/><text x="83.3053%" y="207.50"></text></g><g><title>metadata_register_crate (1,828,550 samples, 0.17%)</title><rect x="90.2891%" y="165" width="0.1688%" height="15" fill="rgb(238,131,9)"/><text x="90.5391%" y="175.50"></text></g><g><title>macro_expand_crate (79,575,258 samples, 7.35%)</title><rect x="83.2918%" y="197" width="7.3469%" height="15" fill="rgb(211,50,8)"/><text x="83.5418%" y="207.50">macro_expa..</text></g><g><title>expand_crate (79,564,948 samples, 7.35%)</title><rect x="83.2927%" y="181" width="7.3459%" height="15" fill="rgb(245,182,24)"/><text x="83.5427%" y="191.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (1,957,033 samples, 0.18%)</title><rect x="90.4579%" y="165" width="0.1807%" height="15" fill="rgb(242,14,37)"/><text x="90.7079%" y="175.50"></text></g><g><title>late_resolve_crate (20,757,841 samples, 1.92%)</title><rect x="90.7776%" y="181" width="1.9165%" height="15" fill="rgb(246,228,12)"/><text x="91.0276%" y="191.50">l..</text></g><g><title>resolve_check_unused (1,306,375 samples, 0.12%)</title><rect x="92.7050%" y="181" width="0.1206%" height="15" fill="rgb(213,55,15)"/><text x="92.9550%" y="191.50"></text></g><g><title>configure_and_expand (106,810,572 samples, 9.86%)</title><rect x="83.0451%" y="213" width="9.8614%" height="15" fill="rgb(209,9,3)"/><text x="83.2951%" y="223.50">configure_and_..</text></g><g><title>resolve_crate (24,339,022 samples, 2.25%)</title><rect x="90.6594%" y="197" width="2.2471%" height="15" fill="rgb(230,59,30)"/><text x="90.9094%" y="207.50">r..</text></g><g><title>drop_ast (2,802,321 samples, 0.26%)</title><rect x="92.9065%" y="213" width="0.2587%" height="15" fill="rgb(209,121,21)"/><text x="93.1565%" y="223.50"></text></g><g><title>early_lint_checks (5,157,948 samples, 0.48%)</title><rect x="93.1676%" y="213" width="0.4762%" height="15" fill="rgb(220,109,13)"/><text x="93.4176%" y="223.50"></text></g><g><title>free_global_ctxt (14,221,458 samples, 1.31%)</title><rect x="93.6438%" y="213" width="1.3130%" height="15" fill="rgb(232,18,1)"/><text x="93.8938%" y="223.50"></text></g><g><title>generate_crate_metadata (10,718,049 samples, 0.99%)</title><rect x="94.9568%" y="213" width="0.9896%" height="15" fill="rgb(215,41,42)"/><text x="95.2068%" y="223.50"></text></g><g><title>hir_lowering (35,236,643 samples, 3.25%)</title><rect x="95.9464%" y="213" width="3.2533%" height="15" fill="rgb(224,123,36)"/><text x="96.1964%" y="223.50">hir..</text></g><g><title>parse_crate (3,669,631 samples, 0.34%)</title><rect x="99.2047%" y="213" width="0.3388%" height="15" fill="rgb(240,125,3)"/><text x="99.4547%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (3,694,371 samples, 0.34%)</title><rect x="99.5689%" y="213" width="0.3411%" height="15" fill="rgb(205,98,50)"/><text x="99.8189%" y="223.50"></text></g><g><title>all (1,083,120,117 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,083,120,117 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>