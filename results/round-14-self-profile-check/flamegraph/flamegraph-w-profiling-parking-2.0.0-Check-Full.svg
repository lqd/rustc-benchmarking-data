<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (113,091 samples, 0.26%)</title><rect x="8.3672%" y="117" width="0.2618%" height="15" fill="rgb(227,0,7)"/><text x="8.6172%" y="127.50"></text></g><g><title>item_attrs (140,972 samples, 0.33%)</title><rect x="9.0071%" y="85" width="0.3263%" height="15" fill="rgb(217,0,24)"/><text x="9.2571%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (137,362 samples, 0.32%)</title><rect x="9.0155%" y="69" width="0.3180%" height="15" fill="rgb(221,193,54)"/><text x="9.2655%" y="79.50"></text></g><g><title>codegen_fn_attrs (191,452 samples, 0.44%)</title><rect x="8.9026%" y="101" width="0.4432%" height="15" fill="rgb(248,212,6)"/><text x="9.1526%" y="111.50"></text></g><g><title>adt_drop_tys (113,183 samples, 0.26%)</title><rect x="11.0616%" y="69" width="0.2620%" height="15" fill="rgb(208,68,35)"/><text x="11.3116%" y="79.50"></text></g><g><title>predicates_of (47,501 samples, 0.11%)</title><rect x="11.9683%" y="37" width="0.1100%" height="15" fill="rgb(232,128,0)"/><text x="12.2183%" y="47.50"></text></g><g><title>needs_drop_raw (612,098 samples, 1.42%)</title><rect x="10.9815%" y="85" width="1.4170%" height="15" fill="rgb(207,160,47)"/><text x="11.2315%" y="95.50"></text></g><g><title>is_copy_raw (464,284 samples, 1.07%)</title><rect x="11.3237%" y="69" width="1.0748%" height="15" fill="rgb(228,23,34)"/><text x="11.5737%" y="79.50"></text></g><g><title>evaluate_obligation (424,564 samples, 0.98%)</title><rect x="11.4156%" y="53" width="0.9828%" height="15" fill="rgb(218,30,26)"/><text x="11.6656%" y="63.50"></text></g><g><title>trait_impls_of (136,411 samples, 0.32%)</title><rect x="12.0826%" y="37" width="0.3158%" height="15" fill="rgb(220,122,19)"/><text x="12.3326%" y="47.50"></text></g><g><title>specialization_graph_of (96,321 samples, 0.22%)</title><rect x="12.6090%" y="69" width="0.2230%" height="15" fill="rgb(250,228,42)"/><text x="12.8590%" y="79.50"></text></g><g><title>resolve_instance (212,092 samples, 0.49%)</title><rect x="12.3984%" y="85" width="0.4910%" height="15" fill="rgb(240,193,28)"/><text x="12.6484%" y="95.50"></text></g><g><title>thir_body (253,495 samples, 0.59%)</title><rect x="12.9009%" y="85" width="0.5868%" height="15" fill="rgb(216,20,37)"/><text x="13.1509%" y="95.50"></text></g><g><title>mir_const (2,435,595 samples, 5.64%)</title><rect x="7.8570%" y="133" width="5.6382%" height="15" fill="rgb(206,188,39)"/><text x="8.1070%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (2,102,102 samples, 4.87%)</title><rect x="8.6290%" y="117" width="4.8662%" height="15" fill="rgb(217,207,13)"/><text x="8.8790%" y="127.50">unsafe..</text></g><g><title>mir_built (1,792,468 samples, 4.15%)</title><rect x="9.3458%" y="101" width="4.1494%" height="15" fill="rgb(231,73,38)"/><text x="9.5958%" y="111.50">mir_b..</text></g><g><title>mir_promoted (2,654,998 samples, 6.15%)</title><rect x="7.3687%" y="149" width="6.1461%" height="15" fill="rgb(225,20,46)"/><text x="7.6187%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (76,071 samples, 0.18%)</title><rect x="13.5148%" y="149" width="0.1761%" height="15" fill="rgb(210,31,41)"/><text x="13.7648%" y="159.50"></text></g><g><title>type_op_prove_predicate (462,435 samples, 1.07%)</title><rect x="13.7770%" y="149" width="1.0705%" height="15" fill="rgb(221,200,47)"/><text x="14.0270%" y="159.50"></text></g><g><title>MIR_borrow_checking (5,887,835 samples, 13.63%)</title><rect x="1.2239%" y="181" width="13.6298%" height="15" fill="rgb(226,26,5)"/><text x="1.4739%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (5,863,785 samples, 13.57%)</title><rect x="1.2796%" y="165" width="13.5741%" height="15" fill="rgb(249,33,26)"/><text x="1.5296%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (90,531 samples, 0.21%)</title><rect x="14.8716%" y="181" width="0.2096%" height="15" fill="rgb(235,183,28)"/><text x="15.1216%" y="191.50"></text></g><g><title>get_lang_items (52,501 samples, 0.12%)</title><rect x="15.4004%" y="133" width="0.1215%" height="15" fill="rgb(221,5,38)"/><text x="15.6504%" y="143.50"></text></g><g><title>should_inherit_track_caller (94,502 samples, 0.22%)</title><rect x="15.5219%" y="133" width="0.2188%" height="15" fill="rgb(247,18,42)"/><text x="15.7719%" y="143.50"></text></g><g><title>codegen_fn_attrs (206,293 samples, 0.48%)</title><rect x="15.2905%" y="149" width="0.4776%" height="15" fill="rgb(241,131,45)"/><text x="15.5405%" y="159.50"></text></g><g><title>check_mod_attrs (279,023 samples, 0.65%)</title><rect x="15.1224%" y="165" width="0.6459%" height="15" fill="rgb(249,31,29)"/><text x="15.3724%" y="175.50"></text></g><g><title>lookup_deprecation_entry (62,541 samples, 0.14%)</title><rect x="16.0569%" y="149" width="0.1448%" height="15" fill="rgb(225,111,53)"/><text x="16.3069%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (185,712 samples, 0.43%)</title><rect x="15.8978%" y="165" width="0.4299%" height="15" fill="rgb(238,160,17)"/><text x="16.1478%" y="175.50"></text></g><g><title>misc_checking_1 (567,737 samples, 1.31%)</title><rect x="15.0831%" y="181" width="1.3143%" height="15" fill="rgb(214,148,48)"/><text x="15.3331%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (157,391 samples, 0.36%)</title><rect x="16.4025%" y="165" width="0.3643%" height="15" fill="rgb(232,36,49)"/><text x="16.6525%" y="175.50"></text></g><g><title>check_mod_liveness (128,501 samples, 0.30%)</title><rect x="16.4694%" y="149" width="0.2975%" height="15" fill="rgb(209,103,24)"/><text x="16.7194%" y="159.50"></text></g><g><title>mir_borrowck (431,364 samples, 1.00%)</title><rect x="17.9685%" y="53" width="0.9986%" height="15" fill="rgb(229,88,8)"/><text x="18.2185%" y="63.50"></text></g><g><title>eval_to_const_value_raw (738,088 samples, 1.71%)</title><rect x="17.2608%" y="133" width="1.7086%" height="15" fill="rgb(213,181,19)"/><text x="17.5108%" y="143.50"></text></g><g><title>eval_to_const_value_raw (729,738 samples, 1.69%)</title><rect x="17.2802%" y="117" width="1.6893%" height="15" fill="rgb(254,191,54)"/><text x="17.5302%" y="127.50"></text></g><g><title>eval_to_allocation_raw (720,718 samples, 1.67%)</title><rect x="17.3011%" y="101" width="1.6684%" height="15" fill="rgb(241,83,37)"/><text x="17.5511%" y="111.50"></text></g><g><title>mir_for_ctfe (613,686 samples, 1.42%)</title><rect x="17.5488%" y="85" width="1.4206%" height="15" fill="rgb(233,36,39)"/><text x="17.7988%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (561,685 samples, 1.30%)</title><rect x="17.6692%" y="69" width="1.3003%" height="15" fill="rgb(226,3,54)"/><text x="17.9192%" y="79.50"></text></g><g><title>mir_const_qualif (201,532 samples, 0.47%)</title><rect x="18.9801%" y="133" width="0.4665%" height="15" fill="rgb(245,192,40)"/><text x="19.2301%" y="143.50"></text></g><g><title>mir_const (161,422 samples, 0.37%)</title><rect x="19.0730%" y="117" width="0.3737%" height="15" fill="rgb(238,167,29)"/><text x="19.3230%" y="127.50"></text></g><g><title>unsafety_check_result (109,711 samples, 0.25%)</title><rect x="19.1927%" y="101" width="0.2540%" height="15" fill="rgb(232,182,51)"/><text x="19.4427%" y="111.50"></text></g><g><title>mir_built (75,461 samples, 0.17%)</title><rect x="19.2720%" y="85" width="0.1747%" height="15" fill="rgb(231,60,39)"/><text x="19.5220%" y="95.50"></text></g><g><title>misc_checking_2 (1,323,805 samples, 3.06%)</title><rect x="16.3973%" y="181" width="3.0645%" height="15" fill="rgb(208,69,12)"/><text x="16.6473%" y="191.50">mis..</text></g><g><title>match_checking (1,164,184 samples, 2.69%)</title><rect x="16.7668%" y="165" width="2.6950%" height="15" fill="rgb(235,93,37)"/><text x="17.0168%" y="175.50">ma..</text></g><g><title>check_match (1,154,874 samples, 2.67%)</title><rect x="16.7884%" y="149" width="2.6734%" height="15" fill="rgb(213,116,39)"/><text x="17.0384%" y="159.50">ch..</text></g><g><title>check_private_in_public (62,900 samples, 0.15%)</title><rect x="19.4819%" y="165" width="0.1456%" height="15" fill="rgb(222,207,29)"/><text x="19.7319%" y="175.50"></text></g><g><title>death_checking (162,312 samples, 0.38%)</title><rect x="19.6275%" y="165" width="0.3757%" height="15" fill="rgb(206,96,30)"/><text x="19.8775%" y="175.50"></text></g><g><title>lint_levels (51,471 samples, 0.12%)</title><rect x="19.8841%" y="149" width="0.1192%" height="15" fill="rgb(218,138,4)"/><text x="20.1341%" y="159.50"></text></g><g><title>param_env (91,091 samples, 0.21%)</title><rect x="21.1041%" y="133" width="0.2109%" height="15" fill="rgb(250,191,14)"/><text x="21.3541%" y="143.50"></text></g><g><title>crate_lints (1,624,738 samples, 3.76%)</title><rect x="20.0070%" y="149" width="3.7611%" height="15" fill="rgb(239,60,40)"/><text x="20.2570%" y="159.50">crat..</text></g><g><title>type_of (1,017,092 samples, 2.35%)</title><rect x="21.4136%" y="133" width="2.3545%" height="15" fill="rgb(206,27,48)"/><text x="21.6636%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (781,891 samples, 1.81%)</title><rect x="21.9581%" y="117" width="1.8100%" height="15" fill="rgb(225,35,8)"/><text x="22.2081%" y="127.50">m..</text></g><g><title>lint_checking (1,729,309 samples, 4.00%)</title><rect x="20.0033%" y="165" width="4.0032%" height="15" fill="rgb(250,213,24)"/><text x="20.2533%" y="175.50">lint..</text></g><g><title>module_lints (102,971 samples, 0.24%)</title><rect x="23.7681%" y="149" width="0.2384%" height="15" fill="rgb(247,123,22)"/><text x="24.0181%" y="159.50"></text></g><g><title>lint_mod (100,781 samples, 0.23%)</title><rect x="23.7732%" y="133" width="0.2333%" height="15" fill="rgb(231,138,38)"/><text x="24.0232%" y="143.50"></text></g><g><title>privacy_access_levels (76,670 samples, 0.18%)</title><rect x="24.0065%" y="165" width="0.1775%" height="15" fill="rgb(231,145,46)"/><text x="24.2565%" y="175.50"></text></g><g><title>privacy_checking_modules (165,072 samples, 0.38%)</title><rect x="24.1839%" y="165" width="0.3821%" height="15" fill="rgb(251,118,11)"/><text x="24.4339%" y="175.50"></text></g><g><title>check_mod_privacy (163,562 samples, 0.38%)</title><rect x="24.1874%" y="149" width="0.3786%" height="15" fill="rgb(217,147,25)"/><text x="24.4374%" y="159.50"></text></g><g><title>misc_checking_3 (2,218,554 samples, 5.14%)</title><rect x="19.4618%" y="181" width="5.1358%" height="15" fill="rgb(247,81,37)"/><text x="19.7118%" y="191.50">misc_c..</text></g><g><title>impl_parent (1,419,525 samples, 3.29%)</title><rect x="29.7996%" y="117" width="3.2861%" height="15" fill="rgb(209,12,38)"/><text x="30.0496%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (899,048 samples, 2.08%)</title><rect x="31.0045%" y="101" width="2.0812%" height="15" fill="rgb(227,1,9)"/><text x="31.2545%" y="111.50">m..</text></g><g><title>impl_trait_ref (3,832,312 samples, 8.87%)</title><rect x="33.0857%" y="117" width="8.8715%" height="15" fill="rgb(248,47,43)"/><text x="33.3357%" y="127.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,323,408 samples, 7.69%)</title><rect x="34.2638%" y="101" width="7.6934%" height="15" fill="rgb(221,10,30)"/><text x="34.5138%" y="111.50">metadata_de..</text></g><g><title>coherent_trait (7,872,729 samples, 18.22%)</title><rect x="24.6898%" y="149" width="18.2247%" height="15" fill="rgb(210,229,1)"/><text x="24.9398%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (7,863,929 samples, 18.20%)</title><rect x="24.7102%" y="133" width="18.2043%" height="15" fill="rgb(222,148,37)"/><text x="24.9602%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (412,053 samples, 0.95%)</title><rect x="41.9606%" y="117" width="0.9539%" height="15" fill="rgb(234,67,33)"/><text x="42.2106%" y="127.50"></text></g><g><title>implementations_of_trait (87,890 samples, 0.20%)</title><rect x="42.7110%" y="101" width="0.2035%" height="15" fill="rgb(247,98,35)"/><text x="42.9610%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (75,360 samples, 0.17%)</title><rect x="42.7400%" y="85" width="0.1745%" height="15" fill="rgb(247,138,52)"/><text x="42.9900%" y="95.50"></text></g><g><title>coherence_checking (7,924,329 samples, 18.34%)</title><rect x="24.6615%" y="165" width="18.3441%" height="15" fill="rgb(213,79,30)"/><text x="24.9115%" y="175.50">coherence_checking</text></g><g><title>adt_def (48,930 samples, 0.11%)</title><rect x="53.5182%" y="101" width="0.1133%" height="15" fill="rgb(246,177,23)"/><text x="53.7682%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (47,790 samples, 0.11%)</title><rect x="53.5208%" y="85" width="0.1106%" height="15" fill="rgb(230,62,27)"/><text x="53.7708%" y="95.50"></text></g><g><title>adt_sized_constraint (65,651 samples, 0.15%)</title><rect x="53.5045%" y="117" width="0.1520%" height="15" fill="rgb(216,154,8)"/><text x="53.7545%" y="127.50"></text></g><g><title>associated_item (205,761 samples, 0.48%)</title><rect x="53.8752%" y="101" width="0.4763%" height="15" fill="rgb(244,35,45)"/><text x="54.1252%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (167,600 samples, 0.39%)</title><rect x="53.9636%" y="85" width="0.3880%" height="15" fill="rgb(251,115,12)"/><text x="54.2136%" y="95.50"></text></g><g><title>associated_items (316,901 samples, 0.73%)</title><rect x="53.6598%" y="117" width="0.7336%" height="15" fill="rgb(240,54,50)"/><text x="53.9098%" y="127.50"></text></g><g><title>adt_def (124,291 samples, 0.29%)</title><rect x="54.8692%" y="85" width="0.2877%" height="15" fill="rgb(233,84,52)"/><text x="55.1192%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (121,731 samples, 0.28%)</title><rect x="54.8751%" y="69" width="0.2818%" height="15" fill="rgb(207,117,47)"/><text x="55.1251%" y="79.50"></text></g><g><title>item_attrs (48,741 samples, 0.11%)</title><rect x="55.0441%" y="53" width="0.1128%" height="15" fill="rgb(249,43,39)"/><text x="55.2941%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (45,991 samples, 0.11%)</title><rect x="55.0504%" y="37" width="0.1065%" height="15" fill="rgb(209,38,44)"/><text x="55.3004%" y="47.50"></text></g><g><title>adt_dtorck_constraint (86,781 samples, 0.20%)</title><rect x="55.3513%" y="53" width="0.2009%" height="15" fill="rgb(236,212,23)"/><text x="55.6013%" y="63.50"></text></g><g><title>adt_dtorck_constraint (134,772 samples, 0.31%)</title><rect x="55.2648%" y="69" width="0.3120%" height="15" fill="rgb(242,79,21)"/><text x="55.5148%" y="79.50"></text></g><g><title>adt_dtorck_constraint (163,883 samples, 0.38%)</title><rect x="55.2046%" y="85" width="0.3794%" height="15" fill="rgb(211,96,35)"/><text x="55.4546%" y="95.50"></text></g><g><title>adt_dtorck_constraint (403,409 samples, 0.93%)</title><rect x="54.7417%" y="101" width="0.9339%" height="15" fill="rgb(253,215,40)"/><text x="54.9917%" y="111.50"></text></g><g><title>dropck_outlives (577,020 samples, 1.34%)</title><rect x="54.4765%" y="117" width="1.3358%" height="15" fill="rgb(211,81,21)"/><text x="54.7265%" y="127.50"></text></g><g><title>normalize_projection_ty (59,060 samples, 0.14%)</title><rect x="55.6755%" y="101" width="0.1367%" height="15" fill="rgb(208,190,38)"/><text x="55.9255%" y="111.50"></text></g><g><title>adt_def (60,831 samples, 0.14%)</title><rect x="56.4030%" y="85" width="0.1408%" height="15" fill="rgb(235,213,38)"/><text x="56.6530%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (59,321 samples, 0.14%)</title><rect x="56.4065%" y="69" width="0.1373%" height="15" fill="rgb(237,122,38)"/><text x="56.6565%" y="79.50"></text></g><g><title>adt_sized_constraint (103,121 samples, 0.24%)</title><rect x="56.3811%" y="101" width="0.2387%" height="15" fill="rgb(244,218,35)"/><text x="56.6311%" y="111.50"></text></g><g><title>predicates_of (51,191 samples, 0.12%)</title><rect x="56.7102%" y="101" width="0.1185%" height="15" fill="rgb(240,68,47)"/><text x="56.9602%" y="111.50"></text></g><g><title>evaluate_obligation (675,908 samples, 1.56%)</title><rect x="55.8122%" y="117" width="1.5647%" height="15" fill="rgb(210,16,53)"/><text x="56.0622%" y="127.50"></text></g><g><title>trait_impls_of (233,692 samples, 0.54%)</title><rect x="56.8359%" y="101" width="0.5410%" height="15" fill="rgb(235,124,12)"/><text x="57.0859%" y="111.50"></text></g><g><title>implementations_of_trait (78,390 samples, 0.18%)</title><rect x="57.1954%" y="85" width="0.1815%" height="15" fill="rgb(224,169,11)"/><text x="57.4454%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (56,330 samples, 0.13%)</title><rect x="57.2465%" y="69" width="0.1304%" height="15" fill="rgb(250,166,2)"/><text x="57.4965%" y="79.50"></text></g><g><title>fn_sig (89,861 samples, 0.21%)</title><rect x="57.4081%" y="117" width="0.2080%" height="15" fill="rgb(242,216,29)"/><text x="57.6581%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (80,630 samples, 0.19%)</title><rect x="57.4295%" y="101" width="0.1867%" height="15" fill="rgb(230,116,27)"/><text x="57.6795%" y="111.50"></text></g><g><title>generics_of (53,940 samples, 0.12%)</title><rect x="57.6161%" y="117" width="0.1249%" height="15" fill="rgb(228,99,48)"/><text x="57.8661%" y="127.50"></text></g><g><title>item_attrs (93,900 samples, 0.22%)</title><rect x="57.9000%" y="117" width="0.2174%" height="15" fill="rgb(253,11,6)"/><text x="58.1500%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (89,480 samples, 0.21%)</title><rect x="57.9102%" y="101" width="0.2071%" height="15" fill="rgb(247,143,39)"/><text x="58.1602%" y="111.50"></text></g><g><title>evaluate_obligation (124,753 samples, 0.29%)</title><rect x="58.4251%" y="101" width="0.2888%" height="15" fill="rgb(236,97,10)"/><text x="58.6751%" y="111.50"></text></g><g><title>method_autoderef_steps (212,303 samples, 0.49%)</title><rect x="58.2465%" y="117" width="0.4915%" height="15" fill="rgb(233,208,19)"/><text x="58.4965%" y="127.50"></text></g><g><title>explicit_predicates_of (54,220 samples, 0.13%)</title><rect x="59.0761%" y="85" width="0.1255%" height="15" fill="rgb(216,164,2)"/><text x="59.3261%" y="95.50"></text></g><g><title>predicates_of (207,694 samples, 0.48%)</title><rect x="58.7814%" y="117" width="0.4808%" height="15" fill="rgb(220,129,5)"/><text x="59.0314%" y="127.50"></text></g><g><title>predicates_defined_on (142,483 samples, 0.33%)</title><rect x="58.9324%" y="101" width="0.3298%" height="15" fill="rgb(242,17,10)"/><text x="59.1824%" y="111.50"></text></g><g><title>type_of (44,242 samples, 0.10%)</title><rect x="59.2677%" y="117" width="0.1024%" height="15" fill="rgb(242,107,0)"/><text x="59.5177%" y="127.50"></text></g><g><title>item_bodies_checking (7,094,569 samples, 16.42%)</title><rect x="43.0464%" y="165" width="16.4233%" height="15" fill="rgb(251,28,31)"/><text x="43.2964%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (7,092,299 samples, 16.42%)</title><rect x="43.0517%" y="149" width="16.4180%" height="15" fill="rgb(233,223,10)"/><text x="43.3017%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (7,074,799 samples, 16.38%)</title><rect x="43.0922%" y="133" width="16.3775%" height="15" fill="rgb(215,21,27)"/><text x="43.3422%" y="143.50">typeck</text></g><g><title>impl_parent (46,771 samples, 0.11%)</title><rect x="60.0326%" y="85" width="0.1083%" height="15" fill="rgb(232,23,21)"/><text x="60.2826%" y="95.50"></text></g><g><title>impl_trait_ref (133,252 samples, 0.31%)</title><rect x="60.1409%" y="85" width="0.3085%" height="15" fill="rgb(244,5,23)"/><text x="60.3909%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (114,222 samples, 0.26%)</title><rect x="60.1849%" y="69" width="0.2644%" height="15" fill="rgb(226,81,46)"/><text x="60.4349%" y="79.50"></text></g><g><title>adt_destructor (281,873 samples, 0.65%)</title><rect x="59.8539%" y="133" width="0.6525%" height="15" fill="rgb(247,70,30)"/><text x="60.1039%" y="143.50"></text></g><g><title>coherent_trait (277,663 samples, 0.64%)</title><rect x="59.8637%" y="117" width="0.6428%" height="15" fill="rgb(212,68,19)"/><text x="60.1137%" y="127.50"></text></g><g><title>specialization_graph_of (275,923 samples, 0.64%)</title><rect x="59.8677%" y="101" width="0.6387%" height="15" fill="rgb(240,187,13)"/><text x="60.1177%" y="111.50"></text></g><g><title>item_types_checking (608,537 samples, 1.41%)</title><rect x="59.4697%" y="165" width="1.4087%" height="15" fill="rgb(223,113,26)"/><text x="59.7197%" y="175.50"></text></g><g><title>check_mod_item_types (606,157 samples, 1.40%)</title><rect x="59.4753%" y="149" width="1.4032%" height="15" fill="rgb(206,192,2)"/><text x="59.7253%" y="159.50"></text></g><g><title>typeck (99,351 samples, 0.23%)</title><rect x="60.6485%" y="133" width="0.2300%" height="15" fill="rgb(241,108,4)"/><text x="60.8985%" y="143.50"></text></g><g><title>late_bound_vars_map (58,910 samples, 0.14%)</title><rect x="61.2648%" y="117" width="0.1364%" height="15" fill="rgb(247,173,49)"/><text x="61.5148%" y="127.50"></text></g><g><title>resolve_lifetimes (51,740 samples, 0.12%)</title><rect x="61.2814%" y="101" width="0.1198%" height="15" fill="rgb(224,114,35)"/><text x="61.5314%" y="111.50"></text></g><g><title>fn_sig (203,442 samples, 0.47%)</title><rect x="61.0817%" y="133" width="0.4710%" height="15" fill="rgb(245,159,27)"/><text x="61.3317%" y="143.50"></text></g><g><title>type_of (65,451 samples, 0.15%)</title><rect x="61.4011%" y="117" width="0.1515%" height="15" fill="rgb(245,172,44)"/><text x="61.6511%" y="127.50"></text></g><g><title>named_region_map (47,841 samples, 0.11%)</title><rect x="61.6326%" y="117" width="0.1107%" height="15" fill="rgb(236,23,11)"/><text x="61.8826%" y="127.50"></text></g><g><title>generics_of (92,491 samples, 0.21%)</title><rect x="61.5527%" y="133" width="0.2141%" height="15" fill="rgb(205,117,38)"/><text x="61.8027%" y="143.50"></text></g><g><title>predicates_of (235,793 samples, 0.55%)</title><rect x="61.7983%" y="133" width="0.5458%" height="15" fill="rgb(237,72,25)"/><text x="62.0483%" y="143.50"></text></g><g><title>predicates_defined_on (223,113 samples, 0.52%)</title><rect x="61.8277%" y="117" width="0.5165%" height="15" fill="rgb(244,70,9)"/><text x="62.0777%" y="127.50"></text></g><g><title>inferred_outlives_of (159,232 samples, 0.37%)</title><rect x="61.9756%" y="101" width="0.3686%" height="15" fill="rgb(217,125,39)"/><text x="62.2256%" y="111.50"></text></g><g><title>inferred_outlives_crate (148,322 samples, 0.34%)</title><rect x="62.0008%" y="85" width="0.3434%" height="15" fill="rgb(235,36,10)"/><text x="62.2508%" y="95.50"></text></g><g><title>type_of (82,172 samples, 0.19%)</title><rect x="62.1540%" y="69" width="0.1902%" height="15" fill="rgb(251,123,47)"/><text x="62.4040%" y="79.50"></text></g><g><title>type_of (56,621 samples, 0.13%)</title><rect x="62.2131%" y="53" width="0.1311%" height="15" fill="rgb(221,13,13)"/><text x="62.4631%" y="63.50"></text></g><g><title>metadata_decode_entry_type_of (51,791 samples, 0.12%)</title><rect x="62.2243%" y="37" width="0.1199%" height="15" fill="rgb(238,131,9)"/><text x="62.4743%" y="47.50"></text></g><g><title>type_collecting (650,647 samples, 1.51%)</title><rect x="60.8820%" y="165" width="1.5062%" height="15" fill="rgb(211,50,8)"/><text x="61.1320%" y="175.50"></text></g><g><title>collect_mod_item_types (643,557 samples, 1.49%)</title><rect x="60.8984%" y="149" width="1.4898%" height="15" fill="rgb(245,182,24)"/><text x="61.1484%" y="159.50"></text></g><g><title>evaluate_obligation (165,292 samples, 0.38%)</title><rect x="63.3301%" y="133" width="0.3826%" height="15" fill="rgb(242,14,37)"/><text x="63.5801%" y="143.50"></text></g><g><title>implied_outlives_bounds (48,831 samples, 0.11%)</title><rect x="63.7127%" y="133" width="0.1130%" height="15" fill="rgb(246,228,12)"/><text x="63.9627%" y="143.50"></text></g><g><title>param_env (46,001 samples, 0.11%)</title><rect x="63.8257%" y="133" width="0.1065%" height="15" fill="rgb(213,55,15)"/><text x="64.0757%" y="143.50"></text></g><g><title>check_impl_item_well_formed (720,188 samples, 1.67%)</title><rect x="62.4967%" y="149" width="1.6672%" height="15" fill="rgb(209,9,3)"/><text x="62.7467%" y="159.50"></text></g><g><title>region_scope_tree (72,910 samples, 0.17%)</title><rect x="63.9951%" y="133" width="0.1688%" height="15" fill="rgb(230,59,30)"/><text x="64.2451%" y="143.50"></text></g><g><title>adt_def (56,001 samples, 0.13%)</title><rect x="65.1775%" y="101" width="0.1296%" height="15" fill="rgb(209,121,21)"/><text x="65.4275%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (55,271 samples, 0.13%)</title><rect x="65.1792%" y="85" width="0.1279%" height="15" fill="rgb(220,109,13)"/><text x="65.4292%" y="95.50"></text></g><g><title>item_attrs (46,851 samples, 0.11%)</title><rect x="65.1987%" y="69" width="0.1085%" height="15" fill="rgb(232,18,1)"/><text x="65.4487%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (46,141 samples, 0.11%)</title><rect x="65.2003%" y="53" width="0.1068%" height="15" fill="rgb(215,41,42)"/><text x="65.4503%" y="63.50"></text></g><g><title>adt_def (133,211 samples, 0.31%)</title><rect x="65.3202%" y="85" width="0.3084%" height="15" fill="rgb(224,123,36)"/><text x="65.5702%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (131,511 samples, 0.30%)</title><rect x="65.3241%" y="69" width="0.3044%" height="15" fill="rgb(240,125,3)"/><text x="65.5741%" y="79.50"></text></g><g><title>item_attrs (116,651 samples, 0.27%)</title><rect x="65.3585%" y="53" width="0.2700%" height="15" fill="rgb(205,98,50)"/><text x="65.6085%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (115,411 samples, 0.27%)</title><rect x="65.3614%" y="37" width="0.2672%" height="15" fill="rgb(205,185,37)"/><text x="65.6114%" y="47.50"></text></g><g><title>adt_sized_constraint (147,291 samples, 0.34%)</title><rect x="65.3072%" y="101" width="0.3410%" height="15" fill="rgb(238,207,15)"/><text x="65.5572%" y="111.50"></text></g><g><title>adt_sized_constraint (217,502 samples, 0.50%)</title><rect x="65.1552%" y="117" width="0.5035%" height="15" fill="rgb(213,199,42)"/><text x="65.4052%" y="127.50"></text></g><g><title>evaluate_obligation (331,473 samples, 0.77%)</title><rect x="64.8941%" y="133" width="0.7673%" height="15" fill="rgb(235,201,11)"/><text x="65.1441%" y="143.50"></text></g><g><title>implied_outlives_bounds (54,150 samples, 0.13%)</title><rect x="65.6689%" y="133" width="0.1254%" height="15" fill="rgb(207,46,11)"/><text x="65.9189%" y="143.50"></text></g><g><title>param_env (141,942 samples, 0.33%)</title><rect x="65.7942%" y="133" width="0.3286%" height="15" fill="rgb(241,35,35)"/><text x="66.0442%" y="143.50"></text></g><g><title>analysis (28,228,475 samples, 65.35%)</title><rect x="0.9422%" y="197" width="65.3464%" height="15" fill="rgb(243,32,47)"/><text x="1.1922%" y="207.50">analysis</text></g><g><title>type_check_crate (18,009,761 samples, 41.69%)</title><rect x="24.5976%" y="181" width="41.6910%" height="15" fill="rgb(247,202,23)"/><text x="24.8476%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,683,409 samples, 3.90%)</title><rect x="62.3916%" y="165" width="3.8969%" height="15" fill="rgb(219,102,11)"/><text x="62.6416%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (917,840 samples, 2.12%)</title><rect x="64.1639%" y="149" width="2.1247%" height="15" fill="rgb(243,110,44)"/><text x="64.4139%" y="159.50">c..</text></g><g><title>codegen_crate (348,684 samples, 0.81%)</title><rect x="66.3036%" y="197" width="0.8072%" height="15" fill="rgb(222,74,54)"/><text x="66.5536%" y="207.50"></text></g><g><title>AST_validation (60,581 samples, 0.14%)</title><rect x="67.4139%" y="181" width="0.1402%" height="15" fill="rgb(216,99,12)"/><text x="67.6639%" y="191.50"></text></g><g><title>crate_injection (51,481 samples, 0.12%)</title><rect x="67.6081%" y="181" width="0.1192%" height="15" fill="rgb(226,22,26)"/><text x="67.8581%" y="191.50"></text></g><g><title>metadata_load_macro (98,171 samples, 0.23%)</title><rect x="80.2281%" y="149" width="0.2273%" height="15" fill="rgb(217,163,10)"/><text x="80.4781%" y="159.50"></text></g><g><title>macro_expand_crate (6,756,325 samples, 15.64%)</title><rect x="67.7273%" y="181" width="15.6403%" height="15" fill="rgb(213,25,53)"/><text x="67.9773%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (6,741,145 samples, 15.61%)</title><rect x="67.7624%" y="165" width="15.6052%" height="15" fill="rgb(252,105,26)"/><text x="68.0124%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,258,004 samples, 2.91%)</title><rect x="80.4554%" y="149" width="2.9122%" height="15" fill="rgb(220,39,43)"/><text x="80.7054%" y="159.50">me..</text></g><g><title>metadata_register_crate (455,546 samples, 1.05%)</title><rect x="82.3130%" y="133" width="1.0545%" height="15" fill="rgb(229,68,48)"/><text x="82.5630%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (100,911 samples, 0.23%)</title><rect x="83.3745%" y="181" width="0.2336%" height="15" fill="rgb(252,8,32)"/><text x="83.6245%" y="191.50"></text></g><g><title>finalize_imports (136,342 samples, 0.32%)</title><rect x="83.6182%" y="165" width="0.3156%" height="15" fill="rgb(223,20,43)"/><text x="83.8682%" y="175.50"></text></g><g><title>late_resolve_crate (604,217 samples, 1.40%)</title><rect x="83.9569%" y="165" width="1.3987%" height="15" fill="rgb(229,81,49)"/><text x="84.2069%" y="175.50"></text></g><g><title>configure_and_expand (7,915,478 samples, 18.32%)</title><rect x="67.1108%" y="197" width="18.3236%" height="15" fill="rgb(236,28,36)"/><text x="67.3608%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (788,929 samples, 1.83%)</title><rect x="83.6081%" y="181" width="1.8263%" height="15" fill="rgb(249,185,26)"/><text x="83.8581%" y="191.50">r..</text></g><g><title>drop_ast (53,051 samples, 0.12%)</title><rect x="85.4344%" y="197" width="0.1228%" height="15" fill="rgb(249,174,33)"/><text x="85.6844%" y="207.50"></text></g><g><title>early_lint_checks (128,651 samples, 0.30%)</title><rect x="85.5896%" y="197" width="0.2978%" height="15" fill="rgb(233,201,37)"/><text x="85.8396%" y="207.50"></text></g><g><title>free_global_ctxt (2,876,013 samples, 6.66%)</title><rect x="85.8875%" y="197" width="6.6577%" height="15" fill="rgb(221,78,26)"/><text x="86.1375%" y="207.50">free_glob..</text></g><g><title>crate_hash (67,190 samples, 0.16%)</title><rect x="93.2606%" y="181" width="0.1555%" height="15" fill="rgb(250,127,30)"/><text x="93.5106%" y="191.50"></text></g><g><title>generate_crate_metadata (434,895 samples, 1.01%)</title><rect x="92.5452%" y="197" width="1.0067%" height="15" fill="rgb(230,49,44)"/><text x="92.7952%" y="207.50"></text></g><g><title>hir_lowering (746,919 samples, 1.73%)</title><rect x="93.5519%" y="197" width="1.7291%" height="15" fill="rgb(229,67,23)"/><text x="93.8019%" y="207.50"></text></g><g><title>link (51,900 samples, 0.12%)</title><rect x="95.2810%" y="197" width="0.1201%" height="15" fill="rgb(249,83,47)"/><text x="95.5310%" y="207.50"></text></g><g><title>parse_crate (913,451 samples, 2.11%)</title><rect x="95.4011%" y="197" width="2.1146%" height="15" fill="rgb(215,43,3)"/><text x="95.6511%" y="207.50">p..</text></g><g><title>prepare_outputs (184,042 samples, 0.43%)</title><rect x="97.5286%" y="197" width="0.4260%" height="15" fill="rgb(238,154,13)"/><text x="97.7786%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (499,485 samples, 1.16%)</title><rect x="97.9546%" y="197" width="1.1563%" height="15" fill="rgb(219,56,2)"/><text x="98.2046%" y="207.50"></text></g><g><title>setup_global_ctxt (78,631 samples, 0.18%)</title><rect x="99.1374%" y="197" width="0.1820%" height="15" fill="rgb(233,0,4)"/><text x="99.3874%" y="207.50"></text></g><g><title>all (43,198,193 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (43,198,193 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (293,994 samples, 0.68%)</title><rect x="99.3194%" y="197" width="0.6806%" height="15" fill="rgb(211,146,34)"/><text x="99.5694%" y="207.50"></text></g></svg></svg>