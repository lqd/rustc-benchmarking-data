<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,031,521 samples, 0.34%)</title><rect x="11.1751%" y="133" width="0.3421%" height="15" fill="rgb(227,0,7)"/><text x="11.4251%" y="143.50"></text></g><g><title>param_env (677,367 samples, 0.22%)</title><rect x="13.3183%" y="101" width="0.2246%" height="15" fill="rgb(217,0,24)"/><text x="13.5683%" y="111.50"></text></g><g><title>item_attrs (578,934 samples, 0.19%)</title><rect x="14.0407%" y="69" width="0.1920%" height="15" fill="rgb(221,193,54)"/><text x="14.2907%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (561,784 samples, 0.19%)</title><rect x="14.0464%" y="53" width="0.1863%" height="15" fill="rgb(248,212,6)"/><text x="14.2964%" y="63.50"></text></g><g><title>codegen_fn_attrs (809,677 samples, 0.27%)</title><rect x="13.9745%" y="85" width="0.2685%" height="15" fill="rgb(208,68,35)"/><text x="14.2245%" y="95.50"></text></g><g><title>is_copy_raw (572,027 samples, 0.19%)</title><rect x="16.9168%" y="69" width="0.1897%" height="15" fill="rgb(232,128,0)"/><text x="17.1668%" y="79.50"></text></g><g><title>evaluate_obligation (430,434 samples, 0.14%)</title><rect x="16.9637%" y="53" width="0.1427%" height="15" fill="rgb(207,160,47)"/><text x="17.2137%" y="63.50"></text></g><g><title>adt_drop_tys (311,694 samples, 0.10%)</title><rect x="17.1819%" y="53" width="0.1034%" height="15" fill="rgb(228,23,34)"/><text x="17.4319%" y="63.50"></text></g><g><title>is_copy_raw (2,054,565 samples, 0.68%)</title><rect x="17.2853%" y="53" width="0.6814%" height="15" fill="rgb(218,30,26)"/><text x="17.5353%" y="63.50"></text></g><g><title>evaluate_obligation (1,606,083 samples, 0.53%)</title><rect x="17.4340%" y="37" width="0.5326%" height="15" fill="rgb(220,122,19)"/><text x="17.6840%" y="47.50"></text></g><g><title>needs_drop_raw (2,604,801 samples, 0.86%)</title><rect x="17.1076%" y="69" width="0.8638%" height="15" fill="rgb(250,228,42)"/><text x="17.3576%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,451,132 samples, 0.48%)</title><rect x="18.1867%" y="53" width="0.4812%" height="15" fill="rgb(240,193,28)"/><text x="18.4367%" y="63.50"></text></g><g><title>specialization_graph_of (386,803 samples, 0.13%)</title><rect x="18.7042%" y="53" width="0.1283%" height="15" fill="rgb(216,20,37)"/><text x="18.9542%" y="63.50"></text></g><g><title>resolve_instance (2,810,833 samples, 0.93%)</title><rect x="17.9722%" y="69" width="0.9321%" height="15" fill="rgb(206,188,39)"/><text x="18.2222%" y="79.50"></text></g><g><title>thir_body (2,898,194 samples, 0.96%)</title><rect x="18.9316%" y="69" width="0.9611%" height="15" fill="rgb(217,207,13)"/><text x="19.1816%" y="79.50"></text></g><g><title>mir_const (22,476,922 samples, 7.45%)</title><rect x="12.5327%" y="117" width="7.4540%" height="15" fill="rgb(231,73,38)"/><text x="12.7827%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (19,430,722 samples, 6.44%)</title><rect x="13.5429%" y="101" width="6.4438%" height="15" fill="rgb(225,20,46)"/><text x="13.7929%" y="111.50">unsafety..</text></g><g><title>mir_built (17,319,853 samples, 5.74%)</title><rect x="14.2430%" y="85" width="5.7437%" height="15" fill="rgb(210,31,41)"/><text x="14.4930%" y="95.50">mir_bui..</text></g><g><title>mir_const_qualif (473,804 samples, 0.16%)</title><rect x="19.9867%" y="117" width="0.1571%" height="15" fill="rgb(221,200,47)"/><text x="20.2367%" y="127.50"></text></g><g><title>mir_promoted (25,464,250 samples, 8.44%)</title><rect x="11.6997%" y="133" width="8.4446%" height="15" fill="rgb(226,26,5)"/><text x="11.9497%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,237,965 samples, 0.41%)</title><rect x="20.1450%" y="133" width="0.4105%" height="15" fill="rgb(249,33,26)"/><text x="20.3950%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,376,141 samples, 0.46%)</title><rect x="20.5556%" y="133" width="0.4564%" height="15" fill="rgb(235,183,28)"/><text x="20.8056%" y="143.50"></text></g><g><title>normalize_projection_ty (816,776 samples, 0.27%)</title><rect x="20.7411%" y="117" width="0.2709%" height="15" fill="rgb(221,5,38)"/><text x="20.9911%" y="127.50"></text></g><g><title>type_op_prove_predicate (6,234,512 samples, 2.07%)</title><rect x="21.1744%" y="133" width="2.0675%" height="15" fill="rgb(247,18,42)"/><text x="21.4244%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (68,661,644 samples, 22.77%)</title><rect x="0.4748%" y="165" width="22.7701%" height="15" fill="rgb(241,131,45)"/><text x="0.7248%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (68,276,029 samples, 22.64%)</title><rect x="0.6027%" y="149" width="22.6422%" height="15" fill="rgb(249,31,29)"/><text x="0.8527%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (393,845 samples, 0.13%)</title><rect x="23.2449%" y="165" width="0.1306%" height="15" fill="rgb(225,111,53)"/><text x="23.4949%" y="175.50"></text></g><g><title>hir_module_items (487,916 samples, 0.16%)</title><rect x="23.3755%" y="165" width="0.1618%" height="15" fill="rgb(238,160,17)"/><text x="23.6255%" y="175.50"></text></g><g><title>should_inherit_track_caller (505,005 samples, 0.17%)</title><rect x="23.8216%" y="117" width="0.1675%" height="15" fill="rgb(214,148,48)"/><text x="24.0716%" y="127.50"></text></g><g><title>codegen_fn_attrs (806,559 samples, 0.27%)</title><rect x="23.7281%" y="133" width="0.2675%" height="15" fill="rgb(232,36,49)"/><text x="23.9781%" y="143.50"></text></g><g><title>check_mod_attrs (1,351,003 samples, 0.45%)</title><rect x="23.5476%" y="149" width="0.4480%" height="15" fill="rgb(209,103,24)"/><text x="23.7976%" y="159.50"></text></g><g><title>check_mod_const_bodies (331,654 samples, 0.11%)</title><rect x="23.9956%" y="149" width="0.1100%" height="15" fill="rgb(229,88,8)"/><text x="24.2456%" y="159.50"></text></g><g><title>is_copy_raw (378,605 samples, 0.13%)</title><rect x="24.3270%" y="133" width="0.1256%" height="15" fill="rgb(213,181,19)"/><text x="24.5770%" y="143.50"></text></g><g><title>evaluate_obligation (355,094 samples, 0.12%)</title><rect x="24.3348%" y="117" width="0.1178%" height="15" fill="rgb(254,191,54)"/><text x="24.5848%" y="127.50"></text></g><g><title>lint_levels (313,404 samples, 0.10%)</title><rect x="24.4526%" y="133" width="0.1039%" height="15" fill="rgb(241,83,37)"/><text x="24.7026%" y="143.50"></text></g><g><title>lookup_deprecation_entry (378,995 samples, 0.13%)</title><rect x="24.5565%" y="133" width="0.1257%" height="15" fill="rgb(233,36,39)"/><text x="24.8065%" y="143.50"></text></g><g><title>param_env (642,887 samples, 0.21%)</title><rect x="24.7309%" y="133" width="0.2132%" height="15" fill="rgb(226,3,54)"/><text x="24.9809%" y="143.50"></text></g><g><title>predicates_of (517,816 samples, 0.17%)</title><rect x="24.7724%" y="117" width="0.1717%" height="15" fill="rgb(245,192,40)"/><text x="25.0224%" y="127.50"></text></g><g><title>predicates_defined_on (515,766 samples, 0.17%)</title><rect x="24.7730%" y="101" width="0.1710%" height="15" fill="rgb(238,167,29)"/><text x="25.0230%" y="111.50"></text></g><g><title>inferred_outlives_of (496,785 samples, 0.16%)</title><rect x="24.7793%" y="85" width="0.1647%" height="15" fill="rgb(232,182,51)"/><text x="25.0293%" y="95.50"></text></g><g><title>inferred_outlives_crate (489,745 samples, 0.16%)</title><rect x="24.7817%" y="69" width="0.1624%" height="15" fill="rgb(231,60,39)"/><text x="25.0317%" y="79.50"></text></g><g><title>check_mod_unstable_api_usage (2,412,267 samples, 0.80%)</title><rect x="24.1752%" y="149" width="0.8000%" height="15" fill="rgb(208,69,12)"/><text x="24.4252%" y="159.50"></text></g><g><title>misc_checking_1 (4,440,108 samples, 1.47%)</title><rect x="23.5376%" y="165" width="1.4725%" height="15" fill="rgb(235,93,37)"/><text x="23.7876%" y="175.50"></text></g><g><title>check_mod_intrinsics (433,544 samples, 0.14%)</title><rect x="25.0145%" y="133" width="0.1438%" height="15" fill="rgb(213,116,39)"/><text x="25.2645%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (1,582,398 samples, 0.52%)</title><rect x="25.0107%" y="149" width="0.5248%" height="15" fill="rgb(222,207,29)"/><text x="25.2607%" y="159.50"></text></g><g><title>check_mod_liveness (1,137,253 samples, 0.38%)</title><rect x="25.1583%" y="133" width="0.3771%" height="15" fill="rgb(206,96,30)"/><text x="25.4083%" y="143.50"></text></g><g><title>misc_checking_2 (3,232,316 samples, 1.07%)</title><rect x="25.0100%" y="165" width="1.0719%" height="15" fill="rgb(218,138,4)"/><text x="25.2600%" y="175.50"></text></g><g><title>match_checking (1,647,968 samples, 0.55%)</title><rect x="25.5354%" y="149" width="0.5465%" height="15" fill="rgb(250,191,14)"/><text x="25.7854%" y="159.50"></text></g><g><title>check_match (1,556,326 samples, 0.52%)</title><rect x="25.5658%" y="133" width="0.5161%" height="15" fill="rgb(239,60,40)"/><text x="25.8158%" y="143.50"></text></g><g><title>check_private_in_public (612,167 samples, 0.20%)</title><rect x="26.0857%" y="149" width="0.2030%" height="15" fill="rgb(206,27,48)"/><text x="26.3357%" y="159.50"></text></g><g><title>death_checking (1,111,452 samples, 0.37%)</title><rect x="26.2887%" y="149" width="0.3686%" height="15" fill="rgb(225,35,8)"/><text x="26.5387%" y="159.50"></text></g><g><title>param_env (637,384 samples, 0.21%)</title><rect x="27.1779%" y="117" width="0.2114%" height="15" fill="rgb(250,213,24)"/><text x="27.4279%" y="127.50"></text></g><g><title>predicates_of (321,772 samples, 0.11%)</title><rect x="27.2825%" y="101" width="0.1067%" height="15" fill="rgb(247,123,22)"/><text x="27.5325%" y="111.50"></text></g><g><title>crate_lints (3,342,827 samples, 1.11%)</title><rect x="26.6578%" y="133" width="1.1086%" height="15" fill="rgb(231,138,38)"/><text x="26.9078%" y="143.50"></text></g><g><title>type_of (1,126,413 samples, 0.37%)</title><rect x="27.3928%" y="117" width="0.3735%" height="15" fill="rgb(231,145,46)"/><text x="27.6428%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (894,961 samples, 0.30%)</title><rect x="27.4696%" y="101" width="0.2968%" height="15" fill="rgb(251,118,11)"/><text x="27.7196%" y="111.50"></text></g><g><title>lint_checking (4,466,600 samples, 1.48%)</title><rect x="26.6573%" y="149" width="1.4812%" height="15" fill="rgb(217,147,25)"/><text x="26.9073%" y="159.50"></text></g><g><title>module_lints (1,122,183 samples, 0.37%)</title><rect x="27.7664%" y="133" width="0.3721%" height="15" fill="rgb(247,81,37)"/><text x="28.0164%" y="143.50"></text></g><g><title>lint_mod (1,112,512 samples, 0.37%)</title><rect x="27.7696%" y="117" width="0.3689%" height="15" fill="rgb(209,12,38)"/><text x="28.0196%" y="127.50"></text></g><g><title>privacy_access_levels (796,139 samples, 0.26%)</title><rect x="28.1385%" y="149" width="0.2640%" height="15" fill="rgb(227,1,9)"/><text x="28.3885%" y="159.50"></text></g><g><title>privacy_checking_modules (2,158,624 samples, 0.72%)</title><rect x="28.4025%" y="149" width="0.7159%" height="15" fill="rgb(248,47,43)"/><text x="28.6525%" y="159.50"></text></g><g><title>check_mod_privacy (2,152,014 samples, 0.71%)</title><rect x="28.4047%" y="133" width="0.7137%" height="15" fill="rgb(221,10,30)"/><text x="28.6547%" y="143.50"></text></g><g><title>misc_checking_3 (9,179,452 samples, 3.04%)</title><rect x="26.0819%" y="165" width="3.0442%" height="15" fill="rgb(210,229,1)"/><text x="26.3319%" y="175.50">mis..</text></g><g><title>impl_parent (3,110,282 samples, 1.03%)</title><rect x="31.2326%" y="101" width="1.0315%" height="15" fill="rgb(222,148,37)"/><text x="31.4826%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,817,548 samples, 0.60%)</title><rect x="31.6613%" y="85" width="0.6027%" height="15" fill="rgb(234,67,33)"/><text x="31.9113%" y="95.50"></text></g><g><title>impl_trait_ref (6,490,105 samples, 2.15%)</title><rect x="32.2641%" y="101" width="2.1523%" height="15" fill="rgb(247,98,35)"/><text x="32.5141%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,182,096 samples, 1.72%)</title><rect x="32.6979%" y="85" width="1.7185%" height="15" fill="rgb(247,138,52)"/><text x="32.9479%" y="95.50"></text></g><g><title>trait_impls_of (1,053,113 samples, 0.35%)</title><rect x="34.4316%" y="101" width="0.3492%" height="15" fill="rgb(213,79,30)"/><text x="34.6816%" y="111.50"></text></g><g><title>implementations_of_trait (330,692 samples, 0.11%)</title><rect x="34.6712%" y="85" width="0.1097%" height="15" fill="rgb(246,177,23)"/><text x="34.9212%" y="95.50"></text></g><g><title>coherent_trait (16,840,417 samples, 5.58%)</title><rect x="29.1969%" y="133" width="5.5847%" height="15" fill="rgb(230,62,27)"/><text x="29.4469%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (16,408,571 samples, 5.44%)</title><rect x="29.3401%" y="117" width="5.4415%" height="15" fill="rgb(216,154,8)"/><text x="29.5901%" y="127.50">special..</text></g><g><title>coherence_checking (17,007,980 samples, 5.64%)</title><rect x="29.1852%" y="149" width="5.6403%" height="15" fill="rgb(244,35,45)"/><text x="29.4352%" y="159.50">coheren..</text></g><g><title>associated_item (873,659 samples, 0.29%)</title><rect x="53.8477%" y="85" width="0.2897%" height="15" fill="rgb(251,115,12)"/><text x="54.0977%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (703,499 samples, 0.23%)</title><rect x="53.9041%" y="69" width="0.2333%" height="15" fill="rgb(240,54,50)"/><text x="54.1541%" y="79.50"></text></g><g><title>associated_items (1,230,873 samples, 0.41%)</title><rect x="53.7476%" y="101" width="0.4082%" height="15" fill="rgb(233,84,52)"/><text x="53.9976%" y="111.50"></text></g><g><title>adt_dtorck_constraint (321,544 samples, 0.11%)</title><rect x="54.4686%" y="85" width="0.1066%" height="15" fill="rgb(207,117,47)"/><text x="54.7186%" y="95.50"></text></g><g><title>dropck_outlives (1,392,201 samples, 0.46%)</title><rect x="54.1937%" y="101" width="0.4617%" height="15" fill="rgb(249,43,39)"/><text x="54.4437%" y="111.50"></text></g><g><title>mir_borrowck (376,114 samples, 0.12%)</title><rect x="54.8488%" y="37" width="0.1247%" height="15" fill="rgb(209,38,44)"/><text x="55.0988%" y="47.50"></text></g><g><title>mir_for_ctfe (518,256 samples, 0.17%)</title><rect x="54.8031%" y="69" width="0.1719%" height="15" fill="rgb(236,212,23)"/><text x="55.0531%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (467,845 samples, 0.16%)</title><rect x="54.8198%" y="53" width="0.1552%" height="15" fill="rgb(242,79,21)"/><text x="55.0698%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,145,442 samples, 0.38%)</title><rect x="54.6555%" y="101" width="0.3799%" height="15" fill="rgb(211,96,35)"/><text x="54.9055%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,124,512 samples, 0.37%)</title><rect x="54.6624%" y="85" width="0.3729%" height="15" fill="rgb(253,215,40)"/><text x="54.9124%" y="95.50"></text></g><g><title>generics_of (668,016 samples, 0.22%)</title><rect x="56.9949%" y="85" width="0.2215%" height="15" fill="rgb(211,81,21)"/><text x="57.2449%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (531,473 samples, 0.18%)</title><rect x="57.0402%" y="69" width="0.1763%" height="15" fill="rgb(208,190,38)"/><text x="57.2902%" y="79.50"></text></g><g><title>impl_trait_ref (366,883 samples, 0.12%)</title><rect x="57.2511%" y="85" width="0.1217%" height="15" fill="rgb(235,213,38)"/><text x="57.5011%" y="95.50"></text></g><g><title>predicates_of (395,064 samples, 0.13%)</title><rect x="57.3852%" y="85" width="0.1310%" height="15" fill="rgb(237,122,38)"/><text x="57.6352%" y="95.50"></text></g><g><title>specializes (706,067 samples, 0.23%)</title><rect x="57.5162%" y="85" width="0.2342%" height="15" fill="rgb(244,218,35)"/><text x="57.7662%" y="95.50"></text></g><g><title>param_env (419,036 samples, 0.14%)</title><rect x="57.6114%" y="69" width="0.1390%" height="15" fill="rgb(240,68,47)"/><text x="57.8614%" y="79.50"></text></g><g><title>trait_impls_of (518,643 samples, 0.17%)</title><rect x="57.7565%" y="85" width="0.1720%" height="15" fill="rgb(210,16,53)"/><text x="58.0065%" y="95.50"></text></g><g><title>evaluate_obligation (8,745,615 samples, 2.90%)</title><rect x="55.0354%" y="101" width="2.9003%" height="15" fill="rgb(235,124,12)"/><text x="55.2854%" y="111.50">ev..</text></g><g><title>fn_sig (425,004 samples, 0.14%)</title><rect x="57.9534%" y="101" width="0.1409%" height="15" fill="rgb(224,169,11)"/><text x="58.2034%" y="111.50"></text></g><g><title>generics_of (740,202 samples, 0.25%)</title><rect x="58.0943%" y="101" width="0.2455%" height="15" fill="rgb(250,166,2)"/><text x="58.3443%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (572,100 samples, 0.19%)</title><rect x="58.1501%" y="85" width="0.1897%" height="15" fill="rgb(242,216,29)"/><text x="58.4001%" y="95.50"></text></g><g><title>item_attrs (508,602 samples, 0.17%)</title><rect x="58.4060%" y="101" width="0.1687%" height="15" fill="rgb(230,116,27)"/><text x="58.6560%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (495,952 samples, 0.16%)</title><rect x="58.4102%" y="85" width="0.1645%" height="15" fill="rgb(228,99,48)"/><text x="58.6602%" y="95.50"></text></g><g><title>evaluate_obligation (1,081,286 samples, 0.36%)</title><rect x="59.0836%" y="85" width="0.3586%" height="15" fill="rgb(253,11,6)"/><text x="59.3336%" y="95.50"></text></g><g><title>method_autoderef_steps (2,479,386 samples, 0.82%)</title><rect x="58.6222%" y="101" width="0.8222%" height="15" fill="rgb(247,143,39)"/><text x="58.8722%" y="111.50"></text></g><g><title>predicates_of (554,071 samples, 0.18%)</title><rect x="59.5313%" y="101" width="0.1837%" height="15" fill="rgb(236,97,10)"/><text x="59.7813%" y="111.50"></text></g><g><title>predicates_defined_on (380,291 samples, 0.13%)</title><rect x="59.5889%" y="85" width="0.1261%" height="15" fill="rgb(233,208,19)"/><text x="59.8389%" y="95.50"></text></g><g><title>evaluate_obligation (752,906 samples, 0.25%)</title><rect x="62.3054%" y="85" width="0.2497%" height="15" fill="rgb(216,164,2)"/><text x="62.5554%" y="95.50"></text></g><g><title>typeck (8,999,090 samples, 2.98%)</title><rect x="59.8169%" y="101" width="2.9843%" height="15" fill="rgb(220,129,5)"/><text x="60.0669%" y="111.50">typ..</text></g><g><title>item_bodies_checking (84,408,800 samples, 27.99%)</title><rect x="34.8549%" y="149" width="27.9923%" height="15" fill="rgb(242,17,10)"/><text x="35.1049%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (84,405,080 samples, 27.99%)</title><rect x="34.8562%" y="133" width="27.9910%" height="15" fill="rgb(242,107,0)"/><text x="35.1062%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (84,132,929 samples, 27.90%)</title><rect x="34.9464%" y="117" width="27.9008%" height="15" fill="rgb(251,28,31)"/><text x="35.1964%" y="127.50">typeck</text></g><g><title>impl_trait_ref (343,493 samples, 0.11%)</title><rect x="64.4329%" y="85" width="0.1139%" height="15" fill="rgb(233,223,10)"/><text x="64.6829%" y="95.50"></text></g><g><title>evaluate_obligation (1,516,607 samples, 0.50%)</title><rect x="64.1396%" y="101" width="0.5029%" height="15" fill="rgb(215,21,27)"/><text x="64.3896%" y="111.50"></text></g><g><title>item_types_checking (5,522,181 samples, 1.83%)</title><rect x="62.8472%" y="149" width="1.8313%" height="15" fill="rgb(232,23,21)"/><text x="63.0972%" y="159.50">i..</text></g><g><title>check_mod_item_types (5,513,370 samples, 1.83%)</title><rect x="62.8501%" y="133" width="1.8284%" height="15" fill="rgb(244,5,23)"/><text x="63.1001%" y="143.50">c..</text></g><g><title>typeck (2,202,526 samples, 0.73%)</title><rect x="63.9481%" y="117" width="0.7304%" height="15" fill="rgb(226,81,46)"/><text x="64.1981%" y="127.50"></text></g><g><title>fn_sig (769,255 samples, 0.26%)</title><rect x="64.9234%" y="117" width="0.2551%" height="15" fill="rgb(247,70,30)"/><text x="65.1734%" y="127.50"></text></g><g><title>named_region_map (338,646 samples, 0.11%)</title><rect x="65.3632%" y="101" width="0.1123%" height="15" fill="rgb(212,68,19)"/><text x="65.6132%" y="111.50"></text></g><g><title>generics_of (928,134 samples, 0.31%)</title><rect x="65.1785%" y="117" width="0.3078%" height="15" fill="rgb(240,187,13)"/><text x="65.4285%" y="127.50"></text></g><g><title>late_bound_vars_map (544,636 samples, 0.18%)</title><rect x="65.9235%" y="69" width="0.1806%" height="15" fill="rgb(223,113,26)"/><text x="66.1735%" y="79.50"></text></g><g><title>resolve_lifetimes (513,935 samples, 0.17%)</title><rect x="65.9337%" y="53" width="0.1704%" height="15" fill="rgb(206,192,2)"/><text x="66.1837%" y="63.50"></text></g><g><title>explicit_predicates_of (1,230,684 samples, 0.41%)</title><rect x="65.7229%" y="85" width="0.4081%" height="15" fill="rgb(241,108,4)"/><text x="65.9729%" y="95.50"></text></g><g><title>predicates_of (1,646,448 samples, 0.55%)</title><rect x="65.5996%" y="117" width="0.5460%" height="15" fill="rgb(247,173,49)"/><text x="65.8496%" y="127.50"></text></g><g><title>predicates_defined_on (1,501,516 samples, 0.50%)</title><rect x="65.6476%" y="101" width="0.4979%" height="15" fill="rgb(224,114,35)"/><text x="65.8976%" y="111.50"></text></g><g><title>type_collecting (4,732,353 samples, 1.57%)</title><rect x="64.6804%" y="149" width="1.5694%" height="15" fill="rgb(245,159,27)"/><text x="64.9304%" y="159.50"></text></g><g><title>collect_mod_item_types (4,724,603 samples, 1.57%)</title><rect x="64.6830%" y="133" width="1.5668%" height="15" fill="rgb(245,172,44)"/><text x="64.9330%" y="143.50"></text></g><g><title>evaluate_obligation (1,035,822 samples, 0.34%)</title><rect x="68.7196%" y="117" width="0.3435%" height="15" fill="rgb(236,23,11)"/><text x="68.9696%" y="127.50"></text></g><g><title>implied_outlives_bounds (824,167 samples, 0.27%)</title><rect x="69.0631%" y="117" width="0.2733%" height="15" fill="rgb(205,117,38)"/><text x="69.3131%" y="127.50"></text></g><g><title>param_env (1,184,718 samples, 0.39%)</title><rect x="69.3364%" y="117" width="0.3929%" height="15" fill="rgb(237,72,25)"/><text x="69.5864%" y="127.50"></text></g><g><title>region_scope_tree (1,036,852 samples, 0.34%)</title><rect x="69.7393%" y="117" width="0.3438%" height="15" fill="rgb(244,70,9)"/><text x="69.9893%" y="127.50"></text></g><g><title>check_impl_item_well_formed (10,981,424 samples, 3.64%)</title><rect x="66.4588%" y="133" width="3.6417%" height="15" fill="rgb(217,125,39)"/><text x="66.7088%" y="143.50">chec..</text></g><g><title>evaluate_obligation (818,724 samples, 0.27%)</title><rect x="71.5890%" y="117" width="0.2715%" height="15" fill="rgb(235,36,10)"/><text x="71.8390%" y="127.50"></text></g><g><title>implied_outlives_bounds (311,185 samples, 0.10%)</title><rect x="71.8745%" y="117" width="0.1032%" height="15" fill="rgb(251,123,47)"/><text x="72.1245%" y="127.50"></text></g><g><title>param_env (820,672 samples, 0.27%)</title><rect x="71.9777%" y="117" width="0.2722%" height="15" fill="rgb(221,13,13)"/><text x="72.2277%" y="127.50"></text></g><g><title>check_item_well_formed (7,069,118 samples, 2.34%)</title><rect x="70.1005%" y="133" width="2.3443%" height="15" fill="rgb(238,131,9)"/><text x="70.3505%" y="143.50">c..</text></g><g><title>analysis (219,905,287 samples, 72.93%)</title><rect x="0.2531%" y="181" width="72.9266%" height="15" fill="rgb(211,50,8)"/><text x="0.5031%" y="191.50">analysis</text></g><g><title>type_check_crate (132,840,669 samples, 44.05%)</title><rect x="29.1261%" y="165" width="44.0536%" height="15" fill="rgb(245,182,24)"/><text x="29.3761%" y="175.50">type_check_crate</text></g><g><title>wf_checking (20,879,992 samples, 6.92%)</title><rect x="66.2553%" y="149" width="6.9244%" height="15" fill="rgb(242,14,37)"/><text x="66.5053%" y="159.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (2,215,975 samples, 0.73%)</title><rect x="72.4448%" y="133" width="0.7349%" height="15" fill="rgb(246,228,12)"/><text x="72.6948%" y="143.50"></text></g><g><title>codegen_crate (402,165 samples, 0.13%)</title><rect x="73.1832%" y="181" width="0.1334%" height="15" fill="rgb(213,55,15)"/><text x="73.4332%" y="191.50"></text></g><g><title>AST_validation (328,413 samples, 0.11%)</title><rect x="73.3874%" y="165" width="0.1089%" height="15" fill="rgb(209,9,3)"/><text x="73.6374%" y="175.50"></text></g><g><title>metadata_register_crate (2,734,781 samples, 0.91%)</title><rect x="89.9106%" y="133" width="0.9069%" height="15" fill="rgb(230,59,30)"/><text x="90.1606%" y="143.50"></text></g><g><title>metadata_register_crate (974,231 samples, 0.32%)</title><rect x="90.4945%" y="117" width="0.3231%" height="15" fill="rgb(209,121,21)"/><text x="90.7445%" y="127.50"></text></g><g><title>macro_expand_crate (53,614,677 samples, 17.78%)</title><rect x="73.5804%" y="165" width="17.7801%" height="15" fill="rgb(220,109,13)"/><text x="73.8304%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (53,594,647 samples, 17.77%)</title><rect x="73.5870%" y="149" width="17.7735%" height="15" fill="rgb(232,18,1)"/><text x="73.8370%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,637,026 samples, 0.54%)</title><rect x="90.8176%" y="133" width="0.5429%" height="15" fill="rgb(215,41,42)"/><text x="91.0676%" y="143.50"></text></g><g><title>late_resolve_crate (4,891,234 samples, 1.62%)</title><rect x="91.4739%" y="149" width="1.6221%" height="15" fill="rgb(224,123,36)"/><text x="91.7239%" y="159.50"></text></g><g><title>configure_and_expand (59,934,227 samples, 19.88%)</title><rect x="73.3166%" y="181" width="19.8758%" height="15" fill="rgb(240,125,3)"/><text x="73.5666%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (5,462,271 samples, 1.81%)</title><rect x="91.3810%" y="165" width="1.8114%" height="15" fill="rgb(205,98,50)"/><text x="91.6310%" y="175.50">r..</text></g><g><title>drop_ast (838,940 samples, 0.28%)</title><rect x="93.1924%" y="181" width="0.2782%" height="15" fill="rgb(205,185,37)"/><text x="93.4424%" y="191.50"></text></g><g><title>early_lint_checks (916,380 samples, 0.30%)</title><rect x="93.4771%" y="181" width="0.3039%" height="15" fill="rgb(238,207,15)"/><text x="93.7271%" y="191.50"></text></g><g><title>free_global_ctxt (5,150,857 samples, 1.71%)</title><rect x="93.7809%" y="181" width="1.7082%" height="15" fill="rgb(213,199,42)"/><text x="94.0309%" y="191.50"></text></g><g><title>generate_crate_metadata (2,590,979 samples, 0.86%)</title><rect x="95.4891%" y="181" width="0.8592%" height="15" fill="rgb(235,201,11)"/><text x="95.7391%" y="191.50"></text></g><g><title>hir_lowering (8,187,262 samples, 2.72%)</title><rect x="96.3484%" y="181" width="2.7151%" height="15" fill="rgb(207,46,11)"/><text x="96.5984%" y="191.50">hi..</text></g><g><title>parse_crate (544,726 samples, 0.18%)</title><rect x="99.0869%" y="181" width="0.1806%" height="15" fill="rgb(241,35,35)"/><text x="99.3369%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,482,537 samples, 0.49%)</title><rect x="99.3409%" y="181" width="0.4917%" height="15" fill="rgb(243,32,47)"/><text x="99.5909%" y="191.50"></text></g><g><title>all (301,543,166 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (301,543,166 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (402,814 samples, 0.13%)</title><rect x="99.8664%" y="181" width="0.1336%" height="15" fill="rgb(243,110,44)"/><text x="100.1164%" y="191.50"></text></g></svg></svg>