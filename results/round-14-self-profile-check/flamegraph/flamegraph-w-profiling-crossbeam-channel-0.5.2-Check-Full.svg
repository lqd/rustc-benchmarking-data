<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (501,971 samples, 0.10%)</title><rect x="15.1930%" y="149" width="0.1010%" height="15" fill="rgb(227,0,7)"/><text x="15.4430%" y="159.50"></text></g><g><title>param_env (1,042,889 samples, 0.21%)</title><rect x="17.3890%" y="117" width="0.2098%" height="15" fill="rgb(217,0,24)"/><text x="17.6390%" y="127.50"></text></g><g><title>item_attrs (933,430 samples, 0.19%)</title><rect x="18.2869%" y="85" width="0.1878%" height="15" fill="rgb(221,193,54)"/><text x="18.5369%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (902,630 samples, 0.18%)</title><rect x="18.2931%" y="69" width="0.1816%" height="15" fill="rgb(248,212,6)"/><text x="18.5431%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,300,824 samples, 0.26%)</title><rect x="18.2229%" y="101" width="0.2617%" height="15" fill="rgb(208,68,35)"/><text x="18.4729%" y="111.50"></text></g><g><title>is_copy_raw (2,091,389 samples, 0.42%)</title><rect x="22.1182%" y="69" width="0.4207%" height="15" fill="rgb(232,128,0)"/><text x="22.3682%" y="79.50"></text></g><g><title>evaluate_obligation (1,637,787 samples, 0.33%)</title><rect x="22.2095%" y="53" width="0.3294%" height="15" fill="rgb(207,160,47)"/><text x="22.4595%" y="63.50"></text></g><g><title>needs_drop_raw (2,923,628 samples, 0.59%)</title><rect x="21.9516%" y="85" width="0.5881%" height="15" fill="rgb(228,23,34)"/><text x="22.2016%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (578,277 samples, 0.12%)</title><rect x="22.6929%" y="69" width="0.1163%" height="15" fill="rgb(218,30,26)"/><text x="22.9429%" y="79.50"></text></g><g><title>specialization_graph_of (2,131,133 samples, 0.43%)</title><rect x="22.8376%" y="69" width="0.4287%" height="15" fill="rgb(220,122,19)"/><text x="23.0876%" y="79.50"></text></g><g><title>impl_trait_ref (856,399 samples, 0.17%)</title><rect x="23.0940%" y="53" width="0.1723%" height="15" fill="rgb(250,228,42)"/><text x="23.3440%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (715,216 samples, 0.14%)</title><rect x="23.1224%" y="37" width="0.1439%" height="15" fill="rgb(240,193,28)"/><text x="23.3724%" y="47.50"></text></g><g><title>resolve_instance (3,886,673 samples, 0.78%)</title><rect x="22.5396%" y="85" width="0.7818%" height="15" fill="rgb(216,20,37)"/><text x="22.7896%" y="95.50"></text></g><g><title>thir_body (6,960,069 samples, 1.40%)</title><rect x="23.3629%" y="85" width="1.4000%" height="15" fill="rgb(206,188,39)"/><text x="23.6129%" y="95.50"></text></g><g><title>mir_const (41,833,027 samples, 8.41%)</title><rect x="16.3737%" y="133" width="8.4144%" height="15" fill="rgb(217,207,13)"/><text x="16.6237%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (35,742,372 samples, 7.19%)</title><rect x="17.5988%" y="117" width="7.1893%" height="15" fill="rgb(231,73,38)"/><text x="17.8488%" y="127.50">unsafety_c..</text></g><g><title>mir_built (31,338,580 samples, 6.30%)</title><rect x="18.4846%" y="101" width="6.3036%" height="15" fill="rgb(225,20,46)"/><text x="18.7346%" y="111.50">mir_built</text></g><g><title>mir_const_qualif (1,151,533 samples, 0.23%)</title><rect x="24.7881%" y="133" width="0.2316%" height="15" fill="rgb(210,31,41)"/><text x="25.0381%" y="143.50"></text></g><g><title>mir_promoted (47,845,384 samples, 9.62%)</title><rect x="15.3962%" y="149" width="9.6238%" height="15" fill="rgb(221,200,47)"/><text x="15.6462%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,117,612 samples, 0.43%)</title><rect x="25.0199%" y="149" width="0.4259%" height="15" fill="rgb(226,26,5)"/><text x="25.2699%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,304,093 samples, 0.26%)</title><rect x="25.4459%" y="149" width="0.2623%" height="15" fill="rgb(249,33,26)"/><text x="25.6959%" y="159.50"></text></g><g><title>normalize_projection_ty (758,599 samples, 0.15%)</title><rect x="25.5556%" y="133" width="0.1526%" height="15" fill="rgb(235,183,28)"/><text x="25.8056%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,848,972 samples, 1.38%)</title><rect x="25.8061%" y="149" width="1.3776%" height="15" fill="rgb(221,5,38)"/><text x="26.0561%" y="159.50"></text></g><g><title>MIR_borrow_checking (132,466,651 samples, 26.64%)</title><rect x="0.5420%" y="181" width="26.6448%" height="15" fill="rgb(247,18,42)"/><text x="0.7920%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (131,598,197 samples, 26.47%)</title><rect x="0.7166%" y="165" width="26.4701%" height="15" fill="rgb(241,131,45)"/><text x="0.9666%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (652,987 samples, 0.13%)</title><rect x="27.1868%" y="181" width="0.1313%" height="15" fill="rgb(249,31,29)"/><text x="27.4368%" y="191.50"></text></g><g><title>hir_module_items (1,060,900 samples, 0.21%)</title><rect x="27.3181%" y="181" width="0.2134%" height="15" fill="rgb(225,111,53)"/><text x="27.5681%" y="191.50"></text></g><g><title>should_inherit_track_caller (641,506 samples, 0.13%)</title><rect x="27.8548%" y="133" width="0.1290%" height="15" fill="rgb(238,160,17)"/><text x="28.1048%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,080,403 samples, 0.22%)</title><rect x="27.7706%" y="149" width="0.2173%" height="15" fill="rgb(214,148,48)"/><text x="28.0206%" y="159.50"></text></g><g><title>check_mod_attrs (2,223,666 samples, 0.45%)</title><rect x="27.5407%" y="165" width="0.4473%" height="15" fill="rgb(232,36,49)"/><text x="27.7907%" y="175.50"></text></g><g><title>check_mod_const_bodies (642,287 samples, 0.13%)</title><rect x="27.9880%" y="165" width="0.1292%" height="15" fill="rgb(209,103,24)"/><text x="28.2380%" y="175.50"></text></g><g><title>lint_levels (717,558 samples, 0.14%)</title><rect x="28.3362%" y="149" width="0.1443%" height="15" fill="rgb(229,88,8)"/><text x="28.5862%" y="159.50"></text></g><g><title>lookup_deprecation_entry (666,849 samples, 0.13%)</title><rect x="28.4805%" y="149" width="0.1341%" height="15" fill="rgb(213,181,19)"/><text x="28.7305%" y="159.50"></text></g><g><title>stability_index (562,516 samples, 0.11%)</title><rect x="28.5015%" y="133" width="0.1131%" height="15" fill="rgb(254,191,54)"/><text x="28.7515%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (2,264,685 samples, 0.46%)</title><rect x="28.1981%" y="165" width="0.4555%" height="15" fill="rgb(241,83,37)"/><text x="28.4481%" y="175.50"></text></g><g><title>misc_checking_1 (5,799,324 samples, 1.17%)</title><rect x="27.5316%" y="181" width="1.1665%" height="15" fill="rgb(233,36,39)"/><text x="27.7816%" y="191.50"></text></g><g><title>check_mod_intrinsics (498,816 samples, 0.10%)</title><rect x="28.7026%" y="149" width="0.1003%" height="15" fill="rgb(226,3,54)"/><text x="28.9526%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (2,699,660 samples, 0.54%)</title><rect x="28.6985%" y="165" width="0.5430%" height="15" fill="rgb(245,192,40)"/><text x="28.9485%" y="175.50"></text></g><g><title>check_mod_liveness (2,180,514 samples, 0.44%)</title><rect x="28.8029%" y="149" width="0.4386%" height="15" fill="rgb(238,167,29)"/><text x="29.0529%" y="159.50"></text></g><g><title>misc_checking_2 (6,437,711 samples, 1.29%)</title><rect x="28.6981%" y="181" width="1.2949%" height="15" fill="rgb(232,182,51)"/><text x="28.9481%" y="191.50"></text></g><g><title>match_checking (3,736,011 samples, 0.75%)</title><rect x="29.2415%" y="165" width="0.7515%" height="15" fill="rgb(231,60,39)"/><text x="29.4915%" y="175.50"></text></g><g><title>check_match (3,509,239 samples, 0.71%)</title><rect x="29.2872%" y="149" width="0.7059%" height="15" fill="rgb(208,69,12)"/><text x="29.5372%" y="159.50"></text></g><g><title>check_private_in_public (1,170,313 samples, 0.24%)</title><rect x="29.9955%" y="165" width="0.2354%" height="15" fill="rgb(235,93,37)"/><text x="30.2455%" y="175.50"></text></g><g><title>death_checking (2,301,385 samples, 0.46%)</title><rect x="30.2309%" y="165" width="0.4629%" height="15" fill="rgb(213,116,39)"/><text x="30.4809%" y="175.50"></text></g><g><title>param_env (1,655,599 samples, 0.33%)</title><rect x="31.5267%" y="133" width="0.3330%" height="15" fill="rgb(222,207,29)"/><text x="31.7767%" y="143.50"></text></g><g><title>predicates_of (777,730 samples, 0.16%)</title><rect x="31.7032%" y="117" width="0.1564%" height="15" fill="rgb(206,96,30)"/><text x="31.9532%" y="127.50"></text></g><g><title>predicates_defined_on (612,089 samples, 0.12%)</title><rect x="31.7366%" y="101" width="0.1231%" height="15" fill="rgb(218,138,4)"/><text x="31.9866%" y="111.50"></text></g><g><title>crate_lints (7,278,201 samples, 1.46%)</title><rect x="30.6944%" y="149" width="1.4640%" height="15" fill="rgb(250,191,14)"/><text x="30.9444%" y="159.50"></text></g><g><title>type_of (1,207,914 samples, 0.24%)</title><rect x="31.9154%" y="133" width="0.2430%" height="15" fill="rgb(239,60,40)"/><text x="32.1654%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (970,991 samples, 0.20%)</title><rect x="31.9631%" y="117" width="0.1953%" height="15" fill="rgb(206,27,48)"/><text x="32.2131%" y="127.50"></text></g><g><title>lint_checking (10,034,592 samples, 2.02%)</title><rect x="30.6938%" y="165" width="2.0184%" height="15" fill="rgb(225,35,8)"/><text x="30.9438%" y="175.50">l..</text></g><g><title>module_lints (2,753,291 samples, 0.55%)</title><rect x="32.1584%" y="149" width="0.5538%" height="15" fill="rgb(250,213,24)"/><text x="32.4084%" y="159.50"></text></g><g><title>lint_mod (2,736,531 samples, 0.55%)</title><rect x="32.1618%" y="133" width="0.5504%" height="15" fill="rgb(247,123,22)"/><text x="32.4118%" y="143.50"></text></g><g><title>privacy_access_levels (1,775,370 samples, 0.36%)</title><rect x="32.7122%" y="165" width="0.3571%" height="15" fill="rgb(231,138,38)"/><text x="32.9622%" y="175.50"></text></g><g><title>privacy_checking_modules (4,806,574 samples, 0.97%)</title><rect x="33.0693%" y="165" width="0.9668%" height="15" fill="rgb(231,145,46)"/><text x="33.3193%" y="175.50"></text></g><g><title>check_mod_privacy (4,794,444 samples, 0.96%)</title><rect x="33.0717%" y="149" width="0.9644%" height="15" fill="rgb(251,118,11)"/><text x="33.3217%" y="159.50"></text></g><g><title>misc_checking_3 (20,157,225 samples, 4.05%)</title><rect x="29.9930%" y="181" width="4.0545%" height="15" fill="rgb(217,147,25)"/><text x="30.2430%" y="191.50">misc..</text></g><g><title>impl_parent (3,150,496 samples, 0.63%)</title><rect x="35.2327%" y="117" width="0.6337%" height="15" fill="rgb(247,81,37)"/><text x="35.4827%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,732,619 samples, 0.35%)</title><rect x="35.5179%" y="101" width="0.3485%" height="15" fill="rgb(209,12,38)"/><text x="35.7679%" y="111.50"></text></g><g><title>impl_trait_ref (6,241,257 samples, 1.26%)</title><rect x="35.8664%" y="117" width="1.2554%" height="15" fill="rgb(227,1,9)"/><text x="36.1164%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,867,193 samples, 0.98%)</title><rect x="36.1427%" y="101" width="0.9790%" height="15" fill="rgb(248,47,43)"/><text x="36.3927%" y="111.50"></text></g><g><title>trait_impls_of (1,094,483 samples, 0.22%)</title><rect x="37.2570%" y="117" width="0.2201%" height="15" fill="rgb(221,10,30)"/><text x="37.5070%" y="127.50"></text></g><g><title>coherent_trait (16,647,905 samples, 3.35%)</title><rect x="34.1317%" y="149" width="3.3486%" height="15" fill="rgb(210,229,1)"/><text x="34.3817%" y="159.50">coh..</text></g><g><title>specialization_graph_of (16,072,518 samples, 3.23%)</title><rect x="34.2474%" y="133" width="3.2329%" height="15" fill="rgb(222,148,37)"/><text x="34.4974%" y="143.50">spe..</text></g><g><title>coherence_checking (16,868,108 samples, 3.39%)</title><rect x="34.1256%" y="165" width="3.3929%" height="15" fill="rgb(234,67,33)"/><text x="34.3756%" y="175.50">coh..</text></g><g><title>associated_item (725,540 samples, 0.15%)</title><rect x="56.6020%" y="101" width="0.1459%" height="15" fill="rgb(247,98,35)"/><text x="56.8520%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (581,729 samples, 0.12%)</title><rect x="56.6309%" y="85" width="0.1170%" height="15" fill="rgb(247,138,52)"/><text x="56.8809%" y="95.50"></text></g><g><title>associated_items (1,112,434 samples, 0.22%)</title><rect x="56.5375%" y="117" width="0.2238%" height="15" fill="rgb(213,79,30)"/><text x="56.7875%" y="127.50"></text></g><g><title>dropck_outlives (881,573 samples, 0.18%)</title><rect x="56.7980%" y="117" width="0.1773%" height="15" fill="rgb(246,177,23)"/><text x="57.0480%" y="127.50"></text></g><g><title>generics_of (879,670 samples, 0.18%)</title><rect x="58.2735%" y="101" width="0.1769%" height="15" fill="rgb(230,62,27)"/><text x="58.5235%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (648,359 samples, 0.13%)</title><rect x="58.3200%" y="85" width="0.1304%" height="15" fill="rgb(216,154,8)"/><text x="58.5700%" y="95.50"></text></g><g><title>impl_trait_ref (1,071,771 samples, 0.22%)</title><rect x="58.4937%" y="101" width="0.2156%" height="15" fill="rgb(244,35,45)"/><text x="58.7437%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (854,521 samples, 0.17%)</title><rect x="58.5374%" y="85" width="0.1719%" height="15" fill="rgb(251,115,12)"/><text x="58.7874%" y="95.50"></text></g><g><title>predicates_of (1,041,093 samples, 0.21%)</title><rect x="58.7216%" y="101" width="0.2094%" height="15" fill="rgb(240,54,50)"/><text x="58.9716%" y="111.50"></text></g><g><title>predicates_defined_on (578,277 samples, 0.12%)</title><rect x="58.8147%" y="85" width="0.1163%" height="15" fill="rgb(233,84,52)"/><text x="59.0647%" y="95.50"></text></g><g><title>specializes (2,679,123 samples, 0.54%)</title><rect x="58.9310%" y="101" width="0.5389%" height="15" fill="rgb(207,117,47)"/><text x="59.1810%" y="111.50"></text></g><g><title>param_env (1,567,051 samples, 0.32%)</title><rect x="59.1547%" y="85" width="0.3152%" height="15" fill="rgb(249,43,39)"/><text x="59.4047%" y="95.50"></text></g><g><title>def_span (704,701 samples, 0.14%)</title><rect x="59.3282%" y="69" width="0.1417%" height="15" fill="rgb(209,38,44)"/><text x="59.5782%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (627,320 samples, 0.13%)</title><rect x="59.3437%" y="53" width="0.1262%" height="15" fill="rgb(236,212,23)"/><text x="59.5937%" y="63.50"></text></g><g><title>trait_impls_of (619,848 samples, 0.12%)</title><rect x="59.4740%" y="101" width="0.1247%" height="15" fill="rgb(242,79,21)"/><text x="59.7240%" y="111.50"></text></g><g><title>evaluate_obligation (13,068,567 samples, 2.63%)</title><rect x="56.9753%" y="117" width="2.6287%" height="15" fill="rgb(211,96,35)"/><text x="57.2253%" y="127.50">ev..</text></g><g><title>item_attrs (536,903 samples, 0.11%)</title><rect x="59.7379%" y="117" width="0.1080%" height="15" fill="rgb(253,215,40)"/><text x="59.9879%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (518,123 samples, 0.10%)</title><rect x="59.7416%" y="101" width="0.1042%" height="15" fill="rgb(211,81,21)"/><text x="59.9916%" y="111.50"></text></g><g><title>evaluate_obligation (765,411 samples, 0.15%)</title><rect x="60.0266%" y="101" width="0.1540%" height="15" fill="rgb(208,190,38)"/><text x="60.2766%" y="111.50"></text></g><g><title>method_autoderef_steps (1,522,640 samples, 0.31%)</title><rect x="59.8789%" y="117" width="0.3063%" height="15" fill="rgb(235,213,38)"/><text x="60.1289%" y="127.50"></text></g><g><title>predicates_of (576,986 samples, 0.12%)</title><rect x="60.2531%" y="117" width="0.1161%" height="15" fill="rgb(237,122,38)"/><text x="60.5031%" y="127.50"></text></g><g><title>associated_items (524,097 samples, 0.11%)</title><rect x="66.9634%" y="101" width="0.1054%" height="15" fill="rgb(244,218,35)"/><text x="67.2134%" y="111.50"></text></g><g><title>evaluate_obligation (3,067,251 samples, 0.62%)</title><rect x="67.1405%" y="101" width="0.6170%" height="15" fill="rgb(240,68,47)"/><text x="67.3905%" y="111.50"></text></g><g><title>is_copy_raw (854,637 samples, 0.17%)</title><rect x="67.8767%" y="101" width="0.1719%" height="15" fill="rgb(210,16,53)"/><text x="68.1267%" y="111.50"></text></g><g><title>evaluate_obligation (666,225 samples, 0.13%)</title><rect x="67.9146%" y="85" width="0.1340%" height="15" fill="rgb(235,124,12)"/><text x="68.1646%" y="95.50"></text></g><g><title>typeck (39,300,070 samples, 7.90%)</title><rect x="60.4071%" y="117" width="7.9050%" height="15" fill="rgb(224,169,11)"/><text x="60.6571%" y="127.50">typeck</text></g><g><title>item_bodies_checking (153,117,421 samples, 30.80%)</title><rect x="37.5506%" y="165" width="30.7986%" height="15" fill="rgb(250,166,2)"/><text x="37.8006%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (153,113,381 samples, 30.80%)</title><rect x="37.5515%" y="149" width="30.7978%" height="15" fill="rgb(242,216,29)"/><text x="37.8015%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (152,352,446 samples, 30.64%)</title><rect x="37.7045%" y="133" width="30.6447%" height="15" fill="rgb(230,116,27)"/><text x="37.9545%" y="143.50">typeck</text></g><g><title>item_types_checking (6,352,981 samples, 1.28%)</title><rect x="68.3492%" y="165" width="1.2779%" height="15" fill="rgb(228,99,48)"/><text x="68.5992%" y="175.50"></text></g><g><title>check_mod_item_types (6,336,721 samples, 1.27%)</title><rect x="68.3525%" y="149" width="1.2746%" height="15" fill="rgb(253,11,6)"/><text x="68.6025%" y="159.50"></text></g><g><title>typeck (1,289,375 samples, 0.26%)</title><rect x="69.3677%" y="133" width="0.2593%" height="15" fill="rgb(247,143,39)"/><text x="69.6177%" y="143.50"></text></g><g><title>late_bound_vars_map (637,298 samples, 0.13%)</title><rect x="70.1648%" y="117" width="0.1282%" height="15" fill="rgb(236,97,10)"/><text x="70.4148%" y="127.50"></text></g><g><title>resolve_lifetimes (552,587 samples, 0.11%)</title><rect x="70.1818%" y="101" width="0.1111%" height="15" fill="rgb(233,208,19)"/><text x="70.4318%" y="111.50"></text></g><g><title>fn_sig (1,848,971 samples, 0.37%)</title><rect x="69.9432%" y="133" width="0.3719%" height="15" fill="rgb(216,164,2)"/><text x="70.1932%" y="143.50"></text></g><g><title>named_region_map (896,469 samples, 0.18%)</title><rect x="70.5166%" y="117" width="0.1803%" height="15" fill="rgb(220,129,5)"/><text x="70.7666%" y="127.50"></text></g><g><title>resolve_lifetimes (797,549 samples, 0.16%)</title><rect x="70.5365%" y="101" width="0.1604%" height="15" fill="rgb(242,17,10)"/><text x="70.7865%" y="111.50"></text></g><g><title>generics_of (1,958,310 samples, 0.39%)</title><rect x="70.3151%" y="133" width="0.3939%" height="15" fill="rgb(242,107,0)"/><text x="70.5651%" y="143.50"></text></g><g><title>explicit_predicates_of (744,228 samples, 0.15%)</title><rect x="70.8889%" y="101" width="0.1497%" height="15" fill="rgb(251,28,31)"/><text x="71.1389%" y="111.50"></text></g><g><title>predicates_of (2,550,401 samples, 0.51%)</title><rect x="70.7446%" y="133" width="0.5130%" height="15" fill="rgb(233,223,10)"/><text x="70.9946%" y="143.50"></text></g><g><title>predicates_defined_on (2,279,240 samples, 0.46%)</title><rect x="70.7992%" y="117" width="0.4585%" height="15" fill="rgb(215,21,27)"/><text x="71.0492%" y="127.50"></text></g><g><title>inferred_outlives_of (1,088,863 samples, 0.22%)</title><rect x="71.0386%" y="101" width="0.2190%" height="15" fill="rgb(232,23,21)"/><text x="71.2886%" y="111.50"></text></g><g><title>inferred_outlives_crate (982,281 samples, 0.20%)</title><rect x="71.0600%" y="85" width="0.1976%" height="15" fill="rgb(244,5,23)"/><text x="71.3100%" y="95.50"></text></g><g><title>type_of (556,624 samples, 0.11%)</title><rect x="71.1457%" y="69" width="0.1120%" height="15" fill="rgb(226,81,46)"/><text x="71.3957%" y="79.50"></text></g><g><title>type_collecting (8,478,115 samples, 1.71%)</title><rect x="69.6299%" y="165" width="1.7053%" height="15" fill="rgb(247,70,30)"/><text x="69.8799%" y="175.50"></text></g><g><title>collect_mod_item_types (8,450,735 samples, 1.70%)</title><rect x="69.6354%" y="149" width="1.6998%" height="15" fill="rgb(212,68,19)"/><text x="69.8854%" y="159.50"></text></g><g><title>evaluate_obligation (1,493,053 samples, 0.30%)</title><rect x="73.8236%" y="133" width="0.3003%" height="15" fill="rgb(240,187,13)"/><text x="74.0736%" y="143.50"></text></g><g><title>implied_outlives_bounds (764,847 samples, 0.15%)</title><rect x="74.1274%" y="133" width="0.1538%" height="15" fill="rgb(223,113,26)"/><text x="74.3774%" y="143.50"></text></g><g><title>param_env (1,762,742 samples, 0.35%)</title><rect x="74.2812%" y="133" width="0.3546%" height="15" fill="rgb(206,192,2)"/><text x="74.5312%" y="143.50"></text></g><g><title>check_impl_item_well_formed (17,637,545 samples, 3.55%)</title><rect x="71.5662%" y="149" width="3.5477%" height="15" fill="rgb(241,108,4)"/><text x="71.8162%" y="159.50">chec..</text></g><g><title>region_scope_tree (2,122,729 samples, 0.43%)</title><rect x="74.6869%" y="133" width="0.4270%" height="15" fill="rgb(247,173,49)"/><text x="74.9369%" y="143.50"></text></g><g><title>mir_for_ctfe (519,156 samples, 0.10%)</title><rect x="76.4925%" y="85" width="0.1044%" height="15" fill="rgb(224,114,35)"/><text x="76.7425%" y="95.50"></text></g><g><title>eval_to_const_value_raw (684,008 samples, 0.14%)</title><rect x="76.5984%" y="69" width="0.1376%" height="15" fill="rgb(245,159,27)"/><text x="76.8484%" y="79.50"></text></g><g><title>eval_to_const_value_raw (682,968 samples, 0.14%)</title><rect x="76.5986%" y="53" width="0.1374%" height="15" fill="rgb(245,172,44)"/><text x="76.8486%" y="63.50"></text></g><g><title>eval_to_allocation_raw (682,048 samples, 0.14%)</title><rect x="76.5988%" y="37" width="0.1372%" height="15" fill="rgb(236,23,11)"/><text x="76.8488%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (695,578 samples, 0.14%)</title><rect x="76.5970%" y="85" width="0.1399%" height="15" fill="rgb(205,117,38)"/><text x="76.8470%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,866,961 samples, 0.38%)</title><rect x="76.3911%" y="133" width="0.3755%" height="15" fill="rgb(237,72,25)"/><text x="76.6411%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,852,061 samples, 0.37%)</title><rect x="76.3941%" y="117" width="0.3725%" height="15" fill="rgb(244,70,9)"/><text x="76.6441%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,850,391 samples, 0.37%)</title><rect x="76.3944%" y="101" width="0.3722%" height="15" fill="rgb(217,125,39)"/><text x="76.6444%" y="111.50"></text></g><g><title>evaluate_obligation (1,345,816 samples, 0.27%)</title><rect x="76.7666%" y="133" width="0.2707%" height="15" fill="rgb(235,36,10)"/><text x="77.0166%" y="143.50"></text></g><g><title>param_env (1,212,715 samples, 0.24%)</title><rect x="77.1655%" y="133" width="0.2439%" height="15" fill="rgb(251,123,47)"/><text x="77.4155%" y="143.50"></text></g><g><title>check_item_well_formed (12,368,797 samples, 2.49%)</title><rect x="75.1139%" y="149" width="2.4879%" height="15" fill="rgb(221,13,13)"/><text x="75.3639%" y="159.50">ch..</text></g><g><title>analysis (384,731,768 samples, 77.39%)</title><rect x="0.2800%" y="197" width="77.3863%" height="15" fill="rgb(238,131,9)"/><text x="0.5300%" y="207.50">analysis</text></g><g><title>type_check_crate (216,854,024 samples, 43.62%)</title><rect x="34.0475%" y="181" width="43.6188%" height="15" fill="rgb(211,50,8)"/><text x="34.2975%" y="191.50">type_check_crate</text></g><g><title>wf_checking (31,443,221 samples, 6.32%)</title><rect x="71.3417%" y="165" width="6.3246%" height="15" fill="rgb(245,182,24)"/><text x="71.5917%" y="175.50">wf_check..</text></g><g><title>AST_validation (548,566 samples, 0.11%)</title><rect x="77.7905%" y="181" width="0.1103%" height="15" fill="rgb(242,14,37)"/><text x="78.0405%" y="191.50"></text></g><g><title>metadata_register_crate (2,734,051 samples, 0.55%)</title><rect x="89.8288%" y="149" width="0.5499%" height="15" fill="rgb(246,228,12)"/><text x="90.0788%" y="159.50"></text></g><g><title>metadata_register_crate (979,623 samples, 0.20%)</title><rect x="90.1817%" y="133" width="0.1970%" height="15" fill="rgb(213,55,15)"/><text x="90.4317%" y="143.50"></text></g><g><title>macro_expand_crate (63,489,999 samples, 12.77%)</title><rect x="77.9794%" y="181" width="12.7706%" height="15" fill="rgb(209,9,3)"/><text x="78.2294%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (63,474,919 samples, 12.77%)</title><rect x="77.9824%" y="165" width="12.7676%" height="15" fill="rgb(230,59,30)"/><text x="78.2324%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,845,599 samples, 0.37%)</title><rect x="90.3788%" y="149" width="0.3712%" height="15" fill="rgb(209,121,21)"/><text x="90.6288%" y="159.50"></text></g><g><title>late_resolve_crate (7,879,047 samples, 1.58%)</title><rect x="90.8929%" y="165" width="1.5848%" height="15" fill="rgb(220,109,13)"/><text x="91.1429%" y="175.50"></text></g><g><title>configure_and_expand (73,898,525 samples, 14.86%)</title><rect x="77.7447%" y="197" width="14.8642%" height="15" fill="rgb(232,18,1)"/><text x="77.9947%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (9,113,712 samples, 1.83%)</title><rect x="90.7757%" y="181" width="1.8332%" height="15" fill="rgb(215,41,42)"/><text x="91.0257%" y="191.50">r..</text></g><g><title>drop_ast (929,360 samples, 0.19%)</title><rect x="92.6089%" y="197" width="0.1869%" height="15" fill="rgb(224,123,36)"/><text x="92.8589%" y="207.50"></text></g><g><title>early_lint_checks (2,146,514 samples, 0.43%)</title><rect x="92.7996%" y="197" width="0.4318%" height="15" fill="rgb(240,125,3)"/><text x="93.0496%" y="207.50"></text></g><g><title>free_global_ctxt (6,562,393 samples, 1.32%)</title><rect x="93.2314%" y="197" width="1.3200%" height="15" fill="rgb(205,98,50)"/><text x="93.4814%" y="207.50"></text></g><g><title>generate_crate_metadata (6,038,458 samples, 1.21%)</title><rect x="94.5513%" y="197" width="1.2146%" height="15" fill="rgb(205,185,37)"/><text x="94.8013%" y="207.50"></text></g><g><title>hir_lowering (17,245,063 samples, 3.47%)</title><rect x="95.7659%" y="197" width="3.4687%" height="15" fill="rgb(238,207,15)"/><text x="96.0159%" y="207.50">hir..</text></g><g><title>parse_crate (782,858 samples, 0.16%)</title><rect x="99.2580%" y="197" width="0.1575%" height="15" fill="rgb(213,199,42)"/><text x="99.5080%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,944,542 samples, 0.39%)</title><rect x="99.4592%" y="197" width="0.3911%" height="15" fill="rgb(235,201,11)"/><text x="99.7092%" y="207.50"></text></g><g><title>all (497,157,533 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (497,157,533 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (631,047 samples, 0.13%)</title><rect x="99.8731%" y="197" width="0.1269%" height="15" fill="rgb(243,32,47)"/><text x="100.1231%" y="207.50"></text></g></svg></svg>