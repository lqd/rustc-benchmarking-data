<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (165,623 samples, 0.11%)</title><rect x="11.0135%" y="165" width="0.1087%" height="15" fill="rgb(227,0,7)"/><text x="11.2635%" y="175.50"></text></g><g><title>codegen_fn_attrs (220,345 samples, 0.14%)</title><rect x="12.8904%" y="117" width="0.1446%" height="15" fill="rgb(217,0,24)"/><text x="13.1404%" y="127.50"></text></g><g><title>is_copy_raw (436,564 samples, 0.29%)</title><rect x="15.0622%" y="101" width="0.2864%" height="15" fill="rgb(221,193,54)"/><text x="15.3122%" y="111.50"></text></g><g><title>evaluate_obligation (352,494 samples, 0.23%)</title><rect x="15.1173%" y="85" width="0.2313%" height="15" fill="rgb(248,212,6)"/><text x="15.3673%" y="95.50"></text></g><g><title>needs_drop_raw (256,364 samples, 0.17%)</title><rect x="15.3486%" y="101" width="0.1682%" height="15" fill="rgb(208,68,35)"/><text x="15.5986%" y="111.50"></text></g><g><title>is_copy_raw (177,763 samples, 0.12%)</title><rect x="15.4002%" y="85" width="0.1166%" height="15" fill="rgb(232,128,0)"/><text x="15.6502%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,407,661 samples, 0.92%)</title><rect x="15.8131%" y="85" width="0.9235%" height="15" fill="rgb(207,160,47)"/><text x="16.0631%" y="95.50"></text></g><g><title>specialization_graph_of (340,724 samples, 0.22%)</title><rect x="16.7654%" y="85" width="0.2235%" height="15" fill="rgb(228,23,34)"/><text x="17.0154%" y="95.50"></text></g><g><title>impl_trait_ref (156,740 samples, 0.10%)</title><rect x="16.8861%" y="69" width="0.1028%" height="15" fill="rgb(218,30,26)"/><text x="17.1361%" y="79.50"></text></g><g><title>resolve_instance (2,314,781 samples, 1.52%)</title><rect x="15.5168%" y="101" width="1.5187%" height="15" fill="rgb(220,122,19)"/><text x="15.7668%" y="111.50"></text></g><g><title>thir_body (1,256,915 samples, 0.82%)</title><rect x="17.0561%" y="101" width="0.8246%" height="15" fill="rgb(250,228,42)"/><text x="17.3061%" y="111.50"></text></g><g><title>mir_const (9,262,043 samples, 6.08%)</title><rect x="11.8171%" y="149" width="6.0766%" height="15" fill="rgb(240,193,28)"/><text x="12.0671%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (8,233,370 samples, 5.40%)</title><rect x="12.4920%" y="133" width="5.4017%" height="15" fill="rgb(216,20,37)"/><text x="12.7420%" y="143.50">unsafet..</text></g><g><title>mir_built (7,405,888 samples, 4.86%)</title><rect x="13.0349%" y="117" width="4.8589%" height="15" fill="rgb(206,188,39)"/><text x="13.2849%" y="127.50">mir_bu..</text></g><g><title>mir_const (798,630 samples, 0.52%)</title><rect x="18.0762%" y="133" width="0.5240%" height="15" fill="rgb(217,207,13)"/><text x="18.3262%" y="143.50"></text></g><g><title>unsafety_check_result (562,158 samples, 0.37%)</title><rect x="18.2313%" y="117" width="0.3688%" height="15" fill="rgb(231,73,38)"/><text x="18.4813%" y="127.50"></text></g><g><title>mir_built (481,567 samples, 0.32%)</title><rect x="18.2842%" y="101" width="0.3159%" height="15" fill="rgb(225,20,46)"/><text x="18.5342%" y="111.50"></text></g><g><title>mir_promoted (11,406,666 samples, 7.48%)</title><rect x="11.1222%" y="165" width="7.4837%" height="15" fill="rgb(210,31,41)"/><text x="11.3722%" y="175.50">mir_promot..</text></g><g><title>mir_const_qualif (1,085,332 samples, 0.71%)</title><rect x="17.8938%" y="149" width="0.7121%" height="15" fill="rgb(221,200,47)"/><text x="18.1438%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,785,425 samples, 1.17%)</title><rect x="18.6999%" y="165" width="1.1714%" height="15" fill="rgb(226,26,5)"/><text x="18.9499%" y="175.50"></text></g><g><title>normalize_projection_ty (1,388,382 samples, 0.91%)</title><rect x="18.9604%" y="149" width="0.9109%" height="15" fill="rgb(249,33,26)"/><text x="19.2104%" y="159.50"></text></g><g><title>MIR_borrow_checking (32,197,048 samples, 21.12%)</title><rect x="0.6597%" y="197" width="21.1238%" height="15" fill="rgb(235,183,28)"/><text x="0.9097%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,972,285 samples, 20.98%)</title><rect x="0.8072%" y="181" width="20.9764%" height="15" fill="rgb(221,5,38)"/><text x="1.0572%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (2,885,780 samples, 1.89%)</title><rect x="19.8902%" y="165" width="1.8933%" height="15" fill="rgb(247,18,42)"/><text x="20.1402%" y="175.50">t..</text></g><g><title>MIR_effect_checking (513,756 samples, 0.34%)</title><rect x="21.7835%" y="197" width="0.3371%" height="15" fill="rgb(241,131,45)"/><text x="22.0335%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (410,275 samples, 0.27%)</title><rect x="21.8514%" y="181" width="0.2692%" height="15" fill="rgb(249,31,29)"/><text x="22.1014%" y="191.50"></text></g><g><title>hir_module_items (214,543 samples, 0.14%)</title><rect x="22.1206%" y="197" width="0.1408%" height="15" fill="rgb(225,111,53)"/><text x="22.3706%" y="207.50"></text></g><g><title>should_inherit_track_caller (219,543 samples, 0.14%)</title><rect x="22.5429%" y="149" width="0.1440%" height="15" fill="rgb(238,160,17)"/><text x="22.7929%" y="159.50"></text></g><g><title>codegen_fn_attrs (396,924 samples, 0.26%)</title><rect x="22.4370%" y="165" width="0.2604%" height="15" fill="rgb(214,148,48)"/><text x="22.6870%" y="175.50"></text></g><g><title>check_mod_attrs (643,828 samples, 0.42%)</title><rect x="22.2752%" y="181" width="0.4224%" height="15" fill="rgb(232,36,49)"/><text x="22.5252%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (492,845 samples, 0.32%)</title><rect x="22.8451%" y="181" width="0.3233%" height="15" fill="rgb(209,103,24)"/><text x="23.0951%" y="191.50"></text></g><g><title>misc_checking_1 (1,440,056 samples, 0.94%)</title><rect x="22.2617%" y="197" width="0.9448%" height="15" fill="rgb(229,88,8)"/><text x="22.5117%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (549,307 samples, 0.36%)</title><rect x="23.2075%" y="181" width="0.3604%" height="15" fill="rgb(213,181,19)"/><text x="23.4575%" y="191.50"></text></g><g><title>check_mod_liveness (416,945 samples, 0.27%)</title><rect x="23.2943%" y="165" width="0.2735%" height="15" fill="rgb(254,191,54)"/><text x="23.5443%" y="175.50"></text></g><g><title>misc_checking_2 (1,115,883 samples, 0.73%)</title><rect x="23.2065%" y="197" width="0.7321%" height="15" fill="rgb(241,83,37)"/><text x="23.4565%" y="207.50"></text></g><g><title>match_checking (565,076 samples, 0.37%)</title><rect x="23.5679%" y="181" width="0.3707%" height="15" fill="rgb(233,36,39)"/><text x="23.8179%" y="191.50"></text></g><g><title>check_match (511,396 samples, 0.34%)</title><rect x="23.6031%" y="165" width="0.3355%" height="15" fill="rgb(226,3,54)"/><text x="23.8531%" y="175.50"></text></g><g><title>check_private_in_public (247,922 samples, 0.16%)</title><rect x="23.9453%" y="181" width="0.1627%" height="15" fill="rgb(245,192,40)"/><text x="24.1953%" y="191.50"></text></g><g><title>death_checking (688,108 samples, 0.45%)</title><rect x="24.1080%" y="181" width="0.4515%" height="15" fill="rgb(238,167,29)"/><text x="24.3580%" y="191.50"></text></g><g><title>item_attrs (254,003 samples, 0.17%)</title><rect x="24.3928%" y="165" width="0.1666%" height="15" fill="rgb(232,182,51)"/><text x="24.6428%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (252,703 samples, 0.17%)</title><rect x="24.3936%" y="149" width="0.1658%" height="15" fill="rgb(231,60,39)"/><text x="24.6436%" y="159.50"></text></g><g><title>crate_lints (1,083,642 samples, 0.71%)</title><rect x="24.5603%" y="165" width="0.7110%" height="15" fill="rgb(208,69,12)"/><text x="24.8103%" y="175.50"></text></g><g><title>type_of (348,144 samples, 0.23%)</title><rect x="25.0429%" y="149" width="0.2284%" height="15" fill="rgb(235,93,37)"/><text x="25.2929%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (270,094 samples, 0.18%)</title><rect x="25.0941%" y="133" width="0.1772%" height="15" fill="rgb(213,116,39)"/><text x="25.3441%" y="143.50"></text></g><g><title>lint_checking (1,587,268 samples, 1.04%)</title><rect x="24.5594%" y="181" width="1.0414%" height="15" fill="rgb(222,207,29)"/><text x="24.8094%" y="191.50"></text></g><g><title>module_lints (502,226 samples, 0.33%)</title><rect x="25.2713%" y="165" width="0.3295%" height="15" fill="rgb(206,96,30)"/><text x="25.5213%" y="175.50"></text></g><g><title>lint_mod (498,536 samples, 0.33%)</title><rect x="25.2737%" y="149" width="0.3271%" height="15" fill="rgb(218,138,4)"/><text x="25.5237%" y="159.50"></text></g><g><title>privacy_access_levels (353,634 samples, 0.23%)</title><rect x="25.6008%" y="181" width="0.2320%" height="15" fill="rgb(250,191,14)"/><text x="25.8508%" y="191.50"></text></g><g><title>privacy_checking_modules (880,530 samples, 0.58%)</title><rect x="25.8328%" y="181" width="0.5777%" height="15" fill="rgb(239,60,40)"/><text x="26.0828%" y="191.50"></text></g><g><title>check_mod_privacy (877,910 samples, 0.58%)</title><rect x="25.8345%" y="165" width="0.5760%" height="15" fill="rgb(206,27,48)"/><text x="26.0845%" y="175.50"></text></g><g><title>misc_checking_3 (3,788,202 samples, 2.49%)</title><rect x="23.9386%" y="197" width="2.4854%" height="15" fill="rgb(225,35,8)"/><text x="24.1886%" y="207.50">mi..</text></g><g><title>impl_parent (1,060,481 samples, 0.70%)</title><rect x="28.8198%" y="133" width="0.6958%" height="15" fill="rgb(250,213,24)"/><text x="29.0698%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (461,113 samples, 0.30%)</title><rect x="29.2130%" y="117" width="0.3025%" height="15" fill="rgb(247,123,22)"/><text x="29.4630%" y="127.50"></text></g><g><title>impl_trait_ref (1,576,875 samples, 1.03%)</title><rect x="29.5155%" y="133" width="1.0346%" height="15" fill="rgb(231,138,38)"/><text x="29.7655%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,231,053 samples, 0.81%)</title><rect x="29.7424%" y="117" width="0.8077%" height="15" fill="rgb(231,145,46)"/><text x="29.9924%" y="127.50"></text></g><g><title>trait_impls_of (260,402 samples, 0.17%)</title><rect x="30.5587%" y="133" width="0.1708%" height="15" fill="rgb(251,118,11)"/><text x="30.8087%" y="143.50"></text></g><g><title>coherent_trait (6,453,941 samples, 4.23%)</title><rect x="26.4957%" y="165" width="4.2343%" height="15" fill="rgb(217,147,25)"/><text x="26.7457%" y="175.50">coher..</text></g><g><title>specialization_graph_of (6,224,558 samples, 4.08%)</title><rect x="26.6462%" y="149" width="4.0838%" height="15" fill="rgb(247,81,37)"/><text x="26.8962%" y="159.50">spec..</text></g><g><title>coherence_checking (6,534,383 samples, 4.29%)</title><rect x="26.4853%" y="181" width="4.2871%" height="15" fill="rgb(209,12,38)"/><text x="26.7353%" y="191.50">coher..</text></g><g><title>associated_item (592,638 samples, 0.39%)</title><rect x="51.0737%" y="117" width="0.3888%" height="15" fill="rgb(227,1,9)"/><text x="51.3237%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (471,608 samples, 0.31%)</title><rect x="51.1531%" y="101" width="0.3094%" height="15" fill="rgb(248,47,43)"/><text x="51.4031%" y="111.50"></text></g><g><title>associated_items (802,568 samples, 0.53%)</title><rect x="50.9583%" y="133" width="0.5265%" height="15" fill="rgb(221,10,30)"/><text x="51.2083%" y="143.50"></text></g><g><title>dropck_outlives (184,591 samples, 0.12%)</title><rect x="51.5133%" y="133" width="0.1211%" height="15" fill="rgb(210,229,1)"/><text x="51.7633%" y="143.50"></text></g><g><title>mir_const (399,324 samples, 0.26%)</title><rect x="52.0278%" y="69" width="0.2620%" height="15" fill="rgb(222,148,37)"/><text x="52.2778%" y="79.50"></text></g><g><title>unsafety_check_result (267,522 samples, 0.18%)</title><rect x="52.1142%" y="53" width="0.1755%" height="15" fill="rgb(234,67,33)"/><text x="52.3642%" y="63.50"></text></g><g><title>mir_built (181,712 samples, 0.12%)</title><rect x="52.1705%" y="37" width="0.1192%" height="15" fill="rgb(247,98,35)"/><text x="52.4205%" y="47.50"></text></g><g><title>mir_const_qualif (469,584 samples, 0.31%)</title><rect x="51.9826%" y="85" width="0.3081%" height="15" fill="rgb(247,138,52)"/><text x="52.2326%" y="95.50"></text></g><g><title>mir_borrowck (838,029 samples, 0.55%)</title><rect x="52.5631%" y="53" width="0.5498%" height="15" fill="rgb(213,79,30)"/><text x="52.8131%" y="63.50"></text></g><g><title>mir_for_ctfe (1,256,734 samples, 0.82%)</title><rect x="52.2907%" y="85" width="0.8245%" height="15" fill="rgb(246,177,23)"/><text x="52.5407%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,143,423 samples, 0.75%)</title><rect x="52.3650%" y="69" width="0.7502%" height="15" fill="rgb(230,62,27)"/><text x="52.6150%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,271,664 samples, 1.49%)</title><rect x="51.6344%" y="133" width="1.4904%" height="15" fill="rgb(216,154,8)"/><text x="51.8844%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,247,734 samples, 1.47%)</title><rect x="51.6501%" y="117" width="1.4747%" height="15" fill="rgb(244,35,45)"/><text x="51.9001%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,226,554 samples, 1.46%)</title><rect x="51.6640%" y="101" width="1.4608%" height="15" fill="rgb(251,115,12)"/><text x="51.9140%" y="111.50"></text></g><g><title>generics_of (395,213 samples, 0.26%)</title><rect x="54.9959%" y="117" width="0.2593%" height="15" fill="rgb(240,54,50)"/><text x="55.2459%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (310,621 samples, 0.20%)</title><rect x="55.0514%" y="101" width="0.2038%" height="15" fill="rgb(233,84,52)"/><text x="55.3014%" y="111.50"></text></g><g><title>impl_trait_ref (486,026 samples, 0.32%)</title><rect x="55.3278%" y="117" width="0.3189%" height="15" fill="rgb(207,117,47)"/><text x="55.5778%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (407,535 samples, 0.27%)</title><rect x="55.3793%" y="101" width="0.2674%" height="15" fill="rgb(249,43,39)"/><text x="55.6293%" y="111.50"></text></g><g><title>predicates_of (342,025 samples, 0.22%)</title><rect x="55.6746%" y="117" width="0.2244%" height="15" fill="rgb(209,38,44)"/><text x="55.9246%" y="127.50"></text></g><g><title>predicates_defined_on (195,494 samples, 0.13%)</title><rect x="55.7708%" y="101" width="0.1283%" height="15" fill="rgb(236,212,23)"/><text x="56.0208%" y="111.50"></text></g><g><title>specializes (919,125 samples, 0.60%)</title><rect x="55.8990%" y="117" width="0.6030%" height="15" fill="rgb(242,79,21)"/><text x="56.1490%" y="127.50"></text></g><g><title>param_env (540,383 samples, 0.35%)</title><rect x="56.1475%" y="101" width="0.3545%" height="15" fill="rgb(211,96,35)"/><text x="56.3975%" y="111.50"></text></g><g><title>def_span (253,002 samples, 0.17%)</title><rect x="56.3361%" y="85" width="0.1660%" height="15" fill="rgb(253,215,40)"/><text x="56.5861%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (226,902 samples, 0.15%)</title><rect x="56.3532%" y="69" width="0.1489%" height="15" fill="rgb(211,81,21)"/><text x="56.6032%" y="79.50"></text></g><g><title>trait_impls_of (399,618 samples, 0.26%)</title><rect x="56.5155%" y="117" width="0.2622%" height="15" fill="rgb(208,190,38)"/><text x="56.7655%" y="127.50"></text></g><g><title>implementations_of_trait (152,874 samples, 0.10%)</title><rect x="56.6774%" y="101" width="0.1003%" height="15" fill="rgb(235,213,38)"/><text x="56.9274%" y="111.50"></text></g><g><title>evaluate_obligation (5,585,020 samples, 3.66%)</title><rect x="53.1248%" y="133" width="3.6642%" height="15" fill="rgb(237,122,38)"/><text x="53.3748%" y="143.50">eval..</text></g><g><title>item_attrs (205,430 samples, 0.13%)</title><rect x="57.0574%" y="133" width="0.1348%" height="15" fill="rgb(244,218,35)"/><text x="57.3074%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (201,730 samples, 0.13%)</title><rect x="57.0599%" y="117" width="0.1324%" height="15" fill="rgb(240,68,47)"/><text x="57.3099%" y="127.50"></text></g><g><title>method_autoderef_steps (1,146,527 samples, 0.75%)</title><rect x="57.2269%" y="133" width="0.7522%" height="15" fill="rgb(210,16,53)"/><text x="57.4769%" y="143.50"></text></g><g><title>evaluate_obligation (558,209 samples, 0.37%)</title><rect x="57.6128%" y="117" width="0.3662%" height="15" fill="rgb(235,124,12)"/><text x="57.8628%" y="127.50"></text></g><g><title>explicit_predicates_of (159,533 samples, 0.10%)</title><rect x="58.2798%" y="85" width="0.1047%" height="15" fill="rgb(224,169,11)"/><text x="58.5298%" y="95.50"></text></g><g><title>param_env (578,318 samples, 0.38%)</title><rect x="58.0132%" y="133" width="0.3794%" height="15" fill="rgb(250,166,2)"/><text x="58.2632%" y="143.50"></text></g><g><title>predicates_of (307,125 samples, 0.20%)</title><rect x="58.1911%" y="117" width="0.2015%" height="15" fill="rgb(242,216,29)"/><text x="58.4411%" y="127.50"></text></g><g><title>predicates_defined_on (259,253 samples, 0.17%)</title><rect x="58.2225%" y="101" width="0.1701%" height="15" fill="rgb(230,116,27)"/><text x="58.4725%" y="111.50"></text></g><g><title>explicit_predicates_of (171,502 samples, 0.11%)</title><rect x="58.5157%" y="101" width="0.1125%" height="15" fill="rgb(228,99,48)"/><text x="58.7657%" y="111.50"></text></g><g><title>predicates_of (374,154 samples, 0.25%)</title><rect x="58.4081%" y="133" width="0.2455%" height="15" fill="rgb(253,11,6)"/><text x="58.6581%" y="143.50"></text></g><g><title>predicates_defined_on (277,123 samples, 0.18%)</title><rect x="58.4717%" y="117" width="0.1818%" height="15" fill="rgb(247,143,39)"/><text x="58.7217%" y="127.50"></text></g><g><title>item_bodies_checking (42,733,846 samples, 28.04%)</title><rect x="30.8103%" y="181" width="28.0368%" height="15" fill="rgb(236,97,10)"/><text x="31.0603%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (42,730,716 samples, 28.03%)</title><rect x="30.8124%" y="165" width="28.0347%" height="15" fill="rgb(233,208,19)"/><text x="31.0624%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (42,554,616 samples, 27.92%)</title><rect x="30.9279%" y="149" width="27.9192%" height="15" fill="rgb(216,164,2)"/><text x="31.1779%" y="159.50">typeck</text></g><g><title>item_types_checking (2,645,300 samples, 1.74%)</title><rect x="58.8471%" y="181" width="1.7355%" height="15" fill="rgb(220,129,5)"/><text x="59.0971%" y="191.50"></text></g><g><title>check_mod_item_types (2,641,230 samples, 1.73%)</title><rect x="58.8498%" y="165" width="1.7329%" height="15" fill="rgb(242,17,10)"/><text x="59.0998%" y="175.50"></text></g><g><title>fn_sig (266,231 samples, 0.17%)</title><rect x="60.8523%" y="149" width="0.1747%" height="15" fill="rgb(242,107,0)"/><text x="61.1023%" y="159.50"></text></g><g><title>named_region_map (209,061 samples, 0.14%)</title><rect x="61.1721%" y="133" width="0.1372%" height="15" fill="rgb(251,28,31)"/><text x="61.4221%" y="143.50"></text></g><g><title>resolve_lifetimes (180,820 samples, 0.12%)</title><rect x="61.1906%" y="117" width="0.1186%" height="15" fill="rgb(233,223,10)"/><text x="61.4406%" y="127.50"></text></g><g><title>generics_of (459,534 samples, 0.30%)</title><rect x="61.0270%" y="149" width="0.3015%" height="15" fill="rgb(215,21,27)"/><text x="61.2770%" y="159.50"></text></g><g><title>late_bound_vars_map (384,002 samples, 0.25%)</title><rect x="61.8834%" y="101" width="0.2519%" height="15" fill="rgb(232,23,21)"/><text x="62.1334%" y="111.50"></text></g><g><title>resolve_lifetimes (341,662 samples, 0.22%)</title><rect x="61.9112%" y="85" width="0.2242%" height="15" fill="rgb(244,5,23)"/><text x="62.1612%" y="95.50"></text></g><g><title>explicit_predicates_of (902,811 samples, 0.59%)</title><rect x="61.5537%" y="117" width="0.5923%" height="15" fill="rgb(226,81,46)"/><text x="61.8037%" y="127.50"></text></g><g><title>predicates_of (1,296,454 samples, 0.85%)</title><rect x="61.4225%" y="149" width="0.8506%" height="15" fill="rgb(247,70,30)"/><text x="61.6725%" y="159.50"></text></g><g><title>predicates_defined_on (1,218,774 samples, 0.80%)</title><rect x="61.4735%" y="133" width="0.7996%" height="15" fill="rgb(212,68,19)"/><text x="61.7235%" y="143.50"></text></g><g><title>inferred_outlives_of (193,802 samples, 0.13%)</title><rect x="62.1460%" y="117" width="0.1271%" height="15" fill="rgb(240,187,13)"/><text x="62.3960%" y="127.50"></text></g><g><title>inferred_outlives_crate (158,372 samples, 0.10%)</title><rect x="62.1692%" y="101" width="0.1039%" height="15" fill="rgb(223,113,26)"/><text x="62.4192%" y="111.50"></text></g><g><title>type_collecting (2,808,322 samples, 1.84%)</title><rect x="60.5836%" y="181" width="1.8425%" height="15" fill="rgb(206,192,2)"/><text x="60.8336%" y="191.50">t..</text></g><g><title>collect_mod_item_types (2,798,852 samples, 1.84%)</title><rect x="60.5898%" y="165" width="1.8363%" height="15" fill="rgb(241,108,4)"/><text x="60.8398%" y="175.50">c..</text></g><g><title>type_of (210,243 samples, 0.14%)</title><rect x="62.2882%" y="149" width="0.1379%" height="15" fill="rgb(247,173,49)"/><text x="62.5382%" y="159.50"></text></g><g><title>evaluate_obligation (1,399,757 samples, 0.92%)</title><rect x="65.6811%" y="149" width="0.9184%" height="15" fill="rgb(224,114,35)"/><text x="65.9311%" y="159.50"></text></g><g><title>implied_outlives_bounds (731,919 samples, 0.48%)</title><rect x="66.6032%" y="149" width="0.4802%" height="15" fill="rgb(245,159,27)"/><text x="66.8532%" y="159.50"></text></g><g><title>param_env (567,447 samples, 0.37%)</title><rect x="67.0834%" y="149" width="0.3723%" height="15" fill="rgb(245,172,44)"/><text x="67.3334%" y="159.50"></text></g><g><title>check_impl_item_well_formed (7,831,665 samples, 5.14%)</title><rect x="62.6461%" y="165" width="5.1382%" height="15" fill="rgb(236,23,11)"/><text x="62.8961%" y="175.50">check_..</text></g><g><title>region_scope_tree (471,134 samples, 0.31%)</title><rect x="67.4752%" y="149" width="0.3091%" height="15" fill="rgb(205,117,38)"/><text x="67.7252%" y="159.50"></text></g><g><title>evaluate_obligation (218,311 samples, 0.14%)</title><rect x="70.7359%" y="149" width="0.1432%" height="15" fill="rgb(237,72,25)"/><text x="70.9859%" y="159.50"></text></g><g><title>implied_outlives_bounds (252,375 samples, 0.17%)</title><rect x="70.8998%" y="149" width="0.1656%" height="15" fill="rgb(244,70,9)"/><text x="71.1498%" y="159.50"></text></g><g><title>param_env (554,009 samples, 0.36%)</title><rect x="71.0654%" y="149" width="0.3635%" height="15" fill="rgb(217,125,39)"/><text x="71.3154%" y="159.50"></text></g><g><title>check_item_well_formed (5,779,586 samples, 3.79%)</title><rect x="67.7843%" y="165" width="3.7919%" height="15" fill="rgb(235,36,10)"/><text x="68.0343%" y="175.50">chec..</text></g><g><title>analysis (108,832,632 samples, 71.40%)</title><rect x="0.4243%" y="213" width="71.4028%" height="15" fill="rgb(251,123,47)"/><text x="0.6743%" y="223.50">analysis</text></g><g><title>type_check_crate (69,203,801 samples, 45.40%)</title><rect x="26.4240%" y="197" width="45.4032%" height="15" fill="rgb(221,13,13)"/><text x="26.6740%" y="207.50">type_check_crate</text></g><g><title>wf_checking (14,317,779 samples, 9.39%)</title><rect x="62.4335%" y="181" width="9.3936%" height="15" fill="rgb(238,131,9)"/><text x="62.6835%" y="191.50">wf_checking</text></g><g><title>check_trait_item_well_formed (382,535 samples, 0.25%)</title><rect x="71.5762%" y="165" width="0.2510%" height="15" fill="rgb(211,50,8)"/><text x="71.8262%" y="175.50"></text></g><g><title>codegen_crate (404,375 samples, 0.27%)</title><rect x="71.8353%" y="213" width="0.2653%" height="15" fill="rgb(245,182,24)"/><text x="72.0853%" y="223.50"></text></g><g><title>AST_validation (355,274 samples, 0.23%)</title><rect x="72.2506%" y="197" width="0.2331%" height="15" fill="rgb(242,14,37)"/><text x="72.5006%" y="207.50"></text></g><g><title>metadata_load_macro (350,173 samples, 0.23%)</title><rect x="87.5576%" y="165" width="0.2297%" height="15" fill="rgb(246,228,12)"/><text x="87.8076%" y="175.50"></text></g><g><title>metadata_register_crate (223,742 samples, 0.15%)</title><rect x="87.7873%" y="165" width="0.1468%" height="15" fill="rgb(213,55,15)"/><text x="88.0373%" y="175.50"></text></g><g><title>macro_expand_crate (23,477,211 samples, 15.40%)</title><rect x="72.6175%" y="197" width="15.4029%" height="15" fill="rgb(209,9,3)"/><text x="72.8675%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (23,449,391 samples, 15.38%)</title><rect x="72.6358%" y="181" width="15.3847%" height="15" fill="rgb(230,59,30)"/><text x="72.8858%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (209,202 samples, 0.14%)</title><rect x="88.0242%" y="197" width="0.1373%" height="15" fill="rgb(209,121,21)"/><text x="88.2742%" y="207.50"></text></g><g><title>finalize_macro_resolutions (298,773 samples, 0.20%)</title><rect x="88.1981%" y="181" width="0.1960%" height="15" fill="rgb(220,109,13)"/><text x="88.4481%" y="191.50"></text></g><g><title>late_resolve_crate (4,459,780 samples, 2.93%)</title><rect x="88.3942%" y="181" width="2.9260%" height="15" fill="rgb(232,18,1)"/><text x="88.6442%" y="191.50">la..</text></g><g><title>configure_and_expand (29,498,389 samples, 19.35%)</title><rect x="72.1006%" y="213" width="19.3533%" height="15" fill="rgb(215,41,42)"/><text x="72.3506%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (5,018,376 samples, 3.29%)</title><rect x="88.1614%" y="197" width="3.2925%" height="15" fill="rgb(224,123,36)"/><text x="88.4114%" y="207.50">res..</text></g><g><title>drop_ast (200,572 samples, 0.13%)</title><rect x="91.4539%" y="213" width="0.1316%" height="15" fill="rgb(240,125,3)"/><text x="91.7039%" y="223.50"></text></g><g><title>early_lint_checks (408,375 samples, 0.27%)</title><rect x="91.5959%" y="213" width="0.2679%" height="15" fill="rgb(205,98,50)"/><text x="91.8459%" y="223.50"></text></g><g><title>free_global_ctxt (2,366,156 samples, 1.55%)</title><rect x="91.8638%" y="213" width="1.5524%" height="15" fill="rgb(205,185,37)"/><text x="92.1138%" y="223.50"></text></g><g><title>generate_crate_metadata (1,955,802 samples, 1.28%)</title><rect x="93.4162%" y="213" width="1.2832%" height="15" fill="rgb(238,207,15)"/><text x="93.6662%" y="223.50"></text></g><g><title>hir_lowering (3,921,413 samples, 2.57%)</title><rect x="94.6994%" y="213" width="2.5728%" height="15" fill="rgb(213,199,42)"/><text x="94.9494%" y="223.50">hi..</text></g><g><title>parse_crate (2,468,517 samples, 1.62%)</title><rect x="97.3026%" y="213" width="1.6195%" height="15" fill="rgb(235,201,11)"/><text x="97.5526%" y="223.50"></text></g><g><title>prepare_outputs (267,973 samples, 0.18%)</title><rect x="98.9286%" y="213" width="0.1758%" height="15" fill="rgb(207,46,11)"/><text x="99.1786%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (876,280 samples, 0.57%)</title><rect x="99.1044%" y="213" width="0.5749%" height="15" fill="rgb(241,35,35)"/><text x="99.3544%" y="223.50"></text></g><g><title>all (152,420,577 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (152,420,577 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (403,574 samples, 0.26%)</title><rect x="99.7352%" y="213" width="0.2648%" height="15" fill="rgb(219,102,11)"/><text x="99.9852%" y="223.50"></text></g></svg></svg>