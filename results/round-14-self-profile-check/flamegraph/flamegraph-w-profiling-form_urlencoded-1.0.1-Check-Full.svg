<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (244,030 samples, 0.26%)</title><rect x="10.5132%" y="101" width="0.2577%" height="15" fill="rgb(227,0,7)"/><text x="10.7632%" y="111.50"></text></g><g><title>item_attrs (229,091 samples, 0.24%)</title><rect x="11.1633%" y="69" width="0.2419%" height="15" fill="rgb(217,0,24)"/><text x="11.4133%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (220,171 samples, 0.23%)</title><rect x="11.1727%" y="53" width="0.2325%" height="15" fill="rgb(221,193,54)"/><text x="11.4227%" y="63.50"></text></g><g><title>codegen_fn_attrs (328,984 samples, 0.35%)</title><rect x="11.0709%" y="85" width="0.3474%" height="15" fill="rgb(248,212,6)"/><text x="11.3209%" y="95.50"></text></g><g><title>is_copy_raw (140,141 samples, 0.15%)</title><rect x="13.0870%" y="69" width="0.1480%" height="15" fill="rgb(208,68,35)"/><text x="13.3370%" y="79.50"></text></g><g><title>evaluate_obligation (119,471 samples, 0.13%)</title><rect x="13.1089%" y="53" width="0.1261%" height="15" fill="rgb(232,128,0)"/><text x="13.3589%" y="63.50"></text></g><g><title>adt_drop_tys (203,104 samples, 0.21%)</title><rect x="13.3251%" y="53" width="0.2145%" height="15" fill="rgb(207,160,47)"/><text x="13.5751%" y="63.50"></text></g><g><title>needs_drop_raw (817,493 samples, 0.86%)</title><rect x="13.2350%" y="69" width="0.8632%" height="15" fill="rgb(228,23,34)"/><text x="13.4850%" y="79.50"></text></g><g><title>is_copy_raw (528,628 samples, 0.56%)</title><rect x="13.5400%" y="53" width="0.5582%" height="15" fill="rgb(218,30,26)"/><text x="13.7900%" y="63.50"></text></g><g><title>evaluate_obligation (440,916 samples, 0.47%)</title><rect x="13.6326%" y="37" width="0.4655%" height="15" fill="rgb(220,122,19)"/><text x="13.8826%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (208,002 samples, 0.22%)</title><rect x="14.2324%" y="53" width="0.2196%" height="15" fill="rgb(250,228,42)"/><text x="14.4824%" y="63.50"></text></g><g><title>specialization_graph_of (228,542 samples, 0.24%)</title><rect x="14.4769%" y="53" width="0.2413%" height="15" fill="rgb(240,193,28)"/><text x="14.7269%" y="63.50"></text></g><g><title>impl_trait_ref (106,951 samples, 0.11%)</title><rect x="14.6053%" y="37" width="0.1129%" height="15" fill="rgb(216,20,37)"/><text x="14.8553%" y="47.50"></text></g><g><title>resolve_instance (643,017 samples, 0.68%)</title><rect x="14.0982%" y="69" width="0.6789%" height="15" fill="rgb(206,188,39)"/><text x="14.3482%" y="79.50"></text></g><g><title>thir_body (553,327 samples, 0.58%)</title><rect x="14.7942%" y="69" width="0.5842%" height="15" fill="rgb(217,207,13)"/><text x="15.0442%" y="79.50"></text></g><g><title>mir_const (5,164,046 samples, 5.45%)</title><rect x="9.9474%" y="117" width="5.4525%" height="15" fill="rgb(231,73,38)"/><text x="10.1974%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (4,384,156 samples, 4.63%)</title><rect x="10.7708%" y="101" width="4.6291%" height="15" fill="rgb(225,20,46)"/><text x="11.0208%" y="111.50">unsaf..</text></g><g><title>mir_built (3,770,990 samples, 3.98%)</title><rect x="11.4182%" y="85" width="3.9817%" height="15" fill="rgb(210,31,41)"/><text x="11.6682%" y="95.50">mir_..</text></g><g><title>mir_promoted (5,726,680 samples, 6.05%)</title><rect x="9.3811%" y="133" width="6.0466%" height="15" fill="rgb(221,200,47)"/><text x="9.6311%" y="143.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (123,220 samples, 0.13%)</title><rect x="15.4277%" y="133" width="0.1301%" height="15" fill="rgb(226,26,5)"/><text x="15.6777%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (470,894 samples, 0.50%)</title><rect x="15.5578%" y="133" width="0.4972%" height="15" fill="rgb(249,33,26)"/><text x="15.8078%" y="143.50"></text></g><g><title>normalize_projection_ty (297,681 samples, 0.31%)</title><rect x="15.7407%" y="117" width="0.3143%" height="15" fill="rgb(235,183,28)"/><text x="15.9907%" y="127.50"></text></g><g><title>type_op_normalize_ty (129,971 samples, 0.14%)</title><rect x="16.1459%" y="133" width="0.1372%" height="15" fill="rgb(221,5,38)"/><text x="16.3959%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,166,586 samples, 2.29%)</title><rect x="16.2832%" y="133" width="2.2876%" height="15" fill="rgb(247,18,42)"/><text x="16.5332%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (16,499,704 samples, 17.42%)</title><rect x="1.1681%" y="165" width="17.4215%" height="15" fill="rgb(241,131,45)"/><text x="1.4181%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (16,431,824 samples, 17.35%)</title><rect x="1.2397%" y="149" width="17.3498%" height="15" fill="rgb(249,31,29)"/><text x="1.4897%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (216,682 samples, 0.23%)</title><rect x="18.6070%" y="165" width="0.2288%" height="15" fill="rgb(225,111,53)"/><text x="18.8570%" y="175.50"></text></g><g><title>get_lang_items (123,011 samples, 0.13%)</title><rect x="19.2405%" y="117" width="0.1299%" height="15" fill="rgb(238,160,17)"/><text x="19.4905%" y="127.50"></text></g><g><title>codegen_fn_attrs (138,411 samples, 0.15%)</title><rect x="19.5019%" y="101" width="0.1461%" height="15" fill="rgb(214,148,48)"/><text x="19.7519%" y="111.50"></text></g><g><title>should_inherit_track_caller (272,851 samples, 0.29%)</title><rect x="19.3704%" y="117" width="0.2881%" height="15" fill="rgb(232,36,49)"/><text x="19.6204%" y="127.50"></text></g><g><title>codegen_fn_attrs (531,613 samples, 0.56%)</title><rect x="19.1344%" y="133" width="0.5613%" height="15" fill="rgb(209,103,24)"/><text x="19.3844%" y="143.50"></text></g><g><title>check_mod_attrs (785,149 samples, 0.83%)</title><rect x="18.8670%" y="149" width="0.8290%" height="15" fill="rgb(229,88,8)"/><text x="19.1170%" y="159.50"></text></g><g><title>check_mod_const_bodies (153,492 samples, 0.16%)</title><rect x="19.6960%" y="149" width="0.1621%" height="15" fill="rgb(213,181,19)"/><text x="19.9460%" y="159.50"></text></g><g><title>lookup_deprecation_entry (183,101 samples, 0.19%)</title><rect x="20.1872%" y="133" width="0.1933%" height="15" fill="rgb(254,191,54)"/><text x="20.4372%" y="143.50"></text></g><g><title>stability_index (103,721 samples, 0.11%)</title><rect x="20.2711%" y="117" width="0.1095%" height="15" fill="rgb(241,83,37)"/><text x="20.5211%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (525,026 samples, 0.55%)</title><rect x="19.9608%" y="149" width="0.5544%" height="15" fill="rgb(233,36,39)"/><text x="20.2108%" y="159.50"></text></g><g><title>misc_checking_1 (1,656,558 samples, 1.75%)</title><rect x="18.8362%" y="165" width="1.7491%" height="15" fill="rgb(226,3,54)"/><text x="19.0862%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (274,013 samples, 0.29%)</title><rect x="20.5872%" y="149" width="0.2893%" height="15" fill="rgb(245,192,40)"/><text x="20.8372%" y="159.50"></text></g><g><title>check_mod_liveness (220,883 samples, 0.23%)</title><rect x="20.6433%" y="133" width="0.2332%" height="15" fill="rgb(238,167,29)"/><text x="20.8933%" y="143.50"></text></g><g><title>misc_checking_2 (684,577 samples, 0.72%)</title><rect x="20.5853%" y="165" width="0.7228%" height="15" fill="rgb(232,182,51)"/><text x="20.8353%" y="175.50"></text></g><g><title>match_checking (408,714 samples, 0.43%)</title><rect x="20.8765%" y="149" width="0.4315%" height="15" fill="rgb(231,60,39)"/><text x="21.1265%" y="159.50"></text></g><g><title>check_match (389,414 samples, 0.41%)</title><rect x="20.8969%" y="133" width="0.4112%" height="15" fill="rgb(208,69,12)"/><text x="21.1469%" y="143.50"></text></g><g><title>check_private_in_public (107,851 samples, 0.11%)</title><rect x="21.3172%" y="149" width="0.1139%" height="15" fill="rgb(235,93,37)"/><text x="21.5672%" y="159.50"></text></g><g><title>death_checking (206,283 samples, 0.22%)</title><rect x="21.4311%" y="149" width="0.2178%" height="15" fill="rgb(213,116,39)"/><text x="21.6811%" y="159.50"></text></g><g><title>crate_lints (1,710,078 samples, 1.81%)</title><rect x="21.6505%" y="133" width="1.8056%" height="15" fill="rgb(222,207,29)"/><text x="21.9005%" y="143.50">c..</text></g><g><title>type_of (1,059,880 samples, 1.12%)</title><rect x="22.3370%" y="117" width="1.1191%" height="15" fill="rgb(206,96,30)"/><text x="22.5870%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (827,279 samples, 0.87%)</title><rect x="22.5826%" y="101" width="0.8735%" height="15" fill="rgb(218,138,4)"/><text x="22.8326%" y="111.50"></text></g><g><title>lint_checking (1,919,781 samples, 2.03%)</title><rect x="21.6489%" y="149" width="2.0270%" height="15" fill="rgb(250,191,14)"/><text x="21.8989%" y="159.50">l..</text></g><g><title>module_lints (208,233 samples, 0.22%)</title><rect x="23.4561%" y="133" width="0.2199%" height="15" fill="rgb(239,60,40)"/><text x="23.7061%" y="143.50"></text></g><g><title>lint_mod (205,723 samples, 0.22%)</title><rect x="23.4587%" y="117" width="0.2172%" height="15" fill="rgb(206,27,48)"/><text x="23.7087%" y="127.50"></text></g><g><title>privacy_access_levels (134,181 samples, 0.14%)</title><rect x="23.6760%" y="149" width="0.1417%" height="15" fill="rgb(225,35,8)"/><text x="23.9260%" y="159.50"></text></g><g><title>privacy_checking_modules (506,295 samples, 0.53%)</title><rect x="23.8176%" y="149" width="0.5346%" height="15" fill="rgb(250,213,24)"/><text x="24.0676%" y="159.50"></text></g><g><title>check_mod_privacy (504,175 samples, 0.53%)</title><rect x="23.8199%" y="133" width="0.5323%" height="15" fill="rgb(247,123,22)"/><text x="24.0699%" y="143.50"></text></g><g><title>misc_checking_3 (2,893,821 samples, 3.06%)</title><rect x="21.3081%" y="165" width="3.0555%" height="15" fill="rgb(231,138,38)"/><text x="21.5581%" y="175.50">mis..</text></g><g><title>impl_trait_ref (144,493 samples, 0.15%)</title><rect x="24.5966%" y="69" width="0.1526%" height="15" fill="rgb(231,145,46)"/><text x="24.8466%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (126,212 samples, 0.13%)</title><rect x="24.6159%" y="53" width="0.1333%" height="15" fill="rgb(251,118,11)"/><text x="24.8659%" y="63.50"></text></g><g><title>adt_destructor (299,584 samples, 0.32%)</title><rect x="24.4627%" y="117" width="0.3163%" height="15" fill="rgb(217,147,25)"/><text x="24.7127%" y="127.50"></text></g><g><title>coherent_trait (296,784 samples, 0.31%)</title><rect x="24.4657%" y="101" width="0.3134%" height="15" fill="rgb(247,81,37)"/><text x="24.7157%" y="111.50"></text></g><g><title>specialization_graph_of (295,414 samples, 0.31%)</title><rect x="24.4671%" y="85" width="0.3119%" height="15" fill="rgb(209,12,38)"/><text x="24.7171%" y="95.50"></text></g><g><title>is_copy_raw (175,722 samples, 0.19%)</title><rect x="24.7790%" y="117" width="0.1855%" height="15" fill="rgb(227,1,9)"/><text x="25.0290%" y="127.50"></text></g><g><title>evaluate_obligation (134,851 samples, 0.14%)</title><rect x="24.8222%" y="101" width="0.1424%" height="15" fill="rgb(248,47,43)"/><text x="25.0722%" y="111.50"></text></g><g><title>impl_parent (1,802,607 samples, 1.90%)</title><rect x="28.2075%" y="101" width="1.9033%" height="15" fill="rgb(221,10,30)"/><text x="28.4575%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,106,199 samples, 1.17%)</title><rect x="28.9428%" y="85" width="1.1680%" height="15" fill="rgb(210,229,1)"/><text x="29.1928%" y="95.50"></text></g><g><title>impl_trait_ref (4,797,822 samples, 5.07%)</title><rect x="30.1108%" y="101" width="5.0659%" height="15" fill="rgb(222,148,37)"/><text x="30.3608%" y="111.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,106,065 samples, 4.34%)</title><rect x="30.8412%" y="85" width="4.3355%" height="15" fill="rgb(234,67,33)"/><text x="31.0912%" y="95.50">metad..</text></g><g><title>coherent_trait (10,848,251 samples, 11.45%)</title><rect x="24.4343%" y="133" width="11.4543%" height="15" fill="rgb(247,98,35)"/><text x="24.6843%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (10,277,164 samples, 10.85%)</title><rect x="25.0372%" y="117" width="10.8513%" height="15" fill="rgb(247,138,52)"/><text x="25.2872%" y="127.50">specialization_g..</text></g><g><title>trait_impls_of (672,667 samples, 0.71%)</title><rect x="35.1783%" y="101" width="0.7102%" height="15" fill="rgb(213,79,30)"/><text x="35.4283%" y="111.50"></text></g><g><title>implementations_of_trait (160,580 samples, 0.17%)</title><rect x="35.7190%" y="85" width="0.1696%" height="15" fill="rgb(246,177,23)"/><text x="35.9690%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (134,170 samples, 0.14%)</title><rect x="35.7469%" y="69" width="0.1417%" height="15" fill="rgb(230,62,27)"/><text x="35.9969%" y="79.50"></text></g><g><title>coherence_checking (10,907,141 samples, 11.52%)</title><rect x="24.4143%" y="149" width="11.5165%" height="15" fill="rgb(216,154,8)"/><text x="24.6643%" y="159.50">coherence_checking</text></g><g><title>associated_items (135,322 samples, 0.14%)</title><rect x="45.3738%" y="101" width="0.1429%" height="15" fill="rgb(244,35,45)"/><text x="45.6238%" y="111.50"></text></g><g><title>dropck_outlives (232,121 samples, 0.25%)</title><rect x="45.5738%" y="101" width="0.2451%" height="15" fill="rgb(251,115,12)"/><text x="45.8238%" y="111.50"></text></g><g><title>trait_impls_of (187,581 samples, 0.20%)</title><rect x="46.7990%" y="85" width="0.1981%" height="15" fill="rgb(240,54,50)"/><text x="47.0490%" y="95.50"></text></g><g><title>evaluate_obligation (1,117,739 samples, 1.18%)</title><rect x="45.8189%" y="101" width="1.1802%" height="15" fill="rgb(233,84,52)"/><text x="46.0689%" y="111.50"></text></g><g><title>item_attrs (98,901 samples, 0.10%)</title><rect x="47.2919%" y="101" width="0.1044%" height="15" fill="rgb(207,117,47)"/><text x="47.5419%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (94,951 samples, 0.10%)</title><rect x="47.2961%" y="85" width="0.1003%" height="15" fill="rgb(249,43,39)"/><text x="47.5461%" y="95.50"></text></g><g><title>method_autoderef_steps (189,422 samples, 0.20%)</title><rect x="47.4452%" y="101" width="0.2000%" height="15" fill="rgb(209,38,44)"/><text x="47.6952%" y="111.50"></text></g><g><title>predicates_of (215,851 samples, 0.23%)</title><rect x="47.7577%" y="101" width="0.2279%" height="15" fill="rgb(236,212,23)"/><text x="48.0077%" y="111.50"></text></g><g><title>predicates_defined_on (154,970 samples, 0.16%)</title><rect x="47.8220%" y="85" width="0.1636%" height="15" fill="rgb(242,79,21)"/><text x="48.0720%" y="95.50"></text></g><g><title>associated_item (236,363 samples, 0.25%)</title><rect x="53.6060%" y="69" width="0.2496%" height="15" fill="rgb(211,96,35)"/><text x="53.8560%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (187,043 samples, 0.20%)</title><rect x="53.6581%" y="53" width="0.1975%" height="15" fill="rgb(253,215,40)"/><text x="53.9081%" y="63.50"></text></g><g><title>associated_items (357,223 samples, 0.38%)</title><rect x="53.4971%" y="85" width="0.3772%" height="15" fill="rgb(211,81,21)"/><text x="53.7471%" y="95.50"></text></g><g><title>adt_dtorck_constraint (100,631 samples, 0.11%)</title><rect x="54.0496%" y="37" width="0.1063%" height="15" fill="rgb(208,190,38)"/><text x="54.2996%" y="47.50"></text></g><g><title>adt_dtorck_constraint (114,001 samples, 0.12%)</title><rect x="54.0408%" y="53" width="0.1204%" height="15" fill="rgb(235,213,38)"/><text x="54.2908%" y="63.50"></text></g><g><title>adt_dtorck_constraint (174,342 samples, 0.18%)</title><rect x="53.9889%" y="69" width="0.1841%" height="15" fill="rgb(237,122,38)"/><text x="54.2389%" y="79.50"></text></g><g><title>dropck_outlives (262,345 samples, 0.28%)</title><rect x="53.9061%" y="85" width="0.2770%" height="15" fill="rgb(244,218,35)"/><text x="54.1561%" y="95.50"></text></g><g><title>generics_of (259,694 samples, 0.27%)</title><rect x="55.3732%" y="69" width="0.2742%" height="15" fill="rgb(240,68,47)"/><text x="55.6232%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (211,684 samples, 0.22%)</title><rect x="55.4239%" y="53" width="0.2235%" height="15" fill="rgb(210,16,53)"/><text x="55.6739%" y="63.50"></text></g><g><title>impl_trait_ref (463,266 samples, 0.49%)</title><rect x="55.6655%" y="69" width="0.4891%" height="15" fill="rgb(235,124,12)"/><text x="55.9155%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (415,526 samples, 0.44%)</title><rect x="55.7159%" y="53" width="0.4387%" height="15" fill="rgb(224,169,11)"/><text x="55.9659%" y="63.50"></text></g><g><title>predicates_of (117,340 samples, 0.12%)</title><rect x="56.1646%" y="69" width="0.1239%" height="15" fill="rgb(250,166,2)"/><text x="56.4146%" y="79.50"></text></g><g><title>specializes (211,273 samples, 0.22%)</title><rect x="56.2885%" y="69" width="0.2231%" height="15" fill="rgb(242,216,29)"/><text x="56.5385%" y="79.50"></text></g><g><title>param_env (134,501 samples, 0.14%)</title><rect x="56.3695%" y="53" width="0.1420%" height="15" fill="rgb(230,116,27)"/><text x="56.6195%" y="63.50"></text></g><g><title>trait_impls_of (228,923 samples, 0.24%)</title><rect x="56.5186%" y="69" width="0.2417%" height="15" fill="rgb(228,99,48)"/><text x="56.7686%" y="79.50"></text></g><g><title>evaluate_obligation (2,449,166 samples, 2.59%)</title><rect x="54.1831%" y="85" width="2.5860%" height="15" fill="rgb(253,11,6)"/><text x="54.4331%" y="95.50">ev..</text></g><g><title>impl_item_implementor_ids (118,984 samples, 0.13%)</title><rect x="56.9400%" y="85" width="0.1256%" height="15" fill="rgb(247,143,39)"/><text x="57.1900%" y="95.50"></text></g><g><title>associated_items (103,324 samples, 0.11%)</title><rect x="56.9565%" y="69" width="0.1091%" height="15" fill="rgb(236,97,10)"/><text x="57.2065%" y="79.50"></text></g><g><title>method_autoderef_steps (205,462 samples, 0.22%)</title><rect x="57.2643%" y="85" width="0.2169%" height="15" fill="rgb(233,208,19)"/><text x="57.5143%" y="95.50"></text></g><g><title>evaluate_obligation (124,041 samples, 0.13%)</title><rect x="57.3503%" y="69" width="0.1310%" height="15" fill="rgb(216,164,2)"/><text x="57.6003%" y="79.50"></text></g><g><title>predicates_of (214,893 samples, 0.23%)</title><rect x="57.5012%" y="85" width="0.2269%" height="15" fill="rgb(220,129,5)"/><text x="57.7512%" y="95.50"></text></g><g><title>predicates_defined_on (159,743 samples, 0.17%)</title><rect x="57.5595%" y="69" width="0.1687%" height="15" fill="rgb(242,17,10)"/><text x="57.8095%" y="79.50"></text></g><g><title>typeck (9,160,071 samples, 9.67%)</title><rect x="48.1208%" y="101" width="9.6718%" height="15" fill="rgb(242,107,0)"/><text x="48.3708%" y="111.50">typeck</text></g><g><title>item_bodies_checking (20,694,071 samples, 21.85%)</title><rect x="35.9680%" y="149" width="21.8501%" height="15" fill="rgb(251,28,31)"/><text x="36.2180%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,690,891 samples, 21.85%)</title><rect x="35.9714%" y="133" width="21.8468%" height="15" fill="rgb(233,223,10)"/><text x="36.2214%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (20,646,701 samples, 21.80%)</title><rect x="36.0180%" y="117" width="21.8001%" height="15" fill="rgb(215,21,27)"/><text x="36.2680%" y="127.50">typeck</text></g><g><title>item_types_checking (501,035 samples, 0.53%)</title><rect x="57.8182%" y="149" width="0.5290%" height="15" fill="rgb(232,23,21)"/><text x="58.0682%" y="159.50"></text></g><g><title>check_mod_item_types (498,715 samples, 0.53%)</title><rect x="57.8206%" y="133" width="0.5266%" height="15" fill="rgb(244,5,23)"/><text x="58.0706%" y="143.50"></text></g><g><title>associated_items (109,952 samples, 0.12%)</title><rect x="58.9983%" y="101" width="0.1161%" height="15" fill="rgb(226,81,46)"/><text x="59.2483%" y="111.50"></text></g><g><title>fn_sig (575,156 samples, 0.61%)</title><rect x="58.6565%" y="117" width="0.6073%" height="15" fill="rgb(247,70,30)"/><text x="58.9065%" y="127.50"></text></g><g><title>lint_levels (119,681 samples, 0.13%)</title><rect x="59.7685%" y="69" width="0.1264%" height="15" fill="rgb(212,68,19)"/><text x="60.0185%" y="79.50"></text></g><g><title>is_late_bound_map (442,775 samples, 0.47%)</title><rect x="59.4283%" y="101" width="0.4675%" height="15" fill="rgb(240,187,13)"/><text x="59.6783%" y="111.50"></text></g><g><title>resolve_lifetimes (422,045 samples, 0.45%)</title><rect x="59.4502%" y="85" width="0.4456%" height="15" fill="rgb(223,113,26)"/><text x="59.7002%" y="95.50"></text></g><g><title>named_region_map (221,764 samples, 0.23%)</title><rect x="59.8958%" y="101" width="0.2342%" height="15" fill="rgb(206,192,2)"/><text x="60.1458%" y="111.50"></text></g><g><title>resolve_lifetimes (192,614 samples, 0.20%)</title><rect x="59.9266%" y="85" width="0.2034%" height="15" fill="rgb(241,108,4)"/><text x="60.1766%" y="95.50"></text></g><g><title>generics_of (836,520 samples, 0.88%)</title><rect x="59.2637%" y="117" width="0.8833%" height="15" fill="rgb(247,173,49)"/><text x="59.5137%" y="127.50"></text></g><g><title>explicit_predicates_of (259,546 samples, 0.27%)</title><rect x="60.3357%" y="85" width="0.2740%" height="15" fill="rgb(224,114,35)"/><text x="60.5857%" y="95.50"></text></g><g><title>predicates_of (1,212,316 samples, 1.28%)</title><rect x="60.1996%" y="117" width="1.2800%" height="15" fill="rgb(245,159,27)"/><text x="60.4496%" y="127.50"></text></g><g><title>predicates_defined_on (1,160,345 samples, 1.23%)</title><rect x="60.2545%" y="101" width="1.2252%" height="15" fill="rgb(245,172,44)"/><text x="60.5045%" y="111.50"></text></g><g><title>inferred_outlives_of (823,839 samples, 0.87%)</title><rect x="60.6098%" y="85" width="0.8699%" height="15" fill="rgb(236,23,11)"/><text x="60.8598%" y="95.50"></text></g><g><title>inferred_outlives_crate (805,109 samples, 0.85%)</title><rect x="60.6296%" y="69" width="0.8501%" height="15" fill="rgb(205,117,38)"/><text x="60.8796%" y="79.50"></text></g><g><title>type_of (614,256 samples, 0.65%)</title><rect x="60.8311%" y="53" width="0.6486%" height="15" fill="rgb(237,72,25)"/><text x="61.0811%" y="63.50"></text></g><g><title>type_of (455,095 samples, 0.48%)</title><rect x="60.9991%" y="37" width="0.4805%" height="15" fill="rgb(244,70,9)"/><text x="61.2491%" y="47.50"></text></g><g><title>type_collecting (3,107,745 samples, 3.28%)</title><rect x="58.3484%" y="149" width="3.2814%" height="15" fill="rgb(217,125,39)"/><text x="58.5984%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (3,096,955 samples, 3.27%)</title><rect x="58.3598%" y="133" width="3.2700%" height="15" fill="rgb(235,36,10)"/><text x="58.6098%" y="143.50">col..</text></g><g><title>type_of (119,300 samples, 0.13%)</title><rect x="61.5038%" y="117" width="0.1260%" height="15" fill="rgb(251,123,47)"/><text x="61.7538%" y="127.50"></text></g><g><title>adt_def (118,441 samples, 0.13%)</title><rect x="63.1522%" y="85" width="0.1251%" height="15" fill="rgb(221,13,13)"/><text x="63.4022%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (117,631 samples, 0.12%)</title><rect x="63.1531%" y="69" width="0.1242%" height="15" fill="rgb(238,131,9)"/><text x="63.4031%" y="79.50"></text></g><g><title>item_attrs (111,021 samples, 0.12%)</title><rect x="63.1600%" y="53" width="0.1172%" height="15" fill="rgb(211,50,8)"/><text x="63.4100%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (110,211 samples, 0.12%)</title><rect x="63.1609%" y="37" width="0.1164%" height="15" fill="rgb(245,182,24)"/><text x="63.4109%" y="47.50"></text></g><g><title>adt_sized_constraint (174,371 samples, 0.18%)</title><rect x="63.1488%" y="101" width="0.1841%" height="15" fill="rgb(242,14,37)"/><text x="63.3988%" y="111.50"></text></g><g><title>evaluate_obligation (465,164 samples, 0.49%)</title><rect x="62.8739%" y="117" width="0.4912%" height="15" fill="rgb(246,228,12)"/><text x="63.1239%" y="127.50"></text></g><g><title>implied_outlives_bounds (162,472 samples, 0.17%)</title><rect x="63.3924%" y="117" width="0.1715%" height="15" fill="rgb(213,55,15)"/><text x="63.6424%" y="127.50"></text></g><g><title>param_env (209,422 samples, 0.22%)</title><rect x="63.5701%" y="117" width="0.2211%" height="15" fill="rgb(209,9,3)"/><text x="63.8201%" y="127.50"></text></g><g><title>region_scope_tree (145,323 samples, 0.15%)</title><rect x="63.8366%" y="117" width="0.1534%" height="15" fill="rgb(230,59,30)"/><text x="64.0866%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,188,917 samples, 2.31%)</title><rect x="61.7438%" y="133" width="2.3112%" height="15" fill="rgb(209,121,21)"/><text x="61.9938%" y="143.50">c..</text></g><g><title>evaluate_obligation (111,071 samples, 0.12%)</title><rect x="64.9731%" y="117" width="0.1173%" height="15" fill="rgb(220,109,13)"/><text x="65.2231%" y="127.50"></text></g><g><title>implied_outlives_bounds (100,442 samples, 0.11%)</title><rect x="65.0957%" y="117" width="0.1061%" height="15" fill="rgb(232,18,1)"/><text x="65.3457%" y="127.50"></text></g><g><title>evaluate_obligation (97,370 samples, 0.10%)</title><rect x="65.2793%" y="101" width="0.1028%" height="15" fill="rgb(215,41,42)"/><text x="65.5293%" y="111.50"></text></g><g><title>layout_of (118,012 samples, 0.12%)</title><rect x="65.4061%" y="101" width="0.1246%" height="15" fill="rgb(224,123,36)"/><text x="65.6561%" y="111.50"></text></g><g><title>object_safety_violations (349,204 samples, 0.37%)</title><rect x="65.2017%" y="117" width="0.3687%" height="15" fill="rgb(240,125,3)"/><text x="65.4517%" y="127.50"></text></g><g><title>param_env (126,861 samples, 0.13%)</title><rect x="65.5705%" y="117" width="0.1339%" height="15" fill="rgb(205,98,50)"/><text x="65.8205%" y="127.50"></text></g><g><title>check_item_well_formed (1,744,198 samples, 1.84%)</title><rect x="64.0550%" y="133" width="1.8416%" height="15" fill="rgb(205,185,37)"/><text x="64.3050%" y="143.50">c..</text></g><g><title>analysis (61,828,449 samples, 65.28%)</title><rect x="0.7691%" y="181" width="65.2825%" height="15" fill="rgb(238,207,15)"/><text x="1.0191%" y="191.50">analysis</text></g><g><title>type_check_crate (39,482,301 samples, 41.69%)</title><rect x="24.3636%" y="165" width="41.6880%" height="15" fill="rgb(213,199,42)"/><text x="24.6136%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,185,007 samples, 4.42%)</title><rect x="61.6328%" y="149" width="4.4188%" height="15" fill="rgb(235,201,11)"/><text x="61.8828%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (146,732 samples, 0.15%)</title><rect x="65.8966%" y="133" width="0.1549%" height="15" fill="rgb(207,46,11)"/><text x="66.1466%" y="143.50"></text></g><g><title>codegen_crate (383,484 samples, 0.40%)</title><rect x="66.0643%" y="181" width="0.4049%" height="15" fill="rgb(241,35,35)"/><text x="66.3143%" y="191.50"></text></g><g><title>AST_validation (141,302 samples, 0.15%)</title><rect x="66.7144%" y="165" width="0.1492%" height="15" fill="rgb(243,32,47)"/><text x="66.9644%" y="175.50"></text></g><g><title>metadata_load_macro (505,208 samples, 0.53%)</title><rect x="80.0082%" y="133" width="0.5334%" height="15" fill="rgb(247,202,23)"/><text x="80.2582%" y="143.50"></text></g><g><title>macro_expand_crate (15,460,852 samples, 16.32%)</title><rect x="67.0354%" y="165" width="16.3246%" height="15" fill="rgb(219,102,11)"/><text x="67.2854%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (15,435,122 samples, 16.30%)</title><rect x="67.0626%" y="149" width="16.2974%" height="15" fill="rgb(243,110,44)"/><text x="67.3126%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,669,289 samples, 2.82%)</title><rect x="80.5416%" y="133" width="2.8184%" height="15" fill="rgb(222,74,54)"/><text x="80.7916%" y="143.50">me..</text></g><g><title>metadata_register_crate (965,461 samples, 1.02%)</title><rect x="82.3406%" y="117" width="1.0194%" height="15" fill="rgb(216,99,12)"/><text x="82.5906%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (210,232 samples, 0.22%)</title><rect x="83.3727%" y="165" width="0.2220%" height="15" fill="rgb(226,22,26)"/><text x="83.6227%" y="175.50"></text></g><g><title>finalize_macro_resolutions (169,842 samples, 0.18%)</title><rect x="83.6569%" y="149" width="0.1793%" height="15" fill="rgb(217,163,10)"/><text x="83.9069%" y="159.50"></text></g><g><title>late_resolve_crate (2,300,956 samples, 2.43%)</title><rect x="83.8362%" y="149" width="2.4295%" height="15" fill="rgb(213,25,53)"/><text x="84.0862%" y="159.50">la..</text></g><g><title>configure_and_expand (18,885,780 samples, 19.94%)</title><rect x="66.4692%" y="181" width="19.9408%" height="15" fill="rgb(252,105,26)"/><text x="66.7192%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,666,419 samples, 2.82%)</title><rect x="83.5946%" y="165" width="2.8154%" height="15" fill="rgb(220,39,43)"/><text x="83.8446%" y="175.50">re..</text></g><g><title>drop_ast (216,192 samples, 0.23%)</title><rect x="86.4100%" y="181" width="0.2283%" height="15" fill="rgb(229,68,48)"/><text x="86.6600%" y="191.50"></text></g><g><title>early_lint_checks (428,324 samples, 0.45%)</title><rect x="86.6551%" y="181" width="0.4523%" height="15" fill="rgb(252,8,32)"/><text x="86.9051%" y="191.50"></text></g><g><title>free_global_ctxt (3,073,585 samples, 3.25%)</title><rect x="87.1074%" y="181" width="3.2453%" height="15" fill="rgb(223,20,43)"/><text x="87.3574%" y="191.50">fre..</text></g><g><title>generate_crate_metadata (640,417 samples, 0.68%)</title><rect x="90.3527%" y="181" width="0.6762%" height="15" fill="rgb(229,81,49)"/><text x="90.6027%" y="191.50"></text></g><g><title>hir_lowering (3,084,475 samples, 3.26%)</title><rect x="91.0288%" y="181" width="3.2568%" height="15" fill="rgb(236,28,36)"/><text x="91.2788%" y="191.50">hir..</text></g><g><title>parse_crate (3,733,382 samples, 3.94%)</title><rect x="94.3419%" y="181" width="3.9419%" height="15" fill="rgb(249,185,26)"/><text x="94.5919%" y="191.50">pars..</text></g><g><title>prepare_outputs (332,714 samples, 0.35%)</title><rect x="98.2945%" y="181" width="0.3513%" height="15" fill="rgb(249,174,33)"/><text x="98.5445%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (782,629 samples, 0.83%)</title><rect x="98.6458%" y="181" width="0.8264%" height="15" fill="rgb(233,201,37)"/><text x="98.8958%" y="191.50"></text></g><g><title>setup_global_ctxt (157,701 samples, 0.17%)</title><rect x="99.4842%" y="181" width="0.1665%" height="15" fill="rgb(221,78,26)"/><text x="99.7342%" y="191.50"></text></g><g><title>all (94,709,076 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (94,709,076 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (330,824 samples, 0.35%)</title><rect x="99.6507%" y="181" width="0.3493%" height="15" fill="rgb(229,67,23)"/><text x="99.9007%" y="191.50"></text></g></svg></svg>