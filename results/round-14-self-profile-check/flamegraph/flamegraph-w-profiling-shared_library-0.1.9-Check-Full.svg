<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (205,933 samples, 0.23%)</title><rect x="7.5906%" y="181" width="0.2284%" height="15" fill="rgb(227,0,7)"/><text x="7.8406%" y="191.50"></text></g><g><title>item_attrs (190,974 samples, 0.21%)</title><rect x="8.1581%" y="149" width="0.2118%" height="15" fill="rgb(217,0,24)"/><text x="8.4081%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (184,904 samples, 0.21%)</title><rect x="8.1649%" y="133" width="0.2051%" height="15" fill="rgb(221,193,54)"/><text x="8.4149%" y="143.50"></text></g><g><title>codegen_fn_attrs (282,136 samples, 0.31%)</title><rect x="8.0710%" y="165" width="0.3130%" height="15" fill="rgb(248,212,6)"/><text x="8.3210%" y="175.50"></text></g><g><title>is_copy_raw (114,432 samples, 0.13%)</title><rect x="10.0197%" y="117" width="0.1269%" height="15" fill="rgb(208,68,35)"/><text x="10.2697%" y="127.50"></text></g><g><title>evaluate_obligation (92,821 samples, 0.10%)</title><rect x="10.0437%" y="101" width="0.1030%" height="15" fill="rgb(232,128,0)"/><text x="10.2937%" y="111.50"></text></g><g><title>adt_drop_tys (488,916 samples, 0.54%)</title><rect x="9.6900%" y="133" width="0.5423%" height="15" fill="rgb(207,160,47)"/><text x="9.9400%" y="143.50"></text></g><g><title>needs_drop_raw (1,100,334 samples, 1.22%)</title><rect x="9.6238%" y="149" width="1.2205%" height="15" fill="rgb(228,23,34)"/><text x="9.8738%" y="159.50"></text></g><g><title>is_copy_raw (551,696 samples, 0.61%)</title><rect x="10.2323%" y="133" width="0.6120%" height="15" fill="rgb(218,30,26)"/><text x="10.4823%" y="143.50"></text></g><g><title>evaluate_obligation (478,865 samples, 0.53%)</title><rect x="10.3131%" y="117" width="0.5312%" height="15" fill="rgb(220,122,19)"/><text x="10.5631%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (103,332 samples, 0.11%)</title><rect x="10.9704%" y="133" width="0.1146%" height="15" fill="rgb(250,228,42)"/><text x="11.2204%" y="143.50"></text></g><g><title>impl_parent (184,221 samples, 0.20%)</title><rect x="11.3914%" y="117" width="0.2043%" height="15" fill="rgb(240,193,28)"/><text x="11.6414%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (126,131 samples, 0.14%)</title><rect x="11.4559%" y="101" width="0.1399%" height="15" fill="rgb(216,20,37)"/><text x="11.7059%" y="111.50"></text></g><g><title>specialization_graph_of (1,061,071 samples, 1.18%)</title><rect x="11.1052%" y="133" width="1.1770%" height="15" fill="rgb(206,188,39)"/><text x="11.3552%" y="143.50"></text></g><g><title>impl_trait_ref (618,829 samples, 0.69%)</title><rect x="11.5958%" y="117" width="0.6864%" height="15" fill="rgb(217,207,13)"/><text x="11.8458%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (559,778 samples, 0.62%)</title><rect x="11.6613%" y="101" width="0.6209%" height="15" fill="rgb(231,73,38)"/><text x="11.9113%" y="111.50"></text></g><g><title>resolve_instance (1,346,064 samples, 1.49%)</title><rect x="10.8443%" y="149" width="1.4931%" height="15" fill="rgb(225,20,46)"/><text x="11.0943%" y="159.50"></text></g><g><title>thir_body (416,204 samples, 0.46%)</title><rect x="12.3609%" y="149" width="0.4617%" height="15" fill="rgb(210,31,41)"/><text x="12.6109%" y="159.50"></text></g><g><title>mir_const (5,143,018 samples, 5.70%)</title><rect x="7.1311%" y="197" width="5.7048%" height="15" fill="rgb(221,200,47)"/><text x="7.3811%" y="207.50">mir_con..</text></g><g><title>unsafety_check_result (4,522,809 samples, 5.02%)</title><rect x="7.8191%" y="181" width="5.0169%" height="15" fill="rgb(226,26,5)"/><text x="8.0691%" y="191.50">unsafe..</text></g><g><title>mir_built (4,013,542 samples, 4.45%)</title><rect x="8.3840%" y="165" width="4.4520%" height="15" fill="rgb(249,33,26)"/><text x="8.6340%" y="175.50">mir_b..</text></g><g><title>has_structural_eq_impls (182,103 samples, 0.20%)</title><rect x="13.0425%" y="181" width="0.2020%" height="15" fill="rgb(235,183,28)"/><text x="13.2925%" y="191.50"></text></g><g><title>evaluate_obligation (162,662 samples, 0.18%)</title><rect x="13.0641%" y="165" width="0.1804%" height="15" fill="rgb(221,5,38)"/><text x="13.3141%" y="175.50"></text></g><g><title>trait_impls_of (136,642 samples, 0.15%)</title><rect x="13.0929%" y="149" width="0.1516%" height="15" fill="rgb(247,18,42)"/><text x="13.3429%" y="159.50"></text></g><g><title>mir_promoted (6,056,190 samples, 6.72%)</title><rect x="6.7237%" y="213" width="6.7177%" height="15" fill="rgb(241,131,45)"/><text x="6.9737%" y="223.50">mir_promo..</text></g><g><title>mir_const_qualif (545,917 samples, 0.61%)</title><rect x="12.8359%" y="197" width="0.6055%" height="15" fill="rgb(249,31,29)"/><text x="13.0859%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (211,065 samples, 0.23%)</title><rect x="13.4415%" y="213" width="0.2341%" height="15" fill="rgb(225,111,53)"/><text x="13.6915%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (211,293 samples, 0.23%)</title><rect x="13.6756%" y="213" width="0.2344%" height="15" fill="rgb(238,160,17)"/><text x="13.9256%" y="223.50"></text></g><g><title>normalize_projection_ty (137,553 samples, 0.15%)</title><rect x="13.7574%" y="197" width="0.1526%" height="15" fill="rgb(214,148,48)"/><text x="14.0074%" y="207.50"></text></g><g><title>type_op_prove_predicate (989,880 samples, 1.10%)</title><rect x="13.9370%" y="213" width="1.0980%" height="15" fill="rgb(232,36,49)"/><text x="14.1870%" y="223.50"></text></g><g><title>MIR_borrow_checking (12,194,526 samples, 13.53%)</title><rect x="1.5149%" y="245" width="13.5266%" height="15" fill="rgb(209,103,24)"/><text x="1.7649%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,134,474 samples, 13.46%)</title><rect x="1.5815%" y="229" width="13.4600%" height="15" fill="rgb(229,88,8)"/><text x="1.8315%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (139,582 samples, 0.15%)</title><rect x="15.0415%" y="245" width="0.1548%" height="15" fill="rgb(213,181,19)"/><text x="15.2915%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (101,112 samples, 0.11%)</title><rect x="15.0841%" y="229" width="0.1122%" height="15" fill="rgb(254,191,54)"/><text x="15.3341%" y="239.50"></text></g><g><title>hir_module_items (214,922 samples, 0.24%)</title><rect x="15.1963%" y="245" width="0.2384%" height="15" fill="rgb(241,83,37)"/><text x="15.4463%" y="255.50"></text></g><g><title>get_lang_items (123,201 samples, 0.14%)</title><rect x="16.0214%" y="165" width="0.1367%" height="15" fill="rgb(233,36,39)"/><text x="16.2714%" y="175.50"></text></g><g><title>codegen_fn_attrs (306,053 samples, 0.34%)</title><rect x="15.9658%" y="181" width="0.3395%" height="15" fill="rgb(226,3,54)"/><text x="16.2158%" y="191.50"></text></g><g><title>codegen_fn_attrs (529,525 samples, 0.59%)</title><rect x="15.7282%" y="213" width="0.5874%" height="15" fill="rgb(245,192,40)"/><text x="15.9782%" y="223.50"></text></g><g><title>should_inherit_track_caller (441,024 samples, 0.49%)</title><rect x="15.8264%" y="197" width="0.4892%" height="15" fill="rgb(238,167,29)"/><text x="16.0764%" y="207.50"></text></g><g><title>check_mod_attrs (756,569 samples, 0.84%)</title><rect x="15.4768%" y="229" width="0.8392%" height="15" fill="rgb(232,182,51)"/><text x="15.7268%" y="239.50"></text></g><g><title>check_mod_const_bodies (125,092 samples, 0.14%)</title><rect x="16.3160%" y="229" width="0.1388%" height="15" fill="rgb(231,60,39)"/><text x="16.5660%" y="239.50"></text></g><g><title>lookup_deprecation_entry (179,723 samples, 0.20%)</title><rect x="16.7997%" y="213" width="0.1994%" height="15" fill="rgb(208,69,12)"/><text x="17.0497%" y="223.50"></text></g><g><title>lookup_stability (92,191 samples, 0.10%)</title><rect x="16.9991%" y="213" width="0.1023%" height="15" fill="rgb(235,93,37)"/><text x="17.2491%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (578,996 samples, 0.64%)</title><rect x="16.5399%" y="229" width="0.6422%" height="15" fill="rgb(213,116,39)"/><text x="16.7899%" y="239.50"></text></g><g><title>misc_checking_1 (1,643,188 samples, 1.82%)</title><rect x="15.4352%" y="245" width="1.8227%" height="15" fill="rgb(222,207,29)"/><text x="15.6852%" y="255.50">m..</text></g><g><title>liveness_and_intrinsic_checking (247,683 samples, 0.27%)</title><rect x="17.2596%" y="229" width="0.2747%" height="15" fill="rgb(206,96,30)"/><text x="17.5096%" y="239.50"></text></g><g><title>check_mod_liveness (178,743 samples, 0.20%)</title><rect x="17.3361%" y="213" width="0.1983%" height="15" fill="rgb(218,138,4)"/><text x="17.5861%" y="223.50"></text></g><g><title>misc_checking_2 (517,586 samples, 0.57%)</title><rect x="17.2579%" y="245" width="0.5741%" height="15" fill="rgb(250,191,14)"/><text x="17.5079%" y="255.50"></text></g><g><title>match_checking (268,333 samples, 0.30%)</title><rect x="17.5343%" y="229" width="0.2976%" height="15" fill="rgb(239,60,40)"/><text x="17.7843%" y="239.50"></text></g><g><title>check_match (252,983 samples, 0.28%)</title><rect x="17.5514%" y="213" width="0.2806%" height="15" fill="rgb(206,27,48)"/><text x="17.8014%" y="223.50"></text></g><g><title>check_private_in_public (101,671 samples, 0.11%)</title><rect x="17.8429%" y="229" width="0.1128%" height="15" fill="rgb(225,35,8)"/><text x="18.0929%" y="239.50"></text></g><g><title>death_checking (213,272 samples, 0.24%)</title><rect x="17.9557%" y="229" width="0.2366%" height="15" fill="rgb(250,213,24)"/><text x="18.2057%" y="239.50"></text></g><g><title>fn_abi_of_instance (128,073 samples, 0.14%)</title><rect x="19.1850%" y="37" width="0.1421%" height="15" fill="rgb(247,123,22)"/><text x="19.4350%" y="47.50"></text></g><g><title>eval_to_const_value_raw (297,583 samples, 0.33%)</title><rect x="19.1112%" y="85" width="0.3301%" height="15" fill="rgb(231,138,38)"/><text x="19.3612%" y="95.50"></text></g><g><title>eval_to_const_value_raw (296,763 samples, 0.33%)</title><rect x="19.1121%" y="69" width="0.3292%" height="15" fill="rgb(231,145,46)"/><text x="19.3621%" y="79.50"></text></g><g><title>eval_to_allocation_raw (294,523 samples, 0.33%)</title><rect x="19.1146%" y="53" width="0.3267%" height="15" fill="rgb(251,118,11)"/><text x="19.3646%" y="63.50"></text></g><g><title>eval_to_const_value_raw (452,605 samples, 0.50%)</title><rect x="18.9436%" y="149" width="0.5020%" height="15" fill="rgb(217,147,25)"/><text x="19.1936%" y="159.50"></text></g><g><title>eval_to_const_value_raw (451,485 samples, 0.50%)</title><rect x="18.9448%" y="133" width="0.5008%" height="15" fill="rgb(247,81,37)"/><text x="19.1948%" y="143.50"></text></g><g><title>eval_to_allocation_raw (450,015 samples, 0.50%)</title><rect x="18.9464%" y="117" width="0.4992%" height="15" fill="rgb(209,12,38)"/><text x="19.1964%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (304,663 samples, 0.34%)</title><rect x="19.1077%" y="101" width="0.3379%" height="15" fill="rgb(227,1,9)"/><text x="19.3577%" y="111.50"></text></g><g><title>eval_to_allocation_raw (590,177 samples, 0.65%)</title><rect x="18.7922%" y="197" width="0.6546%" height="15" fill="rgb(248,47,43)"/><text x="19.0422%" y="207.50"></text></g><g><title>eval_to_allocation_raw (586,377 samples, 0.65%)</title><rect x="18.7964%" y="181" width="0.6504%" height="15" fill="rgb(221,10,30)"/><text x="19.0464%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (462,445 samples, 0.51%)</title><rect x="18.9338%" y="165" width="0.5130%" height="15" fill="rgb(210,229,1)"/><text x="19.1838%" y="175.50"></text></g><g><title>param_env (144,572 samples, 0.16%)</title><rect x="19.4827%" y="197" width="0.1604%" height="15" fill="rgb(222,148,37)"/><text x="19.7327%" y="207.50"></text></g><g><title>crate_lints (2,382,837 samples, 2.64%)</title><rect x="18.1942%" y="213" width="2.6431%" height="15" fill="rgb(234,67,33)"/><text x="18.4442%" y="223.50">cr..</text></g><g><title>type_of (1,055,442 samples, 1.17%)</title><rect x="19.6665%" y="197" width="1.1707%" height="15" fill="rgb(247,98,35)"/><text x="19.9165%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (824,880 samples, 0.91%)</title><rect x="19.9223%" y="181" width="0.9150%" height="15" fill="rgb(247,138,52)"/><text x="20.1723%" y="191.50"></text></g><g><title>lint_checking (2,727,631 samples, 3.03%)</title><rect x="18.1922%" y="229" width="3.0256%" height="15" fill="rgb(213,79,30)"/><text x="18.4422%" y="239.50">lin..</text></g><g><title>module_lints (343,054 samples, 0.38%)</title><rect x="20.8373%" y="213" width="0.3805%" height="15" fill="rgb(246,177,23)"/><text x="21.0873%" y="223.50"></text></g><g><title>lint_mod (338,764 samples, 0.38%)</title><rect x="20.8420%" y="197" width="0.3758%" height="15" fill="rgb(230,62,27)"/><text x="21.0920%" y="207.50"></text></g><g><title>privacy_access_levels (97,891 samples, 0.11%)</title><rect x="21.2178%" y="229" width="0.1086%" height="15" fill="rgb(216,154,8)"/><text x="21.4678%" y="239.50"></text></g><g><title>privacy_checking_modules (291,953 samples, 0.32%)</title><rect x="21.3264%" y="229" width="0.3238%" height="15" fill="rgb(244,35,45)"/><text x="21.5764%" y="239.50"></text></g><g><title>check_mod_privacy (289,513 samples, 0.32%)</title><rect x="21.3291%" y="213" width="0.3211%" height="15" fill="rgb(251,115,12)"/><text x="21.5791%" y="223.50"></text></g><g><title>misc_checking_3 (3,458,448 samples, 3.84%)</title><rect x="17.8320%" y="245" width="3.8362%" height="15" fill="rgb(240,54,50)"/><text x="18.0820%" y="255.50">misc..</text></g><g><title>impl_parent (1,902,136 samples, 2.11%)</title><rect x="24.4827%" y="181" width="2.1099%" height="15" fill="rgb(233,84,52)"/><text x="24.7327%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,038,389 samples, 1.15%)</title><rect x="25.4408%" y="165" width="1.1518%" height="15" fill="rgb(207,117,47)"/><text x="25.6908%" y="175.50"></text></g><g><title>impl_trait_ref (4,722,868 samples, 5.24%)</title><rect x="26.5926%" y="181" width="5.2388%" height="15" fill="rgb(249,43,39)"/><text x="26.8426%" y="191.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,078,720 samples, 4.52%)</title><rect x="27.3071%" y="165" width="4.5243%" height="15" fill="rgb(209,38,44)"/><text x="27.5571%" y="175.50">metad..</text></g><g><title>coherent_trait (9,733,889 samples, 10.80%)</title><rect x="21.7368%" y="213" width="10.7972%" height="15" fill="rgb(236,212,23)"/><text x="21.9868%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (9,719,339 samples, 10.78%)</title><rect x="21.7529%" y="197" width="10.7810%" height="15" fill="rgb(242,79,21)"/><text x="22.0029%" y="207.50">specialization_g..</text></g><g><title>trait_impls_of (631,446 samples, 0.70%)</title><rect x="31.8335%" y="181" width="0.7004%" height="15" fill="rgb(211,96,35)"/><text x="32.0835%" y="191.50"></text></g><g><title>implementations_of_trait (155,451 samples, 0.17%)</title><rect x="32.3615%" y="165" width="0.1724%" height="15" fill="rgb(253,215,40)"/><text x="32.6115%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (115,041 samples, 0.13%)</title><rect x="32.4063%" y="149" width="0.1276%" height="15" fill="rgb(211,81,21)"/><text x="32.6563%" y="159.50"></text></g><g><title>orphan_check_crate (99,972 samples, 0.11%)</title><rect x="32.5462%" y="213" width="0.1109%" height="15" fill="rgb(208,190,38)"/><text x="32.7962%" y="223.50"></text></g><g><title>coherence_checking (9,867,751 samples, 10.95%)</title><rect x="21.7163%" y="229" width="10.9456%" height="15" fill="rgb(235,213,38)"/><text x="21.9663%" y="239.50">coherence_checki..</text></g><g><title>adt_sized_constraint (129,563 samples, 0.14%)</title><rect x="38.1998%" y="181" width="0.1437%" height="15" fill="rgb(237,122,38)"/><text x="38.4498%" y="191.50"></text></g><g><title>associated_item (357,653 samples, 0.40%)</title><rect x="38.4493%" y="165" width="0.3967%" height="15" fill="rgb(244,218,35)"/><text x="38.6993%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (295,363 samples, 0.33%)</title><rect x="38.5184%" y="149" width="0.3276%" height="15" fill="rgb(240,68,47)"/><text x="38.7684%" y="159.50"></text></g><g><title>associated_items (470,795 samples, 0.52%)</title><rect x="38.3449%" y="181" width="0.5222%" height="15" fill="rgb(210,16,53)"/><text x="38.5949%" y="191.50"></text></g><g><title>dropck_outlives (219,592 samples, 0.24%)</title><rect x="38.8999%" y="181" width="0.2436%" height="15" fill="rgb(235,124,12)"/><text x="39.1499%" y="191.50"></text></g><g><title>adt_dtorck_constraint (132,721 samples, 0.15%)</title><rect x="38.9962%" y="165" width="0.1472%" height="15" fill="rgb(224,169,11)"/><text x="39.2462%" y="175.50"></text></g><g><title>evaluate_obligation (865,397 samples, 0.96%)</title><rect x="39.1434%" y="181" width="0.9599%" height="15" fill="rgb(250,166,2)"/><text x="39.3934%" y="191.50"></text></g><g><title>trait_impls_of (207,891 samples, 0.23%)</title><rect x="39.8728%" y="165" width="0.2306%" height="15" fill="rgb(242,216,29)"/><text x="40.1228%" y="175.50"></text></g><g><title>item_attrs (159,892 samples, 0.18%)</title><rect x="40.3975%" y="181" width="0.1774%" height="15" fill="rgb(230,116,27)"/><text x="40.6475%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (153,682 samples, 0.17%)</title><rect x="40.4044%" y="165" width="0.1705%" height="15" fill="rgb(228,99,48)"/><text x="40.6544%" y="175.50"></text></g><g><title>evaluate_obligation (104,541 samples, 0.12%)</title><rect x="40.7267%" y="165" width="0.1160%" height="15" fill="rgb(253,11,6)"/><text x="40.9767%" y="175.50"></text></g><g><title>method_autoderef_steps (224,282 samples, 0.25%)</title><rect x="40.6097%" y="181" width="0.2488%" height="15" fill="rgb(247,143,39)"/><text x="40.8597%" y="191.50"></text></g><g><title>object_safety_violations (133,192 samples, 0.15%)</title><rect x="40.8584%" y="181" width="0.1477%" height="15" fill="rgb(236,97,10)"/><text x="41.1084%" y="191.50"></text></g><g><title>predicates_of (228,222 samples, 0.25%)</title><rect x="41.0287%" y="181" width="0.2532%" height="15" fill="rgb(233,208,19)"/><text x="41.2787%" y="191.50"></text></g><g><title>predicates_defined_on (157,931 samples, 0.18%)</title><rect x="41.1066%" y="165" width="0.1752%" height="15" fill="rgb(216,164,2)"/><text x="41.3566%" y="175.50"></text></g><g><title>associated_item (177,003 samples, 0.20%)</title><rect x="44.4296%" y="149" width="0.1963%" height="15" fill="rgb(220,129,5)"/><text x="44.6796%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (134,193 samples, 0.15%)</title><rect x="44.4770%" y="133" width="0.1489%" height="15" fill="rgb(242,17,10)"/><text x="44.7270%" y="143.50"></text></g><g><title>associated_items (253,223 samples, 0.28%)</title><rect x="44.3565%" y="165" width="0.2809%" height="15" fill="rgb(242,107,0)"/><text x="44.6065%" y="175.50"></text></g><g><title>dropck_outlives (98,961 samples, 0.11%)</title><rect x="44.6472%" y="165" width="0.1098%" height="15" fill="rgb(251,28,31)"/><text x="44.8972%" y="175.50"></text></g><g><title>evaluate_obligation (490,347 samples, 0.54%)</title><rect x="44.7570%" y="165" width="0.5439%" height="15" fill="rgb(233,223,10)"/><text x="45.0070%" y="175.50"></text></g><g><title>trait_impls_of (158,570 samples, 0.18%)</title><rect x="45.1250%" y="149" width="0.1759%" height="15" fill="rgb(215,21,27)"/><text x="45.3750%" y="159.50"></text></g><g><title>is_copy_raw (313,002 samples, 0.35%)</title><rect x="45.4350%" y="165" width="0.3472%" height="15" fill="rgb(232,23,21)"/><text x="45.6850%" y="175.50"></text></g><g><title>evaluate_obligation (290,782 samples, 0.32%)</title><rect x="45.4596%" y="149" width="0.3225%" height="15" fill="rgb(244,5,23)"/><text x="45.7096%" y="159.50"></text></g><g><title>trait_impls_of (170,962 samples, 0.19%)</title><rect x="45.5925%" y="133" width="0.1896%" height="15" fill="rgb(226,81,46)"/><text x="45.8425%" y="143.50"></text></g><g><title>typeck (4,237,267 samples, 4.70%)</title><rect x="41.4613%" y="181" width="4.7001%" height="15" fill="rgb(247,70,30)"/><text x="41.7113%" y="191.50">typeck</text></g><g><title>item_bodies_checking (12,174,846 samples, 13.50%)</title><rect x="32.6942%" y="229" width="13.5048%" height="15" fill="rgb(212,68,19)"/><text x="32.9442%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,172,396 samples, 13.50%)</title><rect x="32.6969%" y="213" width="13.5020%" height="15" fill="rgb(240,187,13)"/><text x="32.9469%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (12,143,466 samples, 13.47%)</title><rect x="32.7290%" y="197" width="13.4699%" height="15" fill="rgb(223,113,26)"/><text x="32.9790%" y="207.50">typeck</text></g><g><title>layout_of (114,531 samples, 0.13%)</title><rect x="46.6306%" y="117" width="0.1270%" height="15" fill="rgb(206,192,2)"/><text x="46.8806%" y="127.50"></text></g><g><title>layout_of (148,082 samples, 0.16%)</title><rect x="46.5955%" y="149" width="0.1643%" height="15" fill="rgb(241,108,4)"/><text x="46.8455%" y="159.50"></text></g><g><title>layout_of (128,031 samples, 0.14%)</title><rect x="46.6177%" y="133" width="0.1420%" height="15" fill="rgb(247,173,49)"/><text x="46.8677%" y="143.50"></text></g><g><title>layout_of (168,412 samples, 0.19%)</title><rect x="46.5782%" y="165" width="0.1868%" height="15" fill="rgb(224,114,35)"/><text x="46.8282%" y="175.50"></text></g><g><title>layout_of (197,912 samples, 0.22%)</title><rect x="46.5579%" y="181" width="0.2195%" height="15" fill="rgb(245,159,27)"/><text x="46.8079%" y="191.50"></text></g><g><title>layout_of (217,412 samples, 0.24%)</title><rect x="46.5416%" y="197" width="0.2412%" height="15" fill="rgb(245,172,44)"/><text x="46.7916%" y="207.50"></text></g><g><title>adt_dtorck_constraint (98,572 samples, 0.11%)</title><rect x="47.2805%" y="133" width="0.1093%" height="15" fill="rgb(236,23,11)"/><text x="47.5305%" y="143.50"></text></g><g><title>adt_dtorck_constraint (154,442 samples, 0.17%)</title><rect x="47.2289%" y="149" width="0.1713%" height="15" fill="rgb(205,117,38)"/><text x="47.4789%" y="159.50"></text></g><g><title>dropck_outlives (287,584 samples, 0.32%)</title><rect x="47.1018%" y="181" width="0.3190%" height="15" fill="rgb(237,72,25)"/><text x="47.3518%" y="191.50"></text></g><g><title>adt_dtorck_constraint (252,393 samples, 0.28%)</title><rect x="47.1408%" y="165" width="0.2800%" height="15" fill="rgb(244,70,9)"/><text x="47.3908%" y="175.50"></text></g><g><title>item_types_checking (1,159,413 samples, 1.29%)</title><rect x="46.1990%" y="229" width="1.2861%" height="15" fill="rgb(217,125,39)"/><text x="46.4490%" y="239.50"></text></g><g><title>check_mod_item_types (1,155,923 samples, 1.28%)</title><rect x="46.2028%" y="213" width="1.2822%" height="15" fill="rgb(235,36,10)"/><text x="46.4528%" y="223.50"></text></g><g><title>typeck (608,717 samples, 0.68%)</title><rect x="46.8098%" y="197" width="0.6752%" height="15" fill="rgb(251,123,47)"/><text x="47.0598%" y="207.50"></text></g><g><title>fn_sig (433,033 samples, 0.48%)</title><rect x="47.8001%" y="197" width="0.4803%" height="15" fill="rgb(221,13,13)"/><text x="48.0501%" y="207.50"></text></g><g><title>type_of (150,591 samples, 0.17%)</title><rect x="48.1134%" y="181" width="0.1670%" height="15" fill="rgb(238,131,9)"/><text x="48.3634%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (143,070 samples, 0.16%)</title><rect x="48.1217%" y="165" width="0.1587%" height="15" fill="rgb(211,50,8)"/><text x="48.3717%" y="175.50"></text></g><g><title>named_region_map (383,734 samples, 0.43%)</title><rect x="48.4107%" y="181" width="0.4257%" height="15" fill="rgb(245,182,24)"/><text x="48.6607%" y="191.50"></text></g><g><title>resolve_lifetimes (366,374 samples, 0.41%)</title><rect x="48.4300%" y="165" width="0.4064%" height="15" fill="rgb(242,14,37)"/><text x="48.6800%" y="175.50"></text></g><g><title>lint_levels (119,131 samples, 0.13%)</title><rect x="48.7042%" y="149" width="0.1321%" height="15" fill="rgb(246,228,12)"/><text x="48.9542%" y="159.50"></text></g><g><title>generics_of (526,816 samples, 0.58%)</title><rect x="48.2804%" y="197" width="0.5844%" height="15" fill="rgb(213,55,15)"/><text x="48.5304%" y="207.50"></text></g><g><title>explicit_predicates_of (194,593 samples, 0.22%)</title><rect x="49.0576%" y="165" width="0.2158%" height="15" fill="rgb(209,9,3)"/><text x="49.3076%" y="175.50"></text></g><g><title>predicates_of (538,377 samples, 0.60%)</title><rect x="48.9376%" y="197" width="0.5972%" height="15" fill="rgb(230,59,30)"/><text x="49.1876%" y="207.50"></text></g><g><title>predicates_defined_on (497,956 samples, 0.55%)</title><rect x="48.9824%" y="181" width="0.5523%" height="15" fill="rgb(209,121,21)"/><text x="49.2324%" y="191.50"></text></g><g><title>inferred_outlives_of (235,542 samples, 0.26%)</title><rect x="49.2735%" y="165" width="0.2613%" height="15" fill="rgb(220,109,13)"/><text x="49.5235%" y="175.50"></text></g><g><title>inferred_outlives_crate (210,502 samples, 0.23%)</title><rect x="49.3013%" y="149" width="0.2335%" height="15" fill="rgb(232,18,1)"/><text x="49.5513%" y="159.50"></text></g><g><title>type_of (119,391 samples, 0.13%)</title><rect x="49.4023%" y="133" width="0.1324%" height="15" fill="rgb(215,41,42)"/><text x="49.6523%" y="143.50"></text></g><g><title>type_collecting (1,982,662 samples, 2.20%)</title><rect x="47.4871%" y="229" width="2.1992%" height="15" fill="rgb(224,123,36)"/><text x="47.7371%" y="239.50">t..</text></g><g><title>collect_mod_item_types (1,960,432 samples, 2.17%)</title><rect x="47.5117%" y="213" width="2.1746%" height="15" fill="rgb(240,125,3)"/><text x="47.7617%" y="223.50">c..</text></g><g><title>type_of (136,643 samples, 0.15%)</title><rect x="49.5348%" y="197" width="0.1516%" height="15" fill="rgb(205,98,50)"/><text x="49.7848%" y="207.50"></text></g><g><title>adt_def (106,321 samples, 0.12%)</title><rect x="50.3921%" y="165" width="0.1179%" height="15" fill="rgb(205,185,37)"/><text x="50.6421%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (104,581 samples, 0.12%)</title><rect x="50.3940%" y="149" width="0.1160%" height="15" fill="rgb(238,207,15)"/><text x="50.6440%" y="159.50"></text></g><g><title>adt_sized_constraint (91,072 samples, 0.10%)</title><rect x="50.5100%" y="165" width="0.1010%" height="15" fill="rgb(213,199,42)"/><text x="50.7600%" y="175.50"></text></g><g><title>adt_sized_constraint (215,053 samples, 0.24%)</title><rect x="50.3822%" y="181" width="0.2385%" height="15" fill="rgb(235,201,11)"/><text x="50.6322%" y="191.50"></text></g><g><title>evaluate_obligation (418,424 samples, 0.46%)</title><rect x="50.2168%" y="197" width="0.4641%" height="15" fill="rgb(207,46,11)"/><text x="50.4668%" y="207.50"></text></g><g><title>implied_outlives_bounds (92,140 samples, 0.10%)</title><rect x="50.6809%" y="197" width="0.1022%" height="15" fill="rgb(241,35,35)"/><text x="50.9309%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,135,273 samples, 1.26%)</title><rect x="49.7674%" y="213" width="1.2593%" height="15" fill="rgb(243,32,47)"/><text x="50.0174%" y="223.50"></text></g><g><title>region_scope_tree (99,661 samples, 0.11%)</title><rect x="50.9161%" y="197" width="0.1105%" height="15" fill="rgb(247,202,23)"/><text x="51.1661%" y="207.50"></text></g><g><title>adt_sized_constraint (95,330 samples, 0.11%)</title><rect x="51.8977%" y="165" width="0.1057%" height="15" fill="rgb(219,102,11)"/><text x="52.1477%" y="175.50"></text></g><g><title>adt_sized_constraint (152,501 samples, 0.17%)</title><rect x="51.8389%" y="181" width="0.1692%" height="15" fill="rgb(243,110,44)"/><text x="52.0889%" y="191.50"></text></g><g><title>evaluate_obligation (360,736 samples, 0.40%)</title><rect x="51.6224%" y="197" width="0.4001%" height="15" fill="rgb(222,74,54)"/><text x="51.8724%" y="207.50"></text></g><g><title>param_env (186,181 samples, 0.21%)</title><rect x="52.0997%" y="197" width="0.2065%" height="15" fill="rgb(216,99,12)"/><text x="52.3497%" y="207.50"></text></g><g><title>analysis (46,271,006 samples, 51.33%)</title><rect x="1.1832%" y="261" width="51.3254%" height="15" fill="rgb(226,22,26)"/><text x="1.4332%" y="271.50">analysis</text></g><g><title>type_check_crate (27,803,280 samples, 30.84%)</title><rect x="21.6682%" y="245" width="30.8404%" height="15" fill="rgb(217,163,10)"/><text x="21.9182%" y="255.50">type_check_crate</text></g><g><title>wf_checking (2,541,218 samples, 2.82%)</title><rect x="49.6898%" y="229" width="2.8188%" height="15" fill="rgb(213,25,53)"/><text x="49.9398%" y="239.50">wf..</text></g><g><title>check_item_well_formed (1,335,955 samples, 1.48%)</title><rect x="51.0267%" y="213" width="1.4819%" height="15" fill="rgb(252,105,26)"/><text x="51.2767%" y="223.50"></text></g><g><title>codegen_crate (374,304 samples, 0.42%)</title><rect x="52.5206%" y="261" width="0.4152%" height="15" fill="rgb(220,39,43)"/><text x="52.7706%" y="271.50"></text></g><g><title>AST_validation (213,992 samples, 0.24%)</title><rect x="53.1790%" y="245" width="0.2374%" height="15" fill="rgb(229,68,48)"/><text x="53.4290%" y="255.50"></text></g><g><title>metadata_load_macro (310,092 samples, 0.34%)</title><rect x="72.8312%" y="213" width="0.3440%" height="15" fill="rgb(252,8,32)"/><text x="73.0812%" y="223.50"></text></g><g><title>metadata_register_crate (2,752,370 samples, 3.05%)</title><rect x="73.1752%" y="213" width="3.0530%" height="15" fill="rgb(223,20,43)"/><text x="73.4252%" y="223.50">met..</text></g><g><title>metadata_register_crate (981,932 samples, 1.09%)</title><rect x="75.1390%" y="197" width="1.0892%" height="15" fill="rgb(229,81,49)"/><text x="75.3890%" y="207.50"></text></g><g><title>macro_expand_crate (20,608,060 samples, 22.86%)</title><rect x="53.5899%" y="245" width="22.8592%" height="15" fill="rgb(236,28,36)"/><text x="53.8399%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (20,578,540 samples, 22.83%)</title><rect x="53.6226%" y="229" width="22.8264%" height="15" fill="rgb(249,185,26)"/><text x="53.8726%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (199,102 samples, 0.22%)</title><rect x="76.2282%" y="213" width="0.2209%" height="15" fill="rgb(249,174,33)"/><text x="76.4782%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (146,472 samples, 0.16%)</title><rect x="76.4548%" y="245" width="0.1625%" height="15" fill="rgb(233,201,37)"/><text x="76.7048%" y="255.50"></text></g><g><title>finalize_macro_resolutions (93,441 samples, 0.10%)</title><rect x="76.7119%" y="229" width="0.1036%" height="15" fill="rgb(221,78,26)"/><text x="76.9619%" y="239.50"></text></g><g><title>late_resolve_crate (10,116,713 samples, 11.22%)</title><rect x="76.8155%" y="229" width="11.2218%" height="15" fill="rgb(250,127,30)"/><text x="77.0655%" y="239.50">late_resolve_crate</text></g><g><title>configure_and_expand (31,783,045 samples, 35.25%)</title><rect x="52.9358%" y="261" width="35.2548%" height="15" fill="rgb(230,49,44)"/><text x="53.1858%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (10,433,667 samples, 11.57%)</title><rect x="76.6173%" y="245" width="11.5734%" height="15" fill="rgb(229,67,23)"/><text x="76.8673%" y="255.50">resolve_crate</text></g><g><title>drop_ast (188,812 samples, 0.21%)</title><rect x="88.1907%" y="261" width="0.2094%" height="15" fill="rgb(249,83,47)"/><text x="88.4407%" y="271.50"></text></g><g><title>early_lint_checks (391,404 samples, 0.43%)</title><rect x="88.4182%" y="261" width="0.4342%" height="15" fill="rgb(215,43,3)"/><text x="88.6682%" y="271.50"></text></g><g><title>free_global_ctxt (3,444,548 samples, 3.82%)</title><rect x="88.8524%" y="261" width="3.8208%" height="15" fill="rgb(238,154,13)"/><text x="89.1024%" y="271.50">free..</text></g><g><title>generate_crate_metadata (698,258 samples, 0.77%)</title><rect x="92.6732%" y="261" width="0.7745%" height="15" fill="rgb(219,56,2)"/><text x="92.9232%" y="271.50"></text></g><g><title>hir_lowering (3,111,005 samples, 3.45%)</title><rect x="93.4477%" y="261" width="3.4508%" height="15" fill="rgb(233,0,4)"/><text x="93.6977%" y="271.50">hir..</text></g><g><title>parse_crate (1,361,526 samples, 1.51%)</title><rect x="96.9618%" y="261" width="1.5103%" height="15" fill="rgb(235,30,7)"/><text x="97.2118%" y="271.50"></text></g><g><title>prepare_outputs (360,724 samples, 0.40%)</title><rect x="98.4827%" y="261" width="0.4001%" height="15" fill="rgb(250,79,13)"/><text x="98.7327%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (559,356 samples, 0.62%)</title><rect x="98.8828%" y="261" width="0.6205%" height="15" fill="rgb(211,146,34)"/><text x="99.1328%" y="271.50"></text></g><g><title>setup_global_ctxt (129,972 samples, 0.14%)</title><rect x="99.5150%" y="261" width="0.1442%" height="15" fill="rgb(228,22,38)"/><text x="99.7650%" y="271.50"></text></g><g><title>all (90,152,275 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (90,152,275 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (307,234 samples, 0.34%)</title><rect x="99.6592%" y="261" width="0.3408%" height="15" fill="rgb(215,215,53)"/><text x="99.9092%" y="271.50"></text></g></svg></svg>