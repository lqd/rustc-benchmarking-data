<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (494,891 samples, 0.10%)</title><rect x="14.6555%" y="149" width="0.1002%" height="15" fill="rgb(227,0,7)"/><text x="14.9055%" y="159.50"></text></g><g><title>param_env (926,101 samples, 0.19%)</title><rect x="16.7359%" y="117" width="0.1876%" height="15" fill="rgb(217,0,24)"/><text x="16.9859%" y="127.50"></text></g><g><title>item_attrs (1,001,199 samples, 0.20%)</title><rect x="17.5429%" y="85" width="0.2028%" height="15" fill="rgb(221,193,54)"/><text x="17.7929%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (966,189 samples, 0.20%)</title><rect x="17.5500%" y="69" width="0.1957%" height="15" fill="rgb(248,212,6)"/><text x="17.8000%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,381,263 samples, 0.28%)</title><rect x="17.4766%" y="101" width="0.2797%" height="15" fill="rgb(208,68,35)"/><text x="17.7266%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (807,299 samples, 0.16%)</title><rect x="21.9641%" y="53" width="0.1635%" height="15" fill="rgb(232,128,0)"/><text x="22.2141%" y="63.50"></text></g><g><title>normalize_projection_ty (793,619 samples, 0.16%)</title><rect x="21.9669%" y="37" width="0.1607%" height="15" fill="rgb(207,160,47)"/><text x="22.2169%" y="47.50"></text></g><g><title>adt_drop_tys (1,371,912 samples, 0.28%)</title><rect x="21.8505%" y="69" width="0.2779%" height="15" fill="rgb(228,23,34)"/><text x="22.1005%" y="79.50"></text></g><g><title>is_copy_raw (2,225,130 samples, 0.45%)</title><rect x="22.1284%" y="69" width="0.4507%" height="15" fill="rgb(218,30,26)"/><text x="22.3784%" y="79.50"></text></g><g><title>evaluate_obligation (1,825,569 samples, 0.37%)</title><rect x="22.2093%" y="53" width="0.3697%" height="15" fill="rgb(220,122,19)"/><text x="22.4593%" y="63.50"></text></g><g><title>needs_drop_raw (3,974,153 samples, 0.80%)</title><rect x="21.7787%" y="85" width="0.8049%" height="15" fill="rgb(250,228,42)"/><text x="22.0287%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,386,121 samples, 0.28%)</title><rect x="22.7445%" y="69" width="0.2807%" height="15" fill="rgb(240,193,28)"/><text x="22.9945%" y="79.50"></text></g><g><title>resolve_instance (3,069,083 samples, 0.62%)</title><rect x="22.5836%" y="85" width="0.6216%" height="15" fill="rgb(216,20,37)"/><text x="22.8336%" y="95.50"></text></g><g><title>thir_body (7,034,481 samples, 1.42%)</title><rect x="23.2340%" y="85" width="1.4247%" height="15" fill="rgb(206,188,39)"/><text x="23.4840%" y="95.50"></text></g><g><title>mir_const (44,203,628 samples, 8.95%)</title><rect x="15.7308%" y="133" width="8.9525%" height="15" fill="rgb(217,207,13)"/><text x="15.9808%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (38,314,761 samples, 7.76%)</title><rect x="16.9235%" y="117" width="7.7599%" height="15" fill="rgb(231,73,38)"/><text x="17.1735%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (34,202,269 samples, 6.93%)</title><rect x="17.7564%" y="101" width="6.9270%" height="15" fill="rgb(225,20,46)"/><text x="18.0064%" y="111.50">mir_built</text></g><g><title>thir_body (529,604 samples, 0.11%)</title><rect x="25.0100%" y="69" width="0.1073%" height="15" fill="rgb(210,31,41)"/><text x="25.2600%" y="79.50"></text></g><g><title>mir_const_qualif (2,152,841 samples, 0.44%)</title><rect x="24.6833%" y="133" width="0.4360%" height="15" fill="rgb(221,200,47)"/><text x="24.9333%" y="143.50"></text></g><g><title>mir_const (1,407,364 samples, 0.29%)</title><rect x="24.8343%" y="117" width="0.2850%" height="15" fill="rgb(226,26,5)"/><text x="25.0843%" y="127.50"></text></g><g><title>unsafety_check_result (1,152,801 samples, 0.23%)</title><rect x="24.8859%" y="101" width="0.2335%" height="15" fill="rgb(249,33,26)"/><text x="25.1359%" y="111.50"></text></g><g><title>mir_built (1,067,711 samples, 0.22%)</title><rect x="24.9031%" y="85" width="0.2162%" height="15" fill="rgb(235,183,28)"/><text x="25.1531%" y="95.50"></text></g><g><title>mir_promoted (51,153,646 samples, 10.36%)</title><rect x="14.7594%" y="149" width="10.3601%" height="15" fill="rgb(221,5,38)"/><text x="15.0094%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,059,681 samples, 0.21%)</title><rect x="25.1201%" y="149" width="0.2146%" height="15" fill="rgb(247,18,42)"/><text x="25.3701%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,256,517 samples, 0.46%)</title><rect x="25.3347%" y="149" width="0.4570%" height="15" fill="rgb(241,131,45)"/><text x="25.5847%" y="159.50"></text></g><g><title>normalize_projection_ty (1,494,520 samples, 0.30%)</title><rect x="25.4891%" y="133" width="0.3027%" height="15" fill="rgb(249,31,29)"/><text x="25.7391%" y="143.50"></text></g><g><title>type_op_normalize_predicate (540,558 samples, 0.11%)</title><rect x="25.7918%" y="149" width="0.1095%" height="15" fill="rgb(225,111,53)"/><text x="26.0418%" y="159.50"></text></g><g><title>type_op_prove_predicate (7,650,436 samples, 1.55%)</title><rect x="25.9514%" y="149" width="1.5494%" height="15" fill="rgb(238,160,17)"/><text x="26.2014%" y="159.50"></text></g><g><title>evaluate_obligation (723,714 samples, 0.15%)</title><rect x="27.3543%" y="133" width="0.1466%" height="15" fill="rgb(214,148,48)"/><text x="27.6043%" y="143.50"></text></g><g><title>MIR_borrow_checking (133,281,152 samples, 26.99%)</title><rect x="0.5113%" y="181" width="26.9933%" height="15" fill="rgb(232,36,49)"/><text x="0.7613%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (132,533,236 samples, 26.84%)</title><rect x="0.6628%" y="165" width="26.8418%" height="15" fill="rgb(209,103,24)"/><text x="0.9128%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (805,529 samples, 0.16%)</title><rect x="27.5046%" y="181" width="0.1631%" height="15" fill="rgb(229,88,8)"/><text x="27.7546%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (496,146 samples, 0.10%)</title><rect x="27.5673%" y="165" width="0.1005%" height="15" fill="rgb(213,181,19)"/><text x="27.8173%" y="175.50"></text></g><g><title>hir_module_items (932,760 samples, 0.19%)</title><rect x="27.6678%" y="181" width="0.1889%" height="15" fill="rgb(254,191,54)"/><text x="27.9178%" y="191.50"></text></g><g><title>should_inherit_track_caller (641,479 samples, 0.13%)</title><rect x="28.1910%" y="133" width="0.1299%" height="15" fill="rgb(241,83,37)"/><text x="28.4410%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,121,556 samples, 0.23%)</title><rect x="28.0979%" y="149" width="0.2271%" height="15" fill="rgb(233,36,39)"/><text x="28.3479%" y="159.50"></text></g><g><title>check_mod_attrs (2,265,005 samples, 0.46%)</title><rect x="27.8664%" y="165" width="0.4587%" height="15" fill="rgb(226,3,54)"/><text x="28.1164%" y="175.50"></text></g><g><title>check_mod_const_bodies (582,427 samples, 0.12%)</title><rect x="28.3251%" y="165" width="0.1180%" height="15" fill="rgb(245,192,40)"/><text x="28.5751%" y="175.50"></text></g><g><title>lint_levels (811,759 samples, 0.16%)</title><rect x="28.6459%" y="149" width="0.1644%" height="15" fill="rgb(238,167,29)"/><text x="28.8959%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,134,993 samples, 0.43%)</title><rect x="28.5200%" y="165" width="0.4324%" height="15" fill="rgb(232,182,51)"/><text x="28.7700%" y="175.50"></text></g><g><title>misc_checking_1 (5,570,302 samples, 1.13%)</title><rect x="27.8568%" y="181" width="1.1281%" height="15" fill="rgb(231,60,39)"/><text x="28.1068%" y="191.50"></text></g><g><title>check_mod_intrinsics (509,465 samples, 0.10%)</title><rect x="28.9891%" y="149" width="0.1032%" height="15" fill="rgb(208,69,12)"/><text x="29.2391%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (2,900,262 samples, 0.59%)</title><rect x="28.9854%" y="165" width="0.5874%" height="15" fill="rgb(235,93,37)"/><text x="29.2354%" y="175.50"></text></g><g><title>check_mod_liveness (2,372,397 samples, 0.48%)</title><rect x="29.0923%" y="149" width="0.4805%" height="15" fill="rgb(213,116,39)"/><text x="29.3423%" y="159.50"></text></g><g><title>misc_checking_2 (6,657,714 samples, 1.35%)</title><rect x="28.9849%" y="181" width="1.3484%" height="15" fill="rgb(222,207,29)"/><text x="29.2349%" y="191.50"></text></g><g><title>match_checking (3,755,352 samples, 0.76%)</title><rect x="29.5728%" y="165" width="0.7606%" height="15" fill="rgb(206,96,30)"/><text x="29.8228%" y="175.50"></text></g><g><title>check_match (3,569,980 samples, 0.72%)</title><rect x="29.6103%" y="149" width="0.7230%" height="15" fill="rgb(218,138,4)"/><text x="29.8603%" y="159.50"></text></g><g><title>check_private_in_public (999,261 samples, 0.20%)</title><rect x="30.3358%" y="165" width="0.2024%" height="15" fill="rgb(250,191,14)"/><text x="30.5858%" y="175.50"></text></g><g><title>death_checking (1,846,791 samples, 0.37%)</title><rect x="30.5382%" y="165" width="0.3740%" height="15" fill="rgb(239,60,40)"/><text x="30.7882%" y="175.50"></text></g><g><title>eval_to_allocation_raw (737,089 samples, 0.15%)</title><rect x="31.4408%" y="133" width="0.1493%" height="15" fill="rgb(206,27,48)"/><text x="31.6908%" y="143.50"></text></g><g><title>eval_to_allocation_raw (729,888 samples, 0.15%)</title><rect x="31.4422%" y="117" width="0.1478%" height="15" fill="rgb(225,35,8)"/><text x="31.6922%" y="127.50"></text></g><g><title>eval_to_const_value_raw (614,515 samples, 0.12%)</title><rect x="31.5901%" y="133" width="0.1245%" height="15" fill="rgb(250,213,24)"/><text x="31.8401%" y="143.50"></text></g><g><title>eval_to_const_value_raw (588,425 samples, 0.12%)</title><rect x="31.5954%" y="117" width="0.1192%" height="15" fill="rgb(247,123,22)"/><text x="31.8454%" y="127.50"></text></g><g><title>eval_to_allocation_raw (557,905 samples, 0.11%)</title><rect x="31.6015%" y="101" width="0.1130%" height="15" fill="rgb(231,138,38)"/><text x="31.8515%" y="111.50"></text></g><g><title>param_env (1,068,095 samples, 0.22%)</title><rect x="31.7145%" y="133" width="0.2163%" height="15" fill="rgb(231,145,46)"/><text x="31.9645%" y="143.50"></text></g><g><title>predicates_of (544,167 samples, 0.11%)</title><rect x="31.8206%" y="117" width="0.1102%" height="15" fill="rgb(251,118,11)"/><text x="32.0706%" y="127.50"></text></g><g><title>crate_lints (6,358,791 samples, 1.29%)</title><rect x="30.9128%" y="149" width="1.2878%" height="15" fill="rgb(217,147,25)"/><text x="31.1628%" y="159.50"></text></g><g><title>type_of (1,161,194 samples, 0.24%)</title><rect x="31.9655%" y="133" width="0.2352%" height="15" fill="rgb(247,81,37)"/><text x="32.2155%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (929,241 samples, 0.19%)</title><rect x="32.0125%" y="117" width="0.1882%" height="15" fill="rgb(209,12,38)"/><text x="32.2625%" y="127.50"></text></g><g><title>lint_checking (9,079,081 samples, 1.84%)</title><rect x="30.9122%" y="165" width="1.8388%" height="15" fill="rgb(227,1,9)"/><text x="31.1622%" y="175.50">l..</text></g><g><title>module_lints (2,717,320 samples, 0.55%)</title><rect x="32.2007%" y="149" width="0.5503%" height="15" fill="rgb(248,47,43)"/><text x="32.4507%" y="159.50"></text></g><g><title>lint_mod (2,702,909 samples, 0.55%)</title><rect x="32.2036%" y="133" width="0.5474%" height="15" fill="rgb(221,10,30)"/><text x="32.4536%" y="143.50"></text></g><g><title>privacy_access_levels (1,444,466 samples, 0.29%)</title><rect x="32.7510%" y="165" width="0.2925%" height="15" fill="rgb(210,229,1)"/><text x="33.0010%" y="175.50"></text></g><g><title>privacy_checking_modules (4,292,278 samples, 0.87%)</title><rect x="33.0436%" y="165" width="0.8693%" height="15" fill="rgb(222,148,37)"/><text x="33.2936%" y="175.50"></text></g><g><title>check_mod_privacy (4,281,858 samples, 0.87%)</title><rect x="33.0457%" y="149" width="0.8672%" height="15" fill="rgb(234,67,33)"/><text x="33.2957%" y="159.50"></text></g><g><title>misc_checking_3 (17,701,967 samples, 3.59%)</title><rect x="30.3333%" y="181" width="3.5852%" height="15" fill="rgb(247,98,35)"/><text x="30.5833%" y="191.50">misc..</text></g><g><title>adt_destructor (651,047 samples, 0.13%)</title><rect x="34.0106%" y="133" width="0.1319%" height="15" fill="rgb(247,138,52)"/><text x="34.2606%" y="143.50"></text></g><g><title>coherent_trait (646,737 samples, 0.13%)</title><rect x="34.0115%" y="117" width="0.1310%" height="15" fill="rgb(213,79,30)"/><text x="34.2615%" y="127.50"></text></g><g><title>specialization_graph_of (644,617 samples, 0.13%)</title><rect x="34.0119%" y="101" width="0.1306%" height="15" fill="rgb(246,177,23)"/><text x="34.2619%" y="111.50"></text></g><g><title>mir_for_ctfe (523,206 samples, 0.11%)</title><rect x="34.2558%" y="85" width="0.1060%" height="15" fill="rgb(230,62,27)"/><text x="34.5058%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,454,117 samples, 0.29%)</title><rect x="34.1425%" y="133" width="0.2945%" height="15" fill="rgb(216,154,8)"/><text x="34.3925%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,440,146 samples, 0.29%)</title><rect x="34.1453%" y="117" width="0.2917%" height="15" fill="rgb(244,35,45)"/><text x="34.3953%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,438,076 samples, 0.29%)</title><rect x="34.1457%" y="101" width="0.2913%" height="15" fill="rgb(251,115,12)"/><text x="34.3957%" y="111.50"></text></g><g><title>impl_parent (3,351,188 samples, 0.68%)</title><rect x="35.6866%" y="117" width="0.6787%" height="15" fill="rgb(240,54,50)"/><text x="35.9366%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,848,639 samples, 0.37%)</title><rect x="35.9909%" y="101" width="0.3744%" height="15" fill="rgb(233,84,52)"/><text x="36.2409%" y="111.50"></text></g><g><title>impl_trait_ref (6,606,592 samples, 1.34%)</title><rect x="36.3656%" y="117" width="1.3380%" height="15" fill="rgb(207,117,47)"/><text x="36.6156%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,342,921 samples, 1.08%)</title><rect x="36.6215%" y="101" width="1.0821%" height="15" fill="rgb(249,43,39)"/><text x="36.8715%" y="111.50"></text></g><g><title>trait_impls_of (1,145,844 samples, 0.23%)</title><rect x="37.7235%" y="117" width="0.2321%" height="15" fill="rgb(209,38,44)"/><text x="37.9735%" y="127.50"></text></g><g><title>coherent_trait (19,579,538 samples, 3.97%)</title><rect x="33.9907%" y="149" width="3.9654%" height="15" fill="rgb(236,212,23)"/><text x="34.2407%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (17,156,831 samples, 3.47%)</title><rect x="34.4814%" y="133" width="3.4748%" height="15" fill="rgb(242,79,21)"/><text x="34.7314%" y="143.50">spe..</text></g><g><title>coherence_checking (19,818,600 samples, 4.01%)</title><rect x="33.9842%" y="165" width="4.0138%" height="15" fill="rgb(211,96,35)"/><text x="34.2342%" y="175.50">cohe..</text></g><g><title>associated_item (1,552,686 samples, 0.31%)</title><rect x="57.8791%" y="101" width="0.3145%" height="15" fill="rgb(253,215,40)"/><text x="58.1291%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,238,853 samples, 0.25%)</title><rect x="57.9426%" y="85" width="0.2509%" height="15" fill="rgb(211,81,21)"/><text x="58.1926%" y="95.50"></text></g><g><title>associated_items (2,458,124 samples, 0.50%)</title><rect x="57.7174%" y="117" width="0.4978%" height="15" fill="rgb(208,190,38)"/><text x="57.9674%" y="127.50"></text></g><g><title>adt_dtorck_constraint (629,580 samples, 0.13%)</title><rect x="58.3901%" y="101" width="0.1275%" height="15" fill="rgb(235,213,38)"/><text x="58.6401%" y="111.50"></text></g><g><title>dropck_outlives (1,400,835 samples, 0.28%)</title><rect x="58.2634%" y="117" width="0.2837%" height="15" fill="rgb(237,122,38)"/><text x="58.5134%" y="127.50"></text></g><g><title>mir_borrowck (559,366 samples, 0.11%)</title><rect x="58.6823%" y="37" width="0.1133%" height="15" fill="rgb(244,218,35)"/><text x="58.9323%" y="47.50"></text></g><g><title>mir_for_ctfe (804,997 samples, 0.16%)</title><rect x="58.6329%" y="69" width="0.1630%" height="15" fill="rgb(240,68,47)"/><text x="58.8829%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (736,317 samples, 0.15%)</title><rect x="58.6468%" y="53" width="0.1491%" height="15" fill="rgb(210,16,53)"/><text x="58.8968%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,375,285 samples, 0.28%)</title><rect x="58.5471%" y="117" width="0.2785%" height="15" fill="rgb(235,124,12)"/><text x="58.7971%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,367,365 samples, 0.28%)</title><rect x="58.5487%" y="101" width="0.2769%" height="15" fill="rgb(224,169,11)"/><text x="58.7987%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,350,925 samples, 0.27%)</title><rect x="58.5520%" y="85" width="0.2736%" height="15" fill="rgb(250,166,2)"/><text x="58.8020%" y="95.50"></text></g><g><title>generics_of (657,274 samples, 0.13%)</title><rect x="60.7781%" y="101" width="0.1331%" height="15" fill="rgb(242,216,29)"/><text x="61.0281%" y="111.50"></text></g><g><title>predicates_of (1,281,587 samples, 0.26%)</title><rect x="61.0898%" y="101" width="0.2596%" height="15" fill="rgb(230,116,27)"/><text x="61.3398%" y="111.50"></text></g><g><title>predicates_defined_on (754,527 samples, 0.15%)</title><rect x="61.1965%" y="85" width="0.1528%" height="15" fill="rgb(228,99,48)"/><text x="61.4465%" y="95.50"></text></g><g><title>specializes (2,566,774 samples, 0.52%)</title><rect x="61.3494%" y="101" width="0.5198%" height="15" fill="rgb(253,11,6)"/><text x="61.5994%" y="111.50"></text></g><g><title>param_env (1,559,702 samples, 0.32%)</title><rect x="61.5533%" y="85" width="0.3159%" height="15" fill="rgb(247,143,39)"/><text x="61.8033%" y="95.50"></text></g><g><title>def_span (674,183 samples, 0.14%)</title><rect x="61.7327%" y="69" width="0.1365%" height="15" fill="rgb(236,97,10)"/><text x="61.9827%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (601,523 samples, 0.12%)</title><rect x="61.7474%" y="53" width="0.1218%" height="15" fill="rgb(233,208,19)"/><text x="61.9974%" y="63.50"></text></g><g><title>trait_impls_of (697,431 samples, 0.14%)</title><rect x="61.8756%" y="101" width="0.1413%" height="15" fill="rgb(216,164,2)"/><text x="62.1256%" y="111.50"></text></g><g><title>evaluate_obligation (15,794,328 samples, 3.20%)</title><rect x="58.8256%" y="117" width="3.1988%" height="15" fill="rgb(220,129,5)"/><text x="59.0756%" y="127.50">eva..</text></g><g><title>impl_item_implementor_ids (589,893 samples, 0.12%)</title><rect x="62.1762%" y="117" width="0.1195%" height="15" fill="rgb(242,17,10)"/><text x="62.4262%" y="127.50"></text></g><g><title>associated_items (513,563 samples, 0.10%)</title><rect x="62.1917%" y="101" width="0.1040%" height="15" fill="rgb(242,107,0)"/><text x="62.4417%" y="111.50"></text></g><g><title>evaluate_obligation (790,719 samples, 0.16%)</title><rect x="62.6166%" y="101" width="0.1601%" height="15" fill="rgb(251,28,31)"/><text x="62.8666%" y="111.50"></text></g><g><title>method_autoderef_steps (1,467,787 samples, 0.30%)</title><rect x="62.4811%" y="117" width="0.2973%" height="15" fill="rgb(233,223,10)"/><text x="62.7311%" y="127.50"></text></g><g><title>predicates_of (918,091 samples, 0.19%)</title><rect x="62.8992%" y="117" width="0.1859%" height="15" fill="rgb(215,21,27)"/><text x="63.1492%" y="127.50"></text></g><g><title>predicates_defined_on (660,517 samples, 0.13%)</title><rect x="62.9514%" y="101" width="0.1338%" height="15" fill="rgb(232,23,21)"/><text x="63.2014%" y="111.50"></text></g><g><title>evaluate_obligation (2,816,124 samples, 0.57%)</title><rect x="69.4226%" y="101" width="0.5703%" height="15" fill="rgb(244,5,23)"/><text x="69.6726%" y="111.50"></text></g><g><title>generics_of (580,937 samples, 0.12%)</title><rect x="70.0048%" y="101" width="0.1177%" height="15" fill="rgb(226,81,46)"/><text x="70.2548%" y="111.50"></text></g><g><title>typeck (35,629,246 samples, 7.22%)</title><rect x="63.1596%" y="117" width="7.2160%" height="15" fill="rgb(247,70,30)"/><text x="63.4096%" y="127.50">typeck</text></g><g><title>item_bodies_checking (159,962,739 samples, 32.40%)</title><rect x="38.0265%" y="165" width="32.3971%" height="15" fill="rgb(212,68,19)"/><text x="38.2765%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (159,958,819 samples, 32.40%)</title><rect x="38.0273%" y="149" width="32.3963%" height="15" fill="rgb(240,187,13)"/><text x="38.2773%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (159,470,245 samples, 32.30%)</title><rect x="38.1262%" y="133" width="32.2974%" height="15" fill="rgb(223,113,26)"/><text x="38.3762%" y="143.50">typeck</text></g><g><title>evaluate_obligation (1,236,895 samples, 0.25%)</title><rect x="71.7772%" y="117" width="0.2505%" height="15" fill="rgb(206,192,2)"/><text x="72.0272%" y="127.50"></text></g><g><title>item_types_checking (8,021,979 samples, 1.62%)</title><rect x="70.4236%" y="165" width="1.6247%" height="15" fill="rgb(241,108,4)"/><text x="70.6736%" y="175.50"></text></g><g><title>check_mod_item_types (8,008,238 samples, 1.62%)</title><rect x="70.4264%" y="149" width="1.6219%" height="15" fill="rgb(247,173,49)"/><text x="70.6764%" y="159.50"></text></g><g><title>typeck (3,023,012 samples, 0.61%)</title><rect x="71.4360%" y="133" width="0.6122%" height="15" fill="rgb(224,114,35)"/><text x="71.6860%" y="143.50"></text></g><g><title>late_bound_vars_map (575,025 samples, 0.12%)</title><rect x="72.5232%" y="117" width="0.1165%" height="15" fill="rgb(245,159,27)"/><text x="72.7732%" y="127.50"></text></g><g><title>fn_sig (1,780,809 samples, 0.36%)</title><rect x="72.2925%" y="133" width="0.3607%" height="15" fill="rgb(245,172,44)"/><text x="72.5425%" y="143.50"></text></g><g><title>is_late_bound_map (579,706 samples, 0.12%)</title><rect x="72.7533%" y="117" width="0.1174%" height="15" fill="rgb(236,23,11)"/><text x="73.0033%" y="127.50"></text></g><g><title>resolve_lifetimes (543,606 samples, 0.11%)</title><rect x="72.7606%" y="101" width="0.1101%" height="15" fill="rgb(205,117,38)"/><text x="73.0106%" y="111.50"></text></g><g><title>named_region_map (726,818 samples, 0.15%)</title><rect x="72.8707%" y="117" width="0.1472%" height="15" fill="rgb(237,72,25)"/><text x="73.1207%" y="127.50"></text></g><g><title>resolve_lifetimes (646,947 samples, 0.13%)</title><rect x="72.8869%" y="101" width="0.1310%" height="15" fill="rgb(244,70,9)"/><text x="73.1369%" y="111.50"></text></g><g><title>generics_of (1,861,381 samples, 0.38%)</title><rect x="72.6532%" y="133" width="0.3770%" height="15" fill="rgb(217,125,39)"/><text x="72.9032%" y="143.50"></text></g><g><title>explicit_predicates_of (591,163 samples, 0.12%)</title><rect x="73.2422%" y="101" width="0.1197%" height="15" fill="rgb(235,36,10)"/><text x="73.4922%" y="111.50"></text></g><g><title>predicates_of (1,588,416 samples, 0.32%)</title><rect x="73.1143%" y="133" width="0.3217%" height="15" fill="rgb(251,123,47)"/><text x="73.3643%" y="143.50"></text></g><g><title>predicates_defined_on (1,345,013 samples, 0.27%)</title><rect x="73.1636%" y="117" width="0.2724%" height="15" fill="rgb(221,13,13)"/><text x="73.4136%" y="127.50"></text></g><g><title>type_collecting (7,313,262 samples, 1.48%)</title><rect x="72.0498%" y="165" width="1.4811%" height="15" fill="rgb(238,131,9)"/><text x="72.2998%" y="175.50"></text></g><g><title>collect_mod_item_types (7,296,852 samples, 1.48%)</title><rect x="72.0532%" y="149" width="1.4778%" height="15" fill="rgb(211,50,8)"/><text x="72.3032%" y="159.50"></text></g><g><title>evaluate_obligation (883,721 samples, 0.18%)</title><rect x="75.3049%" y="133" width="0.1790%" height="15" fill="rgb(245,182,24)"/><text x="75.5549%" y="143.50"></text></g><g><title>param_env (1,248,464 samples, 0.25%)</title><rect x="75.5905%" y="133" width="0.2529%" height="15" fill="rgb(242,14,37)"/><text x="75.8405%" y="143.50"></text></g><g><title>region_scope_tree (2,206,375 samples, 0.45%)</title><rect x="75.8482%" y="133" width="0.4469%" height="15" fill="rgb(246,228,12)"/><text x="76.0982%" y="143.50"></text></g><g><title>check_impl_item_well_formed (12,449,101 samples, 2.52%)</title><rect x="73.7783%" y="149" width="2.5213%" height="15" fill="rgb(213,55,15)"/><text x="74.0283%" y="159.50">ch..</text></g><g><title>eval_to_const_value_raw (591,766 samples, 0.12%)</title><rect x="77.3898%" y="133" width="0.1198%" height="15" fill="rgb(209,9,3)"/><text x="77.6398%" y="143.50"></text></g><g><title>eval_to_const_value_raw (590,026 samples, 0.12%)</title><rect x="77.3901%" y="117" width="0.1195%" height="15" fill="rgb(230,59,30)"/><text x="77.6401%" y="127.50"></text></g><g><title>eval_to_allocation_raw (587,086 samples, 0.12%)</title><rect x="77.3907%" y="101" width="0.1189%" height="15" fill="rgb(209,121,21)"/><text x="77.6407%" y="111.50"></text></g><g><title>evaluate_obligation (2,129,957 samples, 0.43%)</title><rect x="77.5096%" y="133" width="0.4314%" height="15" fill="rgb(220,109,13)"/><text x="77.7596%" y="143.50"></text></g><g><title>param_env (1,005,731 samples, 0.20%)</title><rect x="77.9893%" y="133" width="0.2037%" height="15" fill="rgb(232,18,1)"/><text x="78.2393%" y="143.50"></text></g><g><title>region_scope_tree (513,433 samples, 0.10%)</title><rect x="78.2260%" y="133" width="0.1040%" height="15" fill="rgb(215,41,42)"/><text x="78.4760%" y="143.50"></text></g><g><title>check_item_well_formed (10,259,394 samples, 2.08%)</title><rect x="76.2996%" y="149" width="2.0778%" height="15" fill="rgb(224,123,36)"/><text x="76.5496%" y="159.50">c..</text></g><g><title>analysis (386,827,131 samples, 78.34%)</title><rect x="0.2360%" y="197" width="78.3438%" height="15" fill="rgb(240,125,3)"/><text x="0.4860%" y="207.50">analysis</text></g><g><title>type_check_crate (220,517,832 samples, 44.66%)</title><rect x="33.9185%" y="181" width="44.6613%" height="15" fill="rgb(205,98,50)"/><text x="34.1685%" y="191.50">type_check_crate</text></g><g><title>wf_checking (24,896,556 samples, 5.04%)</title><rect x="73.5375%" y="165" width="5.0423%" height="15" fill="rgb(205,185,37)"/><text x="73.7875%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (998,962 samples, 0.20%)</title><rect x="78.3775%" y="149" width="0.2023%" height="15" fill="rgb(238,207,15)"/><text x="78.6275%" y="159.50"></text></g><g><title>metadata_register_crate (2,695,890 samples, 0.55%)</title><rect x="90.2043%" y="149" width="0.5460%" height="15" fill="rgb(213,199,42)"/><text x="90.4543%" y="159.50"></text></g><g><title>metadata_register_crate (984,551 samples, 0.20%)</title><rect x="90.5509%" y="133" width="0.1994%" height="15" fill="rgb(235,201,11)"/><text x="90.8009%" y="143.50"></text></g><g><title>macro_expand_crate (60,377,392 samples, 12.23%)</title><rect x="78.8817%" y="181" width="12.2282%" height="15" fill="rgb(207,46,11)"/><text x="79.1317%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (60,357,591 samples, 12.22%)</title><rect x="78.8857%" y="165" width="12.2242%" height="15" fill="rgb(241,35,35)"/><text x="79.1357%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,775,328 samples, 0.36%)</title><rect x="90.7503%" y="149" width="0.3596%" height="15" fill="rgb(243,32,47)"/><text x="91.0003%" y="159.50"></text></g><g><title>late_resolve_crate (7,937,578 samples, 1.61%)</title><rect x="91.2298%" y="165" width="1.6076%" height="15" fill="rgb(247,202,23)"/><text x="91.4798%" y="175.50"></text></g><g><title>configure_and_expand (70,518,605 samples, 14.28%)</title><rect x="78.6670%" y="197" width="14.2821%" height="15" fill="rgb(219,102,11)"/><text x="78.9170%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (8,919,269 samples, 1.81%)</title><rect x="91.1426%" y="181" width="1.8064%" height="15" fill="rgb(243,110,44)"/><text x="91.3926%" y="191.50">r..</text></g><g><title>drop_ast (917,330 samples, 0.19%)</title><rect x="92.9490%" y="197" width="0.1858%" height="15" fill="rgb(222,74,54)"/><text x="93.1990%" y="207.50"></text></g><g><title>early_lint_checks (2,033,803 samples, 0.41%)</title><rect x="93.1382%" y="197" width="0.4119%" height="15" fill="rgb(216,99,12)"/><text x="93.3882%" y="207.50"></text></g><g><title>free_global_ctxt (6,833,566 samples, 1.38%)</title><rect x="93.5501%" y="197" width="1.3840%" height="15" fill="rgb(226,22,26)"/><text x="93.8001%" y="207.50"></text></g><g><title>generate_crate_metadata (4,499,750 samples, 0.91%)</title><rect x="94.9341%" y="197" width="0.9113%" height="15" fill="rgb(217,163,10)"/><text x="95.1841%" y="207.50"></text></g><g><title>hir_lowering (15,599,623 samples, 3.16%)</title><rect x="95.8455%" y="197" width="3.1594%" height="15" fill="rgb(213,25,53)"/><text x="96.0955%" y="207.50">hir..</text></g><g><title>parse_crate (2,041,863 samples, 0.41%)</title><rect x="99.0190%" y="197" width="0.4135%" height="15" fill="rgb(252,105,26)"/><text x="99.2690%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,982,872 samples, 0.40%)</title><rect x="99.4801%" y="197" width="0.4016%" height="15" fill="rgb(220,39,43)"/><text x="99.7301%" y="207.50"></text></g><g><title>all (493,756,150 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (493,756,150 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>