<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (3,003,337 samples, 0.49%)</title><rect x="20.1643%" y="133" width="0.4905%" height="15" fill="rgb(227,0,7)"/><text x="20.4143%" y="143.50"></text></g><g><title>param_env (1,068,375 samples, 0.17%)</title><rect x="22.7207%" y="101" width="0.1745%" height="15" fill="rgb(217,0,24)"/><text x="22.9707%" y="111.50"></text></g><g><title>item_attrs (770,050 samples, 0.13%)</title><rect x="23.5252%" y="69" width="0.1258%" height="15" fill="rgb(221,193,54)"/><text x="23.7752%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (741,430 samples, 0.12%)</title><rect x="23.5298%" y="53" width="0.1211%" height="15" fill="rgb(248,212,6)"/><text x="23.7798%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,087,555 samples, 0.18%)</title><rect x="23.4817%" y="85" width="0.1776%" height="15" fill="rgb(208,68,35)"/><text x="23.7317%" y="95.50"></text></g><g><title>adt_drop_tys (824,125 samples, 0.13%)</title><rect x="27.3283%" y="53" width="0.1346%" height="15" fill="rgb(232,128,0)"/><text x="27.5783%" y="63.50"></text></g><g><title>is_copy_raw (3,618,905 samples, 0.59%)</title><rect x="27.4630%" y="53" width="0.5911%" height="15" fill="rgb(207,160,47)"/><text x="27.7130%" y="63.50"></text></g><g><title>evaluate_obligation (2,300,644 samples, 0.38%)</title><rect x="27.6783%" y="37" width="0.3758%" height="15" fill="rgb(228,23,34)"/><text x="27.9283%" y="47.50"></text></g><g><title>needs_drop_raw (5,556,476 samples, 0.91%)</title><rect x="27.1967%" y="69" width="0.9075%" height="15" fill="rgb(218,30,26)"/><text x="27.4467%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,559,568 samples, 0.42%)</title><rect x="28.2335%" y="53" width="0.4181%" height="15" fill="rgb(220,122,19)"/><text x="28.4835%" y="63.50"></text></g><g><title>resolve_instance (4,102,720 samples, 0.67%)</title><rect x="28.1043%" y="69" width="0.6701%" height="15" fill="rgb(250,228,42)"/><text x="28.3543%" y="79.50"></text></g><g><title>thir_body (8,518,826 samples, 1.39%)</title><rect x="28.8113%" y="69" width="1.3914%" height="15" fill="rgb(240,193,28)"/><text x="29.0613%" y="79.50"></text></g><g><title>mir_const (52,229,657 samples, 8.53%)</title><rect x="21.7216%" y="117" width="8.5306%" height="15" fill="rgb(216,20,37)"/><text x="21.9716%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (45,044,007 samples, 7.36%)</title><rect x="22.8952%" y="101" width="7.3570%" height="15" fill="rgb(206,188,39)"/><text x="23.1452%" y="111.50">unsafety_c..</text></g><g><title>mir_built (40,365,425 samples, 6.59%)</title><rect x="23.6594%" y="85" width="6.5928%" height="15" fill="rgb(217,207,13)"/><text x="23.9094%" y="95.50">mir_built</text></g><g><title>mir_promoted (59,014,638 samples, 9.64%)</title><rect x="20.6809%" y="133" width="9.6388%" height="15" fill="rgb(231,73,38)"/><text x="20.9309%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,253,705 samples, 0.20%)</title><rect x="30.3203%" y="133" width="0.2048%" height="15" fill="rgb(225,20,46)"/><text x="30.5703%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,500,547 samples, 0.25%)</title><rect x="30.5251%" y="133" width="0.2451%" height="15" fill="rgb(210,31,41)"/><text x="30.7751%" y="143.50"></text></g><g><title>normalize_projection_ty (974,068 samples, 0.16%)</title><rect x="30.6111%" y="117" width="0.1591%" height="15" fill="rgb(221,200,47)"/><text x="30.8611%" y="127.50"></text></g><g><title>type_op_normalize_predicate (3,830,808 samples, 0.63%)</title><rect x="30.7708%" y="133" width="0.6257%" height="15" fill="rgb(226,26,5)"/><text x="31.0208%" y="143.50"></text></g><g><title>normalize_projection_ty (2,582,767 samples, 0.42%)</title><rect x="30.9746%" y="117" width="0.4218%" height="15" fill="rgb(249,33,26)"/><text x="31.2246%" y="127.50"></text></g><g><title>type_op_prove_predicate (24,565,835 samples, 4.01%)</title><rect x="31.4062%" y="133" width="4.0123%" height="15" fill="rgb(235,183,28)"/><text x="31.6562%" y="143.50">type..</text></g><g><title>MIR_borrow_checking (214,560,133 samples, 35.04%)</title><rect x="0.3789%" y="165" width="35.0439%" height="15" fill="rgb(221,5,38)"/><text x="0.6289%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (213,570,736 samples, 34.88%)</title><rect x="0.5405%" y="149" width="34.8823%" height="15" fill="rgb(247,18,42)"/><text x="0.7905%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (764,948 samples, 0.12%)</title><rect x="35.4736%" y="165" width="0.1249%" height="15" fill="rgb(241,131,45)"/><text x="35.7236%" y="175.50"></text></g><g><title>codegen_fn_attrs (801,491 samples, 0.13%)</title><rect x="35.7885%" y="133" width="0.1309%" height="15" fill="rgb(249,31,29)"/><text x="36.0385%" y="143.50"></text></g><g><title>check_mod_attrs (1,927,573 samples, 0.31%)</title><rect x="35.6046%" y="149" width="0.3148%" height="15" fill="rgb(225,111,53)"/><text x="35.8546%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,065,861 samples, 0.17%)</title><rect x="36.0415%" y="149" width="0.1741%" height="15" fill="rgb(238,160,17)"/><text x="36.2915%" y="159.50"></text></g><g><title>misc_checking_1 (3,891,274 samples, 0.64%)</title><rect x="35.5987%" y="165" width="0.6356%" height="15" fill="rgb(214,148,48)"/><text x="35.8487%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,588,749 samples, 0.42%)</title><rect x="36.2346%" y="149" width="0.4228%" height="15" fill="rgb(232,36,49)"/><text x="36.4846%" y="159.50"></text></g><g><title>check_mod_liveness (2,064,603 samples, 0.34%)</title><rect x="36.3202%" y="133" width="0.3372%" height="15" fill="rgb(209,103,24)"/><text x="36.5702%" y="143.50"></text></g><g><title>param_env (1,553,440 samples, 0.25%)</title><rect x="37.5770%" y="117" width="0.2537%" height="15" fill="rgb(229,88,8)"/><text x="37.8270%" y="127.50"></text></g><g><title>predicates_of (680,370 samples, 0.11%)</title><rect x="37.7196%" y="101" width="0.1111%" height="15" fill="rgb(213,181,19)"/><text x="37.9696%" y="111.50"></text></g><g><title>misc_checking_2 (9,783,568 samples, 1.60%)</title><rect x="36.2342%" y="165" width="1.5979%" height="15" fill="rgb(254,191,54)"/><text x="36.4842%" y="175.50"></text></g><g><title>match_checking (7,192,379 samples, 1.17%)</title><rect x="36.6574%" y="149" width="1.1747%" height="15" fill="rgb(241,83,37)"/><text x="36.9074%" y="159.50"></text></g><g><title>check_match (6,966,137 samples, 1.14%)</title><rect x="36.6944%" y="133" width="1.1378%" height="15" fill="rgb(233,36,39)"/><text x="36.9444%" y="143.50"></text></g><g><title>check_private_in_public (632,377 samples, 0.10%)</title><rect x="37.8342%" y="149" width="0.1033%" height="15" fill="rgb(226,3,54)"/><text x="38.0842%" y="159.50"></text></g><g><title>death_checking (1,366,445 samples, 0.22%)</title><rect x="37.9375%" y="149" width="0.2232%" height="15" fill="rgb(245,192,40)"/><text x="38.1875%" y="159.50"></text></g><g><title>eval_to_allocation_raw (666,398 samples, 0.11%)</title><rect x="38.5550%" y="117" width="0.1088%" height="15" fill="rgb(238,167,29)"/><text x="38.8050%" y="127.50"></text></g><g><title>eval_to_allocation_raw (664,498 samples, 0.11%)</title><rect x="38.5553%" y="101" width="0.1085%" height="15" fill="rgb(232,182,51)"/><text x="38.8053%" y="111.50"></text></g><g><title>crate_lints (5,000,496 samples, 0.82%)</title><rect x="38.1611%" y="133" width="0.8167%" height="15" fill="rgb(231,60,39)"/><text x="38.4111%" y="143.50"></text></g><g><title>type_of (1,185,383 samples, 0.19%)</title><rect x="38.7842%" y="117" width="0.1936%" height="15" fill="rgb(208,69,12)"/><text x="39.0342%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (949,441 samples, 0.16%)</title><rect x="38.8228%" y="101" width="0.1551%" height="15" fill="rgb(235,93,37)"/><text x="39.0728%" y="111.50"></text></g><g><title>lint_checking (9,631,898 samples, 1.57%)</title><rect x="38.1607%" y="149" width="1.5732%" height="15" fill="rgb(213,116,39)"/><text x="38.4107%" y="159.50"></text></g><g><title>module_lints (4,628,902 samples, 0.76%)</title><rect x="38.9778%" y="133" width="0.7560%" height="15" fill="rgb(222,207,29)"/><text x="39.2278%" y="143.50"></text></g><g><title>lint_mod (4,615,392 samples, 0.75%)</title><rect x="38.9801%" y="117" width="0.7538%" height="15" fill="rgb(206,96,30)"/><text x="39.2301%" y="127.50"></text></g><g><title>privacy_access_levels (1,103,563 samples, 0.18%)</title><rect x="39.7339%" y="149" width="0.1802%" height="15" fill="rgb(218,138,4)"/><text x="39.9839%" y="159.50"></text></g><g><title>privacy_checking_modules (6,979,379 samples, 1.14%)</title><rect x="39.9141%" y="149" width="1.1399%" height="15" fill="rgb(250,191,14)"/><text x="40.1641%" y="159.50"></text></g><g><title>check_mod_privacy (6,970,579 samples, 1.14%)</title><rect x="39.9156%" y="133" width="1.1385%" height="15" fill="rgb(239,60,40)"/><text x="40.1656%" y="143.50"></text></g><g><title>misc_checking_3 (19,756,362 samples, 3.23%)</title><rect x="37.8322%" y="165" width="3.2268%" height="15" fill="rgb(206,27,48)"/><text x="38.0822%" y="175.50">mis..</text></g><g><title>impl_parent (2,988,107 samples, 0.49%)</title><rect x="41.8834%" y="101" width="0.4880%" height="15" fill="rgb(225,35,8)"/><text x="42.1334%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,706,030 samples, 0.28%)</title><rect x="42.0928%" y="85" width="0.2786%" height="15" fill="rgb(250,213,24)"/><text x="42.3428%" y="95.50"></text></g><g><title>impl_trait_ref (6,161,735 samples, 1.01%)</title><rect x="42.3715%" y="101" width="1.0064%" height="15" fill="rgb(247,123,22)"/><text x="42.6215%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,452,853 samples, 0.73%)</title><rect x="42.6506%" y="85" width="0.7273%" height="15" fill="rgb(231,138,38)"/><text x="42.9006%" y="95.50"></text></g><g><title>coherent_trait (14,780,756 samples, 2.41%)</title><rect x="41.1102%" y="133" width="2.4141%" height="15" fill="rgb(231,145,46)"/><text x="41.3602%" y="143.50">co..</text></g><g><title>specialization_graph_of (14,338,911 samples, 2.34%)</title><rect x="41.1824%" y="117" width="2.3420%" height="15" fill="rgb(251,118,11)"/><text x="41.4324%" y="127.50">s..</text></g><g><title>trait_impls_of (894,471 samples, 0.15%)</title><rect x="43.3782%" y="101" width="0.1461%" height="15" fill="rgb(217,147,25)"/><text x="43.6282%" y="111.50"></text></g><g><title>coherence_checking (14,902,697 samples, 2.43%)</title><rect x="41.1065%" y="149" width="2.4340%" height="15" fill="rgb(247,81,37)"/><text x="41.3565%" y="159.50">co..</text></g><g><title>associated_item (620,249 samples, 0.10%)</title><rect x="55.9697%" y="85" width="0.1013%" height="15" fill="rgb(209,12,38)"/><text x="56.2197%" y="95.50"></text></g><g><title>associated_items (747,149 samples, 0.12%)</title><rect x="55.9526%" y="101" width="0.1220%" height="15" fill="rgb(227,1,9)"/><text x="56.2026%" y="111.50"></text></g><g><title>dropck_outlives (737,528 samples, 0.12%)</title><rect x="56.0847%" y="101" width="0.1205%" height="15" fill="rgb(248,47,43)"/><text x="56.3347%" y="111.50"></text></g><g><title>evaluate_obligation (1,813,311 samples, 0.30%)</title><rect x="56.2051%" y="101" width="0.2962%" height="15" fill="rgb(221,10,30)"/><text x="56.4551%" y="111.50"></text></g><g><title>associated_items (883,488 samples, 0.14%)</title><rect x="78.6317%" y="85" width="0.1443%" height="15" fill="rgb(210,229,1)"/><text x="78.8817%" y="95.50"></text></g><g><title>dropck_outlives (1,266,494 samples, 0.21%)</title><rect x="78.7982%" y="85" width="0.2069%" height="15" fill="rgb(222,148,37)"/><text x="79.0482%" y="95.50"></text></g><g><title>evaluate_obligation (10,479,996 samples, 1.71%)</title><rect x="79.0050%" y="85" width="1.7117%" height="15" fill="rgb(234,67,33)"/><text x="79.2550%" y="95.50"></text></g><g><title>generics_of (783,493 samples, 0.13%)</title><rect x="80.7652%" y="85" width="0.1280%" height="15" fill="rgb(247,98,35)"/><text x="81.0152%" y="95.50"></text></g><g><title>is_copy_raw (759,959 samples, 0.12%)</title><rect x="80.9987%" y="85" width="0.1241%" height="15" fill="rgb(247,138,52)"/><text x="81.2487%" y="95.50"></text></g><g><title>method_autoderef_steps (1,875,562 samples, 0.31%)</title><rect x="81.1624%" y="85" width="0.3063%" height="15" fill="rgb(213,79,30)"/><text x="81.4124%" y="95.50"></text></g><g><title>evaluate_obligation (898,080 samples, 0.15%)</title><rect x="81.3221%" y="69" width="0.1467%" height="15" fill="rgb(246,177,23)"/><text x="81.5721%" y="79.50"></text></g><g><title>predicates_of (761,828 samples, 0.12%)</title><rect x="81.4816%" y="85" width="0.1244%" height="15" fill="rgb(230,62,27)"/><text x="81.7316%" y="95.50"></text></g><g><title>typeck (152,975,015 samples, 24.99%)</title><rect x="56.7732%" y="101" width="24.9853%" height="15" fill="rgb(216,154,8)"/><text x="57.0232%" y="111.50">typeck</text></g><g><title>item_bodies_checking (234,003,780 samples, 38.22%)</title><rect x="43.5490%" y="149" width="38.2196%" height="15" fill="rgb(244,35,45)"/><text x="43.7990%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (233,999,500 samples, 38.22%)</title><rect x="43.5497%" y="133" width="38.2189%" height="15" fill="rgb(251,115,12)"/><text x="43.7997%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (233,678,648 samples, 38.17%)</title><rect x="43.6021%" y="117" width="38.1665%" height="15" fill="rgb(240,54,50)"/><text x="43.8521%" y="127.50">typeck</text></g><g><title>item_types_checking (1,789,651 samples, 0.29%)</title><rect x="81.7686%" y="149" width="0.2923%" height="15" fill="rgb(233,84,52)"/><text x="82.0186%" y="159.50"></text></g><g><title>check_mod_item_types (1,780,901 samples, 0.29%)</title><rect x="81.7700%" y="133" width="0.2909%" height="15" fill="rgb(207,117,47)"/><text x="82.0200%" y="143.50"></text></g><g><title>fn_sig (942,035 samples, 0.15%)</title><rect x="82.2168%" y="117" width="0.1539%" height="15" fill="rgb(249,43,39)"/><text x="82.4668%" y="127.50"></text></g><g><title>named_region_map (1,912,086 samples, 0.31%)</title><rect x="82.5454%" y="101" width="0.3123%" height="15" fill="rgb(209,38,44)"/><text x="82.7954%" y="111.50"></text></g><g><title>resolve_lifetimes (1,848,396 samples, 0.30%)</title><rect x="82.5558%" y="85" width="0.3019%" height="15" fill="rgb(236,212,23)"/><text x="82.8058%" y="95.50"></text></g><g><title>lint_levels (846,039 samples, 0.14%)</title><rect x="82.7195%" y="69" width="0.1382%" height="15" fill="rgb(242,79,21)"/><text x="82.9695%" y="79.50"></text></g><g><title>generics_of (3,014,290 samples, 0.49%)</title><rect x="82.3707%" y="117" width="0.4923%" height="15" fill="rgb(211,96,35)"/><text x="82.6207%" y="127.50"></text></g><g><title>explicit_predicates_of (686,470 samples, 0.11%)</title><rect x="82.9447%" y="85" width="0.1121%" height="15" fill="rgb(253,215,40)"/><text x="83.1947%" y="95.50"></text></g><g><title>predicates_of (1,510,449 samples, 0.25%)</title><rect x="82.8758%" y="117" width="0.2467%" height="15" fill="rgb(211,81,21)"/><text x="83.1258%" y="127.50"></text></g><g><title>predicates_defined_on (1,350,187 samples, 0.22%)</title><rect x="82.9019%" y="101" width="0.2205%" height="15" fill="rgb(208,190,38)"/><text x="83.1519%" y="111.50"></text></g><g><title>type_collecting (6,711,435 samples, 1.10%)</title><rect x="82.0616%" y="149" width="1.0962%" height="15" fill="rgb(235,213,38)"/><text x="82.3116%" y="159.50"></text></g><g><title>collect_mod_item_types (6,694,755 samples, 1.09%)</title><rect x="82.0643%" y="133" width="1.0934%" height="15" fill="rgb(237,122,38)"/><text x="82.3143%" y="143.50"></text></g><g><title>region_scope_tree (905,570 samples, 0.15%)</title><rect x="83.7057%" y="117" width="0.1479%" height="15" fill="rgb(244,218,35)"/><text x="83.9557%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,725,413 samples, 0.61%)</title><rect x="83.2522%" y="133" width="0.6085%" height="15" fill="rgb(240,68,47)"/><text x="83.5022%" y="143.50"></text></g><g><title>param_env (703,366 samples, 0.11%)</title><rect x="84.6632%" y="117" width="0.1149%" height="15" fill="rgb(210,16,53)"/><text x="84.9132%" y="127.50"></text></g><g><title>region_scope_tree (1,271,705 samples, 0.21%)</title><rect x="84.7995%" y="117" width="0.2077%" height="15" fill="rgb(235,124,12)"/><text x="85.0495%" y="127.50"></text></g><g><title>analysis (519,745,550 samples, 84.89%)</title><rect x="0.1524%" y="181" width="84.8896%" height="15" fill="rgb(224,169,11)"/><text x="0.4024%" y="191.50">analysis</text></g><g><title>type_check_crate (269,290,816 samples, 43.98%)</title><rect x="41.0589%" y="165" width="43.9830%" height="15" fill="rgb(250,166,2)"/><text x="41.3089%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,489,768 samples, 1.88%)</title><rect x="83.1654%" y="149" width="1.8766%" height="15" fill="rgb(242,216,29)"/><text x="83.4154%" y="159.50">w..</text></g><g><title>check_item_well_formed (7,232,918 samples, 1.18%)</title><rect x="83.8606%" y="133" width="1.1813%" height="15" fill="rgb(230,116,27)"/><text x="84.1106%" y="143.50"></text></g><g><title>AST_validation (634,597 samples, 0.10%)</title><rect x="85.1521%" y="165" width="0.1036%" height="15" fill="rgb(228,99,48)"/><text x="85.4021%" y="175.50"></text></g><g><title>metadata_register_crate (1,460,856 samples, 0.24%)</title><rect x="92.9751%" y="133" width="0.2386%" height="15" fill="rgb(253,11,6)"/><text x="93.2251%" y="143.50"></text></g><g><title>macro_expand_crate (49,843,918 samples, 8.14%)</title><rect x="85.3165%" y="165" width="8.1410%" height="15" fill="rgb(247,143,39)"/><text x="85.5665%" y="175.50">macro_expan..</text></g><g><title>expand_crate (49,820,517 samples, 8.14%)</title><rect x="85.3203%" y="149" width="8.1371%" height="15" fill="rgb(236,97,10)"/><text x="85.5703%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,492,685 samples, 0.24%)</title><rect x="93.2137%" y="133" width="0.2438%" height="15" fill="rgb(233,208,19)"/><text x="93.4637%" y="143.50"></text></g><g><title>late_resolve_crate (7,753,107 samples, 1.27%)</title><rect x="93.5506%" y="149" width="1.2663%" height="15" fill="rgb(216,164,2)"/><text x="93.8006%" y="159.50"></text></g><g><title>configure_and_expand (59,967,011 samples, 9.79%)</title><rect x="85.1126%" y="181" width="9.7944%" height="15" fill="rgb(220,129,5)"/><text x="85.3626%" y="191.50">configure_and_..</text></g><g><title>resolve_crate (8,713,637 samples, 1.42%)</title><rect x="93.4838%" y="165" width="1.4232%" height="15" fill="rgb(242,17,10)"/><text x="93.7338%" y="175.50"></text></g><g><title>drop_ast (1,333,145 samples, 0.22%)</title><rect x="94.9070%" y="181" width="0.2177%" height="15" fill="rgb(242,107,0)"/><text x="95.1570%" y="191.50"></text></g><g><title>early_lint_checks (2,271,706 samples, 0.37%)</title><rect x="95.1282%" y="181" width="0.3710%" height="15" fill="rgb(251,28,31)"/><text x="95.3782%" y="191.50"></text></g><g><title>free_global_ctxt (6,543,934 samples, 1.07%)</title><rect x="95.4992%" y="181" width="1.0688%" height="15" fill="rgb(233,223,10)"/><text x="95.7492%" y="191.50"></text></g><g><title>generate_crate_metadata (4,218,497 samples, 0.69%)</title><rect x="96.5680%" y="181" width="0.6890%" height="15" fill="rgb(215,21,27)"/><text x="96.8180%" y="191.50"></text></g><g><title>hir_lowering (13,448,851 samples, 2.20%)</title><rect x="97.2570%" y="181" width="2.1966%" height="15" fill="rgb(232,23,21)"/><text x="97.5070%" y="191.50">h..</text></g><g><title>parse_crate (931,731 samples, 0.15%)</title><rect x="99.4657%" y="181" width="0.1522%" height="15" fill="rgb(244,5,23)"/><text x="99.7157%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,529,237 samples, 0.25%)</title><rect x="99.6555%" y="181" width="0.2498%" height="15" fill="rgb(226,81,46)"/><text x="99.9055%" y="191.50"></text></g><g><title>all (612,260,785 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (612,260,785 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>