<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (9,534,365 samples, 0.34%)</title><rect x="25.0033%" y="53" width="0.3419%" height="15" fill="rgb(227,0,7)"/><text x="25.2533%" y="63.50"></text></g><g><title>evaluate_obligation (7,737,944 samples, 0.28%)</title><rect x="25.0677%" y="37" width="0.2775%" height="15" fill="rgb(217,0,24)"/><text x="25.3177%" y="47.50"></text></g><g><title>needs_drop_raw (13,340,712 samples, 0.48%)</title><rect x="24.8776%" y="69" width="0.4784%" height="15" fill="rgb(221,193,54)"/><text x="25.1276%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,887,167 samples, 0.10%)</title><rect x="25.4334%" y="53" width="0.1035%" height="15" fill="rgb(248,212,6)"/><text x="25.6834%" y="63.50"></text></g><g><title>resolve_instance (7,141,553 samples, 0.26%)</title><rect x="25.3570%" y="69" width="0.2561%" height="15" fill="rgb(208,68,35)"/><text x="25.6070%" y="79.50"></text></g><g><title>thir_body (40,962,673 samples, 1.47%)</title><rect x="25.6317%" y="69" width="1.4689%" height="15" fill="rgb(232,128,0)"/><text x="25.8817%" y="79.50"></text></g><g><title>mir_const (201,908,156 samples, 7.24%)</title><rect x="19.8741%" y="117" width="7.2404%" height="15" fill="rgb(207,160,47)"/><text x="20.1241%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (178,507,642 samples, 6.40%)</title><rect x="20.7133%" y="101" width="6.4013%" height="15" fill="rgb(228,23,34)"/><text x="20.9633%" y="111.50">unsafety..</text></g><g><title>mir_built (162,712,468 samples, 5.83%)</title><rect x="21.2797%" y="85" width="5.8349%" height="15" fill="rgb(218,30,26)"/><text x="21.5297%" y="95.50">mir_bui..</text></g><g><title>mir_const (14,961,531 samples, 0.54%)</title><rect x="27.3249%" y="101" width="0.5365%" height="15" fill="rgb(220,122,19)"/><text x="27.5749%" y="111.50"></text></g><g><title>unsafety_check_result (11,665,596 samples, 0.42%)</title><rect x="27.4431%" y="85" width="0.4183%" height="15" fill="rgb(250,228,42)"/><text x="27.6931%" y="95.50"></text></g><g><title>mir_built (10,358,467 samples, 0.37%)</title><rect x="27.4900%" y="69" width="0.3715%" height="15" fill="rgb(240,193,28)"/><text x="27.7400%" y="79.50"></text></g><g><title>mir_const_qualif (21,146,100 samples, 0.76%)</title><rect x="27.1145%" y="117" width="0.7583%" height="15" fill="rgb(216,20,37)"/><text x="27.3645%" y="127.50"></text></g><g><title>mir_promoted (248,445,741 samples, 8.91%)</title><rect x="18.9636%" y="133" width="8.9093%" height="15" fill="rgb(206,188,39)"/><text x="19.2136%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (5,639,139 samples, 0.20%)</title><rect x="27.8760%" y="133" width="0.2022%" height="15" fill="rgb(217,207,13)"/><text x="28.1260%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,812,199 samples, 0.21%)</title><rect x="28.0782%" y="133" width="0.2084%" height="15" fill="rgb(231,73,38)"/><text x="28.3282%" y="143.50"></text></g><g><title>normalize_projection_ty (3,791,276 samples, 0.14%)</title><rect x="28.1507%" y="117" width="0.1360%" height="15" fill="rgb(225,20,46)"/><text x="28.4007%" y="127.50"></text></g><g><title>type_op_normalize_predicate (3,695,735 samples, 0.13%)</title><rect x="28.2866%" y="133" width="0.1325%" height="15" fill="rgb(210,31,41)"/><text x="28.5366%" y="143.50"></text></g><g><title>type_op_prove_predicate (24,899,825 samples, 0.89%)</title><rect x="28.4267%" y="133" width="0.8929%" height="15" fill="rgb(221,200,47)"/><text x="28.6767%" y="143.50"></text></g><g><title>MIR_borrow_checking (800,911,311 samples, 28.72%)</title><rect x="0.5999%" y="165" width="28.7207%" height="15" fill="rgb(226,26,5)"/><text x="0.8499%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (797,651,300 samples, 28.60%)</title><rect x="0.7168%" y="149" width="28.6038%" height="15" fill="rgb(249,33,26)"/><text x="0.9668%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (9,240,043 samples, 0.33%)</title><rect x="29.3206%" y="165" width="0.3313%" height="15" fill="rgb(235,183,28)"/><text x="29.5706%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,487,861 samples, 0.27%)</title><rect x="29.3834%" y="149" width="0.2685%" height="15" fill="rgb(221,5,38)"/><text x="29.6334%" y="159.50"></text></g><g><title>hir_module_items (4,117,277 samples, 0.15%)</title><rect x="29.6519%" y="165" width="0.1476%" height="15" fill="rgb(247,18,42)"/><text x="29.9019%" y="175.50"></text></g><g><title>codegen_fn_attrs (3,883,486 samples, 0.14%)</title><rect x="30.0740%" y="133" width="0.1393%" height="15" fill="rgb(241,131,45)"/><text x="30.3240%" y="143.50"></text></g><g><title>check_mod_attrs (11,446,616 samples, 0.41%)</title><rect x="29.8028%" y="149" width="0.4105%" height="15" fill="rgb(249,31,29)"/><text x="30.0528%" y="159.50"></text></g><g><title>check_mod_loops (2,811,383 samples, 0.10%)</title><rect x="30.3031%" y="149" width="0.1008%" height="15" fill="rgb(225,111,53)"/><text x="30.5531%" y="159.50"></text></g><g><title>lookup_stability (3,463,958 samples, 0.12%)</title><rect x="30.5204%" y="133" width="0.1242%" height="15" fill="rgb(238,160,17)"/><text x="30.7704%" y="143.50"></text></g><g><title>stability_index (3,287,247 samples, 0.12%)</title><rect x="30.5267%" y="117" width="0.1179%" height="15" fill="rgb(214,148,48)"/><text x="30.7767%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (6,586,064 samples, 0.24%)</title><rect x="30.4126%" y="149" width="0.2362%" height="15" fill="rgb(232,36,49)"/><text x="30.6626%" y="159.50"></text></g><g><title>misc_checking_1 (24,235,441 samples, 0.87%)</title><rect x="29.7996%" y="165" width="0.8691%" height="15" fill="rgb(209,103,24)"/><text x="30.0496%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (14,379,662 samples, 0.52%)</title><rect x="30.6688%" y="149" width="0.5157%" height="15" fill="rgb(229,88,8)"/><text x="30.9188%" y="159.50"></text></g><g><title>check_mod_liveness (11,558,909 samples, 0.41%)</title><rect x="30.7700%" y="133" width="0.4145%" height="15" fill="rgb(213,181,19)"/><text x="31.0200%" y="143.50"></text></g><g><title>misc_checking_2 (34,653,738 samples, 1.24%)</title><rect x="30.6687%" y="165" width="1.2427%" height="15" fill="rgb(254,191,54)"/><text x="30.9187%" y="175.50"></text></g><g><title>match_checking (20,269,606 samples, 0.73%)</title><rect x="31.1845%" y="149" width="0.7269%" height="15" fill="rgb(241,83,37)"/><text x="31.4345%" y="159.50"></text></g><g><title>check_match (19,220,172 samples, 0.69%)</title><rect x="31.2221%" y="133" width="0.6892%" height="15" fill="rgb(233,36,39)"/><text x="31.4721%" y="143.50"></text></g><g><title>check_private_in_public (7,190,420 samples, 0.26%)</title><rect x="31.9122%" y="149" width="0.2578%" height="15" fill="rgb(226,3,54)"/><text x="32.1622%" y="159.50"></text></g><g><title>death_checking (10,435,087 samples, 0.37%)</title><rect x="32.1701%" y="149" width="0.3742%" height="15" fill="rgb(245,192,40)"/><text x="32.4201%" y="159.50"></text></g><g><title>crate_lints (19,240,066 samples, 0.69%)</title><rect x="32.5444%" y="133" width="0.6899%" height="15" fill="rgb(238,167,29)"/><text x="32.7944%" y="143.50"></text></g><g><title>lint_checking (37,841,324 samples, 1.36%)</title><rect x="32.5443%" y="149" width="1.3570%" height="15" fill="rgb(232,182,51)"/><text x="32.7943%" y="159.50"></text></g><g><title>module_lints (18,597,298 samples, 0.67%)</title><rect x="33.2344%" y="133" width="0.6669%" height="15" fill="rgb(231,60,39)"/><text x="33.4844%" y="143.50"></text></g><g><title>lint_mod (18,567,638 samples, 0.67%)</title><rect x="33.2354%" y="117" width="0.6658%" height="15" fill="rgb(208,69,12)"/><text x="33.4854%" y="127.50"></text></g><g><title>privacy_access_levels (8,469,324 samples, 0.30%)</title><rect x="33.9013%" y="149" width="0.3037%" height="15" fill="rgb(235,93,37)"/><text x="34.1513%" y="159.50"></text></g><g><title>privacy_checking_modules (29,188,407 samples, 1.05%)</title><rect x="34.2050%" y="149" width="1.0467%" height="15" fill="rgb(213,116,39)"/><text x="34.4550%" y="159.50"></text></g><g><title>check_mod_privacy (29,160,157 samples, 1.05%)</title><rect x="34.2060%" y="133" width="1.0457%" height="15" fill="rgb(222,207,29)"/><text x="34.4560%" y="143.50"></text></g><g><title>misc_checking_3 (93,438,416 samples, 3.35%)</title><rect x="31.9114%" y="165" width="3.3507%" height="15" fill="rgb(206,96,30)"/><text x="32.1614%" y="175.50">mis..</text></g><g><title>impl_parent (4,162,821 samples, 0.15%)</title><rect x="35.5956%" y="101" width="0.1493%" height="15" fill="rgb(218,138,4)"/><text x="35.8456%" y="111.50"></text></g><g><title>impl_trait_ref (9,043,344 samples, 0.32%)</title><rect x="35.7448%" y="101" width="0.3243%" height="15" fill="rgb(250,191,14)"/><text x="35.9948%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,935,537 samples, 0.25%)</title><rect x="35.8204%" y="85" width="0.2487%" height="15" fill="rgb(239,60,40)"/><text x="36.0704%" y="95.50"></text></g><g><title>coherent_trait (23,040,699 samples, 0.83%)</title><rect x="35.3143%" y="133" width="0.8262%" height="15" fill="rgb(206,27,48)"/><text x="35.5643%" y="143.50"></text></g><g><title>specialization_graph_of (22,322,871 samples, 0.80%)</title><rect x="35.3401%" y="117" width="0.8005%" height="15" fill="rgb(225,35,8)"/><text x="35.5901%" y="127.50"></text></g><g><title>coherence_checking (23,944,989 samples, 0.86%)</title><rect x="35.3125%" y="149" width="0.8587%" height="15" fill="rgb(250,213,24)"/><text x="35.5625%" y="159.50"></text></g><g><title>associated_items (2,801,231 samples, 0.10%)</title><rect x="67.7527%" y="101" width="0.1005%" height="15" fill="rgb(247,123,22)"/><text x="68.0027%" y="111.50"></text></g><g><title>dropck_outlives (4,994,489 samples, 0.18%)</title><rect x="67.8731%" y="101" width="0.1791%" height="15" fill="rgb(231,138,38)"/><text x="68.1231%" y="111.50"></text></g><g><title>specializes (3,912,942 samples, 0.14%)</title><rect x="68.8718%" y="85" width="0.1403%" height="15" fill="rgb(231,145,46)"/><text x="69.1218%" y="95.50"></text></g><g><title>evaluate_obligation (27,567,830 samples, 0.99%)</title><rect x="68.0617%" y="101" width="0.9886%" height="15" fill="rgb(251,118,11)"/><text x="68.3117%" y="111.50"></text></g><g><title>evaluate_obligation (5,875,204 samples, 0.21%)</title><rect x="77.2660%" y="85" width="0.2107%" height="15" fill="rgb(217,147,25)"/><text x="77.5160%" y="95.50"></text></g><g><title>typeck (229,189,553 samples, 8.22%)</title><rect x="69.4370%" y="101" width="8.2187%" height="15" fill="rgb(247,81,37)"/><text x="69.6870%" y="111.50">typeck</text></g><g><title>item_bodies_checking (1,156,743,512 samples, 41.48%)</title><rect x="36.1989%" y="149" width="41.4808%" height="15" fill="rgb(209,12,38)"/><text x="36.4489%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,156,738,982 samples, 41.48%)</title><rect x="36.1990%" y="133" width="41.4806%" height="15" fill="rgb(227,1,9)"/><text x="36.4490%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,153,026,569 samples, 41.35%)</title><rect x="36.3322%" y="117" width="41.3475%" height="15" fill="rgb(248,47,43)"/><text x="36.5822%" y="127.50">typeck</text></g><g><title>item_types_checking (16,319,512 samples, 0.59%)</title><rect x="77.6797%" y="149" width="0.5852%" height="15" fill="rgb(221,10,30)"/><text x="77.9297%" y="159.50"></text></g><g><title>check_mod_item_types (16,294,541 samples, 0.58%)</title><rect x="77.6806%" y="133" width="0.5843%" height="15" fill="rgb(210,229,1)"/><text x="77.9306%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,996,215 samples, 0.14%)</title><rect x="78.4667%" y="117" width="0.1433%" height="15" fill="rgb(222,148,37)"/><text x="78.7167%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,970,135 samples, 0.14%)</title><rect x="78.4676%" y="101" width="0.1424%" height="15" fill="rgb(234,67,33)"/><text x="78.7176%" y="111.50"></text></g><g><title>eval_to_allocation_raw (3,937,784 samples, 0.14%)</title><rect x="78.4688%" y="85" width="0.1412%" height="15" fill="rgb(247,98,35)"/><text x="78.7188%" y="95.50"></text></g><g><title>fn_sig (4,582,526 samples, 0.16%)</title><rect x="78.6100%" y="117" width="0.1643%" height="15" fill="rgb(247,138,52)"/><text x="78.8600%" y="127.50"></text></g><g><title>is_late_bound_map (8,040,040 samples, 0.29%)</title><rect x="78.8409%" y="101" width="0.2883%" height="15" fill="rgb(213,79,30)"/><text x="79.0909%" y="111.50"></text></g><g><title>resolve_lifetimes (8,033,790 samples, 0.29%)</title><rect x="78.8411%" y="85" width="0.2881%" height="15" fill="rgb(246,177,23)"/><text x="79.0911%" y="95.50"></text></g><g><title>lint_levels (7,941,679 samples, 0.28%)</title><rect x="78.8444%" y="69" width="0.2848%" height="15" fill="rgb(230,62,27)"/><text x="79.0944%" y="79.50"></text></g><g><title>named_region_map (5,266,168 samples, 0.19%)</title><rect x="79.1292%" y="101" width="0.1888%" height="15" fill="rgb(216,154,8)"/><text x="79.3792%" y="111.50"></text></g><g><title>resolve_lifetimes (4,904,752 samples, 0.18%)</title><rect x="79.1422%" y="85" width="0.1759%" height="15" fill="rgb(244,35,45)"/><text x="79.3922%" y="95.50"></text></g><g><title>generics_of (15,411,095 samples, 0.55%)</title><rect x="78.7743%" y="117" width="0.5526%" height="15" fill="rgb(251,115,12)"/><text x="79.0243%" y="127.50"></text></g><g><title>explicit_predicates_of (2,844,042 samples, 0.10%)</title><rect x="79.4482%" y="85" width="0.1020%" height="15" fill="rgb(240,54,50)"/><text x="79.6982%" y="95.50"></text></g><g><title>predicates_of (7,605,237 samples, 0.27%)</title><rect x="79.3510%" y="117" width="0.2727%" height="15" fill="rgb(233,84,52)"/><text x="79.6010%" y="127.50"></text></g><g><title>predicates_defined_on (6,538,379 samples, 0.23%)</title><rect x="79.3893%" y="101" width="0.2345%" height="15" fill="rgb(207,117,47)"/><text x="79.6393%" y="111.50"></text></g><g><title>type_collecting (39,071,557 samples, 1.40%)</title><rect x="78.2655%" y="149" width="1.4011%" height="15" fill="rgb(249,43,39)"/><text x="78.5155%" y="159.50"></text></g><g><title>collect_mod_item_types (39,025,607 samples, 1.40%)</title><rect x="78.2672%" y="133" width="1.3995%" height="15" fill="rgb(209,38,44)"/><text x="78.5172%" y="143.50"></text></g><g><title>evaluate_obligation (3,739,583 samples, 0.13%)</title><rect x="80.6341%" y="117" width="0.1341%" height="15" fill="rgb(236,212,23)"/><text x="80.8841%" y="127.50"></text></g><g><title>param_env (4,315,980 samples, 0.15%)</title><rect x="80.8163%" y="117" width="0.1548%" height="15" fill="rgb(242,79,21)"/><text x="81.0663%" y="127.50"></text></g><g><title>region_scope_tree (10,766,136 samples, 0.39%)</title><rect x="80.9723%" y="117" width="0.3861%" height="15" fill="rgb(211,96,35)"/><text x="81.2223%" y="127.50"></text></g><g><title>check_impl_item_well_formed (43,333,770 samples, 1.55%)</title><rect x="79.8065%" y="133" width="1.5539%" height="15" fill="rgb(253,215,40)"/><text x="80.0565%" y="143.50"></text></g><g><title>evaluate_obligation (5,502,630 samples, 0.20%)</title><rect x="81.7817%" y="117" width="0.1973%" height="15" fill="rgb(211,81,21)"/><text x="82.0317%" y="127.50"></text></g><g><title>param_env (2,792,640 samples, 0.10%)</title><rect x="82.0229%" y="117" width="0.1001%" height="15" fill="rgb(208,190,38)"/><text x="82.2729%" y="127.50"></text></g><g><title>check_item_well_formed (23,711,786 samples, 0.85%)</title><rect x="81.3605%" y="133" width="0.8503%" height="15" fill="rgb(235,213,38)"/><text x="81.6105%" y="143.50"></text></g><g><title>analysis (2,289,935,131 samples, 82.12%)</title><rect x="0.3427%" y="181" width="82.1170%" height="15" fill="rgb(237,122,38)"/><text x="0.5927%" y="191.50">analysis</text></g><g><title>type_check_crate (1,316,164,026 samples, 47.20%)</title><rect x="35.2621%" y="165" width="47.1976%" height="15" fill="rgb(244,218,35)"/><text x="35.5121%" y="175.50">type_check_crate</text></g><g><title>wf_checking (77,720,050 samples, 2.79%)</title><rect x="79.6726%" y="149" width="2.7870%" height="15" fill="rgb(240,68,47)"/><text x="79.9226%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (6,941,055 samples, 0.25%)</title><rect x="82.2108%" y="133" width="0.2489%" height="15" fill="rgb(210,16,53)"/><text x="82.4608%" y="143.50"></text></g><g><title>AST_validation (4,791,333 samples, 0.17%)</title><rect x="82.4820%" y="165" width="0.1718%" height="15" fill="rgb(235,124,12)"/><text x="82.7320%" y="175.50"></text></g><g><title>complete_gated_feature_checking (4,075,676 samples, 0.15%)</title><rect x="82.6538%" y="165" width="0.1462%" height="15" fill="rgb(224,169,11)"/><text x="82.9038%" y="175.50"></text></g><g><title>macro_expand_crate (247,796,952 samples, 8.89%)</title><rect x="82.8017%" y="165" width="8.8860%" height="15" fill="rgb(250,166,2)"/><text x="83.0517%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (247,778,111 samples, 8.89%)</title><rect x="82.8024%" y="149" width="8.8853%" height="15" fill="rgb(242,216,29)"/><text x="83.0524%" y="159.50">expand_crate</text></g><g><title>finalize_macro_resolutions (4,083,675 samples, 0.15%)</title><rect x="91.7148%" y="149" width="0.1464%" height="15" fill="rgb(230,116,27)"/><text x="91.9648%" y="159.50"></text></g><g><title>late_resolve_crate (45,291,947 samples, 1.62%)</title><rect x="91.8612%" y="149" width="1.6242%" height="15" fill="rgb(228,99,48)"/><text x="92.1112%" y="159.50"></text></g><g><title>resolve_check_unused (3,432,359 samples, 0.12%)</title><rect x="93.4920%" y="149" width="0.1231%" height="15" fill="rgb(253,11,6)"/><text x="93.7420%" y="159.50"></text></g><g><title>resolve_postprocess (3,174,765 samples, 0.11%)</title><rect x="93.6151%" y="149" width="0.1138%" height="15" fill="rgb(247,143,39)"/><text x="93.8651%" y="159.50"></text></g><g><title>configure_and_expand (313,797,061 samples, 11.25%)</title><rect x="82.4763%" y="181" width="11.2528%" height="15" fill="rgb(236,97,10)"/><text x="82.7263%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (56,632,533 samples, 2.03%)</title><rect x="91.6982%" y="165" width="2.0308%" height="15" fill="rgb(233,208,19)"/><text x="91.9482%" y="175.50">r..</text></g><g><title>drop_ast (8,054,961 samples, 0.29%)</title><rect x="93.7290%" y="181" width="0.2889%" height="15" fill="rgb(216,164,2)"/><text x="93.9790%" y="191.50"></text></g><g><title>early_lint_checks (13,132,547 samples, 0.47%)</title><rect x="94.0188%" y="181" width="0.4709%" height="15" fill="rgb(220,129,5)"/><text x="94.2688%" y="191.50"></text></g><g><title>free_global_ctxt (21,879,836 samples, 0.78%)</title><rect x="94.4898%" y="181" width="0.7846%" height="15" fill="rgb(242,17,10)"/><text x="94.7398%" y="191.50"></text></g><g><title>mir_for_ctfe (8,588,057 samples, 0.31%)</title><rect x="95.9821%" y="165" width="0.3080%" height="15" fill="rgb(242,107,0)"/><text x="96.2321%" y="175.50"></text></g><g><title>generate_crate_metadata (29,346,948 samples, 1.05%)</title><rect x="95.2744%" y="181" width="1.0524%" height="15" fill="rgb(251,28,31)"/><text x="95.5244%" y="191.50"></text></g><g><title>hir_lowering (91,730,146 samples, 3.29%)</title><rect x="96.3268%" y="181" width="3.2894%" height="15" fill="rgb(233,223,10)"/><text x="96.5768%" y="191.50">hir..</text></g><g><title>parse_crate (4,289,488 samples, 0.15%)</title><rect x="99.6189%" y="181" width="0.1538%" height="15" fill="rgb(215,21,27)"/><text x="99.8689%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,234,477 samples, 0.15%)</title><rect x="99.7821%" y="181" width="0.1518%" height="15" fill="rgb(232,23,21)"/><text x="100.0321%" y="191.50"></text></g><g><title>all (2,788,624,631 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,788,624,631 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>