<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (76,821 samples, 0.14%)</title><rect x="6.3101%" y="229" width="0.1393%" height="15" fill="rgb(227,0,7)"/><text x="6.5601%" y="239.50"></text></g><g><title>param_env (113,851 samples, 0.21%)</title><rect x="7.0056%" y="197" width="0.2064%" height="15" fill="rgb(217,0,24)"/><text x="7.2556%" y="207.50"></text></g><g><title>item_attrs (68,880 samples, 0.12%)</title><rect x="7.4319%" y="165" width="0.1249%" height="15" fill="rgb(221,193,54)"/><text x="7.6819%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (65,630 samples, 0.12%)</title><rect x="7.4378%" y="149" width="0.1190%" height="15" fill="rgb(248,212,6)"/><text x="7.6878%" y="159.50"></text></g><g><title>codegen_fn_attrs (102,211 samples, 0.19%)</title><rect x="7.3783%" y="181" width="0.1853%" height="15" fill="rgb(208,68,35)"/><text x="7.6283%" y="191.50"></text></g><g><title>is_copy_raw (71,190 samples, 0.13%)</title><rect x="8.2943%" y="117" width="0.1291%" height="15" fill="rgb(232,128,0)"/><text x="8.5443%" y="127.50"></text></g><g><title>evaluate_obligation (63,310 samples, 0.11%)</title><rect x="8.3086%" y="101" width="0.1148%" height="15" fill="rgb(207,160,47)"/><text x="8.5586%" y="111.50"></text></g><g><title>adt_drop_tys (115,782 samples, 0.21%)</title><rect x="8.2637%" y="133" width="0.2099%" height="15" fill="rgb(228,23,34)"/><text x="8.5137%" y="143.50"></text></g><g><title>is_copy_raw (60,112 samples, 0.11%)</title><rect x="8.4751%" y="133" width="0.1090%" height="15" fill="rgb(218,30,26)"/><text x="8.7251%" y="143.50"></text></g><g><title>adt_drop_tys (291,924 samples, 0.53%)</title><rect x="8.2206%" y="149" width="0.5292%" height="15" fill="rgb(220,122,19)"/><text x="8.4706%" y="159.50"></text></g><g><title>param_env (91,400 samples, 0.17%)</title><rect x="8.5841%" y="133" width="0.1657%" height="15" fill="rgb(250,228,42)"/><text x="8.8341%" y="143.50"></text></g><g><title>explicit_predicates_of (62,051 samples, 0.11%)</title><rect x="8.9708%" y="85" width="0.1125%" height="15" fill="rgb(240,193,28)"/><text x="9.2208%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (61,721 samples, 0.11%)</title><rect x="8.9714%" y="69" width="0.1119%" height="15" fill="rgb(216,20,37)"/><text x="9.2214%" y="79.50"></text></g><g><title>is_copy_raw (184,702 samples, 0.33%)</title><rect x="8.7498%" y="149" width="0.3348%" height="15" fill="rgb(206,188,39)"/><text x="8.9998%" y="159.50"></text></g><g><title>evaluate_obligation (150,381 samples, 0.27%)</title><rect x="8.8120%" y="133" width="0.2726%" height="15" fill="rgb(217,207,13)"/><text x="9.0620%" y="143.50"></text></g><g><title>predicates_of (67,941 samples, 0.12%)</title><rect x="8.9615%" y="117" width="0.1232%" height="15" fill="rgb(231,73,38)"/><text x="9.2115%" y="127.50"></text></g><g><title>predicates_defined_on (64,791 samples, 0.12%)</title><rect x="8.9672%" y="101" width="0.1175%" height="15" fill="rgb(225,20,46)"/><text x="9.2172%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (146,901 samples, 0.27%)</title><rect x="9.0847%" y="149" width="0.2663%" height="15" fill="rgb(210,31,41)"/><text x="9.3347%" y="159.50"></text></g><g><title>normalize_projection_ty (141,691 samples, 0.26%)</title><rect x="9.0941%" y="133" width="0.2569%" height="15" fill="rgb(221,200,47)"/><text x="9.3441%" y="143.50"></text></g><g><title>needs_drop_raw (669,548 samples, 1.21%)</title><rect x="8.1383%" y="165" width="1.2138%" height="15" fill="rgb(226,26,5)"/><text x="8.3883%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (95,244 samples, 0.17%)</title><rect x="9.4623%" y="149" width="0.1727%" height="15" fill="rgb(249,33,26)"/><text x="9.7123%" y="159.50"></text></g><g><title>impl_parent (210,242 samples, 0.38%)</title><rect x="10.1357%" y="133" width="0.3811%" height="15" fill="rgb(235,183,28)"/><text x="10.3857%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (153,052 samples, 0.28%)</title><rect x="10.2394%" y="117" width="0.2775%" height="15" fill="rgb(221,5,38)"/><text x="10.4894%" y="127.50"></text></g><g><title>specialization_graph_of (1,063,871 samples, 1.93%)</title><rect x="9.6824%" y="149" width="1.9287%" height="15" fill="rgb(247,18,42)"/><text x="9.9324%" y="159.50">s..</text></g><g><title>impl_trait_ref (603,558 samples, 1.09%)</title><rect x="10.5169%" y="133" width="1.0942%" height="15" fill="rgb(241,131,45)"/><text x="10.7669%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (540,777 samples, 0.98%)</title><rect x="10.6307%" y="117" width="0.9804%" height="15" fill="rgb(249,31,29)"/><text x="10.8807%" y="127.50"></text></g><g><title>resolve_instance (1,270,495 samples, 2.30%)</title><rect x="9.3521%" y="165" width="2.3033%" height="15" fill="rgb(225,111,53)"/><text x="9.6021%" y="175.50">r..</text></g><g><title>thir_body (114,262 samples, 0.21%)</title><rect x="11.6646%" y="165" width="0.2071%" height="15" fill="rgb(238,160,17)"/><text x="11.9146%" y="175.50"></text></g><g><title>mir_const (2,860,584 samples, 5.19%)</title><rect x="6.7026%" y="213" width="5.1859%" height="15" fill="rgb(214,148,48)"/><text x="6.9526%" y="223.50">mir_co..</text></g><g><title>unsafety_check_result (2,579,591 samples, 4.68%)</title><rect x="7.2120%" y="197" width="4.6765%" height="15" fill="rgb(232,36,49)"/><text x="7.4620%" y="207.50">unsaf..</text></g><g><title>mir_built (2,385,649 samples, 4.32%)</title><rect x="7.5636%" y="181" width="4.3249%" height="15" fill="rgb(209,103,24)"/><text x="7.8136%" y="191.50">mir_b..</text></g><g><title>mir_promoted (3,003,715 samples, 5.45%)</title><rect x="6.4595%" y="229" width="5.4454%" height="15" fill="rgb(229,88,8)"/><text x="6.7095%" y="239.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (176,503 samples, 0.32%)</title><rect x="11.9049%" y="229" width="0.3200%" height="15" fill="rgb(213,181,19)"/><text x="12.1549%" y="239.50"></text></g><g><title>type_op_normalize_predicate (216,210 samples, 0.39%)</title><rect x="12.2249%" y="229" width="0.3920%" height="15" fill="rgb(254,191,54)"/><text x="12.4749%" y="239.50"></text></g><g><title>normalize_projection_ty (74,470 samples, 0.14%)</title><rect x="12.4818%" y="213" width="0.1350%" height="15" fill="rgb(241,83,37)"/><text x="12.7318%" y="223.50"></text></g><g><title>type_op_prove_predicate (2,037,374 samples, 3.69%)</title><rect x="12.6168%" y="229" width="3.6935%" height="15" fill="rgb(233,36,39)"/><text x="12.8668%" y="239.50">type..</text></g><g><title>MIR_borrow_checking (8,191,632 samples, 14.85%)</title><rect x="1.4775%" y="261" width="14.8506%" height="15" fill="rgb(226,3,54)"/><text x="1.7275%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,174,952 samples, 14.82%)</title><rect x="1.5077%" y="245" width="14.8203%" height="15" fill="rgb(245,192,40)"/><text x="1.7577%" y="255.50">mir_borrowck</text></g><g><title>hir_module_items (122,402 samples, 0.22%)</title><rect x="16.3357%" y="261" width="0.2219%" height="15" fill="rgb(238,167,29)"/><text x="16.5857%" y="271.50"></text></g><g><title>get_lang_items (73,521 samples, 0.13%)</title><rect x="16.9155%" y="213" width="0.1333%" height="15" fill="rgb(232,182,51)"/><text x="17.1655%" y="223.50"></text></g><g><title>codegen_fn_attrs (63,010 samples, 0.11%)</title><rect x="17.1558%" y="197" width="0.1142%" height="15" fill="rgb(231,60,39)"/><text x="17.4058%" y="207.50"></text></g><g><title>should_inherit_track_caller (126,021 samples, 0.23%)</title><rect x="17.0488%" y="213" width="0.2285%" height="15" fill="rgb(208,69,12)"/><text x="17.2988%" y="223.50"></text></g><g><title>codegen_fn_attrs (312,444 samples, 0.57%)</title><rect x="16.7664%" y="229" width="0.5664%" height="15" fill="rgb(235,93,37)"/><text x="17.0164%" y="239.50"></text></g><g><title>check_mod_attrs (400,314 samples, 0.73%)</title><rect x="16.6075%" y="245" width="0.7257%" height="15" fill="rgb(213,116,39)"/><text x="16.8575%" y="255.50"></text></g><g><title>lookup_stability (76,721 samples, 0.14%)</title><rect x="17.6772%" y="229" width="0.1391%" height="15" fill="rgb(222,207,29)"/><text x="17.9272%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (203,113 samples, 0.37%)</title><rect x="17.4757%" y="245" width="0.3682%" height="15" fill="rgb(206,96,30)"/><text x="17.7257%" y="255.50"></text></g><g><title>misc_checking_1 (756,808 samples, 1.37%)</title><rect x="16.5584%" y="261" width="1.3720%" height="15" fill="rgb(218,138,4)"/><text x="16.8084%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (113,031 samples, 0.20%)</title><rect x="17.9326%" y="245" width="0.2049%" height="15" fill="rgb(250,191,14)"/><text x="18.1826%" y="255.50"></text></g><g><title>check_mod_liveness (95,761 samples, 0.17%)</title><rect x="17.9639%" y="229" width="0.1736%" height="15" fill="rgb(239,60,40)"/><text x="18.2139%" y="239.50"></text></g><g><title>misc_checking_2 (220,482 samples, 0.40%)</title><rect x="17.9304%" y="261" width="0.3997%" height="15" fill="rgb(206,27,48)"/><text x="18.1804%" y="271.50"></text></g><g><title>match_checking (106,241 samples, 0.19%)</title><rect x="18.1375%" y="245" width="0.1926%" height="15" fill="rgb(225,35,8)"/><text x="18.3875%" y="255.50"></text></g><g><title>check_match (100,981 samples, 0.18%)</title><rect x="18.1470%" y="229" width="0.1831%" height="15" fill="rgb(250,213,24)"/><text x="18.3970%" y="239.50"></text></g><g><title>trait_impls_of (209,542 samples, 0.38%)</title><rect x="19.2520%" y="213" width="0.3799%" height="15" fill="rgb(247,123,22)"/><text x="19.5020%" y="223.50"></text></g><g><title>crate_lints (3,080,264 samples, 5.58%)</title><rect x="18.5030%" y="229" width="5.5842%" height="15" fill="rgb(231,138,38)"/><text x="18.7530%" y="239.50">crate_l..</text></g><g><title>type_of (2,455,031 samples, 4.45%)</title><rect x="19.6364%" y="213" width="4.4507%" height="15" fill="rgb(231,145,46)"/><text x="19.8864%" y="223.50">type_..</text></g><g><title>metadata_decode_entry_type_of (2,196,149 samples, 3.98%)</title><rect x="20.1058%" y="197" width="3.9814%" height="15" fill="rgb(251,118,11)"/><text x="20.3558%" y="207.50">meta..</text></g><g><title>lint_checking (3,188,456 samples, 5.78%)</title><rect x="18.5001%" y="245" width="5.7803%" height="15" fill="rgb(217,147,25)"/><text x="18.7501%" y="255.50">lint_ch..</text></g><g><title>module_lints (106,641 samples, 0.19%)</title><rect x="24.0872%" y="229" width="0.1933%" height="15" fill="rgb(247,81,37)"/><text x="24.3372%" y="239.50"></text></g><g><title>lint_mod (104,501 samples, 0.19%)</title><rect x="24.0910%" y="213" width="0.1894%" height="15" fill="rgb(209,12,38)"/><text x="24.3410%" y="223.50"></text></g><g><title>privacy_checking_modules (194,262 samples, 0.35%)</title><rect x="24.3614%" y="245" width="0.3522%" height="15" fill="rgb(227,1,9)"/><text x="24.6114%" y="255.50"></text></g><g><title>check_mod_privacy (192,632 samples, 0.35%)</title><rect x="24.3644%" y="229" width="0.3492%" height="15" fill="rgb(248,47,43)"/><text x="24.6144%" y="239.50"></text></g><g><title>misc_checking_3 (3,529,729 samples, 6.40%)</title><rect x="18.3301%" y="261" width="6.3990%" height="15" fill="rgb(221,10,30)"/><text x="18.5801%" y="271.50">misc_che..</text></g><g><title>impl_parent (307,793 samples, 0.56%)</title><rect x="25.4960%" y="197" width="0.5580%" height="15" fill="rgb(210,229,1)"/><text x="25.7460%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (228,473 samples, 0.41%)</title><rect x="25.6398%" y="181" width="0.4142%" height="15" fill="rgb(222,148,37)"/><text x="25.8898%" y="191.50"></text></g><g><title>impl_trait_ref (927,521 samples, 1.68%)</title><rect x="26.0539%" y="197" width="1.6815%" height="15" fill="rgb(234,67,33)"/><text x="26.3039%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (840,829 samples, 1.52%)</title><rect x="26.2111%" y="181" width="1.5243%" height="15" fill="rgb(247,98,35)"/><text x="26.4611%" y="191.50"></text></g><g><title>coherent_trait (1,732,310 samples, 3.14%)</title><rect x="24.8216%" y="229" width="3.1405%" height="15" fill="rgb(247,138,52)"/><text x="25.0716%" y="239.50">coh..</text></g><g><title>specialization_graph_of (1,721,210 samples, 3.12%)</title><rect x="24.8418%" y="213" width="3.1204%" height="15" fill="rgb(213,79,30)"/><text x="25.0918%" y="223.50">spe..</text></g><g><title>trait_impls_of (125,041 samples, 0.23%)</title><rect x="27.7354%" y="197" width="0.2267%" height="15" fill="rgb(246,177,23)"/><text x="27.9854%" y="207.50"></text></g><g><title>coherence_checking (1,793,370 samples, 3.25%)</title><rect x="24.7860%" y="245" width="3.2512%" height="15" fill="rgb(230,62,27)"/><text x="25.0360%" y="255.50">coh..</text></g><g><title>impl_wf_inference (73,671 samples, 0.13%)</title><rect x="28.0372%" y="245" width="0.1336%" height="15" fill="rgb(216,154,8)"/><text x="28.2872%" y="255.50"></text></g><g><title>check_mod_impl_wf (69,451 samples, 0.13%)</title><rect x="28.0448%" y="229" width="0.1259%" height="15" fill="rgb(244,35,45)"/><text x="28.2948%" y="239.50"></text></g><g><title>adt_def (160,791 samples, 0.29%)</title><rect x="29.7823%" y="133" width="0.2915%" height="15" fill="rgb(251,115,12)"/><text x="30.0323%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (160,061 samples, 0.29%)</title><rect x="29.7836%" y="117" width="0.2902%" height="15" fill="rgb(240,54,50)"/><text x="30.0336%" y="127.50"></text></g><g><title>item_attrs (152,481 samples, 0.28%)</title><rect x="29.7973%" y="101" width="0.2764%" height="15" fill="rgb(233,84,52)"/><text x="30.0473%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (151,491 samples, 0.27%)</title><rect x="29.7991%" y="85" width="0.2746%" height="15" fill="rgb(207,117,47)"/><text x="30.0491%" y="95.50"></text></g><g><title>adt_def (76,041 samples, 0.14%)</title><rect x="30.2750%" y="85" width="0.1379%" height="15" fill="rgb(249,43,39)"/><text x="30.5250%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (75,481 samples, 0.14%)</title><rect x="30.2760%" y="69" width="0.1368%" height="15" fill="rgb(209,38,44)"/><text x="30.5260%" y="79.50"></text></g><g><title>item_attrs (72,011 samples, 0.13%)</title><rect x="30.2823%" y="53" width="0.1305%" height="15" fill="rgb(236,212,23)"/><text x="30.5323%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (71,361 samples, 0.13%)</title><rect x="30.2835%" y="37" width="0.1294%" height="15" fill="rgb(242,79,21)"/><text x="30.5335%" y="47.50"></text></g><g><title>adt_dtorck_constraint (85,691 samples, 0.16%)</title><rect x="30.2650%" y="101" width="0.1553%" height="15" fill="rgb(211,96,35)"/><text x="30.5150%" y="111.50"></text></g><g><title>adt_dtorck_constraint (135,151 samples, 0.25%)</title><rect x="30.1775%" y="117" width="0.2450%" height="15" fill="rgb(253,215,40)"/><text x="30.4275%" y="127.50"></text></g><g><title>adt_dtorck_constraint (192,172 samples, 0.35%)</title><rect x="30.0897%" y="133" width="0.3484%" height="15" fill="rgb(211,81,21)"/><text x="30.3397%" y="143.50"></text></g><g><title>adt_dtorck_constraint (380,764 samples, 0.69%)</title><rect x="29.7613%" y="149" width="0.6903%" height="15" fill="rgb(208,190,38)"/><text x="30.0113%" y="159.50"></text></g><g><title>adt_dtorck_constraint (392,564 samples, 0.71%)</title><rect x="29.7448%" y="165" width="0.7117%" height="15" fill="rgb(235,213,38)"/><text x="29.9948%" y="175.50"></text></g><g><title>dropck_outlives (501,676 samples, 0.91%)</title><rect x="29.5637%" y="197" width="0.9095%" height="15" fill="rgb(237,122,38)"/><text x="29.8137%" y="207.50"></text></g><g><title>adt_dtorck_constraint (442,564 samples, 0.80%)</title><rect x="29.6709%" y="181" width="0.8023%" height="15" fill="rgb(244,218,35)"/><text x="29.9209%" y="191.50"></text></g><g><title>evaluate_obligation (106,591 samples, 0.19%)</title><rect x="30.4732%" y="197" width="0.1932%" height="15" fill="rgb(240,68,47)"/><text x="30.7232%" y="207.50"></text></g><g><title>trait_impls_of (55,421 samples, 0.10%)</title><rect x="30.8024%" y="197" width="0.1005%" height="15" fill="rgb(210,16,53)"/><text x="31.0524%" y="207.50"></text></g><g><title>adt_def (69,570 samples, 0.13%)</title><rect x="40.9565%" y="165" width="0.1261%" height="15" fill="rgb(235,124,12)"/><text x="41.2065%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (67,240 samples, 0.12%)</title><rect x="40.9607%" y="149" width="0.1219%" height="15" fill="rgb(224,169,11)"/><text x="41.2107%" y="159.50"></text></g><g><title>adt_sized_constraint (148,611 samples, 0.27%)</title><rect x="40.9364%" y="181" width="0.2694%" height="15" fill="rgb(250,166,2)"/><text x="41.1864%" y="191.50"></text></g><g><title>associated_item (525,704 samples, 0.95%)</title><rect x="41.6554%" y="165" width="0.9530%" height="15" fill="rgb(242,216,29)"/><text x="41.9054%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (375,533 samples, 0.68%)</title><rect x="41.9276%" y="149" width="0.6808%" height="15" fill="rgb(230,116,27)"/><text x="42.1776%" y="159.50"></text></g><g><title>associated_items (800,698 samples, 1.45%)</title><rect x="41.2145%" y="181" width="1.4516%" height="15" fill="rgb(228,99,48)"/><text x="41.4645%" y="191.50"></text></g><g><title>adt_dtorck_constraint (64,510 samples, 0.12%)</title><rect x="42.9205%" y="149" width="0.1169%" height="15" fill="rgb(253,11,6)"/><text x="43.1705%" y="159.50"></text></g><g><title>adt_dtorck_constraint (96,941 samples, 0.18%)</title><rect x="42.8733%" y="165" width="0.1757%" height="15" fill="rgb(247,143,39)"/><text x="43.1233%" y="175.50"></text></g><g><title>dropck_outlives (324,014 samples, 0.59%)</title><rect x="42.7220%" y="181" width="0.5874%" height="15" fill="rgb(236,97,10)"/><text x="42.9720%" y="191.50"></text></g><g><title>normalize_projection_ty (143,602 samples, 0.26%)</title><rect x="43.0490%" y="165" width="0.2603%" height="15" fill="rgb(233,208,19)"/><text x="43.2990%" y="175.50"></text></g><g><title>adt_def (83,560 samples, 0.15%)</title><rect x="44.7741%" y="149" width="0.1515%" height="15" fill="rgb(216,164,2)"/><text x="45.0241%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (82,370 samples, 0.15%)</title><rect x="44.7762%" y="133" width="0.1493%" height="15" fill="rgb(220,129,5)"/><text x="45.0262%" y="143.50"></text></g><g><title>item_attrs (70,320 samples, 0.13%)</title><rect x="44.7981%" y="117" width="0.1275%" height="15" fill="rgb(242,17,10)"/><text x="45.0481%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (69,140 samples, 0.13%)</title><rect x="44.8002%" y="101" width="0.1253%" height="15" fill="rgb(242,107,0)"/><text x="45.0502%" y="111.50"></text></g><g><title>adt_sized_constraint (96,781 samples, 0.18%)</title><rect x="44.7613%" y="165" width="0.1755%" height="15" fill="rgb(251,28,31)"/><text x="45.0113%" y="175.50"></text></g><g><title>predicates_of (86,431 samples, 0.16%)</title><rect x="45.0793%" y="165" width="0.1567%" height="15" fill="rgb(233,223,10)"/><text x="45.3293%" y="175.50"></text></g><g><title>predicates_defined_on (57,431 samples, 0.10%)</title><rect x="45.1318%" y="149" width="0.1041%" height="15" fill="rgb(215,21,27)"/><text x="45.3818%" y="159.50"></text></g><g><title>evaluate_obligation (1,783,808 samples, 3.23%)</title><rect x="43.3094%" y="181" width="3.2339%" height="15" fill="rgb(232,23,21)"/><text x="43.5594%" y="191.50">eva..</text></g><g><title>trait_impls_of (712,998 samples, 1.29%)</title><rect x="45.2506%" y="165" width="1.2926%" height="15" fill="rgb(244,5,23)"/><text x="45.5006%" y="175.50"></text></g><g><title>implementations_of_trait (199,363 samples, 0.36%)</title><rect x="46.1818%" y="149" width="0.3614%" height="15" fill="rgb(226,81,46)"/><text x="46.4318%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (134,002 samples, 0.24%)</title><rect x="46.3003%" y="133" width="0.2429%" height="15" fill="rgb(247,70,30)"/><text x="46.5503%" y="143.50"></text></g><g><title>fn_sig (60,420 samples, 0.11%)</title><rect x="46.5711%" y="181" width="0.1095%" height="15" fill="rgb(212,68,19)"/><text x="46.8211%" y="191.50"></text></g><g><title>impl_item_implementor_ids (69,470 samples, 0.13%)</title><rect x="46.7677%" y="181" width="0.1259%" height="15" fill="rgb(240,187,13)"/><text x="47.0177%" y="191.50"></text></g><g><title>associated_items (58,080 samples, 0.11%)</title><rect x="46.7884%" y="165" width="0.1053%" height="15" fill="rgb(223,113,26)"/><text x="47.0384%" y="175.50"></text></g><g><title>evaluate_obligation (280,253 samples, 0.51%)</title><rect x="47.7560%" y="165" width="0.5081%" height="15" fill="rgb(206,192,2)"/><text x="48.0060%" y="175.50"></text></g><g><title>method_autoderef_steps (566,816 samples, 1.03%)</title><rect x="47.2835%" y="181" width="1.0276%" height="15" fill="rgb(241,108,4)"/><text x="47.5335%" y="191.50"></text></g><g><title>evaluate_obligation (155,651 samples, 0.28%)</title><rect x="49.1286%" y="165" width="0.2822%" height="15" fill="rgb(247,173,49)"/><text x="49.3786%" y="175.50"></text></g><g><title>layout_of (136,272 samples, 0.25%)</title><rect x="49.5314%" y="165" width="0.2470%" height="15" fill="rgb(224,114,35)"/><text x="49.7814%" y="175.50"></text></g><g><title>param_env (80,301 samples, 0.15%)</title><rect x="49.7784%" y="165" width="0.1456%" height="15" fill="rgb(245,159,27)"/><text x="50.0284%" y="175.50"></text></g><g><title>explicit_predicates_of (261,355 samples, 0.47%)</title><rect x="50.3657%" y="133" width="0.4738%" height="15" fill="rgb(245,172,44)"/><text x="50.6157%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (232,465 samples, 0.42%)</title><rect x="50.4180%" y="117" width="0.4214%" height="15" fill="rgb(236,23,11)"/><text x="50.6680%" y="127.50"></text></g><g><title>predicates_of (554,918 samples, 1.01%)</title><rect x="49.9240%" y="165" width="1.0060%" height="15" fill="rgb(205,117,38)"/><text x="50.1740%" y="175.50"></text></g><g><title>predicates_defined_on (409,668 samples, 0.74%)</title><rect x="50.1873%" y="149" width="0.7427%" height="15" fill="rgb(237,72,25)"/><text x="50.4373%" y="159.50"></text></g><g><title>object_safety_violations (1,469,635 samples, 2.66%)</title><rect x="48.3111%" y="181" width="2.6643%" height="15" fill="rgb(244,70,9)"/><text x="48.5611%" y="191.50">ob..</text></g><g><title>explicit_predicates_of (112,031 samples, 0.20%)</title><rect x="51.2349%" y="149" width="0.2031%" height="15" fill="rgb(217,125,39)"/><text x="51.4849%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (96,231 samples, 0.17%)</title><rect x="51.2635%" y="133" width="0.1745%" height="15" fill="rgb(235,36,10)"/><text x="51.5135%" y="143.50"></text></g><g><title>predicates_of (253,064 samples, 0.46%)</title><rect x="51.0290%" y="181" width="0.4588%" height="15" fill="rgb(251,123,47)"/><text x="51.2790%" y="191.50"></text></g><g><title>predicates_defined_on (185,472 samples, 0.34%)</title><rect x="51.1515%" y="165" width="0.3362%" height="15" fill="rgb(221,13,13)"/><text x="51.4015%" y="175.50"></text></g><g><title>type_of (60,930 samples, 0.11%)</title><rect x="51.5776%" y="181" width="0.1105%" height="15" fill="rgb(238,131,9)"/><text x="51.8276%" y="191.50"></text></g><g><title>typeck (11,479,877 samples, 20.81%)</title><rect x="30.9580%" y="197" width="20.8118%" height="15" fill="rgb(211,50,8)"/><text x="31.2080%" y="207.50">typeck</text></g><g><title>item_bodies_checking (13,032,825 samples, 23.63%)</title><rect x="28.1707%" y="245" width="23.6271%" height="15" fill="rgb(245,182,24)"/><text x="28.4207%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,029,405 samples, 23.62%)</title><rect x="28.1769%" y="229" width="23.6209%" height="15" fill="rgb(242,14,37)"/><text x="28.4269%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (13,017,575 samples, 23.60%)</title><rect x="28.1984%" y="213" width="23.5995%" height="15" fill="rgb(246,228,12)"/><text x="28.4484%" y="223.50">typeck</text></g><g><title>impl_parent (127,162 samples, 0.23%)</title><rect x="52.6747%" y="165" width="0.2305%" height="15" fill="rgb(213,55,15)"/><text x="52.9247%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (80,601 samples, 0.15%)</title><rect x="52.7591%" y="149" width="0.1461%" height="15" fill="rgb(209,9,3)"/><text x="53.0091%" y="159.50"></text></g><g><title>impl_trait_ref (477,876 samples, 0.87%)</title><rect x="52.9052%" y="165" width="0.8663%" height="15" fill="rgb(230,59,30)"/><text x="53.1552%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (427,765 samples, 0.78%)</title><rect x="52.9961%" y="149" width="0.7755%" height="15" fill="rgb(209,121,21)"/><text x="53.2461%" y="159.50"></text></g><g><title>adt_destructor (917,190 samples, 1.66%)</title><rect x="52.2465%" y="213" width="1.6628%" height="15" fill="rgb(220,109,13)"/><text x="52.4965%" y="223.50"></text></g><g><title>coherent_trait (912,160 samples, 1.65%)</title><rect x="52.2556%" y="197" width="1.6537%" height="15" fill="rgb(232,18,1)"/><text x="52.5056%" y="207.50"></text></g><g><title>specialization_graph_of (908,610 samples, 1.65%)</title><rect x="52.2620%" y="181" width="1.6472%" height="15" fill="rgb(215,41,42)"/><text x="52.5120%" y="191.50"></text></g><g><title>trait_impls_of (75,941 samples, 0.14%)</title><rect x="53.7716%" y="165" width="0.1377%" height="15" fill="rgb(224,123,36)"/><text x="54.0216%" y="175.50"></text></g><g><title>item_types_checking (1,216,903 samples, 2.21%)</title><rect x="51.7979%" y="245" width="2.2061%" height="15" fill="rgb(240,125,3)"/><text x="52.0479%" y="255.50">i..</text></g><g><title>check_mod_item_types (1,212,473 samples, 2.20%)</title><rect x="51.8059%" y="229" width="2.1981%" height="15" fill="rgb(205,98,50)"/><text x="52.0559%" y="239.50">c..</text></g><g><title>fn_sig (81,262 samples, 0.15%)</title><rect x="54.2412%" y="213" width="0.1473%" height="15" fill="rgb(205,185,37)"/><text x="54.4912%" y="223.50"></text></g><g><title>is_late_bound_map (150,772 samples, 0.27%)</title><rect x="54.5361%" y="197" width="0.2733%" height="15" fill="rgb(238,207,15)"/><text x="54.7861%" y="207.50"></text></g><g><title>resolve_lifetimes (137,642 samples, 0.25%)</title><rect x="54.5599%" y="181" width="0.2495%" height="15" fill="rgb(213,199,42)"/><text x="54.8099%" y="191.50"></text></g><g><title>named_region_map (95,541 samples, 0.17%)</title><rect x="54.8094%" y="197" width="0.1732%" height="15" fill="rgb(235,201,11)"/><text x="55.0594%" y="207.50"></text></g><g><title>resolve_lifetimes (87,431 samples, 0.16%)</title><rect x="54.8241%" y="181" width="0.1585%" height="15" fill="rgb(207,46,11)"/><text x="55.0741%" y="191.50"></text></g><g><title>generics_of (340,073 samples, 0.62%)</title><rect x="54.3885%" y="213" width="0.6165%" height="15" fill="rgb(241,35,35)"/><text x="54.6385%" y="223.50"></text></g><g><title>explicit_predicates_of (83,392 samples, 0.15%)</title><rect x="55.0890%" y="181" width="0.1512%" height="15" fill="rgb(243,32,47)"/><text x="55.3390%" y="191.50"></text></g><g><title>predicates_of (233,313 samples, 0.42%)</title><rect x="55.0197%" y="213" width="0.4230%" height="15" fill="rgb(247,202,23)"/><text x="55.2697%" y="223.50"></text></g><g><title>predicates_defined_on (217,393 samples, 0.39%)</title><rect x="55.0486%" y="197" width="0.3941%" height="15" fill="rgb(219,102,11)"/><text x="55.2986%" y="207.50"></text></g><g><title>inferred_outlives_of (111,731 samples, 0.20%)</title><rect x="55.2402%" y="181" width="0.2026%" height="15" fill="rgb(243,110,44)"/><text x="55.4902%" y="191.50"></text></g><g><title>inferred_outlives_crate (94,761 samples, 0.17%)</title><rect x="55.2709%" y="165" width="0.1718%" height="15" fill="rgb(222,74,54)"/><text x="55.5209%" y="175.50"></text></g><g><title>super_predicates_of (58,971 samples, 0.11%)</title><rect x="55.4427%" y="213" width="0.1069%" height="15" fill="rgb(216,99,12)"/><text x="55.6927%" y="223.50"></text></g><g><title>type_collecting (1,283,605 samples, 2.33%)</title><rect x="54.0055%" y="245" width="2.3270%" height="15" fill="rgb(226,22,26)"/><text x="54.2555%" y="255.50">t..</text></g><g><title>collect_mod_item_types (1,266,594 samples, 2.30%)</title><rect x="54.0363%" y="229" width="2.2962%" height="15" fill="rgb(217,163,10)"/><text x="54.2863%" y="239.50">c..</text></g><g><title>type_of (429,195 samples, 0.78%)</title><rect x="55.5545%" y="213" width="0.7781%" height="15" fill="rgb(213,25,53)"/><text x="55.8045%" y="223.50"></text></g><g><title>evaluate_obligation (160,582 samples, 0.29%)</title><rect x="56.7954%" y="213" width="0.2911%" height="15" fill="rgb(252,105,26)"/><text x="57.0454%" y="223.50"></text></g><g><title>implied_outlives_bounds (68,871 samples, 0.12%)</title><rect x="57.0866%" y="213" width="0.1249%" height="15" fill="rgb(220,39,43)"/><text x="57.3366%" y="223.50"></text></g><g><title>predicates_of (67,481 samples, 0.12%)</title><rect x="57.2499%" y="213" width="0.1223%" height="15" fill="rgb(229,68,48)"/><text x="57.4999%" y="223.50"></text></g><g><title>predicates_defined_on (59,580 samples, 0.11%)</title><rect x="57.2642%" y="197" width="0.1080%" height="15" fill="rgb(252,8,32)"/><text x="57.5142%" y="207.50"></text></g><g><title>check_impl_item_well_formed (550,685 samples, 1.00%)</title><rect x="56.4160%" y="229" width="0.9983%" height="15" fill="rgb(223,20,43)"/><text x="56.6660%" y="239.50"></text></g><g><title>adt_sized_constraint (64,862 samples, 0.12%)</title><rect x="58.6907%" y="197" width="0.1176%" height="15" fill="rgb(229,81,49)"/><text x="58.9407%" y="207.50"></text></g><g><title>evaluate_obligation (347,693 samples, 0.63%)</title><rect x="58.3361%" y="213" width="0.6303%" height="15" fill="rgb(236,28,36)"/><text x="58.5861%" y="223.50"></text></g><g><title>evaluate_obligation (137,862 samples, 0.25%)</title><rect x="59.2121%" y="197" width="0.2499%" height="15" fill="rgb(249,185,26)"/><text x="59.4621%" y="207.50"></text></g><g><title>layout_of (62,780 samples, 0.11%)</title><rect x="59.5104%" y="197" width="0.1138%" height="15" fill="rgb(249,174,33)"/><text x="59.7604%" y="207.50"></text></g><g><title>object_safety_violations (344,254 samples, 0.62%)</title><rect x="59.0634%" y="213" width="0.6241%" height="15" fill="rgb(233,201,37)"/><text x="59.3134%" y="223.50"></text></g><g><title>param_env (173,912 samples, 0.32%)</title><rect x="59.6875%" y="213" width="0.3153%" height="15" fill="rgb(221,78,26)"/><text x="59.9375%" y="223.50"></text></g><g><title>check_item_well_formed (1,553,288 samples, 2.82%)</title><rect x="57.4144%" y="229" width="2.8159%" height="15" fill="rgb(250,127,30)"/><text x="57.6644%" y="239.50">ch..</text></g><g><title>variances_of (68,411 samples, 0.12%)</title><rect x="60.1063%" y="213" width="0.1240%" height="15" fill="rgb(230,49,44)"/><text x="60.3563%" y="223.50"></text></g><g><title>crate_variances (63,201 samples, 0.11%)</title><rect x="60.1157%" y="197" width="0.1146%" height="15" fill="rgb(229,67,23)"/><text x="60.3657%" y="207.50"></text></g><g><title>evaluate_obligation (226,612 samples, 0.41%)</title><rect x="60.5853%" y="213" width="0.4108%" height="15" fill="rgb(249,83,47)"/><text x="60.8353%" y="223.50"></text></g><g><title>implied_outlives_bounds (66,700 samples, 0.12%)</title><rect x="60.9961%" y="213" width="0.1209%" height="15" fill="rgb(215,43,3)"/><text x="61.2461%" y="223.50"></text></g><g><title>analysis (33,078,529 samples, 59.97%)</title><rect x="1.1748%" y="277" width="59.9679%" height="15" fill="rgb(238,154,13)"/><text x="1.4248%" y="287.50">analysis</text></g><g><title>type_check_crate (20,085,884 samples, 36.41%)</title><rect x="24.7291%" y="261" width="36.4136%" height="15" fill="rgb(219,56,2)"/><text x="24.9791%" y="271.50">type_check_crate</text></g><g><title>wf_checking (2,652,470 samples, 4.81%)</title><rect x="56.3341%" y="245" width="4.8087%" height="15" fill="rgb(233,0,4)"/><text x="56.5841%" y="255.50">wf_che..</text></g><g><title>check_trait_item_well_formed (503,286 samples, 0.91%)</title><rect x="60.2303%" y="229" width="0.9124%" height="15" fill="rgb(235,30,7)"/><text x="60.4803%" y="239.50"></text></g><g><title>native_libraries (218,073 samples, 0.40%)</title><rect x="61.8144%" y="261" width="0.3953%" height="15" fill="rgb(250,79,13)"/><text x="62.0644%" y="271.50"></text></g><g><title>codegen_crate (592,947 samples, 1.07%)</title><rect x="61.1662%" y="277" width="1.0750%" height="15" fill="rgb(211,146,34)"/><text x="61.4162%" y="287.50"></text></g><g><title>AST_validation (87,661 samples, 0.16%)</title><rect x="62.6348%" y="261" width="0.1589%" height="15" fill="rgb(228,22,38)"/><text x="62.8848%" y="271.50"></text></g><g><title>crate_injection (100,861 samples, 0.18%)</title><rect x="62.8519%" y="261" width="0.1829%" height="15" fill="rgb(235,168,5)"/><text x="63.1019%" y="271.50"></text></g><g><title>metadata_load_macro (118,051 samples, 0.21%)</title><rect x="79.9465%" y="229" width="0.2140%" height="15" fill="rgb(221,155,16)"/><text x="80.1965%" y="239.50"></text></g><g><title>macro_expand_crate (12,126,646 samples, 21.98%)</title><rect x="63.0348%" y="261" width="21.9843%" height="15" fill="rgb(215,215,53)"/><text x="63.2848%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (12,101,636 samples, 21.94%)</title><rect x="63.0801%" y="245" width="21.9390%" height="15" fill="rgb(223,4,10)"/><text x="63.3301%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,680,050 samples, 4.86%)</title><rect x="80.1605%" y="229" width="4.8586%" height="15" fill="rgb(234,103,6)"/><text x="80.4105%" y="239.50">metada..</text></g><g><title>metadata_register_crate (938,282 samples, 1.70%)</title><rect x="83.3181%" y="213" width="1.7010%" height="15" fill="rgb(227,97,0)"/><text x="83.5681%" y="223.50"></text></g><g><title>metadata_register_crate (77,511 samples, 0.14%)</title><rect x="84.8786%" y="197" width="0.1405%" height="15" fill="rgb(234,150,53)"/><text x="85.1286%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (147,582 samples, 0.27%)</title><rect x="85.0272%" y="261" width="0.2676%" height="15" fill="rgb(228,201,54)"/><text x="85.2772%" y="271.50"></text></g><g><title>finalize_imports (371,864 samples, 0.67%)</title><rect x="85.3116%" y="245" width="0.6742%" height="15" fill="rgb(222,22,37)"/><text x="85.5616%" y="255.50"></text></g><g><title>late_resolve_crate (1,552,687 samples, 2.81%)</title><rect x="86.0146%" y="245" width="2.8149%" height="15" fill="rgb(237,53,32)"/><text x="86.2646%" y="255.50">la..</text></g><g><title>configure_and_expand (14,712,665 samples, 26.67%)</title><rect x="62.2412%" y="277" width="26.6725%" height="15" fill="rgb(233,25,53)"/><text x="62.4912%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (1,996,193 samples, 3.62%)</title><rect x="85.2948%" y="261" width="3.6189%" height="15" fill="rgb(210,40,34)"/><text x="85.5448%" y="271.50">reso..</text></g><g><title>drop_ast (65,581 samples, 0.12%)</title><rect x="88.9137%" y="277" width="0.1189%" height="15" fill="rgb(241,220,44)"/><text x="89.1637%" y="287.50"></text></g><g><title>early_lint_checks (134,522 samples, 0.24%)</title><rect x="89.0694%" y="277" width="0.2439%" height="15" fill="rgb(235,28,35)"/><text x="89.3194%" y="287.50"></text></g><g><title>free_global_ctxt (2,337,446 samples, 4.24%)</title><rect x="89.3132%" y="277" width="4.2375%" height="15" fill="rgb(210,56,17)"/><text x="89.5632%" y="287.50">free_..</text></g><g><title>crate_hash (70,340 samples, 0.13%)</title><rect x="94.0128%" y="261" width="0.1275%" height="15" fill="rgb(224,130,29)"/><text x="94.2628%" y="271.50"></text></g><g><title>generate_crate_metadata (443,385 samples, 0.80%)</title><rect x="93.5508%" y="277" width="0.8038%" height="15" fill="rgb(235,212,8)"/><text x="93.8008%" y="287.50"></text></g><g><title>hir_lowering (742,048 samples, 1.35%)</title><rect x="94.3546%" y="277" width="1.3453%" height="15" fill="rgb(223,33,50)"/><text x="94.6046%" y="287.50"></text></g><g><title>parse_crate (1,034,441 samples, 1.88%)</title><rect x="95.7778%" y="277" width="1.8753%" height="15" fill="rgb(219,149,13)"/><text x="96.0278%" y="287.50">p..</text></g><g><title>prepare_outputs (348,754 samples, 0.63%)</title><rect x="97.6703%" y="277" width="0.6323%" height="15" fill="rgb(250,156,29)"/><text x="97.9203%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (438,925 samples, 0.80%)</title><rect x="98.3025%" y="277" width="0.7957%" height="15" fill="rgb(216,193,19)"/><text x="98.5525%" y="287.50"></text></g><g><title>setup_global_ctxt (156,292 samples, 0.28%)</title><rect x="99.1166%" y="277" width="0.2833%" height="15" fill="rgb(216,135,14)"/><text x="99.3666%" y="287.50"></text></g><g><title>all (55,160,387 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(241,47,5)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (55,160,387 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(233,42,35)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (330,984 samples, 0.60%)</title><rect x="99.4000%" y="277" width="0.6000%" height="15" fill="rgb(231,13,6)"/><text x="99.6500%" y="287.50"></text></g></svg></svg>