<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,019,533 samples, 0.37%)</title><rect x="11.0937%" y="149" width="0.3690%" height="15" fill="rgb(227,0,7)"/><text x="11.3437%" y="159.50"></text></g><g><title>param_env (653,580 samples, 0.24%)</title><rect x="13.1574%" y="117" width="0.2365%" height="15" fill="rgb(217,0,24)"/><text x="13.4074%" y="127.50"></text></g><g><title>item_attrs (420,426 samples, 0.15%)</title><rect x="13.8682%" y="85" width="0.1522%" height="15" fill="rgb(221,193,54)"/><text x="14.1182%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (406,456 samples, 0.15%)</title><rect x="13.8733%" y="69" width="0.1471%" height="15" fill="rgb(248,212,6)"/><text x="14.1233%" y="79.50"></text></g><g><title>codegen_fn_attrs (595,816 samples, 0.22%)</title><rect x="13.8132%" y="101" width="0.2156%" height="15" fill="rgb(208,68,35)"/><text x="14.0632%" y="111.50"></text></g><g><title>is_copy_raw (472,578 samples, 0.17%)</title><rect x="16.5127%" y="85" width="0.1710%" height="15" fill="rgb(232,128,0)"/><text x="16.7627%" y="95.50"></text></g><g><title>evaluate_obligation (372,037 samples, 0.13%)</title><rect x="16.5490%" y="69" width="0.1346%" height="15" fill="rgb(207,160,47)"/><text x="16.7990%" y="79.50"></text></g><g><title>needs_drop_raw (2,268,288 samples, 0.82%)</title><rect x="16.6837%" y="85" width="0.8209%" height="15" fill="rgb(228,23,34)"/><text x="16.9337%" y="95.50"></text></g><g><title>is_copy_raw (1,789,791 samples, 0.65%)</title><rect x="16.8569%" y="69" width="0.6477%" height="15" fill="rgb(218,30,26)"/><text x="17.1069%" y="79.50"></text></g><g><title>evaluate_obligation (1,437,937 samples, 0.52%)</title><rect x="16.9842%" y="53" width="0.5204%" height="15" fill="rgb(220,122,19)"/><text x="17.2342%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (1,409,404 samples, 0.51%)</title><rect x="17.7055%" y="69" width="0.5101%" height="15" fill="rgb(250,228,42)"/><text x="17.9555%" y="79.50"></text></g><g><title>resolve_instance (2,263,470 samples, 0.82%)</title><rect x="17.5046%" y="85" width="0.8191%" height="15" fill="rgb(240,193,28)"/><text x="17.7546%" y="95.50"></text></g><g><title>thir_body (2,649,794 samples, 0.96%)</title><rect x="18.3472%" y="85" width="0.9589%" height="15" fill="rgb(216,20,37)"/><text x="18.5972%" y="95.50"></text></g><g><title>mir_const (19,197,373 samples, 6.95%)</title><rect x="12.4038%" y="133" width="6.9475%" height="15" fill="rgb(206,188,39)"/><text x="12.6538%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,461,426 samples, 5.96%)</title><rect x="13.3939%" y="117" width="5.9573%" height="15" fill="rgb(217,207,13)"/><text x="13.6439%" y="127.50">unsafety..</text></g><g><title>mir_built (14,706,977 samples, 5.32%)</title><rect x="14.0288%" y="101" width="5.3224%" height="15" fill="rgb(231,73,38)"/><text x="14.2788%" y="111.50">mir_bui..</text></g><g><title>mir_const (374,392 samples, 0.14%)</title><rect x="19.4265%" y="117" width="0.1355%" height="15" fill="rgb(225,20,46)"/><text x="19.6765%" y="127.50"></text></g><g><title>mir_promoted (21,994,095 samples, 7.96%)</title><rect x="11.6036%" y="149" width="7.9596%" height="15" fill="rgb(210,31,41)"/><text x="11.8536%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (585,547 samples, 0.21%)</title><rect x="19.3512%" y="133" width="0.2119%" height="15" fill="rgb(221,200,47)"/><text x="19.6012%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (1,209,769 samples, 0.44%)</title><rect x="19.5643%" y="149" width="0.4378%" height="15" fill="rgb(226,26,5)"/><text x="19.8143%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,428,861 samples, 0.52%)</title><rect x="20.0021%" y="149" width="0.5171%" height="15" fill="rgb(249,33,26)"/><text x="20.2521%" y="159.50"></text></g><g><title>normalize_projection_ty (907,705 samples, 0.33%)</title><rect x="20.1907%" y="133" width="0.3285%" height="15" fill="rgb(235,183,28)"/><text x="20.4407%" y="143.50"></text></g><g><title>type_op_normalize_predicate (341,114 samples, 0.12%)</title><rect x="20.5192%" y="149" width="0.1234%" height="15" fill="rgb(221,5,38)"/><text x="20.7692%" y="159.50"></text></g><g><title>type_op_normalize_ty (922,454 samples, 0.33%)</title><rect x="20.6427%" y="149" width="0.3338%" height="15" fill="rgb(247,18,42)"/><text x="20.8927%" y="159.50"></text></g><g><title>normalize_projection_ty (570,546 samples, 0.21%)</title><rect x="20.7700%" y="133" width="0.2065%" height="15" fill="rgb(241,131,45)"/><text x="21.0200%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,377,211 samples, 1.95%)</title><rect x="20.9765%" y="149" width="1.9460%" height="15" fill="rgb(249,31,29)"/><text x="21.2265%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (61,704,807 samples, 22.33%)</title><rect x="0.5942%" y="181" width="22.3307%" height="15" fill="rgb(225,111,53)"/><text x="0.8442%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (61,380,944 samples, 22.21%)</title><rect x="0.7114%" y="165" width="22.2135%" height="15" fill="rgb(238,160,17)"/><text x="0.9614%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (418,645 samples, 0.15%)</title><rect x="22.9249%" y="181" width="0.1515%" height="15" fill="rgb(214,148,48)"/><text x="23.1749%" y="191.50"></text></g><g><title>hir_module_items (421,254 samples, 0.15%)</title><rect x="23.0764%" y="181" width="0.1525%" height="15" fill="rgb(232,36,49)"/><text x="23.3264%" y="191.50"></text></g><g><title>codegen_fn_attrs (332,413 samples, 0.12%)</title><rect x="23.5697%" y="117" width="0.1203%" height="15" fill="rgb(209,103,24)"/><text x="23.8197%" y="127.50"></text></g><g><title>should_inherit_track_caller (563,419 samples, 0.20%)</title><rect x="23.4919%" y="133" width="0.2039%" height="15" fill="rgb(229,88,8)"/><text x="23.7419%" y="143.50"></text></g><g><title>codegen_fn_attrs (802,091 samples, 0.29%)</title><rect x="23.4123%" y="149" width="0.2903%" height="15" fill="rgb(213,181,19)"/><text x="23.6623%" y="159.50"></text></g><g><title>check_mod_attrs (1,272,375 samples, 0.46%)</title><rect x="23.2422%" y="165" width="0.4605%" height="15" fill="rgb(254,191,54)"/><text x="23.4922%" y="175.50"></text></g><g><title>check_mod_const_bodies (276,832 samples, 0.10%)</title><rect x="23.7026%" y="165" width="0.1002%" height="15" fill="rgb(241,83,37)"/><text x="23.9526%" y="175.50"></text></g><g><title>lookup_deprecation_entry (344,373 samples, 0.12%)</title><rect x="24.0098%" y="149" width="0.1246%" height="15" fill="rgb(233,36,39)"/><text x="24.2598%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (889,431 samples, 0.32%)</title><rect x="23.8674%" y="165" width="0.3219%" height="15" fill="rgb(226,3,54)"/><text x="24.1174%" y="175.50"></text></g><g><title>misc_checking_1 (2,740,891 samples, 0.99%)</title><rect x="23.2290%" y="181" width="0.9919%" height="15" fill="rgb(245,192,40)"/><text x="23.4790%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,097,823 samples, 0.40%)</title><rect x="24.2215%" y="165" width="0.3973%" height="15" fill="rgb(238,167,29)"/><text x="24.4715%" y="175.50"></text></g><g><title>check_mod_liveness (886,270 samples, 0.32%)</title><rect x="24.2980%" y="149" width="0.3207%" height="15" fill="rgb(232,182,51)"/><text x="24.5480%" y="159.50"></text></g><g><title>misc_checking_2 (1,944,832 samples, 0.70%)</title><rect x="24.2209%" y="181" width="0.7038%" height="15" fill="rgb(231,60,39)"/><text x="24.4709%" y="191.50"></text></g><g><title>match_checking (845,569 samples, 0.31%)</title><rect x="24.6188%" y="165" width="0.3060%" height="15" fill="rgb(208,69,12)"/><text x="24.8688%" y="175.50"></text></g><g><title>check_match (777,049 samples, 0.28%)</title><rect x="24.6436%" y="149" width="0.2812%" height="15" fill="rgb(235,93,37)"/><text x="24.8936%" y="159.50"></text></g><g><title>check_private_in_public (565,666 samples, 0.20%)</title><rect x="24.9286%" y="165" width="0.2047%" height="15" fill="rgb(213,116,39)"/><text x="25.1786%" y="175.50"></text></g><g><title>death_checking (927,850 samples, 0.34%)</title><rect x="25.1333%" y="165" width="0.3358%" height="15" fill="rgb(222,207,29)"/><text x="25.3833%" y="175.50"></text></g><g><title>param_env (608,677 samples, 0.22%)</title><rect x="25.8905%" y="133" width="0.2203%" height="15" fill="rgb(206,96,30)"/><text x="26.1405%" y="143.50"></text></g><g><title>crate_lints (2,933,383 samples, 1.06%)</title><rect x="25.4696%" y="149" width="1.0616%" height="15" fill="rgb(218,138,4)"/><text x="25.7196%" y="159.50"></text></g><g><title>type_of (1,149,234 samples, 0.42%)</title><rect x="26.1153%" y="133" width="0.4159%" height="15" fill="rgb(250,191,14)"/><text x="26.3653%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (918,051 samples, 0.33%)</title><rect x="26.1989%" y="117" width="0.3322%" height="15" fill="rgb(239,60,40)"/><text x="26.4489%" y="127.50"></text></g><g><title>lint_checking (3,782,153 samples, 1.37%)</title><rect x="25.4691%" y="165" width="1.3687%" height="15" fill="rgb(206,27,48)"/><text x="25.7191%" y="175.50"></text></g><g><title>module_lints (847,370 samples, 0.31%)</title><rect x="26.5312%" y="149" width="0.3067%" height="15" fill="rgb(225,35,8)"/><text x="26.7812%" y="159.50"></text></g><g><title>lint_mod (838,999 samples, 0.30%)</title><rect x="26.5342%" y="133" width="0.3036%" height="15" fill="rgb(250,213,24)"/><text x="26.7842%" y="143.50"></text></g><g><title>privacy_access_levels (746,738 samples, 0.27%)</title><rect x="26.8378%" y="165" width="0.2702%" height="15" fill="rgb(247,123,22)"/><text x="27.0878%" y="175.50"></text></g><g><title>privacy_checking_modules (1,984,672 samples, 0.72%)</title><rect x="27.1081%" y="165" width="0.7182%" height="15" fill="rgb(231,138,38)"/><text x="27.3581%" y="175.50"></text></g><g><title>check_mod_privacy (1,977,752 samples, 0.72%)</title><rect x="27.1106%" y="149" width="0.7157%" height="15" fill="rgb(231,145,46)"/><text x="27.3606%" y="159.50"></text></g><g><title>misc_checking_3 (8,038,719 samples, 2.91%)</title><rect x="24.9248%" y="181" width="2.9092%" height="15" fill="rgb(251,118,11)"/><text x="25.1748%" y="191.50">mi..</text></g><g><title>impl_parent (2,841,910 samples, 1.03%)</title><rect x="29.9049%" y="117" width="1.0285%" height="15" fill="rgb(217,147,25)"/><text x="30.1549%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,701,955 samples, 0.62%)</title><rect x="30.3174%" y="101" width="0.6159%" height="15" fill="rgb(247,81,37)"/><text x="30.5674%" y="111.50"></text></g><g><title>impl_trait_ref (6,542,142 samples, 2.37%)</title><rect x="30.9338%" y="117" width="2.3676%" height="15" fill="rgb(209,12,38)"/><text x="31.1838%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,225,064 samples, 1.89%)</title><rect x="31.4105%" y="101" width="1.8909%" height="15" fill="rgb(227,1,9)"/><text x="31.6605%" y="111.50">m..</text></g><g><title>trait_impls_of (1,093,262 samples, 0.40%)</title><rect x="33.4288%" y="117" width="0.3956%" height="15" fill="rgb(248,47,43)"/><text x="33.6788%" y="127.50"></text></g><g><title>implementations_of_trait (370,993 samples, 0.13%)</title><rect x="33.6902%" y="101" width="0.1343%" height="15" fill="rgb(221,10,30)"/><text x="33.9402%" y="111.50"></text></g><g><title>coherent_trait (16,389,833 samples, 5.93%)</title><rect x="27.9035%" y="149" width="5.9314%" height="15" fill="rgb(210,229,1)"/><text x="28.1535%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (16,346,993 samples, 5.92%)</title><rect x="27.9191%" y="133" width="5.9159%" height="15" fill="rgb(222,148,37)"/><text x="28.1691%" y="143.50">speciali..</text></g><g><title>coherence_checking (16,532,014 samples, 5.98%)</title><rect x="27.8925%" y="165" width="5.9829%" height="15" fill="rgb(234,67,33)"/><text x="28.1425%" y="175.50">coherenc..</text></g><g><title>associated_item (542,395 samples, 0.20%)</title><rect x="56.1734%" y="101" width="0.1963%" height="15" fill="rgb(247,98,35)"/><text x="56.4234%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (439,434 samples, 0.16%)</title><rect x="56.2107%" y="85" width="0.1590%" height="15" fill="rgb(247,138,52)"/><text x="56.4607%" y="95.50"></text></g><g><title>associated_items (775,138 samples, 0.28%)</title><rect x="56.1050%" y="117" width="0.2805%" height="15" fill="rgb(213,79,30)"/><text x="56.3550%" y="127.50"></text></g><g><title>adt_dtorck_constraint (336,412 samples, 0.12%)</title><rect x="56.6945%" y="101" width="0.1217%" height="15" fill="rgb(246,177,23)"/><text x="56.9445%" y="111.50"></text></g><g><title>dropck_outlives (1,153,071 samples, 0.42%)</title><rect x="56.4447%" y="117" width="0.4173%" height="15" fill="rgb(230,62,27)"/><text x="56.6947%" y="127.50"></text></g><g><title>generics_of (1,021,330 samples, 0.37%)</title><rect x="58.8471%" y="101" width="0.3696%" height="15" fill="rgb(216,154,8)"/><text x="59.0971%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (840,297 samples, 0.30%)</title><rect x="58.9126%" y="85" width="0.3041%" height="15" fill="rgb(244,35,45)"/><text x="59.1626%" y="95.50"></text></g><g><title>impl_trait_ref (448,435 samples, 0.16%)</title><rect x="59.2477%" y="101" width="0.1623%" height="15" fill="rgb(251,115,12)"/><text x="59.4977%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (388,124 samples, 0.14%)</title><rect x="59.2695%" y="85" width="0.1405%" height="15" fill="rgb(240,54,50)"/><text x="59.5195%" y="95.50"></text></g><g><title>predicates_of (335,874 samples, 0.12%)</title><rect x="59.4198%" y="101" width="0.1216%" height="15" fill="rgb(233,84,52)"/><text x="59.6698%" y="111.50"></text></g><g><title>specializes (421,883 samples, 0.15%)</title><rect x="59.5414%" y="101" width="0.1527%" height="15" fill="rgb(207,117,47)"/><text x="59.7914%" y="111.50"></text></g><g><title>trait_impls_of (467,907 samples, 0.17%)</title><rect x="59.6996%" y="101" width="0.1693%" height="15" fill="rgb(249,43,39)"/><text x="59.9496%" y="111.50"></text></g><g><title>evaluate_obligation (8,335,452 samples, 3.02%)</title><rect x="56.8620%" y="117" width="3.0166%" height="15" fill="rgb(209,38,44)"/><text x="57.1120%" y="127.50">eva..</text></g><g><title>item_attrs (369,777 samples, 0.13%)</title><rect x="60.1543%" y="117" width="0.1338%" height="15" fill="rgb(236,212,23)"/><text x="60.4043%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (360,517 samples, 0.13%)</title><rect x="60.1576%" y="101" width="0.1305%" height="15" fill="rgb(242,79,21)"/><text x="60.4076%" y="111.50"></text></g><g><title>method_autoderef_steps (2,462,071 samples, 0.89%)</title><rect x="60.3357%" y="117" width="0.8910%" height="15" fill="rgb(211,96,35)"/><text x="60.5857%" y="127.50"></text></g><g><title>evaluate_obligation (976,328 samples, 0.35%)</title><rect x="60.8734%" y="101" width="0.3533%" height="15" fill="rgb(253,215,40)"/><text x="61.1234%" y="111.50"></text></g><g><title>predicates_of (545,514 samples, 0.20%)</title><rect x="61.2785%" y="117" width="0.1974%" height="15" fill="rgb(211,81,21)"/><text x="61.5285%" y="127.50"></text></g><g><title>predicates_defined_on (390,131 samples, 0.14%)</title><rect x="61.3348%" y="101" width="0.1412%" height="15" fill="rgb(208,190,38)"/><text x="61.5848%" y="111.50"></text></g><g><title>typeck (1,388,635 samples, 0.50%)</title><rect x="61.5170%" y="117" width="0.5025%" height="15" fill="rgb(235,213,38)"/><text x="61.7670%" y="127.50"></text></g><g><title>item_bodies_checking (77,774,007 samples, 28.15%)</title><rect x="33.9116%" y="165" width="28.1461%" height="15" fill="rgb(237,122,38)"/><text x="34.1616%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (77,769,947 samples, 28.14%)</title><rect x="33.9131%" y="149" width="28.1446%" height="15" fill="rgb(244,218,35)"/><text x="34.1631%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (77,519,785 samples, 28.05%)</title><rect x="34.0036%" y="133" width="28.0541%" height="15" fill="rgb(240,68,47)"/><text x="34.2536%" y="143.50">typeck</text></g><g><title>mir_const (1,388,945 samples, 0.50%)</title><rect x="64.3019%" y="85" width="0.5027%" height="15" fill="rgb(210,16,53)"/><text x="64.5519%" y="95.50"></text></g><g><title>unsafety_check_result (1,238,303 samples, 0.45%)</title><rect x="64.3564%" y="69" width="0.4481%" height="15" fill="rgb(235,124,12)"/><text x="64.6064%" y="79.50"></text></g><g><title>mir_built (1,163,293 samples, 0.42%)</title><rect x="64.3835%" y="53" width="0.4210%" height="15" fill="rgb(224,169,11)"/><text x="64.6335%" y="63.50"></text></g><g><title>typeck (902,800 samples, 0.33%)</title><rect x="64.4778%" y="37" width="0.3267%" height="15" fill="rgb(250,166,2)"/><text x="64.7278%" y="47.50"></text></g><g><title>mir_promoted (1,468,677 samples, 0.53%)</title><rect x="64.2751%" y="101" width="0.5315%" height="15" fill="rgb(242,216,29)"/><text x="64.5251%" y="111.50"></text></g><g><title>item_types_checking (7,782,736 samples, 2.82%)</title><rect x="62.0577%" y="165" width="2.8165%" height="15" fill="rgb(230,116,27)"/><text x="62.3077%" y="175.50">it..</text></g><g><title>check_mod_item_types (7,773,166 samples, 2.81%)</title><rect x="62.0612%" y="149" width="2.8131%" height="15" fill="rgb(228,99,48)"/><text x="62.3112%" y="159.50">ch..</text></g><g><title>type_of (2,291,075 samples, 0.83%)</title><rect x="64.0452%" y="133" width="0.8291%" height="15" fill="rgb(253,11,6)"/><text x="64.2952%" y="143.50"></text></g><g><title>mir_borrowck (2,282,285 samples, 0.83%)</title><rect x="64.0483%" y="117" width="0.8259%" height="15" fill="rgb(247,143,39)"/><text x="64.2983%" y="127.50"></text></g><g><title>fn_sig (638,577 samples, 0.23%)</title><rect x="65.1097%" y="133" width="0.2311%" height="15" fill="rgb(236,97,10)"/><text x="65.3597%" y="143.50"></text></g><g><title>is_late_bound_map (553,906 samples, 0.20%)</title><rect x="65.4457%" y="117" width="0.2005%" height="15" fill="rgb(233,208,19)"/><text x="65.6957%" y="127.50"></text></g><g><title>resolve_lifetimes (534,206 samples, 0.19%)</title><rect x="65.4528%" y="101" width="0.1933%" height="15" fill="rgb(216,164,2)"/><text x="65.7028%" y="111.50"></text></g><g><title>lint_levels (281,703 samples, 0.10%)</title><rect x="65.5442%" y="85" width="0.1019%" height="15" fill="rgb(220,129,5)"/><text x="65.7942%" y="95.50"></text></g><g><title>generics_of (1,043,847 samples, 0.38%)</title><rect x="65.3408%" y="133" width="0.3778%" height="15" fill="rgb(242,17,10)"/><text x="65.5908%" y="143.50"></text></g><g><title>late_bound_vars_map (691,929 samples, 0.25%)</title><rect x="66.1215%" y="85" width="0.2504%" height="15" fill="rgb(242,107,0)"/><text x="66.3715%" y="95.50"></text></g><g><title>resolve_lifetimes (655,189 samples, 0.24%)</title><rect x="66.1348%" y="69" width="0.2371%" height="15" fill="rgb(251,28,31)"/><text x="66.3848%" y="79.50"></text></g><g><title>explicit_predicates_of (1,325,597 samples, 0.48%)</title><rect x="65.9020%" y="101" width="0.4797%" height="15" fill="rgb(233,223,10)"/><text x="66.1520%" y="111.50"></text></g><g><title>predicates_of (2,333,227 samples, 0.84%)</title><rect x="65.7779%" y="133" width="0.8444%" height="15" fill="rgb(215,21,27)"/><text x="66.0279%" y="143.50"></text></g><g><title>predicates_defined_on (2,193,726 samples, 0.79%)</title><rect x="65.8284%" y="117" width="0.7939%" height="15" fill="rgb(232,23,21)"/><text x="66.0784%" y="127.50"></text></g><g><title>inferred_outlives_of (664,778 samples, 0.24%)</title><rect x="66.3817%" y="101" width="0.2406%" height="15" fill="rgb(244,5,23)"/><text x="66.6317%" y="111.50"></text></g><g><title>inferred_outlives_crate (617,176 samples, 0.22%)</title><rect x="66.3989%" y="85" width="0.2234%" height="15" fill="rgb(226,81,46)"/><text x="66.6489%" y="95.50"></text></g><g><title>type_of (391,694 samples, 0.14%)</title><rect x="66.4805%" y="69" width="0.1418%" height="15" fill="rgb(247,70,30)"/><text x="66.7305%" y="79.50"></text></g><g><title>type_collecting (5,207,678 samples, 1.88%)</title><rect x="64.8768%" y="165" width="1.8846%" height="15" fill="rgb(212,68,19)"/><text x="65.1268%" y="175.50">t..</text></g><g><title>collect_mod_item_types (5,190,768 samples, 1.88%)</title><rect x="64.8829%" y="149" width="1.8785%" height="15" fill="rgb(240,187,13)"/><text x="65.1329%" y="159.50">c..</text></g><g><title>type_of (384,456 samples, 0.14%)</title><rect x="66.6223%" y="133" width="0.1391%" height="15" fill="rgb(223,113,26)"/><text x="66.8723%" y="143.50"></text></g><g><title>evaluate_obligation (1,296,513 samples, 0.47%)</title><rect x="70.0384%" y="133" width="0.4692%" height="15" fill="rgb(206,192,2)"/><text x="70.2884%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,030,769 samples, 0.37%)</title><rect x="70.5285%" y="133" width="0.3730%" height="15" fill="rgb(241,108,4)"/><text x="70.7785%" y="143.50"></text></g><g><title>param_env (1,874,576 samples, 0.68%)</title><rect x="70.9051%" y="133" width="0.6784%" height="15" fill="rgb(247,173,49)"/><text x="71.1551%" y="143.50"></text></g><g><title>region_scope_tree (1,175,155 samples, 0.43%)</title><rect x="71.6093%" y="133" width="0.4253%" height="15" fill="rgb(224,114,35)"/><text x="71.8593%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,972,774 samples, 5.06%)</title><rect x="66.9835%" y="149" width="5.0567%" height="15" fill="rgb(245,159,27)"/><text x="67.2335%" y="159.50">check_..</text></g><g><title>generics_of (363,911 samples, 0.13%)</title><rect x="74.9896%" y="117" width="0.1317%" height="15" fill="rgb(245,172,44)"/><text x="75.2396%" y="127.50"></text></g><g><title>impl_trait_ref (1,426,772 samples, 0.52%)</title><rect x="75.1240%" y="117" width="0.5163%" height="15" fill="rgb(236,23,11)"/><text x="75.3740%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,216,938 samples, 0.44%)</title><rect x="75.1999%" y="101" width="0.4404%" height="15" fill="rgb(205,117,38)"/><text x="75.4499%" y="111.50"></text></g><g><title>evaluate_obligation (3,882,536 samples, 1.41%)</title><rect x="74.2574%" y="133" width="1.4051%" height="15" fill="rgb(237,72,25)"/><text x="74.5074%" y="143.50"></text></g><g><title>implied_outlives_bounds (400,182 samples, 0.14%)</title><rect x="75.6808%" y="133" width="0.1448%" height="15" fill="rgb(244,70,9)"/><text x="75.9308%" y="143.50"></text></g><g><title>param_env (1,061,101 samples, 0.38%)</title><rect x="75.8301%" y="133" width="0.3840%" height="15" fill="rgb(217,125,39)"/><text x="76.0801%" y="143.50"></text></g><g><title>check_item_well_formed (12,331,677 samples, 4.46%)</title><rect x="72.0402%" y="149" width="4.4628%" height="15" fill="rgb(235,36,10)"/><text x="72.2902%" y="159.50">check..</text></g><g><title>analysis (210,419,594 samples, 76.15%)</title><rect x="0.3683%" y="197" width="76.1500%" height="15" fill="rgb(251,123,47)"/><text x="0.6183%" y="207.50">analysis</text></g><g><title>type_check_crate (134,525,719 samples, 48.68%)</title><rect x="27.8340%" y="181" width="48.6843%" height="15" fill="rgb(221,13,13)"/><text x="28.0840%" y="191.50">type_check_crate</text></g><g><title>wf_checking (26,946,131 samples, 9.75%)</title><rect x="66.7666%" y="165" width="9.7517%" height="15" fill="rgb(238,131,9)"/><text x="67.0166%" y="175.50">wf_checking</text></g><g><title>codegen_crate (453,345 samples, 0.16%)</title><rect x="76.5218%" y="197" width="0.1641%" height="15" fill="rgb(211,50,8)"/><text x="76.7718%" y="207.50"></text></g><g><title>metadata_register_crate (1,282,614 samples, 0.46%)</title><rect x="90.4096%" y="149" width="0.4642%" height="15" fill="rgb(245,182,24)"/><text x="90.6596%" y="159.50"></text></g><g><title>metadata_register_crate (451,965 samples, 0.16%)</title><rect x="90.7102%" y="133" width="0.1636%" height="15" fill="rgb(242,14,37)"/><text x="90.9602%" y="143.50"></text></g><g><title>macro_expand_crate (39,745,232 samples, 14.38%)</title><rect x="76.9320%" y="181" width="14.3836%" height="15" fill="rgb(246,228,12)"/><text x="77.1820%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (39,730,522 samples, 14.38%)</title><rect x="76.9374%" y="165" width="14.3783%" height="15" fill="rgb(213,55,15)"/><text x="77.1874%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,221,044 samples, 0.44%)</title><rect x="90.8738%" y="149" width="0.4419%" height="15" fill="rgb(209,9,3)"/><text x="91.1238%" y="159.50"></text></g><g><title>finalize_imports (328,954 samples, 0.12%)</title><rect x="91.3560%" y="165" width="0.1190%" height="15" fill="rgb(230,59,30)"/><text x="91.6060%" y="175.50"></text></g><g><title>late_resolve_crate (3,434,218 samples, 1.24%)</title><rect x="91.4987%" y="165" width="1.2428%" height="15" fill="rgb(209,121,21)"/><text x="91.7487%" y="175.50"></text></g><g><title>configure_and_expand (44,602,577 samples, 16.14%)</title><rect x="76.6859%" y="197" width="16.1415%" height="15" fill="rgb(220,109,13)"/><text x="76.9359%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,070,126 samples, 1.47%)</title><rect x="91.3544%" y="181" width="1.4730%" height="15" fill="rgb(232,18,1)"/><text x="91.6044%" y="191.50"></text></g><g><title>drop_ast (443,245 samples, 0.16%)</title><rect x="92.8274%" y="197" width="0.1604%" height="15" fill="rgb(215,41,42)"/><text x="93.0774%" y="207.50"></text></g><g><title>early_lint_checks (748,908 samples, 0.27%)</title><rect x="92.9944%" y="197" width="0.2710%" height="15" fill="rgb(224,123,36)"/><text x="93.2444%" y="207.50"></text></g><g><title>free_global_ctxt (4,904,514 samples, 1.77%)</title><rect x="93.2654%" y="197" width="1.7749%" height="15" fill="rgb(240,125,3)"/><text x="93.5154%" y="207.50">f..</text></g><g><title>mir_for_ctfe (412,593 samples, 0.15%)</title><rect x="96.2106%" y="181" width="0.1493%" height="15" fill="rgb(205,98,50)"/><text x="96.4606%" y="191.50"></text></g><g><title>generate_crate_metadata (3,846,143 samples, 1.39%)</title><rect x="95.0403%" y="197" width="1.3919%" height="15" fill="rgb(205,185,37)"/><text x="95.2903%" y="207.50"></text></g><g><title>hir_lowering (7,201,701 samples, 2.61%)</title><rect x="96.4322%" y="197" width="2.6063%" height="15" fill="rgb(238,207,15)"/><text x="96.6822%" y="207.50">hi..</text></g><g><title>parse_crate (519,646 samples, 0.19%)</title><rect x="99.0606%" y="197" width="0.1881%" height="15" fill="rgb(213,199,42)"/><text x="99.3106%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,326,975 samples, 0.48%)</title><rect x="99.3244%" y="197" width="0.4802%" height="15" fill="rgb(235,201,11)"/><text x="99.5744%" y="207.50"></text></g><g><title>all (276,322,498 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (276,322,498 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (447,605 samples, 0.16%)</title><rect x="99.8380%" y="197" width="0.1620%" height="15" fill="rgb(243,32,47)"/><text x="100.0880%" y="207.50"></text></g></svg></svg>