<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,156,014 samples, 0.10%)</title><rect x="17.1282%" y="133" width="0.1033%" height="15" fill="rgb(227,0,7)"/><text x="17.3782%" y="143.50"></text></g><g><title>param_env (1,413,518 samples, 0.13%)</title><rect x="19.3353%" y="101" width="0.1263%" height="15" fill="rgb(217,0,24)"/><text x="19.5853%" y="111.50"></text></g><g><title>item_attrs (1,342,555 samples, 0.12%)</title><rect x="20.1278%" y="69" width="0.1199%" height="15" fill="rgb(221,193,54)"/><text x="20.3778%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,290,185 samples, 0.12%)</title><rect x="20.1325%" y="53" width="0.1152%" height="15" fill="rgb(248,212,6)"/><text x="20.3825%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,887,100 samples, 0.17%)</title><rect x="20.0862%" y="85" width="0.1686%" height="15" fill="rgb(208,68,35)"/><text x="20.3362%" y="95.50"></text></g><g><title>adt_drop_tys (1,502,545 samples, 0.13%)</title><rect x="24.0909%" y="53" width="0.1342%" height="15" fill="rgb(232,128,0)"/><text x="24.3409%" y="63.50"></text></g><g><title>is_copy_raw (5,604,387 samples, 0.50%)</title><rect x="24.2253%" y="53" width="0.5006%" height="15" fill="rgb(207,160,47)"/><text x="24.4753%" y="63.50"></text></g><g><title>evaluate_obligation (4,443,490 samples, 0.40%)</title><rect x="24.3290%" y="37" width="0.3969%" height="15" fill="rgb(228,23,34)"/><text x="24.5790%" y="47.50"></text></g><g><title>needs_drop_raw (8,362,209 samples, 0.75%)</title><rect x="24.0003%" y="69" width="0.7470%" height="15" fill="rgb(218,30,26)"/><text x="24.2503%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (3,638,651 samples, 0.33%)</title><rect x="24.9542%" y="53" width="0.3250%" height="15" fill="rgb(220,122,19)"/><text x="25.2042%" y="63.50"></text></g><g><title>resolve_instance (7,352,608 samples, 0.66%)</title><rect x="24.7514%" y="69" width="0.6568%" height="15" fill="rgb(250,228,42)"/><text x="25.0014%" y="79.50"></text></g><g><title>thir_body (16,634,272 samples, 1.49%)</title><rect x="25.4440%" y="69" width="1.4859%" height="15" fill="rgb(240,193,28)"/><text x="25.6940%" y="79.50"></text></g><g><title>mir_const (96,572,219 samples, 8.63%)</title><rect x="18.3290%" y="117" width="8.6263%" height="15" fill="rgb(216,20,37)"/><text x="18.5790%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (83,893,386 samples, 7.49%)</title><rect x="19.4615%" y="101" width="7.4938%" height="15" fill="rgb(206,188,39)"/><text x="19.7115%" y="111.50">unsafety_c..</text></g><g><title>mir_built (75,009,649 samples, 6.70%)</title><rect x="20.2551%" y="85" width="6.7002%" height="15" fill="rgb(217,207,13)"/><text x="20.5051%" y="95.50">mir_built</text></g><g><title>mir_const_qualif (1,552,933 samples, 0.14%)</title><rect x="26.9553%" y="117" width="0.1387%" height="15" fill="rgb(231,73,38)"/><text x="27.2053%" y="127.50"></text></g><g><title>mir_promoted (109,239,846 samples, 9.76%)</title><rect x="17.3362%" y="133" width="9.7578%" height="15" fill="rgb(225,20,46)"/><text x="17.5862%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,187,550 samples, 0.28%)</title><rect x="27.0946%" y="133" width="0.2847%" height="15" fill="rgb(210,31,41)"/><text x="27.3446%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (6,056,404 samples, 0.54%)</title><rect x="27.3793%" y="133" width="0.5410%" height="15" fill="rgb(221,200,47)"/><text x="27.6293%" y="143.50"></text></g><g><title>normalize_projection_ty (3,804,505 samples, 0.34%)</title><rect x="27.5804%" y="117" width="0.3398%" height="15" fill="rgb(226,26,5)"/><text x="27.8304%" y="127.50"></text></g><g><title>type_op_prove_predicate (24,415,301 samples, 2.18%)</title><rect x="28.0459%" y="133" width="2.1809%" height="15" fill="rgb(249,33,26)"/><text x="28.2959%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (332,551,568 samples, 29.71%)</title><rect x="0.5250%" y="165" width="29.7051%" height="15" fill="rgb(235,183,28)"/><text x="0.7750%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (330,538,931 samples, 29.53%)</title><rect x="0.7047%" y="149" width="29.5253%" height="15" fill="rgb(221,5,38)"/><text x="0.9547%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,812,080 samples, 0.16%)</title><rect x="30.2301%" y="165" width="0.1619%" height="15" fill="rgb(247,18,42)"/><text x="30.4801%" y="175.50"></text></g><g><title>hir_module_items (2,178,842 samples, 0.19%)</title><rect x="30.3919%" y="165" width="0.1946%" height="15" fill="rgb(241,131,45)"/><text x="30.6419%" y="175.50"></text></g><g><title>should_inherit_track_caller (1,297,471 samples, 0.12%)</title><rect x="30.9211%" y="117" width="0.1159%" height="15" fill="rgb(249,31,29)"/><text x="31.1711%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,230,210 samples, 0.20%)</title><rect x="30.8399%" y="133" width="0.1992%" height="15" fill="rgb(225,111,53)"/><text x="31.0899%" y="143.50"></text></g><g><title>check_mod_attrs (4,981,771 samples, 0.44%)</title><rect x="30.5941%" y="149" width="0.4450%" height="15" fill="rgb(238,160,17)"/><text x="30.8441%" y="159.50"></text></g><g><title>check_mod_const_bodies (1,604,130 samples, 0.14%)</title><rect x="31.0391%" y="149" width="0.1433%" height="15" fill="rgb(214,148,48)"/><text x="31.2891%" y="159.50"></text></g><g><title>lint_levels (2,030,693 samples, 0.18%)</title><rect x="31.4104%" y="133" width="0.1814%" height="15" fill="rgb(232,36,49)"/><text x="31.6604%" y="143.50"></text></g><g><title>lookup_deprecation_entry (1,522,236 samples, 0.14%)</title><rect x="31.5917%" y="133" width="0.1360%" height="15" fill="rgb(209,103,24)"/><text x="31.8417%" y="143.50"></text></g><g><title>stability_index (1,374,595 samples, 0.12%)</title><rect x="31.6049%" y="117" width="0.1228%" height="15" fill="rgb(229,88,8)"/><text x="31.8549%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (5,130,350 samples, 0.46%)</title><rect x="31.2930%" y="149" width="0.4583%" height="15" fill="rgb(213,181,19)"/><text x="31.5430%" y="159.50"></text></g><g><title>misc_checking_1 (13,397,910 samples, 1.20%)</title><rect x="30.5866%" y="165" width="1.1968%" height="15" fill="rgb(254,191,54)"/><text x="30.8366%" y="175.50"></text></g><g><title>check_mod_intrinsics (1,209,172 samples, 0.11%)</title><rect x="31.7869%" y="133" width="0.1080%" height="15" fill="rgb(241,83,37)"/><text x="32.0369%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (6,401,992 samples, 0.57%)</title><rect x="31.7837%" y="149" width="0.5719%" height="15" fill="rgb(233,36,39)"/><text x="32.0337%" y="159.50"></text></g><g><title>check_mod_liveness (5,157,220 samples, 0.46%)</title><rect x="31.8949%" y="133" width="0.4607%" height="15" fill="rgb(226,3,54)"/><text x="32.1449%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,460,185 samples, 0.13%)</title><rect x="33.0510%" y="117" width="0.1304%" height="15" fill="rgb(245,192,40)"/><text x="33.3010%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,449,795 samples, 0.13%)</title><rect x="33.0519%" y="101" width="0.1295%" height="15" fill="rgb(238,167,29)"/><text x="33.3019%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,445,715 samples, 0.13%)</title><rect x="33.0523%" y="85" width="0.1291%" height="15" fill="rgb(232,182,51)"/><text x="33.3023%" y="95.50"></text></g><g><title>misc_checking_2 (16,471,313 samples, 1.47%)</title><rect x="31.7834%" y="165" width="1.4713%" height="15" fill="rgb(231,60,39)"/><text x="32.0334%" y="175.50"></text></g><g><title>match_checking (10,065,951 samples, 0.90%)</title><rect x="32.3555%" y="149" width="0.8991%" height="15" fill="rgb(208,69,12)"/><text x="32.6055%" y="159.50"></text></g><g><title>check_match (9,562,942 samples, 0.85%)</title><rect x="32.4005%" y="133" width="0.8542%" height="15" fill="rgb(235,93,37)"/><text x="32.6505%" y="143.50"></text></g><g><title>check_private_in_public (2,773,441 samples, 0.25%)</title><rect x="33.2564%" y="149" width="0.2477%" height="15" fill="rgb(213,116,39)"/><text x="33.5064%" y="159.50"></text></g><g><title>death_checking (5,551,882 samples, 0.50%)</title><rect x="33.5042%" y="149" width="0.4959%" height="15" fill="rgb(222,207,29)"/><text x="33.7542%" y="159.50"></text></g><g><title>param_env (1,732,628 samples, 0.15%)</title><rect x="34.6639%" y="117" width="0.1548%" height="15" fill="rgb(206,96,30)"/><text x="34.9139%" y="127.50"></text></g><g><title>crate_lints (11,218,876 samples, 1.00%)</title><rect x="34.0004%" y="133" width="1.0021%" height="15" fill="rgb(218,138,4)"/><text x="34.2504%" y="143.50"></text></g><g><title>type_of (1,675,098 samples, 0.15%)</title><rect x="34.8529%" y="117" width="0.1496%" height="15" fill="rgb(250,191,14)"/><text x="35.1029%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,143,453 samples, 0.10%)</title><rect x="34.9004%" y="101" width="0.1021%" height="15" fill="rgb(239,60,40)"/><text x="35.1504%" y="111.50"></text></g><g><title>layout_of (1,261,214 samples, 0.11%)</title><rect x="35.6614%" y="85" width="0.1127%" height="15" fill="rgb(206,27,48)"/><text x="35.9114%" y="95.50"></text></g><g><title>layout_of (1,160,433 samples, 0.10%)</title><rect x="35.6704%" y="69" width="0.1037%" height="15" fill="rgb(225,35,8)"/><text x="35.9204%" y="79.50"></text></g><g><title>layout_of (1,356,925 samples, 0.12%)</title><rect x="35.6529%" y="101" width="0.1212%" height="15" fill="rgb(250,213,24)"/><text x="35.9029%" y="111.50"></text></g><g><title>lint_checking (19,862,623 samples, 1.77%)</title><rect x="34.0001%" y="149" width="1.7742%" height="15" fill="rgb(247,123,22)"/><text x="34.2501%" y="159.50">l..</text></g><g><title>module_lints (8,640,137 samples, 0.77%)</title><rect x="35.0025%" y="133" width="0.7718%" height="15" fill="rgb(231,138,38)"/><text x="35.2525%" y="143.50"></text></g><g><title>lint_mod (8,608,447 samples, 0.77%)</title><rect x="35.0054%" y="117" width="0.7689%" height="15" fill="rgb(231,145,46)"/><text x="35.2554%" y="127.50"></text></g><g><title>privacy_access_levels (4,825,354 samples, 0.43%)</title><rect x="35.7743%" y="149" width="0.4310%" height="15" fill="rgb(251,118,11)"/><text x="36.0243%" y="159.50"></text></g><g><title>privacy_checking_modules (12,588,490 samples, 1.12%)</title><rect x="36.2053%" y="149" width="1.1245%" height="15" fill="rgb(217,147,25)"/><text x="36.4553%" y="159.50"></text></g><g><title>check_mod_privacy (12,564,690 samples, 1.12%)</title><rect x="36.2075%" y="133" width="1.1223%" height="15" fill="rgb(247,81,37)"/><text x="36.4575%" y="143.50"></text></g><g><title>misc_checking_3 (45,753,591 samples, 4.09%)</title><rect x="33.2547%" y="165" width="4.0869%" height="15" fill="rgb(209,12,38)"/><text x="33.5047%" y="175.50">misc..</text></g><g><title>impl_parent (3,892,011 samples, 0.35%)</title><rect x="38.1779%" y="101" width="0.3477%" height="15" fill="rgb(227,1,9)"/><text x="38.4279%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,119,159 samples, 0.19%)</title><rect x="38.3363%" y="85" width="0.1893%" height="15" fill="rgb(248,47,43)"/><text x="38.5863%" y="95.50"></text></g><g><title>impl_trait_ref (7,760,221 samples, 0.69%)</title><rect x="38.5257%" y="101" width="0.6932%" height="15" fill="rgb(221,10,30)"/><text x="38.7757%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,950,635 samples, 0.53%)</title><rect x="38.6874%" y="85" width="0.5315%" height="15" fill="rgb(210,229,1)"/><text x="38.9374%" y="95.50"></text></g><g><title>trait_impls_of (1,425,293 samples, 0.13%)</title><rect x="39.2483%" y="101" width="0.1273%" height="15" fill="rgb(222,148,37)"/><text x="39.4983%" y="111.50"></text></g><g><title>coherent_trait (22,036,517 samples, 1.97%)</title><rect x="37.4088%" y="133" width="1.9684%" height="15" fill="rgb(234,67,33)"/><text x="37.6588%" y="143.50">c..</text></g><g><title>specialization_graph_of (20,814,894 samples, 1.86%)</title><rect x="37.5179%" y="117" width="1.8593%" height="15" fill="rgb(247,98,35)"/><text x="37.7679%" y="127.50">s..</text></g><g><title>coherence_checking (22,510,532 samples, 2.01%)</title><rect x="37.4056%" y="149" width="2.0108%" height="15" fill="rgb(247,138,52)"/><text x="37.6556%" y="159.50">c..</text></g><g><title>associated_items (1,865,821 samples, 0.17%)</title><rect x="62.6524%" y="101" width="0.1667%" height="15" fill="rgb(213,79,30)"/><text x="62.9024%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,376,185 samples, 0.12%)</title><rect x="63.0370%" y="85" width="0.1229%" height="15" fill="rgb(246,177,23)"/><text x="63.2870%" y="95.50"></text></g><g><title>dropck_outlives (3,864,976 samples, 0.35%)</title><rect x="62.8478%" y="101" width="0.3452%" height="15" fill="rgb(230,62,27)"/><text x="63.0978%" y="111.50"></text></g><g><title>predicates_of (1,152,312 samples, 0.10%)</title><rect x="64.3216%" y="85" width="0.1029%" height="15" fill="rgb(216,154,8)"/><text x="64.5716%" y="95.50"></text></g><g><title>specializes (1,547,008 samples, 0.14%)</title><rect x="64.4245%" y="85" width="0.1382%" height="15" fill="rgb(244,35,45)"/><text x="64.6745%" y="95.50"></text></g><g><title>evaluate_obligation (15,960,744 samples, 1.43%)</title><rect x="63.1930%" y="101" width="1.4257%" height="15" fill="rgb(251,115,12)"/><text x="63.4430%" y="111.50"></text></g><g><title>generics_of (1,457,086 samples, 0.13%)</title><rect x="64.6753%" y="101" width="0.1302%" height="15" fill="rgb(240,54,50)"/><text x="64.9253%" y="111.50"></text></g><g><title>evaluate_obligation (2,138,823 samples, 0.19%)</title><rect x="65.1279%" y="85" width="0.1911%" height="15" fill="rgb(233,84,52)"/><text x="65.3779%" y="95.50"></text></g><g><title>method_autoderef_steps (4,406,641 samples, 0.39%)</title><rect x="64.9288%" y="101" width="0.3936%" height="15" fill="rgb(207,117,47)"/><text x="65.1788%" y="111.50"></text></g><g><title>predicates_of (1,239,560 samples, 0.11%)</title><rect x="65.3832%" y="101" width="0.1107%" height="15" fill="rgb(249,43,39)"/><text x="65.6332%" y="111.50"></text></g><g><title>dropck_outlives (1,173,149 samples, 0.10%)</title><rect x="71.7453%" y="85" width="0.1048%" height="15" fill="rgb(209,38,44)"/><text x="71.9953%" y="95.50"></text></g><g><title>evaluate_obligation (7,824,862 samples, 0.70%)</title><rect x="71.8501%" y="85" width="0.6990%" height="15" fill="rgb(236,212,23)"/><text x="72.1001%" y="95.50"></text></g><g><title>method_autoderef_steps (1,267,999 samples, 0.11%)</title><rect x="72.6711%" y="85" width="0.1133%" height="15" fill="rgb(242,79,21)"/><text x="72.9211%" y="95.50"></text></g><g><title>typeck (81,945,368 samples, 7.32%)</title><rect x="65.5431%" y="101" width="7.3198%" height="15" fill="rgb(211,96,35)"/><text x="65.7931%" y="111.50">typeck</text></g><g><title>item_bodies_checking (374,458,767 samples, 33.45%)</title><rect x="39.4496%" y="149" width="33.4485%" height="15" fill="rgb(253,215,40)"/><text x="39.6996%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (374,454,987 samples, 33.45%)</title><rect x="39.4499%" y="133" width="33.4481%" height="15" fill="rgb(211,81,21)"/><text x="39.6999%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (373,287,716 samples, 33.34%)</title><rect x="39.5542%" y="117" width="33.3439%" height="15" fill="rgb(208,190,38)"/><text x="39.8042%" y="127.50">typeck</text></g><g><title>impl_trait_ref (1,179,392 samples, 0.11%)</title><rect x="74.5071%" y="85" width="0.1053%" height="15" fill="rgb(235,213,38)"/><text x="74.7571%" y="95.50"></text></g><g><title>specializes (2,158,754 samples, 0.19%)</title><rect x="74.6846%" y="85" width="0.1928%" height="15" fill="rgb(237,122,38)"/><text x="74.9346%" y="95.50"></text></g><g><title>param_env (1,257,484 samples, 0.11%)</title><rect x="74.7651%" y="69" width="0.1123%" height="15" fill="rgb(244,218,35)"/><text x="75.0151%" y="79.50"></text></g><g><title>evaluate_obligation (7,980,002 samples, 0.71%)</title><rect x="74.1817%" y="101" width="0.7128%" height="15" fill="rgb(240,68,47)"/><text x="74.4317%" y="111.50"></text></g><g><title>item_types_checking (22,797,664 samples, 2.04%)</title><rect x="72.8981%" y="149" width="2.0364%" height="15" fill="rgb(210,16,53)"/><text x="73.1481%" y="159.50">i..</text></g><g><title>check_mod_item_types (22,769,464 samples, 2.03%)</title><rect x="72.9006%" y="133" width="2.0339%" height="15" fill="rgb(235,124,12)"/><text x="73.1506%" y="143.50">c..</text></g><g><title>typeck (10,727,368 samples, 0.96%)</title><rect x="73.9762%" y="117" width="0.9582%" height="15" fill="rgb(224,169,11)"/><text x="74.2262%" y="127.50"></text></g><g><title>fn_sig (2,836,144 samples, 0.25%)</title><rect x="75.1974%" y="117" width="0.2533%" height="15" fill="rgb(250,166,2)"/><text x="75.4474%" y="127.50"></text></g><g><title>is_late_bound_map (2,537,793 samples, 0.23%)</title><rect x="75.5654%" y="101" width="0.2267%" height="15" fill="rgb(242,216,29)"/><text x="75.8154%" y="111.50"></text></g><g><title>resolve_lifetimes (2,360,301 samples, 0.21%)</title><rect x="75.5813%" y="85" width="0.2108%" height="15" fill="rgb(230,116,27)"/><text x="75.8313%" y="95.50"></text></g><g><title>named_region_map (2,280,108 samples, 0.20%)</title><rect x="75.7921%" y="101" width="0.2037%" height="15" fill="rgb(228,99,48)"/><text x="76.0421%" y="111.50"></text></g><g><title>resolve_lifetimes (2,068,585 samples, 0.18%)</title><rect x="75.8110%" y="85" width="0.1848%" height="15" fill="rgb(253,11,6)"/><text x="76.0610%" y="95.50"></text></g><g><title>generics_of (6,236,208 samples, 0.56%)</title><rect x="75.4508%" y="117" width="0.5570%" height="15" fill="rgb(247,143,39)"/><text x="75.7008%" y="127.50"></text></g><g><title>explicit_predicates_of (1,638,357 samples, 0.15%)</title><rect x="76.1701%" y="85" width="0.1463%" height="15" fill="rgb(236,97,10)"/><text x="76.4201%" y="95.50"></text></g><g><title>predicates_of (5,485,646 samples, 0.49%)</title><rect x="76.0389%" y="117" width="0.4900%" height="15" fill="rgb(233,208,19)"/><text x="76.2889%" y="127.50"></text></g><g><title>predicates_defined_on (4,915,634 samples, 0.44%)</title><rect x="76.0898%" y="101" width="0.4391%" height="15" fill="rgb(216,164,2)"/><text x="76.3398%" y="111.50"></text></g><g><title>inferred_outlives_of (2,378,237 samples, 0.21%)</title><rect x="76.3165%" y="85" width="0.2124%" height="15" fill="rgb(220,129,5)"/><text x="76.5665%" y="95.50"></text></g><g><title>inferred_outlives_crate (2,176,604 samples, 0.19%)</title><rect x="76.3345%" y="69" width="0.1944%" height="15" fill="rgb(242,17,10)"/><text x="76.5845%" y="79.50"></text></g><g><title>type_of (1,192,775 samples, 0.11%)</title><rect x="76.4223%" y="53" width="0.1065%" height="15" fill="rgb(242,107,0)"/><text x="76.6723%" y="63.50"></text></g><g><title>type_collecting (18,827,600 samples, 1.68%)</title><rect x="74.9359%" y="149" width="1.6818%" height="15" fill="rgb(251,28,31)"/><text x="75.1859%" y="159.50"></text></g><g><title>collect_mod_item_types (18,788,360 samples, 1.68%)</title><rect x="74.9394%" y="133" width="1.6783%" height="15" fill="rgb(233,223,10)"/><text x="75.1894%" y="143.50"></text></g><g><title>evaluate_obligation (3,961,889 samples, 0.35%)</title><rect x="78.8580%" y="117" width="0.3539%" height="15" fill="rgb(215,21,27)"/><text x="79.1080%" y="127.50"></text></g><g><title>implied_outlives_bounds (2,116,444 samples, 0.19%)</title><rect x="79.2158%" y="117" width="0.1891%" height="15" fill="rgb(232,23,21)"/><text x="79.4658%" y="127.50"></text></g><g><title>param_env (3,189,834 samples, 0.28%)</title><rect x="79.4049%" y="117" width="0.2849%" height="15" fill="rgb(244,5,23)"/><text x="79.6549%" y="127.50"></text></g><g><title>region_scope_tree (5,308,404 samples, 0.47%)</title><rect x="79.6972%" y="117" width="0.4742%" height="15" fill="rgb(226,81,46)"/><text x="79.9472%" y="127.50"></text></g><g><title>check_impl_item_well_formed (37,415,048 samples, 3.34%)</title><rect x="76.8350%" y="133" width="3.3421%" height="15" fill="rgb(247,70,30)"/><text x="77.0850%" y="143.50">che..</text></g><g><title>evaluate_obligation (2,776,088 samples, 0.25%)</title><rect x="81.3407%" y="117" width="0.2480%" height="15" fill="rgb(212,68,19)"/><text x="81.5907%" y="127.50"></text></g><g><title>param_env (2,467,764 samples, 0.22%)</title><rect x="81.6833%" y="117" width="0.2204%" height="15" fill="rgb(240,187,13)"/><text x="81.9333%" y="127.50"></text></g><g><title>check_item_well_formed (20,900,956 samples, 1.87%)</title><rect x="80.1771%" y="133" width="1.8670%" height="15" fill="rgb(223,113,26)"/><text x="80.4271%" y="143.50">c..</text></g><g><title>analysis (917,162,402 samples, 81.93%)</title><rect x="0.2588%" y="181" width="81.9254%" height="15" fill="rgb(206,192,2)"/><text x="0.5088%" y="191.50">analysis</text></g><g><title>type_check_crate (502,016,542 samples, 44.84%)</title><rect x="37.3416%" y="165" width="44.8426%" height="15" fill="rgb(241,108,4)"/><text x="37.5916%" y="175.50">type_check_crate</text></g><g><title>wf_checking (62,253,406 samples, 5.56%)</title><rect x="76.6234%" y="149" width="5.5608%" height="15" fill="rgb(247,173,49)"/><text x="76.8734%" y="159.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,568,949 samples, 0.14%)</title><rect x="82.0440%" y="133" width="0.1401%" height="15" fill="rgb(224,114,35)"/><text x="82.2940%" y="143.50"></text></g><g><title>AST_validation (1,672,059 samples, 0.15%)</title><rect x="82.2381%" y="165" width="0.1494%" height="15" fill="rgb(245,159,27)"/><text x="82.4881%" y="175.50"></text></g><g><title>metadata_register_crate (1,367,185 samples, 0.12%)</title><rect x="91.0493%" y="133" width="0.1221%" height="15" fill="rgb(245,172,44)"/><text x="91.2993%" y="143.50"></text></g><g><title>macro_expand_crate (100,073,899 samples, 8.94%)</title><rect x="82.4833%" y="165" width="8.9391%" height="15" fill="rgb(236,23,11)"/><text x="82.7333%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (100,059,919 samples, 8.94%)</title><rect x="82.4845%" y="149" width="8.9378%" height="15" fill="rgb(205,117,38)"/><text x="82.7345%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,809,872 samples, 0.25%)</title><rect x="91.1714%" y="133" width="0.2510%" height="15" fill="rgb(237,72,25)"/><text x="91.4214%" y="143.50"></text></g><g><title>late_resolve_crate (16,679,726 samples, 1.49%)</title><rect x="91.5395%" y="149" width="1.4899%" height="15" fill="rgb(244,70,9)"/><text x="91.7895%" y="159.50"></text></g><g><title>resolve_check_unused (1,296,945 samples, 0.12%)</title><rect x="93.0417%" y="149" width="0.1158%" height="15" fill="rgb(217,125,39)"/><text x="93.2917%" y="159.50"></text></g><g><title>configure_and_expand (123,321,428 samples, 11.02%)</title><rect x="82.2211%" y="181" width="11.0157%" height="15" fill="rgb(235,36,10)"/><text x="82.4711%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (20,225,696 samples, 1.81%)</title><rect x="91.4301%" y="165" width="1.8067%" height="15" fill="rgb(251,123,47)"/><text x="91.6801%" y="175.50">r..</text></g><g><title>drop_ast (3,034,404 samples, 0.27%)</title><rect x="93.2368%" y="181" width="0.2710%" height="15" fill="rgb(221,13,13)"/><text x="93.4868%" y="191.50"></text></g><g><title>early_lint_checks (5,080,757 samples, 0.45%)</title><rect x="93.5102%" y="181" width="0.4538%" height="15" fill="rgb(238,131,9)"/><text x="93.7602%" y="191.50"></text></g><g><title>free_global_ctxt (12,894,813 samples, 1.15%)</title><rect x="93.9640%" y="181" width="1.1518%" height="15" fill="rgb(211,50,8)"/><text x="94.2140%" y="191.50"></text></g><g><title>generate_crate_metadata (12,118,266 samples, 1.08%)</title><rect x="95.1158%" y="181" width="1.0825%" height="15" fill="rgb(245,182,24)"/><text x="95.3658%" y="191.50"></text></g><g><title>hir_lowering (36,768,541 samples, 3.28%)</title><rect x="96.1983%" y="181" width="3.2843%" height="15" fill="rgb(242,14,37)"/><text x="96.4483%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (3,405,158 samples, 0.30%)</title><rect x="99.5963%" y="181" width="0.3042%" height="15" fill="rgb(246,228,12)"/><text x="99.8463%" y="191.50"></text></g><g><title>all (1,119,509,204 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,119,509,204 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>