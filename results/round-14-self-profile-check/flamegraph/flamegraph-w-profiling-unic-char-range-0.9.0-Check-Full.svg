<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>adt_drop_tys (67,251 samples, 0.10%)</title><rect x="10.0869%" y="53" width="0.1023%" height="15" fill="rgb(227,0,7)"/><text x="10.3369%" y="63.50"></text></g><g><title>needs_drop_raw (165,832 samples, 0.25%)</title><rect x="10.0665%" y="69" width="0.2523%" height="15" fill="rgb(217,0,24)"/><text x="10.3165%" y="79.50"></text></g><g><title>is_copy_raw (85,150 samples, 0.13%)</title><rect x="10.1892%" y="53" width="0.1295%" height="15" fill="rgb(221,193,54)"/><text x="10.4392%" y="63.50"></text></g><g><title>evaluate_obligation (71,700 samples, 0.11%)</title><rect x="10.2097%" y="37" width="0.1091%" height="15" fill="rgb(248,212,6)"/><text x="10.4597%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (69,213 samples, 0.11%)</title><rect x="10.4001%" y="53" width="0.1053%" height="15" fill="rgb(208,68,35)"/><text x="10.6501%" y="63.50"></text></g><g><title>resolve_instance (163,783 samples, 0.25%)</title><rect x="10.3188%" y="69" width="0.2492%" height="15" fill="rgb(232,128,0)"/><text x="10.5688%" y="79.50"></text></g><g><title>thir_body (383,294 samples, 0.58%)</title><rect x="10.5835%" y="69" width="0.5831%" height="15" fill="rgb(207,160,47)"/><text x="10.8335%" y="79.50"></text></g><g><title>mir_const (2,203,923 samples, 3.35%)</title><rect x="7.8241%" y="117" width="3.3527%" height="15" fill="rgb(228,23,34)"/><text x="8.0741%" y="127.50">mir..</text></g><g><title>unsafety_check_result (1,820,579 samples, 2.77%)</title><rect x="8.4072%" y="101" width="2.7695%" height="15" fill="rgb(218,30,26)"/><text x="8.6572%" y="111.50">un..</text></g><g><title>mir_built (1,651,759 samples, 2.51%)</title><rect x="8.6640%" y="85" width="2.5127%" height="15" fill="rgb(220,122,19)"/><text x="8.9140%" y="95.50">mi..</text></g><g><title>has_structural_eq_impls (83,810 samples, 0.13%)</title><rect x="11.3068%" y="101" width="0.1275%" height="15" fill="rgb(250,228,42)"/><text x="11.5568%" y="111.50"></text></g><g><title>evaluate_obligation (75,250 samples, 0.11%)</title><rect x="11.3198%" y="85" width="0.1145%" height="15" fill="rgb(240,193,28)"/><text x="11.5698%" y="95.50"></text></g><g><title>mir_const (182,852 samples, 0.28%)</title><rect x="11.4693%" y="101" width="0.2782%" height="15" fill="rgb(216,20,37)"/><text x="11.7193%" y="111.50"></text></g><g><title>unsafety_check_result (128,241 samples, 0.20%)</title><rect x="11.5523%" y="85" width="0.1951%" height="15" fill="rgb(206,188,39)"/><text x="11.8023%" y="95.50"></text></g><g><title>mir_built (97,471 samples, 0.15%)</title><rect x="11.5991%" y="69" width="0.1483%" height="15" fill="rgb(217,207,13)"/><text x="11.8491%" y="79.50"></text></g><g><title>mir_const_qualif (384,555 samples, 0.58%)</title><rect x="11.1767%" y="117" width="0.5850%" height="15" fill="rgb(231,73,38)"/><text x="11.4267%" y="127.50"></text></g><g><title>mir_promoted (2,924,482 samples, 4.45%)</title><rect x="7.3134%" y="133" width="4.4488%" height="15" fill="rgb(225,20,46)"/><text x="7.5634%" y="143.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (79,681 samples, 0.12%)</title><rect x="11.7621%" y="133" width="0.1212%" height="15" fill="rgb(210,31,41)"/><text x="12.0121%" y="143.50"></text></g><g><title>type_op_prove_predicate (244,313 samples, 0.37%)</title><rect x="11.9530%" y="133" width="0.3717%" height="15" fill="rgb(221,200,47)"/><text x="12.2030%" y="143.50"></text></g><g><title>MIR_borrow_checking (7,008,568 samples, 10.66%)</title><rect x="1.6662%" y="165" width="10.6616%" height="15" fill="rgb(226,26,5)"/><text x="1.9162%" y="175.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (6,946,418 samples, 10.57%)</title><rect x="1.7608%" y="149" width="10.5670%" height="15" fill="rgb(249,33,26)"/><text x="2.0108%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (136,991 samples, 0.21%)</title><rect x="12.3278%" y="165" width="0.2084%" height="15" fill="rgb(235,183,28)"/><text x="12.5778%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (103,331 samples, 0.16%)</title><rect x="12.3790%" y="149" width="0.1572%" height="15" fill="rgb(221,5,38)"/><text x="12.6290%" y="159.50"></text></g><g><title>hir_module_items (227,713 samples, 0.35%)</title><rect x="12.5362%" y="165" width="0.3464%" height="15" fill="rgb(247,18,42)"/><text x="12.7862%" y="175.50"></text></g><g><title>associated_item (87,671 samples, 0.13%)</title><rect x="13.5378%" y="101" width="0.1334%" height="15" fill="rgb(241,131,45)"/><text x="13.7878%" y="111.50"></text></g><g><title>get_lang_items (70,331 samples, 0.11%)</title><rect x="13.7541%" y="85" width="0.1070%" height="15" fill="rgb(249,31,29)"/><text x="14.0041%" y="95.50"></text></g><g><title>item_attrs (179,811 samples, 0.27%)</title><rect x="13.8611%" y="85" width="0.2735%" height="15" fill="rgb(225,111,53)"/><text x="14.1111%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (171,841 samples, 0.26%)</title><rect x="13.8732%" y="69" width="0.2614%" height="15" fill="rgb(238,160,17)"/><text x="14.1232%" y="79.50"></text></g><g><title>codegen_fn_attrs (396,164 samples, 0.60%)</title><rect x="13.6712%" y="101" width="0.6027%" height="15" fill="rgb(214,148,48)"/><text x="13.9212%" y="111.50"></text></g><g><title>codegen_fn_attrs (626,466 samples, 0.95%)</title><rect x="13.3333%" y="133" width="0.9530%" height="15" fill="rgb(232,36,49)"/><text x="13.5833%" y="143.50"></text></g><g><title>should_inherit_track_caller (553,336 samples, 0.84%)</title><rect x="13.4445%" y="117" width="0.8417%" height="15" fill="rgb(209,103,24)"/><text x="13.6945%" y="127.50"></text></g><g><title>check_mod_attrs (876,992 samples, 1.33%)</title><rect x="12.9526%" y="149" width="1.3341%" height="15" fill="rgb(229,88,8)"/><text x="13.2026%" y="159.50"></text></g><g><title>check_mod_const_bodies (142,331 samples, 0.22%)</title><rect x="14.2867%" y="149" width="0.2165%" height="15" fill="rgb(213,181,19)"/><text x="14.5367%" y="159.50"></text></g><g><title>lookup_deprecation_entry (159,023 samples, 0.24%)</title><rect x="14.9446%" y="133" width="0.2419%" height="15" fill="rgb(254,191,54)"/><text x="15.1946%" y="143.50"></text></g><g><title>stability_index (91,941 samples, 0.14%)</title><rect x="15.0467%" y="117" width="0.1399%" height="15" fill="rgb(241,83,37)"/><text x="15.2967%" y="127.50"></text></g><g><title>lookup_stability (77,801 samples, 0.12%)</title><rect x="15.1865%" y="133" width="0.1184%" height="15" fill="rgb(233,36,39)"/><text x="15.4365%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (506,665 samples, 0.77%)</title><rect x="14.6185%" y="149" width="0.7707%" height="15" fill="rgb(226,3,54)"/><text x="14.8685%" y="159.50"></text></g><g><title>misc_checking_1 (1,720,089 samples, 2.62%)</title><rect x="12.8830%" y="165" width="2.6166%" height="15" fill="rgb(245,192,40)"/><text x="13.1330%" y="175.50">mi..</text></g><g><title>liveness_and_intrinsic_checking (136,351 samples, 0.21%)</title><rect x="15.5013%" y="149" width="0.2074%" height="15" fill="rgb(238,167,29)"/><text x="15.7513%" y="159.50"></text></g><g><title>check_mod_liveness (97,450 samples, 0.15%)</title><rect x="15.5605%" y="133" width="0.1482%" height="15" fill="rgb(232,182,51)"/><text x="15.8105%" y="143.50"></text></g><g><title>misc_checking_2 (312,023 samples, 0.47%)</title><rect x="15.4997%" y="165" width="0.4747%" height="15" fill="rgb(231,60,39)"/><text x="15.7497%" y="175.50"></text></g><g><title>match_checking (174,582 samples, 0.27%)</title><rect x="15.7088%" y="149" width="0.2656%" height="15" fill="rgb(208,69,12)"/><text x="15.9588%" y="159.50"></text></g><g><title>check_match (159,422 samples, 0.24%)</title><rect x="15.7318%" y="133" width="0.2425%" height="15" fill="rgb(235,93,37)"/><text x="15.9818%" y="143.50"></text></g><g><title>check_private_in_public (90,251 samples, 0.14%)</title><rect x="15.9845%" y="149" width="0.1373%" height="15" fill="rgb(213,116,39)"/><text x="16.2345%" y="159.50"></text></g><g><title>death_checking (255,133 samples, 0.39%)</title><rect x="16.1218%" y="149" width="0.3881%" height="15" fill="rgb(222,207,29)"/><text x="16.3718%" y="159.50"></text></g><g><title>item_attrs (88,941 samples, 0.14%)</title><rect x="16.3746%" y="133" width="0.1353%" height="15" fill="rgb(206,96,30)"/><text x="16.6246%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,031 samples, 0.13%)</title><rect x="16.3760%" y="117" width="0.1339%" height="15" fill="rgb(218,138,4)"/><text x="16.6260%" y="127.50"></text></g><g><title>eval_to_const_value_raw (232,501 samples, 0.35%)</title><rect x="16.9587%" y="117" width="0.3537%" height="15" fill="rgb(250,191,14)"/><text x="17.2087%" y="127.50"></text></g><g><title>eval_to_const_value_raw (222,491 samples, 0.34%)</title><rect x="16.9739%" y="101" width="0.3385%" height="15" fill="rgb(239,60,40)"/><text x="17.2239%" y="111.50"></text></g><g><title>eval_to_allocation_raw (213,321 samples, 0.32%)</title><rect x="16.9879%" y="85" width="0.3245%" height="15" fill="rgb(206,27,48)"/><text x="17.2379%" y="95.50"></text></g><g><title>param_env (156,143 samples, 0.24%)</title><rect x="17.3124%" y="117" width="0.2375%" height="15" fill="rgb(225,35,8)"/><text x="17.5624%" y="127.50"></text></g><g><title>predicates_of (65,922 samples, 0.10%)</title><rect x="17.4496%" y="101" width="0.1003%" height="15" fill="rgb(250,213,24)"/><text x="17.6996%" y="111.50"></text></g><g><title>crate_lints (967,320 samples, 1.47%)</title><rect x="16.5122%" y="133" width="1.4715%" height="15" fill="rgb(247,123,22)"/><text x="16.7622%" y="143.50"></text></g><g><title>type_of (284,723 samples, 0.43%)</title><rect x="17.5505%" y="117" width="0.4331%" height="15" fill="rgb(231,138,38)"/><text x="17.8005%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (208,131 samples, 0.32%)</title><rect x="17.6670%" y="101" width="0.3166%" height="15" fill="rgb(231,145,46)"/><text x="17.9170%" y="111.50"></text></g><g><title>lint_checking (1,101,612 samples, 1.68%)</title><rect x="16.5099%" y="149" width="1.6758%" height="15" fill="rgb(251,118,11)"/><text x="16.7599%" y="159.50"></text></g><g><title>module_lints (132,831 samples, 0.20%)</title><rect x="17.9837%" y="133" width="0.2021%" height="15" fill="rgb(217,147,25)"/><text x="18.2337%" y="143.50"></text></g><g><title>lint_mod (128,801 samples, 0.20%)</title><rect x="17.9898%" y="117" width="0.1959%" height="15" fill="rgb(247,81,37)"/><text x="18.2398%" y="127.50"></text></g><g><title>privacy_access_levels (102,022 samples, 0.16%)</title><rect x="18.1857%" y="149" width="0.1552%" height="15" fill="rgb(209,12,38)"/><text x="18.4357%" y="159.50"></text></g><g><title>privacy_checking_modules (226,333 samples, 0.34%)</title><rect x="18.3409%" y="149" width="0.3443%" height="15" fill="rgb(227,1,9)"/><text x="18.5909%" y="159.50"></text></g><g><title>check_mod_privacy (223,323 samples, 0.34%)</title><rect x="18.3455%" y="133" width="0.3397%" height="15" fill="rgb(248,47,43)"/><text x="18.5955%" y="143.50"></text></g><g><title>misc_checking_3 (1,790,601 samples, 2.72%)</title><rect x="15.9743%" y="165" width="2.7239%" height="15" fill="rgb(221,10,30)"/><text x="16.2243%" y="175.50">mi..</text></g><g><title>adt_destructor (97,631 samples, 0.15%)</title><rect x="19.7142%" y="117" width="0.1485%" height="15" fill="rgb(210,229,1)"/><text x="19.9642%" y="127.50"></text></g><g><title>coherent_trait (93,221 samples, 0.14%)</title><rect x="19.7209%" y="101" width="0.1418%" height="15" fill="rgb(222,148,37)"/><text x="19.9709%" y="111.50"></text></g><g><title>specialization_graph_of (90,621 samples, 0.14%)</title><rect x="19.7248%" y="85" width="0.1379%" height="15" fill="rgb(234,67,33)"/><text x="19.9748%" y="95.50"></text></g><g><title>is_copy_raw (125,892 samples, 0.19%)</title><rect x="19.8627%" y="117" width="0.1915%" height="15" fill="rgb(247,98,35)"/><text x="20.1127%" y="127.50"></text></g><g><title>evaluate_obligation (100,651 samples, 0.15%)</title><rect x="19.9011%" y="101" width="0.1531%" height="15" fill="rgb(247,138,52)"/><text x="20.1511%" y="111.50"></text></g><g><title>impl_parent (1,827,982 samples, 2.78%)</title><rect x="26.2201%" y="101" width="2.7808%" height="15" fill="rgb(213,79,30)"/><text x="26.4701%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (876,298 samples, 1.33%)</title><rect x="27.6679%" y="85" width="1.3330%" height="15" fill="rgb(246,177,23)"/><text x="27.9179%" y="95.50"></text></g><g><title>impl_trait_ref (4,071,527 samples, 6.19%)</title><rect x="29.0009%" y="101" width="6.1937%" height="15" fill="rgb(230,62,27)"/><text x="29.2509%" y="111.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,107,709 samples, 4.73%)</title><rect x="30.4671%" y="85" width="4.7275%" height="15" fill="rgb(216,154,8)"/><text x="30.7171%" y="95.50">metada..</text></g><g><title>item_attrs (82,050 samples, 0.12%)</title><rect x="35.1946%" y="101" width="0.1248%" height="15" fill="rgb(244,35,45)"/><text x="35.4446%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (78,810 samples, 0.12%)</title><rect x="35.1995%" y="85" width="0.1199%" height="15" fill="rgb(251,115,12)"/><text x="35.4495%" y="95.50"></text></g><g><title>trait_impls_of (764,329 samples, 1.16%)</title><rect x="35.3987%" y="101" width="1.1627%" height="15" fill="rgb(240,54,50)"/><text x="35.6487%" y="111.50"></text></g><g><title>implementations_of_trait (169,532 samples, 0.26%)</title><rect x="36.3035%" y="85" width="0.2579%" height="15" fill="rgb(233,84,52)"/><text x="36.5535%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (148,031 samples, 0.23%)</title><rect x="36.3363%" y="69" width="0.2252%" height="15" fill="rgb(207,117,47)"/><text x="36.5863%" y="79.50"></text></g><g><title>coherent_trait (11,143,563 samples, 16.95%)</title><rect x="19.6141%" y="133" width="16.9518%" height="15" fill="rgb(249,43,39)"/><text x="19.8641%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (10,802,300 samples, 16.43%)</title><rect x="20.1332%" y="117" width="16.4327%" height="15" fill="rgb(209,38,44)"/><text x="20.3832%" y="127.50">specialization_graph_of</text></g><g><title>coherence_checking (11,263,325 samples, 17.13%)</title><rect x="19.5633%" y="149" width="17.1340%" height="15" fill="rgb(236,212,23)"/><text x="19.8133%" y="159.50">coherence_checking</text></g><g><title>associated_items (84,672 samples, 0.13%)</title><rect x="47.2259%" y="101" width="0.1288%" height="15" fill="rgb(242,79,21)"/><text x="47.4759%" y="111.50"></text></g><g><title>dropck_outlives (77,201 samples, 0.12%)</title><rect x="47.4016%" y="101" width="0.1174%" height="15" fill="rgb(211,96,35)"/><text x="47.6516%" y="111.50"></text></g><g><title>predicates_of (115,671 samples, 0.18%)</title><rect x="48.6879%" y="85" width="0.1760%" height="15" fill="rgb(253,215,40)"/><text x="48.9379%" y="95.50"></text></g><g><title>predicates_defined_on (70,761 samples, 0.11%)</title><rect x="48.7562%" y="69" width="0.1076%" height="15" fill="rgb(211,81,21)"/><text x="49.0062%" y="79.50"></text></g><g><title>specializes (231,793 samples, 0.35%)</title><rect x="48.8638%" y="85" width="0.3526%" height="15" fill="rgb(208,190,38)"/><text x="49.1138%" y="95.50"></text></g><g><title>param_env (201,563 samples, 0.31%)</title><rect x="48.9098%" y="69" width="0.3066%" height="15" fill="rgb(235,213,38)"/><text x="49.1598%" y="79.50"></text></g><g><title>def_span (159,063 samples, 0.24%)</title><rect x="48.9745%" y="53" width="0.2420%" height="15" fill="rgb(237,122,38)"/><text x="49.2245%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (155,923 samples, 0.24%)</title><rect x="48.9792%" y="37" width="0.2372%" height="15" fill="rgb(244,218,35)"/><text x="49.2292%" y="47.50"></text></g><g><title>trait_impls_of (194,602 samples, 0.30%)</title><rect x="49.2238%" y="85" width="0.2960%" height="15" fill="rgb(240,68,47)"/><text x="49.4738%" y="95.50"></text></g><g><title>implementations_of_trait (73,072 samples, 0.11%)</title><rect x="49.4087%" y="69" width="0.1112%" height="15" fill="rgb(210,16,53)"/><text x="49.6587%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (66,232 samples, 0.10%)</title><rect x="49.4191%" y="53" width="0.1008%" height="15" fill="rgb(235,124,12)"/><text x="49.6691%" y="63.50"></text></g><g><title>evaluate_obligation (1,316,785 samples, 2.00%)</title><rect x="47.5191%" y="101" width="2.0031%" height="15" fill="rgb(224,169,11)"/><text x="47.7691%" y="111.50">e..</text></g><g><title>item_attrs (74,312 samples, 0.11%)</title><rect x="49.7791%" y="101" width="0.1130%" height="15" fill="rgb(250,166,2)"/><text x="50.0291%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (71,562 samples, 0.11%)</title><rect x="49.7832%" y="85" width="0.1089%" height="15" fill="rgb(242,216,29)"/><text x="50.0332%" y="95.50"></text></g><g><title>method_autoderef_steps (81,442 samples, 0.12%)</title><rect x="49.9144%" y="101" width="0.1239%" height="15" fill="rgb(230,116,27)"/><text x="50.1644%" y="111.50"></text></g><g><title>object_safety_violations (127,921 samples, 0.19%)</title><rect x="50.0383%" y="101" width="0.1946%" height="15" fill="rgb(228,99,48)"/><text x="50.2883%" y="111.50"></text></g><g><title>predicates_of (143,951 samples, 0.22%)</title><rect x="50.2698%" y="101" width="0.2190%" height="15" fill="rgb(253,11,6)"/><text x="50.5198%" y="111.50"></text></g><g><title>predicates_defined_on (102,871 samples, 0.16%)</title><rect x="50.3323%" y="85" width="0.1565%" height="15" fill="rgb(247,143,39)"/><text x="50.5823%" y="95.50"></text></g><g><title>item_bodies_checking (9,088,070 samples, 13.82%)</title><rect x="36.7707%" y="149" width="13.8250%" height="15" fill="rgb(236,97,10)"/><text x="37.0207%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,084,900 samples, 13.82%)</title><rect x="36.7755%" y="133" width="13.8201%" height="15" fill="rgb(233,208,19)"/><text x="37.0255%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (9,034,390 samples, 13.74%)</title><rect x="36.8523%" y="117" width="13.7433%" height="15" fill="rgb(216,164,2)"/><text x="37.1023%" y="127.50">typeck</text></g><g><title>predicates_of (81,301 samples, 0.12%)</title><rect x="52.8757%" y="117" width="0.1237%" height="15" fill="rgb(220,129,5)"/><text x="53.1257%" y="127.50"></text></g><g><title>item_types_checking (2,300,965 samples, 3.50%)</title><rect x="50.5956%" y="149" width="3.5003%" height="15" fill="rgb(242,17,10)"/><text x="50.8456%" y="159.50">ite..</text></g><g><title>check_mod_item_types (2,280,275 samples, 3.47%)</title><rect x="50.6271%" y="133" width="3.4688%" height="15" fill="rgb(242,107,0)"/><text x="50.8771%" y="143.50">che..</text></g><g><title>typeck (713,848 samples, 1.09%)</title><rect x="53.0100%" y="117" width="1.0859%" height="15" fill="rgb(251,28,31)"/><text x="53.2600%" y="127.50"></text></g><g><title>associated_item (88,642 samples, 0.13%)</title><rect x="55.0906%" y="85" width="0.1348%" height="15" fill="rgb(233,223,10)"/><text x="55.3406%" y="95.50"></text></g><g><title>associated_items (143,372 samples, 0.22%)</title><rect x="55.0132%" y="101" width="0.2181%" height="15" fill="rgb(215,21,27)"/><text x="55.2632%" y="111.50"></text></g><g><title>late_bound_vars_map (95,611 samples, 0.15%)</title><rect x="55.2442%" y="101" width="0.1454%" height="15" fill="rgb(232,23,21)"/><text x="55.4942%" y="111.50"></text></g><g><title>resolve_lifetimes (75,151 samples, 0.11%)</title><rect x="55.2753%" y="85" width="0.1143%" height="15" fill="rgb(244,5,23)"/><text x="55.5253%" y="95.50"></text></g><g><title>fn_sig (611,387 samples, 0.93%)</title><rect x="54.5910%" y="117" width="0.9301%" height="15" fill="rgb(226,81,46)"/><text x="54.8410%" y="127.50"></text></g><g><title>named_region_map (473,956 samples, 0.72%)</title><rect x="55.7005%" y="101" width="0.7210%" height="15" fill="rgb(247,70,30)"/><text x="55.9505%" y="111.50"></text></g><g><title>resolve_lifetimes (452,066 samples, 0.69%)</title><rect x="55.7338%" y="85" width="0.6877%" height="15" fill="rgb(212,68,19)"/><text x="55.9838%" y="95.50"></text></g><g><title>lint_levels (157,262 samples, 0.24%)</title><rect x="56.1823%" y="69" width="0.2392%" height="15" fill="rgb(240,187,13)"/><text x="56.4323%" y="79.50"></text></g><g><title>generics_of (611,897 samples, 0.93%)</title><rect x="55.5210%" y="117" width="0.9308%" height="15" fill="rgb(223,113,26)"/><text x="55.7710%" y="127.50"></text></g><g><title>impl_trait_ref (126,692 samples, 0.19%)</title><rect x="56.4519%" y="117" width="0.1927%" height="15" fill="rgb(206,192,2)"/><text x="56.7019%" y="127.50"></text></g><g><title>explicit_predicates_of (109,992 samples, 0.17%)</title><rect x="56.8999%" y="85" width="0.1673%" height="15" fill="rgb(241,108,4)"/><text x="57.1499%" y="95.50"></text></g><g><title>predicates_of (354,935 samples, 0.54%)</title><rect x="56.6446%" y="117" width="0.5399%" height="15" fill="rgb(247,173,49)"/><text x="56.8946%" y="127.50"></text></g><g><title>predicates_defined_on (283,414 samples, 0.43%)</title><rect x="56.7534%" y="101" width="0.4311%" height="15" fill="rgb(224,114,35)"/><text x="57.0034%" y="111.50"></text></g><g><title>inferred_outlives_of (77,111 samples, 0.12%)</title><rect x="57.0672%" y="85" width="0.1173%" height="15" fill="rgb(245,159,27)"/><text x="57.3172%" y="95.50"></text></g><g><title>type_collecting (2,250,815 samples, 3.42%)</title><rect x="54.0980%" y="149" width="3.4240%" height="15" fill="rgb(245,172,44)"/><text x="54.3480%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (2,226,604 samples, 3.39%)</title><rect x="54.1348%" y="133" width="3.3872%" height="15" fill="rgb(236,23,11)"/><text x="54.3848%" y="143.50">col..</text></g><g><title>type_of (221,812 samples, 0.34%)</title><rect x="57.1845%" y="117" width="0.3374%" height="15" fill="rgb(205,117,38)"/><text x="57.4345%" y="127.50"></text></g><g><title>evaluate_obligation (308,955 samples, 0.47%)</title><rect x="60.1425%" y="117" width="0.4700%" height="15" fill="rgb(237,72,25)"/><text x="60.3925%" y="127.50"></text></g><g><title>implied_outlives_bounds (128,843 samples, 0.20%)</title><rect x="60.6237%" y="117" width="0.1960%" height="15" fill="rgb(244,70,9)"/><text x="60.8737%" y="127.50"></text></g><g><title>param_env (285,045 samples, 0.43%)</title><rect x="60.8197%" y="117" width="0.4336%" height="15" fill="rgb(217,125,39)"/><text x="61.0697%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,636,170 samples, 4.01%)</title><rect x="57.8386%" y="133" width="4.0102%" height="15" fill="rgb(235,36,10)"/><text x="58.0886%" y="143.50">chec..</text></g><g><title>region_scope_tree (341,793 samples, 0.52%)</title><rect x="61.3289%" y="117" width="0.5199%" height="15" fill="rgb(251,123,47)"/><text x="61.5789%" y="127.50"></text></g><g><title>evaluate_obligation (482,704 samples, 0.73%)</title><rect x="63.3452%" y="117" width="0.7343%" height="15" fill="rgb(221,13,13)"/><text x="63.5952%" y="127.50"></text></g><g><title>param_env (225,264 samples, 0.34%)</title><rect x="64.1816%" y="117" width="0.3427%" height="15" fill="rgb(238,131,9)"/><text x="64.4316%" y="127.50"></text></g><g><title>explicit_predicates_of (69,503 samples, 0.11%)</title><rect x="64.6306%" y="85" width="0.1057%" height="15" fill="rgb(211,50,8)"/><text x="64.8806%" y="95.50"></text></g><g><title>predicates_of (169,694 samples, 0.26%)</title><rect x="64.5243%" y="117" width="0.2581%" height="15" fill="rgb(245,182,24)"/><text x="64.7743%" y="127.50"></text></g><g><title>predicates_defined_on (126,874 samples, 0.19%)</title><rect x="64.5894%" y="101" width="0.1930%" height="15" fill="rgb(242,14,37)"/><text x="64.8394%" y="111.50"></text></g><g><title>region_scope_tree (69,841 samples, 0.11%)</title><rect x="64.7824%" y="117" width="0.1062%" height="15" fill="rgb(246,228,12)"/><text x="65.0324%" y="127.50"></text></g><g><title>analysis (41,933,636 samples, 63.79%)</title><rect x="1.2207%" y="181" width="63.7903%" height="15" fill="rgb(213,55,15)"/><text x="1.4707%" y="191.50">analysis</text></g><g><title>type_check_crate (30,444,518 samples, 46.31%)</title><rect x="18.6982%" y="165" width="46.3128%" height="15" fill="rgb(209,9,3)"/><text x="18.9482%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,920,315 samples, 7.48%)</title><rect x="57.5262%" y="149" width="7.4849%" height="15" fill="rgb(230,59,30)"/><text x="57.7762%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (2,078,753 samples, 3.16%)</title><rect x="61.8488%" y="133" width="3.1622%" height="15" fill="rgb(209,121,21)"/><text x="62.0988%" y="143.50">che..</text></g><g><title>codegen_crate (244,093 samples, 0.37%)</title><rect x="65.0266%" y="181" width="0.3713%" height="15" fill="rgb(220,109,13)"/><text x="65.2766%" y="191.50"></text></g><g><title>AST_validation (153,002 samples, 0.23%)</title><rect x="65.6909%" y="165" width="0.2327%" height="15" fill="rgb(232,18,1)"/><text x="65.9409%" y="175.50"></text></g><g><title>crate_injection (79,961 samples, 0.12%)</title><rect x="66.0126%" y="165" width="0.1216%" height="15" fill="rgb(215,41,42)"/><text x="66.2626%" y="175.50"></text></g><g><title>metadata_load_macro (446,887 samples, 0.68%)</title><rect x="84.4836%" y="133" width="0.6798%" height="15" fill="rgb(224,123,36)"/><text x="84.7336%" y="143.50"></text></g><g><title>metadata_register_crate (196,672 samples, 0.30%)</title><rect x="85.1634%" y="133" width="0.2992%" height="15" fill="rgb(240,125,3)"/><text x="85.4134%" y="143.50"></text></g><g><title>macro_expand_crate (12,933,124 samples, 19.67%)</title><rect x="66.1342%" y="165" width="19.6741%" height="15" fill="rgb(205,98,50)"/><text x="66.3842%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (12,919,423 samples, 19.65%)</title><rect x="66.1551%" y="149" width="19.6533%" height="15" fill="rgb(205,185,37)"/><text x="66.4051%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (227,314 samples, 0.35%)</title><rect x="85.4626%" y="133" width="0.3458%" height="15" fill="rgb(238,207,15)"/><text x="85.7126%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (76,501 samples, 0.12%)</title><rect x="85.8147%" y="165" width="0.1164%" height="15" fill="rgb(213,199,42)"/><text x="86.0647%" y="175.50"></text></g><g><title>finalize_imports (71,151 samples, 0.11%)</title><rect x="85.9463%" y="149" width="0.1082%" height="15" fill="rgb(235,201,11)"/><text x="86.1963%" y="159.50"></text></g><g><title>finalize_macro_resolutions (200,132 samples, 0.30%)</title><rect x="86.0545%" y="149" width="0.3044%" height="15" fill="rgb(207,46,11)"/><text x="86.3045%" y="159.50"></text></g><g><title>late_resolve_crate (2,107,433 samples, 3.21%)</title><rect x="86.3590%" y="149" width="3.2059%" height="15" fill="rgb(241,35,35)"/><text x="86.6090%" y="159.50">lat..</text></g><g><title>configure_and_expand (16,003,507 samples, 24.34%)</title><rect x="65.3979%" y="181" width="24.3449%" height="15" fill="rgb(243,32,47)"/><text x="65.6479%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,505,647 samples, 3.81%)</title><rect x="85.9311%" y="165" width="3.8116%" height="15" fill="rgb(247,202,23)"/><text x="86.1811%" y="175.50">reso..</text></g><g><title>drop_ast (186,942 samples, 0.28%)</title><rect x="89.7428%" y="181" width="0.2844%" height="15" fill="rgb(219,102,11)"/><text x="89.9928%" y="191.50"></text></g><g><title>early_lint_checks (366,884 samples, 0.56%)</title><rect x="90.0446%" y="181" width="0.5581%" height="15" fill="rgb(243,110,44)"/><text x="90.2946%" y="191.50"></text></g><g><title>free_global_ctxt (1,322,285 samples, 2.01%)</title><rect x="90.6027%" y="181" width="2.0115%" height="15" fill="rgb(222,74,54)"/><text x="90.8527%" y="191.50">f..</text></g><g><title>generate_crate_metadata (535,386 samples, 0.81%)</title><rect x="92.6142%" y="181" width="0.8144%" height="15" fill="rgb(216,99,12)"/><text x="92.8642%" y="191.50"></text></g><g><title>hir_lowering (2,598,919 samples, 3.95%)</title><rect x="93.4286%" y="181" width="3.9535%" height="15" fill="rgb(226,22,26)"/><text x="93.6786%" y="191.50">hir_..</text></g><g><title>parse_crate (436,555 samples, 0.66%)</title><rect x="97.4275%" y="181" width="0.6641%" height="15" fill="rgb(217,163,10)"/><text x="97.6775%" y="191.50"></text></g><g><title>prepare_outputs (325,844 samples, 0.50%)</title><rect x="98.1048%" y="181" width="0.4957%" height="15" fill="rgb(213,25,53)"/><text x="98.3548%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (446,775 samples, 0.68%)</title><rect x="98.6005%" y="181" width="0.6796%" height="15" fill="rgb(252,105,26)"/><text x="98.8505%" y="191.50"></text></g><g><title>setup_global_ctxt (123,191 samples, 0.19%)</title><rect x="99.2923%" y="181" width="0.1874%" height="15" fill="rgb(220,39,43)"/><text x="99.5423%" y="191.50"></text></g><g><title>all (65,736,679 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (65,736,679 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (342,033 samples, 0.52%)</title><rect x="99.4797%" y="181" width="0.5203%" height="15" fill="rgb(223,20,43)"/><text x="99.7297%" y="191.50"></text></g></svg></svg>