<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (161,773 samples, 0.18%)</title><rect x="7.1076%" y="245" width="0.1807%" height="15" fill="rgb(227,0,7)"/><text x="7.3576%" y="255.50"></text></g><g><title>item_attrs (148,071 samples, 0.17%)</title><rect x="7.5052%" y="213" width="0.1654%" height="15" fill="rgb(217,0,24)"/><text x="7.7552%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (144,091 samples, 0.16%)</title><rect x="7.5096%" y="197" width="0.1609%" height="15" fill="rgb(221,193,54)"/><text x="7.7596%" y="207.50"></text></g><g><title>codegen_fn_attrs (205,861 samples, 0.23%)</title><rect x="7.4518%" y="229" width="0.2299%" height="15" fill="rgb(248,212,6)"/><text x="7.7018%" y="239.50"></text></g><g><title>adt_drop_tys (118,651 samples, 0.13%)</title><rect x="8.8085%" y="197" width="0.1325%" height="15" fill="rgb(208,68,35)"/><text x="9.0585%" y="207.50"></text></g><g><title>needs_drop_raw (446,763 samples, 0.50%)</title><rect x="8.7522%" y="213" width="0.4990%" height="15" fill="rgb(232,128,0)"/><text x="9.0022%" y="223.50"></text></g><g><title>is_copy_raw (277,671 samples, 0.31%)</title><rect x="8.9411%" y="197" width="0.3101%" height="15" fill="rgb(207,160,47)"/><text x="9.1911%" y="207.50"></text></g><g><title>evaluate_obligation (214,341 samples, 0.24%)</title><rect x="9.0118%" y="181" width="0.2394%" height="15" fill="rgb(228,23,34)"/><text x="9.2618%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (153,211 samples, 0.17%)</title><rect x="9.3449%" y="197" width="0.1711%" height="15" fill="rgb(218,30,26)"/><text x="9.5949%" y="207.50"></text></g><g><title>impl_parent (185,022 samples, 0.21%)</title><rect x="9.8430%" y="181" width="0.2066%" height="15" fill="rgb(220,122,19)"/><text x="10.0930%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (128,811 samples, 0.14%)</title><rect x="9.9057%" y="165" width="0.1439%" height="15" fill="rgb(250,228,42)"/><text x="10.1557%" y="175.50"></text></g><g><title>specialization_graph_of (919,230 samples, 1.03%)</title><rect x="9.5179%" y="197" width="1.0266%" height="15" fill="rgb(240,193,28)"/><text x="9.7679%" y="207.50"></text></g><g><title>impl_trait_ref (443,144 samples, 0.49%)</title><rect x="10.0496%" y="181" width="0.4949%" height="15" fill="rgb(216,20,37)"/><text x="10.2996%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (385,023 samples, 0.43%)</title><rect x="10.1145%" y="165" width="0.4300%" height="15" fill="rgb(206,188,39)"/><text x="10.3645%" y="175.50"></text></g><g><title>resolve_instance (1,191,294 samples, 1.33%)</title><rect x="9.2512%" y="213" width="1.3305%" height="15" fill="rgb(217,207,13)"/><text x="9.5012%" y="223.50"></text></g><g><title>thir_body (370,606 samples, 0.41%)</title><rect x="10.5892%" y="213" width="0.4139%" height="15" fill="rgb(231,73,38)"/><text x="10.8392%" y="223.50"></text></g><g><title>mir_const (3,767,262 samples, 4.21%)</title><rect x="6.8131%" y="261" width="4.2075%" height="15" fill="rgb(225,20,46)"/><text x="7.0631%" y="271.50">mir_c..</text></g><g><title>unsafety_check_result (3,341,836 samples, 3.73%)</title><rect x="7.2883%" y="245" width="3.7323%" height="15" fill="rgb(210,31,41)"/><text x="7.5383%" y="255.50">unsa..</text></g><g><title>mir_built (2,989,603 samples, 3.34%)</title><rect x="7.6817%" y="229" width="3.3389%" height="15" fill="rgb(221,200,47)"/><text x="7.9317%" y="239.50">mir..</text></g><g><title>mir_promoted (4,192,287 samples, 4.68%)</title><rect x="6.4622%" y="277" width="4.6821%" height="15" fill="rgb(226,26,5)"/><text x="6.7122%" y="287.50">mir_p..</text></g><g><title>mir_const_qualif (110,791 samples, 0.12%)</title><rect x="11.0206%" y="261" width="0.1237%" height="15" fill="rgb(249,33,26)"/><text x="11.2706%" y="271.50"></text></g><g><title>type_op_ascribe_user_type (132,031 samples, 0.15%)</title><rect x="11.1443%" y="277" width="0.1475%" height="15" fill="rgb(235,183,28)"/><text x="11.3943%" y="287.50"></text></g><g><title>type_op_normalize_fn_sig (655,966 samples, 0.73%)</title><rect x="11.2918%" y="277" width="0.7326%" height="15" fill="rgb(221,5,38)"/><text x="11.5418%" y="287.50"></text></g><g><title>normalize_projection_ty (416,712 samples, 0.47%)</title><rect x="11.5590%" y="261" width="0.4654%" height="15" fill="rgb(247,18,42)"/><text x="11.8090%" y="271.50"></text></g><g><title>type_op_normalize_predicate (197,233 samples, 0.22%)</title><rect x="12.0244%" y="277" width="0.2203%" height="15" fill="rgb(241,131,45)"/><text x="12.2744%" y="287.50"></text></g><g><title>type_op_prove_predicate (2,035,822 samples, 2.27%)</title><rect x="12.3111%" y="277" width="2.2737%" height="15" fill="rgb(249,31,29)"/><text x="12.5611%" y="287.50">t..</text></g><g><title>MIR_borrow_checking (12,046,195 samples, 13.45%)</title><rect x="1.1353%" y="309" width="13.4538%" height="15" fill="rgb(225,111,53)"/><text x="1.3853%" y="319.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,016,935 samples, 13.42%)</title><rect x="1.1680%" y="293" width="13.4211%" height="15" fill="rgb(238,160,17)"/><text x="1.4180%" y="303.50">mir_borrowck</text></g><g><title>MIR_effect_checking (167,702 samples, 0.19%)</title><rect x="14.5891%" y="309" width="0.1873%" height="15" fill="rgb(214,148,48)"/><text x="14.8391%" y="319.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (140,972 samples, 0.16%)</title><rect x="14.6189%" y="293" width="0.1574%" height="15" fill="rgb(232,36,49)"/><text x="14.8689%" y="303.50"></text></g><g><title>hir_module_items (208,513 samples, 0.23%)</title><rect x="14.7764%" y="309" width="0.2329%" height="15" fill="rgb(209,103,24)"/><text x="15.0264%" y="319.50"></text></g><g><title>get_lang_items (93,161 samples, 0.10%)</title><rect x="15.3821%" y="261" width="0.1040%" height="15" fill="rgb(229,88,8)"/><text x="15.6321%" y="271.50"></text></g><g><title>should_inherit_track_caller (107,761 samples, 0.12%)</title><rect x="15.4862%" y="261" width="0.1204%" height="15" fill="rgb(213,181,19)"/><text x="15.7362%" y="271.50"></text></g><g><title>codegen_fn_attrs (290,024 samples, 0.32%)</title><rect x="15.3056%" y="277" width="0.3239%" height="15" fill="rgb(254,191,54)"/><text x="15.5556%" y="287.50"></text></g><g><title>check_mod_attrs (513,826 samples, 0.57%)</title><rect x="15.0559%" y="293" width="0.5739%" height="15" fill="rgb(241,83,37)"/><text x="15.3059%" y="303.50"></text></g><g><title>check_mod_const_bodies (108,461 samples, 0.12%)</title><rect x="15.6297%" y="293" width="0.1211%" height="15" fill="rgb(233,36,39)"/><text x="15.8797%" y="303.50"></text></g><g><title>lint_levels (130,771 samples, 0.15%)</title><rect x="16.1155%" y="277" width="0.1461%" height="15" fill="rgb(226,3,54)"/><text x="16.3655%" y="287.50"></text></g><g><title>lookup_deprecation_entry (199,563 samples, 0.22%)</title><rect x="16.2615%" y="277" width="0.2229%" height="15" fill="rgb(245,192,40)"/><text x="16.5115%" y="287.50"></text></g><g><title>stability_index (108,481 samples, 0.12%)</title><rect x="16.3632%" y="261" width="0.1212%" height="15" fill="rgb(238,167,29)"/><text x="16.6132%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (693,368 samples, 0.77%)</title><rect x="15.8404%" y="293" width="0.7744%" height="15" fill="rgb(232,182,51)"/><text x="16.0904%" y="303.50"></text></g><g><title>misc_checking_1 (1,518,877 samples, 1.70%)</title><rect x="15.0098%" y="309" width="1.6964%" height="15" fill="rgb(231,60,39)"/><text x="15.2598%" y="319.50"></text></g><g><title>liveness_and_intrinsic_checking (285,963 samples, 0.32%)</title><rect x="16.7076%" y="293" width="0.3194%" height="15" fill="rgb(208,69,12)"/><text x="16.9576%" y="303.50"></text></g><g><title>check_mod_liveness (232,043 samples, 0.26%)</title><rect x="16.7678%" y="277" width="0.2592%" height="15" fill="rgb(235,93,37)"/><text x="17.0178%" y="287.50"></text></g><g><title>misc_checking_2 (465,955 samples, 0.52%)</title><rect x="16.7061%" y="309" width="0.5204%" height="15" fill="rgb(213,116,39)"/><text x="16.9561%" y="319.50"></text></g><g><title>match_checking (178,702 samples, 0.20%)</title><rect x="17.0269%" y="293" width="0.1996%" height="15" fill="rgb(222,207,29)"/><text x="17.2769%" y="303.50"></text></g><g><title>check_match (165,632 samples, 0.18%)</title><rect x="17.0415%" y="277" width="0.1850%" height="15" fill="rgb(206,96,30)"/><text x="17.2915%" y="287.50"></text></g><g><title>check_private_in_public (104,451 samples, 0.12%)</title><rect x="17.2363%" y="293" width="0.1167%" height="15" fill="rgb(218,138,4)"/><text x="17.4863%" y="303.50"></text></g><g><title>death_checking (214,653 samples, 0.24%)</title><rect x="17.3530%" y="293" width="0.2397%" height="15" fill="rgb(250,191,14)"/><text x="17.6030%" y="303.50"></text></g><g><title>param_env (302,992 samples, 0.34%)</title><rect x="18.4840%" y="261" width="0.3384%" height="15" fill="rgb(239,60,40)"/><text x="18.7340%" y="271.50"></text></g><g><title>predicates_of (119,551 samples, 0.13%)</title><rect x="18.6889%" y="245" width="0.1335%" height="15" fill="rgb(206,27,48)"/><text x="18.9389%" y="255.50"></text></g><g><title>predicates_defined_on (96,541 samples, 0.11%)</title><rect x="18.7146%" y="229" width="0.1078%" height="15" fill="rgb(225,35,8)"/><text x="18.9646%" y="239.50"></text></g><g><title>crate_lints (2,158,864 samples, 2.41%)</title><rect x="17.5941%" y="277" width="2.4111%" height="15" fill="rgb(250,213,24)"/><text x="17.8441%" y="287.50">cr..</text></g><g><title>type_of (1,053,294 samples, 1.18%)</title><rect x="18.8288%" y="261" width="1.1764%" height="15" fill="rgb(247,123,22)"/><text x="19.0788%" y="271.50"></text></g><g><title>metadata_decode_entry_type_of (808,698 samples, 0.90%)</title><rect x="19.1020%" y="245" width="0.9032%" height="15" fill="rgb(231,138,38)"/><text x="19.3520%" y="255.50"></text></g><g><title>lint_checking (2,416,717 samples, 2.70%)</title><rect x="17.5927%" y="293" width="2.6991%" height="15" fill="rgb(231,145,46)"/><text x="17.8427%" y="303.50">li..</text></g><g><title>module_lints (256,603 samples, 0.29%)</title><rect x="20.0052%" y="277" width="0.2866%" height="15" fill="rgb(251,118,11)"/><text x="20.2552%" y="287.50"></text></g><g><title>lint_mod (251,153 samples, 0.28%)</title><rect x="20.0113%" y="261" width="0.2805%" height="15" fill="rgb(217,147,25)"/><text x="20.2613%" y="271.50"></text></g><g><title>privacy_access_levels (152,571 samples, 0.17%)</title><rect x="20.2918%" y="293" width="0.1704%" height="15" fill="rgb(247,81,37)"/><text x="20.5418%" y="303.50"></text></g><g><title>privacy_checking_modules (467,205 samples, 0.52%)</title><rect x="20.4622%" y="293" width="0.5218%" height="15" fill="rgb(209,12,38)"/><text x="20.7122%" y="303.50"></text></g><g><title>check_mod_privacy (462,905 samples, 0.52%)</title><rect x="20.4670%" y="277" width="0.5170%" height="15" fill="rgb(227,1,9)"/><text x="20.7170%" y="287.50"></text></g><g><title>misc_checking_3 (3,382,967 samples, 3.78%)</title><rect x="17.2265%" y="309" width="3.7783%" height="15" fill="rgb(248,47,43)"/><text x="17.4765%" y="319.50">misc..</text></g><g><title>impl_parent (953,067 samples, 1.06%)</title><rect x="22.5698%" y="245" width="1.0644%" height="15" fill="rgb(221,10,30)"/><text x="22.8198%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_parent (622,874 samples, 0.70%)</title><rect x="22.9386%" y="229" width="0.6957%" height="15" fill="rgb(210,229,1)"/><text x="23.1886%" y="239.50"></text></g><g><title>impl_trait_ref (3,432,936 samples, 3.83%)</title><rect x="23.6342%" y="245" width="3.8341%" height="15" fill="rgb(222,148,37)"/><text x="23.8842%" y="255.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,098,639 samples, 3.46%)</title><rect x="24.0076%" y="229" width="3.4607%" height="15" fill="rgb(234,67,33)"/><text x="24.2576%" y="239.50">met..</text></g><g><title>coherent_trait (6,072,818 samples, 6.78%)</title><rect x="21.0738%" y="277" width="6.7824%" height="15" fill="rgb(247,98,35)"/><text x="21.3238%" y="287.50">coherent_..</text></g><g><title>specialization_graph_of (6,067,458 samples, 6.78%)</title><rect x="21.0798%" y="261" width="6.7764%" height="15" fill="rgb(247,138,52)"/><text x="21.3298%" y="271.50">specializ..</text></g><g><title>trait_impls_of (345,754 samples, 0.39%)</title><rect x="27.4701%" y="245" width="0.3862%" height="15" fill="rgb(213,79,30)"/><text x="27.7201%" y="255.50"></text></g><g><title>coherence_checking (6,120,849 samples, 6.84%)</title><rect x="21.0597%" y="293" width="6.8361%" height="15" fill="rgb(246,177,23)"/><text x="21.3097%" y="303.50">coherence..</text></g><g><title>associated_item (218,784 samples, 0.24%)</title><rect x="36.9417%" y="229" width="0.2443%" height="15" fill="rgb(230,62,27)"/><text x="37.1917%" y="239.50"></text></g><g><title>metadata_decode_entry_associated_item (167,813 samples, 0.19%)</title><rect x="36.9986%" y="213" width="0.1874%" height="15" fill="rgb(216,154,8)"/><text x="37.2486%" y="223.50"></text></g><g><title>associated_items (308,054 samples, 0.34%)</title><rect x="36.8557%" y="245" width="0.3440%" height="15" fill="rgb(244,35,45)"/><text x="37.1057%" y="255.50"></text></g><g><title>dropck_outlives (204,563 samples, 0.23%)</title><rect x="37.2382%" y="245" width="0.2285%" height="15" fill="rgb(251,115,12)"/><text x="37.4882%" y="255.50"></text></g><g><title>adt_dtorck_constraint (99,602 samples, 0.11%)</title><rect x="37.3554%" y="229" width="0.1112%" height="15" fill="rgb(240,54,50)"/><text x="37.6054%" y="239.50"></text></g><g><title>generics_of (185,842 samples, 0.21%)</title><rect x="39.1838%" y="229" width="0.2076%" height="15" fill="rgb(233,84,52)"/><text x="39.4338%" y="239.50"></text></g><g><title>metadata_decode_entry_generics_of (157,971 samples, 0.18%)</title><rect x="39.2149%" y="213" width="0.1764%" height="15" fill="rgb(207,117,47)"/><text x="39.4649%" y="223.50"></text></g><g><title>impl_trait_ref (207,891 samples, 0.23%)</title><rect x="39.4785%" y="229" width="0.2322%" height="15" fill="rgb(249,43,39)"/><text x="39.7285%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (177,371 samples, 0.20%)</title><rect x="39.5126%" y="213" width="0.1981%" height="15" fill="rgb(209,38,44)"/><text x="39.7626%" y="223.50"></text></g><g><title>predicates_of (171,784 samples, 0.19%)</title><rect x="39.7590%" y="229" width="0.1919%" height="15" fill="rgb(236,212,23)"/><text x="40.0090%" y="239.50"></text></g><g><title>predicates_defined_on (97,804 samples, 0.11%)</title><rect x="39.8416%" y="213" width="0.1092%" height="15" fill="rgb(242,79,21)"/><text x="40.0916%" y="223.50"></text></g><g><title>specializes (359,594 samples, 0.40%)</title><rect x="39.9509%" y="229" width="0.4016%" height="15" fill="rgb(211,96,35)"/><text x="40.2009%" y="239.50"></text></g><g><title>param_env (242,993 samples, 0.27%)</title><rect x="40.0811%" y="213" width="0.2714%" height="15" fill="rgb(253,215,40)"/><text x="40.3311%" y="223.50"></text></g><g><title>def_span (114,742 samples, 0.13%)</title><rect x="40.2243%" y="197" width="0.1281%" height="15" fill="rgb(211,81,21)"/><text x="40.4743%" y="207.50"></text></g><g><title>metadata_decode_entry_def_span (104,462 samples, 0.12%)</title><rect x="40.2358%" y="181" width="0.1167%" height="15" fill="rgb(208,190,38)"/><text x="40.4858%" y="191.50"></text></g><g><title>trait_impls_of (415,733 samples, 0.46%)</title><rect x="40.3668%" y="229" width="0.4643%" height="15" fill="rgb(235,213,38)"/><text x="40.6168%" y="239.50"></text></g><g><title>implementations_of_trait (169,800 samples, 0.19%)</title><rect x="40.6415%" y="213" width="0.1896%" height="15" fill="rgb(237,122,38)"/><text x="40.8915%" y="223.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (117,320 samples, 0.13%)</title><rect x="40.7001%" y="197" width="0.1310%" height="15" fill="rgb(244,218,35)"/><text x="40.9501%" y="207.50"></text></g><g><title>evaluate_obligation (3,022,302 samples, 3.38%)</title><rect x="37.4666%" y="245" width="3.3755%" height="15" fill="rgb(240,68,47)"/><text x="37.7166%" y="255.50">eva..</text></g><g><title>fn_sig (119,791 samples, 0.13%)</title><rect x="40.8602%" y="245" width="0.1338%" height="15" fill="rgb(210,16,53)"/><text x="41.1102%" y="255.50"></text></g><g><title>metadata_decode_entry_fn_sig (110,491 samples, 0.12%)</title><rect x="40.8705%" y="229" width="0.1234%" height="15" fill="rgb(235,124,12)"/><text x="41.1205%" y="239.50"></text></g><g><title>generics_of (197,440 samples, 0.22%)</title><rect x="40.9939%" y="245" width="0.2205%" height="15" fill="rgb(224,169,11)"/><text x="41.2439%" y="255.50"></text></g><g><title>metadata_decode_entry_generics_of (156,980 samples, 0.18%)</title><rect x="41.0391%" y="229" width="0.1753%" height="15" fill="rgb(250,166,2)"/><text x="41.2891%" y="239.50"></text></g><g><title>impl_item_implementor_ids (98,460 samples, 0.11%)</title><rect x="41.2145%" y="245" width="0.1100%" height="15" fill="rgb(242,216,29)"/><text x="41.4645%" y="255.50"></text></g><g><title>impl_trait_ref (196,642 samples, 0.22%)</title><rect x="41.3359%" y="245" width="0.2196%" height="15" fill="rgb(230,116,27)"/><text x="41.5859%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (170,972 samples, 0.19%)</title><rect x="41.3645%" y="229" width="0.1909%" height="15" fill="rgb(228,99,48)"/><text x="41.6145%" y="239.50"></text></g><g><title>explicit_predicates_of (137,243 samples, 0.15%)</title><rect x="41.9710%" y="213" width="0.1533%" height="15" fill="rgb(253,11,6)"/><text x="42.2210%" y="223.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (117,643 samples, 0.13%)</title><rect x="41.9928%" y="197" width="0.1314%" height="15" fill="rgb(247,143,39)"/><text x="42.2428%" y="207.50"></text></g><g><title>predicates_of (337,117 samples, 0.38%)</title><rect x="41.7834%" y="245" width="0.3765%" height="15" fill="rgb(236,97,10)"/><text x="42.0334%" y="255.50"></text></g><g><title>predicates_defined_on (233,504 samples, 0.26%)</title><rect x="41.8992%" y="229" width="0.2608%" height="15" fill="rgb(233,208,19)"/><text x="42.1492%" y="239.50"></text></g><g><title>trait_impls_of (150,622 samples, 0.17%)</title><rect x="42.1735%" y="245" width="0.1682%" height="15" fill="rgb(216,164,2)"/><text x="42.4235%" y="255.50"></text></g><g><title>associated_items (99,441 samples, 0.11%)</title><rect x="45.8387%" y="229" width="0.1111%" height="15" fill="rgb(220,129,5)"/><text x="46.0887%" y="239.50"></text></g><g><title>dropck_outlives (137,693 samples, 0.15%)</title><rect x="45.9814%" y="229" width="0.1538%" height="15" fill="rgb(242,17,10)"/><text x="46.2314%" y="239.50"></text></g><g><title>adt_dtorck_constraint (94,371 samples, 0.11%)</title><rect x="46.0298%" y="213" width="0.1054%" height="15" fill="rgb(242,107,0)"/><text x="46.2798%" y="223.50"></text></g><g><title>evaluate_obligation (589,318 samples, 0.66%)</title><rect x="46.1352%" y="229" width="0.6582%" height="15" fill="rgb(251,28,31)"/><text x="46.3852%" y="239.50"></text></g><g><title>is_copy_raw (140,583 samples, 0.16%)</title><rect x="46.9579%" y="229" width="0.1570%" height="15" fill="rgb(233,223,10)"/><text x="47.2079%" y="239.50"></text></g><g><title>evaluate_obligation (114,913 samples, 0.13%)</title><rect x="46.9866%" y="213" width="0.1283%" height="15" fill="rgb(215,21,27)"/><text x="47.2366%" y="223.50"></text></g><g><title>method_autoderef_steps (98,201 samples, 0.11%)</title><rect x="47.1787%" y="229" width="0.1097%" height="15" fill="rgb(232,23,21)"/><text x="47.4287%" y="239.50"></text></g><g><title>predicates_of (146,190 samples, 0.16%)</title><rect x="47.3029%" y="229" width="0.1633%" height="15" fill="rgb(244,5,23)"/><text x="47.5529%" y="239.50"></text></g><g><title>predicates_defined_on (99,430 samples, 0.11%)</title><rect x="47.3551%" y="213" width="0.1110%" height="15" fill="rgb(226,81,46)"/><text x="47.6051%" y="223.50"></text></g><g><title>typeck (4,622,091 samples, 5.16%)</title><rect x="42.4002%" y="245" width="5.1622%" height="15" fill="rgb(247,70,30)"/><text x="42.6502%" y="255.50">typeck</text></g><g><title>item_bodies_checking (17,605,116 samples, 19.66%)</title><rect x="27.9278%" y="293" width="19.6622%" height="15" fill="rgb(212,68,19)"/><text x="28.1778%" y="303.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,601,786 samples, 19.66%)</title><rect x="27.9315%" y="277" width="19.6585%" height="15" fill="rgb(240,187,13)"/><text x="28.1815%" y="287.50">typeck_item_bodies</text></g><g><title>typeck (17,576,595 samples, 19.63%)</title><rect x="27.9597%" y="261" width="19.6304%" height="15" fill="rgb(223,113,26)"/><text x="28.2097%" y="271.50">typeck</text></g><g><title>explicit_item_bounds (118,773 samples, 0.13%)</title><rect x="47.9154%" y="261" width="0.1327%" height="15" fill="rgb(206,192,2)"/><text x="48.1654%" y="271.50"></text></g><g><title>mir_const (160,922 samples, 0.18%)</title><rect x="50.1728%" y="197" width="0.1797%" height="15" fill="rgb(241,108,4)"/><text x="50.4228%" y="207.50"></text></g><g><title>mir_promoted (239,592 samples, 0.27%)</title><rect x="50.0883%" y="213" width="0.2676%" height="15" fill="rgb(247,173,49)"/><text x="50.3383%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (117,413 samples, 0.13%)</title><rect x="50.3922%" y="213" width="0.1311%" height="15" fill="rgb(224,114,35)"/><text x="50.6422%" y="223.50"></text></g><g><title>mir_borrowck (1,907,121 samples, 2.13%)</title><rect x="48.8421%" y="229" width="2.1300%" height="15" fill="rgb(245,159,27)"/><text x="49.0921%" y="239.50">m..</text></g><g><title>type_op_prove_predicate (340,093 samples, 0.38%)</title><rect x="50.5923%" y="213" width="0.3798%" height="15" fill="rgb(245,172,44)"/><text x="50.8423%" y="223.50"></text></g><g><title>associated_items (96,331 samples, 0.11%)</title><rect x="54.4102%" y="149" width="0.1076%" height="15" fill="rgb(236,23,11)"/><text x="54.6602%" y="159.50"></text></g><g><title>impl_trait_ref (155,552 samples, 0.17%)</title><rect x="54.8173%" y="53" width="0.1737%" height="15" fill="rgb(205,117,38)"/><text x="55.0673%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (135,502 samples, 0.15%)</title><rect x="54.8397%" y="37" width="0.1513%" height="15" fill="rgb(237,72,25)"/><text x="55.0897%" y="47.50"></text></g><g><title>coherent_trait (323,154 samples, 0.36%)</title><rect x="54.6653%" y="85" width="0.3609%" height="15" fill="rgb(244,70,9)"/><text x="54.9153%" y="95.50"></text></g><g><title>specialization_graph_of (320,904 samples, 0.36%)</title><rect x="54.6678%" y="69" width="0.3584%" height="15" fill="rgb(217,125,39)"/><text x="54.9178%" y="79.50"></text></g><g><title>adt_destructor (331,024 samples, 0.37%)</title><rect x="54.6573%" y="117" width="0.3697%" height="15" fill="rgb(235,36,10)"/><text x="54.9073%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (329,494 samples, 0.37%)</title><rect x="54.6590%" y="101" width="0.3680%" height="15" fill="rgb(251,123,47)"/><text x="54.9090%" y="111.50"></text></g><g><title>dropck_outlives (445,414 samples, 0.50%)</title><rect x="54.5400%" y="149" width="0.4975%" height="15" fill="rgb(221,13,13)"/><text x="54.7900%" y="159.50"></text></g><g><title>adt_dtorck_constraint (384,674 samples, 0.43%)</title><rect x="54.6078%" y="133" width="0.4296%" height="15" fill="rgb(238,131,9)"/><text x="54.8578%" y="143.50"></text></g><g><title>evaluate_obligation (407,904 samples, 0.46%)</title><rect x="55.0375%" y="149" width="0.4556%" height="15" fill="rgb(211,50,8)"/><text x="55.2875%" y="159.50"></text></g><g><title>is_copy_raw (343,222 samples, 0.38%)</title><rect x="55.6529%" y="149" width="0.3833%" height="15" fill="rgb(245,182,24)"/><text x="55.9029%" y="159.50"></text></g><g><title>evaluate_obligation (297,662 samples, 0.33%)</title><rect x="55.7038%" y="133" width="0.3324%" height="15" fill="rgb(242,14,37)"/><text x="55.9538%" y="143.50"></text></g><g><title>method_autoderef_steps (90,670 samples, 0.10%)</title><rect x="56.1141%" y="149" width="0.1013%" height="15" fill="rgb(246,228,12)"/><text x="56.3641%" y="159.50"></text></g><g><title>predicates_of (114,071 samples, 0.13%)</title><rect x="56.2224%" y="149" width="0.1274%" height="15" fill="rgb(213,55,15)"/><text x="56.4724%" y="159.50"></text></g><g><title>mir_built (4,722,632 samples, 5.27%)</title><rect x="51.1528%" y="181" width="5.2745%" height="15" fill="rgb(209,9,3)"/><text x="51.4028%" y="191.50">mir_bu..</text></g><g><title>typeck (4,524,680 samples, 5.05%)</title><rect x="51.3739%" y="165" width="5.0534%" height="15" fill="rgb(230,59,30)"/><text x="51.6239%" y="175.50">typeck</text></g><g><title>adt_drop_tys (94,702 samples, 0.11%)</title><rect x="56.8809%" y="133" width="0.1058%" height="15" fill="rgb(209,121,21)"/><text x="57.1309%" y="143.50"></text></g><g><title>needs_drop_raw (195,192 samples, 0.22%)</title><rect x="56.8555%" y="149" width="0.2180%" height="15" fill="rgb(220,109,13)"/><text x="57.1055%" y="159.50"></text></g><g><title>thir_body (194,851 samples, 0.22%)</title><rect x="57.0851%" y="149" width="0.2176%" height="15" fill="rgb(232,18,1)"/><text x="57.3351%" y="159.50"></text></g><g><title>mir_built (667,538 samples, 0.75%)</title><rect x="56.5644%" y="165" width="0.7455%" height="15" fill="rgb(215,41,42)"/><text x="56.8144%" y="175.50"></text></g><g><title>mir_const (5,605,611 samples, 6.26%)</title><rect x="51.0503%" y="213" width="6.2606%" height="15" fill="rgb(224,123,36)"/><text x="51.3003%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (5,539,551 samples, 6.19%)</title><rect x="51.1241%" y="197" width="6.1868%" height="15" fill="rgb(240,125,3)"/><text x="51.3741%" y="207.50">unsafety..</text></g><g><title>unsafety_check_result (791,239 samples, 0.88%)</title><rect x="56.4272%" y="181" width="0.8837%" height="15" fill="rgb(205,98,50)"/><text x="56.6772%" y="191.50"></text></g><g><title>mir_promoted (5,683,402 samples, 6.35%)</title><rect x="50.9721%" y="229" width="6.3475%" height="15" fill="rgb(205,185,37)"/><text x="51.2221%" y="239.50">mir_prom..</text></g><g><title>item_types_checking (8,794,728 samples, 9.82%)</title><rect x="47.5900%" y="293" width="9.8224%" height="15" fill="rgb(238,207,15)"/><text x="47.8400%" y="303.50">item_types_che..</text></g><g><title>check_mod_item_types (8,788,488 samples, 9.82%)</title><rect x="47.5970%" y="277" width="9.8154%" height="15" fill="rgb(213,199,42)"/><text x="47.8470%" y="287.50">check_mod_item..</text></g><g><title>type_of (8,365,013 samples, 9.34%)</title><rect x="48.0700%" y="261" width="9.3424%" height="15" fill="rgb(235,201,11)"/><text x="48.3200%" y="271.50">type_of</text></g><g><title>mir_borrowck (8,355,723 samples, 9.33%)</title><rect x="48.0803%" y="245" width="9.3321%" height="15" fill="rgb(207,46,11)"/><text x="48.3303%" y="255.50">mir_borrowck</text></g><g><title>fn_sig (386,523 samples, 0.43%)</title><rect x="57.6721%" y="261" width="0.4317%" height="15" fill="rgb(241,35,35)"/><text x="57.9221%" y="271.50"></text></g><g><title>is_late_bound_map (133,432 samples, 0.15%)</title><rect x="58.2357%" y="245" width="0.1490%" height="15" fill="rgb(243,32,47)"/><text x="58.4857%" y="255.50"></text></g><g><title>resolve_lifetimes (126,122 samples, 0.14%)</title><rect x="58.2439%" y="229" width="0.1409%" height="15" fill="rgb(247,202,23)"/><text x="58.4939%" y="239.50"></text></g><g><title>named_region_map (194,392 samples, 0.22%)</title><rect x="58.3847%" y="245" width="0.2171%" height="15" fill="rgb(219,102,11)"/><text x="58.6347%" y="255.50"></text></g><g><title>resolve_lifetimes (179,372 samples, 0.20%)</title><rect x="58.4015%" y="229" width="0.2003%" height="15" fill="rgb(243,110,44)"/><text x="58.6515%" y="239.50"></text></g><g><title>generics_of (465,575 samples, 0.52%)</title><rect x="58.1038%" y="261" width="0.5200%" height="15" fill="rgb(222,74,54)"/><text x="58.3538%" y="271.50"></text></g><g><title>late_bound_vars_map (130,241 samples, 0.15%)</title><rect x="59.2112%" y="213" width="0.1455%" height="15" fill="rgb(216,99,12)"/><text x="59.4612%" y="223.50"></text></g><g><title>resolve_lifetimes (122,341 samples, 0.14%)</title><rect x="59.2200%" y="197" width="0.1366%" height="15" fill="rgb(226,22,26)"/><text x="59.4700%" y="207.50"></text></g><g><title>explicit_predicates_of (587,438 samples, 0.66%)</title><rect x="58.7590%" y="229" width="0.6561%" height="15" fill="rgb(217,163,10)"/><text x="59.0090%" y="239.50"></text></g><g><title>predicates_of (750,569 samples, 0.84%)</title><rect x="58.6622%" y="261" width="0.8383%" height="15" fill="rgb(213,25,53)"/><text x="58.9122%" y="271.50"></text></g><g><title>predicates_defined_on (719,328 samples, 0.80%)</title><rect x="58.6970%" y="245" width="0.8034%" height="15" fill="rgb(252,105,26)"/><text x="58.9470%" y="255.50"></text></g><g><title>type_collecting (1,998,482 samples, 2.23%)</title><rect x="57.4148%" y="293" width="2.2320%" height="15" fill="rgb(220,39,43)"/><text x="57.6648%" y="303.50">t..</text></g><g><title>collect_mod_item_types (1,975,802 samples, 2.21%)</title><rect x="57.4401%" y="277" width="2.2067%" height="15" fill="rgb(229,68,48)"/><text x="57.6901%" y="287.50">c..</text></g><g><title>type_of (101,151 samples, 0.11%)</title><rect x="59.5338%" y="261" width="0.1130%" height="15" fill="rgb(252,8,32)"/><text x="59.7838%" y="271.50"></text></g><g><title>evaluate_obligation (112,622 samples, 0.13%)</title><rect x="59.9006%" y="261" width="0.1258%" height="15" fill="rgb(223,20,43)"/><text x="60.1506%" y="271.50"></text></g><g><title>check_impl_item_well_formed (333,163 samples, 0.37%)</title><rect x="59.7347%" y="277" width="0.3721%" height="15" fill="rgb(229,81,49)"/><text x="59.9847%" y="287.50"></text></g><g><title>adt_sized_constraint (117,061 samples, 0.13%)</title><rect x="61.4172%" y="261" width="0.1307%" height="15" fill="rgb(236,28,36)"/><text x="61.6672%" y="271.50"></text></g><g><title>evaluate_obligation (212,663 samples, 0.24%)</title><rect x="61.5497%" y="261" width="0.2375%" height="15" fill="rgb(249,185,26)"/><text x="61.7997%" y="271.50"></text></g><g><title>implied_outlives_bounds (194,703 samples, 0.22%)</title><rect x="61.8006%" y="261" width="0.2175%" height="15" fill="rgb(249,174,33)"/><text x="62.0506%" y="271.50"></text></g><g><title>param_env (222,024 samples, 0.25%)</title><rect x="62.0180%" y="261" width="0.2480%" height="15" fill="rgb(233,201,37)"/><text x="62.2680%" y="271.50"></text></g><g><title>predicates_of (125,021 samples, 0.14%)</title><rect x="62.2660%" y="261" width="0.1396%" height="15" fill="rgb(221,78,26)"/><text x="62.5160%" y="271.50"></text></g><g><title>region_scope_tree (113,821 samples, 0.13%)</title><rect x="62.4056%" y="261" width="0.1271%" height="15" fill="rgb(250,127,30)"/><text x="62.6556%" y="271.50"></text></g><g><title>trait_impls_of (478,967 samples, 0.53%)</title><rect x="62.5351%" y="261" width="0.5349%" height="15" fill="rgb(230,49,44)"/><text x="62.7851%" y="271.50"></text></g><g><title>implementations_of_trait (149,463 samples, 0.17%)</title><rect x="62.9031%" y="245" width="0.1669%" height="15" fill="rgb(229,67,23)"/><text x="63.1531%" y="255.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (98,151 samples, 0.11%)</title><rect x="62.9604%" y="229" width="0.1096%" height="15" fill="rgb(249,83,47)"/><text x="63.2104%" y="239.50"></text></g><g><title>check_item_well_formed (2,708,621 samples, 3.03%)</title><rect x="60.1068%" y="277" width="3.0251%" height="15" fill="rgb(215,43,3)"/><text x="60.3568%" y="287.50">che..</text></g><g><title>analysis (55,955,254 samples, 62.49%)</title><rect x="0.7871%" y="325" width="62.4935%" height="15" fill="rgb(238,154,13)"/><text x="1.0371%" y="335.50">analysis</text></g><g><title>type_check_crate (37,852,752 samples, 42.28%)</title><rect x="21.0048%" y="309" width="42.2758%" height="15" fill="rgb(219,56,2)"/><text x="21.2548%" y="319.50">type_check_crate</text></g><g><title>wf_checking (3,251,226 samples, 3.63%)</title><rect x="59.6494%" y="293" width="3.6311%" height="15" fill="rgb(233,0,4)"/><text x="59.8994%" y="303.50">wf_c..</text></g><g><title>check_trait_item_well_formed (133,062 samples, 0.15%)</title><rect x="63.1319%" y="277" width="0.1486%" height="15" fill="rgb(235,30,7)"/><text x="63.3819%" y="287.50"></text></g><g><title>codegen_crate (523,226 samples, 0.58%)</title><rect x="63.2899%" y="325" width="0.5844%" height="15" fill="rgb(250,79,13)"/><text x="63.5399%" y="335.50"></text></g><g><title>AST_validation (176,112 samples, 0.20%)</title><rect x="64.0876%" y="309" width="0.1967%" height="15" fill="rgb(211,146,34)"/><text x="64.3376%" y="319.50"></text></g><g><title>metadata_load_macro (197,483 samples, 0.22%)</title><rect x="83.2183%" y="277" width="0.2206%" height="15" fill="rgb(228,22,38)"/><text x="83.4683%" y="287.50"></text></g><g><title>metadata_register_crate (2,425,657 samples, 2.71%)</title><rect x="83.4389%" y="277" width="2.7091%" height="15" fill="rgb(235,168,5)"/><text x="83.6889%" y="287.50">me..</text></g><g><title>metadata_register_crate (882,200 samples, 0.99%)</title><rect x="85.1627%" y="261" width="0.9853%" height="15" fill="rgb(221,155,16)"/><text x="85.4127%" y="271.50"></text></g><g><title>macro_expand_crate (19,775,141 samples, 22.09%)</title><rect x="64.4487%" y="309" width="22.0858%" height="15" fill="rgb(215,215,53)"/><text x="64.6987%" y="319.50">macro_expand_crate</text></g><g><title>expand_crate (19,753,301 samples, 22.06%)</title><rect x="64.4731%" y="293" width="22.0614%" height="15" fill="rgb(223,4,10)"/><text x="64.7231%" y="303.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (346,123 samples, 0.39%)</title><rect x="86.1479%" y="277" width="0.3866%" height="15" fill="rgb(234,103,6)"/><text x="86.3979%" y="287.50"></text></g><g><title>finalize_imports (343,674 samples, 0.38%)</title><rect x="86.6432%" y="293" width="0.3838%" height="15" fill="rgb(227,97,0)"/><text x="86.8932%" y="303.50"></text></g><g><title>late_resolve_crate (1,870,571 samples, 2.09%)</title><rect x="87.0835%" y="293" width="2.0891%" height="15" fill="rgb(234,150,53)"/><text x="87.3335%" y="303.50">l..</text></g><g><title>configure_and_expand (22,796,285 samples, 25.46%)</title><rect x="63.8743%" y="325" width="25.4600%" height="15" fill="rgb(228,201,54)"/><text x="64.1243%" y="335.50">configure_and_expand</text></g><g><title>resolve_crate (2,418,427 samples, 2.70%)</title><rect x="86.6332%" y="309" width="2.7010%" height="15" fill="rgb(222,22,37)"/><text x="86.8832%" y="319.50">re..</text></g><g><title>drop_ast (193,672 samples, 0.22%)</title><rect x="89.3343%" y="325" width="0.2163%" height="15" fill="rgb(237,53,32)"/><text x="89.5843%" y="335.50"></text></g><g><title>early_lint_checks (346,204 samples, 0.39%)</title><rect x="89.5690%" y="325" width="0.3867%" height="15" fill="rgb(233,25,53)"/><text x="89.8190%" y="335.50"></text></g><g><title>free_global_ctxt (2,989,454 samples, 3.34%)</title><rect x="89.9556%" y="325" width="3.3388%" height="15" fill="rgb(210,40,34)"/><text x="90.2056%" y="335.50">fre..</text></g><g><title>generate_crate_metadata (907,800 samples, 1.01%)</title><rect x="93.2944%" y="325" width="1.0139%" height="15" fill="rgb(241,220,44)"/><text x="93.5444%" y="335.50"></text></g><g><title>hir_lowering (3,426,178 samples, 3.83%)</title><rect x="94.3082%" y="325" width="3.8265%" height="15" fill="rgb(235,28,35)"/><text x="94.5582%" y="335.50">hir_..</text></g><g><title>parse_crate (343,234 samples, 0.38%)</title><rect x="98.1898%" y="325" width="0.3833%" height="15" fill="rgb(210,56,17)"/><text x="98.4398%" y="335.50"></text></g><g><title>prepare_outputs (264,013 samples, 0.29%)</title><rect x="98.5819%" y="325" width="0.2949%" height="15" fill="rgb(224,130,29)"/><text x="98.8319%" y="335.50"></text></g><g><title>self_profile_alloc_query_strings (584,736 samples, 0.65%)</title><rect x="98.8768%" y="325" width="0.6531%" height="15" fill="rgb(235,212,8)"/><text x="99.1268%" y="335.50"></text></g><g><title>setup_global_ctxt (112,781 samples, 0.13%)</title><rect x="99.5413%" y="325" width="0.1260%" height="15" fill="rgb(223,33,50)"/><text x="99.7913%" y="335.50"></text></g><g><title>all (89,537,740 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(219,149,13)"/><text x="0.2500%" y="367.50"></text></g><g><title>rustc (89,537,740 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(250,156,29)"/><text x="0.2500%" y="351.50">rustc</text></g><g><title>write_crate_metadata (297,964 samples, 0.33%)</title><rect x="99.6672%" y="325" width="0.3328%" height="15" fill="rgb(216,193,19)"/><text x="99.9172%" y="335.50"></text></g></svg></svg>