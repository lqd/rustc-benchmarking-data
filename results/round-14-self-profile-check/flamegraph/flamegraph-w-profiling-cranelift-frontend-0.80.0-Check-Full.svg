<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,081,371 samples, 0.43%)</title><rect x="15.0413%" y="133" width="0.4278%" height="15" fill="rgb(227,0,7)"/><text x="15.2913%" y="143.50"></text></g><g><title>item_attrs (724,566 samples, 0.29%)</title><rect x="16.0950%" y="101" width="0.2867%" height="15" fill="rgb(217,0,24)"/><text x="16.3450%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (686,405 samples, 0.27%)</title><rect x="16.1101%" y="85" width="0.2716%" height="15" fill="rgb(221,193,54)"/><text x="16.3601%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,072,551 samples, 0.42%)</title><rect x="15.9809%" y="117" width="0.4243%" height="15" fill="rgb(248,212,6)"/><text x="16.2309%" y="127.50"></text></g><g><title>is_copy_raw (443,184 samples, 0.18%)</title><rect x="19.7041%" y="69" width="0.1753%" height="15" fill="rgb(208,68,35)"/><text x="19.9541%" y="79.50"></text></g><g><title>evaluate_obligation (369,453 samples, 0.15%)</title><rect x="19.7333%" y="53" width="0.1462%" height="15" fill="rgb(232,128,0)"/><text x="19.9833%" y="63.50"></text></g><g><title>param_env (712,067 samples, 0.28%)</title><rect x="19.8794%" y="69" width="0.2817%" height="15" fill="rgb(207,160,47)"/><text x="20.1294%" y="79.50"></text></g><g><title>adt_drop_tys (1,440,199 samples, 0.57%)</title><rect x="19.5950%" y="85" width="0.5698%" height="15" fill="rgb(228,23,34)"/><text x="19.8450%" y="95.50"></text></g><g><title>is_copy_raw (1,518,593 samples, 0.60%)</title><rect x="20.1648%" y="85" width="0.6008%" height="15" fill="rgb(218,30,26)"/><text x="20.4148%" y="95.50"></text></g><g><title>evaluate_obligation (1,252,802 samples, 0.50%)</title><rect x="20.2700%" y="69" width="0.4957%" height="15" fill="rgb(220,122,19)"/><text x="20.5200%" y="79.50"></text></g><g><title>needs_drop_raw (3,275,127 samples, 1.30%)</title><rect x="19.4735%" y="101" width="1.2958%" height="15" fill="rgb(250,228,42)"/><text x="19.7235%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (852,828 samples, 0.34%)</title><rect x="21.0070%" y="85" width="0.3374%" height="15" fill="rgb(240,193,28)"/><text x="21.2570%" y="95.50"></text></g><g><title>impl_parent (743,927 samples, 0.29%)</title><rect x="22.0751%" y="69" width="0.2943%" height="15" fill="rgb(216,20,37)"/><text x="22.3251%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (445,511 samples, 0.18%)</title><rect x="22.1932%" y="53" width="0.1763%" height="15" fill="rgb(206,188,39)"/><text x="22.4432%" y="63.50"></text></g><g><title>specialization_graph_of (4,666,063 samples, 1.85%)</title><rect x="21.4374%" y="85" width="1.8461%" height="15" fill="rgb(217,207,13)"/><text x="21.6874%" y="95.50">s..</text></g><g><title>impl_trait_ref (2,310,328 samples, 0.91%)</title><rect x="22.3694%" y="69" width="0.9141%" height="15" fill="rgb(231,73,38)"/><text x="22.6194%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,779,844 samples, 0.70%)</title><rect x="22.5793%" y="53" width="0.7042%" height="15" fill="rgb(225,20,46)"/><text x="22.8293%" y="63.50"></text></g><g><title>resolve_instance (6,603,216 samples, 2.61%)</title><rect x="20.7693%" y="101" width="2.6125%" height="15" fill="rgb(210,31,41)"/><text x="21.0193%" y="111.50">re..</text></g><g><title>thir_body (3,078,944 samples, 1.22%)</title><rect x="23.4054%" y="101" width="1.2182%" height="15" fill="rgb(221,200,47)"/><text x="23.6554%" y="111.50"></text></g><g><title>mir_const (26,326,847 samples, 10.42%)</title><rect x="14.2235%" y="149" width="10.4161%" height="15" fill="rgb(226,26,5)"/><text x="14.4735%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (23,178,520 samples, 9.17%)</title><rect x="15.4692%" y="133" width="9.1704%" height="15" fill="rgb(249,33,26)"/><text x="15.7192%" y="143.50">unsafety_chec..</text></g><g><title>mir_built (20,802,540 samples, 8.23%)</title><rect x="16.4092%" y="117" width="8.2304%" height="15" fill="rgb(235,183,28)"/><text x="16.6592%" y="127.50">mir_built</text></g><g><title>mir_promoted (28,481,282 samples, 11.27%)</title><rect x="13.4353%" y="165" width="11.2685%" height="15" fill="rgb(221,5,38)"/><text x="13.6853%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,150,495 samples, 0.46%)</title><rect x="24.7054%" y="165" width="0.4552%" height="15" fill="rgb(247,18,42)"/><text x="24.9554%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,622,618 samples, 0.64%)</title><rect x="25.1606%" y="165" width="0.6420%" height="15" fill="rgb(241,131,45)"/><text x="25.4106%" y="175.50"></text></g><g><title>normalize_projection_ty (1,139,852 samples, 0.45%)</title><rect x="25.3516%" y="149" width="0.4510%" height="15" fill="rgb(249,31,29)"/><text x="25.6016%" y="159.50"></text></g><g><title>type_op_normalize_predicate (321,505 samples, 0.13%)</title><rect x="25.8025%" y="165" width="0.1272%" height="15" fill="rgb(225,111,53)"/><text x="26.0525%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,682,726 samples, 1.85%)</title><rect x="25.9297%" y="165" width="1.8527%" height="15" fill="rgb(238,160,17)"/><text x="26.1797%" y="175.50">t..</text></g><g><title>evaluate_obligation (361,202 samples, 0.14%)</title><rect x="27.6395%" y="149" width="0.1429%" height="15" fill="rgb(214,148,48)"/><text x="27.8895%" y="159.50"></text></g><g><title>MIR_borrow_checking (68,748,068 samples, 27.20%)</title><rect x="0.5874%" y="197" width="27.1998%" height="15" fill="rgb(232,36,49)"/><text x="0.8374%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (68,510,775 samples, 27.11%)</title><rect x="0.6812%" y="181" width="27.1059%" height="15" fill="rgb(209,103,24)"/><text x="0.9312%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (342,572 samples, 0.14%)</title><rect x="27.8541%" y="197" width="0.1355%" height="15" fill="rgb(229,88,8)"/><text x="28.1041%" y="207.50"></text></g><g><title>codegen_fn_attrs (420,014 samples, 0.17%)</title><rect x="28.1808%" y="165" width="0.1662%" height="15" fill="rgb(213,181,19)"/><text x="28.4308%" y="175.50"></text></g><g><title>check_mod_attrs (877,981 samples, 0.35%)</title><rect x="27.9997%" y="181" width="0.3474%" height="15" fill="rgb(254,191,54)"/><text x="28.2497%" y="191.50"></text></g><g><title>lint_levels (278,653 samples, 0.11%)</title><rect x="28.6129%" y="165" width="0.1102%" height="15" fill="rgb(241,83,37)"/><text x="28.8629%" y="175.50"></text></g><g><title>lookup_deprecation_entry (271,334 samples, 0.11%)</title><rect x="28.7232%" y="165" width="0.1074%" height="15" fill="rgb(233,36,39)"/><text x="28.9732%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (949,300 samples, 0.38%)</title><rect x="28.4983%" y="181" width="0.3756%" height="15" fill="rgb(226,3,54)"/><text x="28.7483%" y="191.50"></text></g><g><title>misc_checking_1 (2,304,006 samples, 0.91%)</title><rect x="27.9899%" y="197" width="0.9116%" height="15" fill="rgb(245,192,40)"/><text x="28.2399%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,353,045 samples, 0.54%)</title><rect x="28.9023%" y="181" width="0.5353%" height="15" fill="rgb(238,167,29)"/><text x="29.1523%" y="191.50"></text></g><g><title>check_mod_liveness (1,120,993 samples, 0.44%)</title><rect x="28.9941%" y="165" width="0.4435%" height="15" fill="rgb(232,182,51)"/><text x="29.2441%" y="175.50"></text></g><g><title>misc_checking_2 (3,059,024 samples, 1.21%)</title><rect x="28.9014%" y="197" width="1.2103%" height="15" fill="rgb(231,60,39)"/><text x="29.1514%" y="207.50"></text></g><g><title>match_checking (1,703,869 samples, 0.67%)</title><rect x="29.4376%" y="181" width="0.6741%" height="15" fill="rgb(208,69,12)"/><text x="29.6876%" y="191.50"></text></g><g><title>check_match (1,646,759 samples, 0.65%)</title><rect x="29.4602%" y="165" width="0.6515%" height="15" fill="rgb(235,93,37)"/><text x="29.7102%" y="175.50"></text></g><g><title>check_private_in_public (419,384 samples, 0.17%)</title><rect x="30.1157%" y="181" width="0.1659%" height="15" fill="rgb(213,116,39)"/><text x="30.3657%" y="191.50"></text></g><g><title>death_checking (853,230 samples, 0.34%)</title><rect x="30.2816%" y="181" width="0.3376%" height="15" fill="rgb(222,207,29)"/><text x="30.5316%" y="191.50"></text></g><g><title>param_env (489,284 samples, 0.19%)</title><rect x="31.1801%" y="149" width="0.1936%" height="15" fill="rgb(206,96,30)"/><text x="31.4301%" y="159.50"></text></g><g><title>crate_lints (3,212,345 samples, 1.27%)</title><rect x="30.6197%" y="165" width="1.2709%" height="15" fill="rgb(218,138,4)"/><text x="30.8697%" y="175.50"></text></g><g><title>type_of (1,231,905 samples, 0.49%)</title><rect x="31.4032%" y="149" width="0.4874%" height="15" fill="rgb(250,191,14)"/><text x="31.6532%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (958,884 samples, 0.38%)</title><rect x="31.5113%" y="133" width="0.3794%" height="15" fill="rgb(239,60,40)"/><text x="31.7613%" y="143.50"></text></g><g><title>lint_checking (4,359,118 samples, 1.72%)</title><rect x="30.6192%" y="181" width="1.7247%" height="15" fill="rgb(206,27,48)"/><text x="30.8692%" y="191.50"></text></g><g><title>module_lints (1,145,422 samples, 0.45%)</title><rect x="31.8906%" y="165" width="0.4532%" height="15" fill="rgb(225,35,8)"/><text x="32.1406%" y="175.50"></text></g><g><title>lint_mod (1,139,032 samples, 0.45%)</title><rect x="31.8932%" y="149" width="0.4507%" height="15" fill="rgb(250,213,24)"/><text x="32.1432%" y="159.50"></text></g><g><title>privacy_access_levels (574,767 samples, 0.23%)</title><rect x="32.3438%" y="181" width="0.2274%" height="15" fill="rgb(247,123,22)"/><text x="32.5938%" y="191.50"></text></g><g><title>privacy_checking_modules (2,070,903 samples, 0.82%)</title><rect x="32.5712%" y="181" width="0.8193%" height="15" fill="rgb(231,138,38)"/><text x="32.8212%" y="191.50"></text></g><g><title>check_mod_privacy (2,066,953 samples, 0.82%)</title><rect x="32.5728%" y="165" width="0.8178%" height="15" fill="rgb(231,145,46)"/><text x="32.8228%" y="175.50"></text></g><g><title>misc_checking_3 (8,312,832 samples, 3.29%)</title><rect x="30.1117%" y="197" width="3.2889%" height="15" fill="rgb(251,118,11)"/><text x="30.3617%" y="207.50">mis..</text></g><g><title>adt_destructor (349,313 samples, 0.14%)</title><rect x="33.4721%" y="149" width="0.1382%" height="15" fill="rgb(217,147,25)"/><text x="33.7221%" y="159.50"></text></g><g><title>coherent_trait (341,893 samples, 0.14%)</title><rect x="33.4750%" y="133" width="0.1353%" height="15" fill="rgb(247,81,37)"/><text x="33.7250%" y="143.50"></text></g><g><title>specialization_graph_of (340,423 samples, 0.13%)</title><rect x="33.4756%" y="117" width="0.1347%" height="15" fill="rgb(209,12,38)"/><text x="33.7256%" y="127.50"></text></g><g><title>impl_parent (2,959,414 samples, 1.17%)</title><rect x="35.5351%" y="133" width="1.1709%" height="15" fill="rgb(227,1,9)"/><text x="35.7851%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,601,859 samples, 0.63%)</title><rect x="36.0722%" y="117" width="0.6338%" height="15" fill="rgb(248,47,43)"/><text x="36.3222%" y="127.50"></text></g><g><title>impl_trait_ref (6,210,954 samples, 2.46%)</title><rect x="36.7059%" y="133" width="2.4573%" height="15" fill="rgb(221,10,30)"/><text x="36.9559%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,903,854 samples, 1.94%)</title><rect x="37.2231%" y="117" width="1.9402%" height="15" fill="rgb(210,229,1)"/><text x="37.4731%" y="127.50">m..</text></g><g><title>coherent_trait (15,387,820 samples, 6.09%)</title><rect x="33.4583%" y="165" width="6.0881%" height="15" fill="rgb(222,148,37)"/><text x="33.7083%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (14,772,834 samples, 5.84%)</title><rect x="33.7016%" y="149" width="5.8448%" height="15" fill="rgb(234,67,33)"/><text x="33.9516%" y="159.50">special..</text></g><g><title>trait_impls_of (965,943 samples, 0.38%)</title><rect x="39.1642%" y="133" width="0.3822%" height="15" fill="rgb(247,98,35)"/><text x="39.4142%" y="143.50"></text></g><g><title>implementations_of_trait (274,525 samples, 0.11%)</title><rect x="39.4378%" y="117" width="0.1086%" height="15" fill="rgb(247,138,52)"/><text x="39.6878%" y="127.50"></text></g><g><title>coherence_checking (15,490,351 samples, 6.13%)</title><rect x="33.4502%" y="181" width="6.1287%" height="15" fill="rgb(213,79,30)"/><text x="33.7002%" y="191.50">coherenc..</text></g><g><title>adt_sized_constraint (269,442 samples, 0.11%)</title><rect x="59.0558%" y="133" width="0.1066%" height="15" fill="rgb(246,177,23)"/><text x="59.3058%" y="143.50"></text></g><g><title>associated_item (923,233 samples, 0.37%)</title><rect x="59.3118%" y="117" width="0.3653%" height="15" fill="rgb(230,62,27)"/><text x="59.5618%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (713,959 samples, 0.28%)</title><rect x="59.3946%" y="101" width="0.2825%" height="15" fill="rgb(216,154,8)"/><text x="59.6446%" y="111.50"></text></g><g><title>associated_items (1,354,845 samples, 0.54%)</title><rect x="59.1633%" y="133" width="0.5360%" height="15" fill="rgb(244,35,45)"/><text x="59.4133%" y="143.50"></text></g><g><title>adt_dtorck_constraint (264,301 samples, 0.10%)</title><rect x="60.0093%" y="101" width="0.1046%" height="15" fill="rgb(251,115,12)"/><text x="60.2593%" y="111.50"></text></g><g><title>dropck_outlives (899,549 samples, 0.36%)</title><rect x="59.7838%" y="133" width="0.3559%" height="15" fill="rgb(240,54,50)"/><text x="60.0338%" y="143.50"></text></g><g><title>adt_dtorck_constraint (510,883 samples, 0.20%)</title><rect x="59.9376%" y="117" width="0.2021%" height="15" fill="rgb(233,84,52)"/><text x="60.1876%" y="127.50"></text></g><g><title>predicates_of (634,026 samples, 0.25%)</title><rect x="61.6034%" y="117" width="0.2508%" height="15" fill="rgb(207,117,47)"/><text x="61.8534%" y="127.50"></text></g><g><title>predicates_defined_on (374,634 samples, 0.15%)</title><rect x="61.7061%" y="101" width="0.1482%" height="15" fill="rgb(249,43,39)"/><text x="61.9561%" y="111.50"></text></g><g><title>evaluate_obligation (255,842 samples, 0.10%)</title><rect x="62.0452%" y="101" width="0.1012%" height="15" fill="rgb(209,38,44)"/><text x="62.2952%" y="111.50"></text></g><g><title>specializes (1,227,145 samples, 0.49%)</title><rect x="61.8543%" y="117" width="0.4855%" height="15" fill="rgb(236,212,23)"/><text x="62.1043%" y="127.50"></text></g><g><title>param_env (488,658 samples, 0.19%)</title><rect x="62.1465%" y="101" width="0.1933%" height="15" fill="rgb(242,79,21)"/><text x="62.3965%" y="111.50"></text></g><g><title>trait_impls_of (761,979 samples, 0.30%)</title><rect x="62.3501%" y="117" width="0.3015%" height="15" fill="rgb(211,96,35)"/><text x="62.6001%" y="127.50"></text></g><g><title>implementations_of_trait (311,705 samples, 0.12%)</title><rect x="62.5283%" y="101" width="0.1233%" height="15" fill="rgb(253,215,40)"/><text x="62.7783%" y="111.50"></text></g><g><title>evaluate_obligation (6,352,938 samples, 2.51%)</title><rect x="60.1397%" y="133" width="2.5135%" height="15" fill="rgb(211,81,21)"/><text x="60.3897%" y="143.50">ev..</text></g><g><title>fn_sig (344,341 samples, 0.14%)</title><rect x="62.6791%" y="133" width="0.1362%" height="15" fill="rgb(208,190,38)"/><text x="62.9291%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (289,781 samples, 0.11%)</title><rect x="62.7007%" y="117" width="0.1147%" height="15" fill="rgb(235,213,38)"/><text x="62.9507%" y="127.50"></text></g><g><title>generics_of (1,428,101 samples, 0.57%)</title><rect x="62.8153%" y="133" width="0.5650%" height="15" fill="rgb(237,122,38)"/><text x="63.0653%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (1,061,696 samples, 0.42%)</title><rect x="62.9603%" y="117" width="0.4201%" height="15" fill="rgb(244,218,35)"/><text x="63.2103%" y="127.50"></text></g><g><title>evaluate_obligation (476,114 samples, 0.19%)</title><rect x="63.8766%" y="117" width="0.1884%" height="15" fill="rgb(240,68,47)"/><text x="64.1266%" y="127.50"></text></g><g><title>method_autoderef_steps (921,520 samples, 0.36%)</title><rect x="63.7080%" y="133" width="0.3646%" height="15" fill="rgb(210,16,53)"/><text x="63.9580%" y="143.50"></text></g><g><title>explicit_predicates_of (258,895 samples, 0.10%)</title><rect x="64.4178%" y="101" width="0.1024%" height="15" fill="rgb(235,124,12)"/><text x="64.6678%" y="111.50"></text></g><g><title>predicates_of (988,321 samples, 0.39%)</title><rect x="64.1779%" y="133" width="0.3910%" height="15" fill="rgb(224,169,11)"/><text x="64.4279%" y="143.50"></text></g><g><title>predicates_defined_on (632,588 samples, 0.25%)</title><rect x="64.3186%" y="117" width="0.2503%" height="15" fill="rgb(250,166,2)"/><text x="64.5686%" y="127.50"></text></g><g><title>associated_item (508,286 samples, 0.20%)</title><rect x="70.2626%" y="101" width="0.2011%" height="15" fill="rgb(242,216,29)"/><text x="70.5126%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (416,165 samples, 0.16%)</title><rect x="70.2990%" y="85" width="0.1647%" height="15" fill="rgb(230,116,27)"/><text x="70.5490%" y="95.50"></text></g><g><title>associated_items (719,282 samples, 0.28%)</title><rect x="70.1916%" y="117" width="0.2846%" height="15" fill="rgb(228,99,48)"/><text x="70.4416%" y="127.50"></text></g><g><title>dropck_outlives (550,487 samples, 0.22%)</title><rect x="70.5097%" y="117" width="0.2178%" height="15" fill="rgb(253,11,6)"/><text x="70.7597%" y="127.50"></text></g><g><title>adt_dtorck_constraint (389,975 samples, 0.15%)</title><rect x="70.5732%" y="101" width="0.1543%" height="15" fill="rgb(247,143,39)"/><text x="70.8232%" y="111.50"></text></g><g><title>mir_borrowck (346,574 samples, 0.14%)</title><rect x="70.9086%" y="37" width="0.1371%" height="15" fill="rgb(236,97,10)"/><text x="71.1586%" y="47.50"></text></g><g><title>mir_for_ctfe (479,545 samples, 0.19%)</title><rect x="70.8562%" y="69" width="0.1897%" height="15" fill="rgb(233,208,19)"/><text x="71.1062%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (440,905 samples, 0.17%)</title><rect x="70.8715%" y="53" width="0.1744%" height="15" fill="rgb(216,164,2)"/><text x="71.1215%" y="63.50"></text></g><g><title>eval_to_const_value_raw (973,391 samples, 0.39%)</title><rect x="70.7275%" y="117" width="0.3851%" height="15" fill="rgb(220,129,5)"/><text x="70.9775%" y="127.50"></text></g><g><title>eval_to_const_value_raw (958,220 samples, 0.38%)</title><rect x="70.7335%" y="101" width="0.3791%" height="15" fill="rgb(242,17,10)"/><text x="70.9835%" y="111.50"></text></g><g><title>eval_to_allocation_raw (955,870 samples, 0.38%)</title><rect x="70.7344%" y="85" width="0.3782%" height="15" fill="rgb(242,107,0)"/><text x="70.9844%" y="95.50"></text></g><g><title>adt_sized_constraint (454,196 samples, 0.18%)</title><rect x="71.7153%" y="101" width="0.1797%" height="15" fill="rgb(251,28,31)"/><text x="71.9653%" y="111.50"></text></g><g><title>trait_impls_of (869,536 samples, 0.34%)</title><rect x="72.1291%" y="101" width="0.3440%" height="15" fill="rgb(233,223,10)"/><text x="72.3791%" y="111.50"></text></g><g><title>implementations_of_trait (262,040 samples, 0.10%)</title><rect x="72.3695%" y="85" width="0.1037%" height="15" fill="rgb(215,21,27)"/><text x="72.6195%" y="95.50"></text></g><g><title>evaluate_obligation (3,439,674 samples, 1.36%)</title><rect x="71.1126%" y="117" width="1.3609%" height="15" fill="rgb(232,23,21)"/><text x="71.3626%" y="127.50"></text></g><g><title>method_autoderef_steps (367,124 samples, 0.15%)</title><rect x="72.8422%" y="117" width="0.1453%" height="15" fill="rgb(244,5,23)"/><text x="73.0922%" y="127.50"></text></g><g><title>predicates_of (669,508 samples, 0.26%)</title><rect x="72.9974%" y="117" width="0.2649%" height="15" fill="rgb(226,81,46)"/><text x="73.2474%" y="127.50"></text></g><g><title>predicates_defined_on (298,074 samples, 0.12%)</title><rect x="73.1443%" y="101" width="0.1179%" height="15" fill="rgb(247,70,30)"/><text x="73.3943%" y="111.50"></text></g><g><title>typeck (22,073,771 samples, 8.73%)</title><rect x="64.6855%" y="133" width="8.7334%" height="15" fill="rgb(212,68,19)"/><text x="64.9355%" y="143.50">typeck</text></g><g><title>item_bodies_checking (85,609,296 samples, 33.87%)</title><rect x="39.5943%" y="181" width="33.8708%" height="15" fill="rgb(240,187,13)"/><text x="39.8443%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (85,605,356 samples, 33.87%)</title><rect x="39.5958%" y="165" width="33.8693%" height="15" fill="rgb(223,113,26)"/><text x="39.8458%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (85,448,553 samples, 33.81%)</title><rect x="39.6579%" y="149" width="33.8072%" height="15" fill="rgb(206,192,2)"/><text x="39.9079%" y="159.50">typeck</text></g><g><title>item_types_checking (868,469 samples, 0.34%)</title><rect x="73.4651%" y="181" width="0.3436%" height="15" fill="rgb(241,108,4)"/><text x="73.7151%" y="191.50"></text></g><g><title>check_mod_item_types (862,659 samples, 0.34%)</title><rect x="73.4674%" y="165" width="0.3413%" height="15" fill="rgb(247,173,49)"/><text x="73.7174%" y="175.50"></text></g><g><title>fn_sig (487,225 samples, 0.19%)</title><rect x="73.9722%" y="149" width="0.1928%" height="15" fill="rgb(224,114,35)"/><text x="74.2222%" y="159.50"></text></g><g><title>generics_of (621,936 samples, 0.25%)</title><rect x="74.1649%" y="149" width="0.2461%" height="15" fill="rgb(245,159,27)"/><text x="74.4149%" y="159.50"></text></g><g><title>predicates_of (821,079 samples, 0.32%)</title><rect x="74.4305%" y="149" width="0.3249%" height="15" fill="rgb(245,172,44)"/><text x="74.6805%" y="159.50"></text></g><g><title>predicates_defined_on (751,908 samples, 0.30%)</title><rect x="74.4578%" y="133" width="0.2975%" height="15" fill="rgb(236,23,11)"/><text x="74.7078%" y="143.50"></text></g><g><title>inferred_outlives_of (481,345 samples, 0.19%)</title><rect x="74.5649%" y="117" width="0.1904%" height="15" fill="rgb(205,117,38)"/><text x="74.8149%" y="127.50"></text></g><g><title>inferred_outlives_crate (451,605 samples, 0.18%)</title><rect x="74.5766%" y="101" width="0.1787%" height="15" fill="rgb(237,72,25)"/><text x="74.8266%" y="111.50"></text></g><g><title>type_collecting (2,541,067 samples, 1.01%)</title><rect x="73.8111%" y="181" width="1.0054%" height="15" fill="rgb(244,70,9)"/><text x="74.0611%" y="191.50"></text></g><g><title>collect_mod_item_types (2,525,617 samples, 1.00%)</title><rect x="73.8172%" y="165" width="0.9992%" height="15" fill="rgb(217,125,39)"/><text x="74.0672%" y="175.50"></text></g><g><title>evaluate_obligation (971,698 samples, 0.38%)</title><rect x="75.9708%" y="149" width="0.3844%" height="15" fill="rgb(235,36,10)"/><text x="76.2208%" y="159.50"></text></g><g><title>implied_outlives_bounds (285,737 samples, 0.11%)</title><rect x="76.3552%" y="149" width="0.1131%" height="15" fill="rgb(251,123,47)"/><text x="76.6052%" y="159.50"></text></g><g><title>param_env (369,773 samples, 0.15%)</title><rect x="76.4683%" y="149" width="0.1463%" height="15" fill="rgb(221,13,13)"/><text x="76.7183%" y="159.50"></text></g><g><title>check_impl_item_well_formed (5,278,710 samples, 2.09%)</title><rect x="74.9425%" y="165" width="2.0885%" height="15" fill="rgb(238,131,9)"/><text x="75.1925%" y="175.50">c..</text></g><g><title>region_scope_tree (949,551 samples, 0.38%)</title><rect x="76.6553%" y="149" width="0.3757%" height="15" fill="rgb(211,50,8)"/><text x="76.9053%" y="159.50"></text></g><g><title>adt_sized_constraint (298,485 samples, 0.12%)</title><rect x="77.5705%" y="101" width="0.1181%" height="15" fill="rgb(245,182,24)"/><text x="77.8205%" y="111.50"></text></g><g><title>adt_sized_constraint (398,135 samples, 0.16%)</title><rect x="77.5337%" y="117" width="0.1575%" height="15" fill="rgb(242,14,37)"/><text x="77.7837%" y="127.50"></text></g><g><title>adt_sized_constraint (476,525 samples, 0.19%)</title><rect x="77.5055%" y="133" width="0.1885%" height="15" fill="rgb(246,228,12)"/><text x="77.7555%" y="143.50"></text></g><g><title>evaluate_obligation (860,360 samples, 0.34%)</title><rect x="77.3984%" y="149" width="0.3404%" height="15" fill="rgb(213,55,15)"/><text x="77.6484%" y="159.50"></text></g><g><title>analysis (196,110,885 samples, 77.59%)</title><rect x="0.3598%" y="213" width="77.5901%" height="15" fill="rgb(209,9,3)"/><text x="0.6098%" y="223.50">analysis</text></g><g><title>type_check_crate (112,599,423 samples, 44.55%)</title><rect x="33.4006%" y="197" width="44.5493%" height="15" fill="rgb(230,59,30)"/><text x="33.6506%" y="207.50">type_check_crate</text></g><g><title>wf_checking (7,907,017 samples, 3.13%)</title><rect x="74.8216%" y="181" width="3.1284%" height="15" fill="rgb(209,121,21)"/><text x="75.0716%" y="191.50">wf_..</text></g><g><title>check_item_well_formed (2,322,771 samples, 0.92%)</title><rect x="77.0310%" y="165" width="0.9190%" height="15" fill="rgb(220,109,13)"/><text x="77.2810%" y="175.50"></text></g><g><title>codegen_crate (417,184 samples, 0.17%)</title><rect x="77.9533%" y="213" width="0.1651%" height="15" fill="rgb(232,18,1)"/><text x="78.2033%" y="223.50"></text></g><g><title>metadata_load_macro (334,919 samples, 0.13%)</title><rect x="90.3734%" y="165" width="0.1325%" height="15" fill="rgb(215,41,42)"/><text x="90.6234%" y="175.50"></text></g><g><title>metadata_register_crate (1,295,073 samples, 0.51%)</title><rect x="90.5059%" y="165" width="0.5124%" height="15" fill="rgb(224,123,36)"/><text x="90.7559%" y="175.50"></text></g><g><title>metadata_register_crate (563,986 samples, 0.22%)</title><rect x="90.7952%" y="149" width="0.2231%" height="15" fill="rgb(240,125,3)"/><text x="91.0452%" y="159.50"></text></g><g><title>macro_expand_crate (32,878,223 samples, 13.01%)</title><rect x="78.3543%" y="197" width="13.0081%" height="15" fill="rgb(205,98,50)"/><text x="78.6043%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (32,866,003 samples, 13.00%)</title><rect x="78.3591%" y="181" width="13.0032%" height="15" fill="rgb(205,185,37)"/><text x="78.6091%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (869,520 samples, 0.34%)</title><rect x="91.0183%" y="165" width="0.3440%" height="15" fill="rgb(238,207,15)"/><text x="91.2683%" y="175.50"></text></g><g><title>late_resolve_crate (4,200,756 samples, 1.66%)</title><rect x="91.5453%" y="181" width="1.6620%" height="15" fill="rgb(213,199,42)"/><text x="91.7953%" y="191.50"></text></g><g><title>configure_and_expand (38,381,653 samples, 15.19%)</title><rect x="78.1184%" y="213" width="15.1855%" height="15" fill="rgb(235,201,11)"/><text x="78.3684%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (4,812,003 samples, 1.90%)</title><rect x="91.4000%" y="197" width="1.9038%" height="15" fill="rgb(207,46,11)"/><text x="91.6500%" y="207.50">r..</text></g><g><title>drop_ast (486,685 samples, 0.19%)</title><rect x="93.3038%" y="213" width="0.1926%" height="15" fill="rgb(241,35,35)"/><text x="93.5538%" y="223.50"></text></g><g><title>early_lint_checks (830,720 samples, 0.33%)</title><rect x="93.5058%" y="213" width="0.3287%" height="15" fill="rgb(243,32,47)"/><text x="93.7558%" y="223.50"></text></g><g><title>free_global_ctxt (5,363,499 samples, 2.12%)</title><rect x="93.8345%" y="213" width="2.1220%" height="15" fill="rgb(247,202,23)"/><text x="94.0845%" y="223.50">f..</text></g><g><title>generate_crate_metadata (1,824,760 samples, 0.72%)</title><rect x="95.9565%" y="213" width="0.7220%" height="15" fill="rgb(219,102,11)"/><text x="96.2065%" y="223.50"></text></g><g><title>hir_lowering (5,730,083 samples, 2.27%)</title><rect x="96.6785%" y="213" width="2.2671%" height="15" fill="rgb(243,110,44)"/><text x="96.9285%" y="223.50">h..</text></g><g><title>parse_crate (553,386 samples, 0.22%)</title><rect x="98.9697%" y="213" width="0.2189%" height="15" fill="rgb(222,74,54)"/><text x="99.2197%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,382,615 samples, 0.55%)</title><rect x="99.2751%" y="213" width="0.5470%" height="15" fill="rgb(216,99,12)"/><text x="99.5251%" y="223.50"></text></g><g><title>all (252,752,311 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (252,752,311 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (357,934 samples, 0.14%)</title><rect x="99.8584%" y="213" width="0.1416%" height="15" fill="rgb(213,25,53)"/><text x="100.1084%" y="223.50"></text></g></svg></svg>