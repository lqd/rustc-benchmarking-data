<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (271,821 samples, 0.17%)</title><rect x="7.3746%" y="117" width="0.1668%" height="15" fill="rgb(227,0,7)"/><text x="7.6246%" y="127.50"></text></g><g><title>item_attrs (285,593 samples, 0.18%)</title><rect x="7.8218%" y="85" width="0.1753%" height="15" fill="rgb(217,0,24)"/><text x="8.0718%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (277,403 samples, 0.17%)</title><rect x="7.8268%" y="69" width="0.1702%" height="15" fill="rgb(221,193,54)"/><text x="8.0768%" y="79.50"></text></g><g><title>codegen_fn_attrs (396,606 samples, 0.24%)</title><rect x="7.7673%" y="101" width="0.2434%" height="15" fill="rgb(248,212,6)"/><text x="8.0173%" y="111.50"></text></g><g><title>adt_drop_tys (263,473 samples, 0.16%)</title><rect x="9.2951%" y="69" width="0.1617%" height="15" fill="rgb(208,68,35)"/><text x="9.5451%" y="79.50"></text></g><g><title>is_copy_raw (1,263,372 samples, 0.78%)</title><rect x="9.4568%" y="69" width="0.7753%" height="15" fill="rgb(232,128,0)"/><text x="9.7068%" y="79.50"></text></g><g><title>evaluate_obligation (1,090,660 samples, 0.67%)</title><rect x="9.5628%" y="53" width="0.6693%" height="15" fill="rgb(207,160,47)"/><text x="9.8128%" y="63.50"></text></g><g><title>needs_drop_raw (1,679,356 samples, 1.03%)</title><rect x="9.2083%" y="85" width="1.0306%" height="15" fill="rgb(228,23,34)"/><text x="9.4583%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (170,281 samples, 0.10%)</title><rect x="10.3262%" y="69" width="0.1045%" height="15" fill="rgb(218,30,26)"/><text x="10.5762%" y="79.50"></text></g><g><title>impl_parent (454,684 samples, 0.28%)</title><rect x="10.9355%" y="53" width="0.2790%" height="15" fill="rgb(220,122,19)"/><text x="11.1855%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (289,143 samples, 0.18%)</title><rect x="11.0371%" y="37" width="0.1774%" height="15" fill="rgb(250,228,42)"/><text x="11.2871%" y="47.50"></text></g><g><title>specialization_graph_of (2,086,383 samples, 1.28%)</title><rect x="10.4433%" y="69" width="1.2804%" height="15" fill="rgb(240,193,28)"/><text x="10.6933%" y="79.50"></text></g><g><title>impl_trait_ref (829,804 samples, 0.51%)</title><rect x="11.2145%" y="53" width="0.5092%" height="15" fill="rgb(216,20,37)"/><text x="11.4645%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (662,243 samples, 0.41%)</title><rect x="11.3173%" y="37" width="0.4064%" height="15" fill="rgb(206,188,39)"/><text x="11.5673%" y="47.50"></text></g><g><title>resolve_instance (2,479,345 samples, 1.52%)</title><rect x="10.2389%" y="85" width="1.5216%" height="15" fill="rgb(217,207,13)"/><text x="10.4889%" y="95.50"></text></g><g><title>thir_body (782,300 samples, 0.48%)</title><rect x="11.7691%" y="85" width="0.4801%" height="15" fill="rgb(231,73,38)"/><text x="12.0191%" y="95.50"></text></g><g><title>mir_const (8,586,905 samples, 5.27%)</title><rect x="7.0087%" y="133" width="5.2697%" height="15" fill="rgb(225,20,46)"/><text x="7.2587%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (7,718,846 samples, 4.74%)</title><rect x="7.5414%" y="117" width="4.7370%" height="15" fill="rgb(210,31,41)"/><text x="7.7914%" y="127.50">unsafe..</text></g><g><title>mir_built (6,954,097 samples, 4.27%)</title><rect x="8.0107%" y="101" width="4.2677%" height="15" fill="rgb(221,200,47)"/><text x="8.2607%" y="111.50">mir_b..</text></g><g><title>mir_promoted (9,234,539 samples, 5.67%)</title><rect x="6.6727%" y="149" width="5.6672%" height="15" fill="rgb(226,26,5)"/><text x="6.9227%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (812,539 samples, 0.50%)</title><rect x="12.3399%" y="149" width="0.4987%" height="15" fill="rgb(249,33,26)"/><text x="12.5899%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (399,945 samples, 0.25%)</title><rect x="12.8386%" y="149" width="0.2454%" height="15" fill="rgb(235,183,28)"/><text x="13.0886%" y="159.50"></text></g><g><title>normalize_projection_ty (171,602 samples, 0.11%)</title><rect x="12.9787%" y="133" width="0.1053%" height="15" fill="rgb(221,5,38)"/><text x="13.2287%" y="143.50"></text></g><g><title>type_op_normalize_predicate (258,313 samples, 0.16%)</title><rect x="13.0840%" y="149" width="0.1585%" height="15" fill="rgb(247,18,42)"/><text x="13.3340%" y="159.50"></text></g><g><title>type_op_normalize_ty (277,154 samples, 0.17%)</title><rect x="13.2425%" y="149" width="0.1701%" height="15" fill="rgb(241,131,45)"/><text x="13.4925%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,752,498 samples, 1.69%)</title><rect x="13.4126%" y="149" width="1.6892%" height="15" fill="rgb(249,31,29)"/><text x="13.6626%" y="159.50"></text></g><g><title>MIR_borrow_checking (23,755,803 samples, 14.58%)</title><rect x="0.5272%" y="181" width="14.5788%" height="15" fill="rgb(225,111,53)"/><text x="0.7772%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (23,676,602 samples, 14.53%)</title><rect x="0.5758%" y="165" width="14.5302%" height="15" fill="rgb(238,160,17)"/><text x="0.8258%" y="175.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (185,814 samples, 0.11%)</title><rect x="15.5336%" y="133" width="0.1140%" height="15" fill="rgb(214,148,48)"/><text x="15.7836%" y="143.50"></text></g><g><title>codegen_fn_attrs (349,116 samples, 0.21%)</title><rect x="15.4435%" y="149" width="0.2143%" height="15" fill="rgb(232,36,49)"/><text x="15.6935%" y="159.50"></text></g><g><title>check_mod_attrs (560,966 samples, 0.34%)</title><rect x="15.3136%" y="165" width="0.3443%" height="15" fill="rgb(209,103,24)"/><text x="15.5636%" y="175.50"></text></g><g><title>lint_levels (185,282 samples, 0.11%)</title><rect x="15.8858%" y="149" width="0.1137%" height="15" fill="rgb(229,88,8)"/><text x="16.1358%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (608,466 samples, 0.37%)</title><rect x="15.7760%" y="165" width="0.3734%" height="15" fill="rgb(213,181,19)"/><text x="16.0260%" y="175.50"></text></g><g><title>misc_checking_1 (1,443,126 samples, 0.89%)</title><rect x="15.2987%" y="181" width="0.8856%" height="15" fill="rgb(254,191,54)"/><text x="15.5487%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (379,945 samples, 0.23%)</title><rect x="16.1852%" y="165" width="0.2332%" height="15" fill="rgb(241,83,37)"/><text x="16.4352%" y="175.50"></text></g><g><title>check_mod_liveness (296,242 samples, 0.18%)</title><rect x="16.2366%" y="149" width="0.1818%" height="15" fill="rgb(233,36,39)"/><text x="16.4866%" y="159.50"></text></g><g><title>misc_checking_2 (830,780 samples, 0.51%)</title><rect x="16.1843%" y="181" width="0.5098%" height="15" fill="rgb(226,3,54)"/><text x="16.4343%" y="191.50"></text></g><g><title>match_checking (449,285 samples, 0.28%)</title><rect x="16.4184%" y="165" width="0.2757%" height="15" fill="rgb(245,192,40)"/><text x="16.6684%" y="175.50"></text></g><g><title>check_match (426,964 samples, 0.26%)</title><rect x="16.4321%" y="149" width="0.2620%" height="15" fill="rgb(238,167,29)"/><text x="16.6821%" y="159.50"></text></g><g><title>check_private_in_public (217,332 samples, 0.13%)</title><rect x="16.7002%" y="165" width="0.1334%" height="15" fill="rgb(232,182,51)"/><text x="16.9502%" y="175.50"></text></g><g><title>death_checking (419,745 samples, 0.26%)</title><rect x="16.8336%" y="165" width="0.2576%" height="15" fill="rgb(231,60,39)"/><text x="17.0836%" y="175.50"></text></g><g><title>eval_to_const_value_raw (197,734 samples, 0.12%)</title><rect x="17.6165%" y="133" width="0.1213%" height="15" fill="rgb(208,69,12)"/><text x="17.8665%" y="143.50"></text></g><g><title>eval_to_const_value_raw (186,944 samples, 0.11%)</title><rect x="17.6231%" y="117" width="0.1147%" height="15" fill="rgb(235,93,37)"/><text x="17.8731%" y="127.50"></text></g><g><title>eval_to_allocation_raw (179,234 samples, 0.11%)</title><rect x="17.6279%" y="101" width="0.1100%" height="15" fill="rgb(213,116,39)"/><text x="17.8779%" y="111.50"></text></g><g><title>param_env (211,101 samples, 0.13%)</title><rect x="17.7379%" y="133" width="0.1296%" height="15" fill="rgb(222,207,29)"/><text x="17.9879%" y="143.50"></text></g><g><title>crate_lints (2,718,800 samples, 1.67%)</title><rect x="17.0923%" y="149" width="1.6685%" height="15" fill="rgb(206,96,30)"/><text x="17.3423%" y="159.50"></text></g><g><title>type_of (1,444,745 samples, 0.89%)</title><rect x="17.8742%" y="133" width="0.8866%" height="15" fill="rgb(218,138,4)"/><text x="18.1242%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (915,580 samples, 0.56%)</title><rect x="18.1989%" y="117" width="0.5619%" height="15" fill="rgb(250,191,14)"/><text x="18.4489%" y="127.50"></text></g><g><title>lint_checking (3,212,166 samples, 1.97%)</title><rect x="17.0911%" y="165" width="1.9713%" height="15" fill="rgb(239,60,40)"/><text x="17.3411%" y="175.50">l..</text></g><g><title>module_lints (491,476 samples, 0.30%)</title><rect x="18.7608%" y="149" width="0.3016%" height="15" fill="rgb(206,27,48)"/><text x="19.0108%" y="159.50"></text></g><g><title>lint_mod (485,136 samples, 0.30%)</title><rect x="18.7647%" y="133" width="0.2977%" height="15" fill="rgb(225,35,8)"/><text x="19.0147%" y="143.50"></text></g><g><title>privacy_access_levels (232,662 samples, 0.14%)</title><rect x="19.0624%" y="165" width="0.1428%" height="15" fill="rgb(250,213,24)"/><text x="19.3124%" y="175.50"></text></g><g><title>privacy_checking_modules (974,561 samples, 0.60%)</title><rect x="19.2052%" y="165" width="0.5981%" height="15" fill="rgb(247,123,22)"/><text x="19.4552%" y="175.50"></text></g><g><title>check_mod_privacy (969,481 samples, 0.59%)</title><rect x="19.2083%" y="149" width="0.5950%" height="15" fill="rgb(231,138,38)"/><text x="19.4583%" y="159.50"></text></g><g><title>misc_checking_3 (5,079,947 samples, 3.12%)</title><rect x="16.6941%" y="181" width="3.1175%" height="15" fill="rgb(231,145,46)"/><text x="16.9441%" y="191.50">mis..</text></g><g><title>impl_parent (1,557,609 samples, 0.96%)</title><rect x="21.5137%" y="117" width="0.9559%" height="15" fill="rgb(251,118,11)"/><text x="21.7637%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (988,284 samples, 0.61%)</title><rect x="21.8630%" y="101" width="0.6065%" height="15" fill="rgb(217,147,25)"/><text x="22.1130%" y="111.50"></text></g><g><title>impl_trait_ref (4,234,824 samples, 2.60%)</title><rect x="22.4695%" y="117" width="2.5989%" height="15" fill="rgb(247,81,37)"/><text x="22.7195%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,649,599 samples, 2.24%)</title><rect x="22.8287%" y="101" width="2.2397%" height="15" fill="rgb(209,12,38)"/><text x="23.0787%" y="111.50">m..</text></g><g><title>coherent_trait (9,086,341 samples, 5.58%)</title><rect x="19.8603%" y="149" width="5.5762%" height="15" fill="rgb(227,1,9)"/><text x="20.1103%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (9,067,771 samples, 5.56%)</title><rect x="19.8717%" y="133" width="5.5648%" height="15" fill="rgb(248,47,43)"/><text x="20.1217%" y="143.50">special..</text></g><g><title>trait_impls_of (559,026 samples, 0.34%)</title><rect x="25.0935%" y="117" width="0.3431%" height="15" fill="rgb(221,10,30)"/><text x="25.3435%" y="127.50"></text></g><g><title>implementations_of_trait (183,793 samples, 0.11%)</title><rect x="25.3238%" y="101" width="0.1128%" height="15" fill="rgb(210,229,1)"/><text x="25.5738%" y="111.50"></text></g><g><title>coherence_checking (9,180,652 samples, 5.63%)</title><rect x="19.8483%" y="165" width="5.6341%" height="15" fill="rgb(222,148,37)"/><text x="20.0983%" y="175.50">coheren..</text></g><g><title>adt_def (451,674 samples, 0.28%)</title><rect x="36.7914%" y="101" width="0.2772%" height="15" fill="rgb(234,67,33)"/><text x="37.0414%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (449,904 samples, 0.28%)</title><rect x="36.7925%" y="85" width="0.2761%" height="15" fill="rgb(247,98,35)"/><text x="37.0425%" y="95.50"></text></g><g><title>item_attrs (429,754 samples, 0.26%)</title><rect x="36.8048%" y="69" width="0.2637%" height="15" fill="rgb(247,138,52)"/><text x="37.0548%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (427,714 samples, 0.26%)</title><rect x="36.8061%" y="53" width="0.2625%" height="15" fill="rgb(213,79,30)"/><text x="37.0561%" y="63.50"></text></g><g><title>adt_sized_constraint (477,644 samples, 0.29%)</title><rect x="36.7801%" y="117" width="0.2931%" height="15" fill="rgb(246,177,23)"/><text x="37.0301%" y="127.50"></text></g><g><title>associated_item (565,299 samples, 0.35%)</title><rect x="37.2112%" y="101" width="0.3469%" height="15" fill="rgb(230,62,27)"/><text x="37.4612%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (443,958 samples, 0.27%)</title><rect x="37.2857%" y="85" width="0.2725%" height="15" fill="rgb(216,154,8)"/><text x="37.5357%" y="95.50"></text></g><g><title>associated_items (831,509 samples, 0.51%)</title><rect x="37.0782%" y="117" width="0.5103%" height="15" fill="rgb(244,35,45)"/><text x="37.3282%" y="127.50"></text></g><g><title>adt_dtorck_constraint (533,665 samples, 0.33%)</title><rect x="37.8290%" y="101" width="0.3275%" height="15" fill="rgb(251,115,12)"/><text x="38.0790%" y="111.50"></text></g><g><title>type_of (179,672 samples, 0.11%)</title><rect x="38.0463%" y="85" width="0.1103%" height="15" fill="rgb(240,54,50)"/><text x="38.2963%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (177,642 samples, 0.11%)</title><rect x="38.0475%" y="69" width="0.1090%" height="15" fill="rgb(233,84,52)"/><text x="38.2975%" y="79.50"></text></g><g><title>dropck_outlives (862,250 samples, 0.53%)</title><rect x="37.6453%" y="117" width="0.5292%" height="15" fill="rgb(207,117,47)"/><text x="37.8953%" y="127.50"></text></g><g><title>generics_of (282,466 samples, 0.17%)</title><rect x="39.0929%" y="101" width="0.1733%" height="15" fill="rgb(249,43,39)"/><text x="39.3429%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (225,825 samples, 0.14%)</title><rect x="39.1277%" y="85" width="0.1386%" height="15" fill="rgb(209,38,44)"/><text x="39.3777%" y="95.50"></text></g><g><title>impl_trait_ref (354,023 samples, 0.22%)</title><rect x="39.2919%" y="101" width="0.2173%" height="15" fill="rgb(236,212,23)"/><text x="39.5419%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (302,782 samples, 0.19%)</title><rect x="39.3233%" y="85" width="0.1858%" height="15" fill="rgb(242,79,21)"/><text x="39.5733%" y="95.50"></text></g><g><title>predicates_of (176,481 samples, 0.11%)</title><rect x="39.5231%" y="101" width="0.1083%" height="15" fill="rgb(211,96,35)"/><text x="39.7731%" y="111.50"></text></g><g><title>trait_impls_of (821,790 samples, 0.50%)</title><rect x="39.7085%" y="101" width="0.5043%" height="15" fill="rgb(253,215,40)"/><text x="39.9585%" y="111.50"></text></g><g><title>implementations_of_trait (462,305 samples, 0.28%)</title><rect x="39.9291%" y="85" width="0.2837%" height="15" fill="rgb(211,81,21)"/><text x="40.1791%" y="95.50"></text></g><g><title>evaluate_obligation (3,330,716 samples, 2.04%)</title><rect x="38.1745%" y="117" width="2.0440%" height="15" fill="rgb(208,190,38)"/><text x="38.4245%" y="127.50">e..</text></g><g><title>item_attrs (196,662 samples, 0.12%)</title><rect x="40.5787%" y="117" width="0.1207%" height="15" fill="rgb(235,213,38)"/><text x="40.8287%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (188,702 samples, 0.12%)</title><rect x="40.5835%" y="101" width="0.1158%" height="15" fill="rgb(237,122,38)"/><text x="40.8335%" y="111.50"></text></g><g><title>evaluate_obligation (314,196 samples, 0.19%)</title><rect x="41.0866%" y="101" width="0.1928%" height="15" fill="rgb(244,218,35)"/><text x="41.3366%" y="111.50"></text></g><g><title>method_autoderef_steps (880,822 samples, 0.54%)</title><rect x="40.7430%" y="117" width="0.5406%" height="15" fill="rgb(240,68,47)"/><text x="40.9930%" y="127.50"></text></g><g><title>predicates_of (437,965 samples, 0.27%)</title><rect x="41.4010%" y="117" width="0.2688%" height="15" fill="rgb(210,16,53)"/><text x="41.6510%" y="127.50"></text></g><g><title>predicates_defined_on (295,713 samples, 0.18%)</title><rect x="41.4883%" y="101" width="0.1815%" height="15" fill="rgb(235,124,12)"/><text x="41.7383%" y="111.50"></text></g><g><title>trait_impls_of (185,112 samples, 0.11%)</title><rect x="41.6752%" y="117" width="0.1136%" height="15" fill="rgb(224,169,11)"/><text x="41.9252%" y="127.50"></text></g><g><title>evaluate_obligation (380,906 samples, 0.23%)</title><rect x="42.3740%" y="101" width="0.2338%" height="15" fill="rgb(250,166,2)"/><text x="42.6240%" y="111.50"></text></g><g><title>typeck (1,476,966 samples, 0.91%)</title><rect x="41.8484%" y="117" width="0.9064%" height="15" fill="rgb(242,216,29)"/><text x="42.0984%" y="127.50"></text></g><g><title>item_bodies_checking (28,158,443 samples, 17.28%)</title><rect x="25.5055%" y="165" width="17.2807%" height="15" fill="rgb(230,116,27)"/><text x="25.7555%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,154,933 samples, 17.28%)</title><rect x="25.5077%" y="149" width="17.2785%" height="15" fill="rgb(228,99,48)"/><text x="25.7577%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (28,097,983 samples, 17.24%)</title><rect x="25.5426%" y="133" width="17.2436%" height="15" fill="rgb(253,11,6)"/><text x="25.7926%" y="143.50">typeck</text></g><g><title>adt_destructor (390,014 samples, 0.24%)</title><rect x="43.4016%" y="133" width="0.2393%" height="15" fill="rgb(247,143,39)"/><text x="43.6516%" y="143.50"></text></g><g><title>coherent_trait (381,394 samples, 0.23%)</title><rect x="43.4069%" y="117" width="0.2341%" height="15" fill="rgb(236,97,10)"/><text x="43.6569%" y="127.50"></text></g><g><title>specialization_graph_of (379,604 samples, 0.23%)</title><rect x="43.4080%" y="101" width="0.2330%" height="15" fill="rgb(233,208,19)"/><text x="43.6580%" y="111.50"></text></g><g><title>impl_trait_ref (188,092 samples, 0.12%)</title><rect x="43.5255%" y="85" width="0.1154%" height="15" fill="rgb(216,164,2)"/><text x="43.7755%" y="95.50"></text></g><g><title>item_types_checking (1,644,388 samples, 1.01%)</title><rect x="42.7862%" y="165" width="1.0092%" height="15" fill="rgb(220,129,5)"/><text x="43.0362%" y="175.50"></text></g><g><title>check_mod_item_types (1,638,488 samples, 1.01%)</title><rect x="42.7898%" y="149" width="1.0055%" height="15" fill="rgb(242,17,10)"/><text x="43.0398%" y="159.50"></text></g><g><title>fn_sig (300,123 samples, 0.18%)</title><rect x="43.9831%" y="133" width="0.1842%" height="15" fill="rgb(242,107,0)"/><text x="44.2331%" y="143.50"></text></g><g><title>generics_of (307,413 samples, 0.19%)</title><rect x="44.1672%" y="133" width="0.1887%" height="15" fill="rgb(251,28,31)"/><text x="44.4172%" y="143.50"></text></g><g><title>late_bound_vars_map (190,863 samples, 0.12%)</title><rect x="44.7086%" y="85" width="0.1171%" height="15" fill="rgb(233,223,10)"/><text x="44.9586%" y="95.50"></text></g><g><title>resolve_lifetimes (178,133 samples, 0.11%)</title><rect x="44.7164%" y="69" width="0.1093%" height="15" fill="rgb(215,21,27)"/><text x="44.9664%" y="79.50"></text></g><g><title>explicit_predicates_of (636,978 samples, 0.39%)</title><rect x="44.5002%" y="101" width="0.3909%" height="15" fill="rgb(232,23,21)"/><text x="44.7502%" y="111.50"></text></g><g><title>predicates_of (1,646,229 samples, 1.01%)</title><rect x="44.4028%" y="133" width="1.0103%" height="15" fill="rgb(244,5,23)"/><text x="44.6528%" y="143.50"></text></g><g><title>predicates_defined_on (1,588,628 samples, 0.97%)</title><rect x="44.4382%" y="117" width="0.9749%" height="15" fill="rgb(226,81,46)"/><text x="44.6882%" y="127.50"></text></g><g><title>inferred_outlives_of (850,629 samples, 0.52%)</title><rect x="44.8911%" y="101" width="0.5220%" height="15" fill="rgb(247,70,30)"/><text x="45.1411%" y="111.50"></text></g><g><title>inferred_outlives_crate (822,769 samples, 0.50%)</title><rect x="44.9082%" y="85" width="0.5049%" height="15" fill="rgb(212,68,19)"/><text x="45.1582%" y="95.50"></text></g><g><title>type_of (567,356 samples, 0.35%)</title><rect x="45.0649%" y="69" width="0.3482%" height="15" fill="rgb(240,187,13)"/><text x="45.3149%" y="79.50"></text></g><g><title>type_param_predicates (176,543 samples, 0.11%)</title><rect x="45.3048%" y="53" width="0.1083%" height="15" fill="rgb(223,113,26)"/><text x="45.5548%" y="63.50"></text></g><g><title>type_param_predicates (165,853 samples, 0.10%)</title><rect x="45.3113%" y="37" width="0.1018%" height="15" fill="rgb(206,192,2)"/><text x="45.5613%" y="47.50"></text></g><g><title>type_collecting (2,760,891 samples, 1.69%)</title><rect x="43.7968%" y="165" width="1.6943%" height="15" fill="rgb(241,108,4)"/><text x="44.0468%" y="175.50"></text></g><g><title>collect_mod_item_types (2,747,031 samples, 1.69%)</title><rect x="43.8053%" y="149" width="1.6858%" height="15" fill="rgb(247,173,49)"/><text x="44.0553%" y="159.50"></text></g><g><title>evaluate_obligation (798,339 samples, 0.49%)</title><rect x="46.9039%" y="133" width="0.4899%" height="15" fill="rgb(224,114,35)"/><text x="47.1539%" y="143.50"></text></g><g><title>implied_outlives_bounds (338,065 samples, 0.21%)</title><rect x="47.4139%" y="133" width="0.2075%" height="15" fill="rgb(245,159,27)"/><text x="47.6639%" y="143.50"></text></g><g><title>param_env (276,664 samples, 0.17%)</title><rect x="47.6213%" y="133" width="0.1698%" height="15" fill="rgb(245,172,44)"/><text x="47.8713%" y="143.50"></text></g><g><title>region_scope_tree (286,493 samples, 0.18%)</title><rect x="47.8091%" y="133" width="0.1758%" height="15" fill="rgb(236,23,11)"/><text x="48.0591%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,860,325 samples, 2.37%)</title><rect x="45.6180%" y="149" width="2.3691%" height="15" fill="rgb(205,117,38)"/><text x="45.8680%" y="159.50">ch..</text></g><g><title>adt_sized_constraint (253,423 samples, 0.16%)</title><rect x="49.7514%" y="117" width="0.1555%" height="15" fill="rgb(237,72,25)"/><text x="50.0014%" y="127.50"></text></g><g><title>evaluate_obligation (408,004 samples, 0.25%)</title><rect x="49.6724%" y="133" width="0.2504%" height="15" fill="rgb(244,70,9)"/><text x="49.9224%" y="143.50"></text></g><g><title>param_env (532,797 samples, 0.33%)</title><rect x="50.0316%" y="133" width="0.3270%" height="15" fill="rgb(217,125,39)"/><text x="50.2816%" y="143.50"></text></g><g><title>check_item_well_formed (4,102,507 samples, 2.52%)</title><rect x="47.9871%" y="149" width="2.5177%" height="15" fill="rgb(235,36,10)"/><text x="48.2371%" y="159.50">ch..</text></g><g><title>analysis (81,971,141 samples, 50.31%)</title><rect x="0.3541%" y="197" width="50.3052%" height="15" fill="rgb(251,123,47)"/><text x="0.6041%" y="207.50">analysis</text></g><g><title>type_check_crate (50,265,498 samples, 30.85%)</title><rect x="19.8117%" y="181" width="30.8476%" height="15" fill="rgb(221,13,13)"/><text x="20.0617%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,418,224 samples, 5.17%)</title><rect x="45.4931%" y="165" width="5.1662%" height="15" fill="rgb(238,131,9)"/><text x="45.7431%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (251,792 samples, 0.15%)</title><rect x="50.5048%" y="149" width="0.1545%" height="15" fill="rgb(211,50,8)"/><text x="50.7548%" y="159.50"></text></g><g><title>codegen_crate (396,274 samples, 0.24%)</title><rect x="50.6649%" y="197" width="0.2432%" height="15" fill="rgb(245,182,24)"/><text x="50.9149%" y="207.50"></text></g><g><title>AST_validation (197,812 samples, 0.12%)</title><rect x="51.0177%" y="181" width="0.1214%" height="15" fill="rgb(242,14,37)"/><text x="51.2677%" y="191.50"></text></g><g><title>metadata_load_macro (405,434 samples, 0.25%)</title><rect x="81.3437%" y="149" width="0.2488%" height="15" fill="rgb(246,228,12)"/><text x="81.5937%" y="159.50"></text></g><g><title>metadata_register_crate (16,598,874 samples, 10.19%)</title><rect x="81.5925%" y="149" width="10.1866%" height="15" fill="rgb(213,55,15)"/><text x="81.8425%" y="159.50">metadata_regist..</text></g><g><title>metadata_register_crate (13,394,521 samples, 8.22%)</title><rect x="83.5590%" y="133" width="8.2201%" height="15" fill="rgb(209,9,3)"/><text x="83.8090%" y="143.50">metadata_re..</text></g><g><title>macro_expand_crate (66,268,865 samples, 40.67%)</title><rect x="51.2290%" y="181" width="40.6688%" height="15" fill="rgb(230,59,30)"/><text x="51.4790%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (66,256,405 samples, 40.66%)</title><rect x="51.2366%" y="165" width="40.6611%" height="15" fill="rgb(209,121,21)"/><text x="51.4866%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (193,274 samples, 0.12%)</title><rect x="91.7792%" y="149" width="0.1186%" height="15" fill="rgb(220,109,13)"/><text x="92.0292%" y="159.50"></text></g><g><title>late_resolve_crate (1,504,286 samples, 0.92%)</title><rect x="92.0863%" y="165" width="0.9232%" height="15" fill="rgb(232,18,1)"/><text x="92.3363%" y="175.50"></text></g><g><title>configure_and_expand (68,713,782 samples, 42.17%)</title><rect x="50.9081%" y="197" width="42.1692%" height="15" fill="rgb(215,41,42)"/><text x="51.1581%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,785,229 samples, 1.10%)</title><rect x="91.9817%" y="181" width="1.0956%" height="15" fill="rgb(224,123,36)"/><text x="92.2317%" y="191.50"></text></g><g><title>drop_ast (176,502 samples, 0.11%)</title><rect x="93.0773%" y="197" width="0.1083%" height="15" fill="rgb(240,125,3)"/><text x="93.3273%" y="207.50"></text></g><g><title>early_lint_checks (474,335 samples, 0.29%)</title><rect x="93.2002%" y="197" width="0.2911%" height="15" fill="rgb(205,98,50)"/><text x="93.4502%" y="207.50"></text></g><g><title>free_global_ctxt (3,656,201 samples, 2.24%)</title><rect x="93.4913%" y="197" width="2.2438%" height="15" fill="rgb(205,185,37)"/><text x="93.7413%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,719,698 samples, 1.06%)</title><rect x="95.7351%" y="197" width="1.0554%" height="15" fill="rgb(238,207,15)"/><text x="95.9851%" y="207.50"></text></g><g><title>hir_lowering (2,780,371 samples, 1.71%)</title><rect x="96.7905%" y="197" width="1.7063%" height="15" fill="rgb(213,199,42)"/><text x="97.0405%" y="207.50"></text></g><g><title>parse_crate (792,928 samples, 0.49%)</title><rect x="98.5313%" y="197" width="0.4866%" height="15" fill="rgb(235,201,11)"/><text x="98.7813%" y="207.50"></text></g><g><title>prepare_outputs (221,433 samples, 0.14%)</title><rect x="99.0227%" y="197" width="0.1359%" height="15" fill="rgb(207,46,11)"/><text x="99.2727%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (904,550 samples, 0.56%)</title><rect x="99.1585%" y="197" width="0.5551%" height="15" fill="rgb(241,35,35)"/><text x="99.4085%" y="207.50"></text></g><g><title>all (162,947,729 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (162,947,729 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (375,145 samples, 0.23%)</title><rect x="99.7698%" y="197" width="0.2302%" height="15" fill="rgb(219,102,11)"/><text x="100.0198%" y="207.50"></text></g></svg></svg>