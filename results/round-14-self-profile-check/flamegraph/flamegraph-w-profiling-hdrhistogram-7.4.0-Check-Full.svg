<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (599,670 samples, 0.11%)</title><rect x="13.7761%" y="149" width="0.1139%" height="15" fill="rgb(227,0,7)"/><text x="14.0261%" y="159.50"></text></g><g><title>param_env (1,245,039 samples, 0.24%)</title><rect x="15.5591%" y="117" width="0.2364%" height="15" fill="rgb(217,0,24)"/><text x="15.8091%" y="127.50"></text></g><g><title>item_attrs (1,068,695 samples, 0.20%)</title><rect x="16.3601%" y="85" width="0.2030%" height="15" fill="rgb(221,193,54)"/><text x="16.6101%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,031,144 samples, 0.20%)</title><rect x="16.3672%" y="69" width="0.1958%" height="15" fill="rgb(248,212,6)"/><text x="16.6172%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,705,691 samples, 0.32%)</title><rect x="16.2513%" y="101" width="0.3239%" height="15" fill="rgb(208,68,35)"/><text x="16.5013%" y="111.50"></text></g><g><title>is_copy_raw (792,798 samples, 0.15%)</title><rect x="19.4845%" y="85" width="0.1506%" height="15" fill="rgb(232,128,0)"/><text x="19.7345%" y="95.50"></text></g><g><title>evaluate_obligation (564,926 samples, 0.11%)</title><rect x="19.5277%" y="69" width="0.1073%" height="15" fill="rgb(207,160,47)"/><text x="19.7777%" y="79.50"></text></g><g><title>adt_drop_tys (872,222 samples, 0.17%)</title><rect x="19.7564%" y="69" width="0.1656%" height="15" fill="rgb(228,23,34)"/><text x="20.0064%" y="79.50"></text></g><g><title>is_copy_raw (5,130,730 samples, 0.97%)</title><rect x="19.9220%" y="69" width="0.9744%" height="15" fill="rgb(218,30,26)"/><text x="20.1720%" y="79.50"></text></g><g><title>evaluate_obligation (4,210,661 samples, 0.80%)</title><rect x="20.0968%" y="53" width="0.7996%" height="15" fill="rgb(220,122,19)"/><text x="20.3468%" y="63.50"></text></g><g><title>needs_drop_raw (6,651,134 samples, 1.26%)</title><rect x="19.6363%" y="85" width="1.2631%" height="15" fill="rgb(250,228,42)"/><text x="19.8863%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,167,427 samples, 0.22%)</title><rect x="21.0627%" y="69" width="0.2217%" height="15" fill="rgb(240,193,28)"/><text x="21.3127%" y="79.50"></text></g><g><title>resolve_instance (2,711,092 samples, 0.51%)</title><rect x="20.9062%" y="85" width="0.5149%" height="15" fill="rgb(216,20,37)"/><text x="21.1562%" y="95.50"></text></g><g><title>thir_body (6,019,173 samples, 1.14%)</title><rect x="21.4501%" y="85" width="1.1431%" height="15" fill="rgb(206,188,39)"/><text x="21.7001%" y="95.50"></text></g><g><title>mir_const (41,498,138 samples, 7.88%)</title><rect x="14.7361%" y="133" width="7.8807%" height="15" fill="rgb(217,207,13)"/><text x="14.9861%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (35,918,978 samples, 6.82%)</title><rect x="15.7956%" y="117" width="6.8212%" height="15" fill="rgb(231,73,38)"/><text x="16.0456%" y="127.50">unsafety_..</text></g><g><title>mir_built (31,813,628 samples, 6.04%)</title><rect x="16.5752%" y="101" width="6.0416%" height="15" fill="rgb(225,20,46)"/><text x="16.8252%" y="111.50">mir_built</text></g><g><title>mir_promoted (45,853,030 samples, 8.71%)</title><rect x="13.9678%" y="149" width="8.7078%" height="15" fill="rgb(210,31,41)"/><text x="14.2178%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,425,577 samples, 0.46%)</title><rect x="22.6756%" y="149" width="0.4606%" height="15" fill="rgb(221,200,47)"/><text x="22.9256%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,172,274 samples, 0.60%)</title><rect x="23.1362%" y="149" width="0.6024%" height="15" fill="rgb(226,26,5)"/><text x="23.3862%" y="159.50"></text></g><g><title>normalize_projection_ty (1,923,751 samples, 0.37%)</title><rect x="23.3733%" y="133" width="0.3653%" height="15" fill="rgb(249,33,26)"/><text x="23.6233%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,745,001 samples, 0.33%)</title><rect x="23.7386%" y="149" width="0.3314%" height="15" fill="rgb(235,183,28)"/><text x="23.9886%" y="159.50"></text></g><g><title>normalize_projection_ty (856,320 samples, 0.16%)</title><rect x="23.9074%" y="133" width="0.1626%" height="15" fill="rgb(221,5,38)"/><text x="24.1574%" y="143.50"></text></g><g><title>type_op_prove_predicate (15,009,583 samples, 2.85%)</title><rect x="24.1688%" y="149" width="2.8504%" height="15" fill="rgb(247,18,42)"/><text x="24.4188%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (140,403,253 samples, 26.66%)</title><rect x="0.3601%" y="181" width="26.6634%" height="15" fill="rgb(241,131,45)"/><text x="0.6101%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (139,817,117 samples, 26.55%)</title><rect x="0.4714%" y="165" width="26.5521%" height="15" fill="rgb(249,31,29)"/><text x="0.7214%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (789,450 samples, 0.15%)</title><rect x="27.0761%" y="181" width="0.1499%" height="15" fill="rgb(225,111,53)"/><text x="27.3261%" y="191.50"></text></g><g><title>codegen_fn_attrs (981,811 samples, 0.19%)</title><rect x="27.4310%" y="149" width="0.1865%" height="15" fill="rgb(238,160,17)"/><text x="27.6810%" y="159.50"></text></g><g><title>should_inherit_track_caller (826,409 samples, 0.16%)</title><rect x="27.4605%" y="133" width="0.1569%" height="15" fill="rgb(214,148,48)"/><text x="27.7105%" y="143.50"></text></g><g><title>check_mod_attrs (2,017,335 samples, 0.38%)</title><rect x="27.2344%" y="165" width="0.3831%" height="15" fill="rgb(232,36,49)"/><text x="27.4844%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,173,311 samples, 0.22%)</title><rect x="27.7728%" y="165" width="0.2228%" height="15" fill="rgb(209,103,24)"/><text x="28.0228%" y="175.50"></text></g><g><title>misc_checking_1 (4,213,537 samples, 0.80%)</title><rect x="27.2261%" y="181" width="0.8002%" height="15" fill="rgb(229,88,8)"/><text x="27.4761%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,397,787 samples, 0.46%)</title><rect x="28.0268%" y="165" width="0.4554%" height="15" fill="rgb(213,181,19)"/><text x="28.2768%" y="175.50"></text></g><g><title>check_mod_liveness (1,956,213 samples, 0.37%)</title><rect x="28.1106%" y="149" width="0.3715%" height="15" fill="rgb(254,191,54)"/><text x="28.3606%" y="159.50"></text></g><g><title>mir_for_ctfe (571,996 samples, 0.11%)</title><rect x="29.0511%" y="85" width="0.1086%" height="15" fill="rgb(241,83,37)"/><text x="29.3011%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,090,733 samples, 0.21%)</title><rect x="29.0053%" y="133" width="0.2071%" height="15" fill="rgb(233,36,39)"/><text x="29.2553%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,084,463 samples, 0.21%)</title><rect x="29.0065%" y="117" width="0.2059%" height="15" fill="rgb(226,3,54)"/><text x="29.2565%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,080,873 samples, 0.21%)</title><rect x="29.0072%" y="101" width="0.2053%" height="15" fill="rgb(245,192,40)"/><text x="29.2572%" y="111.50"></text></g><g><title>param_env (654,560 samples, 0.12%)</title><rect x="29.2572%" y="133" width="0.1243%" height="15" fill="rgb(238,167,29)"/><text x="29.5072%" y="143.50"></text></g><g><title>misc_checking_2 (7,171,150 samples, 1.36%)</title><rect x="28.0263%" y="181" width="1.3618%" height="15" fill="rgb(232,182,51)"/><text x="28.2763%" y="191.50"></text></g><g><title>match_checking (4,771,023 samples, 0.91%)</title><rect x="28.4821%" y="165" width="0.9060%" height="15" fill="rgb(231,60,39)"/><text x="28.7321%" y="175.50"></text></g><g><title>check_match (4,631,760 samples, 0.88%)</title><rect x="28.5086%" y="149" width="0.8796%" height="15" fill="rgb(208,69,12)"/><text x="28.7586%" y="159.50"></text></g><g><title>check_private_in_public (909,410 samples, 0.17%)</title><rect x="29.3903%" y="165" width="0.1727%" height="15" fill="rgb(235,93,37)"/><text x="29.6403%" y="175.50"></text></g><g><title>death_checking (1,646,579 samples, 0.31%)</title><rect x="29.5631%" y="165" width="0.3127%" height="15" fill="rgb(213,116,39)"/><text x="29.8131%" y="175.50"></text></g><g><title>param_env (918,527 samples, 0.17%)</title><rect x="30.3204%" y="133" width="0.1744%" height="15" fill="rgb(222,207,29)"/><text x="30.5704%" y="143.50"></text></g><g><title>crate_lints (4,570,441 samples, 0.87%)</title><rect x="29.8761%" y="149" width="0.8680%" height="15" fill="rgb(206,96,30)"/><text x="30.1261%" y="159.50"></text></g><g><title>type_of (1,277,232 samples, 0.24%)</title><rect x="30.5015%" y="133" width="0.2426%" height="15" fill="rgb(218,138,4)"/><text x="30.7515%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,019,079 samples, 0.19%)</title><rect x="30.5505%" y="117" width="0.1935%" height="15" fill="rgb(250,191,14)"/><text x="30.8005%" y="127.50"></text></g><g><title>lint_checking (7,235,211 samples, 1.37%)</title><rect x="29.8757%" y="165" width="1.3740%" height="15" fill="rgb(239,60,40)"/><text x="30.1257%" y="175.50"></text></g><g><title>module_lints (2,663,090 samples, 0.51%)</title><rect x="30.7440%" y="149" width="0.5057%" height="15" fill="rgb(206,27,48)"/><text x="30.9940%" y="159.50"></text></g><g><title>lint_mod (2,645,980 samples, 0.50%)</title><rect x="30.7473%" y="133" width="0.5025%" height="15" fill="rgb(225,35,8)"/><text x="30.9973%" y="143.50"></text></g><g><title>privacy_access_levels (1,250,903 samples, 0.24%)</title><rect x="31.2498%" y="165" width="0.2376%" height="15" fill="rgb(250,213,24)"/><text x="31.4998%" y="175.50"></text></g><g><title>privacy_checking_modules (4,385,028 samples, 0.83%)</title><rect x="31.4873%" y="165" width="0.8327%" height="15" fill="rgb(247,123,22)"/><text x="31.7373%" y="175.50"></text></g><g><title>check_mod_privacy (4,372,678 samples, 0.83%)</title><rect x="31.4897%" y="149" width="0.8304%" height="15" fill="rgb(231,138,38)"/><text x="31.7397%" y="159.50"></text></g><g><title>misc_checking_3 (15,476,931 samples, 2.94%)</title><rect x="29.3882%" y="181" width="2.9392%" height="15" fill="rgb(231,145,46)"/><text x="29.6382%" y="191.50">mi..</text></g><g><title>impl_parent (3,393,470 samples, 0.64%)</title><rect x="33.5802%" y="117" width="0.6444%" height="15" fill="rgb(251,118,11)"/><text x="33.8302%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,985,256 samples, 0.38%)</title><rect x="33.8477%" y="101" width="0.3770%" height="15" fill="rgb(217,147,25)"/><text x="34.0977%" y="111.50"></text></g><g><title>impl_trait_ref (7,226,835 samples, 1.37%)</title><rect x="34.2247%" y="117" width="1.3724%" height="15" fill="rgb(247,81,37)"/><text x="34.4747%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,799,015 samples, 1.10%)</title><rect x="34.4958%" y="101" width="1.1013%" height="15" fill="rgb(209,12,38)"/><text x="34.7458%" y="111.50"></text></g><g><title>trait_impls_of (1,251,273 samples, 0.24%)</title><rect x="35.6023%" y="117" width="0.2376%" height="15" fill="rgb(227,1,9)"/><text x="35.8523%" y="127.50"></text></g><g><title>coherent_trait (18,179,272 samples, 3.45%)</title><rect x="32.3878%" y="149" width="3.4524%" height="15" fill="rgb(248,47,43)"/><text x="32.6378%" y="159.50">coh..</text></g><g><title>specialization_graph_of (17,583,955 samples, 3.34%)</title><rect x="32.5009%" y="133" width="3.3393%" height="15" fill="rgb(221,10,30)"/><text x="32.7509%" y="143.50">spe..</text></g><g><title>coherence_checking (18,376,735 samples, 3.49%)</title><rect x="32.3812%" y="165" width="3.4899%" height="15" fill="rgb(210,229,1)"/><text x="32.6312%" y="175.50">coh..</text></g><g><title>associated_item (1,045,535 samples, 0.20%)</title><rect x="58.5430%" y="101" width="0.1986%" height="15" fill="rgb(222,148,37)"/><text x="58.7930%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (842,792 samples, 0.16%)</title><rect x="58.5815%" y="85" width="0.1601%" height="15" fill="rgb(234,67,33)"/><text x="58.8315%" y="95.50"></text></g><g><title>associated_items (1,601,840 samples, 0.30%)</title><rect x="58.4559%" y="117" width="0.3042%" height="15" fill="rgb(247,98,35)"/><text x="58.7059%" y="127.50"></text></g><g><title>adt_dtorck_constraint (613,169 samples, 0.12%)</title><rect x="59.1278%" y="85" width="0.1164%" height="15" fill="rgb(247,138,52)"/><text x="59.3778%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,156,901 samples, 0.22%)</title><rect x="59.0445%" y="101" width="0.2197%" height="15" fill="rgb(213,79,30)"/><text x="59.2945%" y="111.50"></text></g><g><title>dropck_outlives (2,486,344 samples, 0.47%)</title><rect x="58.8081%" y="117" width="0.4722%" height="15" fill="rgb(246,177,23)"/><text x="59.0581%" y="127.50"></text></g><g><title>generics_of (1,395,407 samples, 0.26%)</title><rect x="61.2266%" y="101" width="0.2650%" height="15" fill="rgb(230,62,27)"/><text x="61.4766%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,062,584 samples, 0.20%)</title><rect x="61.2898%" y="85" width="0.2018%" height="15" fill="rgb(216,154,8)"/><text x="61.5398%" y="95.50"></text></g><g><title>impl_trait_ref (1,105,328 samples, 0.21%)</title><rect x="61.5486%" y="101" width="0.2099%" height="15" fill="rgb(244,35,45)"/><text x="61.7986%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (895,287 samples, 0.17%)</title><rect x="61.5885%" y="85" width="0.1700%" height="15" fill="rgb(251,115,12)"/><text x="61.8385%" y="95.50"></text></g><g><title>predicates_of (976,995 samples, 0.19%)</title><rect x="61.7871%" y="101" width="0.1855%" height="15" fill="rgb(240,54,50)"/><text x="62.0371%" y="111.50"></text></g><g><title>predicates_defined_on (575,778 samples, 0.11%)</title><rect x="61.8633%" y="85" width="0.1093%" height="15" fill="rgb(233,84,52)"/><text x="62.1133%" y="95.50"></text></g><g><title>specializes (2,143,285 samples, 0.41%)</title><rect x="61.9727%" y="101" width="0.4070%" height="15" fill="rgb(207,117,47)"/><text x="62.2227%" y="111.50"></text></g><g><title>param_env (1,235,965 samples, 0.23%)</title><rect x="62.1450%" y="85" width="0.2347%" height="15" fill="rgb(249,43,39)"/><text x="62.3950%" y="95.50"></text></g><g><title>def_span (542,822 samples, 0.10%)</title><rect x="62.2766%" y="69" width="0.1031%" height="15" fill="rgb(209,38,44)"/><text x="62.5266%" y="79.50"></text></g><g><title>trait_impls_of (878,988 samples, 0.17%)</title><rect x="62.3858%" y="101" width="0.1669%" height="15" fill="rgb(236,212,23)"/><text x="62.6358%" y="111.50"></text></g><g><title>evaluate_obligation (17,288,225 samples, 3.28%)</title><rect x="59.2802%" y="117" width="3.2831%" height="15" fill="rgb(242,79,21)"/><text x="59.5302%" y="127.50">eva..</text></g><g><title>generics_of (1,049,790 samples, 0.20%)</title><rect x="62.6439%" y="117" width="0.1994%" height="15" fill="rgb(211,96,35)"/><text x="62.8939%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (783,887 samples, 0.15%)</title><rect x="62.6944%" y="101" width="0.1489%" height="15" fill="rgb(253,215,40)"/><text x="62.9444%" y="111.50"></text></g><g><title>evaluate_obligation (834,709 samples, 0.16%)</title><rect x="63.2185%" y="101" width="0.1585%" height="15" fill="rgb(211,81,21)"/><text x="63.4685%" y="111.50"></text></g><g><title>method_autoderef_steps (1,528,212 samples, 0.29%)</title><rect x="63.0884%" y="117" width="0.2902%" height="15" fill="rgb(208,190,38)"/><text x="63.3384%" y="127.50"></text></g><g><title>predicates_of (1,210,191 samples, 0.23%)</title><rect x="63.4181%" y="117" width="0.2298%" height="15" fill="rgb(235,213,38)"/><text x="63.6681%" y="127.50"></text></g><g><title>predicates_defined_on (828,977 samples, 0.16%)</title><rect x="63.4905%" y="101" width="0.1574%" height="15" fill="rgb(237,122,38)"/><text x="63.7405%" y="111.50"></text></g><g><title>dropck_outlives (669,987 samples, 0.13%)</title><rect x="71.2215%" y="101" width="0.1272%" height="15" fill="rgb(244,218,35)"/><text x="71.4715%" y="111.50"></text></g><g><title>generics_of (659,389 samples, 0.13%)</title><rect x="72.6988%" y="85" width="0.1252%" height="15" fill="rgb(240,68,47)"/><text x="72.9488%" y="95.50"></text></g><g><title>impl_trait_ref (941,214 samples, 0.18%)</title><rect x="72.8625%" y="85" width="0.1787%" height="15" fill="rgb(210,16,53)"/><text x="73.1125%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (734,673 samples, 0.14%)</title><rect x="72.9018%" y="69" width="0.1395%" height="15" fill="rgb(235,124,12)"/><text x="73.1518%" y="79.50"></text></g><g><title>predicates_of (880,536 samples, 0.17%)</title><rect x="73.0500%" y="85" width="0.1672%" height="15" fill="rgb(224,169,11)"/><text x="73.3000%" y="95.50"></text></g><g><title>specializes (2,436,846 samples, 0.46%)</title><rect x="73.2172%" y="85" width="0.4628%" height="15" fill="rgb(250,166,2)"/><text x="73.4672%" y="95.50"></text></g><g><title>param_env (1,372,462 samples, 0.26%)</title><rect x="73.4193%" y="69" width="0.2606%" height="15" fill="rgb(242,216,29)"/><text x="73.6693%" y="79.50"></text></g><g><title>def_span (613,917 samples, 0.12%)</title><rect x="73.5634%" y="53" width="0.1166%" height="15" fill="rgb(230,116,27)"/><text x="73.8134%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (544,157 samples, 0.10%)</title><rect x="73.5766%" y="37" width="0.1033%" height="15" fill="rgb(228,99,48)"/><text x="73.8266%" y="47.50"></text></g><g><title>evaluate_obligation (12,637,161 samples, 2.40%)</title><rect x="71.3487%" y="101" width="2.3999%" height="15" fill="rgb(253,11,6)"/><text x="71.5987%" y="111.50">ev..</text></g><g><title>is_copy_raw (567,086 samples, 0.11%)</title><rect x="73.8579%" y="101" width="0.1077%" height="15" fill="rgb(247,143,39)"/><text x="74.1079%" y="111.50"></text></g><g><title>method_autoderef_steps (842,851 samples, 0.16%)</title><rect x="74.0019%" y="101" width="0.1601%" height="15" fill="rgb(236,97,10)"/><text x="74.2519%" y="111.50"></text></g><g><title>predicates_of (667,009 samples, 0.13%)</title><rect x="74.1707%" y="101" width="0.1267%" height="15" fill="rgb(233,208,19)"/><text x="74.4207%" y="111.50"></text></g><g><title>predicates_defined_on (555,598 samples, 0.11%)</title><rect x="74.1919%" y="85" width="0.1055%" height="15" fill="rgb(216,164,2)"/><text x="74.4419%" y="95.50"></text></g><g><title>typeck (55,746,220 samples, 10.59%)</title><rect x="63.7656%" y="117" width="10.5865%" height="15" fill="rgb(220,129,5)"/><text x="64.0156%" y="127.50">typeck</text></g><g><title>item_bodies_checking (202,689,097 samples, 38.49%)</title><rect x="35.8944%" y="165" width="38.4919%" height="15" fill="rgb(242,17,10)"/><text x="36.1444%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (202,685,087 samples, 38.49%)</title><rect x="35.8952%" y="149" width="38.4911%" height="15" fill="rgb(242,107,0)"/><text x="36.1452%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (202,299,179 samples, 38.42%)</title><rect x="35.9685%" y="133" width="38.4178%" height="15" fill="rgb(251,28,31)"/><text x="36.2185%" y="143.50">typeck</text></g><g><title>evaluate_obligation (745,529 samples, 0.14%)</title><rect x="75.2076%" y="117" width="0.1416%" height="15" fill="rgb(233,223,10)"/><text x="75.4576%" y="127.50"></text></g><g><title>item_types_checking (5,171,658 samples, 0.98%)</title><rect x="74.3863%" y="165" width="0.9821%" height="15" fill="rgb(215,21,27)"/><text x="74.6363%" y="175.50"></text></g><g><title>check_mod_item_types (5,155,088 samples, 0.98%)</title><rect x="74.3894%" y="149" width="0.9790%" height="15" fill="rgb(232,23,21)"/><text x="74.6394%" y="159.50"></text></g><g><title>typeck (1,292,815 samples, 0.25%)</title><rect x="75.1229%" y="133" width="0.2455%" height="15" fill="rgb(244,5,23)"/><text x="75.3729%" y="143.50"></text></g><g><title>fn_sig (1,207,104 samples, 0.23%)</title><rect x="75.6207%" y="133" width="0.2292%" height="15" fill="rgb(226,81,46)"/><text x="75.8707%" y="143.50"></text></g><g><title>generics_of (1,447,945 samples, 0.27%)</title><rect x="75.8500%" y="133" width="0.2750%" height="15" fill="rgb(247,70,30)"/><text x="76.1000%" y="143.50"></text></g><g><title>late_bound_vars_map (1,652,419 samples, 0.31%)</title><rect x="76.3787%" y="85" width="0.3138%" height="15" fill="rgb(212,68,19)"/><text x="76.6287%" y="95.50"></text></g><g><title>resolve_lifetimes (1,609,158 samples, 0.31%)</title><rect x="76.3870%" y="69" width="0.3056%" height="15" fill="rgb(240,187,13)"/><text x="76.6370%" y="79.50"></text></g><g><title>lint_levels (851,239 samples, 0.16%)</title><rect x="76.5309%" y="53" width="0.1617%" height="15" fill="rgb(223,113,26)"/><text x="76.7809%" y="63.50"></text></g><g><title>explicit_predicates_of (2,314,005 samples, 0.44%)</title><rect x="76.2635%" y="101" width="0.4394%" height="15" fill="rgb(206,192,2)"/><text x="76.5135%" y="111.50"></text></g><g><title>predicates_of (3,634,537 samples, 0.69%)</title><rect x="76.1597%" y="133" width="0.6902%" height="15" fill="rgb(241,108,4)"/><text x="76.4097%" y="143.50"></text></g><g><title>predicates_defined_on (3,420,644 samples, 0.65%)</title><rect x="76.2003%" y="117" width="0.6496%" height="15" fill="rgb(247,173,49)"/><text x="76.4503%" y="127.50"></text></g><g><title>inferred_outlives_of (773,768 samples, 0.15%)</title><rect x="76.7029%" y="101" width="0.1469%" height="15" fill="rgb(224,114,35)"/><text x="76.9529%" y="111.50"></text></g><g><title>inferred_outlives_crate (695,348 samples, 0.13%)</title><rect x="76.7178%" y="85" width="0.1321%" height="15" fill="rgb(245,159,27)"/><text x="76.9678%" y="95.50"></text></g><g><title>type_collecting (8,201,851 samples, 1.56%)</title><rect x="75.3704%" y="165" width="1.5576%" height="15" fill="rgb(245,172,44)"/><text x="75.6204%" y="175.50"></text></g><g><title>collect_mod_item_types (8,181,351 samples, 1.55%)</title><rect x="75.3743%" y="149" width="1.5537%" height="15" fill="rgb(236,23,11)"/><text x="75.6243%" y="159.50"></text></g><g><title>evaluate_obligation (1,416,925 samples, 0.27%)</title><rect x="79.2994%" y="133" width="0.2691%" height="15" fill="rgb(205,117,38)"/><text x="79.5494%" y="143.50"></text></g><g><title>implied_outlives_bounds (995,282 samples, 0.19%)</title><rect x="79.5748%" y="133" width="0.1890%" height="15" fill="rgb(237,72,25)"/><text x="79.8248%" y="143.50"></text></g><g><title>param_env (3,597,615 samples, 0.68%)</title><rect x="79.8430%" y="133" width="0.6832%" height="15" fill="rgb(244,70,9)"/><text x="80.0930%" y="143.50"></text></g><g><title>region_scope_tree (1,773,394 samples, 0.34%)</title><rect x="80.5367%" y="133" width="0.3368%" height="15" fill="rgb(217,125,39)"/><text x="80.7867%" y="143.50"></text></g><g><title>check_impl_item_well_formed (19,935,697 samples, 3.79%)</title><rect x="77.1012%" y="149" width="3.7859%" height="15" fill="rgb(235,36,10)"/><text x="77.3512%" y="159.50">chec..</text></g><g><title>evaluate_obligation (2,020,993 samples, 0.38%)</title><rect x="82.3364%" y="133" width="0.3838%" height="15" fill="rgb(251,123,47)"/><text x="82.5864%" y="143.50"></text></g><g><title>param_env (1,855,258 samples, 0.35%)</title><rect x="82.8071%" y="133" width="0.3523%" height="15" fill="rgb(221,13,13)"/><text x="83.0571%" y="143.50"></text></g><g><title>trait_impls_of (570,546 samples, 0.11%)</title><rect x="83.2672%" y="133" width="0.1084%" height="15" fill="rgb(238,131,9)"/><text x="83.5172%" y="143.50"></text></g><g><title>check_item_well_formed (13,420,378 samples, 2.55%)</title><rect x="80.8872%" y="149" width="2.5486%" height="15" fill="rgb(211,50,8)"/><text x="81.1372%" y="159.50">ch..</text></g><g><title>analysis (439,209,820 samples, 83.41%)</title><rect x="0.1466%" y="197" width="83.4085%" height="15" fill="rgb(245,182,24)"/><text x="0.3966%" y="207.50">analysis</text></g><g><title>type_check_crate (269,753,643 samples, 51.23%)</title><rect x="32.3273%" y="181" width="51.2278%" height="15" fill="rgb(242,14,37)"/><text x="32.5773%" y="191.50">type_check_crate</text></g><g><title>wf_checking (34,871,058 samples, 6.62%)</title><rect x="76.9329%" y="165" width="6.6222%" height="15" fill="rgb(246,228,12)"/><text x="77.1829%" y="175.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (628,606 samples, 0.12%)</title><rect x="83.4358%" y="149" width="0.1194%" height="15" fill="rgb(213,55,15)"/><text x="83.6858%" y="159.50"></text></g><g><title>metadata_register_crate (1,552,228 samples, 0.29%)</title><rect x="90.4523%" y="149" width="0.2948%" height="15" fill="rgb(209,9,3)"/><text x="90.7023%" y="159.50"></text></g><g><title>metadata_register_crate (552,887 samples, 0.10%)</title><rect x="90.6421%" y="133" width="0.1050%" height="15" fill="rgb(230,59,30)"/><text x="90.8921%" y="143.50"></text></g><g><title>macro_expand_crate (37,553,698 samples, 7.13%)</title><rect x="83.8144%" y="181" width="7.1317%" height="15" fill="rgb(209,121,21)"/><text x="84.0644%" y="191.50">macro_expa..</text></g><g><title>expand_crate (37,540,868 samples, 7.13%)</title><rect x="83.8168%" y="165" width="7.1292%" height="15" fill="rgb(220,109,13)"/><text x="84.0668%" y="175.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (1,047,632 samples, 0.20%)</title><rect x="90.7471%" y="149" width="0.1990%" height="15" fill="rgb(232,18,1)"/><text x="90.9971%" y="159.50"></text></g><g><title>late_resolve_crate (6,844,606 samples, 1.30%)</title><rect x="91.1170%" y="165" width="1.2998%" height="15" fill="rgb(215,41,42)"/><text x="91.3670%" y="175.50"></text></g><g><title>configure_and_expand (46,779,601 samples, 8.88%)</title><rect x="83.6365%" y="197" width="8.8837%" height="15" fill="rgb(224,123,36)"/><text x="83.8865%" y="207.50">configure_and..</text></g><g><title>resolve_crate (7,797,347 samples, 1.48%)</title><rect x="91.0394%" y="181" width="1.4808%" height="15" fill="rgb(240,125,3)"/><text x="91.2894%" y="191.50"></text></g><g><title>drop_ast (1,035,851 samples, 0.20%)</title><rect x="92.5202%" y="197" width="0.1967%" height="15" fill="rgb(205,98,50)"/><text x="92.7702%" y="207.50"></text></g><g><title>early_lint_checks (1,662,119 samples, 0.32%)</title><rect x="92.7212%" y="197" width="0.3156%" height="15" fill="rgb(205,185,37)"/><text x="92.9712%" y="207.50"></text></g><g><title>free_global_ctxt (6,886,716 samples, 1.31%)</title><rect x="93.0368%" y="197" width="1.3078%" height="15" fill="rgb(238,207,15)"/><text x="93.2868%" y="207.50"></text></g><g><title>generate_crate_metadata (4,463,650 samples, 0.85%)</title><rect x="94.3446%" y="197" width="0.8477%" height="15" fill="rgb(213,199,42)"/><text x="94.5946%" y="207.50"></text></g><g><title>hir_lowering (12,829,563 samples, 2.44%)</title><rect x="95.1923%" y="197" width="2.4364%" height="15" fill="rgb(235,201,11)"/><text x="95.4423%" y="207.50">hi..</text></g><g><title>parse_crate (9,477,565 samples, 1.80%)</title><rect x="97.6423%" y="197" width="1.7998%" height="15" fill="rgb(207,46,11)"/><text x="97.8923%" y="207.50">p..</text></g><g><title>self_profile_alloc_query_strings (2,042,712 samples, 0.39%)</title><rect x="99.4848%" y="197" width="0.3879%" height="15" fill="rgb(241,35,35)"/><text x="99.7348%" y="207.50"></text></g><g><title>all (526,576,552 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (526,576,552 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (559,027 samples, 0.11%)</title><rect x="99.8938%" y="197" width="0.1062%" height="15" fill="rgb(219,102,11)"/><text x="100.1438%" y="207.50"></text></g></svg></svg>